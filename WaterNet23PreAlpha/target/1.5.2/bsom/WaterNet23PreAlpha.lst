
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23PreAlpha/target/1.5.2/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b890  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000df8b0  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000108  2003d360  000df8b4  0002d360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001388  2003d468  2003d468  0003d468  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000df9bc  000df9bc  0002f9bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000df9e4  000df9e4  0002f9e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001a00f7  00000000  00000000  0002f9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000207ea  00000000  00000000  001cfadf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002edb3  00000000  00000000  001f02c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003518  00000000  00000000  0021f07c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000063f0  00000000  00000000  00222594  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004f602  00000000  00000000  00228984  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000589f5  00000000  00000000  00277f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00111703  00000000  00000000  002d097b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0001047c  00000000  00000000  003e2080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f008 fadc 	bl	dc5ee <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f008 fafc 	bl	dc63a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d360 	.word	0x2003d360
   d404c:	000df8b4 	.word	0x000df8b4
   d4050:	2003d468 	.word	0x2003d468
   d4054:	2003d468 	.word	0x2003d468
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f007 fa7b 	bl	db558 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000df8a4 	.word	0x000df8a4
   d4084:	000df824 	.word	0x000df824

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 b854 	b.w	d5134 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fff1 	bl	d5074 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f007 ba21 	b.w	db4dc <_post_loop>

000d409a <_Znwj>:
   d409a:	f003 bfcb 	b.w	d8034 <malloc>

000d409e <_ZdlPv>:
   d409e:	f003 bfd1 	b.w	d8044 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f003 bfcf 	b.w	d8044 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f003 fee2 	bl	d7e78 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d7b19 	.word	0x000d7b19

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3

000d40d6 <_ZN8particle9LEDStatus6updateEm>:

inline bool particle::LEDStatus::isActive() const {
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
   d40d6:	4770      	bx	lr

000d40d8 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40d8:	7c03      	ldrb	r3, [r0, #16]
   d40da:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40de:	4602      	mov	r2, r0
   d40e0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40e4:	b12b      	cbz	r3, d40f2 <_ZN4File9availableEv+0x1a>
   d40e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40e8:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40ea:	1a18      	subs	r0, r3, r0
   d40ec:	bf48      	it	mi
   d40ee:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40f2:	4770      	bx	lr

000d40f4 <_Z13StatusHandlerv>:
    }
}

void StatusHandler(){
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   d40f4:	4b0d      	ldr	r3, [pc, #52]	; (d412c <_Z13StatusHandlerv+0x38>)
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
   d40f6:	781a      	ldrb	r2, [r3, #0]
}

void StatusHandler(){
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
   d40f8:	4b0d      	ldr	r3, [pc, #52]	; (d4130 <_Z13StatusHandlerv+0x3c>)
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
   d40fa:	781b      	ldrb	r3, [r3, #0]
   d40fc:	009b      	lsls	r3, r3, #2
   d40fe:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
        Serial1.println(dataOut);
    }
}

void StatusHandler(){
    statusFlags = LTEAvail;
   d4102:	4a0c      	ldr	r2, [pc, #48]	; (d4134 <_Z13StatusHandlerv+0x40>)
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
   d4104:	7812      	ldrb	r2, [r2, #0]
   d4106:	4313      	orrs	r3, r2

void StatusHandler(){
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
   d4108:	4a0b      	ldr	r2, [pc, #44]	; (d4138 <_Z13StatusHandlerv+0x44>)
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
   d410a:	7812      	ldrb	r2, [r2, #0]
   d410c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
void StatusHandler(){
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
   d4110:	4a0a      	ldr	r2, [pc, #40]	; (d413c <_Z13StatusHandlerv+0x48>)
    statusFlags |= lowBattery << 5;
   d4112:	7812      	ldrb	r2, [r2, #0]
   d4114:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   d4118:	4a09      	ldr	r2, [pc, #36]	; (d4140 <_Z13StatusHandlerv+0x4c>)
   d411a:	7812      	ldrb	r2, [r2, #0]
   d411c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4120:	4a08      	ldr	r2, [pc, #32]	; (d4144 <_Z13StatusHandlerv+0x50>)
   d4122:	7013      	strb	r3, [r2, #0]
    statusReady = true;
   d4124:	4b08      	ldr	r3, [pc, #32]	; (d4148 <_Z13StatusHandlerv+0x54>)
   d4126:	2201      	movs	r2, #1
   d4128:	701a      	strb	r2, [r3, #0]
   d412a:	4770      	bx	lr
   d412c:	2003db32 	.word	0x2003db32
   d4130:	2003db31 	.word	0x2003db31
   d4134:	2003da2e 	.word	0x2003da2e
   d4138:	2003e2cc 	.word	0x2003e2cc
   d413c:	2003e214 	.word	0x2003e214
   d4140:	2003d484 	.word	0x2003d484
   d4144:	2003e2d4 	.word	0x2003e2d4
   d4148:	2003e2b8 	.word	0x2003e2b8

000d414c <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d414c:	6803      	ldr	r3, [r0, #0]
   d414e:	4718      	bx	r3

000d4150 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4150:	2a01      	cmp	r2, #1
   d4152:	d002      	beq.n	d415a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d4154:	2a02      	cmp	r2, #2
   d4156:	d002      	beq.n	d415e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d4158:	e004      	b.n	d4164 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d415a:	6001      	str	r1, [r0, #0]
	      break;
   d415c:	e002      	b.n	d4164 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d415e:	680b      	ldr	r3, [r1, #0]
   d4160:	b100      	cbz	r0, d4164 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d4162:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4164:	2000      	movs	r0, #0
   d4166:	4770      	bx	lr

000d4168 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4168:	4770      	bx	lr
	...

000d416c <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d416c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d416e:	4602      	mov	r2, r0
   d4170:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4172:	7913      	ldrb	r3, [r2, #4]
   d4174:	6895      	ldr	r5, [r2, #8]
   d4176:	b133      	cbz	r3, d4186 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4178:	b93d      	cbnz	r5, d418a <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d417a:	490c      	ldr	r1, [pc, #48]	; (d41ac <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d417c:	b004      	add	sp, #16
   d417e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4182:	f006 bd01 	b.w	dab88 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4186:	4b0a      	ldr	r3, [pc, #40]	; (d41b0 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4188:	e000      	b.n	d418c <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d418a:	4b0a      	ldr	r3, [pc, #40]	; (d41b4 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d418c:	7b16      	ldrb	r6, [r2, #12]
   d418e:	4c0a      	ldr	r4, [pc, #40]	; (d41b8 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4190:	490a      	ldr	r1, [pc, #40]	; (d41bc <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4192:	7b52      	ldrb	r2, [r2, #13]
   d4194:	9202      	str	r2, [sp, #8]
   d4196:	2e01      	cmp	r6, #1
   d4198:	bf08      	it	eq
   d419a:	4621      	moveq	r1, r4
   d419c:	9101      	str	r1, [sp, #4]
   d419e:	9500      	str	r5, [sp, #0]
   d41a0:	4a07      	ldr	r2, [pc, #28]	; (d41c0 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d41a2:	2100      	movs	r1, #0
   d41a4:	f006 fd2d 	bl	dac02 <_ZN5Print11printf_implEbPKcz>
  }
   d41a8:	b004      	add	sp, #16
   d41aa:	bd70      	pop	{r4, r5, r6, pc}
   d41ac:	000deb6d 	.word	0x000deb6d
   d41b0:	000def85 	.word	0x000def85
   d41b4:	000deb5c 	.word	0x000deb5c
   d41b8:	000deb65 	.word	0x000deb65
   d41bc:	000deb69 	.word	0x000deb69
   d41c0:	000deb83 	.word	0x000deb83

000d41c4 <_ZN4FileD0Ev>:
   d41c4:	b510      	push	{r4, lr}
   d41c6:	2134      	movs	r1, #52	; 0x34
   d41c8:	4604      	mov	r4, r0
   d41ca:	f007 fa96 	bl	db6fa <_ZdlPvj>
   d41ce:	4620      	mov	r0, r4
   d41d0:	bd10      	pop	{r4, pc}

000d41d2 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41d2:	6943      	ldr	r3, [r0, #20]
   d41d4:	b113      	cbz	r3, d41dc <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41d6:	6983      	ldr	r3, [r0, #24]
   d41d8:	300c      	adds	r0, #12
   d41da:	4718      	bx	r3
   d41dc:	4770      	bx	lr

000d41de <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d41de:	3010      	adds	r0, #16
   d41e0:	f002 b914 	b.w	d640c <_ZN7FatFile5writeEPKvj>

000d41e4 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d41e4:	b507      	push	{r0, r1, r2, lr}
   d41e6:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d41e8:	2201      	movs	r2, #1
   d41ea:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d41ee:	3010      	adds	r0, #16
   d41f0:	4619      	mov	r1, r3
   d41f2:	f002 f90b 	bl	d640c <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d41f6:	b003      	add	sp, #12
   d41f8:	f85d fb04 	ldr.w	pc, [sp], #4

000d41fc <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d41fc:	3010      	adds	r0, #16
   d41fe:	f002 b879 	b.w	d62f4 <_ZN7FatFile4syncEv>

000d4202 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d4202:	3010      	adds	r0, #16
   d4204:	f001 bf50 	b.w	d60a8 <_ZN7FatFile4peekEv>

000d4208 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4208:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d420a:	2201      	movs	r2, #1
   d420c:	f10d 0107 	add.w	r1, sp, #7
   d4210:	3010      	adds	r0, #16
   d4212:	f001 fe96 	bl	d5f42 <_ZN7FatFile4readEPvj>
   d4216:	2801      	cmp	r0, #1
   d4218:	bf0c      	ite	eq
   d421a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d421e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   d4222:	b003      	add	sp, #12
   d4224:	f85d fb04 	ldr.w	pc, [sp], #4

000d4228 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4228:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d422a:	2100      	movs	r1, #0
   d422c:	4604      	mov	r4, r0
   d422e:	4608      	mov	r0, r1
   d4230:	f003 fc1a 	bl	d7a68 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4234:	a902      	add	r1, sp, #8
   d4236:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4238:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d423a:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d423e:	f003 fc2b 	bl	d7a98 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4242:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4244:	b10c      	cbz	r4, d424a <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4246:	2301      	movs	r3, #1
   d4248:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d424a:	2100      	movs	r1, #0
   d424c:	2001      	movs	r0, #1
   d424e:	f003 fc0b 	bl	d7a68 <os_thread_scheduling>
            }
        }
        if (t) {
   d4252:	b12c      	cbz	r4, d4260 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4254:	6823      	ldr	r3, [r4, #0]
   d4256:	4620      	mov	r0, r4
   d4258:	689b      	ldr	r3, [r3, #8]
   d425a:	4798      	blx	r3
            t->running = false;
   d425c:	2300      	movs	r3, #0
   d425e:	7123      	strb	r3, [r4, #4]
        }
    }
   d4260:	b002      	add	sp, #8
   d4262:	bd10      	pop	{r4, pc}

000d4264 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4264:	b510      	push	{r4, lr}
   d4266:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4268:	6800      	ldr	r0, [r0, #0]
   d426a:	b108      	cbz	r0, d4270 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d426c:	f003 feea 	bl	d8044 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4270:	4620      	mov	r0, r4
   d4272:	bd10      	pop	{r4, pc}

000d4274 <_ZN8particle9LEDStatusD1Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d4274:	b510      	push	{r4, lr}
   d4276:	4b05      	ldr	r3, [pc, #20]	; (d428c <_ZN8particle9LEDStatusD1Ev+0x18>)
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d4278:	2200      	movs	r2, #0

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d427a:	4604      	mov	r4, r0
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d427c:	4611      	mov	r1, r2

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d427e:	f840 3b04 	str.w	r3, [r0], #4
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d4282:	f003 fe19 	bl	d7eb8 <led_set_status_active>
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}
   d4286:	4620      	mov	r0, r4
   d4288:	bd10      	pop	{r4, pc}
   d428a:	bf00      	nop
   d428c:	000deb10 	.word	0x000deb10

000d4290 <_ZN8particle9LEDStatusD0Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d4290:	b510      	push	{r4, lr}
   d4292:	4604      	mov	r4, r0
    setActive(false);
}
   d4294:	f7ff ffee 	bl	d4274 <_ZN8particle9LEDStatusD1Ev>
   d4298:	4620      	mov	r0, r4
   d429a:	2120      	movs	r1, #32
   d429c:	f007 fa2d 	bl	db6fa <_ZdlPvj>
   d42a0:	4620      	mov	r0, r4
   d42a2:	bd10      	pop	{r4, pc}

000d42a4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d42a4:	4b0a      	ldr	r3, [pc, #40]	; (d42d0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d42a6:	b510      	push	{r4, lr}
   d42a8:	4604      	mov	r4, r0
   d42aa:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d42ac:	f005 fc74 	bl	d9b98 <_ZN5spark10LogManager8instanceEv>
   d42b0:	4621      	mov	r1, r4
   d42b2:	f005 fe61 	bl	d9f78 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d42b6:	f007 f8cd 	bl	db454 <_Z16_fetch_usbserialv>
   d42ba:	f007 f8bf 	bl	db43c <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d42be:	4620      	mov	r0, r4
   d42c0:	4b04      	ldr	r3, [pc, #16]	; (d42d4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d42c2:	f840 3b04 	str.w	r3, [r0], #4
   d42c6:	f005 fd5d 	bl	d9d84 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d42ca:	4620      	mov	r0, r4
   d42cc:	bd10      	pop	{r4, pc}
   d42ce:	bf00      	nop
   d42d0:	000deb24 	.word	0x000deb24
   d42d4:	000deaf8 	.word	0x000deaf8

000d42d8 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d42d8:	b510      	push	{r4, lr}
   d42da:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d42dc:	f7ff ffe2 	bl	d42a4 <_ZN5spark16SerialLogHandlerD1Ev>
   d42e0:	4620      	mov	r0, r4
   d42e2:	2124      	movs	r1, #36	; 0x24
   d42e4:	f007 fa09 	bl	db6fa <_ZdlPvj>
   d42e8:	4620      	mov	r0, r4
   d42ea:	bd10      	pop	{r4, pc}

000d42ec <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42ec:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d42ee:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42f0:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d42f2:	b113      	cbz	r3, d42fa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42f4:	2203      	movs	r2, #3
   d42f6:	4601      	mov	r1, r0
   d42f8:	4798      	blx	r3
    }
   d42fa:	4620      	mov	r0, r4
   d42fc:	bd10      	pop	{r4, pc}

000d42fe <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d42fe:	6803      	ldr	r3, [r0, #0]
   d4300:	b2c9      	uxtb	r1, r1
   d4302:	689b      	ldr	r3, [r3, #8]
   d4304:	4718      	bx	r3
	...

000d4308 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4308:	b5f0      	push	{r4, r5, r6, r7, lr}
   d430a:	2500      	movs	r5, #0
   d430c:	468e      	mov	lr, r1
   d430e:	4915      	ldr	r1, [pc, #84]	; (d4364 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d4310:	7105      	strb	r5, [r0, #4]
   d4312:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4314:	6145      	str	r5, [r0, #20]
   d4316:	6001      	str	r1, [r0, #0]
   d4318:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d431a:	e892 0003 	ldmia.w	r2, {r0, r1}
   d431e:	b085      	sub	sp, #20
   d4320:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d4322:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4326:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d432a:	e896 0003 	ldmia.w	r6, {r0, r1}
   d432e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4332:	e897 0003 	ldmia.w	r7, {r0, r1}
   d4336:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d433a:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d433c:	6960      	ldr	r0, [r4, #20]
   d433e:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4340:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4342:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4344:	69a0      	ldr	r0, [r4, #24]
   d4346:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4348:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d434a:	e88d 0028 	stmia.w	sp, {r3, r5}
   d434e:	4a06      	ldr	r2, [pc, #24]	; (d4368 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d4350:	4623      	mov	r3, r4
   d4352:	4671      	mov	r1, lr
   d4354:	f104 0008 	add.w	r0, r4, #8
   d4358:	f003 fb8e 	bl	d7a78 <os_timer_create>
    }
   d435c:	4620      	mov	r0, r4
   d435e:	b005      	add	sp, #20
   d4360:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4362:	bf00      	nop
   d4364:	000deae4 	.word	0x000deae4
   d4368:	000d4229 	.word	0x000d4229

000d436c <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d436c:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d436e:	6880      	ldr	r0, [r0, #8]
   d4370:	2300      	movs	r3, #0
   d4372:	b138      	cbz	r0, d4384 <_ZN5Timer5_stopEjb+0x18>
   d4374:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4378:	2102      	movs	r1, #2
   d437a:	f003 fb95 	bl	d7aa8 <os_timer_change>
   d437e:	fab0 f080 	clz	r0, r0
   d4382:	0940      	lsrs	r0, r0, #5
    }
   d4384:	b003      	add	sp, #12
   d4386:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d438c <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d438c:	b538      	push	{r3, r4, r5, lr}
   d438e:	4b10      	ldr	r3, [pc, #64]	; (d43d0 <_ZN5TimerD1Ev+0x44>)
   d4390:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d4392:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4394:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d4396:	b1a3      	cbz	r3, d43c2 <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4398:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d439c:	2200      	movs	r2, #0
   d439e:	f7ff ffe5 	bl	d436c <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d43a2:	2100      	movs	r1, #0
   d43a4:	68a0      	ldr	r0, [r4, #8]
   d43a6:	f003 fba7 	bl	d7af8 <os_timer_set_id>
            while (running) {
   d43aa:	7923      	ldrb	r3, [r4, #4]
   d43ac:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d43b0:	b113      	cbz	r3, d43b8 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d43b2:	f003 fb41 	bl	d7a38 <os_thread_yield>
   d43b6:	e7f8      	b.n	d43aa <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d43b8:	4629      	mov	r1, r5
   d43ba:	68a0      	ldr	r0, [r4, #8]
   d43bc:	f003 fb64 	bl	d7a88 <os_timer_destroy>
            handle = nullptr;
   d43c0:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d43c2:	f104 000c 	add.w	r0, r4, #12
   d43c6:	f7ff ff91 	bl	d42ec <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43ca:	4620      	mov	r0, r4
   d43cc:	bd38      	pop	{r3, r4, r5, pc}
   d43ce:	bf00      	nop
   d43d0:	000deae4 	.word	0x000deae4

000d43d4 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d43d4:	b510      	push	{r4, lr}
   d43d6:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43d8:	f7ff ffd8 	bl	d438c <_ZN5TimerD1Ev>
   d43dc:	4620      	mov	r0, r4
   d43de:	211c      	movs	r1, #28
   d43e0:	f007 f98b 	bl	db6fa <_ZdlPvj>
   d43e4:	4620      	mov	r0, r4
   d43e6:	bd10      	pop	{r4, pc}

000d43e8 <_ZN5Timer5startEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43ea:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43ec:	2200      	movs	r2, #0
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43ee:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43f0:	4611      	mov	r1, r2
   d43f2:	f7ff ffbb 	bl	d436c <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d43f6:	68a8      	ldr	r0, [r5, #8]
   d43f8:	2300      	movs	r3, #0
   d43fa:	b140      	cbz	r0, d440e <_ZN5Timer5startEj+0x26>
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	9400      	str	r4, [sp, #0]
   d4400:	461a      	mov	r2, r3
   d4402:	4619      	mov	r1, r3
   d4404:	f003 fb50 	bl	d7aa8 <os_timer_change>
   d4408:	fab0 f080 	clz	r0, r0
   d440c:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d440e:	b003      	add	sp, #12
   d4410:	bd30      	pop	{r4, r5, pc}

000d4412 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:

inline LEDPattern particle::LEDStatus::pattern() const {
    return (LEDPattern)d_.pattern;
}

inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   d4412:	b510      	push	{r4, lr}
   d4414:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   d4416:	2200      	movs	r2, #0
   d4418:	7c40      	ldrb	r0, [r0, #17]
   d441a:	f003 fd77 	bl	d7f0c <led_pattern_period>
}

inline void particle::LEDStatus::setPeriod(uint16_t period) {
    // Pattern period cannot be set for custom pattern type
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   d441e:	7c63      	ldrb	r3, [r4, #17]
   d4420:	2b0f      	cmp	r3, #15
        d_.period = period;
   d4422:	bf18      	it	ne
   d4424:	8320      	strhne	r0, [r4, #24]
   d4426:	bd10      	pop	{r4, pc}

000d4428 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   d4428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(offloadMode){
   d442a:	4b2e      	ldr	r3, [pc, #184]	; (d44e4 <_Z10LEDHandlerv+0xbc>)
   d442c:	4d2e      	ldr	r5, [pc, #184]	; (d44e8 <_Z10LEDHandlerv+0xc0>)
   d442e:	781b      	ldrb	r3, [r3, #0]
   d4430:	b133      	cbz	r3, d4440 <_Z10LEDHandlerv+0x18>
    return d_.color;
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   d4432:	7c6b      	ldrb	r3, [r5, #17]
   d4434:	2b0f      	cmp	r3, #15
   d4436:	d14f      	bne.n	d44d8 <_Z10LEDHandlerv+0xb0>
inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}

inline void particle::LEDStatus::setColor(uint32_t color) {
    d_.color = color;
   d4438:	23ff      	movs	r3, #255	; 0xff
   d443a:	616b      	str	r3, [r5, #20]
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
   d443c:	211e      	movs	r1, #30
   d443e:	e047      	b.n	d44d0 <_Z10LEDHandlerv+0xa8>
        return;                
    }
    if(lowBattery){
   d4440:	4b2a      	ldr	r3, [pc, #168]	; (d44ec <_Z10LEDHandlerv+0xc4>)
   d4442:	781b      	ldrb	r3, [r3, #0]
   d4444:	b95b      	cbnz	r3, d445e <_Z10LEDHandlerv+0x36>
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(logSensors){
   d4446:	4b2a      	ldr	r3, [pc, #168]	; (d44f0 <_Z10LEDHandlerv+0xc8>)
   d4448:	781b      	ldrb	r3, [r3, #0]
   d444a:	b95b      	cbnz	r3, d4464 <_Z10LEDHandlerv+0x3c>
        SetPattern = LED_PATTERN_SOLID;
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(manualRC){
   d444c:	4b29      	ldr	r3, [pc, #164]	; (d44f4 <_Z10LEDHandlerv+0xcc>)
   d444e:	781b      	ldrb	r3, [r3, #0]
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_SLOW;
    }
    else{
        SetSpeed = LED_SPEED_NORMAL;
   d4450:	2b00      	cmp	r3, #0
   d4452:	bf15      	itete	ne
   d4454:	270a      	movne	r7, #10
   d4456:	2714      	moveq	r7, #20
   d4458:	2602      	movne	r6, #2
   d445a:	2603      	moveq	r6, #3
   d445c:	e004      	b.n	d4468 <_Z10LEDHandlerv+0x40>
        status.setSpeed(LED_SPEED_FAST);
        return;                
    }
    if(lowBattery){
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_NORMAL;
   d445e:	2714      	movs	r7, #20
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
        return;                
    }
    if(lowBattery){
        SetPattern = LED_PATTERN_BLINK;
   d4460:	2602      	movs	r6, #2
   d4462:	e001      	b.n	d4468 <_Z10LEDHandlerv+0x40>
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(logSensors){
        SetPattern = LED_PATTERN_SOLID;
        SetSpeed = LED_SPEED_NORMAL;
   d4464:	2714      	movs	r7, #20
    if(lowBattery){
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(logSensors){
        SetPattern = LED_PATTERN_SOLID;
   d4466:	2601      	movs	r6, #1
        SetPattern = LED_PATTERN_FADE;
    }

    statusMode = LTEAvail;
    statusMode |= XBeeAvail << 1;
    statusMode |= BLEAvail << 2;
   d4468:	4a23      	ldr	r2, [pc, #140]	; (d44f8 <_Z10LEDHandlerv+0xd0>)
        SetSpeed = LED_SPEED_NORMAL;
        SetPattern = LED_PATTERN_FADE;
    }

    statusMode = LTEAvail;
    statusMode |= XBeeAvail << 1;
   d446a:	4b24      	ldr	r3, [pc, #144]	; (d44fc <_Z10LEDHandlerv+0xd4>)
    statusMode |= BLEAvail << 2;
   d446c:	7814      	ldrb	r4, [r2, #0]
   d446e:	781b      	ldrb	r3, [r3, #0]
   d4470:	00a4      	lsls	r4, r4, #2
   d4472:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
    else{
        SetSpeed = LED_SPEED_NORMAL;
        SetPattern = LED_PATTERN_FADE;
    }

    statusMode = LTEAvail;
   d4476:	4b22      	ldr	r3, [pc, #136]	; (d4500 <_Z10LEDHandlerv+0xd8>)
    statusMode |= XBeeAvail << 1;
    statusMode |= BLEAvail << 2;
   d4478:	781b      	ldrb	r3, [r3, #0]
   d447a:	431c      	orrs	r4, r3
   d447c:	b264      	sxtb	r4, r4
    Serial.printlnf("Status: %d",statusMode);
   d447e:	f006 ffe9 	bl	db454 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4482:	4623      	mov	r3, r4
   d4484:	4a1f      	ldr	r2, [pc, #124]	; (d4504 <_Z10LEDHandlerv+0xdc>)
   d4486:	2101      	movs	r1, #1
    switch (statusMode){
   d4488:	3c01      	subs	r4, #1
   d448a:	f006 fbba 	bl	dac02 <_ZN5Print11printf_implEbPKcz>
   d448e:	2c06      	cmp	r4, #6
   d4490:	d814      	bhi.n	d44bc <_Z10LEDHandlerv+0x94>
   d4492:	e8df f004 	tbb	[pc, r4]
   d4496:	0e10      	.short	0x0e10
   d4498:	0406090b 	.word	0x0406090b
   d449c:	16          	.byte	0x16
   d449d:	00          	.byte	0x00
    case 7:
        SetColor = RGB_COLOR_CYAN;
        break;
    case 6:
        SetColor = RGB_COLOR_YELLOW;
   d449e:	4b1a      	ldr	r3, [pc, #104]	; (d4508 <_Z10LEDHandlerv+0xe0>)
   d44a0:	e011      	b.n	d44c6 <_Z10LEDHandlerv+0x9e>
        break;
    case 5:
        SetColor = RGB_COLOR_WHITE;
   d44a2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
        break;
   d44a6:	e00e      	b.n	d44c6 <_Z10LEDHandlerv+0x9e>
    case 4:
        SetColor = RGB_COLOR_BLUE;
   d44a8:	23ff      	movs	r3, #255	; 0xff
        break;
   d44aa:	e00c      	b.n	d44c6 <_Z10LEDHandlerv+0x9e>
    case 3:
        SetColor = RGB_COLOR_GREEN;
   d44ac:	f44f 437f 	mov.w	r3, #65280	; 0xff00
        break;
   d44b0:	e009      	b.n	d44c6 <_Z10LEDHandlerv+0x9e>
    case 2:
        SetColor = RGB_COLOR_ORANGE;
   d44b2:	4b16      	ldr	r3, [pc, #88]	; (d450c <_Z10LEDHandlerv+0xe4>)
        break;
   d44b4:	e007      	b.n	d44c6 <_Z10LEDHandlerv+0x9e>
    case 1:
        SetColor = RGB_COLOR_MAGENTA;
   d44b6:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
        break;
   d44ba:	e004      	b.n	d44c6 <_Z10LEDHandlerv+0x9e>
    case 0:
        SetColor = RGB_COLOR_RED;
   d44bc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
        break;
   d44c0:	e001      	b.n	d44c6 <_Z10LEDHandlerv+0x9e>
    statusMode |= XBeeAvail << 1;
    statusMode |= BLEAvail << 2;
    Serial.printlnf("Status: %d",statusMode);
    switch (statusMode){
    case 7:
        SetColor = RGB_COLOR_CYAN;
   d44c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return d_.color;
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   d44c6:	7c6a      	ldrb	r2, [r5, #17]
   d44c8:	2a0f      	cmp	r2, #15
   d44ca:	d108      	bne.n	d44de <_Z10LEDHandlerv+0xb6>
inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}

inline void particle::LEDStatus::setColor(uint32_t color) {
    d_.color = color;
   d44cc:	616b      	str	r3, [r5, #20]
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   d44ce:	4639      	mov	r1, r7
   d44d0:	4805      	ldr	r0, [pc, #20]	; (d44e8 <_Z10LEDHandlerv+0xc0>)
   d44d2:	f7ff ff9e 	bl	d4412 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   d44d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
        d_.pattern = pattern;
   d44d8:	2302      	movs	r3, #2
   d44da:	746b      	strb	r3, [r5, #17]
   d44dc:	e7ac      	b.n	d4438 <_Z10LEDHandlerv+0x10>
   d44de:	4a02      	ldr	r2, [pc, #8]	; (d44e8 <_Z10LEDHandlerv+0xc0>)
   d44e0:	7456      	strb	r6, [r2, #17]
   d44e2:	e7f3      	b.n	d44cc <_Z10LEDHandlerv+0xa4>
   d44e4:	2003e2cc 	.word	0x2003e2cc
   d44e8:	2003dac8 	.word	0x2003dac8
   d44ec:	2003d484 	.word	0x2003d484
   d44f0:	2003db33 	.word	0x2003db33
   d44f4:	2003e214 	.word	0x2003e214
   d44f8:	2003db31 	.word	0x2003db31
   d44fc:	2003db32 	.word	0x2003db32
   d4500:	2003da2e 	.word	0x2003da2e
   d4504:	000deba1 	.word	0x000deba1
   d4508:	00ffff00 	.word	0x00ffff00
   d450c:	00ff6000 	.word	0x00ff6000

000d4510 <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d4510:	4613      	mov	r3, r2
   d4512:	460a      	mov	r2, r1
   d4514:	4901      	ldr	r1, [pc, #4]	; (d451c <_ZN7FatFile4openEPKci+0xc>)
   d4516:	6809      	ldr	r1, [r1, #0]
   d4518:	f001 bf29 	b.w	d636e <_ZN7FatFile4openEPS_PKci>
   d451c:	2003e30c 	.word	0x2003e30c

000d4520 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4520:	b530      	push	{r4, r5, lr}
   d4522:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4524:	4b1c      	ldr	r3, [pc, #112]	; (d4598 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d4526:	9300      	str	r3, [sp, #0]
   d4528:	7913      	ldrb	r3, [r2, #4]
   d452a:	f88d 3004 	strb.w	r3, [sp, #4]
   d452e:	6893      	ldr	r3, [r2, #8]
   d4530:	9302      	str	r3, [sp, #8]
   d4532:	7b13      	ldrb	r3, [r2, #12]
   d4534:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4538:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d453c:	7b53      	ldrb	r3, [r2, #13]
   d453e:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4542:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4544:	460a      	mov	r2, r1
   d4546:	466b      	mov	r3, sp
   d4548:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d454c:	4628      	mov	r0, r5
   d454e:	f002 fe59 	bl	d7204 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d4552:	b1f0      	cbz	r0, d4592 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4554:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d4556:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d455a:	4628      	mov	r0, r5
   d455c:	f001 ff00 	bl	d6360 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4560:	2101      	movs	r1, #1
   d4562:	4620      	mov	r0, r4
   d4564:	f002 fcf2 	bl	d6f4c <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4568:	4601      	mov	r1, r0
   d456a:	b168      	cbz	r0, d4588 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d456c:	4621      	mov	r1, r4
   d456e:	4628      	mov	r0, r5
   d4570:	f001 fccf 	bl	d5f12 <_ZN7FatFile8openRootEP9FatVolume>
   d4574:	b168      	cbz	r0, d4592 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d4576:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d457a:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d457e:	bf16      	itet	ne
   d4580:	4b06      	ldrne	r3, [pc, #24]	; (d459c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d4582:	4618      	moveq	r0, r3
   d4584:	601d      	strne	r5, [r3, #0]
   d4586:	e005      	b.n	d4594 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d4588:	4620      	mov	r0, r4
   d458a:	f002 fcdf 	bl	d6f4c <_ZN9FatVolume4initEh>
   d458e:	2800      	cmp	r0, #0
   d4590:	d1ec      	bne.n	d456c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d4592:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d4594:	b005      	add	sp, #20
   d4596:	bd30      	pop	{r4, r5, pc}
   d4598:	000dead8 	.word	0x000dead8
   d459c:	2003e30c 	.word	0x2003e30c

000d45a0 <_ZN13SFE_UBLOX_GPS11processNMEAEc>:
//Useful for passing to other libraries like tinyGPS, MicroNMEA, or even
//a buffer, radio, etc.
void SFE_UBLOX_GPS::processNMEA(char incoming){
  //Take the incoming char from the Ublox I2C port and pass it on to the MicroNMEA lib
  //for sentence cracking
  nmea.process(incoming);
   d45a0:	4801      	ldr	r0, [pc, #4]	; (d45a8 <_ZN13SFE_UBLOX_GPS11processNMEAEc+0x8>)
   d45a2:	f001 bbbb 	b.w	d5d1c <_ZN9MicroNMEA7processEc>
   d45a6:	bf00      	nop
   d45a8:	2003d490 	.word	0x2003d490

000d45ac <_Z8setupLTEv>:
}
//Initialization for LTE events and flags
void setupLTE(){
   d45ac:	b513      	push	{r0, r1, r4, lr}
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d45ae:	2400      	movs	r4, #0
   d45b0:	9401      	str	r4, [sp, #4]
   d45b2:	9400      	str	r4, [sp, #0]
   d45b4:	2301      	movs	r3, #1
   d45b6:	4622      	mov	r2, r4
   d45b8:	4903      	ldr	r1, [pc, #12]	; (d45c8 <_Z8setupLTEv+0x1c>)
   d45ba:	4804      	ldr	r0, [pc, #16]	; (d45cc <_Z8setupLTEv+0x20>)
   d45bc:	f003 fcd2 	bl	d7f64 <spark_subscribe>
    Particle.subscribe("CCHub", cmdLTEHandler); //Subscribe to LTE data from Central Control Hub
    LTEAvail = false;
   d45c0:	4b03      	ldr	r3, [pc, #12]	; (d45d0 <_Z8setupLTEv+0x24>)
   d45c2:	701c      	strb	r4, [r3, #0]
}
   d45c4:	b002      	add	sp, #8
   d45c6:	bd10      	pop	{r4, pc}
   d45c8:	000d4ae1 	.word	0x000d4ae1
   d45cc:	000debac 	.word	0x000debac
   d45d0:	2003da2e 	.word	0x2003da2e

000d45d4 <_Z9setupXBeev>:
void setupSPI(){
    SPI.begin(SPI_MODE_MASTER);
    SPI.setClockSpeed(1000000);
}
//Code to initially configure XBee module over serial
void setupXBee(){
   d45d4:	b510      	push	{r4, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   d45d6:	f006 feb1 	bl	db33c <_Z22__fetch_global_Serial1v>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d45da:	4a0c      	ldr	r2, [pc, #48]	; (d460c <_Z9setupXBeev+0x38>)
   d45dc:	2100      	movs	r1, #0
   d45de:	f006 fb10 	bl	dac02 <_ZN5Print11printf_implEbPKcz>
    delay(20);              //Wait some time before sending next character
   d45e2:	2014      	movs	r0, #20
   d45e4:	f003 fd5e 	bl	d80a4 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   d45e8:	f006 fea8 	bl	db33c <_Z22__fetch_global_Serial1v>
   d45ec:	4a08      	ldr	r2, [pc, #32]	; (d4610 <_Z9setupXBeev+0x3c>)
   d45ee:	2100      	movs	r1, #0
   d45f0:	f006 fb07 	bl	dac02 <_ZN5Print11printf_implEbPKcz>
    delay(20);
   d45f4:	2014      	movs	r0, #20
   d45f6:	f003 fd55 	bl	d80a4 <delay>
    Serial1.printf("Hello from Bot %d\n", BOTNUM);   //Send Hello World message!
   d45fa:	f006 fe9f 	bl	db33c <_Z22__fetch_global_Serial1v>
   d45fe:	2301      	movs	r3, #1
   d4600:	4a04      	ldr	r2, [pc, #16]	; (d4614 <_Z9setupXBeev+0x40>)
   d4602:	2100      	movs	r1, #0
}
   d4604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4608:	f006 bafb 	b.w	dac02 <_ZN5Print11printf_implEbPKcz>
   d460c:	000def84 	.word	0x000def84
   d4610:	000deb6b 	.word	0x000deb6b
   d4614:	000debb2 	.word	0x000debb2

000d4618 <_Z8setupGPSv>:

//I2C setup for NEO-M8U GPS
void setupGPS(){
   d4618:	b510      	push	{r4, lr}
    myGPS.begin(Wire);
   d461a:	f007 f843 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d461e:	4c07      	ldr	r4, [pc, #28]	; (d463c <_Z8setupGPSv+0x24>)
   d4620:	4601      	mov	r1, r0
   d4622:	4620      	mov	r0, r4
   d4624:	f003 f83d 	bl	d76a2 <_ZN13SFE_UBLOX_GPS5beginER7TwoWire>
    if (myGPS.isConnected() == false){
   d4628:	4620      	mov	r0, r4
   d462a:	f003 f85b 	bl	d76e4 <_ZN13SFE_UBLOX_GPS11isConnectedEv>
        //Log.warn("Ublox GPS not detected at default I2C address, freezing.");
        //while (1);
    }
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   d462e:	f007 f839 	bl	db6a4 <_Z19__fetch_global_Wirev>

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4632:	4903      	ldr	r1, [pc, #12]	; (d4640 <_Z8setupGPSv+0x28>)
}
   d4634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4638:	f004 bec4 	b.w	d93c4 <_ZN7TwoWire8setSpeedEm>
   d463c:	2003e230 	.word	0x2003e230
   d4640:	00061a80 	.word	0x00061a80

000d4644 <_Z12getGPSLatLonv>:

bool getGPSLatLon(){
   d4644:	b508      	push	{r3, lr}
    myGPS.checkUblox(); //See if new data is available. Process bytes as they come in.
   d4646:	4807      	ldr	r0, [pc, #28]	; (d4664 <_Z12getGPSLatLonv+0x20>)
   d4648:	f003 f96c 	bl	d7924 <_ZN13SFE_UBLOX_GPS10checkUbloxEv>
   d464c:	4b06      	ldr	r3, [pc, #24]	; (d4668 <_Z12getGPSLatLonv+0x24>)

  if(nmea.isValid() == true){
   d464e:	7d18      	ldrb	r0, [r3, #20]
   d4650:	b130      	cbz	r0, d4660 <_Z12getGPSLatLonv+0x1c>
    latitude_mdeg= nmea.getLatitude();
   d4652:	4a06      	ldr	r2, [pc, #24]	; (d466c <_Z12getGPSLatLonv+0x28>)
   d4654:	6999      	ldr	r1, [r3, #24]
   d4656:	6011      	str	r1, [r2, #0]
    longitude_mdeg = nmea.getLongitude();
   d4658:	69da      	ldr	r2, [r3, #28]
   d465a:	4b05      	ldr	r3, [pc, #20]	; (d4670 <_Z12getGPSLatLonv+0x2c>)
   d465c:	2001      	movs	r0, #1
   d465e:	601a      	str	r2, [r3, #0]
  }
  else{
    //Log.warn("Location not available: %d Sattelites",nmea.getNumSatellites());
  }
  return false;
}
   d4660:	bd08      	pop	{r3, pc}
   d4662:	bf00      	nop
   d4664:	2003e230 	.word	0x2003e230
   d4668:	2003d490 	.word	0x2003d490
   d466c:	2003dae8 	.word	0x2003dae8
   d4670:	2003db08 	.word	0x2003db08

000d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4674:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4676:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4678:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d467a:	b17c      	cbz	r4, d469c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d467c:	6863      	ldr	r3, [r4, #4]
   d467e:	3b01      	subs	r3, #1
   d4680:	6063      	str	r3, [r4, #4]
   d4682:	b95b      	cbnz	r3, d469c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4684:	6823      	ldr	r3, [r4, #0]
   d4686:	4620      	mov	r0, r4
   d4688:	689b      	ldr	r3, [r3, #8]
   d468a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d468c:	68a3      	ldr	r3, [r4, #8]
   d468e:	3b01      	subs	r3, #1
   d4690:	60a3      	str	r3, [r4, #8]
   d4692:	b91b      	cbnz	r3, d469c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4694:	6823      	ldr	r3, [r4, #0]
   d4696:	4620      	mov	r0, r4
   d4698:	68db      	ldr	r3, [r3, #12]
   d469a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d469c:	4628      	mov	r0, r5
   d469e:	bd38      	pop	{r3, r4, r5, pc}

000d46a0 <_Z16sendResponseDatav>:

//Function to check if response data to a request needs to be sent out
void sendResponseData(){
   d46a0:	b530      	push	{r4, r5, lr}
    if(requestActive){
   d46a2:	4b08      	ldr	r3, [pc, #32]	; (d46c4 <_Z16sendResponseDatav+0x24>)
   d46a4:	781b      	ldrb	r3, [r3, #0]
  }
  return false;
}

//Function to check if response data to a request needs to be sent out
void sendResponseData(){
   d46a6:	b08f      	sub	sp, #60	; 0x3c
    if(requestActive){
   d46a8:	b153      	cbz	r3, d46c0 <_Z16sendResponseDatav+0x20>
        char responseStr[50];
        memcpy(responseStr,0,50);
   d46aa:	2500      	movs	r5, #0
   d46ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d46ae:	ac01      	add	r4, sp, #4
   d46b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d46b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d46b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d46b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d46b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d46ba:	682b      	ldr	r3, [r5, #0]
   d46bc:	8023      	strh	r3, [r4, #0]
   d46be:	deff      	udf	#255	; 0xff
        sprintf(responseStr,"GL%0.6f,GO%0.6f,DO%0.4f,PH%0.4f,CA%0.4f,CB%0.4f,TP%0.4f",latitude,longitude,senseDO,sensePH,senseCond,senseMiniCond,senseTemp);
        sendData(responseStr,strlen(responseStr),requestActive & 1, requestActive & 2, requestActive & 4);
        requestActive = 0;
    }
}
   d46c0:	b00f      	add	sp, #60	; 0x3c
   d46c2:	bd30      	pop	{r4, r5, pc}
   d46c4:	2003db30 	.word	0x2003db30

000d46c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d46c8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d46ca:	6804      	ldr	r4, [r0, #0]
   d46cc:	6843      	ldr	r3, [r0, #4]
   d46ce:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d46d0:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d46d2:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d46d6:	42a6      	cmp	r6, r4
   d46d8:	d004      	beq.n	d46e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d46da:	4620      	mov	r0, r4
   d46dc:	f006 fc44 	bl	daf68 <_ZN6StringD1Ev>
   d46e0:	3414      	adds	r4, #20
   d46e2:	e7f8      	b.n	d46d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d46e4:	6828      	ldr	r0, [r5, #0]
   d46e6:	f003 fcad 	bl	d8044 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d46ea:	4628      	mov	r0, r5
   d46ec:	bd70      	pop	{r4, r5, r6, pc}

000d46ee <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d46ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   d46f0:	460e      	mov	r6, r1
   d46f2:	b091      	sub	sp, #68	; 0x44

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d46f4:	2100      	movs	r1, #0
   d46f6:	4604      	mov	r4, r0
   d46f8:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d46fa:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d46fc:	ad0b      	add	r5, sp, #44	; 0x2c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d46fe:	4619      	mov	r1, r3
   d4700:	a806      	add	r0, sp, #24
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4702:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d4704:	f003 fe5a 	bl	d83bc <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d4708:	9916      	ldr	r1, [sp, #88]	; 0x58
   d470a:	4628      	mov	r0, r5
   d470c:	f003 fe56 	bl	d83bc <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4710:	aa10      	add	r2, sp, #64	; 0x40
   d4712:	783b      	ldrb	r3, [r7, #0]
   d4714:	f802 3d2c 	strb.w	r3, [r2, #-44]!
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4718:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d471a:	9302      	str	r3, [sp, #8]
   d471c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d471e:	9301      	str	r3, [sp, #4]
   d4720:	4620      	mov	r0, r4
   d4722:	9500      	str	r5, [sp, #0]
   d4724:	ab06      	add	r3, sp, #24
   d4726:	4631      	mov	r1, r6
   d4728:	f004 fbb6 	bl	d8e98 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d472c:	4620      	mov	r0, r4
   d472e:	b011      	add	sp, #68	; 0x44
   d4730:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4732 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4732:	4613      	mov	r3, r2
   d4734:	460a      	mov	r2, r1
   d4736:	2101      	movs	r1, #1
   d4738:	f006 ba63 	b.w	dac02 <_ZN5Print11printf_implEbPKcz>

000d473c <_Z13dataOffloaderv>:
        BLEAvail = false;
    }
    else BLEAvail = true;
}

void dataOffloader(){
   d473c:	b510      	push	{r4, lr}
    if (!logDir.open("/")) {
   d473e:	2200      	movs	r2, #0
        BLEAvail = false;
    }
    else BLEAvail = true;
}

void dataOffloader(){
   d4740:	b0ac      	sub	sp, #176	; 0xb0
    if (!logDir.open("/")) {
   d4742:	4953      	ldr	r1, [pc, #332]	; (d4890 <_Z13dataOffloaderv+0x154>)
   d4744:	4853      	ldr	r0, [pc, #332]	; (d4894 <_Z13dataOffloaderv+0x158>)
   d4746:	f7ff fee3 	bl	d4510 <_ZN7FatFile4openEPKci>
   d474a:	b380      	cbz	r0, d47ae <_Z13dataOffloaderv+0x72>
        offloadMode = false;
        return;
    }
    while(!BLE.connected()){
   d474c:	f003 ffc4 	bl	d86d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4750:	f004 f85b 	bl	d880a <_ZNK8particle14BleLocalDevice9connectedEv>
   d4754:	4604      	mov	r4, r0
   d4756:	b9f0      	cbnz	r0, d4796 <_Z13dataOffloaderv+0x5a>
        BLE.advertise(&advData);;
   d4758:	f003 ffbe 	bl	d86d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d475c:	4622      	mov	r2, r4
   d475e:	494e      	ldr	r1, [pc, #312]	; (d4898 <_Z13dataOffloaderv+0x15c>)
   d4760:	f004 f836 	bl	d87d0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   d4764:	200a      	movs	r0, #10
   d4766:	f003 fc9d 	bl	d80a4 <delay>
   d476a:	e7ef      	b.n	d474c <_Z13dataOffloaderv+0x10>
                offloadCharacteristic.setValue(lineBuffer);
                delayMicroseconds(500);
                //delay(1);
                //Serial.println(lineBuffer);
            }
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   d476c:	2226      	movs	r2, #38	; 0x26
   d476e:	4601      	mov	r1, r0
   d4770:	a809      	add	r0, sp, #36	; 0x24
   d4772:	f007 ff62 	bl	dc63a <memset>
            strcpy(fileCode,"filecomp");
   d4776:	4949      	ldr	r1, [pc, #292]	; (d489c <_Z13dataOffloaderv+0x160>)
   d4778:	a809      	add	r0, sp, #36	; 0x24
   d477a:	f007 ffc0 	bl	dc6fe <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d477e:	4623      	mov	r3, r4
   d4780:	2226      	movs	r2, #38	; 0x26
   d4782:	a909      	add	r1, sp, #36	; 0x24
   d4784:	4846      	ldr	r0, [pc, #280]	; (d48a0 <_Z13dataOffloaderv+0x164>)
   d4786:	f003 fef5 	bl	d8574 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            //memcpy(codeBuf,fileCode,8+MAX_FILENAME_LEN);
            offloadCharacteristic.setValue(fileCode);
            delay(150);
   d478a:	2096      	movs	r0, #150	; 0x96
   d478c:	f003 fc8a 	bl	d80a4 <delay>
            
            myFile.close();
   d4790:	4844      	ldr	r0, [pc, #272]	; (d48a4 <_Z13dataOffloaderv+0x168>)
   d4792:	f001 fde5 	bl	d6360 <_ZN7FatFile5closeEv>
        BLE.advertise(&advData);;
        delay(10);
    }
    char fileCode[8 + MAX_FILENAME_LEN];
    uint8_t codeBuf[8 + MAX_FILENAME_LEN];
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   d4796:	2200      	movs	r2, #0
   d4798:	493e      	ldr	r1, [pc, #248]	; (d4894 <_Z13dataOffloaderv+0x158>)
   d479a:	4842      	ldr	r0, [pc, #264]	; (d48a4 <_Z13dataOffloaderv+0x168>)
   d479c:	f001 fd6b 	bl	d6276 <_ZN7FatFile8openNextEPS_i>
   d47a0:	b140      	cbz	r0, d47b4 <_Z13dataOffloaderv+0x78>
   d47a2:	f003 ff99 	bl	d86d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d47a6:	f004 f830 	bl	d880a <_ZNK8particle14BleLocalDevice9connectedEv>
   d47aa:	b9c8      	cbnz	r0, d47e0 <_Z13dataOffloaderv+0xa4>
   d47ac:	e002      	b.n	d47b4 <_Z13dataOffloaderv+0x78>
    else BLEAvail = true;
}

void dataOffloader(){
    if (!logDir.open("/")) {
        offloadMode = false;
   d47ae:	4b3e      	ldr	r3, [pc, #248]	; (d48a8 <_Z13dataOffloaderv+0x16c>)
   d47b0:	7018      	strb	r0, [r3, #0]
   d47b2:	e06b      	b.n	d488c <_Z13dataOffloaderv+0x150>
            delay(150);
            
            myFile.close();
        }
    }
    logDir.close();
   d47b4:	4837      	ldr	r0, [pc, #220]	; (d4894 <_Z13dataOffloaderv+0x158>)
   d47b6:	f001 fdd3 	bl	d6360 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   d47ba:	2226      	movs	r2, #38	; 0x26
   d47bc:	2100      	movs	r1, #0
   d47be:	a809      	add	r0, sp, #36	; 0x24
   d47c0:	f007 ff3b 	bl	dc63a <memset>
    strcpy(fileCode,"filedone");
   d47c4:	4939      	ldr	r1, [pc, #228]	; (d48ac <_Z13dataOffloaderv+0x170>)
   d47c6:	a809      	add	r0, sp, #36	; 0x24
   d47c8:	f007 ff99 	bl	dc6fe <strcpy>
   d47cc:	2300      	movs	r3, #0
   d47ce:	2226      	movs	r2, #38	; 0x26
   d47d0:	a909      	add	r1, sp, #36	; 0x24
   d47d2:	4833      	ldr	r0, [pc, #204]	; (d48a0 <_Z13dataOffloaderv+0x164>)
   d47d4:	f003 fece 	bl	d8574 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    //memcpy(codeBuf,fileCode,8+MAX_FILENAME_LEN);
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
   d47d8:	4b33      	ldr	r3, [pc, #204]	; (d48a8 <_Z13dataOffloaderv+0x16c>)
   d47da:	2200      	movs	r2, #0
   d47dc:	701a      	strb	r2, [r3, #0]
   d47de:	e055      	b.n	d488c <_Z13dataOffloaderv+0x150>
    }
    char fileCode[8 + MAX_FILENAME_LEN];
    uint8_t codeBuf[8 + MAX_FILENAME_LEN];
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
        char namebuf[MAX_FILENAME_LEN];
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   d47e0:	221e      	movs	r2, #30
   d47e2:	a901      	add	r1, sp, #4
   d47e4:	482f      	ldr	r0, [pc, #188]	; (d48a4 <_Z13dataOffloaderv+0x168>)
   d47e6:	f001 ff05 	bl	d65f4 <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   d47ea:	f006 fe33 	bl	db454 <_Z16_fetch_usbserialv>
   d47ee:	4930      	ldr	r1, [pc, #192]	; (d48b0 <_Z13dataOffloaderv+0x174>)
   d47f0:	aa01      	add	r2, sp, #4
   d47f2:	f7ff ff9e 	bl	d4732 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   d47f6:	a801      	add	r0, sp, #4
   d47f8:	f007 ff89 	bl	dc70e <strlen>
   d47fc:	ab01      	add	r3, sp, #4
   d47fe:	3804      	subs	r0, #4
   d4800:	4418      	add	r0, r3
   d4802:	f007 ff8d 	bl	dc720 <strlwr>
   d4806:	492b      	ldr	r1, [pc, #172]	; (d48b4 <_Z13dataOffloaderv+0x178>)
   d4808:	f007 ffd2 	bl	dc7b0 <strstr>
   d480c:	2800      	cmp	r0, #0
   d480e:	d0bf      	beq.n	d4790 <_Z13dataOffloaderv+0x54>
            myFile.close();
            continue;
        }
        else{
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   d4810:	2226      	movs	r2, #38	; 0x26
   d4812:	2100      	movs	r1, #0
   d4814:	a809      	add	r0, sp, #36	; 0x24
   d4816:	f007 ff10 	bl	dc63a <memset>
            strcpy(fileCode,"filename");
   d481a:	4927      	ldr	r1, [pc, #156]	; (d48b8 <_Z13dataOffloaderv+0x17c>)
   d481c:	a809      	add	r0, sp, #36	; 0x24
   d481e:	f007 ff6e 	bl	dc6fe <strcpy>
            strcat(fileCode,namebuf);
   d4822:	a901      	add	r1, sp, #4
   d4824:	a809      	add	r0, sp, #36	; 0x24
   d4826:	f007 ff39 	bl	dc69c <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   d482a:	f006 fe13 	bl	db454 <_Z16_fetch_usbserialv>
   d482e:	aa09      	add	r2, sp, #36	; 0x24
   d4830:	4922      	ldr	r1, [pc, #136]	; (d48bc <_Z13dataOffloaderv+0x180>)
   d4832:	f7ff ff7e 	bl	d4732 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
   d4836:	2300      	movs	r3, #0
   d4838:	2226      	movs	r2, #38	; 0x26
   d483a:	a909      	add	r1, sp, #36	; 0x24
   d483c:	4818      	ldr	r0, [pc, #96]	; (d48a0 <_Z13dataOffloaderv+0x164>)
   d483e:	f003 fe99 	bl	d8574 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            offloadCharacteristic.setValue(fileCode);
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   d4842:	f006 fe07 	bl	db454 <_Z16_fetch_usbserialv>
   d4846:	aa01      	add	r2, sp, #4
   d4848:	491d      	ldr	r1, [pc, #116]	; (d48c0 <_Z13dataOffloaderv+0x184>)
   d484a:	f7ff ff72 	bl	d4732 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
            delay(150);
   d484e:	2096      	movs	r0, #150	; 0x96
   d4850:	f003 fc28 	bl	d80a4 <delay>
            while(myFile.available()){
   d4854:	481b      	ldr	r0, [pc, #108]	; (d48c4 <_Z13dataOffloaderv+0x188>)
   d4856:	f7ff fc3f 	bl	d40d8 <_ZN4File9availableEv>
   d485a:	4604      	mov	r4, r0
   d485c:	2800      	cmp	r0, #0
   d485e:	d085      	beq.n	d476c <_Z13dataOffloaderv+0x30>
                char lineBuffer[BLE_OFFLD_BUF];
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   d4860:	2264      	movs	r2, #100	; 0x64
   d4862:	2100      	movs	r1, #0
   d4864:	a813      	add	r0, sp, #76	; 0x4c
   d4866:	f007 fee8 	bl	dc63a <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   d486a:	aa13      	add	r2, sp, #76	; 0x4c
   d486c:	2364      	movs	r3, #100	; 0x64
   d486e:	210d      	movs	r1, #13
   d4870:	4814      	ldr	r0, [pc, #80]	; (d48c4 <_Z13dataOffloaderv+0x188>)
   d4872:	f006 fb36 	bl	daee2 <_ZN6Stream14readBytesUntilEcPcj>
   d4876:	2300      	movs	r3, #0
   d4878:	2264      	movs	r2, #100	; 0x64
   d487a:	a913      	add	r1, sp, #76	; 0x4c
   d487c:	4808      	ldr	r0, [pc, #32]	; (d48a0 <_Z13dataOffloaderv+0x164>)
   d487e:	f003 fe79 	bl	d8574 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4882:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4886:	f003 f947 	bl	d7b18 <HAL_Delay_Microseconds>
   d488a:	e7e3      	b.n	d4854 <_Z13dataOffloaderv+0x118>
    strcpy(fileCode,"filedone");
    //memcpy(codeBuf,fileCode,8+MAX_FILENAME_LEN);
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}
   d488c:	b02c      	add	sp, #176	; 0xb0
   d488e:	bd10      	pop	{r4, pc}
   d4890:	000debdb 	.word	0x000debdb
   d4894:	2003d9a8 	.word	0x2003d9a8
   d4898:	2003d974 	.word	0x2003d974
   d489c:	000dec21 	.word	0x000dec21
   d48a0:	2003d488 	.word	0x2003d488
   d48a4:	2003da40 	.word	0x2003da40
   d48a8:	2003e2cc 	.word	0x2003e2cc
   d48ac:	000dec2a 	.word	0x000dec2a
   d48b0:	000dec33 	.word	0x000dec33
   d48b4:	000dec5c 	.word	0x000dec5c
   d48b8:	000debdd 	.word	0x000debdd
   d48bc:	000debe6 	.word	0x000debe6
   d48c0:	000debf9 	.word	0x000debf9
   d48c4:	2003da30 	.word	0x2003da30

000d48c8 <_Z14processCommandPKchb>:
        uint8_t BLEPeer;    //Identify which peer this bot is connected to

};*/

//Mode 1 - BLE, Mode 2 - XBEE, Mode 4 - LTE
void processCommand(const char *command, uint8_t mode, bool sendAck){
   d48c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d48cc:	b085      	sub	sp, #20
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   d48ce:	7883      	ldrb	r3, [r0, #2]
   d48d0:	2b41      	cmp	r3, #65	; 0x41
        uint8_t BLEPeer;    //Identify which peer this bot is connected to

};*/

//Mode 1 - BLE, Mode 2 - XBEE, Mode 4 - LTE
void processCommand(const char *command, uint8_t mode, bool sendAck){
   d48d2:	af00      	add	r7, sp, #0
   d48d4:	4606      	mov	r6, r0
   d48d6:	4689      	mov	r9, r1
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   d48d8:	d102      	bne.n	d48e0 <_Z14processCommandPKchb+0x18>
   d48da:	78c3      	ldrb	r3, [r0, #3]
   d48dc:	2b42      	cmp	r3, #66	; 0x42
   d48de:	e004      	b.n	d48ea <_Z14processCommandPKchb+0x22>
   d48e0:	2b42      	cmp	r3, #66	; 0x42
   d48e2:	f040 8096 	bne.w	d4a12 <_Z14processCommandPKchb+0x14a>
   d48e6:	78c3      	ldrb	r3, [r0, #3]
   d48e8:	2b31      	cmp	r3, #49	; 0x31
   d48ea:	f040 8092 	bne.w	d4a12 <_Z14processCommandPKchb+0x14a>
        char dataStr[strlen(command)-7];
   d48ee:	4630      	mov	r0, r6
   d48f0:	f007 ff0d 	bl	dc70e <strlen>
   d48f4:	f020 0007 	bic.w	r0, r0, #7
            }
        }

        if(sendAck){    //Transmit out acknowledgement if needed

        }
   d48f8:	46e8      	mov	r8, sp

//Mode 1 - BLE, Mode 2 - XBEE, Mode 4 - LTE
void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
        char dataStr[strlen(command)-7];
   d48fa:	ebad 0d00 	sub.w	sp, sp, r0
   d48fe:	466c      	mov	r4, sp
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command);i++){
   d4900:	2504      	movs	r5, #4
   d4902:	4630      	mov	r0, r6
   d4904:	f007 ff03 	bl	dc70e <strlen>
   d4908:	4285      	cmp	r5, r0
   d490a:	d211      	bcs.n	d4930 <_Z14processCommandPKchb+0x68>
            if(i < 7) cmdStr[i-4] = command[i];
   d490c:	2d06      	cmp	r5, #6
   d490e:	bf9b      	ittet	ls
   d4910:	f107 0310 	addls.w	r3, r7, #16
   d4914:	195b      	addls	r3, r3, r5
            else dataStr[i-7] = command[i];
   d4916:	1963      	addhi	r3, r4, r5
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
        char dataStr[strlen(command)-7];
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command);i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d4918:	5d72      	ldrbls	r2, [r6, r5]
            else dataStr[i-7] = command[i];
   d491a:	bf8c      	ite	hi
   d491c:	5d72      	ldrbhi	r2, [r6, r5]
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
        char dataStr[strlen(command)-7];
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command);i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d491e:	f803 2c10 	strbls.w	r2, [r3, #-16]
void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
        char dataStr[strlen(command)-7];
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command);i++){
   d4922:	f105 0501 	add.w	r5, r5, #1
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
   d4926:	bf88      	it	hi
   d4928:	f803 2c07 	strbhi.w	r2, [r3, #-7]
void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
        char dataStr[strlen(command)-7];
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command);i++){
   d492c:	b2ed      	uxtb	r5, r5
   d492e:	e7e8      	b.n	d4902 <_Z14processCommandPKchb+0x3a>
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
        }
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   d4930:	493a      	ldr	r1, [pc, #232]	; (d4a1c <_Z14processCommandPKchb+0x154>)
   d4932:	1d38      	adds	r0, r7, #4
   d4934:	f007 fed9 	bl	dc6ea <strcmp>
   d4938:	2800      	cmp	r0, #0
   d493a:	d065      	beq.n	d4a08 <_Z14processCommandPKchb+0x140>
            else if(mode == 1){ //Acknowledge from BLE
                
            }
            return;
        }
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   d493c:	4938      	ldr	r1, [pc, #224]	; (d4a20 <_Z14processCommandPKchb+0x158>)
   d493e:	1d38      	adds	r0, r7, #4
   d4940:	f007 fed3 	bl	dc6ea <strcmp>
   d4944:	b9b8      	cbnz	r0, d4976 <_Z14processCommandPKchb+0xae>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   d4946:	7823      	ldrb	r3, [r4, #0]
   d4948:	723b      	strb	r3, [r7, #8]
   d494a:	7863      	ldrb	r3, [r4, #1]
   d494c:	727b      	strb	r3, [r7, #9]
   d494e:	78a3      	ldrb	r3, [r4, #2]
   d4950:	72bb      	strb	r3, [r7, #10]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   d4952:	78e3      	ldrb	r3, [r4, #3]
   d4954:	733b      	strb	r3, [r7, #12]
   d4956:	7923      	ldrb	r3, [r4, #4]
   d4958:	737b      	strb	r3, [r7, #13]
            setLSpeed = atoi(lSpd);
   d495a:	f107 0008 	add.w	r0, r7, #8
            }
            return;
        }
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   d495e:	7963      	ldrb	r3, [r4, #5]
   d4960:	73bb      	strb	r3, [r7, #14]
            setLSpeed = atoi(lSpd);
   d4962:	f007 fd1c 	bl	dc39e <atoi>
   d4966:	4c2f      	ldr	r4, [pc, #188]	; (d4a24 <_Z14processCommandPKchb+0x15c>)
   d4968:	7020      	strb	r0, [r4, #0]
            setLSpeed = atoi(rSpd);
   d496a:	f107 000c 	add.w	r0, r7, #12
   d496e:	f007 fd16 	bl	dc39e <atoi>
   d4972:	7020      	strb	r0, [r4, #0]
   d4974:	e048      	b.n	d4a08 <_Z14processCommandPKchb+0x140>
        }
        else if(!strcmp(cmdStr,"req")){  //Data Request
   d4976:	492c      	ldr	r1, [pc, #176]	; (d4a28 <_Z14processCommandPKchb+0x160>)
   d4978:	1d38      	adds	r0, r7, #4
   d497a:	f007 feb6 	bl	dc6ea <strcmp>
   d497e:	b918      	cbnz	r0, d4988 <_Z14processCommandPKchb+0xc0>
            requestActive = mode;
   d4980:	4b2a      	ldr	r3, [pc, #168]	; (d4a2c <_Z14processCommandPKchb+0x164>)
   d4982:	f883 9000 	strb.w	r9, [r3]
   d4986:	e03f      	b.n	d4a08 <_Z14processCommandPKchb+0x140>
        }
        else if(!strcmp(cmdStr,"pts")){
   d4988:	4929      	ldr	r1, [pc, #164]	; (d4a30 <_Z14processCommandPKchb+0x168>)
   d498a:	1d38      	adds	r0, r7, #4
   d498c:	f007 fead 	bl	dc6ea <strcmp>
   d4990:	b9f0      	cbnz	r0, d49d0 <_Z14processCommandPKchb+0x108>
   d4992:	4d28      	ldr	r5, [pc, #160]	; (d4a34 <_Z14processCommandPKchb+0x16c>)
            Serial.println(dataStr);
   d4994:	f006 fd5e 	bl	db454 <_Z16_fetch_usbserialv>
   d4998:	4621      	mov	r1, r4
   d499a:	f006 f908 	bl	dabae <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   d499e:	7c2b      	ldrb	r3, [r5, #16]
   d49a0:	b983      	cbnz	r3, d49c4 <_Z14processCommandPKchb+0xfc>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d49a2:	f244 2202 	movw	r2, #16898	; 0x4202
   d49a6:	4924      	ldr	r1, [pc, #144]	; (d4a38 <_Z14processCommandPKchb+0x170>)
   d49a8:	f105 0010 	add.w	r0, r5, #16
   d49ac:	f7ff fdb0 	bl	d4510 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   d49b0:	4622      	mov	r2, r4
   d49b2:	4922      	ldr	r1, [pc, #136]	; (d4a3c <_Z14processCommandPKchb+0x174>)
   d49b4:	4628      	mov	r0, r5
   d49b6:	f7ff febc 	bl	d4732 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
                logFile.close();
   d49ba:	f105 0010 	add.w	r0, r5, #16
   d49be:	f001 fccf 	bl	d6360 <_ZN7FatFile5closeEv>
   d49c2:	e021      	b.n	d4a08 <_Z14processCommandPKchb+0x140>
            }
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   d49c4:	4622      	mov	r2, r4
   d49c6:	491d      	ldr	r1, [pc, #116]	; (d4a3c <_Z14processCommandPKchb+0x174>)
   d49c8:	4628      	mov	r0, r5
   d49ca:	f7ff feb2 	bl	d4732 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
   d49ce:	e01b      	b.n	d4a08 <_Z14processCommandPKchb+0x140>
        }
        else if(!strcmp(cmdStr,"ccs")){  //Incoming communication status
   d49d0:	491b      	ldr	r1, [pc, #108]	; (d4a40 <_Z14processCommandPKchb+0x178>)
   d49d2:	1d38      	adds	r0, r7, #4
   d49d4:	f007 fe89 	bl	dc6ea <strcmp>
   d49d8:	b1b0      	cbz	r0, d4a08 <_Z14processCommandPKchb+0x140>
            
        }
        else if(!strcmp(cmdStr,"aut")){  //Enter autonomous mode
   d49da:	491a      	ldr	r1, [pc, #104]	; (d4a44 <_Z14processCommandPKchb+0x17c>)
   d49dc:	1d38      	adds	r0, r7, #4
   d49de:	f007 fe84 	bl	dc6ea <strcmp>
   d49e2:	b188      	cbz	r0, d4a08 <_Z14processCommandPKchb+0x140>
            
        }
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   d49e4:	4918      	ldr	r1, [pc, #96]	; (d4a48 <_Z14processCommandPKchb+0x180>)
   d49e6:	1d38      	adds	r0, r7, #4
   d49e8:	f007 fe7f 	bl	dc6ea <strcmp>
   d49ec:	b960      	cbnz	r0, d4a08 <_Z14processCommandPKchb+0x140>
            offloadMode = true;
   d49ee:	4b17      	ldr	r3, [pc, #92]	; (d4a4c <_Z14processCommandPKchb+0x184>)
   d49f0:	2201      	movs	r2, #1
   d49f2:	701a      	strb	r2, [r3, #0]
    return d_.color;
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   d49f4:	4b16      	ldr	r3, [pc, #88]	; (d4a50 <_Z14processCommandPKchb+0x188>)
   d49f6:	7c5a      	ldrb	r2, [r3, #17]
   d49f8:	2a0f      	cmp	r2, #15
   d49fa:	d107      	bne.n	d4a0c <_Z14processCommandPKchb+0x144>
inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}

inline void particle::LEDStatus::setColor(uint32_t color) {
    d_.color = color;
   d49fc:	22ff      	movs	r2, #255	; 0xff
            status.setPattern(LED_PATTERN_BLINK);
            status.setColor(RGB_COLOR_BLUE);
            status.setSpeed(LED_SPEED_FAST);
   d49fe:	211e      	movs	r1, #30
   d4a00:	4813      	ldr	r0, [pc, #76]	; (d4a50 <_Z14processCommandPKchb+0x188>)
   d4a02:	615a      	str	r2, [r3, #20]
   d4a04:	f7ff fd05 	bl	d4412 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>

            }
            else if(mode == 1){ //Acknowledge from BLE
                
            }
            return;
   d4a08:	46c5      	mov	sp, r8
   d4a0a:	e002      	b.n	d4a12 <_Z14processCommandPKchb+0x14a>
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
        d_.pattern = pattern;
   d4a0c:	2202      	movs	r2, #2
   d4a0e:	745a      	strb	r2, [r3, #17]
   d4a10:	e7f4      	b.n	d49fc <_Z14processCommandPKchb+0x134>
        if(sendAck){    //Transmit out acknowledgement if needed

        }

    }
}
   d4a12:	3714      	adds	r7, #20
   d4a14:	46bd      	mov	sp, r7
   d4a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4a1a:	bf00      	nop
   d4a1c:	000dec61 	.word	0x000dec61
   d4a20:	000dec65 	.word	0x000dec65
   d4a24:	2003e2c1 	.word	0x2003e2c1
   d4a28:	000dec69 	.word	0x000dec69
   d4a2c:	2003db30 	.word	0x2003db30
   d4a30:	000dec6d 	.word	0x000dec6d
   d4a34:	2003e2d8 	.word	0x2003e2d8
   d4a38:	2003da08 	.word	0x2003da08
   d4a3c:	000dec71 	.word	0x000dec71
   d4a40:	000dec94 	.word	0x000dec94
   d4a44:	000dec98 	.word	0x000dec98
   d4a48:	000dec9c 	.word	0x000dec9c
   d4a4c:	2003e2cc 	.word	0x2003e2cc
   d4a50:	2003dac8 	.word	0x2003dac8

000d4a54 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
        char lteBuf[7] = {'B',BOTNUM+48,'A','B','c','c','s'};
        Particle.publish("WNS", lteBuf, PRIVATE);
    }
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4a54:	b598      	push	{r3, r4, r7, lr}
    char btBuf[len];
   d4a56:	1dcb      	adds	r3, r1, #7
   d4a58:	f023 0307 	bic.w	r3, r3, #7
        char lteBuf[7] = {'B',BOTNUM+48,'A','B','c','c','s'};
        Particle.publish("WNS", lteBuf, PRIVATE);
    }
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4a5c:	af00      	add	r7, sp, #0
    char btBuf[len];
   d4a5e:	ebad 0d03 	sub.w	sp, sp, r3
   d4a62:	466c      	mov	r4, sp
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   d4a64:	2300      	movs	r3, #0
   d4a66:	428b      	cmp	r3, r1
   d4a68:	d003      	beq.n	d4a72 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
   d4a6a:	5cc2      	ldrb	r2, [r0, r3]
   d4a6c:	54e2      	strb	r2, [r4, r3]
   d4a6e:	3301      	adds	r3, #1
   d4a70:	e7f9      	b.n	d4a66 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12>
    Serial.println("New BT Command:");
   d4a72:	f006 fcef 	bl	db454 <_Z16_fetch_usbserialv>
   d4a76:	4913      	ldr	r1, [pc, #76]	; (d4ac4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70>)
   d4a78:	f006 f899 	bl	dabae <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   d4a7c:	f006 fcea 	bl	db454 <_Z16_fetch_usbserialv>
   d4a80:	4621      	mov	r1, r4
   d4a82:	f006 f894 	bl	dabae <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   d4a86:	2201      	movs	r2, #1
   d4a88:	4611      	mov	r1, r2
   d4a8a:	4620      	mov	r0, r4
   d4a8c:	f7ff ff1c 	bl	d48c8 <_Z14processCommandPKchb>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4a90:	f003 f852 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
    BLERxTime = millis();
   d4a94:	4b0c      	ldr	r3, [pc, #48]	; (d4ac8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>)
   d4a96:	6018      	str	r0, [r3, #0]
    if(logMessages){
   d4a98:	4b0c      	ldr	r3, [pc, #48]	; (d4acc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   d4a9a:	781b      	ldrb	r3, [r3, #0]
   d4a9c:	b183      	cbz	r3, d4ac0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c>
   d4a9e:	480c      	ldr	r0, [pc, #48]	; (d4ad0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4aa0:	7c03      	ldrb	r3, [r0, #16]
   d4aa2:	b92b      	cbnz	r3, d4ab0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c>
   d4aa4:	f244 2202 	movw	r2, #16898	; 0x4202
   d4aa8:	490a      	ldr	r1, [pc, #40]	; (d4ad4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   d4aaa:	3010      	adds	r0, #16
   d4aac:	f7ff fd30 	bl	d4510 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   d4ab0:	4622      	mov	r2, r4
   d4ab2:	4909      	ldr	r1, [pc, #36]	; (d4ad8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   d4ab4:	4806      	ldr	r0, [pc, #24]	; (d4ad0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   d4ab6:	f7ff fe3c 	bl	d4732 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
        logFile.close();
   d4aba:	4808      	ldr	r0, [pc, #32]	; (d4adc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   d4abc:	f001 fc50 	bl	d6360 <_ZN7FatFile5closeEv>
    }
}
   d4ac0:	46bd      	mov	sp, r7
   d4ac2:	bd98      	pop	{r3, r4, r7, pc}
   d4ac4:	000deca0 	.word	0x000deca0
   d4ac8:	2003d9cc 	.word	0x2003d9cc
   d4acc:	2003e21c 	.word	0x2003e21c
   d4ad0:	2003e2d8 	.word	0x2003e2d8
   d4ad4:	2003da08 	.word	0x2003da08
   d4ad8:	000decb0 	.word	0x000decb0
   d4adc:	2003e2e8 	.word	0x2003e2e8

000d4ae0 <_Z13cmdLTEHandlerPKcS0_>:
        }

    }
}

void cmdLTEHandler(const char *event, const char *data){
   d4ae0:	b510      	push	{r4, lr}
   d4ae2:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   d4ae4:	2200      	movs	r2, #0
   d4ae6:	2104      	movs	r1, #4
   d4ae8:	4620      	mov	r0, r4
   d4aea:	f7ff feed 	bl	d48c8 <_Z14processCommandPKchb>
    if(logMessages){
   d4aee:	4b0b      	ldr	r3, [pc, #44]	; (d4b1c <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   d4af0:	781b      	ldrb	r3, [r3, #0]
   d4af2:	b193      	cbz	r3, d4b1a <_Z13cmdLTEHandlerPKcS0_+0x3a>
   d4af4:	480a      	ldr	r0, [pc, #40]	; (d4b20 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4af6:	7c03      	ldrb	r3, [r0, #16]
   d4af8:	b92b      	cbnz	r3, d4b06 <_Z13cmdLTEHandlerPKcS0_+0x26>
   d4afa:	f244 2202 	movw	r2, #16898	; 0x4202
   d4afe:	4909      	ldr	r1, [pc, #36]	; (d4b24 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   d4b00:	3010      	adds	r0, #16
   d4b02:	f7ff fd05 	bl	d4510 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   d4b06:	4622      	mov	r2, r4
   d4b08:	4907      	ldr	r1, [pc, #28]	; (d4b28 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   d4b0a:	4805      	ldr	r0, [pc, #20]	; (d4b20 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   d4b0c:	f7ff fe11 	bl	d4732 <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
        logFile.close();
   d4b10:	4806      	ldr	r0, [pc, #24]	; (d4b2c <_Z13cmdLTEHandlerPKcS0_+0x4c>)
    }
}
   d4b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void cmdLTEHandler(const char *event, const char *data){
    processCommand(data, 4,false);
    if(logMessages){
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
   d4b16:	f001 bc23 	b.w	d6360 <_ZN7FatFile5closeEv>
   d4b1a:	bd10      	pop	{r4, pc}
   d4b1c:	2003e21c 	.word	0x2003e21c
   d4b20:	2003e2d8 	.word	0x2003e2d8
   d4b24:	2003da08 	.word	0x2003da08
   d4b28:	000decd0 	.word	0x000decd0
   d4b2c:	2003e2e8 	.word	0x2003e2e8

000d4b30 <_Z11XBeeHandlerv>:
        Wire.endTransmission();                                                       //end the I2C data transmission.
        dataWait = true;
    }
}

void XBeeHandler(){  
   d4b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char buffer[data.length()];
        for(int i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
        processCommand(buffer,2,true);
        Serial.println("New XBee Command:");
        Serial.println(data); 
        XBeeRxTime = millis();
   d4b34:	4e30      	ldr	r6, [pc, #192]	; (d4bf8 <_Z11XBeeHandlerv+0xc8>)
        if(logMessages){
   d4b36:	f8df 80d8 	ldr.w	r8, [pc, #216]	; d4c10 <_Z11XBeeHandlerv+0xe0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
        dataWait = true;
    }
}

void XBeeHandler(){  
   d4b3a:	b089      	sub	sp, #36	; 0x24
   d4b3c:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   d4b3e:	f006 fbfd 	bl	db33c <_Z22__fetch_global_Serial1v>
   d4b42:	6803      	ldr	r3, [r0, #0]
   d4b44:	691b      	ldr	r3, [r3, #16]
   d4b46:	4798      	blx	r3
   d4b48:	2800      	cmp	r0, #0
   d4b4a:	d050      	beq.n	d4bee <_Z11XBeeHandlerv+0xbe>
        String data = Serial1.readStringUntil('\n');
   d4b4c:	f006 fbf6 	bl	db33c <_Z22__fetch_global_Serial1v>
   d4b50:	220a      	movs	r2, #10
   d4b52:	4601      	mov	r1, r0
   d4b54:	4638      	mov	r0, r7
   d4b56:	f006 f9df 	bl	daf18 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   d4b5a:	68bb      	ldr	r3, [r7, #8]
   d4b5c:	3307      	adds	r3, #7
   d4b5e:	f023 0307 	bic.w	r3, r3, #7
        if(logMessages){
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
            logFile.close();
        }
    }
   d4b62:	466d      	mov	r5, sp
}

void XBeeHandler(){  
    while(Serial1.available()){
        String data = Serial1.readStringUntil('\n');
        char buffer[data.length()];
   d4b64:	ebad 0d03 	sub.w	sp, sp, r3
   d4b68:	46e9      	mov	r9, sp
   d4b6a:	466c      	mov	r4, sp
        for(int i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   d4b6c:	68bb      	ldr	r3, [r7, #8]
   d4b6e:	ebc9 0104 	rsb	r1, r9, r4
   d4b72:	428b      	cmp	r3, r1
   d4b74:	d905      	bls.n	d4b82 <_Z11XBeeHandlerv+0x52>
   d4b76:	4638      	mov	r0, r7
   d4b78:	f006 faa8 	bl	db0cc <_ZNK6String6charAtEj>
   d4b7c:	f804 0b01 	strb.w	r0, [r4], #1
   d4b80:	e7f4      	b.n	d4b6c <_Z11XBeeHandlerv+0x3c>
        processCommand(buffer,2,true);
   d4b82:	2201      	movs	r2, #1
   d4b84:	2102      	movs	r1, #2
   d4b86:	4648      	mov	r0, r9
   d4b88:	f7ff fe9e 	bl	d48c8 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   d4b8c:	f006 fc62 	bl	db454 <_Z16_fetch_usbserialv>
   d4b90:	491a      	ldr	r1, [pc, #104]	; (d4bfc <_Z11XBeeHandlerv+0xcc>)
   d4b92:	f006 f80c 	bl	dabae <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   d4b96:	f006 fc5d 	bl	db454 <_Z16_fetch_usbserialv>
   d4b9a:	6839      	ldr	r1, [r7, #0]
   d4b9c:	f006 f807 	bl	dabae <_ZN5Print7printlnEPKc>
   d4ba0:	f002 ffca 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
        XBeeRxTime = millis();
        if(logMessages){
   d4ba4:	f898 3000 	ldrb.w	r3, [r8]
        char buffer[data.length()];
        for(int i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
        processCommand(buffer,2,true);
        Serial.println("New XBee Command:");
        Serial.println(data); 
        XBeeRxTime = millis();
   d4ba8:	6030      	str	r0, [r6, #0]
        if(logMessages){
   d4baa:	b1db      	cbz	r3, d4be4 <_Z11XBeeHandlerv+0xb4>
   d4bac:	4814      	ldr	r0, [pc, #80]	; (d4c00 <_Z11XBeeHandlerv+0xd0>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4bae:	7c03      	ldrb	r3, [r0, #16]
   d4bb0:	b92b      	cbnz	r3, d4bbe <_Z11XBeeHandlerv+0x8e>
   d4bb2:	f244 2202 	movw	r2, #16898	; 0x4202
   d4bb6:	4913      	ldr	r1, [pc, #76]	; (d4c04 <_Z11XBeeHandlerv+0xd4>)
   d4bb8:	3010      	adds	r0, #16
   d4bba:	f7ff fca9 	bl	d4510 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   d4bbe:	4639      	mov	r1, r7
   d4bc0:	f107 0010 	add.w	r0, r7, #16
   d4bc4:	f006 fa39 	bl	db03a <_ZN6StringC1ERKS_>
   d4bc8:	f107 0310 	add.w	r3, r7, #16
   d4bcc:	4a0e      	ldr	r2, [pc, #56]	; (d4c08 <_Z11XBeeHandlerv+0xd8>)
   d4bce:	480c      	ldr	r0, [pc, #48]	; (d4c00 <_Z11XBeeHandlerv+0xd0>)
   d4bd0:	2101      	movs	r1, #1
   d4bd2:	f006 f816 	bl	dac02 <_ZN5Print11printf_implEbPKcz>
   d4bd6:	f107 0010 	add.w	r0, r7, #16
   d4bda:	f006 f9c5 	bl	daf68 <_ZN6StringD1Ev>
            logFile.close();
   d4bde:	480b      	ldr	r0, [pc, #44]	; (d4c0c <_Z11XBeeHandlerv+0xdc>)
   d4be0:	f001 fbbe 	bl	d6360 <_ZN7FatFile5closeEv>
    }
}

void XBeeHandler(){  
    while(Serial1.available()){
        String data = Serial1.readStringUntil('\n');
   d4be4:	4638      	mov	r0, r7
   d4be6:	f006 f9bf 	bl	daf68 <_ZN6StringD1Ev>
   d4bea:	46ad      	mov	sp, r5
        dataWait = true;
    }
}

void XBeeHandler(){  
    while(Serial1.available()){
   d4bec:	e7a7      	b.n	d4b3e <_Z11XBeeHandlerv+0xe>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
            logFile.close();
        }
    }
}
   d4bee:	3724      	adds	r7, #36	; 0x24
   d4bf0:	46bd      	mov	sp, r7
   d4bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4bf6:	bf00      	nop
   d4bf8:	2003e2bc 	.word	0x2003e2bc
   d4bfc:	000decf0 	.word	0x000decf0
   d4c00:	2003e2d8 	.word	0x2003e2d8
   d4c04:	2003da08 	.word	0x2003da08
   d4c08:	000ded02 	.word	0x000ded02
   d4c0c:	2003e2e8 	.word	0x2003e2e8
   d4c10:	2003e21c 	.word	0x2003e21c

000d4c14 <_ZN5Print8printlnfIIiEEEjPKcDpT_>:
   d4c14:	4613      	mov	r3, r2
   d4c16:	460a      	mov	r2, r1
   d4c18:	2101      	movs	r1, #1
   d4c1a:	f005 bff2 	b.w	dac02 <_ZN5Print11printf_implEbPKcz>
	...

000d4c20 <_Z11wdogHandlerv>:
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
        logFile.close();
    }
}

void wdogHandler(){
   d4c20:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c22:	f003 f997 	bl	d7f54 <spark_cloud_flag_connected>
   d4c26:	4c29      	ldr	r4, [pc, #164]	; (d4ccc <_Z11wdogHandlerv+0xac>)
    if(Particle.connected()) LTEAvail = true;
   d4c28:	b108      	cbz	r0, d4c2e <_Z11wdogHandlerv+0xe>
   d4c2a:	2301      	movs	r3, #1
   d4c2c:	e010      	b.n	d4c50 <_Z11wdogHandlerv+0x30>
    else if(LTEAvail){
   d4c2e:	7823      	ldrb	r3, [r4, #0]
   d4c30:	b17b      	cbz	r3, d4c52 <_Z11wdogHandlerv+0x32>
   d4c32:	4827      	ldr	r0, [pc, #156]	; (d4cd0 <_Z11wdogHandlerv+0xb0>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4c34:	7c03      	ldrb	r3, [r0, #16]
   d4c36:	b92b      	cbnz	r3, d4c44 <_Z11wdogHandlerv+0x24>
   d4c38:	f244 2202 	movw	r2, #16898	; 0x4202
   d4c3c:	4925      	ldr	r1, [pc, #148]	; (d4cd4 <_Z11wdogHandlerv+0xb4>)
   d4c3e:	3010      	adds	r0, #16
   d4c40:	f7ff fc66 	bl	d4510 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   d4c44:	221e      	movs	r2, #30
   d4c46:	4924      	ldr	r1, [pc, #144]	; (d4cd8 <_Z11wdogHandlerv+0xb8>)
   d4c48:	4821      	ldr	r0, [pc, #132]	; (d4cd0 <_Z11wdogHandlerv+0xb0>)
   d4c4a:	f7ff ffe3 	bl	d4c14 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        LTEAvail = false;
   d4c4e:	2300      	movs	r3, #0
   d4c50:	7023      	strb	r3, [r4, #0]
   d4c52:	f002 ff71 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
    }
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL){
   d4c56:	4b21      	ldr	r3, [pc, #132]	; (d4cdc <_Z11wdogHandlerv+0xbc>)
   d4c58:	4c21      	ldr	r4, [pc, #132]	; (d4ce0 <_Z11wdogHandlerv+0xc0>)
   d4c5a:	681b      	ldr	r3, [r3, #0]
   d4c5c:	1ac0      	subs	r0, r0, r3
   d4c5e:	f247 5330 	movw	r3, #30000	; 0x7530
   d4c62:	4298      	cmp	r0, r3
   d4c64:	d911      	bls.n	d4c8a <_Z11wdogHandlerv+0x6a>
        if(XBeeAvail){
   d4c66:	7823      	ldrb	r3, [r4, #0]
   d4c68:	b16b      	cbz	r3, d4c86 <_Z11wdogHandlerv+0x66>
   d4c6a:	4819      	ldr	r0, [pc, #100]	; (d4cd0 <_Z11wdogHandlerv+0xb0>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4c6c:	7c03      	ldrb	r3, [r0, #16]
   d4c6e:	b92b      	cbnz	r3, d4c7c <_Z11wdogHandlerv+0x5c>
   d4c70:	f244 2202 	movw	r2, #16898	; 0x4202
   d4c74:	4917      	ldr	r1, [pc, #92]	; (d4cd4 <_Z11wdogHandlerv+0xb4>)
   d4c76:	3010      	adds	r0, #16
   d4c78:	f7ff fc4a 	bl	d4510 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   d4c7c:	221e      	movs	r2, #30
   d4c7e:	4916      	ldr	r1, [pc, #88]	; (d4cd8 <_Z11wdogHandlerv+0xb8>)
   d4c80:	4813      	ldr	r0, [pc, #76]	; (d4cd0 <_Z11wdogHandlerv+0xb0>)
   d4c82:	f7ff ffc7 	bl	d4c14 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        }
        XBeeAvail = false;
   d4c86:	2300      	movs	r3, #0
   d4c88:	e000      	b.n	d4c8c <_Z11wdogHandlerv+0x6c>
    }
    else XBeeAvail = true;
   d4c8a:	2301      	movs	r3, #1
   d4c8c:	7023      	strb	r3, [r4, #0]
   d4c8e:	f002 ff53 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL){
   d4c92:	4b14      	ldr	r3, [pc, #80]	; (d4ce4 <_Z11wdogHandlerv+0xc4>)
   d4c94:	4c14      	ldr	r4, [pc, #80]	; (d4ce8 <_Z11wdogHandlerv+0xc8>)
   d4c96:	681b      	ldr	r3, [r3, #0]
   d4c98:	1ac0      	subs	r0, r0, r3
   d4c9a:	f247 5330 	movw	r3, #30000	; 0x7530
   d4c9e:	4298      	cmp	r0, r3
   d4ca0:	d911      	bls.n	d4cc6 <_Z11wdogHandlerv+0xa6>
        if(BLEAvail){
   d4ca2:	7823      	ldrb	r3, [r4, #0]
   d4ca4:	b16b      	cbz	r3, d4cc2 <_Z11wdogHandlerv+0xa2>
   d4ca6:	480a      	ldr	r0, [pc, #40]	; (d4cd0 <_Z11wdogHandlerv+0xb0>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4ca8:	7c03      	ldrb	r3, [r0, #16]
   d4caa:	b92b      	cbnz	r3, d4cb8 <_Z11wdogHandlerv+0x98>
   d4cac:	f244 2202 	movw	r2, #16898	; 0x4202
   d4cb0:	4908      	ldr	r1, [pc, #32]	; (d4cd4 <_Z11wdogHandlerv+0xb4>)
   d4cb2:	3010      	adds	r0, #16
   d4cb4:	f7ff fc2c 	bl	d4510 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   d4cb8:	221e      	movs	r2, #30
   d4cba:	490c      	ldr	r1, [pc, #48]	; (d4cec <_Z11wdogHandlerv+0xcc>)
   d4cbc:	4804      	ldr	r0, [pc, #16]	; (d4cd0 <_Z11wdogHandlerv+0xb0>)
   d4cbe:	f7ff ffa9 	bl	d4c14 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        }
        BLEAvail = false;
   d4cc2:	2300      	movs	r3, #0
   d4cc4:	e000      	b.n	d4cc8 <_Z11wdogHandlerv+0xa8>
    }
    else BLEAvail = true;
   d4cc6:	2301      	movs	r3, #1
   d4cc8:	7023      	strb	r3, [r4, #0]
   d4cca:	bd10      	pop	{r4, pc}
   d4ccc:	2003da2e 	.word	0x2003da2e
   d4cd0:	2003e2d8 	.word	0x2003e2d8
   d4cd4:	2003da08 	.word	0x2003da08
   d4cd8:	000ded23 	.word	0x000ded23
   d4cdc:	2003e2bc 	.word	0x2003e2bc
   d4ce0:	2003db32 	.word	0x2003db32
   d4ce4:	2003d9cc 	.word	0x2003d9cc
   d4ce8:	2003db31 	.word	0x2003db31
   d4cec:	000ded74 	.word	0x000ded74

000d4cf0 <_ZN5Print8printlnfIIfEEEjPKcDpT_>:
    {
        return this->printf_impl(false, format, args...);
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
   d4cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4cf2:	4604      	mov	r4, r0
    {
        return this->printf_impl(true, format, args...);
   d4cf4:	ee10 0a10 	vmov	r0, s0
    {
        return this->printf_impl(false, format, args...);
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
   d4cf8:	460d      	mov	r5, r1
    {
        return this->printf_impl(true, format, args...);
   d4cfa:	f006 ffc7 	bl	dbc8c <__aeabi_f2d>
   d4cfe:	462a      	mov	r2, r5
   d4d00:	e9cd 0100 	strd	r0, r1, [sp]
   d4d04:	2101      	movs	r1, #1
   d4d06:	4620      	mov	r0, r4
   d4d08:	f005 ff7b 	bl	dac02 <_ZN5Print11printf_implEbPKcz>
    }
   d4d0c:	b003      	add	sp, #12
   d4d0e:	bd30      	pop	{r4, r5, pc}

000d4d10 <_Z13sensorHandlerv>:
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
    statusReady = true;
}

void sensorHandler(){
   d4d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
    if(dataTimer < millis() && dataWait){
   d4d14:	4d8a      	ldr	r5, [pc, #552]	; (d4f40 <_Z13sensorHandlerv+0x230>)
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
    statusReady = true;
}

void sensorHandler(){
   d4d16:	b0a9      	sub	sp, #164	; 0xa4
   d4d18:	f002 ff0e 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
    
    if(dataTimer < millis() && dataWait){
   d4d1c:	682b      	ldr	r3, [r5, #0]
   d4d1e:	4283      	cmp	r3, r0
   d4d20:	d21a      	bcs.n	d4d58 <_Z13sensorHandlerv+0x48>
   d4d22:	4e88      	ldr	r6, [pc, #544]	; (d4f44 <_Z13sensorHandlerv+0x234>)
   d4d24:	7833      	ldrb	r3, [r6, #0]
   d4d26:	2b00      	cmp	r3, #0
   d4d28:	d163      	bne.n	d4df2 <_Z13sensorHandlerv+0xe2>
   d4d2a:	e015      	b.n	d4d58 <_Z13sensorHandlerv+0x48>
        c = 0;
        while(Wire.available()){   // slave may send less than requested
            addrSense[c++] = Wire.read();

        }
        float senseTemp = atof(addrSense);
   d4d2c:	a823      	add	r0, sp, #140	; 0x8c
   d4d2e:	f007 fb33 	bl	dc398 <atof>
   d4d32:	ec51 0b10 	vmov	r0, r1, d0
   d4d36:	f007 fadf 	bl	dc2f8 <__aeabi_d2f>
   d4d3a:	4607      	mov	r7, r0
        Serial.printlnf("Temperature: %f",senseTemp);
   d4d3c:	f006 fb8a 	bl	db454 <_Z16_fetch_usbserialv>
   d4d40:	ee00 7a10 	vmov	s0, r7
   d4d44:	4980      	ldr	r1, [pc, #512]	; (d4f48 <_Z13sensorHandlerv+0x238>)
   d4d46:	f7ff ffd3 	bl	d4cf0 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
        dataWait = false;
        if(logSensors){
   d4d4a:	4b80      	ldr	r3, [pc, #512]	; (d4f4c <_Z13sensorHandlerv+0x23c>)
            addrSense[c++] = Wire.read();

        }
        float senseTemp = atof(addrSense);
        Serial.printlnf("Temperature: %f",senseTemp);
        dataWait = false;
   d4d4c:	f886 9000 	strb.w	r9, [r6]
        if(logSensors){
   d4d50:	781b      	ldrb	r3, [r3, #0]
   d4d52:	2b00      	cmp	r3, #0
   d4d54:	f040 8106 	bne.w	d4f64 <_Z13sensorHandlerv+0x254>
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
            myFile.close();
        }
    }
    if(senseTimer < millis()){
   d4d58:	4c7d      	ldr	r4, [pc, #500]	; (d4f50 <_Z13sensorHandlerv+0x240>)
   d4d5a:	f002 feed 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
   d4d5e:	6823      	ldr	r3, [r4, #0]
   d4d60:	4283      	cmp	r3, r0
   d4d62:	f080 816b 	bcs.w	d503c <_Z13sensorHandlerv+0x32c>
   d4d66:	f002 fee7 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   d4d6a:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   d4d6e:	6020      	str	r0, [r4, #0]
   d4d70:	f002 fee2 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   d4d74:	f200 3039 	addw	r0, r0, #825	; 0x339
   d4d78:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   d4d7a:	f006 fc93 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4d7e:	2163      	movs	r1, #99	; 0x63
   d4d80:	f004 fb5f 	bl	d9442 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   d4d84:	f006 fc8e 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4d88:	2172      	movs	r1, #114	; 0x72
   d4d8a:	f7ff fab8 	bl	d42fe <_ZN7TwoWire5writeEi>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   d4d8e:	f006 fc89 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4d92:	f004 fb5d 	bl	d9450 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   d4d96:	f006 fc85 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4d9a:	2164      	movs	r1, #100	; 0x64
   d4d9c:	f004 fb51 	bl	d9442 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   d4da0:	f006 fc80 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4da4:	2172      	movs	r1, #114	; 0x72
   d4da6:	f7ff faaa 	bl	d42fe <_ZN7TwoWire5writeEi>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   d4daa:	f006 fc7b 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4dae:	f004 fb4f 	bl	d9450 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   d4db2:	f006 fc77 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4db6:	2165      	movs	r1, #101	; 0x65
   d4db8:	f004 fb43 	bl	d9442 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   d4dbc:	f006 fc72 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4dc0:	2172      	movs	r1, #114	; 0x72
   d4dc2:	f7ff fa9c 	bl	d42fe <_ZN7TwoWire5writeEi>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   d4dc6:	f006 fc6d 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4dca:	f004 fb41 	bl	d9450 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   d4dce:	f006 fc69 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4dd2:	2166      	movs	r1, #102	; 0x66
   d4dd4:	f004 fb35 	bl	d9442 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   d4dd8:	f006 fc64 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4ddc:	2172      	movs	r1, #114	; 0x72
   d4dde:	f7ff fa8e 	bl	d42fe <_ZN7TwoWire5writeEi>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   d4de2:	f006 fc5f 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4de6:	f004 fb33 	bl	d9450 <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   d4dea:	4b56      	ldr	r3, [pc, #344]	; (d4f44 <_Z13sensorHandlerv+0x234>)
   d4dec:	2201      	movs	r2, #1
   d4dee:	701a      	strb	r2, [r3, #0]
    }
}
   d4df0:	e124      	b.n	d503c <_Z13sensorHandlerv+0x32c>
}

void sensorHandler(){
    
    if(dataTimer < millis() && dataWait){
        Wire.requestFrom(PHADDR, 20, 1);
   d4df2:	f006 fc57 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4df6:	2301      	movs	r3, #1
   d4df8:	2214      	movs	r2, #20
   d4dfa:	2163      	movs	r1, #99	; 0x63
   d4dfc:	f004 fb08 	bl	d9410 <_ZN7TwoWire11requestFromEhjh>
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   d4e00:	f006 fc50 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4e04:	6803      	ldr	r3, [r0, #0]
   d4e06:	695b      	ldr	r3, [r3, #20]
   d4e08:	4798      	blx	r3
   d4e0a:	f10d 044f 	add.w	r4, sp, #79	; 0x4f
        char tempSense[20];
        int c = 0;
        while(Wire.available()){   // slave may send less than requested
   d4e0e:	f006 fc49 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4e12:	6803      	ldr	r3, [r0, #0]
   d4e14:	691b      	ldr	r3, [r3, #16]
   d4e16:	4798      	blx	r3
   d4e18:	b138      	cbz	r0, d4e2a <_Z13sensorHandlerv+0x11a>
            tempSense[c++] = Wire.read();
   d4e1a:	f006 fc43 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4e1e:	6803      	ldr	r3, [r0, #0]
   d4e20:	695b      	ldr	r3, [r3, #20]
   d4e22:	4798      	blx	r3
   d4e24:	f804 0f01 	strb.w	r0, [r4, #1]!
    if(dataTimer < millis() && dataWait){
        Wire.requestFrom(PHADDR, 20, 1);
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
        char tempSense[20];
        int c = 0;
        while(Wire.available()){   // slave may send less than requested
   d4e28:	e7f1      	b.n	d4e0e <_Z13sensorHandlerv+0xfe>
            tempSense[c++] = Wire.read();

        }
        sensePH = atof(tempSense);
   d4e2a:	a814      	add	r0, sp, #80	; 0x50
   d4e2c:	f007 fab4 	bl	dc398 <atof>
   d4e30:	ec51 0b10 	vmov	r0, r1, d0
   d4e34:	f007 fa60 	bl	dc2f8 <__aeabi_d2f>
   d4e38:	4c46      	ldr	r4, [pc, #280]	; (d4f54 <_Z13sensorHandlerv+0x244>)
   d4e3a:	6020      	str	r0, [r4, #0]
        Serial.printlnf("pH: %f", sensePH);
   d4e3c:	f006 fb0a 	bl	db454 <_Z16_fetch_usbserialv>
   d4e40:	ed94 0a00 	vldr	s0, [r4]
   d4e44:	4944      	ldr	r1, [pc, #272]	; (d4f58 <_Z13sensorHandlerv+0x248>)
   d4e46:	f7ff ff53 	bl	d4cf0 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
        Wire.requestFrom(MCOND, 20, 1);
   d4e4a:	f006 fc2b 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4e4e:	2301      	movs	r3, #1
   d4e50:	2214      	movs	r2, #20
   d4e52:	2164      	movs	r1, #100	; 0x64
   d4e54:	f004 fadc 	bl	d9410 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   d4e58:	f006 fc24 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4e5c:	6803      	ldr	r3, [r0, #0]
   d4e5e:	695b      	ldr	r3, [r3, #20]
   d4e60:	4798      	blx	r3
   d4e62:	f10d 0763 	add.w	r7, sp, #99	; 0x63
        char mcondSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d4e66:	f006 fc1d 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4e6a:	6803      	ldr	r3, [r0, #0]
   d4e6c:	691b      	ldr	r3, [r3, #16]
   d4e6e:	4798      	blx	r3
   d4e70:	b138      	cbz	r0, d4e82 <_Z13sensorHandlerv+0x172>
            mcondSense[c++] = Wire.read();
   d4e72:	f006 fc17 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4e76:	6803      	ldr	r3, [r0, #0]
   d4e78:	695b      	ldr	r3, [r3, #20]
   d4e7a:	4798      	blx	r3
   d4e7c:	f807 0f01 	strb.w	r0, [r7, #1]!
        Serial.printlnf("pH: %f", sensePH);
        Wire.requestFrom(MCOND, 20, 1);
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
        char mcondSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d4e80:	e7f1      	b.n	d4e66 <_Z13sensorHandlerv+0x156>
            mcondSense[c++] = Wire.read();

        }
        float senseMCond = atof(mcondSense);
   d4e82:	a819      	add	r0, sp, #100	; 0x64
   d4e84:	f007 fa88 	bl	dc398 <atof>
   d4e88:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
        Serial.printlnf("MiniCond: %f",senseMCond);
   d4e8c:	f006 fae2 	bl	db454 <_Z16_fetch_usbserialv>
   d4e90:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
   d4e94:	4607      	mov	r7, r0
   d4e96:	ec51 0b10 	vmov	r0, r1, d0
   d4e9a:	f007 fa2d 	bl	dc2f8 <__aeabi_d2f>
   d4e9e:	492f      	ldr	r1, [pc, #188]	; (d4f5c <_Z13sensorHandlerv+0x24c>)
   d4ea0:	ee00 0a10 	vmov	s0, r0
   d4ea4:	4638      	mov	r0, r7
   d4ea6:	f7ff ff23 	bl	d4cf0 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
        Wire.requestFrom(COND, 20, 1);
   d4eaa:	f006 fbfb 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4eae:	2301      	movs	r3, #1
   d4eb0:	2214      	movs	r2, #20
   d4eb2:	2165      	movs	r1, #101	; 0x65
   d4eb4:	f004 faac 	bl	d9410 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   d4eb8:	f006 fbf4 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4ebc:	6803      	ldr	r3, [r0, #0]
   d4ebe:	695b      	ldr	r3, [r3, #20]
   d4ec0:	4798      	blx	r3
   d4ec2:	f10d 0777 	add.w	r7, sp, #119	; 0x77
        char condSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d4ec6:	f006 fbed 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4eca:	6803      	ldr	r3, [r0, #0]
   d4ecc:	691b      	ldr	r3, [r3, #16]
   d4ece:	4798      	blx	r3
   d4ed0:	b138      	cbz	r0, d4ee2 <_Z13sensorHandlerv+0x1d2>
            condSense[c++] = Wire.read();
   d4ed2:	f006 fbe7 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4ed6:	6803      	ldr	r3, [r0, #0]
   d4ed8:	695b      	ldr	r3, [r3, #20]
   d4eda:	4798      	blx	r3
   d4edc:	f807 0f01 	strb.w	r0, [r7, #1]!
        Serial.printlnf("MiniCond: %f",senseMCond);
        Wire.requestFrom(COND, 20, 1);
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
        char condSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d4ee0:	e7f1      	b.n	d4ec6 <_Z13sensorHandlerv+0x1b6>
            condSense[c++] = Wire.read();

        }
        float senseCond = atof(condSense);
   d4ee2:	a81e      	add	r0, sp, #120	; 0x78
   d4ee4:	f007 fa58 	bl	dc398 <atof>
   d4ee8:	ec51 0b10 	vmov	r0, r1, d0
   d4eec:	f007 fa04 	bl	dc2f8 <__aeabi_d2f>
   d4ef0:	4680      	mov	r8, r0
        Serial.printlnf("Conductivity: %f",senseCond);
   d4ef2:	f006 faaf 	bl	db454 <_Z16_fetch_usbserialv>
   d4ef6:	ee00 8a10 	vmov	s0, r8
   d4efa:	4919      	ldr	r1, [pc, #100]	; (d4f60 <_Z13sensorHandlerv+0x250>)
   d4efc:	f7ff fef8 	bl	d4cf0 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
        Wire.requestFrom(TEMPADDR, 20, 1);
   d4f00:	f006 fbd0 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4f04:	2301      	movs	r3, #1
   d4f06:	2214      	movs	r2, #20
   d4f08:	2166      	movs	r1, #102	; 0x66
   d4f0a:	f004 fa81 	bl	d9410 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   d4f0e:	f006 fbc9 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4f12:	6803      	ldr	r3, [r0, #0]
   d4f14:	695b      	ldr	r3, [r3, #20]
   d4f16:	4798      	blx	r3
   d4f18:	f10d 078b 	add.w	r7, sp, #139	; 0x8b
        char addrSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d4f1c:	f006 fbc2 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4f20:	6803      	ldr	r3, [r0, #0]
   d4f22:	691b      	ldr	r3, [r3, #16]
   d4f24:	4798      	blx	r3
   d4f26:	4681      	mov	r9, r0
   d4f28:	2800      	cmp	r0, #0
   d4f2a:	f43f aeff 	beq.w	d4d2c <_Z13sensorHandlerv+0x1c>
            addrSense[c++] = Wire.read();
   d4f2e:	f006 fbb9 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d4f32:	6803      	ldr	r3, [r0, #0]
   d4f34:	695b      	ldr	r3, [r3, #20]
   d4f36:	4798      	blx	r3
   d4f38:	f807 0f01 	strb.w	r0, [r7, #1]!
        Serial.printlnf("Conductivity: %f",senseCond);
        Wire.requestFrom(TEMPADDR, 20, 1);
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
        char addrSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d4f3c:	e7ee      	b.n	d4f1c <_Z13sensorHandlerv+0x20c>
   d4f3e:	bf00      	nop
   d4f40:	2003d96c 	.word	0x2003d96c
   d4f44:	2003e2c0 	.word	0x2003e2c0
   d4f48:	000dede8 	.word	0x000dede8
   d4f4c:	2003db33 	.word	0x2003db33
   d4f50:	2003d970 	.word	0x2003d970
   d4f54:	2003d9d0 	.word	0x2003d9d0
   d4f58:	000dedc3 	.word	0x000dedc3
   d4f5c:	000dedca 	.word	0x000dedca
   d4f60:	000dedd7 	.word	0x000dedd7
        float senseTemp = atof(addrSense);
        Serial.printlnf("Temperature: %f",senseTemp);
        dataWait = false;
        if(logSensors){
            char timestamp[16];
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   d4f64:	f006 f968 	bl	db238 <_ZN9TimeClass5monthEv>
   d4f68:	4606      	mov	r6, r0
   d4f6a:	f006 f95b 	bl	db224 <_ZN9TimeClass3dayEv>
   d4f6e:	4681      	mov	r9, r0
   d4f70:	f006 f96a 	bl	db248 <_ZN9TimeClass4yearEv>
   d4f74:	4682      	mov	sl, r0
   d4f76:	f006 f937 	bl	db1e8 <_ZN9TimeClass4hourEv>
   d4f7a:	4683      	mov	fp, r0
   d4f7c:	f006 f93e 	bl	db1fc <_ZN9TimeClass6minuteEv>
   d4f80:	900e      	str	r0, [sp, #56]	; 0x38
   d4f82:	f006 f945 	bl	db210 <_ZN9TimeClass6secondEv>
   d4f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d4f88:	9004      	str	r0, [sp, #16]
   d4f8a:	9303      	str	r3, [sp, #12]
   d4f8c:	e88d 0e00 	stmia.w	sp, {r9, sl, fp}
   d4f90:	4633      	mov	r3, r6
   d4f92:	4a2f      	ldr	r2, [pc, #188]	; (d5050 <_Z13sensorHandlerv+0x340>)
   d4f94:	2110      	movs	r1, #16
   d4f96:	a810      	add	r0, sp, #64	; 0x40
   d4f98:	f003 f86c 	bl	d8074 <snprintf>
   d4f9c:	482d      	ldr	r0, [pc, #180]	; (d5054 <_Z13sensorHandlerv+0x344>)
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   d4f9e:	7c03      	ldrb	r3, [r0, #16]
   d4fa0:	b92b      	cbnz	r3, d4fae <_Z13sensorHandlerv+0x29e>
   d4fa2:	f244 2202 	movw	r2, #16898	; 0x4202
   d4fa6:	492c      	ldr	r1, [pc, #176]	; (d5058 <_Z13sensorHandlerv+0x348>)
   d4fa8:	3010      	adds	r0, #16
   d4faa:	f7ff fab1 	bl	d4510 <_ZN7FatFile4openEPKci>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4fae:	4640      	mov	r0, r8
   d4fb0:	f006 fe6c 	bl	dbc8c <__aeabi_f2d>
   d4fb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   d4fb8:	4b28      	ldr	r3, [pc, #160]	; (d505c <_Z13sensorHandlerv+0x34c>)
   d4fba:	6818      	ldr	r0, [r3, #0]
   d4fbc:	f006 fe66 	bl	dbc8c <__aeabi_f2d>
   d4fc0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4fc4:	4b26      	ldr	r3, [pc, #152]	; (d5060 <_Z13sensorHandlerv+0x350>)
   d4fc6:	6818      	ldr	r0, [r3, #0]
   d4fc8:	f006 fe60 	bl	dbc8c <__aeabi_f2d>
   d4fcc:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4fd0:	6820      	ldr	r0, [r4, #0]
   d4fd2:	f006 fe5b 	bl	dbc8c <__aeabi_f2d>
   d4fd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4fda:	4638      	mov	r0, r7
   d4fdc:	f006 fe56 	bl	dbc8c <__aeabi_f2d>
   d4fe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4fe4:	4b1f      	ldr	r3, [pc, #124]	; (d5064 <_Z13sensorHandlerv+0x354>)
   d4fe6:	6818      	ldr	r0, [r3, #0]
   d4fe8:	ee07 0a90 	vmov	s15, r0
   d4fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4ff0:	ee17 0a90 	vmov	r0, s15
   d4ff4:	f006 fe4a 	bl	dbc8c <__aeabi_f2d>
   d4ff8:	a313      	add	r3, pc, #76	; (adr r3, d5048 <_Z13sensorHandlerv+0x338>)
   d4ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ffe:	f006 ffc3 	bl	dbf88 <__aeabi_ddiv>
   d5002:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5006:	4b18      	ldr	r3, [pc, #96]	; (d5068 <_Z13sensorHandlerv+0x358>)
   d5008:	6818      	ldr	r0, [r3, #0]
   d500a:	ee07 0a90 	vmov	s15, r0
   d500e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5012:	ee17 0a90 	vmov	r0, s15
   d5016:	f006 fe39 	bl	dbc8c <__aeabi_f2d>
   d501a:	a30b      	add	r3, pc, #44	; (adr r3, d5048 <_Z13sensorHandlerv+0x338>)
   d501c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5020:	f006 ffb2 	bl	dbf88 <__aeabi_ddiv>
   d5024:	ab10      	add	r3, sp, #64	; 0x40
   d5026:	e9cd 0100 	strd	r0, r1, [sp]
   d502a:	4a10      	ldr	r2, [pc, #64]	; (d506c <_Z13sensorHandlerv+0x35c>)
   d502c:	4809      	ldr	r0, [pc, #36]	; (d5054 <_Z13sensorHandlerv+0x344>)
   d502e:	2101      	movs	r1, #1
   d5030:	f005 fde7 	bl	dac02 <_ZN5Print11printf_implEbPKcz>
            myFile.close();
   d5034:	480e      	ldr	r0, [pc, #56]	; (d5070 <_Z13sensorHandlerv+0x360>)
   d5036:	f001 f993 	bl	d6360 <_ZN7FatFile5closeEv>
   d503a:	e68d      	b.n	d4d58 <_Z13sensorHandlerv+0x48>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
        Wire.endTransmission();                                                       //end the I2C data transmission.
        dataWait = true;
    }
}
   d503c:	b029      	add	sp, #164	; 0xa4
   d503e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5042:	bf00      	nop
   d5044:	f3af 8000 	nop.w
   d5048:	00000000 	.word	0x00000000
   d504c:	412e8480 	.word	0x412e8480
   d5050:	000dedf8 	.word	0x000dedf8
   d5054:	2003da30 	.word	0x2003da30
   d5058:	2003db54 	.word	0x2003db54
   d505c:	2003db50 	.word	0x2003db50
   d5060:	2003e2d0 	.word	0x2003e2d0
   d5064:	2003db08 	.word	0x2003db08
   d5068:	2003dae8 	.word	0x2003dae8
   d506c:	000dee11 	.word	0x000dee11
   d5070:	2003da40 	.word	0x2003da40

000d5074 <loop>:
        logFile.close();
    }
    // delete possible existing file
}

void loop(){
   d5074:	b508      	push	{r3, lr}
    if(getGPSLatLon()){
   d5076:	f7ff fae5 	bl	d4644 <_Z12getGPSLatLonv>
   d507a:	b1a8      	cbz	r0, d50a8 <loop+0x34>
        char latLonBuf[UART_TX_BUF_SIZE];
        latitude = ((float)latitude_mdeg/1000000.0);
   d507c:	4b12      	ldr	r3, [pc, #72]	; (d50c8 <loop+0x54>)
   d507e:	ed9f 7a13 	vldr	s14, [pc, #76]	; d50cc <loop+0x58>
   d5082:	edd3 7a00 	vldr	s15, [r3]
   d5086:	4b12      	ldr	r3, [pc, #72]	; (d50d0 <loop+0x5c>)
   d5088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d508c:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d5090:	edc3 6a00 	vstr	s13, [r3]
        longitude = ((float)longitude_mdeg/1000000.0);
   d5094:	4b0f      	ldr	r3, [pc, #60]	; (d50d4 <loop+0x60>)
   d5096:	edd3 7a00 	vldr	s15, [r3]
   d509a:	4b0f      	ldr	r3, [pc, #60]	; (d50d8 <loop+0x64>)
   d509c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d50a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d50a4:	edc3 6a00 	vstr	s13, [r3]
        //sprintf(latLonBuf, "GPS Data: Lat:%0.6f Lon:%0.6f\n", latitude, longitude);
        //Serial.println(latLonBuf);
        //sendData(latLonBuf, UART_TX_BUF_SIZE, true, true, false);
    }
    sensorHandler();
   d50a8:	f7ff fe32 	bl	d4d10 <_Z13sensorHandlerv>
    XBeeHandler();
   d50ac:	f7ff fd40 	bl	d4b30 <_Z11XBeeHandlerv>
    statusUpdate();
    if(offloadMode) dataOffloader();
   d50b0:	4b0a      	ldr	r3, [pc, #40]	; (d50dc <loop+0x68>)
   d50b2:	781b      	ldrb	r3, [r3, #0]
   d50b4:	b10b      	cbz	r3, d50ba <loop+0x46>
   d50b6:	f7ff fb41 	bl	d473c <_Z13dataOffloaderv>
    sendResponseData();
   d50ba:	f7ff faf1 	bl	d46a0 <_Z16sendResponseDatav>
    delay(100);
   d50be:	2064      	movs	r0, #100	; 0x64
}
   d50c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sensorHandler();
    XBeeHandler();
    statusUpdate();
    if(offloadMode) dataOffloader();
    sendResponseData();
    delay(100);
   d50c4:	f002 bfee 	b.w	d80a4 <delay>
   d50c8:	2003dae8 	.word	0x2003dae8
   d50cc:	49742400 	.word	0x49742400
   d50d0:	2003e218 	.word	0x2003e218
   d50d4:	2003db08 	.word	0x2003db08
   d50d8:	2003db74 	.word	0x2003db74
   d50dc:	2003e2cc 	.word	0x2003e2cc

000d50e0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d50e0:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d50e2:	4d09      	ldr	r5, [pc, #36]	; (d5108 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d50e4:	6829      	ldr	r1, [r5, #0]
   d50e6:	f011 0401 	ands.w	r4, r1, #1
   d50ea:	d10a      	bne.n	d5102 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d50ec:	4628      	mov	r0, r5
   d50ee:	f7fe ffe5 	bl	d40bc <__cxa_guard_acquire>
   d50f2:	b130      	cbz	r0, d5102 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d50f4:	4621      	mov	r1, r4
   d50f6:	4805      	ldr	r0, [pc, #20]	; (d510c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d50f8:	f005 fdd8 	bl	dacac <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d50fc:	4628      	mov	r0, r5
   d50fe:	f7fe ffe2 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d5102:	4802      	ldr	r0, [pc, #8]	; (d510c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d5104:	bd38      	pop	{r3, r4, r5, pc}
   d5106:	bf00      	nop
   d5108:	2003d478 	.word	0x2003d478
   d510c:	2003d47c 	.word	0x2003d47c

000d5110 <_Z8setupSPIv>:
void setupLTE(){
    Particle.subscribe("CCHub", cmdLTEHandler); //Subscribe to LTE data from Central Control Hub
    LTEAvail = false;
}

void setupSPI(){
   d5110:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(SPI_Mode mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   d5112:	f7ff ffe5 	bl	d50e0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5116:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d511a:	2100      	movs	r1, #0
   d511c:	f005 fde1 	bl	dace2 <_ZN8SPIClass5beginE8SPI_Modet>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   d5120:	f7ff ffde 	bl	d50e0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5124:	2201      	movs	r2, #1
   d5126:	4902      	ldr	r1, [pc, #8]	; (d5130 <_Z8setupSPIv+0x20>)
    SPI.begin(SPI_MODE_MASTER);
    SPI.setClockSpeed(1000000);
}
   d5128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d512c:	f005 be76 	b.w	dae1c <_ZN8SPIClass13setClockSpeedEjj>
   d5130:	000f4240 	.word	0x000f4240

000d5134 <setup>:
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
    }
}

void setup(){
   d5134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
inline uint16_t particle::LEDStatus::period() const {
    return (d_.pattern != LED_PATTERN_CUSTOM ? d_.period : 0);
}

inline void particle::LEDStatus::setPriority(LEDPriority priority) {
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   d5138:	488c      	ldr	r0, [pc, #560]	; (d536c <setup+0x238>)
    manualRC = true;

    senseTimer = millis();
    dataTimer = millis();
    dataWait = false;
    logSensors = true;
   d513a:	4d8d      	ldr	r5, [pc, #564]	; (d5370 <setup+0x23c>)
   d513c:	7c03      	ldrb	r3, [r0, #16]
    logMessages = true;
   d513e:	4c8d      	ldr	r4, [pc, #564]	; (d5374 <setup+0x240>)
   d5140:	f003 0303 	and.w	r3, r3, #3
   d5144:	f043 0378 	orr.w	r3, r3, #120	; 0x78
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
    }
}

void setup(){
   d5148:	b092      	sub	sp, #72	; 0x48
   d514a:	7403      	strb	r3, [r0, #16]
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d514c:	2200      	movs	r2, #0
   d514e:	2101      	movs	r1, #1
   d5150:	3004      	adds	r0, #4
   d5152:	f002 feb1 	bl	d7eb8 <led_set_status_active>
    status.setPriority(LED_PRIORITY_IMPORTANT);
    status.setActive(true);

    BLE.on();
   d5156:	f003 fabf 	bl	d86d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d515a:	f003 fb03 	bl	d8764 <_ZNK8particle14BleLocalDevice2onEv>
    
    //Log.info("Hello from WaterNet23!");
    Serial.begin();
   d515e:	f006 f979 	bl	db454 <_Z16_fetch_usbserialv>
   d5162:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5166:	f006 f965 	bl	db434 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600, SERIAL_PARITY_EVEN);                        //Start serial for XBee module
   d516a:	f006 f8e7 	bl	db33c <_Z22__fetch_global_Serial1v>
   d516e:	2204      	movs	r2, #4
   d5170:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5174:	f006 f8d4 	bl	db320 <_ZN11USARTSerial5beginEmm>
    setupSPI();                                 //Setup SPI for BeagleBone
   d5178:	f7ff ffca 	bl	d5110 <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   d517c:	f7ff fa2a 	bl	d45d4 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   d5180:	f7ff fa4a 	bl	d4618 <_Z8setupGPSv>
    setupLTE();                                 //Initialize LTE Flags
   d5184:	f7ff fa12 	bl	d45ac <_Z8setupLTEv>

    manualRC = true;
   d5188:	4b7b      	ldr	r3, [pc, #492]	; (d5378 <setup+0x244>)
   d518a:	2701      	movs	r7, #1
   d518c:	701f      	strb	r7, [r3, #0]
   d518e:	f002 fcd3 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>

    senseTimer = millis();
   d5192:	4b7a      	ldr	r3, [pc, #488]	; (d537c <setup+0x248>)
   d5194:	6018      	str	r0, [r3, #0]
   d5196:	f002 fccf 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
    dataTimer = millis();
   d519a:	4b79      	ldr	r3, [pc, #484]	; (d5380 <setup+0x24c>)
    dataWait = false;
    logSensors = true;
   d519c:	702f      	strb	r7, [r5, #0]
    setupLTE();                                 //Initialize LTE Flags

    manualRC = true;

    senseTimer = millis();
    dataTimer = millis();
   d519e:	6018      	str	r0, [r3, #0]
    dataWait = false;
   d51a0:	4b78      	ldr	r3, [pc, #480]	; (d5384 <setup+0x250>)
    logSensors = true;
    logMessages = true;
   d51a2:	7027      	strb	r7, [r4, #0]

    manualRC = true;

    senseTimer = millis();
    dataTimer = millis();
    dataWait = false;
   d51a4:	2600      	movs	r6, #0
   d51a6:	701e      	strb	r6, [r3, #0]
    logSensors = true;
    logMessages = true;
    offloadMode = false;
   d51a8:	4b77      	ldr	r3, [pc, #476]	; (d5388 <setup+0x254>)
   d51aa:	701e      	strb	r6, [r3, #0]
    requestActive = false;
   d51ac:	4b77      	ldr	r3, [pc, #476]	; (d538c <setup+0x258>)
   d51ae:	701e      	strb	r6, [r3, #0]

    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   d51b0:	f003 fa92 	bl	d86d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d51b4:	4a76      	ldr	r2, [pc, #472]	; (d5390 <setup+0x25c>)
   d51b6:	4601      	mov	r1, r0
   d51b8:	a80d      	add	r0, sp, #52	; 0x34
   d51ba:	f003 ff21 	bl	d9000 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d51be:	a80d      	add	r0, sp, #52	; 0x34
   d51c0:	f003 fb49 	bl	d8856 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   d51c4:	f003 fa88 	bl	d86d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d51c8:	4a72      	ldr	r2, [pc, #456]	; (d5394 <setup+0x260>)
   d51ca:	4601      	mov	r1, r0
   d51cc:	a80d      	add	r0, sp, #52	; 0x34
   d51ce:	f003 ff17 	bl	d9000 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d51d2:	a80d      	add	r0, sp, #52	; 0x34
   d51d4:	f003 fb3f 	bl	d8856 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   d51d8:	f003 fa7e 	bl	d86d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d51dc:	4a6e      	ldr	r2, [pc, #440]	; (d5398 <setup+0x264>)
   d51de:	4601      	mov	r1, r0
   d51e0:	a80d      	add	r0, sp, #52	; 0x34
   d51e2:	f003 ff0d 	bl	d9000 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d51e6:	a80d      	add	r0, sp, #52	; 0x34
   d51e8:	f003 fb35 	bl	d8856 <_ZN8particle17BleCharacteristicD1Ev>

    char deviceName[10];
    strcpy(deviceName,"WTN23_Bot");
   d51ec:	496b      	ldr	r1, [pc, #428]	; (d539c <setup+0x268>)
   d51ee:	a806      	add	r0, sp, #24
   d51f0:	f007 fa85 	bl	dc6fe <strcpy>
    deviceName[9] = BOTNUM+48;
   d51f4:	2331      	movs	r3, #49	; 0x31
   d51f6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    BLECustomData[0] = BOTNUM;
   d51fa:	4b69      	ldr	r3, [pc, #420]	; (d53a0 <setup+0x26c>)
   d51fc:	701f      	strb	r7, [r3, #0]

    advData.appendServiceUUID(WaterNetService); // Add the app service
   d51fe:	4b69      	ldr	r3, [pc, #420]	; (d53a4 <setup+0x270>)
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d5200:	a80d      	add	r0, sp, #52	; 0x34
   d5202:	6819      	ldr	r1, [r3, #0]
   d5204:	f003 f8da 	bl	d83bc <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d5208:	a80d      	add	r0, sp, #52	; 0x34
   d520a:	f003 f823 	bl	d8254 <_ZNK8particle7BleUuid4typeEv>
   d520e:	4607      	mov	r7, r0
            uint16_t uuid16 = tempUUID.shorted();
   d5210:	a80d      	add	r0, sp, #52	; 0x34
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d5212:	b947      	cbnz	r7, d5226 <setup+0xf2>
            uint16_t uuid16 = tempUUID.shorted();
   d5214:	f003 f83c 	bl	d8290 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d5218:	9700      	str	r7, [sp, #0]

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d521a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d521e:	2302      	movs	r3, #2
   d5220:	aa09      	add	r2, sp, #36	; 0x24
   d5222:	2103      	movs	r1, #3
   d5224:	e005      	b.n	d5232 <setup+0xfe>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d5226:	f003 f838 	bl	d829a <_ZNK8particle7BleUuid8rawBytesEv>
   d522a:	9600      	str	r6, [sp, #0]
   d522c:	2310      	movs	r3, #16
   d522e:	4602      	mov	r2, r0
   d5230:	2107      	movs	r1, #7
   d5232:	485d      	ldr	r0, [pc, #372]	; (d53a8 <setup+0x274>)
   d5234:	f003 f8e5 	bl	d8402 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   d5238:	2300      	movs	r3, #0
   d523a:	2208      	movs	r2, #8
   d523c:	4958      	ldr	r1, [pc, #352]	; (d53a0 <setup+0x26c>)
   d523e:	485a      	ldr	r0, [pc, #360]	; (d53a8 <setup+0x274>)
   d5240:	f003 f940 	bl	d84c4 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    //advData.appendLocalName(deviceName);           //Local advertising name

    BLE.advertise(&advData);                    //Start advertising the characteristics
   d5244:	f003 fa48 	bl	d86d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5248:	2200      	movs	r2, #0
   d524a:	4957      	ldr	r1, [pc, #348]	; (d53a8 <setup+0x274>)
   d524c:	f003 fac0 	bl	d87d0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   d5250:	f006 fa28 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d5254:	f004 f8ba 	bl	d93cc <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   d5258:	f006 fa24 	bl	db6a4 <_Z19__fetch_global_Wirev>
   d525c:	4953      	ldr	r1, [pc, #332]	; (d53ac <setup+0x278>)
   d525e:	f004 f8b1 	bl	d93c4 <_ZN7TwoWire8setSpeedEm>

    char timestamp[16];
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   d5262:	f005 ffe9 	bl	db238 <_ZN9TimeClass5monthEv>
   d5266:	4606      	mov	r6, r0
   d5268:	f005 ffdc 	bl	db224 <_ZN9TimeClass3dayEv>
   d526c:	4607      	mov	r7, r0
   d526e:	f005 ffeb 	bl	db248 <_ZN9TimeClass4yearEv>
   d5272:	4680      	mov	r8, r0
   d5274:	f005 ffb8 	bl	db1e8 <_ZN9TimeClass4hourEv>
   d5278:	4681      	mov	r9, r0
   d527a:	f005 ffbf 	bl	db1fc <_ZN9TimeClass6minuteEv>
   d527e:	4682      	mov	sl, r0
   d5280:	f005 ffc6 	bl	db210 <_ZN9TimeClass6secondEv>
   d5284:	4633      	mov	r3, r6
   d5286:	4a4a      	ldr	r2, [pc, #296]	; (d53b0 <setup+0x27c>)
   d5288:	9004      	str	r0, [sp, #16]
   d528a:	2110      	movs	r1, #16
   d528c:	e88d 0780 	stmia.w	sp, {r7, r8, r9, sl}
   d5290:	a809      	add	r0, sp, #36	; 0x24
   d5292:	f002 feef 	bl	d8074 <snprintf>
    strcpy(filename,DEF_FILENAME);
   d5296:	4947      	ldr	r1, [pc, #284]	; (d53b4 <setup+0x280>)
   d5298:	4847      	ldr	r0, [pc, #284]	; (d53b8 <setup+0x284>)
   d529a:	f007 fa30 	bl	dc6fe <strcpy>
    strcat(filename,timestamp);
   d529e:	a909      	add	r1, sp, #36	; 0x24
   d52a0:	4845      	ldr	r0, [pc, #276]	; (d53b8 <setup+0x284>)
   d52a2:	f007 f9fb 	bl	dc69c <strcat>
    strcpy(filenameMessages,filename);
   d52a6:	4944      	ldr	r1, [pc, #272]	; (d53b8 <setup+0x284>)
   d52a8:	4844      	ldr	r0, [pc, #272]	; (d53bc <setup+0x288>)
   d52aa:	f007 fa28 	bl	dc6fe <strcpy>
    strcat(filename,".csv");
   d52ae:	4944      	ldr	r1, [pc, #272]	; (d53c0 <setup+0x28c>)
   d52b0:	4841      	ldr	r0, [pc, #260]	; (d53b8 <setup+0x284>)
   d52b2:	f007 f9f3 	bl	dc69c <strcat>
    strcat(filenameMessages,"_LOG.txt");
   d52b6:	4943      	ldr	r1, [pc, #268]	; (d53c4 <setup+0x290>)
   d52b8:	4840      	ldr	r0, [pc, #256]	; (d53bc <setup+0x288>)
   d52ba:	f007 f9ef 	bl	dc69c <strcat>

    Serial.println(filename);
   d52be:	f006 f8c9 	bl	db454 <_Z16_fetch_usbserialv>
   d52c2:	493d      	ldr	r1, [pc, #244]	; (d53b8 <setup+0x284>)
   d52c4:	f005 fc73 	bl	dabae <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   d52c8:	f006 f8c4 	bl	db454 <_Z16_fetch_usbserialv>
   d52cc:	493b      	ldr	r1, [pc, #236]	; (d53bc <setup+0x288>)
   d52ce:	f005 fc6e 	bl	dabae <_ZN5Print7printlnEPKc>

    watchdog.start();
   d52d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d52d6:	483c      	ldr	r0, [pc, #240]	; (d53c8 <setup+0x294>)
   d52d8:	f7ff f886 	bl	d43e8 <_ZN5Timer5startEj>
    ledTimer.start();
   d52dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d52e0:	483a      	ldr	r0, [pc, #232]	; (d53cc <setup+0x298>)
   d52e2:	f7ff f881 	bl	d43e8 <_ZN5Timer5startEj>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d52e6:	4a3a      	ldr	r2, [pc, #232]	; (d53d0 <setup+0x29c>)
   d52e8:	4b3a      	ldr	r3, [pc, #232]	; (d53d4 <setup+0x2a0>)
   d52ea:	920f      	str	r2, [sp, #60]	; 0x3c
   d52ec:	2201      	movs	r2, #1
   d52ee:	930d      	str	r3, [sp, #52]	; 0x34
   d52f0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
   d52f4:	2300      	movs	r3, #0

    if (!sd.begin(chipSelect, SD_SCK_MHZ(4))) {
   d52f6:	aa0d      	add	r2, sp, #52	; 0x34
   d52f8:	2108      	movs	r1, #8
   d52fa:	4837      	ldr	r0, [pc, #220]	; (d53d8 <setup+0x2a4>)
   d52fc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   d5300:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   d5304:	f7ff f90c 	bl	d4520 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d5308:	4606      	mov	r6, r0
   d530a:	b930      	cbnz	r0, d531a <setup+0x1e6>
        Serial.println("Error: could not connect to SD card!");
   d530c:	f006 f8a2 	bl	db454 <_Z16_fetch_usbserialv>
   d5310:	4932      	ldr	r1, [pc, #200]	; (d53dc <setup+0x2a8>)
   d5312:	f005 fc4c 	bl	dabae <_ZN5Print7printlnEPKc>
        logSensors = false;
   d5316:	702e      	strb	r6, [r5, #0]
        logMessages = false;
   d5318:	7026      	strb	r6, [r4, #0]
    }
    if(logSensors){
   d531a:	782b      	ldrb	r3, [r5, #0]
   d531c:	b17b      	cbz	r3, d533e <setup+0x20a>
   d531e:	4830      	ldr	r0, [pc, #192]	; (d53e0 <setup+0x2ac>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   d5320:	7c03      	ldrb	r3, [r0, #16]
   d5322:	b92b      	cbnz	r3, d5330 <setup+0x1fc>
   d5324:	f244 2202 	movw	r2, #16898	; 0x4202
   d5328:	4923      	ldr	r1, [pc, #140]	; (d53b8 <setup+0x284>)
   d532a:	3010      	adds	r0, #16
   d532c:	f7ff f8f0 	bl	d4510 <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   d5330:	492c      	ldr	r1, [pc, #176]	; (d53e4 <setup+0x2b0>)
   d5332:	482b      	ldr	r0, [pc, #172]	; (d53e0 <setup+0x2ac>)
   d5334:	f005 fc3b 	bl	dabae <_ZN5Print7printlnEPKc>
        myFile.close();
   d5338:	482b      	ldr	r0, [pc, #172]	; (d53e8 <setup+0x2b4>)
   d533a:	f001 f811 	bl	d6360 <_ZN7FatFile5closeEv>
    }
    if(logMessages){
   d533e:	7823      	ldrb	r3, [r4, #0]
   d5340:	b183      	cbz	r3, d5364 <setup+0x230>
   d5342:	482a      	ldr	r0, [pc, #168]	; (d53ec <setup+0x2b8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d5344:	7c03      	ldrb	r3, [r0, #16]
   d5346:	b92b      	cbnz	r3, d5354 <setup+0x220>
   d5348:	f244 2202 	movw	r2, #16898	; 0x4202
   d534c:	491b      	ldr	r1, [pc, #108]	; (d53bc <setup+0x288>)
   d534e:	3010      	adds	r0, #16
   d5350:	f7ff f8de 	bl	d4510 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   d5354:	2201      	movs	r2, #1
   d5356:	4926      	ldr	r1, [pc, #152]	; (d53f0 <setup+0x2bc>)
   d5358:	4824      	ldr	r0, [pc, #144]	; (d53ec <setup+0x2b8>)
   d535a:	f7ff fc5b 	bl	d4c14 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        logFile.close();
   d535e:	4825      	ldr	r0, [pc, #148]	; (d53f4 <setup+0x2c0>)
   d5360:	f000 fffe 	bl	d6360 <_ZN7FatFile5closeEv>
    }
    // delete possible existing file
}
   d5364:	b012      	add	sp, #72	; 0x48
   d5366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d536a:	bf00      	nop
   d536c:	2003dac8 	.word	0x2003dac8
   d5370:	2003db33 	.word	0x2003db33
   d5374:	2003e21c 	.word	0x2003e21c
   d5378:	2003e214 	.word	0x2003e214
   d537c:	2003d970 	.word	0x2003d970
   d5380:	2003d96c 	.word	0x2003d96c
   d5384:	2003e2c0 	.word	0x2003e2c0
   d5388:	2003e2cc 	.word	0x2003e2cc
   d538c:	2003db30 	.word	0x2003db30
   d5390:	2003d4d4 	.word	0x2003d4d4
   d5394:	2003d4e0 	.word	0x2003d4e0
   d5398:	2003d488 	.word	0x2003d488
   d539c:	000dee29 	.word	0x000dee29
   d53a0:	2003da26 	.word	0x2003da26
   d53a4:	2003d364 	.word	0x2003d364
   d53a8:	2003d974 	.word	0x2003d974
   d53ac:	00061a80 	.word	0x00061a80
   d53b0:	000dedf8 	.word	0x000dedf8
   d53b4:	000dee33 	.word	0x000dee33
   d53b8:	2003db54 	.word	0x2003db54
   d53bc:	2003da08 	.word	0x2003da08
   d53c0:	000dec5c 	.word	0x000dec5c
   d53c4:	000dee3c 	.word	0x000dee3c
   d53c8:	2003db34 	.word	0x2003db34
   d53cc:	2003daec 	.word	0x2003daec
   d53d0:	003d0900 	.word	0x003d0900
   d53d4:	000dead8 	.word	0x000dead8
   d53d8:	2003d4e8 	.word	0x2003d4e8
   d53dc:	000dee45 	.word	0x000dee45
   d53e0:	2003da30 	.word	0x2003da30
   d53e4:	000dee6a 	.word	0x000dee6a
   d53e8:	2003da40 	.word	0x2003da40
   d53ec:	2003e2d8 	.word	0x2003e2d8
   d53f0:	000deec0 	.word	0x000deec0
   d53f4:	2003e2e8 	.word	0x2003e2e8

000d53f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d53f8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d53fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53fc:	4606      	mov	r6, r0
   d53fe:	460c      	mov	r4, r1
   d5400:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5402:	d916      	bls.n	d5432 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d5404:	4290      	cmp	r0, r2
   d5406:	d215      	bcs.n	d5434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d5408:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d540c:	1a6c      	subs	r4, r5, r1
   d540e:	f1a1 0714 	sub.w	r7, r1, #20
   d5412:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5414:	42af      	cmp	r7, r5
   d5416:	d01c      	beq.n	d5452 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d5418:	b12c      	cbz	r4, d5426 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d541a:	4629      	mov	r1, r5
   d541c:	4620      	mov	r0, r4
   d541e:	f005 fd93 	bl	daf48 <_ZN6StringC1EOS_>
   d5422:	7c2b      	ldrb	r3, [r5, #16]
   d5424:	7423      	strb	r3, [r4, #16]
   d5426:	4628      	mov	r0, r5
   d5428:	f005 fd9e 	bl	daf68 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d542c:	3d14      	subs	r5, #20
   d542e:	3c14      	subs	r4, #20
   d5430:	e7f0      	b.n	d5414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5432:	d00e      	beq.n	d5452 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d5434:	42ac      	cmp	r4, r5
   d5436:	d00c      	beq.n	d5452 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d5438:	b12e      	cbz	r6, d5446 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d543a:	4621      	mov	r1, r4
   d543c:	4630      	mov	r0, r6
   d543e:	f005 fd83 	bl	daf48 <_ZN6StringC1EOS_>
   d5442:	7c23      	ldrb	r3, [r4, #16]
   d5444:	7433      	strb	r3, [r6, #16]
   d5446:	4620      	mov	r0, r4
   d5448:	f005 fd8e 	bl	daf68 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d544c:	3414      	adds	r4, #20
   d544e:	3614      	adds	r6, #20
   d5450:	e7f0      	b.n	d5434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d5452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5458:	2300      	movs	r3, #0
   d545a:	6003      	str	r3, [r0, #0]
   d545c:	6043      	str	r3, [r0, #4]
   d545e:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5460:	684e      	ldr	r6, [r1, #4]
   d5462:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5464:	4604      	mov	r4, r0
   d5466:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5468:	dd24      	ble.n	d54b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d546a:	f04f 0814 	mov.w	r8, #20
   d546e:	fb08 f006 	mul.w	r0, r8, r6
   d5472:	f002 fddf 	bl	d8034 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5476:	4605      	mov	r5, r0
   d5478:	b1e0      	cbz	r0, d54b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d547a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d547e:	fb08 1202 	mla	r2, r8, r2, r1
   d5482:	f7ff ffb9 	bl	d53f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5486:	6820      	ldr	r0, [r4, #0]
   d5488:	f002 fddc 	bl	d8044 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d548c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d548e:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5490:	683e      	ldr	r6, [r7, #0]
   d5492:	687b      	ldr	r3, [r7, #4]
   d5494:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d5498:	4546      	cmp	r6, r8
   d549a:	d009      	beq.n	d54b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d549c:	b12d      	cbz	r5, d54aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d549e:	4631      	mov	r1, r6
   d54a0:	4628      	mov	r0, r5
   d54a2:	f005 fdca 	bl	db03a <_ZN6StringC1ERKS_>
   d54a6:	7c33      	ldrb	r3, [r6, #16]
   d54a8:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d54aa:	3614      	adds	r6, #20
   d54ac:	3514      	adds	r5, #20
   d54ae:	e7f3      	b.n	d5498 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d54b0:	687b      	ldr	r3, [r7, #4]
   d54b2:	6063      	str	r3, [r4, #4]
    }
}
   d54b4:	4620      	mov	r0, r4
   d54b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d54bc <_GLOBAL__sub_I_SystemMode>:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
}
   d54bc:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d54be:	4baf      	ldr	r3, [pc, #700]	; (d577c <_GLOBAL__sub_I_SystemMode+0x2c0>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d54c0:	4caf      	ldr	r4, [pc, #700]	; (d5780 <_GLOBAL__sub_I_SystemMode+0x2c4>)
   d54c2:	b092      	sub	sp, #72	; 0x48
   d54c4:	2501      	movs	r5, #1
   d54c6:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d54c8:	f002 fb4e 	bl	d7b68 <HAL_Pin_Map>
   d54cc:	2300      	movs	r3, #0
   d54ce:	6023      	str	r3, [r4, #0]
   d54d0:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d54d2:	71a3      	strb	r3, [r4, #6]
   d54d4:	8123      	strh	r3, [r4, #8]
   d54d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d54da:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d54dc:	2003      	movs	r0, #3
   d54de:	f002 fcfd 	bl	d7edc <set_system_mode>
#define CUSTOM_DATA_LEN     8
#define MAX_FILENAME_LEN    30

#define chipSelect D8//A5

SYSTEM_MODE(MANUAL);
   d54e2:	4aa8      	ldr	r2, [pc, #672]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d54e4:	49a8      	ldr	r1, [pc, #672]	; (d5788 <_GLOBAL__sub_I_SystemMode+0x2cc>)
   d54e6:	4620      	mov	r0, r4
   d54e8:	f006 f902 	bl	db6f0 <__aeabi_atexit>

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d54ec:	4ca7      	ldr	r4, [pc, #668]	; (d578c <_GLOBAL__sub_I_SystemMode+0x2d0>)

//GPS Buffers and Objects
char nmeaBuffer[100];
MicroNMEA nmea(nmeaBuffer, sizeof(nmeaBuffer));
   d54ee:	49a8      	ldr	r1, [pc, #672]	; (d5790 <_GLOBAL__sub_I_SystemMode+0x2d4>)
   d54f0:	48a8      	ldr	r0, [pc, #672]	; (d5794 <_GLOBAL__sub_I_SystemMode+0x2d8>)
   d54f2:	2264      	movs	r2, #100	; 0x64
   d54f4:	f000 fb06 	bl	d5b04 <_ZN9MicroNMEAC1EPvh>
SFE_UBLOX_GPS myGPS;
   d54f8:	48a7      	ldr	r0, [pc, #668]	; (d5798 <_GLOBAL__sub_I_SystemMode+0x2dc>)
   d54fa:	f002 f8ab 	bl	d7654 <_ZN13SFE_UBLOX_GPSC1Ev>
   d54fe:	6823      	ldr	r3, [r4, #0]
   d5500:	07db      	lsls	r3, r3, #31
   d5502:	d40a      	bmi.n	d551a <_GLOBAL__sub_I_SystemMode+0x5e>
   d5504:	4620      	mov	r0, r4
   d5506:	f7fe fdd9 	bl	d40bc <__cxa_guard_acquire>
   d550a:	b130      	cbz	r0, d551a <_GLOBAL__sub_I_SystemMode+0x5e>
   d550c:	4629      	mov	r1, r5
   d550e:	48a3      	ldr	r0, [pc, #652]	; (d579c <_GLOBAL__sub_I_SystemMode+0x2e0>)
   d5510:	f005 fbcc 	bl	dacac <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5514:	4620      	mov	r0, r4
   d5516:	f7fe fdd6 	bl	d40c6 <__cxa_guard_release>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d551a:	4ba1      	ldr	r3, [pc, #644]	; (d57a0 <_GLOBAL__sub_I_SystemMode+0x2e4>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d551c:	48a1      	ldr	r0, [pc, #644]	; (d57a4 <_GLOBAL__sub_I_SystemMode+0x2e8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d551e:	4da2      	ldr	r5, [pc, #648]	; (d57a8 <_GLOBAL__sub_I_SystemMode+0x2ec>)

//SD File system object
SdFat sd((SPIClass*)&SPI1);

File myFile;
   d5520:	49a2      	ldr	r1, [pc, #648]	; (d57ac <_GLOBAL__sub_I_SystemMode+0x2f0>)
   d5522:	6005      	str	r5, [r0, #0]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d5524:	2264      	movs	r2, #100	; 0x64
   d5526:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d552a:	4aa1      	ldr	r2, [pc, #644]	; (d57b0 <_GLOBAL__sub_I_SystemMode+0x2f4>)
   d552c:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d5530:	2201      	movs	r2, #1
   d5532:	2400      	movs	r4, #0
   d5534:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5538:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d553c:	4a97      	ldr	r2, [pc, #604]	; (d579c <_GLOBAL__sub_I_SystemMode+0x2e0>)
   d553e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   d5542:	71dc      	strb	r4, [r3, #7]
   d5544:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d5548:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d554c:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d5550:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d5554:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d5558:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d555c:	6086      	str	r6, [r0, #8]
   d555e:	4a89      	ldr	r2, [pc, #548]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5560:	7404      	strb	r4, [r0, #16]
   d5562:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5564:	6044      	str	r4, [r0, #4]
   d5566:	f006 f8c3 	bl	db6f0 <__aeabi_atexit>
   d556a:	4892      	ldr	r0, [pc, #584]	; (d57b4 <_GLOBAL__sub_I_SystemMode+0x2f8>)
File logFile;
   d556c:	4a85      	ldr	r2, [pc, #532]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d556e:	6086      	str	r6, [r0, #8]
   d5570:	498e      	ldr	r1, [pc, #568]	; (d57ac <_GLOBAL__sub_I_SystemMode+0x2f0>)
   d5572:	7404      	strb	r4, [r0, #16]
   d5574:	7444      	strb	r4, [r0, #17]
   d5576:	6044      	str	r4, [r0, #4]
   d5578:	6005      	str	r5, [r0, #0]
   d557a:	f006 f8b9 	bl	db6f0 <__aeabi_atexit>
   d557e:	488e      	ldr	r0, [pc, #568]	; (d57b8 <_GLOBAL__sub_I_SystemMode+0x2fc>)
File logDir;
   d5580:	4a80      	ldr	r2, [pc, #512]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5582:	498a      	ldr	r1, [pc, #552]	; (d57ac <_GLOBAL__sub_I_SystemMode+0x2f0>)
   d5584:	6086      	str	r6, [r0, #8]
   d5586:	7404      	strb	r4, [r0, #16]
   d5588:	7444      	strb	r4, [r0, #17]
   d558a:	6044      	str	r4, [r0, #4]
   d558c:	6005      	str	r5, [r0, #0]
   d558e:	f006 f8af 	bl	db6f0 <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5592:	9405      	str	r4, [sp, #20]
   d5594:	9406      	str	r4, [sp, #24]
   d5596:	9407      	str	r4, [sp, #28]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d5598:	f005 ff5c 	bl	db454 <_Z16_fetch_usbserialv>
   d559c:	a905      	add	r1, sp, #20
   d559e:	4606      	mov	r6, r0
   d55a0:	a808      	add	r0, sp, #32
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d55a2:	4d86      	ldr	r5, [pc, #536]	; (d57bc <_GLOBAL__sub_I_SystemMode+0x300>)
   d55a4:	f7ff ff56 	bl	d5454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d55a8:	a908      	add	r1, sp, #32
   d55aa:	a80b      	add	r0, sp, #44	; 0x2c
   d55ac:	f7ff ff52 	bl	d5454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d55b0:	4b83      	ldr	r3, [pc, #524]	; (d57c0 <_GLOBAL__sub_I_SystemMode+0x304>)
   d55b2:	602b      	str	r3, [r5, #0]
   d55b4:	a90b      	add	r1, sp, #44	; 0x2c
   d55b6:	a80e      	add	r0, sp, #56	; 0x38
   d55b8:	f7ff ff4c 	bl	d5454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d55bc:	aa0e      	add	r2, sp, #56	; 0x38
   d55be:	211e      	movs	r1, #30
   d55c0:	1d28      	adds	r0, r5, #4
   d55c2:	f004 fe40 	bl	da246 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d55c6:	a80e      	add	r0, sp, #56	; 0x38
   d55c8:	f7ff f87e 	bl	d46c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d55cc:	a80b      	add	r0, sp, #44	; 0x2c
   d55ce:	f7ff f87b 	bl	d46c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d55d2:	4b7c      	ldr	r3, [pc, #496]	; (d57c4 <_GLOBAL__sub_I_SystemMode+0x308>)
   d55d4:	602b      	str	r3, [r5, #0]
   d55d6:	622e      	str	r6, [r5, #32]
   d55d8:	a808      	add	r0, sp, #32
   d55da:	f7ff f875 	bl	d46c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d55de:	4b7a      	ldr	r3, [pc, #488]	; (d57c8 <_GLOBAL__sub_I_SystemMode+0x30c>)
   d55e0:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d55e2:	f005 ff37 	bl	db454 <_Z16_fetch_usbserialv>
   d55e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d55ea:	f005 ff23 	bl	db434 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d55ee:	f004 fad3 	bl	d9b98 <_ZN5spark10LogManager8instanceEv>
   d55f2:	4629      	mov	r1, r5
   d55f4:	f004 fdba 	bl	da16c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   d55f8:	a805      	add	r0, sp, #20
   d55fa:	f7ff f865 	bl	d46c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d55fe:	4a61      	ldr	r2, [pc, #388]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5600:	4972      	ldr	r1, [pc, #456]	; (d57cc <_GLOBAL__sub_I_SystemMode+0x310>)
   d5602:	4628      	mov	r0, r5
const char* WaterNetService = "b4206910-dc4b-5743-c8b1-92d0e75182b0"; //Main BLE Service
const char* rxUuid          = "b4206912-dc4b-5743-c8b1-92d0e75182b0"; //GPS Latitude Service
const char* txUuid          = "b4206913-dc4b-5743-c8b1-92d0e75182b0"; //GPS Longitude Service
const char* offldUuid       = "b4206914-dc4b-5743-c8b1-92d0e75182b0"; //GPS Longitude Service

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   d5604:	4d72      	ldr	r5, [pc, #456]	; (d57d0 <_GLOBAL__sub_I_SystemMode+0x314>)

File myFile;
File logFile;
File logDir;

SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   d5606:	f006 f873 	bl	db6f0 <__aeabi_atexit>
const char* WaterNetService = "b4206910-dc4b-5743-c8b1-92d0e75182b0"; //Main BLE Service
const char* rxUuid          = "b4206912-dc4b-5743-c8b1-92d0e75182b0"; //GPS Latitude Service
const char* txUuid          = "b4206913-dc4b-5743-c8b1-92d0e75182b0"; //GPS Longitude Service
const char* offldUuid       = "b4206914-dc4b-5743-c8b1-92d0e75182b0"; //GPS Longitude Service

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   d560a:	9402      	str	r4, [sp, #8]
   d560c:	9401      	str	r4, [sp, #4]
   d560e:	682b      	ldr	r3, [r5, #0]
   d5610:	9300      	str	r3, [sp, #0]
   d5612:	4b70      	ldr	r3, [pc, #448]	; (d57d4 <_GLOBAL__sub_I_SystemMode+0x318>)
   d5614:	4970      	ldr	r1, [pc, #448]	; (d57d8 <_GLOBAL__sub_I_SystemMode+0x31c>)
   d5616:	681b      	ldr	r3, [r3, #0]
   d5618:	4870      	ldr	r0, [pc, #448]	; (d57dc <_GLOBAL__sub_I_SystemMode+0x320>)
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d561a:	2610      	movs	r6, #16
   d561c:	aa0e      	add	r2, sp, #56	; 0x38
   d561e:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
   d5622:	f7ff f864 	bl	d46ee <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d5626:	4a57      	ldr	r2, [pc, #348]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5628:	496d      	ldr	r1, [pc, #436]	; (d57e0 <_GLOBAL__sub_I_SystemMode+0x324>)
   d562a:	486c      	ldr	r0, [pc, #432]	; (d57dc <_GLOBAL__sub_I_SystemMode+0x320>)
   d562c:	f006 f860 	bl	db6f0 <__aeabi_atexit>
   d5630:	2304      	movs	r3, #4
   d5632:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   d5636:	4b6b      	ldr	r3, [pc, #428]	; (d57e4 <_GLOBAL__sub_I_SystemMode+0x328>)
   d5638:	9402      	str	r4, [sp, #8]
   d563a:	9301      	str	r3, [sp, #4]
   d563c:	682b      	ldr	r3, [r5, #0]
   d563e:	9300      	str	r3, [sp, #0]
   d5640:	4b69      	ldr	r3, [pc, #420]	; (d57e8 <_GLOBAL__sub_I_SystemMode+0x32c>)
   d5642:	496a      	ldr	r1, [pc, #424]	; (d57ec <_GLOBAL__sub_I_SystemMode+0x330>)
   d5644:	681b      	ldr	r3, [r3, #0]
   d5646:	486a      	ldr	r0, [pc, #424]	; (d57f0 <_GLOBAL__sub_I_SystemMode+0x334>)
   d5648:	aa0e      	add	r2, sp, #56	; 0x38
   d564a:	f7ff f850 	bl	d46ee <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d564e:	4a4d      	ldr	r2, [pc, #308]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5650:	4963      	ldr	r1, [pc, #396]	; (d57e0 <_GLOBAL__sub_I_SystemMode+0x324>)
   d5652:	4867      	ldr	r0, [pc, #412]	; (d57f0 <_GLOBAL__sub_I_SystemMode+0x334>)
   d5654:	f006 f84c 	bl	db6f0 <__aeabi_atexit>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   d5658:	9402      	str	r4, [sp, #8]
   d565a:	9401      	str	r4, [sp, #4]
   d565c:	682b      	ldr	r3, [r5, #0]
   d565e:	9300      	str	r3, [sp, #0]
   d5660:	4b64      	ldr	r3, [pc, #400]	; (d57f4 <_GLOBAL__sub_I_SystemMode+0x338>)
   d5662:	4965      	ldr	r1, [pc, #404]	; (d57f8 <_GLOBAL__sub_I_SystemMode+0x33c>)
   d5664:	681b      	ldr	r3, [r3, #0]
   d5666:	4865      	ldr	r0, [pc, #404]	; (d57fc <_GLOBAL__sub_I_SystemMode+0x340>)
   d5668:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
   d566c:	aa0e      	add	r2, sp, #56	; 0x38
   d566e:	f7ff f83e 	bl	d46ee <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d5672:	4a44      	ldr	r2, [pc, #272]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5674:	495a      	ldr	r1, [pc, #360]	; (d57e0 <_GLOBAL__sub_I_SystemMode+0x324>)
   d5676:	4861      	ldr	r0, [pc, #388]	; (d57fc <_GLOBAL__sub_I_SystemMode+0x340>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d5678:	4d61      	ldr	r5, [pc, #388]	; (d5800 <_GLOBAL__sub_I_SystemMode+0x344>)
   d567a:	f006 f839 	bl	db6f0 <__aeabi_atexit>
   d567e:	1928      	adds	r0, r5, r4
   d5680:	f002 fd8a 	bl	d8198 <_ZN8particle10BleAddressC1Ev>
   d5684:	f104 0008 	add.w	r0, r4, #8
   d5688:	4428      	add	r0, r5
   d568a:	f002 ff01 	bl	d8490 <_ZN8particle18BleAdvertisingDataC1Ev>
   d568e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5692:	4428      	add	r0, r5
   d5694:	3454      	adds	r4, #84	; 0x54
   d5696:	f002 fefb 	bl	d8490 <_ZN8particle18BleAdvertisingDataC1Ev>

BleScanResult scanResults[SCAN_RESULT_COUNT];
   d569a:	f5b4 6fd2 	cmp.w	r4, #1680	; 0x690
   d569e:	d1ee      	bne.n	d567e <_GLOBAL__sub_I_SystemMode+0x1c2>

BleCharacteristic peerTxCharacteristic;
   d56a0:	4858      	ldr	r0, [pc, #352]	; (d5804 <_GLOBAL__sub_I_SystemMode+0x348>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d56a2:	4d59      	ldr	r5, [pc, #356]	; (d5808 <_GLOBAL__sub_I_SystemMode+0x34c>)
	    _M_manager = &_My_handler::_M_manager;
   d56a4:	4c59      	ldr	r4, [pc, #356]	; (d580c <_GLOBAL__sub_I_SystemMode+0x350>)
   d56a6:	f003 fbcd 	bl	d8e44 <_ZN8particle17BleCharacteristicC1Ev>
   d56aa:	4a36      	ldr	r2, [pc, #216]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d56ac:	494c      	ldr	r1, [pc, #304]	; (d57e0 <_GLOBAL__sub_I_SystemMode+0x324>)
   d56ae:	4855      	ldr	r0, [pc, #340]	; (d5804 <_GLOBAL__sub_I_SystemMode+0x348>)
   d56b0:	f006 f81e 	bl	db6f0 <__aeabi_atexit>
BleCharacteristic peerRxCharacteristic;
   d56b4:	4856      	ldr	r0, [pc, #344]	; (d5810 <_GLOBAL__sub_I_SystemMode+0x354>)
   d56b6:	f003 fbc5 	bl	d8e44 <_ZN8particle17BleCharacteristicC1Ev>
   d56ba:	4a32      	ldr	r2, [pc, #200]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d56bc:	4948      	ldr	r1, [pc, #288]	; (d57e0 <_GLOBAL__sub_I_SystemMode+0x324>)
   d56be:	4854      	ldr	r0, [pc, #336]	; (d5810 <_GLOBAL__sub_I_SystemMode+0x354>)
   d56c0:	f006 f816 	bl	db6f0 <__aeabi_atexit>
BleCharacteristic offldCopyCharacteristic;
   d56c4:	4853      	ldr	r0, [pc, #332]	; (d5814 <_GLOBAL__sub_I_SystemMode+0x358>)
   d56c6:	f003 fbbd 	bl	d8e44 <_ZN8particle17BleCharacteristicC1Ev>
   d56ca:	4a2e      	ldr	r2, [pc, #184]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d56cc:	4944      	ldr	r1, [pc, #272]	; (d57e0 <_GLOBAL__sub_I_SystemMode+0x324>)
   d56ce:	4851      	ldr	r0, [pc, #324]	; (d5814 <_GLOBAL__sub_I_SystemMode+0x358>)
   d56d0:	f006 f80e 	bl	db6f0 <__aeabi_atexit>
BlePeerDevice peer;
   d56d4:	4850      	ldr	r0, [pc, #320]	; (d5818 <_GLOBAL__sub_I_SystemMode+0x35c>)
   d56d6:	f003 f91f 	bl	d8918 <_ZN8particle13BlePeerDeviceC1Ev>
   d56da:	4a2a      	ldr	r2, [pc, #168]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d56dc:	494f      	ldr	r1, [pc, #316]	; (d581c <_GLOBAL__sub_I_SystemMode+0x360>)
   d56de:	484e      	ldr	r0, [pc, #312]	; (d5818 <_GLOBAL__sub_I_SystemMode+0x35c>)
   d56e0:	f006 f806 	bl	db6f0 <__aeabi_atexit>
BleAdvertisingData advData;                 //Advertising data
   d56e4:	484e      	ldr	r0, [pc, #312]	; (d5820 <_GLOBAL__sub_I_SystemMode+0x364>)
   d56e6:	f002 fed3 	bl	d8490 <_ZN8particle18BleAdvertisingDataC1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d56ea:	4b4e      	ldr	r3, [pc, #312]	; (d5824 <_GLOBAL__sub_I_SystemMode+0x368>)
   d56ec:	930e      	str	r3, [sp, #56]	; 0x38
void sensorHandler();
void dataOffloader();
void statusUpdate();

//Tmers
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   d56ee:	aa0e      	add	r2, sp, #56	; 0x38
   d56f0:	2300      	movs	r3, #0
   d56f2:	f643 2198 	movw	r1, #15000	; 0x3a98
   d56f6:	484c      	ldr	r0, [pc, #304]	; (d5828 <_GLOBAL__sub_I_SystemMode+0x36c>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d56f8:	9511      	str	r5, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   d56fa:	9410      	str	r4, [sp, #64]	; 0x40
   d56fc:	f7fe fe04 	bl	d4308 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5700:	a80e      	add	r0, sp, #56	; 0x38
   d5702:	f7fe fdf3 	bl	d42ec <_ZNSt14_Function_baseD1Ev>
   d5706:	4a1f      	ldr	r2, [pc, #124]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5708:	4948      	ldr	r1, [pc, #288]	; (d582c <_GLOBAL__sub_I_SystemMode+0x370>)
   d570a:	4847      	ldr	r0, [pc, #284]	; (d5828 <_GLOBAL__sub_I_SystemMode+0x36c>)
   d570c:	f005 fff0 	bl	db6f0 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5710:	4b47      	ldr	r3, [pc, #284]	; (d5830 <_GLOBAL__sub_I_SystemMode+0x374>)
   d5712:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   d5714:	aa0e      	add	r2, sp, #56	; 0x38
   d5716:	2300      	movs	r3, #0
   d5718:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d571c:	4845      	ldr	r0, [pc, #276]	; (d5834 <_GLOBAL__sub_I_SystemMode+0x378>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d571e:	9511      	str	r5, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   d5720:	9410      	str	r4, [sp, #64]	; 0x40
   d5722:	f7fe fdf1 	bl	d4308 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5726:	a80e      	add	r0, sp, #56	; 0x38
   d5728:	f7fe fde0 	bl	d42ec <_ZNSt14_Function_baseD1Ev>
   d572c:	4a15      	ldr	r2, [pc, #84]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d572e:	493f      	ldr	r1, [pc, #252]	; (d582c <_GLOBAL__sub_I_SystemMode+0x370>)
   d5730:	4840      	ldr	r0, [pc, #256]	; (d5834 <_GLOBAL__sub_I_SystemMode+0x378>)
   d5732:	f005 ffdd 	bl	db6f0 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5736:	4b40      	ldr	r3, [pc, #256]	; (d5838 <_GLOBAL__sub_I_SystemMode+0x37c>)
   d5738:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   d573a:	aa0e      	add	r2, sp, #56	; 0x38
   d573c:	2300      	movs	r3, #0
   d573e:	f241 3188 	movw	r1, #5000	; 0x1388
   d5742:	483e      	ldr	r0, [pc, #248]	; (d583c <_GLOBAL__sub_I_SystemMode+0x380>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5744:	9511      	str	r5, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   d5746:	9410      	str	r4, [sp, #64]	; 0x40
   d5748:	f7fe fdde 	bl	d4308 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d574c:	a80e      	add	r0, sp, #56	; 0x38
   d574e:	f7fe fdcd 	bl	d42ec <_ZNSt14_Function_baseD1Ev>
   d5752:	4a0c      	ldr	r2, [pc, #48]	; (d5784 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5754:	4935      	ldr	r1, [pc, #212]	; (d582c <_GLOBAL__sub_I_SystemMode+0x370>)
   d5756:	4839      	ldr	r0, [pc, #228]	; (d583c <_GLOBAL__sub_I_SystemMode+0x380>)
   d5758:	f005 ffca 	bl	db6f0 <__aeabi_atexit>
inline particle::LEDStatus::LEDStatus(LEDPattern pattern, LEDPriority priority, LEDSource source) :
        LEDStatus(pattern, LED_SPEED_NORMAL, priority, source) { // Use normal speed by default
}

inline particle::LEDStatus::LEDStatus(LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d575c:	2200      	movs	r2, #0
   d575e:	2114      	movs	r1, #20
   d5760:	2001      	movs	r0, #1
   d5762:	f002 fbd3 	bl	d7f0c <led_pattern_period>
}

inline particle::LEDStatus::LEDStatus(LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) :
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   d5766:	2201      	movs	r2, #1
   d5768:	2314      	movs	r3, #20
   d576a:	9201      	str	r2, [sp, #4]
   d576c:	9300      	str	r3, [sp, #0]
   d576e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   d5772:	4603      	mov	r3, r0
   d5774:	4832      	ldr	r0, [pc, #200]	; (d5840 <_GLOBAL__sub_I_SystemMode+0x384>)
   d5776:	f004 f8b1 	bl	d98dc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   d577a:	e063      	b.n	d5844 <_GLOBAL__sub_I_SystemMode+0x388>
   d577c:	2003d4dc 	.word	0x2003d4dc
   d5780:	2003e208 	.word	0x2003e208
   d5784:	2003d468 	.word	0x2003d468
   d5788:	000d4265 	.word	0x000d4265
   d578c:	2003d46c 	.word	0x2003d46c
   d5790:	2003da64 	.word	0x2003da64
   d5794:	2003d490 	.word	0x2003d490
   d5798:	2003e230 	.word	0x2003e230
   d579c:	2003d470 	.word	0x2003d470
   d57a0:	2003d4e8 	.word	0x2003d4e8
   d57a4:	2003da30 	.word	0x2003da30
   d57a8:	000deb3c 	.word	0x000deb3c
   d57ac:	000d4169 	.word	0x000d4169
   d57b0:	000dead8 	.word	0x000dead8
   d57b4:	2003e2d8 	.word	0x2003e2d8
   d57b8:	2003d998 	.word	0x2003d998
   d57bc:	2003d9e4 	.word	0x2003d9e4
   d57c0:	000deaf8 	.word	0x000deaf8
   d57c4:	000df384 	.word	0x000df384
   d57c8:	000deb24 	.word	0x000deb24
   d57cc:	000d42a5 	.word	0x000d42a5
   d57d0:	2003d364 	.word	0x2003d364
   d57d4:	2003d36c 	.word	0x2003d36c
   d57d8:	000deee5 	.word	0x000deee5
   d57dc:	2003d4d4 	.word	0x2003d4d4
   d57e0:	000d8857 	.word	0x000d8857
   d57e4:	000d4a55 	.word	0x000d4a55
   d57e8:	2003d360 	.word	0x2003d360
   d57ec:	000deee8 	.word	0x000deee8
   d57f0:	2003d4e0 	.word	0x2003d4e0
   d57f4:	2003d368 	.word	0x2003d368
   d57f8:	000deeeb 	.word	0x000deeeb
   d57fc:	2003d488 	.word	0x2003d488
   d5800:	2003db78 	.word	0x2003db78
   d5804:	2003db28 	.word	0x2003db28
   d5808:	000d414d 	.word	0x000d414d
   d580c:	000d4151 	.word	0x000d4151
   d5810:	2003e2c4 	.word	0x2003e2c4
   d5814:	2003e220 	.word	0x2003e220
   d5818:	2003e228 	.word	0x2003e228
   d581c:	000d8865 	.word	0x000d8865
   d5820:	2003d974 	.word	0x2003d974
   d5824:	000d4c21 	.word	0x000d4c21
   d5828:	2003db34 	.word	0x2003db34
   d582c:	000d438d 	.word	0x000d438d
   d5830:	000d4429 	.word	0x000d4429
   d5834:	2003daec 	.word	0x2003daec
   d5838:	000d40f5 	.word	0x000d40f5
   d583c:	2003db0c 	.word	0x2003db0c
   d5840:	2003dac8 	.word	0x2003dac8

//LED Control
LEDStatus status;
   d5844:	4a07      	ldr	r2, [pc, #28]	; (d5864 <_GLOBAL__sub_I_SystemMode+0x3a8>)
   d5846:	4908      	ldr	r1, [pc, #32]	; (d5868 <_GLOBAL__sub_I_SystemMode+0x3ac>)
   d5848:	4808      	ldr	r0, [pc, #32]	; (d586c <_GLOBAL__sub_I_SystemMode+0x3b0>)
   d584a:	f005 ff51 	bl	db6f0 <__aeabi_atexit>
char txBuf[UART_TX_BUF_SIZE];
size_t txLen = 0;
char filename[MAX_FILENAME_LEN];
char filenameMessages[MAX_FILENAME_LEN];

String xbeeBuf;
   d584e:	4908      	ldr	r1, [pc, #32]	; (d5870 <_GLOBAL__sub_I_SystemMode+0x3b4>)
   d5850:	4808      	ldr	r0, [pc, #32]	; (d5874 <_GLOBAL__sub_I_SystemMode+0x3b8>)
   d5852:	f005 fbd0 	bl	daff6 <_ZN6StringC1EPK19__FlashStringHelper>
   d5856:	4a03      	ldr	r2, [pc, #12]	; (d5864 <_GLOBAL__sub_I_SystemMode+0x3a8>)
   d5858:	4907      	ldr	r1, [pc, #28]	; (d5878 <_GLOBAL__sub_I_SystemMode+0x3bc>)
   d585a:	4806      	ldr	r0, [pc, #24]	; (d5874 <_GLOBAL__sub_I_SystemMode+0x3b8>)
   d585c:	f005 ff48 	bl	db6f0 <__aeabi_atexit>
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
}
   d5860:	b012      	add	sp, #72	; 0x48
   d5862:	bd70      	pop	{r4, r5, r6, pc}
   d5864:	2003d468 	.word	0x2003d468
   d5868:	000d4275 	.word	0x000d4275
   d586c:	2003dac8 	.word	0x2003dac8
   d5870:	000def85 	.word	0x000def85
   d5874:	2003d9d4 	.word	0x2003d9d4
   d5878:	000daf69 	.word	0x000daf69

000d587c <_ZN9MicroNMEA13isEndOfFieldsEc>:
	}


protected:
	static inline bool isEndOfFields(char c) {
		return c == '*' || c == '\0' || c == '\r' || c == '\n';
   d587c:	282a      	cmp	r0, #42	; 0x2a
   d587e:	d007      	beq.n	d5890 <_ZN9MicroNMEA13isEndOfFieldsEc+0x14>
   d5880:	b130      	cbz	r0, d5890 <_ZN9MicroNMEA13isEndOfFieldsEc+0x14>
   d5882:	280d      	cmp	r0, #13
   d5884:	d004      	beq.n	d5890 <_ZN9MicroNMEA13isEndOfFieldsEc+0x14>
   d5886:	f1a0 030a 	sub.w	r3, r0, #10
   d588a:	4258      	negs	r0, r3
   d588c:	4158      	adcs	r0, r3
   d588e:	4770      	bx	lr
   d5890:	2001      	movs	r0, #1
	}
   d5892:	4770      	bx	lr

000d5894 <_ZN9MicroNMEA9skipFieldEPKc>:

}


const char* MicroNMEA::skipField(const char* s)
{
   d5894:	b570      	push	{r4, r5, r6, lr}
	if (s == nullptr)
   d5896:	b190      	cbz	r0, d58be <_ZN9MicroNMEA9skipFieldEPKc+0x2a>
   d5898:	4604      	mov	r4, r0
   d589a:	4625      	mov	r5, r4
		return nullptr;

	while (!isEndOfFields(*s)) {
   d589c:	f814 6b01 	ldrb.w	r6, [r4], #1
   d58a0:	4630      	mov	r0, r6
   d58a2:	f7ff ffeb 	bl	d587c <_ZN9MicroNMEA13isEndOfFieldsEc>
   d58a6:	b948      	cbnz	r0, d58bc <_ZN9MicroNMEA9skipFieldEPKc+0x28>
		if (*s == ',') {
   d58a8:	2e2c      	cmp	r6, #44	; 0x2c
   d58aa:	d1f6      	bne.n	d589a <_ZN9MicroNMEA9skipFieldEPKc+0x6>
			// Check next character
			if (isEndOfFields(*++s))
   d58ac:	7868      	ldrb	r0, [r5, #1]
   d58ae:	f7ff ffe5 	bl	d587c <_ZN9MicroNMEA13isEndOfFieldsEc>
				break;
			else
				return s;
   d58b2:	2800      	cmp	r0, #0
   d58b4:	bf0c      	ite	eq
   d58b6:	4620      	moveq	r0, r4
   d58b8:	2000      	movne	r0, #0
   d58ba:	bd70      	pop	{r4, r5, r6, pc}
		}
		++s;
	}
	return nullptr; // End of string or valid sentence
   d58bc:	2000      	movs	r0, #0
}
   d58be:	bd70      	pop	{r4, r5, r6, pc}

000d58c0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>:


unsigned int MicroNMEA::parseUnsignedInt(const char *s, uint8_t len)
{
   d58c0:	b510      	push	{r4, lr}
	int r = 0;
   d58c2:	2300      	movs	r3, #0
	while (len--)
		r = 10 * r + *s++ - '0';
   d58c4:	240a      	movs	r4, #10


unsigned int MicroNMEA::parseUnsignedInt(const char *s, uint8_t len)
{
	int r = 0;
	while (len--)
   d58c6:	3901      	subs	r1, #1
   d58c8:	b2c9      	uxtb	r1, r1
   d58ca:	29ff      	cmp	r1, #255	; 0xff
   d58cc:	d005      	beq.n	d58da <_ZN9MicroNMEA16parseUnsignedIntEPKch+0x1a>
		r = 10 * r + *s++ - '0';
   d58ce:	f810 2b01 	ldrb.w	r2, [r0], #1
   d58d2:	fb04 2303 	mla	r3, r4, r3, r2
   d58d6:	3b30      	subs	r3, #48	; 0x30


unsigned int MicroNMEA::parseUnsignedInt(const char *s, uint8_t len)
{
	int r = 0;
	while (len--)
   d58d8:	e7f5      	b.n	d58c6 <_ZN9MicroNMEA16parseUnsignedIntEPKch+0x6>
		r = 10 * r + *s++ - '0';
	return r;
}
   d58da:	4618      	mov	r0, r3
   d58dc:	bd10      	pop	{r4, pc}

000d58de <_ZN9MicroNMEA10parseFloatEPKchPS1_>:


long MicroNMEA::parseFloat(const char* s, uint8_t log10Multiplier, const char** eptr)
{
   d58de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d58e2:	460c      	mov	r4, r1
   d58e4:	4616      	mov	r6, r2
   d58e6:	4607      	mov	r7, r0
	int8_t neg = 1;
	long r = 0;
	while (isspace(*s))
   d58e8:	f897 8000 	ldrb.w	r8, [r7]
   d58ec:	4640      	mov	r0, r8
   d58ee:	463d      	mov	r5, r7
   d58f0:	3701      	adds	r7, #1
   d58f2:	f006 fd67 	bl	dc3c4 <isspace>
   d58f6:	2800      	cmp	r0, #0
   d58f8:	d1f6      	bne.n	d58e8 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xa>
		++s;
	if (*s == '-') {
   d58fa:	f1b8 0f2d 	cmp.w	r8, #45	; 0x2d
   d58fe:	d103      	bne.n	d5908 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x2a>
		neg = -1;
		++s;
   d5900:	463d      	mov	r5, r7
	int8_t neg = 1;
	long r = 0;
	while (isspace(*s))
		++s;
	if (*s == '-') {
		neg = -1;
   d5902:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   d5906:	e005      	b.n	d5914 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x36>
		++s;
	}
	else if (*s == '+')
		++s;
   d5908:	f1b8 0f2b 	cmp.w	r8, #43	; 0x2b
   d590c:	bf08      	it	eq
   d590e:	463d      	moveq	r5, r7
   d5910:	f04f 0e01 	mov.w	lr, #1
}


long MicroNMEA::parseFloat(const char* s, uint8_t log10Multiplier, const char** eptr)
{
	int8_t neg = 1;
   d5914:	2200      	movs	r2, #0
	}
	else if (*s == '+')
		++s;

	while (isdigit(*s))
		r = 10*r + *s++ - '0';
   d5916:	230a      	movs	r3, #10
		++s;
	}
	else if (*s == '+')
		++s;

	while (isdigit(*s))
   d5918:	782f      	ldrb	r7, [r5, #0]
   d591a:	f1a7 0130 	sub.w	r1, r7, #48	; 0x30
   d591e:	2909      	cmp	r1, #9
   d5920:	4628      	mov	r0, r5
   d5922:	f105 0501 	add.w	r5, r5, #1
   d5926:	d903      	bls.n	d5930 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x52>
   d5928:	4621      	mov	r1, r4
   d592a:	2301      	movs	r3, #1

static long exp10(uint8_t b)
{
	long r = 1;
	while (b--)
		r *= 10;
   d592c:	250a      	movs	r5, #10
   d592e:	e003      	b.n	d5938 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x5a>
	}
	else if (*s == '+')
		++s;

	while (isdigit(*s))
		r = 10*r + *s++ - '0';
   d5930:	fb03 7202 	mla	r2, r3, r2, r7
   d5934:	3a30      	subs	r2, #48	; 0x30
		++s;
	}
	else if (*s == '+')
		++s;

	while (isdigit(*s))
   d5936:	e7ef      	b.n	d5918 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x3a>


static long exp10(uint8_t b)
{
	long r = 1;
	while (b--)
   d5938:	3901      	subs	r1, #1
   d593a:	b2c9      	uxtb	r1, r1
   d593c:	29ff      	cmp	r1, #255	; 0xff
   d593e:	d001      	beq.n	d5944 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x66>
		r *= 10;
   d5940:	436b      	muls	r3, r5
   d5942:	e7f9      	b.n	d5938 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x5a>

	while (isdigit(*s))
		r = 10*r + *s++ - '0';
	r *= exp10(log10Multiplier);

	if (*s == '.') {
   d5944:	2f2e      	cmp	r7, #46	; 0x2e
	else if (*s == '+')
		++s;

	while (isdigit(*s))
		r = 10*r + *s++ - '0';
	r *= exp10(log10Multiplier);
   d5946:	fb03 f302 	mul.w	r3, r3, r2

	if (*s == '.') {
   d594a:	d11e      	bne.n	d598a <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xac>
   d594c:	1c45      	adds	r5, r0, #1
		++s;
		long frac = 0;
   d594e:	2200      	movs	r2, #0
		while (isdigit(*s) && log10Multiplier) {
			frac = 10 * frac + *s++ -'0';
   d5950:	270a      	movs	r7, #10
	r *= exp10(log10Multiplier);

	if (*s == '.') {
		++s;
		long frac = 0;
		while (isdigit(*s) && log10Multiplier) {
   d5952:	7829      	ldrb	r1, [r5, #0]
   d5954:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
   d5958:	f1bc 0f09 	cmp.w	ip, #9
   d595c:	4628      	mov	r0, r5
   d595e:	f105 0501 	add.w	r5, r5, #1
   d5962:	d902      	bls.n	d596a <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x8c>
   d5964:	2501      	movs	r5, #1

static long exp10(uint8_t b)
{
	long r = 1;
	while (b--)
		r *= 10;
   d5966:	270a      	movs	r7, #10
   d5968:	e006      	b.n	d5978 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x9a>
	r *= exp10(log10Multiplier);

	if (*s == '.') {
		++s;
		long frac = 0;
		while (isdigit(*s) && log10Multiplier) {
   d596a:	b15c      	cbz	r4, d5984 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xa6>
			frac = 10 * frac + *s++ -'0';
   d596c:	fb07 1202 	mla	r2, r7, r2, r1
			--log10Multiplier;
   d5970:	3c01      	subs	r4, #1

	if (*s == '.') {
		++s;
		long frac = 0;
		while (isdigit(*s) && log10Multiplier) {
			frac = 10 * frac + *s++ -'0';
   d5972:	3a30      	subs	r2, #48	; 0x30
			--log10Multiplier;
   d5974:	b2e4      	uxtb	r4, r4
	r *= exp10(log10Multiplier);

	if (*s == '.') {
		++s;
		long frac = 0;
		while (isdigit(*s) && log10Multiplier) {
   d5976:	e7ec      	b.n	d5952 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x74>


static long exp10(uint8_t b)
{
	long r = 1;
	while (b--)
   d5978:	3c01      	subs	r4, #1
   d597a:	b2e4      	uxtb	r4, r4
   d597c:	2cff      	cmp	r4, #255	; 0xff
   d597e:	d002      	beq.n	d5986 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xa8>
		r *= 10;
   d5980:	437d      	muls	r5, r7
   d5982:	e7f9      	b.n	d5978 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x9a>
   d5984:	2501      	movs	r5, #1
		while (isdigit(*s) && log10Multiplier) {
			frac = 10 * frac + *s++ -'0';
			--log10Multiplier;
		}
		frac *= exp10(log10Multiplier);
		r += frac;
   d5986:	fb05 3302 	mla	r3, r5, r2, r3
	}
	r *= neg; // Include effect of any minus sign
   d598a:	fb03 f40e 	mul.w	r4, r3, lr

	if (eptr)
   d598e:	b116      	cbz	r6, d5996 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xb8>
		*eptr = skipField(s);
   d5990:	f7ff ff80 	bl	d5894 <_ZN9MicroNMEA9skipFieldEPKc>
   d5994:	6030      	str	r0, [r6, #0]

	return r;
}
   d5996:	4620      	mov	r0, r4
   d5998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d599c <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>:


long MicroNMEA::parseDegreeMinute(const char* s, uint8_t degWidth,
								  const char **eptr)
{
   d599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (*s == ',') {
   d599e:	7803      	ldrb	r3, [r0, #0]
   d59a0:	2b2c      	cmp	r3, #44	; 0x2c
}


long MicroNMEA::parseDegreeMinute(const char* s, uint8_t degWidth,
								  const char **eptr)
{
   d59a2:	4606      	mov	r6, r0
   d59a4:	460f      	mov	r7, r1
   d59a6:	4614      	mov	r4, r2
	if (*s == ',') {
   d59a8:	d105      	bne.n	d59b6 <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_+0x1a>
		if (eptr)
   d59aa:	b112      	cbz	r2, d59b2 <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_+0x16>
			*eptr = skipField(s);
   d59ac:	f7ff ff72 	bl	d5894 <_ZN9MicroNMEA9skipFieldEPKc>
   d59b0:	6020      	str	r0, [r4, #0]
   d59b2:	2000      	movs	r0, #0
   d59b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
	}
	long r = parseUnsignedInt(s, degWidth) * 1000000L;
   d59b6:	f7ff ff83 	bl	d58c0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
   d59ba:	4d06      	ldr	r5, [pc, #24]	; (d59d4 <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_+0x38>)
	s += degWidth;
	r += parseFloat(s, 6, eptr) / 60;
   d59bc:	4622      	mov	r2, r4
	if (*s == ',') {
		if (eptr)
			*eptr = skipField(s);
		return 0;
	}
	long r = parseUnsignedInt(s, degWidth) * 1000000L;
   d59be:	4345      	muls	r5, r0
	s += degWidth;
	r += parseFloat(s, 6, eptr) / 60;
   d59c0:	2106      	movs	r1, #6
   d59c2:	19f0      	adds	r0, r6, r7
   d59c4:	f7ff ff8b 	bl	d58de <_ZN9MicroNMEA10parseFloatEPKchPS1_>
   d59c8:	223c      	movs	r2, #60	; 0x3c
   d59ca:	fb90 f0f2 	sdiv	r0, r0, r2
   d59ce:	4428      	add	r0, r5
	return r;
   d59d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d59d2:	bf00      	nop
   d59d4:	000f4240 	.word	0x000f4240

000d59d8 <_ZN9MicroNMEA10parseFieldEPKcPci>:
}


const char* MicroNMEA::parseField(const char* s, char *result, int len)
{
   d59d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d59dc:	460c      	mov	r4, r1
   d59de:	4691      	mov	r9, r2
	if (s == nullptr)
   d59e0:	b910      	cbnz	r0, d59e8 <_ZN9MicroNMEA10parseFieldEPKcPci+0x10>
		return nullptr;
   d59e2:	2000      	movs	r0, #0
   d59e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d59e8:	4606      	mov	r6, r0
}


const char* MicroNMEA::parseField(const char* s, char *result, int len)
{
	if (s == nullptr)
   d59ea:	2500      	movs	r5, #0
   d59ec:	4637      	mov	r7, r6
		return nullptr;

	int i = 0;
	while (*s != ',' && !isEndOfFields(*s)) {
   d59ee:	f816 8b01 	ldrb.w	r8, [r6], #1
   d59f2:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   d59f6:	d011      	beq.n	d5a1c <_ZN9MicroNMEA10parseFieldEPKcPci+0x44>
   d59f8:	4640      	mov	r0, r8
   d59fa:	f7ff ff3f 	bl	d587c <_ZN9MicroNMEA13isEndOfFieldsEc>
   d59fe:	b9c0      	cbnz	r0, d5a32 <_ZN9MicroNMEA10parseFieldEPKcPci+0x5a>
		if (result && i++ < len)
   d5a00:	b154      	cbz	r4, d5a18 <_ZN9MicroNMEA10parseFieldEPKcPci+0x40>
   d5a02:	454d      	cmp	r5, r9
   d5a04:	f105 0301 	add.w	r3, r5, #1
   d5a08:	db01      	blt.n	d5a0e <_ZN9MicroNMEA10parseFieldEPKcPci+0x36>
   d5a0a:	461d      	mov	r5, r3
   d5a0c:	e004      	b.n	d5a18 <_ZN9MicroNMEA10parseFieldEPKcPci+0x40>
			*result++ = *s;
   d5a0e:	f884 8000 	strb.w	r8, [r4]
   d5a12:	3401      	adds	r4, #1
{
	if (s == nullptr)
		return nullptr;

	int i = 0;
	while (*s != ',' && !isEndOfFields(*s)) {
   d5a14:	461d      	mov	r5, r3
   d5a16:	e7e9      	b.n	d59ec <_ZN9MicroNMEA10parseFieldEPKcPci+0x14>
   d5a18:	462b      	mov	r3, r5
   d5a1a:	e7fb      	b.n	d5a14 <_ZN9MicroNMEA10parseFieldEPKcPci+0x3c>
		if (result && i++ < len)
			*result++ = *s;
		++s;
	}
	if (result && i < len)
   d5a1c:	b134      	cbz	r4, d5a2c <_ZN9MicroNMEA10parseFieldEPKcPci+0x54>
   d5a1e:	454d      	cmp	r5, r9
		*result = '\0'; // Terminate unless too long
   d5a20:	bfbc      	itt	lt
   d5a22:	2300      	movlt	r3, #0
   d5a24:	7023      	strblt	r3, [r4, #0]

	if (*s == ',')
   d5a26:	783b      	ldrb	r3, [r7, #0]
   d5a28:	2b2c      	cmp	r3, #44	; 0x2c
   d5a2a:	d1da      	bne.n	d59e2 <_ZN9MicroNMEA10parseFieldEPKcPci+0xa>
		return ++s; // Location of start of next field
   d5a2c:	1c78      	adds	r0, r7, #1
   d5a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	while (*s != ',' && !isEndOfFields(*s)) {
		if (result && i++ < len)
			*result++ = *s;
		++s;
	}
	if (result && i < len)
   d5a32:	2c00      	cmp	r4, #0
   d5a34:	d1f3      	bne.n	d5a1e <_ZN9MicroNMEA10parseFieldEPKcPci+0x46>
   d5a36:	e7d4      	b.n	d59e2 <_ZN9MicroNMEA10parseFieldEPKcPci+0xa>

000d5a38 <_ZN9MicroNMEA16generateChecksumEPKcPc>:
		return nullptr; // End of string or valid sentence
}


const char* MicroNMEA::generateChecksum(const char* s, char* checksum)
{
   d5a38:	b510      	push	{r4, lr}
	uint8_t c = 0;
	// Initial $ is omitted from checksum, if present ignore it.
	if (*s == '$')
   d5a3a:	7803      	ldrb	r3, [r0, #0]
   d5a3c:	2b24      	cmp	r3, #36	; 0x24
		++s;
   d5a3e:	bf08      	it	eq
   d5a40:	3001      	addeq	r0, #1
   d5a42:	4602      	mov	r2, r0
		return nullptr; // End of string or valid sentence
}


const char* MicroNMEA::generateChecksum(const char* s, char* checksum)
{
   d5a44:	2300      	movs	r3, #0
   d5a46:	4610      	mov	r0, r2
	uint8_t c = 0;
	// Initial $ is omitted from checksum, if present ignore it.
	if (*s == '$')
		++s;

	while (*s != '\0' && *s != '*')
   d5a48:	f812 4b01 	ldrb.w	r4, [r2], #1
   d5a4c:	b11c      	cbz	r4, d5a56 <_ZN9MicroNMEA16generateChecksumEPKcPc+0x1e>
   d5a4e:	2c2a      	cmp	r4, #42	; 0x2a
   d5a50:	d001      	beq.n	d5a56 <_ZN9MicroNMEA16generateChecksumEPKcPc+0x1e>
		c ^= *s++;
   d5a52:	4063      	eors	r3, r4
	uint8_t c = 0;
	// Initial $ is omitted from checksum, if present ignore it.
	if (*s == '$')
		++s;

	while (*s != '\0' && *s != '*')
   d5a54:	e7f7      	b.n	d5a46 <_ZN9MicroNMEA16generateChecksumEPKcPc+0xe>
		c ^= *s++;

	if (checksum) {
   d5a56:	b169      	cbz	r1, d5a74 <_ZN9MicroNMEA16generateChecksumEPKcPc+0x3c>
		checksum[0] = toHex(c / 16);
   d5a58:	091a      	lsrs	r2, r3, #4
}


static char toHex(uint8_t nibble)
{
	if (nibble >= 10)
   d5a5a:	2a09      	cmp	r2, #9
	while (*s != '\0' && *s != '*')
		c ^= *s++;

	if (checksum) {
		checksum[0] = toHex(c / 16);
		checksum[1] = toHex(c % 16);
   d5a5c:	f003 030f 	and.w	r3, r3, #15


static char toHex(uint8_t nibble)
{
	if (nibble >= 10)
		return nibble + 'A' - 10;
   d5a60:	bf8c      	ite	hi
   d5a62:	3237      	addhi	r2, #55	; 0x37
	else
		return nibble + '0';
   d5a64:	3230      	addls	r2, #48	; 0x30
}


static char toHex(uint8_t nibble)
{
	if (nibble >= 10)
   d5a66:	2b09      	cmp	r3, #9
		return nibble + 'A' - 10;
	else
		return nibble + '0';
   d5a68:	b2d2      	uxtb	r2, r2


static char toHex(uint8_t nibble)
{
	if (nibble >= 10)
		return nibble + 'A' - 10;
   d5a6a:	bf8c      	ite	hi
   d5a6c:	3337      	addhi	r3, #55	; 0x37
	else
		return nibble + '0';
   d5a6e:	3330      	addls	r3, #48	; 0x30

	while (*s != '\0' && *s != '*')
		c ^= *s++;

	if (checksum) {
		checksum[0] = toHex(c / 16);
   d5a70:	700a      	strb	r2, [r1, #0]
		checksum[1] = toHex(c % 16);
   d5a72:	704b      	strb	r3, [r1, #1]
	}
	return s;
}
   d5a74:	bd10      	pop	{r4, pc}

000d5a76 <_ZN9MicroNMEA12testChecksumEPKc>:


bool MicroNMEA::testChecksum(const char* s)
{
   d5a76:	b507      	push	{r0, r1, r2, lr}
	char checksum[2];
	const char* p = generateChecksum(s, checksum);
   d5a78:	a901      	add	r1, sp, #4
   d5a7a:	f7ff ffdd 	bl	d5a38 <_ZN9MicroNMEA16generateChecksumEPKcPc>
	return *p == '*' && p[1] == checksum[0] && p[2] == checksum[1];
   d5a7e:	7803      	ldrb	r3, [r0, #0]
   d5a80:	2b2a      	cmp	r3, #42	; 0x2a
   d5a82:	d10b      	bne.n	d5a9c <_ZN9MicroNMEA12testChecksumEPKc+0x26>
   d5a84:	7842      	ldrb	r2, [r0, #1]
   d5a86:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5a8a:	429a      	cmp	r2, r3
   d5a8c:	d106      	bne.n	d5a9c <_ZN9MicroNMEA12testChecksumEPKc+0x26>
   d5a8e:	7883      	ldrb	r3, [r0, #2]
   d5a90:	f89d 0005 	ldrb.w	r0, [sp, #5]
   d5a94:	1a1b      	subs	r3, r3, r0
   d5a96:	4258      	negs	r0, r3
   d5a98:	4158      	adcs	r0, r3
   d5a9a:	e000      	b.n	d5a9e <_ZN9MicroNMEA12testChecksumEPKc+0x28>
   d5a9c:	2000      	movs	r0, #0
}
   d5a9e:	b003      	add	sp, #12
   d5aa0:	f85d fb04 	ldr.w	pc, [sp], #4

000d5aa4 <_ZN9MicroNMEA9setBufferEPvh>:
}


void MicroNMEA::setBuffer(void* buf, uint8_t len)
{
	_bufferLen = len;
   d5aa4:	7002      	strb	r2, [r0, #0]
	_buffer = (char*)buf;
   d5aa6:	6041      	str	r1, [r0, #4]
	_ptr = _buffer;
   d5aa8:	6081      	str	r1, [r0, #8]
	if (_bufferLen) {
   d5aaa:	b132      	cbz	r2, d5aba <_ZN9MicroNMEA9setBufferEPvh+0x16>
		*_ptr = '\0';
   d5aac:	2200      	movs	r2, #0
   d5aae:	700a      	strb	r2, [r1, #0]
		_buffer[_bufferLen - 1] = '\0';
   d5ab0:	7803      	ldrb	r3, [r0, #0]
   d5ab2:	6841      	ldr	r1, [r0, #4]
   d5ab4:	440b      	add	r3, r1
   d5ab6:	f803 2c01 	strb.w	r2, [r3, #-1]
   d5aba:	4770      	bx	lr

000d5abc <_ZN9MicroNMEA5clearEv>:

void MicroNMEA::clear(void)
{
	_navSystem = '\0';
	_numSat = 0;
	_hdop = 255;
   d5abc:	22ff      	movs	r2, #255	; 0xff
   d5abe:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
	_isValid = false;
	_latitude = 999000000L;
   d5ac2:	4a0f      	ldr	r2, [pc, #60]	; (d5b00 <_ZN9MicroNMEA5clearEv+0x44>)
   d5ac4:	6182      	str	r2, [r0, #24]
	_longitude = 999000000L;
   d5ac6:	61c2      	str	r2, [r0, #28]
	_altitude = _speed = _course = LONG_MIN;
   d5ac8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
}


void MicroNMEA::clear(void)
{
	_navSystem = '\0';
   d5acc:	2300      	movs	r3, #0
	_numSat = 0;
	_hdop = 255;
	_isValid = false;
	_latitude = 999000000L;
	_longitude = 999000000L;
	_altitude = _speed = _course = LONG_MIN;
   d5ace:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5ad0:	6282      	str	r2, [r0, #40]	; 0x28
   d5ad2:	6202      	str	r2, [r0, #32]
	_altitudeValid = false;
	_year = _month = _day = 0;
	_hour = _minute = _second = 99;
   d5ad4:	2263      	movs	r2, #99	; 0x63
}


void MicroNMEA::clear(void)
{
	_navSystem = '\0';
   d5ad6:	74c3      	strb	r3, [r0, #19]
	_numSat = 0;
   d5ad8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	_hdop = 255;
	_isValid = false;
   d5adc:	7503      	strb	r3, [r0, #20]
	_latitude = 999000000L;
	_longitude = 999000000L;
	_altitude = _speed = _course = LONG_MIN;
	_altitudeValid = false;
   d5ade:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	_year = _month = _day = 0;
   d5ae2:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
   d5ae6:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   d5aea:	8603      	strh	r3, [r0, #48]	; 0x30
	_hour = _minute = _second = 99;
   d5aec:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
   d5af0:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
   d5af4:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
	_hundredths = 0;
   d5af8:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
   d5afc:	4770      	bx	lr
   d5afe:	bf00      	nop
   d5b00:	3b8b87c0 	.word	0x3b8b87c0

000d5b04 <_ZN9MicroNMEAC1EPvh>:
	setBuffer(nullptr, 0);
	clear();
}


MicroNMEA::MicroNMEA(void* buf, uint8_t len) :
   d5b04:	b538      	push	{r3, r4, r5, lr}
	_talkerID('\0'),
	_messageID{0},
	_badChecksumHandler(nullptr),
	_unknownSentenceHandler(nullptr)
   d5b06:	2300      	movs	r3, #0
   d5b08:	7303      	strb	r3, [r0, #12]
   d5b0a:	f8c0 300d 	str.w	r3, [r0, #13]
   d5b0e:	f8a0 3011 	strh.w	r3, [r0, #17]
   d5b12:	63c3      	str	r3, [r0, #60]	; 0x3c
   d5b14:	6403      	str	r3, [r0, #64]	; 0x40
{
	setBuffer(buf, len);
   d5b16:	f7ff ffc5 	bl	d5aa4 <_ZN9MicroNMEA9setBufferEPvh>
	clear();
   d5b1a:	f7ff ffcf 	bl	d5abc <_ZN9MicroNMEA5clearEv>
}
   d5b1e:	bd38      	pop	{r3, r4, r5, pc}

000d5b20 <_ZN9MicroNMEA9parseTimeEPKc>:
	return false;
}


const char* MicroNMEA::parseTime(const char* s)
{
   d5b20:	b538      	push	{r3, r4, r5, lr}
	if (*s == ',')
   d5b22:	780b      	ldrb	r3, [r1, #0]
   d5b24:	2b2c      	cmp	r3, #44	; 0x2c
	return false;
}


const char* MicroNMEA::parseTime(const char* s)
{
   d5b26:	4605      	mov	r5, r0
   d5b28:	460c      	mov	r4, r1
	if (*s == ',')
   d5b2a:	d101      	bne.n	d5b30 <_ZN9MicroNMEA9parseTimeEPKc+0x10>
		return skipField(s);
   d5b2c:	4608      	mov	r0, r1
   d5b2e:	e019      	b.n	d5b64 <_ZN9MicroNMEA9parseTimeEPKc+0x44>
	_hour = parseUnsignedInt(s, 2);
   d5b30:	2102      	movs	r1, #2
   d5b32:	4620      	mov	r0, r4
   d5b34:	f7ff fec4 	bl	d58c0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_minute = parseUnsignedInt(s + 2, 2);
   d5b38:	2102      	movs	r1, #2

const char* MicroNMEA::parseTime(const char* s)
{
	if (*s == ',')
		return skipField(s);
	_hour = parseUnsignedInt(s, 2);
   d5b3a:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
	_minute = parseUnsignedInt(s + 2, 2);
   d5b3e:	1860      	adds	r0, r4, r1
   d5b40:	f7ff febe 	bl	d58c0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_second = parseUnsignedInt(s + 4, 2);
   d5b44:	2102      	movs	r1, #2
const char* MicroNMEA::parseTime(const char* s)
{
	if (*s == ',')
		return skipField(s);
	_hour = parseUnsignedInt(s, 2);
	_minute = parseUnsignedInt(s + 2, 2);
   d5b46:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
	_second = parseUnsignedInt(s + 4, 2);
   d5b4a:	1d20      	adds	r0, r4, #4
   d5b4c:	f7ff feb8 	bl	d58c0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_hundredths = parseUnsignedInt(s + 7, 2);
   d5b50:	2102      	movs	r1, #2
{
	if (*s == ',')
		return skipField(s);
	_hour = parseUnsignedInt(s, 2);
	_minute = parseUnsignedInt(s + 2, 2);
	_second = parseUnsignedInt(s + 4, 2);
   d5b52:	f885 0036 	strb.w	r0, [r5, #54]	; 0x36
	_hundredths = parseUnsignedInt(s + 7, 2);
   d5b56:	1de0      	adds	r0, r4, #7
   d5b58:	f7ff feb2 	bl	d58c0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
   d5b5c:	f885 0037 	strb.w	r0, [r5, #55]	; 0x37
	return skipField(s + 9);
   d5b60:	f104 0009 	add.w	r0, r4, #9
}
   d5b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return skipField(s);
	_hour = parseUnsignedInt(s, 2);
	_minute = parseUnsignedInt(s + 2, 2);
	_second = parseUnsignedInt(s + 4, 2);
	_hundredths = parseUnsignedInt(s + 7, 2);
	return skipField(s + 9);
   d5b68:	f7ff be94 	b.w	d5894 <_ZN9MicroNMEA9skipFieldEPKc>

000d5b6c <_ZN9MicroNMEA9parseDateEPKc>:
}


const char* MicroNMEA::parseDate(const char* s)
{
   d5b6c:	b538      	push	{r3, r4, r5, lr}
	if (*s == ',')
   d5b6e:	780b      	ldrb	r3, [r1, #0]
   d5b70:	2b2c      	cmp	r3, #44	; 0x2c
	return skipField(s + 9);
}


const char* MicroNMEA::parseDate(const char* s)
{
   d5b72:	4605      	mov	r5, r0
   d5b74:	460c      	mov	r4, r1
	if (*s == ',')
   d5b76:	d101      	bne.n	d5b7c <_ZN9MicroNMEA9parseDateEPKc+0x10>
		return skipField(s);
   d5b78:	4608      	mov	r0, r1
   d5b7a:	e013      	b.n	d5ba4 <_ZN9MicroNMEA9parseDateEPKc+0x38>
	_day = parseUnsignedInt(s, 2);
   d5b7c:	2102      	movs	r1, #2
   d5b7e:	4620      	mov	r0, r4
   d5b80:	f7ff fe9e 	bl	d58c0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_month = parseUnsignedInt(s + 2, 2);
   d5b84:	2102      	movs	r1, #2

const char* MicroNMEA::parseDate(const char* s)
{
	if (*s == ',')
		return skipField(s);
	_day = parseUnsignedInt(s, 2);
   d5b86:	f885 0033 	strb.w	r0, [r5, #51]	; 0x33
	_month = parseUnsignedInt(s + 2, 2);
   d5b8a:	1860      	adds	r0, r4, r1
   d5b8c:	f7ff fe98 	bl	d58c0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_year = parseUnsignedInt(s + 4, 2) + 2000;
   d5b90:	2102      	movs	r1, #2
const char* MicroNMEA::parseDate(const char* s)
{
	if (*s == ',')
		return skipField(s);
	_day = parseUnsignedInt(s, 2);
	_month = parseUnsignedInt(s + 2, 2);
   d5b92:	f885 0032 	strb.w	r0, [r5, #50]	; 0x32
	_year = parseUnsignedInt(s + 4, 2) + 2000;
   d5b96:	1d20      	adds	r0, r4, #4
   d5b98:	f7ff fe92 	bl	d58c0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
   d5b9c:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5ba0:	8628      	strh	r0, [r5, #48]	; 0x30
	return skipField(s + 6);
   d5ba2:	1da0      	adds	r0, r4, #6
}
   d5ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (*s == ',')
		return skipField(s);
	_day = parseUnsignedInt(s, 2);
	_month = parseUnsignedInt(s + 2, 2);
	_year = parseUnsignedInt(s + 4, 2) + 2000;
	return skipField(s + 6);
   d5ba8:	f7ff be74 	b.w	d5894 <_ZN9MicroNMEA9skipFieldEPKc>

000d5bac <_ZN9MicroNMEA10processGGAEPKc>:
}


bool MicroNMEA::processGGA(const char *s)
{
   d5bac:	b513      	push	{r0, r1, r4, lr}
	// If GxGSV messages are received _talker_ID can be changed after
	// other MicroNMEA sentences. Compatibility modes can set the talker ID
	// to indicate GPS regardless of actual navigation system used.
	_navSystem = _talkerID;
   d5bae:	7b03      	ldrb	r3, [r0, #12]
   d5bb0:	74c3      	strb	r3, [r0, #19]
	return skipField(s + 6);
}


bool MicroNMEA::processGGA(const char *s)
{
   d5bb2:	4604      	mov	r4, r0
   d5bb4:	9101      	str	r1, [sp, #4]
	// If GxGSV messages are received _talker_ID can be changed after
	// other MicroNMEA sentences. Compatibility modes can set the talker ID
	// to indicate GPS regardless of actual navigation system used.
	_navSystem = _talkerID;

	s = parseTime(s);
   d5bb6:	f7ff ffb3 	bl	d5b20 <_ZN9MicroNMEA9parseTimeEPKc>
   d5bba:	9001      	str	r0, [sp, #4]
	if (s == nullptr)
   d5bbc:	b908      	cbnz	r0, d5bc2 <_ZN9MicroNMEA10processGGAEPKc+0x16>
		return false;
   d5bbe:	2000      	movs	r0, #0
   d5bc0:	e056      	b.n	d5c70 <_ZN9MicroNMEA10processGGAEPKc+0xc4>
	// ++s;
	_latitude = parseDegreeMinute(s, 2, &s);
   d5bc2:	aa01      	add	r2, sp, #4
   d5bc4:	2102      	movs	r1, #2
   d5bc6:	f7ff fee9 	bl	d599c <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>
	if (s == nullptr)
   d5bca:	9b01      	ldr	r3, [sp, #4]

	s = parseTime(s);
	if (s == nullptr)
		return false;
	// ++s;
	_latitude = parseDegreeMinute(s, 2, &s);
   d5bcc:	61a0      	str	r0, [r4, #24]
	if (s == nullptr)
   d5bce:	2b00      	cmp	r3, #0
   d5bd0:	d0f5      	beq.n	d5bbe <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	if (*s == ',')
   d5bd2:	781a      	ldrb	r2, [r3, #0]
   d5bd4:	2a2c      	cmp	r2, #44	; 0x2c
   d5bd6:	d101      	bne.n	d5bdc <_ZN9MicroNMEA10processGGAEPKc+0x30>
		++s;
   d5bd8:	3301      	adds	r3, #1
   d5bda:	e004      	b.n	d5be6 <_ZN9MicroNMEA10processGGAEPKc+0x3a>
	else {
		if (*s == 'S')
   d5bdc:	2a53      	cmp	r2, #83	; 0x53
			_latitude *= -1;
   d5bde:	bf04      	itt	eq
   d5be0:	4240      	negeq	r0, r0
   d5be2:	61a0      	streq	r0, [r4, #24]
		s += 2; // Skip N/S and comma
   d5be4:	3302      	adds	r3, #2
   d5be6:	9301      	str	r3, [sp, #4]
	}
	_longitude = parseDegreeMinute(s, 3, &s);
   d5be8:	aa01      	add	r2, sp, #4
   d5bea:	2103      	movs	r1, #3
   d5bec:	9801      	ldr	r0, [sp, #4]
   d5bee:	f7ff fed5 	bl	d599c <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>
	if (s == nullptr)
   d5bf2:	9b01      	ldr	r3, [sp, #4]
	else {
		if (*s == 'S')
			_latitude *= -1;
		s += 2; // Skip N/S and comma
	}
	_longitude = parseDegreeMinute(s, 3, &s);
   d5bf4:	61e0      	str	r0, [r4, #28]
	if (s == nullptr)
   d5bf6:	2b00      	cmp	r3, #0
   d5bf8:	d0e1      	beq.n	d5bbe <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	if (*s == ',')
   d5bfa:	781a      	ldrb	r2, [r3, #0]
   d5bfc:	2a2c      	cmp	r2, #44	; 0x2c
   d5bfe:	d101      	bne.n	d5c04 <_ZN9MicroNMEA10processGGAEPKc+0x58>
		++s;
   d5c00:	3301      	adds	r3, #1
   d5c02:	e004      	b.n	d5c0e <_ZN9MicroNMEA10processGGAEPKc+0x62>
	else {
		if (*s == 'W')
   d5c04:	2a57      	cmp	r2, #87	; 0x57
			_longitude *= -1;
   d5c06:	bf04      	itt	eq
   d5c08:	4240      	negeq	r0, r0
   d5c0a:	61e0      	streq	r0, [r4, #28]
		s += 2; // Skip E/W and comma
   d5c0c:	3302      	adds	r3, #2
   d5c0e:	9301      	str	r3, [sp, #4]
	}
	_isValid = (*s >= '1' && *s <= '5');
   d5c10:	9801      	ldr	r0, [sp, #4]
   d5c12:	f810 3b02 	ldrb.w	r3, [r0], #2
	s += 2; // Skip position fix flag and comma
   d5c16:	9001      	str	r0, [sp, #4]
	else {
		if (*s == 'W')
			_longitude *= -1;
		s += 2; // Skip E/W and comma
	}
	_isValid = (*s >= '1' && *s <= '5');
   d5c18:	3b31      	subs	r3, #49	; 0x31
   d5c1a:	2b04      	cmp	r3, #4
   d5c1c:	bf8c      	ite	hi
   d5c1e:	2300      	movhi	r3, #0
   d5c20:	2301      	movls	r3, #1
   d5c22:	7523      	strb	r3, [r4, #20]
	s += 2; // Skip position fix flag and comma
	long tmp = parseFloat(s, 0, &s);
   d5c24:	aa01      	add	r2, sp, #4
   d5c26:	2100      	movs	r1, #0
   d5c28:	f7ff fe59 	bl	d58de <_ZN9MicroNMEA10parseFloatEPKchPS1_>
	_numSat = (tmp > 255 ? 255 : (tmp < 0 ? 0 : tmp));
   d5c2c:	28ff      	cmp	r0, #255	; 0xff
   d5c2e:	bfda      	itte	le
   d5c30:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
   d5c34:	b2c0      	uxtble	r0, r0
   d5c36:	20ff      	movgt	r0, #255	; 0xff
   d5c38:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	if (s == nullptr)
   d5c3c:	9801      	ldr	r0, [sp, #4]
   d5c3e:	2800      	cmp	r0, #0
   d5c40:	d0bd      	beq.n	d5bbe <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	tmp = parseFloat(s, 1, &s);
   d5c42:	aa01      	add	r2, sp, #4
   d5c44:	2101      	movs	r1, #1
   d5c46:	f7ff fe4a 	bl	d58de <_ZN9MicroNMEA10parseFloatEPKchPS1_>
	_hdop = (tmp > 255 || tmp < 0 ? 255 : tmp);
   d5c4a:	28ff      	cmp	r0, #255	; 0xff
   d5c4c:	bf28      	it	cs
   d5c4e:	20ff      	movcs	r0, #255	; 0xff
   d5c50:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	if (s == nullptr)
   d5c54:	9801      	ldr	r0, [sp, #4]
   d5c56:	2800      	cmp	r0, #0
   d5c58:	d0b1      	beq.n	d5bbe <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	_altitude = parseFloat(s, 3, &s);
   d5c5a:	aa01      	add	r2, sp, #4
   d5c5c:	2103      	movs	r1, #3
   d5c5e:	f7ff fe3e 	bl	d58de <_ZN9MicroNMEA10parseFloatEPKchPS1_>
	if (s == nullptr)
   d5c62:	9b01      	ldr	r3, [sp, #4]
		return false;
	tmp = parseFloat(s, 1, &s);
	_hdop = (tmp > 255 || tmp < 0 ? 255 : tmp);
	if (s == nullptr)
		return false;
	_altitude = parseFloat(s, 3, &s);
   d5c64:	6220      	str	r0, [r4, #32]
	if (s == nullptr)
   d5c66:	2b00      	cmp	r3, #0
   d5c68:	d0a9      	beq.n	d5bbe <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	_altitudeValid = true;
   d5c6a:	2001      	movs	r0, #1
   d5c6c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	// That's all we care about
	return true;
}
   d5c70:	b002      	add	sp, #8
   d5c72:	bd10      	pop	{r4, pc}

000d5c74 <_ZN9MicroNMEA10processRMCEPKc>:


bool MicroNMEA::processRMC(const char* s)
{
   d5c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// If GxGSV messages are received _talker_ID can be changed after
	// other MicroNMEA sentences. Compatibility modes can set the talker
	// ID to indicate GPS regardless of actual navigation system used.
	_navSystem = _talkerID;
   d5c76:	7b03      	ldrb	r3, [r0, #12]
   d5c78:	74c3      	strb	r3, [r0, #19]
	return true;
}


bool MicroNMEA::processRMC(const char* s)
{
   d5c7a:	4604      	mov	r4, r0
   d5c7c:	9101      	str	r1, [sp, #4]
	// If GxGSV messages are received _talker_ID can be changed after
	// other MicroNMEA sentences. Compatibility modes can set the talker
	// ID to indicate GPS regardless of actual navigation system used.
	_navSystem = _talkerID;

	s = parseTime(s);
   d5c7e:	f7ff ff4f 	bl	d5b20 <_ZN9MicroNMEA9parseTimeEPKc>
   d5c82:	9001      	str	r0, [sp, #4]
	if (s == nullptr)
   d5c84:	b908      	cbnz	r0, d5c8a <_ZN9MicroNMEA10processRMCEPKc+0x16>
		return false;
   d5c86:	2000      	movs	r0, #0
   d5c88:	e045      	b.n	d5d16 <_ZN9MicroNMEA10processRMCEPKc+0xa2>
	_isValid = (*s == 'A');
   d5c8a:	f810 3b02 	ldrb.w	r3, [r0], #2
	s += 2; // Skip validity and comma
   d5c8e:	ad02      	add	r5, sp, #8
	_navSystem = _talkerID;

	s = parseTime(s);
	if (s == nullptr)
		return false;
	_isValid = (*s == 'A');
   d5c90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   d5c94:	4253      	negs	r3, r2
	s += 2; // Skip validity and comma
   d5c96:	f845 0d04 	str.w	r0, [r5, #-4]!
	_navSystem = _talkerID;

	s = parseTime(s);
	if (s == nullptr)
		return false;
	_isValid = (*s == 'A');
   d5c9a:	4153      	adcs	r3, r2
   d5c9c:	7523      	strb	r3, [r4, #20]
	s += 2; // Skip validity and comma
	_latitude = parseDegreeMinute(s, 2, &s);
   d5c9e:	462a      	mov	r2, r5
   d5ca0:	2102      	movs	r1, #2
   d5ca2:	f7ff fe7b 	bl	d599c <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>
	if (s == nullptr)
   d5ca6:	9b01      	ldr	r3, [sp, #4]
	s = parseTime(s);
	if (s == nullptr)
		return false;
	_isValid = (*s == 'A');
	s += 2; // Skip validity and comma
	_latitude = parseDegreeMinute(s, 2, &s);
   d5ca8:	61a0      	str	r0, [r4, #24]
	if (s == nullptr)
   d5caa:	2b00      	cmp	r3, #0
   d5cac:	d0eb      	beq.n	d5c86 <_ZN9MicroNMEA10processRMCEPKc+0x12>
		return false;
	if (*s == ',')
   d5cae:	781a      	ldrb	r2, [r3, #0]
   d5cb0:	2a2c      	cmp	r2, #44	; 0x2c
   d5cb2:	d101      	bne.n	d5cb8 <_ZN9MicroNMEA10processRMCEPKc+0x44>
		++s;
   d5cb4:	3301      	adds	r3, #1
   d5cb6:	e004      	b.n	d5cc2 <_ZN9MicroNMEA10processRMCEPKc+0x4e>
	else {
		if (*s == 'S')
   d5cb8:	2a53      	cmp	r2, #83	; 0x53
			_latitude *= -1;
   d5cba:	bf04      	itt	eq
   d5cbc:	4240      	negeq	r0, r0
   d5cbe:	61a0      	streq	r0, [r4, #24]
		s += 2; // Skip N/S and comma
   d5cc0:	3302      	adds	r3, #2
   d5cc2:	9301      	str	r3, [sp, #4]
	}
	_longitude = parseDegreeMinute(s, 3, &s);
   d5cc4:	462a      	mov	r2, r5
   d5cc6:	2103      	movs	r1, #3
   d5cc8:	9801      	ldr	r0, [sp, #4]
   d5cca:	f7ff fe67 	bl	d599c <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>
	if (s == nullptr)
   d5cce:	9b01      	ldr	r3, [sp, #4]
	else {
		if (*s == 'S')
			_latitude *= -1;
		s += 2; // Skip N/S and comma
	}
	_longitude = parseDegreeMinute(s, 3, &s);
   d5cd0:	61e0      	str	r0, [r4, #28]
	if (s == nullptr)
   d5cd2:	2b00      	cmp	r3, #0
   d5cd4:	d0d7      	beq.n	d5c86 <_ZN9MicroNMEA10processRMCEPKc+0x12>
		return false;
	if (*s == ',')
   d5cd6:	781a      	ldrb	r2, [r3, #0]
   d5cd8:	2a2c      	cmp	r2, #44	; 0x2c
   d5cda:	d101      	bne.n	d5ce0 <_ZN9MicroNMEA10processRMCEPKc+0x6c>
		++s;
   d5cdc:	3301      	adds	r3, #1
   d5cde:	e004      	b.n	d5cea <_ZN9MicroNMEA10processRMCEPKc+0x76>
	else {
		if (*s == 'W')
   d5ce0:	2a57      	cmp	r2, #87	; 0x57
			_longitude *= -1;
   d5ce2:	bf04      	itt	eq
   d5ce4:	4240      	negeq	r0, r0
   d5ce6:	61e0      	streq	r0, [r4, #28]
		s += 2; // Skip E/W and comma
   d5ce8:	3302      	adds	r3, #2
   d5cea:	9301      	str	r3, [sp, #4]
	}
	_speed = parseFloat(s, 3, &s);
   d5cec:	462a      	mov	r2, r5
   d5cee:	2103      	movs	r1, #3
   d5cf0:	9801      	ldr	r0, [sp, #4]
   d5cf2:	f7ff fdf4 	bl	d58de <_ZN9MicroNMEA10parseFloatEPKchPS1_>
   d5cf6:	62a0      	str	r0, [r4, #40]	; 0x28
	if (s == nullptr)
   d5cf8:	9801      	ldr	r0, [sp, #4]
   d5cfa:	2800      	cmp	r0, #0
   d5cfc:	d0c3      	beq.n	d5c86 <_ZN9MicroNMEA10processRMCEPKc+0x12>
		return false;
	_course = parseFloat(s, 3, &s);
   d5cfe:	2103      	movs	r1, #3
   d5d00:	462a      	mov	r2, r5
   d5d02:	f7ff fdec 	bl	d58de <_ZN9MicroNMEA10parseFloatEPKchPS1_>
	if (s == nullptr)
   d5d06:	9901      	ldr	r1, [sp, #4]
		s += 2; // Skip E/W and comma
	}
	_speed = parseFloat(s, 3, &s);
	if (s == nullptr)
		return false;
	_course = parseFloat(s, 3, &s);
   d5d08:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (s == nullptr)
   d5d0a:	2900      	cmp	r1, #0
   d5d0c:	d0bb      	beq.n	d5c86 <_ZN9MicroNMEA10processRMCEPKc+0x12>
		return false;
	s = parseDate(s);
   d5d0e:	4620      	mov	r0, r4
   d5d10:	f7ff ff2c 	bl	d5b6c <_ZN9MicroNMEA9parseDateEPKc>
	// That's all we care about
	return true;
   d5d14:	2001      	movs	r0, #1
}
   d5d16:	b003      	add	sp, #12
   d5d18:	bd30      	pop	{r4, r5, pc}
	...

000d5d1c <_ZN9MicroNMEA7processEc>:
	_hundredths = 0;
}


bool MicroNMEA::process(char c)
{
   d5d1c:	b570      	push	{r4, r5, r6, lr}
	if (_buffer == nullptr || _bufferLen == 0)
   d5d1e:	6843      	ldr	r3, [r0, #4]
	_hundredths = 0;
}


bool MicroNMEA::process(char c)
{
   d5d20:	4604      	mov	r4, r0
	if (_buffer == nullptr || _bufferLen == 0)
   d5d22:	b303      	cbz	r3, d5d66 <_ZN9MicroNMEA7processEc+0x4a>
   d5d24:	7803      	ldrb	r3, [r0, #0]
   d5d26:	b1f3      	cbz	r3, d5d66 <_ZN9MicroNMEA7processEc+0x4a>
		return false;
	if (c == '\0' || c == '\n' || c == '\r') {
   d5d28:	290d      	cmp	r1, #13
   d5d2a:	6882      	ldr	r2, [r0, #8]
   d5d2c:	d811      	bhi.n	d5d52 <_ZN9MicroNMEA7processEc+0x36>
   d5d2e:	f242 4301 	movw	r3, #9217	; 0x2401
   d5d32:	40cb      	lsrs	r3, r1
   d5d34:	f003 0301 	and.w	r3, r3, #1
   d5d38:	f083 0601 	eor.w	r6, r3, #1
   d5d3c:	b14b      	cbz	r3, d5d52 <_ZN9MicroNMEA7processEc+0x36>
		// Terminate buffer then reset pointer
		*_ptr = '\0';
   d5d3e:	7016      	strb	r6, [r2, #0]
		_ptr = _buffer;
   d5d40:	6840      	ldr	r0, [r0, #4]
   d5d42:	60a0      	str	r0, [r4, #8]

		if (*_buffer == '$' && testChecksum(_buffer)) {
   d5d44:	7803      	ldrb	r3, [r0, #0]
   d5d46:	2b24      	cmp	r3, #36	; 0x24
   d5d48:	d10f      	bne.n	d5d6a <_ZN9MicroNMEA7processEc+0x4e>
   d5d4a:	f7ff fe94 	bl	d5a76 <_ZN9MicroNMEA12testChecksumEPKc>
   d5d4e:	b9c8      	cbnz	r0, d5d84 <_ZN9MicroNMEA7processEc+0x68>
   d5d50:	e00b      	b.n	d5d6a <_ZN9MicroNMEA7processEc+0x4e>
		}
		// Return true for a complete, non-empty, sentence (even if not a valid one).
		return *_buffer != '\0'; //
	}
	else {
		*_ptr = c;
   d5d52:	7011      	strb	r1, [r2, #0]
		if (_ptr < &_buffer[_bufferLen - 1])
   d5d54:	7823      	ldrb	r3, [r4, #0]
   d5d56:	6861      	ldr	r1, [r4, #4]
   d5d58:	68a2      	ldr	r2, [r4, #8]
   d5d5a:	3b01      	subs	r3, #1
   d5d5c:	440b      	add	r3, r1
   d5d5e:	429a      	cmp	r2, r3
			++_ptr;
   d5d60:	bf3c      	itt	cc
   d5d62:	3201      	addcc	r2, #1
   d5d64:	60a2      	strcc	r2, [r4, #8]
	}

	return false;
   d5d66:	2000      	movs	r0, #0
   d5d68:	bd70      	pop	{r4, r5, r6, pc}
				return processRMC(data);
			else if (_unknownSentenceHandler)
				(*_unknownSentenceHandler)(*this);
		}
		else {
			if (_badChecksumHandler && *_buffer != '\0') // don't send empty buffers as bad checksums!
   d5d6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5d6c:	b123      	cbz	r3, d5d78 <_ZN9MicroNMEA7processEc+0x5c>
   d5d6e:	6862      	ldr	r2, [r4, #4]
   d5d70:	7812      	ldrb	r2, [r2, #0]
   d5d72:	b10a      	cbz	r2, d5d78 <_ZN9MicroNMEA7processEc+0x5c>
				(*_badChecksumHandler)(*this);
   d5d74:	4620      	mov	r0, r4
   d5d76:	4798      	blx	r3
		}
		// Return true for a complete, non-empty, sentence (even if not a valid one).
		return *_buffer != '\0'; //
   d5d78:	6863      	ldr	r3, [r4, #4]
   d5d7a:	7818      	ldrb	r0, [r3, #0]
   d5d7c:	3000      	adds	r0, #0
   d5d7e:	bf18      	it	ne
   d5d80:	2001      	movne	r0, #1
   d5d82:	bd70      	pop	{r4, r5, r6, pc}
		_ptr = _buffer;

		if (*_buffer == '$' && testChecksum(_buffer)) {
			// Valid message
			const char* data;
			if (_buffer[1] == 'G') {
   d5d84:	6860      	ldr	r0, [r4, #4]
   d5d86:	7843      	ldrb	r3, [r0, #1]
   d5d88:	2b47      	cmp	r3, #71	; 0x47
   d5d8a:	f104 050d 	add.w	r5, r4, #13
   d5d8e:	d105      	bne.n	d5d9c <_ZN9MicroNMEA7processEc+0x80>
				_talkerID = _buffer[2];
   d5d90:	7883      	ldrb	r3, [r0, #2]
   d5d92:	7323      	strb	r3, [r4, #12]
				data = parseField(&_buffer[3], &_messageID[0], sizeof(_messageID));
   d5d94:	2206      	movs	r2, #6
   d5d96:	4629      	mov	r1, r5
   d5d98:	3003      	adds	r0, #3
   d5d9a:	e003      	b.n	d5da4 <_ZN9MicroNMEA7processEc+0x88>
			}
			else {
				_talkerID = '\0';
   d5d9c:	7326      	strb	r6, [r4, #12]
				data = parseField(&_buffer[1], &_messageID[0], sizeof(_messageID));
   d5d9e:	2206      	movs	r2, #6
   d5da0:	4629      	mov	r1, r5
   d5da2:	3001      	adds	r0, #1
   d5da4:	f7ff fe18 	bl	d59d8 <_ZN9MicroNMEA10parseFieldEPKcPci>
   d5da8:	4606      	mov	r6, r0
			}

			if (data != nullptr && strcmp(&_messageID[0], "GGA") == 0)
   d5daa:	b1a8      	cbz	r0, d5dd8 <_ZN9MicroNMEA7processEc+0xbc>
   d5dac:	490c      	ldr	r1, [pc, #48]	; (d5de0 <_ZN9MicroNMEA7processEc+0xc4>)
   d5dae:	4628      	mov	r0, r5
   d5db0:	f006 fc9b 	bl	dc6ea <strcmp>
   d5db4:	b928      	cbnz	r0, d5dc2 <_ZN9MicroNMEA7processEc+0xa6>
				return processGGA(data);
   d5db6:	4631      	mov	r1, r6
   d5db8:	4620      	mov	r0, r4
		if (_ptr < &_buffer[_bufferLen - 1])
			++_ptr;
	}

	return false;
}
   d5dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				_talkerID = '\0';
				data = parseField(&_buffer[1], &_messageID[0], sizeof(_messageID));
			}

			if (data != nullptr && strcmp(&_messageID[0], "GGA") == 0)
				return processGGA(data);
   d5dbe:	f7ff bef5 	b.w	d5bac <_ZN9MicroNMEA10processGGAEPKc>
			else if (data != nullptr && strcmp(&_messageID[0], "RMC") == 0)
   d5dc2:	4908      	ldr	r1, [pc, #32]	; (d5de4 <_ZN9MicroNMEA7processEc+0xc8>)
   d5dc4:	4628      	mov	r0, r5
   d5dc6:	f006 fc90 	bl	dc6ea <strcmp>
   d5dca:	b928      	cbnz	r0, d5dd8 <_ZN9MicroNMEA7processEc+0xbc>
				return processRMC(data);
   d5dcc:	4631      	mov	r1, r6
   d5dce:	4620      	mov	r0, r4
		if (_ptr < &_buffer[_bufferLen - 1])
			++_ptr;
	}

	return false;
}
   d5dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			}

			if (data != nullptr && strcmp(&_messageID[0], "GGA") == 0)
				return processGGA(data);
			else if (data != nullptr && strcmp(&_messageID[0], "RMC") == 0)
				return processRMC(data);
   d5dd4:	f7ff bf4e 	b.w	d5c74 <_ZN9MicroNMEA10processRMCEPKc>
			else if (_unknownSentenceHandler)
   d5dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d5dda:	2b00      	cmp	r3, #0
   d5ddc:	d1ca      	bne.n	d5d74 <_ZN9MicroNMEA7processEc+0x58>
   d5dde:	e7cb      	b.n	d5d78 <_ZN9MicroNMEA7processEc+0x5c>
   d5de0:	000def86 	.word	0x000def86
   d5de4:	000def8a 	.word	0x000def8a

000d5de8 <_GLOBAL__sub_I__ZN9MicroNMEA9skipFieldEPKc>:
   d5de8:	f001 bebe 	b.w	d7b68 <HAL_Pin_Map>

000d5dec <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d5dec:	f001 bebc 	b.w	d7b68 <HAL_Pin_Map>

000d5df0 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5df0:	b510      	push	{r4, lr}
   d5df2:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5df4:	3024      	adds	r0, #36	; 0x24
   d5df6:	f000 ff9a 	bl	d6d2e <_ZN8FatCache4syncEv>
   d5dfa:	b128      	cbz	r0, d5e08 <_ZN9FatVolume9cacheSyncEv+0x18>
   d5dfc:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5e04:	f000 bf93 	b.w	d6d2e <_ZN8FatCache4syncEv>
  }
   d5e08:	bd10      	pop	{r4, pc}

000d5e0a <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5e0a:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5e0c:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5e0e:	f043 0304 	orr.w	r3, r3, #4
   d5e12:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5e14:	f100 0210 	add.w	r2, r0, #16
   d5e18:	6880      	ldr	r0, [r0, #8]
   d5e1a:	f001 b83e 	b.w	d6e9a <_ZN9FatVolume15allocateClusterEmPm>
	...

000d5e20 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5e24:	7803      	ldrb	r3, [r0, #0]
   d5e26:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5e2a:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5e2c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5e30:	b10b      	cbz	r3, d5e36 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d5e32:	2600      	movs	r6, #0
   d5e34:	e02e      	b.n	d5e94 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d5e36:	6942      	ldr	r2, [r0, #20]
   d5e38:	4b18      	ldr	r3, [pc, #96]	; (d5e9c <_ZN7FatFile13addDirClusterEv+0x7c>)
   d5e3a:	429a      	cmp	r2, r3
   d5e3c:	d8f9      	bhi.n	d5e32 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d5e3e:	f7ff ffe4 	bl	d5e0a <_ZN7FatFile10addClusterEv>
   d5e42:	4606      	mov	r6, r0
   d5e44:	2800      	cmp	r0, #0
   d5e46:	d0f4      	beq.n	d5e32 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d5e48:	6921      	ldr	r1, [r4, #16]
   d5e4a:	68a0      	ldr	r0, [r4, #8]
   d5e4c:	f000 ffba 	bl	d6dc4 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5e50:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5e52:	68a0      	ldr	r0, [r4, #8]
   d5e54:	2205      	movs	r2, #5
   d5e56:	4639      	mov	r1, r7
   d5e58:	3024      	adds	r0, #36	; 0x24
   d5e5a:	f000 ff8f 	bl	d6d7c <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d5e5e:	4680      	mov	r8, r0
   d5e60:	2800      	cmp	r0, #0
   d5e62:	d0e6      	beq.n	d5e32 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d5e64:	4629      	mov	r1, r5
   d5e66:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5e6a:	f006 fbe6 	bl	dc63a <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5e6e:	2501      	movs	r5, #1
   d5e70:	68a3      	ldr	r3, [r4, #8]
   d5e72:	791a      	ldrb	r2, [r3, #4]
   d5e74:	42aa      	cmp	r2, r5
   d5e76:	d909      	bls.n	d5e8c <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5e78:	4642      	mov	r2, r8
   d5e7a:	19e9      	adds	r1, r5, r7
   d5e7c:	6818      	ldr	r0, [r3, #0]
   d5e7e:	f001 faff 	bl	d7480 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d5e82:	2800      	cmp	r0, #0
   d5e84:	d0d5      	beq.n	d5e32 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5e86:	3501      	adds	r5, #1
   d5e88:	b2ed      	uxtb	r5, r5
   d5e8a:	e7f1      	b.n	d5e70 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d5e8c:	6963      	ldr	r3, [r4, #20]
   d5e8e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5e92:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d5e94:	4630      	mov	r0, r6
   d5e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5e9a:	bf00      	nop
   d5e9c:	001ffdff 	.word	0x001ffdff

000d5ea0 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5ea0:	b510      	push	{r4, lr}
   d5ea2:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5ea4:	6880      	ldr	r0, [r0, #8]
   d5ea6:	460a      	mov	r2, r1
   d5ea8:	3024      	adds	r0, #36	; 0x24
   d5eaa:	69a1      	ldr	r1, [r4, #24]
   d5eac:	f000 ff66 	bl	d6d7c <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5eb0:	b120      	cbz	r0, d5ebc <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5eb2:	88a3      	ldrh	r3, [r4, #4]
   d5eb4:	f003 030f 	and.w	r3, r3, #15
   d5eb8:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5ebc:	bd10      	pop	{r4, pc}

000d5ebe <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d5ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5ec0:	2400      	movs	r4, #0
   d5ec2:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d5ec4:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d5ec6:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d5ec8:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d5eca:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d5ece:	2a20      	cmp	r2, #32
   d5ed0:	d018      	beq.n	d5f04 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d5ed2:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d5ed4:	bf02      	ittt	eq
   d5ed6:	54cf      	strbeq	r7, [r1, r3]
   d5ed8:	1c5a      	addeq	r2, r3, #1
   d5eda:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d5edc:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d5ede:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d5ee2:	bf08      	it	eq
   d5ee4:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d5ee6:	f1be 0f19 	cmp.w	lr, #25
   d5eea:	d806      	bhi.n	d5efa <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d5eec:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d5ef0:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d5ef4:	bf1c      	itt	ne
   d5ef6:	3220      	addne	r2, #32
   d5ef8:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d5efa:	f103 0e01 	add.w	lr, r3, #1
   d5efe:	54ca      	strb	r2, [r1, r3]
   d5f00:	fa5f f38e 	uxtb.w	r3, lr
   d5f04:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d5f06:	2c0b      	cmp	r4, #11
   d5f08:	d1df      	bne.n	d5eca <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d5f0a:	2200      	movs	r2, #0
   d5f0c:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d5f0e:	4618      	mov	r0, r3
   d5f10:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5f12 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5f12:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5f14:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5f16:	4605      	mov	r5, r0
   d5f18:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d5f1a:	b984      	cbnz	r4, d5f3e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5f1c:	2224      	movs	r2, #36	; 0x24
   d5f1e:	4621      	mov	r1, r4
   d5f20:	f006 fb8b 	bl	dc63a <memset>

  m_vol = vol;
   d5f24:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5f26:	79f3      	ldrb	r3, [r6, #7]
   d5f28:	2b10      	cmp	r3, #16
   d5f2a:	d003      	beq.n	d5f34 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5f2c:	2b20      	cmp	r3, #32
   d5f2e:	d106      	bne.n	d5f3e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5f30:	2340      	movs	r3, #64	; 0x40
   d5f32:	e000      	b.n	d5f36 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5f34:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5f36:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5f38:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5f3a:	70a8      	strb	r0, [r5, #2]
   d5f3c:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d5f3e:	2000      	movs	r0, #0
   d5f40:	bd70      	pop	{r4, r5, r6, pc}

000d5f42 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5f42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f46:	7803      	ldrb	r3, [r0, #0]
   d5f48:	4604      	mov	r4, r0
   d5f4a:	4689      	mov	r9, r1
   d5f4c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5f4e:	b14b      	cbz	r3, d5f64 <_ZN7FatFile4readEPvj+0x22>
   d5f50:	7882      	ldrb	r2, [r0, #2]
   d5f52:	07d1      	lsls	r1, r2, #31
   d5f54:	d506      	bpl.n	d5f64 <_ZN7FatFile4readEPvj+0x22>
   d5f56:	e00c      	b.n	d5f72 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5f58:	465a      	mov	r2, fp
   d5f5a:	6921      	ldr	r1, [r4, #16]
   d5f5c:	f000 ff38 	bl	d6dd0 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5f60:	2800      	cmp	r0, #0
   d5f62:	da3d      	bge.n	d5fe0 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5f64:	7863      	ldrb	r3, [r4, #1]
   d5f66:	f043 0302 	orr.w	r3, r3, #2
   d5f6a:	7063      	strb	r3, [r4, #1]
  return -1;
   d5f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5f70:	e097      	b.n	d60a2 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5f72:	071a      	lsls	r2, r3, #28
   d5f74:	d503      	bpl.n	d5f7e <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5f76:	69e3      	ldr	r3, [r4, #28]
   d5f78:	6962      	ldr	r2, [r4, #20]
   d5f7a:	1a9b      	subs	r3, r3, r2
   d5f7c:	e007      	b.n	d5f8e <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5f7e:	069a      	lsls	r2, r3, #26
   d5f80:	d508      	bpl.n	d5f94 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5f82:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d5f84:	891a      	ldrh	r2, [r3, #8]
   d5f86:	6963      	ldr	r3, [r4, #20]
   d5f88:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5f8c:	b29b      	uxth	r3, r3
   d5f8e:	429d      	cmp	r5, r3
   d5f90:	bf28      	it	cs
   d5f92:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5f94:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d5f96:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5f9a:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5f9e:	2e00      	cmp	r6, #0
   d5fa0:	d035      	beq.n	d600e <_ZN7FatFile4readEPvj+0xcc>
   d5fa2:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5fa4:	6963      	ldr	r3, [r4, #20]
   d5fa6:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5fa8:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5fac:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5fb0:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5fb4:	d002      	beq.n	d5fbc <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5fb6:	6a03      	ldr	r3, [r0, #32]
   d5fb8:	4419      	add	r1, r3
   d5fba:	e01d      	b.n	d5ff8 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5fbc:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5fc0:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5fc4:	f1ba 0f00 	cmp.w	sl, #0
   d5fc8:	d110      	bne.n	d5fec <_ZN7FatFile4readEPvj+0xaa>
   d5fca:	f1b8 0f00 	cmp.w	r8, #0
   d5fce:	d10d      	bne.n	d5fec <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5fd0:	2b00      	cmp	r3, #0
   d5fd2:	d1c1      	bne.n	d5f58 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5fd4:	0653      	lsls	r3, r2, #25
   d5fd6:	bf4c      	ite	mi
   d5fd8:	6a03      	ldrmi	r3, [r0, #32]
   d5fda:	6a23      	ldrpl	r3, [r4, #32]
   d5fdc:	6123      	str	r3, [r4, #16]
   d5fde:	e005      	b.n	d5fec <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5fe0:	d104      	bne.n	d5fec <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d5fe2:	7823      	ldrb	r3, [r4, #0]
   d5fe4:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5fe8:	d111      	bne.n	d600e <_ZN7FatFile4readEPvj+0xcc>
   d5fea:	e7bb      	b.n	d5f64 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5fec:	6921      	ldr	r1, [r4, #16]
   d5fee:	68a0      	ldr	r0, [r4, #8]
   d5ff0:	f000 fee8 	bl	d6dc4 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5ff4:	eb08 0100 	add.w	r1, r8, r0
   d5ff8:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5ffa:	f1ba 0f00 	cmp.w	sl, #0
   d5ffe:	d135      	bne.n	d606c <_ZN7FatFile4readEPvj+0x12a>
   d6000:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6004:	d332      	bcc.n	d606c <_ZN7FatFile4readEPvj+0x12a>
   d6006:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6008:	4299      	cmp	r1, r3
   d600a:	d102      	bne.n	d6012 <_ZN7FatFile4readEPvj+0xd0>
   d600c:	e02e      	b.n	d606c <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d600e:	1ba8      	subs	r0, r5, r6
   d6010:	e047      	b.n	d60a2 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d6012:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6016:	d31b      	bcc.n	d6050 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d6018:	7822      	ldrb	r2, [r4, #0]
   d601a:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d601c:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d6020:	d406      	bmi.n	d6030 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d6022:	7902      	ldrb	r2, [r0, #4]
   d6024:	ebc8 0202 	rsb	r2, r8, r2
   d6028:	b2d2      	uxtb	r2, r2
   d602a:	4592      	cmp	sl, r2
   d602c:	bf28      	it	cs
   d602e:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6030:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d6032:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6036:	d207      	bcs.n	d6048 <_ZN7FatFile4readEPvj+0x106>
   d6038:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d603a:	4653      	mov	r3, sl
   d603c:	464a      	mov	r2, r9
   d603e:	6800      	ldr	r0, [r0, #0]
   d6040:	f001 f9dc 	bl	d73fc <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d6044:	b960      	cbnz	r0, d6060 <_ZN7FatFile4readEPvj+0x11e>
   d6046:	e78d      	b.n	d5f64 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6048:	4453      	add	r3, sl
   d604a:	4299      	cmp	r1, r3
   d604c:	d321      	bcc.n	d6092 <_ZN7FatFile4readEPvj+0x150>
   d604e:	e7f3      	b.n	d6038 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6050:	464a      	mov	r2, r9
   d6052:	6800      	ldr	r0, [r0, #0]
   d6054:	f001 f98a 	bl	d736c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d6058:	2800      	cmp	r0, #0
   d605a:	d083      	beq.n	d5f64 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d605c:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d6060:	6963      	ldr	r3, [r4, #20]
   d6062:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d6064:	44b9      	add	r9, r7
    m_curPosition += n;
   d6066:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d6068:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d606a:	e798      	b.n	d5f9e <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d606c:	2200      	movs	r2, #0
   d606e:	3024      	adds	r0, #36	; 0x24
   d6070:	f000 fe84 	bl	d6d7c <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d6074:	2800      	cmp	r0, #0
   d6076:	f43f af75 	beq.w	d5f64 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d607a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d607e:	42b7      	cmp	r7, r6
   d6080:	bf28      	it	cs
   d6082:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d6084:	eb00 010a 	add.w	r1, r0, sl
   d6088:	463a      	mov	r2, r7
   d608a:	4648      	mov	r0, r9
   d608c:	f006 faaf 	bl	dc5ee <memcpy>
   d6090:	e7e6      	b.n	d6060 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d6092:	3024      	adds	r0, #36	; 0x24
   d6094:	9101      	str	r1, [sp, #4]
   d6096:	f000 fe4a 	bl	d6d2e <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d609a:	9901      	ldr	r1, [sp, #4]
   d609c:	2800      	cmp	r0, #0
   d609e:	d1cb      	bne.n	d6038 <_ZN7FatFile4readEPvj+0xf6>
   d60a0:	e760      	b.n	d5f64 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d60a2:	b003      	add	sp, #12
   d60a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d60a8 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d60a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d60aa:	2201      	movs	r2, #1
   d60ac:	f10d 0107 	add.w	r1, sp, #7
   d60b0:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d60b2:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d60b4:	6905      	ldr	r5, [r0, #16]
   d60b6:	f7ff ff44 	bl	d5f42 <_ZN7FatFile4readEPvj>
   d60ba:	2801      	cmp	r0, #1
   d60bc:	bf05      	ittet	eq
   d60be:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d60c2:	6166      	streq	r6, [r4, #20]
   d60c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curCluster = pos->cluster;
   d60c8:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d60ca:	b002      	add	sp, #8
   d60cc:	bd70      	pop	{r4, r5, r6, pc}

000d60ce <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d60ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d60d0:	6943      	ldr	r3, [r0, #20]
   d60d2:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d60d6:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d60d8:	b105      	cbz	r5, d60dc <_ZN7FatFile12readDirCacheEb+0xe>
   d60da:	b969      	cbnz	r1, d60f8 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d60dc:	2201      	movs	r2, #1
   d60de:	f10d 0107 	add.w	r1, sp, #7
   d60e2:	4620      	mov	r0, r4
   d60e4:	f7ff ff2d 	bl	d5f42 <_ZN7FatFile4readEPvj>
   d60e8:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d60ea:	2801      	cmp	r0, #1
   d60ec:	d001      	beq.n	d60f2 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d60ee:	2000      	movs	r0, #0
   d60f0:	e008      	b.n	d6104 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d60f2:	6963      	ldr	r3, [r4, #20]
   d60f4:	331f      	adds	r3, #31
   d60f6:	e000      	b.n	d60fa <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d60f8:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d60fa:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d60fc:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d60fe:	3030      	adds	r0, #48	; 0x30
   d6100:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d6104:	b003      	add	sp, #12
   d6106:	bd30      	pop	{r4, r5, pc}

000d6108 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d610c:	460e      	mov	r6, r1
   d610e:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d6110:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6112:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d6114:	2900      	cmp	r1, #0
   d6116:	d039      	beq.n	d618c <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d6118:	6945      	ldr	r5, [r0, #20]
   d611a:	42b5      	cmp	r5, r6
   d611c:	d03a      	beq.n	d6194 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d611e:	b90e      	cbnz	r6, d6124 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d6120:	6106      	str	r6, [r0, #16]
    goto done;
   d6122:	e031      	b.n	d6188 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d6124:	070b      	lsls	r3, r1, #28
   d6126:	d503      	bpl.n	d6130 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d6128:	69c3      	ldr	r3, [r0, #28]
   d612a:	429e      	cmp	r6, r3
   d612c:	d82e      	bhi.n	d618c <_ZN7FatFile7seekSetEm+0x84>
   d612e:	e007      	b.n	d6140 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d6130:	0688      	lsls	r0, r1, #26
   d6132:	d505      	bpl.n	d6140 <_ZN7FatFile7seekSetEm+0x38>
   d6134:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d6136:	891b      	ldrh	r3, [r3, #8]
   d6138:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d613c:	d826      	bhi.n	d618c <_ZN7FatFile7seekSetEm+0x84>
   d613e:	e023      	b.n	d6188 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6140:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d6144:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d6148:	1e6a      	subs	r2, r5, #1
   d614a:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d614e:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6150:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6152:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d6154:	429a      	cmp	r2, r3
   d6156:	d800      	bhi.n	d615a <_ZN7FatFile7seekSetEm+0x52>
   d6158:	b94d      	cbnz	r5, d616e <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d615a:	064a      	lsls	r2, r1, #25
   d615c:	bf4c      	ite	mi
   d615e:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d6162:	6a22      	ldrpl	r2, [r4, #32]
   d6164:	6122      	str	r2, [r4, #16]
   d6166:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6168:	f104 0810 	add.w	r8, r4, #16
   d616c:	e00a      	b.n	d6184 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d616e:	1a9b      	subs	r3, r3, r2
   d6170:	e7f9      	b.n	d6166 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6172:	4642      	mov	r2, r8
   d6174:	6921      	ldr	r1, [r4, #16]
   d6176:	68a0      	ldr	r0, [r4, #8]
   d6178:	f000 fe2a 	bl	d6dd0 <_ZN9FatVolume6fatGetEmPm>
   d617c:	2800      	cmp	r0, #0
   d617e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   d6182:	dd03      	ble.n	d618c <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d6184:	2d00      	cmp	r5, #0
   d6186:	d1f4      	bne.n	d6172 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d6188:	6166      	str	r6, [r4, #20]
   d618a:	e003      	b.n	d6194 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d618c:	6127      	str	r7, [r4, #16]
  return false;
   d618e:	2000      	movs	r0, #0
   d6190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d6194:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d6196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d619a <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d619a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d619c:	460f      	mov	r7, r1
   d619e:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d61a0:	2100      	movs	r1, #0
   d61a2:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d61a4:	4604      	mov	r4, r0
   d61a6:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d61a8:	f006 fa47 	bl	dc63a <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d61ac:	68b8      	ldr	r0, [r7, #8]
   d61ae:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d61b0:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d61b4:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d61b6:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d61ba:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d61bc:	6a3b      	ldr	r3, [r7, #32]
   d61be:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d61c0:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d61c2:	7acb      	ldrb	r3, [r1, #11]
   d61c4:	071d      	lsls	r5, r3, #28
   d61c6:	d44c      	bmi.n	d6262 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d61c8:	1883      	adds	r3, r0, r2
   d61ca:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d61ce:	f003 0317 	and.w	r3, r3, #23
   d61d2:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d61d4:	7ac9      	ldrb	r1, [r1, #11]
   d61d6:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d61da:	bf04      	itt	eq
   d61dc:	f043 0308 	orreq.w	r3, r3, #8
   d61e0:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d61e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d61e6:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d61e8:	f006 0303 	and.w	r3, r6, #3
   d61ec:	2b01      	cmp	r3, #1
   d61ee:	d009      	beq.n	d6204 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d61f0:	2b02      	cmp	r3, #2
   d61f2:	d005      	beq.n	d6200 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d61f4:	2b00      	cmp	r3, #0
   d61f6:	d134      	bne.n	d6262 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d61f8:	0571      	lsls	r1, r6, #21
   d61fa:	d432      	bmi.n	d6262 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d61fc:	2301      	movs	r3, #1
   d61fe:	e002      	b.n	d6206 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d6200:	2303      	movs	r3, #3
   d6202:	e000      	b.n	d6206 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d6204:	2302      	movs	r3, #2
   d6206:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d6208:	78a1      	ldrb	r1, [r4, #2]
   d620a:	078b      	lsls	r3, r1, #30
   d620c:	d503      	bpl.n	d6216 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d620e:	7823      	ldrb	r3, [r4, #0]
   d6210:	f013 0f11 	tst.w	r3, #17
   d6214:	d125      	bne.n	d6262 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d6216:	b24b      	sxtb	r3, r1
   d6218:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d621c:	f006 0108 	and.w	r1, r6, #8
   d6220:	bf14      	ite	ne
   d6222:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d6226:	2700      	moveq	r7, #0
   d6228:	4319      	orrs	r1, r3
   d622a:	4339      	orrs	r1, r7
   d622c:	70a1      	strb	r1, [r4, #2]
   d622e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d6230:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d6232:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d6234:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d6236:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d623a:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d623e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d6242:	d504      	bpl.n	d624e <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d6244:	b181      	cbz	r1, d6268 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d6246:	f000 fe63 	bl	d6f10 <_ZN9FatVolume9freeChainEm>
   d624a:	b968      	cbnz	r0, d6268 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d624c:	e009      	b.n	d6262 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d624e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d6250:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d6252:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d6254:	0473      	lsls	r3, r6, #17
   d6256:	d50c      	bpl.n	d6272 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d6258:	69e1      	ldr	r1, [r4, #28]
   d625a:	4620      	mov	r0, r4
   d625c:	f7ff ff54 	bl	d6108 <_ZN7FatFile7seekSetEm>
   d6260:	b938      	cbnz	r0, d6272 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d6262:	2000      	movs	r0, #0
   d6264:	7020      	strb	r0, [r4, #0]
  return false;
   d6266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d6268:	78a3      	ldrb	r3, [r4, #2]
   d626a:	f043 0304 	orr.w	r3, r3, #4
   d626e:	70a3      	strb	r3, [r4, #2]
   d6270:	e7f0      	b.n	d6254 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d6272:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d6274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6276 <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6276:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d627a:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d627c:	4606      	mov	r6, r0
   d627e:	460d      	mov	r5, r1
   d6280:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6282:	bb53      	cbnz	r3, d62da <_ZN7FatFile8openNextEPS_i+0x64>
   d6284:	780b      	ldrb	r3, [r1, #0]
   d6286:	f013 0f70 	tst.w	r3, #112	; 0x70
   d628a:	d026      	beq.n	d62da <_ZN7FatFile8openNextEPS_i+0x64>
   d628c:	694c      	ldr	r4, [r1, #20]
   d628e:	f014 041f 	ands.w	r4, r4, #31
   d6292:	d122      	bne.n	d62da <_ZN7FatFile8openNextEPS_i+0x64>
   d6294:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d6296:	2100      	movs	r1, #0
   d6298:	4628      	mov	r0, r5
   d629a:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d629e:	f7ff ff16 	bl	d60ce <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d62a2:	b1d0      	cbz	r0, d62da <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d62a4:	7803      	ldrb	r3, [r0, #0]
   d62a6:	b1c3      	cbz	r3, d62da <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d62a8:	2b2e      	cmp	r3, #46	; 0x2e
   d62aa:	d101      	bne.n	d62b0 <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d62ac:	2400      	movs	r4, #0
   d62ae:	e7f2      	b.n	d6296 <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d62b0:	2be5      	cmp	r3, #229	; 0xe5
   d62b2:	d0fb      	beq.n	d62ac <_ZN7FatFile8openNextEPS_i+0x36>
   d62b4:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d62b6:	f011 0f08 	tst.w	r1, #8
   d62ba:	d105      	bne.n	d62c8 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d62bc:	b17c      	cbz	r4, d62de <_ZN7FatFile8openNextEPS_i+0x68>
   d62be:	f000 f973 	bl	d65a8 <_ZN7FatFile11lfnChecksumEPh>
   d62c2:	4580      	cmp	r8, r0
   d62c4:	d109      	bne.n	d62da <_ZN7FatFile8openNextEPS_i+0x64>
   d62c6:	e00a      	b.n	d62de <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d62c8:	290f      	cmp	r1, #15
   d62ca:	d1ef      	bne.n	d62ac <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d62cc:	0659      	lsls	r1, r3, #25
   d62ce:	d5e2      	bpl.n	d6296 <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d62d0:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d62d4:	f890 800d 	ldrb.w	r8, [r0, #13]
   d62d8:	e7dd      	b.n	d6296 <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d62da:	2000      	movs	r0, #0
   d62dc:	e007      	b.n	d62ee <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d62de:	9400      	str	r4, [sp, #0]
   d62e0:	463b      	mov	r3, r7
   d62e2:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d62e6:	4629      	mov	r1, r5
   d62e8:	4630      	mov	r0, r6
   d62ea:	f7ff ff56 	bl	d619a <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d62ee:	b003      	add	sp, #12
   d62f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d62f4 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d62f4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d62f6:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d62f8:	4604      	mov	r4, r0
  if (!isOpen()) {
   d62fa:	b90b      	cbnz	r3, d6300 <_ZN7FatFile4syncEv+0xc>
    return true;
   d62fc:	2001      	movs	r0, #1
   d62fe:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d6300:	7883      	ldrb	r3, [r0, #2]
   d6302:	075a      	lsls	r2, r3, #29
   d6304:	d523      	bpl.n	d634e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6306:	2101      	movs	r1, #1
   d6308:	f7ff fdca 	bl	d5ea0 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d630c:	4605      	mov	r5, r0
   d630e:	b928      	cbnz	r0, d631c <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d6310:	7863      	ldrb	r3, [r4, #1]
   d6312:	f043 0301 	orr.w	r3, r3, #1
   d6316:	7063      	strb	r3, [r4, #1]
  return false;
   d6318:	2000      	movs	r0, #0
   d631a:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d631c:	7803      	ldrb	r3, [r0, #0]
   d631e:	2be5      	cmp	r3, #229	; 0xe5
   d6320:	d0f6      	beq.n	d6310 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d6322:	7823      	ldrb	r3, [r4, #0]
   d6324:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d6326:	bf44      	itt	mi
   d6328:	69e3      	ldrmi	r3, [r4, #28]
   d632a:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d632c:	8c23      	ldrh	r3, [r4, #32]
   d632e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d6330:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d6332:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d6334:	4b09      	ldr	r3, [pc, #36]	; (d635c <_ZN7FatFile4syncEv+0x68>)
   d6336:	681b      	ldr	r3, [r3, #0]
   d6338:	b12b      	cbz	r3, d6346 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d633a:	f100 0116 	add.w	r1, r0, #22
   d633e:	3018      	adds	r0, #24
   d6340:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d6342:	8b2b      	ldrh	r3, [r5, #24]
   d6344:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d6346:	78a3      	ldrb	r3, [r4, #2]
   d6348:	f023 0304 	bic.w	r3, r3, #4
   d634c:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d634e:	68a0      	ldr	r0, [r4, #8]
   d6350:	f7ff fd4e 	bl	d5df0 <_ZN9FatVolume9cacheSyncEv>
   d6354:	2800      	cmp	r0, #0
   d6356:	d0db      	beq.n	d6310 <_ZN7FatFile4syncEv+0x1c>
   d6358:	e7d0      	b.n	d62fc <_ZN7FatFile4syncEv+0x8>
   d635a:	bf00      	nop
   d635c:	2003e310 	.word	0x2003e310

000d6360 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d6360:	b510      	push	{r4, lr}
   d6362:	4604      	mov	r4, r0
  bool rtn = sync();
   d6364:	f7ff ffc6 	bl	d62f4 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d6368:	2300      	movs	r3, #0
   d636a:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d636c:	bd10      	pop	{r4, pc}

000d636e <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d636e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6370:	b093      	sub	sp, #76	; 0x4c
   d6372:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6374:	2300      	movs	r3, #0
   d6376:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d637a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d637e:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6380:	9201      	str	r2, [sp, #4]
   d6382:	4606      	mov	r6, r0
   d6384:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d6386:	b10b      	cbz	r3, d638c <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d6388:	2000      	movs	r0, #0
   d638a:	e03d      	b.n	d6408 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d638c:	780b      	ldrb	r3, [r1, #0]
   d638e:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6392:	d0f9      	beq.n	d6388 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d6394:	7813      	ldrb	r3, [r2, #0]
   d6396:	2b2f      	cmp	r3, #47	; 0x2f
   d6398:	d112      	bne.n	d63c0 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d639a:	9b01      	ldr	r3, [sp, #4]
   d639c:	781a      	ldrb	r2, [r3, #0]
   d639e:	2a2f      	cmp	r2, #47	; 0x2f
   d63a0:	d102      	bne.n	d63a8 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d63a2:	3301      	adds	r3, #1
   d63a4:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d63a6:	e7f8      	b.n	d639a <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d63a8:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d63aa:	b91a      	cbnz	r2, d63b4 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d63ac:	4630      	mov	r0, r6
   d63ae:	f7ff fdb0 	bl	d5f12 <_ZN7FatFile8openRootEP9FatVolume>
   d63b2:	e029      	b.n	d6408 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d63b4:	a809      	add	r0, sp, #36	; 0x24
   d63b6:	f7ff fdac 	bl	d5f12 <_ZN7FatFile8openRootEP9FatVolume>
   d63ba:	2800      	cmp	r0, #0
   d63bc:	d0e4      	beq.n	d6388 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d63be:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d63c0:	aa01      	add	r2, sp, #4
   d63c2:	a903      	add	r1, sp, #12
   d63c4:	9801      	ldr	r0, [sp, #4]
   d63c6:	f000 f98f 	bl	d66e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d63ca:	2800      	cmp	r0, #0
   d63cc:	d0dc      	beq.n	d6388 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d63ce:	9b01      	ldr	r3, [sp, #4]
   d63d0:	781b      	ldrb	r3, [r3, #0]
   d63d2:	b19b      	cbz	r3, d63fc <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d63d4:	2300      	movs	r3, #0
   d63d6:	aa03      	add	r2, sp, #12
   d63d8:	4621      	mov	r1, r4
   d63da:	4630      	mov	r0, r6
   d63dc:	f000 fac6 	bl	d696c <_ZN7FatFile4openEPS_P7fname_ti>
   d63e0:	2800      	cmp	r0, #0
   d63e2:	d0d1      	beq.n	d6388 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d63e4:	4635      	mov	r5, r6
   d63e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d63e8:	ac09      	add	r4, sp, #36	; 0x24
   d63ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d63ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d63ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d63f0:	682b      	ldr	r3, [r5, #0]
   d63f2:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d63f4:	4630      	mov	r0, r6
   d63f6:	f7ff ffb3 	bl	d6360 <_ZN7FatFile5closeEv>
   d63fa:	e7e0      	b.n	d63be <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d63fc:	463b      	mov	r3, r7
   d63fe:	aa03      	add	r2, sp, #12
   d6400:	4621      	mov	r1, r4
   d6402:	4630      	mov	r0, r6
   d6404:	f000 fab2 	bl	d696c <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d6408:	b013      	add	sp, #76	; 0x4c
   d640a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d640c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d640c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6410:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6412:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6414:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6416:	4604      	mov	r4, r0
   d6418:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d641a:	d508      	bpl.n	d642e <_ZN7FatFile5writeEPKvj+0x22>
   d641c:	7883      	ldrb	r3, [r0, #2]
   d641e:	079a      	lsls	r2, r3, #30
   d6420:	d505      	bpl.n	d642e <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d6422:	071b      	lsls	r3, r3, #28
   d6424:	d50b      	bpl.n	d643e <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d6426:	69e1      	ldr	r1, [r4, #28]
   d6428:	f7ff fe6e 	bl	d6108 <_ZN7FatFile7seekSetEm>
   d642c:	b938      	cbnz	r0, d643e <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d642e:	7863      	ldrb	r3, [r4, #1]
   d6430:	f043 0301 	orr.w	r3, r3, #1
   d6434:	7063      	strb	r3, [r4, #1]
  return -1;
   d6436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d643a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d643e:	6963      	ldr	r3, [r4, #20]
   d6440:	43db      	mvns	r3, r3
   d6442:	4598      	cmp	r8, r3
   d6444:	d8f3      	bhi.n	d642e <_ZN7FatFile5writeEPKvj+0x22>
   d6446:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6448:	f04f 0a00 	mov.w	sl, #0
   d644c:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d644e:	2e00      	cmp	r6, #0
   d6450:	f000 8081 	beq.w	d6556 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d6454:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6456:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6458:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d645c:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6460:	d11c      	bne.n	d649c <_ZN7FatFile5writeEPKvj+0x90>
   d6462:	b9df      	cbnz	r7, d649c <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d6464:	6921      	ldr	r1, [r4, #16]
   d6466:	b171      	cbz	r1, d6486 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6468:	f104 0210 	add.w	r2, r4, #16
   d646c:	f000 fcb0 	bl	d6dd0 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d6470:	2800      	cmp	r0, #0
   d6472:	dbdc      	blt.n	d642e <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d6474:	f040 808e 	bne.w	d6594 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d6478:	4620      	mov	r0, r4
   d647a:	f7ff fcc6 	bl	d5e0a <_ZN7FatFile10addClusterEv>
   d647e:	2800      	cmp	r0, #0
   d6480:	f040 8088 	bne.w	d6594 <_ZN7FatFile5writeEPKvj+0x188>
   d6484:	e7d3      	b.n	d642e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d6486:	6a23      	ldr	r3, [r4, #32]
   d6488:	b93b      	cbnz	r3, d649a <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d648a:	4620      	mov	r0, r4
   d648c:	f7ff fcbd 	bl	d5e0a <_ZN7FatFile10addClusterEv>
   d6490:	2800      	cmp	r0, #0
   d6492:	d0cc      	beq.n	d642e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d6494:	6923      	ldr	r3, [r4, #16]
   d6496:	6223      	str	r3, [r4, #32]
   d6498:	e000      	b.n	d649c <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d649a:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d649c:	6921      	ldr	r1, [r4, #16]
   d649e:	68a0      	ldr	r0, [r4, #8]
   d64a0:	f000 fc90 	bl	d6dc4 <_ZNK9FatVolume17clusterFirstBlockEm>
   d64a4:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d64a6:	b917      	cbnz	r7, d64ae <_ZN7FatFile5writeEPKvj+0xa2>
   d64a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d64ac:	d221      	bcs.n	d64f2 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d64ae:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d64b2:	42b5      	cmp	r5, r6
   d64b4:	bf28      	it	cs
   d64b6:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d64b8:	b937      	cbnz	r7, d64c8 <_ZN7FatFile5writeEPKvj+0xbc>
   d64ba:	6963      	ldr	r3, [r4, #20]
   d64bc:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d64be:	4293      	cmp	r3, r2
   d64c0:	bf34      	ite	cc
   d64c2:	2201      	movcc	r2, #1
   d64c4:	2205      	movcs	r2, #5
   d64c6:	e000      	b.n	d64ca <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d64c8:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d64ca:	68a0      	ldr	r0, [r4, #8]
   d64cc:	3024      	adds	r0, #36	; 0x24
   d64ce:	f000 fc55 	bl	d6d7c <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d64d2:	2800      	cmp	r0, #0
   d64d4:	d0ab      	beq.n	d642e <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d64d6:	4438      	add	r0, r7
   d64d8:	462a      	mov	r2, r5
   d64da:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d64dc:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d64de:	f006 f886 	bl	dc5ee <memcpy>
      if (512 == (n + blockOffset)) {
   d64e2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d64e6:	d130      	bne.n	d654a <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d64e8:	68a0      	ldr	r0, [r4, #8]
   d64ea:	3024      	adds	r0, #36	; 0x24
   d64ec:	f000 fc1f 	bl	d6d2e <_ZN8FatCache4syncEv>
   d64f0:	e017      	b.n	d6522 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d64f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d64f6:	68a0      	ldr	r0, [r4, #8]
   d64f8:	d315      	bcc.n	d6526 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d64fa:	7902      	ldrb	r2, [r0, #4]
   d64fc:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d64fe:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d6500:	b2d2      	uxtb	r2, r2
   d6502:	4293      	cmp	r3, r2
   d6504:	bf28      	it	cs
   d6506:	4613      	movcs	r3, r2
   d6508:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d650a:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d650c:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6510:	d302      	bcc.n	d6518 <_ZN7FatFile5writeEPKvj+0x10c>
   d6512:	441a      	add	r2, r3
   d6514:	4291      	cmp	r1, r2
   d6516:	d337      	bcc.n	d6588 <_ZN7FatFile5writeEPKvj+0x17c>
   d6518:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d651a:	464a      	mov	r2, r9
   d651c:	6838      	ldr	r0, [r7, #0]
   d651e:	f001 f821 	bl	d7564 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d6522:	b990      	cbnz	r0, d654a <_ZN7FatFile5writeEPKvj+0x13e>
   d6524:	e783      	b.n	d642e <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d6526:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6528:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d652a:	bf02      	ittt	eq
   d652c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6530:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6534:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d6536:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6538:	464a      	mov	r2, r9
   d653a:	6818      	ldr	r0, [r3, #0]
   d653c:	f000 ffa0 	bl	d7480 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d6540:	2800      	cmp	r0, #0
   d6542:	f43f af74 	beq.w	d642e <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d6546:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d654a:	6963      	ldr	r3, [r4, #20]
   d654c:	442b      	add	r3, r5
   d654e:	6163      	str	r3, [r4, #20]
    src += n;
   d6550:	44a9      	add	r9, r5
    nToWrite -= n;
   d6552:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d6554:	e77a      	b.n	d644c <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d6556:	69e2      	ldr	r2, [r4, #28]
   d6558:	4293      	cmp	r3, r2
   d655a:	d901      	bls.n	d6560 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d655c:	61e3      	str	r3, [r4, #28]
   d655e:	e002      	b.n	d6566 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d6560:	4b0f      	ldr	r3, [pc, #60]	; (d65a0 <_ZN7FatFile5writeEPKvj+0x194>)
   d6562:	681b      	ldr	r3, [r3, #0]
   d6564:	b11b      	cbz	r3, d656e <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d6566:	78a3      	ldrb	r3, [r4, #2]
   d6568:	f043 0304 	orr.w	r3, r3, #4
   d656c:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d656e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d6572:	2b00      	cmp	r3, #0
   d6574:	db02      	blt.n	d657c <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d6576:	4640      	mov	r0, r8
   d6578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d657c:	4620      	mov	r0, r4
   d657e:	f7ff feb9 	bl	d62f4 <_ZN7FatFile4syncEv>
   d6582:	2800      	cmp	r0, #0
   d6584:	d1f7      	bne.n	d6576 <_ZN7FatFile5writeEPKvj+0x16a>
   d6586:	e752      	b.n	d642e <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d658c:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6590:	62c2      	str	r2, [r0, #44]	; 0x2c
   d6592:	e7c1      	b.n	d6518 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6594:	6921      	ldr	r1, [r4, #16]
   d6596:	68a0      	ldr	r0, [r4, #8]
   d6598:	f000 fc14 	bl	d6dc4 <_ZNK9FatVolume17clusterFirstBlockEm>
   d659c:	4601      	mov	r1, r0
   d659e:	e783      	b.n	d64a8 <_ZN7FatFile5writeEPKvj+0x9c>
   d65a0:	2003e310 	.word	0x2003e310

000d65a4 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d65a4:	f001 bae0 	b.w	d7b68 <HAL_Pin_Map>

000d65a8 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d65a8:	1e41      	subs	r1, r0, #1
   d65aa:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d65ae:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d65b0:	0843      	lsrs	r3, r0, #1
   d65b2:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d65b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d65ba:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d65be:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d65c0:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d65c2:	d1f5      	bne.n	d65b0 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d65c4:	4770      	bx	lr

000d65c6 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d65c6:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d65c8:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d65ca:	4604      	mov	r4, r0
   d65cc:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d65ce:	b923      	cbnz	r3, d65da <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d65d0:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d65d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d65d6:	f7ff bc9c 	b.w	d5f12 <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d65da:	2224      	movs	r2, #36	; 0x24
   d65dc:	2100      	movs	r1, #0
   d65de:	f006 f82c 	bl	dc63a <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d65e2:	2310      	movs	r3, #16
  m_flags = F_READ;
   d65e4:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d65e6:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d65e8:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d65ea:	68ab      	ldr	r3, [r5, #8]
   d65ec:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d65ee:	68eb      	ldr	r3, [r5, #12]
   d65f0:	6223      	str	r3, [r4, #32]
  return true;
}
   d65f2:	bd38      	pop	{r3, r4, r5, pc}

000d65f4 <_ZN7FatFile7getNameEPcj>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d65f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d65f8:	b08b      	sub	sp, #44	; 0x2c
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d65fa:	7803      	ldrb	r3, [r0, #0]
   d65fc:	2500      	movs	r5, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d65fe:	4680      	mov	r8, r0
   d6600:	460e      	mov	r6, r1
   d6602:	4617      	mov	r7, r2
   d6604:	f88d 5004 	strb.w	r5, [sp, #4]
   d6608:	f88d 5005 	strb.w	r5, [sp, #5]
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d660c:	b163      	cbz	r3, d6628 <_ZN7FatFile7getNameEPcj+0x34>
   d660e:	2a0c      	cmp	r2, #12
   d6610:	d90a      	bls.n	d6628 <_ZN7FatFile7getNameEPcj+0x34>
   d6612:	e00e      	b.n	d6632 <_ZN7FatFile7getNameEPcj+0x3e>
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
   d6614:	4641      	mov	r1, r8
   d6616:	a801      	add	r0, sp, #4
   d6618:	f7ff ffd5 	bl	d65c6 <_ZN7FatFile11openClusterEPS_>
   d661c:	b120      	cbz	r0, d6628 <_ZN7FatFile7getNameEPcj+0x34>
   d661e:	2401      	movs	r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d6620:	f898 3003 	ldrb.w	r3, [r8, #3]
   d6624:	42a3      	cmp	r3, r4
   d6626:	d20b      	bcs.n	d6640 <_ZN7FatFile7getNameEPcj+0x4c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
   d6628:	f04f 0900 	mov.w	r9, #0
   d662c:	f886 9000 	strb.w	r9, [r6]
  return false;
   d6630:	e055      	b.n	d66de <_ZN7FatFile7getNameEPcj+0xea>
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6632:	78c3      	ldrb	r3, [r0, #3]
   d6634:	2b00      	cmp	r3, #0
   d6636:	d1ed      	bne.n	d6614 <_ZN7FatFile7getNameEPcj+0x20>
    return getSFN(name);
   d6638:	f000 fb60 	bl	d6cfc <_ZN7FatFile6getSFNEPc>
   d663c:	4681      	mov	r9, r0
   d663e:	e04e      	b.n	d66de <_ZN7FatFile7getNameEPcj+0xea>
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d6640:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   d6644:	1b09      	subs	r1, r1, r4
   d6646:	0149      	lsls	r1, r1, #5
   d6648:	a801      	add	r0, sp, #4
   d664a:	f7ff fd5d 	bl	d6108 <_ZN7FatFile7seekSetEm>
   d664e:	4681      	mov	r9, r0
   d6650:	2800      	cmp	r0, #0
   d6652:	d0e9      	beq.n	d6628 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d6654:	2100      	movs	r1, #0
   d6656:	a801      	add	r0, sp, #4
   d6658:	f7ff fd39 	bl	d60ce <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d665c:	2800      	cmp	r0, #0
   d665e:	d0e3      	beq.n	d6628 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   d6660:	7ac3      	ldrb	r3, [r0, #11]
   d6662:	2b0f      	cmp	r3, #15
   d6664:	d1e0      	bne.n	d6628 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ord != (ldir->ord & 0X1F)) {
   d6666:	7803      	ldrb	r3, [r0, #0]
   d6668:	f003 031f 	and.w	r3, r3, #31
   d666c:	429c      	cmp	r4, r3
   d666e:	d1db      	bne.n	d6628 <_ZN7FatFile7getNameEPcj+0x34>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6670:	1e63      	subs	r3, r4, #1
   d6672:	220d      	movs	r2, #13
   d6674:	435a      	muls	r2, r3
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d6676:	eb06 0e02 	add.w	lr, r6, r2
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d667a:	2300      	movs	r3, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d667c:	2b04      	cmp	r3, #4
   d667e:	b2d9      	uxtb	r1, r3
   d6680:	d804      	bhi.n	d668c <_ZN7FatFile7getNameEPcj+0x98>
    return ldir->name1[i];
   d6682:	eb00 0143 	add.w	r1, r0, r3, lsl #1
   d6686:	f8b1 1001 	ldrh.w	r1, [r1, #1]
   d668a:	e00b      	b.n	d66a4 <_ZN7FatFile7getNameEPcj+0xb0>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d668c:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d668e:	bf95      	itete	ls
   d6690:	f103 31ff 	addls.w	r1, r3, #4294967295	; 0xffffffff
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6694:	1c59      	addhi	r1, r3, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6696:	eb00 0141 	addls.w	r1, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d669a:	eb00 0141 	addhi.w	r1, r0, r1, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d669e:	bf94      	ite	ls
   d66a0:	88c9      	ldrhls	r1, [r1, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d66a2:	8889      	ldrhhi	r1, [r1, #4]
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
   d66a4:	b161      	cbz	r1, d66c0 <_ZN7FatFile7getNameEPcj+0xcc>
   d66a6:	4297      	cmp	r7, r2
   d66a8:	d910      	bls.n	d66cc <_ZN7FatFile7getNameEPcj+0xd8>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d66aa:	297e      	cmp	r1, #126	; 0x7e
   d66ac:	bf94      	ite	ls
   d66ae:	b2c9      	uxtbls	r1, r1
   d66b0:	213f      	movhi	r1, #63	; 0x3f
   d66b2:	f80e 1003 	strb.w	r1, [lr, r3]
   d66b6:	3301      	adds	r3, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d66b8:	2b0d      	cmp	r3, #13
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d66ba:	f102 0201 	add.w	r2, r2, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d66be:	d1dd      	bne.n	d667c <_ZN7FatFile7getNameEPcj+0x88>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   d66c0:	4297      	cmp	r7, r2
   d66c2:	d903      	bls.n	d66cc <_ZN7FatFile7getNameEPcj+0xd8>
   d66c4:	7803      	ldrb	r3, [r0, #0]
   d66c6:	0659      	lsls	r1, r3, #25
    name[k] = 0;
   d66c8:	bf48      	it	mi
   d66ca:	54b5      	strbmi	r5, [r6, r2]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
   d66cc:	19f3      	adds	r3, r6, r7
   d66ce:	f803 5c01 	strb.w	r5, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d66d2:	7803      	ldrb	r3, [r0, #0]
   d66d4:	065b      	lsls	r3, r3, #25
   d66d6:	d402      	bmi.n	d66de <_ZN7FatFile7getNameEPcj+0xea>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d66d8:	3401      	adds	r4, #1
   d66da:	b2e4      	uxtb	r4, r4
   d66dc:	e7a0      	b.n	d6620 <_ZN7FatFile7getNameEPcj+0x2c>
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
   d66de:	4648      	mov	r0, r9
   d66e0:	b00b      	add	sp, #44	; 0x2c
   d66e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d66e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d66e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d66ec:	7803      	ldrb	r3, [r0, #0]
   d66ee:	2b20      	cmp	r3, #32
   d66f0:	f100 0401 	add.w	r4, r0, #1
   d66f4:	d101      	bne.n	d66fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d66f6:	4620      	mov	r0, r4
   d66f8:	e7f8      	b.n	d66ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d66fa:	4f70      	ldr	r7, [pc, #448]	; (d68bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d66fc:	6088      	str	r0, [r1, #8]
   d66fe:	4605      	mov	r5, r0
   d6700:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d6702:	462e      	mov	r6, r5
   d6704:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d6708:	b30b      	cbz	r3, d674e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d670a:	2b2f      	cmp	r3, #47	; 0x2f
   d670c:	d101      	bne.n	d6712 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d670e:	1903      	adds	r3, r0, r4
   d6710:	e017      	b.n	d6742 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6712:	2b5c      	cmp	r3, #92	; 0x5c
   d6714:	d102      	bne.n	d671c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6716:	2000      	movs	r0, #0
   d6718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d671c:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d6720:	b2e4      	uxtb	r4, r4
   d6722:	2c1d      	cmp	r4, #29
   d6724:	d803      	bhi.n	d672e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d6726:	fa27 f404 	lsr.w	r4, r7, r4
   d672a:	07e4      	lsls	r4, r4, #31
   d672c:	d4f3      	bmi.n	d6716 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d672e:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d6732:	2c3c      	cmp	r4, #60	; 0x3c
   d6734:	d0ef      	beq.n	d6716 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d6736:	3b20      	subs	r3, #32
   d6738:	2b5e      	cmp	r3, #94	; 0x5e
   d673a:	d9e1      	bls.n	d6700 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d673c:	e7eb      	b.n	d6716 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d673e:	2d2f      	cmp	r5, #47	; 0x2f
   d6740:	d105      	bne.n	d674e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6742:	461e      	mov	r6, r3
   d6744:	f813 5b01 	ldrb.w	r5, [r3], #1
   d6748:	2d20      	cmp	r5, #32
   d674a:	d1f8      	bne.n	d673e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d674c:	e7f9      	b.n	d6742 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d674e:	6016      	str	r6, [r2, #0]
   d6750:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d6752:	4298      	cmp	r0, r3
   d6754:	ebc0 0803 	rsb	r8, r0, r3
   d6758:	d009      	beq.n	d676e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d675a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d675e:	2a2e      	cmp	r2, #46	; 0x2e
   d6760:	d0f7      	beq.n	d6752 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d6762:	2a20      	cmp	r2, #32
   d6764:	d0f5      	beq.n	d6752 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d6766:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d676a:	dcd4      	bgt.n	d6716 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d676c:	e001      	b.n	d6772 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d676e:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d6772:	f8c1 8004 	str.w	r8, [r1, #4]
   d6776:	f101 030c 	add.w	r3, r1, #12
   d677a:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d677e:	2420      	movs	r4, #32
   d6780:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d6784:	4293      	cmp	r3, r2
   d6786:	d1fb      	bne.n	d6780 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6788:	4603      	mov	r3, r0
   d678a:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d678c:	f813 4b01 	ldrb.w	r4, [r3], #1
   d6790:	2c2e      	cmp	r4, #46	; 0x2e
   d6792:	d0fa      	beq.n	d678a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d6794:	2c20      	cmp	r4, #32
   d6796:	d0f8      	beq.n	d678a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d6798:	fab2 f482 	clz	r4, r2
   d679c:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d679e:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   d67a2:	1c73      	adds	r3, r6, #1
   d67a4:	d107      	bne.n	d67b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d67a6:	2700      	movs	r7, #0
   d67a8:	f04f 0e07 	mov.w	lr, #7
   d67ac:	463d      	mov	r5, r7
   d67ae:	46ba      	mov	sl, r7
   d67b0:	f04f 0908 	mov.w	r9, #8
   d67b4:	e009      	b.n	d67ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d67b6:	5d83      	ldrb	r3, [r0, r6]
   d67b8:	2b2e      	cmp	r3, #46	; 0x2e
   d67ba:	d0f4      	beq.n	d67a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d67bc:	3e01      	subs	r6, #1
   d67be:	e7f0      	b.n	d67a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d67c0:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d67c2:	2b20      	cmp	r3, #32
   d67c4:	d104      	bne.n	d67d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d67c6:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d67c8:	3201      	adds	r2, #1
   d67ca:	4542      	cmp	r2, r8
   d67cc:	dbf8      	blt.n	d67c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d67ce:	e04b      	b.n	d6868 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d67d0:	2b2e      	cmp	r3, #46	; 0x2e
   d67d2:	d102      	bne.n	d67da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d67d4:	42b2      	cmp	r2, r6
   d67d6:	d1f6      	bne.n	d67c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d67d8:	e003      	b.n	d67e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d67da:	2b22      	cmp	r3, #34	; 0x22
   d67dc:	d017      	beq.n	d680e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d67de:	2b7c      	cmp	r3, #124	; 0x7c
   d67e0:	d015      	beq.n	d680e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d67e2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d67e6:	f1bc 0f05 	cmp.w	ip, #5
   d67ea:	d801      	bhi.n	d67f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d67ec:	2b2d      	cmp	r3, #45	; 0x2d
   d67ee:	d10e      	bne.n	d680e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d67f0:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d67f4:	f1bc 0f05 	cmp.w	ip, #5
   d67f8:	d909      	bls.n	d680e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d67fa:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d67fe:	f1bc 0f02 	cmp.w	ip, #2
   d6802:	d904      	bls.n	d680e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d6804:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6808:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d680c:	d902      	bls.n	d6814 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d680e:	42b2      	cmp	r2, r6
   d6810:	d10e      	bne.n	d6830 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d6812:	e049      	b.n	d68a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6814:	42b2      	cmp	r2, r6
   d6816:	d047      	beq.n	d68a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d6818:	4575      	cmp	r5, lr
   d681a:	d821      	bhi.n	d6860 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d681c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6820:	f1bc 0f19 	cmp.w	ip, #25
   d6824:	d808      	bhi.n	d6838 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d6826:	3b20      	subs	r3, #32
   d6828:	b2db      	uxtb	r3, r3
        lc |= bit;
   d682a:	ea49 0707 	orr.w	r7, r9, r7
   d682e:	e00a      	b.n	d6846 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6830:	4575      	cmp	r5, lr
   d6832:	d815      	bhi.n	d6860 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d6834:	2400      	movs	r4, #0
      c = '_';
   d6836:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d6838:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d683c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6840:	bf98      	it	ls
   d6842:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d6846:	f105 0c01 	add.w	ip, r5, #1
   d684a:	fa5f fc8c 	uxtb.w	ip, ip
   d684e:	440d      	add	r5, r1
      if (i < 7) {
   d6850:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d6854:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d6856:	d801      	bhi.n	d685c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d6858:	f881 c00c 	strb.w	ip, [r1, #12]
   d685c:	4665      	mov	r5, ip
   d685e:	e7b3      	b.n	d67c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6860:	f1be 0f0a 	cmp.w	lr, #10
   d6864:	d117      	bne.n	d6896 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d6866:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d6868:	7b4b      	ldrb	r3, [r1, #13]
   d686a:	2b20      	cmp	r3, #32
   d686c:	f43f af53 	beq.w	d6716 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d6870:	b13c      	cbz	r4, d6882 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6872:	ea1a 0f07 	tst.w	sl, r7
   d6876:	bf18      	it	ne
   d6878:	2702      	movne	r7, #2
   d687a:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d687c:	2001      	movs	r0, #1
   d687e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d6882:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6884:	2001      	movs	r0, #1
   d6886:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6888:	4419      	add	r1, r3
   d688a:	237e      	movs	r3, #126	; 0x7e
   d688c:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d688e:	2331      	movs	r3, #49	; 0x31
   d6890:	738b      	strb	r3, [r1, #14]
   d6892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d6896:	42b2      	cmp	r2, r6
   d6898:	dce5      	bgt.n	d6866 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d689a:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d689c:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d68a0:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d68a2:	f04f 0910 	mov.w	r9, #16
   d68a6:	e78e      	b.n	d67c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d68a8:	f1be 0f0a 	cmp.w	lr, #10
   d68ac:	d0db      	beq.n	d6866 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d68ae:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d68b0:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d68b4:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d68b6:	f04f 0910 	mov.w	r9, #16
   d68ba:	e785      	b.n	d67c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d68bc:	31000101 	.word	0x31000101

000d68c0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d68c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d68c4:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d68c8:	4606      	mov	r6, r0
   d68ca:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d68cc:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d68ce:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d68d0:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d68d4:	6869      	ldr	r1, [r5, #4]
   d68d6:	68aa      	ldr	r2, [r5, #8]
   d68d8:	1863      	adds	r3, r4, r1
   d68da:	b29b      	uxth	r3, r3
   d68dc:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d68de:	4291      	cmp	r1, r2
   d68e0:	d006      	beq.n	d68f0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d68e2:	f812 0b01 	ldrb.w	r0, [r2], #1
   d68e6:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d68ea:	4043      	eors	r3, r0
   d68ec:	b29b      	uxth	r3, r3
   d68ee:	e7f6      	b.n	d68de <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d68f0:	f1b9 0f03 	cmp.w	r9, #3
   d68f4:	bf28      	it	cs
   d68f6:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d68fa:	f109 0204 	add.w	r2, r9, #4
   d68fe:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6900:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6904:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6906:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6908:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d690a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d690c:	bf94      	ite	ls
   d690e:	3130      	addls	r1, #48	; 0x30
   d6910:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6912:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6914:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d6916:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d691a:	d3f1      	bcc.n	d6900 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d691c:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d6920:	2100      	movs	r1, #0
   d6922:	735f      	strb	r7, [r3, #13]
   d6924:	4630      	mov	r0, r6
   d6926:	f7ff fbef 	bl	d6108 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d692a:	2101      	movs	r1, #1
   d692c:	4630      	mov	r0, r6
   d692e:	f7ff fbce 	bl	d60ce <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6932:	4601      	mov	r1, r0
   d6934:	b928      	cbnz	r0, d6942 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d6936:	7870      	ldrb	r0, [r6, #1]
   d6938:	fab0 f080 	clz	r0, r0
   d693c:	0940      	lsrs	r0, r0, #5
   d693e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6942:	7803      	ldrb	r3, [r0, #0]
   d6944:	b14b      	cbz	r3, d695a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6946:	7ac3      	ldrb	r3, [r0, #11]
   d6948:	071b      	lsls	r3, r3, #28
   d694a:	d4ee      	bmi.n	d692a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d694c:	220b      	movs	r2, #11
   d694e:	4640      	mov	r0, r8
   d6950:	f005 fe3e 	bl	dc5d0 <memcmp>
   d6954:	2800      	cmp	r0, #0
   d6956:	d1e8      	bne.n	d692a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6958:	e002      	b.n	d6960 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d695a:	2001      	movs	r0, #1
   d695c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6960:	3401      	adds	r4, #1
   d6962:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d6964:	2c64      	cmp	r4, #100	; 0x64
   d6966:	d1b5      	bne.n	d68d4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d6968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d696c <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d696c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6970:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6972:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6974:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6976:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d697a:	9005      	str	r0, [sp, #20]
   d697c:	460e      	mov	r6, r1
   d697e:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6980:	d101      	bne.n	d6986 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d6982:	2000      	movs	r0, #0
   d6984:	e1a0      	b.n	d6cc8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6986:	9b05      	ldr	r3, [sp, #20]
   d6988:	781b      	ldrb	r3, [r3, #0]
   d698a:	2b00      	cmp	r3, #0
   d698c:	d1f9      	bne.n	d6982 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d698e:	6853      	ldr	r3, [r2, #4]
   d6990:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6992:	7813      	ldrb	r3, [r2, #0]
   d6994:	079b      	lsls	r3, r3, #30
   d6996:	f000 818d 	beq.w	d6cb4 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d699a:	9b02      	ldr	r3, [sp, #8]
   d699c:	270d      	movs	r7, #13
   d699e:	330c      	adds	r3, #12
   d69a0:	fbb3 f7f7 	udiv	r7, r3, r7
   d69a4:	3701      	adds	r7, #1
   d69a6:	b2ff      	uxtb	r7, r7
   d69a8:	2100      	movs	r1, #0
   d69aa:	4630      	mov	r0, r6
   d69ac:	f7ff fbac 	bl	d6108 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d69b0:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d69b4:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d69b8:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d69bc:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d69be:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d69c0:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d69c2:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d69c6:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d69c8:	6972      	ldr	r2, [r6, #20]
   d69ca:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d69cc:	2101      	movs	r1, #1
   d69ce:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d69d0:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d69d4:	f7ff fb7b 	bl	d60ce <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d69d8:	9b07      	ldr	r3, [sp, #28]
   d69da:	b920      	cbnz	r0, d69e6 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d69dc:	7873      	ldrb	r3, [r6, #1]
   d69de:	2b00      	cmp	r3, #0
   d69e0:	f000 8090 	beq.w	d6b04 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d69e4:	e7cd      	b.n	d6982 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d69e6:	7802      	ldrb	r2, [r0, #0]
   d69e8:	2ae5      	cmp	r2, #229	; 0xe5
   d69ea:	d000      	beq.n	d69ee <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d69ec:	b942      	cbnz	r2, d6a00 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d69ee:	2c00      	cmp	r4, #0
   d69f0:	bf08      	it	eq
   d69f2:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d69f4:	42bc      	cmp	r4, r7
        freeFound++;
   d69f6:	bf3c      	itt	cc
   d69f8:	3401      	addcc	r4, #1
   d69fa:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d69fc:	b922      	cbnz	r2, d6a08 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d69fe:	e081      	b.n	d6b04 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d6a00:	42bc      	cmp	r4, r7
   d6a02:	bf38      	it	cc
   d6a04:	2400      	movcc	r4, #0
   d6a06:	e003      	b.n	d6a10 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6a08:	2ae5      	cmp	r2, #229	; 0xe5
   d6a0a:	d101      	bne.n	d6a10 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d6a0c:	2500      	movs	r5, #0
   d6a0e:	e7db      	b.n	d69c8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6a10:	2a2e      	cmp	r2, #46	; 0x2e
   d6a12:	d0fb      	beq.n	d6a0c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6a14:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6a16:	290f      	cmp	r1, #15
   d6a18:	d152      	bne.n	d6ac0 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d6a1a:	b93d      	cbnz	r5, d6a2c <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d6a1c:	0651      	lsls	r1, r2, #25
   d6a1e:	d5d3      	bpl.n	d69c8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d6a20:	7b43      	ldrb	r3, [r0, #13]
   d6a22:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d6a24:	f002 051f 	and.w	r5, r2, #31
   d6a28:	462b      	mov	r3, r5
   d6a2a:	e007      	b.n	d6a3c <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6a2c:	3b01      	subs	r3, #1
   d6a2e:	b2db      	uxtb	r3, r3
   d6a30:	429a      	cmp	r2, r3
   d6a32:	d1eb      	bne.n	d6a0c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6a34:	7b42      	ldrb	r2, [r0, #13]
   d6a36:	9903      	ldr	r1, [sp, #12]
   d6a38:	4291      	cmp	r1, r2
   d6a3a:	d1e7      	bne.n	d6a0c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d6a3c:	1e5a      	subs	r2, r3, #1
   d6a3e:	f04f 0c0d 	mov.w	ip, #13
   d6a42:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d6a46:	9a02      	ldr	r2, [sp, #8]
   d6a48:	4562      	cmp	r2, ip
   d6a4a:	d9df      	bls.n	d6a0c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6a4c:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d6a50:	f1be 0f04 	cmp.w	lr, #4
   d6a54:	fa5f f28e 	uxtb.w	r2, lr
   d6a58:	d804      	bhi.n	d6a64 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d6a5a:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d6a5e:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d6a62:	e00c      	b.n	d6a7e <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6a64:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6a66:	bf95      	itete	ls
   d6a68:	f10e 32ff 	addls.w	r2, lr, #4294967295	; 0xffffffff
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6a6c:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6a70:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6a74:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6a78:	bf94      	ite	ls
   d6a7a:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6a7c:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d6a7e:	9902      	ldr	r1, [sp, #8]
   d6a80:	4561      	cmp	r1, ip
   d6a82:	d103      	bne.n	d6a8c <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d6a84:	2a00      	cmp	r2, #0
   d6a86:	bf18      	it	ne
   d6a88:	2500      	movne	r5, #0
   d6a8a:	e79d      	b.n	d69c8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6a8c:	2aff      	cmp	r2, #255	; 0xff
   d6a8e:	d8bd      	bhi.n	d6a0c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6a90:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6a92:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d6a96:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6a98:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d6a9c:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6aa0:	bf98      	it	ls
   d6aa2:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6aa4:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6aa8:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d6aac:	bf98      	it	ls
   d6aae:	b2d2      	uxtbls	r2, r2
   d6ab0:	f1bc 0f19 	cmp.w	ip, #25
   d6ab4:	bf9c      	itt	ls
   d6ab6:	3120      	addls	r1, #32
   d6ab8:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6aba:	4291      	cmp	r1, r2
   d6abc:	d1a6      	bne.n	d6a0c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6abe:	e0fb      	b.n	d6cb8 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6ac0:	0709      	lsls	r1, r1, #28
   d6ac2:	d4a3      	bmi.n	d6a0c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d6ac4:	b14d      	cbz	r5, d6ada <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d6ac6:	2b01      	cmp	r3, #1
   d6ac8:	f47f af5b 	bne.w	d6982 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6acc:	f7ff fd6c 	bl	d65a8 <_ZN7FatFile11lfnChecksumEPh>
   d6ad0:	9b03      	ldr	r3, [sp, #12]
   d6ad2:	4283      	cmp	r3, r0
   d6ad4:	f47f af55 	bne.w	d6982 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6ad8:	e00f      	b.n	d6afa <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6ada:	220b      	movs	r2, #11
   d6adc:	9906      	ldr	r1, [sp, #24]
   d6ade:	9307      	str	r3, [sp, #28]
   d6ae0:	f005 fd76 	bl	dc5d0 <memcmp>
   d6ae4:	9b07      	ldr	r3, [sp, #28]
   d6ae6:	2800      	cmp	r0, #0
   d6ae8:	f47f af6e 	bne.w	d69c8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6aec:	f899 2000 	ldrb.w	r2, [r9]
   d6af0:	07d2      	lsls	r2, r2, #31
   d6af2:	d502      	bpl.n	d6afa <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d6af4:	2201      	movs	r2, #1
   d6af6:	9204      	str	r2, [sp, #16]
   d6af8:	e766      	b.n	d69c8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d6afa:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d6afe:	f000 80d1 	beq.w	d6ca4 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d6b02:	e73e      	b.n	d6982 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6b04:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d6b08:	f43f af3b 	beq.w	d6982 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6b0c:	f00b 0303 	and.w	r3, fp, #3
   d6b10:	3b01      	subs	r3, #1
   d6b12:	2b01      	cmp	r3, #1
   d6b14:	f63f af35 	bhi.w	d6982 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d6b18:	2c00      	cmp	r4, #0
   d6b1a:	bf08      	it	eq
   d6b1c:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6b1e:	42bc      	cmp	r4, r7
   d6b20:	d302      	bcc.n	d6b28 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d6b22:	9b04      	ldr	r3, [sp, #16]
   d6b24:	b9cb      	cbnz	r3, d6b5a <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d6b26:	e01f      	b.n	d6b68 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d6b28:	2100      	movs	r1, #0
   d6b2a:	4630      	mov	r0, r6
   d6b2c:	f7ff facf 	bl	d60ce <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6b30:	b910      	cbnz	r0, d6b38 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d6b32:	7873      	ldrb	r3, [r6, #1]
   d6b34:	b15b      	cbz	r3, d6b4e <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d6b36:	e724      	b.n	d6982 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d6b38:	3401      	adds	r4, #1
   d6b3a:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6b3c:	e7ef      	b.n	d6b1e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d6b3e:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d6b40:	791b      	ldrb	r3, [r3, #4]
   d6b42:	2b01      	cmp	r3, #1
   d6b44:	d8ed      	bhi.n	d6b22 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d6b46:	3410      	adds	r4, #16
   d6b48:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d6b4a:	42a7      	cmp	r7, r4
   d6b4c:	d9e9      	bls.n	d6b22 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d6b4e:	4630      	mov	r0, r6
   d6b50:	f7ff f966 	bl	d5e20 <_ZN7FatFile13addDirClusterEv>
   d6b54:	2800      	cmp	r0, #0
   d6b56:	d1f2      	bne.n	d6b3e <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d6b58:	e713      	b.n	d6982 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d6b5a:	4649      	mov	r1, r9
   d6b5c:	4630      	mov	r0, r6
   d6b5e:	f7ff feaf 	bl	d68c0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d6b62:	2800      	cmp	r0, #0
   d6b64:	f43f af0d 	beq.w	d6982 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d6b68:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d6b6c:	4630      	mov	r0, r6
   d6b6e:	f7ff facb 	bl	d6108 <_ZN7FatFile7seekSetEm>
   d6b72:	2800      	cmp	r0, #0
   d6b74:	f43f af05 	beq.w	d6982 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d6b78:	1e7d      	subs	r5, r7, #1
   d6b7a:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6b7c:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6b7e:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d6b82:	f04f 080f 	mov.w	r8, #15
   d6b86:	e041      	b.n	d6c0c <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6b88:	2100      	movs	r1, #0
   d6b8a:	4630      	mov	r0, r6
   d6b8c:	f7ff fa9f 	bl	d60ce <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6b90:	4607      	mov	r7, r0
   d6b92:	2800      	cmp	r0, #0
   d6b94:	f43f aef5 	beq.w	d6982 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d6b98:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d6b9a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6b9e:	42ac      	cmp	r4, r5
   d6ba0:	f043 0301 	orr.w	r3, r3, #1
   d6ba4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d6ba8:	bf0c      	ite	eq
   d6baa:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d6bae:	4622      	movne	r2, r4
   d6bb0:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d6bb2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d6bb6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d6bba:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6bbe:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6bc0:	f7ff fcf2 	bl	d65a8 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6bc4:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6bc6:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d6bc8:	f887 a01a 	strb.w	sl, [r7, #26]
   d6bcc:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6bd0:	f002 021f 	and.w	r2, r2, #31
   d6bd4:	230d      	movs	r3, #13
   d6bd6:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d6bd8:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6bdc:	435a      	muls	r2, r3
   d6bde:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6be0:	9902      	ldr	r1, [sp, #8]
   d6be2:	4291      	cmp	r1, r2
   d6be4:	d915      	bls.n	d6c12 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d6be6:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d6bea:	2b04      	cmp	r3, #4
   d6bec:	fa5f fc83 	uxtb.w	ip, r3
   d6bf0:	f103 0001 	add.w	r0, r3, #1
   d6bf4:	d813      	bhi.n	d6c1e <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d6bf6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d6bfa:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d6bfe:	280d      	cmp	r0, #13
   d6c00:	f102 0201 	add.w	r2, r2, #1
   d6c04:	4603      	mov	r3, r0
   d6c06:	d1eb      	bne.n	d6be0 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6c08:	3c01      	subs	r4, #1
   d6c0a:	b2e4      	uxtb	r4, r4
   d6c0c:	2c00      	cmp	r4, #0
   d6c0e:	d1bb      	bne.n	d6b88 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d6c10:	e00e      	b.n	d6c30 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6c12:	bf14      	ite	ne
   d6c14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d6c18:	2100      	moveq	r1, #0
   d6c1a:	b289      	uxth	r1, r1
   d6c1c:	e7e5      	b.n	d6bea <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6c1e:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d6c22:	bf94      	ite	ls
   d6c24:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d6c28:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d6c2c:	8099      	strh	r1, [r3, #4]
   d6c2e:	e7e6      	b.n	d6bfe <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6c30:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d6c32:	4621      	mov	r1, r4
   d6c34:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6c36:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d6c3a:	f7ff fa48 	bl	d60ce <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d6c3e:	4607      	mov	r7, r0
   d6c40:	2800      	cmp	r0, #0
   d6c42:	f43f ae9e 	beq.w	d6982 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d6c46:	2220      	movs	r2, #32
   d6c48:	4621      	mov	r1, r4
   d6c4a:	f005 fcf6 	bl	dc63a <memset>
  memcpy(dir->name, fname->sfn, 11);
   d6c4e:	464b      	mov	r3, r9
   d6c50:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6c54:	603a      	str	r2, [r7, #0]
   d6c56:	685a      	ldr	r2, [r3, #4]
   d6c58:	607a      	str	r2, [r7, #4]
   d6c5a:	891a      	ldrh	r2, [r3, #8]
   d6c5c:	813a      	strh	r2, [r7, #8]
   d6c5e:	7a9b      	ldrb	r3, [r3, #10]
   d6c60:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d6c62:	f899 3000 	ldrb.w	r3, [r9]
   d6c66:	f003 0318 	and.w	r3, r3, #24
   d6c6a:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d6c6c:	4b18      	ldr	r3, [pc, #96]	; (d6cd0 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d6c6e:	681b      	ldr	r3, [r3, #0]
   d6c70:	b12b      	cbz	r3, d6c7e <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d6c72:	f107 010e 	add.w	r1, r7, #14
   d6c76:	f107 0010 	add.w	r0, r7, #16
   d6c7a:	4798      	blx	r3
   d6c7c:	e006      	b.n	d6c8c <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d6c7e:	2321      	movs	r3, #33	; 0x21
   d6c80:	743b      	strb	r3, [r7, #16]
   d6c82:	2328      	movs	r3, #40	; 0x28
   d6c84:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d6c86:	2308      	movs	r3, #8
   d6c88:	73bc      	strb	r4, [r7, #14]
   d6c8a:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d6c8c:	8a3b      	ldrh	r3, [r7, #16]
   d6c8e:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d6c90:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d6c92:	89fb      	ldrh	r3, [r7, #14]
   d6c94:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d6c96:	68b2      	ldr	r2, [r6, #8]
   d6c98:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d6c9c:	f043 0301 	orr.w	r3, r3, #1
   d6ca0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d6ca4:	9500      	str	r5, [sp, #0]
   d6ca6:	465b      	mov	r3, fp
   d6ca8:	4652      	mov	r2, sl
   d6caa:	4631      	mov	r1, r6
   d6cac:	9805      	ldr	r0, [sp, #20]
   d6cae:	f7ff fa74 	bl	d619a <_ZN7FatFile15openCachedEntryEPS_tih>
   d6cb2:	e009      	b.n	d6cc8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6cb4:	2701      	movs	r7, #1
   d6cb6:	e677      	b.n	d69a8 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d6cb8:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d6cbc:	f1be 0f0d 	cmp.w	lr, #13
   d6cc0:	f43f ae82 	beq.w	d69c8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6cc4:	46d4      	mov	ip, sl
   d6cc6:	e6c3      	b.n	d6a50 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d6cc8:	b009      	add	sp, #36	; 0x24
   d6cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6cce:	bf00      	nop
   d6cd0:	2003e310 	.word	0x2003e310

000d6cd4 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d6cd4:	f000 bf48 	b.w	d7b68 <HAL_Pin_Map>

000d6cd8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6cd8:	b570      	push	{r4, r5, r6, lr}
   d6cda:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6cdc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6cde:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6ce0:	b149      	cbz	r1, d6cf6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6ce2:	f005 fd14 	bl	dc70e <strlen>
   d6ce6:	682b      	ldr	r3, [r5, #0]
   d6ce8:	4602      	mov	r2, r0
   d6cea:	4621      	mov	r1, r4
   d6cec:	4628      	mov	r0, r5
   d6cee:	68db      	ldr	r3, [r3, #12]
    }
   d6cf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6cf4:	4718      	bx	r3
    }
   d6cf6:	bd70      	pop	{r4, r5, r6, pc}

000d6cf8 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d6cf8:	f000 bf36 	b.w	d7b68 <HAL_Pin_Map>

000d6cfc <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d6cfc:	b510      	push	{r4, lr}
   d6cfe:	460c      	mov	r4, r1
   d6d00:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d6d02:	b909      	cbnz	r1, d6d08 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d6d04:	2000      	movs	r0, #0
   d6d06:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d6d08:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d6d0c:	d004      	beq.n	d6d18 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d6d0e:	232f      	movs	r3, #47	; 0x2f
   d6d10:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d6d12:	2300      	movs	r3, #0
   d6d14:	7063      	strb	r3, [r4, #1]
   d6d16:	e006      	b.n	d6d26 <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d6d18:	f7ff f8c2 	bl	d5ea0 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6d1c:	2800      	cmp	r0, #0
   d6d1e:	d0f1      	beq.n	d6d04 <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d6d20:	4621      	mov	r1, r4
   d6d22:	f7ff f8cc 	bl	d5ebe <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d6d26:	2001      	movs	r0, #1

fail:
  return false;
}
   d6d28:	bd10      	pop	{r4, pc}

000d6d2a <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d6d2a:	f000 bf1d 	b.w	d7b68 <HAL_Pin_Map>

000d6d2e <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d6d2e:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d6d30:	7803      	ldrb	r3, [r0, #0]
   d6d32:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d6d34:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d6d36:	d51e      	bpl.n	d6d76 <_ZN8FatCache4syncEv+0x48>
   d6d38:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6d3a:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d6d3c:	f100 060c 	add.w	r6, r0, #12
   d6d40:	4632      	mov	r2, r6
   d6d42:	6818      	ldr	r0, [r3, #0]
   d6d44:	f000 fb9c 	bl	d7480 <_ZN9SdSpiCard10writeBlockEmPKh>
   d6d48:	4605      	mov	r5, r0
   d6d4a:	b908      	cbnz	r0, d6d50 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d6d4c:	2500      	movs	r5, #0
   d6d4e:	e013      	b.n	d6d78 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d6d50:	7823      	ldrb	r3, [r4, #0]
   d6d52:	079b      	lsls	r3, r3, #30
   d6d54:	d404      	bmi.n	d6d60 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d6d56:	7823      	ldrb	r3, [r4, #0]
   d6d58:	f023 0301 	bic.w	r3, r3, #1
   d6d5c:	7023      	strb	r3, [r4, #0]
   d6d5e:	e00b      	b.n	d6d78 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d6d60:	6863      	ldr	r3, [r4, #4]
   d6d62:	68a0      	ldr	r0, [r4, #8]
   d6d64:	6919      	ldr	r1, [r3, #16]
   d6d66:	4632      	mov	r2, r6
   d6d68:	4401      	add	r1, r0
   d6d6a:	6818      	ldr	r0, [r3, #0]
   d6d6c:	f000 fb88 	bl	d7480 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d6d70:	2800      	cmp	r0, #0
   d6d72:	d1f0      	bne.n	d6d56 <_ZN8FatCache4syncEv+0x28>
   d6d74:	e7ea      	b.n	d6d4c <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d6d76:	2501      	movs	r5, #1

fail:
  return false;
}
   d6d78:	4628      	mov	r0, r5
   d6d7a:	bd70      	pop	{r4, r5, r6, pc}

000d6d7c <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6d7c:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d6d7e:	6883      	ldr	r3, [r0, #8]
   d6d80:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6d82:	4604      	mov	r4, r0
   d6d84:	460e      	mov	r6, r1
   d6d86:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d6d88:	d014      	beq.n	d6db4 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d6d8a:	f7ff ffd0 	bl	d6d2e <_ZN8FatCache4syncEv>
   d6d8e:	b908      	cbnz	r0, d6d94 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d6d90:	2000      	movs	r0, #0
   d6d92:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d6d94:	076b      	lsls	r3, r5, #29
   d6d96:	d503      	bpl.n	d6da0 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d6d98:	2300      	movs	r3, #0
   d6d9a:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d6d9c:	60a6      	str	r6, [r4, #8]
   d6d9e:	e009      	b.n	d6db4 <_ZN8FatCache4readEmh+0x38>
   d6da0:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6da2:	f104 020c 	add.w	r2, r4, #12
   d6da6:	4631      	mov	r1, r6
   d6da8:	6818      	ldr	r0, [r3, #0]
   d6daa:	f000 fadf 	bl	d736c <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d6dae:	2800      	cmp	r0, #0
   d6db0:	d1f2      	bne.n	d6d98 <_ZN8FatCache4readEmh+0x1c>
   d6db2:	e7ed      	b.n	d6d90 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d6db4:	7823      	ldrb	r3, [r4, #0]
   d6db6:	4620      	mov	r0, r4
   d6db8:	f005 0503 	and.w	r5, r5, #3
   d6dbc:	431d      	orrs	r5, r3
   d6dbe:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d6dc2:	bd70      	pop	{r4, r5, r6, pc}

000d6dc4 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d6dc4:	7983      	ldrb	r3, [r0, #6]
   d6dc6:	6940      	ldr	r0, [r0, #20]
   d6dc8:	3902      	subs	r1, #2
   d6dca:	4099      	lsls	r1, r3
}
   d6dcc:	4408      	add	r0, r1
   d6dce:	4770      	bx	lr

000d6dd0 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6dd0:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d6dd2:	b570      	push	{r4, r5, r6, lr}
   d6dd4:	4605      	mov	r5, r0
   d6dd6:	460c      	mov	r4, r1
   d6dd8:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6dda:	d802      	bhi.n	d6de2 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d6ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6de0:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6de2:	69c3      	ldr	r3, [r0, #28]
   d6de4:	4299      	cmp	r1, r3
   d6de6:	d8f9      	bhi.n	d6ddc <_ZN9FatVolume6fatGetEmPm+0xc>
   d6de8:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d6dea:	2b20      	cmp	r3, #32
   d6dec:	d110      	bne.n	d6e10 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d6dee:	6981      	ldr	r1, [r0, #24]
   d6df0:	2202      	movs	r2, #2
   d6df2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6df6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6dfa:	f7ff ffbf 	bl	d6d7c <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6dfe:	2800      	cmp	r0, #0
   d6e00:	d0ec      	beq.n	d6ddc <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d6e02:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6e06:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d6e0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d6e0e:	e00f      	b.n	d6e30 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d6e10:	2b10      	cmp	r3, #16
   d6e12:	d1e3      	bne.n	d6ddc <_ZN9FatVolume6fatGetEmPm+0xc>
   d6e14:	6983      	ldr	r3, [r0, #24]
   d6e16:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6e1a:	2202      	movs	r2, #2
   d6e1c:	4419      	add	r1, r3
   d6e1e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6e22:	f7ff ffab 	bl	d6d7c <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6e26:	2800      	cmp	r0, #0
   d6e28:	d0d8      	beq.n	d6ddc <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d6e2a:	b2e4      	uxtb	r4, r4
   d6e2c:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d6e30:	69ea      	ldr	r2, [r5, #28]
   d6e32:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d6e34:	bf9a      	itte	ls
   d6e36:	6033      	strls	r3, [r6, #0]
  return 1;
   d6e38:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d6e3a:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d6e3c:	bd70      	pop	{r4, r5, r6, pc}

000d6e3e <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6e3e:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d6e40:	b538      	push	{r3, r4, r5, lr}
   d6e42:	460c      	mov	r4, r1
   d6e44:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6e46:	d801      	bhi.n	d6e4c <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d6e48:	2000      	movs	r0, #0
   d6e4a:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6e4c:	69c3      	ldr	r3, [r0, #28]
   d6e4e:	4299      	cmp	r1, r3
   d6e50:	d8fa      	bhi.n	d6e48 <_ZN9FatVolume6fatPutEmm+0xa>
   d6e52:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d6e54:	2b20      	cmp	r3, #32
   d6e56:	d10e      	bne.n	d6e76 <_ZN9FatVolume6fatPutEmm+0x38>
   d6e58:	6981      	ldr	r1, [r0, #24]
   d6e5a:	2203      	movs	r2, #3
   d6e5c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6e60:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6e64:	f7ff ff8a 	bl	d6d7c <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6e68:	2800      	cmp	r0, #0
   d6e6a:	d0ed      	beq.n	d6e48 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d6e6c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6e70:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d6e74:	e00f      	b.n	d6e96 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d6e76:	2b10      	cmp	r3, #16
   d6e78:	d1e6      	bne.n	d6e48 <_ZN9FatVolume6fatPutEmm+0xa>
   d6e7a:	6983      	ldr	r3, [r0, #24]
   d6e7c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6e80:	2203      	movs	r2, #3
   d6e82:	4419      	add	r1, r3
   d6e84:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6e88:	f7ff ff78 	bl	d6d7c <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6e8c:	2800      	cmp	r0, #0
   d6e8e:	d0db      	beq.n	d6e48 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d6e90:	b2e4      	uxtb	r4, r4
   d6e92:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d6e96:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d6e98:	bd38      	pop	{r3, r4, r5, pc}

000d6e9a <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6e9a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6e9e:	68c4      	ldr	r4, [r0, #12]
   d6ea0:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6ea2:	4605      	mov	r5, r0
   d6ea4:	460e      	mov	r6, r1
   d6ea6:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6ea8:	d207      	bcs.n	d6eba <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d6eaa:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d6eac:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d6eae:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d6eb0:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d6eb2:	429c      	cmp	r4, r3
   d6eb4:	d903      	bls.n	d6ebe <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d6eb6:	b9cf      	cbnz	r7, d6eec <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d6eb8:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d6eba:	2701      	movs	r7, #1
   d6ebc:	e7f7      	b.n	d6eae <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d6ebe:	42a6      	cmp	r6, r4
   d6ec0:	d014      	beq.n	d6eec <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d6ec2:	aa01      	add	r2, sp, #4
   d6ec4:	4621      	mov	r1, r4
   d6ec6:	4628      	mov	r0, r5
   d6ec8:	f7ff ff82 	bl	d6dd0 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d6ecc:	2800      	cmp	r0, #0
   d6ece:	db0d      	blt.n	d6eec <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d6ed0:	d0ed      	beq.n	d6eae <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d6ed2:	9b01      	ldr	r3, [sp, #4]
   d6ed4:	2b00      	cmp	r3, #0
   d6ed6:	d1ea      	bne.n	d6eae <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d6ed8:	b107      	cbz	r7, d6edc <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d6eda:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d6edc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d6ee0:	4621      	mov	r1, r4
   d6ee2:	4628      	mov	r0, r5
   d6ee4:	f7ff ffab 	bl	d6e3e <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d6ee8:	4607      	mov	r7, r0
   d6eea:	b908      	cbnz	r0, d6ef0 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d6eec:	2700      	movs	r7, #0
   d6eee:	e00b      	b.n	d6f08 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d6ef0:	b916      	cbnz	r6, d6ef8 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d6ef2:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d6ef6:	e007      	b.n	d6f08 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d6ef8:	4622      	mov	r2, r4
   d6efa:	4631      	mov	r1, r6
   d6efc:	4628      	mov	r0, r5
   d6efe:	f7ff ff9e 	bl	d6e3e <_ZN9FatVolume6fatPutEmm>
   d6f02:	2800      	cmp	r0, #0
   d6f04:	d1f5      	bne.n	d6ef2 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d6f06:	e7f1      	b.n	d6eec <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d6f08:	4638      	mov	r0, r7
   d6f0a:	b002      	add	sp, #8
   d6f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6f10 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d6f10:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6f12:	4605      	mov	r5, r0
   d6f14:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d6f16:	aa01      	add	r2, sp, #4
   d6f18:	4621      	mov	r1, r4
   d6f1a:	4628      	mov	r0, r5
   d6f1c:	f7ff ff58 	bl	d6dd0 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d6f20:	1e06      	subs	r6, r0, #0
   d6f22:	da01      	bge.n	d6f28 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d6f24:	2000      	movs	r0, #0
   d6f26:	e00f      	b.n	d6f48 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d6f28:	2200      	movs	r2, #0
   d6f2a:	4621      	mov	r1, r4
   d6f2c:	4628      	mov	r0, r5
   d6f2e:	f7ff ff86 	bl	d6e3e <_ZN9FatVolume6fatPutEmm>
   d6f32:	2800      	cmp	r0, #0
   d6f34:	d0f6      	beq.n	d6f24 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d6f36:	68eb      	ldr	r3, [r5, #12]
   d6f38:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d6f3a:	bf9c      	itt	ls
   d6f3c:	f104 34ff 	addls.w	r4, r4, #4294967295	; 0xffffffff
   d6f40:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d6f42:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d6f44:	2e00      	cmp	r6, #0
   d6f46:	d1e6      	bne.n	d6f16 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d6f48:	b002      	add	sp, #8
   d6f4a:	bd70      	pop	{r4, r5, r6, pc}

000d6f4c <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d6f4c:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d6f4e:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d6f50:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6f52:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d6f54:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6f5a:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d6f5c:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6f5e:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6f60:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6f64:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6f66:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6f6a:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d6f6e:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d6f72:	b1a1      	cbz	r1, d6f9e <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d6f74:	2904      	cmp	r1, #4
   d6f76:	d85d      	bhi.n	d7034 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6f78:	4611      	mov	r1, r2
   d6f7a:	3024      	adds	r0, #36	; 0x24
   d6f7c:	f7ff fefe 	bl	d6d7c <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6f80:	2800      	cmp	r0, #0
   d6f82:	d057      	beq.n	d7034 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d6f84:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d6f88:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d6f8c:	065b      	lsls	r3, r3, #25
   d6f8e:	d151      	bne.n	d7034 <_ZN9FatVolume4initEh+0xe8>
   d6f90:	351b      	adds	r5, #27
   d6f92:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d6f96:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d6f9a:	2d00      	cmp	r5, #0
   d6f9c:	d04a      	beq.n	d7034 <_ZN9FatVolume4initEh+0xe8>
   d6f9e:	2200      	movs	r2, #0
   d6fa0:	4629      	mov	r1, r5
   d6fa2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6fa6:	f7ff fee9 	bl	d6d7c <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d6faa:	2800      	cmp	r0, #0
   d6fac:	d042      	beq.n	d7034 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d6fae:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d6fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d6fb6:	d13d      	bne.n	d7034 <_ZN9FatVolume4initEh+0xe8>
   d6fb8:	7c03      	ldrb	r3, [r0, #16]
   d6fba:	2b02      	cmp	r3, #2
   d6fbc:	d13a      	bne.n	d7034 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d6fbe:	89c3      	ldrh	r3, [r0, #14]
   d6fc0:	2b00      	cmp	r3, #0
   d6fc2:	d037      	beq.n	d7034 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d6fc4:	7b41      	ldrb	r1, [r0, #13]
   d6fc6:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d6fc8:	1e4b      	subs	r3, r1, #1
   d6fca:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d6fcc:	2300      	movs	r3, #0
   d6fce:	71a3      	strb	r3, [r4, #6]
   d6fd0:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6fd2:	2301      	movs	r3, #1
   d6fd4:	428b      	cmp	r3, r1
   d6fd6:	d007      	beq.n	d6fe8 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d6fd8:	3e01      	subs	r6, #1
   d6fda:	d02b      	beq.n	d7034 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6fdc:	79a2      	ldrb	r2, [r4, #6]
   d6fde:	005b      	lsls	r3, r3, #1
   d6fe0:	3201      	adds	r2, #1
   d6fe2:	b2db      	uxtb	r3, r3
   d6fe4:	71a2      	strb	r2, [r4, #6]
   d6fe6:	e7f5      	b.n	d6fd4 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d6fe8:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d6fea:	b902      	cbnz	r2, d6fee <_ZN9FatVolume4initEh+0xa2>
   d6fec:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d6fee:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d6ff0:	89c6      	ldrh	r6, [r0, #14]
   d6ff2:	442e      	add	r6, r5
   d6ff4:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d6ff6:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d6ffa:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d6ffc:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d7000:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d7002:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d7006:	0152      	lsls	r2, r2, #5
   d7008:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d700c:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d7010:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d7012:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d7016:	b903      	cbnz	r3, d701a <_ZN9FatVolume4initEh+0xce>
   d7018:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d701a:	1aad      	subs	r5, r5, r2
   d701c:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d701e:	79a5      	ldrb	r5, [r4, #6]
   d7020:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d7024:	1c6b      	adds	r3, r5, #1
   d7026:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d7028:	f640 73f4 	movw	r3, #4084	; 0xff4
   d702c:	429d      	cmp	r5, r3
   d702e:	d803      	bhi.n	d7038 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d7030:	230c      	movs	r3, #12
   d7032:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d7034:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d7036:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d7038:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d703c:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d703e:	bf85      	ittet	hi
   d7040:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d7042:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d7044:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d7046:	2320      	movhi	r3, #32
   d7048:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d704a:	2001      	movs	r0, #1

fail:
  return false;
}
   d704c:	bd70      	pop	{r4, r5, r6, pc}

000d704e <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d704e:	f000 bd8b 	b.w	d7b68 <HAL_Pin_Map>

000d7052 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d7052:	f000 bd89 	b.w	d7b68 <HAL_Pin_Map>

000d7056 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d7056:	f000 bd87 	b.w	d7b68 <HAL_Pin_Map>

000d705a <_GLOBAL__sub_I__ZN7istream3getEv>:
   d705a:	f000 bd85 	b.w	d7b68 <HAL_Pin_Map>

000d705e <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d705e:	f000 bd83 	b.w	d7b68 <HAL_Pin_Map>
	...

000d7064 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7064:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7066:	4c0e      	ldr	r4, [pc, #56]	; (d70a0 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7068:	460e      	mov	r6, r1
   d706a:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d706c:	f000 fd5c 	bl	d7b28 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7070:	6823      	ldr	r3, [r4, #0]
   d7072:	1ac0      	subs	r0, r0, r3
   d7074:	4b0b      	ldr	r3, [pc, #44]	; (d70a4 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d7076:	4298      	cmp	r0, r3
   d7078:	d908      	bls.n	d708c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d707a:	f000 fd5d 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d707e:	4b0a      	ldr	r3, [pc, #40]	; (d70a8 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d7080:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d7082:	f000 ff5f 	bl	d7f44 <spark_process>
   d7086:	f000 fd4f 	bl	d7b28 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d708a:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d708c:	f000 fd54 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d7090:	b280      	uxth	r0, r0
   d7092:	1b80      	subs	r0, r0, r6
}
   d7094:	42a8      	cmp	r0, r5
   d7096:	bfd4      	ite	le
   d7098:	2000      	movle	r0, #0
   d709a:	2001      	movgt	r0, #1
   d709c:	bd70      	pop	{r4, r5, r6, pc}
   d709e:	bf00      	nop
   d70a0:	2003e314 	.word	0x2003e314
   d70a4:	000186a0 	.word	0x000186a0
   d70a8:	2003e708 	.word	0x2003e708

000d70ac <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d70ac:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d70ae:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d70b0:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d70b2:	b94d      	cbnz	r5, d70c8 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d70b4:	6840      	ldr	r0, [r0, #4]
   d70b6:	f000 fa7d 	bl	d75b4 <_ZN14SdSpiAltDriver8activateEv>
   d70ba:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d70bc:	4629      	mov	r1, r5
   d70be:	7d18      	ldrb	r0, [r3, #20]
   d70c0:	f004 fabd 	bl	db63e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d70c4:	2301      	movs	r3, #1
   d70c6:	7223      	strb	r3, [r4, #8]
   d70c8:	bd38      	pop	{r3, r4, r5, pc}

000d70ca <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d70ca:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d70cc:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d70ce:	4604      	mov	r4, r0
  if (m_spiActive) {
   d70d0:	b16b      	cbz	r3, d70ee <_ZN9SdSpiCard7spiStopEv+0x24>
   d70d2:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d70d4:	2101      	movs	r1, #1
   d70d6:	7d18      	ldrb	r0, [r3, #20]
   d70d8:	f004 fab1 	bl	db63e <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d70dc:	21ff      	movs	r1, #255	; 0xff
   d70de:	6860      	ldr	r0, [r4, #4]
   d70e0:	f000 fa9a 	bl	d7618 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d70e4:	6860      	ldr	r0, [r4, #4]
   d70e6:	f000 fa79 	bl	d75dc <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d70ea:	2300      	movs	r3, #0
   d70ec:	7223      	strb	r3, [r4, #8]
   d70ee:	bd10      	pop	{r4, pc}

000d70f0 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d70f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d70f2:	4604      	mov	r4, r0
   d70f4:	460d      	mov	r5, r1
   d70f6:	4616      	mov	r6, r2
   d70f8:	f000 fd1e 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d70fc:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d70fe:	6860      	ldr	r0, [r4, #4]
   d7100:	f000 fa6f 	bl	d75e2 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d7104:	28ff      	cmp	r0, #255	; 0xff
   d7106:	7260      	strb	r0, [r4, #9]
   d7108:	d109      	bne.n	d711e <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d710a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d710e:	4639      	mov	r1, r7
   d7110:	4620      	mov	r0, r4
   d7112:	f7ff ffa7 	bl	d7064 <_ZN9SdSpiCard10isTimedOutEtt>
   d7116:	2800      	cmp	r0, #0
   d7118:	d0f1      	beq.n	d70fe <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d711a:	2355      	movs	r3, #85	; 0x55
   d711c:	e00b      	b.n	d7136 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d711e:	28fe      	cmp	r0, #254	; 0xfe
   d7120:	d001      	beq.n	d7126 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d7122:	2350      	movs	r3, #80	; 0x50
   d7124:	e007      	b.n	d7136 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d7126:	4632      	mov	r2, r6
   d7128:	4629      	mov	r1, r5
   d712a:	6860      	ldr	r0, [r4, #4]
   d712c:	f000 fa5e 	bl	d75ec <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d7130:	7260      	strb	r0, [r4, #9]
   d7132:	b130      	cbz	r0, d7142 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7134:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d7136:	4620      	mov	r0, r4
   d7138:	7023      	strb	r3, [r4, #0]
   d713a:	f7ff ffc6 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d713e:	2000      	movs	r0, #0
}
   d7140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7142:	6860      	ldr	r0, [r4, #4]
   d7144:	f000 fa4d 	bl	d75e2 <_ZN14SdSpiAltDriver7receiveEv>
   d7148:	6860      	ldr	r0, [r4, #4]
   d714a:	f000 fa4a 	bl	d75e2 <_ZN14SdSpiAltDriver7receiveEv>
   d714e:	2001      	movs	r0, #1
   d7150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7152 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d7152:	b570      	push	{r4, r5, r6, lr}
   d7154:	4604      	mov	r4, r0
   d7156:	460e      	mov	r6, r1
   d7158:	f000 fcee 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
   d715c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d715e:	4632      	mov	r2, r6
   d7160:	4629      	mov	r1, r5
   d7162:	4620      	mov	r0, r4
   d7164:	f7ff ff7e 	bl	d7064 <_ZN9SdSpiCard10isTimedOutEtt>
   d7168:	b930      	cbnz	r0, d7178 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d716a:	6860      	ldr	r0, [r4, #4]
   d716c:	f000 fa39 	bl	d75e2 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d7170:	28ff      	cmp	r0, #255	; 0xff
   d7172:	d1f4      	bne.n	d715e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d7174:	2001      	movs	r0, #1
   d7176:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d7178:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d717a:	bd70      	pop	{r4, r5, r6, pc}

000d717c <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d717c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d717e:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7180:	9201      	str	r2, [sp, #4]
   d7182:	4604      	mov	r4, r0
   d7184:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d7186:	b90b      	cbnz	r3, d718c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d7188:	f7ff ff90 	bl	d70ac <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d718c:	b125      	cbz	r5, d7198 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d718e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d7192:	4620      	mov	r0, r4
   d7194:	f7ff ffdd 	bl	d7152 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7198:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d719c:	6860      	ldr	r0, [r4, #4]
   d719e:	f000 fa3b 	bl	d7618 <_ZN14SdSpiAltDriver4sendEh>
   d71a2:	f10d 0607 	add.w	r6, sp, #7
   d71a6:	f10d 0703 	add.w	r7, sp, #3
   d71aa:	f816 1901 	ldrb.w	r1, [r6], #-1
   d71ae:	6860      	ldr	r0, [r4, #4]
   d71b0:	f000 fa32 	bl	d7618 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d71b4:	42be      	cmp	r6, r7
   d71b6:	d1f8      	bne.n	d71aa <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d71b8:	2d00      	cmp	r5, #0
   d71ba:	bf0c      	ite	eq
   d71bc:	2195      	moveq	r1, #149	; 0x95
   d71be:	2187      	movne	r1, #135	; 0x87
   d71c0:	6860      	ldr	r0, [r4, #4]
   d71c2:	f000 fa29 	bl	d7618 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d71c6:	6860      	ldr	r0, [r4, #4]
   d71c8:	f000 fa0b 	bl	d75e2 <_ZN14SdSpiAltDriver7receiveEv>
   d71cc:	250b      	movs	r5, #11
   d71ce:	6860      	ldr	r0, [r4, #4]
   d71d0:	f000 fa07 	bl	d75e2 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d71d4:	0603      	lsls	r3, r0, #24
   d71d6:	7260      	strb	r0, [r4, #9]
   d71d8:	d503      	bpl.n	d71e2 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d71da:	3d01      	subs	r5, #1
   d71dc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d71e0:	d1f5      	bne.n	d71ce <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d71e2:	b003      	add	sp, #12
   d71e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d71e6 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d71e6:	b570      	push	{r4, r5, r6, lr}
   d71e8:	4604      	mov	r4, r0
   d71ea:	460d      	mov	r5, r1
   d71ec:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d71ee:	2137      	movs	r1, #55	; 0x37
   d71f0:	2200      	movs	r2, #0
   d71f2:	f7ff ffc3 	bl	d717c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d71f6:	4632      	mov	r2, r6
   d71f8:	4629      	mov	r1, r5
   d71fa:	4620      	mov	r0, r4
  }
   d71fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d7200:	f7ff bfbc 	b.w	d717c <_ZN9SdSpiCard11cardCommandEhm>

000d7204 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d7208:	2500      	movs	r5, #0
   d720a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d720c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d720e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d7210:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7212:	4604      	mov	r4, r0
   d7214:	4690      	mov	r8, r2
   d7216:	461e      	mov	r6, r3
   d7218:	f000 fc8e 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d721c:	4641      	mov	r1, r8
   d721e:	4607      	mov	r7, r0
   d7220:	6860      	ldr	r0, [r4, #4]
   d7222:	f000 f9cb 	bl	d75bc <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d7226:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d7228:	4a4f      	ldr	r2, [pc, #316]	; (d7368 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d722a:	721d      	strb	r5, [r3, #8]
   d722c:	f04f 0801 	mov.w	r8, #1
   d7230:	60da      	str	r2, [r3, #12]
   d7232:	745d      	strb	r5, [r3, #17]
   d7234:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d7238:	4620      	mov	r0, r4
   d723a:	f7ff ff37 	bl	d70ac <_ZN9SdSpiCard8spiStartEv>
   d723e:	6863      	ldr	r3, [r4, #4]
   d7240:	4641      	mov	r1, r8
   d7242:	7d18      	ldrb	r0, [r3, #20]
   d7244:	f004 f9fb 	bl	db63e <digitalWrite>
   d7248:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d724a:	21ff      	movs	r1, #255	; 0xff
   d724c:	6860      	ldr	r0, [r4, #4]
   d724e:	3d01      	subs	r5, #1
   d7250:	f000 f9e2 	bl	d7618 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d7254:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7258:	d1f7      	bne.n	d724a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d725a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d725c:	4629      	mov	r1, r5
   d725e:	7d18      	ldrb	r0, [r3, #20]
   d7260:	f004 f9ed 	bl	db63e <digitalWrite>
   d7264:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d7266:	2200      	movs	r2, #0
   d7268:	4611      	mov	r1, r2
   d726a:	4620      	mov	r0, r4
   d726c:	f7ff ff86 	bl	d717c <_ZN9SdSpiCard11cardCommandEhm>
   d7270:	2801      	cmp	r0, #1
   d7272:	4680      	mov	r8, r0
   d7274:	d012      	beq.n	d729c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d7276:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d7278:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d727c:	d101      	bne.n	d7282 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d727e:	2320      	movs	r3, #32
   d7280:	e057      	b.n	d7332 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7282:	21fd      	movs	r1, #253	; 0xfd
   d7284:	6860      	ldr	r0, [r4, #4]
   d7286:	f000 f9c7 	bl	d7618 <_ZN14SdSpiAltDriver4sendEh>
   d728a:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d728e:	6860      	ldr	r0, [r4, #4]
   d7290:	f000 f9a7 	bl	d75e2 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d7294:	f1b8 0801 	subs.w	r8, r8, #1
   d7298:	d1f9      	bne.n	d728e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d729a:	e7e4      	b.n	d7266 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d729c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d72a0:	2108      	movs	r1, #8
   d72a2:	4620      	mov	r0, r4
   d72a4:	f7ff ff6a 	bl	d717c <_ZN9SdSpiCard11cardCommandEhm>
   d72a8:	2805      	cmp	r0, #5
   d72aa:	d102      	bne.n	d72b2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d72ac:	f884 800a 	strb.w	r8, [r4, #10]
   d72b0:	e00f      	b.n	d72d2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d72b2:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d72b4:	6860      	ldr	r0, [r4, #4]
   d72b6:	f000 f994 	bl	d75e2 <_ZN14SdSpiAltDriver7receiveEv>
   d72ba:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d72bc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d72c0:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d72c2:	d1f7      	bne.n	d72b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d72c4:	28aa      	cmp	r0, #170	; 0xaa
   d72c6:	d102      	bne.n	d72ce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d72c8:	2302      	movs	r3, #2
   d72ca:	72a3      	strb	r3, [r4, #10]
   d72cc:	e001      	b.n	d72d2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d72ce:	2325      	movs	r3, #37	; 0x25
   d72d0:	e02f      	b.n	d7332 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d72d2:	7aa3      	ldrb	r3, [r4, #10]
   d72d4:	2b02      	cmp	r3, #2
   d72d6:	bf0c      	ite	eq
   d72d8:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d72dc:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d72de:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d72e0:	462a      	mov	r2, r5
   d72e2:	2129      	movs	r1, #41	; 0x29
   d72e4:	4620      	mov	r0, r4
   d72e6:	f7ff ff7e 	bl	d71e6 <_ZN9SdSpiCard8cardAcmdEhm>
   d72ea:	4602      	mov	r2, r0
   d72ec:	b148      	cbz	r0, d7302 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d72ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d72f2:	4639      	mov	r1, r7
   d72f4:	4620      	mov	r0, r4
   d72f6:	f7ff feb5 	bl	d7064 <_ZN9SdSpiCard10isTimedOutEtt>
   d72fa:	2800      	cmp	r0, #0
   d72fc:	d0f0      	beq.n	d72e0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d72fe:	2343      	movs	r3, #67	; 0x43
   d7300:	e017      	b.n	d7332 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d7302:	7aa3      	ldrb	r3, [r4, #10]
   d7304:	2b02      	cmp	r3, #2
   d7306:	d00e      	beq.n	d7326 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d7308:	4620      	mov	r0, r4
   d730a:	f7ff fede 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d730e:	6863      	ldr	r3, [r4, #4]
   d7310:	68b0      	ldr	r0, [r6, #8]
   d7312:	7934      	ldrb	r4, [r6, #4]
   d7314:	7b31      	ldrb	r1, [r6, #12]
   d7316:	7b72      	ldrb	r2, [r6, #13]
   d7318:	745a      	strb	r2, [r3, #17]
   d731a:	60d8      	str	r0, [r3, #12]
   d731c:	721c      	strb	r4, [r3, #8]
   d731e:	7419      	strb	r1, [r3, #16]
  return true;
   d7320:	2001      	movs	r0, #1
   d7322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d7326:	213a      	movs	r1, #58	; 0x3a
   d7328:	4620      	mov	r0, r4
   d732a:	f7ff ff27 	bl	d717c <_ZN9SdSpiCard11cardCommandEhm>
   d732e:	b138      	cbz	r0, d7340 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d7330:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d7332:	4620      	mov	r0, r4
   d7334:	7023      	strb	r3, [r4, #0]
   d7336:	f7ff fec8 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d733a:	2000      	movs	r0, #0
}
   d733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7340:	6860      	ldr	r0, [r4, #4]
   d7342:	f000 f94e 	bl	d75e2 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d7346:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d734a:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d734c:	bf04      	itt	eq
   d734e:	2303      	moveq	r3, #3
   d7350:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7352:	6860      	ldr	r0, [r4, #4]
   d7354:	f000 f945 	bl	d75e2 <_ZN14SdSpiAltDriver7receiveEv>
   d7358:	6860      	ldr	r0, [r4, #4]
   d735a:	f000 f942 	bl	d75e2 <_ZN14SdSpiAltDriver7receiveEv>
   d735e:	6860      	ldr	r0, [r4, #4]
   d7360:	f000 f93f 	bl	d75e2 <_ZN14SdSpiAltDriver7receiveEv>
   d7364:	e7d0      	b.n	d7308 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d7366:	bf00      	nop
   d7368:	0003d090 	.word	0x0003d090

000d736c <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d736c:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d736e:	7a83      	ldrb	r3, [r0, #10]
   d7370:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7372:	bf18      	it	ne
   d7374:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7376:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7378:	460a      	mov	r2, r1
   d737a:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d737c:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d737e:	f7ff fefd 	bl	d717c <_ZN9SdSpiCard11cardCommandEhm>
   d7382:	b110      	cbz	r0, d738a <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7384:	2330      	movs	r3, #48	; 0x30
   d7386:	7023      	strb	r3, [r4, #0]
   d7388:	e00b      	b.n	d73a2 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d738a:	4629      	mov	r1, r5
   d738c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7390:	4620      	mov	r0, r4
   d7392:	f7ff fead 	bl	d70f0 <_ZN9SdSpiCard8readDataEPhj>
   d7396:	4605      	mov	r5, r0
   d7398:	b118      	cbz	r0, d73a2 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d739a:	4620      	mov	r0, r4
   d739c:	f7ff fe95 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  return true;
   d73a0:	e003      	b.n	d73aa <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d73a2:	4620      	mov	r0, r4
   d73a4:	f7ff fe91 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d73a8:	2500      	movs	r5, #0
}
   d73aa:	4628      	mov	r0, r5
   d73ac:	bd38      	pop	{r3, r4, r5, pc}

000d73ae <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d73ae:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d73b0:	7a83      	ldrb	r3, [r0, #10]
   d73b2:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d73b4:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d73b6:	bf18      	it	ne
   d73b8:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d73ba:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d73bc:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d73be:	f7ff fedd 	bl	d717c <_ZN9SdSpiCard11cardCommandEhm>
   d73c2:	b130      	cbz	r0, d73d2 <_ZN9SdSpiCard9readStartEm+0x24>
   d73c4:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d73c6:	4620      	mov	r0, r4
   d73c8:	7023      	strb	r3, [r4, #0]
   d73ca:	f7ff fe7e 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d73ce:	2000      	movs	r0, #0
   d73d0:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d73d2:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d73d4:	bd10      	pop	{r4, pc}

000d73d6 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d73d6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d73d8:	2200      	movs	r2, #0
   d73da:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d73dc:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d73de:	f7ff fecd 	bl	d717c <_ZN9SdSpiCard11cardCommandEhm>
   d73e2:	b130      	cbz	r0, d73f2 <_ZN9SdSpiCard8readStopEv+0x1c>
   d73e4:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d73e6:	4620      	mov	r0, r4
   d73e8:	7023      	strb	r3, [r4, #0]
   d73ea:	f7ff fe6e 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d73ee:	2000      	movs	r0, #0
   d73f0:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d73f2:	4620      	mov	r0, r4
   d73f4:	f7ff fe69 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  return true;
   d73f8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d73fa:	bd10      	pop	{r4, pc}

000d73fc <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d73fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d73fe:	4605      	mov	r5, r0
   d7400:	4616      	mov	r6, r2
   d7402:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d7404:	f7ff ffd3 	bl	d73ae <_ZN9SdSpiCard9readStartEm>
   d7408:	b198      	cbz	r0, d7432 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d740a:	2400      	movs	r4, #0
   d740c:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d740e:	429f      	cmp	r7, r3
   d7410:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d7414:	d908      	bls.n	d7428 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d7416:	f44f 7200 	mov.w	r2, #512	; 0x200
   d741a:	4628      	mov	r0, r5
   d741c:	f7ff fe68 	bl	d70f0 <_ZN9SdSpiCard8readDataEPhj>
   d7420:	3401      	adds	r4, #1
   d7422:	2800      	cmp	r0, #0
   d7424:	d1f2      	bne.n	d740c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d7426:	e004      	b.n	d7432 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d7428:	4628      	mov	r0, r5
}
   d742a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d742e:	f7ff bfd2 	b.w	d73d6 <_ZN9SdSpiCard8readStopEv>
}
   d7432:	2000      	movs	r0, #0
   d7434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7436 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d7436:	b538      	push	{r3, r4, r5, lr}
   d7438:	4604      	mov	r4, r0
   d743a:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d743c:	6840      	ldr	r0, [r0, #4]
   d743e:	f000 f8eb 	bl	d7618 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d7442:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7446:	4629      	mov	r1, r5
   d7448:	6860      	ldr	r0, [r4, #4]
   d744a:	f000 f8e9 	bl	d7620 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d744e:	21ff      	movs	r1, #255	; 0xff
   d7450:	6860      	ldr	r0, [r4, #4]
   d7452:	f000 f8e1 	bl	d7618 <_ZN14SdSpiAltDriver4sendEh>
   d7456:	21ff      	movs	r1, #255	; 0xff
   d7458:	6860      	ldr	r0, [r4, #4]
   d745a:	f000 f8dd 	bl	d7618 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d745e:	6860      	ldr	r0, [r4, #4]
   d7460:	f000 f8bf 	bl	d75e2 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d7464:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d7466:	f000 001f 	and.w	r0, r0, #31
   d746a:	2805      	cmp	r0, #5
   d746c:	d006      	beq.n	d747c <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d746e:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7470:	4620      	mov	r0, r4
   d7472:	7023      	strb	r3, [r4, #0]
   d7474:	f7ff fe29 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7478:	2000      	movs	r0, #0
   d747a:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d747c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d747e:	bd38      	pop	{r3, r4, r5, pc}

000d7480 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7480:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7482:	7a83      	ldrb	r3, [r0, #10]
   d7484:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7486:	bf18      	it	ne
   d7488:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d748a:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d748c:	460a      	mov	r2, r1
   d748e:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7490:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7492:	f7ff fe73 	bl	d717c <_ZN9SdSpiCard11cardCommandEhm>
   d7496:	4606      	mov	r6, r0
   d7498:	b108      	cbz	r0, d749e <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d749a:	2332      	movs	r3, #50	; 0x32
   d749c:	e01d      	b.n	d74da <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d749e:	462a      	mov	r2, r5
   d74a0:	21fe      	movs	r1, #254	; 0xfe
   d74a2:	4620      	mov	r0, r4
   d74a4:	f7ff ffc7 	bl	d7436 <_ZN9SdSpiCard9writeDataEhPKh>
   d74a8:	b1c0      	cbz	r0, d74dc <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d74aa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d74ae:	4620      	mov	r0, r4
   d74b0:	f7ff fe4f 	bl	d7152 <_ZN9SdSpiCard11waitNotBusyEt>
   d74b4:	4605      	mov	r5, r0
   d74b6:	b908      	cbnz	r0, d74bc <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d74b8:	235a      	movs	r3, #90	; 0x5a
   d74ba:	e00e      	b.n	d74da <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d74bc:	4632      	mov	r2, r6
   d74be:	210d      	movs	r1, #13
   d74c0:	4620      	mov	r0, r4
   d74c2:	f7ff fe5b 	bl	d717c <_ZN9SdSpiCard11cardCommandEhm>
   d74c6:	b938      	cbnz	r0, d74d8 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d74c8:	6860      	ldr	r0, [r4, #4]
   d74ca:	f000 f88a 	bl	d75e2 <_ZN14SdSpiAltDriver7receiveEv>
   d74ce:	b918      	cbnz	r0, d74d8 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d74d0:	4620      	mov	r0, r4
   d74d2:	f7ff fdfa 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  return true;
   d74d6:	e005      	b.n	d74e4 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d74d8:	2329      	movs	r3, #41	; 0x29
   d74da:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d74dc:	4620      	mov	r0, r4
   d74de:	f7ff fdf4 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d74e2:	2500      	movs	r5, #0
}
   d74e4:	4628      	mov	r0, r5
   d74e6:	bd70      	pop	{r4, r5, r6, pc}

000d74e8 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d74e8:	b538      	push	{r3, r4, r5, lr}
   d74ea:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d74ec:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d74f0:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d74f2:	f7ff fe2e 	bl	d7152 <_ZN9SdSpiCard11waitNotBusyEt>
   d74f6:	b910      	cbnz	r0, d74fe <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d74f8:	235b      	movs	r3, #91	; 0x5b
   d74fa:	7023      	strb	r3, [r4, #0]
   d74fc:	e005      	b.n	d750a <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d74fe:	462a      	mov	r2, r5
   d7500:	21fc      	movs	r1, #252	; 0xfc
   d7502:	4620      	mov	r0, r4
   d7504:	f7ff ff97 	bl	d7436 <_ZN9SdSpiCard9writeDataEhPKh>
   d7508:	b918      	cbnz	r0, d7512 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d750a:	4620      	mov	r0, r4
   d750c:	f7ff fddd 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7510:	2000      	movs	r0, #0
}
   d7512:	bd38      	pop	{r3, r4, r5, pc}

000d7514 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7514:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7516:	7a83      	ldrb	r3, [r0, #10]
   d7518:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d751a:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d751c:	bf18      	it	ne
   d751e:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7520:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7522:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7524:	f7ff fe2a 	bl	d717c <_ZN9SdSpiCard11cardCommandEhm>
   d7528:	b130      	cbz	r0, d7538 <_ZN9SdSpiCard10writeStartEm+0x24>
   d752a:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d752c:	4620      	mov	r0, r4
   d752e:	7023      	strb	r3, [r4, #0]
   d7530:	f7ff fdcb 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7534:	2000      	movs	r0, #0
   d7536:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d7538:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d753a:	bd10      	pop	{r4, pc}

000d753c <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d753c:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d753e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7542:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7544:	f7ff fe05 	bl	d7152 <_ZN9SdSpiCard11waitNotBusyEt>
   d7548:	4605      	mov	r5, r0
   d754a:	b120      	cbz	r0, d7556 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d754c:	21fd      	movs	r1, #253	; 0xfd
   d754e:	6860      	ldr	r0, [r4, #4]
   d7550:	f000 f862 	bl	d7618 <_ZN14SdSpiAltDriver4sendEh>
   d7554:	e001      	b.n	d755a <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7556:	2356      	movs	r3, #86	; 0x56
   d7558:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d755a:	4620      	mov	r0, r4
   d755c:	f7ff fdb5 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7560:	4628      	mov	r0, r5
   d7562:	bd38      	pop	{r3, r4, r5, pc}

000d7564 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7566:	4605      	mov	r5, r0
   d7568:	4616      	mov	r6, r2
   d756a:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d756c:	f7ff ffd2 	bl	d7514 <_ZN9SdSpiCard10writeStartEm>
   d7570:	b170      	cbz	r0, d7590 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d7572:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7574:	42bc      	cmp	r4, r7
   d7576:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d757a:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d757c:	d004      	beq.n	d7588 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d757e:	f7ff ffb3 	bl	d74e8 <_ZN9SdSpiCard9writeDataEPKh>
   d7582:	b128      	cbz	r0, d7590 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7584:	3401      	adds	r4, #1
   d7586:	e7f5      	b.n	d7574 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d7588:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d758c:	f7ff bfd6 	b.w	d753c <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d7590:	4628      	mov	r0, r5
   d7592:	f7ff fd9a 	bl	d70ca <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7596:	2000      	movs	r0, #0
   d7598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d759a <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d759a:	f000 bae5 	b.w	d7b68 <HAL_Pin_Map>

000d759e <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d759e:	f000 bae3 	b.w	d7b68 <HAL_Pin_Map>

000d75a2 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d75a2:	f000 bae1 	b.w	d7b68 <HAL_Pin_Map>
	...

000d75a8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d75a8:	4b01      	ldr	r3, [pc, #4]	; (d75b0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d75aa:	2201      	movs	r2, #1
   d75ac:	701a      	strb	r2, [r3, #0]
   d75ae:	4770      	bx	lr
   d75b0:	2003e318 	.word	0x2003e318

000d75b4 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d75b4:	1d01      	adds	r1, r0, #4
   d75b6:	6800      	ldr	r0, [r0, #0]
   d75b8:	f003 bbc0 	b.w	dad3c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d75bc <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d75bc:	b510      	push	{r4, lr}
   d75be:	4604      	mov	r4, r0
  m_csPin = csPin;
   d75c0:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d75c2:	6800      	ldr	r0, [r0, #0]
   d75c4:	f003 fb7c 	bl	dacc0 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d75c8:	7d20      	ldrb	r0, [r4, #20]
   d75ca:	2101      	movs	r1, #1
   d75cc:	f004 f826 	bl	db61c <pinMode>
  digitalWrite(m_csPin, HIGH);
   d75d0:	7d20      	ldrb	r0, [r4, #20]
   d75d2:	2101      	movs	r1, #1
}
   d75d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d75d8:	f004 b831 	b.w	db63e <digitalWrite>

000d75dc <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d75dc:	6800      	ldr	r0, [r0, #0]
   d75de:	f003 bb94 	b.w	dad0a <_ZN8SPIClass14endTransactionEv>

000d75e2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d75e2:	21ff      	movs	r1, #255	; 0xff
   d75e4:	6800      	ldr	r0, [r0, #0]
   d75e6:	f003 bc4b 	b.w	dae80 <_ZN8SPIClass8transferEh>
	...

000d75ec <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d75ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d75ee:	4b08      	ldr	r3, [pc, #32]	; (d7610 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d75f0:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d75f2:	2500      	movs	r5, #0
   d75f4:	4c07      	ldr	r4, [pc, #28]	; (d7614 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d75f6:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d75f8:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d75fa:	4613      	mov	r3, r2
   d75fc:	460a      	mov	r2, r1
   d75fe:	4629      	mov	r1, r5
   d7600:	f003 fc44 	bl	dae8c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7604:	7823      	ldrb	r3, [r4, #0]
   d7606:	2b00      	cmp	r3, #0
   d7608:	d0fc      	beq.n	d7604 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d760a:	2000      	movs	r0, #0
   d760c:	b003      	add	sp, #12
   d760e:	bd30      	pop	{r4, r5, pc}
   d7610:	000d75a9 	.word	0x000d75a9
   d7614:	2003e318 	.word	0x2003e318

000d7618 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d7618:	6800      	ldr	r0, [r0, #0]
   d761a:	f003 bc31 	b.w	dae80 <_ZN8SPIClass8transferEh>
	...

000d7620 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d7620:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7622:	4b07      	ldr	r3, [pc, #28]	; (d7640 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d7624:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7626:	2500      	movs	r5, #0
   d7628:	4c06      	ldr	r4, [pc, #24]	; (d7644 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d762a:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d762c:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d762e:	4613      	mov	r3, r2
   d7630:	462a      	mov	r2, r5
   d7632:	f003 fc2b 	bl	dae8c <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d7636:	7823      	ldrb	r3, [r4, #0]
   d7638:	2b00      	cmp	r3, #0
   d763a:	d0fc      	beq.n	d7636 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d763c:	b003      	add	sp, #12
   d763e:	bd30      	pop	{r4, r5, pc}
   d7640:	000d75a9 	.word	0x000d75a9
   d7644:	2003e318 	.word	0x2003e318

000d7648 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d7648:	f000 ba8e 	b.w	d7b68 <HAL_Pin_Map>

000d764c <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d764c:	f000 ba8c 	b.w	d7b68 <HAL_Pin_Map>

000d7650 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d7650:	f000 ba8a 	b.w	d7b68 <HAL_Pin_Map>

000d7654 <_ZN13SFE_UBLOX_GPSC1Ev>:
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "SparkFun_Ublox_Arduino_Library.h"

SFE_UBLOX_GPS::SFE_UBLOX_GPS(void)
   d7654:	b570      	push	{r4, r5, r6, lr}
   d7656:	2342      	movs	r3, #66	; 0x42
   d7658:	2500      	movs	r5, #0
   d765a:	2610      	movs	r6, #16
   d765c:	4604      	mov	r4, r0
   d765e:	8105      	strh	r5, [r0, #8]
   d7660:	7285      	strb	r5, [r0, #10]
   d7662:	72c5      	strb	r5, [r0, #11]
   d7664:	7305      	strb	r5, [r0, #12]
   d7666:	6145      	str	r5, [r0, #20]
   d7668:	7603      	strb	r3, [r0, #24]
   d766a:	4632      	mov	r2, r6
   d766c:	4629      	mov	r1, r5
   d766e:	305c      	adds	r0, #92	; 0x5c
   d7670:	f004 ffe3 	bl	dc63a <memset>
   d7674:	f104 0319 	add.w	r3, r4, #25
   d7678:	6663      	str	r3, [r4, #100]	; 0x64
   d767a:	4632      	mov	r2, r6
   d767c:	4629      	mov	r1, r5
   d767e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   d7682:	f004 ffda 	bl	dc63a <memset>
   d7686:	f104 031b 	add.w	r3, r4, #27
   d768a:	6763      	str	r3, [r4, #116]	; 0x74
   d768c:	2319      	movs	r3, #25
   d768e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
   d7692:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   d7696:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
   d769a:	f8a4 5086 	strh.w	r5, [r4, #134]	; 0x86
{
  // Constructor
}
   d769e:	4620      	mov	r0, r4
   d76a0:	bd70      	pop	{r4, r5, r6, pc}

000d76a2 <_ZN13SFE_UBLOX_GPS5beginER7TwoWire>:

//Initialize the Serial port
void SFE_UBLOX_GPS::begin(TwoWire &wirePort)
{
   d76a2:	b510      	push	{r4, lr}
	commType = COMM_TYPE_I2C;
   d76a4:	2300      	movs	r3, #0
   d76a6:	7303      	strb	r3, [r0, #12]
  // Constructor
}

//Initialize the Serial port
void SFE_UBLOX_GPS::begin(TwoWire &wirePort)
{
   d76a8:	4604      	mov	r4, r0
	commType = COMM_TYPE_I2C;
	_i2cPort = &wirePort; //Grab which port the user wants us to use
   d76aa:	6101      	str	r1, [r0, #16]

	//We expect caller to begin their I2C port, with the speed of their choice external to the library
	//But if they forget, we start the hardware here.
	_i2cPort->begin();
   d76ac:	4608      	mov	r0, r1
   d76ae:	f001 fe8d 	bl	d93cc <_ZN7TwoWire5beginEv>
//Sets the internal global variable that is the I2C address we read from
//This does not change the I2C address of the module
//0x42 is the default but can be changed via software command
void SFE_UBLOX_GPS::setI2CReadAddress(uint8_t deviceAddress)
{
	_gpsI2Caddress = deviceAddress; //Store the I2C address from user
   d76b2:	2342      	movs	r3, #66	; 0x42
   d76b4:	7623      	strb	r3, [r4, #24]
   d76b6:	bd10      	pop	{r4, pc}

000d76b8 <_ZN13SFE_UBLOX_GPS11processRTCMEh>:

//This function is called for each byte of an RTCM frame
//Ths user can overwrite this function and process the RTCM frame as they please
//Bytes can be piped to Serial or other interface. The consumer could be a radio or the internet (Ntrip broadcaster)
void SFE_UBLOX_GPS::processRTCM(uint8_t incoming)
{
   d76b8:	4770      	bx	lr

000d76ba <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket>:
  incomingUBX->counter++;
}

//Once a packet has been received and validated, identify this packet's class/id and update internal flags
void SFE_UBLOX_GPS::processUBXpacket(ubxPacket *msg)
{
   d76ba:	b510      	push	{r4, lr}
  if (msg->cls == UBX_CLASS_ACK)
   d76bc:	780b      	ldrb	r3, [r1, #0]
   d76be:	2b05      	cmp	r3, #5
   d76c0:	d10f      	bne.n	d76e2 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x28>
  {
    //We don't want to store ACK packets, just set commandAck flag
    if (msg->id == UBX_ACK_ACK)
   d76c2:	784b      	ldrb	r3, [r1, #1]
   d76c4:	2b01      	cmp	r3, #1
   d76c6:	d10c      	bne.n	d76e2 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x28>
    {
      if (msg->payload[0] == packetCfg.cls && msg->payload[1] == packetCfg.id)
   d76c8:	688a      	ldr	r2, [r1, #8]
   d76ca:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
   d76ce:	7814      	ldrb	r4, [r2, #0]
   d76d0:	428c      	cmp	r4, r1
   d76d2:	d106      	bne.n	d76e2 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x28>
   d76d4:	7851      	ldrb	r1, [r2, #1]
   d76d6:	f890 206d 	ldrb.w	r2, [r0, #109]	; 0x6d
   d76da:	4291      	cmp	r1, r2
      {
        //The ack we just received matched the CLS/ID of last packetCfg sent
        //Serial.println("Command sent/ack'd successfully");
        commandAck = true;
   d76dc:	bf08      	it	eq
   d76de:	f880 3084 	strbeq.w	r3, [r0, #132]	; 0x84
   d76e2:	bd10      	pop	{r4, pc}

000d76e4 <_ZN13SFE_UBLOX_GPS11isConnectedEv>:
  return (true);
}

//Returns true if I2C device ack's
boolean SFE_UBLOX_GPS::isConnected()
{
   d76e4:	b510      	push	{r4, lr}
   d76e6:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   d76e8:	7e01      	ldrb	r1, [r0, #24]
   d76ea:	6900      	ldr	r0, [r0, #16]
   d76ec:	f001 fea5 	bl	d943a <_ZN7TwoWire17beginTransmissionEh>
  if (_i2cPort->endTransmission() != 0)
   d76f0:	6920      	ldr	r0, [r4, #16]
   d76f2:	f001 fead 	bl	d9450 <_ZN7TwoWire15endTransmissionEv>
    return (false); //Sensor did not ACK
  return (true);
}
   d76f6:	fab0 f080 	clz	r0, r0
   d76fa:	0940      	lsrs	r0, r0, #5
   d76fc:	bd10      	pop	{r4, pc}

000d76fe <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket>:
void SFE_UBLOX_GPS::calcChecksum(ubxPacket *msg)
{
  msg->checksumA = 0;
  msg->checksumB = 0;

  msg->checksumA += msg->cls;
   d76fe:	780a      	ldrb	r2, [r1, #0]
  msg->checksumB += msg->checksumA;

  msg->checksumA += msg->id;
   d7700:	7848      	ldrb	r0, [r1, #1]
  return (true);
}

//Given a message, calc and store the two byte "8-Bit Fletcher" checksum
void SFE_UBLOX_GPS::calcChecksum(ubxPacket *msg)
{
   d7702:	b530      	push	{r4, r5, lr}
  msg->checksumB = 0;

  msg->checksumA += msg->cls;
  msg->checksumB += msg->checksumA;

  msg->checksumA += msg->id;
   d7704:	4410      	add	r0, r2
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len & 0xFF);
   d7706:	884d      	ldrh	r5, [r1, #2]
  msg->checksumB = 0;

  msg->checksumA += msg->cls;
  msg->checksumB += msg->checksumA;

  msg->checksumA += msg->id;
   d7708:	b2c3      	uxtb	r3, r0
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len & 0xFF);
   d770a:	195c      	adds	r4, r3, r5
   d770c:	b2e4      	uxtb	r4, r4
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len >> 8);
  msg->checksumB += msg->checksumA;
   d770e:	441a      	add	r2, r3
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len & 0xFF);
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len >> 8);
   d7710:	eb04 2015 	add.w	r0, r4, r5, lsr #8
   d7714:	b2c0      	uxtb	r0, r0
  msg->checksumB += msg->checksumA;
   d7716:	18a3      	adds	r3, r4, r2
   d7718:	4403      	add	r3, r0
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len & 0xFF);
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len >> 8);
   d771a:	7308      	strb	r0, [r1, #12]
  msg->checksumB += msg->checksumA;
   d771c:	734b      	strb	r3, [r1, #13]
   d771e:	2200      	movs	r2, #0

  for (uint16_t i = 0 ; i < msg->len; i++)
   d7720:	b293      	uxth	r3, r2
   d7722:	42ab      	cmp	r3, r5
   d7724:	d20a      	bcs.n	d773c <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket+0x3e>
  {
    msg->checksumA += msg->payload[i];
   d7726:	688b      	ldr	r3, [r1, #8]
   d7728:	5c98      	ldrb	r0, [r3, r2]
   d772a:	7b0b      	ldrb	r3, [r1, #12]
   d772c:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   d772e:	7b48      	ldrb	r0, [r1, #13]
  msg->checksumA += (msg->len >> 8);
  msg->checksumB += msg->checksumA;

  for (uint16_t i = 0 ; i < msg->len; i++)
  {
    msg->checksumA += msg->payload[i];
   d7730:	b2db      	uxtb	r3, r3
   d7732:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   d7734:	4403      	add	r3, r0
   d7736:	734b      	strb	r3, [r1, #13]
   d7738:	3201      	adds	r2, #1
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len >> 8);
  msg->checksumB += msg->checksumA;

  for (uint16_t i = 0 ; i < msg->len; i++)
   d773a:	e7f1      	b.n	d7720 <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket+0x22>
   d773c:	bd30      	pop	{r4, r5, pc}

000d773e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket>:
}	

//Given a character, file it away into the uxb packet structure
//Set valid = true once sentence is completely received and passes CRC
void SFE_UBLOX_GPS::processUBX(uint8_t incoming, ubxPacket *incomingUBX)
{
   d773e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (incomingUBX->counter == 0)
   d7740:	7913      	ldrb	r3, [r2, #4]
}	

//Given a character, file it away into the uxb packet structure
//Set valid = true once sentence is completely received and passes CRC
void SFE_UBLOX_GPS::processUBX(uint8_t incoming, ubxPacket *incomingUBX)
{
   d7742:	4606      	mov	r6, r0
   d7744:	460d      	mov	r5, r1
   d7746:	4614      	mov	r4, r2
  if (incomingUBX->counter == 0)
   d7748:	b90b      	cbnz	r3, d774e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x10>
  {
    incomingUBX->cls = incoming;
   d774a:	7021      	strb	r1, [r4, #0]
   d774c:	e02c      	b.n	d77a8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
  }
  else if (incomingUBX->counter == 1)
   d774e:	2b01      	cmp	r3, #1
   d7750:	d101      	bne.n	d7756 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x18>
  {
    incomingUBX->id = incoming;
   d7752:	7061      	strb	r1, [r4, #1]
   d7754:	e028      	b.n	d77a8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
  }
  else if (incomingUBX->counter == 2) //Len LSB
   d7756:	2b02      	cmp	r3, #2
   d7758:	d004      	beq.n	d7764 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x26>
  {
    incomingUBX->len = incoming;
  }
  else if (incomingUBX->counter == 3) //Len MSB
   d775a:	2b03      	cmp	r3, #3
   d775c:	d104      	bne.n	d7768 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x2a>
  {
    incomingUBX->len |= incoming << 8;
   d775e:	8853      	ldrh	r3, [r2, #2]
   d7760:	ea43 2501 	orr.w	r5, r3, r1, lsl #8
   d7764:	8065      	strh	r5, [r4, #2]
   d7766:	e01f      	b.n	d77a8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
  }
  else if (incomingUBX->counter == incomingUBX->len + 4) //ChecksumA
   d7768:	8852      	ldrh	r2, [r2, #2]
   d776a:	1d11      	adds	r1, r2, #4
   d776c:	428b      	cmp	r3, r1
   d776e:	d101      	bne.n	d7774 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x36>
  {
    incomingUBX->checksumA = incoming;
   d7770:	7325      	strb	r5, [r4, #12]
   d7772:	e019      	b.n	d77a8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
  }
  else if (incomingUBX->counter == incomingUBX->len + 5) //ChecksumB
   d7774:	3205      	adds	r2, #5
   d7776:	4293      	cmp	r3, r2
   d7778:	d112      	bne.n	d77a0 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x62>
    //Validate this sentence

    uint8_t tempA = incomingUBX->checksumA;
    uint8_t tempB = incoming;

    calcChecksum(incomingUBX); //Calc checksum across this message. Results stored in message.
   d777a:	4621      	mov	r1, r4
  }
  else if (incomingUBX->counter == incomingUBX->len + 5) //ChecksumB
  {
    //Validate this sentence

    uint8_t tempA = incomingUBX->checksumA;
   d777c:	7b27      	ldrb	r7, [r4, #12]
    uint8_t tempB = incoming;

    calcChecksum(incomingUBX); //Calc checksum across this message. Results stored in message.
   d777e:	f7ff ffbe 	bl	d76fe <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket>

    currentSentence = NONE; //We're done! Reset the sentence to being looking for a new start char
   d7782:	2300      	movs	r3, #0
   d7784:	72b3      	strb	r3, [r6, #10]

    if (incomingUBX->checksumA == tempA && incomingUBX->checksumB == tempB)
   d7786:	7b23      	ldrb	r3, [r4, #12]
   d7788:	42bb      	cmp	r3, r7
   d778a:	d10d      	bne.n	d77a8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
   d778c:	7b63      	ldrb	r3, [r4, #13]
   d778e:	42ab      	cmp	r3, r5
   d7790:	d10a      	bne.n	d77a8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
    {
      //Serial.print("Frame cleared: ");
      //printFrame(incomingUBX);

      incomingUBX->valid = true;
   d7792:	2301      	movs	r3, #1
   d7794:	73a3      	strb	r3, [r4, #14]
      processUBXpacket(incomingUBX); //We've got a valid packet, now do something with it
   d7796:	4621      	mov	r1, r4
   d7798:	4630      	mov	r0, r6
   d779a:	f7ff ff8e 	bl	d76ba <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket>
   d779e:	e003      	b.n	d77a8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
    }
  }
  else //Load this byte into the appropriate array
  {
    incomingUBX->payload[incomingUBX->counter - 4] = incoming; //Store this byte into payload array
   d77a0:	68a2      	ldr	r2, [r4, #8]
   d77a2:	4413      	add	r3, r2
   d77a4:	f803 5c04 	strb.w	r5, [r3, #-4]
  }

  incomingUBX->counter++;
   d77a8:	7923      	ldrb	r3, [r4, #4]
   d77aa:	3301      	adds	r3, #1
   d77ac:	7123      	strb	r3, [r4, #4]
   d77ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d77b0 <_ZN13SFE_UBLOX_GPS7processEh>:

//Processes NMEA and UBX binary sentences one byte at a time
//Take a given byte and file it into the proper array
void SFE_UBLOX_GPS::process(uint8_t incoming)
{
  if (currentSentence == NONE || currentSentence == NMEA)
   d77b0:	7a83      	ldrb	r3, [r0, #10]
   d77b2:	2b01      	cmp	r3, #1
} //end checkUbloxSerial()

//Processes NMEA and UBX binary sentences one byte at a time
//Take a given byte and file it into the proper array
void SFE_UBLOX_GPS::process(uint8_t incoming)
{
   d77b4:	b510      	push	{r4, lr}
  if (currentSentence == NONE || currentSentence == NMEA)
   d77b6:	d810      	bhi.n	d77da <_ZN13SFE_UBLOX_GPS7processEh+0x2a>
  {
    if (incoming == 0xB5) //UBX binary frames start with 0xB5
   d77b8:	29b5      	cmp	r1, #181	; 0xb5
   d77ba:	d104      	bne.n	d77c6 <_ZN13SFE_UBLOX_GPS7processEh+0x16>
    {
      //This is the start of a binary sentence. Reset flags.
      //We still don't know the response class
      ubxFrameCounter = 0;
   d77bc:	2300      	movs	r3, #0
   d77be:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
      currentSentence = UBX;
   d77c2:	2302      	movs	r3, #2
   d77c4:	e008      	b.n	d77d8 <_ZN13SFE_UBLOX_GPS7processEh+0x28>
    }
    else if (incoming == '$')
   d77c6:	2924      	cmp	r1, #36	; 0x24
   d77c8:	d101      	bne.n	d77ce <_ZN13SFE_UBLOX_GPS7processEh+0x1e>
    {
      currentSentence = NMEA;
   d77ca:	2301      	movs	r3, #1
   d77cc:	e004      	b.n	d77d8 <_ZN13SFE_UBLOX_GPS7processEh+0x28>
    }
    else if (incoming == 0xD3) //RTCM frames start with 0xD3
   d77ce:	29d3      	cmp	r1, #211	; 0xd3
   d77d0:	d103      	bne.n	d77da <_ZN13SFE_UBLOX_GPS7processEh+0x2a>
    {
      rtcmFrameCounter = 0;
   d77d2:	2300      	movs	r3, #0
   d77d4:	8103      	strh	r3, [r0, #8]
      currentSentence = RTCM;
   d77d6:	2303      	movs	r3, #3
   d77d8:	7283      	strb	r3, [r0, #10]
      //This character is unknown or we missed the previous start of a sentence
    }
  }

  //Depending on the sentence, pass the character to the individual processor
  if (currentSentence == UBX)
   d77da:	7a83      	ldrb	r3, [r0, #10]
   d77dc:	2b02      	cmp	r3, #2
   d77de:	d12e      	bne.n	d783e <_ZN13SFE_UBLOX_GPS7processEh+0x8e>
  {
    //Decide what type of response this is
    if (ubxFrameCounter == 0 && incoming != 0xB5)
   d77e0:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
   d77e4:	b923      	cbnz	r3, d77f0 <_ZN13SFE_UBLOX_GPS7processEh+0x40>
   d77e6:	29b5      	cmp	r1, #181	; 0xb5
   d77e8:	d018      	beq.n	d781c <_ZN13SFE_UBLOX_GPS7processEh+0x6c>
      currentSentence = NONE; //Something went wrong. Reset.
   d77ea:	2200      	movs	r2, #0
   d77ec:	7282      	strb	r2, [r0, #10]
   d77ee:	e015      	b.n	d781c <_ZN13SFE_UBLOX_GPS7processEh+0x6c>
    else if (ubxFrameCounter == 1 && incoming != 0x62)
   d77f0:	2b01      	cmp	r3, #1
   d77f2:	d101      	bne.n	d77f8 <_ZN13SFE_UBLOX_GPS7processEh+0x48>
   d77f4:	2962      	cmp	r1, #98	; 0x62
   d77f6:	e7f7      	b.n	d77e8 <_ZN13SFE_UBLOX_GPS7processEh+0x38>
      currentSentence = NONE; //Something went wrong. Reset.
    else if (ubxFrameCounter == 2) //Class
   d77f8:	2b02      	cmp	r3, #2
   d77fa:	d10f      	bne.n	d781c <_ZN13SFE_UBLOX_GPS7processEh+0x6c>
    {
      //We can now identify the type of response
      if (incoming == UBX_CLASS_ACK)
   d77fc:	2905      	cmp	r1, #5
   d77fe:	f04f 0200 	mov.w	r2, #0
      {
        ubxFrameClass = CLASS_ACK;
   d7802:	bf01      	itttt	eq
   d7804:	2401      	moveq	r4, #1
   d7806:	72c4      	strbeq	r4, [r0, #11]
        packetAck.counter = 0;
   d7808:	f880 2060 	strbeq.w	r2, [r0, #96]	; 0x60
        packetAck.valid = false;
   d780c:	f880 206a 	strbeq.w	r2, [r0, #106]	; 0x6a
      }
      else
      {
        ubxFrameClass = CLASS_NOT_AN_ACK;
   d7810:	bf1e      	ittt	ne
   d7812:	72c3      	strbne	r3, [r0, #11]
        packetCfg.counter = 0;
   d7814:	f880 2070 	strbne.w	r2, [r0, #112]	; 0x70
        packetCfg.valid = false;
   d7818:	f880 207a 	strbne.w	r2, [r0, #122]	; 0x7a
      }
    }

    ubxFrameCounter++;
   d781c:	3301      	adds	r3, #1
   d781e:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85

    //Depending on this frame's class, pass different structs and payload arrays
    if (ubxFrameClass == CLASS_ACK)
   d7822:	7ac3      	ldrb	r3, [r0, #11]
   d7824:	2b01      	cmp	r3, #1
   d7826:	d102      	bne.n	d782e <_ZN13SFE_UBLOX_GPS7processEh+0x7e>
      processUBX(incoming, &packetAck);
   d7828:	f100 025c 	add.w	r2, r0, #92	; 0x5c
   d782c:	e003      	b.n	d7836 <_ZN13SFE_UBLOX_GPS7processEh+0x86>
    else if (ubxFrameClass == CLASS_NOT_AN_ACK)
   d782e:	2b02      	cmp	r3, #2
   d7830:	d10e      	bne.n	d7850 <_ZN13SFE_UBLOX_GPS7processEh+0xa0>
      processUBX(incoming, &packetCfg);
   d7832:	f100 026c 	add.w	r2, r0, #108	; 0x6c
  }
  else if (currentSentence == RTCM)
  {
    processRTCM(incoming); //Deal with RTCM bytes
  }
}
   d7836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    //Depending on this frame's class, pass different structs and payload arrays
    if (ubxFrameClass == CLASS_ACK)
      processUBX(incoming, &packetAck);
    else if (ubxFrameClass == CLASS_NOT_AN_ACK)
      processUBX(incoming, &packetCfg);
   d783a:	f7ff bf80 	b.w	d773e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket>
    else
      ; //Serial.println("No frame class set");
  }
  else if (currentSentence == NMEA)
   d783e:	2b01      	cmp	r3, #1
   d7840:	d102      	bne.n	d7848 <_ZN13SFE_UBLOX_GPS7processEh+0x98>
  {
	processNMEA(incoming); //Process each NMEA character
   d7842:	f7fc fead 	bl	d45a0 <_ZN13SFE_UBLOX_GPS11processNMEAEc>
   d7846:	bd10      	pop	{r4, pc}
  }
  else if (currentSentence == RTCM)
   d7848:	2b03      	cmp	r3, #3
   d784a:	d101      	bne.n	d7850 <_ZN13SFE_UBLOX_GPS7processEh+0xa0>
  {
    processRTCM(incoming); //Deal with RTCM bytes
   d784c:	f7ff ff34 	bl	d76b8 <_ZN13SFE_UBLOX_GPS11processRTCMEh>
   d7850:	bd10      	pop	{r4, pc}

000d7852 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv>:
}

//Polls I2C for data, passing any new bytes to process()
//Times out after given amount of time
boolean SFE_UBLOX_GPS::checkUbloxI2C()
{
   d7852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7854:	4604      	mov	r4, r0
   d7856:	f000 f96f 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
   d785a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   d785e:	1ac0      	subs	r0, r0, r3
   d7860:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   d7864:	4298      	cmp	r0, r3
   d7866:	d31c      	bcc.n	d78a2 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x50>
  {
    //Get the number of bytes available from the module
    uint16_t bytesAvailable = 0;
    _i2cPort->beginTransmission(_gpsI2Caddress);
   d7868:	7e21      	ldrb	r1, [r4, #24]
   d786a:	6920      	ldr	r0, [r4, #16]
   d786c:	f001 fde5 	bl	d943a <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD); //0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   d7870:	21fd      	movs	r1, #253	; 0xfd
   d7872:	6920      	ldr	r0, [r4, #16]
   d7874:	f7fc fd43 	bl	d42fe <_ZN7TwoWire5writeEi>
    if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   d7878:	2100      	movs	r1, #0
   d787a:	6920      	ldr	r0, [r4, #16]
   d787c:	f001 fde4 	bl	d9448 <_ZN7TwoWire15endTransmissionEh>
   d7880:	b108      	cbz	r0, d7886 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x34>
      return (false); //Sensor did not ACK
   d7882:	2000      	movs	r0, #0
   d7884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)2);
   d7886:	2202      	movs	r2, #2
   d7888:	7e21      	ldrb	r1, [r4, #24]
   d788a:	6920      	ldr	r0, [r4, #16]
   d788c:	f001 fdd2 	bl	d9434 <_ZN7TwoWire11requestFromEhj>
    if (_i2cPort->available())
   d7890:	6920      	ldr	r0, [r4, #16]
   d7892:	6803      	ldr	r3, [r0, #0]
   d7894:	691b      	ldr	r3, [r3, #16]
   d7896:	4798      	blx	r3
   d7898:	b928      	cbnz	r0, d78a6 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x54>
   d789a:	f000 f94d 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
      uint8_t lsb = _i2cPort->read();
      bytesAvailable = (uint16_t)msb << 8 | lsb;
    }

    if (bytesAvailable == 0)
      lastCheck = millis(); //Put off checking to avoid I2C bus traffic
   d789e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80

      bytesAvailable -= bytesToRead;
    }
  } //end timed read

  return (true);
   d78a2:	2001      	movs	r0, #1
   d78a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return (false); //Sensor did not ACK

    _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)2);
    if (_i2cPort->available())
    {
      uint8_t msb = _i2cPort->read();
   d78a6:	6920      	ldr	r0, [r4, #16]
   d78a8:	6803      	ldr	r3, [r0, #0]
   d78aa:	695b      	ldr	r3, [r3, #20]
   d78ac:	4798      	blx	r3
   d78ae:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   d78b0:	6920      	ldr	r0, [r4, #16]
   d78b2:	6803      	ldr	r3, [r0, #0]
   d78b4:	695b      	ldr	r3, [r3, #20]
   d78b6:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   d78b8:	022d      	lsls	r5, r5, #8
   d78ba:	f405 437f 	and.w	r3, r5, #65280	; 0xff00
   d78be:	b2c0      	uxtb	r0, r0
    }

    if (bytesAvailable == 0)
   d78c0:	ea50 0503 	orrs.w	r5, r0, r3
   d78c4:	d0e9      	beq.n	d789a <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x48>
      lastCheck = millis(); //Put off checking to avoid I2C bus traffic

    while (bytesAvailable)
    {
      _i2cPort->beginTransmission(_gpsI2Caddress);
   d78c6:	7e21      	ldrb	r1, [r4, #24]
   d78c8:	6920      	ldr	r0, [r4, #16]
   d78ca:	f001 fdb6 	bl	d943a <_ZN7TwoWire17beginTransmissionEh>
      _i2cPort->write(0xFF); //0xFF is the register to read general NMEA data from
   d78ce:	21ff      	movs	r1, #255	; 0xff
   d78d0:	6920      	ldr	r0, [r4, #16]
   d78d2:	f7fc fd14 	bl	d42fe <_ZN7TwoWire5writeEi>
      if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   d78d6:	2100      	movs	r1, #0
   d78d8:	6920      	ldr	r0, [r4, #16]
   d78da:	f001 fdb5 	bl	d9448 <_ZN7TwoWire15endTransmissionEh>
   d78de:	4606      	mov	r6, r0
   d78e0:	2800      	cmp	r0, #0
   d78e2:	d1ce      	bne.n	d7882 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x30>
   d78e4:	2d20      	cmp	r5, #32
   d78e6:	462f      	mov	r7, r5
   d78e8:	bf28      	it	cs
   d78ea:	2720      	movcs	r7, #32

      //Limit to 32 bytes or whatever the buffer limit is for given platform
      uint16_t bytesToRead = bytesAvailable;
      if (bytesToRead > I2C_BUFFER_LENGTH) bytesToRead = I2C_BUFFER_LENGTH;

      _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   d78ec:	463a      	mov	r2, r7
   d78ee:	7e21      	ldrb	r1, [r4, #24]
   d78f0:	6920      	ldr	r0, [r4, #16]
   d78f2:	f001 fd9f 	bl	d9434 <_ZN7TwoWire11requestFromEhj>
      if (_i2cPort->available())
   d78f6:	6920      	ldr	r0, [r4, #16]
   d78f8:	6803      	ldr	r3, [r0, #0]
   d78fa:	691b      	ldr	r3, [r3, #16]
   d78fc:	4798      	blx	r3
   d78fe:	2800      	cmp	r0, #0
   d7900:	d0bf      	beq.n	d7882 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x30>
      {
        for (uint16_t x = 0 ; x < bytesToRead ; x++)
        {
          process(_i2cPort->read()); //Grab the actual character and process it
   d7902:	6920      	ldr	r0, [r4, #16]
   d7904:	6803      	ldr	r3, [r0, #0]
   d7906:	695b      	ldr	r3, [r3, #20]
   d7908:	4798      	blx	r3
   d790a:	3601      	adds	r6, #1
   d790c:	b2c1      	uxtb	r1, r0
   d790e:	4620      	mov	r0, r4
   d7910:	f7ff ff4e 	bl	d77b0 <_ZN13SFE_UBLOX_GPS7processEh>
      if (bytesToRead > I2C_BUFFER_LENGTH) bytesToRead = I2C_BUFFER_LENGTH;

      _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
      if (_i2cPort->available())
      {
        for (uint16_t x = 0 ; x < bytesToRead ; x++)
   d7914:	b2b3      	uxth	r3, r6
   d7916:	429f      	cmp	r7, r3
   d7918:	d8f3      	bhi.n	d7902 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0xb0>
        }
      }
      else
        return (false); //Sensor did not respond

      bytesAvailable -= bytesToRead;
   d791a:	1bed      	subs	r5, r5, r7
   d791c:	b2ad      	uxth	r5, r5
    }

    if (bytesAvailable == 0)
      lastCheck = millis(); //Put off checking to avoid I2C bus traffic

    while (bytesAvailable)
   d791e:	2d00      	cmp	r5, #0
   d7920:	d1d1      	bne.n	d78c6 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x74>
   d7922:	e7be      	b.n	d78a2 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x50>

000d7924 <_ZN13SFE_UBLOX_GPS10checkUbloxEv>:
}

//Called regularly to check for available bytes on the user' specified port
boolean SFE_UBLOX_GPS::checkUblox()
{
	if(commType == COMM_TYPE_I2C)
   d7924:	7b03      	ldrb	r3, [r0, #12]
   d7926:	b90b      	cbnz	r3, d792c <_ZN13SFE_UBLOX_GPS10checkUbloxEv+0x8>
		checkUbloxI2C();
   d7928:	f7ff bf93 	b.w	d7852 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv>
	else if(commType == COMM_TYPE_SERIAL)
		checkUbloxSerial();
}
   d792c:	4770      	bx	lr

000d792e <_GLOBAL__sub_I__ZN13SFE_UBLOX_GPSC2Ev>:
   d792e:	f000 b91b 	b.w	d7b68 <HAL_Pin_Map>
	...

000d7934 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d7934:	b508      	push	{r3, lr}
   d7936:	4b02      	ldr	r3, [pc, #8]	; (d7940 <hal_ble_stack_init+0xc>)
   d7938:	681b      	ldr	r3, [r3, #0]
   d793a:	689b      	ldr	r3, [r3, #8]
   d793c:	9301      	str	r3, [sp, #4]
   d793e:	bd08      	pop	{r3, pc}
   d7940:	00030278 	.word	0x00030278

000d7944 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d7944:	b508      	push	{r3, lr}
   d7946:	4b02      	ldr	r3, [pc, #8]	; (d7950 <hal_ble_gap_set_advertising_data+0xc>)
   d7948:	681b      	ldr	r3, [r3, #0]
   d794a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d794c:	9301      	str	r3, [sp, #4]
   d794e:	bd08      	pop	{r3, pc}
   d7950:	00030278 	.word	0x00030278

000d7954 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d7954:	b508      	push	{r3, lr}
   d7956:	4b02      	ldr	r3, [pc, #8]	; (d7960 <hal_ble_gap_set_scan_response_data+0xc>)
   d7958:	681b      	ldr	r3, [r3, #0]
   d795a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d795c:	9301      	str	r3, [sp, #4]
   d795e:	bd08      	pop	{r3, pc}
   d7960:	00030278 	.word	0x00030278

000d7964 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d7964:	b508      	push	{r3, lr}
   d7966:	4b02      	ldr	r3, [pc, #8]	; (d7970 <hal_ble_gap_start_advertising+0xc>)
   d7968:	681b      	ldr	r3, [r3, #0]
   d796a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d796c:	9301      	str	r3, [sp, #4]
   d796e:	bd08      	pop	{r3, pc}
   d7970:	00030278 	.word	0x00030278

000d7974 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d7974:	b508      	push	{r3, lr}
   d7976:	4b03      	ldr	r3, [pc, #12]	; (d7984 <hal_ble_gap_disconnect+0x10>)
   d7978:	681b      	ldr	r3, [r3, #0]
   d797a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d797e:	9301      	str	r3, [sp, #4]
   d7980:	bd08      	pop	{r3, pc}
   d7982:	0000      	.short	0x0000
   d7984:	00030278 	.word	0x00030278

000d7988 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d7988:	b508      	push	{r3, lr}
   d798a:	4b03      	ldr	r3, [pc, #12]	; (d7998 <hal_ble_gatt_server_add_service+0x10>)
   d798c:	681b      	ldr	r3, [r3, #0]
   d798e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d7992:	9301      	str	r3, [sp, #4]
   d7994:	bd08      	pop	{r3, pc}
   d7996:	0000      	.short	0x0000
   d7998:	00030278 	.word	0x00030278

000d799c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d799c:	b508      	push	{r3, lr}
   d799e:	4b03      	ldr	r3, [pc, #12]	; (d79ac <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d79a0:	681b      	ldr	r3, [r3, #0]
   d79a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d79a6:	9301      	str	r3, [sp, #4]
   d79a8:	bd08      	pop	{r3, pc}
   d79aa:	0000      	.short	0x0000
   d79ac:	00030278 	.word	0x00030278

000d79b0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d79b0:	b508      	push	{r3, lr}
   d79b2:	4b03      	ldr	r3, [pc, #12]	; (d79c0 <hal_ble_gatt_client_write_with_response+0x10>)
   d79b4:	681b      	ldr	r3, [r3, #0]
   d79b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d79ba:	9301      	str	r3, [sp, #4]
   d79bc:	bd08      	pop	{r3, pc}
   d79be:	0000      	.short	0x0000
   d79c0:	00030278 	.word	0x00030278

000d79c4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d79c4:	b508      	push	{r3, lr}
   d79c6:	4b03      	ldr	r3, [pc, #12]	; (d79d4 <hal_ble_gatt_client_write_without_response+0x10>)
   d79c8:	681b      	ldr	r3, [r3, #0]
   d79ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d79ce:	9301      	str	r3, [sp, #4]
   d79d0:	bd08      	pop	{r3, pc}
   d79d2:	0000      	.short	0x0000
   d79d4:	00030278 	.word	0x00030278

000d79d8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d79d8:	b508      	push	{r3, lr}
   d79da:	4b03      	ldr	r3, [pc, #12]	; (d79e8 <hal_ble_gatt_server_add_characteristic+0x10>)
   d79dc:	681b      	ldr	r3, [r3, #0]
   d79de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d79e2:	9301      	str	r3, [sp, #4]
   d79e4:	bd08      	pop	{r3, pc}
   d79e6:	0000      	.short	0x0000
   d79e8:	00030278 	.word	0x00030278

000d79ec <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d79ec:	b508      	push	{r3, lr}
   d79ee:	4b03      	ldr	r3, [pc, #12]	; (d79fc <hal_ble_set_callback_on_periph_link_events+0x10>)
   d79f0:	681b      	ldr	r3, [r3, #0]
   d79f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d79f6:	9301      	str	r3, [sp, #4]
   d79f8:	bd08      	pop	{r3, pc}
   d79fa:	0000      	.short	0x0000
   d79fc:	00030278 	.word	0x00030278

000d7a00 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d7a00:	b508      	push	{r3, lr}
   d7a02:	4b03      	ldr	r3, [pc, #12]	; (d7a10 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d7a04:	681b      	ldr	r3, [r3, #0]
   d7a06:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d7a0a:	9301      	str	r3, [sp, #4]
   d7a0c:	bd08      	pop	{r3, pc}
   d7a0e:	0000      	.short	0x0000
   d7a10:	00030278 	.word	0x00030278

000d7a14 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d7a14:	b508      	push	{r3, lr}
   d7a16:	4b03      	ldr	r3, [pc, #12]	; (d7a24 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d7a18:	681b      	ldr	r3, [r3, #0]
   d7a1a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d7a1e:	9301      	str	r3, [sp, #4]
   d7a20:	bd08      	pop	{r3, pc}
   d7a22:	0000      	.short	0x0000
   d7a24:	00030278 	.word	0x00030278

000d7a28 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d7a28:	b508      	push	{r3, lr}
   d7a2a:	4b02      	ldr	r3, [pc, #8]	; (d7a34 <os_thread_is_current+0xc>)
   d7a2c:	681b      	ldr	r3, [r3, #0]
   d7a2e:	689b      	ldr	r3, [r3, #8]
   d7a30:	9301      	str	r3, [sp, #4]
   d7a32:	bd08      	pop	{r3, pc}
   d7a34:	00030248 	.word	0x00030248

000d7a38 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7a38:	b508      	push	{r3, lr}
   d7a3a:	4b02      	ldr	r3, [pc, #8]	; (d7a44 <os_thread_yield+0xc>)
   d7a3c:	681b      	ldr	r3, [r3, #0]
   d7a3e:	68db      	ldr	r3, [r3, #12]
   d7a40:	9301      	str	r3, [sp, #4]
   d7a42:	bd08      	pop	{r3, pc}
   d7a44:	00030248 	.word	0x00030248

000d7a48 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d7a48:	b508      	push	{r3, lr}
   d7a4a:	4b02      	ldr	r3, [pc, #8]	; (d7a54 <os_thread_join+0xc>)
   d7a4c:	681b      	ldr	r3, [r3, #0]
   d7a4e:	691b      	ldr	r3, [r3, #16]
   d7a50:	9301      	str	r3, [sp, #4]
   d7a52:	bd08      	pop	{r3, pc}
   d7a54:	00030248 	.word	0x00030248

000d7a58 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7a58:	b508      	push	{r3, lr}
   d7a5a:	4b02      	ldr	r3, [pc, #8]	; (d7a64 <os_thread_cleanup+0xc>)
   d7a5c:	681b      	ldr	r3, [r3, #0]
   d7a5e:	695b      	ldr	r3, [r3, #20]
   d7a60:	9301      	str	r3, [sp, #4]
   d7a62:	bd08      	pop	{r3, pc}
   d7a64:	00030248 	.word	0x00030248

000d7a68 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7a68:	b508      	push	{r3, lr}
   d7a6a:	4b02      	ldr	r3, [pc, #8]	; (d7a74 <os_thread_scheduling+0xc>)
   d7a6c:	681b      	ldr	r3, [r3, #0]
   d7a6e:	69db      	ldr	r3, [r3, #28]
   d7a70:	9301      	str	r3, [sp, #4]
   d7a72:	bd08      	pop	{r3, pc}
   d7a74:	00030248 	.word	0x00030248

000d7a78 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7a78:	b508      	push	{r3, lr}
   d7a7a:	4b02      	ldr	r3, [pc, #8]	; (d7a84 <os_timer_create+0xc>)
   d7a7c:	681b      	ldr	r3, [r3, #0]
   d7a7e:	6a1b      	ldr	r3, [r3, #32]
   d7a80:	9301      	str	r3, [sp, #4]
   d7a82:	bd08      	pop	{r3, pc}
   d7a84:	00030248 	.word	0x00030248

000d7a88 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7a88:	b508      	push	{r3, lr}
   d7a8a:	4b02      	ldr	r3, [pc, #8]	; (d7a94 <os_timer_destroy+0xc>)
   d7a8c:	681b      	ldr	r3, [r3, #0]
   d7a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7a90:	9301      	str	r3, [sp, #4]
   d7a92:	bd08      	pop	{r3, pc}
   d7a94:	00030248 	.word	0x00030248

000d7a98 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7a98:	b508      	push	{r3, lr}
   d7a9a:	4b02      	ldr	r3, [pc, #8]	; (d7aa4 <os_timer_get_id+0xc>)
   d7a9c:	681b      	ldr	r3, [r3, #0]
   d7a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7aa0:	9301      	str	r3, [sp, #4]
   d7aa2:	bd08      	pop	{r3, pc}
   d7aa4:	00030248 	.word	0x00030248

000d7aa8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7aa8:	b508      	push	{r3, lr}
   d7aaa:	4b02      	ldr	r3, [pc, #8]	; (d7ab4 <os_timer_change+0xc>)
   d7aac:	681b      	ldr	r3, [r3, #0]
   d7aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7ab0:	9301      	str	r3, [sp, #4]
   d7ab2:	bd08      	pop	{r3, pc}
   d7ab4:	00030248 	.word	0x00030248

000d7ab8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7ab8:	b508      	push	{r3, lr}
   d7aba:	4b02      	ldr	r3, [pc, #8]	; (d7ac4 <os_mutex_recursive_create+0xc>)
   d7abc:	681b      	ldr	r3, [r3, #0]
   d7abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7ac0:	9301      	str	r3, [sp, #4]
   d7ac2:	bd08      	pop	{r3, pc}
   d7ac4:	00030248 	.word	0x00030248

000d7ac8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7ac8:	b508      	push	{r3, lr}
   d7aca:	4b02      	ldr	r3, [pc, #8]	; (d7ad4 <os_mutex_recursive_destroy+0xc>)
   d7acc:	681b      	ldr	r3, [r3, #0]
   d7ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7ad0:	9301      	str	r3, [sp, #4]
   d7ad2:	bd08      	pop	{r3, pc}
   d7ad4:	00030248 	.word	0x00030248

000d7ad8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d7ad8:	b508      	push	{r3, lr}
   d7ada:	4b02      	ldr	r3, [pc, #8]	; (d7ae4 <os_mutex_recursive_lock+0xc>)
   d7adc:	681b      	ldr	r3, [r3, #0]
   d7ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7ae0:	9301      	str	r3, [sp, #4]
   d7ae2:	bd08      	pop	{r3, pc}
   d7ae4:	00030248 	.word	0x00030248

000d7ae8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d7ae8:	b508      	push	{r3, lr}
   d7aea:	4b02      	ldr	r3, [pc, #8]	; (d7af4 <os_mutex_recursive_unlock+0xc>)
   d7aec:	681b      	ldr	r3, [r3, #0]
   d7aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7af0:	9301      	str	r3, [sp, #4]
   d7af2:	bd08      	pop	{r3, pc}
   d7af4:	00030248 	.word	0x00030248

000d7af8 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7af8:	b508      	push	{r3, lr}
   d7afa:	4b02      	ldr	r3, [pc, #8]	; (d7b04 <os_timer_set_id+0xc>)
   d7afc:	681b      	ldr	r3, [r3, #0]
   d7afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7b00:	9301      	str	r3, [sp, #4]
   d7b02:	bd08      	pop	{r3, pc}
   d7b04:	00030248 	.word	0x00030248

000d7b08 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7b08:	b508      	push	{r3, lr}
   d7b0a:	4b02      	ldr	r3, [pc, #8]	; (d7b14 <HAL_RNG_GetRandomNumber+0xc>)
   d7b0c:	681b      	ldr	r3, [r3, #0]
   d7b0e:	685b      	ldr	r3, [r3, #4]
   d7b10:	9301      	str	r3, [sp, #4]
   d7b12:	bd08      	pop	{r3, pc}
   d7b14:	00030218 	.word	0x00030218

000d7b18 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7b18:	b508      	push	{r3, lr}
   d7b1a:	4b02      	ldr	r3, [pc, #8]	; (d7b24 <HAL_Delay_Microseconds+0xc>)
   d7b1c:	681b      	ldr	r3, [r3, #0]
   d7b1e:	68db      	ldr	r3, [r3, #12]
   d7b20:	9301      	str	r3, [sp, #4]
   d7b22:	bd08      	pop	{r3, pc}
   d7b24:	00030218 	.word	0x00030218

000d7b28 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7b28:	b508      	push	{r3, lr}
   d7b2a:	4b02      	ldr	r3, [pc, #8]	; (d7b34 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7b2c:	681b      	ldr	r3, [r3, #0]
   d7b2e:	691b      	ldr	r3, [r3, #16]
   d7b30:	9301      	str	r3, [sp, #4]
   d7b32:	bd08      	pop	{r3, pc}
   d7b34:	00030218 	.word	0x00030218

000d7b38 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7b38:	b508      	push	{r3, lr}
   d7b3a:	4b02      	ldr	r3, [pc, #8]	; (d7b44 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7b3c:	681b      	ldr	r3, [r3, #0]
   d7b3e:	695b      	ldr	r3, [r3, #20]
   d7b40:	9301      	str	r3, [sp, #4]
   d7b42:	bd08      	pop	{r3, pc}
   d7b44:	00030218 	.word	0x00030218

000d7b48 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d7b48:	b508      	push	{r3, lr}
   d7b4a:	4b02      	ldr	r3, [pc, #8]	; (d7b54 <HAL_RTC_Get_UnixTime+0xc>)
   d7b4c:	681b      	ldr	r3, [r3, #0]
   d7b4e:	69db      	ldr	r3, [r3, #28]
   d7b50:	9301      	str	r3, [sp, #4]
   d7b52:	bd08      	pop	{r3, pc}
   d7b54:	00030218 	.word	0x00030218

000d7b58 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d7b58:	b508      	push	{r3, lr}
   d7b5a:	4b02      	ldr	r3, [pc, #8]	; (d7b64 <HAL_RTC_Time_Is_Valid+0xc>)
   d7b5c:	681b      	ldr	r3, [r3, #0]
   d7b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7b60:	9301      	str	r3, [sp, #4]
   d7b62:	bd08      	pop	{r3, pc}
   d7b64:	00030218 	.word	0x00030218

000d7b68 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7b68:	b508      	push	{r3, lr}
   d7b6a:	4b02      	ldr	r3, [pc, #8]	; (d7b74 <HAL_Pin_Map+0xc>)
   d7b6c:	681b      	ldr	r3, [r3, #0]
   d7b6e:	681b      	ldr	r3, [r3, #0]
   d7b70:	9301      	str	r3, [sp, #4]
   d7b72:	bd08      	pop	{r3, pc}
   d7b74:	0003022c 	.word	0x0003022c

000d7b78 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7b78:	b508      	push	{r3, lr}
   d7b7a:	4b02      	ldr	r3, [pc, #8]	; (d7b84 <HAL_Pin_Mode+0xc>)
   d7b7c:	681b      	ldr	r3, [r3, #0]
   d7b7e:	689b      	ldr	r3, [r3, #8]
   d7b80:	9301      	str	r3, [sp, #4]
   d7b82:	bd08      	pop	{r3, pc}
   d7b84:	0003022c 	.word	0x0003022c

000d7b88 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7b88:	b508      	push	{r3, lr}
   d7b8a:	4b02      	ldr	r3, [pc, #8]	; (d7b94 <HAL_Get_Pin_Mode+0xc>)
   d7b8c:	681b      	ldr	r3, [r3, #0]
   d7b8e:	68db      	ldr	r3, [r3, #12]
   d7b90:	9301      	str	r3, [sp, #4]
   d7b92:	bd08      	pop	{r3, pc}
   d7b94:	0003022c 	.word	0x0003022c

000d7b98 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7b98:	b508      	push	{r3, lr}
   d7b9a:	4b02      	ldr	r3, [pc, #8]	; (d7ba4 <HAL_GPIO_Write+0xc>)
   d7b9c:	681b      	ldr	r3, [r3, #0]
   d7b9e:	691b      	ldr	r3, [r3, #16]
   d7ba0:	9301      	str	r3, [sp, #4]
   d7ba2:	bd08      	pop	{r3, pc}
   d7ba4:	0003022c 	.word	0x0003022c

000d7ba8 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d7ba8:	b508      	push	{r3, lr}
   d7baa:	4b02      	ldr	r3, [pc, #8]	; (d7bb4 <HAL_I2C_Set_Speed+0xc>)
   d7bac:	681b      	ldr	r3, [r3, #0]
   d7bae:	681b      	ldr	r3, [r3, #0]
   d7bb0:	9301      	str	r3, [sp, #4]
   d7bb2:	bd08      	pop	{r3, pc}
   d7bb4:	00030228 	.word	0x00030228

000d7bb8 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d7bb8:	b508      	push	{r3, lr}
   d7bba:	4b02      	ldr	r3, [pc, #8]	; (d7bc4 <HAL_I2C_Begin+0xc>)
   d7bbc:	681b      	ldr	r3, [r3, #0]
   d7bbe:	68db      	ldr	r3, [r3, #12]
   d7bc0:	9301      	str	r3, [sp, #4]
   d7bc2:	bd08      	pop	{r3, pc}
   d7bc4:	00030228 	.word	0x00030228

000d7bc8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d7bc8:	b508      	push	{r3, lr}
   d7bca:	4b02      	ldr	r3, [pc, #8]	; (d7bd4 <HAL_I2C_Begin_Transmission+0xc>)
   d7bcc:	681b      	ldr	r3, [r3, #0]
   d7bce:	699b      	ldr	r3, [r3, #24]
   d7bd0:	9301      	str	r3, [sp, #4]
   d7bd2:	bd08      	pop	{r3, pc}
   d7bd4:	00030228 	.word	0x00030228

000d7bd8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d7bd8:	b508      	push	{r3, lr}
   d7bda:	4b02      	ldr	r3, [pc, #8]	; (d7be4 <HAL_I2C_End_Transmission+0xc>)
   d7bdc:	681b      	ldr	r3, [r3, #0]
   d7bde:	69db      	ldr	r3, [r3, #28]
   d7be0:	9301      	str	r3, [sp, #4]
   d7be2:	bd08      	pop	{r3, pc}
   d7be4:	00030228 	.word	0x00030228

000d7be8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7be8:	b508      	push	{r3, lr}
   d7bea:	4b02      	ldr	r3, [pc, #8]	; (d7bf4 <HAL_I2C_Write_Data+0xc>)
   d7bec:	681b      	ldr	r3, [r3, #0]
   d7bee:	6a1b      	ldr	r3, [r3, #32]
   d7bf0:	9301      	str	r3, [sp, #4]
   d7bf2:	bd08      	pop	{r3, pc}
   d7bf4:	00030228 	.word	0x00030228

000d7bf8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d7bf8:	b508      	push	{r3, lr}
   d7bfa:	4b02      	ldr	r3, [pc, #8]	; (d7c04 <HAL_I2C_Available_Data+0xc>)
   d7bfc:	681b      	ldr	r3, [r3, #0]
   d7bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7c00:	9301      	str	r3, [sp, #4]
   d7c02:	bd08      	pop	{r3, pc}
   d7c04:	00030228 	.word	0x00030228

000d7c08 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d7c08:	b508      	push	{r3, lr}
   d7c0a:	4b02      	ldr	r3, [pc, #8]	; (d7c14 <HAL_I2C_Read_Data+0xc>)
   d7c0c:	681b      	ldr	r3, [r3, #0]
   d7c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7c10:	9301      	str	r3, [sp, #4]
   d7c12:	bd08      	pop	{r3, pc}
   d7c14:	00030228 	.word	0x00030228

000d7c18 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7c18:	b508      	push	{r3, lr}
   d7c1a:	4b02      	ldr	r3, [pc, #8]	; (d7c24 <HAL_I2C_Peek_Data+0xc>)
   d7c1c:	681b      	ldr	r3, [r3, #0]
   d7c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7c20:	9301      	str	r3, [sp, #4]
   d7c22:	bd08      	pop	{r3, pc}
   d7c24:	00030228 	.word	0x00030228

000d7c28 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d7c28:	b508      	push	{r3, lr}
   d7c2a:	4b02      	ldr	r3, [pc, #8]	; (d7c34 <HAL_I2C_Flush_Data+0xc>)
   d7c2c:	681b      	ldr	r3, [r3, #0]
   d7c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7c30:	9301      	str	r3, [sp, #4]
   d7c32:	bd08      	pop	{r3, pc}
   d7c34:	00030228 	.word	0x00030228

000d7c38 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d7c38:	b508      	push	{r3, lr}
   d7c3a:	4b02      	ldr	r3, [pc, #8]	; (d7c44 <HAL_I2C_Is_Enabled+0xc>)
   d7c3c:	681b      	ldr	r3, [r3, #0]
   d7c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7c40:	9301      	str	r3, [sp, #4]
   d7c42:	bd08      	pop	{r3, pc}
   d7c44:	00030228 	.word	0x00030228

000d7c48 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d7c48:	b508      	push	{r3, lr}
   d7c4a:	4b02      	ldr	r3, [pc, #8]	; (d7c54 <HAL_I2C_Init+0xc>)
   d7c4c:	681b      	ldr	r3, [r3, #0]
   d7c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7c50:	9301      	str	r3, [sp, #4]
   d7c52:	bd08      	pop	{r3, pc}
   d7c54:	00030228 	.word	0x00030228

000d7c58 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d7c58:	b508      	push	{r3, lr}
   d7c5a:	4b02      	ldr	r3, [pc, #8]	; (d7c64 <HAL_I2C_Request_Data_Ex+0xc>)
   d7c5c:	681b      	ldr	r3, [r3, #0]
   d7c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7c60:	9301      	str	r3, [sp, #4]
   d7c62:	bd08      	pop	{r3, pc}
   d7c64:	00030228 	.word	0x00030228

000d7c68 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7c68:	b508      	push	{r3, lr}
   d7c6a:	4b02      	ldr	r3, [pc, #8]	; (d7c74 <inet_inet_ntop+0xc>)
   d7c6c:	681b      	ldr	r3, [r3, #0]
   d7c6e:	695b      	ldr	r3, [r3, #20]
   d7c70:	9301      	str	r3, [sp, #4]
   d7c72:	bd08      	pop	{r3, pc}
   d7c74:	00030264 	.word	0x00030264

000d7c78 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7c78:	b508      	push	{r3, lr}
   d7c7a:	4b02      	ldr	r3, [pc, #8]	; (d7c84 <netdb_freeaddrinfo+0xc>)
   d7c7c:	681b      	ldr	r3, [r3, #0]
   d7c7e:	689b      	ldr	r3, [r3, #8]
   d7c80:	9301      	str	r3, [sp, #4]
   d7c82:	bd08      	pop	{r3, pc}
   d7c84:	00030268 	.word	0x00030268

000d7c88 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7c88:	b508      	push	{r3, lr}
   d7c8a:	4b02      	ldr	r3, [pc, #8]	; (d7c94 <netdb_getaddrinfo+0xc>)
   d7c8c:	681b      	ldr	r3, [r3, #0]
   d7c8e:	68db      	ldr	r3, [r3, #12]
   d7c90:	9301      	str	r3, [sp, #4]
   d7c92:	bd08      	pop	{r3, pc}
   d7c94:	00030268 	.word	0x00030268

000d7c98 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d7c98:	b508      	push	{r3, lr}
   d7c9a:	4b02      	ldr	r3, [pc, #8]	; (d7ca4 <HAL_SPI_Begin+0xc>)
   d7c9c:	681b      	ldr	r3, [r3, #0]
   d7c9e:	681b      	ldr	r3, [r3, #0]
   d7ca0:	9301      	str	r3, [sp, #4]
   d7ca2:	bd08      	pop	{r3, pc}
   d7ca4:	00030230 	.word	0x00030230

000d7ca8 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d7ca8:	b508      	push	{r3, lr}
   d7caa:	4b02      	ldr	r3, [pc, #8]	; (d7cb4 <HAL_SPI_Set_Clock_Divider+0xc>)
   d7cac:	681b      	ldr	r3, [r3, #0]
   d7cae:	691b      	ldr	r3, [r3, #16]
   d7cb0:	9301      	str	r3, [sp, #4]
   d7cb2:	bd08      	pop	{r3, pc}
   d7cb4:	00030230 	.word	0x00030230

000d7cb8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d7cb8:	b508      	push	{r3, lr}
   d7cba:	4b02      	ldr	r3, [pc, #8]	; (d7cc4 <HAL_SPI_Send_Receive_Data+0xc>)
   d7cbc:	681b      	ldr	r3, [r3, #0]
   d7cbe:	695b      	ldr	r3, [r3, #20]
   d7cc0:	9301      	str	r3, [sp, #4]
   d7cc2:	bd08      	pop	{r3, pc}
   d7cc4:	00030230 	.word	0x00030230

000d7cc8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d7cc8:	b508      	push	{r3, lr}
   d7cca:	4b02      	ldr	r3, [pc, #8]	; (d7cd4 <HAL_SPI_Init+0xc>)
   d7ccc:	681b      	ldr	r3, [r3, #0]
   d7cce:	69db      	ldr	r3, [r3, #28]
   d7cd0:	9301      	str	r3, [sp, #4]
   d7cd2:	bd08      	pop	{r3, pc}
   d7cd4:	00030230 	.word	0x00030230

000d7cd8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d7cd8:	b508      	push	{r3, lr}
   d7cda:	4b02      	ldr	r3, [pc, #8]	; (d7ce4 <HAL_SPI_Is_Enabled+0xc>)
   d7cdc:	681b      	ldr	r3, [r3, #0]
   d7cde:	6a1b      	ldr	r3, [r3, #32]
   d7ce0:	9301      	str	r3, [sp, #4]
   d7ce2:	bd08      	pop	{r3, pc}
   d7ce4:	00030230 	.word	0x00030230

000d7ce8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d7ce8:	b508      	push	{r3, lr}
   d7cea:	4b02      	ldr	r3, [pc, #8]	; (d7cf4 <HAL_SPI_Info+0xc>)
   d7cec:	681b      	ldr	r3, [r3, #0]
   d7cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7cf0:	9301      	str	r3, [sp, #4]
   d7cf2:	bd08      	pop	{r3, pc}
   d7cf4:	00030230 	.word	0x00030230

000d7cf8 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d7cf8:	b508      	push	{r3, lr}
   d7cfa:	4b02      	ldr	r3, [pc, #8]	; (d7d04 <HAL_SPI_DMA_Transfer+0xc>)
   d7cfc:	681b      	ldr	r3, [r3, #0]
   d7cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7d00:	9301      	str	r3, [sp, #4]
   d7d02:	bd08      	pop	{r3, pc}
   d7d04:	00030230 	.word	0x00030230

000d7d08 <HAL_SPI_Begin_Ext>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
   d7d08:	b508      	push	{r3, lr}
   d7d0a:	4b02      	ldr	r3, [pc, #8]	; (d7d14 <HAL_SPI_Begin_Ext+0xc>)
   d7d0c:	681b      	ldr	r3, [r3, #0]
   d7d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7d10:	9301      	str	r3, [sp, #4]
   d7d12:	bd08      	pop	{r3, pc}
   d7d14:	00030230 	.word	0x00030230

000d7d18 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d7d18:	b508      	push	{r3, lr}
   d7d1a:	4b02      	ldr	r3, [pc, #8]	; (d7d24 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d7d1c:	681b      	ldr	r3, [r3, #0]
   d7d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7d20:	9301      	str	r3, [sp, #4]
   d7d22:	bd08      	pop	{r3, pc}
   d7d24:	00030230 	.word	0x00030230

000d7d28 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7d28:	b508      	push	{r3, lr}
   d7d2a:	4b02      	ldr	r3, [pc, #8]	; (d7d34 <HAL_SPI_Set_Settings+0xc>)
   d7d2c:	681b      	ldr	r3, [r3, #0]
   d7d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7d30:	9301      	str	r3, [sp, #4]
   d7d32:	bd08      	pop	{r3, pc}
   d7d34:	00030230 	.word	0x00030230

000d7d38 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d7d38:	b508      	push	{r3, lr}
   d7d3a:	4b02      	ldr	r3, [pc, #8]	; (d7d44 <HAL_SPI_Acquire+0xc>)
   d7d3c:	681b      	ldr	r3, [r3, #0]
   d7d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7d40:	9301      	str	r3, [sp, #4]
   d7d42:	bd08      	pop	{r3, pc}
   d7d44:	00030230 	.word	0x00030230

000d7d48 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d7d48:	b508      	push	{r3, lr}
   d7d4a:	4b02      	ldr	r3, [pc, #8]	; (d7d54 <HAL_SPI_Release+0xc>)
   d7d4c:	681b      	ldr	r3, [r3, #0]
   d7d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7d50:	9301      	str	r3, [sp, #4]
   d7d52:	bd08      	pop	{r3, pc}
   d7d54:	00030230 	.word	0x00030230

000d7d58 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d7d58:	b508      	push	{r3, lr}
   d7d5a:	4b02      	ldr	r3, [pc, #8]	; (d7d64 <HAL_USART_Init+0xc>)
   d7d5c:	681b      	ldr	r3, [r3, #0]
   d7d5e:	681b      	ldr	r3, [r3, #0]
   d7d60:	9301      	str	r3, [sp, #4]
   d7d62:	bd08      	pop	{r3, pc}
   d7d64:	0003023c 	.word	0x0003023c

000d7d68 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d7d68:	b508      	push	{r3, lr}
   d7d6a:	4b02      	ldr	r3, [pc, #8]	; (d7d74 <HAL_USART_End+0xc>)
   d7d6c:	681b      	ldr	r3, [r3, #0]
   d7d6e:	689b      	ldr	r3, [r3, #8]
   d7d70:	9301      	str	r3, [sp, #4]
   d7d72:	bd08      	pop	{r3, pc}
   d7d74:	0003023c 	.word	0x0003023c

000d7d78 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d7d78:	b508      	push	{r3, lr}
   d7d7a:	4b02      	ldr	r3, [pc, #8]	; (d7d84 <HAL_USART_Write_Data+0xc>)
   d7d7c:	681b      	ldr	r3, [r3, #0]
   d7d7e:	68db      	ldr	r3, [r3, #12]
   d7d80:	9301      	str	r3, [sp, #4]
   d7d82:	bd08      	pop	{r3, pc}
   d7d84:	0003023c 	.word	0x0003023c

000d7d88 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d7d88:	b508      	push	{r3, lr}
   d7d8a:	4b02      	ldr	r3, [pc, #8]	; (d7d94 <HAL_USART_Available_Data+0xc>)
   d7d8c:	681b      	ldr	r3, [r3, #0]
   d7d8e:	691b      	ldr	r3, [r3, #16]
   d7d90:	9301      	str	r3, [sp, #4]
   d7d92:	bd08      	pop	{r3, pc}
   d7d94:	0003023c 	.word	0x0003023c

000d7d98 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d7d98:	b508      	push	{r3, lr}
   d7d9a:	4b02      	ldr	r3, [pc, #8]	; (d7da4 <HAL_USART_Read_Data+0xc>)
   d7d9c:	681b      	ldr	r3, [r3, #0]
   d7d9e:	695b      	ldr	r3, [r3, #20]
   d7da0:	9301      	str	r3, [sp, #4]
   d7da2:	bd08      	pop	{r3, pc}
   d7da4:	0003023c 	.word	0x0003023c

000d7da8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d7da8:	b508      	push	{r3, lr}
   d7daa:	4b02      	ldr	r3, [pc, #8]	; (d7db4 <HAL_USART_Peek_Data+0xc>)
   d7dac:	681b      	ldr	r3, [r3, #0]
   d7dae:	699b      	ldr	r3, [r3, #24]
   d7db0:	9301      	str	r3, [sp, #4]
   d7db2:	bd08      	pop	{r3, pc}
   d7db4:	0003023c 	.word	0x0003023c

000d7db8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d7db8:	b508      	push	{r3, lr}
   d7dba:	4b02      	ldr	r3, [pc, #8]	; (d7dc4 <HAL_USART_Flush_Data+0xc>)
   d7dbc:	681b      	ldr	r3, [r3, #0]
   d7dbe:	69db      	ldr	r3, [r3, #28]
   d7dc0:	9301      	str	r3, [sp, #4]
   d7dc2:	bd08      	pop	{r3, pc}
   d7dc4:	0003023c 	.word	0x0003023c

000d7dc8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d7dc8:	b508      	push	{r3, lr}
   d7dca:	4b02      	ldr	r3, [pc, #8]	; (d7dd4 <HAL_USART_Is_Enabled+0xc>)
   d7dcc:	681b      	ldr	r3, [r3, #0]
   d7dce:	6a1b      	ldr	r3, [r3, #32]
   d7dd0:	9301      	str	r3, [sp, #4]
   d7dd2:	bd08      	pop	{r3, pc}
   d7dd4:	0003023c 	.word	0x0003023c

000d7dd8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d7dd8:	b508      	push	{r3, lr}
   d7dda:	4b02      	ldr	r3, [pc, #8]	; (d7de4 <HAL_USART_Available_Data_For_Write+0xc>)
   d7ddc:	681b      	ldr	r3, [r3, #0]
   d7dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7de0:	9301      	str	r3, [sp, #4]
   d7de2:	bd08      	pop	{r3, pc}
   d7de4:	0003023c 	.word	0x0003023c

000d7de8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d7de8:	b508      	push	{r3, lr}
   d7dea:	4b02      	ldr	r3, [pc, #8]	; (d7df4 <HAL_USART_BeginConfig+0xc>)
   d7dec:	681b      	ldr	r3, [r3, #0]
   d7dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7df0:	9301      	str	r3, [sp, #4]
   d7df2:	bd08      	pop	{r3, pc}
   d7df4:	0003023c 	.word	0x0003023c

000d7df8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7df8:	b508      	push	{r3, lr}
   d7dfa:	4b02      	ldr	r3, [pc, #8]	; (d7e04 <HAL_USB_USART_Init+0xc>)
   d7dfc:	681b      	ldr	r3, [r3, #0]
   d7dfe:	681b      	ldr	r3, [r3, #0]
   d7e00:	9301      	str	r3, [sp, #4]
   d7e02:	bd08      	pop	{r3, pc}
   d7e04:	0003024c 	.word	0x0003024c

000d7e08 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7e08:	b508      	push	{r3, lr}
   d7e0a:	4b02      	ldr	r3, [pc, #8]	; (d7e14 <HAL_USB_USART_Begin+0xc>)
   d7e0c:	681b      	ldr	r3, [r3, #0]
   d7e0e:	685b      	ldr	r3, [r3, #4]
   d7e10:	9301      	str	r3, [sp, #4]
   d7e12:	bd08      	pop	{r3, pc}
   d7e14:	0003024c 	.word	0x0003024c

000d7e18 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d7e18:	b508      	push	{r3, lr}
   d7e1a:	4b02      	ldr	r3, [pc, #8]	; (d7e24 <HAL_USB_USART_End+0xc>)
   d7e1c:	681b      	ldr	r3, [r3, #0]
   d7e1e:	689b      	ldr	r3, [r3, #8]
   d7e20:	9301      	str	r3, [sp, #4]
   d7e22:	bd08      	pop	{r3, pc}
   d7e24:	0003024c 	.word	0x0003024c

000d7e28 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7e28:	b508      	push	{r3, lr}
   d7e2a:	4b02      	ldr	r3, [pc, #8]	; (d7e34 <HAL_USB_USART_Available_Data+0xc>)
   d7e2c:	681b      	ldr	r3, [r3, #0]
   d7e2e:	691b      	ldr	r3, [r3, #16]
   d7e30:	9301      	str	r3, [sp, #4]
   d7e32:	bd08      	pop	{r3, pc}
   d7e34:	0003024c 	.word	0x0003024c

000d7e38 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7e38:	b508      	push	{r3, lr}
   d7e3a:	4b02      	ldr	r3, [pc, #8]	; (d7e44 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7e3c:	681b      	ldr	r3, [r3, #0]
   d7e3e:	695b      	ldr	r3, [r3, #20]
   d7e40:	9301      	str	r3, [sp, #4]
   d7e42:	bd08      	pop	{r3, pc}
   d7e44:	0003024c 	.word	0x0003024c

000d7e48 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7e48:	b508      	push	{r3, lr}
   d7e4a:	4b02      	ldr	r3, [pc, #8]	; (d7e54 <HAL_USB_USART_Receive_Data+0xc>)
   d7e4c:	681b      	ldr	r3, [r3, #0]
   d7e4e:	699b      	ldr	r3, [r3, #24]
   d7e50:	9301      	str	r3, [sp, #4]
   d7e52:	bd08      	pop	{r3, pc}
   d7e54:	0003024c 	.word	0x0003024c

000d7e58 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7e58:	b508      	push	{r3, lr}
   d7e5a:	4b02      	ldr	r3, [pc, #8]	; (d7e64 <HAL_USB_USART_Send_Data+0xc>)
   d7e5c:	681b      	ldr	r3, [r3, #0]
   d7e5e:	69db      	ldr	r3, [r3, #28]
   d7e60:	9301      	str	r3, [sp, #4]
   d7e62:	bd08      	pop	{r3, pc}
   d7e64:	0003024c 	.word	0x0003024c

000d7e68 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7e68:	b508      	push	{r3, lr}
   d7e6a:	4b02      	ldr	r3, [pc, #8]	; (d7e74 <HAL_USB_USART_Flush_Data+0xc>)
   d7e6c:	681b      	ldr	r3, [r3, #0]
   d7e6e:	6a1b      	ldr	r3, [r3, #32]
   d7e70:	9301      	str	r3, [sp, #4]
   d7e72:	bd08      	pop	{r3, pc}
   d7e74:	0003024c 	.word	0x0003024c

000d7e78 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7e78:	b508      	push	{r3, lr}
   d7e7a:	4b02      	ldr	r3, [pc, #8]	; (d7e84 <panic_+0xc>)
   d7e7c:	681b      	ldr	r3, [r3, #0]
   d7e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7e80:	9301      	str	r3, [sp, #4]
   d7e82:	bd08      	pop	{r3, pc}
   d7e84:	00030260 	.word	0x00030260

000d7e88 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7e88:	b508      	push	{r3, lr}
   d7e8a:	4b02      	ldr	r3, [pc, #8]	; (d7e94 <log_message+0xc>)
   d7e8c:	681b      	ldr	r3, [r3, #0]
   d7e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7e90:	9301      	str	r3, [sp, #4]
   d7e92:	bd08      	pop	{r3, pc}
   d7e94:	00030260 	.word	0x00030260

000d7e98 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d7e98:	b508      	push	{r3, lr}
   d7e9a:	4b02      	ldr	r3, [pc, #8]	; (d7ea4 <log_level_name+0xc>)
   d7e9c:	681b      	ldr	r3, [r3, #0]
   d7e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7ea0:	9301      	str	r3, [sp, #4]
   d7ea2:	bd08      	pop	{r3, pc}
   d7ea4:	00030260 	.word	0x00030260

000d7ea8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d7ea8:	b508      	push	{r3, lr}
   d7eaa:	4b02      	ldr	r3, [pc, #8]	; (d7eb4 <log_set_callbacks+0xc>)
   d7eac:	681b      	ldr	r3, [r3, #0]
   d7eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7eb0:	9301      	str	r3, [sp, #4]
   d7eb2:	bd08      	pop	{r3, pc}
   d7eb4:	00030260 	.word	0x00030260

000d7eb8 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   d7eb8:	b508      	push	{r3, lr}
   d7eba:	4b03      	ldr	r3, [pc, #12]	; (d7ec8 <led_set_status_active+0x10>)
   d7ebc:	681b      	ldr	r3, [r3, #0]
   d7ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d7ec2:	9301      	str	r3, [sp, #4]
   d7ec4:	bd08      	pop	{r3, pc}
   d7ec6:	0000      	.short	0x0000
   d7ec8:	00030260 	.word	0x00030260

000d7ecc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7ecc:	b508      	push	{r3, lr}
   d7ece:	4b02      	ldr	r3, [pc, #8]	; (d7ed8 <system_mode+0xc>)
   d7ed0:	681b      	ldr	r3, [r3, #0]
   d7ed2:	681b      	ldr	r3, [r3, #0]
   d7ed4:	9301      	str	r3, [sp, #4]
   d7ed6:	bd08      	pop	{r3, pc}
   d7ed8:	00030220 	.word	0x00030220

000d7edc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7edc:	b508      	push	{r3, lr}
   d7ede:	4b02      	ldr	r3, [pc, #8]	; (d7ee8 <set_system_mode+0xc>)
   d7ee0:	681b      	ldr	r3, [r3, #0]
   d7ee2:	685b      	ldr	r3, [r3, #4]
   d7ee4:	9301      	str	r3, [sp, #4]
   d7ee6:	bd08      	pop	{r3, pc}
   d7ee8:	00030220 	.word	0x00030220

000d7eec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7eec:	b508      	push	{r3, lr}
   d7eee:	4b02      	ldr	r3, [pc, #8]	; (d7ef8 <system_delay_ms+0xc>)
   d7ef0:	681b      	ldr	r3, [r3, #0]
   d7ef2:	695b      	ldr	r3, [r3, #20]
   d7ef4:	9301      	str	r3, [sp, #4]
   d7ef6:	bd08      	pop	{r3, pc}
   d7ef8:	00030220 	.word	0x00030220

000d7efc <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7efc:	b508      	push	{r3, lr}
   d7efe:	4b02      	ldr	r3, [pc, #8]	; (d7f08 <system_thread_get_state+0xc>)
   d7f00:	681b      	ldr	r3, [r3, #0]
   d7f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7f04:	9301      	str	r3, [sp, #4]
   d7f06:	bd08      	pop	{r3, pc}
   d7f08:	00030220 	.word	0x00030220

000d7f0c <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   d7f0c:	b508      	push	{r3, lr}
   d7f0e:	4b02      	ldr	r3, [pc, #8]	; (d7f18 <led_pattern_period+0xc>)
   d7f10:	681b      	ldr	r3, [r3, #0]
   d7f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d7f14:	9301      	str	r3, [sp, #4]
   d7f16:	bd08      	pop	{r3, pc}
   d7f18:	00030220 	.word	0x00030220

000d7f1c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7f1c:	b508      	push	{r3, lr}
   d7f1e:	4b03      	ldr	r3, [pc, #12]	; (d7f2c <system_ctrl_set_app_request_handler+0x10>)
   d7f20:	681b      	ldr	r3, [r3, #0]
   d7f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7f26:	9301      	str	r3, [sp, #4]
   d7f28:	bd08      	pop	{r3, pc}
   d7f2a:	0000      	.short	0x0000
   d7f2c:	00030220 	.word	0x00030220

000d7f30 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7f30:	b508      	push	{r3, lr}
   d7f32:	4b03      	ldr	r3, [pc, #12]	; (d7f40 <system_ctrl_set_result+0x10>)
   d7f34:	681b      	ldr	r3, [r3, #0]
   d7f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7f3a:	9301      	str	r3, [sp, #4]
   d7f3c:	bd08      	pop	{r3, pc}
   d7f3e:	0000      	.short	0x0000
   d7f40:	00030220 	.word	0x00030220

000d7f44 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7f44:	b508      	push	{r3, lr}
   d7f46:	4b02      	ldr	r3, [pc, #8]	; (d7f50 <spark_process+0xc>)
   d7f48:	681b      	ldr	r3, [r3, #0]
   d7f4a:	689b      	ldr	r3, [r3, #8]
   d7f4c:	9301      	str	r3, [sp, #4]
   d7f4e:	bd08      	pop	{r3, pc}
   d7f50:	00030244 	.word	0x00030244

000d7f54 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7f54:	b508      	push	{r3, lr}
   d7f56:	4b02      	ldr	r3, [pc, #8]	; (d7f60 <spark_cloud_flag_connected+0xc>)
   d7f58:	681b      	ldr	r3, [r3, #0]
   d7f5a:	695b      	ldr	r3, [r3, #20]
   d7f5c:	9301      	str	r3, [sp, #4]
   d7f5e:	bd08      	pop	{r3, pc}
   d7f60:	00030244 	.word	0x00030244

000d7f64 <spark_subscribe>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d7f64:	b508      	push	{r3, lr}
   d7f66:	4b02      	ldr	r3, [pc, #8]	; (d7f70 <spark_subscribe+0xc>)
   d7f68:	681b      	ldr	r3, [r3, #0]
   d7f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f6c:	9301      	str	r3, [sp, #4]
   d7f6e:	bd08      	pop	{r3, pc}
   d7f70:	00030244 	.word	0x00030244

000d7f74 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7f74:	b508      	push	{r3, lr}
   d7f76:	4b02      	ldr	r3, [pc, #8]	; (d7f80 <spark_sync_time_pending+0xc>)
   d7f78:	681b      	ldr	r3, [r3, #0]
   d7f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7f7c:	9301      	str	r3, [sp, #4]
   d7f7e:	bd08      	pop	{r3, pc}
   d7f80:	00030244 	.word	0x00030244

000d7f84 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7f84:	b508      	push	{r3, lr}
   d7f86:	4b02      	ldr	r3, [pc, #8]	; (d7f90 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7f88:	681b      	ldr	r3, [r3, #0]
   d7f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7f8c:	9301      	str	r3, [sp, #4]
   d7f8e:	bd08      	pop	{r3, pc}
   d7f90:	00030244 	.word	0x00030244

000d7f94 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7f94:	b508      	push	{r3, lr}
   d7f96:	4b02      	ldr	r3, [pc, #8]	; (d7fa0 <network_connect+0xc>)
   d7f98:	681b      	ldr	r3, [r3, #0]
   d7f9a:	685b      	ldr	r3, [r3, #4]
   d7f9c:	9301      	str	r3, [sp, #4]
   d7f9e:	bd08      	pop	{r3, pc}
   d7fa0:	00030240 	.word	0x00030240

000d7fa4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7fa4:	b508      	push	{r3, lr}
   d7fa6:	4b02      	ldr	r3, [pc, #8]	; (d7fb0 <network_connecting+0xc>)
   d7fa8:	681b      	ldr	r3, [r3, #0]
   d7faa:	689b      	ldr	r3, [r3, #8]
   d7fac:	9301      	str	r3, [sp, #4]
   d7fae:	bd08      	pop	{r3, pc}
   d7fb0:	00030240 	.word	0x00030240

000d7fb4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7fb4:	b508      	push	{r3, lr}
   d7fb6:	4b02      	ldr	r3, [pc, #8]	; (d7fc0 <network_disconnect+0xc>)
   d7fb8:	681b      	ldr	r3, [r3, #0]
   d7fba:	68db      	ldr	r3, [r3, #12]
   d7fbc:	9301      	str	r3, [sp, #4]
   d7fbe:	bd08      	pop	{r3, pc}
   d7fc0:	00030240 	.word	0x00030240

000d7fc4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7fc4:	b508      	push	{r3, lr}
   d7fc6:	4b02      	ldr	r3, [pc, #8]	; (d7fd0 <network_ready+0xc>)
   d7fc8:	681b      	ldr	r3, [r3, #0]
   d7fca:	691b      	ldr	r3, [r3, #16]
   d7fcc:	9301      	str	r3, [sp, #4]
   d7fce:	bd08      	pop	{r3, pc}
   d7fd0:	00030240 	.word	0x00030240

000d7fd4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7fd4:	b508      	push	{r3, lr}
   d7fd6:	4b02      	ldr	r3, [pc, #8]	; (d7fe0 <network_on+0xc>)
   d7fd8:	681b      	ldr	r3, [r3, #0]
   d7fda:	695b      	ldr	r3, [r3, #20]
   d7fdc:	9301      	str	r3, [sp, #4]
   d7fde:	bd08      	pop	{r3, pc}
   d7fe0:	00030240 	.word	0x00030240

000d7fe4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7fe4:	b508      	push	{r3, lr}
   d7fe6:	4b02      	ldr	r3, [pc, #8]	; (d7ff0 <network_off+0xc>)
   d7fe8:	681b      	ldr	r3, [r3, #0]
   d7fea:	699b      	ldr	r3, [r3, #24]
   d7fec:	9301      	str	r3, [sp, #4]
   d7fee:	bd08      	pop	{r3, pc}
   d7ff0:	00030240 	.word	0x00030240

000d7ff4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7ff4:	b508      	push	{r3, lr}
   d7ff6:	4b02      	ldr	r3, [pc, #8]	; (d8000 <network_listen+0xc>)
   d7ff8:	681b      	ldr	r3, [r3, #0]
   d7ffa:	69db      	ldr	r3, [r3, #28]
   d7ffc:	9301      	str	r3, [sp, #4]
   d7ffe:	bd08      	pop	{r3, pc}
   d8000:	00030240 	.word	0x00030240

000d8004 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8004:	b508      	push	{r3, lr}
   d8006:	4b02      	ldr	r3, [pc, #8]	; (d8010 <network_listening+0xc>)
   d8008:	681b      	ldr	r3, [r3, #0]
   d800a:	6a1b      	ldr	r3, [r3, #32]
   d800c:	9301      	str	r3, [sp, #4]
   d800e:	bd08      	pop	{r3, pc}
   d8010:	00030240 	.word	0x00030240

000d8014 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8014:	b508      	push	{r3, lr}
   d8016:	4b02      	ldr	r3, [pc, #8]	; (d8020 <network_set_listen_timeout+0xc>)
   d8018:	681b      	ldr	r3, [r3, #0]
   d801a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d801c:	9301      	str	r3, [sp, #4]
   d801e:	bd08      	pop	{r3, pc}
   d8020:	00030240 	.word	0x00030240

000d8024 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8024:	b508      	push	{r3, lr}
   d8026:	4b02      	ldr	r3, [pc, #8]	; (d8030 <network_get_listen_timeout+0xc>)
   d8028:	681b      	ldr	r3, [r3, #0]
   d802a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d802c:	9301      	str	r3, [sp, #4]
   d802e:	bd08      	pop	{r3, pc}
   d8030:	00030240 	.word	0x00030240

000d8034 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8034:	b508      	push	{r3, lr}
   d8036:	4b02      	ldr	r3, [pc, #8]	; (d8040 <malloc+0xc>)
   d8038:	681b      	ldr	r3, [r3, #0]
   d803a:	681b      	ldr	r3, [r3, #0]
   d803c:	9301      	str	r3, [sp, #4]
   d803e:	bd08      	pop	{r3, pc}
   d8040:	0003021c 	.word	0x0003021c

000d8044 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8044:	b508      	push	{r3, lr}
   d8046:	4b02      	ldr	r3, [pc, #8]	; (d8050 <free+0xc>)
   d8048:	681b      	ldr	r3, [r3, #0]
   d804a:	685b      	ldr	r3, [r3, #4]
   d804c:	9301      	str	r3, [sp, #4]
   d804e:	bd08      	pop	{r3, pc}
   d8050:	0003021c 	.word	0x0003021c

000d8054 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8054:	b508      	push	{r3, lr}
   d8056:	4b02      	ldr	r3, [pc, #8]	; (d8060 <realloc+0xc>)
   d8058:	681b      	ldr	r3, [r3, #0]
   d805a:	689b      	ldr	r3, [r3, #8]
   d805c:	9301      	str	r3, [sp, #4]
   d805e:	bd08      	pop	{r3, pc}
   d8060:	0003021c 	.word	0x0003021c

000d8064 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d8064:	b508      	push	{r3, lr}
   d8066:	4b02      	ldr	r3, [pc, #8]	; (d8070 <siscanf+0xc>)
   d8068:	681b      	ldr	r3, [r3, #0]
   d806a:	699b      	ldr	r3, [r3, #24]
   d806c:	9301      	str	r3, [sp, #4]
   d806e:	bd08      	pop	{r3, pc}
   d8070:	0003021c 	.word	0x0003021c

000d8074 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8074:	b508      	push	{r3, lr}
   d8076:	4b02      	ldr	r3, [pc, #8]	; (d8080 <snprintf+0xc>)
   d8078:	681b      	ldr	r3, [r3, #0]
   d807a:	69db      	ldr	r3, [r3, #28]
   d807c:	9301      	str	r3, [sp, #4]
   d807e:	bd08      	pop	{r3, pc}
   d8080:	0003021c 	.word	0x0003021c

000d8084 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8084:	b508      	push	{r3, lr}
   d8086:	4b02      	ldr	r3, [pc, #8]	; (d8090 <vsnprintf+0xc>)
   d8088:	681b      	ldr	r3, [r3, #0]
   d808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d808c:	9301      	str	r3, [sp, #4]
   d808e:	bd08      	pop	{r3, pc}
   d8090:	0003021c 	.word	0x0003021c

000d8094 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8094:	b508      	push	{r3, lr}
   d8096:	4b02      	ldr	r3, [pc, #8]	; (d80a0 <_malloc_r+0xc>)
   d8098:	681b      	ldr	r3, [r3, #0]
   d809a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d809c:	9301      	str	r3, [sp, #4]
   d809e:	bd08      	pop	{r3, pc}
   d80a0:	0003021c 	.word	0x0003021c

000d80a4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d80a4:	2100      	movs	r1, #0
   d80a6:	f7ff bf21 	b.w	d7eec <system_delay_ms>

000d80aa <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d80aa:	4770      	bx	lr

000d80ac <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d80ac:	2000      	movs	r0, #0
   d80ae:	4770      	bx	lr

000d80b0 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d80b0:	4770      	bx	lr

000d80b2 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d80b2:	2000      	movs	r0, #0
   d80b4:	4770      	bx	lr

000d80b6 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d80b6:	4770      	bx	lr

000d80b8 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d80b8:	2000      	movs	r0, #0
   d80ba:	4770      	bx	lr

000d80bc <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d80bc:	b510      	push	{r4, lr}
   d80be:	2114      	movs	r1, #20
   d80c0:	4604      	mov	r4, r0
   d80c2:	f003 fb1a 	bl	db6fa <_ZdlPvj>
   d80c6:	4620      	mov	r0, r4
   d80c8:	bd10      	pop	{r4, pc}

000d80ca <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d80ca:	b510      	push	{r4, lr}
   d80cc:	2114      	movs	r1, #20
   d80ce:	4604      	mov	r4, r0
   d80d0:	f003 fb13 	bl	db6fa <_ZdlPvj>
   d80d4:	4620      	mov	r0, r4
   d80d6:	bd10      	pop	{r4, pc}

000d80d8 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d80d8:	b510      	push	{r4, lr}
   d80da:	2114      	movs	r1, #20
   d80dc:	4604      	mov	r4, r0
   d80de:	f003 fb0c 	bl	db6fa <_ZdlPvj>
   d80e2:	4620      	mov	r0, r4
   d80e4:	bd10      	pop	{r4, pc}

000d80e6 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d80e6:	f7fb bfda 	b.w	d409e <_ZdlPv>

000d80ea <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d80ea:	f7fb bfd8 	b.w	d409e <_ZdlPv>

000d80ee <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d80ee:	f7fb bfd6 	b.w	d409e <_ZdlPv>

000d80f2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d80f2:	b510      	push	{r4, lr}
   d80f4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d80f6:	6800      	ldr	r0, [r0, #0]
   d80f8:	b108      	cbz	r0, d80fe <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d80fa:	f7ff fce5 	bl	d7ac8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d80fe:	4620      	mov	r0, r4
   d8100:	bd10      	pop	{r4, pc}
	...

000d8104 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d8104:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d8106:	200a      	movs	r0, #10
   d8108:	4a02      	ldr	r2, [pc, #8]	; (d8114 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d810a:	2100      	movs	r1, #0
   d810c:	f7ff feb4 	bl	d7e78 <panic_>
    }
}
   d8110:	bd08      	pop	{r3, pc}
   d8112:	bf00      	nop
   d8114:	000d7b19 	.word	0x000d7b19

000d8118 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8118:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d811a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d811c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d811e:	689b      	ldr	r3, [r3, #8]
   d8120:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8122:	68a3      	ldr	r3, [r4, #8]
   d8124:	3b01      	subs	r3, #1
   d8126:	60a3      	str	r3, [r4, #8]
   d8128:	b92b      	cbnz	r3, d8136 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d812a:	6823      	ldr	r3, [r4, #0]
   d812c:	4620      	mov	r0, r4
   d812e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d8130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d8134:	4718      	bx	r3
   d8136:	bd10      	pop	{r4, pc}

000d8138 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d8138:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d813c:	b2da      	uxtb	r2, r3
   d813e:	2a09      	cmp	r2, #9
   d8140:	d801      	bhi.n	d8146 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d8142:	4618      	mov	r0, r3
   d8144:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d8146:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d814a:	2b05      	cmp	r3, #5
   d814c:	d801      	bhi.n	d8152 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d814e:	3857      	subs	r0, #87	; 0x57
   d8150:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d8152:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d8156:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d8158:	bf94      	ite	ls
   d815a:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d815c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d8160:	4770      	bx	lr
	...

000d8164 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d8164:	b510      	push	{r4, lr}
            locked_(false) {
   d8166:	2300      	movs	r3, #0
   d8168:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d816a:	4b04      	ldr	r3, [pc, #16]	; (d817c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d816c:	4604      	mov	r4, r0
   d816e:	6818      	ldr	r0, [r3, #0]
   d8170:	f7ff fcb2 	bl	d7ad8 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d8174:	2301      	movs	r3, #1
   d8176:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d8178:	4620      	mov	r0, r4
   d817a:	bd10      	pop	{r4, pc}
   d817c:	2003e328 	.word	0x2003e328

000d8180 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d8180:	b510      	push	{r4, lr}
        if (locked_) {
   d8182:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d8184:	4604      	mov	r4, r0
        if (locked_) {
   d8186:	b11b      	cbz	r3, d8190 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d8188:	4b02      	ldr	r3, [pc, #8]	; (d8194 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d818a:	6818      	ldr	r0, [r3, #0]
   d818c:	f7ff fcac 	bl	d7ae8 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d8190:	4620      	mov	r0, r4
   d8192:	bd10      	pop	{r4, pc}
   d8194:	2003e328 	.word	0x2003e328

000d8198 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d8198:	2200      	movs	r2, #0
   d819a:	6002      	str	r2, [r0, #0]
   d819c:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d819e:	4770      	bx	lr

000d81a0 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d81a0:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d81a2:	7982      	ldrb	r2, [r0, #6]
   d81a4:	798b      	ldrb	r3, [r1, #6]
   d81a6:	429a      	cmp	r2, r3
   d81a8:	d106      	bne.n	d81b8 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d81aa:	2206      	movs	r2, #6
   d81ac:	f004 fa10 	bl	dc5d0 <memcmp>
   d81b0:	fab0 f080 	clz	r0, r0
   d81b4:	0940      	lsrs	r0, r0, #5
   d81b6:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d81b8:	2000      	movs	r0, #0
}
   d81ba:	bd08      	pop	{r3, pc}

000d81bc <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d81bc:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d81be:	2301      	movs	r3, #1
   d81c0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d81c2:	4b05      	ldr	r3, [pc, #20]	; (d81d8 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d81c4:	4602      	mov	r2, r0
   d81c6:	f103 0110 	add.w	r1, r3, #16
   d81ca:	f853 4b04 	ldr.w	r4, [r3], #4
   d81ce:	f842 4b04 	str.w	r4, [r2], #4
   d81d2:	428b      	cmp	r3, r1
   d81d4:	d1f9      	bne.n	d81ca <_ZN8particle7BleUuidC1Ev+0xe>
}
   d81d6:	bd10      	pop	{r4, pc}
   d81d8:	000df194 	.word	0x000df194

000d81dc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d81dc:	b510      	push	{r4, lr}
    if (uuid128) {
   d81de:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d81e0:	4604      	mov	r4, r0
    if (uuid128) {
   d81e2:	b1b9      	cbz	r1, d8214 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d81e4:	2a01      	cmp	r2, #1
   d81e6:	d109      	bne.n	d81fc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d81e8:	4603      	mov	r3, r0
   d81ea:	f101 0210 	add.w	r2, r1, #16
   d81ee:	f851 0b04 	ldr.w	r0, [r1], #4
   d81f2:	f843 0b04 	str.w	r0, [r3], #4
   d81f6:	4291      	cmp	r1, r2
   d81f8:	d1f9      	bne.n	d81ee <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d81fa:	e008      	b.n	d820e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d81fc:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d81fe:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d8200:	5c98      	ldrb	r0, [r3, r2]
   d8202:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d8206:	3a01      	subs	r2, #1
   d8208:	b2d2      	uxtb	r2, r2
   d820a:	2aff      	cmp	r2, #255	; 0xff
   d820c:	d1f8      	bne.n	d8200 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d820e:	2301      	movs	r3, #1
   d8210:	6123      	str	r3, [r4, #16]
   d8212:	e002      	b.n	d821a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d8214:	2210      	movs	r2, #16
   d8216:	f004 fa10 	bl	dc63a <memset>
    }
}
   d821a:	4620      	mov	r0, r4
   d821c:	bd10      	pop	{r4, pc}

000d821e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
    type_ = BleUuidType::SHORT;
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d821e:	b538      	push	{r3, r4, r5, lr}
   d8220:	4605      	mov	r5, r0
   d8222:	4614      	mov	r4, r2
        : BleUuid(uuid128, order) {
   d8224:	461a      	mov	r2, r3
   d8226:	f7ff ffd9 	bl	d81dc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d822a:	732c      	strb	r4, [r5, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d822c:	0a24      	lsrs	r4, r4, #8
   d822e:	736c      	strb	r4, [r5, #13]
}
   d8230:	4628      	mov	r0, r5
   d8232:	bd38      	pop	{r3, r4, r5, pc}

000d8234 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d8234:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d8236:	6902      	ldr	r2, [r0, #16]
   d8238:	b90a      	cbnz	r2, d823e <_ZNK8particle7BleUuid7isValidEv+0xa>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d823a:	8980      	ldrh	r0, [r0, #12]
   d823c:	e003      	b.n	d8246 <_ZNK8particle7BleUuid7isValidEv+0x12>
    } else {
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d823e:	2210      	movs	r2, #16
   d8240:	4903      	ldr	r1, [pc, #12]	; (d8250 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d8242:	f004 f9c5 	bl	dc5d0 <memcmp>
   d8246:	3000      	adds	r0, #0
   d8248:	bf18      	it	ne
   d824a:	2001      	movne	r0, #1
    }
}
   d824c:	bd08      	pop	{r3, pc}
   d824e:	bf00      	nop
   d8250:	000df194 	.word	0x000df194

000d8254 <_ZNK8particle7BleUuid4typeEv>:

BleUuidType BleUuid::type() const {
    return type_;
}
   d8254:	6900      	ldr	r0, [r0, #16]
   d8256:	4770      	bx	lr

000d8258 <_ZN8particle7BleUuid7halUUIDEv>:

hal_ble_uuid_t BleUuid::halUUID() {
   d8258:	b538      	push	{r3, r4, r5, lr}
   d825a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d825c:	2214      	movs	r2, #20
   d825e:	2100      	movs	r1, #0

BleUuidType BleUuid::type() const {
    return type_;
}

hal_ble_uuid_t BleUuid::halUUID() {
   d8260:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d8262:	f004 f9ea 	bl	dc63a <memset>
    if (type_ == BleUuidType::SHORT) {
   d8266:	6923      	ldr	r3, [r4, #16]
   d8268:	b92b      	cbnz	r3, d8276 <_ZN8particle7BleUuid7halUUIDEv+0x1e>
        uuid.type = BLE_UUID_TYPE_16BIT;
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d826a:	7b62      	ldrb	r2, [r4, #13]
   d826c:	7b23      	ldrb	r3, [r4, #12]
   d826e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d8272:	802b      	strh	r3, [r5, #0]
   d8274:	e00a      	b.n	d828c <_ZN8particle7BleUuid7halUUIDEv+0x34>
    } else {
        uuid.type = BLE_UUID_TYPE_128BIT;
   d8276:	2301      	movs	r3, #1
   d8278:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d827a:	f104 0210 	add.w	r2, r4, #16
   d827e:	462b      	mov	r3, r5
   d8280:	f854 1b04 	ldr.w	r1, [r4], #4
   d8284:	f843 1b04 	str.w	r1, [r3], #4
   d8288:	4294      	cmp	r4, r2
   d828a:	d1f9      	bne.n	d8280 <_ZN8particle7BleUuid7halUUIDEv+0x28>
    }
    return uuid;
}
   d828c:	4628      	mov	r0, r5
   d828e:	bd38      	pop	{r3, r4, r5, pc}

000d8290 <_ZNK8particle7BleUuid7shortedEv>:

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d8290:	7b42      	ldrb	r2, [r0, #13]
   d8292:	7b00      	ldrb	r0, [r0, #12]
}
   d8294:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d8298:	4770      	bx	lr

000d829a <_ZNK8particle7BleUuid8rawBytesEv>:
    return BLE_SIG_UUID_128BIT_LEN;
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}
   d829a:	4770      	bx	lr

000d829c <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d829c:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d829e:	690b      	ldr	r3, [r1, #16]
   d82a0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d82a2:	f101 0210 	add.w	r2, r1, #16
   d82a6:	4603      	mov	r3, r0
   d82a8:	f851 4b04 	ldr.w	r4, [r1], #4
   d82ac:	f843 4b04 	str.w	r4, [r3], #4
   d82b0:	4291      	cmp	r1, r2
   d82b2:	d1f9      	bne.n	d82a8 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d82b4:	bd10      	pop	{r4, pc}

000d82b6 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d82b6:	b510      	push	{r4, lr}
   d82b8:	b086      	sub	sp, #24
   d82ba:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d82bc:	2201      	movs	r2, #1
   d82be:	a801      	add	r0, sp, #4
   d82c0:	f7ff ff8c 	bl	d81dc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d82c4:	a901      	add	r1, sp, #4
   d82c6:	4620      	mov	r0, r4
   d82c8:	f7ff ffe8 	bl	d829c <_ZN8particle7BleUuidaSERKS0_>
}
   d82cc:	b006      	add	sp, #24
   d82ce:	bd10      	pop	{r4, pc}

000d82d0 <_ZNK8particle7BleUuideqERKS0_>:

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    return *this = BleUuid(uuid);
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d82d0:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d82d2:	6902      	ldr	r2, [r0, #16]
   d82d4:	690b      	ldr	r3, [r1, #16]
   d82d6:	429a      	cmp	r2, r3
   d82d8:	d106      	bne.n	d82e8 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d82da:	2210      	movs	r2, #16
   d82dc:	f004 f978 	bl	dc5d0 <memcmp>
   d82e0:	fab0 f080 	clz	r0, r0
   d82e4:	0940      	lsrs	r0, r0, #5
   d82e6:	bd08      	pop	{r3, pc}
   d82e8:	2000      	movs	r0, #0
}
   d82ea:	bd08      	pop	{r3, pc}

000d82ec <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d82ec:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d82ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d82f0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d82f2:	4b31      	ldr	r3, [pc, #196]	; (d83b8 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d82f4:	460e      	mov	r6, r1
   d82f6:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d82f8:	4602      	mov	r2, r0
   d82fa:	f103 0110 	add.w	r1, r3, #16
   d82fe:	f853 0b04 	ldr.w	r0, [r3], #4
   d8302:	f842 0b04 	str.w	r0, [r2], #4
   d8306:	428b      	cmp	r3, r1
   d8308:	d1f9      	bne.n	d82fe <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d830a:	2e00      	cmp	r6, #0
   d830c:	d051      	beq.n	d83b2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d830e:	2124      	movs	r1, #36	; 0x24
   d8310:	4630      	mov	r0, r6
   d8312:	f004 fa2e 	bl	dc772 <strnlen>
   d8316:	2804      	cmp	r0, #4
   d8318:	d010      	beq.n	d833c <_ZN8particle7BleUuid9constructEPKc+0x50>
   d831a:	2700      	movs	r7, #0
   d831c:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d831e:	2124      	movs	r1, #36	; 0x24
   d8320:	4630      	mov	r0, r6
   d8322:	f004 fa26 	bl	dc772 <strnlen>
   d8326:	42b8      	cmp	r0, r7
   d8328:	d901      	bls.n	d832e <_ZN8particle7BleUuid9constructEPKc+0x42>
   d832a:	bb44      	cbnz	r4, d837e <_ZN8particle7BleUuid9constructEPKc+0x92>
   d832c:	e041      	b.n	d83b2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d832e:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d8330:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d8332:	42a5      	cmp	r5, r4
   d8334:	d03d      	beq.n	d83b2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d8336:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d833a:	e7fa      	b.n	d8332 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d833c:	7830      	ldrb	r0, [r6, #0]
   d833e:	f7ff fefb 	bl	d8138 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d8342:	1e04      	subs	r4, r0, #0
   d8344:	db18      	blt.n	d8378 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d8346:	7870      	ldrb	r0, [r6, #1]
   d8348:	f7ff fef6 	bl	d8138 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d834c:	2800      	cmp	r0, #0
   d834e:	db13      	blt.n	d8378 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d8350:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d8354:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d8358:	78b0      	ldrb	r0, [r6, #2]
   d835a:	f7ff feed 	bl	d8138 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d835e:	1e04      	subs	r4, r0, #0
   d8360:	db0a      	blt.n	d8378 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d8362:	78f0      	ldrb	r0, [r6, #3]
   d8364:	f7ff fee8 	bl	d8138 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d8368:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d836a:	bfa1      	itttt	ge
   d836c:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d8370:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d8374:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d8376:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d8378:	2300      	movs	r3, #0
   d837a:	612b      	str	r3, [r5, #16]
   d837c:	e019      	b.n	d83b2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d837e:	5df0      	ldrb	r0, [r6, r7]
   d8380:	f7ff feda 	bl	d8138 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d8384:	0603      	lsls	r3, r0, #24
   d8386:	d412      	bmi.n	d83ae <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d8388:	3c01      	subs	r4, #1
   d838a:	0100      	lsls	r0, r0, #4
   d838c:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d838e:	2124      	movs	r1, #36	; 0x24
   d8390:	4630      	mov	r0, r6
   d8392:	f004 f9ee 	bl	dc772 <strnlen>
   d8396:	3701      	adds	r7, #1
   d8398:	4287      	cmp	r7, r0
   d839a:	d208      	bcs.n	d83ae <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d839c:	5df0      	ldrb	r0, [r6, r7]
   d839e:	f7ff fecb 	bl	d8138 <_ZN8particle11hexToNibbleEc>
   d83a2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d83a4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d83a6:	bfa2      	ittt	ge
   d83a8:	5d2b      	ldrbge	r3, [r5, r4]
   d83aa:	4318      	orrge	r0, r3
   d83ac:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d83ae:	3701      	adds	r7, #1
   d83b0:	e7b5      	b.n	d831e <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d83b2:	b003      	add	sp, #12
   d83b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d83b6:	bf00      	nop
   d83b8:	000df194 	.word	0x000df194

000d83bc <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d83bc:	b538      	push	{r3, r4, r5, lr}
   d83be:	4604      	mov	r4, r0
   d83c0:	460d      	mov	r5, r1
        : BleUuid() {
   d83c2:	f7ff fefb 	bl	d81bc <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d83c6:	4620      	mov	r0, r4
   d83c8:	4629      	mov	r1, r5
   d83ca:	f7ff ff8f 	bl	d82ec <_ZN8particle7BleUuid9constructEPKc>
}
   d83ce:	4620      	mov	r0, r4
   d83d0:	bd38      	pop	{r3, r4, r5, pc}

000d83d2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d83d2:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d83d4:	b18b      	cbz	r3, d83fa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d83d6:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d83d8:	1ce5      	adds	r5, r4, #3
   d83da:	428d      	cmp	r5, r1
   d83dc:	d80f      	bhi.n	d83fe <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d83de:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d83e0:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d83e2:	5d87      	ldrb	r7, [r0, r6]
   d83e4:	4297      	cmp	r7, r2
   d83e6:	d105      	bne.n	d83f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d83e8:	442e      	add	r6, r5
   d83ea:	42b1      	cmp	r1, r6
   d83ec:	d307      	bcc.n	d83fe <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d83ee:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d83f0:	1c68      	adds	r0, r5, #1
                return adsLen;
   d83f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d83f4:	3501      	adds	r5, #1
   d83f6:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d83f8:	e7ee      	b.n	d83d8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d83fa:	4618      	mov	r0, r3
   d83fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d83fe:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d8400:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8402 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d8402:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8406:	4604      	mov	r4, r0
   d8408:	460e      	mov	r6, r1
   d840a:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d840c:	4617      	mov	r7, r2
   d840e:	2a00      	cmp	r2, #0
   d8410:	d03a      	beq.n	d8488 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d8412:	460a      	mov	r2, r1
   d8414:	ab01      	add	r3, sp, #4
   d8416:	6a01      	ldr	r1, [r0, #32]
   d8418:	f7ff ffdb 	bl	d83d2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d841c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d8420:	6a22      	ldr	r2, [r4, #32]
   d8422:	bb03      	cbnz	r3, d8466 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d8424:	b1f8      	cbz	r0, d8466 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d8426:	1c96      	adds	r6, r2, #2
   d8428:	442e      	add	r6, r5
   d842a:	1a36      	subs	r6, r6, r0
   d842c:	2e1f      	cmp	r6, #31
   d842e:	d82b      	bhi.n	d8488 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d8430:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d8434:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d8438:	ebc8 0202 	rsb	r2, r8, r2
   d843c:	1a12      	subs	r2, r2, r0
   d843e:	eb00 0108 	add.w	r1, r0, r8
   d8442:	eb05 0009 	add.w	r0, r5, r9
   d8446:	b292      	uxth	r2, r2
   d8448:	4421      	add	r1, r4
   d844a:	4420      	add	r0, r4
   d844c:	f004 f8da 	bl	dc604 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d8450:	1c6b      	adds	r3, r5, #1
   d8452:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d8456:	462a      	mov	r2, r5
   d8458:	4639      	mov	r1, r7
   d845a:	eb04 0009 	add.w	r0, r4, r9
   d845e:	f004 f8c6 	bl	dc5ee <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d8462:	6226      	str	r6, [r4, #32]
   d8464:	e010      	b.n	d8488 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d8466:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d8468:	182b      	adds	r3, r5, r0
   d846a:	2b1f      	cmp	r3, #31
   d846c:	d80c      	bhi.n	d8488 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d846e:	1c6b      	adds	r3, r5, #1
   d8470:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d8472:	4422      	add	r2, r4
   d8474:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d8476:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d8478:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d847a:	4420      	add	r0, r4
   d847c:	462a      	mov	r2, r5
   d847e:	f004 f8b6 	bl	dc5ee <memcpy>
        selfLen_ += len;
   d8482:	6a22      	ldr	r2, [r4, #32]
   d8484:	442a      	add	r2, r5
   d8486:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d8488:	6a20      	ldr	r0, [r4, #32]
}
   d848a:	b003      	add	sp, #12
   d848c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8490 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d8490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d8492:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d8494:	4603      	mov	r3, r0
   d8496:	f100 021f 	add.w	r2, r0, #31
   d849a:	2000      	movs	r0, #0
   d849c:	f803 0b01 	strb.w	r0, [r3], #1
   d84a0:	4293      	cmp	r3, r2
   d84a2:	f04f 0100 	mov.w	r1, #0
   d84a6:	d1f9      	bne.n	d849c <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d84a8:	aa04      	add	r2, sp, #16
   d84aa:	2306      	movs	r3, #6
   d84ac:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d84b0:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d84b2:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d84b4:	9100      	str	r1, [sp, #0]
   d84b6:	4620      	mov	r0, r4
   d84b8:	4619      	mov	r1, r3
   d84ba:	f7ff ffa2 	bl	d8402 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d84be:	4620      	mov	r0, r4
   d84c0:	b004      	add	sp, #16
   d84c2:	bd10      	pop	{r4, pc}

000d84c4 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:

size_t BleAdvertisingData::appendLocalName(const String& name) {
    return appendLocalName(name.c_str());
}

size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   d84c4:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   d84c6:	9300      	str	r3, [sp, #0]
   d84c8:	4613      	mov	r3, r2
   d84ca:	460a      	mov	r2, r1
   d84cc:	21ff      	movs	r1, #255	; 0xff
   d84ce:	f7ff ff98 	bl	d8402 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d84d2:	b003      	add	sp, #12
   d84d4:	f85d fb04 	ldr.w	pc, [sp], #4

000d84d8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d84d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d84da:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d84dc:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d84de:	ab01      	add	r3, sp, #4
   d84e0:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d84e2:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d84e4:	f7ff ff75 	bl	d83d2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d84e8:	4605      	mov	r5, r0
   d84ea:	b178      	cbz	r0, d850c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d84ec:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d84ee:	6a22      	ldr	r2, [r4, #32]
   d84f0:	1829      	adds	r1, r5, r0
   d84f2:	1a12      	subs	r2, r2, r0
   d84f4:	1b52      	subs	r2, r2, r5
   d84f6:	4421      	add	r1, r4
   d84f8:	4420      	add	r0, r4
   d84fa:	f004 f878 	bl	dc5ee <memcpy>
        selfLen_ -= len;
   d84fe:	6a23      	ldr	r3, [r4, #32]
   d8500:	1b5d      	subs	r5, r3, r5
   d8502:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d8504:	4631      	mov	r1, r6
   d8506:	4620      	mov	r0, r4
   d8508:	f7ff ffe6 	bl	d84d8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d850c:	b002      	add	sp, #8
   d850e:	bd70      	pop	{r4, r5, r6, pc}

000d8510 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d8510:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d8512:	2500      	movs	r5, #0
   d8514:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d8518:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d851a:	8043      	strh	r3, [r0, #2]
   d851c:	220e      	movs	r2, #14
   d851e:	4629      	mov	r1, r5
   d8520:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d8522:	7105      	strb	r5, [r0, #4]
   d8524:	3006      	adds	r0, #6
   d8526:	f004 f888 	bl	dc63a <memset>
   d852a:	f104 0014 	add.w	r0, r4, #20
   d852e:	f7ff fe45 	bl	d81bc <_ZN8particle7BleUuidC1Ev>
   d8532:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d8536:	f7ff fe41 	bl	d81bc <_ZN8particle7BleUuidC1Ev>
   d853a:	4904      	ldr	r1, [pc, #16]	; (d854c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d853c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d8540:	f002 fd59 	bl	daff6 <_ZN6StringC1EPK19__FlashStringHelper>
   d8544:	64e5      	str	r5, [r4, #76]	; 0x4c
   d8546:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d8548:	4620      	mov	r0, r4
   d854a:	bd38      	pop	{r3, r4, r5, pc}
   d854c:	000def85 	.word	0x000def85

000d8550 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d8550:	b510      	push	{r4, lr}
   d8552:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8554:	69c2      	ldr	r2, [r0, #28]
   d8556:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d855a:	4293      	cmp	r3, r2
   d855c:	4618      	mov	r0, r3
   d855e:	d006      	beq.n	d856e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d8560:	6804      	ldr	r4, [r0, #0]
   d8562:	8824      	ldrh	r4, [r4, #0]
   d8564:	428c      	cmp	r4, r1
   d8566:	f103 0308 	add.w	r3, r3, #8
   d856a:	d1f6      	bne.n	d855a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d856c:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d856e:	2000      	movs	r0, #0
    }
   d8570:	bd10      	pop	{r4, pc}
	...

000d8574 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d8574:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8578:	4680      	mov	r8, r0
   d857a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d857c:	460e      	mov	r6, r1
   d857e:	b369      	cbz	r1, d85dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d8580:	b362      	cbz	r2, d85dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d8582:	2af4      	cmp	r2, #244	; 0xf4
   d8584:	6805      	ldr	r5, [r0, #0]
   d8586:	bf28      	it	cs
   d8588:	22f4      	movcs	r2, #244	; 0xf4
   d858a:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d858c:	782a      	ldrb	r2, [r5, #0]
   d858e:	b1a2      	cbz	r2, d85ba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d8590:	792b      	ldrb	r3, [r5, #4]
   d8592:	0798      	lsls	r0, r3, #30
   d8594:	d507      	bpl.n	d85a6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d8596:	2300      	movs	r3, #0
   d8598:	4622      	mov	r2, r4
   d859a:	89a8      	ldrh	r0, [r5, #12]
   d859c:	f7ff f9fe 	bl	d799c <hal_ble_gatt_server_set_characteristic_value>
   d85a0:	2800      	cmp	r0, #0
   d85a2:	da02      	bge.n	d85aa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d85a4:	e043      	b.n	d862e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d85a6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d85aa:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d85ae:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d85b0:	06da      	lsls	r2, r3, #27
   d85b2:	d518      	bpl.n	d85e6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d85b4:	2f01      	cmp	r7, #1
   d85b6:	d123      	bne.n	d8600 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d85b8:	e015      	b.n	d85e6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d85ba:	8868      	ldrh	r0, [r5, #2]
   d85bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d85c0:	4298      	cmp	r0, r3
   d85c2:	d00d      	beq.n	d85e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d85c4:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d85c6:	0759      	lsls	r1, r3, #29
   d85c8:	d523      	bpl.n	d8612 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d85ca:	2f01      	cmp	r7, #1
   d85cc:	d021      	beq.n	d8612 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d85ce:	89a9      	ldrh	r1, [r5, #12]
   d85d0:	9200      	str	r2, [sp, #0]
   d85d2:	4623      	mov	r3, r4
   d85d4:	4632      	mov	r2, r6
   d85d6:	f7ff f9f5 	bl	d79c4 <hal_ble_gatt_client_write_without_response>
   d85da:	e028      	b.n	d862e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d85dc:	4815      	ldr	r0, [pc, #84]	; (d8634 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d85de:	e026      	b.n	d862e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d85e0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d85e4:	e023      	b.n	d862e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d85e6:	069a      	lsls	r2, r3, #26
   d85e8:	d521      	bpl.n	d862e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d85ea:	2f02      	cmp	r7, #2
   d85ec:	d01f      	beq.n	d862e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d85ee:	89a8      	ldrh	r0, [r5, #12]
   d85f0:	2300      	movs	r3, #0
   d85f2:	4622      	mov	r2, r4
   d85f4:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d85f6:	b002      	add	sp, #8
   d85f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d85fc:	f7ff ba0a 	b.w	d7a14 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d8600:	89a8      	ldrh	r0, [r5, #12]
   d8602:	2300      	movs	r3, #0
   d8604:	4622      	mov	r2, r4
   d8606:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d8608:	b002      	add	sp, #8
   d860a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d860e:	f7ff b9f7 	b.w	d7a00 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d8612:	071b      	lsls	r3, r3, #28
   d8614:	d501      	bpl.n	d861a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d8616:	2f02      	cmp	r7, #2
   d8618:	d102      	bne.n	d8620 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d861a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d861e:	e006      	b.n	d862e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d8620:	2300      	movs	r3, #0
   d8622:	89a9      	ldrh	r1, [r5, #12]
   d8624:	9300      	str	r3, [sp, #0]
   d8626:	4632      	mov	r2, r6
   d8628:	4623      	mov	r3, r4
   d862a:	f7ff f9c1 	bl	d79b0 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d862e:	b002      	add	sp, #8
   d8630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8634:	fffffef2 	.word	0xfffffef2

000d8638 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d8638:	b510      	push	{r4, lr}
    return impl()->address();
   d863a:	680a      	ldr	r2, [r1, #0]
   d863c:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d8640:	6003      	str	r3, [r0, #0]
   d8642:	6853      	ldr	r3, [r2, #4]
   d8644:	6043      	str	r3, [r0, #4]
}
   d8646:	bd10      	pop	{r4, pc}

000d8648 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d8648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d864a:	6802      	ldr	r2, [r0, #0]
   d864c:	680b      	ldr	r3, [r1, #0]
   d864e:	8812      	ldrh	r2, [r2, #0]
   d8650:	881b      	ldrh	r3, [r3, #0]
   d8652:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d8654:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d8656:	d10c      	bne.n	d8672 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d8658:	4601      	mov	r1, r0
   d865a:	4668      	mov	r0, sp
   d865c:	f7ff ffec 	bl	d8638 <_ZNK8particle13BlePeerDevice7addressEv>
   d8660:	4621      	mov	r1, r4
   d8662:	a802      	add	r0, sp, #8
   d8664:	f7ff ffe8 	bl	d8638 <_ZNK8particle13BlePeerDevice7addressEv>
   d8668:	a902      	add	r1, sp, #8
   d866a:	4668      	mov	r0, sp
   d866c:	f7ff fd98 	bl	d81a0 <_ZNK8particle10BleAddresseqERKS0_>
   d8670:	b900      	cbnz	r0, d8674 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d8672:	2000      	movs	r0, #0
}
   d8674:	b004      	add	sp, #16
   d8676:	bd10      	pop	{r4, pc}

000d8678 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d8678:	b510      	push	{r4, lr}
   d867a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d867c:	2034      	movs	r0, #52	; 0x34
   d867e:	f7fb fd0c 	bl	d409a <_Znwj>
   d8682:	4601      	mov	r1, r0
   d8684:	b168      	cbz	r0, d86a2 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8686:	2300      	movs	r3, #0
   d8688:	6003      	str	r3, [r0, #0]
   d868a:	6043      	str	r3, [r0, #4]
   d868c:	6083      	str	r3, [r0, #8]
   d868e:	60c3      	str	r3, [r0, #12]
   d8690:	6103      	str	r3, [r0, #16]
   d8692:	6143      	str	r3, [r0, #20]
   d8694:	6183      	str	r3, [r0, #24]
   d8696:	61c3      	str	r3, [r0, #28]
   d8698:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d869a:	6243      	str	r3, [r0, #36]	; 0x24
   d869c:	6283      	str	r3, [r0, #40]	; 0x28
   d869e:	62c3      	str	r3, [r0, #44]	; 0x2c
   d86a0:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d86a2:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d86a4:	b919      	cbnz	r1, d86ae <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d86a6:	4a0a      	ldr	r2, [pc, #40]	; (d86d0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d86a8:	200a      	movs	r0, #10
   d86aa:	f7ff fbe5 	bl	d7e78 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d86ae:	2000      	movs	r0, #0
   d86b0:	f7ff f940 	bl	d7934 <hal_ble_stack_init>
   d86b4:	b120      	cbz	r0, d86c0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d86b6:	4a06      	ldr	r2, [pc, #24]	; (d86d0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d86b8:	2100      	movs	r1, #0
   d86ba:	200a      	movs	r0, #10
   d86bc:	f7ff fbdc 	bl	d7e78 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d86c0:	2200      	movs	r2, #0
   d86c2:	6821      	ldr	r1, [r4, #0]
   d86c4:	4803      	ldr	r0, [pc, #12]	; (d86d4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d86c6:	f7ff f991 	bl	d79ec <hal_ble_set_callback_on_periph_link_events>
}
   d86ca:	4620      	mov	r0, r4
   d86cc:	bd10      	pop	{r4, pc}
   d86ce:	bf00      	nop
   d86d0:	000d7b19 	.word	0x000d7b19
   d86d4:	000d8af1 	.word	0x000d8af1

000d86d8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d86d8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d86da:	4c0a      	ldr	r4, [pc, #40]	; (d8704 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d86dc:	6823      	ldr	r3, [r4, #0]
   d86de:	07db      	lsls	r3, r3, #31
   d86e0:	d40e      	bmi.n	d8700 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d86e2:	4620      	mov	r0, r4
   d86e4:	f7fb fcea 	bl	d40bc <__cxa_guard_acquire>
   d86e8:	b150      	cbz	r0, d8700 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d86ea:	4807      	ldr	r0, [pc, #28]	; (d8708 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d86ec:	f7ff ffc4 	bl	d8678 <_ZN8particle14BleLocalDeviceC1Ev>
   d86f0:	4620      	mov	r0, r4
   d86f2:	f7fb fce8 	bl	d40c6 <__cxa_guard_release>
   d86f6:	4a05      	ldr	r2, [pc, #20]	; (d870c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d86f8:	4905      	ldr	r1, [pc, #20]	; (d8710 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d86fa:	4803      	ldr	r0, [pc, #12]	; (d8708 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d86fc:	f002 fff8 	bl	db6f0 <__aeabi_atexit>
    return instance;
}
   d8700:	4801      	ldr	r0, [pc, #4]	; (d8708 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d8702:	bd10      	pop	{r4, pc}
   d8704:	2003e320 	.word	0x2003e320
   d8708:	2003e31c 	.word	0x2003e31c
   d870c:	2003d468 	.word	0x2003d468
   d8710:	000d88d9 	.word	0x000d88d9

000d8714 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d8714:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d8716:	6803      	ldr	r3, [r0, #0]
   d8718:	3b09      	subs	r3, #9
   d871a:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d871c:	b08a      	sub	sp, #40	; 0x28
   d871e:	4604      	mov	r4, r0
   d8720:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d8722:	d819      	bhi.n	d8758 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d8724:	f7ff ffd8 	bl	d86d8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d8728:	88a1      	ldrh	r1, [r4, #4]
   d872a:	6800      	ldr	r0, [r0, #0]
   d872c:	f7ff ff10 	bl	d8550 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d8730:	4602      	mov	r2, r0
   d8732:	b958      	cbnz	r0, d874c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d8734:	2320      	movs	r3, #32
   d8736:	9302      	str	r3, [sp, #8]
   d8738:	4b08      	ldr	r3, [pc, #32]	; (d875c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d873a:	9003      	str	r0, [sp, #12]
   d873c:	9300      	str	r3, [sp, #0]
   d873e:	aa02      	add	r2, sp, #8
   d8740:	4603      	mov	r3, r0
   d8742:	4907      	ldr	r1, [pc, #28]	; (d8760 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d8744:	2032      	movs	r0, #50	; 0x32
   d8746:	f7ff fb9f 	bl	d7e88 <log_message>
   d874a:	e005      	b.n	d8758 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d874c:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d874e:	b11d      	cbz	r5, d8758 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d8750:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d8752:	68e1      	ldr	r1, [r4, #12]
   d8754:	6920      	ldr	r0, [r4, #16]
   d8756:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d8758:	b00a      	add	sp, #40	; 0x28
   d875a:	bd70      	pop	{r4, r5, r6, pc}
   d875c:	000df03e 	.word	0x000df03e
   d8760:	000deff4 	.word	0x000deff4

000d8764 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d8764:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d8766:	a801      	add	r0, sp, #4
   d8768:	f7ff fcfc 	bl	d8164 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d876c:	2000      	movs	r0, #0
   d876e:	f7ff f8e1 	bl	d7934 <hal_ble_stack_init>
   d8772:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d8774:	a801      	add	r0, sp, #4
   d8776:	f7ff fd03 	bl	d8180 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d877a:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d877e:	b002      	add	sp, #8
   d8780:	bd10      	pop	{r4, pc}

000d8782 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d8782:	4608      	mov	r0, r1
   d8784:	b909      	cbnz	r1, d878a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d8786:	460a      	mov	r2, r1
   d8788:	e001      	b.n	d878e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d878a:	6a09      	ldr	r1, [r1, #32]
   d878c:	2200      	movs	r2, #0
   d878e:	f7ff b8d9 	b.w	d7944 <hal_ble_gap_set_advertising_data>

000d8792 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d8792:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d8794:	460c      	mov	r4, r1
   d8796:	b911      	cbnz	r1, d879e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d8798:	460a      	mov	r2, r1
   d879a:	4608      	mov	r0, r1
   d879c:	e006      	b.n	d87ac <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d879e:	2101      	movs	r1, #1
   d87a0:	4620      	mov	r0, r4
   d87a2:	f7ff fe99 	bl	d84d8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d87a6:	6a21      	ldr	r1, [r4, #32]
   d87a8:	2200      	movs	r2, #0
   d87aa:	4620      	mov	r0, r4
    }
}
   d87ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d87b0:	f7ff b8d0 	b.w	d7954 <hal_ble_gap_set_scan_response_data>

000d87b4 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d87b4:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d87b6:	a801      	add	r0, sp, #4
   d87b8:	f7ff fcd4 	bl	d8164 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d87bc:	2000      	movs	r0, #0
   d87be:	f7ff f8d1 	bl	d7964 <hal_ble_gap_start_advertising>
   d87c2:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d87c4:	a801      	add	r0, sp, #4
   d87c6:	f7ff fcdb 	bl	d8180 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d87ca:	4620      	mov	r0, r4
   d87cc:	b002      	add	sp, #8
   d87ce:	bd10      	pop	{r4, pc}

000d87d0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d87d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d87d2:	4605      	mov	r5, r0
   d87d4:	460c      	mov	r4, r1
    WiringBleLock lk;
   d87d6:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d87d8:	4616      	mov	r6, r2
    WiringBleLock lk;
   d87da:	f7ff fcc3 	bl	d8164 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d87de:	4621      	mov	r1, r4
   d87e0:	4628      	mov	r0, r5
   d87e2:	f7ff ffce 	bl	d8782 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d87e6:	2800      	cmp	r0, #0
   d87e8:	db08      	blt.n	d87fc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d87ea:	4631      	mov	r1, r6
   d87ec:	4628      	mov	r0, r5
   d87ee:	f7ff ffd0 	bl	d8792 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d87f2:	2800      	cmp	r0, #0
   d87f4:	db02      	blt.n	d87fc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d87f6:	4628      	mov	r0, r5
   d87f8:	f7ff ffdc 	bl	d87b4 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d87fc:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d87fe:	a801      	add	r0, sp, #4
   d8800:	f7ff fcbe 	bl	d8180 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d8804:	4620      	mov	r0, r4
   d8806:	b002      	add	sp, #8
   d8808:	bd70      	pop	{r4, r5, r6, pc}

000d880a <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d880a:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d880c:	69d8      	ldr	r0, [r3, #28]
}
   d880e:	2800      	cmp	r0, #0
   d8810:	bfd4      	ite	le
   d8812:	2000      	movle	r0, #0
   d8814:	2001      	movgt	r0, #1
   d8816:	4770      	bx	lr

000d8818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d8818:	680b      	ldr	r3, [r1, #0]
   d881a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d881c:	b113      	cbz	r3, d8824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d881e:	685a      	ldr	r2, [r3, #4]
   d8820:	3201      	adds	r2, #1
   d8822:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d8824:	4770      	bx	lr

000d8826 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d8826:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8828:	f851 3b04 	ldr.w	r3, [r1], #4
   d882c:	4604      	mov	r4, r0
   d882e:	f840 3b04 	str.w	r3, [r0], #4
   d8832:	f7ff fff1 	bl	d8818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d8836:	6823      	ldr	r3, [r4, #0]
   d8838:	b90b      	cbnz	r3, d883e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d883a:	f7ff fc63 	bl	d8104 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d883e:	4620      	mov	r0, r4
   d8840:	bd10      	pop	{r4, pc}

000d8842 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d8842:	b510      	push	{r4, lr}
   d8844:	f851 3b04 	ldr.w	r3, [r1], #4
   d8848:	4604      	mov	r4, r0
   d884a:	f840 3b04 	str.w	r3, [r0], #4
   d884e:	f7ff ffe3 	bl	d8818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d8852:	4620      	mov	r0, r4
   d8854:	bd10      	pop	{r4, pc}

000d8856 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d8856:	b510      	push	{r4, lr}
   d8858:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d885a:	3004      	adds	r0, #4
   d885c:	f7fb ff0a 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d8860:	4620      	mov	r0, r4
   d8862:	bd10      	pop	{r4, pc}

000d8864 <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d8864:	b510      	push	{r4, lr}
   d8866:	4604      	mov	r4, r0
   d8868:	3004      	adds	r0, #4
   d886a:	f7fb ff03 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d886e:	4620      	mov	r0, r4
   d8870:	bd10      	pop	{r4, pc}

000d8872 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8872:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8874:	6804      	ldr	r4, [r0, #0]
   d8876:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8878:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d887a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d887e:	42a6      	cmp	r6, r4
   d8880:	d004      	beq.n	d888c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d8882:	1d20      	adds	r0, r4, #4
   d8884:	f7fb fef6 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8888:	3408      	adds	r4, #8
   d888a:	e7f8      	b.n	d887e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d888c:	6828      	ldr	r0, [r5, #0]
   d888e:	f7ff fbd9 	bl	d8044 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d8892:	4628      	mov	r0, r5
   d8894:	bd70      	pop	{r4, r5, r6, pc}

000d8896 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8896:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8898:	6804      	ldr	r4, [r0, #0]
   d889a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d889c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d889e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d88a2:	42a6      	cmp	r6, r4
   d88a4:	d004      	beq.n	d88b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d88a6:	1d20      	adds	r0, r4, #4
   d88a8:	f7fb fee4 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d88ac:	3408      	adds	r4, #8
   d88ae:	e7f8      	b.n	d88a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d88b0:	6828      	ldr	r0, [r5, #0]
   d88b2:	f7ff fbc7 	bl	d8044 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d88b6:	4628      	mov	r0, r5
   d88b8:	bd70      	pop	{r4, r5, r6, pc}

000d88ba <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d88ba:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d88bc:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d88be:	f104 0018 	add.w	r0, r4, #24
   d88c2:	f7ff ffe8 	bl	d8896 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d88c6:	f104 000c 	add.w	r0, r4, #12
   d88ca:	f7ff ffd2 	bl	d8872 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d88ce:	4620      	mov	r0, r4
   d88d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d88d4:	f7fb bbe3 	b.w	d409e <_ZdlPv>

000d88d8 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d88d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d88da:	6804      	ldr	r4, [r0, #0]
   d88dc:	4607      	mov	r7, r0
   d88de:	b1c4      	cbz	r4, d8912 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d88e0:	69a5      	ldr	r5, [r4, #24]
   d88e2:	69e3      	ldr	r3, [r4, #28]
   d88e4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d88e8:	42ae      	cmp	r6, r5
   d88ea:	d004      	beq.n	d88f6 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d88ec:	1d28      	adds	r0, r5, #4
   d88ee:	f7fb fec1 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d88f2:	3508      	adds	r5, #8
   d88f4:	e7f8      	b.n	d88e8 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d88f6:	69a0      	ldr	r0, [r4, #24]
   d88f8:	f7ff fba4 	bl	d8044 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d88fc:	f104 000c 	add.w	r0, r4, #12
   d8900:	f7ff ffc9 	bl	d8896 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d8904:	4620      	mov	r0, r4
   d8906:	f7ff ffb4 	bl	d8872 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d890a:	2134      	movs	r1, #52	; 0x34
   d890c:	4620      	mov	r0, r4
   d890e:	f002 fef4 	bl	db6fa <_ZdlPvj>
   d8912:	4638      	mov	r0, r7
   d8914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d8918 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d8918:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d891a:	2500      	movs	r5, #0
   d891c:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d891e:	6045      	str	r5, [r0, #4]
   d8920:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8922:	2024      	movs	r0, #36	; 0x24
   d8924:	f7fb fbb9 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8928:	4604      	mov	r4, r0
   d892a:	b178      	cbz	r0, d894c <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d892c:	4603      	mov	r3, r0
   d892e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d8932:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d8936:	f8c0 5002 	str.w	r5, [r0, #2]
   d893a:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d893c:	7285      	strb	r5, [r0, #10]
   d893e:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8940:	60c5      	str	r5, [r0, #12]
   d8942:	6105      	str	r5, [r0, #16]
   d8944:	6145      	str	r5, [r0, #20]
   d8946:	6185      	str	r5, [r0, #24]
   d8948:	61c5      	str	r5, [r0, #28]
   d894a:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d894c:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d894e:	2014      	movs	r0, #20
   d8950:	9301      	str	r3, [sp, #4]
   d8952:	f7fb fba2 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8956:	4603      	mov	r3, r0
   d8958:	b128      	cbz	r0, d8966 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d895a:	2201      	movs	r2, #1
   d895c:	6042      	str	r2, [r0, #4]
   d895e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8960:	4a08      	ldr	r2, [pc, #32]	; (d8984 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d8962:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8964:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8966:	a802      	add	r0, sp, #8
   d8968:	6872      	ldr	r2, [r6, #4]
   d896a:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d896e:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8970:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8972:	f7fb fe7f 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d8976:	6833      	ldr	r3, [r6, #0]
   d8978:	b90b      	cbnz	r3, d897e <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d897a:	f7ff fbc3 	bl	d8104 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d897e:	4630      	mov	r0, r6
   d8980:	b002      	add	sp, #8
   d8982:	bd70      	pop	{r4, r5, r6, pc}
   d8984:	000defd0 	.word	0x000defd0

000d8988 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d8988:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d898a:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d898c:	6803      	ldr	r3, [r0, #0]
   d898e:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d8990:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d8992:	d00c      	beq.n	d89ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d8994:	b114      	cbz	r4, d899c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d8996:	6863      	ldr	r3, [r4, #4]
   d8998:	3301      	adds	r3, #1
   d899a:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d899c:	6828      	ldr	r0, [r5, #0]
   d899e:	b128      	cbz	r0, d89ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d89a0:	6843      	ldr	r3, [r0, #4]
   d89a2:	3b01      	subs	r3, #1
   d89a4:	6043      	str	r3, [r0, #4]
   d89a6:	b90b      	cbnz	r3, d89ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d89a8:	f7ff fbb6 	bl	d8118 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d89ac:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d89ae:	4628      	mov	r0, r5
   d89b0:	bd38      	pop	{r3, r4, r5, pc}

000d89b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d89b2:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d89b4:	b570      	push	{r4, r5, r6, lr}
   d89b6:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d89b8:	d91a      	bls.n	d89f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d89ba:	4290      	cmp	r0, r2
   d89bc:	d219      	bcs.n	d89f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d89be:	f1a1 0608 	sub.w	r6, r1, #8
   d89c2:	1a51      	subs	r1, r2, r1
   d89c4:	3904      	subs	r1, #4
   d89c6:	1f15      	subs	r5, r2, #4
   d89c8:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d89ca:	1f2b      	subs	r3, r5, #4
   d89cc:	429e      	cmp	r6, r3
   d89ce:	d025      	beq.n	d8a1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d89d0:	2c04      	cmp	r4, #4
   d89d2:	d007      	beq.n	d89e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d89d4:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d89d8:	f844 3c04 	str.w	r3, [r4, #-4]
   d89dc:	4629      	mov	r1, r5
   d89de:	4620      	mov	r0, r4
   d89e0:	f7ff ff1a 	bl	d8818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d89e4:	4628      	mov	r0, r5
   d89e6:	f7fb fe45 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d89ea:	3d08      	subs	r5, #8
   d89ec:	3c08      	subs	r4, #8
   d89ee:	e7ec      	b.n	d89ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d89f0:	d014      	beq.n	d8a1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d89f2:	1d0c      	adds	r4, r1, #4
   d89f4:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d89f6:	1f23      	subs	r3, r4, #4
   d89f8:	429d      	cmp	r5, r3
   d89fa:	d00f      	beq.n	d8a1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d89fc:	2e04      	cmp	r6, #4
   d89fe:	d007      	beq.n	d8a10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8a00:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d8a04:	f846 3c04 	str.w	r3, [r6, #-4]
   d8a08:	4621      	mov	r1, r4
   d8a0a:	4630      	mov	r0, r6
   d8a0c:	f7ff ff04 	bl	d8818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8a10:	4620      	mov	r0, r4
   d8a12:	f7fb fe2f 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8a16:	3408      	adds	r4, #8
   d8a18:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d8a1a:	e7ec      	b.n	d89f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d8a1c:	bd70      	pop	{r4, r5, r6, pc}

000d8a1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d8a22:	6804      	ldr	r4, [r0, #0]
   d8a24:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8a26:	4605      	mov	r5, r0
   d8a28:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d8a2a:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d8a2e:	42a7      	cmp	r7, r4
   d8a30:	d018      	beq.n	d8a64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d8a32:	4641      	mov	r1, r8
   d8a34:	4620      	mov	r0, r4
   d8a36:	f7ff fe07 	bl	d8648 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d8a3a:	4606      	mov	r6, r0
   d8a3c:	b908      	cbnz	r0, d8a42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d8a3e:	3408      	adds	r4, #8
   d8a40:	e7f5      	b.n	d8a2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d8a42:	b18c      	cbz	r4, d8a68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d8a44:	1d20      	adds	r0, r4, #4
   d8a46:	f7fb fe15 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d8a4a:	682b      	ldr	r3, [r5, #0]
   d8a4c:	686a      	ldr	r2, [r5, #4]
   d8a4e:	f104 0108 	add.w	r1, r4, #8
   d8a52:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d8a56:	4620      	mov	r0, r4
   d8a58:	f7ff ffab 	bl	d89b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d8a5c:	686b      	ldr	r3, [r5, #4]
   d8a5e:	3b01      	subs	r3, #1
   d8a60:	606b      	str	r3, [r5, #4]
    return true;
   d8a62:	e002      	b.n	d8a6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d8a64:	2600      	movs	r6, #0
   d8a66:	e000      	b.n	d8a6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d8a68:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d8a6a:	4630      	mov	r0, r6
   d8a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8a70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d8a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8a72:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8a74:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d8a78:	6847      	ldr	r7, [r0, #4]
   d8a7a:	9300      	str	r3, [sp, #0]
   d8a7c:	a801      	add	r0, sp, #4
   d8a7e:	f7ff fecb 	bl	d8818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8a82:	6866      	ldr	r6, [r4, #4]
   d8a84:	68a3      	ldr	r3, [r4, #8]
   d8a86:	429e      	cmp	r6, r3
   d8a88:	db14      	blt.n	d8ab4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d8a8a:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d8a8c:	2e00      	cmp	r6, #0
   d8a8e:	dd0b      	ble.n	d8aa8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d8a90:	00f0      	lsls	r0, r6, #3
   d8a92:	f7ff facf 	bl	d8034 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d8a96:	4605      	mov	r5, r0
   d8a98:	b318      	cbz	r0, d8ae2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d8a9a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d8a9e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d8aa2:	f7ff ff86 	bl	d89b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d8aa6:	e000      	b.n	d8aaa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d8aa8:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8aaa:	6820      	ldr	r0, [r4, #0]
   d8aac:	f7ff faca 	bl	d8044 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d8ab0:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d8ab2:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8ab4:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d8ab6:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8ab8:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d8abc:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d8ac0:	4629      	mov	r1, r5
   d8ac2:	f105 0008 	add.w	r0, r5, #8
   d8ac6:	f7ff ff74 	bl	d89b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d8aca:	b135      	cbz	r5, d8ada <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d8acc:	9b00      	ldr	r3, [sp, #0]
   d8ace:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d8ad2:	a901      	add	r1, sp, #4
   d8ad4:	1d28      	adds	r0, r5, #4
   d8ad6:	f7ff fe9f 	bl	d8818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d8ada:	6863      	ldr	r3, [r4, #4]
   d8adc:	3301      	adds	r3, #1
   d8ade:	6063      	str	r3, [r4, #4]
   d8ae0:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8ae2:	a801      	add	r0, sp, #4
   d8ae4:	f7fb fdc6 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d8ae8:	4628      	mov	r0, r5
   d8aea:	b003      	add	sp, #12
   d8aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d8af0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d8af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8af4:	4604      	mov	r4, r0
   d8af6:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d8af8:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d8afa:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d8afc:	f7ff fb32 	bl	d8164 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d8b00:	6823      	ldr	r3, [r4, #0]
   d8b02:	2b03      	cmp	r3, #3
   d8b04:	d002      	beq.n	d8b0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d8b06:	2b04      	cmp	r3, #4
   d8b08:	d042      	beq.n	d8b90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d8b0a:	e087      	b.n	d8c1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d8b0c:	a804      	add	r0, sp, #16
   d8b0e:	f7ff ff03 	bl	d8918 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d8b12:	9b04      	ldr	r3, [sp, #16]
   d8b14:	8922      	ldrh	r2, [r4, #8]
   d8b16:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d8b18:	6862      	ldr	r2, [r4, #4]
   d8b1a:	9904      	ldr	r1, [sp, #16]
   d8b1c:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d8b20:	f8c1 3002 	str.w	r3, [r1, #2]
   d8b24:	6853      	ldr	r3, [r2, #4]
   d8b26:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8b2a:	a807      	add	r0, sp, #28
   d8b2c:	9b04      	ldr	r3, [sp, #16]
   d8b2e:	9306      	str	r3, [sp, #24]
   d8b30:	a905      	add	r1, sp, #20
   d8b32:	f7ff fe71 	bl	d8818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d8b36:	a906      	add	r1, sp, #24
   d8b38:	f105 0018 	add.w	r0, r5, #24
   d8b3c:	f7ff ff98 	bl	d8a70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d8b40:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8b42:	a807      	add	r0, sp, #28
   d8b44:	f7fb fd96 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b48:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d8b4a:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d8b4c:	b974      	cbnz	r4, d8b6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d8b4e:	4b36      	ldr	r3, [pc, #216]	; (d8c28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d8b50:	9300      	str	r3, [sp, #0]
   d8b52:	aa06      	add	r2, sp, #24
   d8b54:	4623      	mov	r3, r4
   d8b56:	4935      	ldr	r1, [pc, #212]	; (d8c2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d8b58:	9407      	str	r4, [sp, #28]
   d8b5a:	2032      	movs	r0, #50	; 0x32
   d8b5c:	f7ff f994 	bl	d7e88 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d8b60:	9b04      	ldr	r3, [sp, #16]
   d8b62:	4621      	mov	r1, r4
   d8b64:	8818      	ldrh	r0, [r3, #0]
   d8b66:	f7fe ff05 	bl	d7974 <hal_ble_gap_disconnect>
   d8b6a:	e00d      	b.n	d8b88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d8b6c:	4a30      	ldr	r2, [pc, #192]	; (d8c30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d8b6e:	9200      	str	r2, [sp, #0]
   d8b70:	2300      	movs	r3, #0
   d8b72:	aa06      	add	r2, sp, #24
   d8b74:	492d      	ldr	r1, [pc, #180]	; (d8c2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d8b76:	9307      	str	r3, [sp, #28]
   d8b78:	2001      	movs	r0, #1
   d8b7a:	f7ff f985 	bl	d7e88 <log_message>
                if (impl->connectedCb_) {
   d8b7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d8b80:	b113      	cbz	r3, d8b88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d8b82:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d8b84:	a804      	add	r0, sp, #16
   d8b86:	4798      	blx	r3
   d8b88:	a805      	add	r0, sp, #20
   d8b8a:	f7fb fd73 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b8e:	e045      	b.n	d8c1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d8b90:	8921      	ldrh	r1, [r4, #8]
   d8b92:	4628      	mov	r0, r5
   d8b94:	f7ff fcdc 	bl	d8550 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d8b98:	4607      	mov	r7, r0
   d8b9a:	2800      	cmp	r0, #0
   d8b9c:	d03e      	beq.n	d8c1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d8b9e:	6804      	ldr	r4, [r0, #0]
   d8ba0:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8ba2:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d8ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d8ba8:	8022      	strh	r2, [r4, #0]
   d8baa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d8bae:	4299      	cmp	r1, r3
   d8bb0:	d003      	beq.n	d8bba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d8bb2:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d8bb6:	8042      	strh	r2, [r0, #2]
   d8bb8:	e7f9      	b.n	d8bae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d8bba:	68e6      	ldr	r6, [r4, #12]
   d8bbc:	6923      	ldr	r3, [r4, #16]
   d8bbe:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8bc2:	45b0      	cmp	r8, r6
   d8bc4:	d004      	beq.n	d8bd0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d8bc6:	1d30      	adds	r0, r6, #4
   d8bc8:	f7fb fd54 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8bcc:	3608      	adds	r6, #8
   d8bce:	e7f8      	b.n	d8bc2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d8bd0:	2300      	movs	r3, #0
   d8bd2:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d8bd4:	69a6      	ldr	r6, [r4, #24]
   d8bd6:	69e3      	ldr	r3, [r4, #28]
   d8bd8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8bdc:	45b0      	cmp	r8, r6
   d8bde:	d004      	beq.n	d8bea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d8be0:	1d30      	adds	r0, r6, #4
   d8be2:	f7fb fd47 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8be6:	3608      	adds	r6, #8
   d8be8:	e7f8      	b.n	d8bdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d8bea:	2300      	movs	r3, #0
   d8bec:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d8bee:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d8bf0:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d8bf2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d8bf4:	b113      	cbz	r3, d8bfc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d8bf6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d8bf8:	4638      	mov	r0, r7
   d8bfa:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d8bfc:	2320      	movs	r3, #32
   d8bfe:	4a0d      	ldr	r2, [pc, #52]	; (d8c34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d8c00:	9306      	str	r3, [sp, #24]
   d8c02:	9200      	str	r2, [sp, #0]
   d8c04:	2300      	movs	r3, #0
   d8c06:	4909      	ldr	r1, [pc, #36]	; (d8c2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d8c08:	9307      	str	r3, [sp, #28]
   d8c0a:	2001      	movs	r0, #1
   d8c0c:	aa06      	add	r2, sp, #24
   d8c0e:	f7ff f93b 	bl	d7e88 <log_message>
                    impl->peers_.removeOne(*peer);
   d8c12:	4639      	mov	r1, r7
   d8c14:	f105 0018 	add.w	r0, r5, #24
   d8c18:	f7ff ff01 	bl	d8a1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d8c1c:	a803      	add	r0, sp, #12
   d8c1e:	f7ff faaf 	bl	d8180 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d8c22:	b00e      	add	sp, #56	; 0x38
   d8c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8c28:	000df056 	.word	0x000df056
   d8c2c:	000deff4 	.word	0x000deff4
   d8c30:	000df07c 	.word	0x000df07c
   d8c34:	000df099 	.word	0x000df099

000d8c38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d8c38:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d8c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8c3c:	4606      	mov	r6, r0
   d8c3e:	460c      	mov	r4, r1
   d8c40:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d8c42:	d914      	bls.n	d8c6e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d8c44:	4290      	cmp	r0, r2
   d8c46:	d213      	bcs.n	d8c70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d8c48:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d8c4c:	1a6c      	subs	r4, r5, r1
   d8c4e:	f1a1 0708 	sub.w	r7, r1, #8
   d8c52:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d8c54:	42af      	cmp	r7, r5
   d8c56:	d018      	beq.n	d8c8a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d8c58:	b11c      	cbz	r4, d8c62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d8c5a:	4629      	mov	r1, r5
   d8c5c:	4620      	mov	r0, r4
   d8c5e:	f7ff fdf0 	bl	d8842 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d8c62:	1d28      	adds	r0, r5, #4
   d8c64:	f7fb fd06 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d8c68:	3d08      	subs	r5, #8
   d8c6a:	3c08      	subs	r4, #8
   d8c6c:	e7f2      	b.n	d8c54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d8c6e:	d00c      	beq.n	d8c8a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d8c70:	42ac      	cmp	r4, r5
   d8c72:	d00a      	beq.n	d8c8a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d8c74:	b11e      	cbz	r6, d8c7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d8c76:	4621      	mov	r1, r4
   d8c78:	4630      	mov	r0, r6
   d8c7a:	f7ff fde2 	bl	d8842 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d8c7e:	1d20      	adds	r0, r4, #4
   d8c80:	f7fb fcf8 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d8c84:	3408      	adds	r4, #8
   d8c86:	3608      	adds	r6, #8
   d8c88:	e7f2      	b.n	d8c70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d8c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8c8c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d8c8c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d8c8e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d8c90:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d8c92:	dd0b      	ble.n	d8cac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d8c94:	00f0      	lsls	r0, r6, #3
   d8c96:	f7ff f9cd 	bl	d8034 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d8c9a:	4604      	mov	r4, r0
   d8c9c:	b170      	cbz	r0, d8cbc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d8c9e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d8ca2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d8ca6:	f7ff ffc7 	bl	d8c38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d8caa:	e000      	b.n	d8cae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d8cac:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8cae:	6828      	ldr	r0, [r5, #0]
   d8cb0:	f7ff f9c8 	bl	d8044 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d8cb4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d8cb6:	60ae      	str	r6, [r5, #8]
        return true;
   d8cb8:	2001      	movs	r0, #1
   d8cba:	bd70      	pop	{r4, r5, r6, pc}
    }
   d8cbc:	bd70      	pop	{r4, r5, r6, pc}

000d8cbe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d8cbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8cc0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d8cc2:	6845      	ldr	r5, [r0, #4]
   d8cc4:	4668      	mov	r0, sp
   d8cc6:	f7ff fdbc 	bl	d8842 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8cca:	6861      	ldr	r1, [r4, #4]
   d8ccc:	68a3      	ldr	r3, [r4, #8]
   d8cce:	4299      	cmp	r1, r3
   d8cd0:	db05      	blt.n	d8cde <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d8cd2:	3101      	adds	r1, #1
   d8cd4:	4620      	mov	r0, r4
   d8cd6:	f7ff ffd9 	bl	d8c8c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d8cda:	4606      	mov	r6, r0
   d8cdc:	b198      	cbz	r0, d8d06 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d8cde:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d8ce0:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8ce2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d8ce6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d8cea:	4629      	mov	r1, r5
   d8cec:	f105 0008 	add.w	r0, r5, #8
   d8cf0:	f7ff ffa2 	bl	d8c38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d8cf4:	b11d      	cbz	r5, d8cfe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d8cf6:	4669      	mov	r1, sp
   d8cf8:	4628      	mov	r0, r5
   d8cfa:	f7ff fda2 	bl	d8842 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d8cfe:	6863      	ldr	r3, [r4, #4]
   d8d00:	3301      	adds	r3, #1
   d8d02:	6063      	str	r3, [r4, #4]
   d8d04:	2601      	movs	r6, #1
   d8d06:	a801      	add	r0, sp, #4
   d8d08:	f7fb fcb4 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d8d0c:	4630      	mov	r0, r6
   d8d0e:	b002      	add	sp, #8
   d8d10:	bd70      	pop	{r4, r5, r6, pc}

000d8d12 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d8d12:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d8d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8d16:	4606      	mov	r6, r0
   d8d18:	460c      	mov	r4, r1
   d8d1a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d8d1c:	d914      	bls.n	d8d48 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d8d1e:	4290      	cmp	r0, r2
   d8d20:	d213      	bcs.n	d8d4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d8d22:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d8d26:	1a6c      	subs	r4, r5, r1
   d8d28:	f1a1 0708 	sub.w	r7, r1, #8
   d8d2c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d8d2e:	42af      	cmp	r7, r5
   d8d30:	d018      	beq.n	d8d64 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d8d32:	b11c      	cbz	r4, d8d3c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d8d34:	4629      	mov	r1, r5
   d8d36:	4620      	mov	r0, r4
   d8d38:	f7ff fd75 	bl	d8826 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d8d3c:	1d28      	adds	r0, r5, #4
   d8d3e:	f7fb fc99 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d8d42:	3d08      	subs	r5, #8
   d8d44:	3c08      	subs	r4, #8
   d8d46:	e7f2      	b.n	d8d2e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d8d48:	d00c      	beq.n	d8d64 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d8d4a:	42ac      	cmp	r4, r5
   d8d4c:	d00a      	beq.n	d8d64 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d8d4e:	b11e      	cbz	r6, d8d58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d8d50:	4621      	mov	r1, r4
   d8d52:	4630      	mov	r0, r6
   d8d54:	f7ff fd67 	bl	d8826 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d8d58:	1d20      	adds	r0, r4, #4
   d8d5a:	f7fb fc8b 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d8d5e:	3408      	adds	r4, #8
   d8d60:	3608      	adds	r6, #8
   d8d62:	e7f2      	b.n	d8d4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d8d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8d66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d8d66:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d8d68:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d8d6a:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d8d6c:	dd0b      	ble.n	d8d86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d8d6e:	00f0      	lsls	r0, r6, #3
   d8d70:	f7ff f960 	bl	d8034 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d8d74:	4604      	mov	r4, r0
   d8d76:	b170      	cbz	r0, d8d96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d8d78:	e895 0006 	ldmia.w	r5, {r1, r2}
   d8d7c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d8d80:	f7ff ffc7 	bl	d8d12 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d8d84:	e000      	b.n	d8d88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d8d86:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8d88:	6828      	ldr	r0, [r5, #0]
   d8d8a:	f7ff f95b 	bl	d8044 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d8d8e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d8d90:	60ae      	str	r6, [r5, #8]
        return true;
   d8d92:	2001      	movs	r0, #1
   d8d94:	bd70      	pop	{r4, r5, r6, pc}
    }
   d8d96:	bd70      	pop	{r4, r5, r6, pc}

000d8d98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d8d98:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8d9a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d8d9c:	6845      	ldr	r5, [r0, #4]
   d8d9e:	4668      	mov	r0, sp
   d8da0:	f7ff fd41 	bl	d8826 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8da4:	6861      	ldr	r1, [r4, #4]
   d8da6:	68a3      	ldr	r3, [r4, #8]
   d8da8:	4299      	cmp	r1, r3
   d8daa:	db05      	blt.n	d8db8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d8dac:	3101      	adds	r1, #1
   d8dae:	4620      	mov	r0, r4
   d8db0:	f7ff ffd9 	bl	d8d66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d8db4:	4606      	mov	r6, r0
   d8db6:	b198      	cbz	r0, d8de0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d8db8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d8dba:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8dbc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d8dc0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d8dc4:	4629      	mov	r1, r5
   d8dc6:	f105 0008 	add.w	r0, r5, #8
   d8dca:	f7ff ffa2 	bl	d8d12 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d8dce:	b11d      	cbz	r5, d8dd8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d8dd0:	4669      	mov	r1, sp
   d8dd2:	4628      	mov	r0, r5
   d8dd4:	f7ff fd27 	bl	d8826 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d8dd8:	6863      	ldr	r3, [r4, #4]
   d8dda:	3301      	adds	r3, #1
   d8ddc:	6063      	str	r3, [r4, #4]
   d8dde:	2601      	movs	r6, #1
   d8de0:	a801      	add	r0, sp, #4
   d8de2:	f7fb fc47 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d8de6:	4630      	mov	r0, r6
   d8de8:	b002      	add	sp, #8
   d8dea:	bd70      	pop	{r4, r5, r6, pc}

000d8dec <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d8dec:	b510      	push	{r4, lr}
   d8dee:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d8df0:	6840      	ldr	r0, [r0, #4]
   d8df2:	b108      	cbz	r0, d8df8 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8df4:	f7fb f953 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d8df8:	4620      	mov	r0, r4
   d8dfa:	bd10      	pop	{r4, pc}

000d8dfc <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8dfc:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8dfe:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d8e00:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d8e02:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d8e06:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d8e0a:	f002 f8ad 	bl	daf68 <_ZN6StringD1Ev>
   d8e0e:	4668      	mov	r0, sp
   d8e10:	f7ff ffec 	bl	d8dec <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8e14:	b003      	add	sp, #12
   d8e16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8e1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d8e1c:	b538      	push	{r3, r4, r5, lr}
   d8e1e:	2300      	movs	r3, #0
   d8e20:	4604      	mov	r4, r0
   d8e22:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8e24:	2014      	movs	r0, #20
   d8e26:	460d      	mov	r5, r1
   d8e28:	f7fb f937 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8e2c:	b128      	cbz	r0, d8e3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8e2e:	2301      	movs	r3, #1
   d8e30:	6043      	str	r3, [r0, #4]
   d8e32:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8e34:	4b02      	ldr	r3, [pc, #8]	; (d8e40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d8e36:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8e38:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d8e3a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d8e3c:	4620      	mov	r0, r4
   d8e3e:	bd38      	pop	{r3, r4, r5, pc}
   d8e40:	000def98 	.word	0x000def98

000d8e44 <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d8e44:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8e46:	2500      	movs	r5, #0
   d8e48:	b086      	sub	sp, #24
   d8e4a:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8e4c:	6045      	str	r5, [r0, #4]
   d8e4e:	4604      	mov	r4, r0
   d8e50:	2054      	movs	r0, #84	; 0x54
   d8e52:	f7fb f922 	bl	d409a <_Znwj>
   d8e56:	f8cd d010 	str.w	sp, [sp, #16]
   d8e5a:	4606      	mov	r6, r0
   d8e5c:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8e5e:	b108      	cbz	r0, d8e64 <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d8e60:	f7ff fb56 	bl	d8510 <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8e64:	4631      	mov	r1, r6
   d8e66:	ab01      	add	r3, sp, #4
   d8e68:	aa02      	add	r2, sp, #8
   d8e6a:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d8e6c:	9505      	str	r5, [sp, #20]
   d8e6e:	f7ff ffd5 	bl	d8e1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8e72:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d8e74:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8e76:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8e78:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8e7a:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8e7c:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8e7e:	f7fb fbf9 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d8e82:	a804      	add	r0, sp, #16
   d8e84:	f7ff ffb2 	bl	d8dec <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d8e88:	6823      	ldr	r3, [r4, #0]
   d8e8a:	b90b      	cbnz	r3, d8e90 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d8e8c:	f7ff f93a 	bl	d8104 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d8e90:	4620      	mov	r0, r4
   d8e92:	b006      	add	sp, #24
   d8e94:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8e98 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d8e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8e9c:	b088      	sub	sp, #32
   d8e9e:	4605      	mov	r5, r0
   d8ea0:	461e      	mov	r6, r3
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8ea2:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8ea4:	2300      	movs	r3, #0
   d8ea6:	460f      	mov	r7, r1
   d8ea8:	4690      	mov	r8, r2
   d8eaa:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8eac:	9305      	str	r3, [sp, #20]
   d8eae:	f7fb f8f4 	bl	d409a <_Znwj>
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d8eb2:	f8cd d018 	str.w	sp, [sp, #24]
   d8eb6:	4604      	mov	r4, r0
   d8eb8:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8eba:	b1c0      	cbz	r0, d8eee <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x56>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d8ebc:	f898 8000 	ldrb.w	r8, [r8]
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d8ec0:	f7ff fb26 	bl	d8510 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d8ec4:	4639      	mov	r1, r7
   d8ec6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d8eca:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d8ece:	f002 f8bf 	bl	db050 <_ZN6StringaSEPKc>
        callback_ = callback;
   d8ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8ed4:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d8ed6:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d8ed8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d8eda:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d8edc:	f104 0014 	add.w	r0, r4, #20
   d8ee0:	f7ff f9dc 	bl	d829c <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d8ee4:	990e      	ldr	r1, [sp, #56]	; 0x38
   d8ee6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d8eea:	f7ff f9d7 	bl	d829c <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8eee:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d8ef0:	2600      	movs	r6, #0
   d8ef2:	ab01      	add	r3, sp, #4
   d8ef4:	aa02      	add	r2, sp, #8
   d8ef6:	a803      	add	r0, sp, #12
   d8ef8:	9607      	str	r6, [sp, #28]
   d8efa:	f7ff ff8f 	bl	d8e1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8efe:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d8f00:	9a05      	ldr	r2, [sp, #20]
   d8f02:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8f04:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8f06:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8f08:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8f0a:	f7fb fbb3 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d8f0e:	a806      	add	r0, sp, #24
   d8f10:	f7ff ff6c 	bl	d8dec <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8f14:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8f16:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8f18:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d8f1a:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8f1c:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8f1e:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8f20:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d8f22:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d8f24:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8f28:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8f2a:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8f2c:	f7fb fba2 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8f30:	a805      	add	r0, sp, #20
   d8f32:	f7fb fb9f 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d8f36:	6829      	ldr	r1, [r5, #0]
   d8f38:	b919      	cbnz	r1, d8f42 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xaa>
        SPARK_ASSERT(false);
   d8f3a:	4a03      	ldr	r2, [pc, #12]	; (d8f48 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xb0>)
   d8f3c:	200a      	movs	r0, #10
   d8f3e:	f7fe ff9b 	bl	d7e78 <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d8f42:	b008      	add	sp, #32
   d8f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8f48:	000d7b19 	.word	0x000d7b19

000d8f4c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d8f4c:	b510      	push	{r4, lr}
   d8f4e:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d8f50:	6840      	ldr	r0, [r0, #4]
   d8f52:	b108      	cbz	r0, d8f58 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8f54:	f7fb f8a3 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d8f58:	4620      	mov	r0, r4
   d8f5a:	bd10      	pop	{r4, pc}

000d8f5c <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8f5c:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8f5e:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d8f60:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d8f62:	e88d 0009 	stmia.w	sp, {r0, r3}
   d8f66:	4668      	mov	r0, sp
   d8f68:	f7ff fff0 	bl	d8f4c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8f6c:	b003      	add	sp, #12
   d8f6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d8f74:	b538      	push	{r3, r4, r5, lr}
   d8f76:	2300      	movs	r3, #0
   d8f78:	4604      	mov	r4, r0
   d8f7a:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8f7c:	2014      	movs	r0, #20
   d8f7e:	460d      	mov	r5, r1
   d8f80:	f7fb f88b 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8f84:	b128      	cbz	r0, d8f92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8f86:	2301      	movs	r3, #1
   d8f88:	6043      	str	r3, [r0, #4]
   d8f8a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8f8c:	4b02      	ldr	r3, [pc, #8]	; (d8f98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d8f8e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8f90:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d8f92:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d8f94:	4620      	mov	r0, r4
   d8f96:	bd38      	pop	{r3, r4, r5, pc}
   d8f98:	000defb4 	.word	0x000defb4

000d8f9c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d8f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8f9e:	2600      	movs	r6, #0
   d8fa0:	b087      	sub	sp, #28
   d8fa2:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8fa4:	6046      	str	r6, [r0, #4]
   d8fa6:	4604      	mov	r4, r0
   d8fa8:	2018      	movs	r0, #24
   d8faa:	460f      	mov	r7, r1
   d8fac:	f7fb f875 	bl	d409a <_Znwj>
   d8fb0:	f8cd d010 	str.w	sp, [sp, #16]
   d8fb4:	4605      	mov	r5, r0
   d8fb6:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8fb8:	b138      	cbz	r0, d8fca <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d8fba:	f7ff f8ff 	bl	d81bc <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d8fbe:	4639      	mov	r1, r7
   d8fc0:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d8fc2:	82ae      	strh	r6, [r5, #20]
   d8fc4:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d8fc6:	f7ff f969 	bl	d829c <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d8fca:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8fcc:	4629      	mov	r1, r5
   d8fce:	9305      	str	r3, [sp, #20]
   d8fd0:	aa02      	add	r2, sp, #8
   d8fd2:	ab01      	add	r3, sp, #4
   d8fd4:	a803      	add	r0, sp, #12
   d8fd6:	f7ff ffcd 	bl	d8f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8fda:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d8fdc:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8fde:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8fe0:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8fe2:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8fe4:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8fe6:	f7fb fb45 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d8fea:	a804      	add	r0, sp, #16
   d8fec:	f7ff ffae 	bl	d8f4c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d8ff0:	6823      	ldr	r3, [r4, #0]
   d8ff2:	b90b      	cbnz	r3, d8ff8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d8ff4:	f7ff f886 	bl	d8104 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d8ff8:	4620      	mov	r0, r4
   d8ffa:	b007      	add	sp, #28
   d8ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d9000 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d9000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9004:	4617      	mov	r7, r2
   d9006:	b0a1      	sub	sp, #132	; 0x84
   d9008:	4680      	mov	r8, r0
    WiringBleLock lk;
   d900a:	a80a      	add	r0, sp, #40	; 0x28
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d900c:	460e      	mov	r6, r1
    WiringBleLock lk;
   d900e:	f7ff f8a9 	bl	d8164 <_ZN8particle3ble13WiringBleLockC1Ev>
   d9012:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d9014:	7923      	ldrb	r3, [r4, #4]
   d9016:	2b00      	cmp	r3, #0
   d9018:	f000 80de 	beq.w	d91d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d901c:	6833      	ldr	r3, [r6, #0]
   d901e:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d9020:	691b      	ldr	r3, [r3, #16]
   d9022:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d9026:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d9028:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d902c:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d9030:	9b03      	ldr	r3, [sp, #12]
   d9032:	42ab      	cmp	r3, r5
   d9034:	d023      	beq.n	d907e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d9036:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d903a:	4650      	mov	r0, sl
   d903c:	f109 0114 	add.w	r1, r9, #20
   d9040:	f7ff f946 	bl	d82d0 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d9044:	2800      	cmp	r0, #0
   d9046:	f000 80cc 	beq.w	d91e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d904a:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d904e:	4658      	mov	r0, fp
   d9050:	f7ff f93e 	bl	d82d0 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d9054:	2800      	cmp	r0, #0
   d9056:	f000 80c4 	beq.w	d91e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d905a:	6823      	ldr	r3, [r4, #0]
   d905c:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d9060:	f8d9 3000 	ldr.w	r3, [r9]
   d9064:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d9068:	4299      	cmp	r1, r3
   d906a:	f040 80ba 	bne.w	d91e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d906e:	2320      	movs	r3, #32
   d9070:	4a60      	ldr	r2, [pc, #384]	; (d91f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d9072:	9315      	str	r3, [sp, #84]	; 0x54
   d9074:	2300      	movs	r3, #0
   d9076:	9200      	str	r2, [sp, #0]
   d9078:	9316      	str	r3, [sp, #88]	; 0x58
   d907a:	aa15      	add	r2, sp, #84	; 0x54
   d907c:	e0a8      	b.n	d91d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d907e:	f104 0928 	add.w	r9, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d9082:	4648      	mov	r0, r9
   d9084:	f7ff f8d6 	bl	d8234 <_ZNK8particle7BleUuid7isValidEv>
   d9088:	b918      	cbnz	r0, d9092 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d908a:	495b      	ldr	r1, [pc, #364]	; (d91f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d908c:	4648      	mov	r0, r9
   d908e:	f7ff f912 	bl	d82b6 <_ZN8particle7BleUuidaSEPKh>
   d9092:	6833      	ldr	r3, [r6, #0]
   d9094:	681d      	ldr	r5, [r3, #0]
   d9096:	685b      	ldr	r3, [r3, #4]
   d9098:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d909c:	4555      	cmp	r5, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d909e:	4649      	mov	r1, r9
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d90a0:	d005      	beq.n	d90ae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d90a2:	6828      	ldr	r0, [r5, #0]
   d90a4:	f7ff f914 	bl	d82d0 <_ZNK8particle7BleUuideqERKS0_>
   d90a8:	bb58      	cbnz	r0, d9102 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x102>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d90aa:	3508      	adds	r5, #8
   d90ac:	e7f6      	b.n	d909c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d90ae:	a80b      	add	r0, sp, #44	; 0x2c
   d90b0:	f7ff ff74 	bl	d8f9c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d90b4:	4649      	mov	r1, r9
   d90b6:	a815      	add	r0, sp, #84	; 0x54
   d90b8:	f7ff f8ce 	bl	d8258 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d90bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d90be:	2300      	movs	r3, #0
   d90c0:	3214      	adds	r2, #20
   d90c2:	a915      	add	r1, sp, #84	; 0x54
   d90c4:	2001      	movs	r0, #1
   d90c6:	f7fe fc5f 	bl	d7988 <hal_ble_gatt_server_add_service>
   d90ca:	2800      	cmp	r0, #0
   d90cc:	d178      	bne.n	d91c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d90ce:	6835      	ldr	r5, [r6, #0]
   d90d0:	a90b      	add	r1, sp, #44	; 0x2c
   d90d2:	a80d      	add	r0, sp, #52	; 0x34
   d90d4:	f7ff fbb5 	bl	d8842 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d90d8:	4628      	mov	r0, r5
   d90da:	a90d      	add	r1, sp, #52	; 0x34
   d90dc:	f7ff fdef 	bl	d8cbe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d90e0:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d90e2:	a80e      	add	r0, sp, #56	; 0x38
   d90e4:	f7fb fac6 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d90e8:	2d00      	cmp	r5, #0
   d90ea:	d069      	beq.n	d91c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
   d90ec:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d90ee:	6855      	ldr	r5, [r2, #4]
   d90f0:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
   d90f4:	6815      	ldr	r5, [r2, #0]
   d90f6:	3b01      	subs	r3, #1
   d90f8:	a80c      	add	r0, sp, #48	; 0x30
   d90fa:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d90fe:	f7fb fab9 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d9102:	f104 0914 	add.w	r9, r4, #20
   d9106:	4648      	mov	r0, r9
   d9108:	f7ff f894 	bl	d8234 <_ZNK8particle7BleUuid7isValidEv>
   d910c:	b968      	cbnz	r0, d912a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x12a>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d910e:	4b3b      	ldr	r3, [pc, #236]	; (d91fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d9110:	4939      	ldr	r1, [pc, #228]	; (d91f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d9112:	881a      	ldrh	r2, [r3, #0]
   d9114:	3201      	adds	r2, #1
   d9116:	b292      	uxth	r2, r2
   d9118:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d911a:	a815      	add	r0, sp, #84	; 0x54
   d911c:	2301      	movs	r3, #1
   d911e:	f7ff f87e 	bl	d821e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d9122:	a915      	add	r1, sp, #84	; 0x54
   d9124:	4648      	mov	r0, r9
   d9126:	f7ff f8b9 	bl	d829c <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d912a:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d912e:	4652      	mov	r2, sl
   d9130:	2100      	movs	r1, #0
   d9132:	a815      	add	r0, sp, #84	; 0x54
   d9134:	f003 fa81 	bl	dc63a <memset>
    charInit.version = BLE_API_VERSION;
   d9138:	2301      	movs	r3, #1
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d913a:	4649      	mov	r1, r9
   d913c:	a804      	add	r0, sp, #16
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d913e:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    charInit.size = sizeof(hal_ble_char_init_t);
   d9142:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    charInit.uuid = charImpl->charUUID().halUUID();
   d9146:	f7ff f887 	bl	d8258 <_ZN8particle7BleUuid7halUUIDEv>
   d914a:	ab04      	add	r3, sp, #16
   d914c:	aa18      	add	r2, sp, #96	; 0x60
   d914e:	f10d 0c20 	add.w	ip, sp, #32
   d9152:	6818      	ldr	r0, [r3, #0]
   d9154:	6859      	ldr	r1, [r3, #4]
   d9156:	4696      	mov	lr, r2
   d9158:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d915c:	3308      	adds	r3, #8
   d915e:	4563      	cmp	r3, ip
   d9160:	4672      	mov	r2, lr
   d9162:	d1f6      	bne.n	d9152 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x152>
   d9164:	6818      	ldr	r0, [r3, #0]
   d9166:	f8ce 0000 	str.w	r0, [lr]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   d916a:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   d916c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d9170:	682b      	ldr	r3, [r5, #0]
   d9172:	8a9b      	ldrh	r3, [r3, #20]
   d9174:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d9178:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d917a:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d917c:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d917e:	4b20      	ldr	r3, [pc, #128]	; (d9200 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
   d9180:	931e      	str	r3, [sp, #120]	; 0x78
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d9182:	1da1      	adds	r1, r4, #6
   d9184:	a815      	add	r0, sp, #84	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d9186:	941f      	str	r4, [sp, #124]	; 0x7c
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d9188:	f7fe fc26 	bl	d79d8 <hal_ble_gatt_server_add_characteristic>
   d918c:	bb20      	cbnz	r0, d91d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        return characteristic;
    }
    charImpl->local() = true;
   d918e:	2301      	movs	r3, #1
   d9190:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d9192:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d9194:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d9196:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d9198:	a80d      	add	r0, sp, #52	; 0x34
   d919a:	f7ff fb44 	bl	d8826 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d919e:	4620      	mov	r0, r4
   d91a0:	a90d      	add	r1, sp, #52	; 0x34
   d91a2:	f7ff fdf9 	bl	d8d98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d91a6:	4604      	mov	r4, r0
   d91a8:	a80e      	add	r0, sp, #56	; 0x38
   d91aa:	f7fb fa63 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d91ae:	b99c      	cbnz	r4, d91d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        LOG(ERROR, "Failed to append local characteristic.");
   d91b0:	2320      	movs	r3, #32
   d91b2:	930d      	str	r3, [sp, #52]	; 0x34
   d91b4:	4b13      	ldr	r3, [pc, #76]	; (d9204 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d91b6:	9300      	str	r3, [sp, #0]
   d91b8:	940e      	str	r4, [sp, #56]	; 0x38
   d91ba:	4623      	mov	r3, r4
   d91bc:	aa0d      	add	r2, sp, #52	; 0x34
   d91be:	e007      	b.n	d91d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d91c0:	4639      	mov	r1, r7
   d91c2:	4640      	mov	r0, r8
   d91c4:	f7ff fb2f 	bl	d8826 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d91c8:	a80c      	add	r0, sp, #48	; 0x30
   d91ca:	f7fb fa53 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d91ce:	e00a      	b.n	d91e6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d91d0:	490d      	ldr	r1, [pc, #52]	; (d9208 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
   d91d2:	2032      	movs	r0, #50	; 0x32
   d91d4:	f7fe fe58 	bl	d7e88 <log_message>
            return characteristic;
   d91d8:	4639      	mov	r1, r7
   d91da:	4640      	mov	r0, r8
   d91dc:	f7ff fb23 	bl	d8826 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d91e0:	e001      	b.n	d91e6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
   d91e2:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d91e4:	e724      	b.n	d9030 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d91e6:	a80a      	add	r0, sp, #40	; 0x28
   d91e8:	f7fe ffca 	bl	d8180 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d91ec:	4640      	mov	r0, r8
   d91ee:	b021      	add	sp, #132	; 0x84
   d91f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d91f4:	000df169 	.word	0x000df169
   d91f8:	000defe4 	.word	0x000defe4
   d91fc:	2003e324 	.word	0x2003e324
   d9200:	000d8715 	.word	0x000d8715
   d9204:	000df142 	.word	0x000df142
   d9208:	000deff4 	.word	0x000deff4

000d920c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d920c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d920e:	4c06      	ldr	r4, [pc, #24]	; (d9228 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d9210:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d9212:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d9214:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d9216:	f7fe fc4f 	bl	d7ab8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d921a:	4620      	mov	r0, r4
   d921c:	4a03      	ldr	r2, [pc, #12]	; (d922c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d921e:	4904      	ldr	r1, [pc, #16]	; (d9230 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d9220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d9224:	f002 ba64 	b.w	db6f0 <__aeabi_atexit>
   d9228:	2003e328 	.word	0x2003e328
   d922c:	2003d468 	.word	0x2003d468
   d9230:	000d80f3 	.word	0x000d80f3

000d9234 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9234:	2200      	movs	r2, #0
   d9236:	4611      	mov	r1, r2
   d9238:	6840      	ldr	r0, [r0, #4]
   d923a:	f7fe bec3 	b.w	d7fc4 <network_ready>

000d923e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d923e:	2200      	movs	r2, #0
   d9240:	4611      	mov	r1, r2
   d9242:	6840      	ldr	r0, [r0, #4]
   d9244:	f7fe bede 	b.w	d8004 <network_listening>

000d9248 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9248:	2200      	movs	r2, #0
   d924a:	4611      	mov	r1, r2
   d924c:	6840      	ldr	r0, [r0, #4]
   d924e:	f7fe bee9 	b.w	d8024 <network_get_listen_timeout>

000d9252 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d9252:	2200      	movs	r2, #0
   d9254:	6840      	ldr	r0, [r0, #4]
   d9256:	f7fe bedd 	b.w	d8014 <network_set_listen_timeout>

000d925a <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d925a:	2200      	movs	r2, #0
   d925c:	f081 0101 	eor.w	r1, r1, #1
   d9260:	6840      	ldr	r0, [r0, #4]
   d9262:	f7fe bec7 	b.w	d7ff4 <network_listen>

000d9266 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d9266:	2300      	movs	r3, #0
   d9268:	461a      	mov	r2, r3
   d926a:	4619      	mov	r1, r3
   d926c:	6840      	ldr	r0, [r0, #4]
   d926e:	f7fe beb9 	b.w	d7fe4 <network_off>

000d9272 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d9272:	2300      	movs	r3, #0
   d9274:	461a      	mov	r2, r3
   d9276:	4619      	mov	r1, r3
   d9278:	6840      	ldr	r0, [r0, #4]
   d927a:	f7fe beab 	b.w	d7fd4 <network_on>

000d927e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d927e:	2200      	movs	r2, #0
   d9280:	4611      	mov	r1, r2
   d9282:	6840      	ldr	r0, [r0, #4]
   d9284:	f7fe be8e 	b.w	d7fa4 <network_connecting>

000d9288 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9288:	2200      	movs	r2, #0
   d928a:	2102      	movs	r1, #2
   d928c:	6840      	ldr	r0, [r0, #4]
   d928e:	f7fe be91 	b.w	d7fb4 <network_disconnect>

000d9292 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9292:	2300      	movs	r3, #0
   d9294:	461a      	mov	r2, r3
   d9296:	6840      	ldr	r0, [r0, #4]
   d9298:	f7fe be7c 	b.w	d7f94 <network_connect>

000d929c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d929c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d929e:	4c08      	ldr	r4, [pc, #32]	; (d92c0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d92a0:	2528      	movs	r5, #40	; 0x28
   d92a2:	462a      	mov	r2, r5
   d92a4:	2100      	movs	r1, #0
   d92a6:	4620      	mov	r0, r4
   d92a8:	f003 f9c7 	bl	dc63a <memset>
        cid = -1;
   d92ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d92b0:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d92b2:	4b04      	ldr	r3, [pc, #16]	; (d92c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d92b4:	8025      	strh	r5, [r4, #0]
   d92b6:	2204      	movs	r2, #4
   d92b8:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d92ba:	4a03      	ldr	r2, [pc, #12]	; (d92c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d92bc:	601a      	str	r2, [r3, #0]
   d92be:	bd38      	pop	{r3, r4, r5, pc}
   d92c0:	2003e334 	.word	0x2003e334
   d92c4:	2003e32c 	.word	0x2003e32c
   d92c8:	000df1ac 	.word	0x000df1ac

000d92cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d92cc:	2200      	movs	r2, #0
   d92ce:	4611      	mov	r1, r2
   d92d0:	6840      	ldr	r0, [r0, #4]
   d92d2:	f7fe be97 	b.w	d8004 <network_listening>

000d92d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d92d6:	2200      	movs	r2, #0
   d92d8:	4611      	mov	r1, r2
   d92da:	6840      	ldr	r0, [r0, #4]
   d92dc:	f7fe bea2 	b.w	d8024 <network_get_listen_timeout>

000d92e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d92e0:	2200      	movs	r2, #0
   d92e2:	6840      	ldr	r0, [r0, #4]
   d92e4:	f7fe be96 	b.w	d8014 <network_set_listen_timeout>

000d92e8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d92e8:	2200      	movs	r2, #0
   d92ea:	f081 0101 	eor.w	r1, r1, #1
   d92ee:	6840      	ldr	r0, [r0, #4]
   d92f0:	f7fe be80 	b.w	d7ff4 <network_listen>

000d92f4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d92f4:	2300      	movs	r3, #0
   d92f6:	461a      	mov	r2, r3
   d92f8:	4619      	mov	r1, r3
   d92fa:	6840      	ldr	r0, [r0, #4]
   d92fc:	f7fe be72 	b.w	d7fe4 <network_off>

000d9300 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d9300:	2300      	movs	r3, #0
   d9302:	461a      	mov	r2, r3
   d9304:	4619      	mov	r1, r3
   d9306:	6840      	ldr	r0, [r0, #4]
   d9308:	f7fe be64 	b.w	d7fd4 <network_on>

000d930c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d930c:	2200      	movs	r2, #0
   d930e:	4611      	mov	r1, r2
   d9310:	6840      	ldr	r0, [r0, #4]
   d9312:	f7fe be57 	b.w	d7fc4 <network_ready>

000d9316 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9316:	2200      	movs	r2, #0
   d9318:	4611      	mov	r1, r2
   d931a:	6840      	ldr	r0, [r0, #4]
   d931c:	f7fe be42 	b.w	d7fa4 <network_connecting>

000d9320 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9320:	2200      	movs	r2, #0
   d9322:	2102      	movs	r1, #2
   d9324:	6840      	ldr	r0, [r0, #4]
   d9326:	f7fe be45 	b.w	d7fb4 <network_disconnect>

000d932a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d932a:	2300      	movs	r3, #0
   d932c:	461a      	mov	r2, r3
   d932e:	6840      	ldr	r0, [r0, #4]
   d9330:	f7fe be30 	b.w	d7f94 <network_connect>

000d9334 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d9334:	4b02      	ldr	r3, [pc, #8]	; (d9340 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d9336:	2203      	movs	r2, #3
   d9338:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d933a:	4a02      	ldr	r2, [pc, #8]	; (d9344 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d933c:	601a      	str	r2, [r3, #0]
   d933e:	4770      	bx	lr
   d9340:	2003e35c 	.word	0x2003e35c
   d9344:	000df1e0 	.word	0x000df1e0

000d9348 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d9348:	4770      	bx	lr

000d934a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d934a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d934c:	4606      	mov	r6, r0
   d934e:	4615      	mov	r5, r2
   d9350:	460c      	mov	r4, r1
   d9352:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9354:	42bc      	cmp	r4, r7
   d9356:	d006      	beq.n	d9366 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9358:	6833      	ldr	r3, [r6, #0]
   d935a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d935e:	689b      	ldr	r3, [r3, #8]
   d9360:	4630      	mov	r0, r6
   d9362:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9364:	e7f6      	b.n	d9354 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d9366:	4628      	mov	r0, r5
   d9368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d936a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d936a:	2200      	movs	r2, #0
   d936c:	7c00      	ldrb	r0, [r0, #16]
   d936e:	f7fe bc3b 	b.w	d7be8 <HAL_I2C_Write_Data>

000d9372 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d9372:	2100      	movs	r1, #0
   d9374:	7c00      	ldrb	r0, [r0, #16]
   d9376:	f7fe bc3f 	b.w	d7bf8 <HAL_I2C_Available_Data>

000d937a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d937a:	2100      	movs	r1, #0
   d937c:	7c00      	ldrb	r0, [r0, #16]
   d937e:	f7fe bc43 	b.w	d7c08 <HAL_I2C_Read_Data>

000d9382 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d9382:	2100      	movs	r1, #0
   d9384:	7c00      	ldrb	r0, [r0, #16]
   d9386:	f7fe bc47 	b.w	d7c18 <HAL_I2C_Peek_Data>

000d938a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d938a:	2100      	movs	r1, #0
   d938c:	7c00      	ldrb	r0, [r0, #16]
   d938e:	f7fe bc4b 	b.w	d7c28 <HAL_I2C_Flush_Data>

000d9392 <_ZN7TwoWireD0Ev>:
   d9392:	b510      	push	{r4, lr}
   d9394:	2114      	movs	r1, #20
   d9396:	4604      	mov	r4, r0
   d9398:	f002 f9af 	bl	db6fa <_ZdlPvj>
   d939c:	4620      	mov	r0, r4
   d939e:	bd10      	pop	{r4, pc}

000d93a0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d93a0:	b510      	push	{r4, lr}
   d93a2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d93a4:	2300      	movs	r3, #0
   d93a6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d93a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d93ac:	60a3      	str	r3, [r4, #8]
   d93ae:	4b04      	ldr	r3, [pc, #16]	; (d93c0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d93b0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d93b2:	4608      	mov	r0, r1
   d93b4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d93b6:	4611      	mov	r1, r2
   d93b8:	f7fe fc46 	bl	d7c48 <HAL_I2C_Init>
}
   d93bc:	4620      	mov	r0, r4
   d93be:	bd10      	pop	{r4, pc}
   d93c0:	000df214 	.word	0x000df214

000d93c4 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   d93c4:	2200      	movs	r2, #0
   d93c6:	7c00      	ldrb	r0, [r0, #16]
   d93c8:	f7fe bbee 	b.w	d7ba8 <HAL_I2C_Set_Speed>

000d93cc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d93cc:	2300      	movs	r3, #0
   d93ce:	461a      	mov	r2, r3
   d93d0:	4619      	mov	r1, r3
   d93d2:	7c00      	ldrb	r0, [r0, #16]
   d93d4:	f7fe bbf0 	b.w	d7bb8 <HAL_I2C_Begin>

000d93d8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d93d8:	b570      	push	{r4, r5, r6, lr}
   d93da:	460c      	mov	r4, r1
   d93dc:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d93de:	2514      	movs	r5, #20
   d93e0:	4606      	mov	r6, r0
   d93e2:	462a      	mov	r2, r5
   d93e4:	2100      	movs	r1, #0
   d93e6:	a801      	add	r0, sp, #4
   d93e8:	f003 f927 	bl	dc63a <memset>
   d93ec:	7823      	ldrb	r3, [r4, #0]
   d93ee:	f88d 3008 	strb.w	r3, [sp, #8]
   d93f2:	6863      	ldr	r3, [r4, #4]
   d93f4:	9303      	str	r3, [sp, #12]
   d93f6:	68e3      	ldr	r3, [r4, #12]
   d93f8:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d93fa:	2200      	movs	r2, #0
   d93fc:	7a23      	ldrb	r3, [r4, #8]
   d93fe:	7c30      	ldrb	r0, [r6, #16]
   d9400:	f8ad 5004 	strh.w	r5, [sp, #4]
   d9404:	a901      	add	r1, sp, #4
   d9406:	9305      	str	r3, [sp, #20]
   d9408:	f7fe fc26 	bl	d7c58 <HAL_I2C_Request_Data_Ex>
}
   d940c:	b006      	add	sp, #24
   d940e:	bd70      	pop	{r4, r5, r6, pc}

000d9410 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d9410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d9412:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9414:	f88d 1000 	strb.w	r1, [sp]
   d9418:	f04f 0164 	mov.w	r1, #100	; 0x64
   d941c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d941e:	bf18      	it	ne
   d9420:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d9422:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d9424:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d9426:	f88d 3008 	strb.w	r3, [sp, #8]
   d942a:	f7ff ffd5 	bl	d93d8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d942e:	b005      	add	sp, #20
   d9430:	f85d fb04 	ldr.w	pc, [sp], #4

000d9434 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d9434:	2301      	movs	r3, #1
   d9436:	f7ff bfeb 	b.w	d9410 <_ZN7TwoWire11requestFromEhjh>

000d943a <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d943a:	2200      	movs	r2, #0
   d943c:	7c00      	ldrb	r0, [r0, #16]
   d943e:	f7fe bbc3 	b.w	d7bc8 <HAL_I2C_Begin_Transmission>

000d9442 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d9442:	b2c9      	uxtb	r1, r1
   d9444:	f7ff bff9 	b.w	d943a <_ZN7TwoWire17beginTransmissionEh>

000d9448 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d9448:	2200      	movs	r2, #0
   d944a:	7c00      	ldrb	r0, [r0, #16]
   d944c:	f7fe bbc4 	b.w	d7bd8 <HAL_I2C_End_Transmission>

000d9450 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d9450:	2101      	movs	r1, #1
   d9452:	f7ff bff9 	b.w	d9448 <_ZN7TwoWire15endTransmissionEh>

000d9456 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d9456:	2100      	movs	r1, #0
   d9458:	7c00      	ldrb	r0, [r0, #16]
   d945a:	f7fe bbed 	b.w	d7c38 <HAL_I2C_Is_Enabled>

000d945e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d945e:	4770      	bx	lr

000d9460 <_ZN9IPAddressD0Ev>:
   d9460:	b510      	push	{r4, lr}
   d9462:	2118      	movs	r1, #24
   d9464:	4604      	mov	r4, r0
   d9466:	f002 f948 	bl	db6fa <_ZdlPvj>
   d946a:	4620      	mov	r0, r4
   d946c:	bd10      	pop	{r4, pc}

000d946e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d946e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9470:	7d03      	ldrb	r3, [r0, #20]
   d9472:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9474:	b08d      	sub	sp, #52	; 0x34
   d9476:	460e      	mov	r6, r1
   d9478:	f100 0704 	add.w	r7, r0, #4
   d947c:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9480:	d002      	beq.n	d9488 <_ZNK9IPAddress7printToER5Print+0x1a>
   d9482:	f100 0508 	add.w	r5, r0, #8
   d9486:	e018      	b.n	d94ba <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9488:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d948a:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d948c:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9490:	232f      	movs	r3, #47	; 0x2f
   d9492:	462a      	mov	r2, r5
   d9494:	200a      	movs	r0, #10
   d9496:	f7fe fbe7 	bl	d7c68 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d949a:	4628      	mov	r0, r5
   d949c:	f003 f937 	bl	dc70e <strlen>
   d94a0:	6833      	ldr	r3, [r6, #0]
   d94a2:	4602      	mov	r2, r0
   d94a4:	68db      	ldr	r3, [r3, #12]
   d94a6:	4629      	mov	r1, r5
   d94a8:	4630      	mov	r0, r6
   d94aa:	4798      	blx	r3
   d94ac:	e00f      	b.n	d94ce <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d94ae:	b124      	cbz	r4, d94ba <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d94b0:	212e      	movs	r1, #46	; 0x2e
   d94b2:	4630      	mov	r0, r6
   d94b4:	f001 fb6c 	bl	dab90 <_ZN5Print5printEc>
   d94b8:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d94ba:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d94be:	220a      	movs	r2, #10
   d94c0:	4630      	mov	r0, r6
   d94c2:	f001 fb7e 	bl	dabc2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d94c6:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d94c8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d94ca:	d1f0      	bne.n	d94ae <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d94cc:	4620      	mov	r0, r4
    }
    return n;
}
   d94ce:	b00d      	add	sp, #52	; 0x34
   d94d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d94d4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d94d4:	b510      	push	{r4, lr}
   d94d6:	4b05      	ldr	r3, [pc, #20]	; (d94ec <_ZN9IPAddressC1Ev+0x18>)
   d94d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d94da:	2211      	movs	r2, #17
   d94dc:	f840 3b04 	str.w	r3, [r0], #4
   d94e0:	2100      	movs	r1, #0
   d94e2:	f003 f8aa 	bl	dc63a <memset>
{
    clear();
}
   d94e6:	4620      	mov	r0, r4
   d94e8:	bd10      	pop	{r4, pc}
   d94ea:	bf00      	nop
   d94ec:	000df23c 	.word	0x000df23c

000d94f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d94f0:	4603      	mov	r3, r0
   d94f2:	4a07      	ldr	r2, [pc, #28]	; (d9510 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d94f4:	b510      	push	{r4, lr}
   d94f6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d94fa:	f101 0210 	add.w	r2, r1, #16
   d94fe:	f851 4b04 	ldr.w	r4, [r1], #4
   d9502:	f843 4b04 	str.w	r4, [r3], #4
   d9506:	4291      	cmp	r1, r2
   d9508:	d1f9      	bne.n	d94fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d950a:	780a      	ldrb	r2, [r1, #0]
   d950c:	701a      	strb	r2, [r3, #0]
}
   d950e:	bd10      	pop	{r4, pc}
   d9510:	000df23c 	.word	0x000df23c

000d9514 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d9514:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9516:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d951a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d951e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9522:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d9526:	2304      	movs	r3, #4
   d9528:	6041      	str	r1, [r0, #4]
   d952a:	7503      	strb	r3, [r0, #20]
   d952c:	bd10      	pop	{r4, pc}

000d952e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d952e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9530:	780d      	ldrb	r5, [r1, #0]
   d9532:	788b      	ldrb	r3, [r1, #2]
   d9534:	784a      	ldrb	r2, [r1, #1]
   d9536:	78c9      	ldrb	r1, [r1, #3]
   d9538:	9100      	str	r1, [sp, #0]
   d953a:	4629      	mov	r1, r5
   d953c:	f7ff ffea 	bl	d9514 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d9540:	b003      	add	sp, #12
   d9542:	bd30      	pop	{r4, r5, pc}

000d9544 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d9544:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d9548:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d954a:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d954e:	2901      	cmp	r1, #1
   d9550:	4610      	mov	r0, r2
   d9552:	d104      	bne.n	d955e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d9554:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d9558:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d955c:	e004      	b.n	d9568 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d955e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d9560:	bf04      	itt	eq
   d9562:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d9566:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d9568:	3b01      	subs	r3, #1
   d956a:	f102 0210 	add.w	r2, r2, #16
   d956e:	d1ec      	bne.n	d954a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d9570:	4770      	bx	lr

000d9572 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d9572:	b40e      	push	{r1, r2, r3}
   d9574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9578:	b087      	sub	sp, #28
   d957a:	af00      	add	r7, sp, #0
   d957c:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d9580:	4605      	mov	r5, r0
   d9582:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d9586:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9588:	4623      	mov	r3, r4
   d958a:	4632      	mov	r2, r6
   d958c:	2110      	movs	r1, #16
   d958e:	f107 0008 	add.w	r0, r7, #8
   d9592:	f7fe fd77 	bl	d8084 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d9596:	280f      	cmp	r0, #15
   d9598:	d916      	bls.n	d95c8 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d959a:	f100 0308 	add.w	r3, r0, #8
   d959e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d95a2:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d95a4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d95a8:	4632      	mov	r2, r6
   d95aa:	1c41      	adds	r1, r0, #1
   d95ac:	4623      	mov	r3, r4
   d95ae:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d95b0:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d95b2:	f7fe fd67 	bl	d8084 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d95b6:	1e02      	subs	r2, r0, #0
   d95b8:	dd04      	ble.n	d95c4 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d95ba:	682b      	ldr	r3, [r5, #0]
   d95bc:	4669      	mov	r1, sp
   d95be:	689b      	ldr	r3, [r3, #8]
   d95c0:	4628      	mov	r0, r5
   d95c2:	4798      	blx	r3
   d95c4:	46c5      	mov	sp, r8
   d95c6:	e007      	b.n	d95d8 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d95c8:	b130      	cbz	r0, d95d8 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d95ca:	682b      	ldr	r3, [r5, #0]
   d95cc:	4602      	mov	r2, r0
   d95ce:	689b      	ldr	r3, [r3, #8]
   d95d0:	f107 0108 	add.w	r1, r7, #8
   d95d4:	4628      	mov	r0, r5
   d95d6:	4798      	blx	r3
    }
}
   d95d8:	371c      	adds	r7, #28
   d95da:	46bd      	mov	sp, r7
   d95dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d95e0:	b003      	add	sp, #12
   d95e2:	4770      	bx	lr

000d95e4 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d95e4:	b513      	push	{r0, r1, r4, lr}
   d95e6:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d95e8:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d95ea:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d95ee:	6894      	ldr	r4, [r2, #8]
   d95f0:	4619      	mov	r1, r3
   d95f2:	2201      	movs	r2, #1
   d95f4:	47a0      	blx	r4
}
   d95f6:	b002      	add	sp, #8
   d95f8:	bd10      	pop	{r4, pc}

000d95fa <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d95fa:	6883      	ldr	r3, [r0, #8]
   d95fc:	b1fb      	cbz	r3, d963e <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d95fe:	781a      	ldrb	r2, [r3, #0]
   d9600:	2a03      	cmp	r2, #3
   d9602:	d81a      	bhi.n	d963a <_ZNK5spark9JSONValue4typeEv+0x40>
   d9604:	e8df f002 	tbb	[pc, r2]
   d9608:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d960c:	2005      	movs	r0, #5
   d960e:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d9610:	6802      	ldr	r2, [r0, #0]
   d9612:	685b      	ldr	r3, [r3, #4]
   d9614:	6852      	ldr	r2, [r2, #4]
   d9616:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d9618:	282d      	cmp	r0, #45	; 0x2d
   d961a:	d014      	beq.n	d9646 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d961c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9620:	2b09      	cmp	r3, #9
   d9622:	d910      	bls.n	d9646 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d9624:	2874      	cmp	r0, #116	; 0x74
   d9626:	d010      	beq.n	d964a <_ZNK5spark9JSONValue4typeEv+0x50>
   d9628:	2866      	cmp	r0, #102	; 0x66
   d962a:	d00e      	beq.n	d964a <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d962c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d9630:	4258      	negs	r0, r3
   d9632:	4158      	adcs	r0, r3
   d9634:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d9636:	2006      	movs	r0, #6
   d9638:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d963a:	2000      	movs	r0, #0
   d963c:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d963e:	4618      	mov	r0, r3
   d9640:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d9642:	2004      	movs	r0, #4
   d9644:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d9646:	2003      	movs	r0, #3
   d9648:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d964a:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d964c:	4770      	bx	lr

000d964e <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d964e:	b510      	push	{r4, lr}
   d9650:	4604      	mov	r4, r0
    switch (type()) {
   d9652:	f7ff ffd2 	bl	d95fa <_ZNK5spark9JSONValue4typeEv>
   d9656:	2802      	cmp	r0, #2
   d9658:	d00d      	beq.n	d9676 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d965a:	d316      	bcc.n	d968a <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d965c:	2804      	cmp	r0, #4
   d965e:	d814      	bhi.n	d968a <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d9660:	6822      	ldr	r2, [r4, #0]
   d9662:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d9664:	6850      	ldr	r0, [r2, #4]
   d9666:	685b      	ldr	r3, [r3, #4]
   d9668:	220a      	movs	r2, #10
   d966a:	2100      	movs	r1, #0
   d966c:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d966e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d9672:	f003 bf63 	b.w	dd53c <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d9676:	6822      	ldr	r2, [r4, #0]
   d9678:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d967a:	6852      	ldr	r2, [r2, #4]
   d967c:	685b      	ldr	r3, [r3, #4]
   d967e:	5cd0      	ldrb	r0, [r2, r3]
   d9680:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d9684:	4258      	negs	r0, r3
   d9686:	4158      	adcs	r0, r3
   d9688:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d968a:	2000      	movs	r0, #0
    }
}
   d968c:	bd10      	pop	{r4, pc}

000d968e <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d968e:	b510      	push	{r4, lr}
    if (!n_) {
   d9690:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d9692:	4604      	mov	r4, r0
    if (!n_) {
   d9694:	b15b      	cbz	r3, d96ae <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d9696:	6880      	ldr	r0, [r0, #8]
   d9698:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d969a:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d969c:	3010      	adds	r0, #16
   d969e:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d96a0:	6120      	str	r0, [r4, #16]
    --n_;
   d96a2:	6163      	str	r3, [r4, #20]
    if (n_) {
   d96a4:	b12b      	cbz	r3, d96b2 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d96a6:	f7ff ff4d 	bl	d9544 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d96aa:	60a0      	str	r0, [r4, #8]
   d96ac:	e001      	b.n	d96b2 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d96ae:	4618      	mov	r0, r3
   d96b0:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d96b2:	2001      	movs	r0, #1
}
   d96b4:	bd10      	pop	{r4, pc}

000d96b6 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d96b6:	b510      	push	{r4, lr}
    write('}');
   d96b8:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d96ba:	4604      	mov	r4, r0
    write('}');
   d96bc:	f7ff ff92 	bl	d95e4 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d96c0:	2301      	movs	r3, #1
   d96c2:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d96c4:	4620      	mov	r0, r4
   d96c6:	bd10      	pop	{r4, pc}

000d96c8 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d96c8:	b508      	push	{r3, lr}
    switch (state_) {
   d96ca:	7903      	ldrb	r3, [r0, #4]
   d96cc:	2b01      	cmp	r3, #1
   d96ce:	d002      	beq.n	d96d6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d96d0:	2b02      	cmp	r3, #2
   d96d2:	d002      	beq.n	d96da <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d96d4:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d96d6:	212c      	movs	r1, #44	; 0x2c
   d96d8:	e000      	b.n	d96dc <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d96da:	213a      	movs	r1, #58	; 0x3a
   d96dc:	f7ff ff82 	bl	d95e4 <_ZN5spark10JSONWriter5writeEc>
   d96e0:	bd08      	pop	{r3, pc}

000d96e2 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d96e2:	b510      	push	{r4, lr}
   d96e4:	4604      	mov	r4, r0
    writeSeparator();
   d96e6:	f7ff ffef 	bl	d96c8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d96ea:	4620      	mov	r0, r4
   d96ec:	217b      	movs	r1, #123	; 0x7b
   d96ee:	f7ff ff79 	bl	d95e4 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d96f2:	2300      	movs	r3, #0
   d96f4:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d96f6:	4620      	mov	r0, r4
   d96f8:	bd10      	pop	{r4, pc}
	...

000d96fc <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d96fc:	b538      	push	{r3, r4, r5, lr}
   d96fe:	4604      	mov	r4, r0
   d9700:	460d      	mov	r5, r1
    writeSeparator();
   d9702:	f7ff ffe1 	bl	d96c8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d9706:	6823      	ldr	r3, [r4, #0]
   d9708:	4904      	ldr	r1, [pc, #16]	; (d971c <_ZN5spark10JSONWriter5valueEi+0x20>)
   d970a:	68db      	ldr	r3, [r3, #12]
   d970c:	4620      	mov	r0, r4
   d970e:	462a      	mov	r2, r5
   d9710:	4798      	blx	r3
    state_ = NEXT;
   d9712:	2301      	movs	r3, #1
   d9714:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d9716:	4620      	mov	r0, r4
   d9718:	bd38      	pop	{r3, r4, r5, pc}
   d971a:	bf00      	nop
   d971c:	000deba9 	.word	0x000deba9

000d9720 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d9720:	b538      	push	{r3, r4, r5, lr}
   d9722:	4604      	mov	r4, r0
   d9724:	460d      	mov	r5, r1
    writeSeparator();
   d9726:	f7ff ffcf 	bl	d96c8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d972a:	6823      	ldr	r3, [r4, #0]
   d972c:	4904      	ldr	r1, [pc, #16]	; (d9740 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d972e:	68db      	ldr	r3, [r3, #12]
   d9730:	4620      	mov	r0, r4
   d9732:	462a      	mov	r2, r5
   d9734:	4798      	blx	r3
    state_ = NEXT;
   d9736:	2301      	movs	r3, #1
   d9738:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d973a:	4620      	mov	r0, r4
   d973c:	bd38      	pop	{r3, r4, r5, pc}
   d973e:	bf00      	nop
   d9740:	000df257 	.word	0x000df257

000d9744 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9746:	460d      	mov	r5, r1
   d9748:	4617      	mov	r7, r2
    write('"');
   d974a:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d974c:	4604      	mov	r4, r0
   d974e:	442f      	add	r7, r5
    write('"');
   d9750:	f7ff ff48 	bl	d95e4 <_ZN5spark10JSONWriter5writeEc>
   d9754:	462a      	mov	r2, r5
    const char* const end = str + size;
   d9756:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d9758:	42ba      	cmp	r2, r7
   d975a:	d038      	beq.n	d97ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d975c:	4616      	mov	r6, r2
   d975e:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d9762:	2d22      	cmp	r5, #34	; 0x22
   d9764:	d003      	beq.n	d976e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d9766:	2d5c      	cmp	r5, #92	; 0x5c
   d9768:	d001      	beq.n	d976e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d976a:	2d1f      	cmp	r5, #31
   d976c:	d82d      	bhi.n	d97ca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d976e:	6823      	ldr	r3, [r4, #0]
   d9770:	1a52      	subs	r2, r2, r1
   d9772:	689b      	ldr	r3, [r3, #8]
   d9774:	4620      	mov	r0, r4
   d9776:	4798      	blx	r3
            write('\\');
   d9778:	215c      	movs	r1, #92	; 0x5c
   d977a:	4620      	mov	r0, r4
   d977c:	f7ff ff32 	bl	d95e4 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d9780:	2d0c      	cmp	r5, #12
   d9782:	d019      	beq.n	d97b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d9784:	d807      	bhi.n	d9796 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d9786:	2d09      	cmp	r5, #9
   d9788:	d00f      	beq.n	d97aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d978a:	2d0a      	cmp	r5, #10
   d978c:	d012      	beq.n	d97b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d978e:	2d08      	cmp	r5, #8
   d9790:	d114      	bne.n	d97bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d9792:	2162      	movs	r1, #98	; 0x62
   d9794:	e00a      	b.n	d97ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d9796:	2d22      	cmp	r5, #34	; 0x22
   d9798:	d005      	beq.n	d97a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d979a:	2d5c      	cmp	r5, #92	; 0x5c
   d979c:	d003      	beq.n	d97a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d979e:	2d0d      	cmp	r5, #13
   d97a0:	d10c      	bne.n	d97bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d97a2:	2172      	movs	r1, #114	; 0x72
   d97a4:	e002      	b.n	d97ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d97a6:	4629      	mov	r1, r5
   d97a8:	e000      	b.n	d97ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d97aa:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d97ac:	4620      	mov	r0, r4
   d97ae:	f7ff ff19 	bl	d95e4 <_ZN5spark10JSONWriter5writeEc>
                break;
   d97b2:	e009      	b.n	d97c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d97b4:	216e      	movs	r1, #110	; 0x6e
   d97b6:	e7f9      	b.n	d97ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d97b8:	2166      	movs	r1, #102	; 0x66
   d97ba:	e7f7      	b.n	d97ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d97bc:	6823      	ldr	r3, [r4, #0]
   d97be:	490a      	ldr	r1, [pc, #40]	; (d97e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d97c0:	68db      	ldr	r3, [r3, #12]
   d97c2:	462a      	mov	r2, r5
   d97c4:	4620      	mov	r0, r4
   d97c6:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d97c8:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d97ca:	4632      	mov	r2, r6
   d97cc:	e7c4      	b.n	d9758 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d97ce:	4291      	cmp	r1, r2
   d97d0:	d004      	beq.n	d97dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d97d2:	6823      	ldr	r3, [r4, #0]
   d97d4:	1a52      	subs	r2, r2, r1
   d97d6:	689d      	ldr	r5, [r3, #8]
   d97d8:	4620      	mov	r0, r4
   d97da:	47a8      	blx	r5
    }
    write('"');
   d97dc:	2122      	movs	r1, #34	; 0x22
   d97de:	4620      	mov	r0, r4
   d97e0:	f7ff ff00 	bl	d95e4 <_ZN5spark10JSONWriter5writeEc>
   d97e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d97e6:	bf00      	nop
   d97e8:	000df268 	.word	0x000df268

000d97ec <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d97ec:	b570      	push	{r4, r5, r6, lr}
   d97ee:	4604      	mov	r4, r0
   d97f0:	460d      	mov	r5, r1
   d97f2:	4616      	mov	r6, r2
    writeSeparator();
   d97f4:	f7ff ff68 	bl	d96c8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d97f8:	4620      	mov	r0, r4
   d97fa:	4632      	mov	r2, r6
   d97fc:	4629      	mov	r1, r5
   d97fe:	f7ff ffa1 	bl	d9744 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d9802:	2302      	movs	r3, #2
   d9804:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d9806:	4620      	mov	r0, r4
   d9808:	bd70      	pop	{r4, r5, r6, pc}

000d980a <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d980a:	b570      	push	{r4, r5, r6, lr}
   d980c:	4604      	mov	r4, r0
   d980e:	460d      	mov	r5, r1
   d9810:	4616      	mov	r6, r2
    writeSeparator();
   d9812:	f7ff ff59 	bl	d96c8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d9816:	4620      	mov	r0, r4
   d9818:	4632      	mov	r2, r6
   d981a:	4629      	mov	r1, r5
   d981c:	f7ff ff92 	bl	d9744 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d9820:	2301      	movs	r3, #1
   d9822:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d9824:	4620      	mov	r0, r4
   d9826:	bd70      	pop	{r4, r5, r6, pc}

000d9828 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9828:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d982a:	2300      	movs	r3, #0
   d982c:	4604      	mov	r4, r0
   d982e:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d9830:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d9832:	4810      	ldr	r0, [pc, #64]	; (d9874 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d9834:	60a0      	str	r0, [r4, #8]
   d9836:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d9838:	b1d1      	cbz	r1, d9870 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d983a:	780b      	ldrb	r3, [r1, #0]
   d983c:	2b03      	cmp	r3, #3
   d983e:	d006      	beq.n	d984e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d9840:	b9b3      	cbnz	r3, d9870 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d9842:	6813      	ldr	r3, [r2, #0]
   d9844:	6858      	ldr	r0, [r3, #4]
   d9846:	684b      	ldr	r3, [r1, #4]
   d9848:	5cc3      	ldrb	r3, [r0, r3]
   d984a:	2b6e      	cmp	r3, #110	; 0x6e
   d984c:	d008      	beq.n	d9860 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d984e:	6813      	ldr	r3, [r2, #0]
   d9850:	6858      	ldr	r0, [r3, #4]
   d9852:	684b      	ldr	r3, [r1, #4]
   d9854:	4403      	add	r3, r0
   d9856:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d9858:	688b      	ldr	r3, [r1, #8]
   d985a:	6849      	ldr	r1, [r1, #4]
   d985c:	1a5b      	subs	r3, r3, r1
   d985e:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d9860:	4611      	mov	r1, r2
   d9862:	4620      	mov	r0, r4
   d9864:	f851 3b04 	ldr.w	r3, [r1], #4
   d9868:	f840 3b04 	str.w	r3, [r0], #4
   d986c:	f7ff f88c 	bl	d8988 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d9870:	4620      	mov	r0, r4
   d9872:	bd10      	pop	{r4, pc}
   d9874:	000def85 	.word	0x000def85

000d9878 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d9878:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d987a:	b510      	push	{r4, lr}
   d987c:	4604      	mov	r4, r0
   d987e:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d9880:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d9882:	6083      	str	r3, [r0, #8]
   d9884:	60c3      	str	r3, [r0, #12]
   d9886:	6103      	str	r3, [r0, #16]
   d9888:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d988a:	b171      	cbz	r1, d98aa <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d988c:	780b      	ldrb	r3, [r1, #0]
   d988e:	2b01      	cmp	r3, #1
   d9890:	d10b      	bne.n	d98aa <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d9892:	f101 0310 	add.w	r3, r1, #16
   d9896:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d9898:	68cb      	ldr	r3, [r1, #12]
   d989a:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d989c:	4611      	mov	r1, r2
   d989e:	f851 3b04 	ldr.w	r3, [r1], #4
   d98a2:	f840 3b04 	str.w	r3, [r0], #4
   d98a6:	f7ff f86f 	bl	d8988 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d98aa:	4620      	mov	r0, r4
   d98ac:	bd10      	pop	{r4, pc}

000d98ae <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d98ae:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d98b0:	b510      	push	{r4, lr}
   d98b2:	4604      	mov	r4, r0
   d98b4:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d98b6:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d98b8:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d98ba:	b131      	cbz	r1, d98ca <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d98bc:	4611      	mov	r1, r2
   d98be:	f851 3b04 	ldr.w	r3, [r1], #4
   d98c2:	f840 3b04 	str.w	r3, [r0], #4
   d98c6:	f7ff f85f 	bl	d8988 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d98ca:	4620      	mov	r0, r4
   d98cc:	bd10      	pop	{r4, pc}

000d98ce <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d98ce:	680a      	ldr	r2, [r1, #0]
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   d98d0:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d98d2:	6892      	ldr	r2, [r2, #8]
   d98d4:	4601      	mov	r1, r0
   d98d6:	4618      	mov	r0, r3
   d98d8:	4710      	bx	r2
	...

000d98dc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
 */

#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   d98dc:	b570      	push	{r4, r5, r6, lr}
   d98de:	4c0e      	ldr	r4, [pc, #56]	; (d9918 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   d98e0:	6004      	str	r4, [r0, #0]
    d_.size = sizeof(LEDStatusData);
   d98e2:	241c      	movs	r4, #28
   d98e4:	6044      	str	r4, [r0, #4]
    d_.next = nullptr;
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d98e6:	f89d 4014 	ldrb.w	r4, [sp, #20]
   d98ea:	f89d 6010 	ldrb.w	r6, [sp, #16]
   d98ee:	f004 0403 	and.w	r4, r4, #3
   d98f2:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   d98f6:	2500      	movs	r5, #0
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d98f8:	b2e4      	uxtb	r4, r4
   d98fa:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   d98fc:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   d98fe:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   d9900:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d9902:	7c42      	ldrb	r2, [r0, #17]
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   d9904:	6085      	str	r5, [r0, #8]
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d9906:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   d9908:	bf08      	it	eq
   d990a:	4b04      	ldreq	r3, [pc, #16]	; (d991c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
    d_.prev = nullptr;
   d990c:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
        d_.callback = updateCallback; // User callback
   d990e:	bf06      	itte	eq
   d9910:	6183      	streq	r3, [r0, #24]
        d_.data = this; // Callback data
   d9912:	61c0      	streq	r0, [r0, #28]
    } else {
        d_.period = period;
   d9914:	8303      	strhne	r3, [r0, #24]
    }
}
   d9916:	bd70      	pop	{r4, r5, r6, pc}
   d9918:	000deb10 	.word	0x000deb10
   d991c:	000d98cf 	.word	0x000d98cf

000d9920 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d9920:	6880      	ldr	r0, [r0, #8]
   d9922:	6803      	ldr	r3, [r0, #0]
   d9924:	68db      	ldr	r3, [r3, #12]
   d9926:	4718      	bx	r3

000d9928 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d9928:	4770      	bx	lr

000d992a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d992a:	b119      	cbz	r1, d9934 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d992c:	680b      	ldr	r3, [r1, #0]
   d992e:	4608      	mov	r0, r1
   d9930:	685b      	ldr	r3, [r3, #4]
   d9932:	4718      	bx	r3
   d9934:	4770      	bx	lr

000d9936 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d9936:	b119      	cbz	r1, d9940 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d9938:	680b      	ldr	r3, [r1, #0]
   d993a:	4608      	mov	r0, r1
   d993c:	685b      	ldr	r3, [r3, #4]
   d993e:	4718      	bx	r3
   d9940:	4770      	bx	lr

000d9942 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d9942:	4770      	bx	lr

000d9944 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d9944:	4770      	bx	lr

000d9946 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d9946:	4770      	bx	lr

000d9948 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d9948:	b538      	push	{r3, r4, r5, lr}
   d994a:	4604      	mov	r4, r0
   d994c:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d994e:	6800      	ldr	r0, [r0, #0]
   d9950:	212e      	movs	r1, #46	; 0x2e
   d9952:	f002 fec0 	bl	dc6d6 <strchrnul>
    size = s - category;
   d9956:	6823      	ldr	r3, [r4, #0]
   d9958:	1ac3      	subs	r3, r0, r3
   d995a:	602b      	str	r3, [r5, #0]
    if (size) {
   d995c:	b123      	cbz	r3, d9968 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d995e:	7803      	ldrb	r3, [r0, #0]
   d9960:	b103      	cbz	r3, d9964 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d9962:	3001      	adds	r0, #1
   d9964:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d9966:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d9968:	4618      	mov	r0, r3
}
   d996a:	bd38      	pop	{r3, r4, r5, pc}

000d996c <_ZN5spark16JSONStreamWriterD0Ev>:
   d996c:	b510      	push	{r4, lr}
   d996e:	210c      	movs	r1, #12
   d9970:	4604      	mov	r4, r0
   d9972:	f001 fec2 	bl	db6fa <_ZdlPvj>
   d9976:	4620      	mov	r0, r4
   d9978:	bd10      	pop	{r4, pc}

000d997a <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d997a:	b510      	push	{r4, lr}
   d997c:	2104      	movs	r1, #4
   d997e:	4604      	mov	r4, r0
   d9980:	f001 febb 	bl	db6fa <_ZdlPvj>
   d9984:	4620      	mov	r0, r4
   d9986:	bd10      	pop	{r4, pc}

000d9988 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d9988:	b510      	push	{r4, lr}
   d998a:	2104      	movs	r1, #4
   d998c:	4604      	mov	r4, r0
   d998e:	f001 feb4 	bl	db6fa <_ZdlPvj>
   d9992:	4620      	mov	r0, r4
   d9994:	bd10      	pop	{r4, pc}

000d9996 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d9996:	b538      	push	{r3, r4, r5, lr}
   d9998:	460c      	mov	r4, r1
   d999a:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d999c:	f001 fd5a 	bl	db454 <_Z16_fetch_usbserialv>
   d99a0:	4284      	cmp	r4, r0
   d99a2:	d00d      	beq.n	d99c0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d99a4:	f001 fcca 	bl	db33c <_Z22__fetch_global_Serial1v>
   d99a8:	4284      	cmp	r4, r0
   d99aa:	d105      	bne.n	d99b8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d99ac:	f001 fcc6 	bl	db33c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d99b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d99b4:	f001 bcbb 	b.w	db32e <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d99b8:	4621      	mov	r1, r4
   d99ba:	4628      	mov	r0, r5
   d99bc:	f7ff ffbb 	bl	d9936 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d99c0:	bd38      	pop	{r3, r4, r5, pc}

000d99c2 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d99c2:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d99c4:	f002 fe91 	bl	dc6ea <strcmp>
}
   d99c8:	fab0 f080 	clz	r0, r0
   d99cc:	0940      	lsrs	r0, r0, #5
   d99ce:	bd08      	pop	{r3, pc}

000d99d0 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d99d0:	b538      	push	{r3, r4, r5, lr}
   d99d2:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d99d4:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d99d6:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d99d8:	f002 fe99 	bl	dc70e <strlen>
   d99dc:	4621      	mov	r1, r4
   d99de:	4602      	mov	r2, r0
   d99e0:	4628      	mov	r0, r5
}
   d99e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d99e6:	f7ff bf10 	b.w	d980a <_ZN5spark10JSONWriter5valueEPKcj>

000d99ea <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d99ea:	6800      	ldr	r0, [r0, #0]
   d99ec:	f7fe b874 	b.w	d7ad8 <os_mutex_recursive_lock>

000d99f0 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d99f0:	b570      	push	{r4, r5, r6, lr}
   d99f2:	4604      	mov	r4, r0
    write(str, strlen(str));
   d99f4:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d99f6:	460d      	mov	r5, r1
    write(str, strlen(str));
   d99f8:	f002 fe89 	bl	dc70e <strlen>
   d99fc:	6823      	ldr	r3, [r4, #0]
   d99fe:	4602      	mov	r2, r0
   d9a00:	4629      	mov	r1, r5
   d9a02:	4620      	mov	r0, r4
   d9a04:	68db      	ldr	r3, [r3, #12]
}
   d9a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d9a0a:	4718      	bx	r3

000d9a0c <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d9a0c:	b513      	push	{r0, r1, r4, lr}
   d9a0e:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d9a10:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d9a12:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d9a16:	68d4      	ldr	r4, [r2, #12]
   d9a18:	4619      	mov	r1, r3
   d9a1a:	2201      	movs	r2, #1
   d9a1c:	47a0      	blx	r4
}
   d9a1e:	b002      	add	sp, #8
   d9a20:	bd10      	pop	{r4, pc}
	...

000d9a24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d9a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d9a28:	6845      	ldr	r5, [r0, #4]
   d9a2a:	6807      	ldr	r7, [r0, #0]
   d9a2c:	b085      	sub	sp, #20
   d9a2e:	4691      	mov	r9, r2
   d9a30:	2214      	movs	r2, #20
   d9a32:	4355      	muls	r5, r2
   d9a34:	9301      	str	r3, [sp, #4]
   d9a36:	10ab      	asrs	r3, r5, #2
   d9a38:	4d19      	ldr	r5, [pc, #100]	; (d9aa0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d9a3a:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d9a3c:	435d      	muls	r5, r3
   d9a3e:	468b      	mov	fp, r1
   d9a40:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d9a42:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d9a44:	2d00      	cmp	r5, #0
   d9a46:	9303      	str	r3, [sp, #12]
   d9a48:	dd23      	ble.n	d9a92 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d9a4a:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d9a4c:	106e      	asrs	r6, r5, #1
   d9a4e:	fb03 f006 	mul.w	r0, r3, r6
   d9a52:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d9a56:	464a      	mov	r2, r9
   d9a58:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d9a5c:	5820      	ldr	r0, [r4, r0]
   d9a5e:	45d1      	cmp	r9, sl
   d9a60:	bf28      	it	cs
   d9a62:	4652      	movcs	r2, sl
   d9a64:	4659      	mov	r1, fp
   d9a66:	f002 fe6f 	bl	dc748 <strncmp>
                if (cmp == 0) {
   d9a6a:	9b03      	ldr	r3, [sp, #12]
   d9a6c:	b948      	cbnz	r0, d9a82 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d9a6e:	45d1      	cmp	r9, sl
   d9a70:	d103      	bne.n	d9a7a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d9a72:	9a01      	ldr	r2, [sp, #4]
   d9a74:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d9a76:	4635      	mov	r5, r6
   d9a78:	e7e4      	b.n	d9a44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d9a7a:	bf8c      	ite	hi
   d9a7c:	2001      	movhi	r0, #1
   d9a7e:	2000      	movls	r0, #0
   d9a80:	e000      	b.n	d9a84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d9a82:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d9a84:	2800      	cmp	r0, #0
   d9a86:	d0f6      	beq.n	d9a76 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d9a88:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d9a8a:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d9a8e:	3e01      	subs	r6, #1
   d9a90:	e7f1      	b.n	d9a76 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d9a92:	1be4      	subs	r4, r4, r7
}
   d9a94:	4802      	ldr	r0, [pc, #8]	; (d9aa0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d9a96:	10a4      	asrs	r4, r4, #2
}
   d9a98:	4360      	muls	r0, r4
   d9a9a:	b005      	add	sp, #20
   d9a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9aa0:	cccccccd 	.word	0xcccccccd

000d9aa4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d9aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9aa6:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d9aa8:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d9aaa:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d9aac:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d9aae:	b313      	cbz	r3, d9af6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d9ab0:	b309      	cbz	r1, d9af6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d9ab2:	af04      	add	r7, sp, #16
   d9ab4:	2300      	movs	r3, #0
   d9ab6:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d9aba:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d9abe:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d9ac0:	4639      	mov	r1, r7
   d9ac2:	a801      	add	r0, sp, #4
   d9ac4:	f7ff ff40 	bl	d9948 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d9ac8:	4601      	mov	r1, r0
   d9aca:	b1a0      	cbz	r0, d9af6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d9acc:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d9ace:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d9ad0:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d9ad4:	4620      	mov	r0, r4
   d9ad6:	f7ff ffa5 	bl	d9a24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d9ada:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d9ade:	b153      	cbz	r3, d9af6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d9ae0:	6823      	ldr	r3, [r4, #0]
   d9ae2:	2414      	movs	r4, #20
   d9ae4:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d9ae8:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d9aea:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d9aee:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d9af0:	bfa8      	it	ge
   d9af2:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d9af4:	e7e4      	b.n	d9ac0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d9af6:	4630      	mov	r0, r6
   d9af8:	b005      	add	sp, #20
   d9afa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9afc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d9afc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d9afe:	4c09      	ldr	r4, [pc, #36]	; (d9b24 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d9b00:	6823      	ldr	r3, [r4, #0]
   d9b02:	07db      	lsls	r3, r3, #31
   d9b04:	d40b      	bmi.n	d9b1e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d9b06:	4620      	mov	r0, r4
   d9b08:	f7fa fad8 	bl	d40bc <__cxa_guard_acquire>
   d9b0c:	b138      	cbz	r0, d9b1e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d9b0e:	4620      	mov	r0, r4
   d9b10:	f7fa fad9 	bl	d40c6 <__cxa_guard_release>
   d9b14:	4a04      	ldr	r2, [pc, #16]	; (d9b28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d9b16:	4905      	ldr	r1, [pc, #20]	; (d9b2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d9b18:	4805      	ldr	r0, [pc, #20]	; (d9b30 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d9b1a:	f001 fde9 	bl	db6f0 <__aeabi_atexit>
    return &factory;
}
   d9b1e:	4804      	ldr	r0, [pc, #16]	; (d9b30 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d9b20:	bd10      	pop	{r4, pc}
   d9b22:	bf00      	nop
   d9b24:	2003e364 	.word	0x2003e364
   d9b28:	2003d468 	.word	0x2003d468
   d9b2c:	000d9945 	.word	0x000d9945
   d9b30:	2003d374 	.word	0x2003d374

000d9b34 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d9b34:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d9b36:	4c09      	ldr	r4, [pc, #36]	; (d9b5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d9b38:	6823      	ldr	r3, [r4, #0]
   d9b3a:	07db      	lsls	r3, r3, #31
   d9b3c:	d40b      	bmi.n	d9b56 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d9b3e:	4620      	mov	r0, r4
   d9b40:	f7fa fabc 	bl	d40bc <__cxa_guard_acquire>
   d9b44:	b138      	cbz	r0, d9b56 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d9b46:	4620      	mov	r0, r4
   d9b48:	f7fa fabd 	bl	d40c6 <__cxa_guard_release>
   d9b4c:	4a04      	ldr	r2, [pc, #16]	; (d9b60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d9b4e:	4905      	ldr	r1, [pc, #20]	; (d9b64 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d9b50:	4805      	ldr	r0, [pc, #20]	; (d9b68 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d9b52:	f001 fdcd 	bl	db6f0 <__aeabi_atexit>
    return &factory;
}
   d9b56:	4804      	ldr	r0, [pc, #16]	; (d9b68 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d9b58:	bd10      	pop	{r4, pc}
   d9b5a:	bf00      	nop
   d9b5c:	2003e394 	.word	0x2003e394
   d9b60:	2003d468 	.word	0x2003d468
   d9b64:	000d9943 	.word	0x000d9943
   d9b68:	2003d370 	.word	0x2003d370

000d9b6c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d9b6c:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d9b6e:	2500      	movs	r5, #0
   d9b70:	4604      	mov	r4, r0
   d9b72:	6005      	str	r5, [r0, #0]
   d9b74:	6045      	str	r5, [r0, #4]
   d9b76:	6085      	str	r5, [r0, #8]
   d9b78:	6105      	str	r5, [r0, #16]
   d9b7a:	6145      	str	r5, [r0, #20]
   d9b7c:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d9b7e:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d9b82:	f7fd ff99 	bl	d7ab8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d9b86:	f7ff ffb9 	bl	d9afc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d9b8a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d9b8c:	f7ff ffd2 	bl	d9b34 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d9b90:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d9b92:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d9b94:	4620      	mov	r0, r4
   d9b96:	bd38      	pop	{r3, r4, r5, pc}

000d9b98 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d9b98:	b510      	push	{r4, lr}
    static LogManager mgr;
   d9b9a:	4c0a      	ldr	r4, [pc, #40]	; (d9bc4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d9b9c:	6823      	ldr	r3, [r4, #0]
   d9b9e:	07db      	lsls	r3, r3, #31
   d9ba0:	d40e      	bmi.n	d9bc0 <_ZN5spark10LogManager8instanceEv+0x28>
   d9ba2:	4620      	mov	r0, r4
   d9ba4:	f7fa fa8a 	bl	d40bc <__cxa_guard_acquire>
   d9ba8:	b150      	cbz	r0, d9bc0 <_ZN5spark10LogManager8instanceEv+0x28>
   d9baa:	4807      	ldr	r0, [pc, #28]	; (d9bc8 <_ZN5spark10LogManager8instanceEv+0x30>)
   d9bac:	f7ff ffde 	bl	d9b6c <_ZN5spark10LogManagerC1Ev>
   d9bb0:	4620      	mov	r0, r4
   d9bb2:	f7fa fa88 	bl	d40c6 <__cxa_guard_release>
   d9bb6:	4a05      	ldr	r2, [pc, #20]	; (d9bcc <_ZN5spark10LogManager8instanceEv+0x34>)
   d9bb8:	4905      	ldr	r1, [pc, #20]	; (d9bd0 <_ZN5spark10LogManager8instanceEv+0x38>)
   d9bba:	4803      	ldr	r0, [pc, #12]	; (d9bc8 <_ZN5spark10LogManager8instanceEv+0x30>)
   d9bbc:	f001 fd98 	bl	db6f0 <__aeabi_atexit>
    return &mgr;
}
   d9bc0:	4801      	ldr	r0, [pc, #4]	; (d9bc8 <_ZN5spark10LogManager8instanceEv+0x30>)
   d9bc2:	bd10      	pop	{r4, pc}
   d9bc4:	2003e368 	.word	0x2003e368
   d9bc8:	2003e36c 	.word	0x2003e36c
   d9bcc:	2003d468 	.word	0x2003d468
   d9bd0:	000da003 	.word	0x000da003

000d9bd4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d9bd4:	2300      	movs	r3, #0
   d9bd6:	4a02      	ldr	r2, [pc, #8]	; (d9be0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d9bd8:	4902      	ldr	r1, [pc, #8]	; (d9be4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d9bda:	4803      	ldr	r0, [pc, #12]	; (d9be8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d9bdc:	f7fe b964 	b.w	d7ea8 <log_set_callbacks>
   d9be0:	000d9ee5 	.word	0x000d9ee5
   d9be4:	000d9e75 	.word	0x000d9e75
   d9be8:	000d9dfd 	.word	0x000d9dfd

000d9bec <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d9bec:	2300      	movs	r3, #0
   d9bee:	461a      	mov	r2, r3
   d9bf0:	4619      	mov	r1, r3
   d9bf2:	4618      	mov	r0, r3
   d9bf4:	f7fe b958 	b.w	d7ea8 <log_set_callbacks>

000d9bf8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d9bf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9bfa:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d9bfc:	688e      	ldr	r6, [r1, #8]
   d9bfe:	f851 3b04 	ldr.w	r3, [r1], #4
   d9c02:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d9c06:	4605      	mov	r5, r0
   d9c08:	a801      	add	r0, sp, #4
   d9c0a:	f7fe fe05 	bl	d8818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d9c0e:	4622      	mov	r2, r4
   d9c10:	4631      	mov	r1, r6
   d9c12:	4628      	mov	r0, r5
   d9c14:	f7ff fe30 	bl	d9878 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9c18:	a801      	add	r0, sp, #4
   d9c1a:	f7fa fd2b 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9c1e:	4628      	mov	r0, r5
   d9c20:	b002      	add	sp, #8
   d9c22:	bd70      	pop	{r4, r5, r6, pc}

000d9c24 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d9c24:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9c26:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d9c28:	690e      	ldr	r6, [r1, #16]
   d9c2a:	f851 3b04 	ldr.w	r3, [r1], #4
   d9c2e:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d9c32:	4605      	mov	r5, r0
   d9c34:	a801      	add	r0, sp, #4
   d9c36:	f7fe fdef 	bl	d8818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d9c3a:	4622      	mov	r2, r4
   d9c3c:	4631      	mov	r1, r6
   d9c3e:	4628      	mov	r0, r5
   d9c40:	f7ff fe35 	bl	d98ae <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9c44:	a801      	add	r0, sp, #4
   d9c46:	f7fa fd15 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9c4a:	4628      	mov	r0, r5
   d9c4c:	b002      	add	sp, #8
   d9c4e:	bd70      	pop	{r4, r5, r6, pc}

000d9c50 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d9c50:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9c52:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d9c54:	68ce      	ldr	r6, [r1, #12]
   d9c56:	f851 3b04 	ldr.w	r3, [r1], #4
   d9c5a:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d9c5e:	4605      	mov	r5, r0
   d9c60:	a801      	add	r0, sp, #4
   d9c62:	f7fe fdd9 	bl	d8818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d9c66:	4622      	mov	r2, r4
   d9c68:	4631      	mov	r1, r6
   d9c6a:	4628      	mov	r0, r5
   d9c6c:	f7ff fddc 	bl	d9828 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9c70:	a801      	add	r0, sp, #4
   d9c72:	f7fa fcff 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9c76:	4628      	mov	r0, r5
   d9c78:	b002      	add	sp, #8
   d9c7a:	bd70      	pop	{r4, r5, r6, pc}

000d9c7c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d9c7c:	b530      	push	{r4, r5, lr}
   d9c7e:	b08b      	sub	sp, #44	; 0x2c
   d9c80:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d9c82:	4601      	mov	r1, r0
   d9c84:	a804      	add	r0, sp, #16
   d9c86:	f7ff ffb7 	bl	d9bf8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d9c8a:	a804      	add	r0, sp, #16
   d9c8c:	f7ff fcff 	bl	d968e <_ZN5spark18JSONObjectIterator4nextEv>
   d9c90:	b1e8      	cbz	r0, d9cce <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d9c92:	a904      	add	r1, sp, #16
   d9c94:	4668      	mov	r0, sp
   d9c96:	f7ff ffdb 	bl	d9c50 <_ZNK5spark18JSONObjectIterator4nameEv>
   d9c9a:	490f      	ldr	r1, [pc, #60]	; (d9cd8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d9c9c:	9802      	ldr	r0, [sp, #8]
   d9c9e:	f7ff fe90 	bl	d99c2 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d9ca2:	4604      	mov	r4, r0
   d9ca4:	b110      	cbz	r0, d9cac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d9ca6:	1c2c      	adds	r4, r5, #0
   d9ca8:	bf18      	it	ne
   d9caa:	2401      	movne	r4, #1
   d9cac:	a801      	add	r0, sp, #4
   d9cae:	f7fa fce1 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9cb2:	2c00      	cmp	r4, #0
   d9cb4:	d0e9      	beq.n	d9c8a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d9cb6:	a904      	add	r1, sp, #16
   d9cb8:	4668      	mov	r0, sp
   d9cba:	f7ff ffb3 	bl	d9c24 <_ZNK5spark18JSONObjectIterator5valueEv>
   d9cbe:	4668      	mov	r0, sp
   d9cc0:	f7ff fcc5 	bl	d964e <_ZNK5spark9JSONValue5toIntEv>
   d9cc4:	6028      	str	r0, [r5, #0]
   d9cc6:	a801      	add	r0, sp, #4
   d9cc8:	f7fa fcd4 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9ccc:	e7dd      	b.n	d9c8a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d9cce:	a805      	add	r0, sp, #20
   d9cd0:	f7fa fcd0 	bl	d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d9cd4:	b00b      	add	sp, #44	; 0x2c
   d9cd6:	bd30      	pop	{r4, r5, pc}
   d9cd8:	000df2a0 	.word	0x000df2a0

000d9cdc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d9cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9cde:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d9ce0:	4620      	mov	r0, r4
   d9ce2:	4913      	ldr	r1, [pc, #76]	; (d9d30 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d9ce4:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d9ce6:	f002 fd00 	bl	dc6ea <strcmp>
   d9cea:	b940      	cbnz	r0, d9cfe <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d9cec:	f001 fbb2 	bl	db454 <_Z16_fetch_usbserialv>
   d9cf0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d9cf4:	f001 fb9e 	bl	db434 <_ZN9USBSerial5beginEl>
        return &Serial;
   d9cf8:	f001 fbac 	bl	db454 <_Z16_fetch_usbserialv>
   d9cfc:	e015      	b.n	d9d2a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d9cfe:	490d      	ldr	r1, [pc, #52]	; (d9d34 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d9d00:	4620      	mov	r0, r4
   d9d02:	f002 fcf2 	bl	dc6ea <strcmp>
   d9d06:	b978      	cbnz	r0, d9d28 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d9d08:	a902      	add	r1, sp, #8
   d9d0a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d9d0e:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d9d12:	4628      	mov	r0, r5
   d9d14:	f7ff ffb2 	bl	d9c7c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d9d18:	f001 fb10 	bl	db33c <_Z22__fetch_global_Serial1v>
   d9d1c:	9901      	ldr	r1, [sp, #4]
   d9d1e:	f001 fb03 	bl	db328 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d9d22:	f001 fb0b 	bl	db33c <_Z22__fetch_global_Serial1v>
   d9d26:	e000      	b.n	d9d2a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d9d28:	2000      	movs	r0, #0
}
   d9d2a:	b003      	add	sp, #12
   d9d2c:	bd30      	pop	{r4, r5, pc}
   d9d2e:	bf00      	nop
   d9d30:	000df2a5 	.word	0x000df2a5
   d9d34:	000df2ac 	.word	0x000df2ac

000d9d38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9d38:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d9d3a:	6804      	ldr	r4, [r0, #0]
   d9d3c:	6843      	ldr	r3, [r0, #4]
   d9d3e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9d40:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d9d42:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d9d46:	42a6      	cmp	r6, r4
   d9d48:	d005      	beq.n	d9d56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d9d4a:	f104 0008 	add.w	r0, r4, #8
   d9d4e:	f7ff fff3 	bl	d9d38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9d52:	3414      	adds	r4, #20
   d9d54:	e7f7      	b.n	d9d46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d9d56:	6828      	ldr	r0, [r5, #0]
   d9d58:	f7fe f974 	bl	d8044 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d9d5c:	4628      	mov	r0, r5
   d9d5e:	bd70      	pop	{r4, r5, r6, pc}

000d9d60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9d60:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d9d62:	6804      	ldr	r4, [r0, #0]
   d9d64:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9d66:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d9d68:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d9d6c:	42a6      	cmp	r6, r4
   d9d6e:	d004      	beq.n	d9d7a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d9d70:	4620      	mov	r0, r4
   d9d72:	f001 f8f9 	bl	daf68 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d9d76:	3410      	adds	r4, #16
   d9d78:	e7f8      	b.n	d9d6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d9d7a:	6828      	ldr	r0, [r5, #0]
   d9d7c:	f7fe f962 	bl	d8044 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d9d80:	4628      	mov	r0, r5
   d9d82:	bd70      	pop	{r4, r5, r6, pc}

000d9d84 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d9d84:	b510      	push	{r4, lr}
   d9d86:	4604      	mov	r4, r0
   d9d88:	300c      	adds	r0, #12
   d9d8a:	f7ff ffd5 	bl	d9d38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9d8e:	4620      	mov	r0, r4
   d9d90:	f7ff ffe6 	bl	d9d60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d9d94:	4620      	mov	r0, r4
   d9d96:	bd10      	pop	{r4, pc}

000d9d98 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d9d98:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d9d9a:	4b04      	ldr	r3, [pc, #16]	; (d9dac <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d9d9c:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d9d9e:	f840 3b04 	str.w	r3, [r0], #4
   d9da2:	f7ff ffef 	bl	d9d84 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d9da6:	4620      	mov	r0, r4
   d9da8:	bd10      	pop	{r4, pc}
   d9daa:	bf00      	nop
   d9dac:	000deaf8 	.word	0x000deaf8

000d9db0 <_ZN5spark16StreamLogHandlerD0Ev>:
   d9db0:	b510      	push	{r4, lr}
   d9db2:	4604      	mov	r4, r0
   d9db4:	f7ff fff0 	bl	d9d98 <_ZN5spark16StreamLogHandlerD1Ev>
   d9db8:	4620      	mov	r0, r4
   d9dba:	2124      	movs	r1, #36	; 0x24
   d9dbc:	f001 fc9d 	bl	db6fa <_ZdlPvj>
   d9dc0:	4620      	mov	r0, r4
   d9dc2:	bd10      	pop	{r4, pc}

000d9dc4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d9dc4:	b510      	push	{r4, lr}
   d9dc6:	4b03      	ldr	r3, [pc, #12]	; (d9dd4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d9dc8:	6003      	str	r3, [r0, #0]
   d9dca:	4604      	mov	r4, r0
   d9dcc:	f7ff ffe4 	bl	d9d98 <_ZN5spark16StreamLogHandlerD1Ev>
   d9dd0:	4620      	mov	r0, r4
   d9dd2:	bd10      	pop	{r4, pc}
   d9dd4:	000df290 	.word	0x000df290

000d9dd8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d9dd8:	b510      	push	{r4, lr}
   d9dda:	4604      	mov	r4, r0
   d9ddc:	f7ff fff2 	bl	d9dc4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d9de0:	4620      	mov	r0, r4
   d9de2:	2124      	movs	r1, #36	; 0x24
   d9de4:	f001 fc89 	bl	db6fa <_ZdlPvj>
   d9de8:	4620      	mov	r0, r4
   d9dea:	bd10      	pop	{r4, pc}

000d9dec <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d9dec:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d9dee:	6803      	ldr	r3, [r0, #0]
   d9df0:	4604      	mov	r4, r0
   d9df2:	6818      	ldr	r0, [r3, #0]
   d9df4:	f7fd fe78 	bl	d7ae8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d9df8:	4620      	mov	r0, r4
   d9dfa:	bd10      	pop	{r4, pc}

000d9dfc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d9dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9e00:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d9e02:	4b1b      	ldr	r3, [pc, #108]	; (d9e70 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d9e04:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9e06:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d9e0a:	b085      	sub	sp, #20
   d9e0c:	4682      	mov	sl, r0
   d9e0e:	460e      	mov	r6, r1
   d9e10:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9e12:	bb53      	cbnz	r3, d9e6a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d9e14:	f7ff fec0 	bl	d9b98 <_ZN5spark10LogManager8instanceEv>
   d9e18:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9e1a:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9e1c:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d9e1e:	f7ff fde4 	bl	d99ea <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d9e22:	7b23      	ldrb	r3, [r4, #12]
   d9e24:	b9f3      	cbnz	r3, d9e64 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d9e26:	2301      	movs	r3, #1
   d9e28:	7323      	strb	r3, [r4, #12]
   d9e2a:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d9e2c:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d9e2e:	b2f6      	uxtb	r6, r6
   d9e30:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d9e34:	454d      	cmp	r5, r9
   d9e36:	d013      	beq.n	d9e60 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d9e38:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d9e3c:	4641      	mov	r1, r8
   d9e3e:	1d38      	adds	r0, r7, #4
   d9e40:	f7ff fe30 	bl	d9aa4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9e44:	4286      	cmp	r6, r0
   d9e46:	d3f5      	bcc.n	d9e34 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d9e48:	683b      	ldr	r3, [r7, #0]
   d9e4a:	f8cd b000 	str.w	fp, [sp]
   d9e4e:	689b      	ldr	r3, [r3, #8]
   d9e50:	469e      	mov	lr, r3
   d9e52:	4638      	mov	r0, r7
   d9e54:	4643      	mov	r3, r8
   d9e56:	4632      	mov	r2, r6
   d9e58:	4651      	mov	r1, sl
   d9e5a:	4677      	mov	r7, lr
   d9e5c:	47b8      	blx	r7
   d9e5e:	e7e9      	b.n	d9e34 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d9e60:	2300      	movs	r3, #0
   d9e62:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d9e64:	a803      	add	r0, sp, #12
   d9e66:	f7ff ffc1 	bl	d9dec <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d9e6a:	b005      	add	sp, #20
   d9e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9e70:	e000ed00 	.word	0xe000ed00

000d9e74 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d9e74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9e78:	4699      	mov	r9, r3
   d9e7a:	4b19      	ldr	r3, [pc, #100]	; (d9ee0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d9e7c:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d9e82:	4607      	mov	r7, r0
   d9e84:	4688      	mov	r8, r1
   d9e86:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9e88:	bb33      	cbnz	r3, d9ed8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d9e8a:	f7ff fe85 	bl	d9b98 <_ZN5spark10LogManager8instanceEv>
   d9e8e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9e90:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9e92:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9e94:	f7ff fda9 	bl	d99ea <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d9e98:	7b23      	ldrb	r3, [r4, #12]
   d9e9a:	b9d3      	cbnz	r3, d9ed2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d9e9c:	2301      	movs	r3, #1
   d9e9e:	7323      	strb	r3, [r4, #12]
   d9ea0:	6825      	ldr	r5, [r4, #0]
   d9ea2:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d9ea4:	fa5f fb86 	uxtb.w	fp, r6
   d9ea8:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d9eac:	4555      	cmp	r5, sl
   d9eae:	d00e      	beq.n	d9ece <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d9eb0:	f855 6b04 	ldr.w	r6, [r5], #4
   d9eb4:	4649      	mov	r1, r9
   d9eb6:	1d30      	adds	r0, r6, #4
   d9eb8:	f7ff fdf4 	bl	d9aa4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9ebc:	4583      	cmp	fp, r0
   d9ebe:	d3f5      	bcc.n	d9eac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d9ec0:	6833      	ldr	r3, [r6, #0]
   d9ec2:	4642      	mov	r2, r8
   d9ec4:	68db      	ldr	r3, [r3, #12]
   d9ec6:	4639      	mov	r1, r7
   d9ec8:	4630      	mov	r0, r6
   d9eca:	4798      	blx	r3
   d9ecc:	e7ee      	b.n	d9eac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d9ece:	2300      	movs	r3, #0
   d9ed0:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d9ed2:	a801      	add	r0, sp, #4
   d9ed4:	f7ff ff8a 	bl	d9dec <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d9ed8:	b003      	add	sp, #12
   d9eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9ede:	bf00      	nop
   d9ee0:	e000ed00 	.word	0xe000ed00

000d9ee4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d9ee4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d9ee8:	4b15      	ldr	r3, [pc, #84]	; (d9f40 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d9eea:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d9ef0:	4604      	mov	r4, r0
   d9ef2:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9ef4:	b9fb      	cbnz	r3, d9f36 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d9ef6:	f7ff fe4f 	bl	d9b98 <_ZN5spark10LogManager8instanceEv>
   d9efa:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d9efc:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9efe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9f00:	f7ff fd73 	bl	d99ea <_ZN14RecursiveMutex4lockEv>
   d9f04:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d9f08:	2646      	movs	r6, #70	; 0x46
   d9f0a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9f0e:	42af      	cmp	r7, r5
   d9f10:	d107      	bne.n	d9f22 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d9f12:	a801      	add	r0, sp, #4
   d9f14:	f7ff ff6a 	bl	d9dec <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d9f18:	42b4      	cmp	r4, r6
   d9f1a:	bfb4      	ite	lt
   d9f1c:	2000      	movlt	r0, #0
   d9f1e:	2001      	movge	r0, #1
   d9f20:	e00a      	b.n	d9f38 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d9f22:	f855 0b04 	ldr.w	r0, [r5], #4
   d9f26:	4641      	mov	r1, r8
   d9f28:	3004      	adds	r0, #4
   d9f2a:	f7ff fdbb 	bl	d9aa4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9f2e:	4286      	cmp	r6, r0
   d9f30:	bfa8      	it	ge
   d9f32:	4606      	movge	r6, r0
   d9f34:	e7eb      	b.n	d9f0e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d9f36:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d9f38:	b002      	add	sp, #8
   d9f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9f3e:	bf00      	nop
   d9f40:	e000ed00 	.word	0xe000ed00

000d9f44 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9f44:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d9f46:	6803      	ldr	r3, [r0, #0]
   d9f48:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9f4a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d9f4c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d9f50:	429a      	cmp	r2, r3
   d9f52:	4618      	mov	r0, r3
   d9f54:	d00e      	beq.n	d9f74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d9f56:	6806      	ldr	r6, [r0, #0]
   d9f58:	680d      	ldr	r5, [r1, #0]
   d9f5a:	42ae      	cmp	r6, r5
   d9f5c:	f103 0304 	add.w	r3, r3, #4
   d9f60:	d1f6      	bne.n	d9f50 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d9f62:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9f64:	1a52      	subs	r2, r2, r1
   d9f66:	f002 fb4d 	bl	dc604 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d9f6a:	6863      	ldr	r3, [r4, #4]
   d9f6c:	3b01      	subs	r3, #1
   d9f6e:	6063      	str	r3, [r4, #4]
    return true;
   d9f70:	2001      	movs	r0, #1
}
   d9f72:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d9f74:	2000      	movs	r0, #0
   d9f76:	bd70      	pop	{r4, r5, r6, pc}

000d9f78 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d9f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9f7a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d9f7c:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d9f7e:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9f80:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d9f82:	f7ff fd32 	bl	d99ea <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d9f86:	a901      	add	r1, sp, #4
   d9f88:	4620      	mov	r0, r4
   d9f8a:	f7ff ffdb 	bl	d9f44 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d9f8e:	b920      	cbnz	r0, d9f9a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d9f90:	a803      	add	r0, sp, #12
   d9f92:	f7ff ff2b 	bl	d9dec <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d9f96:	b004      	add	sp, #16
   d9f98:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d9f9a:	6863      	ldr	r3, [r4, #4]
   d9f9c:	2b00      	cmp	r3, #0
   d9f9e:	d1f7      	bne.n	d9f90 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d9fa0:	f7ff fe24 	bl	d9bec <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d9fa4:	e7f4      	b.n	d9f90 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d9fa6 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d9fa6:	b570      	push	{r4, r5, r6, lr}
   d9fa8:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d9faa:	6943      	ldr	r3, [r0, #20]
   d9fac:	2618      	movs	r6, #24
   d9fae:	4604      	mov	r4, r0
   d9fb0:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d9fb4:	42ae      	cmp	r6, r5
   d9fb6:	d015      	beq.n	d9fe4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d9fb8:	f105 0110 	add.w	r1, r5, #16
   d9fbc:	4620      	mov	r0, r4
   d9fbe:	f7ff ffc1 	bl	d9f44 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d9fc2:	6863      	ldr	r3, [r4, #4]
   d9fc4:	b90b      	cbnz	r3, d9fca <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d9fc6:	f7ff fe11 	bl	d9bec <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d9fca:	69e0      	ldr	r0, [r4, #28]
   d9fcc:	6929      	ldr	r1, [r5, #16]
   d9fce:	6803      	ldr	r3, [r0, #0]
   d9fd0:	68db      	ldr	r3, [r3, #12]
   d9fd2:	4798      	blx	r3
        if (h.stream) {
   d9fd4:	6969      	ldr	r1, [r5, #20]
   d9fd6:	b119      	cbz	r1, d9fe0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d9fd8:	6a20      	ldr	r0, [r4, #32]
   d9fda:	6803      	ldr	r3, [r0, #0]
   d9fdc:	68db      	ldr	r3, [r3, #12]
   d9fde:	4798      	blx	r3
   d9fe0:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d9fe2:	e7e7      	b.n	d9fb4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d9fe4:	6925      	ldr	r5, [r4, #16]
   d9fe6:	6963      	ldr	r3, [r4, #20]
   d9fe8:	2618      	movs	r6, #24
   d9fea:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d9fee:	42b5      	cmp	r5, r6
   d9ff0:	d004      	beq.n	d9ffc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d9ff2:	4628      	mov	r0, r5
   d9ff4:	f000 ffb8 	bl	daf68 <_ZN6StringD1Ev>
   d9ff8:	3518      	adds	r5, #24
   d9ffa:	e7f8      	b.n	d9fee <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d9ffc:	2300      	movs	r3, #0
   d9ffe:	6163      	str	r3, [r4, #20]
   da000:	bd70      	pop	{r4, r5, r6, pc}

000da002 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   da002:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da004:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da006:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   da008:	f7ff fdf0 	bl	d9bec <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   da00c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   da010:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   da014:	f7ff fce9 	bl	d99ea <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   da018:	4620      	mov	r0, r4
   da01a:	f7ff ffc4 	bl	d9fa6 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   da01e:	4628      	mov	r0, r5
   da020:	f7ff fee4 	bl	d9dec <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   da024:	6a60      	ldr	r0, [r4, #36]	; 0x24
   da026:	b108      	cbz	r0, da02c <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   da028:	f7fd fd4e 	bl	d7ac8 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   da02c:	6925      	ldr	r5, [r4, #16]
   da02e:	6963      	ldr	r3, [r4, #20]
   da030:	2618      	movs	r6, #24
   da032:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   da036:	42b5      	cmp	r5, r6
   da038:	d004      	beq.n	da044 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   da03a:	4628      	mov	r0, r5
   da03c:	f000 ff94 	bl	daf68 <_ZN6StringD1Ev>
   da040:	3518      	adds	r5, #24
   da042:	e7f8      	b.n	da036 <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   da044:	6920      	ldr	r0, [r4, #16]
   da046:	f7fd fffd 	bl	d8044 <free>
   da04a:	6820      	ldr	r0, [r4, #0]
   da04c:	f7fd fffa 	bl	d8044 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   da050:	4620      	mov	r0, r4
   da052:	b002      	add	sp, #8
   da054:	bd70      	pop	{r4, r5, r6, pc}

000da056 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da056:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   da058:	680a      	ldr	r2, [r1, #0]
   da05a:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   da05c:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da05e:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   da060:	684a      	ldr	r2, [r1, #4]
   da062:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   da064:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da066:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   da068:	688a      	ldr	r2, [r1, #8]
   da06a:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da06c:	608b      	str	r3, [r1, #8]
   da06e:	4770      	bx	lr

000da070 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   da070:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da072:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   da074:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da076:	6003      	str	r3, [r0, #0]
   da078:	6043      	str	r3, [r0, #4]
   da07a:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   da07c:	f7ff ffeb 	bl	da056 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   da080:	4620      	mov	r0, r4
   da082:	bd10      	pop	{r4, pc}

000da084 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   da084:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   da086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da088:	4604      	mov	r4, r0
   da08a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   da08c:	d925      	bls.n	da0da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   da08e:	4290      	cmp	r0, r2
   da090:	d224      	bcs.n	da0dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   da092:	1a55      	subs	r5, r2, r1
   da094:	3d14      	subs	r5, #20
   da096:	442c      	add	r4, r5
   da098:	f1a1 0714 	sub.w	r7, r1, #20
   da09c:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da0a0:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   da0a2:	f1a5 0308 	sub.w	r3, r5, #8
   da0a6:	429f      	cmp	r7, r3
   da0a8:	d037      	beq.n	da11a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   da0aa:	b184      	cbz	r4, da0ce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   da0ac:	f855 3c08 	ldr.w	r3, [r5, #-8]
   da0b0:	6023      	str	r3, [r4, #0]
   da0b2:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   da0b6:	80a3      	strh	r3, [r4, #4]
   da0b8:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   da0bc:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da0be:	60a6      	str	r6, [r4, #8]
   da0c0:	60e6      	str	r6, [r4, #12]
   da0c2:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   da0c4:	4629      	mov	r1, r5
   da0c6:	f104 0008 	add.w	r0, r4, #8
   da0ca:	f7ff ffc4 	bl	da056 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   da0ce:	4628      	mov	r0, r5
   da0d0:	f7ff fe32 	bl	d9d38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   da0d4:	3c14      	subs	r4, #20
   da0d6:	3d14      	subs	r5, #20
   da0d8:	e7e3      	b.n	da0a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   da0da:	d01e      	beq.n	da11a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   da0dc:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da0e0:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   da0e2:	f1a5 0308 	sub.w	r3, r5, #8
   da0e6:	429e      	cmp	r6, r3
   da0e8:	d017      	beq.n	da11a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   da0ea:	b184      	cbz	r4, da10e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   da0ec:	f855 3c08 	ldr.w	r3, [r5, #-8]
   da0f0:	6023      	str	r3, [r4, #0]
   da0f2:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   da0f6:	80a3      	strh	r3, [r4, #4]
   da0f8:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   da0fc:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da0fe:	60a7      	str	r7, [r4, #8]
   da100:	60e7      	str	r7, [r4, #12]
   da102:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   da104:	4629      	mov	r1, r5
   da106:	f104 0008 	add.w	r0, r4, #8
   da10a:	f7ff ffa4 	bl	da056 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   da10e:	4628      	mov	r0, r5
   da110:	f7ff fe12 	bl	d9d38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   da114:	3414      	adds	r4, #20
   da116:	3514      	adds	r5, #20
   da118:	e7e3      	b.n	da0e2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   da11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da11c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   da11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da11e:	6845      	ldr	r5, [r0, #4]
   da120:	6883      	ldr	r3, [r0, #8]
   da122:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   da124:	4604      	mov	r4, r0
   da126:	460e      	mov	r6, r1
   da128:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da12a:	db0e      	blt.n	da14a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   da12c:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   da12e:	2d00      	cmp	r5, #0
   da130:	dd05      	ble.n	da13e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   da132:	00a9      	lsls	r1, r5, #2
   da134:	6800      	ldr	r0, [r0, #0]
   da136:	f7fd ff8d 	bl	d8054 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   da13a:	b920      	cbnz	r0, da146 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   da13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   da13e:	6800      	ldr	r0, [r0, #0]
   da140:	f7fd ff80 	bl	d8044 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   da144:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   da146:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   da148:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   da14a:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   da14c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   da14e:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   da152:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   da156:	1a52      	subs	r2, r2, r1
   da158:	1d08      	adds	r0, r1, #4
   da15a:	f002 fa53 	bl	dc604 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   da15e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   da162:	6863      	ldr	r3, [r4, #4]
   da164:	3301      	adds	r3, #1
   da166:	6063      	str	r3, [r4, #4]
   da168:	2001      	movs	r0, #1
    return true;
}
   da16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da16c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   da16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da16e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   da170:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   da172:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da174:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da176:	f7ff fc38 	bl	d99ea <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   da17a:	6823      	ldr	r3, [r4, #0]
   da17c:	6861      	ldr	r1, [r4, #4]
   da17e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   da182:	4283      	cmp	r3, r0
   da184:	461a      	mov	r2, r3
   da186:	d009      	beq.n	da19c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   da188:	6812      	ldr	r2, [r2, #0]
   da18a:	42aa      	cmp	r2, r5
   da18c:	f103 0304 	add.w	r3, r3, #4
   da190:	d1f7      	bne.n	da182 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   da192:	a801      	add	r0, sp, #4
   da194:	f7ff fe2a 	bl	d9dec <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   da198:	2500      	movs	r5, #0
   da19a:	e00e      	b.n	da1ba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   da19c:	462a      	mov	r2, r5
   da19e:	4620      	mov	r0, r4
   da1a0:	f7ff ffbc 	bl	da11c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   da1a4:	4605      	mov	r5, r0
   da1a6:	2800      	cmp	r0, #0
   da1a8:	d0f3      	beq.n	da192 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   da1aa:	6863      	ldr	r3, [r4, #4]
   da1ac:	2b01      	cmp	r3, #1
   da1ae:	d101      	bne.n	da1b4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   da1b0:	f7ff fd10 	bl	d9bd4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   da1b4:	a801      	add	r0, sp, #4
   da1b6:	f7ff fe19 	bl	d9dec <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   da1ba:	4628      	mov	r0, r5
   da1bc:	b003      	add	sp, #12
   da1be:	bd30      	pop	{r4, r5, pc}

000da1c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   da1c0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   da1c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da1c4:	4606      	mov	r6, r0
   da1c6:	460c      	mov	r4, r1
   da1c8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   da1ca:	d914      	bls.n	da1f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   da1cc:	4290      	cmp	r0, r2
   da1ce:	d213      	bcs.n	da1f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   da1d0:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   da1d4:	1a6c      	subs	r4, r5, r1
   da1d6:	f1a1 0710 	sub.w	r7, r1, #16
   da1da:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   da1dc:	42af      	cmp	r7, r5
   da1de:	d018      	beq.n	da212 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   da1e0:	b11c      	cbz	r4, da1ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   da1e2:	4629      	mov	r1, r5
   da1e4:	4620      	mov	r0, r4
   da1e6:	f000 feaf 	bl	daf48 <_ZN6StringC1EOS_>
                end->~T();
   da1ea:	4628      	mov	r0, r5
   da1ec:	f000 febc 	bl	daf68 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   da1f0:	3d10      	subs	r5, #16
   da1f2:	3c10      	subs	r4, #16
   da1f4:	e7f2      	b.n	da1dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   da1f6:	d00c      	beq.n	da212 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   da1f8:	42ac      	cmp	r4, r5
   da1fa:	d00a      	beq.n	da212 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   da1fc:	b11e      	cbz	r6, da206 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   da1fe:	4621      	mov	r1, r4
   da200:	4630      	mov	r0, r6
   da202:	f000 fea1 	bl	daf48 <_ZN6StringC1EOS_>
                p->~T();
   da206:	4620      	mov	r0, r4
   da208:	f000 feae 	bl	daf68 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   da20c:	3410      	adds	r4, #16
   da20e:	3610      	adds	r6, #16
   da210:	e7f2      	b.n	da1f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   da212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da214 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   da214:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   da216:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   da218:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   da21a:	dd0b      	ble.n	da234 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   da21c:	0130      	lsls	r0, r6, #4
   da21e:	f7fd ff09 	bl	d8034 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   da222:	4604      	mov	r4, r0
   da224:	b170      	cbz	r0, da244 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   da226:	e895 0006 	ldmia.w	r5, {r1, r2}
   da22a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   da22e:	f7ff ffc7 	bl	da1c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   da232:	e000      	b.n	da236 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   da234:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   da236:	6828      	ldr	r0, [r5, #0]
   da238:	f7fd ff04 	bl	d8044 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   da23c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   da23e:	60ae      	str	r6, [r5, #8]
        return true;
   da240:	2001      	movs	r0, #1
   da242:	bd70      	pop	{r4, r5, r6, pc}
    }
   da244:	bd70      	pop	{r4, r5, r6, pc}

000da246 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   da246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da24a:	2300      	movs	r3, #0
   da24c:	b095      	sub	sp, #84	; 0x54
   da24e:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   da250:	2246      	movs	r2, #70	; 0x46
   da252:	6003      	str	r3, [r0, #0]
   da254:	6043      	str	r3, [r0, #4]
   da256:	6083      	str	r3, [r0, #8]
   da258:	60c3      	str	r3, [r0, #12]
   da25a:	6103      	str	r3, [r0, #16]
   da25c:	6143      	str	r3, [r0, #20]
   da25e:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   da260:	9102      	str	r1, [sp, #8]
   da262:	f8da 1004 	ldr.w	r1, [sl, #4]
   da266:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   da268:	4299      	cmp	r1, r3
   da26a:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da26c:	9309      	str	r3, [sp, #36]	; 0x24
   da26e:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   da270:	f340 809d 	ble.w	da3ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   da274:	a808      	add	r0, sp, #32
   da276:	f7ff ffcd 	bl	da214 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   da27a:	2800      	cmp	r0, #0
   da27c:	f040 8097 	bne.w	da3ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   da280:	e08e      	b.n	da3a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   da282:	4621      	mov	r1, r4
   da284:	a80b      	add	r0, sp, #44	; 0x2c
   da286:	f000 fe5f 	bl	daf48 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   da28a:	a90b      	add	r1, sp, #44	; 0x2c
   da28c:	a80f      	add	r0, sp, #60	; 0x3c
   da28e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   da290:	f000 fe5a 	bl	daf48 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da294:	9909      	ldr	r1, [sp, #36]	; 0x24
   da296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da298:	4299      	cmp	r1, r3
   da29a:	f2c0 80ce 	blt.w	da43a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   da29e:	3101      	adds	r1, #1
   da2a0:	a808      	add	r0, sp, #32
   da2a2:	f7ff ffb7 	bl	da214 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   da2a6:	2800      	cmp	r0, #0
   da2a8:	f040 80c7 	bne.w	da43a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   da2ac:	a80f      	add	r0, sp, #60	; 0x3c
   da2ae:	f000 fe5b 	bl	daf68 <_ZN6StringD1Ev>
   da2b2:	a80b      	add	r0, sp, #44	; 0x2c
   da2b4:	f000 fe58 	bl	daf68 <_ZN6StringD1Ev>
   da2b8:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   da2ba:	42a7      	cmp	r7, r4
   da2bc:	d1e1      	bne.n	da282 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da2be:	2600      	movs	r6, #0
   da2c0:	960b      	str	r6, [sp, #44]	; 0x2c
   da2c2:	960c      	str	r6, [sp, #48]	; 0x30
   da2c4:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   da2c6:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   da2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   da2ca:	429e      	cmp	r6, r3
   da2cc:	f280 80a8 	bge.w	da420 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   da2d0:	0133      	lsls	r3, r6, #4
   da2d2:	9a08      	ldr	r2, [sp, #32]
   da2d4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   da2d6:	9306      	str	r3, [sp, #24]
        if (!category) {
   da2d8:	2b00      	cmp	r3, #0
   da2da:	f000 809f 	beq.w	da41c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   da2de:	2314      	movs	r3, #20
   da2e0:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   da2e2:	f8cd 901c 	str.w	r9, [sp, #28]
   da2e6:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   da2e8:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   da2ea:	a907      	add	r1, sp, #28
   da2ec:	a806      	add	r0, sp, #24
   da2ee:	f7ff fb2b 	bl	d9948 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   da2f2:	4607      	mov	r7, r0
   da2f4:	2800      	cmp	r0, #0
   da2f6:	f000 8091 	beq.w	da41c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   da2fa:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   da2fc:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   da2fe:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   da302:	9a07      	ldr	r2, [sp, #28]
   da304:	4620      	mov	r0, r4
   da306:	f7ff fb8d 	bl	d9a24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da30a:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   da30e:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da310:	f1b8 0f00 	cmp.w	r8, #0
   da314:	d153      	bne.n	da3be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   da316:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   da31a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   da31e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da322:	970f      	str	r7, [sp, #60]	; 0x3c
   da324:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   da328:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   da32c:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   da330:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da334:	6867      	ldr	r7, [r4, #4]
   da336:	68a3      	ldr	r3, [r4, #8]
   da338:	429f      	cmp	r7, r3
   da33a:	da4f      	bge.n	da3dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   da33c:	9b00      	ldr	r3, [sp, #0]
   da33e:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   da342:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   da344:	2214      	movs	r2, #20
   da346:	4353      	muls	r3, r2
   da348:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   da34c:	fb02 b201 	mla	r2, r2, r1, fp
   da350:	f107 0014 	add.w	r0, r7, #20
   da354:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   da356:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   da358:	f7ff fe94 	bl	da084 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   da35c:	b1a7      	cbz	r7, da388 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   da35e:	9b03      	ldr	r3, [sp, #12]
   da360:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   da362:	f84b 2003 	str.w	r2, [fp, r3]
   da366:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   da36a:	80bb      	strh	r3, [r7, #4]
   da36c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   da370:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da372:	f8c7 9008 	str.w	r9, [r7, #8]
   da376:	f8c7 900c 	str.w	r9, [r7, #12]
   da37a:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   da37e:	a911      	add	r1, sp, #68	; 0x44
   da380:	f107 0008 	add.w	r0, r7, #8
   da384:	f7ff fe67 	bl	da056 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   da388:	6863      	ldr	r3, [r4, #4]
   da38a:	3301      	adds	r3, #1
   da38c:	6063      	str	r3, [r4, #4]
   da38e:	a811      	add	r0, sp, #68	; 0x44
   da390:	f7ff fcd2 	bl	d9d38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da394:	f1b8 0f00 	cmp.w	r8, #0
   da398:	d011      	beq.n	da3be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   da39a:	a80b      	add	r0, sp, #44	; 0x2c
   da39c:	f7ff fccc 	bl	d9d38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   da3a0:	a808      	add	r0, sp, #32
   da3a2:	f7ff fcdd 	bl	d9d60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   da3a6:	4628      	mov	r0, r5
   da3a8:	b015      	add	sp, #84	; 0x54
   da3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da3ae:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   da3b2:	f8da 3004 	ldr.w	r3, [sl, #4]
   da3b6:	2714      	movs	r7, #20
   da3b8:	fb07 4703 	mla	r7, r7, r3, r4
   da3bc:	e77d      	b.n	da2ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   da3be:	6823      	ldr	r3, [r4, #0]
   da3c0:	9a00      	ldr	r2, [sp, #0]
   da3c2:	2414      	movs	r4, #20
   da3c4:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   da3c8:	9b06      	ldr	r3, [sp, #24]
   da3ca:	781b      	ldrb	r3, [r3, #0]
   da3cc:	bb23      	cbnz	r3, da418 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   da3ce:	f8da 3000 	ldr.w	r3, [sl]
   da3d2:	9a01      	ldr	r2, [sp, #4]
   da3d4:	4413      	add	r3, r2
   da3d6:	7c1b      	ldrb	r3, [r3, #16]
   da3d8:	80e3      	strh	r3, [r4, #6]
   da3da:	e01d      	b.n	da418 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da3dc:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   da3de:	2f00      	cmp	r7, #0
   da3e0:	dd0f      	ble.n	da402 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   da3e2:	2314      	movs	r3, #20
   da3e4:	fb03 f007 	mul.w	r0, r3, r7
   da3e8:	9303      	str	r3, [sp, #12]
   da3ea:	f7fd fe23 	bl	d8034 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   da3ee:	4683      	mov	fp, r0
   da3f0:	b178      	cbz	r0, da412 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   da3f2:	e894 0006 	ldmia.w	r4, {r1, r2}
   da3f6:	9b03      	ldr	r3, [sp, #12]
   da3f8:	fb03 1202 	mla	r2, r3, r2, r1
   da3fc:	f7ff fe42 	bl	da084 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   da400:	e000      	b.n	da404 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   da402:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   da404:	6820      	ldr	r0, [r4, #0]
   da406:	f7fd fe1d 	bl	d8044 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   da40a:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   da40e:	60a7      	str	r7, [r4, #8]
   da410:	e794      	b.n	da33c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da412:	f04f 0801 	mov.w	r8, #1
   da416:	e7ba      	b.n	da38e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   da418:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   da41a:	e766      	b.n	da2ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   da41c:	3601      	adds	r6, #1
   da41e:	e753      	b.n	da2c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   da420:	a908      	add	r1, sp, #32
   da422:	4628      	mov	r0, r5
   da424:	f7ff fe17 	bl	da056 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   da428:	a90b      	add	r1, sp, #44	; 0x2c
   da42a:	f105 000c 	add.w	r0, r5, #12
   da42e:	f7ff fe12 	bl	da056 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   da432:	f89d 3008 	ldrb.w	r3, [sp, #8]
   da436:	762b      	strb	r3, [r5, #24]
   da438:	e7af      	b.n	da39a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   da43a:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   da43c:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   da43e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   da442:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   da446:	4631      	mov	r1, r6
   da448:	f106 0010 	add.w	r0, r6, #16
   da44c:	f7ff feb8 	bl	da1c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   da450:	b11e      	cbz	r6, da45a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   da452:	a90f      	add	r1, sp, #60	; 0x3c
   da454:	4630      	mov	r0, r6
   da456:	f000 fd77 	bl	daf48 <_ZN6StringC1EOS_>
    ++size_;
   da45a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   da45c:	3301      	adds	r3, #1
   da45e:	9309      	str	r3, [sp, #36]	; 0x24
   da460:	e724      	b.n	da2ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000da464 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   da464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   da466:	4604      	mov	r4, r0
   da468:	4b09      	ldr	r3, [pc, #36]	; (da490 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   da46a:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   da46e:	4605      	mov	r5, r0
   da470:	460e      	mov	r6, r1
        filter_(level, filters) {
   da472:	a801      	add	r0, sp, #4
   da474:	4611      	mov	r1, r2
   da476:	f7fa ffed 	bl	d5454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da47a:	aa01      	add	r2, sp, #4
   da47c:	4631      	mov	r1, r6
   da47e:	4620      	mov	r0, r4
   da480:	f7ff fee1 	bl	da246 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da484:	a801      	add	r0, sp, #4
   da486:	f7fa f91f 	bl	d46c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   da48a:	4628      	mov	r0, r5
   da48c:	b004      	add	sp, #16
   da48e:	bd70      	pop	{r4, r5, r6, pc}
   da490:	000deaf8 	.word	0x000deaf8

000da494 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   da494:	b5f0      	push	{r4, r5, r6, r7, lr}
   da496:	460f      	mov	r7, r1
   da498:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da49a:	492b      	ldr	r1, [pc, #172]	; (da548 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   da49c:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da49e:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   da4a0:	4616      	mov	r6, r2
   da4a2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da4a4:	f002 f921 	bl	dc6ea <strcmp>
   da4a8:	bb28      	cbnz	r0, da4f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   da4aa:	2c00      	cmp	r4, #0
   da4ac:	d049      	beq.n	da542 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   da4ae:	4629      	mov	r1, r5
   da4b0:	a801      	add	r0, sp, #4
   da4b2:	f7ff fddd 	bl	da070 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da4b6:	4925      	ldr	r1, [pc, #148]	; (da54c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   da4b8:	2024      	movs	r0, #36	; 0x24
   da4ba:	f001 f929 	bl	db710 <_ZnwjRKSt9nothrow_t>
   da4be:	4605      	mov	r5, r0
   da4c0:	b1b8      	cbz	r0, da4f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   da4c2:	a901      	add	r1, sp, #4
   da4c4:	a804      	add	r0, sp, #16
   da4c6:	f7ff fdd3 	bl	da070 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   da4ca:	a904      	add	r1, sp, #16
   da4cc:	a807      	add	r0, sp, #28
   da4ce:	f7fa ffc1 	bl	d5454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da4d2:	aa07      	add	r2, sp, #28
   da4d4:	4631      	mov	r1, r6
   da4d6:	4628      	mov	r0, r5
   da4d8:	f7ff ffc4 	bl	da464 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da4dc:	a807      	add	r0, sp, #28
   da4de:	f7fa f8f3 	bl	d46c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da4e2:	4b1b      	ldr	r3, [pc, #108]	; (da550 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   da4e4:	602b      	str	r3, [r5, #0]
   da4e6:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   da4e8:	a804      	add	r0, sp, #16
   da4ea:	f7fa f8ed 	bl	d46c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da4ee:	4b19      	ldr	r3, [pc, #100]	; (da554 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   da4f0:	602b      	str	r3, [r5, #0]
   da4f2:	a801      	add	r0, sp, #4
   da4f4:	e01f      	b.n	da536 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   da4f6:	4918      	ldr	r1, [pc, #96]	; (da558 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   da4f8:	4638      	mov	r0, r7
   da4fa:	f002 f8f6 	bl	dc6ea <strcmp>
   da4fe:	b9f0      	cbnz	r0, da53e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   da500:	b1fc      	cbz	r4, da542 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   da502:	4629      	mov	r1, r5
   da504:	a804      	add	r0, sp, #16
   da506:	f7ff fdb3 	bl	da070 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da50a:	4910      	ldr	r1, [pc, #64]	; (da54c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   da50c:	2024      	movs	r0, #36	; 0x24
   da50e:	f001 f8ff 	bl	db710 <_ZnwjRKSt9nothrow_t>
   da512:	4605      	mov	r5, r0
   da514:	b170      	cbz	r0, da534 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   da516:	a904      	add	r1, sp, #16
   da518:	a807      	add	r0, sp, #28
   da51a:	f7fa ff9b 	bl	d5454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da51e:	aa07      	add	r2, sp, #28
   da520:	4631      	mov	r1, r6
   da522:	4628      	mov	r0, r5
   da524:	f7ff ff9e 	bl	da464 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da528:	a807      	add	r0, sp, #28
   da52a:	f7fa f8cd 	bl	d46c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da52e:	4b08      	ldr	r3, [pc, #32]	; (da550 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   da530:	602b      	str	r3, [r5, #0]
   da532:	622c      	str	r4, [r5, #32]
   da534:	a804      	add	r0, sp, #16
   da536:	f7fa f8c7 	bl	d46c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da53a:	4628      	mov	r0, r5
   da53c:	e002      	b.n	da544 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   da53e:	2000      	movs	r0, #0
   da540:	e000      	b.n	da544 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   da542:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   da544:	b00b      	add	sp, #44	; 0x2c
   da546:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da548:	000df2fe 	.word	0x000df2fe
   da54c:	000df4bc 	.word	0x000df4bc
   da550:	000df384 	.word	0x000df384
   da554:	000df290 	.word	0x000df290
   da558:	000df302 	.word	0x000df302

000da55c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   da55c:	4b01      	ldr	r3, [pc, #4]	; (da564 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   da55e:	4a02      	ldr	r2, [pc, #8]	; (da568 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   da560:	601a      	str	r2, [r3, #0]
   da562:	4770      	bx	lr
   da564:	2003e398 	.word	0x2003e398
   da568:	000df313 	.word	0x000df313

000da56c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da570:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   da572:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da576:	4604      	mov	r4, r0
   da578:	460e      	mov	r6, r1
   da57a:	4617      	mov	r7, r2
   da57c:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   da57e:	f000 ff69 	bl	db454 <_Z16_fetch_usbserialv>
   da582:	4581      	cmp	r9, r0
   da584:	d105      	bne.n	da592 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   da586:	485a      	ldr	r0, [pc, #360]	; (da6f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   da588:	f000 fa73 	bl	daa72 <_ZN5spark12NetworkClass9listeningEv>
   da58c:	2800      	cmp	r0, #0
   da58e:	f040 80ac 	bne.w	da6ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   da592:	792b      	ldrb	r3, [r5, #4]
   da594:	071b      	lsls	r3, r3, #28
   da596:	d505      	bpl.n	da5a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   da598:	696b      	ldr	r3, [r5, #20]
   da59a:	4a56      	ldr	r2, [pc, #344]	; (da6f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   da59c:	6a20      	ldr	r0, [r4, #32]
   da59e:	2100      	movs	r1, #0
   da5a0:	f000 fb2f 	bl	dac02 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   da5a4:	f1b8 0f00 	cmp.w	r8, #0
   da5a8:	d00d      	beq.n	da5c6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   da5aa:	215b      	movs	r1, #91	; 0x5b
   da5ac:	4620      	mov	r0, r4
   da5ae:	f7ff fa2d 	bl	d9a0c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   da5b2:	4641      	mov	r1, r8
   da5b4:	4620      	mov	r0, r4
   da5b6:	f7ff fa1b 	bl	d99f0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   da5ba:	6823      	ldr	r3, [r4, #0]
   da5bc:	494e      	ldr	r1, [pc, #312]	; (da6f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   da5be:	68db      	ldr	r3, [r3, #12]
   da5c0:	2202      	movs	r2, #2
   da5c2:	4620      	mov	r0, r4
   da5c4:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   da5c6:	792b      	ldrb	r3, [r5, #4]
   da5c8:	07d9      	lsls	r1, r3, #31
   da5ca:	d525      	bpl.n	da618 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   da5cc:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   da5d0:	212f      	movs	r1, #47	; 0x2f
   da5d2:	4640      	mov	r0, r8
   da5d4:	f002 f8d9 	bl	dc78a <strrchr>
    if (s1) {
   da5d8:	b108      	cbz	r0, da5de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   da5da:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   da5de:	4641      	mov	r1, r8
   da5e0:	4620      	mov	r0, r4
   da5e2:	f7ff fa05 	bl	d99f0 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   da5e6:	792b      	ldrb	r3, [r5, #4]
   da5e8:	079a      	lsls	r2, r3, #30
   da5ea:	d509      	bpl.n	da600 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   da5ec:	213a      	movs	r1, #58	; 0x3a
   da5ee:	4620      	mov	r0, r4
   da5f0:	f7ff fa0c 	bl	d9a0c <_ZN5spark16StreamLogHandler5writeEc>
   da5f4:	68eb      	ldr	r3, [r5, #12]
   da5f6:	4a41      	ldr	r2, [pc, #260]	; (da6fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   da5f8:	6a20      	ldr	r0, [r4, #32]
   da5fa:	2100      	movs	r1, #0
   da5fc:	f000 fb01 	bl	dac02 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   da600:	792b      	ldrb	r3, [r5, #4]
   da602:	f013 0f04 	tst.w	r3, #4
   da606:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   da608:	bf18      	it	ne
   da60a:	493d      	ldrne	r1, [pc, #244]	; (da700 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   da60c:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   da60e:	bf08      	it	eq
   da610:	493c      	ldreq	r1, [pc, #240]	; (da704 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   da612:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   da614:	4620      	mov	r0, r4
   da616:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   da618:	792b      	ldrb	r3, [r5, #4]
   da61a:	075b      	lsls	r3, r3, #29
   da61c:	d518      	bpl.n	da650 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da61e:	6929      	ldr	r1, [r5, #16]
   da620:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   da622:	4613      	mov	r3, r2
   da624:	f813 0b01 	ldrb.w	r0, [r3], #1
   da628:	b138      	cbz	r0, da63a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   da62a:	2820      	cmp	r0, #32
   da62c:	d101      	bne.n	da632 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   da62e:	4619      	mov	r1, r3
   da630:	e001      	b.n	da636 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   da632:	2828      	cmp	r0, #40	; 0x28
   da634:	d001      	beq.n	da63a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da636:	461a      	mov	r2, r3
   da638:	e7f3      	b.n	da622 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   da63a:	6823      	ldr	r3, [r4, #0]
   da63c:	1a52      	subs	r2, r2, r1
   da63e:	68db      	ldr	r3, [r3, #12]
   da640:	4620      	mov	r0, r4
   da642:	4798      	blx	r3
        write("(): ", 4);
   da644:	6823      	ldr	r3, [r4, #0]
   da646:	4930      	ldr	r1, [pc, #192]	; (da708 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   da648:	68db      	ldr	r3, [r3, #12]
   da64a:	2204      	movs	r2, #4
   da64c:	4620      	mov	r0, r4
   da64e:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   da650:	2100      	movs	r1, #0
   da652:	4638      	mov	r0, r7
   da654:	f7fd fc20 	bl	d7e98 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   da658:	4601      	mov	r1, r0
   da65a:	4620      	mov	r0, r4
   da65c:	f7ff f9c8 	bl	d99f0 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   da660:	6823      	ldr	r3, [r4, #0]
   da662:	4928      	ldr	r1, [pc, #160]	; (da704 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   da664:	68db      	ldr	r3, [r3, #12]
   da666:	2202      	movs	r2, #2
   da668:	4620      	mov	r0, r4
   da66a:	4798      	blx	r3
    // Message
    if (msg) {
   da66c:	b11e      	cbz	r6, da676 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   da66e:	4631      	mov	r1, r6
   da670:	4620      	mov	r0, r4
   da672:	f7ff f9bd 	bl	d99f0 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   da676:	792b      	ldrb	r3, [r5, #4]
   da678:	f013 0f30 	tst.w	r3, #48	; 0x30
   da67c:	d02d      	beq.n	da6da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   da67e:	6823      	ldr	r3, [r4, #0]
   da680:	4922      	ldr	r1, [pc, #136]	; (da70c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   da682:	68db      	ldr	r3, [r3, #12]
   da684:	4620      	mov	r0, r4
   da686:	2202      	movs	r2, #2
   da688:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   da68a:	792b      	ldrb	r3, [r5, #4]
   da68c:	06d8      	lsls	r0, r3, #27
   da68e:	d50b      	bpl.n	da6a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   da690:	6823      	ldr	r3, [r4, #0]
   da692:	491f      	ldr	r1, [pc, #124]	; (da710 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   da694:	68db      	ldr	r3, [r3, #12]
   da696:	2207      	movs	r2, #7
   da698:	4620      	mov	r0, r4
   da69a:	4798      	blx	r3
   da69c:	69ab      	ldr	r3, [r5, #24]
   da69e:	4a1d      	ldr	r2, [pc, #116]	; (da714 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   da6a0:	6a20      	ldr	r0, [r4, #32]
   da6a2:	2100      	movs	r1, #0
   da6a4:	f000 faad 	bl	dac02 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   da6a8:	792b      	ldrb	r3, [r5, #4]
   da6aa:	0699      	lsls	r1, r3, #26
   da6ac:	d511      	bpl.n	da6d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   da6ae:	06da      	lsls	r2, r3, #27
   da6b0:	d505      	bpl.n	da6be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   da6b2:	6823      	ldr	r3, [r4, #0]
   da6b4:	4912      	ldr	r1, [pc, #72]	; (da700 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   da6b6:	68db      	ldr	r3, [r3, #12]
   da6b8:	2202      	movs	r2, #2
   da6ba:	4620      	mov	r0, r4
   da6bc:	4798      	blx	r3
            }
            write("details = ", 10);
   da6be:	6823      	ldr	r3, [r4, #0]
   da6c0:	4915      	ldr	r1, [pc, #84]	; (da718 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   da6c2:	68db      	ldr	r3, [r3, #12]
   da6c4:	4620      	mov	r0, r4
   da6c6:	220a      	movs	r2, #10
   da6c8:	4798      	blx	r3
            write(attr.details);
   da6ca:	69e9      	ldr	r1, [r5, #28]
   da6cc:	4620      	mov	r0, r4
   da6ce:	f7ff f98f 	bl	d99f0 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   da6d2:	215d      	movs	r1, #93	; 0x5d
   da6d4:	4620      	mov	r0, r4
   da6d6:	f7ff f999 	bl	d9a0c <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   da6da:	6823      	ldr	r3, [r4, #0]
   da6dc:	490f      	ldr	r1, [pc, #60]	; (da71c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   da6de:	68db      	ldr	r3, [r3, #12]
   da6e0:	4620      	mov	r0, r4
   da6e2:	2202      	movs	r2, #2
}
   da6e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   da6e8:	4718      	bx	r3
   da6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da6ee:	bf00      	nop
   da6f0:	2003e570 	.word	0x2003e570
   da6f4:	000df317 	.word	0x000df317
   da6f8:	000df31e 	.word	0x000df31e
   da6fc:	000deba9 	.word	0x000deba9
   da700:	000df321 	.word	0x000df321
   da704:	000df326 	.word	0x000df326
   da708:	000df324 	.word	0x000df324
   da70c:	000df329 	.word	0x000df329
   da710:	000df32c 	.word	0x000df32c
   da714:	000df334 	.word	0x000df334
   da718:	000df337 	.word	0x000df337
   da71c:	000def83 	.word	0x000def83

000da720 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da724:	b085      	sub	sp, #20
   da726:	f8d0 8020 	ldr.w	r8, [r0, #32]
   da72a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   da72c:	4606      	mov	r6, r0
   da72e:	460f      	mov	r7, r1
   da730:	4691      	mov	r9, r2
   da732:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   da734:	f000 fe8e 	bl	db454 <_Z16_fetch_usbserialv>
   da738:	4580      	cmp	r8, r0
   da73a:	d105      	bne.n	da748 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   da73c:	484a      	ldr	r0, [pc, #296]	; (da868 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   da73e:	f000 f998 	bl	daa72 <_ZN5spark12NetworkClass9listeningEv>
   da742:	2800      	cmp	r0, #0
   da744:	f040 808c 	bne.w	da860 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   da748:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   da74a:	4a48      	ldr	r2, [pc, #288]	; (da86c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   da74c:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   da74e:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   da752:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   da754:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   da756:	f88d 8008 	strb.w	r8, [sp, #8]
   da75a:	f7fe ffc2 	bl	d96e2 <_ZN5spark10JSONWriter11beginObjectEv>
   da75e:	4641      	mov	r1, r8
   da760:	4648      	mov	r0, r9
   da762:	f7fd fb99 	bl	d7e98 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   da766:	4942      	ldr	r1, [pc, #264]	; (da870 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   da768:	4680      	mov	r8, r0
   da76a:	2201      	movs	r2, #1
   da76c:	a801      	add	r0, sp, #4
   da76e:	f7ff f83d 	bl	d97ec <_ZN5spark10JSONWriter4nameEPKcj>
   da772:	4641      	mov	r1, r8
   da774:	f7ff f92c 	bl	d99d0 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   da778:	b13f      	cbz	r7, da78a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   da77a:	493e      	ldr	r1, [pc, #248]	; (da874 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   da77c:	2201      	movs	r2, #1
   da77e:	a801      	add	r0, sp, #4
   da780:	f7ff f834 	bl	d97ec <_ZN5spark10JSONWriter4nameEPKcj>
   da784:	4639      	mov	r1, r7
   da786:	f7ff f923 	bl	d99d0 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   da78a:	b13d      	cbz	r5, da79c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   da78c:	493a      	ldr	r1, [pc, #232]	; (da878 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   da78e:	2201      	movs	r2, #1
   da790:	a801      	add	r0, sp, #4
   da792:	f7ff f82b 	bl	d97ec <_ZN5spark10JSONWriter4nameEPKcj>
   da796:	4629      	mov	r1, r5
   da798:	f7ff f91a 	bl	d99d0 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   da79c:	7923      	ldrb	r3, [r4, #4]
   da79e:	07df      	lsls	r7, r3, #31
   da7a0:	d50e      	bpl.n	da7c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   da7a2:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   da7a4:	212f      	movs	r1, #47	; 0x2f
   da7a6:	4628      	mov	r0, r5
   da7a8:	f001 ffef 	bl	dc78a <strrchr>
    if (s1) {
   da7ac:	b100      	cbz	r0, da7b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   da7ae:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   da7b0:	4932      	ldr	r1, [pc, #200]	; (da87c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   da7b2:	2201      	movs	r2, #1
   da7b4:	a801      	add	r0, sp, #4
   da7b6:	f7ff f819 	bl	d97ec <_ZN5spark10JSONWriter4nameEPKcj>
   da7ba:	4629      	mov	r1, r5
   da7bc:	f7ff f908 	bl	d99d0 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   da7c0:	7923      	ldrb	r3, [r4, #4]
   da7c2:	079d      	lsls	r5, r3, #30
   da7c4:	d507      	bpl.n	da7d6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   da7c6:	492e      	ldr	r1, [pc, #184]	; (da880 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   da7c8:	2202      	movs	r2, #2
   da7ca:	a801      	add	r0, sp, #4
   da7cc:	f7ff f80e 	bl	d97ec <_ZN5spark10JSONWriter4nameEPKcj>
   da7d0:	68e1      	ldr	r1, [r4, #12]
   da7d2:	f7fe ff93 	bl	d96fc <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   da7d6:	7923      	ldrb	r3, [r4, #4]
   da7d8:	0758      	lsls	r0, r3, #29
   da7da:	d516      	bpl.n	da80a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da7dc:	6925      	ldr	r5, [r4, #16]
   da7de:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   da7e0:	463b      	mov	r3, r7
   da7e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   da7e6:	b13a      	cbz	r2, da7f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   da7e8:	2a20      	cmp	r2, #32
   da7ea:	d101      	bne.n	da7f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   da7ec:	461d      	mov	r5, r3
   da7ee:	e001      	b.n	da7f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   da7f0:	2a28      	cmp	r2, #40	; 0x28
   da7f2:	d001      	beq.n	da7f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da7f4:	461f      	mov	r7, r3
   da7f6:	e7f3      	b.n	da7e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   da7f8:	2202      	movs	r2, #2
   da7fa:	4922      	ldr	r1, [pc, #136]	; (da884 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   da7fc:	a801      	add	r0, sp, #4
   da7fe:	f7fe fff5 	bl	d97ec <_ZN5spark10JSONWriter4nameEPKcj>
   da802:	1b7a      	subs	r2, r7, r5
   da804:	4629      	mov	r1, r5
   da806:	f7ff f800 	bl	d980a <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   da80a:	7923      	ldrb	r3, [r4, #4]
   da80c:	0719      	lsls	r1, r3, #28
   da80e:	d507      	bpl.n	da820 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   da810:	491d      	ldr	r1, [pc, #116]	; (da888 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   da812:	2201      	movs	r2, #1
   da814:	a801      	add	r0, sp, #4
   da816:	f7fe ffe9 	bl	d97ec <_ZN5spark10JSONWriter4nameEPKcj>
   da81a:	6961      	ldr	r1, [r4, #20]
   da81c:	f7fe ff80 	bl	d9720 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   da820:	7923      	ldrb	r3, [r4, #4]
   da822:	06da      	lsls	r2, r3, #27
   da824:	d508      	bpl.n	da838 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   da826:	2204      	movs	r2, #4
   da828:	4918      	ldr	r1, [pc, #96]	; (da88c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   da82a:	eb0d 0002 	add.w	r0, sp, r2
   da82e:	f7fe ffdd 	bl	d97ec <_ZN5spark10JSONWriter4nameEPKcj>
   da832:	69a1      	ldr	r1, [r4, #24]
   da834:	f7fe ff62 	bl	d96fc <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   da838:	7923      	ldrb	r3, [r4, #4]
   da83a:	069b      	lsls	r3, r3, #26
   da83c:	d507      	bpl.n	da84e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   da83e:	4914      	ldr	r1, [pc, #80]	; (da890 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   da840:	2206      	movs	r2, #6
   da842:	a801      	add	r0, sp, #4
   da844:	f7fe ffd2 	bl	d97ec <_ZN5spark10JSONWriter4nameEPKcj>
   da848:	69e1      	ldr	r1, [r4, #28]
   da84a:	f7ff f8c1 	bl	d99d0 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   da84e:	a801      	add	r0, sp, #4
   da850:	f7fe ff31 	bl	d96b6 <_ZN5spark10JSONWriter9endObjectEv>
   da854:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   da856:	490f      	ldr	r1, [pc, #60]	; (da894 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   da858:	6803      	ldr	r3, [r0, #0]
   da85a:	2202      	movs	r2, #2
   da85c:	68db      	ldr	r3, [r3, #12]
   da85e:	4798      	blx	r3
}
   da860:	b005      	add	sp, #20
   da862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da866:	bf00      	nop
   da868:	2003e570 	.word	0x2003e570
   da86c:	000df278 	.word	0x000df278
   da870:	000df2aa 	.word	0x000df2aa
   da874:	000df2bd 	.word	0x000df2bd
   da878:	000df373 	.word	0x000df373
   da87c:	000dedc8 	.word	0x000dedc8
   da880:	000df342 	.word	0x000df342
   da884:	000df345 	.word	0x000df345
   da888:	000debcb 	.word	0x000debcb
   da88c:	000df348 	.word	0x000df348
   da890:	000df34d 	.word	0x000df34d
   da894:	000def83 	.word	0x000def83

000da898 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   da898:	2200      	movs	r2, #0
   da89a:	4611      	mov	r1, r2
   da89c:	6840      	ldr	r0, [r0, #4]
   da89e:	f7fd bbb1 	b.w	d8004 <network_listening>

000da8a2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   da8a2:	2200      	movs	r2, #0
   da8a4:	4611      	mov	r1, r2
   da8a6:	6840      	ldr	r0, [r0, #4]
   da8a8:	f7fd bbbc 	b.w	d8024 <network_get_listen_timeout>

000da8ac <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   da8ac:	2200      	movs	r2, #0
   da8ae:	6840      	ldr	r0, [r0, #4]
   da8b0:	f7fd bbb0 	b.w	d8014 <network_set_listen_timeout>

000da8b4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   da8b4:	2200      	movs	r2, #0
   da8b6:	f081 0101 	eor.w	r1, r1, #1
   da8ba:	6840      	ldr	r0, [r0, #4]
   da8bc:	f7fd bb9a 	b.w	d7ff4 <network_listen>

000da8c0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   da8c0:	2300      	movs	r3, #0
   da8c2:	461a      	mov	r2, r3
   da8c4:	2101      	movs	r1, #1
   da8c6:	6840      	ldr	r0, [r0, #4]
   da8c8:	f7fd bb8c 	b.w	d7fe4 <network_off>

000da8cc <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   da8cc:	2300      	movs	r3, #0
   da8ce:	461a      	mov	r2, r3
   da8d0:	4619      	mov	r1, r3
   da8d2:	6840      	ldr	r0, [r0, #4]
   da8d4:	f7fd bb7e 	b.w	d7fd4 <network_on>

000da8d8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   da8d8:	2200      	movs	r2, #0
   da8da:	4611      	mov	r1, r2
   da8dc:	6840      	ldr	r0, [r0, #4]
   da8de:	f7fd bb71 	b.w	d7fc4 <network_ready>

000da8e2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   da8e2:	2200      	movs	r2, #0
   da8e4:	4611      	mov	r1, r2
   da8e6:	6840      	ldr	r0, [r0, #4]
   da8e8:	f7fd bb5c 	b.w	d7fa4 <network_connecting>

000da8ec <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   da8ec:	2200      	movs	r2, #0
   da8ee:	2102      	movs	r1, #2
   da8f0:	6840      	ldr	r0, [r0, #4]
   da8f2:	f7fd bb5f 	b.w	d7fb4 <network_disconnect>

000da8f6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   da8f6:	2300      	movs	r3, #0
   da8f8:	461a      	mov	r2, r3
   da8fa:	6840      	ldr	r0, [r0, #4]
   da8fc:	f7fd bb4a 	b.w	d7f94 <network_connect>

000da900 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   da900:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da902:	4605      	mov	r5, r0
   da904:	b188      	cbz	r0, da92a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da906:	6804      	ldr	r4, [r0, #0]
   da908:	b14c      	cbz	r4, da91e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   da90a:	68a3      	ldr	r3, [r4, #8]
   da90c:	b11b      	cbz	r3, da916 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   da90e:	2203      	movs	r2, #3
   da910:	4621      	mov	r1, r4
   da912:	4620      	mov	r0, r4
   da914:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da916:	2110      	movs	r1, #16
   da918:	4620      	mov	r0, r4
   da91a:	f000 feee 	bl	db6fa <_ZdlPvj>
   da91e:	4628      	mov	r0, r5
   da920:	2114      	movs	r1, #20
      }
   da922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da926:	f000 bee8 	b.w	db6fa <_ZdlPvj>
   da92a:	bd38      	pop	{r3, r4, r5, pc}

000da92c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   da92c:	b110      	cbz	r0, da934 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   da92e:	6803      	ldr	r3, [r0, #0]
   da930:	685b      	ldr	r3, [r3, #4]
   da932:	4718      	bx	r3
   da934:	4770      	bx	lr

000da936 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   da936:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   da938:	6803      	ldr	r3, [r0, #0]
   da93a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   da93c:	b1bb      	cbz	r3, da96e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   da93e:	6858      	ldr	r0, [r3, #4]
   da940:	f7fd f872 	bl	d7a28 <os_thread_is_current>
   da944:	b978      	cbnz	r0, da966 <_ZN6ThreadD1Ev+0x30>
   da946:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   da948:	7c5a      	ldrb	r2, [r3, #17]
   da94a:	b912      	cbnz	r2, da952 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   da94c:	6858      	ldr	r0, [r3, #4]
   da94e:	f7fd f87b 	bl	d7a48 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   da952:	6823      	ldr	r3, [r4, #0]
   da954:	6858      	ldr	r0, [r3, #4]
   da956:	f7fd f87f 	bl	d7a58 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da95a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   da95c:	2300      	movs	r3, #0
   da95e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   da960:	b128      	cbz	r0, da96e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   da962:	f7ff ffcd 	bl	da900 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da966:	6820      	ldr	r0, [r4, #0]
   da968:	b108      	cbz	r0, da96e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   da96a:	f7ff ffc9 	bl	da900 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   da96e:	4620      	mov	r0, r4
   da970:	bd10      	pop	{r4, pc}

000da972 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   da972:	b538      	push	{r3, r4, r5, lr}
   da974:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da976:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   da97a:	b108      	cbz	r0, da980 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   da97c:	f7f9 fb91 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   da980:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   da984:	b108      	cbz	r0, da98a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   da986:	f7fd f89f 	bl	d7ac8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da98a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   da98e:	b135      	cbz	r5, da99e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da990:	4628      	mov	r0, r5
   da992:	f7ff ffd0 	bl	da936 <_ZN6ThreadD1Ev>
   da996:	2104      	movs	r1, #4
   da998:	4628      	mov	r0, r5
   da99a:	f000 feae 	bl	db6fa <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da99e:	6820      	ldr	r0, [r4, #0]
   da9a0:	b108      	cbz	r0, da9a6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   da9a2:	f7ff ffc3 	bl	da92c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   da9a6:	4620      	mov	r0, r4
   da9a8:	bd38      	pop	{r3, r4, r5, pc}
	...

000da9ac <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   da9ac:	b510      	push	{r4, lr}
   da9ae:	4b04      	ldr	r3, [pc, #16]	; (da9c0 <_ZN5spark9MeshClassD1Ev+0x14>)
   da9b0:	4604      	mov	r4, r0
   da9b2:	f840 3b08 	str.w	r3, [r0], #8
   da9b6:	f7ff ffdc 	bl	da972 <_ZN5spark11MeshPublishD1Ev>
   da9ba:	4620      	mov	r0, r4
   da9bc:	bd10      	pop	{r4, pc}
   da9be:	bf00      	nop
   da9c0:	000df3cc 	.word	0x000df3cc

000da9c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   da9c4:	b538      	push	{r3, r4, r5, lr}
   da9c6:	4c0e      	ldr	r4, [pc, #56]	; (daa00 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   da9c8:	4b0e      	ldr	r3, [pc, #56]	; (daa04 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   da9ca:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   da9cc:	2500      	movs	r5, #0
   da9ce:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   da9d0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   da9d4:	6063      	str	r3, [r4, #4]
   da9d6:	60a5      	str	r5, [r4, #8]
   da9d8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da9dc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   da9e0:	f7fd f86a 	bl	d7ab8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   da9e4:	4b08      	ldr	r3, [pc, #32]	; (daa08 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   da9e6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   da9ea:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   da9ee:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   da9f0:	4620      	mov	r0, r4
   da9f2:	4a06      	ldr	r2, [pc, #24]	; (daa0c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   da9f4:	4906      	ldr	r1, [pc, #24]	; (daa10 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   da9f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   da9fa:	f000 be79 	b.w	db6f0 <__aeabi_atexit>
   da9fe:	bf00      	nop
   daa00:	2003e39c 	.word	0x2003e39c
   daa04:	000df400 	.word	0x000df400
   daa08:	000df3cc 	.word	0x000df3cc
   daa0c:	2003d468 	.word	0x2003d468
   daa10:	000da9ad 	.word	0x000da9ad

000daa14 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   daa14:	2300      	movs	r3, #0
   daa16:	461a      	mov	r2, r3
   daa18:	6840      	ldr	r0, [r0, #4]
   daa1a:	f7fd babb 	b.w	d7f94 <network_connect>

000daa1e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   daa1e:	2200      	movs	r2, #0
   daa20:	2102      	movs	r1, #2
   daa22:	6840      	ldr	r0, [r0, #4]
   daa24:	f7fd bac6 	b.w	d7fb4 <network_disconnect>

000daa28 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   daa28:	2200      	movs	r2, #0
   daa2a:	4611      	mov	r1, r2
   daa2c:	6840      	ldr	r0, [r0, #4]
   daa2e:	f7fd bab9 	b.w	d7fa4 <network_connecting>

000daa32 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   daa32:	2200      	movs	r2, #0
   daa34:	4611      	mov	r1, r2
   daa36:	6840      	ldr	r0, [r0, #4]
   daa38:	f7fd bac4 	b.w	d7fc4 <network_ready>

000daa3c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   daa3c:	2300      	movs	r3, #0
   daa3e:	461a      	mov	r2, r3
   daa40:	4619      	mov	r1, r3
   daa42:	6840      	ldr	r0, [r0, #4]
   daa44:	f7fd bac6 	b.w	d7fd4 <network_on>

000daa48 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   daa48:	2300      	movs	r3, #0
   daa4a:	461a      	mov	r2, r3
   daa4c:	4619      	mov	r1, r3
   daa4e:	6840      	ldr	r0, [r0, #4]
   daa50:	f7fd bac8 	b.w	d7fe4 <network_off>

000daa54 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   daa54:	2200      	movs	r2, #0
   daa56:	f081 0101 	eor.w	r1, r1, #1
   daa5a:	6840      	ldr	r0, [r0, #4]
   daa5c:	f7fd baca 	b.w	d7ff4 <network_listen>

000daa60 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   daa60:	2200      	movs	r2, #0
   daa62:	6840      	ldr	r0, [r0, #4]
   daa64:	f7fd bad6 	b.w	d8014 <network_set_listen_timeout>

000daa68 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   daa68:	2200      	movs	r2, #0
   daa6a:	4611      	mov	r1, r2
   daa6c:	6840      	ldr	r0, [r0, #4]
   daa6e:	f7fd bad9 	b.w	d8024 <network_get_listen_timeout>

000daa72 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   daa72:	2200      	movs	r2, #0
   daa74:	4611      	mov	r1, r2
   daa76:	6840      	ldr	r0, [r0, #4]
   daa78:	f7fd bac4 	b.w	d8004 <network_listening>

000daa7c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   daa7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   daa80:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   daa82:	b095      	sub	sp, #84	; 0x54
   daa84:	4616      	mov	r6, r2
   daa86:	460d      	mov	r5, r1
   daa88:	4607      	mov	r7, r0
    IPAddress addr;
   daa8a:	f7fe fd23 	bl	d94d4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   daa8e:	4621      	mov	r1, r4
   daa90:	2220      	movs	r2, #32
   daa92:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   daa94:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   daa96:	f001 fdd0 	bl	dc63a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   daa9a:	2340      	movs	r3, #64	; 0x40
   daa9c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   daa9e:	4621      	mov	r1, r4
   daaa0:	466b      	mov	r3, sp
   daaa2:	aa0c      	add	r2, sp, #48	; 0x30
   daaa4:	4630      	mov	r0, r6
   daaa6:	f7fd f8ef 	bl	d7c88 <netdb_getaddrinfo>
    if (!r) {
   daaaa:	4604      	mov	r4, r0
   daaac:	2800      	cmp	r0, #0
   daaae:	d144      	bne.n	dab3a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   daab0:	4602      	mov	r2, r0
   daab2:	2101      	movs	r1, #1
   daab4:	6868      	ldr	r0, [r5, #4]
   daab6:	f7fd fa85 	bl	d7fc4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   daaba:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   daabc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   daabe:	4622      	mov	r2, r4
   daac0:	6868      	ldr	r0, [r5, #4]
   daac2:	f7fd fa7f 	bl	d7fc4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   daac6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   daac8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   daaca:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   daacc:	2e00      	cmp	r6, #0
   daace:	d034      	beq.n	dab3a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   daad0:	2900      	cmp	r1, #0
   daad2:	d132      	bne.n	dab3a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   daad4:	6873      	ldr	r3, [r6, #4]
   daad6:	2b02      	cmp	r3, #2
   daad8:	d002      	beq.n	daae0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   daada:	2b0a      	cmp	r3, #10
   daadc:	d009      	beq.n	daaf2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   daade:	e02a      	b.n	dab36 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   daae0:	f1b8 0f00 	cmp.w	r8, #0
   daae4:	d027      	beq.n	dab36 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   daae6:	6971      	ldr	r1, [r6, #20]
   daae8:	4638      	mov	r0, r7
   daaea:	3104      	adds	r1, #4
   daaec:	f7fe fd1f 	bl	d952e <_ZN9IPAddressaSEPKh>
   daaf0:	e020      	b.n	dab34 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   daaf2:	f1b9 0f00 	cmp.w	r9, #0
   daaf6:	d01e      	beq.n	dab36 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   daaf8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   daafa:	2211      	movs	r2, #17
   daafc:	a801      	add	r0, sp, #4
   daafe:	f001 fd9c 	bl	dc63a <memset>
                    a.v = 6;
   dab02:	2306      	movs	r3, #6
   dab04:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   dab08:	ad01      	add	r5, sp, #4
   dab0a:	f104 0308 	add.w	r3, r4, #8
   dab0e:	3418      	adds	r4, #24
   dab10:	6818      	ldr	r0, [r3, #0]
   dab12:	6859      	ldr	r1, [r3, #4]
   dab14:	462a      	mov	r2, r5
   dab16:	c203      	stmia	r2!, {r0, r1}
   dab18:	3308      	adds	r3, #8
   dab1a:	42a3      	cmp	r3, r4
   dab1c:	4615      	mov	r5, r2
   dab1e:	d1f7      	bne.n	dab10 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   dab20:	a901      	add	r1, sp, #4
   dab22:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dab24:	ad07      	add	r5, sp, #28
   dab26:	f7fe fce3 	bl	d94f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dab2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dab2c:	1d3c      	adds	r4, r7, #4
   dab2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dab30:	682b      	ldr	r3, [r5, #0]
   dab32:	7023      	strb	r3, [r4, #0]
                    ok = true;
   dab34:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dab36:	69f6      	ldr	r6, [r6, #28]
   dab38:	e7c8      	b.n	daacc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   dab3a:	9800      	ldr	r0, [sp, #0]
   dab3c:	f7fd f89c 	bl	d7c78 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   dab40:	4638      	mov	r0, r7
   dab42:	b015      	add	sp, #84	; 0x54
   dab44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dab48 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   dab48:	4b02      	ldr	r3, [pc, #8]	; (dab54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   dab4a:	4a03      	ldr	r2, [pc, #12]	; (dab58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   dab4c:	601a      	str	r2, [r3, #0]
   dab4e:	2200      	movs	r2, #0
   dab50:	605a      	str	r2, [r3, #4]
   dab52:	4770      	bx	lr
   dab54:	2003e570 	.word	0x2003e570
   dab58:	000df400 	.word	0x000df400

000dab5c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   dab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dab5e:	4606      	mov	r6, r0
   dab60:	460d      	mov	r5, r1
   dab62:	188f      	adds	r7, r1, r2
  size_t n = 0;
   dab64:	2400      	movs	r4, #0
  while (size--) {
   dab66:	42bd      	cmp	r5, r7
   dab68:	d00c      	beq.n	dab84 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   dab6a:	6833      	ldr	r3, [r6, #0]
   dab6c:	f815 1b01 	ldrb.w	r1, [r5], #1
   dab70:	689b      	ldr	r3, [r3, #8]
   dab72:	4630      	mov	r0, r6
   dab74:	4798      	blx	r3
     if (chunk>=0)
   dab76:	2800      	cmp	r0, #0
   dab78:	db01      	blt.n	dab7e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   dab7a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   dab7c:	e7f3      	b.n	dab66 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   dab7e:	2c00      	cmp	r4, #0
   dab80:	bf08      	it	eq
   dab82:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   dab84:	4620      	mov	r0, r4
   dab86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dab88 <_ZN5Print5printEPKc>:
   dab88:	b508      	push	{r3, lr}
   dab8a:	f7fc f8a5 	bl	d6cd8 <_ZN5Print5writeEPKc>
   dab8e:	bd08      	pop	{r3, pc}

000dab90 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   dab90:	6803      	ldr	r3, [r0, #0]
   dab92:	689b      	ldr	r3, [r3, #8]
   dab94:	4718      	bx	r3

000dab96 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   dab96:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   dab98:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   dab9a:	4605      	mov	r5, r0
  size_t n = print('\r');
   dab9c:	f7ff fff8 	bl	dab90 <_ZN5Print5printEc>
  n += print('\n');
   daba0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   daba2:	4604      	mov	r4, r0
  n += print('\n');
   daba4:	4628      	mov	r0, r5
   daba6:	f7ff fff3 	bl	dab90 <_ZN5Print5printEc>
  return n;
}
   dabaa:	4420      	add	r0, r4
   dabac:	bd38      	pop	{r3, r4, r5, pc}

000dabae <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   dabae:	b538      	push	{r3, r4, r5, lr}
   dabb0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dabb2:	f7fc f891 	bl	d6cd8 <_ZN5Print5writeEPKc>
   dabb6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   dabb8:	4628      	mov	r0, r5
   dabba:	f7ff ffec 	bl	dab96 <_ZN5Print7printlnEv>
  return n;
}
   dabbe:	4420      	add	r0, r4
   dabc0:	bd38      	pop	{r3, r4, r5, pc}

000dabc2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   dabc2:	b530      	push	{r4, r5, lr}
   dabc4:	b08b      	sub	sp, #44	; 0x2c
   dabc6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   dabc8:	2100      	movs	r1, #0
   dabca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   dabce:	2a01      	cmp	r2, #1
   dabd0:	bf98      	it	ls
   dabd2:	220a      	movls	r2, #10
   dabd4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   dabd8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   dabdc:	fb05 3312 	mls	r3, r5, r2, r3
   dabe0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dabe4:	2b09      	cmp	r3, #9
   dabe6:	bf94      	ite	ls
   dabe8:	3330      	addls	r3, #48	; 0x30
   dabea:	3337      	addhi	r3, #55	; 0x37
   dabec:	b2db      	uxtb	r3, r3
   dabee:	4621      	mov	r1, r4
   dabf0:	f804 3901 	strb.w	r3, [r4], #-1
   dabf4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   dabf6:	2d00      	cmp	r5, #0
   dabf8:	d1ee      	bne.n	dabd8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   dabfa:	f7fc f86d 	bl	d6cd8 <_ZN5Print5writeEPKc>
}
   dabfe:	b00b      	add	sp, #44	; 0x2c
   dac00:	bd30      	pop	{r4, r5, pc}

000dac02 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   dac02:	b40c      	push	{r2, r3}
   dac04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dac08:	b087      	sub	sp, #28
   dac0a:	af00      	add	r7, sp, #0
   dac0c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   dac10:	4605      	mov	r5, r0
   dac12:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   dac16:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   dac18:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   dac1a:	4623      	mov	r3, r4
   dac1c:	464a      	mov	r2, r9
   dac1e:	2114      	movs	r1, #20
   dac20:	1d38      	adds	r0, r7, #4
   dac22:	f7fd fa2f 	bl	d8084 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   dac26:	2813      	cmp	r0, #19
   dac28:	d805      	bhi.n	dac36 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dac2a:	1d39      	adds	r1, r7, #4
   dac2c:	4628      	mov	r0, r5
   dac2e:	f7fc f853 	bl	d6cd8 <_ZN5Print5writeEPKc>
   dac32:	4604      	mov	r4, r0
   dac34:	e013      	b.n	dac5e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   dac36:	f100 0308 	add.w	r3, r0, #8
   dac3a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   dac3e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   dac40:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   dac44:	1c41      	adds	r1, r0, #1
   dac46:	4623      	mov	r3, r4
   dac48:	464a      	mov	r2, r9
   dac4a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   dac4c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   dac4e:	f7fd fa19 	bl	d8084 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dac52:	4669      	mov	r1, sp
   dac54:	4628      	mov	r0, r5
   dac56:	f7fc f83f 	bl	d6cd8 <_ZN5Print5writeEPKc>
   dac5a:	4604      	mov	r4, r0
   dac5c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   dac5e:	b11e      	cbz	r6, dac68 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   dac60:	4628      	mov	r0, r5
   dac62:	f7ff ff98 	bl	dab96 <_ZN5Print7printlnEv>
   dac66:	4404      	add	r4, r0
    return n;
}
   dac68:	4620      	mov	r0, r4
   dac6a:	371c      	adds	r7, #28
   dac6c:	46bd      	mov	sp, r7
   dac6e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dac72:	b002      	add	sp, #8
   dac74:	4770      	bx	lr

000dac76 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   dac76:	b510      	push	{r4, lr}
   dac78:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dac7a:	f7f9 fb37 	bl	d42ec <_ZNSt14_Function_baseD1Ev>
   dac7e:	4620      	mov	r0, r4
   dac80:	bd10      	pop	{r4, pc}
	...

000dac84 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dac84:	4803      	ldr	r0, [pc, #12]	; (dac94 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   dac86:	4a04      	ldr	r2, [pc, #16]	; (dac98 <_GLOBAL__sub_I_RGB+0x14>)
   dac88:	4904      	ldr	r1, [pc, #16]	; (dac9c <_GLOBAL__sub_I_RGB+0x18>)
   dac8a:	2300      	movs	r3, #0
   dac8c:	6083      	str	r3, [r0, #8]
   dac8e:	f000 bd2f 	b.w	db6f0 <__aeabi_atexit>
   dac92:	bf00      	nop
   dac94:	2003e578 	.word	0x2003e578
   dac98:	2003d468 	.word	0x2003d468
   dac9c:	000dac77 	.word	0x000dac77

000daca0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   daca0:	2100      	movs	r1, #0
   daca2:	f7fd b849 	b.w	d7d38 <HAL_SPI_Acquire>

000daca6 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   daca6:	2100      	movs	r1, #0
   daca8:	f7fd b84e 	b.w	d7d48 <HAL_SPI_Release>

000dacac <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   dacac:	b510      	push	{r4, lr}
   dacae:	4604      	mov	r4, r0
{
    _spi = spi;
   dacb0:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   dacb2:	4608      	mov	r0, r1
   dacb4:	f7fd f808 	bl	d7cc8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   dacb8:	2300      	movs	r3, #0
   dacba:	6063      	str	r3, [r4, #4]
}
   dacbc:	4620      	mov	r0, r4
   dacbe:	bd10      	pop	{r4, pc}

000dacc0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   dacc0:	b510      	push	{r4, lr}
   dacc2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   dacc4:	7800      	ldrb	r0, [r0, #0]
   dacc6:	f7ff ffeb 	bl	daca0 <_ZN8SPIClass4lockEv.isra.0>
   dacca:	b948      	cbnz	r0, dace0 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   daccc:	7820      	ldrb	r0, [r4, #0]
   dacce:	f64f 71ff 	movw	r1, #65535	; 0xffff
   dacd2:	f7fc ffe1 	bl	d7c98 <HAL_SPI_Begin>
        unlock();
   dacd6:	7820      	ldrb	r0, [r4, #0]
    }
}
   dacd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   dacdc:	f7ff bfe3 	b.w	daca6 <_ZN8SPIClass6unlockEv.isra.1>
   dace0:	bd10      	pop	{r4, pc}

000dace2 <_ZN8SPIClass5beginE8SPI_Modet>:
        unlock();
    }
}

void SPIClass::begin(SPI_Mode mode, uint16_t ss_pin)
{
   dace2:	b570      	push	{r4, r5, r6, lr}
   dace4:	4604      	mov	r4, r0
    if (!lock())
   dace6:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::begin(SPI_Mode mode, uint16_t ss_pin)
{
   dace8:	460d      	mov	r5, r1
   dacea:	4616      	mov	r6, r2
    if (!lock())
   dacec:	f7ff ffd8 	bl	daca0 <_ZN8SPIClass4lockEv.isra.0>
   dacf0:	4603      	mov	r3, r0
   dacf2:	b948      	cbnz	r0, dad08 <_ZN8SPIClass5beginE8SPI_Modet+0x26>
    {
        HAL_SPI_Begin_Ext(_spi, mode, ss_pin, NULL);
   dacf4:	7820      	ldrb	r0, [r4, #0]
   dacf6:	4632      	mov	r2, r6
   dacf8:	4629      	mov	r1, r5
   dacfa:	f7fd f805 	bl	d7d08 <HAL_SPI_Begin_Ext>
        unlock();
   dacfe:	7820      	ldrb	r0, [r4, #0]
    }
}
   dad00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void SPIClass::begin(SPI_Mode mode, uint16_t ss_pin)
{
    if (!lock())
    {
        HAL_SPI_Begin_Ext(_spi, mode, ss_pin, NULL);
        unlock();
   dad04:	f7ff bfcf 	b.w	daca6 <_ZN8SPIClass6unlockEv.isra.1>
   dad08:	bd70      	pop	{r4, r5, r6, pc}

000dad0a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   dad0a:	7800      	ldrb	r0, [r0, #0]
   dad0c:	f7ff bfcb 	b.w	daca6 <_ZN8SPIClass6unlockEv.isra.1>

000dad10 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   dad10:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   dad12:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   dad14:	6018      	str	r0, [r3, #0]
   dad16:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   dad18:	6818      	ldr	r0, [r3, #0]
   dad1a:	4288      	cmp	r0, r1
   dad1c:	b2e5      	uxtb	r5, r4
   dad1e:	d906      	bls.n	dad2e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   dad20:	3401      	adds	r4, #1
   dad22:	2c08      	cmp	r4, #8
   dad24:	d002      	beq.n	dad2c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   dad26:	0840      	lsrs	r0, r0, #1
   dad28:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   dad2a:	e7f5      	b.n	dad18 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   dad2c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   dad2e:	4b02      	ldr	r3, [pc, #8]	; (dad38 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   dad30:	5d5b      	ldrb	r3, [r3, r5]
   dad32:	7013      	strb	r3, [r2, #0]
   dad34:	bd30      	pop	{r4, r5, pc}
   dad36:	bf00      	nop
   dad38:	000df42c 	.word	0x000df42c

000dad3c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   dad3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dad40:	4607      	mov	r7, r0
   dad42:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   dad44:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   dad46:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   dad48:	f7ff ffaa 	bl	daca0 <_ZN8SPIClass4lockEv.isra.0>
   dad4c:	2800      	cmp	r0, #0
   dad4e:	db62      	blt.n	dae16 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   dad50:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   dad52:	2214      	movs	r2, #20
   dad54:	2100      	movs	r1, #0
   dad56:	a809      	add	r0, sp, #36	; 0x24
   dad58:	f001 fc6f 	bl	dc63a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   dad5c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   dad5e:	4620      	mov	r0, r4
   dad60:	2200      	movs	r2, #0
   dad62:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   dad64:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   dad68:	f7fc ffbe 	bl	d7ce8 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   dad6c:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   dad70:	b154      	cbz	r4, dad88 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   dad72:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   dad76:	b935      	cbnz	r5, dad86 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   dad78:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   dad7c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   dad80:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   dad84:	e003      	b.n	dad8e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   dad86:	2400      	movs	r4, #0
   dad88:	46a1      	mov	r9, r4
   dad8a:	46a0      	mov	r8, r4
   dad8c:	2501      	movs	r5, #1
   dad8e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   dad90:	b105      	cbz	r5, dad94 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   dad92:	b9bb      	cbnz	r3, dadc4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   dad94:	429d      	cmp	r5, r3
   dad96:	d10b      	bne.n	dadb0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   dad98:	68b2      	ldr	r2, [r6, #8]
   dad9a:	4542      	cmp	r2, r8
   dad9c:	d108      	bne.n	dadb0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   dad9e:	f88d 9020 	strb.w	r9, [sp, #32]
   dada2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   dada6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   dadaa:	89b2      	ldrh	r2, [r6, #12]
   dadac:	4291      	cmp	r1, r2
   dadae:	d009      	beq.n	dadc4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   dadb0:	b153      	cbz	r3, dadc8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   dadb2:	2400      	movs	r4, #0
   dadb4:	7838      	ldrb	r0, [r7, #0]
   dadb6:	9401      	str	r4, [sp, #4]
   dadb8:	9400      	str	r4, [sp, #0]
   dadba:	4623      	mov	r3, r4
   dadbc:	4622      	mov	r2, r4
   dadbe:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   dadc0:	f7fc ffb2 	bl	d7d28 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   dadc4:	2000      	movs	r0, #0
   dadc6:	e026      	b.n	dae16 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   dadc8:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   dadcc:	68b1      	ldr	r1, [r6, #8]
   dadce:	980a      	ldr	r0, [sp, #40]	; 0x28
   dadd0:	ab04      	add	r3, sp, #16
   dadd2:	f10d 020f 	add.w	r2, sp, #15
   dadd6:	f7ff ff9b 	bl	dad10 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   dadda:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   daddc:	b105      	cbz	r5, dade0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   dadde:	b9b1      	cbnz	r1, dae0e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   dade0:	42a9      	cmp	r1, r5
   dade2:	d008      	beq.n	dadf6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   dade4:	2400      	movs	r4, #0
   dade6:	7838      	ldrb	r0, [r7, #0]
   dade8:	9401      	str	r4, [sp, #4]
   dadea:	7b74      	ldrb	r4, [r6, #13]
   dadec:	7b33      	ldrb	r3, [r6, #12]
   dadee:	f89d 200f 	ldrb.w	r2, [sp, #15]
   dadf2:	9400      	str	r4, [sp, #0]
   dadf4:	e7e4      	b.n	dadc0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   dadf6:	68b3      	ldr	r3, [r6, #8]
   dadf8:	4543      	cmp	r3, r8
   dadfa:	d3f3      	bcc.n	dade4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   dadfc:	f88d 9020 	strb.w	r9, [sp, #32]
   dae00:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   dae04:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   dae08:	89b3      	ldrh	r3, [r6, #12]
   dae0a:	429a      	cmp	r2, r3
   dae0c:	d1ea      	bne.n	dade4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   dae0e:	9b04      	ldr	r3, [sp, #16]
   dae10:	4543      	cmp	r3, r8
   dae12:	d1e7      	bne.n	dade4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   dae14:	e7d6      	b.n	dadc4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   dae16:	b00f      	add	sp, #60	; 0x3c
   dae18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dae1c <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   dae1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dae20:	b088      	sub	sp, #32
    unsigned clock = 0;
   dae22:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   dae24:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   dae26:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   dae28:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   dae2a:	460e      	mov	r6, r1
   dae2c:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   dae2e:	f7ff ff37 	bl	daca0 <_ZN8SPIClass4lockEv.isra.0>
   dae32:	4605      	mov	r5, r0
   dae34:	bb00      	cbnz	r0, dae78 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   dae36:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   dae3a:	4601      	mov	r1, r0
   dae3c:	2214      	movs	r2, #20
   dae3e:	a803      	add	r0, sp, #12
   dae40:	f001 fbfb 	bl	dc63a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   dae44:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   dae46:	462a      	mov	r2, r5
   dae48:	a903      	add	r1, sp, #12
   dae4a:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   dae4c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   dae50:	f7fc ff4a 	bl	d7ce8 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   dae54:	ab02      	add	r3, sp, #8
   dae56:	f10d 0207 	add.w	r2, sp, #7
   dae5a:	fb07 f106 	mul.w	r1, r7, r6
   dae5e:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   dae60:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   dae64:	f7ff ff54 	bl	dad10 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   dae68:	7820      	ldrb	r0, [r4, #0]
   dae6a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   dae6e:	f7fc ff1b 	bl	d7ca8 <HAL_SPI_Set_Clock_Divider>
        unlock();
   dae72:	7820      	ldrb	r0, [r4, #0]
   dae74:	f7ff ff17 	bl	daca6 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   dae78:	9802      	ldr	r0, [sp, #8]
   dae7a:	b008      	add	sp, #32
   dae7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dae80 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   dae80:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   dae82:	7800      	ldrb	r0, [r0, #0]
   dae84:	f7fc ff18 	bl	d7cb8 <HAL_SPI_Send_Receive_Data>
}
   dae88:	b2c0      	uxtb	r0, r0
   dae8a:	bd08      	pop	{r3, pc}

000dae8c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   dae8c:	b530      	push	{r4, r5, lr}
   dae8e:	b087      	sub	sp, #28
   dae90:	4604      	mov	r4, r0
   dae92:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   dae94:	7800      	ldrb	r0, [r0, #0]
   dae96:	9500      	str	r5, [sp, #0]
   dae98:	f7fc ff2e 	bl	d7cf8 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   dae9c:	b93d      	cbnz	r5, daeae <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   dae9e:	a902      	add	r1, sp, #8
   daea0:	7820      	ldrb	r0, [r4, #0]
   daea2:	f7fc ff39 	bl	d7d18 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   daea6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   daeaa:	07db      	lsls	r3, r3, #31
   daeac:	d4f7      	bmi.n	dae9e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   daeae:	b007      	add	sp, #28
   daeb0:	bd30      	pop	{r4, r5, pc}

000daeb2 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   daeb2:	7800      	ldrb	r0, [r0, #0]
   daeb4:	f7fc bf10 	b.w	d7cd8 <HAL_SPI_Is_Enabled>

000daeb8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   daeb8:	b510      	push	{r4, lr}
   daeba:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   daebc:	f7fc fe3c 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   daec0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   daec2:	6823      	ldr	r3, [r4, #0]
   daec4:	4620      	mov	r0, r4
   daec6:	695b      	ldr	r3, [r3, #20]
   daec8:	4798      	blx	r3
    if (c >= 0) return c;
   daeca:	2800      	cmp	r0, #0
   daecc:	da08      	bge.n	daee0 <_ZN6Stream9timedReadEv+0x28>
   daece:	f7fc fe33 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   daed2:	68e3      	ldr	r3, [r4, #12]
   daed4:	1ac0      	subs	r0, r0, r3
   daed6:	68a3      	ldr	r3, [r4, #8]
   daed8:	4298      	cmp	r0, r3
   daeda:	d3f2      	bcc.n	daec2 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   daedc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   daee0:	bd10      	pop	{r4, pc}

000daee2 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   daee2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   daee6:	4680      	mov	r8, r0
   daee8:	4689      	mov	r9, r1
   daeea:	4616      	mov	r6, r2
  if (length < 1) return 0;
   daeec:	b17b      	cbz	r3, daf0e <_ZN6Stream14readBytesUntilEcPcj+0x2c>
   daeee:	18d7      	adds	r7, r2, r3
   daef0:	4615      	mov	r5, r2
  size_t index = 0;
  while (index < length) {
   daef2:	42bd      	cmp	r5, r7
   daef4:	eba5 0406 	sub.w	r4, r5, r6
   daef8:	d00a      	beq.n	daf10 <_ZN6Stream14readBytesUntilEcPcj+0x2e>
    int c = timedRead();
   daefa:	4640      	mov	r0, r8
   daefc:	f7ff ffdc 	bl	daeb8 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   daf00:	2800      	cmp	r0, #0
   daf02:	db05      	blt.n	daf10 <_ZN6Stream14readBytesUntilEcPcj+0x2e>
   daf04:	4548      	cmp	r0, r9
   daf06:	d003      	beq.n	daf10 <_ZN6Stream14readBytesUntilEcPcj+0x2e>
    *buffer++ = (char)c;
   daf08:	f805 0b01 	strb.w	r0, [r5], #1

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
   daf0c:	e7f1      	b.n	daef2 <_ZN6Stream14readBytesUntilEcPcj+0x10>
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
   daf0e:	461c      	mov	r4, r3
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
   daf10:	4620      	mov	r0, r4
   daf12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000daf18 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   daf18:	b570      	push	{r4, r5, r6, lr}
   daf1a:	460d      	mov	r5, r1
  String ret;
   daf1c:	4909      	ldr	r1, [pc, #36]	; (daf44 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   daf1e:	4604      	mov	r4, r0
   daf20:	4616      	mov	r6, r2
  String ret;
   daf22:	f000 f868 	bl	daff6 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   daf26:	4628      	mov	r0, r5
   daf28:	f7ff ffc6 	bl	daeb8 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   daf2c:	2800      	cmp	r0, #0
   daf2e:	db06      	blt.n	daf3e <_ZN6Stream15readStringUntilEc+0x26>
   daf30:	42b0      	cmp	r0, r6
   daf32:	d004      	beq.n	daf3e <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   daf34:	b2c1      	uxtb	r1, r0
   daf36:	4620      	mov	r0, r4
   daf38:	f000 f8b2 	bl	db0a0 <_ZN6String6concatEc>
   daf3c:	e7f3      	b.n	daf26 <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
   daf3e:	4620      	mov	r0, r4
   daf40:	bd70      	pop	{r4, r5, r6, pc}
   daf42:	bf00      	nop
   daf44:	000def85 	.word	0x000def85

000daf48 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   daf48:	2300      	movs	r3, #0
   daf4a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   daf4c:	6043      	str	r3, [r0, #4]
	len = 0;
   daf4e:	6083      	str	r3, [r0, #8]
	flags = 0;
   daf50:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   daf52:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   daf54:	680c      	ldr	r4, [r1, #0]
   daf56:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   daf58:	684c      	ldr	r4, [r1, #4]
   daf5a:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   daf5c:	688c      	ldr	r4, [r1, #8]
   daf5e:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   daf60:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   daf62:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   daf64:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   daf66:	bd10      	pop	{r4, pc}

000daf68 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   daf68:	b510      	push	{r4, lr}
   daf6a:	4604      	mov	r4, r0
{
	free(buffer);
   daf6c:	6800      	ldr	r0, [r0, #0]
   daf6e:	f7fd f869 	bl	d8044 <free>
}
   daf72:	4620      	mov	r0, r4
   daf74:	bd10      	pop	{r4, pc}

000daf76 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   daf76:	b510      	push	{r4, lr}
   daf78:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   daf7a:	6800      	ldr	r0, [r0, #0]
   daf7c:	b108      	cbz	r0, daf82 <_ZN6String10invalidateEv+0xc>
   daf7e:	f7fd f861 	bl	d8044 <free>
	buffer = NULL;
   daf82:	2300      	movs	r3, #0
   daf84:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   daf86:	60a3      	str	r3, [r4, #8]
   daf88:	6063      	str	r3, [r4, #4]
   daf8a:	bd10      	pop	{r4, pc}

000daf8c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   daf8c:	b538      	push	{r3, r4, r5, lr}
   daf8e:	4604      	mov	r4, r0
   daf90:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   daf92:	6800      	ldr	r0, [r0, #0]
   daf94:	3101      	adds	r1, #1
   daf96:	f7fd f85d 	bl	d8054 <realloc>
	if (newbuffer) {
   daf9a:	b110      	cbz	r0, dafa2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   daf9c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   dafa0:	2001      	movs	r0, #1
	}
	return 0;
}
   dafa2:	bd38      	pop	{r3, r4, r5, pc}

000dafa4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   dafa4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dafa6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   dafa8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dafaa:	b113      	cbz	r3, dafb2 <_ZN6String7reserveEj+0xe>
   dafac:	6843      	ldr	r3, [r0, #4]
   dafae:	428b      	cmp	r3, r1
   dafb0:	d207      	bcs.n	dafc2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   dafb2:	4620      	mov	r0, r4
   dafb4:	f7ff ffea 	bl	daf8c <_ZN6String12changeBufferEj>
   dafb8:	b120      	cbz	r0, dafc4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   dafba:	68a3      	ldr	r3, [r4, #8]
   dafbc:	b90b      	cbnz	r3, dafc2 <_ZN6String7reserveEj+0x1e>
   dafbe:	6822      	ldr	r2, [r4, #0]
   dafc0:	7013      	strb	r3, [r2, #0]
   dafc2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   dafc4:	bd10      	pop	{r4, pc}

000dafc6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dafc6:	b570      	push	{r4, r5, r6, lr}
   dafc8:	460e      	mov	r6, r1
	if (!reserve(length)) {
   dafca:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dafcc:	4604      	mov	r4, r0
   dafce:	4615      	mov	r5, r2
	if (!reserve(length)) {
   dafd0:	f7ff ffe8 	bl	dafa4 <_ZN6String7reserveEj>
   dafd4:	b918      	cbnz	r0, dafde <_ZN6String4copyEPKcj+0x18>
		invalidate();
   dafd6:	4620      	mov	r0, r4
   dafd8:	f7ff ffcd 	bl	daf76 <_ZN6String10invalidateEv>
		return *this;
   dafdc:	e009      	b.n	daff2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   dafde:	462a      	mov	r2, r5
   dafe0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   dafe2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   dafe4:	6820      	ldr	r0, [r4, #0]
   dafe6:	f001 fb02 	bl	dc5ee <memcpy>
	buffer[len] = 0;
   dafea:	6822      	ldr	r2, [r4, #0]
   dafec:	68a3      	ldr	r3, [r4, #8]
   dafee:	2100      	movs	r1, #0
   daff0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   daff2:	4620      	mov	r0, r4
   daff4:	bd70      	pop	{r4, r5, r6, pc}

000daff6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   daff6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   daff8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   daffa:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   daffc:	6003      	str	r3, [r0, #0]
	capacity = 0;
   daffe:	6043      	str	r3, [r0, #4]
	len = 0;
   db000:	6083      	str	r3, [r0, #8]
	flags = 0;
   db002:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   db004:	460d      	mov	r5, r1
   db006:	b139      	cbz	r1, db018 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   db008:	4608      	mov	r0, r1
   db00a:	f001 fb80 	bl	dc70e <strlen>
   db00e:	4629      	mov	r1, r5
   db010:	4602      	mov	r2, r0
   db012:	4620      	mov	r0, r4
   db014:	f7ff ffd7 	bl	dafc6 <_ZN6String4copyEPKcj>
}
   db018:	4620      	mov	r0, r4
   db01a:	bd38      	pop	{r3, r4, r5, pc}

000db01c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   db01c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   db01e:	b510      	push	{r4, lr}
   db020:	460b      	mov	r3, r1
   db022:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   db024:	d007      	beq.n	db036 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   db026:	6809      	ldr	r1, [r1, #0]
   db028:	b119      	cbz	r1, db032 <_ZN6StringaSERKS_+0x16>
   db02a:	689a      	ldr	r2, [r3, #8]
   db02c:	f7ff ffcb 	bl	dafc6 <_ZN6String4copyEPKcj>
   db030:	e001      	b.n	db036 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   db032:	f7ff ffa0 	bl	daf76 <_ZN6String10invalidateEv>

	return *this;
}
   db036:	4620      	mov	r0, r4
   db038:	bd10      	pop	{r4, pc}

000db03a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   db03a:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   db03c:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   db03e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   db040:	6003      	str	r3, [r0, #0]
	capacity = 0;
   db042:	6043      	str	r3, [r0, #4]
	len = 0;
   db044:	6083      	str	r3, [r0, #8]
	flags = 0;
   db046:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   db048:	f7ff ffe8 	bl	db01c <_ZN6StringaSERKS_>
}
   db04c:	4620      	mov	r0, r4
   db04e:	bd10      	pop	{r4, pc}

000db050 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   db050:	b538      	push	{r3, r4, r5, lr}
   db052:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   db054:	460c      	mov	r4, r1
   db056:	b141      	cbz	r1, db06a <_ZN6StringaSEPKc+0x1a>
   db058:	4608      	mov	r0, r1
   db05a:	f001 fb58 	bl	dc70e <strlen>
   db05e:	4621      	mov	r1, r4
   db060:	4602      	mov	r2, r0
   db062:	4628      	mov	r0, r5
   db064:	f7ff ffaf 	bl	dafc6 <_ZN6String4copyEPKcj>
   db068:	e001      	b.n	db06e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   db06a:	f7ff ff84 	bl	daf76 <_ZN6String10invalidateEv>

	return *this;
}
   db06e:	4628      	mov	r0, r5
   db070:	bd38      	pop	{r3, r4, r5, pc}

000db072 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   db072:	b570      	push	{r4, r5, r6, lr}
   db074:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   db076:	460e      	mov	r6, r1
   db078:	b909      	cbnz	r1, db07e <_ZN6String6concatEPKcj+0xc>
   db07a:	2000      	movs	r0, #0
   db07c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   db07e:	b16a      	cbz	r2, db09c <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   db080:	6883      	ldr	r3, [r0, #8]
   db082:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   db084:	4629      	mov	r1, r5
   db086:	f7ff ff8d 	bl	dafa4 <_ZN6String7reserveEj>
   db08a:	2800      	cmp	r0, #0
   db08c:	d0f5      	beq.n	db07a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   db08e:	6820      	ldr	r0, [r4, #0]
   db090:	68a3      	ldr	r3, [r4, #8]
   db092:	4631      	mov	r1, r6
   db094:	4418      	add	r0, r3
   db096:	f001 fb32 	bl	dc6fe <strcpy>
	len = newlen;
   db09a:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   db09c:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   db09e:	bd70      	pop	{r4, r5, r6, pc}

000db0a0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   db0a0:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   db0a2:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   db0a4:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   db0a8:	2201      	movs	r2, #1
   db0aa:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   db0ac:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   db0b0:	f7ff ffdf 	bl	db072 <_ZN6String6concatEPKcj>
}
   db0b4:	b003      	add	sp, #12
   db0b6:	f85d fb04 	ldr.w	pc, [sp], #4

000db0ba <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   db0ba:	6883      	ldr	r3, [r0, #8]
   db0bc:	428b      	cmp	r3, r1
   db0be:	d903      	bls.n	db0c8 <_ZNK6StringixEj+0xe>
   db0c0:	6800      	ldr	r0, [r0, #0]
   db0c2:	b110      	cbz	r0, db0ca <_ZNK6StringixEj+0x10>
	return buffer[index];
   db0c4:	5c40      	ldrb	r0, [r0, r1]
   db0c6:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   db0c8:	2000      	movs	r0, #0
	return buffer[index];
}
   db0ca:	4770      	bx	lr

000db0cc <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   db0cc:	f7ff bff5 	b.w	db0ba <_ZNK6StringixEj>

000db0d0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   db0d0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   db0d2:	4c09      	ldr	r4, [pc, #36]	; (db0f8 <_GLOBAL__sub_I_System+0x28>)
   db0d4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   db0d6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   db0da:	6020      	str	r0, [r4, #0]
   db0dc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   db0de:	71a0      	strb	r0, [r4, #6]
   db0e0:	8120      	strh	r0, [r4, #8]
   db0e2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   db0e4:	f7fc fefa 	bl	d7edc <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   db0e8:	4620      	mov	r0, r4
   db0ea:	4a04      	ldr	r2, [pc, #16]	; (db0fc <_GLOBAL__sub_I_System+0x2c>)
   db0ec:	4904      	ldr	r1, [pc, #16]	; (db100 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   db0ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   db0f2:	f000 bafd 	b.w	db6f0 <__aeabi_atexit>
   db0f6:	bf00      	nop
   db0f8:	2003e588 	.word	0x2003e588
   db0fc:	2003d468 	.word	0x2003d468
   db100:	000d4265 	.word	0x000d4265

000db104 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   db104:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   db106:	4b14      	ldr	r3, [pc, #80]	; (db158 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   db108:	4f14      	ldr	r7, [pc, #80]	; (db15c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   db10a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   db10c:	4b14      	ldr	r3, [pc, #80]	; (db160 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   db10e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   db110:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   db112:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   db114:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   db116:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   db118:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   db11a:	d01b      	beq.n	db154 <_ZL22Refresh_UnixTime_Cachel+0x50>
   db11c:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   db11e:	ad01      	add	r5, sp, #4
   db120:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   db124:	f001 f958 	bl	dc3d8 <localtime>
	calendar_time->tm_year += 1900;
   db128:	6943      	ldr	r3, [r0, #20]
   db12a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   db12e:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   db130:	4604      	mov	r4, r0
   db132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   db136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   db13a:	f8d4 e000 	ldr.w	lr, [r4]
   db13e:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db142:	ad01      	add	r5, sp, #4
   db144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db146:	4c07      	ldr	r4, [pc, #28]	; (db164 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   db148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db14a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db14c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   db14e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db150:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   db154:	b00b      	add	sp, #44	; 0x2c
   db156:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db158:	2003e5c4 	.word	0x2003e5c4
   db15c:	2003e5c0 	.word	0x2003e5c0
   db160:	2003e5bc 	.word	0x2003e5bc
   db164:	2003e594 	.word	0x2003e594

000db168 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   db168:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   db16a:	2000      	movs	r0, #0
   db16c:	f7fc ff02 	bl	d7f74 <spark_sync_time_pending>
   db170:	b128      	cbz	r0, db17e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   db172:	f7fc feef 	bl	d7f54 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   db176:	f080 0001 	eor.w	r0, r0, #1
   db17a:	b2c0      	uxtb	r0, r0
   db17c:	bd08      	pop	{r3, pc}
   db17e:	2001      	movs	r0, #1
    }
   db180:	bd08      	pop	{r3, pc}
	...

000db184 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   db184:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db186:	f7ff ffbd 	bl	db104 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   db18a:	4b02      	ldr	r3, [pc, #8]	; (db194 <_ZN9TimeClass5monthEl+0x10>)
   db18c:	6918      	ldr	r0, [r3, #16]
}
   db18e:	3001      	adds	r0, #1
   db190:	bd08      	pop	{r3, pc}
   db192:	bf00      	nop
   db194:	2003e594 	.word	0x2003e594

000db198 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   db198:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   db19a:	2000      	movs	r0, #0
   db19c:	f7fc fcdc 	bl	d7b58 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   db1a0:	4604      	mov	r4, r0
   db1a2:	b968      	cbnz	r0, db1c0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   db1a4:	f7fc fe92 	bl	d7ecc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   db1a8:	2801      	cmp	r0, #1
   db1aa:	d10b      	bne.n	db1c4 <_ZN9TimeClass7isValidEv+0x2c>
   db1ac:	4620      	mov	r0, r4
   db1ae:	f7fc fea5 	bl	d7efc <system_thread_get_state>
   db1b2:	b938      	cbnz	r0, db1c4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   db1b4:	f7ff ffd8 	bl	db168 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   db1b8:	b930      	cbnz	r0, db1c8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   db1ba:	f7fc fec3 	bl	d7f44 <spark_process>
   db1be:	e7f9      	b.n	db1b4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   db1c0:	2001      	movs	r0, #1
   db1c2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   db1c4:	2000      	movs	r0, #0
   db1c6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   db1c8:	f7ff ffce 	bl	db168 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   db1cc:	2000      	movs	r0, #0
   db1ce:	f7fc fcc3 	bl	d7b58 <HAL_RTC_Time_Is_Valid>
   db1d2:	3000      	adds	r0, #0
   db1d4:	bf18      	it	ne
   db1d6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   db1d8:	bd10      	pop	{r4, pc}

000db1da <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   db1da:	b508      	push	{r3, lr}
    (void)isValid();
   db1dc:	f7ff ffdc 	bl	db198 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   db1e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   db1e4:	f7fc bcb0 	b.w	d7b48 <HAL_RTC_Get_UnixTime>

000db1e8 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   db1e8:	b508      	push	{r3, lr}
	return hour(now());
   db1ea:	f7ff fff6 	bl	db1da <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   db1ee:	f7ff ff89 	bl	db104 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   db1f2:	4b01      	ldr	r3, [pc, #4]	; (db1f8 <_ZN9TimeClass4hourEv+0x10>)
   db1f4:	6898      	ldr	r0, [r3, #8]
   db1f6:	bd08      	pop	{r3, pc}
   db1f8:	2003e594 	.word	0x2003e594

000db1fc <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   db1fc:	b508      	push	{r3, lr}
	return minute(now());
   db1fe:	f7ff ffec 	bl	db1da <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   db202:	f7ff ff7f 	bl	db104 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   db206:	4b01      	ldr	r3, [pc, #4]	; (db20c <_ZN9TimeClass6minuteEv+0x10>)
   db208:	6858      	ldr	r0, [r3, #4]
   db20a:	bd08      	pop	{r3, pc}
   db20c:	2003e594 	.word	0x2003e594

000db210 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   db210:	b508      	push	{r3, lr}
	return second(now());
   db212:	f7ff ffe2 	bl	db1da <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   db216:	f7ff ff75 	bl	db104 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   db21a:	4b01      	ldr	r3, [pc, #4]	; (db220 <_ZN9TimeClass6secondEv+0x10>)
   db21c:	6818      	ldr	r0, [r3, #0]
   db21e:	bd08      	pop	{r3, pc}
   db220:	2003e594 	.word	0x2003e594

000db224 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   db224:	b508      	push	{r3, lr}
	return day(now());
   db226:	f7ff ffd8 	bl	db1da <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   db22a:	f7ff ff6b 	bl	db104 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   db22e:	4b01      	ldr	r3, [pc, #4]	; (db234 <_ZN9TimeClass3dayEv+0x10>)
   db230:	68d8      	ldr	r0, [r3, #12]
   db232:	bd08      	pop	{r3, pc}
   db234:	2003e594 	.word	0x2003e594

000db238 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   db238:	b508      	push	{r3, lr}
	return month(now());
   db23a:	f7ff ffce 	bl	db1da <_ZN9TimeClass3nowEv>
}
   db23e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   db242:	f7ff bf9f 	b.w	db184 <_ZN9TimeClass5monthEl>
	...

000db248 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   db248:	b508      	push	{r3, lr}
	return year(now());
   db24a:	f7ff ffc6 	bl	db1da <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   db24e:	f7ff ff59 	bl	db104 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   db252:	4b01      	ldr	r3, [pc, #4]	; (db258 <_ZN9TimeClass4yearEv+0x10>)
   db254:	6958      	ldr	r0, [r3, #20]
   db256:	bd08      	pop	{r3, pc}
   db258:	2003e594 	.word	0x2003e594

000db25c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   db25c:	4b02      	ldr	r3, [pc, #8]	; (db268 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   db25e:	681a      	ldr	r2, [r3, #0]
   db260:	4b02      	ldr	r3, [pc, #8]	; (db26c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   db262:	601a      	str	r2, [r3, #0]
   db264:	4770      	bx	lr
   db266:	bf00      	nop
   db268:	2003d378 	.word	0x2003d378
   db26c:	2003e5b8 	.word	0x2003e5b8

000db270 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   db270:	4770      	bx	lr

000db272 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db272:	7441      	strb	r1, [r0, #17]
   db274:	4770      	bx	lr

000db276 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   db276:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   db278:	7c00      	ldrb	r0, [r0, #16]
   db27a:	f7fc fdad 	bl	d7dd8 <HAL_USART_Available_Data_For_Write>
}
   db27e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db282:	bd08      	pop	{r3, pc}

000db284 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   db284:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   db286:	7c00      	ldrb	r0, [r0, #16]
   db288:	f7fc fd7e 	bl	d7d88 <HAL_USART_Available_Data>
}
   db28c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db290:	bd08      	pop	{r3, pc}

000db292 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   db292:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   db294:	7c00      	ldrb	r0, [r0, #16]
   db296:	f7fc fd87 	bl	d7da8 <HAL_USART_Peek_Data>
}
   db29a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db29e:	bf28      	it	cs
   db2a0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   db2a4:	bd08      	pop	{r3, pc}

000db2a6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   db2a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   db2a8:	7c00      	ldrb	r0, [r0, #16]
   db2aa:	f7fc fd75 	bl	d7d98 <HAL_USART_Read_Data>
}
   db2ae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db2b2:	bf28      	it	cs
   db2b4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   db2b8:	bd08      	pop	{r3, pc}

000db2ba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   db2ba:	7c00      	ldrb	r0, [r0, #16]
   db2bc:	f7fc bd7c 	b.w	d7db8 <HAL_USART_Flush_Data>

000db2c0 <_ZN11USARTSerialD0Ev>:
   db2c0:	b510      	push	{r4, lr}
   db2c2:	2114      	movs	r1, #20
   db2c4:	4604      	mov	r4, r0
   db2c6:	f000 fa18 	bl	db6fa <_ZdlPvj>
   db2ca:	4620      	mov	r0, r4
   db2cc:	bd10      	pop	{r4, pc}

000db2ce <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   db2ce:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   db2d0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   db2d2:	4604      	mov	r4, r0
   db2d4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   db2d6:	b925      	cbnz	r5, db2e2 <_ZN11USARTSerial5writeEh+0x14>
   db2d8:	7c00      	ldrb	r0, [r0, #16]
   db2da:	f7fc fd7d 	bl	d7dd8 <HAL_USART_Available_Data_For_Write>
   db2de:	2800      	cmp	r0, #0
   db2e0:	dd05      	ble.n	db2ee <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   db2e2:	4631      	mov	r1, r6
   db2e4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   db2e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   db2ea:	f7fc bd45 	b.w	d7d78 <HAL_USART_Write_Data>
  }
  return 0;
}
   db2ee:	4628      	mov	r0, r5
   db2f0:	bd70      	pop	{r4, r5, r6, pc}
	...

000db2f4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   db2f4:	b510      	push	{r4, lr}
   db2f6:	4604      	mov	r4, r0
   db2f8:	4608      	mov	r0, r1
   db2fa:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   db2fc:	2200      	movs	r2, #0
   db2fe:	6062      	str	r2, [r4, #4]
   db300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db304:	60a2      	str	r2, [r4, #8]
   db306:	4a05      	ldr	r2, [pc, #20]	; (db31c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   db308:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   db30a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   db30c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   db30e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   db310:	461a      	mov	r2, r3
   db312:	f7fc fd21 	bl	d7d58 <HAL_USART_Init>
}
   db316:	4620      	mov	r0, r4
   db318:	bd10      	pop	{r4, pc}
   db31a:	bf00      	nop
   db31c:	000df464 	.word	0x000df464

000db320 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   db320:	2300      	movs	r3, #0
   db322:	7c00      	ldrb	r0, [r0, #16]
   db324:	f7fc bd60 	b.w	d7de8 <HAL_USART_BeginConfig>

000db328 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   db328:	2200      	movs	r2, #0
   db32a:	f7ff bff9 	b.w	db320 <_ZN11USARTSerial5beginEmm>

000db32e <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   db32e:	7c00      	ldrb	r0, [r0, #16]
   db330:	f7fc bd1a 	b.w	d7d68 <HAL_USART_End>

000db334 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   db334:	7c00      	ldrb	r0, [r0, #16]
   db336:	f7fc bd47 	b.w	d7dc8 <HAL_USART_Is_Enabled>
	...

000db33c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   db33c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db33e:	4d0c      	ldr	r5, [pc, #48]	; (db370 <_Z22__fetch_global_Serial1v+0x34>)
   db340:	6829      	ldr	r1, [r5, #0]
   db342:	f011 0401 	ands.w	r4, r1, #1
   db346:	d111      	bne.n	db36c <_Z22__fetch_global_Serial1v+0x30>
   db348:	4628      	mov	r0, r5
   db34a:	f7f8 feb7 	bl	d40bc <__cxa_guard_acquire>
   db34e:	b168      	cbz	r0, db36c <_Z22__fetch_global_Serial1v+0x30>
   db350:	4a08      	ldr	r2, [pc, #32]	; (db374 <_Z22__fetch_global_Serial1v+0x38>)
   db352:	4b09      	ldr	r3, [pc, #36]	; (db378 <_Z22__fetch_global_Serial1v+0x3c>)
   db354:	4809      	ldr	r0, [pc, #36]	; (db37c <_Z22__fetch_global_Serial1v+0x40>)
   db356:	4621      	mov	r1, r4
   db358:	f7ff ffcc 	bl	db2f4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   db35c:	4628      	mov	r0, r5
   db35e:	f7f8 feb2 	bl	d40c6 <__cxa_guard_release>
   db362:	4a07      	ldr	r2, [pc, #28]	; (db380 <_Z22__fetch_global_Serial1v+0x44>)
   db364:	4907      	ldr	r1, [pc, #28]	; (db384 <_Z22__fetch_global_Serial1v+0x48>)
   db366:	4805      	ldr	r0, [pc, #20]	; (db37c <_Z22__fetch_global_Serial1v+0x40>)
   db368:	f000 f9c2 	bl	db6f0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db36c:	4803      	ldr	r0, [pc, #12]	; (db37c <_Z22__fetch_global_Serial1v+0x40>)
   db36e:	bd38      	pop	{r3, r4, r5, pc}
   db370:	2003e660 	.word	0x2003e660
   db374:	2003e664 	.word	0x2003e664
   db378:	2003e5dc 	.word	0x2003e5dc
   db37c:	2003e5c8 	.word	0x2003e5c8
   db380:	2003d468 	.word	0x2003d468
   db384:	000db271 	.word	0x000db271

000db388 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db388:	7441      	strb	r1, [r0, #17]
   db38a:	4770      	bx	lr

000db38c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   db38c:	4770      	bx	lr

000db38e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   db38e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   db390:	2100      	movs	r1, #0
   db392:	7c00      	ldrb	r0, [r0, #16]
   db394:	f7fc fd58 	bl	d7e48 <HAL_USB_USART_Receive_Data>
}
   db398:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db39c:	bf28      	it	cs
   db39e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   db3a2:	bd08      	pop	{r3, pc}

000db3a4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   db3a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   db3a6:	2101      	movs	r1, #1
   db3a8:	7c00      	ldrb	r0, [r0, #16]
   db3aa:	f7fc fd4d 	bl	d7e48 <HAL_USB_USART_Receive_Data>
}
   db3ae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db3b2:	bf28      	it	cs
   db3b4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   db3b8:	bd08      	pop	{r3, pc}

000db3ba <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   db3ba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   db3bc:	7c00      	ldrb	r0, [r0, #16]
   db3be:	f7fc fd3b 	bl	d7e38 <HAL_USB_USART_Available_Data_For_Write>
}
   db3c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db3c6:	bd08      	pop	{r3, pc}

000db3c8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   db3c8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   db3ca:	7c00      	ldrb	r0, [r0, #16]
   db3cc:	f7fc fd2c 	bl	d7e28 <HAL_USB_USART_Available_Data>
}
   db3d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db3d4:	bd08      	pop	{r3, pc}

000db3d6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   db3d6:	7c00      	ldrb	r0, [r0, #16]
   db3d8:	f7fc bd46 	b.w	d7e68 <HAL_USB_USART_Flush_Data>

000db3dc <_ZN9USBSerialD0Ev>:
   db3dc:	b510      	push	{r4, lr}
   db3de:	2114      	movs	r1, #20
   db3e0:	4604      	mov	r4, r0
   db3e2:	f000 f98a 	bl	db6fa <_ZdlPvj>
   db3e6:	4620      	mov	r0, r4
   db3e8:	bd10      	pop	{r4, pc}

000db3ea <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   db3ea:	b538      	push	{r3, r4, r5, lr}
   db3ec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db3ee:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   db3f0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db3f2:	f7fc fd21 	bl	d7e38 <HAL_USB_USART_Available_Data_For_Write>
   db3f6:	2800      	cmp	r0, #0
   db3f8:	dc01      	bgt.n	db3fe <_ZN9USBSerial5writeEh+0x14>
   db3fa:	7c60      	ldrb	r0, [r4, #17]
   db3fc:	b128      	cbz	r0, db40a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   db3fe:	4629      	mov	r1, r5
   db400:	7c20      	ldrb	r0, [r4, #16]
   db402:	f7fc fd29 	bl	d7e58 <HAL_USB_USART_Send_Data>
   db406:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   db40a:	bd38      	pop	{r3, r4, r5, pc}

000db40c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db40c:	b510      	push	{r4, lr}
   db40e:	4604      	mov	r4, r0
   db410:	2300      	movs	r3, #0
   db412:	6063      	str	r3, [r4, #4]
   db414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db418:	60a3      	str	r3, [r4, #8]
   db41a:	4b05      	ldr	r3, [pc, #20]	; (db430 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db41c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   db41e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db420:	4608      	mov	r0, r1
{
  _serial = serial;
   db422:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   db424:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   db426:	4611      	mov	r1, r2
   db428:	f7fc fce6 	bl	d7df8 <HAL_USB_USART_Init>
}
   db42c:	4620      	mov	r0, r4
   db42e:	bd10      	pop	{r4, pc}
   db430:	000df494 	.word	0x000df494

000db434 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db434:	2200      	movs	r2, #0
   db436:	7c00      	ldrb	r0, [r0, #16]
   db438:	f7fc bce6 	b.w	d7e08 <HAL_USB_USART_Begin>

000db43c <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   db43c:	7c00      	ldrb	r0, [r0, #16]
   db43e:	f7fc bceb 	b.w	d7e18 <HAL_USB_USART_End>

000db442 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db442:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db444:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db446:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db448:	2100      	movs	r1, #0
   db44a:	f001 f8f6 	bl	dc63a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   db44e:	4620      	mov	r0, r4
   db450:	bd10      	pop	{r4, pc}
	...

000db454 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   db454:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db456:	4d0e      	ldr	r5, [pc, #56]	; (db490 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   db458:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db45a:	a801      	add	r0, sp, #4
   db45c:	f7ff fff1 	bl	db442 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db460:	6829      	ldr	r1, [r5, #0]
   db462:	f011 0401 	ands.w	r4, r1, #1
   db466:	d110      	bne.n	db48a <_Z16_fetch_usbserialv+0x36>
   db468:	4628      	mov	r0, r5
   db46a:	f7f8 fe27 	bl	d40bc <__cxa_guard_acquire>
   db46e:	b160      	cbz	r0, db48a <_Z16_fetch_usbserialv+0x36>
   db470:	aa01      	add	r2, sp, #4
   db472:	4621      	mov	r1, r4
   db474:	4807      	ldr	r0, [pc, #28]	; (db494 <_Z16_fetch_usbserialv+0x40>)
   db476:	f7ff ffc9 	bl	db40c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db47a:	4628      	mov	r0, r5
   db47c:	f7f8 fe23 	bl	d40c6 <__cxa_guard_release>
   db480:	4a05      	ldr	r2, [pc, #20]	; (db498 <_Z16_fetch_usbserialv+0x44>)
   db482:	4906      	ldr	r1, [pc, #24]	; (db49c <_Z16_fetch_usbserialv+0x48>)
   db484:	4803      	ldr	r0, [pc, #12]	; (db494 <_Z16_fetch_usbserialv+0x40>)
   db486:	f000 f933 	bl	db6f0 <__aeabi_atexit>
	return _usbserial;
}
   db48a:	4802      	ldr	r0, [pc, #8]	; (db494 <_Z16_fetch_usbserialv+0x40>)
   db48c:	b007      	add	sp, #28
   db48e:	bd30      	pop	{r4, r5, pc}
   db490:	2003e6e8 	.word	0x2003e6e8
   db494:	2003e6ec 	.word	0x2003e6ec
   db498:	2003d468 	.word	0x2003d468
   db49c:	000db38d 	.word	0x000db38d

000db4a0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   db4a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   db4a2:	4b0c      	ldr	r3, [pc, #48]	; (db4d4 <serialEventRun+0x34>)
   db4a4:	b133      	cbz	r3, db4b4 <serialEventRun+0x14>
   db4a6:	f7ff ffd5 	bl	db454 <_Z16_fetch_usbserialv>
   db4aa:	6803      	ldr	r3, [r0, #0]
   db4ac:	691b      	ldr	r3, [r3, #16]
   db4ae:	4798      	blx	r3
   db4b0:	2800      	cmp	r0, #0
   db4b2:	dc09      	bgt.n	db4c8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   db4b4:	4b08      	ldr	r3, [pc, #32]	; (db4d8 <serialEventRun+0x38>)
   db4b6:	b163      	cbz	r3, db4d2 <serialEventRun+0x32>
   db4b8:	f7ff ff40 	bl	db33c <_Z22__fetch_global_Serial1v>
   db4bc:	6803      	ldr	r3, [r0, #0]
   db4be:	691b      	ldr	r3, [r3, #16]
   db4c0:	4798      	blx	r3
   db4c2:	2800      	cmp	r0, #0
   db4c4:	dc03      	bgt.n	db4ce <serialEventRun+0x2e>
   db4c6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   db4c8:	f3af 8000 	nop.w
   db4cc:	e7f2      	b.n	db4b4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   db4ce:	f3af 8000 	nop.w
   db4d2:	bd08      	pop	{r3, pc}
	...

000db4dc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   db4dc:	b508      	push	{r3, lr}
	serialEventRun();
   db4de:	f7ff ffdf 	bl	db4a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   db4e2:	f7fc fb29 	bl	d7b38 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   db4e6:	4b01      	ldr	r3, [pc, #4]	; (db4ec <_post_loop+0x10>)
   db4e8:	6018      	str	r0, [r3, #0]
   db4ea:	bd08      	pop	{r3, pc}
   db4ec:	2003e708 	.word	0x2003e708

000db4f0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db4f0:	4802      	ldr	r0, [pc, #8]	; (db4fc <_Z33system_initialize_user_backup_ramv+0xc>)
   db4f2:	4a03      	ldr	r2, [pc, #12]	; (db500 <_Z33system_initialize_user_backup_ramv+0x10>)
   db4f4:	4903      	ldr	r1, [pc, #12]	; (db504 <_Z33system_initialize_user_backup_ramv+0x14>)
   db4f6:	1a12      	subs	r2, r2, r0
   db4f8:	f001 b879 	b.w	dc5ee <memcpy>
   db4fc:	2003f400 	.word	0x2003f400
   db500:	2003f404 	.word	0x2003f404
   db504:	000df8b0 	.word	0x000df8b0

000db508 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   db508:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db50a:	2300      	movs	r3, #0
   db50c:	9300      	str	r3, [sp, #0]
   db50e:	461a      	mov	r2, r3
   db510:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db514:	f7fc fd0c 	bl	d7f30 <system_ctrl_set_result>
}
   db518:	b003      	add	sp, #12
   db51a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db520 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   db520:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   db522:	8843      	ldrh	r3, [r0, #2]
   db524:	2b0a      	cmp	r3, #10
   db526:	d008      	beq.n	db53a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   db528:	2b50      	cmp	r3, #80	; 0x50
   db52a:	d109      	bne.n	db540 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   db52c:	4b09      	ldr	r3, [pc, #36]	; (db554 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   db52e:	681b      	ldr	r3, [r3, #0]
   db530:	b13b      	cbz	r3, db542 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   db532:	b003      	add	sp, #12
   db534:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   db538:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   db53a:	f7ff ffe5 	bl	db508 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   db53e:	e006      	b.n	db54e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db540:	2300      	movs	r3, #0
   db542:	9300      	str	r3, [sp, #0]
   db544:	461a      	mov	r2, r3
   db546:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db54a:	f7fc fcf1 	bl	d7f30 <system_ctrl_set_result>
        break;
    }
}
   db54e:	b003      	add	sp, #12
   db550:	f85d fb04 	ldr.w	pc, [sp], #4
   db554:	2003e700 	.word	0x2003e700

000db558 <module_user_init_hook>:

void module_user_init_hook()
{
   db558:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db55a:	4c10      	ldr	r4, [pc, #64]	; (db59c <module_user_init_hook+0x44>)
   db55c:	4d10      	ldr	r5, [pc, #64]	; (db5a0 <module_user_init_hook+0x48>)
   db55e:	6823      	ldr	r3, [r4, #0]
   db560:	42ab      	cmp	r3, r5
   db562:	4b10      	ldr	r3, [pc, #64]	; (db5a4 <module_user_init_hook+0x4c>)
   db564:	bf0c      	ite	eq
   db566:	2201      	moveq	r2, #1
   db568:	2200      	movne	r2, #0
   db56a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   db56c:	d002      	beq.n	db574 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   db56e:	f7ff ffbf 	bl	db4f0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   db572:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   db574:	f7fc fac8 	bl	d7b08 <HAL_RNG_GetRandomNumber>
   db578:	4604      	mov	r4, r0
    srand(seed);
   db57a:	f001 f867 	bl	dc64c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   db57e:	4b0a      	ldr	r3, [pc, #40]	; (db5a8 <module_user_init_hook+0x50>)
   db580:	b113      	cbz	r3, db588 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   db582:	4620      	mov	r0, r4
   db584:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   db588:	2100      	movs	r1, #0
   db58a:	4807      	ldr	r0, [pc, #28]	; (db5a8 <module_user_init_hook+0x50>)
   db58c:	f7fc fcfa 	bl	d7f84 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db590:	2100      	movs	r1, #0
   db592:	4806      	ldr	r0, [pc, #24]	; (db5ac <module_user_init_hook+0x54>)
}
   db594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db598:	f7fc bcc0 	b.w	d7f1c <system_ctrl_set_app_request_handler>
   db59c:	2003f400 	.word	0x2003f400
   db5a0:	9a271c1e 	.word	0x9a271c1e
   db5a4:	2003e704 	.word	0x2003e704
   db5a8:	00000000 	.word	0x00000000
   db5ac:	000db521 	.word	0x000db521

000db5b0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   db5b0:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   db5b2:	4e18      	ldr	r6, [pc, #96]	; (db614 <pinAvailable+0x64>)
   db5b4:	6831      	ldr	r1, [r6, #0]
   db5b6:	f011 0501 	ands.w	r5, r1, #1
   db5ba:	4604      	mov	r4, r0
   db5bc:	d10a      	bne.n	db5d4 <pinAvailable+0x24>
   db5be:	4630      	mov	r0, r6
   db5c0:	f7f8 fd7c 	bl	d40bc <__cxa_guard_acquire>
   db5c4:	b130      	cbz	r0, db5d4 <pinAvailable+0x24>
   db5c6:	4629      	mov	r1, r5
   db5c8:	4813      	ldr	r0, [pc, #76]	; (db618 <pinAvailable+0x68>)
   db5ca:	f7ff fb6f 	bl	dacac <_ZN8SPIClassC1E17HAL_SPI_Interface>
   db5ce:	4630      	mov	r0, r6
   db5d0:	f7f8 fd79 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   db5d4:	4810      	ldr	r0, [pc, #64]	; (db618 <pinAvailable+0x68>)
   db5d6:	f7ff fc6c 	bl	daeb2 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   db5da:	b128      	cbz	r0, db5e8 <pinAvailable+0x38>
   db5dc:	f1a4 030b 	sub.w	r3, r4, #11
   db5e0:	2b02      	cmp	r3, #2
   db5e2:	d801      	bhi.n	db5e8 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   db5e4:	2000      	movs	r0, #0
   db5e6:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   db5e8:	f000 f85c 	bl	db6a4 <_Z19__fetch_global_Wirev>
   db5ec:	f7fd ff33 	bl	d9456 <_ZN7TwoWire9isEnabledEv>
   db5f0:	b108      	cbz	r0, db5f6 <pinAvailable+0x46>
   db5f2:	2c01      	cmp	r4, #1
   db5f4:	d9f6      	bls.n	db5e4 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   db5f6:	f7ff fea1 	bl	db33c <_Z22__fetch_global_Serial1v>
   db5fa:	f7ff fe9b 	bl	db334 <_ZN11USARTSerial9isEnabledEv>
   db5fe:	b118      	cbz	r0, db608 <pinAvailable+0x58>
   db600:	f1a4 0309 	sub.w	r3, r4, #9
   db604:	2b01      	cmp	r3, #1
   db606:	d9ed      	bls.n	db5e4 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   db608:	2c25      	cmp	r4, #37	; 0x25
   db60a:	bf8c      	ite	hi
   db60c:	2000      	movhi	r0, #0
   db60e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   db610:	bd70      	pop	{r4, r5, r6, pc}
   db612:	bf00      	nop
   db614:	2003d478 	.word	0x2003d478
   db618:	2003d47c 	.word	0x2003d47c

000db61c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db61c:	2825      	cmp	r0, #37	; 0x25
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   db61e:	b538      	push	{r3, r4, r5, lr}
   db620:	4604      	mov	r4, r0
   db622:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db624:	d80a      	bhi.n	db63c <pinMode+0x20>
   db626:	29ff      	cmp	r1, #255	; 0xff
   db628:	d008      	beq.n	db63c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db62a:	f7ff ffc1 	bl	db5b0 <pinAvailable>
   db62e:	b128      	cbz	r0, db63c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   db630:	4629      	mov	r1, r5
   db632:	4620      	mov	r0, r4
}
   db634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   db638:	f7fc ba9e 	b.w	d7b78 <HAL_Pin_Mode>
   db63c:	bd38      	pop	{r3, r4, r5, pc}

000db63e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   db63e:	b538      	push	{r3, r4, r5, lr}
   db640:	4604      	mov	r4, r0
   db642:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db644:	f7fc faa0 	bl	d7b88 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   db648:	28ff      	cmp	r0, #255	; 0xff
   db64a:	d010      	beq.n	db66e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   db64c:	2806      	cmp	r0, #6
   db64e:	d804      	bhi.n	db65a <digitalWrite+0x1c>
   db650:	234d      	movs	r3, #77	; 0x4d
   db652:	fa23 f000 	lsr.w	r0, r3, r0
   db656:	07c3      	lsls	r3, r0, #31
   db658:	d409      	bmi.n	db66e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   db65a:	4620      	mov	r0, r4
   db65c:	f7ff ffa8 	bl	db5b0 <pinAvailable>
   db660:	b128      	cbz	r0, db66e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   db662:	4629      	mov	r1, r5
   db664:	4620      	mov	r0, r4
}
   db666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   db66a:	f7fc ba95 	b.w	d7b98 <HAL_GPIO_Write>
   db66e:	bd38      	pop	{r3, r4, r5, pc}

000db670 <_Z17acquireWireBufferv>:
   db670:	b570      	push	{r4, r5, r6, lr}
   db672:	4604      	mov	r4, r0
   db674:	2514      	movs	r5, #20
   db676:	462a      	mov	r2, r5
   db678:	4e09      	ldr	r6, [pc, #36]	; (db6a0 <_Z17acquireWireBufferv+0x30>)
   db67a:	2100      	movs	r1, #0
   db67c:	f000 ffdd 	bl	dc63a <memset>
   db680:	8025      	strh	r5, [r4, #0]
   db682:	2520      	movs	r5, #32
   db684:	4631      	mov	r1, r6
   db686:	60a5      	str	r5, [r4, #8]
   db688:	6125      	str	r5, [r4, #16]
   db68a:	4628      	mov	r0, r5
   db68c:	f000 f84f 	bl	db72e <_ZnajRKSt9nothrow_t>
   db690:	4631      	mov	r1, r6
   db692:	6060      	str	r0, [r4, #4]
   db694:	4628      	mov	r0, r5
   db696:	f000 f84a 	bl	db72e <_ZnajRKSt9nothrow_t>
   db69a:	60e0      	str	r0, [r4, #12]
   db69c:	4620      	mov	r0, r4
   db69e:	bd70      	pop	{r4, r5, r6, pc}
   db6a0:	000df4bc 	.word	0x000df4bc

000db6a4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   db6a4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db6a6:	4d0e      	ldr	r5, [pc, #56]	; (db6e0 <_Z19__fetch_global_Wirev+0x3c>)
   db6a8:	6829      	ldr	r1, [r5, #0]
   db6aa:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   db6ae:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db6b0:	d113      	bne.n	db6da <_Z19__fetch_global_Wirev+0x36>
   db6b2:	4628      	mov	r0, r5
   db6b4:	f7f8 fd02 	bl	d40bc <__cxa_guard_acquire>
   db6b8:	b178      	cbz	r0, db6da <_Z19__fetch_global_Wirev+0x36>
   db6ba:	a801      	add	r0, sp, #4
   db6bc:	f7ff ffd8 	bl	db670 <_Z17acquireWireBufferv>
   db6c0:	aa01      	add	r2, sp, #4
   db6c2:	4621      	mov	r1, r4
   db6c4:	4807      	ldr	r0, [pc, #28]	; (db6e4 <_Z19__fetch_global_Wirev+0x40>)
   db6c6:	f7fd fe6b 	bl	d93a0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   db6ca:	4628      	mov	r0, r5
   db6cc:	f7f8 fcfb 	bl	d40c6 <__cxa_guard_release>
   db6d0:	4a05      	ldr	r2, [pc, #20]	; (db6e8 <_Z19__fetch_global_Wirev+0x44>)
   db6d2:	4906      	ldr	r1, [pc, #24]	; (db6ec <_Z19__fetch_global_Wirev+0x48>)
   db6d4:	4803      	ldr	r0, [pc, #12]	; (db6e4 <_Z19__fetch_global_Wirev+0x40>)
   db6d6:	f000 f80b 	bl	db6f0 <__aeabi_atexit>
	return wire;
}
   db6da:	4802      	ldr	r0, [pc, #8]	; (db6e4 <_Z19__fetch_global_Wirev+0x40>)
   db6dc:	b007      	add	sp, #28
   db6de:	bd30      	pop	{r4, r5, pc}
   db6e0:	2003e70c 	.word	0x2003e70c
   db6e4:	2003e710 	.word	0x2003e710
   db6e8:	2003d468 	.word	0x2003d468
   db6ec:	000d9349 	.word	0x000d9349

000db6f0 <__aeabi_atexit>:
   db6f0:	460b      	mov	r3, r1
   db6f2:	4601      	mov	r1, r0
   db6f4:	4618      	mov	r0, r3
   db6f6:	f000 be57 	b.w	dc3a8 <__cxa_atexit>

000db6fa <_ZdlPvj>:
   db6fa:	f7f8 bcd0 	b.w	d409e <_ZdlPv>
	...

000db700 <_ZSt15get_new_handlerv>:
   db700:	4b02      	ldr	r3, [pc, #8]	; (db70c <_ZSt15get_new_handlerv+0xc>)
   db702:	6818      	ldr	r0, [r3, #0]
   db704:	f3bf 8f5f 	dmb	sy
   db708:	4770      	bx	lr
   db70a:	bf00      	nop
   db70c:	2003e724 	.word	0x2003e724

000db710 <_ZnwjRKSt9nothrow_t>:
   db710:	b510      	push	{r4, lr}
   db712:	2800      	cmp	r0, #0
   db714:	bf14      	ite	ne
   db716:	4604      	movne	r4, r0
   db718:	2401      	moveq	r4, #1
   db71a:	4620      	mov	r0, r4
   db71c:	f7fc fc8a 	bl	d8034 <malloc>
   db720:	b920      	cbnz	r0, db72c <_ZnwjRKSt9nothrow_t+0x1c>
   db722:	f7ff ffed 	bl	db700 <_ZSt15get_new_handlerv>
   db726:	b108      	cbz	r0, db72c <_ZnwjRKSt9nothrow_t+0x1c>
   db728:	4780      	blx	r0
   db72a:	e7f6      	b.n	db71a <_ZnwjRKSt9nothrow_t+0xa>
   db72c:	bd10      	pop	{r4, pc}

000db72e <_ZnajRKSt9nothrow_t>:
   db72e:	f7ff bfef 	b.w	db710 <_ZnwjRKSt9nothrow_t>
	...

000db734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   db734:	4b24      	ldr	r3, [pc, #144]	; (db7c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   db736:	681a      	ldr	r2, [r3, #0]
   db738:	07d0      	lsls	r0, r2, #31
   db73a:	bf5c      	itt	pl
   db73c:	2201      	movpl	r2, #1
   db73e:	601a      	strpl	r2, [r3, #0]
   db740:	4b22      	ldr	r3, [pc, #136]	; (db7cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   db742:	681a      	ldr	r2, [r3, #0]
   db744:	07d1      	lsls	r1, r2, #31
   db746:	bf5c      	itt	pl
   db748:	2201      	movpl	r2, #1
   db74a:	601a      	strpl	r2, [r3, #0]
   db74c:	4b20      	ldr	r3, [pc, #128]	; (db7d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   db74e:	681a      	ldr	r2, [r3, #0]
   db750:	07d2      	lsls	r2, r2, #31
   db752:	bf5c      	itt	pl
   db754:	2201      	movpl	r2, #1
   db756:	601a      	strpl	r2, [r3, #0]
   db758:	4b1e      	ldr	r3, [pc, #120]	; (db7d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   db75a:	681a      	ldr	r2, [r3, #0]
   db75c:	07d0      	lsls	r0, r2, #31
   db75e:	bf5c      	itt	pl
   db760:	2201      	movpl	r2, #1
   db762:	601a      	strpl	r2, [r3, #0]
   db764:	4b1c      	ldr	r3, [pc, #112]	; (db7d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   db766:	681a      	ldr	r2, [r3, #0]
   db768:	07d1      	lsls	r1, r2, #31
   db76a:	bf5c      	itt	pl
   db76c:	2201      	movpl	r2, #1
   db76e:	601a      	strpl	r2, [r3, #0]
   db770:	4b1a      	ldr	r3, [pc, #104]	; (db7dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   db772:	681a      	ldr	r2, [r3, #0]
   db774:	07d2      	lsls	r2, r2, #31
   db776:	bf5c      	itt	pl
   db778:	2201      	movpl	r2, #1
   db77a:	601a      	strpl	r2, [r3, #0]
   db77c:	4b18      	ldr	r3, [pc, #96]	; (db7e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   db77e:	681a      	ldr	r2, [r3, #0]
   db780:	07d0      	lsls	r0, r2, #31
   db782:	bf5c      	itt	pl
   db784:	2201      	movpl	r2, #1
   db786:	601a      	strpl	r2, [r3, #0]
   db788:	4b16      	ldr	r3, [pc, #88]	; (db7e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   db78a:	681a      	ldr	r2, [r3, #0]
   db78c:	07d1      	lsls	r1, r2, #31
   db78e:	bf5c      	itt	pl
   db790:	2201      	movpl	r2, #1
   db792:	601a      	strpl	r2, [r3, #0]
   db794:	4b14      	ldr	r3, [pc, #80]	; (db7e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   db796:	681a      	ldr	r2, [r3, #0]
   db798:	07d2      	lsls	r2, r2, #31
   db79a:	bf5c      	itt	pl
   db79c:	2201      	movpl	r2, #1
   db79e:	601a      	strpl	r2, [r3, #0]
   db7a0:	4b12      	ldr	r3, [pc, #72]	; (db7ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   db7a2:	681a      	ldr	r2, [r3, #0]
   db7a4:	07d0      	lsls	r0, r2, #31
   db7a6:	bf5c      	itt	pl
   db7a8:	2201      	movpl	r2, #1
   db7aa:	601a      	strpl	r2, [r3, #0]
   db7ac:	4b10      	ldr	r3, [pc, #64]	; (db7f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   db7ae:	681a      	ldr	r2, [r3, #0]
   db7b0:	07d1      	lsls	r1, r2, #31
   db7b2:	bf5c      	itt	pl
   db7b4:	2201      	movpl	r2, #1
   db7b6:	601a      	strpl	r2, [r3, #0]
   db7b8:	4b0e      	ldr	r3, [pc, #56]	; (db7f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   db7ba:	681a      	ldr	r2, [r3, #0]
   db7bc:	07d2      	lsls	r2, r2, #31
   db7be:	bf5c      	itt	pl
   db7c0:	2201      	movpl	r2, #1
   db7c2:	601a      	strpl	r2, [r3, #0]
   db7c4:	4770      	bx	lr
   db7c6:	bf00      	nop
   db7c8:	2003e754 	.word	0x2003e754
   db7cc:	2003e750 	.word	0x2003e750
   db7d0:	2003e74c 	.word	0x2003e74c
   db7d4:	2003e748 	.word	0x2003e748
   db7d8:	2003e744 	.word	0x2003e744
   db7dc:	2003e740 	.word	0x2003e740
   db7e0:	2003e73c 	.word	0x2003e73c
   db7e4:	2003e738 	.word	0x2003e738
   db7e8:	2003e734 	.word	0x2003e734
   db7ec:	2003e730 	.word	0x2003e730
   db7f0:	2003e72c 	.word	0x2003e72c
   db7f4:	2003e728 	.word	0x2003e728

000db7f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   db7f8:	4b18      	ldr	r3, [pc, #96]	; (db85c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   db7fa:	681a      	ldr	r2, [r3, #0]
   db7fc:	07d1      	lsls	r1, r2, #31
   db7fe:	bf5c      	itt	pl
   db800:	2201      	movpl	r2, #1
   db802:	601a      	strpl	r2, [r3, #0]
   db804:	4b16      	ldr	r3, [pc, #88]	; (db860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   db806:	681a      	ldr	r2, [r3, #0]
   db808:	07d2      	lsls	r2, r2, #31
   db80a:	bf5c      	itt	pl
   db80c:	2201      	movpl	r2, #1
   db80e:	601a      	strpl	r2, [r3, #0]
   db810:	4b14      	ldr	r3, [pc, #80]	; (db864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   db812:	681a      	ldr	r2, [r3, #0]
   db814:	07d0      	lsls	r0, r2, #31
   db816:	bf5c      	itt	pl
   db818:	2201      	movpl	r2, #1
   db81a:	601a      	strpl	r2, [r3, #0]
   db81c:	4b12      	ldr	r3, [pc, #72]	; (db868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   db81e:	681a      	ldr	r2, [r3, #0]
   db820:	07d1      	lsls	r1, r2, #31
   db822:	bf5c      	itt	pl
   db824:	2201      	movpl	r2, #1
   db826:	601a      	strpl	r2, [r3, #0]
   db828:	4b10      	ldr	r3, [pc, #64]	; (db86c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   db82a:	681a      	ldr	r2, [r3, #0]
   db82c:	07d2      	lsls	r2, r2, #31
   db82e:	bf5c      	itt	pl
   db830:	2201      	movpl	r2, #1
   db832:	601a      	strpl	r2, [r3, #0]
   db834:	4b0e      	ldr	r3, [pc, #56]	; (db870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   db836:	681a      	ldr	r2, [r3, #0]
   db838:	07d0      	lsls	r0, r2, #31
   db83a:	bf5c      	itt	pl
   db83c:	2201      	movpl	r2, #1
   db83e:	601a      	strpl	r2, [r3, #0]
   db840:	4b0c      	ldr	r3, [pc, #48]	; (db874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   db842:	681a      	ldr	r2, [r3, #0]
   db844:	07d1      	lsls	r1, r2, #31
   db846:	bf5c      	itt	pl
   db848:	2201      	movpl	r2, #1
   db84a:	601a      	strpl	r2, [r3, #0]
   db84c:	4b0a      	ldr	r3, [pc, #40]	; (db878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   db84e:	681a      	ldr	r2, [r3, #0]
   db850:	07d2      	lsls	r2, r2, #31
   db852:	bf5c      	itt	pl
   db854:	2201      	movpl	r2, #1
   db856:	601a      	strpl	r2, [r3, #0]
   db858:	4770      	bx	lr
   db85a:	bf00      	nop
   db85c:	2003e774 	.word	0x2003e774
   db860:	2003e770 	.word	0x2003e770
   db864:	2003e76c 	.word	0x2003e76c
   db868:	2003e768 	.word	0x2003e768
   db86c:	2003e764 	.word	0x2003e764
   db870:	2003e760 	.word	0x2003e760
   db874:	2003e75c 	.word	0x2003e75c
   db878:	2003e758 	.word	0x2003e758

000db87c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   db87c:	4b18      	ldr	r3, [pc, #96]	; (db8e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   db87e:	681a      	ldr	r2, [r3, #0]
   db880:	07d1      	lsls	r1, r2, #31
   db882:	bf5c      	itt	pl
   db884:	2201      	movpl	r2, #1
   db886:	601a      	strpl	r2, [r3, #0]
   db888:	4b16      	ldr	r3, [pc, #88]	; (db8e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   db88a:	681a      	ldr	r2, [r3, #0]
   db88c:	07d2      	lsls	r2, r2, #31
   db88e:	bf5c      	itt	pl
   db890:	2201      	movpl	r2, #1
   db892:	601a      	strpl	r2, [r3, #0]
   db894:	4b14      	ldr	r3, [pc, #80]	; (db8e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   db896:	681a      	ldr	r2, [r3, #0]
   db898:	07d0      	lsls	r0, r2, #31
   db89a:	bf5c      	itt	pl
   db89c:	2201      	movpl	r2, #1
   db89e:	601a      	strpl	r2, [r3, #0]
   db8a0:	4b12      	ldr	r3, [pc, #72]	; (db8ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   db8a2:	681a      	ldr	r2, [r3, #0]
   db8a4:	07d1      	lsls	r1, r2, #31
   db8a6:	bf5c      	itt	pl
   db8a8:	2201      	movpl	r2, #1
   db8aa:	601a      	strpl	r2, [r3, #0]
   db8ac:	4b10      	ldr	r3, [pc, #64]	; (db8f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   db8ae:	681a      	ldr	r2, [r3, #0]
   db8b0:	07d2      	lsls	r2, r2, #31
   db8b2:	bf5c      	itt	pl
   db8b4:	2201      	movpl	r2, #1
   db8b6:	601a      	strpl	r2, [r3, #0]
   db8b8:	4b0e      	ldr	r3, [pc, #56]	; (db8f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   db8ba:	681a      	ldr	r2, [r3, #0]
   db8bc:	07d0      	lsls	r0, r2, #31
   db8be:	bf5c      	itt	pl
   db8c0:	2201      	movpl	r2, #1
   db8c2:	601a      	strpl	r2, [r3, #0]
   db8c4:	4b0c      	ldr	r3, [pc, #48]	; (db8f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   db8c6:	681a      	ldr	r2, [r3, #0]
   db8c8:	07d1      	lsls	r1, r2, #31
   db8ca:	bf5c      	itt	pl
   db8cc:	2201      	movpl	r2, #1
   db8ce:	601a      	strpl	r2, [r3, #0]
   db8d0:	4b0a      	ldr	r3, [pc, #40]	; (db8fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   db8d2:	681a      	ldr	r2, [r3, #0]
   db8d4:	07d2      	lsls	r2, r2, #31
   db8d6:	bf5c      	itt	pl
   db8d8:	2201      	movpl	r2, #1
   db8da:	601a      	strpl	r2, [r3, #0]
   db8dc:	4770      	bx	lr
   db8de:	bf00      	nop
   db8e0:	2003e794 	.word	0x2003e794
   db8e4:	2003e790 	.word	0x2003e790
   db8e8:	2003e78c 	.word	0x2003e78c
   db8ec:	2003e788 	.word	0x2003e788
   db8f0:	2003e784 	.word	0x2003e784
   db8f4:	2003e780 	.word	0x2003e780
   db8f8:	2003e77c 	.word	0x2003e77c
   db8fc:	2003e778 	.word	0x2003e778

000db900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   db900:	4b24      	ldr	r3, [pc, #144]	; (db994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   db902:	681a      	ldr	r2, [r3, #0]
   db904:	07d0      	lsls	r0, r2, #31
   db906:	bf5c      	itt	pl
   db908:	2201      	movpl	r2, #1
   db90a:	601a      	strpl	r2, [r3, #0]
   db90c:	4b22      	ldr	r3, [pc, #136]	; (db998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   db90e:	681a      	ldr	r2, [r3, #0]
   db910:	07d1      	lsls	r1, r2, #31
   db912:	bf5c      	itt	pl
   db914:	2201      	movpl	r2, #1
   db916:	601a      	strpl	r2, [r3, #0]
   db918:	4b20      	ldr	r3, [pc, #128]	; (db99c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   db91a:	681a      	ldr	r2, [r3, #0]
   db91c:	07d2      	lsls	r2, r2, #31
   db91e:	bf5c      	itt	pl
   db920:	2201      	movpl	r2, #1
   db922:	601a      	strpl	r2, [r3, #0]
   db924:	4b1e      	ldr	r3, [pc, #120]	; (db9a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   db926:	681a      	ldr	r2, [r3, #0]
   db928:	07d0      	lsls	r0, r2, #31
   db92a:	bf5c      	itt	pl
   db92c:	2201      	movpl	r2, #1
   db92e:	601a      	strpl	r2, [r3, #0]
   db930:	4b1c      	ldr	r3, [pc, #112]	; (db9a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   db932:	681a      	ldr	r2, [r3, #0]
   db934:	07d1      	lsls	r1, r2, #31
   db936:	bf5c      	itt	pl
   db938:	2201      	movpl	r2, #1
   db93a:	601a      	strpl	r2, [r3, #0]
   db93c:	4b1a      	ldr	r3, [pc, #104]	; (db9a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   db93e:	681a      	ldr	r2, [r3, #0]
   db940:	07d2      	lsls	r2, r2, #31
   db942:	bf5c      	itt	pl
   db944:	2201      	movpl	r2, #1
   db946:	601a      	strpl	r2, [r3, #0]
   db948:	4b18      	ldr	r3, [pc, #96]	; (db9ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   db94a:	681a      	ldr	r2, [r3, #0]
   db94c:	07d0      	lsls	r0, r2, #31
   db94e:	bf5c      	itt	pl
   db950:	2201      	movpl	r2, #1
   db952:	601a      	strpl	r2, [r3, #0]
   db954:	4b16      	ldr	r3, [pc, #88]	; (db9b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   db956:	681a      	ldr	r2, [r3, #0]
   db958:	07d1      	lsls	r1, r2, #31
   db95a:	bf5c      	itt	pl
   db95c:	2201      	movpl	r2, #1
   db95e:	601a      	strpl	r2, [r3, #0]
   db960:	4b14      	ldr	r3, [pc, #80]	; (db9b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   db962:	681a      	ldr	r2, [r3, #0]
   db964:	07d2      	lsls	r2, r2, #31
   db966:	bf5c      	itt	pl
   db968:	2201      	movpl	r2, #1
   db96a:	601a      	strpl	r2, [r3, #0]
   db96c:	4b12      	ldr	r3, [pc, #72]	; (db9b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   db96e:	681a      	ldr	r2, [r3, #0]
   db970:	07d0      	lsls	r0, r2, #31
   db972:	bf5c      	itt	pl
   db974:	2201      	movpl	r2, #1
   db976:	601a      	strpl	r2, [r3, #0]
   db978:	4b10      	ldr	r3, [pc, #64]	; (db9bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   db97a:	681a      	ldr	r2, [r3, #0]
   db97c:	07d1      	lsls	r1, r2, #31
   db97e:	bf5c      	itt	pl
   db980:	2201      	movpl	r2, #1
   db982:	601a      	strpl	r2, [r3, #0]
   db984:	4b0e      	ldr	r3, [pc, #56]	; (db9c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   db986:	681a      	ldr	r2, [r3, #0]
   db988:	07d2      	lsls	r2, r2, #31
   db98a:	bf5c      	itt	pl
   db98c:	2201      	movpl	r2, #1
   db98e:	601a      	strpl	r2, [r3, #0]
   db990:	4770      	bx	lr
   db992:	bf00      	nop
   db994:	2003e7c4 	.word	0x2003e7c4
   db998:	2003e7c0 	.word	0x2003e7c0
   db99c:	2003e7bc 	.word	0x2003e7bc
   db9a0:	2003e7b8 	.word	0x2003e7b8
   db9a4:	2003e7b4 	.word	0x2003e7b4
   db9a8:	2003e7b0 	.word	0x2003e7b0
   db9ac:	2003e7ac 	.word	0x2003e7ac
   db9b0:	2003e7a8 	.word	0x2003e7a8
   db9b4:	2003e7a4 	.word	0x2003e7a4
   db9b8:	2003e7a0 	.word	0x2003e7a0
   db9bc:	2003e79c 	.word	0x2003e79c
   db9c0:	2003e798 	.word	0x2003e798

000db9c4 <__aeabi_drsub>:
   db9c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   db9c8:	e002      	b.n	db9d0 <__adddf3>
   db9ca:	bf00      	nop

000db9cc <__aeabi_dsub>:
   db9cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000db9d0 <__adddf3>:
   db9d0:	b530      	push	{r4, r5, lr}
   db9d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   db9d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   db9da:	ea94 0f05 	teq	r4, r5
   db9de:	bf08      	it	eq
   db9e0:	ea90 0f02 	teqeq	r0, r2
   db9e4:	bf1f      	itttt	ne
   db9e6:	ea54 0c00 	orrsne.w	ip, r4, r0
   db9ea:	ea55 0c02 	orrsne.w	ip, r5, r2
   db9ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db9f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db9f6:	f000 80e2 	beq.w	dbbbe <__adddf3+0x1ee>
   db9fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db9fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dba02:	bfb8      	it	lt
   dba04:	426d      	neglt	r5, r5
   dba06:	dd0c      	ble.n	dba22 <__adddf3+0x52>
   dba08:	442c      	add	r4, r5
   dba0a:	ea80 0202 	eor.w	r2, r0, r2
   dba0e:	ea81 0303 	eor.w	r3, r1, r3
   dba12:	ea82 0000 	eor.w	r0, r2, r0
   dba16:	ea83 0101 	eor.w	r1, r3, r1
   dba1a:	ea80 0202 	eor.w	r2, r0, r2
   dba1e:	ea81 0303 	eor.w	r3, r1, r3
   dba22:	2d36      	cmp	r5, #54	; 0x36
   dba24:	bf88      	it	hi
   dba26:	bd30      	pophi	{r4, r5, pc}
   dba28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dba2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dba30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dba34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dba38:	d002      	beq.n	dba40 <__adddf3+0x70>
   dba3a:	4240      	negs	r0, r0
   dba3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dba40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dba44:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dba48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dba4c:	d002      	beq.n	dba54 <__adddf3+0x84>
   dba4e:	4252      	negs	r2, r2
   dba50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dba54:	ea94 0f05 	teq	r4, r5
   dba58:	f000 80a7 	beq.w	dbbaa <__adddf3+0x1da>
   dba5c:	f1a4 0401 	sub.w	r4, r4, #1
   dba60:	f1d5 0e20 	rsbs	lr, r5, #32
   dba64:	db0d      	blt.n	dba82 <__adddf3+0xb2>
   dba66:	fa02 fc0e 	lsl.w	ip, r2, lr
   dba6a:	fa22 f205 	lsr.w	r2, r2, r5
   dba6e:	1880      	adds	r0, r0, r2
   dba70:	f141 0100 	adc.w	r1, r1, #0
   dba74:	fa03 f20e 	lsl.w	r2, r3, lr
   dba78:	1880      	adds	r0, r0, r2
   dba7a:	fa43 f305 	asr.w	r3, r3, r5
   dba7e:	4159      	adcs	r1, r3
   dba80:	e00e      	b.n	dbaa0 <__adddf3+0xd0>
   dba82:	f1a5 0520 	sub.w	r5, r5, #32
   dba86:	f10e 0e20 	add.w	lr, lr, #32
   dba8a:	2a01      	cmp	r2, #1
   dba8c:	fa03 fc0e 	lsl.w	ip, r3, lr
   dba90:	bf28      	it	cs
   dba92:	f04c 0c02 	orrcs.w	ip, ip, #2
   dba96:	fa43 f305 	asr.w	r3, r3, r5
   dba9a:	18c0      	adds	r0, r0, r3
   dba9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dbaa0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbaa4:	d507      	bpl.n	dbab6 <__adddf3+0xe6>
   dbaa6:	f04f 0e00 	mov.w	lr, #0
   dbaaa:	f1dc 0c00 	rsbs	ip, ip, #0
   dbaae:	eb7e 0000 	sbcs.w	r0, lr, r0
   dbab2:	eb6e 0101 	sbc.w	r1, lr, r1
   dbab6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dbaba:	d31b      	bcc.n	dbaf4 <__adddf3+0x124>
   dbabc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dbac0:	d30c      	bcc.n	dbadc <__adddf3+0x10c>
   dbac2:	0849      	lsrs	r1, r1, #1
   dbac4:	ea5f 0030 	movs.w	r0, r0, rrx
   dbac8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dbacc:	f104 0401 	add.w	r4, r4, #1
   dbad0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dbad4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dbad8:	f080 809a 	bcs.w	dbc10 <__adddf3+0x240>
   dbadc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dbae0:	bf08      	it	eq
   dbae2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dbae6:	f150 0000 	adcs.w	r0, r0, #0
   dbaea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbaee:	ea41 0105 	orr.w	r1, r1, r5
   dbaf2:	bd30      	pop	{r4, r5, pc}
   dbaf4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dbaf8:	4140      	adcs	r0, r0
   dbafa:	eb41 0101 	adc.w	r1, r1, r1
   dbafe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbb02:	f1a4 0401 	sub.w	r4, r4, #1
   dbb06:	d1e9      	bne.n	dbadc <__adddf3+0x10c>
   dbb08:	f091 0f00 	teq	r1, #0
   dbb0c:	bf04      	itt	eq
   dbb0e:	4601      	moveq	r1, r0
   dbb10:	2000      	moveq	r0, #0
   dbb12:	fab1 f381 	clz	r3, r1
   dbb16:	bf08      	it	eq
   dbb18:	3320      	addeq	r3, #32
   dbb1a:	f1a3 030b 	sub.w	r3, r3, #11
   dbb1e:	f1b3 0220 	subs.w	r2, r3, #32
   dbb22:	da0c      	bge.n	dbb3e <__adddf3+0x16e>
   dbb24:	320c      	adds	r2, #12
   dbb26:	dd08      	ble.n	dbb3a <__adddf3+0x16a>
   dbb28:	f102 0c14 	add.w	ip, r2, #20
   dbb2c:	f1c2 020c 	rsb	r2, r2, #12
   dbb30:	fa01 f00c 	lsl.w	r0, r1, ip
   dbb34:	fa21 f102 	lsr.w	r1, r1, r2
   dbb38:	e00c      	b.n	dbb54 <__adddf3+0x184>
   dbb3a:	f102 0214 	add.w	r2, r2, #20
   dbb3e:	bfd8      	it	le
   dbb40:	f1c2 0c20 	rsble	ip, r2, #32
   dbb44:	fa01 f102 	lsl.w	r1, r1, r2
   dbb48:	fa20 fc0c 	lsr.w	ip, r0, ip
   dbb4c:	bfdc      	itt	le
   dbb4e:	ea41 010c 	orrle.w	r1, r1, ip
   dbb52:	4090      	lslle	r0, r2
   dbb54:	1ae4      	subs	r4, r4, r3
   dbb56:	bfa2      	ittt	ge
   dbb58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dbb5c:	4329      	orrge	r1, r5
   dbb5e:	bd30      	popge	{r4, r5, pc}
   dbb60:	ea6f 0404 	mvn.w	r4, r4
   dbb64:	3c1f      	subs	r4, #31
   dbb66:	da1c      	bge.n	dbba2 <__adddf3+0x1d2>
   dbb68:	340c      	adds	r4, #12
   dbb6a:	dc0e      	bgt.n	dbb8a <__adddf3+0x1ba>
   dbb6c:	f104 0414 	add.w	r4, r4, #20
   dbb70:	f1c4 0220 	rsb	r2, r4, #32
   dbb74:	fa20 f004 	lsr.w	r0, r0, r4
   dbb78:	fa01 f302 	lsl.w	r3, r1, r2
   dbb7c:	ea40 0003 	orr.w	r0, r0, r3
   dbb80:	fa21 f304 	lsr.w	r3, r1, r4
   dbb84:	ea45 0103 	orr.w	r1, r5, r3
   dbb88:	bd30      	pop	{r4, r5, pc}
   dbb8a:	f1c4 040c 	rsb	r4, r4, #12
   dbb8e:	f1c4 0220 	rsb	r2, r4, #32
   dbb92:	fa20 f002 	lsr.w	r0, r0, r2
   dbb96:	fa01 f304 	lsl.w	r3, r1, r4
   dbb9a:	ea40 0003 	orr.w	r0, r0, r3
   dbb9e:	4629      	mov	r1, r5
   dbba0:	bd30      	pop	{r4, r5, pc}
   dbba2:	fa21 f004 	lsr.w	r0, r1, r4
   dbba6:	4629      	mov	r1, r5
   dbba8:	bd30      	pop	{r4, r5, pc}
   dbbaa:	f094 0f00 	teq	r4, #0
   dbbae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dbbb2:	bf06      	itte	eq
   dbbb4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dbbb8:	3401      	addeq	r4, #1
   dbbba:	3d01      	subne	r5, #1
   dbbbc:	e74e      	b.n	dba5c <__adddf3+0x8c>
   dbbbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbbc2:	bf18      	it	ne
   dbbc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dbbc8:	d029      	beq.n	dbc1e <__adddf3+0x24e>
   dbbca:	ea94 0f05 	teq	r4, r5
   dbbce:	bf08      	it	eq
   dbbd0:	ea90 0f02 	teqeq	r0, r2
   dbbd4:	d005      	beq.n	dbbe2 <__adddf3+0x212>
   dbbd6:	ea54 0c00 	orrs.w	ip, r4, r0
   dbbda:	bf04      	itt	eq
   dbbdc:	4619      	moveq	r1, r3
   dbbde:	4610      	moveq	r0, r2
   dbbe0:	bd30      	pop	{r4, r5, pc}
   dbbe2:	ea91 0f03 	teq	r1, r3
   dbbe6:	bf1e      	ittt	ne
   dbbe8:	2100      	movne	r1, #0
   dbbea:	2000      	movne	r0, #0
   dbbec:	bd30      	popne	{r4, r5, pc}
   dbbee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dbbf2:	d105      	bne.n	dbc00 <__adddf3+0x230>
   dbbf4:	0040      	lsls	r0, r0, #1
   dbbf6:	4149      	adcs	r1, r1
   dbbf8:	bf28      	it	cs
   dbbfa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dbbfe:	bd30      	pop	{r4, r5, pc}
   dbc00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dbc04:	bf3c      	itt	cc
   dbc06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dbc0a:	bd30      	popcc	{r4, r5, pc}
   dbc0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbc10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dbc14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbc18:	f04f 0000 	mov.w	r0, #0
   dbc1c:	bd30      	pop	{r4, r5, pc}
   dbc1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbc22:	bf1a      	itte	ne
   dbc24:	4619      	movne	r1, r3
   dbc26:	4610      	movne	r0, r2
   dbc28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dbc2c:	bf1c      	itt	ne
   dbc2e:	460b      	movne	r3, r1
   dbc30:	4602      	movne	r2, r0
   dbc32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbc36:	bf06      	itte	eq
   dbc38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dbc3c:	ea91 0f03 	teqeq	r1, r3
   dbc40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dbc44:	bd30      	pop	{r4, r5, pc}
   dbc46:	bf00      	nop

000dbc48 <__aeabi_ui2d>:
   dbc48:	f090 0f00 	teq	r0, #0
   dbc4c:	bf04      	itt	eq
   dbc4e:	2100      	moveq	r1, #0
   dbc50:	4770      	bxeq	lr
   dbc52:	b530      	push	{r4, r5, lr}
   dbc54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbc58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbc5c:	f04f 0500 	mov.w	r5, #0
   dbc60:	f04f 0100 	mov.w	r1, #0
   dbc64:	e750      	b.n	dbb08 <__adddf3+0x138>
   dbc66:	bf00      	nop

000dbc68 <__aeabi_i2d>:
   dbc68:	f090 0f00 	teq	r0, #0
   dbc6c:	bf04      	itt	eq
   dbc6e:	2100      	moveq	r1, #0
   dbc70:	4770      	bxeq	lr
   dbc72:	b530      	push	{r4, r5, lr}
   dbc74:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbc78:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbc7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dbc80:	bf48      	it	mi
   dbc82:	4240      	negmi	r0, r0
   dbc84:	f04f 0100 	mov.w	r1, #0
   dbc88:	e73e      	b.n	dbb08 <__adddf3+0x138>
   dbc8a:	bf00      	nop

000dbc8c <__aeabi_f2d>:
   dbc8c:	0042      	lsls	r2, r0, #1
   dbc8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dbc92:	ea4f 0131 	mov.w	r1, r1, rrx
   dbc96:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dbc9a:	bf1f      	itttt	ne
   dbc9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dbca0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dbca4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dbca8:	4770      	bxne	lr
   dbcaa:	f092 0f00 	teq	r2, #0
   dbcae:	bf14      	ite	ne
   dbcb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dbcb4:	4770      	bxeq	lr
   dbcb6:	b530      	push	{r4, r5, lr}
   dbcb8:	f44f 7460 	mov.w	r4, #896	; 0x380
   dbcbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbcc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbcc4:	e720      	b.n	dbb08 <__adddf3+0x138>
   dbcc6:	bf00      	nop

000dbcc8 <__aeabi_ul2d>:
   dbcc8:	ea50 0201 	orrs.w	r2, r0, r1
   dbccc:	bf08      	it	eq
   dbcce:	4770      	bxeq	lr
   dbcd0:	b530      	push	{r4, r5, lr}
   dbcd2:	f04f 0500 	mov.w	r5, #0
   dbcd6:	e00a      	b.n	dbcee <__aeabi_l2d+0x16>

000dbcd8 <__aeabi_l2d>:
   dbcd8:	ea50 0201 	orrs.w	r2, r0, r1
   dbcdc:	bf08      	it	eq
   dbcde:	4770      	bxeq	lr
   dbce0:	b530      	push	{r4, r5, lr}
   dbce2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dbce6:	d502      	bpl.n	dbcee <__aeabi_l2d+0x16>
   dbce8:	4240      	negs	r0, r0
   dbcea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbcee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbcf2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbcf6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dbcfa:	f43f aedc 	beq.w	dbab6 <__adddf3+0xe6>
   dbcfe:	f04f 0203 	mov.w	r2, #3
   dbd02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dbd06:	bf18      	it	ne
   dbd08:	3203      	addne	r2, #3
   dbd0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dbd0e:	bf18      	it	ne
   dbd10:	3203      	addne	r2, #3
   dbd12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dbd16:	f1c2 0320 	rsb	r3, r2, #32
   dbd1a:	fa00 fc03 	lsl.w	ip, r0, r3
   dbd1e:	fa20 f002 	lsr.w	r0, r0, r2
   dbd22:	fa01 fe03 	lsl.w	lr, r1, r3
   dbd26:	ea40 000e 	orr.w	r0, r0, lr
   dbd2a:	fa21 f102 	lsr.w	r1, r1, r2
   dbd2e:	4414      	add	r4, r2
   dbd30:	e6c1      	b.n	dbab6 <__adddf3+0xe6>
   dbd32:	bf00      	nop

000dbd34 <__aeabi_dmul>:
   dbd34:	b570      	push	{r4, r5, r6, lr}
   dbd36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbd3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbd3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbd42:	bf1d      	ittte	ne
   dbd44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbd48:	ea94 0f0c 	teqne	r4, ip
   dbd4c:	ea95 0f0c 	teqne	r5, ip
   dbd50:	f000 f8de 	bleq	dbf10 <__aeabi_dmul+0x1dc>
   dbd54:	442c      	add	r4, r5
   dbd56:	ea81 0603 	eor.w	r6, r1, r3
   dbd5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dbd5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dbd62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dbd66:	bf18      	it	ne
   dbd68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dbd6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbd70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dbd74:	d038      	beq.n	dbde8 <__aeabi_dmul+0xb4>
   dbd76:	fba0 ce02 	umull	ip, lr, r0, r2
   dbd7a:	f04f 0500 	mov.w	r5, #0
   dbd7e:	fbe1 e502 	umlal	lr, r5, r1, r2
   dbd82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dbd86:	fbe0 e503 	umlal	lr, r5, r0, r3
   dbd8a:	f04f 0600 	mov.w	r6, #0
   dbd8e:	fbe1 5603 	umlal	r5, r6, r1, r3
   dbd92:	f09c 0f00 	teq	ip, #0
   dbd96:	bf18      	it	ne
   dbd98:	f04e 0e01 	orrne.w	lr, lr, #1
   dbd9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dbda0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dbda4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dbda8:	d204      	bcs.n	dbdb4 <__aeabi_dmul+0x80>
   dbdaa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dbdae:	416d      	adcs	r5, r5
   dbdb0:	eb46 0606 	adc.w	r6, r6, r6
   dbdb4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dbdb8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dbdbc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dbdc0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dbdc4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dbdc8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbdcc:	bf88      	it	hi
   dbdce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbdd2:	d81e      	bhi.n	dbe12 <__aeabi_dmul+0xde>
   dbdd4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dbdd8:	bf08      	it	eq
   dbdda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dbdde:	f150 0000 	adcs.w	r0, r0, #0
   dbde2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbde6:	bd70      	pop	{r4, r5, r6, pc}
   dbde8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dbdec:	ea46 0101 	orr.w	r1, r6, r1
   dbdf0:	ea40 0002 	orr.w	r0, r0, r2
   dbdf4:	ea81 0103 	eor.w	r1, r1, r3
   dbdf8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dbdfc:	bfc2      	ittt	gt
   dbdfe:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbe02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbe06:	bd70      	popgt	{r4, r5, r6, pc}
   dbe08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbe0c:	f04f 0e00 	mov.w	lr, #0
   dbe10:	3c01      	subs	r4, #1
   dbe12:	f300 80ab 	bgt.w	dbf6c <__aeabi_dmul+0x238>
   dbe16:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dbe1a:	bfde      	ittt	le
   dbe1c:	2000      	movle	r0, #0
   dbe1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dbe22:	bd70      	pople	{r4, r5, r6, pc}
   dbe24:	f1c4 0400 	rsb	r4, r4, #0
   dbe28:	3c20      	subs	r4, #32
   dbe2a:	da35      	bge.n	dbe98 <__aeabi_dmul+0x164>
   dbe2c:	340c      	adds	r4, #12
   dbe2e:	dc1b      	bgt.n	dbe68 <__aeabi_dmul+0x134>
   dbe30:	f104 0414 	add.w	r4, r4, #20
   dbe34:	f1c4 0520 	rsb	r5, r4, #32
   dbe38:	fa00 f305 	lsl.w	r3, r0, r5
   dbe3c:	fa20 f004 	lsr.w	r0, r0, r4
   dbe40:	fa01 f205 	lsl.w	r2, r1, r5
   dbe44:	ea40 0002 	orr.w	r0, r0, r2
   dbe48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dbe4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbe50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbe54:	fa21 f604 	lsr.w	r6, r1, r4
   dbe58:	eb42 0106 	adc.w	r1, r2, r6
   dbe5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbe60:	bf08      	it	eq
   dbe62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbe66:	bd70      	pop	{r4, r5, r6, pc}
   dbe68:	f1c4 040c 	rsb	r4, r4, #12
   dbe6c:	f1c4 0520 	rsb	r5, r4, #32
   dbe70:	fa00 f304 	lsl.w	r3, r0, r4
   dbe74:	fa20 f005 	lsr.w	r0, r0, r5
   dbe78:	fa01 f204 	lsl.w	r2, r1, r4
   dbe7c:	ea40 0002 	orr.w	r0, r0, r2
   dbe80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbe84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbe88:	f141 0100 	adc.w	r1, r1, #0
   dbe8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbe90:	bf08      	it	eq
   dbe92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbe96:	bd70      	pop	{r4, r5, r6, pc}
   dbe98:	f1c4 0520 	rsb	r5, r4, #32
   dbe9c:	fa00 f205 	lsl.w	r2, r0, r5
   dbea0:	ea4e 0e02 	orr.w	lr, lr, r2
   dbea4:	fa20 f304 	lsr.w	r3, r0, r4
   dbea8:	fa01 f205 	lsl.w	r2, r1, r5
   dbeac:	ea43 0302 	orr.w	r3, r3, r2
   dbeb0:	fa21 f004 	lsr.w	r0, r1, r4
   dbeb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbeb8:	fa21 f204 	lsr.w	r2, r1, r4
   dbebc:	ea20 0002 	bic.w	r0, r0, r2
   dbec0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dbec4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbec8:	bf08      	it	eq
   dbeca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbece:	bd70      	pop	{r4, r5, r6, pc}
   dbed0:	f094 0f00 	teq	r4, #0
   dbed4:	d10f      	bne.n	dbef6 <__aeabi_dmul+0x1c2>
   dbed6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dbeda:	0040      	lsls	r0, r0, #1
   dbedc:	eb41 0101 	adc.w	r1, r1, r1
   dbee0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbee4:	bf08      	it	eq
   dbee6:	3c01      	subeq	r4, #1
   dbee8:	d0f7      	beq.n	dbeda <__aeabi_dmul+0x1a6>
   dbeea:	ea41 0106 	orr.w	r1, r1, r6
   dbeee:	f095 0f00 	teq	r5, #0
   dbef2:	bf18      	it	ne
   dbef4:	4770      	bxne	lr
   dbef6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dbefa:	0052      	lsls	r2, r2, #1
   dbefc:	eb43 0303 	adc.w	r3, r3, r3
   dbf00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dbf04:	bf08      	it	eq
   dbf06:	3d01      	subeq	r5, #1
   dbf08:	d0f7      	beq.n	dbefa <__aeabi_dmul+0x1c6>
   dbf0a:	ea43 0306 	orr.w	r3, r3, r6
   dbf0e:	4770      	bx	lr
   dbf10:	ea94 0f0c 	teq	r4, ip
   dbf14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbf18:	bf18      	it	ne
   dbf1a:	ea95 0f0c 	teqne	r5, ip
   dbf1e:	d00c      	beq.n	dbf3a <__aeabi_dmul+0x206>
   dbf20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbf24:	bf18      	it	ne
   dbf26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbf2a:	d1d1      	bne.n	dbed0 <__aeabi_dmul+0x19c>
   dbf2c:	ea81 0103 	eor.w	r1, r1, r3
   dbf30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbf34:	f04f 0000 	mov.w	r0, #0
   dbf38:	bd70      	pop	{r4, r5, r6, pc}
   dbf3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbf3e:	bf06      	itte	eq
   dbf40:	4610      	moveq	r0, r2
   dbf42:	4619      	moveq	r1, r3
   dbf44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbf48:	d019      	beq.n	dbf7e <__aeabi_dmul+0x24a>
   dbf4a:	ea94 0f0c 	teq	r4, ip
   dbf4e:	d102      	bne.n	dbf56 <__aeabi_dmul+0x222>
   dbf50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dbf54:	d113      	bne.n	dbf7e <__aeabi_dmul+0x24a>
   dbf56:	ea95 0f0c 	teq	r5, ip
   dbf5a:	d105      	bne.n	dbf68 <__aeabi_dmul+0x234>
   dbf5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dbf60:	bf1c      	itt	ne
   dbf62:	4610      	movne	r0, r2
   dbf64:	4619      	movne	r1, r3
   dbf66:	d10a      	bne.n	dbf7e <__aeabi_dmul+0x24a>
   dbf68:	ea81 0103 	eor.w	r1, r1, r3
   dbf6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbf70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbf74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbf78:	f04f 0000 	mov.w	r0, #0
   dbf7c:	bd70      	pop	{r4, r5, r6, pc}
   dbf7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbf82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dbf86:	bd70      	pop	{r4, r5, r6, pc}

000dbf88 <__aeabi_ddiv>:
   dbf88:	b570      	push	{r4, r5, r6, lr}
   dbf8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbf8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbf92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbf96:	bf1d      	ittte	ne
   dbf98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbf9c:	ea94 0f0c 	teqne	r4, ip
   dbfa0:	ea95 0f0c 	teqne	r5, ip
   dbfa4:	f000 f8a7 	bleq	dc0f6 <__aeabi_ddiv+0x16e>
   dbfa8:	eba4 0405 	sub.w	r4, r4, r5
   dbfac:	ea81 0e03 	eor.w	lr, r1, r3
   dbfb0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbfb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dbfb8:	f000 8088 	beq.w	dc0cc <__aeabi_ddiv+0x144>
   dbfbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dbfc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dbfc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dbfc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dbfcc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dbfd0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dbfd4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dbfd8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dbfdc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dbfe0:	429d      	cmp	r5, r3
   dbfe2:	bf08      	it	eq
   dbfe4:	4296      	cmpeq	r6, r2
   dbfe6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dbfea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dbfee:	d202      	bcs.n	dbff6 <__aeabi_ddiv+0x6e>
   dbff0:	085b      	lsrs	r3, r3, #1
   dbff2:	ea4f 0232 	mov.w	r2, r2, rrx
   dbff6:	1ab6      	subs	r6, r6, r2
   dbff8:	eb65 0503 	sbc.w	r5, r5, r3
   dbffc:	085b      	lsrs	r3, r3, #1
   dbffe:	ea4f 0232 	mov.w	r2, r2, rrx
   dc002:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dc006:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dc00a:	ebb6 0e02 	subs.w	lr, r6, r2
   dc00e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc012:	bf22      	ittt	cs
   dc014:	1ab6      	subcs	r6, r6, r2
   dc016:	4675      	movcs	r5, lr
   dc018:	ea40 000c 	orrcs.w	r0, r0, ip
   dc01c:	085b      	lsrs	r3, r3, #1
   dc01e:	ea4f 0232 	mov.w	r2, r2, rrx
   dc022:	ebb6 0e02 	subs.w	lr, r6, r2
   dc026:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc02a:	bf22      	ittt	cs
   dc02c:	1ab6      	subcs	r6, r6, r2
   dc02e:	4675      	movcs	r5, lr
   dc030:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dc034:	085b      	lsrs	r3, r3, #1
   dc036:	ea4f 0232 	mov.w	r2, r2, rrx
   dc03a:	ebb6 0e02 	subs.w	lr, r6, r2
   dc03e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc042:	bf22      	ittt	cs
   dc044:	1ab6      	subcs	r6, r6, r2
   dc046:	4675      	movcs	r5, lr
   dc048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dc04c:	085b      	lsrs	r3, r3, #1
   dc04e:	ea4f 0232 	mov.w	r2, r2, rrx
   dc052:	ebb6 0e02 	subs.w	lr, r6, r2
   dc056:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc05a:	bf22      	ittt	cs
   dc05c:	1ab6      	subcs	r6, r6, r2
   dc05e:	4675      	movcs	r5, lr
   dc060:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dc064:	ea55 0e06 	orrs.w	lr, r5, r6
   dc068:	d018      	beq.n	dc09c <__aeabi_ddiv+0x114>
   dc06a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dc06e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dc072:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dc076:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dc07a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dc07e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dc082:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dc086:	d1c0      	bne.n	dc00a <__aeabi_ddiv+0x82>
   dc088:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc08c:	d10b      	bne.n	dc0a6 <__aeabi_ddiv+0x11e>
   dc08e:	ea41 0100 	orr.w	r1, r1, r0
   dc092:	f04f 0000 	mov.w	r0, #0
   dc096:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dc09a:	e7b6      	b.n	dc00a <__aeabi_ddiv+0x82>
   dc09c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc0a0:	bf04      	itt	eq
   dc0a2:	4301      	orreq	r1, r0
   dc0a4:	2000      	moveq	r0, #0
   dc0a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc0aa:	bf88      	it	hi
   dc0ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc0b0:	f63f aeaf 	bhi.w	dbe12 <__aeabi_dmul+0xde>
   dc0b4:	ebb5 0c03 	subs.w	ip, r5, r3
   dc0b8:	bf04      	itt	eq
   dc0ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   dc0be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc0c2:	f150 0000 	adcs.w	r0, r0, #0
   dc0c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc0ca:	bd70      	pop	{r4, r5, r6, pc}
   dc0cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dc0d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dc0d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dc0d8:	bfc2      	ittt	gt
   dc0da:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc0de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc0e2:	bd70      	popgt	{r4, r5, r6, pc}
   dc0e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc0e8:	f04f 0e00 	mov.w	lr, #0
   dc0ec:	3c01      	subs	r4, #1
   dc0ee:	e690      	b.n	dbe12 <__aeabi_dmul+0xde>
   dc0f0:	ea45 0e06 	orr.w	lr, r5, r6
   dc0f4:	e68d      	b.n	dbe12 <__aeabi_dmul+0xde>
   dc0f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc0fa:	ea94 0f0c 	teq	r4, ip
   dc0fe:	bf08      	it	eq
   dc100:	ea95 0f0c 	teqeq	r5, ip
   dc104:	f43f af3b 	beq.w	dbf7e <__aeabi_dmul+0x24a>
   dc108:	ea94 0f0c 	teq	r4, ip
   dc10c:	d10a      	bne.n	dc124 <__aeabi_ddiv+0x19c>
   dc10e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc112:	f47f af34 	bne.w	dbf7e <__aeabi_dmul+0x24a>
   dc116:	ea95 0f0c 	teq	r5, ip
   dc11a:	f47f af25 	bne.w	dbf68 <__aeabi_dmul+0x234>
   dc11e:	4610      	mov	r0, r2
   dc120:	4619      	mov	r1, r3
   dc122:	e72c      	b.n	dbf7e <__aeabi_dmul+0x24a>
   dc124:	ea95 0f0c 	teq	r5, ip
   dc128:	d106      	bne.n	dc138 <__aeabi_ddiv+0x1b0>
   dc12a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc12e:	f43f aefd 	beq.w	dbf2c <__aeabi_dmul+0x1f8>
   dc132:	4610      	mov	r0, r2
   dc134:	4619      	mov	r1, r3
   dc136:	e722      	b.n	dbf7e <__aeabi_dmul+0x24a>
   dc138:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc13c:	bf18      	it	ne
   dc13e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc142:	f47f aec5 	bne.w	dbed0 <__aeabi_dmul+0x19c>
   dc146:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dc14a:	f47f af0d 	bne.w	dbf68 <__aeabi_dmul+0x234>
   dc14e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dc152:	f47f aeeb 	bne.w	dbf2c <__aeabi_dmul+0x1f8>
   dc156:	e712      	b.n	dbf7e <__aeabi_dmul+0x24a>

000dc158 <__gedf2>:
   dc158:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dc15c:	e006      	b.n	dc16c <__cmpdf2+0x4>
   dc15e:	bf00      	nop

000dc160 <__ledf2>:
   dc160:	f04f 0c01 	mov.w	ip, #1
   dc164:	e002      	b.n	dc16c <__cmpdf2+0x4>
   dc166:	bf00      	nop

000dc168 <__cmpdf2>:
   dc168:	f04f 0c01 	mov.w	ip, #1
   dc16c:	f84d cd04 	str.w	ip, [sp, #-4]!
   dc170:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc174:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc178:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc17c:	bf18      	it	ne
   dc17e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dc182:	d01b      	beq.n	dc1bc <__cmpdf2+0x54>
   dc184:	b001      	add	sp, #4
   dc186:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dc18a:	bf0c      	ite	eq
   dc18c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dc190:	ea91 0f03 	teqne	r1, r3
   dc194:	bf02      	ittt	eq
   dc196:	ea90 0f02 	teqeq	r0, r2
   dc19a:	2000      	moveq	r0, #0
   dc19c:	4770      	bxeq	lr
   dc19e:	f110 0f00 	cmn.w	r0, #0
   dc1a2:	ea91 0f03 	teq	r1, r3
   dc1a6:	bf58      	it	pl
   dc1a8:	4299      	cmppl	r1, r3
   dc1aa:	bf08      	it	eq
   dc1ac:	4290      	cmpeq	r0, r2
   dc1ae:	bf2c      	ite	cs
   dc1b0:	17d8      	asrcs	r0, r3, #31
   dc1b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dc1b6:	f040 0001 	orr.w	r0, r0, #1
   dc1ba:	4770      	bx	lr
   dc1bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc1c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc1c4:	d102      	bne.n	dc1cc <__cmpdf2+0x64>
   dc1c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dc1ca:	d107      	bne.n	dc1dc <__cmpdf2+0x74>
   dc1cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc1d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc1d4:	d1d6      	bne.n	dc184 <__cmpdf2+0x1c>
   dc1d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dc1da:	d0d3      	beq.n	dc184 <__cmpdf2+0x1c>
   dc1dc:	f85d 0b04 	ldr.w	r0, [sp], #4
   dc1e0:	4770      	bx	lr
   dc1e2:	bf00      	nop

000dc1e4 <__aeabi_cdrcmple>:
   dc1e4:	4684      	mov	ip, r0
   dc1e6:	4610      	mov	r0, r2
   dc1e8:	4662      	mov	r2, ip
   dc1ea:	468c      	mov	ip, r1
   dc1ec:	4619      	mov	r1, r3
   dc1ee:	4663      	mov	r3, ip
   dc1f0:	e000      	b.n	dc1f4 <__aeabi_cdcmpeq>
   dc1f2:	bf00      	nop

000dc1f4 <__aeabi_cdcmpeq>:
   dc1f4:	b501      	push	{r0, lr}
   dc1f6:	f7ff ffb7 	bl	dc168 <__cmpdf2>
   dc1fa:	2800      	cmp	r0, #0
   dc1fc:	bf48      	it	mi
   dc1fe:	f110 0f00 	cmnmi.w	r0, #0
   dc202:	bd01      	pop	{r0, pc}

000dc204 <__aeabi_dcmpeq>:
   dc204:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc208:	f7ff fff4 	bl	dc1f4 <__aeabi_cdcmpeq>
   dc20c:	bf0c      	ite	eq
   dc20e:	2001      	moveq	r0, #1
   dc210:	2000      	movne	r0, #0
   dc212:	f85d fb08 	ldr.w	pc, [sp], #8
   dc216:	bf00      	nop

000dc218 <__aeabi_dcmplt>:
   dc218:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc21c:	f7ff ffea 	bl	dc1f4 <__aeabi_cdcmpeq>
   dc220:	bf34      	ite	cc
   dc222:	2001      	movcc	r0, #1
   dc224:	2000      	movcs	r0, #0
   dc226:	f85d fb08 	ldr.w	pc, [sp], #8
   dc22a:	bf00      	nop

000dc22c <__aeabi_dcmple>:
   dc22c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc230:	f7ff ffe0 	bl	dc1f4 <__aeabi_cdcmpeq>
   dc234:	bf94      	ite	ls
   dc236:	2001      	movls	r0, #1
   dc238:	2000      	movhi	r0, #0
   dc23a:	f85d fb08 	ldr.w	pc, [sp], #8
   dc23e:	bf00      	nop

000dc240 <__aeabi_dcmpge>:
   dc240:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc244:	f7ff ffce 	bl	dc1e4 <__aeabi_cdrcmple>
   dc248:	bf94      	ite	ls
   dc24a:	2001      	movls	r0, #1
   dc24c:	2000      	movhi	r0, #0
   dc24e:	f85d fb08 	ldr.w	pc, [sp], #8
   dc252:	bf00      	nop

000dc254 <__aeabi_dcmpgt>:
   dc254:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc258:	f7ff ffc4 	bl	dc1e4 <__aeabi_cdrcmple>
   dc25c:	bf34      	ite	cc
   dc25e:	2001      	movcc	r0, #1
   dc260:	2000      	movcs	r0, #0
   dc262:	f85d fb08 	ldr.w	pc, [sp], #8
   dc266:	bf00      	nop

000dc268 <__aeabi_d2iz>:
   dc268:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc26c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc270:	d215      	bcs.n	dc29e <__aeabi_d2iz+0x36>
   dc272:	d511      	bpl.n	dc298 <__aeabi_d2iz+0x30>
   dc274:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc278:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc27c:	d912      	bls.n	dc2a4 <__aeabi_d2iz+0x3c>
   dc27e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc286:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc28a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc28e:	fa23 f002 	lsr.w	r0, r3, r2
   dc292:	bf18      	it	ne
   dc294:	4240      	negne	r0, r0
   dc296:	4770      	bx	lr
   dc298:	f04f 0000 	mov.w	r0, #0
   dc29c:	4770      	bx	lr
   dc29e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc2a2:	d105      	bne.n	dc2b0 <__aeabi_d2iz+0x48>
   dc2a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dc2a8:	bf08      	it	eq
   dc2aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dc2ae:	4770      	bx	lr
   dc2b0:	f04f 0000 	mov.w	r0, #0
   dc2b4:	4770      	bx	lr
   dc2b6:	bf00      	nop

000dc2b8 <__aeabi_d2uiz>:
   dc2b8:	004a      	lsls	r2, r1, #1
   dc2ba:	d211      	bcs.n	dc2e0 <__aeabi_d2uiz+0x28>
   dc2bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc2c0:	d211      	bcs.n	dc2e6 <__aeabi_d2uiz+0x2e>
   dc2c2:	d50d      	bpl.n	dc2e0 <__aeabi_d2uiz+0x28>
   dc2c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc2c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc2cc:	d40e      	bmi.n	dc2ec <__aeabi_d2uiz+0x34>
   dc2ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc2d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc2d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc2da:	fa23 f002 	lsr.w	r0, r3, r2
   dc2de:	4770      	bx	lr
   dc2e0:	f04f 0000 	mov.w	r0, #0
   dc2e4:	4770      	bx	lr
   dc2e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc2ea:	d102      	bne.n	dc2f2 <__aeabi_d2uiz+0x3a>
   dc2ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc2f0:	4770      	bx	lr
   dc2f2:	f04f 0000 	mov.w	r0, #0
   dc2f6:	4770      	bx	lr

000dc2f8 <__aeabi_d2f>:
   dc2f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc2fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dc300:	bf24      	itt	cs
   dc302:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dc306:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dc30a:	d90d      	bls.n	dc328 <__aeabi_d2f+0x30>
   dc30c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dc310:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dc314:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dc318:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dc31c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dc320:	bf08      	it	eq
   dc322:	f020 0001 	biceq.w	r0, r0, #1
   dc326:	4770      	bx	lr
   dc328:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dc32c:	d121      	bne.n	dc372 <__aeabi_d2f+0x7a>
   dc32e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dc332:	bfbc      	itt	lt
   dc334:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dc338:	4770      	bxlt	lr
   dc33a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc33e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dc342:	f1c2 0218 	rsb	r2, r2, #24
   dc346:	f1c2 0c20 	rsb	ip, r2, #32
   dc34a:	fa10 f30c 	lsls.w	r3, r0, ip
   dc34e:	fa20 f002 	lsr.w	r0, r0, r2
   dc352:	bf18      	it	ne
   dc354:	f040 0001 	orrne.w	r0, r0, #1
   dc358:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc35c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dc360:	fa03 fc0c 	lsl.w	ip, r3, ip
   dc364:	ea40 000c 	orr.w	r0, r0, ip
   dc368:	fa23 f302 	lsr.w	r3, r3, r2
   dc36c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dc370:	e7cc      	b.n	dc30c <__aeabi_d2f+0x14>
   dc372:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dc376:	d107      	bne.n	dc388 <__aeabi_d2f+0x90>
   dc378:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dc37c:	bf1e      	ittt	ne
   dc37e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dc382:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dc386:	4770      	bxne	lr
   dc388:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dc38c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dc390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dc394:	4770      	bx	lr
   dc396:	bf00      	nop

000dc398 <atof>:
   dc398:	2100      	movs	r1, #0
   dc39a:	f001 b841 	b.w	dd420 <strtod>

000dc39e <atoi>:
   dc39e:	220a      	movs	r2, #10
   dc3a0:	2100      	movs	r1, #0
   dc3a2:	f001 b8cb 	b.w	dd53c <strtol>
	...

000dc3a8 <__cxa_atexit>:
   dc3a8:	b510      	push	{r4, lr}
   dc3aa:	4c05      	ldr	r4, [pc, #20]	; (dc3c0 <__cxa_atexit+0x18>)
   dc3ac:	4613      	mov	r3, r2
   dc3ae:	b12c      	cbz	r4, dc3bc <__cxa_atexit+0x14>
   dc3b0:	460a      	mov	r2, r1
   dc3b2:	4601      	mov	r1, r0
   dc3b4:	2002      	movs	r0, #2
   dc3b6:	f3af 8000 	nop.w
   dc3ba:	bd10      	pop	{r4, pc}
   dc3bc:	4620      	mov	r0, r4
   dc3be:	bd10      	pop	{r4, pc}
   dc3c0:	00000000 	.word	0x00000000

000dc3c4 <isspace>:
   dc3c4:	4b03      	ldr	r3, [pc, #12]	; (dc3d4 <isspace+0x10>)
   dc3c6:	681b      	ldr	r3, [r3, #0]
   dc3c8:	4418      	add	r0, r3
   dc3ca:	7840      	ldrb	r0, [r0, #1]
   dc3cc:	f000 0008 	and.w	r0, r0, #8
   dc3d0:	4770      	bx	lr
   dc3d2:	bf00      	nop
   dc3d4:	2003d37c 	.word	0x2003d37c

000dc3d8 <localtime>:
   dc3d8:	b538      	push	{r3, r4, r5, lr}
   dc3da:	4b07      	ldr	r3, [pc, #28]	; (dc3f8 <localtime+0x20>)
   dc3dc:	681c      	ldr	r4, [r3, #0]
   dc3de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dc3e0:	4605      	mov	r5, r0
   dc3e2:	b91b      	cbnz	r3, dc3ec <localtime+0x14>
   dc3e4:	2024      	movs	r0, #36	; 0x24
   dc3e6:	f7fb fe25 	bl	d8034 <malloc>
   dc3ea:	63e0      	str	r0, [r4, #60]	; 0x3c
   dc3ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dc3ee:	4628      	mov	r0, r5
   dc3f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc3f4:	f000 b802 	b.w	dc3fc <localtime_r>
   dc3f8:	2003d3e0 	.word	0x2003d3e0

000dc3fc <localtime_r>:
   dc3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc400:	460c      	mov	r4, r1
   dc402:	4680      	mov	r8, r0
   dc404:	f001 febe 	bl	de184 <__gettzinfo>
   dc408:	4621      	mov	r1, r4
   dc40a:	4607      	mov	r7, r0
   dc40c:	4640      	mov	r0, r8
   dc40e:	f001 febd 	bl	de18c <gmtime_r>
   dc412:	6946      	ldr	r6, [r0, #20]
   dc414:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   dc418:	07b3      	lsls	r3, r6, #30
   dc41a:	4604      	mov	r4, r0
   dc41c:	d105      	bne.n	dc42a <localtime_r+0x2e>
   dc41e:	2264      	movs	r2, #100	; 0x64
   dc420:	fb96 f3f2 	sdiv	r3, r6, r2
   dc424:	fb02 6313 	mls	r3, r2, r3, r6
   dc428:	b94b      	cbnz	r3, dc43e <localtime_r+0x42>
   dc42a:	f44f 75c8 	mov.w	r5, #400	; 0x190
   dc42e:	fb96 f3f5 	sdiv	r3, r6, r5
   dc432:	fb05 6513 	mls	r5, r5, r3, r6
   dc436:	fab5 f385 	clz	r3, r5
   dc43a:	095b      	lsrs	r3, r3, #5
   dc43c:	e000      	b.n	dc440 <localtime_r+0x44>
   dc43e:	2301      	movs	r3, #1
   dc440:	4a5f      	ldr	r2, [pc, #380]	; (dc5c0 <localtime_r+0x1c4>)
   dc442:	2530      	movs	r5, #48	; 0x30
   dc444:	fb05 2503 	mla	r5, r5, r3, r2
   dc448:	f001 f9b2 	bl	dd7b0 <__tz_lock>
   dc44c:	f001 f9b2 	bl	dd7b4 <_tzset_unlocked>
   dc450:	4b5c      	ldr	r3, [pc, #368]	; (dc5c4 <localtime_r+0x1c8>)
   dc452:	681b      	ldr	r3, [r3, #0]
   dc454:	b1f3      	cbz	r3, dc494 <localtime_r+0x98>
   dc456:	687b      	ldr	r3, [r7, #4]
   dc458:	429e      	cmp	r6, r3
   dc45a:	d105      	bne.n	dc468 <localtime_r+0x6c>
   dc45c:	6839      	ldr	r1, [r7, #0]
   dc45e:	f8d8 3000 	ldr.w	r3, [r8]
   dc462:	69fa      	ldr	r2, [r7, #28]
   dc464:	b941      	cbnz	r1, dc478 <localtime_r+0x7c>
   dc466:	e00a      	b.n	dc47e <localtime_r+0x82>
   dc468:	4630      	mov	r0, r6
   dc46a:	f001 f8f9 	bl	dd660 <__tzcalc_limits>
   dc46e:	2800      	cmp	r0, #0
   dc470:	d1f4      	bne.n	dc45c <localtime_r+0x60>
   dc472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dc476:	e00d      	b.n	dc494 <localtime_r+0x98>
   dc478:	4293      	cmp	r3, r2
   dc47a:	db08      	blt.n	dc48e <localtime_r+0x92>
   dc47c:	e001      	b.n	dc482 <localtime_r+0x86>
   dc47e:	4293      	cmp	r3, r2
   dc480:	da07      	bge.n	dc492 <localtime_r+0x96>
   dc482:	6bba      	ldr	r2, [r7, #56]	; 0x38
   dc484:	4293      	cmp	r3, r2
   dc486:	bfac      	ite	ge
   dc488:	2300      	movge	r3, #0
   dc48a:	2301      	movlt	r3, #1
   dc48c:	e002      	b.n	dc494 <localtime_r+0x98>
   dc48e:	2300      	movs	r3, #0
   dc490:	e000      	b.n	dc494 <localtime_r+0x98>
   dc492:	2301      	movs	r3, #1
   dc494:	6223      	str	r3, [r4, #32]
   dc496:	6a23      	ldr	r3, [r4, #32]
   dc498:	2b01      	cmp	r3, #1
   dc49a:	bf0c      	ite	eq
   dc49c:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   dc49e:	6a39      	ldrne	r1, [r7, #32]
   dc4a0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dc4a4:	203c      	movs	r0, #60	; 0x3c
   dc4a6:	fb91 f6f3 	sdiv	r6, r1, r3
   dc4aa:	fb03 1316 	mls	r3, r3, r6, r1
   dc4ae:	6861      	ldr	r1, [r4, #4]
   dc4b0:	fb93 f2f0 	sdiv	r2, r3, r0
   dc4b4:	fb00 3012 	mls	r0, r0, r2, r3
   dc4b8:	6823      	ldr	r3, [r4, #0]
   dc4ba:	1a89      	subs	r1, r1, r2
   dc4bc:	68a2      	ldr	r2, [r4, #8]
   dc4be:	6061      	str	r1, [r4, #4]
   dc4c0:	1a1b      	subs	r3, r3, r0
   dc4c2:	1b92      	subs	r2, r2, r6
   dc4c4:	2b3b      	cmp	r3, #59	; 0x3b
   dc4c6:	6023      	str	r3, [r4, #0]
   dc4c8:	60a2      	str	r2, [r4, #8]
   dc4ca:	dd03      	ble.n	dc4d4 <localtime_r+0xd8>
   dc4cc:	3101      	adds	r1, #1
   dc4ce:	6061      	str	r1, [r4, #4]
   dc4d0:	3b3c      	subs	r3, #60	; 0x3c
   dc4d2:	e004      	b.n	dc4de <localtime_r+0xe2>
   dc4d4:	2b00      	cmp	r3, #0
   dc4d6:	da03      	bge.n	dc4e0 <localtime_r+0xe4>
   dc4d8:	3901      	subs	r1, #1
   dc4da:	6061      	str	r1, [r4, #4]
   dc4dc:	333c      	adds	r3, #60	; 0x3c
   dc4de:	6023      	str	r3, [r4, #0]
   dc4e0:	6863      	ldr	r3, [r4, #4]
   dc4e2:	2b3b      	cmp	r3, #59	; 0x3b
   dc4e4:	dd03      	ble.n	dc4ee <localtime_r+0xf2>
   dc4e6:	3201      	adds	r2, #1
   dc4e8:	60a2      	str	r2, [r4, #8]
   dc4ea:	3b3c      	subs	r3, #60	; 0x3c
   dc4ec:	e004      	b.n	dc4f8 <localtime_r+0xfc>
   dc4ee:	2b00      	cmp	r3, #0
   dc4f0:	da03      	bge.n	dc4fa <localtime_r+0xfe>
   dc4f2:	3a01      	subs	r2, #1
   dc4f4:	60a2      	str	r2, [r4, #8]
   dc4f6:	333c      	adds	r3, #60	; 0x3c
   dc4f8:	6063      	str	r3, [r4, #4]
   dc4fa:	68a3      	ldr	r3, [r4, #8]
   dc4fc:	2b17      	cmp	r3, #23
   dc4fe:	dd22      	ble.n	dc546 <localtime_r+0x14a>
   dc500:	69e2      	ldr	r2, [r4, #28]
   dc502:	3201      	adds	r2, #1
   dc504:	61e2      	str	r2, [r4, #28]
   dc506:	69a2      	ldr	r2, [r4, #24]
   dc508:	3201      	adds	r2, #1
   dc50a:	2a06      	cmp	r2, #6
   dc50c:	bfc8      	it	gt
   dc50e:	2200      	movgt	r2, #0
   dc510:	61a2      	str	r2, [r4, #24]
   dc512:	68e2      	ldr	r2, [r4, #12]
   dc514:	3b18      	subs	r3, #24
   dc516:	3201      	adds	r2, #1
   dc518:	60a3      	str	r3, [r4, #8]
   dc51a:	6923      	ldr	r3, [r4, #16]
   dc51c:	60e2      	str	r2, [r4, #12]
   dc51e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   dc522:	428a      	cmp	r2, r1
   dc524:	dd46      	ble.n	dc5b4 <localtime_r+0x1b8>
   dc526:	3301      	adds	r3, #1
   dc528:	2b0c      	cmp	r3, #12
   dc52a:	bf0c      	ite	eq
   dc52c:	6963      	ldreq	r3, [r4, #20]
   dc52e:	6123      	strne	r3, [r4, #16]
   dc530:	eba2 0201 	sub.w	r2, r2, r1
   dc534:	60e2      	str	r2, [r4, #12]
   dc536:	bf01      	itttt	eq
   dc538:	3301      	addeq	r3, #1
   dc53a:	2200      	moveq	r2, #0
   dc53c:	6122      	streq	r2, [r4, #16]
   dc53e:	6163      	streq	r3, [r4, #20]
   dc540:	bf08      	it	eq
   dc542:	61e2      	streq	r2, [r4, #28]
   dc544:	e036      	b.n	dc5b4 <localtime_r+0x1b8>
   dc546:	2b00      	cmp	r3, #0
   dc548:	da34      	bge.n	dc5b4 <localtime_r+0x1b8>
   dc54a:	69e2      	ldr	r2, [r4, #28]
   dc54c:	3a01      	subs	r2, #1
   dc54e:	61e2      	str	r2, [r4, #28]
   dc550:	69a2      	ldr	r2, [r4, #24]
   dc552:	3a01      	subs	r2, #1
   dc554:	bf48      	it	mi
   dc556:	2206      	movmi	r2, #6
   dc558:	61a2      	str	r2, [r4, #24]
   dc55a:	68e2      	ldr	r2, [r4, #12]
   dc55c:	3318      	adds	r3, #24
   dc55e:	3a01      	subs	r2, #1
   dc560:	60e2      	str	r2, [r4, #12]
   dc562:	60a3      	str	r3, [r4, #8]
   dc564:	bb32      	cbnz	r2, dc5b4 <localtime_r+0x1b8>
   dc566:	6923      	ldr	r3, [r4, #16]
   dc568:	3b01      	subs	r3, #1
   dc56a:	d401      	bmi.n	dc570 <localtime_r+0x174>
   dc56c:	6123      	str	r3, [r4, #16]
   dc56e:	e01d      	b.n	dc5ac <localtime_r+0x1b0>
   dc570:	230b      	movs	r3, #11
   dc572:	6123      	str	r3, [r4, #16]
   dc574:	6963      	ldr	r3, [r4, #20]
   dc576:	1e5a      	subs	r2, r3, #1
   dc578:	f012 0f03 	tst.w	r2, #3
   dc57c:	6162      	str	r2, [r4, #20]
   dc57e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   dc582:	d105      	bne.n	dc590 <localtime_r+0x194>
   dc584:	2164      	movs	r1, #100	; 0x64
   dc586:	fb93 f2f1 	sdiv	r2, r3, r1
   dc58a:	fb01 3212 	mls	r2, r1, r2, r3
   dc58e:	b94a      	cbnz	r2, dc5a4 <localtime_r+0x1a8>
   dc590:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dc594:	fb93 f2f1 	sdiv	r2, r3, r1
   dc598:	fb01 3312 	mls	r3, r1, r2, r3
   dc59c:	fab3 f383 	clz	r3, r3
   dc5a0:	095b      	lsrs	r3, r3, #5
   dc5a2:	e000      	b.n	dc5a6 <localtime_r+0x1aa>
   dc5a4:	2301      	movs	r3, #1
   dc5a6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   dc5aa:	61e3      	str	r3, [r4, #28]
   dc5ac:	6923      	ldr	r3, [r4, #16]
   dc5ae:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   dc5b2:	60e3      	str	r3, [r4, #12]
   dc5b4:	f001 f8fd 	bl	dd7b2 <__tz_unlock>
   dc5b8:	4620      	mov	r0, r4
   dc5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc5be:	bf00      	nop
   dc5c0:	000df628 	.word	0x000df628
   dc5c4:	2003e7e4 	.word	0x2003e7e4

000dc5c8 <_localeconv_r>:
   dc5c8:	4800      	ldr	r0, [pc, #0]	; (dc5cc <_localeconv_r+0x4>)
   dc5ca:	4770      	bx	lr
   dc5cc:	2003d3e4 	.word	0x2003d3e4

000dc5d0 <memcmp>:
   dc5d0:	b510      	push	{r4, lr}
   dc5d2:	3901      	subs	r1, #1
   dc5d4:	4402      	add	r2, r0
   dc5d6:	4290      	cmp	r0, r2
   dc5d8:	d007      	beq.n	dc5ea <memcmp+0x1a>
   dc5da:	f810 3b01 	ldrb.w	r3, [r0], #1
   dc5de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc5e2:	42a3      	cmp	r3, r4
   dc5e4:	d0f7      	beq.n	dc5d6 <memcmp+0x6>
   dc5e6:	1b18      	subs	r0, r3, r4
   dc5e8:	bd10      	pop	{r4, pc}
   dc5ea:	2000      	movs	r0, #0
   dc5ec:	bd10      	pop	{r4, pc}

000dc5ee <memcpy>:
   dc5ee:	b510      	push	{r4, lr}
   dc5f0:	1e43      	subs	r3, r0, #1
   dc5f2:	440a      	add	r2, r1
   dc5f4:	4291      	cmp	r1, r2
   dc5f6:	d004      	beq.n	dc602 <memcpy+0x14>
   dc5f8:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc5fc:	f803 4f01 	strb.w	r4, [r3, #1]!
   dc600:	e7f8      	b.n	dc5f4 <memcpy+0x6>
   dc602:	bd10      	pop	{r4, pc}

000dc604 <memmove>:
   dc604:	4288      	cmp	r0, r1
   dc606:	b510      	push	{r4, lr}
   dc608:	eb01 0302 	add.w	r3, r1, r2
   dc60c:	d801      	bhi.n	dc612 <memmove+0xe>
   dc60e:	1e42      	subs	r2, r0, #1
   dc610:	e00b      	b.n	dc62a <memmove+0x26>
   dc612:	4298      	cmp	r0, r3
   dc614:	d2fb      	bcs.n	dc60e <memmove+0xa>
   dc616:	1881      	adds	r1, r0, r2
   dc618:	1ad2      	subs	r2, r2, r3
   dc61a:	42d3      	cmn	r3, r2
   dc61c:	d004      	beq.n	dc628 <memmove+0x24>
   dc61e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dc622:	f801 4d01 	strb.w	r4, [r1, #-1]!
   dc626:	e7f8      	b.n	dc61a <memmove+0x16>
   dc628:	bd10      	pop	{r4, pc}
   dc62a:	4299      	cmp	r1, r3
   dc62c:	d004      	beq.n	dc638 <memmove+0x34>
   dc62e:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc632:	f802 4f01 	strb.w	r4, [r2, #1]!
   dc636:	e7f8      	b.n	dc62a <memmove+0x26>
   dc638:	bd10      	pop	{r4, pc}

000dc63a <memset>:
   dc63a:	4402      	add	r2, r0
   dc63c:	4603      	mov	r3, r0
   dc63e:	4293      	cmp	r3, r2
   dc640:	d002      	beq.n	dc648 <memset+0xe>
   dc642:	f803 1b01 	strb.w	r1, [r3], #1
   dc646:	e7fa      	b.n	dc63e <memset+0x4>
   dc648:	4770      	bx	lr
	...

000dc64c <srand>:
   dc64c:	b538      	push	{r3, r4, r5, lr}
   dc64e:	4b12      	ldr	r3, [pc, #72]	; (dc698 <srand+0x4c>)
   dc650:	681c      	ldr	r4, [r3, #0]
   dc652:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dc654:	4605      	mov	r5, r0
   dc656:	b9d3      	cbnz	r3, dc68e <srand+0x42>
   dc658:	2018      	movs	r0, #24
   dc65a:	f7fb fceb 	bl	d8034 <malloc>
   dc65e:	f243 330e 	movw	r3, #13070	; 0x330e
   dc662:	63a0      	str	r0, [r4, #56]	; 0x38
   dc664:	8003      	strh	r3, [r0, #0]
   dc666:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dc66a:	8043      	strh	r3, [r0, #2]
   dc66c:	f241 2334 	movw	r3, #4660	; 0x1234
   dc670:	8083      	strh	r3, [r0, #4]
   dc672:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dc676:	80c3      	strh	r3, [r0, #6]
   dc678:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dc67c:	8103      	strh	r3, [r0, #8]
   dc67e:	2305      	movs	r3, #5
   dc680:	8143      	strh	r3, [r0, #10]
   dc682:	230b      	movs	r3, #11
   dc684:	8183      	strh	r3, [r0, #12]
   dc686:	2201      	movs	r2, #1
   dc688:	2300      	movs	r3, #0
   dc68a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dc68e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dc690:	2200      	movs	r2, #0
   dc692:	611d      	str	r5, [r3, #16]
   dc694:	615a      	str	r2, [r3, #20]
   dc696:	bd38      	pop	{r3, r4, r5, pc}
   dc698:	2003d3e0 	.word	0x2003d3e0

000dc69c <strcat>:
   dc69c:	b510      	push	{r4, lr}
   dc69e:	4602      	mov	r2, r0
   dc6a0:	4613      	mov	r3, r2
   dc6a2:	3201      	adds	r2, #1
   dc6a4:	781c      	ldrb	r4, [r3, #0]
   dc6a6:	2c00      	cmp	r4, #0
   dc6a8:	d1fa      	bne.n	dc6a0 <strcat+0x4>
   dc6aa:	3b01      	subs	r3, #1
   dc6ac:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc6b0:	f803 2f01 	strb.w	r2, [r3, #1]!
   dc6b4:	2a00      	cmp	r2, #0
   dc6b6:	d1f9      	bne.n	dc6ac <strcat+0x10>
   dc6b8:	bd10      	pop	{r4, pc}

000dc6ba <strchr>:
   dc6ba:	b2c9      	uxtb	r1, r1
   dc6bc:	4603      	mov	r3, r0
   dc6be:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc6c2:	b11a      	cbz	r2, dc6cc <strchr+0x12>
   dc6c4:	4291      	cmp	r1, r2
   dc6c6:	d1f9      	bne.n	dc6bc <strchr+0x2>
   dc6c8:	4618      	mov	r0, r3
   dc6ca:	4770      	bx	lr
   dc6cc:	2900      	cmp	r1, #0
   dc6ce:	bf0c      	ite	eq
   dc6d0:	4618      	moveq	r0, r3
   dc6d2:	2000      	movne	r0, #0
   dc6d4:	4770      	bx	lr

000dc6d6 <strchrnul>:
   dc6d6:	b510      	push	{r4, lr}
   dc6d8:	4604      	mov	r4, r0
   dc6da:	f7ff ffee 	bl	dc6ba <strchr>
   dc6de:	b918      	cbnz	r0, dc6e8 <strchrnul+0x12>
   dc6e0:	4620      	mov	r0, r4
   dc6e2:	f000 f814 	bl	dc70e <strlen>
   dc6e6:	4420      	add	r0, r4
   dc6e8:	bd10      	pop	{r4, pc}

000dc6ea <strcmp>:
   dc6ea:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc6ee:	f811 3b01 	ldrb.w	r3, [r1], #1
   dc6f2:	2a01      	cmp	r2, #1
   dc6f4:	bf28      	it	cs
   dc6f6:	429a      	cmpcs	r2, r3
   dc6f8:	d0f7      	beq.n	dc6ea <strcmp>
   dc6fa:	1ad0      	subs	r0, r2, r3
   dc6fc:	4770      	bx	lr

000dc6fe <strcpy>:
   dc6fe:	4603      	mov	r3, r0
   dc700:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc704:	f803 2b01 	strb.w	r2, [r3], #1
   dc708:	2a00      	cmp	r2, #0
   dc70a:	d1f9      	bne.n	dc700 <strcpy+0x2>
   dc70c:	4770      	bx	lr

000dc70e <strlen>:
   dc70e:	4603      	mov	r3, r0
   dc710:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc714:	2a00      	cmp	r2, #0
   dc716:	d1fb      	bne.n	dc710 <strlen+0x2>
   dc718:	1a18      	subs	r0, r3, r0
   dc71a:	3801      	subs	r0, #1
   dc71c:	4770      	bx	lr
	...

000dc720 <strlwr>:
   dc720:	b510      	push	{r4, lr}
   dc722:	4c08      	ldr	r4, [pc, #32]	; (dc744 <strlwr+0x24>)
   dc724:	4602      	mov	r2, r0
   dc726:	7813      	ldrb	r3, [r2, #0]
   dc728:	b153      	cbz	r3, dc740 <strlwr+0x20>
   dc72a:	6821      	ldr	r1, [r4, #0]
   dc72c:	4419      	add	r1, r3
   dc72e:	7849      	ldrb	r1, [r1, #1]
   dc730:	f001 0103 	and.w	r1, r1, #3
   dc734:	2901      	cmp	r1, #1
   dc736:	bf08      	it	eq
   dc738:	3320      	addeq	r3, #32
   dc73a:	f802 3b01 	strb.w	r3, [r2], #1
   dc73e:	e7f2      	b.n	dc726 <strlwr+0x6>
   dc740:	bd10      	pop	{r4, pc}
   dc742:	bf00      	nop
   dc744:	2003d37c 	.word	0x2003d37c

000dc748 <strncmp>:
   dc748:	b530      	push	{r4, r5, lr}
   dc74a:	b182      	cbz	r2, dc76e <strncmp+0x26>
   dc74c:	1e45      	subs	r5, r0, #1
   dc74e:	3901      	subs	r1, #1
   dc750:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dc754:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc758:	42a3      	cmp	r3, r4
   dc75a:	d106      	bne.n	dc76a <strncmp+0x22>
   dc75c:	43ec      	mvns	r4, r5
   dc75e:	4414      	add	r4, r2
   dc760:	42e0      	cmn	r0, r4
   dc762:	d001      	beq.n	dc768 <strncmp+0x20>
   dc764:	2b00      	cmp	r3, #0
   dc766:	d1f3      	bne.n	dc750 <strncmp+0x8>
   dc768:	461c      	mov	r4, r3
   dc76a:	1b18      	subs	r0, r3, r4
   dc76c:	bd30      	pop	{r4, r5, pc}
   dc76e:	4610      	mov	r0, r2
   dc770:	bd30      	pop	{r4, r5, pc}

000dc772 <strnlen>:
   dc772:	b510      	push	{r4, lr}
   dc774:	4603      	mov	r3, r0
   dc776:	4401      	add	r1, r0
   dc778:	428b      	cmp	r3, r1
   dc77a:	d004      	beq.n	dc786 <strnlen+0x14>
   dc77c:	781a      	ldrb	r2, [r3, #0]
   dc77e:	1c5c      	adds	r4, r3, #1
   dc780:	b10a      	cbz	r2, dc786 <strnlen+0x14>
   dc782:	4623      	mov	r3, r4
   dc784:	e7f8      	b.n	dc778 <strnlen+0x6>
   dc786:	1a18      	subs	r0, r3, r0
   dc788:	bd10      	pop	{r4, pc}

000dc78a <strrchr>:
   dc78a:	b538      	push	{r3, r4, r5, lr}
   dc78c:	4603      	mov	r3, r0
   dc78e:	460d      	mov	r5, r1
   dc790:	b141      	cbz	r1, dc7a4 <strrchr+0x1a>
   dc792:	2400      	movs	r4, #0
   dc794:	4629      	mov	r1, r5
   dc796:	4618      	mov	r0, r3
   dc798:	f7ff ff8f 	bl	dc6ba <strchr>
   dc79c:	b130      	cbz	r0, dc7ac <strrchr+0x22>
   dc79e:	1c43      	adds	r3, r0, #1
   dc7a0:	4604      	mov	r4, r0
   dc7a2:	e7f7      	b.n	dc794 <strrchr+0xa>
   dc7a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc7a8:	f7ff bf87 	b.w	dc6ba <strchr>
   dc7ac:	4620      	mov	r0, r4
   dc7ae:	bd38      	pop	{r3, r4, r5, pc}

000dc7b0 <strstr>:
   dc7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc7b2:	7803      	ldrb	r3, [r0, #0]
   dc7b4:	b963      	cbnz	r3, dc7d0 <strstr+0x20>
   dc7b6:	780b      	ldrb	r3, [r1, #0]
   dc7b8:	2b00      	cmp	r3, #0
   dc7ba:	bf18      	it	ne
   dc7bc:	2000      	movne	r0, #0
   dc7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc7c0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   dc7c4:	b162      	cbz	r2, dc7e0 <strstr+0x30>
   dc7c6:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   dc7ca:	4297      	cmp	r7, r2
   dc7cc:	4630      	mov	r0, r6
   dc7ce:	d0f7      	beq.n	dc7c0 <strstr+0x10>
   dc7d0:	4603      	mov	r3, r0
   dc7d2:	1c46      	adds	r6, r0, #1
   dc7d4:	7800      	ldrb	r0, [r0, #0]
   dc7d6:	b110      	cbz	r0, dc7de <strstr+0x2e>
   dc7d8:	1e4d      	subs	r5, r1, #1
   dc7da:	1e5c      	subs	r4, r3, #1
   dc7dc:	e7f0      	b.n	dc7c0 <strstr+0x10>
   dc7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc7e0:	4618      	mov	r0, r3
   dc7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dc7e4 <sulp>:
   dc7e4:	b570      	push	{r4, r5, r6, lr}
   dc7e6:	4604      	mov	r4, r0
   dc7e8:	460d      	mov	r5, r1
   dc7ea:	ec45 4b10 	vmov	d0, r4, r5
   dc7ee:	4616      	mov	r6, r2
   dc7f0:	f002 f82a 	bl	de848 <__ulp>
   dc7f4:	ec51 0b10 	vmov	r0, r1, d0
   dc7f8:	b17e      	cbz	r6, dc81a <sulp+0x36>
   dc7fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dc7fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dc802:	2b00      	cmp	r3, #0
   dc804:	dd09      	ble.n	dc81a <sulp+0x36>
   dc806:	051b      	lsls	r3, r3, #20
   dc808:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dc80c:	2400      	movs	r4, #0
   dc80e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dc812:	4622      	mov	r2, r4
   dc814:	462b      	mov	r3, r5
   dc816:	f7ff fa8d 	bl	dbd34 <__aeabi_dmul>
   dc81a:	bd70      	pop	{r4, r5, r6, pc}
   dc81c:	0000      	movs	r0, r0
	...

000dc820 <_strtod_r>:
   dc820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc824:	b09d      	sub	sp, #116	; 0x74
   dc826:	2300      	movs	r3, #0
   dc828:	9002      	str	r0, [sp, #8]
   dc82a:	460c      	mov	r4, r1
   dc82c:	9213      	str	r2, [sp, #76]	; 0x4c
   dc82e:	9318      	str	r3, [sp, #96]	; 0x60
   dc830:	f04f 0a00 	mov.w	sl, #0
   dc834:	f04f 0b00 	mov.w	fp, #0
   dc838:	9117      	str	r1, [sp, #92]	; 0x5c
   dc83a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dc83c:	781a      	ldrb	r2, [r3, #0]
   dc83e:	2a0d      	cmp	r2, #13
   dc840:	d805      	bhi.n	dc84e <_strtod_r+0x2e>
   dc842:	2a09      	cmp	r2, #9
   dc844:	d213      	bcs.n	dc86e <_strtod_r+0x4e>
   dc846:	2a00      	cmp	r2, #0
   dc848:	f000 81ac 	beq.w	dcba4 <_strtod_r+0x384>
   dc84c:	e012      	b.n	dc874 <_strtod_r+0x54>
   dc84e:	2a2b      	cmp	r2, #43	; 0x2b
   dc850:	d004      	beq.n	dc85c <_strtod_r+0x3c>
   dc852:	2a2d      	cmp	r2, #45	; 0x2d
   dc854:	d004      	beq.n	dc860 <_strtod_r+0x40>
   dc856:	2a20      	cmp	r2, #32
   dc858:	d10c      	bne.n	dc874 <_strtod_r+0x54>
   dc85a:	e008      	b.n	dc86e <_strtod_r+0x4e>
   dc85c:	2200      	movs	r2, #0
   dc85e:	e000      	b.n	dc862 <_strtod_r+0x42>
   dc860:	2201      	movs	r2, #1
   dc862:	920c      	str	r2, [sp, #48]	; 0x30
   dc864:	1c5a      	adds	r2, r3, #1
   dc866:	9217      	str	r2, [sp, #92]	; 0x5c
   dc868:	785b      	ldrb	r3, [r3, #1]
   dc86a:	b92b      	cbnz	r3, dc878 <_strtod_r+0x58>
   dc86c:	e19a      	b.n	dcba4 <_strtod_r+0x384>
   dc86e:	3301      	adds	r3, #1
   dc870:	9317      	str	r3, [sp, #92]	; 0x5c
   dc872:	e7e2      	b.n	dc83a <_strtod_r+0x1a>
   dc874:	2300      	movs	r3, #0
   dc876:	930c      	str	r3, [sp, #48]	; 0x30
   dc878:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   dc87a:	782b      	ldrb	r3, [r5, #0]
   dc87c:	2b30      	cmp	r3, #48	; 0x30
   dc87e:	d15c      	bne.n	dc93a <_strtod_r+0x11a>
   dc880:	786b      	ldrb	r3, [r5, #1]
   dc882:	2b58      	cmp	r3, #88	; 0x58
   dc884:	d001      	beq.n	dc88a <_strtod_r+0x6a>
   dc886:	2b78      	cmp	r3, #120	; 0x78
   dc888:	d14c      	bne.n	dc924 <_strtod_r+0x104>
   dc88a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dc88c:	9301      	str	r3, [sp, #4]
   dc88e:	ab18      	add	r3, sp, #96	; 0x60
   dc890:	9300      	str	r3, [sp, #0]
   dc892:	4aa9      	ldr	r2, [pc, #676]	; (dcb38 <_strtod_r+0x318>)
   dc894:	9802      	ldr	r0, [sp, #8]
   dc896:	ab19      	add	r3, sp, #100	; 0x64
   dc898:	a917      	add	r1, sp, #92	; 0x5c
   dc89a:	f001 f95c 	bl	ddb56 <__gethex>
   dc89e:	f010 0607 	ands.w	r6, r0, #7
   dc8a2:	4604      	mov	r4, r0
   dc8a4:	f000 8587 	beq.w	dd3b6 <_strtod_r+0xb96>
   dc8a8:	2e06      	cmp	r6, #6
   dc8aa:	d105      	bne.n	dc8b8 <_strtod_r+0x98>
   dc8ac:	3501      	adds	r5, #1
   dc8ae:	2300      	movs	r3, #0
   dc8b0:	9517      	str	r5, [sp, #92]	; 0x5c
   dc8b2:	930c      	str	r3, [sp, #48]	; 0x30
   dc8b4:	f000 bd7f 	b.w	dd3b6 <_strtod_r+0xb96>
   dc8b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dc8ba:	b13a      	cbz	r2, dc8cc <_strtod_r+0xac>
   dc8bc:	2135      	movs	r1, #53	; 0x35
   dc8be:	a81a      	add	r0, sp, #104	; 0x68
   dc8c0:	f002 f8af 	bl	dea22 <__copybits>
   dc8c4:	9918      	ldr	r1, [sp, #96]	; 0x60
   dc8c6:	9802      	ldr	r0, [sp, #8]
   dc8c8:	f001 fd2d 	bl	de326 <_Bfree>
   dc8cc:	2e06      	cmp	r6, #6
   dc8ce:	d822      	bhi.n	dc916 <_strtod_r+0xf6>
   dc8d0:	e8df f006 	tbb	[pc, r6]
   dc8d4:	18080d04 	.word	0x18080d04
   dc8d8:	0d1d      	.short	0x0d1d
   dc8da:	04          	.byte	0x04
   dc8db:	00          	.byte	0x00
   dc8dc:	f04f 0b00 	mov.w	fp, #0
   dc8e0:	46da      	mov	sl, fp
   dc8e2:	e018      	b.n	dc916 <_strtod_r+0xf6>
   dc8e4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dc8e8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   dc8ec:	e013      	b.n	dc916 <_strtod_r+0xf6>
   dc8ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   dc8f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dc8f2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dc8f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dc8fa:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dc8fe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dc902:	e008      	b.n	dc916 <_strtod_r+0xf6>
   dc904:	f8df b234 	ldr.w	fp, [pc, #564]	; dcb3c <_strtod_r+0x31c>
   dc908:	f04f 0a00 	mov.w	sl, #0
   dc90c:	e003      	b.n	dc916 <_strtod_r+0xf6>
   dc90e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dc912:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dc916:	0721      	lsls	r1, r4, #28
   dc918:	f140 854d 	bpl.w	dd3b6 <_strtod_r+0xb96>
   dc91c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dc920:	f000 bd49 	b.w	dd3b6 <_strtod_r+0xb96>
   dc924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dc926:	1c5a      	adds	r2, r3, #1
   dc928:	9217      	str	r2, [sp, #92]	; 0x5c
   dc92a:	785b      	ldrb	r3, [r3, #1]
   dc92c:	2b30      	cmp	r3, #48	; 0x30
   dc92e:	d0f9      	beq.n	dc924 <_strtod_r+0x104>
   dc930:	2b00      	cmp	r3, #0
   dc932:	f000 8540 	beq.w	dd3b6 <_strtod_r+0xb96>
   dc936:	2301      	movs	r3, #1
   dc938:	e000      	b.n	dc93c <_strtod_r+0x11c>
   dc93a:	2300      	movs	r3, #0
   dc93c:	f04f 0800 	mov.w	r8, #0
   dc940:	9306      	str	r3, [sp, #24]
   dc942:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dc944:	9307      	str	r3, [sp, #28]
   dc946:	f8cd 8014 	str.w	r8, [sp, #20]
   dc94a:	f8cd 8010 	str.w	r8, [sp, #16]
   dc94e:	220a      	movs	r2, #10
   dc950:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   dc952:	782e      	ldrb	r6, [r5, #0]
   dc954:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dc958:	b2d9      	uxtb	r1, r3
   dc95a:	2909      	cmp	r1, #9
   dc95c:	d80e      	bhi.n	dc97c <_strtod_r+0x15c>
   dc95e:	9904      	ldr	r1, [sp, #16]
   dc960:	2908      	cmp	r1, #8
   dc962:	bfdd      	ittte	le
   dc964:	9905      	ldrle	r1, [sp, #20]
   dc966:	fb02 3301 	mlale	r3, r2, r1, r3
   dc96a:	9305      	strle	r3, [sp, #20]
   dc96c:	fb02 3808 	mlagt	r8, r2, r8, r3
   dc970:	9b04      	ldr	r3, [sp, #16]
   dc972:	3501      	adds	r5, #1
   dc974:	3301      	adds	r3, #1
   dc976:	9304      	str	r3, [sp, #16]
   dc978:	9517      	str	r5, [sp, #92]	; 0x5c
   dc97a:	e7e9      	b.n	dc950 <_strtod_r+0x130>
   dc97c:	9802      	ldr	r0, [sp, #8]
   dc97e:	f7ff fe23 	bl	dc5c8 <_localeconv_r>
   dc982:	6807      	ldr	r7, [r0, #0]
   dc984:	9802      	ldr	r0, [sp, #8]
   dc986:	f7ff fe1f 	bl	dc5c8 <_localeconv_r>
   dc98a:	6800      	ldr	r0, [r0, #0]
   dc98c:	f7ff febf 	bl	dc70e <strlen>
   dc990:	4639      	mov	r1, r7
   dc992:	4602      	mov	r2, r0
   dc994:	4628      	mov	r0, r5
   dc996:	f7ff fed7 	bl	dc748 <strncmp>
   dc99a:	4607      	mov	r7, r0
   dc99c:	b128      	cbz	r0, dc9aa <_strtod_r+0x18a>
   dc99e:	2000      	movs	r0, #0
   dc9a0:	4633      	mov	r3, r6
   dc9a2:	9d04      	ldr	r5, [sp, #16]
   dc9a4:	4602      	mov	r2, r0
   dc9a6:	4601      	mov	r1, r0
   dc9a8:	e057      	b.n	dca5a <_strtod_r+0x23a>
   dc9aa:	9802      	ldr	r0, [sp, #8]
   dc9ac:	f7ff fe0c 	bl	dc5c8 <_localeconv_r>
   dc9b0:	6800      	ldr	r0, [r0, #0]
   dc9b2:	f7ff feac 	bl	dc70e <strlen>
   dc9b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dc9b8:	181a      	adds	r2, r3, r0
   dc9ba:	9217      	str	r2, [sp, #92]	; 0x5c
   dc9bc:	9a04      	ldr	r2, [sp, #16]
   dc9be:	5c1b      	ldrb	r3, [r3, r0]
   dc9c0:	2a00      	cmp	r2, #0
   dc9c2:	d142      	bne.n	dca4a <_strtod_r+0x22a>
   dc9c4:	4610      	mov	r0, r2
   dc9c6:	2b30      	cmp	r3, #48	; 0x30
   dc9c8:	d105      	bne.n	dc9d6 <_strtod_r+0x1b6>
   dc9ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dc9cc:	1c5a      	adds	r2, r3, #1
   dc9ce:	9217      	str	r2, [sp, #92]	; 0x5c
   dc9d0:	3001      	adds	r0, #1
   dc9d2:	785b      	ldrb	r3, [r3, #1]
   dc9d4:	e7f7      	b.n	dc9c6 <_strtod_r+0x1a6>
   dc9d6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dc9da:	2a08      	cmp	r2, #8
   dc9dc:	d843      	bhi.n	dca66 <_strtod_r+0x246>
   dc9de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   dc9e0:	9207      	str	r2, [sp, #28]
   dc9e2:	4602      	mov	r2, r0
   dc9e4:	2000      	movs	r0, #0
   dc9e6:	4605      	mov	r5, r0
   dc9e8:	3b30      	subs	r3, #48	; 0x30
   dc9ea:	f100 0101 	add.w	r1, r0, #1
   dc9ee:	d026      	beq.n	dca3e <_strtod_r+0x21e>
   dc9f0:	440a      	add	r2, r1
   dc9f2:	eb05 0c00 	add.w	ip, r5, r0
   dc9f6:	4629      	mov	r1, r5
   dc9f8:	260a      	movs	r6, #10
   dc9fa:	4561      	cmp	r1, ip
   dc9fc:	d00e      	beq.n	dca1c <_strtod_r+0x1fc>
   dc9fe:	3101      	adds	r1, #1
   dca00:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   dca04:	f1be 0f08 	cmp.w	lr, #8
   dca08:	dc03      	bgt.n	dca12 <_strtod_r+0x1f2>
   dca0a:	9f05      	ldr	r7, [sp, #20]
   dca0c:	4377      	muls	r7, r6
   dca0e:	9705      	str	r7, [sp, #20]
   dca10:	e7f3      	b.n	dc9fa <_strtod_r+0x1da>
   dca12:	2910      	cmp	r1, #16
   dca14:	bfd8      	it	le
   dca16:	fb06 f808 	mulle.w	r8, r6, r8
   dca1a:	e7ee      	b.n	dc9fa <_strtod_r+0x1da>
   dca1c:	4428      	add	r0, r5
   dca1e:	2808      	cmp	r0, #8
   dca20:	f100 0501 	add.w	r5, r0, #1
   dca24:	dc05      	bgt.n	dca32 <_strtod_r+0x212>
   dca26:	9805      	ldr	r0, [sp, #20]
   dca28:	210a      	movs	r1, #10
   dca2a:	fb01 3300 	mla	r3, r1, r0, r3
   dca2e:	9305      	str	r3, [sp, #20]
   dca30:	e004      	b.n	dca3c <_strtod_r+0x21c>
   dca32:	2d10      	cmp	r5, #16
   dca34:	bfdc      	itt	le
   dca36:	210a      	movle	r1, #10
   dca38:	fb01 3808 	mlale	r8, r1, r8, r3
   dca3c:	2100      	movs	r1, #0
   dca3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dca40:	1c58      	adds	r0, r3, #1
   dca42:	9017      	str	r0, [sp, #92]	; 0x5c
   dca44:	785b      	ldrb	r3, [r3, #1]
   dca46:	4608      	mov	r0, r1
   dca48:	e002      	b.n	dca50 <_strtod_r+0x230>
   dca4a:	9d04      	ldr	r5, [sp, #16]
   dca4c:	4638      	mov	r0, r7
   dca4e:	463a      	mov	r2, r7
   dca50:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dca54:	2909      	cmp	r1, #9
   dca56:	d9c7      	bls.n	dc9e8 <_strtod_r+0x1c8>
   dca58:	2101      	movs	r1, #1
   dca5a:	2b65      	cmp	r3, #101	; 0x65
   dca5c:	d001      	beq.n	dca62 <_strtod_r+0x242>
   dca5e:	2b45      	cmp	r3, #69	; 0x45
   dca60:	d151      	bne.n	dcb06 <_strtod_r+0x2e6>
   dca62:	b96d      	cbnz	r5, dca80 <_strtod_r+0x260>
   dca64:	e004      	b.n	dca70 <_strtod_r+0x250>
   dca66:	2b65      	cmp	r3, #101	; 0x65
   dca68:	f040 84b3 	bne.w	dd3d2 <_strtod_r+0xbb2>
   dca6c:	2200      	movs	r2, #0
   dca6e:	2101      	movs	r1, #1
   dca70:	b928      	cbnz	r0, dca7e <_strtod_r+0x25e>
   dca72:	9b06      	ldr	r3, [sp, #24]
   dca74:	2b00      	cmp	r3, #0
   dca76:	f000 8095 	beq.w	dcba4 <_strtod_r+0x384>
   dca7a:	4605      	mov	r5, r0
   dca7c:	e000      	b.n	dca80 <_strtod_r+0x260>
   dca7e:	2500      	movs	r5, #0
   dca80:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   dca82:	1c63      	adds	r3, r4, #1
   dca84:	9317      	str	r3, [sp, #92]	; 0x5c
   dca86:	7863      	ldrb	r3, [r4, #1]
   dca88:	2b2b      	cmp	r3, #43	; 0x2b
   dca8a:	d006      	beq.n	dca9a <_strtod_r+0x27a>
   dca8c:	2b2d      	cmp	r3, #45	; 0x2d
   dca8e:	d002      	beq.n	dca96 <_strtod_r+0x276>
   dca90:	2600      	movs	r6, #0
   dca92:	9603      	str	r6, [sp, #12]
   dca94:	e006      	b.n	dcaa4 <_strtod_r+0x284>
   dca96:	2301      	movs	r3, #1
   dca98:	e000      	b.n	dca9c <_strtod_r+0x27c>
   dca9a:	2300      	movs	r3, #0
   dca9c:	9303      	str	r3, [sp, #12]
   dca9e:	1ca3      	adds	r3, r4, #2
   dcaa0:	9317      	str	r3, [sp, #92]	; 0x5c
   dcaa2:	78a3      	ldrb	r3, [r4, #2]
   dcaa4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dcaa8:	2e09      	cmp	r6, #9
   dcaaa:	d82b      	bhi.n	dcb04 <_strtod_r+0x2e4>
   dcaac:	2b30      	cmp	r3, #48	; 0x30
   dcaae:	d104      	bne.n	dcaba <_strtod_r+0x29a>
   dcab0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dcab2:	1c5e      	adds	r6, r3, #1
   dcab4:	9617      	str	r6, [sp, #92]	; 0x5c
   dcab6:	785b      	ldrb	r3, [r3, #1]
   dcab8:	e7f8      	b.n	dcaac <_strtod_r+0x28c>
   dcaba:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   dcabe:	2e08      	cmp	r6, #8
   dcac0:	d821      	bhi.n	dcb06 <_strtod_r+0x2e6>
   dcac2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dcac6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dcac8:	f04f 0c0a 	mov.w	ip, #10
   dcacc:	461f      	mov	r7, r3
   dcace:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dcad0:	1c5e      	adds	r6, r3, #1
   dcad2:	9617      	str	r6, [sp, #92]	; 0x5c
   dcad4:	785b      	ldrb	r3, [r3, #1]
   dcad6:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   dcada:	f1b9 0f09 	cmp.w	r9, #9
   dcade:	d804      	bhi.n	dcaea <_strtod_r+0x2ca>
   dcae0:	fb0c 3e0e 	mla	lr, ip, lr, r3
   dcae4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dcae8:	e7f1      	b.n	dcace <_strtod_r+0x2ae>
   dcaea:	1bf6      	subs	r6, r6, r7
   dcaec:	2e08      	cmp	r6, #8
   dcaee:	f644 691f 	movw	r9, #19999	; 0x4e1f
   dcaf2:	dc02      	bgt.n	dcafa <_strtod_r+0x2da>
   dcaf4:	45f1      	cmp	r9, lr
   dcaf6:	bfa8      	it	ge
   dcaf8:	46f1      	movge	r9, lr
   dcafa:	9e03      	ldr	r6, [sp, #12]
   dcafc:	b12e      	cbz	r6, dcb0a <_strtod_r+0x2ea>
   dcafe:	f1c9 0900 	rsb	r9, r9, #0
   dcb02:	e002      	b.n	dcb0a <_strtod_r+0x2ea>
   dcb04:	9417      	str	r4, [sp, #92]	; 0x5c
   dcb06:	f04f 0900 	mov.w	r9, #0
   dcb0a:	2d00      	cmp	r5, #0
   dcb0c:	d153      	bne.n	dcbb6 <_strtod_r+0x396>
   dcb0e:	2800      	cmp	r0, #0
   dcb10:	f040 8451 	bne.w	dd3b6 <_strtod_r+0xb96>
   dcb14:	9a06      	ldr	r2, [sp, #24]
   dcb16:	2a00      	cmp	r2, #0
   dcb18:	f040 844d 	bne.w	dd3b6 <_strtod_r+0xb96>
   dcb1c:	2900      	cmp	r1, #0
   dcb1e:	d141      	bne.n	dcba4 <_strtod_r+0x384>
   dcb20:	2b4e      	cmp	r3, #78	; 0x4e
   dcb22:	d020      	beq.n	dcb66 <_strtod_r+0x346>
   dcb24:	dc02      	bgt.n	dcb2c <_strtod_r+0x30c>
   dcb26:	2b49      	cmp	r3, #73	; 0x49
   dcb28:	d00a      	beq.n	dcb40 <_strtod_r+0x320>
   dcb2a:	e03b      	b.n	dcba4 <_strtod_r+0x384>
   dcb2c:	2b69      	cmp	r3, #105	; 0x69
   dcb2e:	d007      	beq.n	dcb40 <_strtod_r+0x320>
   dcb30:	2b6e      	cmp	r3, #110	; 0x6e
   dcb32:	d018      	beq.n	dcb66 <_strtod_r+0x346>
   dcb34:	e036      	b.n	dcba4 <_strtod_r+0x384>
   dcb36:	bf00      	nop
   dcb38:	000df688 	.word	0x000df688
   dcb3c:	7ff00000 	.word	0x7ff00000
   dcb40:	49a8      	ldr	r1, [pc, #672]	; (dcde4 <_strtod_r+0x5c4>)
   dcb42:	a817      	add	r0, sp, #92	; 0x5c
   dcb44:	f001 fa38 	bl	ddfb8 <__match>
   dcb48:	b360      	cbz	r0, dcba4 <_strtod_r+0x384>
   dcb4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dcb4c:	49a6      	ldr	r1, [pc, #664]	; (dcde8 <_strtod_r+0x5c8>)
   dcb4e:	3b01      	subs	r3, #1
   dcb50:	a817      	add	r0, sp, #92	; 0x5c
   dcb52:	9317      	str	r3, [sp, #92]	; 0x5c
   dcb54:	f001 fa30 	bl	ddfb8 <__match>
   dcb58:	b910      	cbnz	r0, dcb60 <_strtod_r+0x340>
   dcb5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dcb5c:	3301      	adds	r3, #1
   dcb5e:	9317      	str	r3, [sp, #92]	; 0x5c
   dcb60:	f8df b2a0 	ldr.w	fp, [pc, #672]	; dce04 <_strtod_r+0x5e4>
   dcb64:	e01a      	b.n	dcb9c <_strtod_r+0x37c>
   dcb66:	49a1      	ldr	r1, [pc, #644]	; (dcdec <_strtod_r+0x5cc>)
   dcb68:	a817      	add	r0, sp, #92	; 0x5c
   dcb6a:	f001 fa25 	bl	ddfb8 <__match>
   dcb6e:	b1c8      	cbz	r0, dcba4 <_strtod_r+0x384>
   dcb70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dcb72:	781b      	ldrb	r3, [r3, #0]
   dcb74:	2b28      	cmp	r3, #40	; 0x28
   dcb76:	d10f      	bne.n	dcb98 <_strtod_r+0x378>
   dcb78:	aa1a      	add	r2, sp, #104	; 0x68
   dcb7a:	499d      	ldr	r1, [pc, #628]	; (dcdf0 <_strtod_r+0x5d0>)
   dcb7c:	a817      	add	r0, sp, #92	; 0x5c
   dcb7e:	f001 fa2e 	bl	ddfde <__hexnan>
   dcb82:	2805      	cmp	r0, #5
   dcb84:	d108      	bne.n	dcb98 <_strtod_r+0x378>
   dcb86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   dcb88:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dcb8c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dcb90:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dcb94:	f000 bc0f 	b.w	dd3b6 <_strtod_r+0xb96>
   dcb98:	f8df b26c 	ldr.w	fp, [pc, #620]	; dce08 <_strtod_r+0x5e8>
   dcb9c:	f04f 0a00 	mov.w	sl, #0
   dcba0:	f000 bc09 	b.w	dd3b6 <_strtod_r+0xb96>
   dcba4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dcba6:	9417      	str	r4, [sp, #92]	; 0x5c
   dcba8:	2b00      	cmp	r3, #0
   dcbaa:	f000 840f 	beq.w	dd3cc <_strtod_r+0xbac>
   dcbae:	2300      	movs	r3, #0
   dcbb0:	930c      	str	r3, [sp, #48]	; 0x30
   dcbb2:	f000 bc02 	b.w	dd3ba <_strtod_r+0xb9a>
   dcbb6:	9b04      	ldr	r3, [sp, #16]
   dcbb8:	9805      	ldr	r0, [sp, #20]
   dcbba:	2b00      	cmp	r3, #0
   dcbbc:	bf08      	it	eq
   dcbbe:	462b      	moveq	r3, r5
   dcbc0:	2d10      	cmp	r5, #16
   dcbc2:	462c      	mov	r4, r5
   dcbc4:	ebc2 0909 	rsb	r9, r2, r9
   dcbc8:	bfa8      	it	ge
   dcbca:	2410      	movge	r4, #16
   dcbcc:	9304      	str	r3, [sp, #16]
   dcbce:	f7ff f83b 	bl	dbc48 <__aeabi_ui2d>
   dcbd2:	2c09      	cmp	r4, #9
   dcbd4:	4682      	mov	sl, r0
   dcbd6:	468b      	mov	fp, r1
   dcbd8:	dd13      	ble.n	dcc02 <_strtod_r+0x3e2>
   dcbda:	4b86      	ldr	r3, [pc, #536]	; (dcdf4 <_strtod_r+0x5d4>)
   dcbdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   dcbe0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dcbe4:	f7ff f8a6 	bl	dbd34 <__aeabi_dmul>
   dcbe8:	4606      	mov	r6, r0
   dcbea:	4640      	mov	r0, r8
   dcbec:	460f      	mov	r7, r1
   dcbee:	f7ff f82b 	bl	dbc48 <__aeabi_ui2d>
   dcbf2:	4602      	mov	r2, r0
   dcbf4:	460b      	mov	r3, r1
   dcbf6:	4630      	mov	r0, r6
   dcbf8:	4639      	mov	r1, r7
   dcbfa:	f7fe fee9 	bl	db9d0 <__adddf3>
   dcbfe:	4682      	mov	sl, r0
   dcc00:	468b      	mov	fp, r1
   dcc02:	2d0f      	cmp	r5, #15
   dcc04:	dc36      	bgt.n	dcc74 <_strtod_r+0x454>
   dcc06:	f1b9 0f00 	cmp.w	r9, #0
   dcc0a:	f000 83d4 	beq.w	dd3b6 <_strtod_r+0xb96>
   dcc0e:	dd24      	ble.n	dcc5a <_strtod_r+0x43a>
   dcc10:	f1b9 0f16 	cmp.w	r9, #22
   dcc14:	dc07      	bgt.n	dcc26 <_strtod_r+0x406>
   dcc16:	4d77      	ldr	r5, [pc, #476]	; (dcdf4 <_strtod_r+0x5d4>)
   dcc18:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   dcc1c:	4652      	mov	r2, sl
   dcc1e:	465b      	mov	r3, fp
   dcc20:	e9d9 0100 	ldrd	r0, r1, [r9]
   dcc24:	e014      	b.n	dcc50 <_strtod_r+0x430>
   dcc26:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dcc2a:	4599      	cmp	r9, r3
   dcc2c:	dc22      	bgt.n	dcc74 <_strtod_r+0x454>
   dcc2e:	4c71      	ldr	r4, [pc, #452]	; (dcdf4 <_strtod_r+0x5d4>)
   dcc30:	f1c5 050f 	rsb	r5, r5, #15
   dcc34:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dcc38:	ebc5 0509 	rsb	r5, r5, r9
   dcc3c:	4652      	mov	r2, sl
   dcc3e:	465b      	mov	r3, fp
   dcc40:	e9d1 0100 	ldrd	r0, r1, [r1]
   dcc44:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dcc48:	f7ff f874 	bl	dbd34 <__aeabi_dmul>
   dcc4c:	e9d4 2300 	ldrd	r2, r3, [r4]
   dcc50:	f7ff f870 	bl	dbd34 <__aeabi_dmul>
   dcc54:	4682      	mov	sl, r0
   dcc56:	468b      	mov	fp, r1
   dcc58:	e3ad      	b.n	dd3b6 <_strtod_r+0xb96>
   dcc5a:	f119 0f16 	cmn.w	r9, #22
   dcc5e:	db09      	blt.n	dcc74 <_strtod_r+0x454>
   dcc60:	4d64      	ldr	r5, [pc, #400]	; (dcdf4 <_strtod_r+0x5d4>)
   dcc62:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   dcc66:	e9d9 2300 	ldrd	r2, r3, [r9]
   dcc6a:	4650      	mov	r0, sl
   dcc6c:	4659      	mov	r1, fp
   dcc6e:	f7ff f98b 	bl	dbf88 <__aeabi_ddiv>
   dcc72:	e7ef      	b.n	dcc54 <_strtod_r+0x434>
   dcc74:	1b2c      	subs	r4, r5, r4
   dcc76:	444c      	add	r4, r9
   dcc78:	2c00      	cmp	r4, #0
   dcc7a:	dd57      	ble.n	dcd2c <_strtod_r+0x50c>
   dcc7c:	f014 010f 	ands.w	r1, r4, #15
   dcc80:	d00a      	beq.n	dcc98 <_strtod_r+0x478>
   dcc82:	4b5c      	ldr	r3, [pc, #368]	; (dcdf4 <_strtod_r+0x5d4>)
   dcc84:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   dcc88:	4652      	mov	r2, sl
   dcc8a:	465b      	mov	r3, fp
   dcc8c:	e9d1 0100 	ldrd	r0, r1, [r1]
   dcc90:	f7ff f850 	bl	dbd34 <__aeabi_dmul>
   dcc94:	4682      	mov	sl, r0
   dcc96:	468b      	mov	fp, r1
   dcc98:	f034 040f 	bics.w	r4, r4, #15
   dcc9c:	f000 80b8 	beq.w	dce10 <_strtod_r+0x5f0>
   dcca0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   dcca4:	dd0b      	ble.n	dccbe <_strtod_r+0x49e>
   dcca6:	2400      	movs	r4, #0
   dcca8:	4625      	mov	r5, r4
   dccaa:	9405      	str	r4, [sp, #20]
   dccac:	9404      	str	r4, [sp, #16]
   dccae:	9a02      	ldr	r2, [sp, #8]
   dccb0:	f8df b150 	ldr.w	fp, [pc, #336]	; dce04 <_strtod_r+0x5e4>
   dccb4:	2322      	movs	r3, #34	; 0x22
   dccb6:	6013      	str	r3, [r2, #0]
   dccb8:	f04f 0a00 	mov.w	sl, #0
   dccbc:	e187      	b.n	dcfce <_strtod_r+0x7ae>
   dccbe:	4e4e      	ldr	r6, [pc, #312]	; (dcdf8 <_strtod_r+0x5d8>)
   dccc0:	2300      	movs	r3, #0
   dccc2:	1124      	asrs	r4, r4, #4
   dccc4:	4650      	mov	r0, sl
   dccc6:	4659      	mov	r1, fp
   dccc8:	4698      	mov	r8, r3
   dccca:	4637      	mov	r7, r6
   dcccc:	2c01      	cmp	r4, #1
   dccce:	dd0b      	ble.n	dcce8 <_strtod_r+0x4c8>
   dccd0:	07e2      	lsls	r2, r4, #31
   dccd2:	d504      	bpl.n	dccde <_strtod_r+0x4be>
   dccd4:	e9d6 2300 	ldrd	r2, r3, [r6]
   dccd8:	f7ff f82c 	bl	dbd34 <__aeabi_dmul>
   dccdc:	2301      	movs	r3, #1
   dccde:	f108 0801 	add.w	r8, r8, #1
   dcce2:	1064      	asrs	r4, r4, #1
   dcce4:	3608      	adds	r6, #8
   dcce6:	e7f1      	b.n	dcccc <_strtod_r+0x4ac>
   dcce8:	b10b      	cbz	r3, dccee <_strtod_r+0x4ce>
   dccea:	4682      	mov	sl, r0
   dccec:	468b      	mov	fp, r1
   dccee:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dccf2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   dccf6:	4652      	mov	r2, sl
   dccf8:	465b      	mov	r3, fp
   dccfa:	e9d7 0100 	ldrd	r0, r1, [r7]
   dccfe:	f7ff f819 	bl	dbd34 <__aeabi_dmul>
   dcd02:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dcd06:	468b      	mov	fp, r1
   dcd08:	460a      	mov	r2, r1
   dcd0a:	0d1b      	lsrs	r3, r3, #20
   dcd0c:	493b      	ldr	r1, [pc, #236]	; (dcdfc <_strtod_r+0x5dc>)
   dcd0e:	051b      	lsls	r3, r3, #20
   dcd10:	428b      	cmp	r3, r1
   dcd12:	4682      	mov	sl, r0
   dcd14:	d8c7      	bhi.n	dcca6 <_strtod_r+0x486>
   dcd16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dcd1a:	428b      	cmp	r3, r1
   dcd1c:	bf86      	itte	hi
   dcd1e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; dce0c <_strtod_r+0x5ec>
   dcd22:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   dcd26:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dcd2a:	e071      	b.n	dce10 <_strtod_r+0x5f0>
   dcd2c:	d070      	beq.n	dce10 <_strtod_r+0x5f0>
   dcd2e:	4264      	negs	r4, r4
   dcd30:	f014 020f 	ands.w	r2, r4, #15
   dcd34:	d00a      	beq.n	dcd4c <_strtod_r+0x52c>
   dcd36:	4b2f      	ldr	r3, [pc, #188]	; (dcdf4 <_strtod_r+0x5d4>)
   dcd38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dcd3c:	4650      	mov	r0, sl
   dcd3e:	4659      	mov	r1, fp
   dcd40:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcd44:	f7ff f920 	bl	dbf88 <__aeabi_ddiv>
   dcd48:	4682      	mov	sl, r0
   dcd4a:	468b      	mov	fp, r1
   dcd4c:	1124      	asrs	r4, r4, #4
   dcd4e:	d05f      	beq.n	dce10 <_strtod_r+0x5f0>
   dcd50:	2c1f      	cmp	r4, #31
   dcd52:	dd04      	ble.n	dcd5e <_strtod_r+0x53e>
   dcd54:	2400      	movs	r4, #0
   dcd56:	4625      	mov	r5, r4
   dcd58:	9405      	str	r4, [sp, #20]
   dcd5a:	9404      	str	r4, [sp, #16]
   dcd5c:	e130      	b.n	dcfc0 <_strtod_r+0x7a0>
   dcd5e:	f014 0f10 	tst.w	r4, #16
   dcd62:	bf0c      	ite	eq
   dcd64:	2300      	moveq	r3, #0
   dcd66:	236a      	movne	r3, #106	; 0x6a
   dcd68:	4e25      	ldr	r6, [pc, #148]	; (dce00 <_strtod_r+0x5e0>)
   dcd6a:	9303      	str	r3, [sp, #12]
   dcd6c:	4650      	mov	r0, sl
   dcd6e:	4659      	mov	r1, fp
   dcd70:	2300      	movs	r3, #0
   dcd72:	2c00      	cmp	r4, #0
   dcd74:	dd09      	ble.n	dcd8a <_strtod_r+0x56a>
   dcd76:	07e2      	lsls	r2, r4, #31
   dcd78:	d504      	bpl.n	dcd84 <_strtod_r+0x564>
   dcd7a:	e9d6 2300 	ldrd	r2, r3, [r6]
   dcd7e:	f7fe ffd9 	bl	dbd34 <__aeabi_dmul>
   dcd82:	2301      	movs	r3, #1
   dcd84:	1064      	asrs	r4, r4, #1
   dcd86:	3608      	adds	r6, #8
   dcd88:	e7f3      	b.n	dcd72 <_strtod_r+0x552>
   dcd8a:	b10b      	cbz	r3, dcd90 <_strtod_r+0x570>
   dcd8c:	4682      	mov	sl, r0
   dcd8e:	468b      	mov	fp, r1
   dcd90:	9b03      	ldr	r3, [sp, #12]
   dcd92:	b1eb      	cbz	r3, dcdd0 <_strtod_r+0x5b0>
   dcd94:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dcd98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dcd9c:	2b00      	cmp	r3, #0
   dcd9e:	4659      	mov	r1, fp
   dcda0:	dd16      	ble.n	dcdd0 <_strtod_r+0x5b0>
   dcda2:	2b1f      	cmp	r3, #31
   dcda4:	dd0e      	ble.n	dcdc4 <_strtod_r+0x5a4>
   dcda6:	2b34      	cmp	r3, #52	; 0x34
   dcda8:	bfde      	ittt	le
   dcdaa:	3b20      	suble	r3, #32
   dcdac:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   dcdb0:	fa02 f303 	lslle.w	r3, r2, r3
   dcdb4:	f04f 0a00 	mov.w	sl, #0
   dcdb8:	bfcc      	ite	gt
   dcdba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dcdbe:	ea03 0b01 	andle.w	fp, r3, r1
   dcdc2:	e005      	b.n	dcdd0 <_strtod_r+0x5b0>
   dcdc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dcdc8:	fa02 f303 	lsl.w	r3, r2, r3
   dcdcc:	ea03 0a0a 	and.w	sl, r3, sl
   dcdd0:	2200      	movs	r2, #0
   dcdd2:	2300      	movs	r3, #0
   dcdd4:	4650      	mov	r0, sl
   dcdd6:	4659      	mov	r1, fp
   dcdd8:	f7ff fa14 	bl	dc204 <__aeabi_dcmpeq>
   dcddc:	2800      	cmp	r0, #0
   dcdde:	d1b9      	bne.n	dcd54 <_strtod_r+0x534>
   dcde0:	e018      	b.n	dce14 <_strtod_r+0x5f4>
   dcde2:	bf00      	nop
   dcde4:	000df6b0 	.word	0x000df6b0
   dcde8:	000df6b3 	.word	0x000df6b3
   dcdec:	000df6b9 	.word	0x000df6b9
   dcdf0:	000df69c 	.word	0x000df69c
   dcdf4:	000df728 	.word	0x000df728
   dcdf8:	000df7f0 	.word	0x000df7f0
   dcdfc:	7ca00000 	.word	0x7ca00000
   dce00:	000df6c0 	.word	0x000df6c0
   dce04:	7ff00000 	.word	0x7ff00000
   dce08:	fff80000 	.word	0xfff80000
   dce0c:	7fefffff 	.word	0x7fefffff
   dce10:	2300      	movs	r3, #0
   dce12:	9303      	str	r3, [sp, #12]
   dce14:	9b05      	ldr	r3, [sp, #20]
   dce16:	9300      	str	r3, [sp, #0]
   dce18:	9a04      	ldr	r2, [sp, #16]
   dce1a:	9907      	ldr	r1, [sp, #28]
   dce1c:	9802      	ldr	r0, [sp, #8]
   dce1e:	462b      	mov	r3, r5
   dce20:	f001 fad3 	bl	de3ca <__s2b>
   dce24:	9005      	str	r0, [sp, #20]
   dce26:	2800      	cmp	r0, #0
   dce28:	f43f af3d 	beq.w	dcca6 <_strtod_r+0x486>
   dce2c:	f1b9 0f00 	cmp.w	r9, #0
   dce30:	f1c9 0300 	rsb	r3, r9, #0
   dce34:	bfa8      	it	ge
   dce36:	2300      	movge	r3, #0
   dce38:	930d      	str	r3, [sp, #52]	; 0x34
   dce3a:	2400      	movs	r4, #0
   dce3c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   dce40:	9312      	str	r3, [sp, #72]	; 0x48
   dce42:	4625      	mov	r5, r4
   dce44:	9b05      	ldr	r3, [sp, #20]
   dce46:	9802      	ldr	r0, [sp, #8]
   dce48:	6859      	ldr	r1, [r3, #4]
   dce4a:	f001 fa37 	bl	de2bc <_Balloc>
   dce4e:	9004      	str	r0, [sp, #16]
   dce50:	2800      	cmp	r0, #0
   dce52:	f43f af2c 	beq.w	dccae <_strtod_r+0x48e>
   dce56:	9b05      	ldr	r3, [sp, #20]
   dce58:	691a      	ldr	r2, [r3, #16]
   dce5a:	3202      	adds	r2, #2
   dce5c:	f103 010c 	add.w	r1, r3, #12
   dce60:	0092      	lsls	r2, r2, #2
   dce62:	300c      	adds	r0, #12
   dce64:	f7ff fbc3 	bl	dc5ee <memcpy>
   dce68:	aa1a      	add	r2, sp, #104	; 0x68
   dce6a:	a919      	add	r1, sp, #100	; 0x64
   dce6c:	ec4b ab10 	vmov	d0, sl, fp
   dce70:	9802      	ldr	r0, [sp, #8]
   dce72:	e9cd ab08 	strd	sl, fp, [sp, #32]
   dce76:	f001 fd5c 	bl	de932 <__d2b>
   dce7a:	9018      	str	r0, [sp, #96]	; 0x60
   dce7c:	2800      	cmp	r0, #0
   dce7e:	f43f af16 	beq.w	dccae <_strtod_r+0x48e>
   dce82:	2101      	movs	r1, #1
   dce84:	9802      	ldr	r0, [sp, #8]
   dce86:	f001 fb2b 	bl	de4e0 <__i2b>
   dce8a:	4605      	mov	r5, r0
   dce8c:	2800      	cmp	r0, #0
   dce8e:	f43f af0e 	beq.w	dccae <_strtod_r+0x48e>
   dce92:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dce94:	9903      	ldr	r1, [sp, #12]
   dce96:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   dce98:	2b00      	cmp	r3, #0
   dce9a:	bfad      	iteet	ge
   dce9c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   dce9e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   dcea0:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   dcea4:	eb02 0803 	addge.w	r8, r2, r3
   dcea8:	bfb8      	it	lt
   dceaa:	1ad2      	sublt	r2, r2, r3
   dceac:	eba3 0301 	sub.w	r3, r3, r1
   dceb0:	4433      	add	r3, r6
   dceb2:	49b5      	ldr	r1, [pc, #724]	; (dd188 <_strtod_r+0x968>)
   dceb4:	bfa8      	it	ge
   dceb6:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   dceb8:	3b01      	subs	r3, #1
   dceba:	428b      	cmp	r3, r1
   dcebc:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   dcec0:	f280 808a 	bge.w	dcfd8 <_strtod_r+0x7b8>
   dcec4:	1ac9      	subs	r1, r1, r3
   dcec6:	291f      	cmp	r1, #31
   dcec8:	bfc8      	it	gt
   dceca:	4fb0      	ldrgt	r7, [pc, #704]	; (dd18c <_strtod_r+0x96c>)
   dcecc:	f04f 0901 	mov.w	r9, #1
   dced0:	bfd4      	ite	le
   dced2:	fa09 f301 	lslle.w	r3, r9, r1
   dced6:	1aff      	subgt	r7, r7, r3
   dced8:	eba6 0601 	sub.w	r6, r6, r1
   dcedc:	bfd9      	ittee	le
   dcede:	9306      	strle	r3, [sp, #24]
   dcee0:	2700      	movle	r7, #0
   dcee2:	fa09 f707 	lslgt.w	r7, r9, r7
   dcee6:	f8cd 9018 	strgt.w	r9, [sp, #24]
   dceea:	eb08 0906 	add.w	r9, r8, r6
   dceee:	9b03      	ldr	r3, [sp, #12]
   dcef0:	45c8      	cmp	r8, r9
   dcef2:	4416      	add	r6, r2
   dcef4:	441e      	add	r6, r3
   dcef6:	4643      	mov	r3, r8
   dcef8:	bfa8      	it	ge
   dcefa:	464b      	movge	r3, r9
   dcefc:	42b3      	cmp	r3, r6
   dcefe:	bfa8      	it	ge
   dcf00:	4633      	movge	r3, r6
   dcf02:	2b00      	cmp	r3, #0
   dcf04:	bfc2      	ittt	gt
   dcf06:	ebc3 0909 	rsbgt	r9, r3, r9
   dcf0a:	1af6      	subgt	r6, r6, r3
   dcf0c:	ebc3 0808 	rsbgt	r8, r3, r8
   dcf10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dcf12:	2b00      	cmp	r3, #0
   dcf14:	d164      	bne.n	dcfe0 <_strtod_r+0x7c0>
   dcf16:	f1b9 0f00 	cmp.w	r9, #0
   dcf1a:	dc7a      	bgt.n	dd012 <_strtod_r+0x7f2>
   dcf1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   dcf1e:	2b00      	cmp	r3, #0
   dcf20:	f040 8081 	bne.w	dd026 <_strtod_r+0x806>
   dcf24:	2e00      	cmp	r6, #0
   dcf26:	f300 8088 	bgt.w	dd03a <_strtod_r+0x81a>
   dcf2a:	f1b8 0f00 	cmp.w	r8, #0
   dcf2e:	f300 808e 	bgt.w	dd04e <_strtod_r+0x82e>
   dcf32:	9a04      	ldr	r2, [sp, #16]
   dcf34:	9918      	ldr	r1, [sp, #96]	; 0x60
   dcf36:	9802      	ldr	r0, [sp, #8]
   dcf38:	f001 fc27 	bl	de78a <__mdiff>
   dcf3c:	4604      	mov	r4, r0
   dcf3e:	2800      	cmp	r0, #0
   dcf40:	f43f aeb5 	beq.w	dccae <_strtod_r+0x48e>
   dcf44:	68c3      	ldr	r3, [r0, #12]
   dcf46:	9307      	str	r3, [sp, #28]
   dcf48:	2300      	movs	r3, #0
   dcf4a:	60c3      	str	r3, [r0, #12]
   dcf4c:	4629      	mov	r1, r5
   dcf4e:	f001 fc00 	bl	de752 <__mcmp>
   dcf52:	2800      	cmp	r0, #0
   dcf54:	f280 8089 	bge.w	dd06a <_strtod_r+0x84a>
   dcf58:	9b07      	ldr	r3, [sp, #28]
   dcf5a:	2b00      	cmp	r3, #0
   dcf5c:	f040 8204 	bne.w	dd368 <_strtod_r+0xb48>
   dcf60:	f1ba 0f00 	cmp.w	sl, #0
   dcf64:	f040 8200 	bne.w	dd368 <_strtod_r+0xb48>
   dcf68:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dcf6c:	2b00      	cmp	r3, #0
   dcf6e:	f040 81fb 	bne.w	dd368 <_strtod_r+0xb48>
   dcf72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dcf76:	0d1b      	lsrs	r3, r3, #20
   dcf78:	051b      	lsls	r3, r3, #20
   dcf7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dcf7e:	f240 81f3 	bls.w	dd368 <_strtod_r+0xb48>
   dcf82:	6963      	ldr	r3, [r4, #20]
   dcf84:	2b00      	cmp	r3, #0
   dcf86:	d06c      	beq.n	dd062 <_strtod_r+0x842>
   dcf88:	4621      	mov	r1, r4
   dcf8a:	2201      	movs	r2, #1
   dcf8c:	9802      	ldr	r0, [sp, #8]
   dcf8e:	f001 fb8f 	bl	de6b0 <__lshift>
   dcf92:	4629      	mov	r1, r5
   dcf94:	4604      	mov	r4, r0
   dcf96:	f001 fbdc 	bl	de752 <__mcmp>
   dcf9a:	2800      	cmp	r0, #0
   dcf9c:	f340 81e4 	ble.w	dd368 <_strtod_r+0xb48>
   dcfa0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dcfa4:	9a03      	ldr	r2, [sp, #12]
   dcfa6:	0d1b      	lsrs	r3, r3, #20
   dcfa8:	051b      	lsls	r3, r3, #20
   dcfaa:	2a00      	cmp	r2, #0
   dcfac:	f000 808c 	beq.w	dd0c8 <_strtod_r+0x8a8>
   dcfb0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dcfb4:	f300 8088 	bgt.w	dd0c8 <_strtod_r+0x8a8>
   dcfb8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   dcfbc:	f300 81d6 	bgt.w	dd36c <_strtod_r+0xb4c>
   dcfc0:	9a02      	ldr	r2, [sp, #8]
   dcfc2:	2322      	movs	r3, #34	; 0x22
   dcfc4:	f04f 0a00 	mov.w	sl, #0
   dcfc8:	f04f 0b00 	mov.w	fp, #0
   dcfcc:	6013      	str	r3, [r2, #0]
   dcfce:	9b05      	ldr	r3, [sp, #20]
   dcfd0:	2b00      	cmp	r3, #0
   dcfd2:	f040 81dc 	bne.w	dd38e <_strtod_r+0xb6e>
   dcfd6:	e1ee      	b.n	dd3b6 <_strtod_r+0xb96>
   dcfd8:	2301      	movs	r3, #1
   dcfda:	2700      	movs	r7, #0
   dcfdc:	9306      	str	r3, [sp, #24]
   dcfde:	e784      	b.n	dceea <_strtod_r+0x6ca>
   dcfe0:	4629      	mov	r1, r5
   dcfe2:	461a      	mov	r2, r3
   dcfe4:	9802      	ldr	r0, [sp, #8]
   dcfe6:	f001 fb15 	bl	de614 <__pow5mult>
   dcfea:	4605      	mov	r5, r0
   dcfec:	2800      	cmp	r0, #0
   dcfee:	f43f ae5e 	beq.w	dccae <_strtod_r+0x48e>
   dcff2:	4601      	mov	r1, r0
   dcff4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dcff6:	9802      	ldr	r0, [sp, #8]
   dcff8:	f001 fa7b 	bl	de4f2 <__multiply>
   dcffc:	9007      	str	r0, [sp, #28]
   dcffe:	2800      	cmp	r0, #0
   dd000:	f43f ae55 	beq.w	dccae <_strtod_r+0x48e>
   dd004:	9918      	ldr	r1, [sp, #96]	; 0x60
   dd006:	9802      	ldr	r0, [sp, #8]
   dd008:	f001 f98d 	bl	de326 <_Bfree>
   dd00c:	9b07      	ldr	r3, [sp, #28]
   dd00e:	9318      	str	r3, [sp, #96]	; 0x60
   dd010:	e781      	b.n	dcf16 <_strtod_r+0x6f6>
   dd012:	464a      	mov	r2, r9
   dd014:	9918      	ldr	r1, [sp, #96]	; 0x60
   dd016:	9802      	ldr	r0, [sp, #8]
   dd018:	f001 fb4a 	bl	de6b0 <__lshift>
   dd01c:	9018      	str	r0, [sp, #96]	; 0x60
   dd01e:	2800      	cmp	r0, #0
   dd020:	f47f af7c 	bne.w	dcf1c <_strtod_r+0x6fc>
   dd024:	e643      	b.n	dccae <_strtod_r+0x48e>
   dd026:	9a12      	ldr	r2, [sp, #72]	; 0x48
   dd028:	9904      	ldr	r1, [sp, #16]
   dd02a:	9802      	ldr	r0, [sp, #8]
   dd02c:	f001 faf2 	bl	de614 <__pow5mult>
   dd030:	9004      	str	r0, [sp, #16]
   dd032:	2800      	cmp	r0, #0
   dd034:	f47f af76 	bne.w	dcf24 <_strtod_r+0x704>
   dd038:	e639      	b.n	dccae <_strtod_r+0x48e>
   dd03a:	4632      	mov	r2, r6
   dd03c:	9904      	ldr	r1, [sp, #16]
   dd03e:	9802      	ldr	r0, [sp, #8]
   dd040:	f001 fb36 	bl	de6b0 <__lshift>
   dd044:	9004      	str	r0, [sp, #16]
   dd046:	2800      	cmp	r0, #0
   dd048:	f47f af6f 	bne.w	dcf2a <_strtod_r+0x70a>
   dd04c:	e62f      	b.n	dccae <_strtod_r+0x48e>
   dd04e:	4629      	mov	r1, r5
   dd050:	4642      	mov	r2, r8
   dd052:	9802      	ldr	r0, [sp, #8]
   dd054:	f001 fb2c 	bl	de6b0 <__lshift>
   dd058:	4605      	mov	r5, r0
   dd05a:	2800      	cmp	r0, #0
   dd05c:	f47f af69 	bne.w	dcf32 <_strtod_r+0x712>
   dd060:	e625      	b.n	dccae <_strtod_r+0x48e>
   dd062:	6923      	ldr	r3, [r4, #16]
   dd064:	2b01      	cmp	r3, #1
   dd066:	dc8f      	bgt.n	dcf88 <_strtod_r+0x768>
   dd068:	e17e      	b.n	dd368 <_strtod_r+0xb48>
   dd06a:	d161      	bne.n	dd130 <_strtod_r+0x910>
   dd06c:	9a07      	ldr	r2, [sp, #28]
   dd06e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd072:	b322      	cbz	r2, dd0be <_strtod_r+0x89e>
   dd074:	4946      	ldr	r1, [pc, #280]	; (dd190 <_strtod_r+0x970>)
   dd076:	428b      	cmp	r3, r1
   dd078:	465a      	mov	r2, fp
   dd07a:	d12e      	bne.n	dd0da <_strtod_r+0x8ba>
   dd07c:	9b03      	ldr	r3, [sp, #12]
   dd07e:	4651      	mov	r1, sl
   dd080:	b163      	cbz	r3, dd09c <_strtod_r+0x87c>
   dd082:	4b44      	ldr	r3, [pc, #272]	; (dd194 <_strtod_r+0x974>)
   dd084:	4013      	ands	r3, r2
   dd086:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dd08a:	d807      	bhi.n	dd09c <_strtod_r+0x87c>
   dd08c:	0d1b      	lsrs	r3, r3, #20
   dd08e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dd092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dd096:	fa00 f303 	lsl.w	r3, r0, r3
   dd09a:	e001      	b.n	dd0a0 <_strtod_r+0x880>
   dd09c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dd0a0:	428b      	cmp	r3, r1
   dd0a2:	d11a      	bne.n	dd0da <_strtod_r+0x8ba>
   dd0a4:	493c      	ldr	r1, [pc, #240]	; (dd198 <_strtod_r+0x978>)
   dd0a6:	428a      	cmp	r2, r1
   dd0a8:	d102      	bne.n	dd0b0 <_strtod_r+0x890>
   dd0aa:	3301      	adds	r3, #1
   dd0ac:	f43f adff 	beq.w	dccae <_strtod_r+0x48e>
   dd0b0:	4b38      	ldr	r3, [pc, #224]	; (dd194 <_strtod_r+0x974>)
   dd0b2:	4013      	ands	r3, r2
   dd0b4:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dd0b8:	f04f 0a00 	mov.w	sl, #0
   dd0bc:	e154      	b.n	dd368 <_strtod_r+0xb48>
   dd0be:	b963      	cbnz	r3, dd0da <_strtod_r+0x8ba>
   dd0c0:	f1ba 0f00 	cmp.w	sl, #0
   dd0c4:	d109      	bne.n	dd0da <_strtod_r+0x8ba>
   dd0c6:	e76b      	b.n	dcfa0 <_strtod_r+0x780>
   dd0c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dd0cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dd0d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dd0d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dd0d8:	e146      	b.n	dd368 <_strtod_r+0xb48>
   dd0da:	b117      	cbz	r7, dd0e2 <_strtod_r+0x8c2>
   dd0dc:	ea17 0f0b 	tst.w	r7, fp
   dd0e0:	e002      	b.n	dd0e8 <_strtod_r+0x8c8>
   dd0e2:	9b06      	ldr	r3, [sp, #24]
   dd0e4:	ea13 0f0a 	tst.w	r3, sl
   dd0e8:	f000 813e 	beq.w	dd368 <_strtod_r+0xb48>
   dd0ec:	9b07      	ldr	r3, [sp, #28]
   dd0ee:	9a03      	ldr	r2, [sp, #12]
   dd0f0:	4650      	mov	r0, sl
   dd0f2:	4659      	mov	r1, fp
   dd0f4:	b153      	cbz	r3, dd10c <_strtod_r+0x8ec>
   dd0f6:	f7ff fb75 	bl	dc7e4 <sulp>
   dd0fa:	4602      	mov	r2, r0
   dd0fc:	460b      	mov	r3, r1
   dd0fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   dd102:	f7fe fc65 	bl	db9d0 <__adddf3>
   dd106:	4682      	mov	sl, r0
   dd108:	468b      	mov	fp, r1
   dd10a:	e12d      	b.n	dd368 <_strtod_r+0xb48>
   dd10c:	f7ff fb6a 	bl	dc7e4 <sulp>
   dd110:	4602      	mov	r2, r0
   dd112:	460b      	mov	r3, r1
   dd114:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   dd118:	f7fe fc58 	bl	db9cc <__aeabi_dsub>
   dd11c:	2200      	movs	r2, #0
   dd11e:	2300      	movs	r3, #0
   dd120:	4682      	mov	sl, r0
   dd122:	468b      	mov	fp, r1
   dd124:	f7ff f86e 	bl	dc204 <__aeabi_dcmpeq>
   dd128:	2800      	cmp	r0, #0
   dd12a:	f47f af49 	bne.w	dcfc0 <_strtod_r+0x7a0>
   dd12e:	e11b      	b.n	dd368 <_strtod_r+0xb48>
   dd130:	4629      	mov	r1, r5
   dd132:	4620      	mov	r0, r4
   dd134:	f001 fc4b 	bl	de9ce <__ratio>
   dd138:	ec57 6b10 	vmov	r6, r7, d0
   dd13c:	2200      	movs	r2, #0
   dd13e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dd142:	ee10 0a10 	vmov	r0, s0
   dd146:	4639      	mov	r1, r7
   dd148:	f7ff f870 	bl	dc22c <__aeabi_dcmple>
   dd14c:	2800      	cmp	r0, #0
   dd14e:	d042      	beq.n	dd1d6 <_strtod_r+0x9b6>
   dd150:	9b07      	ldr	r3, [sp, #28]
   dd152:	b123      	cbz	r3, dd15e <_strtod_r+0x93e>
   dd154:	f04f 0800 	mov.w	r8, #0
   dd158:	f8df 9040 	ldr.w	r9, [pc, #64]	; dd19c <_strtod_r+0x97c>
   dd15c:	e011      	b.n	dd182 <_strtod_r+0x962>
   dd15e:	f1ba 0f00 	cmp.w	sl, #0
   dd162:	d103      	bne.n	dd16c <_strtod_r+0x94c>
   dd164:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd168:	b93b      	cbnz	r3, dd17a <_strtod_r+0x95a>
   dd16a:	e01b      	b.n	dd1a4 <_strtod_r+0x984>
   dd16c:	f1ba 0f01 	cmp.w	sl, #1
   dd170:	d103      	bne.n	dd17a <_strtod_r+0x95a>
   dd172:	f1bb 0f00 	cmp.w	fp, #0
   dd176:	f43f af23 	beq.w	dcfc0 <_strtod_r+0x7a0>
   dd17a:	f8df 9024 	ldr.w	r9, [pc, #36]	; dd1a0 <_strtod_r+0x980>
   dd17e:	f04f 0800 	mov.w	r8, #0
   dd182:	2600      	movs	r6, #0
   dd184:	4f05      	ldr	r7, [pc, #20]	; (dd19c <_strtod_r+0x97c>)
   dd186:	e039      	b.n	dd1fc <_strtod_r+0x9dc>
   dd188:	fffffc02 	.word	0xfffffc02
   dd18c:	fffffbe2 	.word	0xfffffbe2
   dd190:	000fffff 	.word	0x000fffff
   dd194:	7ff00000 	.word	0x7ff00000
   dd198:	7fefffff 	.word	0x7fefffff
   dd19c:	3ff00000 	.word	0x3ff00000
   dd1a0:	bff00000 	.word	0xbff00000
   dd1a4:	2200      	movs	r2, #0
   dd1a6:	4b98      	ldr	r3, [pc, #608]	; (dd408 <_strtod_r+0xbe8>)
   dd1a8:	4630      	mov	r0, r6
   dd1aa:	4639      	mov	r1, r7
   dd1ac:	f7ff f834 	bl	dc218 <__aeabi_dcmplt>
   dd1b0:	b940      	cbnz	r0, dd1c4 <_strtod_r+0x9a4>
   dd1b2:	4630      	mov	r0, r6
   dd1b4:	4639      	mov	r1, r7
   dd1b6:	2200      	movs	r2, #0
   dd1b8:	4b94      	ldr	r3, [pc, #592]	; (dd40c <_strtod_r+0xbec>)
   dd1ba:	f7fe fdbb 	bl	dbd34 <__aeabi_dmul>
   dd1be:	4606      	mov	r6, r0
   dd1c0:	460f      	mov	r7, r1
   dd1c2:	e001      	b.n	dd1c8 <_strtod_r+0x9a8>
   dd1c4:	4f91      	ldr	r7, [pc, #580]	; (dd40c <_strtod_r+0xbec>)
   dd1c6:	2600      	movs	r6, #0
   dd1c8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   dd1cc:	9614      	str	r6, [sp, #80]	; 0x50
   dd1ce:	9315      	str	r3, [sp, #84]	; 0x54
   dd1d0:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   dd1d4:	e012      	b.n	dd1fc <_strtod_r+0x9dc>
   dd1d6:	4b8d      	ldr	r3, [pc, #564]	; (dd40c <_strtod_r+0xbec>)
   dd1d8:	4630      	mov	r0, r6
   dd1da:	4639      	mov	r1, r7
   dd1dc:	2200      	movs	r2, #0
   dd1de:	f7fe fda9 	bl	dbd34 <__aeabi_dmul>
   dd1e2:	9b07      	ldr	r3, [sp, #28]
   dd1e4:	4606      	mov	r6, r0
   dd1e6:	460f      	mov	r7, r1
   dd1e8:	b923      	cbnz	r3, dd1f4 <_strtod_r+0x9d4>
   dd1ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dd1ee:	900e      	str	r0, [sp, #56]	; 0x38
   dd1f0:	930f      	str	r3, [sp, #60]	; 0x3c
   dd1f2:	e001      	b.n	dd1f8 <_strtod_r+0x9d8>
   dd1f4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   dd1f8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   dd1fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dd200:	0d1b      	lsrs	r3, r3, #20
   dd202:	051b      	lsls	r3, r3, #20
   dd204:	9306      	str	r3, [sp, #24]
   dd206:	9a06      	ldr	r2, [sp, #24]
   dd208:	4b81      	ldr	r3, [pc, #516]	; (dd410 <_strtod_r+0xbf0>)
   dd20a:	429a      	cmp	r2, r3
   dd20c:	d12b      	bne.n	dd266 <_strtod_r+0xa46>
   dd20e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   dd212:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dd216:	ec4b ab10 	vmov	d0, sl, fp
   dd21a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   dd21e:	f001 fb13 	bl	de848 <__ulp>
   dd222:	4640      	mov	r0, r8
   dd224:	ec53 2b10 	vmov	r2, r3, d0
   dd228:	4649      	mov	r1, r9
   dd22a:	f7fe fd83 	bl	dbd34 <__aeabi_dmul>
   dd22e:	4652      	mov	r2, sl
   dd230:	465b      	mov	r3, fp
   dd232:	f7fe fbcd 	bl	db9d0 <__adddf3>
   dd236:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dd23a:	0d1b      	lsrs	r3, r3, #20
   dd23c:	4a75      	ldr	r2, [pc, #468]	; (dd414 <_strtod_r+0xbf4>)
   dd23e:	051b      	lsls	r3, r3, #20
   dd240:	4293      	cmp	r3, r2
   dd242:	4682      	mov	sl, r0
   dd244:	d90c      	bls.n	dd260 <_strtod_r+0xa40>
   dd246:	4b74      	ldr	r3, [pc, #464]	; (dd418 <_strtod_r+0xbf8>)
   dd248:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dd24a:	429a      	cmp	r2, r3
   dd24c:	d103      	bne.n	dd256 <_strtod_r+0xa36>
   dd24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dd250:	3301      	adds	r3, #1
   dd252:	f43f ad2c 	beq.w	dccae <_strtod_r+0x48e>
   dd256:	f8df b1c0 	ldr.w	fp, [pc, #448]	; dd418 <_strtod_r+0xbf8>
   dd25a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dd25e:	e072      	b.n	dd346 <_strtod_r+0xb26>
   dd260:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   dd264:	e038      	b.n	dd2d8 <_strtod_r+0xab8>
   dd266:	9b03      	ldr	r3, [sp, #12]
   dd268:	b333      	cbz	r3, dd2b8 <_strtod_r+0xa98>
   dd26a:	9b06      	ldr	r3, [sp, #24]
   dd26c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dd270:	d822      	bhi.n	dd2b8 <_strtod_r+0xa98>
   dd272:	a35d      	add	r3, pc, #372	; (adr r3, dd3e8 <_strtod_r+0xbc8>)
   dd274:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd278:	4630      	mov	r0, r6
   dd27a:	4639      	mov	r1, r7
   dd27c:	f7fe ffd6 	bl	dc22c <__aeabi_dcmple>
   dd280:	b1a8      	cbz	r0, dd2ae <_strtod_r+0xa8e>
   dd282:	4639      	mov	r1, r7
   dd284:	4630      	mov	r0, r6
   dd286:	f7ff f817 	bl	dc2b8 <__aeabi_d2uiz>
   dd28a:	2800      	cmp	r0, #0
   dd28c:	bf08      	it	eq
   dd28e:	2001      	moveq	r0, #1
   dd290:	f7fe fcda 	bl	dbc48 <__aeabi_ui2d>
   dd294:	9b07      	ldr	r3, [sp, #28]
   dd296:	4606      	mov	r6, r0
   dd298:	460f      	mov	r7, r1
   dd29a:	b923      	cbnz	r3, dd2a6 <_strtod_r+0xa86>
   dd29c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dd2a0:	9010      	str	r0, [sp, #64]	; 0x40
   dd2a2:	9311      	str	r3, [sp, #68]	; 0x44
   dd2a4:	e001      	b.n	dd2aa <_strtod_r+0xa8a>
   dd2a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   dd2aa:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   dd2ae:	9a06      	ldr	r2, [sp, #24]
   dd2b0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   dd2b4:	ebc2 0903 	rsb	r9, r2, r3
   dd2b8:	ed9d 0b08 	vldr	d0, [sp, #32]
   dd2bc:	f001 fac4 	bl	de848 <__ulp>
   dd2c0:	4640      	mov	r0, r8
   dd2c2:	ec53 2b10 	vmov	r2, r3, d0
   dd2c6:	4649      	mov	r1, r9
   dd2c8:	f7fe fd34 	bl	dbd34 <__aeabi_dmul>
   dd2cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   dd2d0:	f7fe fb7e 	bl	db9d0 <__adddf3>
   dd2d4:	4682      	mov	sl, r0
   dd2d6:	468b      	mov	fp, r1
   dd2d8:	9b03      	ldr	r3, [sp, #12]
   dd2da:	bba3      	cbnz	r3, dd346 <_strtod_r+0xb26>
   dd2dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dd2e0:	0d1b      	lsrs	r3, r3, #20
   dd2e2:	9a06      	ldr	r2, [sp, #24]
   dd2e4:	051b      	lsls	r3, r3, #20
   dd2e6:	429a      	cmp	r2, r3
   dd2e8:	46d8      	mov	r8, fp
   dd2ea:	d12c      	bne.n	dd346 <_strtod_r+0xb26>
   dd2ec:	4639      	mov	r1, r7
   dd2ee:	4630      	mov	r0, r6
   dd2f0:	f7fe ffba 	bl	dc268 <__aeabi_d2iz>
   dd2f4:	f7fe fcb8 	bl	dbc68 <__aeabi_i2d>
   dd2f8:	460b      	mov	r3, r1
   dd2fa:	4602      	mov	r2, r0
   dd2fc:	4639      	mov	r1, r7
   dd2fe:	4630      	mov	r0, r6
   dd300:	f7fe fb64 	bl	db9cc <__aeabi_dsub>
   dd304:	9b07      	ldr	r3, [sp, #28]
   dd306:	4606      	mov	r6, r0
   dd308:	460f      	mov	r7, r1
   dd30a:	b92b      	cbnz	r3, dd318 <_strtod_r+0xaf8>
   dd30c:	f1ba 0f00 	cmp.w	sl, #0
   dd310:	d102      	bne.n	dd318 <_strtod_r+0xaf8>
   dd312:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd316:	b183      	cbz	r3, dd33a <_strtod_r+0xb1a>
   dd318:	a335      	add	r3, pc, #212	; (adr r3, dd3f0 <_strtod_r+0xbd0>)
   dd31a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd31e:	4630      	mov	r0, r6
   dd320:	4639      	mov	r1, r7
   dd322:	f7fe ff79 	bl	dc218 <__aeabi_dcmplt>
   dd326:	2800      	cmp	r0, #0
   dd328:	d131      	bne.n	dd38e <_strtod_r+0xb6e>
   dd32a:	a333      	add	r3, pc, #204	; (adr r3, dd3f8 <_strtod_r+0xbd8>)
   dd32c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd330:	4630      	mov	r0, r6
   dd332:	4639      	mov	r1, r7
   dd334:	f7fe ff8e 	bl	dc254 <__aeabi_dcmpgt>
   dd338:	e004      	b.n	dd344 <_strtod_r+0xb24>
   dd33a:	a331      	add	r3, pc, #196	; (adr r3, dd400 <_strtod_r+0xbe0>)
   dd33c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd340:	f7fe ff6a 	bl	dc218 <__aeabi_dcmplt>
   dd344:	bb18      	cbnz	r0, dd38e <_strtod_r+0xb6e>
   dd346:	9918      	ldr	r1, [sp, #96]	; 0x60
   dd348:	9802      	ldr	r0, [sp, #8]
   dd34a:	f000 ffec 	bl	de326 <_Bfree>
   dd34e:	9904      	ldr	r1, [sp, #16]
   dd350:	9802      	ldr	r0, [sp, #8]
   dd352:	f000 ffe8 	bl	de326 <_Bfree>
   dd356:	4629      	mov	r1, r5
   dd358:	9802      	ldr	r0, [sp, #8]
   dd35a:	f000 ffe4 	bl	de326 <_Bfree>
   dd35e:	4621      	mov	r1, r4
   dd360:	9802      	ldr	r0, [sp, #8]
   dd362:	f000 ffe0 	bl	de326 <_Bfree>
   dd366:	e56d      	b.n	dce44 <_strtod_r+0x624>
   dd368:	9b03      	ldr	r3, [sp, #12]
   dd36a:	b183      	cbz	r3, dd38e <_strtod_r+0xb6e>
   dd36c:	4b2b      	ldr	r3, [pc, #172]	; (dd41c <_strtod_r+0xbfc>)
   dd36e:	930b      	str	r3, [sp, #44]	; 0x2c
   dd370:	2300      	movs	r3, #0
   dd372:	930a      	str	r3, [sp, #40]	; 0x28
   dd374:	4650      	mov	r0, sl
   dd376:	4659      	mov	r1, fp
   dd378:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dd37c:	f7fe fcda 	bl	dbd34 <__aeabi_dmul>
   dd380:	4682      	mov	sl, r0
   dd382:	468b      	mov	fp, r1
   dd384:	b919      	cbnz	r1, dd38e <_strtod_r+0xb6e>
   dd386:	b910      	cbnz	r0, dd38e <_strtod_r+0xb6e>
   dd388:	9a02      	ldr	r2, [sp, #8]
   dd38a:	2322      	movs	r3, #34	; 0x22
   dd38c:	6013      	str	r3, [r2, #0]
   dd38e:	9918      	ldr	r1, [sp, #96]	; 0x60
   dd390:	9802      	ldr	r0, [sp, #8]
   dd392:	f000 ffc8 	bl	de326 <_Bfree>
   dd396:	9904      	ldr	r1, [sp, #16]
   dd398:	9802      	ldr	r0, [sp, #8]
   dd39a:	f000 ffc4 	bl	de326 <_Bfree>
   dd39e:	4629      	mov	r1, r5
   dd3a0:	9802      	ldr	r0, [sp, #8]
   dd3a2:	f000 ffc0 	bl	de326 <_Bfree>
   dd3a6:	9905      	ldr	r1, [sp, #20]
   dd3a8:	9802      	ldr	r0, [sp, #8]
   dd3aa:	f000 ffbc 	bl	de326 <_Bfree>
   dd3ae:	4621      	mov	r1, r4
   dd3b0:	9802      	ldr	r0, [sp, #8]
   dd3b2:	f000 ffb8 	bl	de326 <_Bfree>
   dd3b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dd3b8:	b113      	cbz	r3, dd3c0 <_strtod_r+0xba0>
   dd3ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   dd3bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd3be:	6013      	str	r3, [r2, #0]
   dd3c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dd3c2:	b11b      	cbz	r3, dd3cc <_strtod_r+0xbac>
   dd3c4:	4652      	mov	r2, sl
   dd3c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   dd3ca:	e007      	b.n	dd3dc <_strtod_r+0xbbc>
   dd3cc:	4652      	mov	r2, sl
   dd3ce:	465b      	mov	r3, fp
   dd3d0:	e004      	b.n	dd3dc <_strtod_r+0xbbc>
   dd3d2:	2500      	movs	r5, #0
   dd3d4:	462a      	mov	r2, r5
   dd3d6:	2101      	movs	r1, #1
   dd3d8:	f7ff bb41 	b.w	dca5e <_strtod_r+0x23e>
   dd3dc:	ec43 2b10 	vmov	d0, r2, r3
   dd3e0:	b01d      	add	sp, #116	; 0x74
   dd3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd3e6:	bf00      	nop
   dd3e8:	ffc00000 	.word	0xffc00000
   dd3ec:	41dfffff 	.word	0x41dfffff
   dd3f0:	94a03595 	.word	0x94a03595
   dd3f4:	3fdfffff 	.word	0x3fdfffff
   dd3f8:	35afe535 	.word	0x35afe535
   dd3fc:	3fe00000 	.word	0x3fe00000
   dd400:	94a03595 	.word	0x94a03595
   dd404:	3fcfffff 	.word	0x3fcfffff
   dd408:	3ff00000 	.word	0x3ff00000
   dd40c:	3fe00000 	.word	0x3fe00000
   dd410:	7fe00000 	.word	0x7fe00000
   dd414:	7c9fffff 	.word	0x7c9fffff
   dd418:	7fefffff 	.word	0x7fefffff
   dd41c:	39500000 	.word	0x39500000

000dd420 <strtod>:
   dd420:	4b02      	ldr	r3, [pc, #8]	; (dd42c <strtod+0xc>)
   dd422:	460a      	mov	r2, r1
   dd424:	4601      	mov	r1, r0
   dd426:	6818      	ldr	r0, [r3, #0]
   dd428:	f7ff b9fa 	b.w	dc820 <_strtod_r>
   dd42c:	2003d3e0 	.word	0x2003d3e0

000dd430 <_strtol_r>:
   dd430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd434:	4680      	mov	r8, r0
   dd436:	4840      	ldr	r0, [pc, #256]	; (dd538 <_strtol_r+0x108>)
   dd438:	f8d0 9000 	ldr.w	r9, [r0]
   dd43c:	460f      	mov	r7, r1
   dd43e:	463d      	mov	r5, r7
   dd440:	f815 4b01 	ldrb.w	r4, [r5], #1
   dd444:	eb09 0004 	add.w	r0, r9, r4
   dd448:	7840      	ldrb	r0, [r0, #1]
   dd44a:	f000 0008 	and.w	r0, r0, #8
   dd44e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   dd452:	b108      	cbz	r0, dd458 <_strtol_r+0x28>
   dd454:	462f      	mov	r7, r5
   dd456:	e7f2      	b.n	dd43e <_strtol_r+0xe>
   dd458:	2c2d      	cmp	r4, #45	; 0x2d
   dd45a:	d103      	bne.n	dd464 <_strtol_r+0x34>
   dd45c:	1cbd      	adds	r5, r7, #2
   dd45e:	787c      	ldrb	r4, [r7, #1]
   dd460:	2601      	movs	r6, #1
   dd462:	e003      	b.n	dd46c <_strtol_r+0x3c>
   dd464:	2c2b      	cmp	r4, #43	; 0x2b
   dd466:	bf04      	itt	eq
   dd468:	787c      	ldrbeq	r4, [r7, #1]
   dd46a:	1cbd      	addeq	r5, r7, #2
   dd46c:	b113      	cbz	r3, dd474 <_strtol_r+0x44>
   dd46e:	2b10      	cmp	r3, #16
   dd470:	d10a      	bne.n	dd488 <_strtol_r+0x58>
   dd472:	e05b      	b.n	dd52c <_strtol_r+0xfc>
   dd474:	2c30      	cmp	r4, #48	; 0x30
   dd476:	d157      	bne.n	dd528 <_strtol_r+0xf8>
   dd478:	7828      	ldrb	r0, [r5, #0]
   dd47a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dd47e:	2858      	cmp	r0, #88	; 0x58
   dd480:	d14d      	bne.n	dd51e <_strtol_r+0xee>
   dd482:	786c      	ldrb	r4, [r5, #1]
   dd484:	2310      	movs	r3, #16
   dd486:	3502      	adds	r5, #2
   dd488:	2e00      	cmp	r6, #0
   dd48a:	bf14      	ite	ne
   dd48c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   dd490:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   dd494:	2700      	movs	r7, #0
   dd496:	fbbc faf3 	udiv	sl, ip, r3
   dd49a:	4638      	mov	r0, r7
   dd49c:	fb03 cc1a 	mls	ip, r3, sl, ip
   dd4a0:	eb09 0e04 	add.w	lr, r9, r4
   dd4a4:	f89e e001 	ldrb.w	lr, [lr, #1]
   dd4a8:	f01e 0f04 	tst.w	lr, #4
   dd4ac:	d001      	beq.n	dd4b2 <_strtol_r+0x82>
   dd4ae:	3c30      	subs	r4, #48	; 0x30
   dd4b0:	e00b      	b.n	dd4ca <_strtol_r+0x9a>
   dd4b2:	f01e 0e03 	ands.w	lr, lr, #3
   dd4b6:	d01b      	beq.n	dd4f0 <_strtol_r+0xc0>
   dd4b8:	f1be 0f01 	cmp.w	lr, #1
   dd4bc:	bf0c      	ite	eq
   dd4be:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dd4c2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dd4c6:	ebce 0404 	rsb	r4, lr, r4
   dd4ca:	42a3      	cmp	r3, r4
   dd4cc:	dd10      	ble.n	dd4f0 <_strtol_r+0xc0>
   dd4ce:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   dd4d2:	d00a      	beq.n	dd4ea <_strtol_r+0xba>
   dd4d4:	4550      	cmp	r0, sl
   dd4d6:	d806      	bhi.n	dd4e6 <_strtol_r+0xb6>
   dd4d8:	d101      	bne.n	dd4de <_strtol_r+0xae>
   dd4da:	4564      	cmp	r4, ip
   dd4dc:	dc03      	bgt.n	dd4e6 <_strtol_r+0xb6>
   dd4de:	fb03 4000 	mla	r0, r3, r0, r4
   dd4e2:	2701      	movs	r7, #1
   dd4e4:	e001      	b.n	dd4ea <_strtol_r+0xba>
   dd4e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dd4ea:	f815 4b01 	ldrb.w	r4, [r5], #1
   dd4ee:	e7d7      	b.n	dd4a0 <_strtol_r+0x70>
   dd4f0:	1c7b      	adds	r3, r7, #1
   dd4f2:	d10c      	bne.n	dd50e <_strtol_r+0xde>
   dd4f4:	2e00      	cmp	r6, #0
   dd4f6:	f04f 0322 	mov.w	r3, #34	; 0x22
   dd4fa:	bf14      	ite	ne
   dd4fc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dd500:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dd504:	f8c8 3000 	str.w	r3, [r8]
   dd508:	b92a      	cbnz	r2, dd516 <_strtol_r+0xe6>
   dd50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd50e:	b106      	cbz	r6, dd512 <_strtol_r+0xe2>
   dd510:	4240      	negs	r0, r0
   dd512:	b172      	cbz	r2, dd532 <_strtol_r+0x102>
   dd514:	b107      	cbz	r7, dd518 <_strtol_r+0xe8>
   dd516:	1e69      	subs	r1, r5, #1
   dd518:	6011      	str	r1, [r2, #0]
   dd51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd51e:	2430      	movs	r4, #48	; 0x30
   dd520:	2b00      	cmp	r3, #0
   dd522:	d1b1      	bne.n	dd488 <_strtol_r+0x58>
   dd524:	2308      	movs	r3, #8
   dd526:	e7af      	b.n	dd488 <_strtol_r+0x58>
   dd528:	230a      	movs	r3, #10
   dd52a:	e7ad      	b.n	dd488 <_strtol_r+0x58>
   dd52c:	2c30      	cmp	r4, #48	; 0x30
   dd52e:	d0a3      	beq.n	dd478 <_strtol_r+0x48>
   dd530:	e7aa      	b.n	dd488 <_strtol_r+0x58>
   dd532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd536:	bf00      	nop
   dd538:	2003d37c 	.word	0x2003d37c

000dd53c <strtol>:
   dd53c:	4613      	mov	r3, r2
   dd53e:	460a      	mov	r2, r1
   dd540:	4601      	mov	r1, r0
   dd542:	4802      	ldr	r0, [pc, #8]	; (dd54c <strtol+0x10>)
   dd544:	6800      	ldr	r0, [r0, #0]
   dd546:	f7ff bf73 	b.w	dd430 <_strtol_r>
   dd54a:	bf00      	nop
   dd54c:	2003d3e0 	.word	0x2003d3e0

000dd550 <_strtoul_r>:
   dd550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd554:	4680      	mov	r8, r0
   dd556:	483c      	ldr	r0, [pc, #240]	; (dd648 <_strtoul_r+0xf8>)
   dd558:	f8d0 9000 	ldr.w	r9, [r0]
   dd55c:	460e      	mov	r6, r1
   dd55e:	4635      	mov	r5, r6
   dd560:	f815 4b01 	ldrb.w	r4, [r5], #1
   dd564:	eb09 0004 	add.w	r0, r9, r4
   dd568:	7840      	ldrb	r0, [r0, #1]
   dd56a:	f000 0008 	and.w	r0, r0, #8
   dd56e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dd572:	b108      	cbz	r0, dd578 <_strtoul_r+0x28>
   dd574:	462e      	mov	r6, r5
   dd576:	e7f2      	b.n	dd55e <_strtoul_r+0xe>
   dd578:	2c2d      	cmp	r4, #45	; 0x2d
   dd57a:	d103      	bne.n	dd584 <_strtoul_r+0x34>
   dd57c:	1cb5      	adds	r5, r6, #2
   dd57e:	7874      	ldrb	r4, [r6, #1]
   dd580:	2701      	movs	r7, #1
   dd582:	e003      	b.n	dd58c <_strtoul_r+0x3c>
   dd584:	2c2b      	cmp	r4, #43	; 0x2b
   dd586:	bf04      	itt	eq
   dd588:	7874      	ldrbeq	r4, [r6, #1]
   dd58a:	1cb5      	addeq	r5, r6, #2
   dd58c:	b113      	cbz	r3, dd594 <_strtoul_r+0x44>
   dd58e:	2b10      	cmp	r3, #16
   dd590:	d10a      	bne.n	dd5a8 <_strtoul_r+0x58>
   dd592:	e053      	b.n	dd63c <_strtoul_r+0xec>
   dd594:	2c30      	cmp	r4, #48	; 0x30
   dd596:	d14f      	bne.n	dd638 <_strtoul_r+0xe8>
   dd598:	7828      	ldrb	r0, [r5, #0]
   dd59a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dd59e:	2858      	cmp	r0, #88	; 0x58
   dd5a0:	d145      	bne.n	dd62e <_strtoul_r+0xde>
   dd5a2:	786c      	ldrb	r4, [r5, #1]
   dd5a4:	2310      	movs	r3, #16
   dd5a6:	3502      	adds	r5, #2
   dd5a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dd5ac:	2600      	movs	r6, #0
   dd5ae:	fbbc fcf3 	udiv	ip, ip, r3
   dd5b2:	fb03 fa0c 	mul.w	sl, r3, ip
   dd5b6:	ea6f 0a0a 	mvn.w	sl, sl
   dd5ba:	4630      	mov	r0, r6
   dd5bc:	eb09 0e04 	add.w	lr, r9, r4
   dd5c0:	f89e e001 	ldrb.w	lr, [lr, #1]
   dd5c4:	f01e 0f04 	tst.w	lr, #4
   dd5c8:	d001      	beq.n	dd5ce <_strtoul_r+0x7e>
   dd5ca:	3c30      	subs	r4, #48	; 0x30
   dd5cc:	e00b      	b.n	dd5e6 <_strtoul_r+0x96>
   dd5ce:	f01e 0e03 	ands.w	lr, lr, #3
   dd5d2:	d01a      	beq.n	dd60a <_strtoul_r+0xba>
   dd5d4:	f1be 0f01 	cmp.w	lr, #1
   dd5d8:	bf0c      	ite	eq
   dd5da:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dd5de:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dd5e2:	ebce 0404 	rsb	r4, lr, r4
   dd5e6:	42a3      	cmp	r3, r4
   dd5e8:	dd0f      	ble.n	dd60a <_strtoul_r+0xba>
   dd5ea:	2e00      	cmp	r6, #0
   dd5ec:	db08      	blt.n	dd600 <_strtoul_r+0xb0>
   dd5ee:	4560      	cmp	r0, ip
   dd5f0:	d806      	bhi.n	dd600 <_strtoul_r+0xb0>
   dd5f2:	d101      	bne.n	dd5f8 <_strtoul_r+0xa8>
   dd5f4:	4554      	cmp	r4, sl
   dd5f6:	dc03      	bgt.n	dd600 <_strtoul_r+0xb0>
   dd5f8:	fb03 4000 	mla	r0, r3, r0, r4
   dd5fc:	2601      	movs	r6, #1
   dd5fe:	e001      	b.n	dd604 <_strtoul_r+0xb4>
   dd600:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dd604:	f815 4b01 	ldrb.w	r4, [r5], #1
   dd608:	e7d8      	b.n	dd5bc <_strtoul_r+0x6c>
   dd60a:	2e00      	cmp	r6, #0
   dd60c:	da07      	bge.n	dd61e <_strtoul_r+0xce>
   dd60e:	2322      	movs	r3, #34	; 0x22
   dd610:	f8c8 3000 	str.w	r3, [r8]
   dd614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dd618:	b92a      	cbnz	r2, dd626 <_strtoul_r+0xd6>
   dd61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd61e:	b107      	cbz	r7, dd622 <_strtoul_r+0xd2>
   dd620:	4240      	negs	r0, r0
   dd622:	b172      	cbz	r2, dd642 <_strtoul_r+0xf2>
   dd624:	b106      	cbz	r6, dd628 <_strtoul_r+0xd8>
   dd626:	1e69      	subs	r1, r5, #1
   dd628:	6011      	str	r1, [r2, #0]
   dd62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd62e:	2430      	movs	r4, #48	; 0x30
   dd630:	2b00      	cmp	r3, #0
   dd632:	d1b9      	bne.n	dd5a8 <_strtoul_r+0x58>
   dd634:	2308      	movs	r3, #8
   dd636:	e7b7      	b.n	dd5a8 <_strtoul_r+0x58>
   dd638:	230a      	movs	r3, #10
   dd63a:	e7b5      	b.n	dd5a8 <_strtoul_r+0x58>
   dd63c:	2c30      	cmp	r4, #48	; 0x30
   dd63e:	d0ab      	beq.n	dd598 <_strtoul_r+0x48>
   dd640:	e7b2      	b.n	dd5a8 <_strtoul_r+0x58>
   dd642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd646:	bf00      	nop
   dd648:	2003d37c 	.word	0x2003d37c

000dd64c <strtoul>:
   dd64c:	4613      	mov	r3, r2
   dd64e:	460a      	mov	r2, r1
   dd650:	4601      	mov	r1, r0
   dd652:	4802      	ldr	r0, [pc, #8]	; (dd65c <strtoul+0x10>)
   dd654:	6800      	ldr	r0, [r0, #0]
   dd656:	f7ff bf7b 	b.w	dd550 <_strtoul_r>
   dd65a:	bf00      	nop
   dd65c:	2003d3e0 	.word	0x2003d3e0

000dd660 <__tzcalc_limits>:
   dd660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd664:	4604      	mov	r4, r0
   dd666:	f000 fd8d 	bl	de184 <__gettzinfo>
   dd66a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dd66e:	429c      	cmp	r4, r3
   dd670:	f340 8096 	ble.w	dd7a0 <__tzcalc_limits+0x140>
   dd674:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dd678:	18e3      	adds	r3, r4, r3
   dd67a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dd67e:	109b      	asrs	r3, r3, #2
   dd680:	f240 156d 	movw	r5, #365	; 0x16d
   dd684:	fb05 3502 	mla	r5, r5, r2, r3
   dd688:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dd68c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dd690:	fb92 f3f3 	sdiv	r3, r2, r3
   dd694:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dd698:	442b      	add	r3, r5
   dd69a:	18a5      	adds	r5, r4, r2
   dd69c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dd6a0:	fb95 f5f2 	sdiv	r5, r5, r2
   dd6a4:	441d      	add	r5, r3
   dd6a6:	2364      	movs	r3, #100	; 0x64
   dd6a8:	fb94 f7f2 	sdiv	r7, r4, r2
   dd6ac:	fb94 f6f3 	sdiv	r6, r4, r3
   dd6b0:	fb02 4717 	mls	r7, r2, r7, r4
   dd6b4:	fb03 4616 	mls	r6, r3, r6, r4
   dd6b8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dd6bc:	fab7 fe87 	clz	lr, r7
   dd6c0:	9301      	str	r3, [sp, #4]
   dd6c2:	f004 0303 	and.w	r3, r4, #3
   dd6c6:	6044      	str	r4, [r0, #4]
   dd6c8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dd6cc:	4601      	mov	r1, r0
   dd6ce:	9300      	str	r3, [sp, #0]
   dd6d0:	f04f 0c07 	mov.w	ip, #7
   dd6d4:	7a0b      	ldrb	r3, [r1, #8]
   dd6d6:	2b4a      	cmp	r3, #74	; 0x4a
   dd6d8:	d10e      	bne.n	dd6f8 <__tzcalc_limits+0x98>
   dd6da:	694b      	ldr	r3, [r1, #20]
   dd6dc:	9a00      	ldr	r2, [sp, #0]
   dd6de:	18ec      	adds	r4, r5, r3
   dd6e0:	b902      	cbnz	r2, dd6e4 <__tzcalc_limits+0x84>
   dd6e2:	b906      	cbnz	r6, dd6e6 <__tzcalc_limits+0x86>
   dd6e4:	b927      	cbnz	r7, dd6f0 <__tzcalc_limits+0x90>
   dd6e6:	2b3b      	cmp	r3, #59	; 0x3b
   dd6e8:	bfd4      	ite	le
   dd6ea:	2300      	movle	r3, #0
   dd6ec:	2301      	movgt	r3, #1
   dd6ee:	e000      	b.n	dd6f2 <__tzcalc_limits+0x92>
   dd6f0:	2300      	movs	r3, #0
   dd6f2:	4423      	add	r3, r4
   dd6f4:	3b01      	subs	r3, #1
   dd6f6:	e03f      	b.n	dd778 <__tzcalc_limits+0x118>
   dd6f8:	2b44      	cmp	r3, #68	; 0x44
   dd6fa:	d102      	bne.n	dd702 <__tzcalc_limits+0xa2>
   dd6fc:	694b      	ldr	r3, [r1, #20]
   dd6fe:	442b      	add	r3, r5
   dd700:	e03a      	b.n	dd778 <__tzcalc_limits+0x118>
   dd702:	9b00      	ldr	r3, [sp, #0]
   dd704:	b92b      	cbnz	r3, dd712 <__tzcalc_limits+0xb2>
   dd706:	2e00      	cmp	r6, #0
   dd708:	bf0c      	ite	eq
   dd70a:	46f0      	moveq	r8, lr
   dd70c:	f04f 0801 	movne.w	r8, #1
   dd710:	e000      	b.n	dd714 <__tzcalc_limits+0xb4>
   dd712:	46f0      	mov	r8, lr
   dd714:	4b24      	ldr	r3, [pc, #144]	; (dd7a8 <__tzcalc_limits+0x148>)
   dd716:	68cc      	ldr	r4, [r1, #12]
   dd718:	2230      	movs	r2, #48	; 0x30
   dd71a:	fb02 3808 	mla	r8, r2, r8, r3
   dd71e:	f1a8 0a04 	sub.w	sl, r8, #4
   dd722:	46a9      	mov	r9, r5
   dd724:	2301      	movs	r3, #1
   dd726:	42a3      	cmp	r3, r4
   dd728:	da04      	bge.n	dd734 <__tzcalc_limits+0xd4>
   dd72a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dd72e:	3301      	adds	r3, #1
   dd730:	44d9      	add	r9, fp
   dd732:	e7f8      	b.n	dd726 <__tzcalc_limits+0xc6>
   dd734:	f109 0304 	add.w	r3, r9, #4
   dd738:	fb93 fbfc 	sdiv	fp, r3, ip
   dd73c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dd740:	2c01      	cmp	r4, #1
   dd742:	ebca 0a03 	rsb	sl, sl, r3
   dd746:	694b      	ldr	r3, [r1, #20]
   dd748:	bfb8      	it	lt
   dd74a:	2401      	movlt	r4, #1
   dd74c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dd750:	ebb3 0a0a 	subs.w	sl, r3, sl
   dd754:	690b      	ldr	r3, [r1, #16]
   dd756:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   dd75a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   dd75e:	bf48      	it	mi
   dd760:	f10a 0a07 	addmi.w	sl, sl, #7
   dd764:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dd768:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dd76c:	4453      	add	r3, sl
   dd76e:	42a3      	cmp	r3, r4
   dd770:	db01      	blt.n	dd776 <__tzcalc_limits+0x116>
   dd772:	3b07      	subs	r3, #7
   dd774:	e7fb      	b.n	dd76e <__tzcalc_limits+0x10e>
   dd776:	444b      	add	r3, r9
   dd778:	698c      	ldr	r4, [r1, #24]
   dd77a:	4a0c      	ldr	r2, [pc, #48]	; (dd7ac <__tzcalc_limits+0x14c>)
   dd77c:	fb02 4303 	mla	r3, r2, r3, r4
   dd780:	6a0c      	ldr	r4, [r1, #32]
   dd782:	4423      	add	r3, r4
   dd784:	f841 3f1c 	str.w	r3, [r1, #28]!
   dd788:	9b01      	ldr	r3, [sp, #4]
   dd78a:	4299      	cmp	r1, r3
   dd78c:	d1a2      	bne.n	dd6d4 <__tzcalc_limits+0x74>
   dd78e:	69c3      	ldr	r3, [r0, #28]
   dd790:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dd792:	4293      	cmp	r3, r2
   dd794:	bfac      	ite	ge
   dd796:	2300      	movge	r3, #0
   dd798:	2301      	movlt	r3, #1
   dd79a:	6003      	str	r3, [r0, #0]
   dd79c:	2001      	movs	r0, #1
   dd79e:	e000      	b.n	dd7a2 <__tzcalc_limits+0x142>
   dd7a0:	2000      	movs	r0, #0
   dd7a2:	b003      	add	sp, #12
   dd7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd7a8:	000df628 	.word	0x000df628
   dd7ac:	00015180 	.word	0x00015180

000dd7b0 <__tz_lock>:
   dd7b0:	4770      	bx	lr

000dd7b2 <__tz_unlock>:
   dd7b2:	4770      	bx	lr

000dd7b4 <_tzset_unlocked>:
   dd7b4:	4b01      	ldr	r3, [pc, #4]	; (dd7bc <_tzset_unlocked+0x8>)
   dd7b6:	6818      	ldr	r0, [r3, #0]
   dd7b8:	f000 b802 	b.w	dd7c0 <_tzset_unlocked_r>
   dd7bc:	2003d3e0 	.word	0x2003d3e0

000dd7c0 <_tzset_unlocked_r>:
   dd7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd7c4:	b08d      	sub	sp, #52	; 0x34
   dd7c6:	4607      	mov	r7, r0
   dd7c8:	f000 fcdc 	bl	de184 <__gettzinfo>
   dd7cc:	49b0      	ldr	r1, [pc, #704]	; (dda90 <_tzset_unlocked_r+0x2d0>)
   dd7ce:	4eb1      	ldr	r6, [pc, #708]	; (dda94 <_tzset_unlocked_r+0x2d4>)
   dd7d0:	4604      	mov	r4, r0
   dd7d2:	4638      	mov	r0, r7
   dd7d4:	f000 fcce 	bl	de174 <_getenv_r>
   dd7d8:	4605      	mov	r5, r0
   dd7da:	b960      	cbnz	r0, dd7f6 <_tzset_unlocked_r+0x36>
   dd7dc:	4bae      	ldr	r3, [pc, #696]	; (dda98 <_tzset_unlocked_r+0x2d8>)
   dd7de:	4aaf      	ldr	r2, [pc, #700]	; (dda9c <_tzset_unlocked_r+0x2dc>)
   dd7e0:	6018      	str	r0, [r3, #0]
   dd7e2:	4baf      	ldr	r3, [pc, #700]	; (ddaa0 <_tzset_unlocked_r+0x2e0>)
   dd7e4:	6018      	str	r0, [r3, #0]
   dd7e6:	4baf      	ldr	r3, [pc, #700]	; (ddaa4 <_tzset_unlocked_r+0x2e4>)
   dd7e8:	6830      	ldr	r0, [r6, #0]
   dd7ea:	601a      	str	r2, [r3, #0]
   dd7ec:	605a      	str	r2, [r3, #4]
   dd7ee:	f7fa fc29 	bl	d8044 <free>
   dd7f2:	6035      	str	r5, [r6, #0]
   dd7f4:	e148      	b.n	dda88 <_tzset_unlocked_r+0x2c8>
   dd7f6:	6831      	ldr	r1, [r6, #0]
   dd7f8:	b979      	cbnz	r1, dd81a <_tzset_unlocked_r+0x5a>
   dd7fa:	6830      	ldr	r0, [r6, #0]
   dd7fc:	f7fa fc22 	bl	d8044 <free>
   dd800:	4628      	mov	r0, r5
   dd802:	f7fe ff84 	bl	dc70e <strlen>
   dd806:	1c41      	adds	r1, r0, #1
   dd808:	4638      	mov	r0, r7
   dd80a:	f7fa fc43 	bl	d8094 <_malloc_r>
   dd80e:	6030      	str	r0, [r6, #0]
   dd810:	b148      	cbz	r0, dd826 <_tzset_unlocked_r+0x66>
   dd812:	4629      	mov	r1, r5
   dd814:	f7fe ff73 	bl	dc6fe <strcpy>
   dd818:	e005      	b.n	dd826 <_tzset_unlocked_r+0x66>
   dd81a:	f7fe ff66 	bl	dc6ea <strcmp>
   dd81e:	2800      	cmp	r0, #0
   dd820:	f000 8132 	beq.w	dda88 <_tzset_unlocked_r+0x2c8>
   dd824:	e7e9      	b.n	dd7fa <_tzset_unlocked_r+0x3a>
   dd826:	782b      	ldrb	r3, [r5, #0]
   dd828:	4a9f      	ldr	r2, [pc, #636]	; (ddaa8 <_tzset_unlocked_r+0x2e8>)
   dd82a:	49a0      	ldr	r1, [pc, #640]	; (ddaac <_tzset_unlocked_r+0x2ec>)
   dd82c:	2b3a      	cmp	r3, #58	; 0x3a
   dd82e:	bf08      	it	eq
   dd830:	3501      	addeq	r5, #1
   dd832:	ae0a      	add	r6, sp, #40	; 0x28
   dd834:	4633      	mov	r3, r6
   dd836:	4628      	mov	r0, r5
   dd838:	f7fa fc14 	bl	d8064 <siscanf>
   dd83c:	2800      	cmp	r0, #0
   dd83e:	f340 8123 	ble.w	dda88 <_tzset_unlocked_r+0x2c8>
   dd842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dd844:	18ef      	adds	r7, r5, r3
   dd846:	5ceb      	ldrb	r3, [r5, r3]
   dd848:	2b2d      	cmp	r3, #45	; 0x2d
   dd84a:	d103      	bne.n	dd854 <_tzset_unlocked_r+0x94>
   dd84c:	3701      	adds	r7, #1
   dd84e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   dd852:	e003      	b.n	dd85c <_tzset_unlocked_r+0x9c>
   dd854:	2b2b      	cmp	r3, #43	; 0x2b
   dd856:	bf08      	it	eq
   dd858:	3701      	addeq	r7, #1
   dd85a:	2501      	movs	r5, #1
   dd85c:	f10d 0a20 	add.w	sl, sp, #32
   dd860:	f10d 0b1e 	add.w	fp, sp, #30
   dd864:	f04f 0800 	mov.w	r8, #0
   dd868:	9603      	str	r6, [sp, #12]
   dd86a:	f8cd a008 	str.w	sl, [sp, #8]
   dd86e:	9601      	str	r6, [sp, #4]
   dd870:	f8cd b000 	str.w	fp, [sp]
   dd874:	4633      	mov	r3, r6
   dd876:	aa07      	add	r2, sp, #28
   dd878:	498d      	ldr	r1, [pc, #564]	; (ddab0 <_tzset_unlocked_r+0x2f0>)
   dd87a:	f8ad 801e 	strh.w	r8, [sp, #30]
   dd87e:	4638      	mov	r0, r7
   dd880:	f8ad 8020 	strh.w	r8, [sp, #32]
   dd884:	f7fa fbee 	bl	d8064 <siscanf>
   dd888:	4540      	cmp	r0, r8
   dd88a:	f340 80fd 	ble.w	dda88 <_tzset_unlocked_r+0x2c8>
   dd88e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dd892:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dd896:	f8df 9224 	ldr.w	r9, [pc, #548]	; ddabc <_tzset_unlocked_r+0x2fc>
   dd89a:	213c      	movs	r1, #60	; 0x3c
   dd89c:	fb01 3302 	mla	r3, r1, r2, r3
   dd8a0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dd8a4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dd8a8:	fb01 3302 	mla	r3, r1, r2, r3
   dd8ac:	435d      	muls	r5, r3
   dd8ae:	6225      	str	r5, [r4, #32]
   dd8b0:	4d7c      	ldr	r5, [pc, #496]	; (ddaa4 <_tzset_unlocked_r+0x2e4>)
   dd8b2:	4b7d      	ldr	r3, [pc, #500]	; (ddaa8 <_tzset_unlocked_r+0x2e8>)
   dd8b4:	602b      	str	r3, [r5, #0]
   dd8b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dd8b8:	497c      	ldr	r1, [pc, #496]	; (ddaac <_tzset_unlocked_r+0x2ec>)
   dd8ba:	441f      	add	r7, r3
   dd8bc:	464a      	mov	r2, r9
   dd8be:	4633      	mov	r3, r6
   dd8c0:	4638      	mov	r0, r7
   dd8c2:	f7fa fbcf 	bl	d8064 <siscanf>
   dd8c6:	4540      	cmp	r0, r8
   dd8c8:	dc08      	bgt.n	dd8dc <_tzset_unlocked_r+0x11c>
   dd8ca:	682b      	ldr	r3, [r5, #0]
   dd8cc:	606b      	str	r3, [r5, #4]
   dd8ce:	4b72      	ldr	r3, [pc, #456]	; (dda98 <_tzset_unlocked_r+0x2d8>)
   dd8d0:	6a22      	ldr	r2, [r4, #32]
   dd8d2:	601a      	str	r2, [r3, #0]
   dd8d4:	4b72      	ldr	r3, [pc, #456]	; (ddaa0 <_tzset_unlocked_r+0x2e0>)
   dd8d6:	f8c3 8000 	str.w	r8, [r3]
   dd8da:	e0d5      	b.n	dda88 <_tzset_unlocked_r+0x2c8>
   dd8dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dd8de:	f8c5 9004 	str.w	r9, [r5, #4]
   dd8e2:	18fd      	adds	r5, r7, r3
   dd8e4:	5cfb      	ldrb	r3, [r7, r3]
   dd8e6:	2b2d      	cmp	r3, #45	; 0x2d
   dd8e8:	d103      	bne.n	dd8f2 <_tzset_unlocked_r+0x132>
   dd8ea:	3501      	adds	r5, #1
   dd8ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dd8f0:	e003      	b.n	dd8fa <_tzset_unlocked_r+0x13a>
   dd8f2:	2b2b      	cmp	r3, #43	; 0x2b
   dd8f4:	bf08      	it	eq
   dd8f6:	3501      	addeq	r5, #1
   dd8f8:	2701      	movs	r7, #1
   dd8fa:	2300      	movs	r3, #0
   dd8fc:	f8ad 301c 	strh.w	r3, [sp, #28]
   dd900:	f8ad 301e 	strh.w	r3, [sp, #30]
   dd904:	f8ad 3020 	strh.w	r3, [sp, #32]
   dd908:	930a      	str	r3, [sp, #40]	; 0x28
   dd90a:	9603      	str	r6, [sp, #12]
   dd90c:	f8cd a008 	str.w	sl, [sp, #8]
   dd910:	9601      	str	r6, [sp, #4]
   dd912:	f8cd b000 	str.w	fp, [sp]
   dd916:	4633      	mov	r3, r6
   dd918:	aa07      	add	r2, sp, #28
   dd91a:	4965      	ldr	r1, [pc, #404]	; (ddab0 <_tzset_unlocked_r+0x2f0>)
   dd91c:	4628      	mov	r0, r5
   dd91e:	f7fa fba1 	bl	d8064 <siscanf>
   dd922:	2800      	cmp	r0, #0
   dd924:	dc04      	bgt.n	dd930 <_tzset_unlocked_r+0x170>
   dd926:	6a23      	ldr	r3, [r4, #32]
   dd928:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dd92c:	63e3      	str	r3, [r4, #60]	; 0x3c
   dd92e:	e00e      	b.n	dd94e <_tzset_unlocked_r+0x18e>
   dd930:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dd934:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dd938:	213c      	movs	r1, #60	; 0x3c
   dd93a:	fb01 3302 	mla	r3, r1, r2, r3
   dd93e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dd942:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dd946:	fb01 3302 	mla	r3, r1, r2, r3
   dd94a:	435f      	muls	r7, r3
   dd94c:	63e7      	str	r7, [r4, #60]	; 0x3c
   dd94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dd950:	4627      	mov	r7, r4
   dd952:	441d      	add	r5, r3
   dd954:	f04f 0900 	mov.w	r9, #0
   dd958:	782b      	ldrb	r3, [r5, #0]
   dd95a:	2b2c      	cmp	r3, #44	; 0x2c
   dd95c:	bf08      	it	eq
   dd95e:	3501      	addeq	r5, #1
   dd960:	f895 8000 	ldrb.w	r8, [r5]
   dd964:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dd968:	d126      	bne.n	dd9b8 <_tzset_unlocked_r+0x1f8>
   dd96a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dd96e:	9302      	str	r3, [sp, #8]
   dd970:	ab09      	add	r3, sp, #36	; 0x24
   dd972:	9300      	str	r3, [sp, #0]
   dd974:	9603      	str	r6, [sp, #12]
   dd976:	9601      	str	r6, [sp, #4]
   dd978:	4633      	mov	r3, r6
   dd97a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dd97e:	494d      	ldr	r1, [pc, #308]	; (ddab4 <_tzset_unlocked_r+0x2f4>)
   dd980:	4628      	mov	r0, r5
   dd982:	f7fa fb6f 	bl	d8064 <siscanf>
   dd986:	2803      	cmp	r0, #3
   dd988:	d17e      	bne.n	dda88 <_tzset_unlocked_r+0x2c8>
   dd98a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dd98e:	1e4b      	subs	r3, r1, #1
   dd990:	2b0b      	cmp	r3, #11
   dd992:	d879      	bhi.n	dda88 <_tzset_unlocked_r+0x2c8>
   dd994:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dd998:	1e53      	subs	r3, r2, #1
   dd99a:	2b04      	cmp	r3, #4
   dd99c:	d874      	bhi.n	dda88 <_tzset_unlocked_r+0x2c8>
   dd99e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dd9a2:	2b06      	cmp	r3, #6
   dd9a4:	d870      	bhi.n	dda88 <_tzset_unlocked_r+0x2c8>
   dd9a6:	f887 8008 	strb.w	r8, [r7, #8]
   dd9aa:	60f9      	str	r1, [r7, #12]
   dd9ac:	613a      	str	r2, [r7, #16]
   dd9ae:	617b      	str	r3, [r7, #20]
   dd9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dd9b2:	eb05 0803 	add.w	r8, r5, r3
   dd9b6:	e02a      	b.n	dda0e <_tzset_unlocked_r+0x24e>
   dd9b8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dd9bc:	bf06      	itte	eq
   dd9be:	3501      	addeq	r5, #1
   dd9c0:	4643      	moveq	r3, r8
   dd9c2:	2344      	movne	r3, #68	; 0x44
   dd9c4:	220a      	movs	r2, #10
   dd9c6:	a90b      	add	r1, sp, #44	; 0x2c
   dd9c8:	4628      	mov	r0, r5
   dd9ca:	9305      	str	r3, [sp, #20]
   dd9cc:	f7ff fe3e 	bl	dd64c <strtoul>
   dd9d0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dd9d4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dd9d8:	4545      	cmp	r5, r8
   dd9da:	9b05      	ldr	r3, [sp, #20]
   dd9dc:	d114      	bne.n	dda08 <_tzset_unlocked_r+0x248>
   dd9de:	234d      	movs	r3, #77	; 0x4d
   dd9e0:	f1b9 0f00 	cmp.w	r9, #0
   dd9e4:	d107      	bne.n	dd9f6 <_tzset_unlocked_r+0x236>
   dd9e6:	7223      	strb	r3, [r4, #8]
   dd9e8:	2303      	movs	r3, #3
   dd9ea:	60e3      	str	r3, [r4, #12]
   dd9ec:	2302      	movs	r3, #2
   dd9ee:	6123      	str	r3, [r4, #16]
   dd9f0:	f8c4 9014 	str.w	r9, [r4, #20]
   dd9f4:	e00b      	b.n	dda0e <_tzset_unlocked_r+0x24e>
   dd9f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dd9fa:	230b      	movs	r3, #11
   dd9fc:	62a3      	str	r3, [r4, #40]	; 0x28
   dd9fe:	2301      	movs	r3, #1
   dda00:	62e3      	str	r3, [r4, #44]	; 0x2c
   dda02:	2300      	movs	r3, #0
   dda04:	6323      	str	r3, [r4, #48]	; 0x30
   dda06:	e002      	b.n	dda0e <_tzset_unlocked_r+0x24e>
   dda08:	b280      	uxth	r0, r0
   dda0a:	723b      	strb	r3, [r7, #8]
   dda0c:	6178      	str	r0, [r7, #20]
   dda0e:	2302      	movs	r3, #2
   dda10:	f8ad 301c 	strh.w	r3, [sp, #28]
   dda14:	2300      	movs	r3, #0
   dda16:	f8ad 301e 	strh.w	r3, [sp, #30]
   dda1a:	f8ad 3020 	strh.w	r3, [sp, #32]
   dda1e:	930a      	str	r3, [sp, #40]	; 0x28
   dda20:	f898 3000 	ldrb.w	r3, [r8]
   dda24:	2b2f      	cmp	r3, #47	; 0x2f
   dda26:	d10b      	bne.n	dda40 <_tzset_unlocked_r+0x280>
   dda28:	9603      	str	r6, [sp, #12]
   dda2a:	f8cd a008 	str.w	sl, [sp, #8]
   dda2e:	9601      	str	r6, [sp, #4]
   dda30:	f8cd b000 	str.w	fp, [sp]
   dda34:	4633      	mov	r3, r6
   dda36:	aa07      	add	r2, sp, #28
   dda38:	491f      	ldr	r1, [pc, #124]	; (ddab8 <_tzset_unlocked_r+0x2f8>)
   dda3a:	4640      	mov	r0, r8
   dda3c:	f7fa fb12 	bl	d8064 <siscanf>
   dda40:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dda44:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dda48:	213c      	movs	r1, #60	; 0x3c
   dda4a:	fb01 3302 	mla	r3, r1, r2, r3
   dda4e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dda52:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dda56:	fb01 3302 	mla	r3, r1, r2, r3
   dda5a:	61bb      	str	r3, [r7, #24]
   dda5c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dda5e:	f109 0901 	add.w	r9, r9, #1
   dda62:	f1b9 0f02 	cmp.w	r9, #2
   dda66:	4445      	add	r5, r8
   dda68:	f107 071c 	add.w	r7, r7, #28
   dda6c:	f47f af74 	bne.w	dd958 <_tzset_unlocked_r+0x198>
   dda70:	6860      	ldr	r0, [r4, #4]
   dda72:	f7ff fdf5 	bl	dd660 <__tzcalc_limits>
   dda76:	4b08      	ldr	r3, [pc, #32]	; (dda98 <_tzset_unlocked_r+0x2d8>)
   dda78:	6a22      	ldr	r2, [r4, #32]
   dda7a:	601a      	str	r2, [r3, #0]
   dda7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dda7e:	1a9b      	subs	r3, r3, r2
   dda80:	4a07      	ldr	r2, [pc, #28]	; (ddaa0 <_tzset_unlocked_r+0x2e0>)
   dda82:	bf18      	it	ne
   dda84:	2301      	movne	r3, #1
   dda86:	6013      	str	r3, [r2, #0]
   dda88:	b00d      	add	sp, #52	; 0x34
   dda8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dda8e:	bf00      	nop
   dda90:	000df6e8 	.word	0x000df6e8
   dda94:	2003e7e0 	.word	0x2003e7e0
   dda98:	2003e7e8 	.word	0x2003e7e8
   dda9c:	000df6eb 	.word	0x000df6eb
   ddaa0:	2003e7e4 	.word	0x2003e7e4
   ddaa4:	2003d41c 	.word	0x2003d41c
   ddaa8:	2003e7d3 	.word	0x2003e7d3
   ddaac:	000df6ef 	.word	0x000df6ef
   ddab0:	000df712 	.word	0x000df712
   ddab4:	000df6fe 	.word	0x000df6fe
   ddab8:	000df711 	.word	0x000df711
   ddabc:	2003e7c8 	.word	0x2003e7c8

000ddac0 <rshift>:
   ddac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   ddac2:	6906      	ldr	r6, [r0, #16]
   ddac4:	114b      	asrs	r3, r1, #5
   ddac6:	42b3      	cmp	r3, r6
   ddac8:	f100 0514 	add.w	r5, r0, #20
   ddacc:	da27      	bge.n	ddb1e <rshift+0x5e>
   ddace:	f011 011f 	ands.w	r1, r1, #31
   ddad2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   ddad6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   ddada:	d101      	bne.n	ddae0 <rshift+0x20>
   ddadc:	4629      	mov	r1, r5
   ddade:	e016      	b.n	ddb0e <rshift+0x4e>
   ddae0:	1d14      	adds	r4, r2, #4
   ddae2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   ddae6:	f1c1 0e20 	rsb	lr, r1, #32
   ddaea:	40ca      	lsrs	r2, r1
   ddaec:	462b      	mov	r3, r5
   ddaee:	42b4      	cmp	r4, r6
   ddaf0:	d209      	bcs.n	ddb06 <rshift+0x46>
   ddaf2:	6827      	ldr	r7, [r4, #0]
   ddaf4:	fa07 f70e 	lsl.w	r7, r7, lr
   ddaf8:	433a      	orrs	r2, r7
   ddafa:	f843 2b04 	str.w	r2, [r3], #4
   ddafe:	f854 2b04 	ldr.w	r2, [r4], #4
   ddb02:	40ca      	lsrs	r2, r1
   ddb04:	e7f3      	b.n	ddaee <rshift+0x2e>
   ddb06:	601a      	str	r2, [r3, #0]
   ddb08:	b152      	cbz	r2, ddb20 <rshift+0x60>
   ddb0a:	3304      	adds	r3, #4
   ddb0c:	e008      	b.n	ddb20 <rshift+0x60>
   ddb0e:	42b2      	cmp	r2, r6
   ddb10:	460b      	mov	r3, r1
   ddb12:	d205      	bcs.n	ddb20 <rshift+0x60>
   ddb14:	f852 3b04 	ldr.w	r3, [r2], #4
   ddb18:	f841 3b04 	str.w	r3, [r1], #4
   ddb1c:	e7f7      	b.n	ddb0e <rshift+0x4e>
   ddb1e:	462b      	mov	r3, r5
   ddb20:	1b5b      	subs	r3, r3, r5
   ddb22:	109b      	asrs	r3, r3, #2
   ddb24:	6103      	str	r3, [r0, #16]
   ddb26:	b903      	cbnz	r3, ddb2a <rshift+0x6a>
   ddb28:	6143      	str	r3, [r0, #20]
   ddb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ddb2c <__hexdig_fun>:
   ddb2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ddb30:	2b09      	cmp	r3, #9
   ddb32:	d801      	bhi.n	ddb38 <__hexdig_fun+0xc>
   ddb34:	3820      	subs	r0, #32
   ddb36:	e00a      	b.n	ddb4e <__hexdig_fun+0x22>
   ddb38:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ddb3c:	2b05      	cmp	r3, #5
   ddb3e:	d801      	bhi.n	ddb44 <__hexdig_fun+0x18>
   ddb40:	3847      	subs	r0, #71	; 0x47
   ddb42:	e004      	b.n	ddb4e <__hexdig_fun+0x22>
   ddb44:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ddb48:	2b05      	cmp	r3, #5
   ddb4a:	d802      	bhi.n	ddb52 <__hexdig_fun+0x26>
   ddb4c:	3827      	subs	r0, #39	; 0x27
   ddb4e:	b2c0      	uxtb	r0, r0
   ddb50:	4770      	bx	lr
   ddb52:	2000      	movs	r0, #0
   ddb54:	4770      	bx	lr

000ddb56 <__gethex>:
   ddb56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddb5a:	b08b      	sub	sp, #44	; 0x2c
   ddb5c:	468a      	mov	sl, r1
   ddb5e:	4690      	mov	r8, r2
   ddb60:	9306      	str	r3, [sp, #24]
   ddb62:	9002      	str	r0, [sp, #8]
   ddb64:	f7fe fd30 	bl	dc5c8 <_localeconv_r>
   ddb68:	6803      	ldr	r3, [r0, #0]
   ddb6a:	9303      	str	r3, [sp, #12]
   ddb6c:	4618      	mov	r0, r3
   ddb6e:	f7fe fdce 	bl	dc70e <strlen>
   ddb72:	9b03      	ldr	r3, [sp, #12]
   ddb74:	9001      	str	r0, [sp, #4]
   ddb76:	4403      	add	r3, r0
   ddb78:	f04f 0b00 	mov.w	fp, #0
   ddb7c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   ddb80:	9307      	str	r3, [sp, #28]
   ddb82:	f8da 3000 	ldr.w	r3, [sl]
   ddb86:	3302      	adds	r3, #2
   ddb88:	461f      	mov	r7, r3
   ddb8a:	f813 0b01 	ldrb.w	r0, [r3], #1
   ddb8e:	2830      	cmp	r0, #48	; 0x30
   ddb90:	d102      	bne.n	ddb98 <__gethex+0x42>
   ddb92:	f10b 0b01 	add.w	fp, fp, #1
   ddb96:	e7f7      	b.n	ddb88 <__gethex+0x32>
   ddb98:	f7ff ffc8 	bl	ddb2c <__hexdig_fun>
   ddb9c:	4604      	mov	r4, r0
   ddb9e:	b9e0      	cbnz	r0, ddbda <__gethex+0x84>
   ddba0:	9a01      	ldr	r2, [sp, #4]
   ddba2:	9903      	ldr	r1, [sp, #12]
   ddba4:	4638      	mov	r0, r7
   ddba6:	f7fe fdcf 	bl	dc748 <strncmp>
   ddbaa:	2800      	cmp	r0, #0
   ddbac:	d134      	bne.n	ddc18 <__gethex+0xc2>
   ddbae:	9b01      	ldr	r3, [sp, #4]
   ddbb0:	5cf8      	ldrb	r0, [r7, r3]
   ddbb2:	18fe      	adds	r6, r7, r3
   ddbb4:	f7ff ffba 	bl	ddb2c <__hexdig_fun>
   ddbb8:	b380      	cbz	r0, ddc1c <__gethex+0xc6>
   ddbba:	4633      	mov	r3, r6
   ddbbc:	7818      	ldrb	r0, [r3, #0]
   ddbbe:	2830      	cmp	r0, #48	; 0x30
   ddbc0:	461f      	mov	r7, r3
   ddbc2:	f103 0301 	add.w	r3, r3, #1
   ddbc6:	d0f9      	beq.n	ddbbc <__gethex+0x66>
   ddbc8:	f7ff ffb0 	bl	ddb2c <__hexdig_fun>
   ddbcc:	fab0 f580 	clz	r5, r0
   ddbd0:	096d      	lsrs	r5, r5, #5
   ddbd2:	4634      	mov	r4, r6
   ddbd4:	f04f 0b01 	mov.w	fp, #1
   ddbd8:	e001      	b.n	ddbde <__gethex+0x88>
   ddbda:	2500      	movs	r5, #0
   ddbdc:	462c      	mov	r4, r5
   ddbde:	463a      	mov	r2, r7
   ddbe0:	4616      	mov	r6, r2
   ddbe2:	3201      	adds	r2, #1
   ddbe4:	7830      	ldrb	r0, [r6, #0]
   ddbe6:	f7ff ffa1 	bl	ddb2c <__hexdig_fun>
   ddbea:	2800      	cmp	r0, #0
   ddbec:	d1f8      	bne.n	ddbe0 <__gethex+0x8a>
   ddbee:	9a01      	ldr	r2, [sp, #4]
   ddbf0:	9903      	ldr	r1, [sp, #12]
   ddbf2:	4630      	mov	r0, r6
   ddbf4:	f7fe fda8 	bl	dc748 <strncmp>
   ddbf8:	b950      	cbnz	r0, ddc10 <__gethex+0xba>
   ddbfa:	b954      	cbnz	r4, ddc12 <__gethex+0xbc>
   ddbfc:	9b01      	ldr	r3, [sp, #4]
   ddbfe:	18f4      	adds	r4, r6, r3
   ddc00:	4622      	mov	r2, r4
   ddc02:	4616      	mov	r6, r2
   ddc04:	3201      	adds	r2, #1
   ddc06:	7830      	ldrb	r0, [r6, #0]
   ddc08:	f7ff ff90 	bl	ddb2c <__hexdig_fun>
   ddc0c:	2800      	cmp	r0, #0
   ddc0e:	d1f8      	bne.n	ddc02 <__gethex+0xac>
   ddc10:	b134      	cbz	r4, ddc20 <__gethex+0xca>
   ddc12:	1ba4      	subs	r4, r4, r6
   ddc14:	00a4      	lsls	r4, r4, #2
   ddc16:	e003      	b.n	ddc20 <__gethex+0xca>
   ddc18:	463e      	mov	r6, r7
   ddc1a:	e000      	b.n	ddc1e <__gethex+0xc8>
   ddc1c:	4604      	mov	r4, r0
   ddc1e:	2501      	movs	r5, #1
   ddc20:	7833      	ldrb	r3, [r6, #0]
   ddc22:	2b50      	cmp	r3, #80	; 0x50
   ddc24:	d001      	beq.n	ddc2a <__gethex+0xd4>
   ddc26:	2b70      	cmp	r3, #112	; 0x70
   ddc28:	d12a      	bne.n	ddc80 <__gethex+0x12a>
   ddc2a:	7873      	ldrb	r3, [r6, #1]
   ddc2c:	2b2b      	cmp	r3, #43	; 0x2b
   ddc2e:	d008      	beq.n	ddc42 <__gethex+0xec>
   ddc30:	2b2d      	cmp	r3, #45	; 0x2d
   ddc32:	d003      	beq.n	ddc3c <__gethex+0xe6>
   ddc34:	1c71      	adds	r1, r6, #1
   ddc36:	f04f 0900 	mov.w	r9, #0
   ddc3a:	e005      	b.n	ddc48 <__gethex+0xf2>
   ddc3c:	f04f 0901 	mov.w	r9, #1
   ddc40:	e001      	b.n	ddc46 <__gethex+0xf0>
   ddc42:	f04f 0900 	mov.w	r9, #0
   ddc46:	1cb1      	adds	r1, r6, #2
   ddc48:	7808      	ldrb	r0, [r1, #0]
   ddc4a:	f7ff ff6f 	bl	ddb2c <__hexdig_fun>
   ddc4e:	1e43      	subs	r3, r0, #1
   ddc50:	b2db      	uxtb	r3, r3
   ddc52:	2b18      	cmp	r3, #24
   ddc54:	d814      	bhi.n	ddc80 <__gethex+0x12a>
   ddc56:	f1a0 0210 	sub.w	r2, r0, #16
   ddc5a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   ddc5e:	f7ff ff65 	bl	ddb2c <__hexdig_fun>
   ddc62:	1e43      	subs	r3, r0, #1
   ddc64:	b2db      	uxtb	r3, r3
   ddc66:	2b18      	cmp	r3, #24
   ddc68:	d804      	bhi.n	ddc74 <__gethex+0x11e>
   ddc6a:	230a      	movs	r3, #10
   ddc6c:	fb03 0202 	mla	r2, r3, r2, r0
   ddc70:	3a10      	subs	r2, #16
   ddc72:	e7f2      	b.n	ddc5a <__gethex+0x104>
   ddc74:	f1b9 0f00 	cmp.w	r9, #0
   ddc78:	d000      	beq.n	ddc7c <__gethex+0x126>
   ddc7a:	4252      	negs	r2, r2
   ddc7c:	4414      	add	r4, r2
   ddc7e:	e000      	b.n	ddc82 <__gethex+0x12c>
   ddc80:	4631      	mov	r1, r6
   ddc82:	f8ca 1000 	str.w	r1, [sl]
   ddc86:	b12d      	cbz	r5, ddc94 <__gethex+0x13e>
   ddc88:	f1bb 0f00 	cmp.w	fp, #0
   ddc8c:	bf14      	ite	ne
   ddc8e:	2000      	movne	r0, #0
   ddc90:	2006      	moveq	r0, #6
   ddc92:	e17c      	b.n	ddf8e <__gethex+0x438>
   ddc94:	1bf3      	subs	r3, r6, r7
   ddc96:	3b01      	subs	r3, #1
   ddc98:	4629      	mov	r1, r5
   ddc9a:	2b07      	cmp	r3, #7
   ddc9c:	dd02      	ble.n	ddca4 <__gethex+0x14e>
   ddc9e:	3101      	adds	r1, #1
   ddca0:	105b      	asrs	r3, r3, #1
   ddca2:	e7fa      	b.n	ddc9a <__gethex+0x144>
   ddca4:	9802      	ldr	r0, [sp, #8]
   ddca6:	f000 fb09 	bl	de2bc <_Balloc>
   ddcaa:	9b01      	ldr	r3, [sp, #4]
   ddcac:	f100 0a14 	add.w	sl, r0, #20
   ddcb0:	f04f 0900 	mov.w	r9, #0
   ddcb4:	f1c3 0301 	rsb	r3, r3, #1
   ddcb8:	4605      	mov	r5, r0
   ddcba:	f8cd a010 	str.w	sl, [sp, #16]
   ddcbe:	46cb      	mov	fp, r9
   ddcc0:	9308      	str	r3, [sp, #32]
   ddcc2:	42b7      	cmp	r7, r6
   ddcc4:	d22f      	bcs.n	ddd26 <__gethex+0x1d0>
   ddcc6:	1e73      	subs	r3, r6, #1
   ddcc8:	9305      	str	r3, [sp, #20]
   ddcca:	9a07      	ldr	r2, [sp, #28]
   ddccc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ddcd0:	4293      	cmp	r3, r2
   ddcd2:	d00b      	beq.n	ddcec <__gethex+0x196>
   ddcd4:	f1bb 0f20 	cmp.w	fp, #32
   ddcd8:	d116      	bne.n	ddd08 <__gethex+0x1b2>
   ddcda:	9b04      	ldr	r3, [sp, #16]
   ddcdc:	f8c3 9000 	str.w	r9, [r3]
   ddce0:	3304      	adds	r3, #4
   ddce2:	f04f 0900 	mov.w	r9, #0
   ddce6:	9304      	str	r3, [sp, #16]
   ddce8:	46cb      	mov	fp, r9
   ddcea:	e00d      	b.n	ddd08 <__gethex+0x1b2>
   ddcec:	9b05      	ldr	r3, [sp, #20]
   ddcee:	9a08      	ldr	r2, [sp, #32]
   ddcf0:	4413      	add	r3, r2
   ddcf2:	429f      	cmp	r7, r3
   ddcf4:	d8ee      	bhi.n	ddcd4 <__gethex+0x17e>
   ddcf6:	4618      	mov	r0, r3
   ddcf8:	9a01      	ldr	r2, [sp, #4]
   ddcfa:	9903      	ldr	r1, [sp, #12]
   ddcfc:	9309      	str	r3, [sp, #36]	; 0x24
   ddcfe:	f7fe fd23 	bl	dc748 <strncmp>
   ddd02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ddd04:	b168      	cbz	r0, ddd22 <__gethex+0x1cc>
   ddd06:	e7e5      	b.n	ddcd4 <__gethex+0x17e>
   ddd08:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ddd0c:	f7ff ff0e 	bl	ddb2c <__hexdig_fun>
   ddd10:	f000 000f 	and.w	r0, r0, #15
   ddd14:	fa00 f00b 	lsl.w	r0, r0, fp
   ddd18:	9b05      	ldr	r3, [sp, #20]
   ddd1a:	ea49 0900 	orr.w	r9, r9, r0
   ddd1e:	f10b 0b04 	add.w	fp, fp, #4
   ddd22:	461e      	mov	r6, r3
   ddd24:	e7cd      	b.n	ddcc2 <__gethex+0x16c>
   ddd26:	9804      	ldr	r0, [sp, #16]
   ddd28:	f840 9b04 	str.w	r9, [r0], #4
   ddd2c:	ebca 0000 	rsb	r0, sl, r0
   ddd30:	1080      	asrs	r0, r0, #2
   ddd32:	6128      	str	r0, [r5, #16]
   ddd34:	0147      	lsls	r7, r0, #5
   ddd36:	4648      	mov	r0, r9
   ddd38:	f000 fb85 	bl	de446 <__hi0bits>
   ddd3c:	f8d8 6000 	ldr.w	r6, [r8]
   ddd40:	1a38      	subs	r0, r7, r0
   ddd42:	42b0      	cmp	r0, r6
   ddd44:	dd26      	ble.n	ddd94 <__gethex+0x23e>
   ddd46:	1b87      	subs	r7, r0, r6
   ddd48:	4639      	mov	r1, r7
   ddd4a:	4628      	mov	r0, r5
   ddd4c:	f000 fe83 	bl	dea56 <__any_on>
   ddd50:	b1c8      	cbz	r0, ddd86 <__gethex+0x230>
   ddd52:	1e7b      	subs	r3, r7, #1
   ddd54:	1159      	asrs	r1, r3, #5
   ddd56:	f003 021f 	and.w	r2, r3, #31
   ddd5a:	f04f 0901 	mov.w	r9, #1
   ddd5e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   ddd62:	fa09 f202 	lsl.w	r2, r9, r2
   ddd66:	420a      	tst	r2, r1
   ddd68:	d00e      	beq.n	ddd88 <__gethex+0x232>
   ddd6a:	454b      	cmp	r3, r9
   ddd6c:	dc02      	bgt.n	ddd74 <__gethex+0x21e>
   ddd6e:	f04f 0902 	mov.w	r9, #2
   ddd72:	e009      	b.n	ddd88 <__gethex+0x232>
   ddd74:	1eb9      	subs	r1, r7, #2
   ddd76:	4628      	mov	r0, r5
   ddd78:	f000 fe6d 	bl	dea56 <__any_on>
   ddd7c:	2800      	cmp	r0, #0
   ddd7e:	d0f6      	beq.n	ddd6e <__gethex+0x218>
   ddd80:	f04f 0903 	mov.w	r9, #3
   ddd84:	e000      	b.n	ddd88 <__gethex+0x232>
   ddd86:	4681      	mov	r9, r0
   ddd88:	4639      	mov	r1, r7
   ddd8a:	4628      	mov	r0, r5
   ddd8c:	f7ff fe98 	bl	ddac0 <rshift>
   ddd90:	443c      	add	r4, r7
   ddd92:	e00c      	b.n	dddae <__gethex+0x258>
   ddd94:	da09      	bge.n	dddaa <__gethex+0x254>
   ddd96:	1a37      	subs	r7, r6, r0
   ddd98:	4629      	mov	r1, r5
   ddd9a:	463a      	mov	r2, r7
   ddd9c:	9802      	ldr	r0, [sp, #8]
   ddd9e:	f000 fc87 	bl	de6b0 <__lshift>
   ddda2:	1be4      	subs	r4, r4, r7
   ddda4:	4605      	mov	r5, r0
   ddda6:	f100 0a14 	add.w	sl, r0, #20
   dddaa:	f04f 0900 	mov.w	r9, #0
   dddae:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dddb2:	429c      	cmp	r4, r3
   dddb4:	dd08      	ble.n	dddc8 <__gethex+0x272>
   dddb6:	9802      	ldr	r0, [sp, #8]
   dddb8:	4629      	mov	r1, r5
   dddba:	f000 fab4 	bl	de326 <_Bfree>
   dddbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dddc0:	2300      	movs	r3, #0
   dddc2:	6013      	str	r3, [r2, #0]
   dddc4:	20a3      	movs	r0, #163	; 0xa3
   dddc6:	e0e2      	b.n	ddf8e <__gethex+0x438>
   dddc8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dddcc:	4284      	cmp	r4, r0
   dddce:	da53      	bge.n	dde78 <__gethex+0x322>
   dddd0:	1b04      	subs	r4, r0, r4
   dddd2:	42a6      	cmp	r6, r4
   dddd4:	dc2e      	bgt.n	dde34 <__gethex+0x2de>
   dddd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dddda:	2b02      	cmp	r3, #2
   ddddc:	d01a      	beq.n	dde14 <__gethex+0x2be>
   dddde:	2b03      	cmp	r3, #3
   ddde0:	d01c      	beq.n	dde1c <__gethex+0x2c6>
   ddde2:	2b01      	cmp	r3, #1
   ddde4:	d11d      	bne.n	dde22 <__gethex+0x2cc>
   ddde6:	42a6      	cmp	r6, r4
   ddde8:	d11b      	bne.n	dde22 <__gethex+0x2cc>
   dddea:	2e01      	cmp	r6, #1
   dddec:	dc0b      	bgt.n	dde06 <__gethex+0x2b0>
   dddee:	9a06      	ldr	r2, [sp, #24]
   dddf0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dddf4:	6013      	str	r3, [r2, #0]
   dddf6:	2301      	movs	r3, #1
   dddf8:	612b      	str	r3, [r5, #16]
   dddfa:	f8ca 3000 	str.w	r3, [sl]
   dddfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dde00:	2062      	movs	r0, #98	; 0x62
   dde02:	601d      	str	r5, [r3, #0]
   dde04:	e0c3      	b.n	ddf8e <__gethex+0x438>
   dde06:	1e71      	subs	r1, r6, #1
   dde08:	4628      	mov	r0, r5
   dde0a:	f000 fe24 	bl	dea56 <__any_on>
   dde0e:	2800      	cmp	r0, #0
   dde10:	d1ed      	bne.n	dddee <__gethex+0x298>
   dde12:	e006      	b.n	dde22 <__gethex+0x2cc>
   dde14:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dde16:	2b00      	cmp	r3, #0
   dde18:	d0e9      	beq.n	dddee <__gethex+0x298>
   dde1a:	e002      	b.n	dde22 <__gethex+0x2cc>
   dde1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dde1e:	2b00      	cmp	r3, #0
   dde20:	d1e5      	bne.n	dddee <__gethex+0x298>
   dde22:	9802      	ldr	r0, [sp, #8]
   dde24:	4629      	mov	r1, r5
   dde26:	f000 fa7e 	bl	de326 <_Bfree>
   dde2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dde2c:	2300      	movs	r3, #0
   dde2e:	6013      	str	r3, [r2, #0]
   dde30:	2050      	movs	r0, #80	; 0x50
   dde32:	e0ac      	b.n	ddf8e <__gethex+0x438>
   dde34:	1e67      	subs	r7, r4, #1
   dde36:	f1b9 0f00 	cmp.w	r9, #0
   dde3a:	d106      	bne.n	dde4a <__gethex+0x2f4>
   dde3c:	b13f      	cbz	r7, dde4e <__gethex+0x2f8>
   dde3e:	4639      	mov	r1, r7
   dde40:	4628      	mov	r0, r5
   dde42:	f000 fe08 	bl	dea56 <__any_on>
   dde46:	4681      	mov	r9, r0
   dde48:	e001      	b.n	dde4e <__gethex+0x2f8>
   dde4a:	f04f 0901 	mov.w	r9, #1
   dde4e:	117a      	asrs	r2, r7, #5
   dde50:	2301      	movs	r3, #1
   dde52:	f007 071f 	and.w	r7, r7, #31
   dde56:	fa03 f707 	lsl.w	r7, r3, r7
   dde5a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   dde5e:	4621      	mov	r1, r4
   dde60:	421f      	tst	r7, r3
   dde62:	4628      	mov	r0, r5
   dde64:	bf18      	it	ne
   dde66:	f049 0902 	orrne.w	r9, r9, #2
   dde6a:	1b36      	subs	r6, r6, r4
   dde6c:	f7ff fe28 	bl	ddac0 <rshift>
   dde70:	2702      	movs	r7, #2
   dde72:	f8d8 4004 	ldr.w	r4, [r8, #4]
   dde76:	e000      	b.n	dde7a <__gethex+0x324>
   dde78:	2701      	movs	r7, #1
   dde7a:	f1b9 0f00 	cmp.w	r9, #0
   dde7e:	f000 8081 	beq.w	ddf84 <__gethex+0x42e>
   dde82:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dde86:	2b02      	cmp	r3, #2
   dde88:	d00e      	beq.n	ddea8 <__gethex+0x352>
   dde8a:	2b03      	cmp	r3, #3
   dde8c:	d010      	beq.n	ddeb0 <__gethex+0x35a>
   dde8e:	2b01      	cmp	r3, #1
   dde90:	d176      	bne.n	ddf80 <__gethex+0x42a>
   dde92:	f019 0f02 	tst.w	r9, #2
   dde96:	d073      	beq.n	ddf80 <__gethex+0x42a>
   dde98:	f8da 0000 	ldr.w	r0, [sl]
   dde9c:	ea49 0900 	orr.w	r9, r9, r0
   ddea0:	f019 0f01 	tst.w	r9, #1
   ddea4:	d107      	bne.n	ddeb6 <__gethex+0x360>
   ddea6:	e06b      	b.n	ddf80 <__gethex+0x42a>
   ddea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ddeaa:	f1c3 0301 	rsb	r3, r3, #1
   ddeae:	9315      	str	r3, [sp, #84]	; 0x54
   ddeb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ddeb2:	2b00      	cmp	r3, #0
   ddeb4:	d064      	beq.n	ddf80 <__gethex+0x42a>
   ddeb6:	f8d5 a010 	ldr.w	sl, [r5, #16]
   ddeba:	f105 0314 	add.w	r3, r5, #20
   ddebe:	ea4f 098a 	mov.w	r9, sl, lsl #2
   ddec2:	eb03 0109 	add.w	r1, r3, r9
   ddec6:	2000      	movs	r0, #0
   ddec8:	681a      	ldr	r2, [r3, #0]
   ddeca:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   ddece:	d002      	beq.n	dded6 <__gethex+0x380>
   dded0:	3201      	adds	r2, #1
   dded2:	601a      	str	r2, [r3, #0]
   dded4:	e020      	b.n	ddf18 <__gethex+0x3c2>
   dded6:	f843 0b04 	str.w	r0, [r3], #4
   ddeda:	4299      	cmp	r1, r3
   ddedc:	d8f4      	bhi.n	ddec8 <__gethex+0x372>
   ddede:	68ab      	ldr	r3, [r5, #8]
   ddee0:	459a      	cmp	sl, r3
   ddee2:	db12      	blt.n	ddf0a <__gethex+0x3b4>
   ddee4:	6869      	ldr	r1, [r5, #4]
   ddee6:	9802      	ldr	r0, [sp, #8]
   ddee8:	3101      	adds	r1, #1
   ddeea:	f000 f9e7 	bl	de2bc <_Balloc>
   ddeee:	692a      	ldr	r2, [r5, #16]
   ddef0:	3202      	adds	r2, #2
   ddef2:	f105 010c 	add.w	r1, r5, #12
   ddef6:	4683      	mov	fp, r0
   ddef8:	0092      	lsls	r2, r2, #2
   ddefa:	300c      	adds	r0, #12
   ddefc:	f7fe fb77 	bl	dc5ee <memcpy>
   ddf00:	4629      	mov	r1, r5
   ddf02:	9802      	ldr	r0, [sp, #8]
   ddf04:	f000 fa0f 	bl	de326 <_Bfree>
   ddf08:	465d      	mov	r5, fp
   ddf0a:	692b      	ldr	r3, [r5, #16]
   ddf0c:	1c5a      	adds	r2, r3, #1
   ddf0e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   ddf12:	612a      	str	r2, [r5, #16]
   ddf14:	2201      	movs	r2, #1
   ddf16:	615a      	str	r2, [r3, #20]
   ddf18:	2f02      	cmp	r7, #2
   ddf1a:	f105 0214 	add.w	r2, r5, #20
   ddf1e:	d111      	bne.n	ddf44 <__gethex+0x3ee>
   ddf20:	f8d8 3000 	ldr.w	r3, [r8]
   ddf24:	3b01      	subs	r3, #1
   ddf26:	429e      	cmp	r6, r3
   ddf28:	d127      	bne.n	ddf7a <__gethex+0x424>
   ddf2a:	1171      	asrs	r1, r6, #5
   ddf2c:	2301      	movs	r3, #1
   ddf2e:	f006 061f 	and.w	r6, r6, #31
   ddf32:	fa03 f606 	lsl.w	r6, r3, r6
   ddf36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   ddf3a:	421e      	tst	r6, r3
   ddf3c:	bf0c      	ite	eq
   ddf3e:	2702      	moveq	r7, #2
   ddf40:	2701      	movne	r7, #1
   ddf42:	e01a      	b.n	ddf7a <__gethex+0x424>
   ddf44:	692b      	ldr	r3, [r5, #16]
   ddf46:	459a      	cmp	sl, r3
   ddf48:	da0a      	bge.n	ddf60 <__gethex+0x40a>
   ddf4a:	2101      	movs	r1, #1
   ddf4c:	4628      	mov	r0, r5
   ddf4e:	f7ff fdb7 	bl	ddac0 <rshift>
   ddf52:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ddf56:	3401      	adds	r4, #1
   ddf58:	429c      	cmp	r4, r3
   ddf5a:	f73f af2c 	bgt.w	dddb6 <__gethex+0x260>
   ddf5e:	e00b      	b.n	ddf78 <__gethex+0x422>
   ddf60:	f016 061f 	ands.w	r6, r6, #31
   ddf64:	d008      	beq.n	ddf78 <__gethex+0x422>
   ddf66:	4491      	add	r9, r2
   ddf68:	f1c6 0620 	rsb	r6, r6, #32
   ddf6c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   ddf70:	f000 fa69 	bl	de446 <__hi0bits>
   ddf74:	42b0      	cmp	r0, r6
   ddf76:	dbe8      	blt.n	ddf4a <__gethex+0x3f4>
   ddf78:	2701      	movs	r7, #1
   ddf7a:	f047 0720 	orr.w	r7, r7, #32
   ddf7e:	e001      	b.n	ddf84 <__gethex+0x42e>
   ddf80:	f047 0710 	orr.w	r7, r7, #16
   ddf84:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ddf86:	601d      	str	r5, [r3, #0]
   ddf88:	9b06      	ldr	r3, [sp, #24]
   ddf8a:	4638      	mov	r0, r7
   ddf8c:	601c      	str	r4, [r3, #0]
   ddf8e:	b00b      	add	sp, #44	; 0x2c
   ddf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ddf94 <L_shift>:
   ddf94:	f1c2 0208 	rsb	r2, r2, #8
   ddf98:	0092      	lsls	r2, r2, #2
   ddf9a:	b570      	push	{r4, r5, r6, lr}
   ddf9c:	f1c2 0620 	rsb	r6, r2, #32
   ddfa0:	6843      	ldr	r3, [r0, #4]
   ddfa2:	6805      	ldr	r5, [r0, #0]
   ddfa4:	fa03 f406 	lsl.w	r4, r3, r6
   ddfa8:	432c      	orrs	r4, r5
   ddfaa:	40d3      	lsrs	r3, r2
   ddfac:	6004      	str	r4, [r0, #0]
   ddfae:	f840 3f04 	str.w	r3, [r0, #4]!
   ddfb2:	4288      	cmp	r0, r1
   ddfb4:	d3f4      	bcc.n	ddfa0 <L_shift+0xc>
   ddfb6:	bd70      	pop	{r4, r5, r6, pc}

000ddfb8 <__match>:
   ddfb8:	b530      	push	{r4, r5, lr}
   ddfba:	6803      	ldr	r3, [r0, #0]
   ddfbc:	f811 4b01 	ldrb.w	r4, [r1], #1
   ddfc0:	3301      	adds	r3, #1
   ddfc2:	b14c      	cbz	r4, ddfd8 <__match+0x20>
   ddfc4:	781a      	ldrb	r2, [r3, #0]
   ddfc6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ddfca:	2d19      	cmp	r5, #25
   ddfcc:	bf98      	it	ls
   ddfce:	3220      	addls	r2, #32
   ddfd0:	42a2      	cmp	r2, r4
   ddfd2:	d0f3      	beq.n	ddfbc <__match+0x4>
   ddfd4:	2000      	movs	r0, #0
   ddfd6:	bd30      	pop	{r4, r5, pc}
   ddfd8:	6003      	str	r3, [r0, #0]
   ddfda:	2001      	movs	r0, #1
   ddfdc:	bd30      	pop	{r4, r5, pc}

000ddfde <__hexnan>:
   ddfde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddfe2:	680b      	ldr	r3, [r1, #0]
   ddfe4:	f8d0 b000 	ldr.w	fp, [r0]
   ddfe8:	115e      	asrs	r6, r3, #5
   ddfea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ddfee:	f013 031f 	ands.w	r3, r3, #31
   ddff2:	b085      	sub	sp, #20
   ddff4:	bf18      	it	ne
   ddff6:	3604      	addne	r6, #4
   ddff8:	1f35      	subs	r5, r6, #4
   ddffa:	4617      	mov	r7, r2
   ddffc:	2200      	movs	r2, #0
   ddffe:	4682      	mov	sl, r0
   de000:	9301      	str	r3, [sp, #4]
   de002:	f846 2c04 	str.w	r2, [r6, #-4]
   de006:	46a8      	mov	r8, r5
   de008:	462c      	mov	r4, r5
   de00a:	9200      	str	r2, [sp, #0]
   de00c:	4691      	mov	r9, r2
   de00e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   de012:	2900      	cmp	r1, #0
   de014:	d03c      	beq.n	de090 <__hexnan+0xb2>
   de016:	4608      	mov	r0, r1
   de018:	9203      	str	r2, [sp, #12]
   de01a:	9102      	str	r1, [sp, #8]
   de01c:	f7ff fd86 	bl	ddb2c <__hexdig_fun>
   de020:	9a03      	ldr	r2, [sp, #12]
   de022:	bb00      	cbnz	r0, de066 <__hexnan+0x88>
   de024:	9902      	ldr	r1, [sp, #8]
   de026:	2920      	cmp	r1, #32
   de028:	d816      	bhi.n	de058 <__hexnan+0x7a>
   de02a:	9b00      	ldr	r3, [sp, #0]
   de02c:	4599      	cmp	r9, r3
   de02e:	ddee      	ble.n	de00e <__hexnan+0x30>
   de030:	4544      	cmp	r4, r8
   de032:	d205      	bcs.n	de040 <__hexnan+0x62>
   de034:	2a07      	cmp	r2, #7
   de036:	dc03      	bgt.n	de040 <__hexnan+0x62>
   de038:	4641      	mov	r1, r8
   de03a:	4620      	mov	r0, r4
   de03c:	f7ff ffaa 	bl	ddf94 <L_shift>
   de040:	42bc      	cmp	r4, r7
   de042:	d923      	bls.n	de08c <__hexnan+0xae>
   de044:	2300      	movs	r3, #0
   de046:	f1a4 0804 	sub.w	r8, r4, #4
   de04a:	f844 3c04 	str.w	r3, [r4, #-4]
   de04e:	f8cd 9000 	str.w	r9, [sp]
   de052:	4644      	mov	r4, r8
   de054:	461a      	mov	r2, r3
   de056:	e7da      	b.n	de00e <__hexnan+0x30>
   de058:	2929      	cmp	r1, #41	; 0x29
   de05a:	d148      	bne.n	de0ee <__hexnan+0x110>
   de05c:	f10b 0301 	add.w	r3, fp, #1
   de060:	f8ca 3000 	str.w	r3, [sl]
   de064:	e014      	b.n	de090 <__hexnan+0xb2>
   de066:	3201      	adds	r2, #1
   de068:	2a08      	cmp	r2, #8
   de06a:	f109 0901 	add.w	r9, r9, #1
   de06e:	dd06      	ble.n	de07e <__hexnan+0xa0>
   de070:	42bc      	cmp	r4, r7
   de072:	d9cc      	bls.n	de00e <__hexnan+0x30>
   de074:	2300      	movs	r3, #0
   de076:	f844 3c04 	str.w	r3, [r4, #-4]
   de07a:	2201      	movs	r2, #1
   de07c:	3c04      	subs	r4, #4
   de07e:	6821      	ldr	r1, [r4, #0]
   de080:	f000 000f 	and.w	r0, r0, #15
   de084:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   de088:	6020      	str	r0, [r4, #0]
   de08a:	e7c0      	b.n	de00e <__hexnan+0x30>
   de08c:	2208      	movs	r2, #8
   de08e:	e7be      	b.n	de00e <__hexnan+0x30>
   de090:	f1b9 0f00 	cmp.w	r9, #0
   de094:	d02b      	beq.n	de0ee <__hexnan+0x110>
   de096:	4544      	cmp	r4, r8
   de098:	d205      	bcs.n	de0a6 <__hexnan+0xc8>
   de09a:	2a07      	cmp	r2, #7
   de09c:	dc03      	bgt.n	de0a6 <__hexnan+0xc8>
   de09e:	4641      	mov	r1, r8
   de0a0:	4620      	mov	r0, r4
   de0a2:	f7ff ff77 	bl	ddf94 <L_shift>
   de0a6:	42bc      	cmp	r4, r7
   de0a8:	d90c      	bls.n	de0c4 <__hexnan+0xe6>
   de0aa:	463b      	mov	r3, r7
   de0ac:	f854 2b04 	ldr.w	r2, [r4], #4
   de0b0:	f843 2b04 	str.w	r2, [r3], #4
   de0b4:	42a5      	cmp	r5, r4
   de0b6:	d2f9      	bcs.n	de0ac <__hexnan+0xce>
   de0b8:	2200      	movs	r2, #0
   de0ba:	f843 2b04 	str.w	r2, [r3], #4
   de0be:	429d      	cmp	r5, r3
   de0c0:	d2fb      	bcs.n	de0ba <__hexnan+0xdc>
   de0c2:	e00b      	b.n	de0dc <__hexnan+0xfe>
   de0c4:	9b01      	ldr	r3, [sp, #4]
   de0c6:	b14b      	cbz	r3, de0dc <__hexnan+0xfe>
   de0c8:	f1c3 0220 	rsb	r2, r3, #32
   de0cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   de0d0:	40d3      	lsrs	r3, r2
   de0d2:	f856 2c04 	ldr.w	r2, [r6, #-4]
   de0d6:	4013      	ands	r3, r2
   de0d8:	f846 3c04 	str.w	r3, [r6, #-4]
   de0dc:	682b      	ldr	r3, [r5, #0]
   de0de:	b943      	cbnz	r3, de0f2 <__hexnan+0x114>
   de0e0:	42bd      	cmp	r5, r7
   de0e2:	d102      	bne.n	de0ea <__hexnan+0x10c>
   de0e4:	2301      	movs	r3, #1
   de0e6:	602b      	str	r3, [r5, #0]
   de0e8:	e003      	b.n	de0f2 <__hexnan+0x114>
   de0ea:	3d04      	subs	r5, #4
   de0ec:	e7f6      	b.n	de0dc <__hexnan+0xfe>
   de0ee:	2004      	movs	r0, #4
   de0f0:	e000      	b.n	de0f4 <__hexnan+0x116>
   de0f2:	2005      	movs	r0, #5
   de0f4:	b005      	add	sp, #20
   de0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000de0fc <_findenv_r>:
   de0fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de100:	4607      	mov	r7, r0
   de102:	468b      	mov	fp, r1
   de104:	4690      	mov	r8, r2
   de106:	f000 fcd6 	bl	deab6 <__env_lock>
   de10a:	4b19      	ldr	r3, [pc, #100]	; (de170 <_findenv_r+0x74>)
   de10c:	681d      	ldr	r5, [r3, #0]
   de10e:	469a      	mov	sl, r3
   de110:	b13d      	cbz	r5, de122 <_findenv_r+0x26>
   de112:	465c      	mov	r4, fp
   de114:	4623      	mov	r3, r4
   de116:	f813 2b01 	ldrb.w	r2, [r3], #1
   de11a:	b142      	cbz	r2, de12e <_findenv_r+0x32>
   de11c:	2a3d      	cmp	r2, #61	; 0x3d
   de11e:	461c      	mov	r4, r3
   de120:	d1f8      	bne.n	de114 <_findenv_r+0x18>
   de122:	4638      	mov	r0, r7
   de124:	f000 fcc8 	bl	deab8 <__env_unlock>
   de128:	2000      	movs	r0, #0
   de12a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de12e:	ebcb 0404 	rsb	r4, fp, r4
   de132:	46a9      	mov	r9, r5
   de134:	f859 0b04 	ldr.w	r0, [r9], #4
   de138:	2800      	cmp	r0, #0
   de13a:	d0f2      	beq.n	de122 <_findenv_r+0x26>
   de13c:	4622      	mov	r2, r4
   de13e:	4659      	mov	r1, fp
   de140:	f7fe fb02 	bl	dc748 <strncmp>
   de144:	b988      	cbnz	r0, de16a <_findenv_r+0x6e>
   de146:	f859 3c04 	ldr.w	r3, [r9, #-4]
   de14a:	191e      	adds	r6, r3, r4
   de14c:	5d1b      	ldrb	r3, [r3, r4]
   de14e:	2b3d      	cmp	r3, #61	; 0x3d
   de150:	d10b      	bne.n	de16a <_findenv_r+0x6e>
   de152:	f8da 3000 	ldr.w	r3, [sl]
   de156:	1aed      	subs	r5, r5, r3
   de158:	10ad      	asrs	r5, r5, #2
   de15a:	4638      	mov	r0, r7
   de15c:	f8c8 5000 	str.w	r5, [r8]
   de160:	f000 fcaa 	bl	deab8 <__env_unlock>
   de164:	1c70      	adds	r0, r6, #1
   de166:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de16a:	464d      	mov	r5, r9
   de16c:	e7e1      	b.n	de132 <_findenv_r+0x36>
   de16e:	bf00      	nop
   de170:	2003d464 	.word	0x2003d464

000de174 <_getenv_r>:
   de174:	b507      	push	{r0, r1, r2, lr}
   de176:	aa01      	add	r2, sp, #4
   de178:	f7ff ffc0 	bl	de0fc <_findenv_r>
   de17c:	b003      	add	sp, #12
   de17e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000de184 <__gettzinfo>:
   de184:	4800      	ldr	r0, [pc, #0]	; (de188 <__gettzinfo+0x4>)
   de186:	4770      	bx	lr
   de188:	2003d424 	.word	0x2003d424

000de18c <gmtime_r>:
   de18c:	6802      	ldr	r2, [r0, #0]
   de18e:	4b47      	ldr	r3, [pc, #284]	; (de2ac <gmtime_r+0x120>)
   de190:	b5f0      	push	{r4, r5, r6, r7, lr}
   de192:	fb92 f4f3 	sdiv	r4, r2, r3
   de196:	fb03 2214 	mls	r2, r3, r4, r2
   de19a:	2a00      	cmp	r2, #0
   de19c:	bfbc      	itt	lt
   de19e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   de1a2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   de1a6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   de1aa:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   de1ae:	fb92 f3f0 	sdiv	r3, r2, r0
   de1b2:	fb00 2213 	mls	r2, r0, r3, r2
   de1b6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   de1ba:	bfac      	ite	ge
   de1bc:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   de1c0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   de1c4:	608b      	str	r3, [r1, #8]
   de1c6:	fb92 f3f0 	sdiv	r3, r2, r0
   de1ca:	fb00 2213 	mls	r2, r0, r3, r2
   de1ce:	604b      	str	r3, [r1, #4]
   de1d0:	600a      	str	r2, [r1, #0]
   de1d2:	2307      	movs	r3, #7
   de1d4:	1ce2      	adds	r2, r4, #3
   de1d6:	fb92 f3f3 	sdiv	r3, r2, r3
   de1da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   de1de:	1ad3      	subs	r3, r2, r3
   de1e0:	618b      	str	r3, [r1, #24]
   de1e2:	4b33      	ldr	r3, [pc, #204]	; (de2b0 <gmtime_r+0x124>)
   de1e4:	4d33      	ldr	r5, [pc, #204]	; (de2b4 <gmtime_r+0x128>)
   de1e6:	fb94 f5f5 	sdiv	r5, r4, r5
   de1ea:	fb03 4405 	mla	r4, r3, r5, r4
   de1ee:	f648 62ac 	movw	r2, #36524	; 0x8eac
   de1f2:	fbb4 f2f2 	udiv	r2, r4, r2
   de1f6:	4422      	add	r2, r4
   de1f8:	f240 57b4 	movw	r7, #1460	; 0x5b4
   de1fc:	fbb4 f3f7 	udiv	r3, r4, r7
   de200:	1ad2      	subs	r2, r2, r3
   de202:	482d      	ldr	r0, [pc, #180]	; (de2b8 <gmtime_r+0x12c>)
   de204:	fbb4 f0f0 	udiv	r0, r4, r0
   de208:	f648 6694 	movw	r6, #36500	; 0x8e94
   de20c:	1a13      	subs	r3, r2, r0
   de20e:	fbb3 f6f6 	udiv	r6, r3, r6
   de212:	4434      	add	r4, r6
   de214:	f240 126d 	movw	r2, #365	; 0x16d
   de218:	fbb3 f0f2 	udiv	r0, r3, r2
   de21c:	fbb3 f3f7 	udiv	r3, r3, r7
   de220:	1ae3      	subs	r3, r4, r3
   de222:	fb02 3310 	mls	r3, r2, r0, r3
   de226:	2499      	movs	r4, #153	; 0x99
   de228:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   de22c:	3202      	adds	r2, #2
   de22e:	fbb2 f2f4 	udiv	r2, r2, r4
   de232:	2a0a      	cmp	r2, #10
   de234:	fb04 f402 	mul.w	r4, r4, r2
   de238:	f104 0602 	add.w	r6, r4, #2
   de23c:	f04f 0405 	mov.w	r4, #5
   de240:	fbb6 f4f4 	udiv	r4, r6, r4
   de244:	bf34      	ite	cc
   de246:	2602      	movcc	r6, #2
   de248:	f06f 0609 	mvncs.w	r6, #9
   de24c:	4416      	add	r6, r2
   de24e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   de252:	fb02 0505 	mla	r5, r2, r5, r0
   de256:	1c5f      	adds	r7, r3, #1
   de258:	2e01      	cmp	r6, #1
   de25a:	bf98      	it	ls
   de25c:	3501      	addls	r5, #1
   de25e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   de262:	eba7 0704 	sub.w	r7, r7, r4
   de266:	d302      	bcc.n	de26e <gmtime_r+0xe2>
   de268:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   de26c:	e014      	b.n	de298 <gmtime_r+0x10c>
   de26e:	0782      	lsls	r2, r0, #30
   de270:	d105      	bne.n	de27e <gmtime_r+0xf2>
   de272:	2464      	movs	r4, #100	; 0x64
   de274:	fbb0 f2f4 	udiv	r2, r0, r4
   de278:	fb04 0212 	mls	r2, r4, r2, r0
   de27c:	b94a      	cbnz	r2, de292 <gmtime_r+0x106>
   de27e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   de282:	fbb0 f4f2 	udiv	r4, r0, r2
   de286:	fb02 0014 	mls	r0, r2, r4, r0
   de28a:	fab0 f280 	clz	r2, r0
   de28e:	0952      	lsrs	r2, r2, #5
   de290:	e000      	b.n	de294 <gmtime_r+0x108>
   de292:	2201      	movs	r2, #1
   de294:	333b      	adds	r3, #59	; 0x3b
   de296:	441a      	add	r2, r3
   de298:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   de29c:	2300      	movs	r3, #0
   de29e:	61ca      	str	r2, [r1, #28]
   de2a0:	614d      	str	r5, [r1, #20]
   de2a2:	610e      	str	r6, [r1, #16]
   de2a4:	60cf      	str	r7, [r1, #12]
   de2a6:	620b      	str	r3, [r1, #32]
   de2a8:	4608      	mov	r0, r1
   de2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   de2ac:	00015180 	.word	0x00015180
   de2b0:	fffdc54f 	.word	0xfffdc54f
   de2b4:	00023ab1 	.word	0x00023ab1
   de2b8:	00023ab0 	.word	0x00023ab0

000de2bc <_Balloc>:
   de2bc:	b570      	push	{r4, r5, r6, lr}
   de2be:	6a45      	ldr	r5, [r0, #36]	; 0x24
   de2c0:	4604      	mov	r4, r0
   de2c2:	460e      	mov	r6, r1
   de2c4:	b93d      	cbnz	r5, de2d6 <_Balloc+0x1a>
   de2c6:	2010      	movs	r0, #16
   de2c8:	f7f9 feb4 	bl	d8034 <malloc>
   de2cc:	6260      	str	r0, [r4, #36]	; 0x24
   de2ce:	6045      	str	r5, [r0, #4]
   de2d0:	6085      	str	r5, [r0, #8]
   de2d2:	6005      	str	r5, [r0, #0]
   de2d4:	60c5      	str	r5, [r0, #12]
   de2d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   de2d8:	68eb      	ldr	r3, [r5, #12]
   de2da:	b143      	cbz	r3, de2ee <_Balloc+0x32>
   de2dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   de2de:	68db      	ldr	r3, [r3, #12]
   de2e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   de2e4:	b178      	cbz	r0, de306 <_Balloc+0x4a>
   de2e6:	6802      	ldr	r2, [r0, #0]
   de2e8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   de2ec:	e017      	b.n	de31e <_Balloc+0x62>
   de2ee:	2221      	movs	r2, #33	; 0x21
   de2f0:	2104      	movs	r1, #4
   de2f2:	4620      	mov	r0, r4
   de2f4:	f000 fbd1 	bl	dea9a <_calloc_r>
   de2f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   de2fa:	60e8      	str	r0, [r5, #12]
   de2fc:	68db      	ldr	r3, [r3, #12]
   de2fe:	2b00      	cmp	r3, #0
   de300:	d1ec      	bne.n	de2dc <_Balloc+0x20>
   de302:	2000      	movs	r0, #0
   de304:	bd70      	pop	{r4, r5, r6, pc}
   de306:	2101      	movs	r1, #1
   de308:	fa01 f506 	lsl.w	r5, r1, r6
   de30c:	1d6a      	adds	r2, r5, #5
   de30e:	0092      	lsls	r2, r2, #2
   de310:	4620      	mov	r0, r4
   de312:	f000 fbc2 	bl	dea9a <_calloc_r>
   de316:	2800      	cmp	r0, #0
   de318:	d0f3      	beq.n	de302 <_Balloc+0x46>
   de31a:	6046      	str	r6, [r0, #4]
   de31c:	6085      	str	r5, [r0, #8]
   de31e:	2300      	movs	r3, #0
   de320:	6103      	str	r3, [r0, #16]
   de322:	60c3      	str	r3, [r0, #12]
   de324:	bd70      	pop	{r4, r5, r6, pc}

000de326 <_Bfree>:
   de326:	b570      	push	{r4, r5, r6, lr}
   de328:	6a44      	ldr	r4, [r0, #36]	; 0x24
   de32a:	4606      	mov	r6, r0
   de32c:	460d      	mov	r5, r1
   de32e:	b93c      	cbnz	r4, de340 <_Bfree+0x1a>
   de330:	2010      	movs	r0, #16
   de332:	f7f9 fe7f 	bl	d8034 <malloc>
   de336:	6270      	str	r0, [r6, #36]	; 0x24
   de338:	6044      	str	r4, [r0, #4]
   de33a:	6084      	str	r4, [r0, #8]
   de33c:	6004      	str	r4, [r0, #0]
   de33e:	60c4      	str	r4, [r0, #12]
   de340:	b13d      	cbz	r5, de352 <_Bfree+0x2c>
   de342:	6a73      	ldr	r3, [r6, #36]	; 0x24
   de344:	686a      	ldr	r2, [r5, #4]
   de346:	68db      	ldr	r3, [r3, #12]
   de348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   de34c:	6029      	str	r1, [r5, #0]
   de34e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   de352:	bd70      	pop	{r4, r5, r6, pc}

000de354 <__multadd>:
   de354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   de358:	690d      	ldr	r5, [r1, #16]
   de35a:	461f      	mov	r7, r3
   de35c:	4606      	mov	r6, r0
   de35e:	460c      	mov	r4, r1
   de360:	f101 0e14 	add.w	lr, r1, #20
   de364:	2300      	movs	r3, #0
   de366:	f8de 0000 	ldr.w	r0, [lr]
   de36a:	b281      	uxth	r1, r0
   de36c:	fb02 7101 	mla	r1, r2, r1, r7
   de370:	0c0f      	lsrs	r7, r1, #16
   de372:	0c00      	lsrs	r0, r0, #16
   de374:	fb02 7000 	mla	r0, r2, r0, r7
   de378:	b289      	uxth	r1, r1
   de37a:	3301      	adds	r3, #1
   de37c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   de380:	429d      	cmp	r5, r3
   de382:	ea4f 4710 	mov.w	r7, r0, lsr #16
   de386:	f84e 1b04 	str.w	r1, [lr], #4
   de38a:	dcec      	bgt.n	de366 <__multadd+0x12>
   de38c:	b1d7      	cbz	r7, de3c4 <__multadd+0x70>
   de38e:	68a3      	ldr	r3, [r4, #8]
   de390:	429d      	cmp	r5, r3
   de392:	db12      	blt.n	de3ba <__multadd+0x66>
   de394:	6861      	ldr	r1, [r4, #4]
   de396:	4630      	mov	r0, r6
   de398:	3101      	adds	r1, #1
   de39a:	f7ff ff8f 	bl	de2bc <_Balloc>
   de39e:	6922      	ldr	r2, [r4, #16]
   de3a0:	3202      	adds	r2, #2
   de3a2:	f104 010c 	add.w	r1, r4, #12
   de3a6:	4680      	mov	r8, r0
   de3a8:	0092      	lsls	r2, r2, #2
   de3aa:	300c      	adds	r0, #12
   de3ac:	f7fe f91f 	bl	dc5ee <memcpy>
   de3b0:	4621      	mov	r1, r4
   de3b2:	4630      	mov	r0, r6
   de3b4:	f7ff ffb7 	bl	de326 <_Bfree>
   de3b8:	4644      	mov	r4, r8
   de3ba:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   de3be:	3501      	adds	r5, #1
   de3c0:	615f      	str	r7, [r3, #20]
   de3c2:	6125      	str	r5, [r4, #16]
   de3c4:	4620      	mov	r0, r4
   de3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000de3ca <__s2b>:
   de3ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   de3ce:	460c      	mov	r4, r1
   de3d0:	4615      	mov	r5, r2
   de3d2:	461f      	mov	r7, r3
   de3d4:	2209      	movs	r2, #9
   de3d6:	3308      	adds	r3, #8
   de3d8:	4606      	mov	r6, r0
   de3da:	fb93 f3f2 	sdiv	r3, r3, r2
   de3de:	2100      	movs	r1, #0
   de3e0:	2201      	movs	r2, #1
   de3e2:	429a      	cmp	r2, r3
   de3e4:	da02      	bge.n	de3ec <__s2b+0x22>
   de3e6:	0052      	lsls	r2, r2, #1
   de3e8:	3101      	adds	r1, #1
   de3ea:	e7fa      	b.n	de3e2 <__s2b+0x18>
   de3ec:	4630      	mov	r0, r6
   de3ee:	f7ff ff65 	bl	de2bc <_Balloc>
   de3f2:	9b08      	ldr	r3, [sp, #32]
   de3f4:	6143      	str	r3, [r0, #20]
   de3f6:	2d09      	cmp	r5, #9
   de3f8:	f04f 0301 	mov.w	r3, #1
   de3fc:	6103      	str	r3, [r0, #16]
   de3fe:	dd11      	ble.n	de424 <__s2b+0x5a>
   de400:	f104 0809 	add.w	r8, r4, #9
   de404:	46c1      	mov	r9, r8
   de406:	442c      	add	r4, r5
   de408:	f819 3b01 	ldrb.w	r3, [r9], #1
   de40c:	4601      	mov	r1, r0
   de40e:	3b30      	subs	r3, #48	; 0x30
   de410:	220a      	movs	r2, #10
   de412:	4630      	mov	r0, r6
   de414:	f7ff ff9e 	bl	de354 <__multadd>
   de418:	45a1      	cmp	r9, r4
   de41a:	d1f5      	bne.n	de408 <__s2b+0x3e>
   de41c:	eb08 0405 	add.w	r4, r8, r5
   de420:	3c08      	subs	r4, #8
   de422:	e001      	b.n	de428 <__s2b+0x5e>
   de424:	340a      	adds	r4, #10
   de426:	2509      	movs	r5, #9
   de428:	1b2d      	subs	r5, r5, r4
   de42a:	1963      	adds	r3, r4, r5
   de42c:	429f      	cmp	r7, r3
   de42e:	dd08      	ble.n	de442 <__s2b+0x78>
   de430:	f814 3b01 	ldrb.w	r3, [r4], #1
   de434:	4601      	mov	r1, r0
   de436:	3b30      	subs	r3, #48	; 0x30
   de438:	220a      	movs	r2, #10
   de43a:	4630      	mov	r0, r6
   de43c:	f7ff ff8a 	bl	de354 <__multadd>
   de440:	e7f3      	b.n	de42a <__s2b+0x60>
   de442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000de446 <__hi0bits>:
   de446:	0c03      	lsrs	r3, r0, #16
   de448:	041b      	lsls	r3, r3, #16
   de44a:	b913      	cbnz	r3, de452 <__hi0bits+0xc>
   de44c:	0400      	lsls	r0, r0, #16
   de44e:	2310      	movs	r3, #16
   de450:	e000      	b.n	de454 <__hi0bits+0xe>
   de452:	2300      	movs	r3, #0
   de454:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   de458:	bf04      	itt	eq
   de45a:	0200      	lsleq	r0, r0, #8
   de45c:	3308      	addeq	r3, #8
   de45e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   de462:	bf04      	itt	eq
   de464:	0100      	lsleq	r0, r0, #4
   de466:	3304      	addeq	r3, #4
   de468:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   de46c:	bf04      	itt	eq
   de46e:	0080      	lsleq	r0, r0, #2
   de470:	3302      	addeq	r3, #2
   de472:	2800      	cmp	r0, #0
   de474:	db03      	blt.n	de47e <__hi0bits+0x38>
   de476:	0042      	lsls	r2, r0, #1
   de478:	d503      	bpl.n	de482 <__hi0bits+0x3c>
   de47a:	1c58      	adds	r0, r3, #1
   de47c:	4770      	bx	lr
   de47e:	4618      	mov	r0, r3
   de480:	4770      	bx	lr
   de482:	2020      	movs	r0, #32
   de484:	4770      	bx	lr

000de486 <__lo0bits>:
   de486:	6803      	ldr	r3, [r0, #0]
   de488:	f013 0207 	ands.w	r2, r3, #7
   de48c:	d00b      	beq.n	de4a6 <__lo0bits+0x20>
   de48e:	07d9      	lsls	r1, r3, #31
   de490:	d422      	bmi.n	de4d8 <__lo0bits+0x52>
   de492:	079a      	lsls	r2, r3, #30
   de494:	bf4b      	itete	mi
   de496:	085b      	lsrmi	r3, r3, #1
   de498:	089b      	lsrpl	r3, r3, #2
   de49a:	6003      	strmi	r3, [r0, #0]
   de49c:	6003      	strpl	r3, [r0, #0]
   de49e:	bf4c      	ite	mi
   de4a0:	2001      	movmi	r0, #1
   de4a2:	2002      	movpl	r0, #2
   de4a4:	4770      	bx	lr
   de4a6:	b299      	uxth	r1, r3
   de4a8:	b909      	cbnz	r1, de4ae <__lo0bits+0x28>
   de4aa:	0c1b      	lsrs	r3, r3, #16
   de4ac:	2210      	movs	r2, #16
   de4ae:	f013 0fff 	tst.w	r3, #255	; 0xff
   de4b2:	bf04      	itt	eq
   de4b4:	0a1b      	lsreq	r3, r3, #8
   de4b6:	3208      	addeq	r2, #8
   de4b8:	0719      	lsls	r1, r3, #28
   de4ba:	bf04      	itt	eq
   de4bc:	091b      	lsreq	r3, r3, #4
   de4be:	3204      	addeq	r2, #4
   de4c0:	0799      	lsls	r1, r3, #30
   de4c2:	bf04      	itt	eq
   de4c4:	089b      	lsreq	r3, r3, #2
   de4c6:	3202      	addeq	r2, #2
   de4c8:	07d9      	lsls	r1, r3, #31
   de4ca:	d402      	bmi.n	de4d2 <__lo0bits+0x4c>
   de4cc:	085b      	lsrs	r3, r3, #1
   de4ce:	d005      	beq.n	de4dc <__lo0bits+0x56>
   de4d0:	3201      	adds	r2, #1
   de4d2:	6003      	str	r3, [r0, #0]
   de4d4:	4610      	mov	r0, r2
   de4d6:	4770      	bx	lr
   de4d8:	2000      	movs	r0, #0
   de4da:	4770      	bx	lr
   de4dc:	2020      	movs	r0, #32
   de4de:	4770      	bx	lr

000de4e0 <__i2b>:
   de4e0:	b510      	push	{r4, lr}
   de4e2:	460c      	mov	r4, r1
   de4e4:	2101      	movs	r1, #1
   de4e6:	f7ff fee9 	bl	de2bc <_Balloc>
   de4ea:	2201      	movs	r2, #1
   de4ec:	6144      	str	r4, [r0, #20]
   de4ee:	6102      	str	r2, [r0, #16]
   de4f0:	bd10      	pop	{r4, pc}

000de4f2 <__multiply>:
   de4f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de4f6:	4614      	mov	r4, r2
   de4f8:	690a      	ldr	r2, [r1, #16]
   de4fa:	6923      	ldr	r3, [r4, #16]
   de4fc:	429a      	cmp	r2, r3
   de4fe:	bfb8      	it	lt
   de500:	460b      	movlt	r3, r1
   de502:	4688      	mov	r8, r1
   de504:	bfbc      	itt	lt
   de506:	46a0      	movlt	r8, r4
   de508:	461c      	movlt	r4, r3
   de50a:	f8d8 7010 	ldr.w	r7, [r8, #16]
   de50e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   de512:	f8d8 3008 	ldr.w	r3, [r8, #8]
   de516:	f8d8 1004 	ldr.w	r1, [r8, #4]
   de51a:	eb07 0609 	add.w	r6, r7, r9
   de51e:	429e      	cmp	r6, r3
   de520:	bfc8      	it	gt
   de522:	3101      	addgt	r1, #1
   de524:	f7ff feca 	bl	de2bc <_Balloc>
   de528:	f100 0514 	add.w	r5, r0, #20
   de52c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   de530:	462b      	mov	r3, r5
   de532:	2200      	movs	r2, #0
   de534:	4563      	cmp	r3, ip
   de536:	d202      	bcs.n	de53e <__multiply+0x4c>
   de538:	f843 2b04 	str.w	r2, [r3], #4
   de53c:	e7fa      	b.n	de534 <__multiply+0x42>
   de53e:	f104 0214 	add.w	r2, r4, #20
   de542:	f108 0114 	add.w	r1, r8, #20
   de546:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   de54a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   de54e:	9300      	str	r3, [sp, #0]
   de550:	9b00      	ldr	r3, [sp, #0]
   de552:	9201      	str	r2, [sp, #4]
   de554:	4293      	cmp	r3, r2
   de556:	d957      	bls.n	de608 <__multiply+0x116>
   de558:	f8b2 b000 	ldrh.w	fp, [r2]
   de55c:	f1bb 0f00 	cmp.w	fp, #0
   de560:	d023      	beq.n	de5aa <__multiply+0xb8>
   de562:	4689      	mov	r9, r1
   de564:	46ae      	mov	lr, r5
   de566:	f04f 0800 	mov.w	r8, #0
   de56a:	f859 4b04 	ldr.w	r4, [r9], #4
   de56e:	f8be a000 	ldrh.w	sl, [lr]
   de572:	b2a3      	uxth	r3, r4
   de574:	fb0b a303 	mla	r3, fp, r3, sl
   de578:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   de57c:	f8de 4000 	ldr.w	r4, [lr]
   de580:	4443      	add	r3, r8
   de582:	ea4f 4814 	mov.w	r8, r4, lsr #16
   de586:	fb0b 840a 	mla	r4, fp, sl, r8
   de58a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   de58e:	46f2      	mov	sl, lr
   de590:	b29b      	uxth	r3, r3
   de592:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   de596:	454f      	cmp	r7, r9
   de598:	ea4f 4814 	mov.w	r8, r4, lsr #16
   de59c:	f84a 3b04 	str.w	r3, [sl], #4
   de5a0:	d901      	bls.n	de5a6 <__multiply+0xb4>
   de5a2:	46d6      	mov	lr, sl
   de5a4:	e7e1      	b.n	de56a <__multiply+0x78>
   de5a6:	f8ce 8004 	str.w	r8, [lr, #4]
   de5aa:	9b01      	ldr	r3, [sp, #4]
   de5ac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   de5b0:	3204      	adds	r2, #4
   de5b2:	f1ba 0f00 	cmp.w	sl, #0
   de5b6:	d021      	beq.n	de5fc <__multiply+0x10a>
   de5b8:	682b      	ldr	r3, [r5, #0]
   de5ba:	462c      	mov	r4, r5
   de5bc:	4689      	mov	r9, r1
   de5be:	f04f 0800 	mov.w	r8, #0
   de5c2:	f8b9 e000 	ldrh.w	lr, [r9]
   de5c6:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   de5ca:	fb0a be0e 	mla	lr, sl, lr, fp
   de5ce:	44f0      	add	r8, lr
   de5d0:	46a3      	mov	fp, r4
   de5d2:	b29b      	uxth	r3, r3
   de5d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   de5d8:	f84b 3b04 	str.w	r3, [fp], #4
   de5dc:	f859 3b04 	ldr.w	r3, [r9], #4
   de5e0:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   de5e4:	0c1b      	lsrs	r3, r3, #16
   de5e6:	fb0a e303 	mla	r3, sl, r3, lr
   de5ea:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   de5ee:	454f      	cmp	r7, r9
   de5f0:	ea4f 4813 	mov.w	r8, r3, lsr #16
   de5f4:	d901      	bls.n	de5fa <__multiply+0x108>
   de5f6:	465c      	mov	r4, fp
   de5f8:	e7e3      	b.n	de5c2 <__multiply+0xd0>
   de5fa:	6063      	str	r3, [r4, #4]
   de5fc:	3504      	adds	r5, #4
   de5fe:	e7a7      	b.n	de550 <__multiply+0x5e>
   de600:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   de604:	b913      	cbnz	r3, de60c <__multiply+0x11a>
   de606:	3e01      	subs	r6, #1
   de608:	2e00      	cmp	r6, #0
   de60a:	dcf9      	bgt.n	de600 <__multiply+0x10e>
   de60c:	6106      	str	r6, [r0, #16]
   de60e:	b003      	add	sp, #12
   de610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000de614 <__pow5mult>:
   de614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   de618:	4615      	mov	r5, r2
   de61a:	f012 0203 	ands.w	r2, r2, #3
   de61e:	4606      	mov	r6, r0
   de620:	460f      	mov	r7, r1
   de622:	d007      	beq.n	de634 <__pow5mult+0x20>
   de624:	3a01      	subs	r2, #1
   de626:	4c21      	ldr	r4, [pc, #132]	; (de6ac <__pow5mult+0x98>)
   de628:	2300      	movs	r3, #0
   de62a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   de62e:	f7ff fe91 	bl	de354 <__multadd>
   de632:	4607      	mov	r7, r0
   de634:	10ad      	asrs	r5, r5, #2
   de636:	d036      	beq.n	de6a6 <__pow5mult+0x92>
   de638:	6a74      	ldr	r4, [r6, #36]	; 0x24
   de63a:	b93c      	cbnz	r4, de64c <__pow5mult+0x38>
   de63c:	2010      	movs	r0, #16
   de63e:	f7f9 fcf9 	bl	d8034 <malloc>
   de642:	6270      	str	r0, [r6, #36]	; 0x24
   de644:	6044      	str	r4, [r0, #4]
   de646:	6084      	str	r4, [r0, #8]
   de648:	6004      	str	r4, [r0, #0]
   de64a:	60c4      	str	r4, [r0, #12]
   de64c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   de650:	f8d8 4008 	ldr.w	r4, [r8, #8]
   de654:	b94c      	cbnz	r4, de66a <__pow5mult+0x56>
   de656:	f240 2171 	movw	r1, #625	; 0x271
   de65a:	4630      	mov	r0, r6
   de65c:	f7ff ff40 	bl	de4e0 <__i2b>
   de660:	2300      	movs	r3, #0
   de662:	f8c8 0008 	str.w	r0, [r8, #8]
   de666:	4604      	mov	r4, r0
   de668:	6003      	str	r3, [r0, #0]
   de66a:	f04f 0800 	mov.w	r8, #0
   de66e:	07eb      	lsls	r3, r5, #31
   de670:	d50a      	bpl.n	de688 <__pow5mult+0x74>
   de672:	4639      	mov	r1, r7
   de674:	4622      	mov	r2, r4
   de676:	4630      	mov	r0, r6
   de678:	f7ff ff3b 	bl	de4f2 <__multiply>
   de67c:	4639      	mov	r1, r7
   de67e:	4681      	mov	r9, r0
   de680:	4630      	mov	r0, r6
   de682:	f7ff fe50 	bl	de326 <_Bfree>
   de686:	464f      	mov	r7, r9
   de688:	106d      	asrs	r5, r5, #1
   de68a:	d00c      	beq.n	de6a6 <__pow5mult+0x92>
   de68c:	6820      	ldr	r0, [r4, #0]
   de68e:	b108      	cbz	r0, de694 <__pow5mult+0x80>
   de690:	4604      	mov	r4, r0
   de692:	e7ec      	b.n	de66e <__pow5mult+0x5a>
   de694:	4622      	mov	r2, r4
   de696:	4621      	mov	r1, r4
   de698:	4630      	mov	r0, r6
   de69a:	f7ff ff2a 	bl	de4f2 <__multiply>
   de69e:	6020      	str	r0, [r4, #0]
   de6a0:	f8c0 8000 	str.w	r8, [r0]
   de6a4:	e7f4      	b.n	de690 <__pow5mult+0x7c>
   de6a6:	4638      	mov	r0, r7
   de6a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de6ac:	000df818 	.word	0x000df818

000de6b0 <__lshift>:
   de6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de6b4:	460c      	mov	r4, r1
   de6b6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   de6ba:	6926      	ldr	r6, [r4, #16]
   de6bc:	6849      	ldr	r1, [r1, #4]
   de6be:	68a3      	ldr	r3, [r4, #8]
   de6c0:	4456      	add	r6, sl
   de6c2:	4607      	mov	r7, r0
   de6c4:	4691      	mov	r9, r2
   de6c6:	1c75      	adds	r5, r6, #1
   de6c8:	42ab      	cmp	r3, r5
   de6ca:	da02      	bge.n	de6d2 <__lshift+0x22>
   de6cc:	3101      	adds	r1, #1
   de6ce:	005b      	lsls	r3, r3, #1
   de6d0:	e7fa      	b.n	de6c8 <__lshift+0x18>
   de6d2:	4638      	mov	r0, r7
   de6d4:	f7ff fdf2 	bl	de2bc <_Balloc>
   de6d8:	2300      	movs	r3, #0
   de6da:	4680      	mov	r8, r0
   de6dc:	f100 0114 	add.w	r1, r0, #20
   de6e0:	461a      	mov	r2, r3
   de6e2:	4553      	cmp	r3, sl
   de6e4:	da03      	bge.n	de6ee <__lshift+0x3e>
   de6e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   de6ea:	3301      	adds	r3, #1
   de6ec:	e7f9      	b.n	de6e2 <__lshift+0x32>
   de6ee:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   de6f2:	6920      	ldr	r0, [r4, #16]
   de6f4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   de6f8:	f019 091f 	ands.w	r9, r9, #31
   de6fc:	f104 0114 	add.w	r1, r4, #20
   de700:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   de704:	d014      	beq.n	de730 <__lshift+0x80>
   de706:	f1c9 0c20 	rsb	ip, r9, #32
   de70a:	2200      	movs	r2, #0
   de70c:	6808      	ldr	r0, [r1, #0]
   de70e:	fa00 f009 	lsl.w	r0, r0, r9
   de712:	4302      	orrs	r2, r0
   de714:	469a      	mov	sl, r3
   de716:	f843 2b04 	str.w	r2, [r3], #4
   de71a:	f851 2b04 	ldr.w	r2, [r1], #4
   de71e:	458e      	cmp	lr, r1
   de720:	fa22 f20c 	lsr.w	r2, r2, ip
   de724:	d8f2      	bhi.n	de70c <__lshift+0x5c>
   de726:	f8ca 2004 	str.w	r2, [sl, #4]
   de72a:	b142      	cbz	r2, de73e <__lshift+0x8e>
   de72c:	1cb5      	adds	r5, r6, #2
   de72e:	e006      	b.n	de73e <__lshift+0x8e>
   de730:	3b04      	subs	r3, #4
   de732:	f851 2b04 	ldr.w	r2, [r1], #4
   de736:	f843 2f04 	str.w	r2, [r3, #4]!
   de73a:	458e      	cmp	lr, r1
   de73c:	d8f9      	bhi.n	de732 <__lshift+0x82>
   de73e:	3d01      	subs	r5, #1
   de740:	4638      	mov	r0, r7
   de742:	f8c8 5010 	str.w	r5, [r8, #16]
   de746:	4621      	mov	r1, r4
   de748:	f7ff fded 	bl	de326 <_Bfree>
   de74c:	4640      	mov	r0, r8
   de74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000de752 <__mcmp>:
   de752:	6903      	ldr	r3, [r0, #16]
   de754:	690a      	ldr	r2, [r1, #16]
   de756:	1a9b      	subs	r3, r3, r2
   de758:	b510      	push	{r4, lr}
   de75a:	d111      	bne.n	de780 <__mcmp+0x2e>
   de75c:	0092      	lsls	r2, r2, #2
   de75e:	3014      	adds	r0, #20
   de760:	3114      	adds	r1, #20
   de762:	1883      	adds	r3, r0, r2
   de764:	440a      	add	r2, r1
   de766:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   de76a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   de76e:	428c      	cmp	r4, r1
   de770:	d002      	beq.n	de778 <__mcmp+0x26>
   de772:	d307      	bcc.n	de784 <__mcmp+0x32>
   de774:	2001      	movs	r0, #1
   de776:	bd10      	pop	{r4, pc}
   de778:	4298      	cmp	r0, r3
   de77a:	d3f4      	bcc.n	de766 <__mcmp+0x14>
   de77c:	2000      	movs	r0, #0
   de77e:	bd10      	pop	{r4, pc}
   de780:	4618      	mov	r0, r3
   de782:	bd10      	pop	{r4, pc}
   de784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   de788:	bd10      	pop	{r4, pc}

000de78a <__mdiff>:
   de78a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   de78e:	460c      	mov	r4, r1
   de790:	4607      	mov	r7, r0
   de792:	4611      	mov	r1, r2
   de794:	4620      	mov	r0, r4
   de796:	4615      	mov	r5, r2
   de798:	f7ff ffdb 	bl	de752 <__mcmp>
   de79c:	1e06      	subs	r6, r0, #0
   de79e:	d108      	bne.n	de7b2 <__mdiff+0x28>
   de7a0:	4631      	mov	r1, r6
   de7a2:	4638      	mov	r0, r7
   de7a4:	f7ff fd8a 	bl	de2bc <_Balloc>
   de7a8:	2301      	movs	r3, #1
   de7aa:	6103      	str	r3, [r0, #16]
   de7ac:	6146      	str	r6, [r0, #20]
   de7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de7b2:	bfbc      	itt	lt
   de7b4:	4623      	movlt	r3, r4
   de7b6:	462c      	movlt	r4, r5
   de7b8:	4638      	mov	r0, r7
   de7ba:	6861      	ldr	r1, [r4, #4]
   de7bc:	bfba      	itte	lt
   de7be:	461d      	movlt	r5, r3
   de7c0:	2601      	movlt	r6, #1
   de7c2:	2600      	movge	r6, #0
   de7c4:	f7ff fd7a 	bl	de2bc <_Balloc>
   de7c8:	692b      	ldr	r3, [r5, #16]
   de7ca:	60c6      	str	r6, [r0, #12]
   de7cc:	6926      	ldr	r6, [r4, #16]
   de7ce:	f105 0914 	add.w	r9, r5, #20
   de7d2:	3414      	adds	r4, #20
   de7d4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   de7d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   de7dc:	f100 0514 	add.w	r5, r0, #20
   de7e0:	f04f 0c00 	mov.w	ip, #0
   de7e4:	f854 3b04 	ldr.w	r3, [r4], #4
   de7e8:	f859 2b04 	ldr.w	r2, [r9], #4
   de7ec:	fa1c f183 	uxtah	r1, ip, r3
   de7f0:	fa1f fe82 	uxth.w	lr, r2
   de7f4:	0c12      	lsrs	r2, r2, #16
   de7f6:	ebce 0101 	rsb	r1, lr, r1
   de7fa:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   de7fe:	eb03 4321 	add.w	r3, r3, r1, asr #16
   de802:	b289      	uxth	r1, r1
   de804:	ea4f 4c23 	mov.w	ip, r3, asr #16
   de808:	45c8      	cmp	r8, r9
   de80a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   de80e:	46a6      	mov	lr, r4
   de810:	f845 3b04 	str.w	r3, [r5], #4
   de814:	d8e6      	bhi.n	de7e4 <__mdiff+0x5a>
   de816:	45be      	cmp	lr, r7
   de818:	d20e      	bcs.n	de838 <__mdiff+0xae>
   de81a:	f85e 1b04 	ldr.w	r1, [lr], #4
   de81e:	fa1c f281 	uxtah	r2, ip, r1
   de822:	1413      	asrs	r3, r2, #16
   de824:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   de828:	b292      	uxth	r2, r2
   de82a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   de82e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   de832:	f845 2b04 	str.w	r2, [r5], #4
   de836:	e7ee      	b.n	de816 <__mdiff+0x8c>
   de838:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   de83c:	b90b      	cbnz	r3, de842 <__mdiff+0xb8>
   de83e:	3e01      	subs	r6, #1
   de840:	e7fa      	b.n	de838 <__mdiff+0xae>
   de842:	6106      	str	r6, [r0, #16]
   de844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000de848 <__ulp>:
   de848:	4b12      	ldr	r3, [pc, #72]	; (de894 <__ulp+0x4c>)
   de84a:	ee10 2a90 	vmov	r2, s1
   de84e:	401a      	ands	r2, r3
   de850:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   de854:	2b00      	cmp	r3, #0
   de856:	dd02      	ble.n	de85e <__ulp+0x16>
   de858:	2000      	movs	r0, #0
   de85a:	4619      	mov	r1, r3
   de85c:	e017      	b.n	de88e <__ulp+0x46>
   de85e:	425b      	negs	r3, r3
   de860:	151b      	asrs	r3, r3, #20
   de862:	2b13      	cmp	r3, #19
   de864:	f04f 0000 	mov.w	r0, #0
   de868:	f04f 0100 	mov.w	r1, #0
   de86c:	dc04      	bgt.n	de878 <__ulp+0x30>
   de86e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   de872:	fa42 f103 	asr.w	r1, r2, r3
   de876:	e00a      	b.n	de88e <__ulp+0x46>
   de878:	3b14      	subs	r3, #20
   de87a:	2b1e      	cmp	r3, #30
   de87c:	f04f 0201 	mov.w	r2, #1
   de880:	bfda      	itte	le
   de882:	f1c3 031f 	rsble	r3, r3, #31
   de886:	fa02 f303 	lslle.w	r3, r2, r3
   de88a:	4613      	movgt	r3, r2
   de88c:	4618      	mov	r0, r3
   de88e:	ec41 0b10 	vmov	d0, r0, r1
   de892:	4770      	bx	lr
   de894:	7ff00000 	.word	0x7ff00000

000de898 <__b2d>:
   de898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   de89a:	6905      	ldr	r5, [r0, #16]
   de89c:	f100 0614 	add.w	r6, r0, #20
   de8a0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   de8a4:	1f2f      	subs	r7, r5, #4
   de8a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   de8aa:	4620      	mov	r0, r4
   de8ac:	f7ff fdcb 	bl	de446 <__hi0bits>
   de8b0:	f1c0 0320 	rsb	r3, r0, #32
   de8b4:	280a      	cmp	r0, #10
   de8b6:	600b      	str	r3, [r1, #0]
   de8b8:	dc14      	bgt.n	de8e4 <__b2d+0x4c>
   de8ba:	f1c0 0e0b 	rsb	lr, r0, #11
   de8be:	fa24 f10e 	lsr.w	r1, r4, lr
   de8c2:	42be      	cmp	r6, r7
   de8c4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   de8c8:	bf34      	ite	cc
   de8ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   de8ce:	2100      	movcs	r1, #0
   de8d0:	3015      	adds	r0, #21
   de8d2:	fa04 f000 	lsl.w	r0, r4, r0
   de8d6:	fa21 f10e 	lsr.w	r1, r1, lr
   de8da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   de8de:	ea40 0201 	orr.w	r2, r0, r1
   de8e2:	e023      	b.n	de92c <__b2d+0x94>
   de8e4:	42be      	cmp	r6, r7
   de8e6:	bf3a      	itte	cc
   de8e8:	f1a5 0708 	subcc.w	r7, r5, #8
   de8ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   de8f0:	2100      	movcs	r1, #0
   de8f2:	380b      	subs	r0, #11
   de8f4:	d015      	beq.n	de922 <__b2d+0x8a>
   de8f6:	4084      	lsls	r4, r0
   de8f8:	f1c0 0520 	rsb	r5, r0, #32
   de8fc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   de900:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   de904:	42b7      	cmp	r7, r6
   de906:	fa21 fe05 	lsr.w	lr, r1, r5
   de90a:	ea44 030e 	orr.w	r3, r4, lr
   de90e:	bf8c      	ite	hi
   de910:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   de914:	2400      	movls	r4, #0
   de916:	fa01 f000 	lsl.w	r0, r1, r0
   de91a:	40ec      	lsrs	r4, r5
   de91c:	ea40 0204 	orr.w	r2, r0, r4
   de920:	e004      	b.n	de92c <__b2d+0x94>
   de922:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   de926:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   de92a:	460a      	mov	r2, r1
   de92c:	ec43 2b10 	vmov	d0, r2, r3
   de930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000de932 <__d2b>:
   de932:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   de936:	460e      	mov	r6, r1
   de938:	2101      	movs	r1, #1
   de93a:	ec59 8b10 	vmov	r8, r9, d0
   de93e:	4615      	mov	r5, r2
   de940:	f7ff fcbc 	bl	de2bc <_Balloc>
   de944:	f3c9 540a 	ubfx	r4, r9, #20, #11
   de948:	4607      	mov	r7, r0
   de94a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   de94e:	b10c      	cbz	r4, de954 <__d2b+0x22>
   de950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   de954:	9301      	str	r3, [sp, #4]
   de956:	f1b8 0f00 	cmp.w	r8, #0
   de95a:	d019      	beq.n	de990 <__d2b+0x5e>
   de95c:	a802      	add	r0, sp, #8
   de95e:	f840 8d08 	str.w	r8, [r0, #-8]!
   de962:	f7ff fd90 	bl	de486 <__lo0bits>
   de966:	9b00      	ldr	r3, [sp, #0]
   de968:	b148      	cbz	r0, de97e <__d2b+0x4c>
   de96a:	9a01      	ldr	r2, [sp, #4]
   de96c:	f1c0 0120 	rsb	r1, r0, #32
   de970:	fa02 f101 	lsl.w	r1, r2, r1
   de974:	430b      	orrs	r3, r1
   de976:	40c2      	lsrs	r2, r0
   de978:	617b      	str	r3, [r7, #20]
   de97a:	9201      	str	r2, [sp, #4]
   de97c:	e000      	b.n	de980 <__d2b+0x4e>
   de97e:	617b      	str	r3, [r7, #20]
   de980:	9b01      	ldr	r3, [sp, #4]
   de982:	61bb      	str	r3, [r7, #24]
   de984:	2b00      	cmp	r3, #0
   de986:	bf14      	ite	ne
   de988:	2102      	movne	r1, #2
   de98a:	2101      	moveq	r1, #1
   de98c:	6139      	str	r1, [r7, #16]
   de98e:	e007      	b.n	de9a0 <__d2b+0x6e>
   de990:	a801      	add	r0, sp, #4
   de992:	f7ff fd78 	bl	de486 <__lo0bits>
   de996:	9b01      	ldr	r3, [sp, #4]
   de998:	617b      	str	r3, [r7, #20]
   de99a:	2101      	movs	r1, #1
   de99c:	6139      	str	r1, [r7, #16]
   de99e:	3020      	adds	r0, #32
   de9a0:	b134      	cbz	r4, de9b0 <__d2b+0x7e>
   de9a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   de9a6:	4404      	add	r4, r0
   de9a8:	6034      	str	r4, [r6, #0]
   de9aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   de9ae:	e009      	b.n	de9c4 <__d2b+0x92>
   de9b0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   de9b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   de9b8:	6030      	str	r0, [r6, #0]
   de9ba:	6918      	ldr	r0, [r3, #16]
   de9bc:	f7ff fd43 	bl	de446 <__hi0bits>
   de9c0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   de9c4:	6028      	str	r0, [r5, #0]
   de9c6:	4638      	mov	r0, r7
   de9c8:	b003      	add	sp, #12
   de9ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000de9ce <__ratio>:
   de9ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   de9d2:	4688      	mov	r8, r1
   de9d4:	4669      	mov	r1, sp
   de9d6:	4681      	mov	r9, r0
   de9d8:	f7ff ff5e 	bl	de898 <__b2d>
   de9dc:	a901      	add	r1, sp, #4
   de9de:	4640      	mov	r0, r8
   de9e0:	ec55 4b10 	vmov	r4, r5, d0
   de9e4:	f7ff ff58 	bl	de898 <__b2d>
   de9e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   de9ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
   de9f0:	1a9a      	subs	r2, r3, r2
   de9f2:	e89d 000a 	ldmia.w	sp, {r1, r3}
   de9f6:	1ac9      	subs	r1, r1, r3
   de9f8:	ec57 6b10 	vmov	r6, r7, d0
   de9fc:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   dea00:	2b00      	cmp	r3, #0
   dea02:	bfcc      	ite	gt
   dea04:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   dea08:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   dea0c:	4632      	mov	r2, r6
   dea0e:	463b      	mov	r3, r7
   dea10:	4620      	mov	r0, r4
   dea12:	4629      	mov	r1, r5
   dea14:	f7fd fab8 	bl	dbf88 <__aeabi_ddiv>
   dea18:	ec41 0b10 	vmov	d0, r0, r1
   dea1c:	b003      	add	sp, #12
   dea1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dea22 <__copybits>:
   dea22:	3901      	subs	r1, #1
   dea24:	b510      	push	{r4, lr}
   dea26:	1149      	asrs	r1, r1, #5
   dea28:	6914      	ldr	r4, [r2, #16]
   dea2a:	3101      	adds	r1, #1
   dea2c:	f102 0314 	add.w	r3, r2, #20
   dea30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dea34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dea38:	42a3      	cmp	r3, r4
   dea3a:	4602      	mov	r2, r0
   dea3c:	d204      	bcs.n	dea48 <__copybits+0x26>
   dea3e:	f853 2b04 	ldr.w	r2, [r3], #4
   dea42:	f840 2b04 	str.w	r2, [r0], #4
   dea46:	e7f7      	b.n	dea38 <__copybits+0x16>
   dea48:	2300      	movs	r3, #0
   dea4a:	428a      	cmp	r2, r1
   dea4c:	d202      	bcs.n	dea54 <__copybits+0x32>
   dea4e:	f842 3b04 	str.w	r3, [r2], #4
   dea52:	e7fa      	b.n	dea4a <__copybits+0x28>
   dea54:	bd10      	pop	{r4, pc}

000dea56 <__any_on>:
   dea56:	f100 0214 	add.w	r2, r0, #20
   dea5a:	6900      	ldr	r0, [r0, #16]
   dea5c:	114b      	asrs	r3, r1, #5
   dea5e:	4298      	cmp	r0, r3
   dea60:	b510      	push	{r4, lr}
   dea62:	db0c      	blt.n	dea7e <__any_on+0x28>
   dea64:	dd0c      	ble.n	dea80 <__any_on+0x2a>
   dea66:	f011 011f 	ands.w	r1, r1, #31
   dea6a:	d009      	beq.n	dea80 <__any_on+0x2a>
   dea6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dea70:	fa24 f001 	lsr.w	r0, r4, r1
   dea74:	fa00 f101 	lsl.w	r1, r0, r1
   dea78:	428c      	cmp	r4, r1
   dea7a:	d10c      	bne.n	dea96 <__any_on+0x40>
   dea7c:	e000      	b.n	dea80 <__any_on+0x2a>
   dea7e:	4603      	mov	r3, r0
   dea80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dea84:	4293      	cmp	r3, r2
   dea86:	d904      	bls.n	dea92 <__any_on+0x3c>
   dea88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dea8c:	2900      	cmp	r1, #0
   dea8e:	d0f9      	beq.n	dea84 <__any_on+0x2e>
   dea90:	e001      	b.n	dea96 <__any_on+0x40>
   dea92:	2000      	movs	r0, #0
   dea94:	bd10      	pop	{r4, pc}
   dea96:	2001      	movs	r0, #1
   dea98:	bd10      	pop	{r4, pc}

000dea9a <_calloc_r>:
   dea9a:	b538      	push	{r3, r4, r5, lr}
   dea9c:	fb02 f401 	mul.w	r4, r2, r1
   deaa0:	4621      	mov	r1, r4
   deaa2:	f7f9 faf7 	bl	d8094 <_malloc_r>
   deaa6:	4605      	mov	r5, r0
   deaa8:	b118      	cbz	r0, deab2 <_calloc_r+0x18>
   deaaa:	4622      	mov	r2, r4
   deaac:	2100      	movs	r1, #0
   deaae:	f7fd fdc4 	bl	dc63a <memset>
   deab2:	4628      	mov	r0, r5
   deab4:	bd38      	pop	{r3, r4, r5, pc}

000deab6 <__env_lock>:
   deab6:	4770      	bx	lr

000deab8 <__env_unlock>:
   deab8:	4770      	bx	lr

000deaba <link_code_end>:
	...

000deabc <dynalib_user>:
   deabc:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   deacc:	0000 0000                                   ....

000dead0 <_ZTVN8particle13__SPISettingsE>:
	...
   dead8:	416d 000d                                   mA..

000deadc <_ZTV5Timer>:
	...
   deae4:	438d 000d 43d5 000d 41d3 000d               .C...C...A..

000deaf0 <_ZTVN5spark10LogHandlerE>:
	...
   deb00:	40a9 000d 40cd 000d                         .@...@..

000deb08 <_ZTVN8particle9LEDStatusE>:
	...
   deb10:	4275 000d 4291 000d 40d7 000d               uB...B...@..

000deb1c <_ZTVN5spark16SerialLogHandlerE>:
	...
   deb24:	42a5 000d 42d9 000d a56d 000d 40cf 000d     .B...B..m....@..

000deb34 <_ZTV4File>:
	...
   deb3c:	4169 000d 41c5 000d 41e5 000d 41df 000d     iA...A...A...A..
   deb4c:	40d9 000d 4209 000d 4203 000d 41fd 000d     .@...B...B...A..
   deb5c:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   deb6c:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   deb7c:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   deb8c:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   deb9c:	2545 3e64 5300 6174 7574 3a73 2520 0064     E%d>.Status: %d.
   debac:	4343 7548 0062 6548 6c6c 206f 7266 6d6f     CCHub.Hello from
   debbc:	4220 746f 2520 0a64 4200 746f 6431 7461      Bot %d..Bot1dat
   debcc:	4200 6425 4241 6363 0a73 5700 534e 2f00     .B%dABccs..WNS./
   debdc:	6600 6c69 6e65 6d61 0065 6553 646e 6e69     .filename.Sendin
   debec:	2067 6f63 6d6d 6e61 2064 7325 4600 6c69     g command %s.Fil
   debfc:	2065 7325 6920 2073 2061 632e 7673 6f20     e %s is a .csv o
   dec0c:	2072 742e 7478 7020 6972 746e 6e69 2067     r .txt printing 
   dec1c:	6164 6174 6600 6c69 6365 6d6f 0070 6966     data.filecomp.fi
   dec2c:	656c 6f64 656e 4300 6568 6b63 6e69 2067     ledone.Checking 
   dec3c:	6669 6620 6c69 2065 7325 6920 2073 2061     if file %s is a 
   dec4c:	632e 7673 6f20 2072 742e 7478 2e2e 002e     .csv or .txt....
   dec5c:	632e 7673 6100 6b63 6d00 7274 7200 7165     .csv.ack.mtr.req
   dec6c:	7000 7374 5b00 5550 5354 205d 6552 6563     .pts.[PUTS] Rece
   dec7c:	7669 6465 5320 7274 6e69 2067 6f43 6d6d     ived String Comm
   dec8c:	6e61 3a64 2520 0073 6363 0073 7561 0074     and: %s.ccs.aut.
   dec9c:	6d64 0070 654e 2077 5442 4320 6d6f 616d     dmp.New BT Comma
   decac:	646e 003a 495b 464e 5d4f 5220 6365 6965     nd:.[INFO] Recei
   decbc:	6576 2064 4c42 2045 654d 7373 6761 3a65     ved BLE Message:
   deccc:	2520 0073 495b 464e 5d4f 5220 6365 6965      %s.[INFO] Recei
   decdc:	6576 2064 544c 2045 654d 7373 6761 3a65     ved LTE Message:
   decec:	2520 0073 654e 2077 4258 6565 4320 6d6f      %s.New XBee Com
   decfc:	616d 646e 003a 495b 464e 5d4f 5220 6365     mand:.[INFO] Rec
   ded0c:	6965 6576 2064 4258 6565 4d20 7365 6173     eived XBee Messa
   ded1c:	6567 203a 7325 5b00 4157 4e52 205d 4258     ge: %s.[WARN] XB
   ded2c:	6565 4d20 7365 6173 6567 2073 6168 6576     ee Messages have
   ded3c:	6e20 746f 6220 6565 206e 6572 6563 7669      not been receiv
   ded4c:	6465 6920 206e 6425 2c73 6120 7373 6d75     ed in %ds, assum
   ded5c:	6e69 2067 4258 6565 6920 2073 6e75 7661     ing XBee is unav
   ded6c:	6961 616c 6c62 0065 575b 5241 5d4e 4220     ailable.[WARN] B
   ded7c:	454c 4d20 7365 6173 6567 2073 6168 6576     LE Messages have
   ded8c:	6e20 746f 6220 6565 206e 6572 6563 7669      not been receiv
   ded9c:	6465 6920 206e 6425 2c73 6120 7373 6d75     ed in %ds, assum
   dedac:	6e69 2067 4c42 2045 7369 7520 616e 6176     ing BLE is unava
   dedbc:	6c69 6261 656c 7000 3a48 2520 0066 694d     ilable.pH: %f.Mi
   dedcc:	696e 6f43 646e 203a 6625 4300 6e6f 7564     niCond: %f.Condu
   deddc:	7463 7669 7469 3a79 2520 0066 6554 706d     ctivity: %f.Temp
   dedec:	7265 7461 7275 3a65 2520 0066 3025 6432     erature: %f.%02d
   dedfc:	3025 6432 3025 6434 3025 6432 3025 6432     %02d%04d%02d%02d
   dee0c:	3025 6432 2500 2c73 6625 252c 2c66 6625     %02d.%s,%f,%f,%f
   dee1c:	252c 2c66 6625 252c 2c66 6625 5700 4e54     ,%f,%f,%f,%f.WTN
   dee2c:	3332 425f 746f 5700 7461 7265 6f42 0074     23_Bot.WaterBot.
   dee3c:	4c5f 474f 742e 7478 4500 7272 726f 203a     _LOG.txt.Error: 
   dee4c:	6f63 6c75 2064 6f6e 2074 6f63 6e6e 6365     could not connec
   dee5c:	2074 6f74 5320 2044 6163 6472 0021 6954     t to SD card!.Ti
   dee6c:	656d 4c2c 7461 7469 6475 2c65 6f4c 676e     me,Latitude,Long
   dee7c:	7469 6475 2c65 6554 706d 7265 7461 7275     itude,Temperatur
   dee8c:	2c65 4870 442c 7369 6f73 766c 6465 4f20     e,pH,Dissolved O
   dee9c:	2c32 6f43 646e 6375 6974 6976 7974 3020     2,Conductivity 0
   deeac:	312e 2c4b 6f43 646e 6375 6974 6976 7974     .1K,Conductivity
   deebc:	3120 004b 495b 464e 5d4f 5720 7461 7265      1K.[INFO] Water
   deecc:	6f42 2074 6425 203a 7453 7261 6574 2064     Bot %d: Started 
   deedc:	6f4c 6767 6e69 2167 7400 0078 7872 6f00     Logging!.tx.rx.o
   deeec:	6666 6200 3234 3630 3139 2d34 6364 6234     ff.b4206914-dc4b
   deefc:	352d 3437 2d33 3863 3162 392d 6432 6530     -5743-c8b1-92d0e
   def0c:	3537 3831 6232 0030 3462 3032 3936 3331     75182b0.b4206913
   def1c:	642d 3463 2d62 3735 3334 632d 6238 2d31     -dc4b-5743-c8b1-
   def2c:	3239 3064 3765 3135 3238 3062 6200 3234     92d0e75182b0.b42
   def3c:	3630 3139 2d32 6364 6234 352d 3437 2d33     06912-dc4b-5743-
   def4c:	3863 3162 392d 6432 6530 3537 3831 6232     c8b1-92d0e75182b
   def5c:	0030 3462 3032 3936 3031 642d 3463 2d62     0.b4206910-dc4b-
   def6c:	3735 3334 632d 6238 2d31 3239 3064 3765     5743-c8b1-92d0e7
   def7c:	3135 3238 3062 0d00 000a 4747 0041 4d52     5182b0....GGA.RM
   def8c:	0043 0000                                   C...

000def90 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   def98:	80b7 000d 80bd 000d 8dfd 000d 80e7 000d     ................
   defa8:	80b9 000d                                   ....

000defac <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   defb4:	80b1 000d 80cb 000d 8f5d 000d 80eb 000d     ........].......
   defc4:	80b3 000d                                   ....

000defc8 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   defd0:	80ab 000d 80d9 000d 88bb 000d 80ef 000d     ................
   defe0:	80ad 000d                                   ....

000defe4 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   defe4:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   deff4:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   df004:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   df014:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   df024:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   df034:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   df044:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   df054:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   df064:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   df074:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   df084:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   df094:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   df0a4:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   df0b4:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   df0c4:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   df0d4:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   df0e4:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   df0f4:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   df104:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   df114:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   df124:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   df134:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   df144:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   df154:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   df164:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   df174:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   df184:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..

000df194 <_ZN8particle7BleUuid9BASE_UUIDE>:
   df194:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000df1a4 <_ZTVN5spark13CellularClassE>:
	...
   df1ac:	9293 000d 9289 000d 927f 000d 9235 000d     ............5...
   df1bc:	9273 000d 9267 000d 925b 000d 9253 000d     s...g...[...S...
   df1cc:	9249 000d 923f 000d aa7d 000d               I...?...}...

000df1d8 <_ZTVN5spark13EthernetClassE>:
	...
   df1e0:	932b 000d 9321 000d 9317 000d 930d 000d     +...!...........
   df1f0:	9301 000d 92f5 000d 92e9 000d 92e1 000d     ................
   df200:	92d7 000d 92cd 000d aa7d 000d               ........}...

000df20c <_ZTV7TwoWire>:
	...
   df214:	9349 000d 9393 000d 936b 000d 934b 000d     I.......k...K...
   df224:	9373 000d 937b 000d 9383 000d 938b 000d     s...{...........

000df234 <_ZTV9IPAddress>:
	...
   df23c:	946f 000d 945f 000d 9461 000d 2e30 0030     o..._...a...0.0.
   df24c:	6166 736c 0065 7274 6575 2500 0075 2e25     false.true.%u.%.
   df25c:	6c2a 0066 6725 6e00 6c75 006c 2575 3430     *lf.%g.null.u%04
   df26c:	0078 0000                                   x...

000df270 <_ZTVN5spark16JSONStreamWriterE>:
	...
   df278:	9947 000d 996d 000d 9921 000d 9573 000d     G...m...!...s...

000df288 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   df290:	9dc5 000d 9dd9 000d a721 000d 9929 000d     ........!...)...
   df2a0:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   df2b0:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   df2c0:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   df2d0:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   df2e0:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   df2f0:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   df300:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   df310:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   df320:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   df330:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   df340:	0020 6e6c 6600 006e 6f63 6564 6400 7465      .ln.fn.code.det
   df350:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   df360:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   df370:	6e61 6369 6100 6c6c 0000 0000               anic.all....

000df37c <_ZTVN5spark16StreamLogHandlerE>:
	...
   df384:	9d99 000d 9db1 000d a56d 000d 40cf 000d     ........m....@..

000df394 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   df39c:	9945 000d 997b 000d a495 000d 992b 000d     E...{.......+...

000df3ac <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   df3b4:	9943 000d 9989 000d 9cdd 000d 9997 000d     C...............

000df3c4 <_ZTVN5spark9MeshClassE>:
	...
   df3cc:	a8f7 000d a8ed 000d a8e3 000d a8d9 000d     ................
   df3dc:	a8cd 000d a8c1 000d a8b5 000d a8ad 000d     ................
   df3ec:	a8a3 000d a899 000d aa7d 000d               ........}...

000df3f8 <_ZTVN5spark12NetworkClassE>:
	...
   df400:	aa15 000d aa1f 000d aa29 000d aa33 000d     ........)...3...
   df410:	aa3d 000d aa49 000d aa55 000d aa61 000d     =...I...U...a...
   df420:	aa69 000d aa73 000d aa7d 000d               i...s...}...

000df42c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   df42c:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
   df43c:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   df44c:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000df45c <_ZTV11USARTSerial>:
	...
   df464:	b271 000d b2c1 000d b2cf 000d ab5d 000d     q...........]...
   df474:	b285 000d b2a7 000d b293 000d b2bb 000d     ................
   df484:	b273 000d b277 000d                         s...w...

000df48c <_ZTV9USBSerial>:
	...
   df494:	b38d 000d b3dd 000d b3eb 000d ab5d 000d     ............]...
   df4a4:	b3c9 000d b38f 000d b3a5 000d b3d7 000d     ................
   df4b4:	b3bb 000d b389 000d                         ........

000df4bc <_ZSt7nothrow>:
	...

000df4bd <_ctype_>:
   df4bd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   df4cd:	2020 2020 2020 2020 2020 2020 2020 2020                     
   df4dd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   df4ed:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   df4fd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   df50d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   df51d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   df52d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   df53d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000df5c0 <__sf_fake_stdin>:
	...

000df5e0 <__sf_fake_stdout>:
	...

000df600 <__sf_fake_stderr>:
	...
   df620:	4f50 4953 0058 0000                         POSIX...

000df628 <__month_lengths>:
   df628:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   df638:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   df648:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   df658:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   df668:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   df678:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000df688 <fpi.5344>:
   df688:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   df698:	0000 0000                                   ....

000df69c <fpinan.5380>:
   df69c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   df6ac:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   df6bc:	0000 0000                                   ....

000df6c0 <tinytens>:
   df6c0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   df6d0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   df6e0:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   df6f0:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   df700:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   df710:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   df720:	2575 006e 0000 0000                         u%n.....

000df728 <__mprec_tens>:
   df728:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   df738:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   df748:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   df758:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   df768:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   df778:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   df788:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   df798:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   df7a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   df7b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   df7c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   df7d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   df7e8:	9db4 79d9 7843 44ea                         ...yCx.D

000df7f0 <__mprec_bigtens>:
   df7f0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   df800:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   df810:	bf3c 7f73 4fdd 7515                         <.s..O.u

000df818 <p05.5387>:
   df818:	0005 0000 0019 0000 007d 0000               ........}...

000df824 <link_const_variable_data_end>:
   df824:	000d54bd 	.word	0x000d54bd
   df828:	000d5de9 	.word	0x000d5de9
   df82c:	000d5ded 	.word	0x000d5ded
   df830:	000d65a5 	.word	0x000d65a5
   df834:	000d6cd5 	.word	0x000d6cd5
   df838:	000d6cf9 	.word	0x000d6cf9
   df83c:	000d6d2b 	.word	0x000d6d2b
   df840:	000d704f 	.word	0x000d704f
   df844:	000d7053 	.word	0x000d7053
   df848:	000d7057 	.word	0x000d7057
   df84c:	000d705b 	.word	0x000d705b
   df850:	000d705f 	.word	0x000d705f
   df854:	000d759b 	.word	0x000d759b
   df858:	000d759f 	.word	0x000d759f
   df85c:	000d75a3 	.word	0x000d75a3
   df860:	000d7649 	.word	0x000d7649
   df864:	000d764d 	.word	0x000d764d
   df868:	000d7651 	.word	0x000d7651
   df86c:	000d792f 	.word	0x000d792f
   df870:	000d920d 	.word	0x000d920d
   df874:	000d929d 	.word	0x000d929d
   df878:	000d9335 	.word	0x000d9335
   df87c:	000da55d 	.word	0x000da55d
   df880:	000da9c5 	.word	0x000da9c5
   df884:	000dab49 	.word	0x000dab49
   df888:	000dac85 	.word	0x000dac85
   df88c:	000db0d1 	.word	0x000db0d1
   df890:	000db25d 	.word	0x000db25d
   df894:	000db735 	.word	0x000db735
   df898:	000db7f9 	.word	0x000db7f9
   df89c:	000db87d 	.word	0x000db87d
   df8a0:	000db901 	.word	0x000db901

000df8a4 <link_constructors_end>:
	...
