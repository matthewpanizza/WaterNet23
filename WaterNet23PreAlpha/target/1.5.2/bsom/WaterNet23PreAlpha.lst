
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23PreAlpha/target/1.5.2/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c2c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000e02e0  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000108  2003d34c  000e02e4  0002d34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000139c  2003d454  2003d454  0003d454  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000e03ec  000e03ec  000303ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000e0414  000e0414  00030414  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001b643c  00000000  00000000  00030418  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00021eef  00000000  00000000  001e6854  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003143a  00000000  00000000  00208743  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003658  00000000  00000000  00239b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006830  00000000  00000000  0023d1d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00050ffa  00000000  00000000  00243a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005bc09  00000000  00000000  002949ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011672e  00000000  00000000  002f0608  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00010a94  00000000  00000000  00406d38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f008 ff76 	bl	dcf22 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f008 ff96 	bl	dcf6e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d34c 	.word	0x2003d34c
   d404c:	000e02e4 	.word	0x000e02e4
   d4050:	2003d454 	.word	0x2003d454
   d4054:	2003d454 	.word	0x2003d454
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f007 ff13 	bl	dbe88 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e02dc 	.word	0x000e02dc
   d4084:	000e025c 	.word	0x000e025c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 b9c2 	b.w	d5410 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f001 f94d 	bl	d532c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f007 beb9 	b.w	dbe0c <_post_loop>

000d409a <_Znwj>:
   d409a:	f004 b96b 	b.w	d8374 <malloc>

000d409e <_ZdlPv>:
   d409e:	f004 b971 	b.w	d8384 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f004 b96f 	b.w	d8384 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f004 f86a 	bl	d8188 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d7e29 	.word	0x000d7e29

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3

000d40d6 <_ZN8particle9LEDStatus6updateEm>:

inline bool particle::LEDStatus::isActive() const {
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
   d40d6:	4770      	bx	lr

000d40d8 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40d8:	7c03      	ldrb	r3, [r0, #16]
   d40da:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40de:	4602      	mov	r2, r0
   d40e0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40e4:	b12b      	cbz	r3, d40f2 <_ZN4File9availableEv+0x1a>
   d40e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40e8:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40ea:	1a18      	subs	r0, r3, r0
   d40ec:	bf48      	it	mi
   d40ee:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40f2:	4770      	bx	lr

000d40f4 <_Z13StatusHandlerv>:
}

void StatusHandler(){
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   d40f4:	4b0f      	ldr	r3, [pc, #60]	; (d4134 <_Z13StatusHandlerv+0x40>)
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d40f6:	781a      	ldrb	r2, [r3, #0]

void StatusHandler(){
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
   d40f8:	4b0f      	ldr	r3, [pc, #60]	; (d4138 <_Z13StatusHandlerv+0x44>)
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d40fa:	781b      	ldrb	r3, [r3, #0]
   d40fc:	009b      	lsls	r3, r3, #2
   d40fe:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    }
}

void StatusHandler(){
    statusFlags = 0;
    statusFlags = LTEAvail;
   d4102:	4a0e      	ldr	r2, [pc, #56]	; (d413c <_Z13StatusHandlerv+0x48>)
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d4104:	7812      	ldrb	r2, [r2, #0]
   d4106:	4313      	orrs	r3, r2
void StatusHandler(){
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
   d4108:	4a0d      	ldr	r2, [pc, #52]	; (d4140 <_Z13StatusHandlerv+0x4c>)
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d410a:	7812      	ldrb	r2, [r2, #0]
   d410c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
   d4110:	4a0c      	ldr	r2, [pc, #48]	; (d4144 <_Z13StatusHandlerv+0x50>)
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d4112:	7812      	ldrb	r2, [r2, #0]
   d4114:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
   d4118:	4a0b      	ldr	r2, [pc, #44]	; (d4148 <_Z13StatusHandlerv+0x54>)
    statusFlags |= logSensors << 6;
   d411a:	7812      	ldrb	r2, [r2, #0]
   d411c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4120:	4a0a      	ldr	r2, [pc, #40]	; (d414c <_Z13StatusHandlerv+0x58>)
   d4122:	7812      	ldrb	r2, [r2, #0]
   d4124:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   d4128:	4a09      	ldr	r2, [pc, #36]	; (d4150 <_Z13StatusHandlerv+0x5c>)
   d412a:	7013      	strb	r3, [r2, #0]
    statusReady = true;
   d412c:	4b09      	ldr	r3, [pc, #36]	; (d4154 <_Z13StatusHandlerv+0x60>)
   d412e:	2201      	movs	r2, #1
   d4130:	701a      	strb	r2, [r3, #0]
   d4132:	4770      	bx	lr
   d4134:	2003db3e 	.word	0x2003db3e
   d4138:	2003db3d 	.word	0x2003db3d
   d413c:	2003da15 	.word	0x2003da15
   d4140:	2003da0c 	.word	0x2003da0c
   d4144:	2003e20c 	.word	0x2003e20c
   d4148:	2003d494 	.word	0x2003d494
   d414c:	2003db3f 	.word	0x2003db3f
   d4150:	2003e2d4 	.word	0x2003e2d4
   d4154:	2003e2bc 	.word	0x2003e2bc

000d4158 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4158:	6803      	ldr	r3, [r0, #0]
   d415a:	4718      	bx	r3

000d415c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d415c:	2a01      	cmp	r2, #1
   d415e:	d002      	beq.n	d4166 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d4160:	2a02      	cmp	r2, #2
   d4162:	d002      	beq.n	d416a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d4164:	e004      	b.n	d4170 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4166:	6001      	str	r1, [r0, #0]
	      break;
   d4168:	e002      	b.n	d4170 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d416a:	680b      	ldr	r3, [r1, #0]
   d416c:	b100      	cbz	r0, d4170 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d416e:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4170:	2000      	movs	r0, #0
   d4172:	4770      	bx	lr

000d4174 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4174:	4770      	bx	lr
	...

000d4178 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4178:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d417a:	4602      	mov	r2, r0
   d417c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d417e:	7913      	ldrb	r3, [r2, #4]
   d4180:	6895      	ldr	r5, [r2, #8]
   d4182:	b133      	cbz	r3, d4192 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4184:	b93d      	cbnz	r5, d4196 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4186:	490c      	ldr	r1, [pc, #48]	; (d41b8 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4188:	b004      	add	sp, #16
   d418a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d418e:	f007 b993 	b.w	db4b8 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4192:	4b0a      	ldr	r3, [pc, #40]	; (d41bc <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4194:	e000      	b.n	d4198 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4196:	4b0a      	ldr	r3, [pc, #40]	; (d41c0 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4198:	7b16      	ldrb	r6, [r2, #12]
   d419a:	4c0a      	ldr	r4, [pc, #40]	; (d41c4 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d419c:	490a      	ldr	r1, [pc, #40]	; (d41c8 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d419e:	7b52      	ldrb	r2, [r2, #13]
   d41a0:	9202      	str	r2, [sp, #8]
   d41a2:	2e01      	cmp	r6, #1
   d41a4:	bf08      	it	eq
   d41a6:	4621      	moveq	r1, r4
   d41a8:	9101      	str	r1, [sp, #4]
   d41aa:	9500      	str	r5, [sp, #0]
   d41ac:	4a07      	ldr	r2, [pc, #28]	; (d41cc <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d41ae:	2100      	movs	r1, #0
   d41b0:	f007 f9bf 	bl	db532 <_ZN5Print11printf_implEbPKcz>
  }
   d41b4:	b004      	add	sp, #16
   d41b6:	bd70      	pop	{r4, r5, r6, pc}
   d41b8:	000df4d5 	.word	0x000df4d5
   d41bc:	000df9a7 	.word	0x000df9a7
   d41c0:	000df4c4 	.word	0x000df4c4
   d41c4:	000df4cd 	.word	0x000df4cd
   d41c8:	000df4d1 	.word	0x000df4d1
   d41cc:	000df4eb 	.word	0x000df4eb

000d41d0 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d41d0:	3010      	adds	r0, #16
   d41d2:	f002 baa3 	b.w	d671c <_ZN7FatFile5writeEPKvj>

000d41d6 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d41d6:	b507      	push	{r0, r1, r2, lr}
   d41d8:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d41da:	2201      	movs	r2, #1
   d41dc:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d41e0:	3010      	adds	r0, #16
   d41e2:	4619      	mov	r1, r3
   d41e4:	f002 fa9a 	bl	d671c <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d41e8:	b003      	add	sp, #12
   d41ea:	f85d fb04 	ldr.w	pc, [sp], #4

000d41ee <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d41ee:	b510      	push	{r4, lr}
   d41f0:	2134      	movs	r1, #52	; 0x34
   d41f2:	4604      	mov	r4, r0
   d41f4:	f007 ff19 	bl	dc02a <_ZdlPvj>
   d41f8:	4620      	mov	r0, r4
   d41fa:	bd10      	pop	{r4, pc}

000d41fc <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41fc:	6943      	ldr	r3, [r0, #20]
   d41fe:	b113      	cbz	r3, d4206 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4200:	6983      	ldr	r3, [r0, #24]
   d4202:	300c      	adds	r0, #12
   d4204:	4718      	bx	r3
   d4206:	4770      	bx	lr

000d4208 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4208:	3010      	adds	r0, #16
   d420a:	f002 b9fb 	b.w	d6604 <_ZN7FatFile4syncEv>

000d420e <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d420e:	3010      	adds	r0, #16
   d4210:	f002 b8d2 	b.w	d63b8 <_ZN7FatFile4peekEv>

000d4214 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4214:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4216:	2201      	movs	r2, #1
   d4218:	f10d 0107 	add.w	r1, sp, #7
   d421c:	3010      	adds	r0, #16
   d421e:	f002 f818 	bl	d6252 <_ZN7FatFile4readEPvj>
   d4222:	2801      	cmp	r0, #1
   d4224:	bf0c      	ite	eq
   d4226:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d422a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   d422e:	b003      	add	sp, #12
   d4230:	f85d fb04 	ldr.w	pc, [sp], #4

000d4234 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4234:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4236:	2100      	movs	r1, #0
   d4238:	4604      	mov	r4, r0
   d423a:	4608      	mov	r0, r1
   d423c:	f003 fd9c 	bl	d7d78 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4240:	a902      	add	r1, sp, #8
   d4242:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4244:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4246:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d424a:	f003 fdad 	bl	d7da8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d424e:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4250:	b10c      	cbz	r4, d4256 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4252:	2301      	movs	r3, #1
   d4254:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4256:	2100      	movs	r1, #0
   d4258:	2001      	movs	r0, #1
   d425a:	f003 fd8d 	bl	d7d78 <os_thread_scheduling>
            }
        }
        if (t) {
   d425e:	b12c      	cbz	r4, d426c <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4260:	6823      	ldr	r3, [r4, #0]
   d4262:	4620      	mov	r0, r4
   d4264:	689b      	ldr	r3, [r3, #8]
   d4266:	4798      	blx	r3
            t->running = false;
   d4268:	2300      	movs	r3, #0
   d426a:	7123      	strb	r3, [r4, #4]
        }
    }
   d426c:	b002      	add	sp, #8
   d426e:	bd10      	pop	{r4, pc}

000d4270 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4270:	b510      	push	{r4, lr}
   d4272:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4274:	6800      	ldr	r0, [r0, #0]
   d4276:	b108      	cbz	r0, d427c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4278:	f004 f884 	bl	d8384 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d427c:	4620      	mov	r0, r4
   d427e:	bd10      	pop	{r4, pc}

000d4280 <_ZN8particle9LEDStatusD1Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d4280:	b510      	push	{r4, lr}
   d4282:	4b05      	ldr	r3, [pc, #20]	; (d4298 <_ZN8particle9LEDStatusD1Ev+0x18>)
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d4284:	2200      	movs	r2, #0

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d4286:	4604      	mov	r4, r0
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d4288:	4611      	mov	r1, r2

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d428a:	f840 3b04 	str.w	r3, [r0], #4
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d428e:	f003 ff9b 	bl	d81c8 <led_set_status_active>
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}
   d4292:	4620      	mov	r0, r4
   d4294:	bd10      	pop	{r4, pc}
   d4296:	bf00      	nop
   d4298:	000df478 	.word	0x000df478

000d429c <_ZN8particle9LEDStatusD0Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d429c:	b510      	push	{r4, lr}
   d429e:	4604      	mov	r4, r0
    setActive(false);
}
   d42a0:	f7ff ffee 	bl	d4280 <_ZN8particle9LEDStatusD1Ev>
   d42a4:	4620      	mov	r0, r4
   d42a6:	2120      	movs	r1, #32
   d42a8:	f007 febf 	bl	dc02a <_ZdlPvj>
   d42ac:	4620      	mov	r0, r4
   d42ae:	bd10      	pop	{r4, pc}

000d42b0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d42b0:	4b0a      	ldr	r3, [pc, #40]	; (d42dc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d42b2:	b510      	push	{r4, lr}
   d42b4:	4604      	mov	r4, r0
   d42b6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d42b8:	f006 f906 	bl	da4c8 <_ZN5spark10LogManager8instanceEv>
   d42bc:	4621      	mov	r1, r4
   d42be:	f006 faf3 	bl	da8a8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d42c2:	f007 fd5f 	bl	dbd84 <_Z16_fetch_usbserialv>
   d42c6:	f007 fd51 	bl	dbd6c <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d42ca:	4620      	mov	r0, r4
   d42cc:	4b04      	ldr	r3, [pc, #16]	; (d42e0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d42ce:	f840 3b04 	str.w	r3, [r0], #4
   d42d2:	f006 f9ef 	bl	da6b4 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d42d6:	4620      	mov	r0, r4
   d42d8:	bd10      	pop	{r4, pc}
   d42da:	bf00      	nop
   d42dc:	000df48c 	.word	0x000df48c
   d42e0:	000df460 	.word	0x000df460

000d42e4 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d42e4:	b510      	push	{r4, lr}
   d42e6:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d42e8:	f7ff ffe2 	bl	d42b0 <_ZN5spark16SerialLogHandlerD1Ev>
   d42ec:	4620      	mov	r0, r4
   d42ee:	2124      	movs	r1, #36	; 0x24
   d42f0:	f007 fe9b 	bl	dc02a <_ZdlPvj>
   d42f4:	4620      	mov	r0, r4
   d42f6:	bd10      	pop	{r4, pc}

000d42f8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42f8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d42fa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42fc:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d42fe:	b113      	cbz	r3, d4306 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4300:	2203      	movs	r2, #3
   d4302:	4601      	mov	r1, r0
   d4304:	4798      	blx	r3
    }
   d4306:	4620      	mov	r0, r4
   d4308:	bd10      	pop	{r4, pc}

000d430a <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d430a:	6803      	ldr	r3, [r0, #0]
   d430c:	b2c9      	uxtb	r1, r1
   d430e:	689b      	ldr	r3, [r3, #8]
   d4310:	4718      	bx	r3
	...

000d4314 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4314:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4316:	2500      	movs	r5, #0
   d4318:	468e      	mov	lr, r1
   d431a:	4915      	ldr	r1, [pc, #84]	; (d4370 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d431c:	7105      	strb	r5, [r0, #4]
   d431e:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4320:	6145      	str	r5, [r0, #20]
   d4322:	6001      	str	r1, [r0, #0]
   d4324:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4326:	e892 0003 	ldmia.w	r2, {r0, r1}
   d432a:	b085      	sub	sp, #20
   d432c:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d432e:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4332:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4336:	e896 0003 	ldmia.w	r6, {r0, r1}
   d433a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d433e:	e897 0003 	ldmia.w	r7, {r0, r1}
   d4342:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4346:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4348:	6960      	ldr	r0, [r4, #20]
   d434a:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d434c:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d434e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4350:	69a0      	ldr	r0, [r4, #24]
   d4352:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4354:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4356:	e88d 0028 	stmia.w	sp, {r3, r5}
   d435a:	4a06      	ldr	r2, [pc, #24]	; (d4374 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d435c:	4623      	mov	r3, r4
   d435e:	4671      	mov	r1, lr
   d4360:	f104 0008 	add.w	r0, r4, #8
   d4364:	f003 fd10 	bl	d7d88 <os_timer_create>
    }
   d4368:	4620      	mov	r0, r4
   d436a:	b005      	add	sp, #20
   d436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d436e:	bf00      	nop
   d4370:	000df44c 	.word	0x000df44c
   d4374:	000d4235 	.word	0x000d4235

000d4378 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4378:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d437a:	6880      	ldr	r0, [r0, #8]
   d437c:	2300      	movs	r3, #0
   d437e:	b138      	cbz	r0, d4390 <_ZN5Timer5_stopEjb+0x18>
   d4380:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4384:	2102      	movs	r1, #2
   d4386:	f003 fd17 	bl	d7db8 <os_timer_change>
   d438a:	fab0 f080 	clz	r0, r0
   d438e:	0940      	lsrs	r0, r0, #5
    }
   d4390:	b003      	add	sp, #12
   d4392:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4398 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4398:	b538      	push	{r3, r4, r5, lr}
   d439a:	4b10      	ldr	r3, [pc, #64]	; (d43dc <_ZN5TimerD1Ev+0x44>)
   d439c:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d439e:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d43a0:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d43a2:	b1a3      	cbz	r3, d43ce <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d43a8:	2200      	movs	r2, #0
   d43aa:	f7ff ffe5 	bl	d4378 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d43ae:	2100      	movs	r1, #0
   d43b0:	68a0      	ldr	r0, [r4, #8]
   d43b2:	f003 fd29 	bl	d7e08 <os_timer_set_id>
            while (running) {
   d43b6:	7923      	ldrb	r3, [r4, #4]
   d43b8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d43bc:	b113      	cbz	r3, d43c4 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d43be:	f003 fcc3 	bl	d7d48 <os_thread_yield>
   d43c2:	e7f8      	b.n	d43b6 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d43c4:	4629      	mov	r1, r5
   d43c6:	68a0      	ldr	r0, [r4, #8]
   d43c8:	f003 fce6 	bl	d7d98 <os_timer_destroy>
            handle = nullptr;
   d43cc:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d43ce:	f104 000c 	add.w	r0, r4, #12
   d43d2:	f7ff ff91 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43d6:	4620      	mov	r0, r4
   d43d8:	bd38      	pop	{r3, r4, r5, pc}
   d43da:	bf00      	nop
   d43dc:	000df44c 	.word	0x000df44c

000d43e0 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d43e0:	b510      	push	{r4, lr}
   d43e2:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43e4:	f7ff ffd8 	bl	d4398 <_ZN5TimerD1Ev>
   d43e8:	4620      	mov	r0, r4
   d43ea:	211c      	movs	r1, #28
   d43ec:	f007 fe1d 	bl	dc02a <_ZdlPvj>
   d43f0:	4620      	mov	r0, r4
   d43f2:	bd10      	pop	{r4, pc}

000d43f4 <_ZN5Timer5startEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43f6:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43f8:	2200      	movs	r2, #0
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43fa:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43fc:	4611      	mov	r1, r2
   d43fe:	f7ff ffbb 	bl	d4378 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4402:	68a8      	ldr	r0, [r5, #8]
   d4404:	2300      	movs	r3, #0
   d4406:	b140      	cbz	r0, d441a <_ZN5Timer5startEj+0x26>
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	9400      	str	r4, [sp, #0]
   d440c:	461a      	mov	r2, r3
   d440e:	4619      	mov	r1, r3
   d4410:	f003 fcd2 	bl	d7db8 <os_timer_change>
   d4414:	fab0 f080 	clz	r0, r0
   d4418:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d441a:	b003      	add	sp, #12
   d441c:	bd30      	pop	{r4, r5, pc}

000d441e <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:

inline LEDPattern particle::LEDStatus::pattern() const {
    return (LEDPattern)d_.pattern;
}

inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   d441e:	b510      	push	{r4, lr}
   d4420:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   d4422:	2200      	movs	r2, #0
   d4424:	7c40      	ldrb	r0, [r0, #17]
   d4426:	f003 ff09 	bl	d823c <led_pattern_period>
}

inline void particle::LEDStatus::setPeriod(uint16_t period) {
    // Pattern period cannot be set for custom pattern type
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   d442a:	7c63      	ldrb	r3, [r4, #17]
   d442c:	2b0f      	cmp	r3, #15
        d_.period = period;
   d442e:	bf18      	it	ne
   d4430:	8320      	strhne	r0, [r4, #24]
   d4432:	bd10      	pop	{r4, pc}

000d4434 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   d4434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(offloadMode){
   d4436:	4b2e      	ldr	r3, [pc, #184]	; (d44f0 <_Z10LEDHandlerv+0xbc>)
   d4438:	4d2e      	ldr	r5, [pc, #184]	; (d44f4 <_Z10LEDHandlerv+0xc0>)
   d443a:	781b      	ldrb	r3, [r3, #0]
   d443c:	b133      	cbz	r3, d444c <_Z10LEDHandlerv+0x18>
    return d_.color;
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   d443e:	7c6b      	ldrb	r3, [r5, #17]
   d4440:	2b0f      	cmp	r3, #15
   d4442:	d14f      	bne.n	d44e4 <_Z10LEDHandlerv+0xb0>
inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}

inline void particle::LEDStatus::setColor(uint32_t color) {
    d_.color = color;
   d4444:	23ff      	movs	r3, #255	; 0xff
   d4446:	616b      	str	r3, [r5, #20]
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
   d4448:	211e      	movs	r1, #30
   d444a:	e047      	b.n	d44dc <_Z10LEDHandlerv+0xa8>
        return;                
    }
    if(lowBattery){
   d444c:	4b2a      	ldr	r3, [pc, #168]	; (d44f8 <_Z10LEDHandlerv+0xc4>)
   d444e:	781b      	ldrb	r3, [r3, #0]
   d4450:	b95b      	cbnz	r3, d446a <_Z10LEDHandlerv+0x36>
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(logSensors){
   d4452:	4b2a      	ldr	r3, [pc, #168]	; (d44fc <_Z10LEDHandlerv+0xc8>)
   d4454:	781b      	ldrb	r3, [r3, #0]
   d4456:	b95b      	cbnz	r3, d4470 <_Z10LEDHandlerv+0x3c>
        SetPattern = LED_PATTERN_SOLID;
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(manualRC){
   d4458:	4b29      	ldr	r3, [pc, #164]	; (d4500 <_Z10LEDHandlerv+0xcc>)
   d445a:	781b      	ldrb	r3, [r3, #0]
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_SLOW;
    }
    else{
        SetSpeed = LED_SPEED_NORMAL;
   d445c:	2b00      	cmp	r3, #0
   d445e:	bf15      	itete	ne
   d4460:	270a      	movne	r7, #10
   d4462:	2714      	moveq	r7, #20
   d4464:	2602      	movne	r6, #2
   d4466:	2603      	moveq	r6, #3
   d4468:	e004      	b.n	d4474 <_Z10LEDHandlerv+0x40>
        status.setSpeed(LED_SPEED_FAST);
        return;                
    }
    if(lowBattery){
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_NORMAL;
   d446a:	2714      	movs	r7, #20
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
        return;                
    }
    if(lowBattery){
        SetPattern = LED_PATTERN_BLINK;
   d446c:	2602      	movs	r6, #2
   d446e:	e001      	b.n	d4474 <_Z10LEDHandlerv+0x40>
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(logSensors){
        SetPattern = LED_PATTERN_SOLID;
        SetSpeed = LED_SPEED_NORMAL;
   d4470:	2714      	movs	r7, #20
    if(lowBattery){
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(logSensors){
        SetPattern = LED_PATTERN_SOLID;
   d4472:	2601      	movs	r6, #1
    }

    statusMode = 0;
    statusMode = LTEAvail;
    statusMode |= XBeeAvail << 1;
    statusMode |= BLEAvail << 2;
   d4474:	4a23      	ldr	r2, [pc, #140]	; (d4504 <_Z10LEDHandlerv+0xd0>)
        SetPattern = LED_PATTERN_FADE;
    }

    statusMode = 0;
    statusMode = LTEAvail;
    statusMode |= XBeeAvail << 1;
   d4476:	4b24      	ldr	r3, [pc, #144]	; (d4508 <_Z10LEDHandlerv+0xd4>)
    statusMode |= BLEAvail << 2;
   d4478:	7814      	ldrb	r4, [r2, #0]
   d447a:	781b      	ldrb	r3, [r3, #0]
   d447c:	00a4      	lsls	r4, r4, #2
   d447e:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
        SetSpeed = LED_SPEED_NORMAL;
        SetPattern = LED_PATTERN_FADE;
    }

    statusMode = 0;
    statusMode = LTEAvail;
   d4482:	4b22      	ldr	r3, [pc, #136]	; (d450c <_Z10LEDHandlerv+0xd8>)
    statusMode |= XBeeAvail << 1;
    statusMode |= BLEAvail << 2;
   d4484:	781b      	ldrb	r3, [r3, #0]
   d4486:	431c      	orrs	r4, r3
   d4488:	b264      	sxtb	r4, r4
    Serial.printlnf("Status: %d",statusMode);
   d448a:	f007 fc7b 	bl	dbd84 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d448e:	4623      	mov	r3, r4
   d4490:	4a1f      	ldr	r2, [pc, #124]	; (d4510 <_Z10LEDHandlerv+0xdc>)
   d4492:	2101      	movs	r1, #1
    switch (statusMode){
   d4494:	3c01      	subs	r4, #1
   d4496:	f007 f84c 	bl	db532 <_ZN5Print11printf_implEbPKcz>
   d449a:	2c06      	cmp	r4, #6
   d449c:	d814      	bhi.n	d44c8 <_Z10LEDHandlerv+0x94>
   d449e:	e8df f004 	tbb	[pc, r4]
   d44a2:	0e10      	.short	0x0e10
   d44a4:	0406090b 	.word	0x0406090b
   d44a8:	16          	.byte	0x16
   d44a9:	00          	.byte	0x00
    case 7:
        SetColor = RGB_COLOR_CYAN;
        break;
    case 6:
        SetColor = RGB_COLOR_YELLOW;
   d44aa:	4b1a      	ldr	r3, [pc, #104]	; (d4514 <_Z10LEDHandlerv+0xe0>)
   d44ac:	e011      	b.n	d44d2 <_Z10LEDHandlerv+0x9e>
        break;
    case 5:
        SetColor = RGB_COLOR_WHITE;
   d44ae:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
        break;
   d44b2:	e00e      	b.n	d44d2 <_Z10LEDHandlerv+0x9e>
    case 4:
        SetColor = RGB_COLOR_BLUE;
   d44b4:	23ff      	movs	r3, #255	; 0xff
        break;
   d44b6:	e00c      	b.n	d44d2 <_Z10LEDHandlerv+0x9e>
    case 3:
        SetColor = RGB_COLOR_GREEN;
   d44b8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
        break;
   d44bc:	e009      	b.n	d44d2 <_Z10LEDHandlerv+0x9e>
    case 2:
        SetColor = RGB_COLOR_ORANGE;
   d44be:	4b16      	ldr	r3, [pc, #88]	; (d4518 <_Z10LEDHandlerv+0xe4>)
        break;
   d44c0:	e007      	b.n	d44d2 <_Z10LEDHandlerv+0x9e>
    case 1:
        SetColor = RGB_COLOR_MAGENTA;
   d44c2:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
        break;
   d44c6:	e004      	b.n	d44d2 <_Z10LEDHandlerv+0x9e>
    case 0:
        SetColor = RGB_COLOR_RED;
   d44c8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
        break;
   d44cc:	e001      	b.n	d44d2 <_Z10LEDHandlerv+0x9e>
    statusMode |= XBeeAvail << 1;
    statusMode |= BLEAvail << 2;
    Serial.printlnf("Status: %d",statusMode);
    switch (statusMode){
    case 7:
        SetColor = RGB_COLOR_CYAN;
   d44ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return d_.color;
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   d44d2:	7c6a      	ldrb	r2, [r5, #17]
   d44d4:	2a0f      	cmp	r2, #15
   d44d6:	d108      	bne.n	d44ea <_Z10LEDHandlerv+0xb6>
inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}

inline void particle::LEDStatus::setColor(uint32_t color) {
    d_.color = color;
   d44d8:	616b      	str	r3, [r5, #20]
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   d44da:	4639      	mov	r1, r7
   d44dc:	4805      	ldr	r0, [pc, #20]	; (d44f4 <_Z10LEDHandlerv+0xc0>)
   d44de:	f7ff ff9e 	bl	d441e <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   d44e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
        d_.pattern = pattern;
   d44e4:	2302      	movs	r3, #2
   d44e6:	746b      	strb	r3, [r5, #17]
   d44e8:	e7ac      	b.n	d4444 <_Z10LEDHandlerv+0x10>
   d44ea:	4a02      	ldr	r2, [pc, #8]	; (d44f4 <_Z10LEDHandlerv+0xc0>)
   d44ec:	7456      	strb	r6, [r2, #17]
   d44ee:	e7f3      	b.n	d44d8 <_Z10LEDHandlerv+0xa4>
   d44f0:	2003da0c 	.word	0x2003da0c
   d44f4:	2003dacc 	.word	0x2003dacc
   d44f8:	2003d494 	.word	0x2003d494
   d44fc:	2003db3f 	.word	0x2003db3f
   d4500:	2003e20c 	.word	0x2003e20c
   d4504:	2003db3d 	.word	0x2003db3d
   d4508:	2003db3e 	.word	0x2003db3e
   d450c:	2003da15 	.word	0x2003da15
   d4510:	000df509 	.word	0x000df509
   d4514:	00ffff00 	.word	0x00ffff00
   d4518:	00ff6000 	.word	0x00ff6000

000d451c <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d451c:	4613      	mov	r3, r2
   d451e:	460a      	mov	r2, r1
   d4520:	4901      	ldr	r1, [pc, #4]	; (d4528 <_ZN7FatFile4openEPKci+0xc>)
   d4522:	6809      	ldr	r1, [r1, #0]
   d4524:	f002 b8ab 	b.w	d667e <_ZN7FatFile4openEPS_PKci>
   d4528:	2003e30c 	.word	0x2003e30c

000d452c <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d452c:	b530      	push	{r4, r5, lr}
   d452e:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4530:	4b1c      	ldr	r3, [pc, #112]	; (d45a4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d4532:	9300      	str	r3, [sp, #0]
   d4534:	7913      	ldrb	r3, [r2, #4]
   d4536:	f88d 3004 	strb.w	r3, [sp, #4]
   d453a:	6893      	ldr	r3, [r2, #8]
   d453c:	9302      	str	r3, [sp, #8]
   d453e:	7b13      	ldrb	r3, [r2, #12]
   d4540:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4544:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d4548:	7b53      	ldrb	r3, [r2, #13]
   d454a:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d454e:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4550:	460a      	mov	r2, r1
   d4552:	466b      	mov	r3, sp
   d4554:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d4558:	4628      	mov	r0, r5
   d455a:	f002 ffdb 	bl	d7514 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d455e:	b1f0      	cbz	r0, d459e <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4560:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d4562:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d4566:	4628      	mov	r0, r5
   d4568:	f002 f882 	bl	d6670 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d456c:	2101      	movs	r1, #1
   d456e:	4620      	mov	r0, r4
   d4570:	f002 fe74 	bl	d725c <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4574:	4601      	mov	r1, r0
   d4576:	b168      	cbz	r0, d4594 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d4578:	4621      	mov	r1, r4
   d457a:	4628      	mov	r0, r5
   d457c:	f001 fe51 	bl	d6222 <_ZN7FatFile8openRootEP9FatVolume>
   d4580:	b168      	cbz	r0, d459e <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d4582:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4586:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d458a:	bf16      	itet	ne
   d458c:	4b06      	ldrne	r3, [pc, #24]	; (d45a8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d458e:	4618      	moveq	r0, r3
   d4590:	601d      	strne	r5, [r3, #0]
   d4592:	e005      	b.n	d45a0 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d4594:	4620      	mov	r0, r4
   d4596:	f002 fe61 	bl	d725c <_ZN9FatVolume4initEh>
   d459a:	2800      	cmp	r0, #0
   d459c:	d1ec      	bne.n	d4578 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d459e:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d45a0:	b005      	add	sp, #20
   d45a2:	bd30      	pop	{r4, r5, pc}
   d45a4:	000df440 	.word	0x000df440
   d45a8:	2003e30c 	.word	0x2003e30c

000d45ac <_ZN13SFE_UBLOX_GPS11processNMEAEc>:
//Useful for passing to other libraries like tinyGPS, MicroNMEA, or even
//a buffer, radio, etc.
void SFE_UBLOX_GPS::processNMEA(char incoming){
  //Take the incoming char from the Ublox I2C port and pass it on to the MicroNMEA lib
  //for sentence cracking
  nmea.process(incoming);
   d45ac:	4801      	ldr	r0, [pc, #4]	; (d45b4 <_ZN13SFE_UBLOX_GPS11processNMEAEc+0x8>)
   d45ae:	f001 bd3d 	b.w	d602c <_ZN9MicroNMEA7processEc>
   d45b2:	bf00      	nop
   d45b4:	2003d4a0 	.word	0x2003d4a0

000d45b8 <_Z8setupLTEv>:
}
//Initialization for LTE events and flags
void setupLTE(){
   d45b8:	b513      	push	{r0, r1, r4, lr}
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d45ba:	2400      	movs	r4, #0
   d45bc:	9401      	str	r4, [sp, #4]
   d45be:	9400      	str	r4, [sp, #0]
   d45c0:	2301      	movs	r3, #1
   d45c2:	4622      	mov	r2, r4
   d45c4:	4903      	ldr	r1, [pc, #12]	; (d45d4 <_Z8setupLTEv+0x1c>)
   d45c6:	4804      	ldr	r0, [pc, #16]	; (d45d8 <_Z8setupLTEv+0x20>)
   d45c8:	f003 fe6c 	bl	d82a4 <spark_subscribe>
    Particle.subscribe("CCHub", cmdLTEHandler); //Subscribe to LTE data from Central Control Hub
    LTEAvail = false;
   d45cc:	4b03      	ldr	r3, [pc, #12]	; (d45dc <_Z8setupLTEv+0x24>)
   d45ce:	701c      	strb	r4, [r3, #0]
}
   d45d0:	b002      	add	sp, #8
   d45d2:	bd10      	pop	{r4, pc}
   d45d4:	000d4cfd 	.word	0x000d4cfd
   d45d8:	000df514 	.word	0x000df514
   d45dc:	2003da15 	.word	0x2003da15

000d45e0 <_Z9setupXBeev>:
void setupSPI(){
    SPI.begin(SPI_MODE_MASTER);
    SPI.setClockSpeed(1000000);
}
//Code to initially configure XBee module over serial
void setupXBee(){
   d45e0:	b510      	push	{r4, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   d45e2:	f007 fb43 	bl	dbc6c <_Z22__fetch_global_Serial1v>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d45e6:	4a0c      	ldr	r2, [pc, #48]	; (d4618 <_Z9setupXBeev+0x38>)
   d45e8:	2100      	movs	r1, #0
   d45ea:	f006 ffa2 	bl	db532 <_ZN5Print11printf_implEbPKcz>
    delay(20);              //Wait some time before sending next character
   d45ee:	2014      	movs	r0, #20
   d45f0:	f003 ff08 	bl	d8404 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   d45f4:	f007 fb3a 	bl	dbc6c <_Z22__fetch_global_Serial1v>
   d45f8:	4a08      	ldr	r2, [pc, #32]	; (d461c <_Z9setupXBeev+0x3c>)
   d45fa:	2100      	movs	r1, #0
   d45fc:	f006 ff99 	bl	db532 <_ZN5Print11printf_implEbPKcz>
    delay(20);
   d4600:	2014      	movs	r0, #20
   d4602:	f003 feff 	bl	d8404 <delay>
    Serial1.printf("Hello from Bot %d\n", BOTNUM);   //Send Hello World message!
   d4606:	f007 fb31 	bl	dbc6c <_Z22__fetch_global_Serial1v>
   d460a:	2301      	movs	r3, #1
   d460c:	4a04      	ldr	r2, [pc, #16]	; (d4620 <_Z9setupXBeev+0x40>)
   d460e:	2100      	movs	r1, #0
}
   d4610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4614:	f006 bf8d 	b.w	db532 <_ZN5Print11printf_implEbPKcz>
   d4618:	000df9a6 	.word	0x000df9a6
   d461c:	000df4d3 	.word	0x000df4d3
   d4620:	000df51a 	.word	0x000df51a

000d4624 <_Z8setupGPSv>:

//I2C setup for NEO-M8U GPS
void setupGPS(){
   d4624:	b510      	push	{r4, lr}
    myGPS.begin(Wire);
   d4626:	f007 fcd5 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d462a:	4c07      	ldr	r4, [pc, #28]	; (d4648 <_Z8setupGPSv+0x24>)
   d462c:	4601      	mov	r1, r0
   d462e:	4620      	mov	r0, r4
   d4630:	f003 f9bf 	bl	d79b2 <_ZN13SFE_UBLOX_GPS5beginER7TwoWire>
    if (myGPS.isConnected() == false){
   d4634:	4620      	mov	r0, r4
   d4636:	f003 f9dd 	bl	d79f4 <_ZN13SFE_UBLOX_GPS11isConnectedEv>
        //Log.warn("Ublox GPS not detected at default I2C address, freezing.");
        //while (1);
    }
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   d463a:	f007 fccb 	bl	dbfd4 <_Z19__fetch_global_Wirev>

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d463e:	4903      	ldr	r1, [pc, #12]	; (d464c <_Z8setupGPSv+0x28>)
}
   d4640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4644:	f005 bb56 	b.w	d9cf4 <_ZN7TwoWire8setSpeedEm>
   d4648:	2003e234 	.word	0x2003e234
   d464c:	00061a80 	.word	0x00061a80

000d4650 <_Z12getGPSLatLonv>:

bool getGPSLatLon(){
   d4650:	b508      	push	{r3, lr}
    myGPS.checkUblox(); //See if new data is available. Process bytes as they come in.
   d4652:	4807      	ldr	r0, [pc, #28]	; (d4670 <_Z12getGPSLatLonv+0x20>)
   d4654:	f003 faee 	bl	d7c34 <_ZN13SFE_UBLOX_GPS10checkUbloxEv>
   d4658:	4b06      	ldr	r3, [pc, #24]	; (d4674 <_Z12getGPSLatLonv+0x24>)

  if(nmea.isValid() == true){
   d465a:	7d18      	ldrb	r0, [r3, #20]
   d465c:	b130      	cbz	r0, d466c <_Z12getGPSLatLonv+0x1c>
    latitude_mdeg= nmea.getLatitude();
   d465e:	4a06      	ldr	r2, [pc, #24]	; (d4678 <_Z12getGPSLatLonv+0x28>)
   d4660:	6999      	ldr	r1, [r3, #24]
   d4662:	6011      	str	r1, [r2, #0]
    longitude_mdeg = nmea.getLongitude();
   d4664:	69da      	ldr	r2, [r3, #28]
   d4666:	4b05      	ldr	r3, [pc, #20]	; (d467c <_Z12getGPSLatLonv+0x2c>)
   d4668:	2001      	movs	r0, #1
   d466a:	601a      	str	r2, [r3, #0]
  }
  else{
    //Log.warn("Location not available: %d Sattelites",nmea.getNumSatellites());
  }
  return false;
}
   d466c:	bd08      	pop	{r3, pc}
   d466e:	bf00      	nop
   d4670:	2003e234 	.word	0x2003e234
   d4674:	2003d4a0 	.word	0x2003d4a0
   d4678:	2003daec 	.word	0x2003daec
   d467c:	2003db10 	.word	0x2003db10

000d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4680:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4682:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4684:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4686:	b17c      	cbz	r4, d46a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4688:	6863      	ldr	r3, [r4, #4]
   d468a:	3b01      	subs	r3, #1
   d468c:	6063      	str	r3, [r4, #4]
   d468e:	b95b      	cbnz	r3, d46a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4690:	6823      	ldr	r3, [r4, #0]
   d4692:	4620      	mov	r0, r4
   d4694:	689b      	ldr	r3, [r3, #8]
   d4696:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4698:	68a3      	ldr	r3, [r4, #8]
   d469a:	3b01      	subs	r3, #1
   d469c:	60a3      	str	r3, [r4, #8]
   d469e:	b91b      	cbnz	r3, d46a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d46a0:	6823      	ldr	r3, [r4, #0]
   d46a2:	4620      	mov	r0, r4
   d46a4:	68db      	ldr	r3, [r3, #12]
   d46a6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d46a8:	4628      	mov	r0, r5
   d46aa:	bd38      	pop	{r3, r4, r5, pc}

000d46ac <_Z8sendDataPKchbbb>:
    if(updateMotorControl){
        updateMotorControl = false;        
    }
}

void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   d46ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d46b0:	b084      	sub	sp, #16
   d46b2:	af02      	add	r7, sp, #8
   d46b4:	4604      	mov	r4, r0
   d46b6:	460e      	mov	r6, r1
   d46b8:	4691      	mov	r9, r2
   d46ba:	4698      	mov	r8, r3
    char outStr[strlen(dataOut)+2];
   d46bc:	f008 fcdd 	bl	dd07a <strlen>
   d46c0:	3009      	adds	r0, #9
   d46c2:	f020 0007 	bic.w	r0, r0, #7
   d46c6:	ebad 0d00 	sub.w	sp, sp, r0
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   d46ca:	4620      	mov	r0, r4
   d46cc:	f008 fcd5 	bl	dd07a <strlen>
        updateMotorControl = false;        
    }
}

void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
    char outStr[strlen(dataOut)+2];
   d46d0:	ad02      	add	r5, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   d46d2:	4603      	mov	r3, r0
   d46d4:	4622      	mov	r2, r4
   d46d6:	4926      	ldr	r1, [pc, #152]	; (d4770 <_Z8sendDataPKchbbb+0xc4>)
   d46d8:	4628      	mov	r0, r5
   d46da:	f003 fe63 	bl	d83a4 <sprintf>
    if(sendLTE || sendMode == 4){
   d46de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   d46e2:	b90b      	cbnz	r3, d46e8 <_Z8sendDataPKchbbb+0x3c>
   d46e4:	2e04      	cmp	r6, #4
   d46e6:	d10c      	bne.n	d4702 <_Z8sendDataPKchbbb+0x56>
   d46e8:	4b22      	ldr	r3, [pc, #136]	; (d4774 <_Z8sendDataPKchbbb+0xc8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d46ea:	4923      	ldr	r1, [pc, #140]	; (d4778 <_Z8sendDataPKchbbb+0xcc>)
   d46ec:	781b      	ldrb	r3, [r3, #0]
   d46ee:	f88d 3000 	strb.w	r3, [sp]
   d46f2:	4638      	mov	r0, r7
   d46f4:	233c      	movs	r3, #60	; 0x3c
   d46f6:	462a      	mov	r2, r5
   d46f8:	f005 f8fe 	bl	d98f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d46fc:	1d38      	adds	r0, r7, #4
   d46fe:	f7ff ffbf 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("Bot1dat", outStr, PRIVATE);
        sendLTE = false;
    }
    if((sendBLE || sendMode == 1) && BLE.connected()){
   d4702:	f1b9 0f00 	cmp.w	r9, #0
   d4706:	d101      	bne.n	d470c <_Z8sendDataPKchbbb+0x60>
   d4708:	2e01      	cmp	r6, #1
   d470a:	d104      	bne.n	d4716 <_Z8sendDataPKchbbb+0x6a>
   d470c:	f004 f9a8 	bl	d8a60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4710:	f004 fa3f 	bl	d8b92 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4714:	b950      	cbnz	r0, d472c <_Z8sendDataPKchbbb+0x80>
        uint8_t txBuf_tmp[strlen(dataOut)];
        memcpy(txBuf_tmp,outStr,strlen(dataOut));
        txCharacteristic.setValue(txBuf_tmp, strlen(dataOut));
    }
    if(sendXBee || sendMode == 2){
   d4716:	f1b8 0f00 	cmp.w	r8, #0
   d471a:	d101      	bne.n	d4720 <_Z8sendDataPKchbbb+0x74>
   d471c:	2e02      	cmp	r6, #2
   d471e:	d123      	bne.n	d4768 <_Z8sendDataPKchbbb+0xbc>
        Serial1.println(outStr);
   d4720:	f007 faa4 	bl	dbc6c <_Z22__fetch_global_Serial1v>
   d4724:	4629      	mov	r1, r5
   d4726:	f006 feda 	bl	db4de <_ZN5Print7printlnEPKc>
    }
}
   d472a:	e01d      	b.n	d4768 <_Z8sendDataPKchbbb+0xbc>
    if(sendLTE || sendMode == 4){
        Particle.publish("Bot1dat", outStr, PRIVATE);
        sendLTE = false;
    }
    if((sendBLE || sendMode == 1) && BLE.connected()){
        uint8_t txBuf_tmp[strlen(dataOut)];
   d472c:	4620      	mov	r0, r4
   d472e:	f008 fca4 	bl	dd07a <strlen>
   d4732:	3007      	adds	r0, #7
   d4734:	f020 0007 	bic.w	r0, r0, #7
        memcpy(txBuf_tmp,outStr,strlen(dataOut));
        txCharacteristic.setValue(txBuf_tmp, strlen(dataOut));
   d4738:	46e9      	mov	r9, sp
    if(sendLTE || sendMode == 4){
        Particle.publish("Bot1dat", outStr, PRIVATE);
        sendLTE = false;
    }
    if((sendBLE || sendMode == 1) && BLE.connected()){
        uint8_t txBuf_tmp[strlen(dataOut)];
   d473a:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(dataOut));
   d473e:	4620      	mov	r0, r4
   d4740:	f008 fc9b 	bl	dd07a <strlen>
    if(sendLTE || sendMode == 4){
        Particle.publish("Bot1dat", outStr, PRIVATE);
        sendLTE = false;
    }
    if((sendBLE || sendMode == 1) && BLE.connected()){
        uint8_t txBuf_tmp[strlen(dataOut)];
   d4744:	f10d 0a08 	add.w	sl, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(dataOut));
   d4748:	4602      	mov	r2, r0
   d474a:	4629      	mov	r1, r5
   d474c:	4650      	mov	r0, sl
   d474e:	f008 fbe8 	bl	dcf22 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(dataOut));
   d4752:	4620      	mov	r0, r4
   d4754:	f008 fc91 	bl	dd07a <strlen>
   d4758:	2300      	movs	r3, #0
   d475a:	4602      	mov	r2, r0
   d475c:	4651      	mov	r1, sl
   d475e:	4807      	ldr	r0, [pc, #28]	; (d477c <_Z8sendDataPKchbbb+0xd0>)
   d4760:	f004 f8cc 	bl	d88fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   d4764:	46cd      	mov	sp, r9
   d4766:	e7d6      	b.n	d4716 <_Z8sendDataPKchbbb+0x6a>
    }
    if(sendXBee || sendMode == 2){
        Serial1.println(outStr);
    }
}
   d4768:	3708      	adds	r7, #8
   d476a:	46bd      	mov	sp, r7
   d476c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4770:	000df52d 	.word	0x000df52d
   d4774:	2003d4e4 	.word	0x2003d4e4
   d4778:	000df534 	.word	0x000df534
   d477c:	2003db40 	.word	0x2003db40

000d4780 <_Z16sendResponseDatav>:
  }
  return false;
}

//Function to check if response data to a request needs to be sent out
void sendResponseData(){
   d4780:	b530      	push	{r4, r5, lr}
    if(requestActive){
   d4782:	4b08      	ldr	r3, [pc, #32]	; (d47a4 <_Z16sendResponseDatav+0x24>)
   d4784:	781b      	ldrb	r3, [r3, #0]
  }
  return false;
}

//Function to check if response data to a request needs to be sent out
void sendResponseData(){
   d4786:	b08f      	sub	sp, #60	; 0x3c
    if(requestActive){
   d4788:	b153      	cbz	r3, d47a0 <_Z16sendResponseDatav+0x20>
        char responseStr[50];
        memcpy(responseStr,0,50);
   d478a:	2500      	movs	r5, #0
   d478c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d478e:	ac01      	add	r4, sp, #4
   d4790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d479a:	682b      	ldr	r3, [r5, #0]
   d479c:	8023      	strh	r3, [r4, #0]
   d479e:	deff      	udf	#255	; 0xff
        sprintf(responseStr,"GL%0.6f,GO%0.6f,DO%0.4f,PH%0.4f,CA%0.4f,CB%0.4f,TP%0.4f",latitude,longitude,senseDO,sensePH,senseCond,senseMiniCond,senseTemp);
        sendData(responseStr,requestActive,false,false,false);
        requestActive = 0;
    }
}
   d47a0:	b00f      	add	sp, #60	; 0x3c
   d47a2:	bd30      	pop	{r4, r5, pc}
   d47a4:	2003db3c 	.word	0x2003db3c

000d47a8 <_Z12statusUpdatev>:

void statusUpdate(){
   d47a8:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){
   d47aa:	4d29      	ldr	r5, [pc, #164]	; (d4850 <_Z12statusUpdatev+0xa8>)
   d47ac:	782b      	ldrb	r3, [r5, #0]
        sendData(responseStr,requestActive,false,false,false);
        requestActive = 0;
    }
}

void statusUpdate(){
   d47ae:	b08e      	sub	sp, #56	; 0x38
    if(statusReady){
   d47b0:	2b00      	cmp	r3, #0
   d47b2:	d04a      	beq.n	d484a <_Z12statusUpdatev+0xa2>
        char updateStr[28];
        sprintf(updateStr,"B%dABsup%03d%03d%0.6f%0.6f",BOTNUM,battPercent,statusFlags,latitude,longitude);
   d47b4:	4b27      	ldr	r3, [pc, #156]	; (d4854 <_Z12statusUpdatev+0xac>)
   d47b6:	781c      	ldrb	r4, [r3, #0]
   d47b8:	4b27      	ldr	r3, [pc, #156]	; (d4858 <_Z12statusUpdatev+0xb0>)
   d47ba:	6818      	ldr	r0, [r3, #0]
   d47bc:	f007 ff00 	bl	dc5c0 <__aeabi_f2d>
   d47c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d47c4:	4b25      	ldr	r3, [pc, #148]	; (d485c <_Z12statusUpdatev+0xb4>)
   d47c6:	6818      	ldr	r0, [r3, #0]
   d47c8:	f007 fefa 	bl	dc5c0 <__aeabi_f2d>
   d47cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d47d0:	4b23      	ldr	r3, [pc, #140]	; (d4860 <_Z12statusUpdatev+0xb8>)
   d47d2:	4924      	ldr	r1, [pc, #144]	; (d4864 <_Z12statusUpdatev+0xbc>)
   d47d4:	781b      	ldrb	r3, [r3, #0]
   d47d6:	9300      	str	r3, [sp, #0]
   d47d8:	2201      	movs	r2, #1
   d47da:	4623      	mov	r3, r4
   d47dc:	a807      	add	r0, sp, #28
   d47de:	f003 fde1 	bl	d83a4 <sprintf>
        Serial.println(updateStr);
   d47e2:	f007 facf 	bl	dbd84 <_Z16_fetch_usbserialv>
   d47e6:	a907      	add	r1, sp, #28
   d47e8:	f006 fe79 	bl	db4de <_ZN5Print7printlnEPKc>
        Serial.println(LTEStatusCount);
   d47ec:	f007 faca 	bl	dbd84 <_Z16_fetch_usbserialv>
   d47f0:	4c1d      	ldr	r4, [pc, #116]	; (d4868 <_Z12statusUpdatev+0xc0>)
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d47f2:	220a      	movs	r2, #10
   d47f4:	8821      	ldrh	r1, [r4, #0]
   d47f6:	4606      	mov	r6, r0
   d47f8:	f006 fe7b 	bl	db4f2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d47fc:	4630      	mov	r0, r6
   d47fe:	f006 fe62 	bl	db4c6 <_ZN5Print7printlnEv>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   d4802:	4b1a      	ldr	r3, [pc, #104]	; (d486c <_Z12statusUpdatev+0xc4>)
   d4804:	491a      	ldr	r1, [pc, #104]	; (d4870 <_Z12statusUpdatev+0xc8>)
   d4806:	781a      	ldrb	r2, [r3, #0]
   d4808:	b95a      	cbnz	r2, d4822 <_Z12statusUpdatev+0x7a>
   d480a:	780b      	ldrb	r3, [r1, #0]
   d480c:	b94b      	cbnz	r3, d4822 <_Z12statusUpdatev+0x7a>
   d480e:	8823      	ldrh	r3, [r4, #0]
   d4810:	b13b      	cbz	r3, d4822 <_Z12statusUpdatev+0x7a>
   d4812:	f013 0303 	ands.w	r3, r3, #3
   d4816:	d104      	bne.n	d4822 <_Z12statusUpdatev+0x7a>
            sendData(updateStr,0,false,false,true);
   d4818:	2201      	movs	r2, #1
   d481a:	9200      	str	r2, [sp, #0]
   d481c:	4619      	mov	r1, r3
   d481e:	461a      	mov	r2, r3
   d4820:	e009      	b.n	d4836 <_Z12statusUpdatev+0x8e>
        }
        else{
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;
   d4822:	780b      	ldrb	r3, [r1, #0]
   d4824:	b903      	cbnz	r3, d4828 <_Z12statusUpdatev+0x80>
   d4826:	b112      	cbz	r2, d482e <_Z12statusUpdatev+0x86>
   d4828:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   d482c:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   d482e:	2100      	movs	r1, #0
   d4830:	2301      	movs	r3, #1
   d4832:	9100      	str	r1, [sp, #0]
   d4834:	461a      	mov	r2, r3
   d4836:	a807      	add	r0, sp, #28
   d4838:	f7ff ff38 	bl	d46ac <_Z8sendDataPKchbbb>
        }
        if(LTEStatusCount) LTEStatusCount--;
   d483c:	8823      	ldrh	r3, [r4, #0]
   d483e:	b113      	cbz	r3, d4846 <_Z12statusUpdatev+0x9e>
   d4840:	4a09      	ldr	r2, [pc, #36]	; (d4868 <_Z12statusUpdatev+0xc0>)
   d4842:	3b01      	subs	r3, #1
   d4844:	8013      	strh	r3, [r2, #0]
        statusReady = false;
   d4846:	2300      	movs	r3, #0
   d4848:	702b      	strb	r3, [r5, #0]
    }
}
   d484a:	b00e      	add	sp, #56	; 0x38
   d484c:	bd70      	pop	{r4, r5, r6, pc}
   d484e:	bf00      	nop
   d4850:	2003e2bc 	.word	0x2003e2bc
   d4854:	2003daf0 	.word	0x2003daf0
   d4858:	2003db6c 	.word	0x2003db6c
   d485c:	2003e210 	.word	0x2003e210
   d4860:	2003e2d4 	.word	0x2003e2d4
   d4864:	000df53c 	.word	0x000df53c
   d4868:	2003db30 	.word	0x2003db30
   d486c:	2003db3d 	.word	0x2003db3d
   d4870:	2003db3e 	.word	0x2003db3e

000d4874 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4874:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4876:	6804      	ldr	r4, [r0, #0]
   d4878:	6843      	ldr	r3, [r0, #4]
   d487a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d487c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d487e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4882:	42a6      	cmp	r6, r4
   d4884:	d004      	beq.n	d4890 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d4886:	4620      	mov	r0, r4
   d4888:	f007 f806 	bl	db898 <_ZN6StringD1Ev>
   d488c:	3414      	adds	r4, #20
   d488e:	e7f8      	b.n	d4882 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4890:	6828      	ldr	r0, [r5, #0]
   d4892:	f003 fd77 	bl	d8384 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4896:	4628      	mov	r0, r5
   d4898:	bd70      	pop	{r4, r5, r6, pc}

000d489a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d489a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d489c:	460e      	mov	r6, r1
   d489e:	b091      	sub	sp, #68	; 0x44

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d48a0:	2100      	movs	r1, #0
   d48a2:	4604      	mov	r4, r0
   d48a4:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d48a6:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d48a8:	ad0b      	add	r5, sp, #44	; 0x2c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d48aa:	4619      	mov	r1, r3
   d48ac:	a806      	add	r0, sp, #24
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d48ae:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d48b0:	f003 ff48 	bl	d8744 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d48b4:	9916      	ldr	r1, [sp, #88]	; 0x58
   d48b6:	4628      	mov	r0, r5
   d48b8:	f003 ff44 	bl	d8744 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d48bc:	aa10      	add	r2, sp, #64	; 0x40
   d48be:	783b      	ldrb	r3, [r7, #0]
   d48c0:	f802 3d2c 	strb.w	r3, [r2, #-44]!
        construct(desc, properties, cUuid, sUuid, callback, context);
   d48c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d48c6:	9302      	str	r3, [sp, #8]
   d48c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d48ca:	9301      	str	r3, [sp, #4]
   d48cc:	4620      	mov	r0, r4
   d48ce:	9500      	str	r5, [sp, #0]
   d48d0:	ab06      	add	r3, sp, #24
   d48d2:	4631      	mov	r1, r6
   d48d4:	f004 fca4 	bl	d9220 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d48d8:	4620      	mov	r0, r4
   d48da:	b011      	add	sp, #68	; 0x44
   d48dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d48de <_ZN5Print8printlnfIIPcEEEjPKcDpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d48de:	4613      	mov	r3, r2
   d48e0:	460a      	mov	r2, r1
   d48e2:	2101      	movs	r1, #1
   d48e4:	f006 be25 	b.w	db532 <_ZN5Print11printf_implEbPKcz>

000d48e8 <_Z13dataOffloaderv>:
        BLEAvail = false;
    }
    else BLEAvail = true;
}

void dataOffloader(){
   d48e8:	b510      	push	{r4, lr}
    if (!logDir.open("/")) {
   d48ea:	2200      	movs	r2, #0
        BLEAvail = false;
    }
    else BLEAvail = true;
}

void dataOffloader(){
   d48ec:	b0ac      	sub	sp, #176	; 0xb0
    if (!logDir.open("/")) {
   d48ee:	4953      	ldr	r1, [pc, #332]	; (d4a3c <_Z13dataOffloaderv+0x154>)
   d48f0:	4853      	ldr	r0, [pc, #332]	; (d4a40 <_Z13dataOffloaderv+0x158>)
   d48f2:	f7ff fe13 	bl	d451c <_ZN7FatFile4openEPKci>
   d48f6:	b380      	cbz	r0, d495a <_Z13dataOffloaderv+0x72>
        offloadMode = false;
        return;
    }
    while(!BLE.connected()){
   d48f8:	f004 f8b2 	bl	d8a60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d48fc:	f004 f949 	bl	d8b92 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4900:	4604      	mov	r4, r0
   d4902:	b9f0      	cbnz	r0, d4942 <_Z13dataOffloaderv+0x5a>
        BLE.advertise(&advData);;
   d4904:	f004 f8ac 	bl	d8a60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4908:	4622      	mov	r2, r4
   d490a:	494e      	ldr	r1, [pc, #312]	; (d4a44 <_Z13dataOffloaderv+0x15c>)
   d490c:	f004 f924 	bl	d8b58 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   d4910:	200a      	movs	r0, #10
   d4912:	f003 fd77 	bl	d8404 <delay>
   d4916:	e7ef      	b.n	d48f8 <_Z13dataOffloaderv+0x10>
                offloadCharacteristic.setValue(lineBuffer);
                delayMicroseconds(500);
                //delay(1);
                //Serial.println(lineBuffer);
            }
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   d4918:	2226      	movs	r2, #38	; 0x26
   d491a:	4601      	mov	r1, r0
   d491c:	a809      	add	r0, sp, #36	; 0x24
   d491e:	f008 fb26 	bl	dcf6e <memset>
            strcpy(fileCode,"filecomp");
   d4922:	4949      	ldr	r1, [pc, #292]	; (d4a48 <_Z13dataOffloaderv+0x160>)
   d4924:	a809      	add	r0, sp, #36	; 0x24
   d4926:	f008 fb84 	bl	dd032 <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d492a:	4623      	mov	r3, r4
   d492c:	2226      	movs	r2, #38	; 0x26
   d492e:	a909      	add	r1, sp, #36	; 0x24
   d4930:	4846      	ldr	r0, [pc, #280]	; (d4a4c <_Z13dataOffloaderv+0x164>)
   d4932:	f003 ffe3 	bl	d88fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            //memcpy(codeBuf,fileCode,8+MAX_FILENAME_LEN);
            offloadCharacteristic.setValue(fileCode);
            delay(150);
   d4936:	2096      	movs	r0, #150	; 0x96
   d4938:	f003 fd64 	bl	d8404 <delay>
            
            myFile.close();
   d493c:	4844      	ldr	r0, [pc, #272]	; (d4a50 <_Z13dataOffloaderv+0x168>)
   d493e:	f001 fe97 	bl	d6670 <_ZN7FatFile5closeEv>
        BLE.advertise(&advData);;
        delay(10);
    }
    char fileCode[8 + MAX_FILENAME_LEN];
    uint8_t codeBuf[8 + MAX_FILENAME_LEN];
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   d4942:	2200      	movs	r2, #0
   d4944:	493e      	ldr	r1, [pc, #248]	; (d4a40 <_Z13dataOffloaderv+0x158>)
   d4946:	4842      	ldr	r0, [pc, #264]	; (d4a50 <_Z13dataOffloaderv+0x168>)
   d4948:	f001 fe1d 	bl	d6586 <_ZN7FatFile8openNextEPS_i>
   d494c:	b140      	cbz	r0, d4960 <_Z13dataOffloaderv+0x78>
   d494e:	f004 f887 	bl	d8a60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4952:	f004 f91e 	bl	d8b92 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4956:	b9c8      	cbnz	r0, d498c <_Z13dataOffloaderv+0xa4>
   d4958:	e002      	b.n	d4960 <_Z13dataOffloaderv+0x78>
    else BLEAvail = true;
}

void dataOffloader(){
    if (!logDir.open("/")) {
        offloadMode = false;
   d495a:	4b3e      	ldr	r3, [pc, #248]	; (d4a54 <_Z13dataOffloaderv+0x16c>)
   d495c:	7018      	strb	r0, [r3, #0]
   d495e:	e06b      	b.n	d4a38 <_Z13dataOffloaderv+0x150>
            delay(150);
            
            myFile.close();
        }
    }
    logDir.close();
   d4960:	4837      	ldr	r0, [pc, #220]	; (d4a40 <_Z13dataOffloaderv+0x158>)
   d4962:	f001 fe85 	bl	d6670 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   d4966:	2226      	movs	r2, #38	; 0x26
   d4968:	2100      	movs	r1, #0
   d496a:	a809      	add	r0, sp, #36	; 0x24
   d496c:	f008 faff 	bl	dcf6e <memset>
    strcpy(fileCode,"filedone");
   d4970:	4939      	ldr	r1, [pc, #228]	; (d4a58 <_Z13dataOffloaderv+0x170>)
   d4972:	a809      	add	r0, sp, #36	; 0x24
   d4974:	f008 fb5d 	bl	dd032 <strcpy>
   d4978:	2300      	movs	r3, #0
   d497a:	2226      	movs	r2, #38	; 0x26
   d497c:	a909      	add	r1, sp, #36	; 0x24
   d497e:	4833      	ldr	r0, [pc, #204]	; (d4a4c <_Z13dataOffloaderv+0x164>)
   d4980:	f003 ffbc 	bl	d88fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    //memcpy(codeBuf,fileCode,8+MAX_FILENAME_LEN);
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
   d4984:	4b33      	ldr	r3, [pc, #204]	; (d4a54 <_Z13dataOffloaderv+0x16c>)
   d4986:	2200      	movs	r2, #0
   d4988:	701a      	strb	r2, [r3, #0]
   d498a:	e055      	b.n	d4a38 <_Z13dataOffloaderv+0x150>
    }
    char fileCode[8 + MAX_FILENAME_LEN];
    uint8_t codeBuf[8 + MAX_FILENAME_LEN];
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
        char namebuf[MAX_FILENAME_LEN];
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   d498c:	221e      	movs	r2, #30
   d498e:	a901      	add	r1, sp, #4
   d4990:	482f      	ldr	r0, [pc, #188]	; (d4a50 <_Z13dataOffloaderv+0x168>)
   d4992:	f001 ffb7 	bl	d6904 <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   d4996:	f007 f9f5 	bl	dbd84 <_Z16_fetch_usbserialv>
   d499a:	4930      	ldr	r1, [pc, #192]	; (d4a5c <_Z13dataOffloaderv+0x174>)
   d499c:	aa01      	add	r2, sp, #4
   d499e:	f7ff ff9e 	bl	d48de <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   d49a2:	a801      	add	r0, sp, #4
   d49a4:	f008 fb69 	bl	dd07a <strlen>
   d49a8:	ab01      	add	r3, sp, #4
   d49aa:	3804      	subs	r0, #4
   d49ac:	4418      	add	r0, r3
   d49ae:	f008 fb6d 	bl	dd08c <strlwr>
   d49b2:	492b      	ldr	r1, [pc, #172]	; (d4a60 <_Z13dataOffloaderv+0x178>)
   d49b4:	f008 fbb2 	bl	dd11c <strstr>
   d49b8:	2800      	cmp	r0, #0
   d49ba:	d0bf      	beq.n	d493c <_Z13dataOffloaderv+0x54>
            myFile.close();
            continue;
        }
        else{
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   d49bc:	2226      	movs	r2, #38	; 0x26
   d49be:	2100      	movs	r1, #0
   d49c0:	a809      	add	r0, sp, #36	; 0x24
   d49c2:	f008 fad4 	bl	dcf6e <memset>
            strcpy(fileCode,"filename");
   d49c6:	4927      	ldr	r1, [pc, #156]	; (d4a64 <_Z13dataOffloaderv+0x17c>)
   d49c8:	a809      	add	r0, sp, #36	; 0x24
   d49ca:	f008 fb32 	bl	dd032 <strcpy>
            strcat(fileCode,namebuf);
   d49ce:	a901      	add	r1, sp, #4
   d49d0:	a809      	add	r0, sp, #36	; 0x24
   d49d2:	f008 fafd 	bl	dcfd0 <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   d49d6:	f007 f9d5 	bl	dbd84 <_Z16_fetch_usbserialv>
   d49da:	aa09      	add	r2, sp, #36	; 0x24
   d49dc:	4922      	ldr	r1, [pc, #136]	; (d4a68 <_Z13dataOffloaderv+0x180>)
   d49de:	f7ff ff7e 	bl	d48de <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
   d49e2:	2300      	movs	r3, #0
   d49e4:	2226      	movs	r2, #38	; 0x26
   d49e6:	a909      	add	r1, sp, #36	; 0x24
   d49e8:	4818      	ldr	r0, [pc, #96]	; (d4a4c <_Z13dataOffloaderv+0x164>)
   d49ea:	f003 ff87 	bl	d88fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            offloadCharacteristic.setValue(fileCode);
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   d49ee:	f007 f9c9 	bl	dbd84 <_Z16_fetch_usbserialv>
   d49f2:	aa01      	add	r2, sp, #4
   d49f4:	491d      	ldr	r1, [pc, #116]	; (d4a6c <_Z13dataOffloaderv+0x184>)
   d49f6:	f7ff ff72 	bl	d48de <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
            delay(150);
   d49fa:	2096      	movs	r0, #150	; 0x96
   d49fc:	f003 fd02 	bl	d8404 <delay>
            while(myFile.available()){
   d4a00:	481b      	ldr	r0, [pc, #108]	; (d4a70 <_Z13dataOffloaderv+0x188>)
   d4a02:	f7ff fb69 	bl	d40d8 <_ZN4File9availableEv>
   d4a06:	4604      	mov	r4, r0
   d4a08:	2800      	cmp	r0, #0
   d4a0a:	d085      	beq.n	d4918 <_Z13dataOffloaderv+0x30>
                char lineBuffer[BLE_OFFLD_BUF];
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   d4a0c:	2264      	movs	r2, #100	; 0x64
   d4a0e:	2100      	movs	r1, #0
   d4a10:	a813      	add	r0, sp, #76	; 0x4c
   d4a12:	f008 faac 	bl	dcf6e <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   d4a16:	aa13      	add	r2, sp, #76	; 0x4c
   d4a18:	2364      	movs	r3, #100	; 0x64
   d4a1a:	210d      	movs	r1, #13
   d4a1c:	4814      	ldr	r0, [pc, #80]	; (d4a70 <_Z13dataOffloaderv+0x188>)
   d4a1e:	f006 fef8 	bl	db812 <_ZN6Stream14readBytesUntilEcPcj>
   d4a22:	2300      	movs	r3, #0
   d4a24:	2264      	movs	r2, #100	; 0x64
   d4a26:	a913      	add	r1, sp, #76	; 0x4c
   d4a28:	4808      	ldr	r0, [pc, #32]	; (d4a4c <_Z13dataOffloaderv+0x164>)
   d4a2a:	f003 ff67 	bl	d88fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4a2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4a32:	f003 f9f9 	bl	d7e28 <HAL_Delay_Microseconds>
   d4a36:	e7e3      	b.n	d4a00 <_Z13dataOffloaderv+0x118>
    strcpy(fileCode,"filedone");
    //memcpy(codeBuf,fileCode,8+MAX_FILENAME_LEN);
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}
   d4a38:	b02c      	add	sp, #176	; 0xb0
   d4a3a:	bd10      	pop	{r4, pc}
   d4a3c:	000df565 	.word	0x000df565
   d4a40:	2003d9ac 	.word	0x2003d9ac
   d4a44:	2003d470 	.word	0x2003d470
   d4a48:	000df5ab 	.word	0x000df5ab
   d4a4c:	2003d498 	.word	0x2003d498
   d4a50:	2003da28 	.word	0x2003da28
   d4a54:	2003da0c 	.word	0x2003da0c
   d4a58:	000df5b4 	.word	0x000df5b4
   d4a5c:	000df5bd 	.word	0x000df5bd
   d4a60:	000df5e6 	.word	0x000df5e6
   d4a64:	000df567 	.word	0x000df567
   d4a68:	000df570 	.word	0x000df570
   d4a6c:	000df583 	.word	0x000df583
   d4a70:	2003da18 	.word	0x2003da18

000d4a74 <_Z14processCommandPKchb>:
        uint8_t BLEPeer;    //Identify which peer this bot is connected to

};*/

//Mode 1 - BLE, Mode 2 - XBEE, Mode 4 - LTE
void processCommand(const char *command, uint8_t mode, bool sendAck){
   d4a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a78:	b087      	sub	sp, #28
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   d4a7a:	7883      	ldrb	r3, [r0, #2]
   d4a7c:	2b41      	cmp	r3, #65	; 0x41
        uint8_t BLEPeer;    //Identify which peer this bot is connected to

};*/

//Mode 1 - BLE, Mode 2 - XBEE, Mode 4 - LTE
void processCommand(const char *command, uint8_t mode, bool sendAck){
   d4a7e:	af02      	add	r7, sp, #8
   d4a80:	4604      	mov	r4, r0
   d4a82:	468a      	mov	sl, r1
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   d4a84:	d102      	bne.n	d4a8c <_Z14processCommandPKchb+0x18>
   d4a86:	78c3      	ldrb	r3, [r0, #3]
   d4a88:	2b42      	cmp	r3, #66	; 0x42
   d4a8a:	e004      	b.n	d4a96 <_Z14processCommandPKchb+0x22>
   d4a8c:	2b42      	cmp	r3, #66	; 0x42
   d4a8e:	f040 8105 	bne.w	d4c9c <_Z14processCommandPKchb+0x228>
   d4a92:	78c3      	ldrb	r3, [r0, #3]
   d4a94:	2b31      	cmp	r3, #49	; 0x31
   d4a96:	f040 8101 	bne.w	d4c9c <_Z14processCommandPKchb+0x228>
        
        uint8_t checksum;
        char dataStr[strlen(command)-9];
   d4a9a:	4620      	mov	r0, r4
   d4a9c:	f008 faed 	bl	dd07a <strlen>
   d4aa0:	3802      	subs	r0, #2
   d4aa2:	f020 0007 	bic.w	r0, r0, #7
            }
        }

        if(sendAck){    //Transmit out acknowledgement if needed

        }
   d4aa6:	46e9      	mov	r9, sp
void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
        
        uint8_t checksum;
        char dataStr[strlen(command)-9];
   d4aa8:	ebad 0d00 	sub.w	sp, sp, r0
        char cmdStr[3];
        char checkStr[2];
        checkStr[0] = command[strlen(command)-1];
   d4aac:	4620      	mov	r0, r4
   d4aae:	f008 fae4 	bl	dd07a <strlen>
   d4ab2:	4420      	add	r0, r4
void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
        
        uint8_t checksum;
        char dataStr[strlen(command)-9];
   d4ab4:	ad02      	add	r5, sp, #8
        char cmdStr[3];
        char checkStr[2];
        checkStr[0] = command[strlen(command)-1];
   d4ab6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   d4aba:	703b      	strb	r3, [r7, #0]
        checkStr[1] = command[strlen(command)-2];
   d4abc:	4620      	mov	r0, r4
   d4abe:	f008 fadc 	bl	dd07a <strlen>
   d4ac2:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   d4ac4:	2210      	movs	r2, #16
        uint8_t checksum;
        char dataStr[strlen(command)-9];
        char cmdStr[3];
        char checkStr[2];
        checkStr[0] = command[strlen(command)-1];
        checkStr[1] = command[strlen(command)-2];
   d4ac6:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   d4aca:	707b      	strb	r3, [r7, #1]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   d4acc:	2100      	movs	r1, #0
   d4ace:	4638      	mov	r0, r7
   d4ad0:	f009 f9e8 	bl	ddea4 <strtol>
   d4ad4:	4680      	mov	r8, r0
   d4ad6:	fa5f f888 	uxtb.w	r8, r8
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   d4ada:	f007 f953 	bl	dbd84 <_Z16_fetch_usbserialv>
   d4ade:	f8cd 8000 	str.w	r8, [sp]
   d4ae2:	4643      	mov	r3, r8
   d4ae4:	4a6f      	ldr	r2, [pc, #444]	; (d4ca4 <_Z14processCommandPKchb+0x230>)
   d4ae6:	2101      	movs	r1, #1
   d4ae8:	f006 fd23 	bl	db532 <_ZN5Print11printf_implEbPKcz>
        for(uint8_t i = 4; i < strlen(command)-3;i++){
   d4aec:	2604      	movs	r6, #4
   d4aee:	4620      	mov	r0, r4
   d4af0:	f008 fac3 	bl	dd07a <strlen>
   d4af4:	3803      	subs	r0, #3
   d4af6:	4286      	cmp	r6, r0
   d4af8:	d211      	bcs.n	d4b1e <_Z14processCommandPKchb+0xaa>
            if(i < 7) cmdStr[i-4] = command[i];
   d4afa:	2e06      	cmp	r6, #6
   d4afc:	bf9b      	ittet	ls
   d4afe:	f107 0310 	addls.w	r3, r7, #16
   d4b02:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   d4b04:	19ab      	addhi	r3, r5, r6
        checkStr[0] = command[strlen(command)-1];
        checkStr[1] = command[strlen(command)-2];
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-3;i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d4b06:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   d4b08:	bf8c      	ite	hi
   d4b0a:	5da2      	ldrbhi	r2, [r4, r6]
        checkStr[0] = command[strlen(command)-1];
        checkStr[1] = command[strlen(command)-2];
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-3;i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d4b0c:	f803 2c10 	strbls.w	r2, [r3, #-16]
        char checkStr[2];
        checkStr[0] = command[strlen(command)-1];
        checkStr[1] = command[strlen(command)-2];
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-3;i++){
   d4b10:	f106 0601 	add.w	r6, r6, #1
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
   d4b14:	bf88      	it	hi
   d4b16:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        char checkStr[2];
        checkStr[0] = command[strlen(command)-1];
        checkStr[1] = command[strlen(command)-2];
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-3;i++){
   d4b1a:	b2f6      	uxtb	r6, r6
   d4b1c:	e7e7      	b.n	d4aee <_Z14processCommandPKchb+0x7a>
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
        }
        if(checksum != strlen(command)-3){
   d4b1e:	4540      	cmp	r0, r8
   d4b20:	f107 0604 	add.w	r6, r7, #4
   d4b24:	d049      	beq.n	d4bba <_Z14processCommandPKchb+0x146>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-3,checksum);
   d4b26:	f007 f92d 	bl	dbd84 <_Z16_fetch_usbserialv>
   d4b2a:	4683      	mov	fp, r0
   d4b2c:	4620      	mov	r0, r4
   d4b2e:	f008 faa4 	bl	dd07a <strlen>
   d4b32:	f8cd 8000 	str.w	r8, [sp]
   d4b36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; d4ce0 <_Z14processCommandPKchb+0x26c>
   d4b3a:	4a5b      	ldr	r2, [pc, #364]	; (d4ca8 <_Z14processCommandPKchb+0x234>)
   d4b3c:	1ec3      	subs	r3, r0, #3
   d4b3e:	2101      	movs	r1, #1
   d4b40:	4658      	mov	r0, fp
   d4b42:	f006 fcf6 	bl	db532 <_ZN5Print11printf_implEbPKcz>
            if(!logFile.isOpen()){
   d4b46:	f898 3010 	ldrb.w	r3, [r8, #16]
   d4b4a:	b983      	cbnz	r3, d4b6e <_Z14processCommandPKchb+0xfa>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4b4c:	f244 2202 	movw	r2, #16898	; 0x4202
   d4b50:	4956      	ldr	r1, [pc, #344]	; (d4cac <_Z14processCommandPKchb+0x238>)
   d4b52:	f108 0010 	add.w	r0, r8, #16
   d4b56:	f7ff fce1 	bl	d451c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   d4b5a:	4622      	mov	r2, r4
   d4b5c:	4954      	ldr	r1, [pc, #336]	; (d4cb0 <_Z14processCommandPKchb+0x23c>)
   d4b5e:	4640      	mov	r0, r8
   d4b60:	f7ff febd 	bl	d48de <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
                logFile.close();
   d4b64:	f108 0010 	add.w	r0, r8, #16
   d4b68:	f001 fd82 	bl	d6670 <_ZN7FatFile5closeEv>
   d4b6c:	e004      	b.n	d4b78 <_Z14processCommandPKchb+0x104>
            }
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   d4b6e:	4622      	mov	r2, r4
   d4b70:	494f      	ldr	r1, [pc, #316]	; (d4cb0 <_Z14processCommandPKchb+0x23c>)
   d4b72:	4640      	mov	r0, r8
   d4b74:	f7ff feb3 	bl	d48de <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
            Serial.println("Warning, checksum does not match");
   d4b78:	f007 f904 	bl	dbd84 <_Z16_fetch_usbserialv>
   d4b7c:	494d      	ldr	r1, [pc, #308]	; (d4cb4 <_Z14processCommandPKchb+0x240>)
   d4b7e:	f006 fcae 	bl	db4de <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   d4b82:	7863      	ldrb	r3, [r4, #1]
   d4b84:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d4b88:	2a09      	cmp	r2, #9
   d4b8a:	d901      	bls.n	d4b90 <_Z14processCommandPKchb+0x11c>
   d4b8c:	2b43      	cmp	r3, #67	; 0x43
   d4b8e:	d10b      	bne.n	d4ba8 <_Z14processCommandPKchb+0x134>
                char rxBotNum[2];
                rxBotNum[0] = command[0];
   d4b90:	7822      	ldrb	r2, [r4, #0]
   d4b92:	733a      	strb	r2, [r7, #12]
                rxBotNum[1] = command[1];
   d4b94:	737b      	strb	r3, [r7, #13]
                sprintf(errBuf,"B%d%2snak%3s",BOTNUM,rxBotNum,cmdStr);
   d4b96:	2201      	movs	r2, #1
   d4b98:	9600      	str	r6, [sp, #0]
   d4b9a:	f107 030c 	add.w	r3, r7, #12
   d4b9e:	4946      	ldr	r1, [pc, #280]	; (d4cb8 <_Z14processCommandPKchb+0x244>)
   d4ba0:	4846      	ldr	r0, [pc, #280]	; (d4cbc <_Z14processCommandPKchb+0x248>)
   d4ba2:	f003 fbff 	bl	d83a4 <sprintf>
   d4ba6:	e005      	b.n	d4bb4 <_Z14processCommandPKchb+0x140>
            }
            else{
                sprintf(errBuf,"B%dABnak%3s",BOTNUM,cmdStr);
   d4ba8:	4633      	mov	r3, r6
   d4baa:	2201      	movs	r2, #1
   d4bac:	4944      	ldr	r1, [pc, #272]	; (d4cc0 <_Z14processCommandPKchb+0x24c>)
   d4bae:	4843      	ldr	r0, [pc, #268]	; (d4cbc <_Z14processCommandPKchb+0x248>)
   d4bb0:	f003 fbf8 	bl	d83a4 <sprintf>
            }
            errModeReply = mode;
   d4bb4:	4b43      	ldr	r3, [pc, #268]	; (d4cc4 <_Z14processCommandPKchb+0x250>)
   d4bb6:	f883 a000 	strb.w	sl, [r3]
        }
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   d4bba:	4943      	ldr	r1, [pc, #268]	; (d4cc8 <_Z14processCommandPKchb+0x254>)
   d4bbc:	4630      	mov	r0, r6
   d4bbe:	f008 fa2e 	bl	dd01e <strcmp>
   d4bc2:	2800      	cmp	r0, #0
   d4bc4:	d065      	beq.n	d4c92 <_Z14processCommandPKchb+0x21e>
            else if(mode == 1){ //Acknowledge from BLE
                
            }
            return;
        }
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   d4bc6:	4941      	ldr	r1, [pc, #260]	; (d4ccc <_Z14processCommandPKchb+0x258>)
   d4bc8:	4630      	mov	r0, r6
   d4bca:	f008 fa28 	bl	dd01e <strcmp>
   d4bce:	b9b8      	cbnz	r0, d4c00 <_Z14processCommandPKchb+0x18c>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   d4bd0:	782b      	ldrb	r3, [r5, #0]
   d4bd2:	723b      	strb	r3, [r7, #8]
   d4bd4:	786b      	ldrb	r3, [r5, #1]
   d4bd6:	727b      	strb	r3, [r7, #9]
   d4bd8:	78ab      	ldrb	r3, [r5, #2]
   d4bda:	72bb      	strb	r3, [r7, #10]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   d4bdc:	78eb      	ldrb	r3, [r5, #3]
   d4bde:	733b      	strb	r3, [r7, #12]
   d4be0:	792b      	ldrb	r3, [r5, #4]
   d4be2:	737b      	strb	r3, [r7, #13]
            setLSpeed = atoi(lSpd);
   d4be4:	f107 0008 	add.w	r0, r7, #8
            }
            return;
        }
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   d4be8:	796b      	ldrb	r3, [r5, #5]
   d4bea:	73bb      	strb	r3, [r7, #14]
            setLSpeed = atoi(lSpd);
   d4bec:	f008 f871 	bl	dccd2 <atoi>
   d4bf0:	4c37      	ldr	r4, [pc, #220]	; (d4cd0 <_Z14processCommandPKchb+0x25c>)
   d4bf2:	7020      	strb	r0, [r4, #0]
            setLSpeed = atoi(rSpd);
   d4bf4:	f107 000c 	add.w	r0, r7, #12
   d4bf8:	f008 f86b 	bl	dccd2 <atoi>
   d4bfc:	7020      	strb	r0, [r4, #0]
   d4bfe:	e048      	b.n	d4c92 <_Z14processCommandPKchb+0x21e>
        }
        else if(!strcmp(cmdStr,"req")){  //Data Request
   d4c00:	4934      	ldr	r1, [pc, #208]	; (d4cd4 <_Z14processCommandPKchb+0x260>)
   d4c02:	4630      	mov	r0, r6
   d4c04:	f008 fa0b 	bl	dd01e <strcmp>
   d4c08:	b918      	cbnz	r0, d4c12 <_Z14processCommandPKchb+0x19e>
            requestActive = mode;
   d4c0a:	4b33      	ldr	r3, [pc, #204]	; (d4cd8 <_Z14processCommandPKchb+0x264>)
   d4c0c:	f883 a000 	strb.w	sl, [r3]
   d4c10:	e03f      	b.n	d4c92 <_Z14processCommandPKchb+0x21e>
        }
        else if(!strcmp(cmdStr,"pts")){
   d4c12:	4932      	ldr	r1, [pc, #200]	; (d4cdc <_Z14processCommandPKchb+0x268>)
   d4c14:	4630      	mov	r0, r6
   d4c16:	f008 fa02 	bl	dd01e <strcmp>
   d4c1a:	b9f0      	cbnz	r0, d4c5a <_Z14processCommandPKchb+0x1e6>
   d4c1c:	4c30      	ldr	r4, [pc, #192]	; (d4ce0 <_Z14processCommandPKchb+0x26c>)
            Serial.println(dataStr);
   d4c1e:	f007 f8b1 	bl	dbd84 <_Z16_fetch_usbserialv>
   d4c22:	4629      	mov	r1, r5
   d4c24:	f006 fc5b 	bl	db4de <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   d4c28:	7c23      	ldrb	r3, [r4, #16]
   d4c2a:	b983      	cbnz	r3, d4c4e <_Z14processCommandPKchb+0x1da>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4c2c:	f244 2202 	movw	r2, #16898	; 0x4202
   d4c30:	491e      	ldr	r1, [pc, #120]	; (d4cac <_Z14processCommandPKchb+0x238>)
   d4c32:	f104 0010 	add.w	r0, r4, #16
   d4c36:	f7ff fc71 	bl	d451c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   d4c3a:	462a      	mov	r2, r5
   d4c3c:	4929      	ldr	r1, [pc, #164]	; (d4ce4 <_Z14processCommandPKchb+0x270>)
   d4c3e:	4620      	mov	r0, r4
   d4c40:	f7ff fe4d 	bl	d48de <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
                logFile.close();
   d4c44:	f104 0010 	add.w	r0, r4, #16
   d4c48:	f001 fd12 	bl	d6670 <_ZN7FatFile5closeEv>
   d4c4c:	e021      	b.n	d4c92 <_Z14processCommandPKchb+0x21e>
            }
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   d4c4e:	462a      	mov	r2, r5
   d4c50:	4924      	ldr	r1, [pc, #144]	; (d4ce4 <_Z14processCommandPKchb+0x270>)
   d4c52:	4620      	mov	r0, r4
   d4c54:	f7ff fe43 	bl	d48de <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
   d4c58:	e01b      	b.n	d4c92 <_Z14processCommandPKchb+0x21e>
        }
        else if(!strcmp(cmdStr,"ccs")){  //Incoming communication status
   d4c5a:	4923      	ldr	r1, [pc, #140]	; (d4ce8 <_Z14processCommandPKchb+0x274>)
   d4c5c:	4630      	mov	r0, r6
   d4c5e:	f008 f9de 	bl	dd01e <strcmp>
   d4c62:	b1b0      	cbz	r0, d4c92 <_Z14processCommandPKchb+0x21e>
            
        }
        else if(!strcmp(cmdStr,"aut")){  //Enter autonomous mode
   d4c64:	4921      	ldr	r1, [pc, #132]	; (d4cec <_Z14processCommandPKchb+0x278>)
   d4c66:	4630      	mov	r0, r6
   d4c68:	f008 f9d9 	bl	dd01e <strcmp>
   d4c6c:	b188      	cbz	r0, d4c92 <_Z14processCommandPKchb+0x21e>
            
        }
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   d4c6e:	4920      	ldr	r1, [pc, #128]	; (d4cf0 <_Z14processCommandPKchb+0x27c>)
   d4c70:	4630      	mov	r0, r6
   d4c72:	f008 f9d4 	bl	dd01e <strcmp>
   d4c76:	b960      	cbnz	r0, d4c92 <_Z14processCommandPKchb+0x21e>
            offloadMode = true;
   d4c78:	4b1e      	ldr	r3, [pc, #120]	; (d4cf4 <_Z14processCommandPKchb+0x280>)
   d4c7a:	2201      	movs	r2, #1
   d4c7c:	701a      	strb	r2, [r3, #0]
    return d_.color;
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   d4c7e:	4b1e      	ldr	r3, [pc, #120]	; (d4cf8 <_Z14processCommandPKchb+0x284>)
   d4c80:	7c5a      	ldrb	r2, [r3, #17]
   d4c82:	2a0f      	cmp	r2, #15
   d4c84:	d107      	bne.n	d4c96 <_Z14processCommandPKchb+0x222>
inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}

inline void particle::LEDStatus::setColor(uint32_t color) {
    d_.color = color;
   d4c86:	22ff      	movs	r2, #255	; 0xff
            status.setPattern(LED_PATTERN_BLINK);
            status.setColor(RGB_COLOR_BLUE);
            status.setSpeed(LED_SPEED_FAST);
   d4c88:	211e      	movs	r1, #30
   d4c8a:	481b      	ldr	r0, [pc, #108]	; (d4cf8 <_Z14processCommandPKchb+0x284>)
   d4c8c:	615a      	str	r2, [r3, #20]
   d4c8e:	f7ff fbc6 	bl	d441e <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>

            }
            else if(mode == 1){ //Acknowledge from BLE
                
            }
            return;
   d4c92:	46cd      	mov	sp, r9
   d4c94:	e002      	b.n	d4c9c <_Z14processCommandPKchb+0x228>
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
        d_.pattern = pattern;
   d4c96:	2202      	movs	r2, #2
   d4c98:	745a      	strb	r2, [r3, #17]
   d4c9a:	e7f4      	b.n	d4c86 <_Z14processCommandPKchb+0x212>
        if(sendAck){    //Transmit out acknowledgement if needed

        }

    }
}
   d4c9c:	3714      	adds	r7, #20
   d4c9e:	46bd      	mov	sp, r7
   d4ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ca4:	000df5eb 	.word	0x000df5eb
   d4ca8:	000df600 	.word	0x000df600
   d4cac:	2003d97c 	.word	0x2003d97c
   d4cb0:	000df61d 	.word	0x000df61d
   d4cb4:	000df649 	.word	0x000df649
   d4cb8:	000df66a 	.word	0x000df66a
   d4cbc:	2003e215 	.word	0x2003e215
   d4cc0:	000df677 	.word	0x000df677
   d4cc4:	2003db4c 	.word	0x2003db4c
   d4cc8:	000df683 	.word	0x000df683
   d4ccc:	000df687 	.word	0x000df687
   d4cd0:	2003e2c5 	.word	0x2003e2c5
   d4cd4:	000df68b 	.word	0x000df68b
   d4cd8:	2003db3c 	.word	0x2003db3c
   d4cdc:	000df68f 	.word	0x000df68f
   d4ce0:	2003e2d8 	.word	0x2003e2d8
   d4ce4:	000df693 	.word	0x000df693
   d4ce8:	000df6b6 	.word	0x000df6b6
   d4cec:	000df6ba 	.word	0x000df6ba
   d4cf0:	000df6be 	.word	0x000df6be
   d4cf4:	2003da0c 	.word	0x2003da0c
   d4cf8:	2003dacc 	.word	0x2003dacc

000d4cfc <_Z13cmdLTEHandlerPKcS0_>:

void cmdLTEHandler(const char *event, const char *data){
   d4cfc:	b510      	push	{r4, lr}
   d4cfe:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   d4d00:	2200      	movs	r2, #0
   d4d02:	2104      	movs	r1, #4
   d4d04:	4620      	mov	r0, r4
   d4d06:	f7ff feb5 	bl	d4a74 <_Z14processCommandPKchb>
    if(logMessages){
   d4d0a:	4b0b      	ldr	r3, [pc, #44]	; (d4d38 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   d4d0c:	781b      	ldrb	r3, [r3, #0]
   d4d0e:	b193      	cbz	r3, d4d36 <_Z13cmdLTEHandlerPKcS0_+0x3a>
   d4d10:	480a      	ldr	r0, [pc, #40]	; (d4d3c <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4d12:	7c03      	ldrb	r3, [r0, #16]
   d4d14:	b92b      	cbnz	r3, d4d22 <_Z13cmdLTEHandlerPKcS0_+0x26>
   d4d16:	f244 2202 	movw	r2, #16898	; 0x4202
   d4d1a:	4909      	ldr	r1, [pc, #36]	; (d4d40 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   d4d1c:	3010      	adds	r0, #16
   d4d1e:	f7ff fbfd 	bl	d451c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   d4d22:	4622      	mov	r2, r4
   d4d24:	4907      	ldr	r1, [pc, #28]	; (d4d44 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   d4d26:	4805      	ldr	r0, [pc, #20]	; (d4d3c <_Z13cmdLTEHandlerPKcS0_+0x40>)
   d4d28:	f7ff fdd9 	bl	d48de <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        logFile.close();
   d4d2c:	4806      	ldr	r0, [pc, #24]	; (d4d48 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
    }
}
   d4d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void cmdLTEHandler(const char *event, const char *data){
    processCommand(data, 4,false);
    if(logMessages){
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
   d4d32:	f001 bc9d 	b.w	d6670 <_ZN7FatFile5closeEv>
   d4d36:	bd10      	pop	{r4, pc}
   d4d38:	2003e214 	.word	0x2003e214
   d4d3c:	2003e2d8 	.word	0x2003e2d8
   d4d40:	2003d97c 	.word	0x2003d97c
   d4d44:	000df6c2 	.word	0x000df6c2
   d4d48:	2003e2e8 	.word	0x2003e2e8

000d4d4c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
        char lteBuf[7] = {'B',BOTNUM+48,'A','B','c','c','s'};
        Particle.publish("WNS", lteBuf, PRIVATE);
    }
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4d4c:	b598      	push	{r3, r4, r7, lr}
    char btBuf[len];
   d4d4e:	1dcb      	adds	r3, r1, #7
   d4d50:	f023 0307 	bic.w	r3, r3, #7
        char lteBuf[7] = {'B',BOTNUM+48,'A','B','c','c','s'};
        Particle.publish("WNS", lteBuf, PRIVATE);
    }
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4d54:	af00      	add	r7, sp, #0
    char btBuf[len];
   d4d56:	ebad 0d03 	sub.w	sp, sp, r3
   d4d5a:	466c      	mov	r4, sp
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   d4d5c:	2300      	movs	r3, #0
   d4d5e:	428b      	cmp	r3, r1
   d4d60:	d003      	beq.n	d4d6a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
   d4d62:	5cc2      	ldrb	r2, [r0, r3]
   d4d64:	54e2      	strb	r2, [r4, r3]
   d4d66:	3301      	adds	r3, #1
   d4d68:	e7f9      	b.n	d4d5e <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12>
    Serial.println("New BT Command:");
   d4d6a:	f007 f80b 	bl	dbd84 <_Z16_fetch_usbserialv>
   d4d6e:	4916      	ldr	r1, [pc, #88]	; (d4dc8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   d4d70:	f006 fbb5 	bl	db4de <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   d4d74:	f007 f806 	bl	dbd84 <_Z16_fetch_usbserialv>
   d4d78:	4621      	mov	r1, r4
   d4d7a:	f006 fbb0 	bl	db4de <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   d4d7e:	2201      	movs	r2, #1
   d4d80:	4611      	mov	r1, r2
   d4d82:	4620      	mov	r0, r4
   d4d84:	f7ff fe76 	bl	d4a74 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   d4d88:	7823      	ldrb	r3, [r4, #0]
   d4d8a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   d4d8e:	2b41      	cmp	r3, #65	; 0x41
   d4d90:	d103      	bne.n	d4d9a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4d92:	f003 f859 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
   d4d96:	4b0d      	ldr	r3, [pc, #52]	; (d4dcc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   d4d98:	6018      	str	r0, [r3, #0]
    if(logMessages){
   d4d9a:	4b0d      	ldr	r3, [pc, #52]	; (d4dd0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   d4d9c:	781b      	ldrb	r3, [r3, #0]
   d4d9e:	b183      	cbz	r3, d4dc2 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   d4da0:	480c      	ldr	r0, [pc, #48]	; (d4dd4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4da2:	7c03      	ldrb	r3, [r0, #16]
   d4da4:	b92b      	cbnz	r3, d4db2 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x66>
   d4da6:	f244 2202 	movw	r2, #16898	; 0x4202
   d4daa:	490b      	ldr	r1, [pc, #44]	; (d4dd8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   d4dac:	3010      	adds	r0, #16
   d4dae:	f7ff fbb5 	bl	d451c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   d4db2:	4622      	mov	r2, r4
   d4db4:	4909      	ldr	r1, [pc, #36]	; (d4ddc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   d4db6:	4807      	ldr	r0, [pc, #28]	; (d4dd4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   d4db8:	f7ff fd91 	bl	d48de <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        logFile.close();
   d4dbc:	4808      	ldr	r0, [pc, #32]	; (d4de0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   d4dbe:	f001 fc57 	bl	d6670 <_ZN7FatFile5closeEv>
    }
}
   d4dc2:	46bd      	mov	sp, r7
   d4dc4:	bd98      	pop	{r3, r4, r7, pc}
   d4dc6:	bf00      	nop
   d4dc8:	000df6e2 	.word	0x000df6e2
   d4dcc:	2003d9d0 	.word	0x2003d9d0
   d4dd0:	2003e214 	.word	0x2003e214
   d4dd4:	2003e2d8 	.word	0x2003e2d8
   d4dd8:	2003d97c 	.word	0x2003d97c
   d4ddc:	000df6f2 	.word	0x000df6f2
   d4de0:	2003e2e8 	.word	0x2003e2e8

000d4de4 <_Z11XBeeHandlerv>:
        Wire.endTransmission();                                                       //end the I2C data transmission.
        dataWait = true;
    }
}

void XBeeHandler(){  
   d4de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char buffer[data.length()];
        for(int i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
        processCommand(buffer,2,true);
        Serial.println("New XBee Command:");
        Serial.println(data); 
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   d4de8:	4d31      	ldr	r5, [pc, #196]	; (d4eb0 <_Z11XBeeHandlerv+0xcc>)
        if(logMessages){
   d4dea:	4e32      	ldr	r6, [pc, #200]	; (d4eb4 <_Z11XBeeHandlerv+0xd0>)
        Wire.endTransmission();                                                       //end the I2C data transmission.
        dataWait = true;
    }
}

void XBeeHandler(){  
   d4dec:	b089      	sub	sp, #36	; 0x24
   d4dee:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   d4df0:	f006 ff3c 	bl	dbc6c <_Z22__fetch_global_Serial1v>
   d4df4:	6803      	ldr	r3, [r0, #0]
   d4df6:	691b      	ldr	r3, [r3, #16]
   d4df8:	4798      	blx	r3
   d4dfa:	2800      	cmp	r0, #0
   d4dfc:	d054      	beq.n	d4ea8 <_Z11XBeeHandlerv+0xc4>
        String data = Serial1.readStringUntil('\n');
   d4dfe:	f006 ff35 	bl	dbc6c <_Z22__fetch_global_Serial1v>
   d4e02:	220a      	movs	r2, #10
   d4e04:	4601      	mov	r1, r0
   d4e06:	4638      	mov	r0, r7
   d4e08:	f006 fd1e 	bl	db848 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   d4e0c:	68bb      	ldr	r3, [r7, #8]
   d4e0e:	3307      	adds	r3, #7
   d4e10:	f023 0307 	bic.w	r3, r3, #7
        if(logMessages){
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
            logFile.close();
        }
    }
   d4e14:	466c      	mov	r4, sp
}

void XBeeHandler(){  
    while(Serial1.available()){
        String data = Serial1.readStringUntil('\n');
        char buffer[data.length()];
   d4e16:	ebad 0d03 	sub.w	sp, sp, r3
   d4e1a:	46e8      	mov	r8, sp
   d4e1c:	46e9      	mov	r9, sp
        for(int i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   d4e1e:	68bb      	ldr	r3, [r7, #8]
   d4e20:	ebc8 0109 	rsb	r1, r8, r9
   d4e24:	428b      	cmp	r3, r1
   d4e26:	d905      	bls.n	d4e34 <_Z11XBeeHandlerv+0x50>
   d4e28:	4638      	mov	r0, r7
   d4e2a:	f006 fde7 	bl	db9fc <_ZNK6String6charAtEj>
   d4e2e:	f809 0b01 	strb.w	r0, [r9], #1
   d4e32:	e7f4      	b.n	d4e1e <_Z11XBeeHandlerv+0x3a>
        processCommand(buffer,2,true);
   d4e34:	2201      	movs	r2, #1
   d4e36:	2102      	movs	r1, #2
   d4e38:	4640      	mov	r0, r8
   d4e3a:	f7ff fe1b 	bl	d4a74 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   d4e3e:	f006 ffa1 	bl	dbd84 <_Z16_fetch_usbserialv>
   d4e42:	491d      	ldr	r1, [pc, #116]	; (d4eb8 <_Z11XBeeHandlerv+0xd4>)
   d4e44:	f006 fb4b 	bl	db4de <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   d4e48:	f006 ff9c 	bl	dbd84 <_Z16_fetch_usbserialv>
   d4e4c:	6839      	ldr	r1, [r7, #0]
   d4e4e:	f006 fb46 	bl	db4de <_ZN5Print7printlnEPKc>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   d4e52:	f898 3000 	ldrb.w	r3, [r8]
   d4e56:	3b42      	subs	r3, #66	; 0x42
   d4e58:	2b01      	cmp	r3, #1
   d4e5a:	d802      	bhi.n	d4e62 <_Z11XBeeHandlerv+0x7e>
   d4e5c:	f002 fff4 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
   d4e60:	6028      	str	r0, [r5, #0]
        if(logMessages){
   d4e62:	7833      	ldrb	r3, [r6, #0]
   d4e64:	b1db      	cbz	r3, d4e9e <_Z11XBeeHandlerv+0xba>
   d4e66:	4815      	ldr	r0, [pc, #84]	; (d4ebc <_Z11XBeeHandlerv+0xd8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4e68:	7c03      	ldrb	r3, [r0, #16]
   d4e6a:	b92b      	cbnz	r3, d4e78 <_Z11XBeeHandlerv+0x94>
   d4e6c:	f244 2202 	movw	r2, #16898	; 0x4202
   d4e70:	4913      	ldr	r1, [pc, #76]	; (d4ec0 <_Z11XBeeHandlerv+0xdc>)
   d4e72:	3010      	adds	r0, #16
   d4e74:	f7ff fb52 	bl	d451c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   d4e78:	4639      	mov	r1, r7
   d4e7a:	f107 0010 	add.w	r0, r7, #16
   d4e7e:	f006 fd74 	bl	db96a <_ZN6StringC1ERKS_>
   d4e82:	f107 0310 	add.w	r3, r7, #16
   d4e86:	4a0f      	ldr	r2, [pc, #60]	; (d4ec4 <_Z11XBeeHandlerv+0xe0>)
   d4e88:	480c      	ldr	r0, [pc, #48]	; (d4ebc <_Z11XBeeHandlerv+0xd8>)
   d4e8a:	2101      	movs	r1, #1
   d4e8c:	f006 fb51 	bl	db532 <_ZN5Print11printf_implEbPKcz>
   d4e90:	f107 0010 	add.w	r0, r7, #16
   d4e94:	f006 fd00 	bl	db898 <_ZN6StringD1Ev>
            logFile.close();
   d4e98:	480b      	ldr	r0, [pc, #44]	; (d4ec8 <_Z11XBeeHandlerv+0xe4>)
   d4e9a:	f001 fbe9 	bl	d6670 <_ZN7FatFile5closeEv>
    }
}

void XBeeHandler(){  
    while(Serial1.available()){
        String data = Serial1.readStringUntil('\n');
   d4e9e:	4638      	mov	r0, r7
   d4ea0:	f006 fcfa 	bl	db898 <_ZN6StringD1Ev>
   d4ea4:	46a5      	mov	sp, r4
        dataWait = true;
    }
}

void XBeeHandler(){  
    while(Serial1.available()){
   d4ea6:	e7a3      	b.n	d4df0 <_Z11XBeeHandlerv+0xc>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
            logFile.close();
        }
    }
}
   d4ea8:	3724      	adds	r7, #36	; 0x24
   d4eaa:	46bd      	mov	sp, r7
   d4eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4eb0:	2003e2c0 	.word	0x2003e2c0
   d4eb4:	2003e214 	.word	0x2003e214
   d4eb8:	000df712 	.word	0x000df712
   d4ebc:	2003e2d8 	.word	0x2003e2d8
   d4ec0:	2003d97c 	.word	0x2003d97c
   d4ec4:	000df724 	.word	0x000df724
   d4ec8:	2003e2e8 	.word	0x2003e2e8

000d4ecc <_ZN5Print8printlnfIIiEEEjPKcDpT_>:
   d4ecc:	4613      	mov	r3, r2
   d4ece:	460a      	mov	r2, r1
   d4ed0:	2101      	movs	r1, #1
   d4ed2:	f006 bb2e 	b.w	db532 <_ZN5Print11printf_implEbPKcz>
	...

000d4ed8 <_Z11wdogHandlerv>:
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
        logFile.close();
    }
}

void wdogHandler(){
   d4ed8:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4eda:	f003 f9d3 	bl	d8284 <spark_cloud_flag_connected>
   d4ede:	4c29      	ldr	r4, [pc, #164]	; (d4f84 <_Z11wdogHandlerv+0xac>)
    if(Particle.connected()) LTEAvail = true;
   d4ee0:	b108      	cbz	r0, d4ee6 <_Z11wdogHandlerv+0xe>
   d4ee2:	2301      	movs	r3, #1
   d4ee4:	e010      	b.n	d4f08 <_Z11wdogHandlerv+0x30>
    else if(LTEAvail){
   d4ee6:	7823      	ldrb	r3, [r4, #0]
   d4ee8:	b17b      	cbz	r3, d4f0a <_Z11wdogHandlerv+0x32>
   d4eea:	4827      	ldr	r0, [pc, #156]	; (d4f88 <_Z11wdogHandlerv+0xb0>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4eec:	7c03      	ldrb	r3, [r0, #16]
   d4eee:	b92b      	cbnz	r3, d4efc <_Z11wdogHandlerv+0x24>
   d4ef0:	f244 2202 	movw	r2, #16898	; 0x4202
   d4ef4:	4925      	ldr	r1, [pc, #148]	; (d4f8c <_Z11wdogHandlerv+0xb4>)
   d4ef6:	3010      	adds	r0, #16
   d4ef8:	f7ff fb10 	bl	d451c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   d4efc:	221e      	movs	r2, #30
   d4efe:	4924      	ldr	r1, [pc, #144]	; (d4f90 <_Z11wdogHandlerv+0xb8>)
   d4f00:	4821      	ldr	r0, [pc, #132]	; (d4f88 <_Z11wdogHandlerv+0xb0>)
   d4f02:	f7ff ffe3 	bl	d4ecc <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        LTEAvail = false;
   d4f06:	2300      	movs	r3, #0
   d4f08:	7023      	strb	r3, [r4, #0]
   d4f0a:	f002 ff9d 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
    }
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL){
   d4f0e:	4b21      	ldr	r3, [pc, #132]	; (d4f94 <_Z11wdogHandlerv+0xbc>)
   d4f10:	4c21      	ldr	r4, [pc, #132]	; (d4f98 <_Z11wdogHandlerv+0xc0>)
   d4f12:	681b      	ldr	r3, [r3, #0]
   d4f14:	1ac0      	subs	r0, r0, r3
   d4f16:	f247 5330 	movw	r3, #30000	; 0x7530
   d4f1a:	4298      	cmp	r0, r3
   d4f1c:	d911      	bls.n	d4f42 <_Z11wdogHandlerv+0x6a>
        if(XBeeAvail){
   d4f1e:	7823      	ldrb	r3, [r4, #0]
   d4f20:	b16b      	cbz	r3, d4f3e <_Z11wdogHandlerv+0x66>
   d4f22:	4819      	ldr	r0, [pc, #100]	; (d4f88 <_Z11wdogHandlerv+0xb0>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4f24:	7c03      	ldrb	r3, [r0, #16]
   d4f26:	b92b      	cbnz	r3, d4f34 <_Z11wdogHandlerv+0x5c>
   d4f28:	f244 2202 	movw	r2, #16898	; 0x4202
   d4f2c:	4917      	ldr	r1, [pc, #92]	; (d4f8c <_Z11wdogHandlerv+0xb4>)
   d4f2e:	3010      	adds	r0, #16
   d4f30:	f7ff faf4 	bl	d451c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   d4f34:	221e      	movs	r2, #30
   d4f36:	4916      	ldr	r1, [pc, #88]	; (d4f90 <_Z11wdogHandlerv+0xb8>)
   d4f38:	4813      	ldr	r0, [pc, #76]	; (d4f88 <_Z11wdogHandlerv+0xb0>)
   d4f3a:	f7ff ffc7 	bl	d4ecc <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        }
        XBeeAvail = false;
   d4f3e:	2300      	movs	r3, #0
   d4f40:	e000      	b.n	d4f44 <_Z11wdogHandlerv+0x6c>
    }
    else XBeeAvail = true;
   d4f42:	2301      	movs	r3, #1
   d4f44:	7023      	strb	r3, [r4, #0]
   d4f46:	f002 ff7f 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL){
   d4f4a:	4b14      	ldr	r3, [pc, #80]	; (d4f9c <_Z11wdogHandlerv+0xc4>)
   d4f4c:	4c14      	ldr	r4, [pc, #80]	; (d4fa0 <_Z11wdogHandlerv+0xc8>)
   d4f4e:	681b      	ldr	r3, [r3, #0]
   d4f50:	1ac0      	subs	r0, r0, r3
   d4f52:	f247 5330 	movw	r3, #30000	; 0x7530
   d4f56:	4298      	cmp	r0, r3
   d4f58:	d911      	bls.n	d4f7e <_Z11wdogHandlerv+0xa6>
        if(BLEAvail){
   d4f5a:	7823      	ldrb	r3, [r4, #0]
   d4f5c:	b16b      	cbz	r3, d4f7a <_Z11wdogHandlerv+0xa2>
   d4f5e:	480a      	ldr	r0, [pc, #40]	; (d4f88 <_Z11wdogHandlerv+0xb0>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4f60:	7c03      	ldrb	r3, [r0, #16]
   d4f62:	b92b      	cbnz	r3, d4f70 <_Z11wdogHandlerv+0x98>
   d4f64:	f244 2202 	movw	r2, #16898	; 0x4202
   d4f68:	4908      	ldr	r1, [pc, #32]	; (d4f8c <_Z11wdogHandlerv+0xb4>)
   d4f6a:	3010      	adds	r0, #16
   d4f6c:	f7ff fad6 	bl	d451c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   d4f70:	221e      	movs	r2, #30
   d4f72:	490c      	ldr	r1, [pc, #48]	; (d4fa4 <_Z11wdogHandlerv+0xcc>)
   d4f74:	4804      	ldr	r0, [pc, #16]	; (d4f88 <_Z11wdogHandlerv+0xb0>)
   d4f76:	f7ff ffa9 	bl	d4ecc <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        }
        BLEAvail = false;
   d4f7a:	2300      	movs	r3, #0
   d4f7c:	e000      	b.n	d4f80 <_Z11wdogHandlerv+0xa8>
    }
    else BLEAvail = true;
   d4f7e:	2301      	movs	r3, #1
   d4f80:	7023      	strb	r3, [r4, #0]
   d4f82:	bd10      	pop	{r4, pc}
   d4f84:	2003da15 	.word	0x2003da15
   d4f88:	2003e2d8 	.word	0x2003e2d8
   d4f8c:	2003d97c 	.word	0x2003d97c
   d4f90:	000df745 	.word	0x000df745
   d4f94:	2003e2c0 	.word	0x2003e2c0
   d4f98:	2003db3e 	.word	0x2003db3e
   d4f9c:	2003d9d0 	.word	0x2003d9d0
   d4fa0:	2003db3d 	.word	0x2003db3d
   d4fa4:	000df796 	.word	0x000df796

000d4fa8 <_ZN5Print8printlnfIIfEEEjPKcDpT_>:
    {
        return this->printf_impl(false, format, args...);
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
   d4fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4faa:	4604      	mov	r4, r0
    {
        return this->printf_impl(true, format, args...);
   d4fac:	ee10 0a10 	vmov	r0, s0
    {
        return this->printf_impl(false, format, args...);
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
   d4fb0:	460d      	mov	r5, r1
    {
        return this->printf_impl(true, format, args...);
   d4fb2:	f007 fb05 	bl	dc5c0 <__aeabi_f2d>
   d4fb6:	462a      	mov	r2, r5
   d4fb8:	e9cd 0100 	strd	r0, r1, [sp]
   d4fbc:	2101      	movs	r1, #1
   d4fbe:	4620      	mov	r0, r4
   d4fc0:	f006 fab7 	bl	db532 <_ZN5Print11printf_implEbPKcz>
    }
   d4fc4:	b003      	add	sp, #12
   d4fc6:	bd30      	pop	{r4, r5, pc}

000d4fc8 <_Z13sensorHandlerv>:
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
    statusReady = true;
}

void sensorHandler(){
   d4fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
    if(dataTimer < millis() && dataWait){
   d4fcc:	4d8a      	ldr	r5, [pc, #552]	; (d51f8 <_Z13sensorHandlerv+0x230>)
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
    statusReady = true;
}

void sensorHandler(){
   d4fce:	b0a9      	sub	sp, #164	; 0xa4
   d4fd0:	f002 ff3a 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
    
    if(dataTimer < millis() && dataWait){
   d4fd4:	682b      	ldr	r3, [r5, #0]
   d4fd6:	4283      	cmp	r3, r0
   d4fd8:	d21a      	bcs.n	d5010 <_Z13sensorHandlerv+0x48>
   d4fda:	4e88      	ldr	r6, [pc, #544]	; (d51fc <_Z13sensorHandlerv+0x234>)
   d4fdc:	7833      	ldrb	r3, [r6, #0]
   d4fde:	2b00      	cmp	r3, #0
   d4fe0:	d163      	bne.n	d50aa <_Z13sensorHandlerv+0xe2>
   d4fe2:	e015      	b.n	d5010 <_Z13sensorHandlerv+0x48>
        c = 0;
        while(Wire.available()){   // slave may send less than requested
            addrSense[c++] = Wire.read();

        }
        float senseTemp = atof(addrSense);
   d4fe4:	a823      	add	r0, sp, #140	; 0x8c
   d4fe6:	f007 fe71 	bl	dcccc <atof>
   d4fea:	ec51 0b10 	vmov	r0, r1, d0
   d4fee:	f007 fe1d 	bl	dcc2c <__aeabi_d2f>
   d4ff2:	4607      	mov	r7, r0
        Serial.printlnf("Temperature: %f",senseTemp);
   d4ff4:	f006 fec6 	bl	dbd84 <_Z16_fetch_usbserialv>
   d4ff8:	ee00 7a10 	vmov	s0, r7
   d4ffc:	4980      	ldr	r1, [pc, #512]	; (d5200 <_Z13sensorHandlerv+0x238>)
   d4ffe:	f7ff ffd3 	bl	d4fa8 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
        dataWait = false;
        if(logSensors){
   d5002:	4b80      	ldr	r3, [pc, #512]	; (d5204 <_Z13sensorHandlerv+0x23c>)
            addrSense[c++] = Wire.read();

        }
        float senseTemp = atof(addrSense);
        Serial.printlnf("Temperature: %f",senseTemp);
        dataWait = false;
   d5004:	f886 9000 	strb.w	r9, [r6]
        if(logSensors){
   d5008:	781b      	ldrb	r3, [r3, #0]
   d500a:	2b00      	cmp	r3, #0
   d500c:	f040 8106 	bne.w	d521c <_Z13sensorHandlerv+0x254>
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
            myFile.close();
        }
    }
    if(senseTimer < millis()){
   d5010:	4c7d      	ldr	r4, [pc, #500]	; (d5208 <_Z13sensorHandlerv+0x240>)
   d5012:	f002 ff19 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
   d5016:	6823      	ldr	r3, [r4, #0]
   d5018:	4283      	cmp	r3, r0
   d501a:	f080 816b 	bcs.w	d52f4 <_Z13sensorHandlerv+0x32c>
   d501e:	f002 ff13 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   d5022:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   d5026:	6020      	str	r0, [r4, #0]
   d5028:	f002 ff0e 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   d502c:	f200 3039 	addw	r0, r0, #825	; 0x339
   d5030:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   d5032:	f006 ffcf 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d5036:	2163      	movs	r1, #99	; 0x63
   d5038:	f004 fe9b 	bl	d9d72 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   d503c:	f006 ffca 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d5040:	2172      	movs	r1, #114	; 0x72
   d5042:	f7ff f962 	bl	d430a <_ZN7TwoWire5writeEi>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   d5046:	f006 ffc5 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d504a:	f004 fe99 	bl	d9d80 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   d504e:	f006 ffc1 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d5052:	2164      	movs	r1, #100	; 0x64
   d5054:	f004 fe8d 	bl	d9d72 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   d5058:	f006 ffbc 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d505c:	2172      	movs	r1, #114	; 0x72
   d505e:	f7ff f954 	bl	d430a <_ZN7TwoWire5writeEi>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   d5062:	f006 ffb7 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d5066:	f004 fe8b 	bl	d9d80 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   d506a:	f006 ffb3 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d506e:	2165      	movs	r1, #101	; 0x65
   d5070:	f004 fe7f 	bl	d9d72 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   d5074:	f006 ffae 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d5078:	2172      	movs	r1, #114	; 0x72
   d507a:	f7ff f946 	bl	d430a <_ZN7TwoWire5writeEi>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   d507e:	f006 ffa9 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d5082:	f004 fe7d 	bl	d9d80 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   d5086:	f006 ffa5 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d508a:	2166      	movs	r1, #102	; 0x66
   d508c:	f004 fe71 	bl	d9d72 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   d5090:	f006 ffa0 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d5094:	2172      	movs	r1, #114	; 0x72
   d5096:	f7ff f938 	bl	d430a <_ZN7TwoWire5writeEi>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   d509a:	f006 ff9b 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d509e:	f004 fe6f 	bl	d9d80 <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   d50a2:	4b56      	ldr	r3, [pc, #344]	; (d51fc <_Z13sensorHandlerv+0x234>)
   d50a4:	2201      	movs	r2, #1
   d50a6:	701a      	strb	r2, [r3, #0]
    }
}
   d50a8:	e124      	b.n	d52f4 <_Z13sensorHandlerv+0x32c>
}

void sensorHandler(){
    
    if(dataTimer < millis() && dataWait){
        Wire.requestFrom(PHADDR, 20, 1);
   d50aa:	f006 ff93 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d50ae:	2301      	movs	r3, #1
   d50b0:	2214      	movs	r2, #20
   d50b2:	2163      	movs	r1, #99	; 0x63
   d50b4:	f004 fe44 	bl	d9d40 <_ZN7TwoWire11requestFromEhjh>
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   d50b8:	f006 ff8c 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d50bc:	6803      	ldr	r3, [r0, #0]
   d50be:	695b      	ldr	r3, [r3, #20]
   d50c0:	4798      	blx	r3
   d50c2:	f10d 044f 	add.w	r4, sp, #79	; 0x4f
        char tempSense[20];
        int c = 0;
        while(Wire.available()){   // slave may send less than requested
   d50c6:	f006 ff85 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d50ca:	6803      	ldr	r3, [r0, #0]
   d50cc:	691b      	ldr	r3, [r3, #16]
   d50ce:	4798      	blx	r3
   d50d0:	b138      	cbz	r0, d50e2 <_Z13sensorHandlerv+0x11a>
            tempSense[c++] = Wire.read();
   d50d2:	f006 ff7f 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d50d6:	6803      	ldr	r3, [r0, #0]
   d50d8:	695b      	ldr	r3, [r3, #20]
   d50da:	4798      	blx	r3
   d50dc:	f804 0f01 	strb.w	r0, [r4, #1]!
    if(dataTimer < millis() && dataWait){
        Wire.requestFrom(PHADDR, 20, 1);
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
        char tempSense[20];
        int c = 0;
        while(Wire.available()){   // slave may send less than requested
   d50e0:	e7f1      	b.n	d50c6 <_Z13sensorHandlerv+0xfe>
            tempSense[c++] = Wire.read();

        }
        sensePH = atof(tempSense);
   d50e2:	a814      	add	r0, sp, #80	; 0x50
   d50e4:	f007 fdf2 	bl	dcccc <atof>
   d50e8:	ec51 0b10 	vmov	r0, r1, d0
   d50ec:	f007 fd9e 	bl	dcc2c <__aeabi_d2f>
   d50f0:	4c46      	ldr	r4, [pc, #280]	; (d520c <_Z13sensorHandlerv+0x244>)
   d50f2:	6020      	str	r0, [r4, #0]
        Serial.printlnf("pH: %f", sensePH);
   d50f4:	f006 fe46 	bl	dbd84 <_Z16_fetch_usbserialv>
   d50f8:	ed94 0a00 	vldr	s0, [r4]
   d50fc:	4944      	ldr	r1, [pc, #272]	; (d5210 <_Z13sensorHandlerv+0x248>)
   d50fe:	f7ff ff53 	bl	d4fa8 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
        Wire.requestFrom(MCOND, 20, 1);
   d5102:	f006 ff67 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d5106:	2301      	movs	r3, #1
   d5108:	2214      	movs	r2, #20
   d510a:	2164      	movs	r1, #100	; 0x64
   d510c:	f004 fe18 	bl	d9d40 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   d5110:	f006 ff60 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d5114:	6803      	ldr	r3, [r0, #0]
   d5116:	695b      	ldr	r3, [r3, #20]
   d5118:	4798      	blx	r3
   d511a:	f10d 0763 	add.w	r7, sp, #99	; 0x63
        char mcondSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d511e:	f006 ff59 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d5122:	6803      	ldr	r3, [r0, #0]
   d5124:	691b      	ldr	r3, [r3, #16]
   d5126:	4798      	blx	r3
   d5128:	b138      	cbz	r0, d513a <_Z13sensorHandlerv+0x172>
            mcondSense[c++] = Wire.read();
   d512a:	f006 ff53 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d512e:	6803      	ldr	r3, [r0, #0]
   d5130:	695b      	ldr	r3, [r3, #20]
   d5132:	4798      	blx	r3
   d5134:	f807 0f01 	strb.w	r0, [r7, #1]!
        Serial.printlnf("pH: %f", sensePH);
        Wire.requestFrom(MCOND, 20, 1);
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
        char mcondSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d5138:	e7f1      	b.n	d511e <_Z13sensorHandlerv+0x156>
            mcondSense[c++] = Wire.read();

        }
        float senseMCond = atof(mcondSense);
   d513a:	a819      	add	r0, sp, #100	; 0x64
   d513c:	f007 fdc6 	bl	dcccc <atof>
   d5140:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
        Serial.printlnf("MiniCond: %f",senseMCond);
   d5144:	f006 fe1e 	bl	dbd84 <_Z16_fetch_usbserialv>
   d5148:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
   d514c:	4607      	mov	r7, r0
   d514e:	ec51 0b10 	vmov	r0, r1, d0
   d5152:	f007 fd6b 	bl	dcc2c <__aeabi_d2f>
   d5156:	492f      	ldr	r1, [pc, #188]	; (d5214 <_Z13sensorHandlerv+0x24c>)
   d5158:	ee00 0a10 	vmov	s0, r0
   d515c:	4638      	mov	r0, r7
   d515e:	f7ff ff23 	bl	d4fa8 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
        Wire.requestFrom(COND, 20, 1);
   d5162:	f006 ff37 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d5166:	2301      	movs	r3, #1
   d5168:	2214      	movs	r2, #20
   d516a:	2165      	movs	r1, #101	; 0x65
   d516c:	f004 fde8 	bl	d9d40 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   d5170:	f006 ff30 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d5174:	6803      	ldr	r3, [r0, #0]
   d5176:	695b      	ldr	r3, [r3, #20]
   d5178:	4798      	blx	r3
   d517a:	f10d 0777 	add.w	r7, sp, #119	; 0x77
        char condSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d517e:	f006 ff29 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d5182:	6803      	ldr	r3, [r0, #0]
   d5184:	691b      	ldr	r3, [r3, #16]
   d5186:	4798      	blx	r3
   d5188:	b138      	cbz	r0, d519a <_Z13sensorHandlerv+0x1d2>
            condSense[c++] = Wire.read();
   d518a:	f006 ff23 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d518e:	6803      	ldr	r3, [r0, #0]
   d5190:	695b      	ldr	r3, [r3, #20]
   d5192:	4798      	blx	r3
   d5194:	f807 0f01 	strb.w	r0, [r7, #1]!
        Serial.printlnf("MiniCond: %f",senseMCond);
        Wire.requestFrom(COND, 20, 1);
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
        char condSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d5198:	e7f1      	b.n	d517e <_Z13sensorHandlerv+0x1b6>
            condSense[c++] = Wire.read();

        }
        float senseCond = atof(condSense);
   d519a:	a81e      	add	r0, sp, #120	; 0x78
   d519c:	f007 fd96 	bl	dcccc <atof>
   d51a0:	ec51 0b10 	vmov	r0, r1, d0
   d51a4:	f007 fd42 	bl	dcc2c <__aeabi_d2f>
   d51a8:	4680      	mov	r8, r0
        Serial.printlnf("Conductivity: %f",senseCond);
   d51aa:	f006 fdeb 	bl	dbd84 <_Z16_fetch_usbserialv>
   d51ae:	ee00 8a10 	vmov	s0, r8
   d51b2:	4919      	ldr	r1, [pc, #100]	; (d5218 <_Z13sensorHandlerv+0x250>)
   d51b4:	f7ff fef8 	bl	d4fa8 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
        Wire.requestFrom(TEMPADDR, 20, 1);
   d51b8:	f006 ff0c 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d51bc:	2301      	movs	r3, #1
   d51be:	2214      	movs	r2, #20
   d51c0:	2166      	movs	r1, #102	; 0x66
   d51c2:	f004 fdbd 	bl	d9d40 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   d51c6:	f006 ff05 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d51ca:	6803      	ldr	r3, [r0, #0]
   d51cc:	695b      	ldr	r3, [r3, #20]
   d51ce:	4798      	blx	r3
   d51d0:	f10d 078b 	add.w	r7, sp, #139	; 0x8b
        char addrSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d51d4:	f006 fefe 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d51d8:	6803      	ldr	r3, [r0, #0]
   d51da:	691b      	ldr	r3, [r3, #16]
   d51dc:	4798      	blx	r3
   d51de:	4681      	mov	r9, r0
   d51e0:	2800      	cmp	r0, #0
   d51e2:	f43f aeff 	beq.w	d4fe4 <_Z13sensorHandlerv+0x1c>
            addrSense[c++] = Wire.read();
   d51e6:	f006 fef5 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d51ea:	6803      	ldr	r3, [r0, #0]
   d51ec:	695b      	ldr	r3, [r3, #20]
   d51ee:	4798      	blx	r3
   d51f0:	f807 0f01 	strb.w	r0, [r7, #1]!
        Serial.printlnf("Conductivity: %f",senseCond);
        Wire.requestFrom(TEMPADDR, 20, 1);
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
        char addrSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d51f4:	e7ee      	b.n	d51d4 <_Z13sensorHandlerv+0x20c>
   d51f6:	bf00      	nop
   d51f8:	2003d974 	.word	0x2003d974
   d51fc:	2003e2c4 	.word	0x2003e2c4
   d5200:	000df80a 	.word	0x000df80a
   d5204:	2003db3f 	.word	0x2003db3f
   d5208:	2003d978 	.word	0x2003d978
   d520c:	2003d9d4 	.word	0x2003d9d4
   d5210:	000df7e5 	.word	0x000df7e5
   d5214:	000df7ec 	.word	0x000df7ec
   d5218:	000df7f9 	.word	0x000df7f9
        float senseTemp = atof(addrSense);
        Serial.printlnf("Temperature: %f",senseTemp);
        dataWait = false;
        if(logSensors){
            char timestamp[16];
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   d521c:	f006 fca4 	bl	dbb68 <_ZN9TimeClass5monthEv>
   d5220:	4606      	mov	r6, r0
   d5222:	f006 fc97 	bl	dbb54 <_ZN9TimeClass3dayEv>
   d5226:	4681      	mov	r9, r0
   d5228:	f006 fca6 	bl	dbb78 <_ZN9TimeClass4yearEv>
   d522c:	4682      	mov	sl, r0
   d522e:	f006 fc73 	bl	dbb18 <_ZN9TimeClass4hourEv>
   d5232:	4683      	mov	fp, r0
   d5234:	f006 fc7a 	bl	dbb2c <_ZN9TimeClass6minuteEv>
   d5238:	900e      	str	r0, [sp, #56]	; 0x38
   d523a:	f006 fc81 	bl	dbb40 <_ZN9TimeClass6secondEv>
   d523e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d5240:	9004      	str	r0, [sp, #16]
   d5242:	9303      	str	r3, [sp, #12]
   d5244:	e88d 0e00 	stmia.w	sp, {r9, sl, fp}
   d5248:	4633      	mov	r3, r6
   d524a:	4a2f      	ldr	r2, [pc, #188]	; (d5308 <_Z13sensorHandlerv+0x340>)
   d524c:	2110      	movs	r1, #16
   d524e:	a810      	add	r0, sp, #64	; 0x40
   d5250:	f003 f8b8 	bl	d83c4 <snprintf>
   d5254:	482d      	ldr	r0, [pc, #180]	; (d530c <_Z13sensorHandlerv+0x344>)
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   d5256:	7c03      	ldrb	r3, [r0, #16]
   d5258:	b92b      	cbnz	r3, d5266 <_Z13sensorHandlerv+0x29e>
   d525a:	f244 2202 	movw	r2, #16898	; 0x4202
   d525e:	492c      	ldr	r1, [pc, #176]	; (d5310 <_Z13sensorHandlerv+0x348>)
   d5260:	3010      	adds	r0, #16
   d5262:	f7ff f95b 	bl	d451c <_ZN7FatFile4openEPKci>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d5266:	4640      	mov	r0, r8
   d5268:	f007 f9aa 	bl	dc5c0 <__aeabi_f2d>
   d526c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   d5270:	4b28      	ldr	r3, [pc, #160]	; (d5314 <_Z13sensorHandlerv+0x34c>)
   d5272:	6818      	ldr	r0, [r3, #0]
   d5274:	f007 f9a4 	bl	dc5c0 <__aeabi_f2d>
   d5278:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d527c:	4b26      	ldr	r3, [pc, #152]	; (d5318 <_Z13sensorHandlerv+0x350>)
   d527e:	6818      	ldr	r0, [r3, #0]
   d5280:	f007 f99e 	bl	dc5c0 <__aeabi_f2d>
   d5284:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d5288:	6820      	ldr	r0, [r4, #0]
   d528a:	f007 f999 	bl	dc5c0 <__aeabi_f2d>
   d528e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5292:	4638      	mov	r0, r7
   d5294:	f007 f994 	bl	dc5c0 <__aeabi_f2d>
   d5298:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d529c:	4b1f      	ldr	r3, [pc, #124]	; (d531c <_Z13sensorHandlerv+0x354>)
   d529e:	6818      	ldr	r0, [r3, #0]
   d52a0:	ee07 0a90 	vmov	s15, r0
   d52a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d52a8:	ee17 0a90 	vmov	r0, s15
   d52ac:	f007 f988 	bl	dc5c0 <__aeabi_f2d>
   d52b0:	a313      	add	r3, pc, #76	; (adr r3, d5300 <_Z13sensorHandlerv+0x338>)
   d52b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d52b6:	f007 fb01 	bl	dc8bc <__aeabi_ddiv>
   d52ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d52be:	4b18      	ldr	r3, [pc, #96]	; (d5320 <_Z13sensorHandlerv+0x358>)
   d52c0:	6818      	ldr	r0, [r3, #0]
   d52c2:	ee07 0a90 	vmov	s15, r0
   d52c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d52ca:	ee17 0a90 	vmov	r0, s15
   d52ce:	f007 f977 	bl	dc5c0 <__aeabi_f2d>
   d52d2:	a30b      	add	r3, pc, #44	; (adr r3, d5300 <_Z13sensorHandlerv+0x338>)
   d52d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d52d8:	f007 faf0 	bl	dc8bc <__aeabi_ddiv>
   d52dc:	ab10      	add	r3, sp, #64	; 0x40
   d52de:	e9cd 0100 	strd	r0, r1, [sp]
   d52e2:	4a10      	ldr	r2, [pc, #64]	; (d5324 <_Z13sensorHandlerv+0x35c>)
   d52e4:	4809      	ldr	r0, [pc, #36]	; (d530c <_Z13sensorHandlerv+0x344>)
   d52e6:	2101      	movs	r1, #1
   d52e8:	f006 f923 	bl	db532 <_ZN5Print11printf_implEbPKcz>
            myFile.close();
   d52ec:	480e      	ldr	r0, [pc, #56]	; (d5328 <_Z13sensorHandlerv+0x360>)
   d52ee:	f001 f9bf 	bl	d6670 <_ZN7FatFile5closeEv>
   d52f2:	e68d      	b.n	d5010 <_Z13sensorHandlerv+0x48>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
        Wire.endTransmission();                                                       //end the I2C data transmission.
        dataWait = true;
    }
}
   d52f4:	b029      	add	sp, #164	; 0xa4
   d52f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d52fa:	bf00      	nop
   d52fc:	f3af 8000 	nop.w
   d5300:	00000000 	.word	0x00000000
   d5304:	412e8480 	.word	0x412e8480
   d5308:	000df81a 	.word	0x000df81a
   d530c:	2003da18 	.word	0x2003da18
   d5310:	2003db4d 	.word	0x2003db4d
   d5314:	2003db48 	.word	0x2003db48
   d5318:	2003e2d0 	.word	0x2003e2d0
   d531c:	2003db10 	.word	0x2003db10
   d5320:	2003daec 	.word	0x2003daec
   d5324:	000df833 	.word	0x000df833
   d5328:	2003da28 	.word	0x2003da28

000d532c <loop>:
        logFile.close();
    }
    // delete possible existing file
}

void loop(){
   d532c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if(getGPSLatLon()){
   d532e:	f7ff f98f 	bl	d4650 <_Z12getGPSLatLonv>
   d5332:	b1a8      	cbz	r0, d5360 <loop+0x34>
        char latLonBuf[UART_TX_BUF_SIZE];
        latitude = ((float)latitude_mdeg/1000000.0);
   d5334:	4b19      	ldr	r3, [pc, #100]	; (d539c <loop+0x70>)
   d5336:	ed9f 7a1a 	vldr	s14, [pc, #104]	; d53a0 <loop+0x74>
   d533a:	edd3 7a00 	vldr	s15, [r3]
   d533e:	4b19      	ldr	r3, [pc, #100]	; (d53a4 <loop+0x78>)
   d5340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5344:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d5348:	edc3 6a00 	vstr	s13, [r3]
        longitude = ((float)longitude_mdeg/1000000.0);
   d534c:	4b16      	ldr	r3, [pc, #88]	; (d53a8 <loop+0x7c>)
   d534e:	edd3 7a00 	vldr	s15, [r3]
   d5352:	4b16      	ldr	r3, [pc, #88]	; (d53ac <loop+0x80>)
   d5354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5358:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d535c:	edc3 6a00 	vstr	s13, [r3]
        //sprintf(latLonBuf, "GPS Data: Lat:%0.6f Lon:%0.6f\n", latitude, longitude);
        //Serial.println(latLonBuf);
        //sendData(latLonBuf, 0, true, true, false);
    }
    sensorHandler();
   d5360:	f7ff fe32 	bl	d4fc8 <_Z13sensorHandlerv>
    XBeeHandler();
   d5364:	f7ff fd3e 	bl	d4de4 <_Z11XBeeHandlerv>
    statusUpdate();
   d5368:	f7ff fa1e 	bl	d47a8 <_Z12statusUpdatev>
    if(offloadMode) dataOffloader();
   d536c:	4b10      	ldr	r3, [pc, #64]	; (d53b0 <loop+0x84>)
   d536e:	781b      	ldrb	r3, [r3, #0]
   d5370:	b10b      	cbz	r3, d5376 <loop+0x4a>
   d5372:	f7ff fab9 	bl	d48e8 <_Z13dataOffloaderv>
    if(errModeReply){
   d5376:	4d0f      	ldr	r5, [pc, #60]	; (d53b4 <loop+0x88>)
   d5378:	7829      	ldrb	r1, [r5, #0]
   d537a:	b139      	cbz	r1, d538c <loop+0x60>
        sendData(errBuf,errModeReply,false,false,false);
   d537c:	2400      	movs	r4, #0
   d537e:	9400      	str	r4, [sp, #0]
   d5380:	4623      	mov	r3, r4
   d5382:	4622      	mov	r2, r4
   d5384:	480c      	ldr	r0, [pc, #48]	; (d53b8 <loop+0x8c>)
   d5386:	f7ff f991 	bl	d46ac <_Z8sendDataPKchbbb>
        errModeReply = 0;
   d538a:	702c      	strb	r4, [r5, #0]
    }
    sendResponseData();
   d538c:	f7ff f9f8 	bl	d4780 <_Z16sendResponseDatav>
    delay(100);
   d5390:	2064      	movs	r0, #100	; 0x64
}
   d5392:	b003      	add	sp, #12
   d5394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if(errModeReply){
        sendData(errBuf,errModeReply,false,false,false);
        errModeReply = 0;
    }
    sendResponseData();
    delay(100);
   d5398:	f003 b834 	b.w	d8404 <delay>
   d539c:	2003daec 	.word	0x2003daec
   d53a0:	49742400 	.word	0x49742400
   d53a4:	2003e210 	.word	0x2003e210
   d53a8:	2003db10 	.word	0x2003db10
   d53ac:	2003db6c 	.word	0x2003db6c
   d53b0:	2003da0c 	.word	0x2003da0c
   d53b4:	2003db4c 	.word	0x2003db4c
   d53b8:	2003e215 	.word	0x2003e215

000d53bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d53bc:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d53be:	4d09      	ldr	r5, [pc, #36]	; (d53e4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d53c0:	6829      	ldr	r1, [r5, #0]
   d53c2:	f011 0401 	ands.w	r4, r1, #1
   d53c6:	d10a      	bne.n	d53de <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d53c8:	4628      	mov	r0, r5
   d53ca:	f7fe fe77 	bl	d40bc <__cxa_guard_acquire>
   d53ce:	b130      	cbz	r0, d53de <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d53d0:	4621      	mov	r1, r4
   d53d2:	4805      	ldr	r0, [pc, #20]	; (d53e8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d53d4:	f006 f902 	bl	db5dc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d53d8:	4628      	mov	r0, r5
   d53da:	f7fe fe74 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d53de:	4802      	ldr	r0, [pc, #8]	; (d53e8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d53e0:	bd38      	pop	{r3, r4, r5, pc}
   d53e2:	bf00      	nop
   d53e4:	2003d464 	.word	0x2003d464
   d53e8:	2003d468 	.word	0x2003d468

000d53ec <_Z8setupSPIv>:
void setupLTE(){
    Particle.subscribe("CCHub", cmdLTEHandler); //Subscribe to LTE data from Central Control Hub
    LTEAvail = false;
}

void setupSPI(){
   d53ec:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(SPI_Mode mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   d53ee:	f7ff ffe5 	bl	d53bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d53f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d53f6:	2100      	movs	r1, #0
   d53f8:	f006 f90b 	bl	db612 <_ZN8SPIClass5beginE8SPI_Modet>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   d53fc:	f7ff ffde 	bl	d53bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5400:	2201      	movs	r2, #1
   d5402:	4902      	ldr	r1, [pc, #8]	; (d540c <_Z8setupSPIv+0x20>)
    SPI.begin(SPI_MODE_MASTER);
    SPI.setClockSpeed(1000000);
}
   d5404:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d5408:	f006 b9a0 	b.w	db74c <_ZN8SPIClass13setClockSpeedEjj>
   d540c:	000f4240 	.word	0x000f4240

000d5410 <setup>:
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
    }
}

void setup(){
   d5410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
inline uint16_t particle::LEDStatus::period() const {
    return (d_.pattern != LED_PATTERN_CUSTOM ? d_.period : 0);
}

inline void particle::LEDStatus::setPriority(LEDPriority priority) {
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   d5414:	4894      	ldr	r0, [pc, #592]	; (d5668 <setup+0x258>)
    senseTimer = millis();
    dataTimer = millis();
    XBeeRxTime = 0;
    BLERxTime = 0;
    dataWait = false;
    logSensors = true;
   d5416:	4e95      	ldr	r6, [pc, #596]	; (d566c <setup+0x25c>)
   d5418:	7c03      	ldrb	r3, [r0, #16]
    logMessages = true;
   d541a:	4d95      	ldr	r5, [pc, #596]	; (d5670 <setup+0x260>)
   d541c:	f003 0303 	and.w	r3, r3, #3
   d5420:	f043 0378 	orr.w	r3, r3, #120	; 0x78
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
    }
}

void setup(){
   d5424:	b092      	sub	sp, #72	; 0x48
   d5426:	7403      	strb	r3, [r0, #16]
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d5428:	2200      	movs	r2, #0
   d542a:	2101      	movs	r1, #1
   d542c:	3004      	adds	r0, #4
   d542e:	f002 fecb 	bl	d81c8 <led_set_status_active>
    status.setPriority(LED_PRIORITY_IMPORTANT);
    status.setActive(true);

    BLE.on();
   d5432:	f003 fb15 	bl	d8a60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5436:	f003 fb59 	bl	d8aec <_ZNK8particle14BleLocalDevice2onEv>
    
    //Log.info("Hello from WaterNet23!");
    Serial.begin();
   d543a:	f006 fca3 	bl	dbd84 <_Z16_fetch_usbserialv>
   d543e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5442:	f006 fc8f 	bl	dbd64 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600, SERIAL_PARITY_EVEN);                        //Start serial for XBee module
   d5446:	f006 fc11 	bl	dbc6c <_Z22__fetch_global_Serial1v>
   d544a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d544e:	2204      	movs	r2, #4
   d5450:	f006 fbfe 	bl	dbc50 <_ZN11USARTSerial5beginEmm>
    setupSPI();                                 //Setup SPI for BeagleBone
   d5454:	f7ff ffca 	bl	d53ec <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   d5458:	f7ff f8c2 	bl	d45e0 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   d545c:	f7ff f8e2 	bl	d4624 <_Z8setupGPSv>
    setupLTE();                                 //Initialize LTE Flags
   d5460:	f7ff f8aa 	bl	d45b8 <_Z8setupLTEv>

    manualRC = true;
   d5464:	4b83      	ldr	r3, [pc, #524]	; (d5674 <setup+0x264>)
   d5466:	2701      	movs	r7, #1
   d5468:	701f      	strb	r7, [r3, #0]
   d546a:	f002 fced 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>

    senseTimer = millis();
   d546e:	4b82      	ldr	r3, [pc, #520]	; (d5678 <setup+0x268>)
   d5470:	6018      	str	r0, [r3, #0]
   d5472:	f002 fce9 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
    dataTimer = millis();
   d5476:	4b81      	ldr	r3, [pc, #516]	; (d567c <setup+0x26c>)
    XBeeRxTime = 0;
    BLERxTime = 0;
    dataWait = false;
    logSensors = true;
   d5478:	7037      	strb	r7, [r6, #0]
    setupLTE();                                 //Initialize LTE Flags

    manualRC = true;

    senseTimer = millis();
    dataTimer = millis();
   d547a:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   d547c:	4b80      	ldr	r3, [pc, #512]	; (d5680 <setup+0x270>)
    BLERxTime = 0;
    dataWait = false;
    logSensors = true;
    logMessages = true;
   d547e:	702f      	strb	r7, [r5, #0]

    manualRC = true;

    senseTimer = millis();
    dataTimer = millis();
    XBeeRxTime = 0;
   d5480:	2400      	movs	r4, #0
   d5482:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   d5484:	4b7f      	ldr	r3, [pc, #508]	; (d5684 <setup+0x274>)
   d5486:	601c      	str	r4, [r3, #0]
    dataWait = false;
   d5488:	4b7f      	ldr	r3, [pc, #508]	; (d5688 <setup+0x278>)
   d548a:	701c      	strb	r4, [r3, #0]
    logSensors = true;
    logMessages = true;
    offloadMode = false;
   d548c:	4b7f      	ldr	r3, [pc, #508]	; (d568c <setup+0x27c>)
   d548e:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   d5490:	4b7f      	ldr	r3, [pc, #508]	; (d5690 <setup+0x280>)
   d5492:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   d5494:	4b7f      	ldr	r3, [pc, #508]	; (d5694 <setup+0x284>)
   d5496:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   d549a:	801a      	strh	r2, [r3, #0]

    battPercent = 50;
   d549c:	4b7e      	ldr	r3, [pc, #504]	; (d5698 <setup+0x288>)
   d549e:	2232      	movs	r2, #50	; 0x32
   d54a0:	701a      	strb	r2, [r3, #0]

    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   d54a2:	f003 fadd 	bl	d8a60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d54a6:	4a7d      	ldr	r2, [pc, #500]	; (d569c <setup+0x28c>)
   d54a8:	4601      	mov	r1, r0
   d54aa:	a80d      	add	r0, sp, #52	; 0x34
   d54ac:	f003 ff6c 	bl	d9388 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d54b0:	a80d      	add	r0, sp, #52	; 0x34
   d54b2:	f003 fb94 	bl	d8bde <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   d54b6:	f003 fad3 	bl	d8a60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d54ba:	4a79      	ldr	r2, [pc, #484]	; (d56a0 <setup+0x290>)
   d54bc:	4601      	mov	r1, r0
   d54be:	a80d      	add	r0, sp, #52	; 0x34
   d54c0:	f003 ff62 	bl	d9388 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d54c4:	a80d      	add	r0, sp, #52	; 0x34
   d54c6:	f003 fb8a 	bl	d8bde <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   d54ca:	f003 fac9 	bl	d8a60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d54ce:	4a75      	ldr	r2, [pc, #468]	; (d56a4 <setup+0x294>)
   d54d0:	4601      	mov	r1, r0
   d54d2:	a80d      	add	r0, sp, #52	; 0x34
   d54d4:	f003 ff58 	bl	d9388 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d54d8:	a80d      	add	r0, sp, #52	; 0x34
   d54da:	f003 fb80 	bl	d8bde <_ZN8particle17BleCharacteristicD1Ev>

    char deviceName[10];
    strcpy(deviceName,"WTN23_Bot");
   d54de:	4972      	ldr	r1, [pc, #456]	; (d56a8 <setup+0x298>)
   d54e0:	a806      	add	r0, sp, #24
   d54e2:	f007 fda6 	bl	dd032 <strcpy>
    deviceName[9] = BOTNUM+48;
   d54e6:	2331      	movs	r3, #49	; 0x31
   d54e8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    BLECustomData[0] = BOTNUM;
   d54ec:	4b6f      	ldr	r3, [pc, #444]	; (d56ac <setup+0x29c>)
   d54ee:	701f      	strb	r7, [r3, #0]

    advData.appendServiceUUID(WaterNetService); // Add the app service
   d54f0:	4b6f      	ldr	r3, [pc, #444]	; (d56b0 <setup+0x2a0>)
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d54f2:	a80d      	add	r0, sp, #52	; 0x34
   d54f4:	6819      	ldr	r1, [r3, #0]
   d54f6:	f003 f925 	bl	d8744 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d54fa:	a80d      	add	r0, sp, #52	; 0x34
   d54fc:	f003 f86e 	bl	d85dc <_ZNK8particle7BleUuid4typeEv>
   d5500:	4607      	mov	r7, r0
            uint16_t uuid16 = tempUUID.shorted();
   d5502:	a80d      	add	r0, sp, #52	; 0x34
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d5504:	b947      	cbnz	r7, d5518 <setup+0x108>
            uint16_t uuid16 = tempUUID.shorted();
   d5506:	f003 f887 	bl	d8618 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d550a:	9700      	str	r7, [sp, #0]

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d550c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d5510:	2302      	movs	r3, #2
   d5512:	aa09      	add	r2, sp, #36	; 0x24
   d5514:	2103      	movs	r1, #3
   d5516:	e005      	b.n	d5524 <setup+0x114>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d5518:	f003 f883 	bl	d8622 <_ZNK8particle7BleUuid8rawBytesEv>
   d551c:	9400      	str	r4, [sp, #0]
   d551e:	2310      	movs	r3, #16
   d5520:	4602      	mov	r2, r0
   d5522:	2107      	movs	r1, #7
   d5524:	4863      	ldr	r0, [pc, #396]	; (d56b4 <setup+0x2a4>)
   d5526:	f003 f930 	bl	d878a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   d552a:	2300      	movs	r3, #0
   d552c:	2208      	movs	r2, #8
   d552e:	495f      	ldr	r1, [pc, #380]	; (d56ac <setup+0x29c>)
   d5530:	4860      	ldr	r0, [pc, #384]	; (d56b4 <setup+0x2a4>)
   d5532:	f003 f98b 	bl	d884c <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    //advData.appendLocalName(deviceName);           //Local advertising name

    BLE.advertise(&advData);                    //Start advertising the characteristics
   d5536:	f003 fa93 	bl	d8a60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d553a:	2200      	movs	r2, #0
   d553c:	495d      	ldr	r1, [pc, #372]	; (d56b4 <setup+0x2a4>)
   d553e:	f003 fb0b 	bl	d8b58 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   d5542:	f006 fd47 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d5546:	f004 fbd9 	bl	d9cfc <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   d554a:	f006 fd43 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   d554e:	495a      	ldr	r1, [pc, #360]	; (d56b8 <setup+0x2a8>)
   d5550:	f004 fbd0 	bl	d9cf4 <_ZN7TwoWire8setSpeedEm>

    char timestamp[16];
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   d5554:	f006 fb08 	bl	dbb68 <_ZN9TimeClass5monthEv>
   d5558:	4604      	mov	r4, r0
   d555a:	f006 fafb 	bl	dbb54 <_ZN9TimeClass3dayEv>
   d555e:	4607      	mov	r7, r0
   d5560:	f006 fb0a 	bl	dbb78 <_ZN9TimeClass4yearEv>
   d5564:	4680      	mov	r8, r0
   d5566:	f006 fad7 	bl	dbb18 <_ZN9TimeClass4hourEv>
   d556a:	4681      	mov	r9, r0
   d556c:	f006 fade 	bl	dbb2c <_ZN9TimeClass6minuteEv>
   d5570:	4682      	mov	sl, r0
   d5572:	f006 fae5 	bl	dbb40 <_ZN9TimeClass6secondEv>
   d5576:	4623      	mov	r3, r4
   d5578:	4a50      	ldr	r2, [pc, #320]	; (d56bc <setup+0x2ac>)
   d557a:	9004      	str	r0, [sp, #16]
   d557c:	2110      	movs	r1, #16
   d557e:	e88d 0780 	stmia.w	sp, {r7, r8, r9, sl}
   d5582:	a809      	add	r0, sp, #36	; 0x24
   d5584:	f002 ff1e 	bl	d83c4 <snprintf>
    strcpy(filename,DEF_FILENAME);
   d5588:	494d      	ldr	r1, [pc, #308]	; (d56c0 <setup+0x2b0>)
   d558a:	484e      	ldr	r0, [pc, #312]	; (d56c4 <setup+0x2b4>)
   d558c:	f007 fd51 	bl	dd032 <strcpy>
    strcat(filename,timestamp);
   d5590:	a909      	add	r1, sp, #36	; 0x24
   d5592:	484c      	ldr	r0, [pc, #304]	; (d56c4 <setup+0x2b4>)
   d5594:	f007 fd1c 	bl	dcfd0 <strcat>
    strcpy(filenameMessages,filename);
   d5598:	494a      	ldr	r1, [pc, #296]	; (d56c4 <setup+0x2b4>)
   d559a:	484b      	ldr	r0, [pc, #300]	; (d56c8 <setup+0x2b8>)
   d559c:	f007 fd49 	bl	dd032 <strcpy>
    strcat(filename,".csv");
   d55a0:	494a      	ldr	r1, [pc, #296]	; (d56cc <setup+0x2bc>)
   d55a2:	4848      	ldr	r0, [pc, #288]	; (d56c4 <setup+0x2b4>)
   d55a4:	f007 fd14 	bl	dcfd0 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   d55a8:	4949      	ldr	r1, [pc, #292]	; (d56d0 <setup+0x2c0>)
   d55aa:	4847      	ldr	r0, [pc, #284]	; (d56c8 <setup+0x2b8>)
   d55ac:	f007 fd10 	bl	dcfd0 <strcat>

    Serial.println(filename);
   d55b0:	f006 fbe8 	bl	dbd84 <_Z16_fetch_usbserialv>
   d55b4:	4943      	ldr	r1, [pc, #268]	; (d56c4 <setup+0x2b4>)
   d55b6:	f005 ff92 	bl	db4de <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   d55ba:	f006 fbe3 	bl	dbd84 <_Z16_fetch_usbserialv>
   d55be:	4942      	ldr	r1, [pc, #264]	; (d56c8 <setup+0x2b8>)
   d55c0:	f005 ff8d 	bl	db4de <_ZN5Print7printlnEPKc>

    watchdog.start();
   d55c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d55c8:	4842      	ldr	r0, [pc, #264]	; (d56d4 <setup+0x2c4>)
   d55ca:	f7fe ff13 	bl	d43f4 <_ZN5Timer5startEj>
    ledTimer.start();
   d55ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d55d2:	4841      	ldr	r0, [pc, #260]	; (d56d8 <setup+0x2c8>)
   d55d4:	f7fe ff0e 	bl	d43f4 <_ZN5Timer5startEj>
    statusPD.start();
   d55d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d55dc:	483f      	ldr	r0, [pc, #252]	; (d56dc <setup+0x2cc>)
   d55de:	f7fe ff09 	bl	d43f4 <_ZN5Timer5startEj>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d55e2:	4a3f      	ldr	r2, [pc, #252]	; (d56e0 <setup+0x2d0>)
   d55e4:	4b3f      	ldr	r3, [pc, #252]	; (d56e4 <setup+0x2d4>)
   d55e6:	920f      	str	r2, [sp, #60]	; 0x3c
   d55e8:	2201      	movs	r2, #1
   d55ea:	930d      	str	r3, [sp, #52]	; 0x34
   d55ec:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
   d55f0:	2300      	movs	r3, #0

    if (!sd.begin(chipSelect, SD_SCK_MHZ(4))) {
   d55f2:	aa0d      	add	r2, sp, #52	; 0x34
   d55f4:	2108      	movs	r1, #8
   d55f6:	483c      	ldr	r0, [pc, #240]	; (d56e8 <setup+0x2d8>)
   d55f8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   d55fc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   d5600:	f7fe ff94 	bl	d452c <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d5604:	4604      	mov	r4, r0
   d5606:	b930      	cbnz	r0, d5616 <setup+0x206>
        Serial.println("Error: could not connect to SD card!");
   d5608:	f006 fbbc 	bl	dbd84 <_Z16_fetch_usbserialv>
   d560c:	4937      	ldr	r1, [pc, #220]	; (d56ec <setup+0x2dc>)
   d560e:	f005 ff66 	bl	db4de <_ZN5Print7printlnEPKc>
        logSensors = false;
   d5612:	7034      	strb	r4, [r6, #0]
        logMessages = false;
   d5614:	702c      	strb	r4, [r5, #0]
    }
    if(logSensors){
   d5616:	7833      	ldrb	r3, [r6, #0]
   d5618:	b17b      	cbz	r3, d563a <setup+0x22a>
   d561a:	4835      	ldr	r0, [pc, #212]	; (d56f0 <setup+0x2e0>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   d561c:	7c03      	ldrb	r3, [r0, #16]
   d561e:	b92b      	cbnz	r3, d562c <setup+0x21c>
   d5620:	f244 2202 	movw	r2, #16898	; 0x4202
   d5624:	4927      	ldr	r1, [pc, #156]	; (d56c4 <setup+0x2b4>)
   d5626:	3010      	adds	r0, #16
   d5628:	f7fe ff78 	bl	d451c <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   d562c:	4931      	ldr	r1, [pc, #196]	; (d56f4 <setup+0x2e4>)
   d562e:	4830      	ldr	r0, [pc, #192]	; (d56f0 <setup+0x2e0>)
   d5630:	f005 ff55 	bl	db4de <_ZN5Print7printlnEPKc>
        myFile.close();
   d5634:	4830      	ldr	r0, [pc, #192]	; (d56f8 <setup+0x2e8>)
   d5636:	f001 f81b 	bl	d6670 <_ZN7FatFile5closeEv>
    }
    if(logMessages){
   d563a:	782b      	ldrb	r3, [r5, #0]
   d563c:	b183      	cbz	r3, d5660 <setup+0x250>
   d563e:	482f      	ldr	r0, [pc, #188]	; (d56fc <setup+0x2ec>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d5640:	7c03      	ldrb	r3, [r0, #16]
   d5642:	b92b      	cbnz	r3, d5650 <setup+0x240>
   d5644:	f244 2202 	movw	r2, #16898	; 0x4202
   d5648:	491f      	ldr	r1, [pc, #124]	; (d56c8 <setup+0x2b8>)
   d564a:	3010      	adds	r0, #16
   d564c:	f7fe ff66 	bl	d451c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   d5650:	2201      	movs	r2, #1
   d5652:	492b      	ldr	r1, [pc, #172]	; (d5700 <setup+0x2f0>)
   d5654:	4829      	ldr	r0, [pc, #164]	; (d56fc <setup+0x2ec>)
   d5656:	f7ff fc39 	bl	d4ecc <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        logFile.close();
   d565a:	482a      	ldr	r0, [pc, #168]	; (d5704 <setup+0x2f4>)
   d565c:	f001 f808 	bl	d6670 <_ZN7FatFile5closeEv>
    }
    // delete possible existing file
}
   d5660:	b012      	add	sp, #72	; 0x48
   d5662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5666:	bf00      	nop
   d5668:	2003dacc 	.word	0x2003dacc
   d566c:	2003db3f 	.word	0x2003db3f
   d5670:	2003e214 	.word	0x2003e214
   d5674:	2003e20c 	.word	0x2003e20c
   d5678:	2003d978 	.word	0x2003d978
   d567c:	2003d974 	.word	0x2003d974
   d5680:	2003e2c0 	.word	0x2003e2c0
   d5684:	2003d9d0 	.word	0x2003d9d0
   d5688:	2003e2c4 	.word	0x2003e2c4
   d568c:	2003da0c 	.word	0x2003da0c
   d5690:	2003db3c 	.word	0x2003db3c
   d5694:	2003db30 	.word	0x2003db30
   d5698:	2003daf0 	.word	0x2003daf0
   d569c:	2003db40 	.word	0x2003db40
   d56a0:	2003d4e8 	.word	0x2003d4e8
   d56a4:	2003d498 	.word	0x2003d498
   d56a8:	000df84b 	.word	0x000df84b
   d56ac:	2003da0d 	.word	0x2003da0d
   d56b0:	2003d350 	.word	0x2003d350
   d56b4:	2003d470 	.word	0x2003d470
   d56b8:	00061a80 	.word	0x00061a80
   d56bc:	000df81a 	.word	0x000df81a
   d56c0:	000df855 	.word	0x000df855
   d56c4:	2003db4d 	.word	0x2003db4d
   d56c8:	2003d97c 	.word	0x2003d97c
   d56cc:	000df5e6 	.word	0x000df5e6
   d56d0:	000df85e 	.word	0x000df85e
   d56d4:	2003dab0 	.word	0x2003dab0
   d56d8:	2003daf4 	.word	0x2003daf4
   d56dc:	2003db14 	.word	0x2003db14
   d56e0:	003d0900 	.word	0x003d0900
   d56e4:	000df440 	.word	0x000df440
   d56e8:	2003d4f0 	.word	0x2003d4f0
   d56ec:	000df867 	.word	0x000df867
   d56f0:	2003da18 	.word	0x2003da18
   d56f4:	000df88c 	.word	0x000df88c
   d56f8:	2003da28 	.word	0x2003da28
   d56fc:	2003e2d8 	.word	0x2003e2d8
   d5700:	000df8e2 	.word	0x000df8e2
   d5704:	2003e2e8 	.word	0x2003e2e8

000d5708 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5708:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d570a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d570c:	4606      	mov	r6, r0
   d570e:	460c      	mov	r4, r1
   d5710:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5712:	d916      	bls.n	d5742 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d5714:	4290      	cmp	r0, r2
   d5716:	d215      	bcs.n	d5744 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d5718:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d571c:	1a6c      	subs	r4, r5, r1
   d571e:	f1a1 0714 	sub.w	r7, r1, #20
   d5722:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5724:	42af      	cmp	r7, r5
   d5726:	d01c      	beq.n	d5762 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d5728:	b12c      	cbz	r4, d5736 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d572a:	4629      	mov	r1, r5
   d572c:	4620      	mov	r0, r4
   d572e:	f006 f8a3 	bl	db878 <_ZN6StringC1EOS_>
   d5732:	7c2b      	ldrb	r3, [r5, #16]
   d5734:	7423      	strb	r3, [r4, #16]
   d5736:	4628      	mov	r0, r5
   d5738:	f006 f8ae 	bl	db898 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d573c:	3d14      	subs	r5, #20
   d573e:	3c14      	subs	r4, #20
   d5740:	e7f0      	b.n	d5724 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5742:	d00e      	beq.n	d5762 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d5744:	42ac      	cmp	r4, r5
   d5746:	d00c      	beq.n	d5762 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d5748:	b12e      	cbz	r6, d5756 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d574a:	4621      	mov	r1, r4
   d574c:	4630      	mov	r0, r6
   d574e:	f006 f893 	bl	db878 <_ZN6StringC1EOS_>
   d5752:	7c23      	ldrb	r3, [r4, #16]
   d5754:	7433      	strb	r3, [r6, #16]
   d5756:	4620      	mov	r0, r4
   d5758:	f006 f89e 	bl	db898 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d575c:	3414      	adds	r4, #20
   d575e:	3614      	adds	r6, #20
   d5760:	e7f0      	b.n	d5744 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d5762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5768:	2300      	movs	r3, #0
   d576a:	6003      	str	r3, [r0, #0]
   d576c:	6043      	str	r3, [r0, #4]
   d576e:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5770:	684e      	ldr	r6, [r1, #4]
   d5772:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5774:	4604      	mov	r4, r0
   d5776:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5778:	dd24      	ble.n	d57c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d577a:	f04f 0814 	mov.w	r8, #20
   d577e:	fb08 f006 	mul.w	r0, r8, r6
   d5782:	f002 fdf7 	bl	d8374 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5786:	4605      	mov	r5, r0
   d5788:	b1e0      	cbz	r0, d57c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d578a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d578e:	fb08 1202 	mla	r2, r8, r2, r1
   d5792:	f7ff ffb9 	bl	d5708 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5796:	6820      	ldr	r0, [r4, #0]
   d5798:	f002 fdf4 	bl	d8384 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d579c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d579e:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d57a0:	683e      	ldr	r6, [r7, #0]
   d57a2:	687b      	ldr	r3, [r7, #4]
   d57a4:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d57a8:	4546      	cmp	r6, r8
   d57aa:	d009      	beq.n	d57c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d57ac:	b12d      	cbz	r5, d57ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d57ae:	4631      	mov	r1, r6
   d57b0:	4628      	mov	r0, r5
   d57b2:	f006 f8da 	bl	db96a <_ZN6StringC1ERKS_>
   d57b6:	7c33      	ldrb	r3, [r6, #16]
   d57b8:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d57ba:	3614      	adds	r6, #20
   d57bc:	3514      	adds	r5, #20
   d57be:	e7f3      	b.n	d57a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d57c0:	687b      	ldr	r3, [r7, #4]
   d57c2:	6063      	str	r3, [r4, #4]
    }
}
   d57c4:	4620      	mov	r0, r4
   d57c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d57cc <_GLOBAL__sub_I_SystemMode>:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
}
   d57cc:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d57ce:	4baf      	ldr	r3, [pc, #700]	; (d5a8c <_GLOBAL__sub_I_SystemMode+0x2c0>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d57d0:	4caf      	ldr	r4, [pc, #700]	; (d5a90 <_GLOBAL__sub_I_SystemMode+0x2c4>)
   d57d2:	b092      	sub	sp, #72	; 0x48
   d57d4:	2501      	movs	r5, #1
   d57d6:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d57d8:	f002 fb4e 	bl	d7e78 <HAL_Pin_Map>
   d57dc:	2300      	movs	r3, #0
   d57de:	6023      	str	r3, [r4, #0]
   d57e0:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d57e2:	71a3      	strb	r3, [r4, #6]
   d57e4:	8123      	strh	r3, [r4, #8]
   d57e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d57ea:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d57ec:	2003      	movs	r0, #3
   d57ee:	f002 fcfd 	bl	d81ec <set_system_mode>
#define CUSTOM_DATA_LEN     8
#define MAX_FILENAME_LEN    30

#define chipSelect D8//A5

SYSTEM_MODE(MANUAL);
   d57f2:	4aa8      	ldr	r2, [pc, #672]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d57f4:	49a8      	ldr	r1, [pc, #672]	; (d5a98 <_GLOBAL__sub_I_SystemMode+0x2cc>)
   d57f6:	4620      	mov	r0, r4
   d57f8:	f006 fc12 	bl	dc020 <__aeabi_atexit>

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d57fc:	4ca7      	ldr	r4, [pc, #668]	; (d5a9c <_GLOBAL__sub_I_SystemMode+0x2d0>)

//GPS Buffers and Objects
char nmeaBuffer[100];
MicroNMEA nmea(nmeaBuffer, sizeof(nmeaBuffer));
   d57fe:	49a8      	ldr	r1, [pc, #672]	; (d5aa0 <_GLOBAL__sub_I_SystemMode+0x2d4>)
   d5800:	48a8      	ldr	r0, [pc, #672]	; (d5aa4 <_GLOBAL__sub_I_SystemMode+0x2d8>)
   d5802:	2264      	movs	r2, #100	; 0x64
   d5804:	f000 fb06 	bl	d5e14 <_ZN9MicroNMEAC1EPvh>
SFE_UBLOX_GPS myGPS;
   d5808:	48a7      	ldr	r0, [pc, #668]	; (d5aa8 <_GLOBAL__sub_I_SystemMode+0x2dc>)
   d580a:	f002 f8ab 	bl	d7964 <_ZN13SFE_UBLOX_GPSC1Ev>
   d580e:	6823      	ldr	r3, [r4, #0]
   d5810:	07db      	lsls	r3, r3, #31
   d5812:	d40a      	bmi.n	d582a <_GLOBAL__sub_I_SystemMode+0x5e>
   d5814:	4620      	mov	r0, r4
   d5816:	f7fe fc51 	bl	d40bc <__cxa_guard_acquire>
   d581a:	b130      	cbz	r0, d582a <_GLOBAL__sub_I_SystemMode+0x5e>
   d581c:	4629      	mov	r1, r5
   d581e:	48a3      	ldr	r0, [pc, #652]	; (d5aac <_GLOBAL__sub_I_SystemMode+0x2e0>)
   d5820:	f005 fedc 	bl	db5dc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5824:	4620      	mov	r0, r4
   d5826:	f7fe fc4e 	bl	d40c6 <__cxa_guard_release>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d582a:	4ba1      	ldr	r3, [pc, #644]	; (d5ab0 <_GLOBAL__sub_I_SystemMode+0x2e4>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d582c:	48a1      	ldr	r0, [pc, #644]	; (d5ab4 <_GLOBAL__sub_I_SystemMode+0x2e8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d582e:	4da2      	ldr	r5, [pc, #648]	; (d5ab8 <_GLOBAL__sub_I_SystemMode+0x2ec>)

//SD File system object
SdFat sd((SPIClass*)&SPI1);

File myFile;
   d5830:	49a2      	ldr	r1, [pc, #648]	; (d5abc <_GLOBAL__sub_I_SystemMode+0x2f0>)
   d5832:	6005      	str	r5, [r0, #0]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d5834:	2264      	movs	r2, #100	; 0x64
   d5836:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d583a:	4aa1      	ldr	r2, [pc, #644]	; (d5ac0 <_GLOBAL__sub_I_SystemMode+0x2f4>)
   d583c:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d5840:	2201      	movs	r2, #1
   d5842:	2400      	movs	r4, #0
   d5844:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5848:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d584c:	4a97      	ldr	r2, [pc, #604]	; (d5aac <_GLOBAL__sub_I_SystemMode+0x2e0>)
   d584e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   d5852:	71dc      	strb	r4, [r3, #7]
   d5854:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d5858:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d585c:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d5860:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d5864:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d5868:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d586c:	6086      	str	r6, [r0, #8]
   d586e:	4a89      	ldr	r2, [pc, #548]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5870:	7404      	strb	r4, [r0, #16]
   d5872:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5874:	6044      	str	r4, [r0, #4]
   d5876:	f006 fbd3 	bl	dc020 <__aeabi_atexit>
   d587a:	4892      	ldr	r0, [pc, #584]	; (d5ac4 <_GLOBAL__sub_I_SystemMode+0x2f8>)
File logFile;
   d587c:	4a85      	ldr	r2, [pc, #532]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d587e:	6086      	str	r6, [r0, #8]
   d5880:	498e      	ldr	r1, [pc, #568]	; (d5abc <_GLOBAL__sub_I_SystemMode+0x2f0>)
   d5882:	7404      	strb	r4, [r0, #16]
   d5884:	7444      	strb	r4, [r0, #17]
   d5886:	6044      	str	r4, [r0, #4]
   d5888:	6005      	str	r5, [r0, #0]
   d588a:	f006 fbc9 	bl	dc020 <__aeabi_atexit>
   d588e:	488e      	ldr	r0, [pc, #568]	; (d5ac8 <_GLOBAL__sub_I_SystemMode+0x2fc>)
File logDir;
   d5890:	4a80      	ldr	r2, [pc, #512]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5892:	498a      	ldr	r1, [pc, #552]	; (d5abc <_GLOBAL__sub_I_SystemMode+0x2f0>)
   d5894:	6086      	str	r6, [r0, #8]
   d5896:	7404      	strb	r4, [r0, #16]
   d5898:	7444      	strb	r4, [r0, #17]
   d589a:	6044      	str	r4, [r0, #4]
   d589c:	6005      	str	r5, [r0, #0]
   d589e:	f006 fbbf 	bl	dc020 <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d58a2:	9405      	str	r4, [sp, #20]
   d58a4:	9406      	str	r4, [sp, #24]
   d58a6:	9407      	str	r4, [sp, #28]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d58a8:	f006 fa6c 	bl	dbd84 <_Z16_fetch_usbserialv>
   d58ac:	a905      	add	r1, sp, #20
   d58ae:	4606      	mov	r6, r0
   d58b0:	a808      	add	r0, sp, #32
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d58b2:	4d86      	ldr	r5, [pc, #536]	; (d5acc <_GLOBAL__sub_I_SystemMode+0x300>)
   d58b4:	f7ff ff56 	bl	d5764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d58b8:	a908      	add	r1, sp, #32
   d58ba:	a80b      	add	r0, sp, #44	; 0x2c
   d58bc:	f7ff ff52 	bl	d5764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d58c0:	4b83      	ldr	r3, [pc, #524]	; (d5ad0 <_GLOBAL__sub_I_SystemMode+0x304>)
   d58c2:	602b      	str	r3, [r5, #0]
   d58c4:	a90b      	add	r1, sp, #44	; 0x2c
   d58c6:	a80e      	add	r0, sp, #56	; 0x38
   d58c8:	f7ff ff4c 	bl	d5764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d58cc:	aa0e      	add	r2, sp, #56	; 0x38
   d58ce:	211e      	movs	r1, #30
   d58d0:	1d28      	adds	r0, r5, #4
   d58d2:	f005 f950 	bl	dab76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d58d6:	a80e      	add	r0, sp, #56	; 0x38
   d58d8:	f7fe ffcc 	bl	d4874 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d58dc:	a80b      	add	r0, sp, #44	; 0x2c
   d58de:	f7fe ffc9 	bl	d4874 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d58e2:	4b7c      	ldr	r3, [pc, #496]	; (d5ad4 <_GLOBAL__sub_I_SystemMode+0x308>)
   d58e4:	602b      	str	r3, [r5, #0]
   d58e6:	622e      	str	r6, [r5, #32]
   d58e8:	a808      	add	r0, sp, #32
   d58ea:	f7fe ffc3 	bl	d4874 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d58ee:	4b7a      	ldr	r3, [pc, #488]	; (d5ad8 <_GLOBAL__sub_I_SystemMode+0x30c>)
   d58f0:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d58f2:	f006 fa47 	bl	dbd84 <_Z16_fetch_usbserialv>
   d58f6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d58fa:	f006 fa33 	bl	dbd64 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d58fe:	f004 fde3 	bl	da4c8 <_ZN5spark10LogManager8instanceEv>
   d5902:	4629      	mov	r1, r5
   d5904:	f005 f8ca 	bl	daa9c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   d5908:	a805      	add	r0, sp, #20
   d590a:	f7fe ffb3 	bl	d4874 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d590e:	4a61      	ldr	r2, [pc, #388]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5910:	4972      	ldr	r1, [pc, #456]	; (d5adc <_GLOBAL__sub_I_SystemMode+0x310>)
   d5912:	4628      	mov	r0, r5
const char* WaterNetService = "b4206910-dc4b-5743-c8b1-92d0e75182b0"; //Main BLE Service
const char* rxUuid          = "b4206912-dc4b-5743-c8b1-92d0e75182b0"; //GPS Latitude Service
const char* txUuid          = "b4206913-dc4b-5743-c8b1-92d0e75182b0"; //GPS Longitude Service
const char* offldUuid       = "b4206914-dc4b-5743-c8b1-92d0e75182b0"; //GPS Longitude Service

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   d5914:	4d72      	ldr	r5, [pc, #456]	; (d5ae0 <_GLOBAL__sub_I_SystemMode+0x314>)

File myFile;
File logFile;
File logDir;

SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   d5916:	f006 fb83 	bl	dc020 <__aeabi_atexit>
const char* WaterNetService = "b4206910-dc4b-5743-c8b1-92d0e75182b0"; //Main BLE Service
const char* rxUuid          = "b4206912-dc4b-5743-c8b1-92d0e75182b0"; //GPS Latitude Service
const char* txUuid          = "b4206913-dc4b-5743-c8b1-92d0e75182b0"; //GPS Longitude Service
const char* offldUuid       = "b4206914-dc4b-5743-c8b1-92d0e75182b0"; //GPS Longitude Service

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   d591a:	9402      	str	r4, [sp, #8]
   d591c:	9401      	str	r4, [sp, #4]
   d591e:	682b      	ldr	r3, [r5, #0]
   d5920:	9300      	str	r3, [sp, #0]
   d5922:	4b70      	ldr	r3, [pc, #448]	; (d5ae4 <_GLOBAL__sub_I_SystemMode+0x318>)
   d5924:	4970      	ldr	r1, [pc, #448]	; (d5ae8 <_GLOBAL__sub_I_SystemMode+0x31c>)
   d5926:	681b      	ldr	r3, [r3, #0]
   d5928:	4870      	ldr	r0, [pc, #448]	; (d5aec <_GLOBAL__sub_I_SystemMode+0x320>)
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d592a:	2610      	movs	r6, #16
   d592c:	aa0e      	add	r2, sp, #56	; 0x38
   d592e:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
   d5932:	f7fe ffb2 	bl	d489a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d5936:	4a57      	ldr	r2, [pc, #348]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5938:	496d      	ldr	r1, [pc, #436]	; (d5af0 <_GLOBAL__sub_I_SystemMode+0x324>)
   d593a:	486c      	ldr	r0, [pc, #432]	; (d5aec <_GLOBAL__sub_I_SystemMode+0x320>)
   d593c:	f006 fb70 	bl	dc020 <__aeabi_atexit>
   d5940:	2304      	movs	r3, #4
   d5942:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   d5946:	4b6b      	ldr	r3, [pc, #428]	; (d5af4 <_GLOBAL__sub_I_SystemMode+0x328>)
   d5948:	9402      	str	r4, [sp, #8]
   d594a:	9301      	str	r3, [sp, #4]
   d594c:	682b      	ldr	r3, [r5, #0]
   d594e:	9300      	str	r3, [sp, #0]
   d5950:	4b69      	ldr	r3, [pc, #420]	; (d5af8 <_GLOBAL__sub_I_SystemMode+0x32c>)
   d5952:	496a      	ldr	r1, [pc, #424]	; (d5afc <_GLOBAL__sub_I_SystemMode+0x330>)
   d5954:	681b      	ldr	r3, [r3, #0]
   d5956:	486a      	ldr	r0, [pc, #424]	; (d5b00 <_GLOBAL__sub_I_SystemMode+0x334>)
   d5958:	aa0e      	add	r2, sp, #56	; 0x38
   d595a:	f7fe ff9e 	bl	d489a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d595e:	4a4d      	ldr	r2, [pc, #308]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5960:	4963      	ldr	r1, [pc, #396]	; (d5af0 <_GLOBAL__sub_I_SystemMode+0x324>)
   d5962:	4867      	ldr	r0, [pc, #412]	; (d5b00 <_GLOBAL__sub_I_SystemMode+0x334>)
   d5964:	f006 fb5c 	bl	dc020 <__aeabi_atexit>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   d5968:	9402      	str	r4, [sp, #8]
   d596a:	9401      	str	r4, [sp, #4]
   d596c:	682b      	ldr	r3, [r5, #0]
   d596e:	9300      	str	r3, [sp, #0]
   d5970:	4b64      	ldr	r3, [pc, #400]	; (d5b04 <_GLOBAL__sub_I_SystemMode+0x338>)
   d5972:	4965      	ldr	r1, [pc, #404]	; (d5b08 <_GLOBAL__sub_I_SystemMode+0x33c>)
   d5974:	681b      	ldr	r3, [r3, #0]
   d5976:	4865      	ldr	r0, [pc, #404]	; (d5b0c <_GLOBAL__sub_I_SystemMode+0x340>)
   d5978:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
   d597c:	aa0e      	add	r2, sp, #56	; 0x38
   d597e:	f7fe ff8c 	bl	d489a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d5982:	4a44      	ldr	r2, [pc, #272]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5984:	495a      	ldr	r1, [pc, #360]	; (d5af0 <_GLOBAL__sub_I_SystemMode+0x324>)
   d5986:	4861      	ldr	r0, [pc, #388]	; (d5b0c <_GLOBAL__sub_I_SystemMode+0x340>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d5988:	4d61      	ldr	r5, [pc, #388]	; (d5b10 <_GLOBAL__sub_I_SystemMode+0x344>)
   d598a:	f006 fb49 	bl	dc020 <__aeabi_atexit>
   d598e:	1928      	adds	r0, r5, r4
   d5990:	f002 fdc6 	bl	d8520 <_ZN8particle10BleAddressC1Ev>
   d5994:	f104 0008 	add.w	r0, r4, #8
   d5998:	4428      	add	r0, r5
   d599a:	f002 ff3d 	bl	d8818 <_ZN8particle18BleAdvertisingDataC1Ev>
   d599e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d59a2:	4428      	add	r0, r5
   d59a4:	3454      	adds	r4, #84	; 0x54
   d59a6:	f002 ff37 	bl	d8818 <_ZN8particle18BleAdvertisingDataC1Ev>

BleScanResult scanResults[SCAN_RESULT_COUNT];
   d59aa:	f5b4 6fd2 	cmp.w	r4, #1680	; 0x690
   d59ae:	d1ee      	bne.n	d598e <_GLOBAL__sub_I_SystemMode+0x1c2>

BleCharacteristic peerTxCharacteristic;
   d59b0:	4858      	ldr	r0, [pc, #352]	; (d5b14 <_GLOBAL__sub_I_SystemMode+0x348>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d59b2:	4d59      	ldr	r5, [pc, #356]	; (d5b18 <_GLOBAL__sub_I_SystemMode+0x34c>)
	    _M_manager = &_My_handler::_M_manager;
   d59b4:	4c59      	ldr	r4, [pc, #356]	; (d5b1c <_GLOBAL__sub_I_SystemMode+0x350>)
   d59b6:	f003 fc09 	bl	d91cc <_ZN8particle17BleCharacteristicC1Ev>
   d59ba:	4a36      	ldr	r2, [pc, #216]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d59bc:	494c      	ldr	r1, [pc, #304]	; (d5af0 <_GLOBAL__sub_I_SystemMode+0x324>)
   d59be:	4855      	ldr	r0, [pc, #340]	; (d5b14 <_GLOBAL__sub_I_SystemMode+0x348>)
   d59c0:	f006 fb2e 	bl	dc020 <__aeabi_atexit>
BleCharacteristic peerRxCharacteristic;
   d59c4:	4856      	ldr	r0, [pc, #344]	; (d5b20 <_GLOBAL__sub_I_SystemMode+0x354>)
   d59c6:	f003 fc01 	bl	d91cc <_ZN8particle17BleCharacteristicC1Ev>
   d59ca:	4a32      	ldr	r2, [pc, #200]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d59cc:	4948      	ldr	r1, [pc, #288]	; (d5af0 <_GLOBAL__sub_I_SystemMode+0x324>)
   d59ce:	4854      	ldr	r0, [pc, #336]	; (d5b20 <_GLOBAL__sub_I_SystemMode+0x354>)
   d59d0:	f006 fb26 	bl	dc020 <__aeabi_atexit>
BleCharacteristic offldCopyCharacteristic;
   d59d4:	4853      	ldr	r0, [pc, #332]	; (d5b24 <_GLOBAL__sub_I_SystemMode+0x358>)
   d59d6:	f003 fbf9 	bl	d91cc <_ZN8particle17BleCharacteristicC1Ev>
   d59da:	4a2e      	ldr	r2, [pc, #184]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d59dc:	4944      	ldr	r1, [pc, #272]	; (d5af0 <_GLOBAL__sub_I_SystemMode+0x324>)
   d59de:	4851      	ldr	r0, [pc, #324]	; (d5b24 <_GLOBAL__sub_I_SystemMode+0x358>)
   d59e0:	f006 fb1e 	bl	dc020 <__aeabi_atexit>
BlePeerDevice peer;
   d59e4:	4850      	ldr	r0, [pc, #320]	; (d5b28 <_GLOBAL__sub_I_SystemMode+0x35c>)
   d59e6:	f003 f95b 	bl	d8ca0 <_ZN8particle13BlePeerDeviceC1Ev>
   d59ea:	4a2a      	ldr	r2, [pc, #168]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d59ec:	494f      	ldr	r1, [pc, #316]	; (d5b2c <_GLOBAL__sub_I_SystemMode+0x360>)
   d59ee:	484e      	ldr	r0, [pc, #312]	; (d5b28 <_GLOBAL__sub_I_SystemMode+0x35c>)
   d59f0:	f006 fb16 	bl	dc020 <__aeabi_atexit>
BleAdvertisingData advData;                 //Advertising data
   d59f4:	484e      	ldr	r0, [pc, #312]	; (d5b30 <_GLOBAL__sub_I_SystemMode+0x364>)
   d59f6:	f002 ff0f 	bl	d8818 <_ZN8particle18BleAdvertisingDataC1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d59fa:	4b4e      	ldr	r3, [pc, #312]	; (d5b34 <_GLOBAL__sub_I_SystemMode+0x368>)
   d59fc:	930e      	str	r3, [sp, #56]	; 0x38
void sensorHandler();
void dataOffloader();
void statusUpdate();

//Tmers
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   d59fe:	aa0e      	add	r2, sp, #56	; 0x38
   d5a00:	2300      	movs	r3, #0
   d5a02:	f643 2198 	movw	r1, #15000	; 0x3a98
   d5a06:	484c      	ldr	r0, [pc, #304]	; (d5b38 <_GLOBAL__sub_I_SystemMode+0x36c>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5a08:	9511      	str	r5, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   d5a0a:	9410      	str	r4, [sp, #64]	; 0x40
   d5a0c:	f7fe fc82 	bl	d4314 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a10:	a80e      	add	r0, sp, #56	; 0x38
   d5a12:	f7fe fc71 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
   d5a16:	4a1f      	ldr	r2, [pc, #124]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5a18:	4948      	ldr	r1, [pc, #288]	; (d5b3c <_GLOBAL__sub_I_SystemMode+0x370>)
   d5a1a:	4847      	ldr	r0, [pc, #284]	; (d5b38 <_GLOBAL__sub_I_SystemMode+0x36c>)
   d5a1c:	f006 fb00 	bl	dc020 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5a20:	4b47      	ldr	r3, [pc, #284]	; (d5b40 <_GLOBAL__sub_I_SystemMode+0x374>)
   d5a22:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   d5a24:	aa0e      	add	r2, sp, #56	; 0x38
   d5a26:	2300      	movs	r3, #0
   d5a28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5a2c:	4845      	ldr	r0, [pc, #276]	; (d5b44 <_GLOBAL__sub_I_SystemMode+0x378>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5a2e:	9511      	str	r5, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   d5a30:	9410      	str	r4, [sp, #64]	; 0x40
   d5a32:	f7fe fc6f 	bl	d4314 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a36:	a80e      	add	r0, sp, #56	; 0x38
   d5a38:	f7fe fc5e 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
   d5a3c:	4a15      	ldr	r2, [pc, #84]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5a3e:	493f      	ldr	r1, [pc, #252]	; (d5b3c <_GLOBAL__sub_I_SystemMode+0x370>)
   d5a40:	4840      	ldr	r0, [pc, #256]	; (d5b44 <_GLOBAL__sub_I_SystemMode+0x378>)
   d5a42:	f006 faed 	bl	dc020 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5a46:	4b40      	ldr	r3, [pc, #256]	; (d5b48 <_GLOBAL__sub_I_SystemMode+0x37c>)
   d5a48:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   d5a4a:	aa0e      	add	r2, sp, #56	; 0x38
   d5a4c:	2300      	movs	r3, #0
   d5a4e:	f643 2198 	movw	r1, #15000	; 0x3a98
   d5a52:	483e      	ldr	r0, [pc, #248]	; (d5b4c <_GLOBAL__sub_I_SystemMode+0x380>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5a54:	9511      	str	r5, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   d5a56:	9410      	str	r4, [sp, #64]	; 0x40
   d5a58:	f7fe fc5c 	bl	d4314 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a5c:	a80e      	add	r0, sp, #56	; 0x38
   d5a5e:	f7fe fc4b 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
   d5a62:	4a0c      	ldr	r2, [pc, #48]	; (d5a94 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d5a64:	4935      	ldr	r1, [pc, #212]	; (d5b3c <_GLOBAL__sub_I_SystemMode+0x370>)
   d5a66:	4839      	ldr	r0, [pc, #228]	; (d5b4c <_GLOBAL__sub_I_SystemMode+0x380>)
   d5a68:	f006 fada 	bl	dc020 <__aeabi_atexit>
inline particle::LEDStatus::LEDStatus(LEDPattern pattern, LEDPriority priority, LEDSource source) :
        LEDStatus(pattern, LED_SPEED_NORMAL, priority, source) { // Use normal speed by default
}

inline particle::LEDStatus::LEDStatus(LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d5a6c:	2200      	movs	r2, #0
   d5a6e:	2114      	movs	r1, #20
   d5a70:	2001      	movs	r0, #1
   d5a72:	f002 fbe3 	bl	d823c <led_pattern_period>
}

inline particle::LEDStatus::LEDStatus(LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) :
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   d5a76:	2201      	movs	r2, #1
   d5a78:	2314      	movs	r3, #20
   d5a7a:	9201      	str	r2, [sp, #4]
   d5a7c:	9300      	str	r3, [sp, #0]
   d5a7e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   d5a82:	4603      	mov	r3, r0
   d5a84:	4832      	ldr	r0, [pc, #200]	; (d5b50 <_GLOBAL__sub_I_SystemMode+0x384>)
   d5a86:	f004 fbc1 	bl	da20c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   d5a8a:	e063      	b.n	d5b54 <_GLOBAL__sub_I_SystemMode+0x388>
   d5a8c:	2003d4e4 	.word	0x2003d4e4
   d5a90:	2003e200 	.word	0x2003e200
   d5a94:	2003d454 	.word	0x2003d454
   d5a98:	000d4271 	.word	0x000d4271
   d5a9c:	2003d458 	.word	0x2003d458
   d5aa0:	2003da4c 	.word	0x2003da4c
   d5aa4:	2003d4a0 	.word	0x2003d4a0
   d5aa8:	2003e234 	.word	0x2003e234
   d5aac:	2003d45c 	.word	0x2003d45c
   d5ab0:	2003d4f0 	.word	0x2003d4f0
   d5ab4:	2003da18 	.word	0x2003da18
   d5ab8:	000df4a4 	.word	0x000df4a4
   d5abc:	000d4175 	.word	0x000d4175
   d5ac0:	000df440 	.word	0x000df440
   d5ac4:	2003e2d8 	.word	0x2003e2d8
   d5ac8:	2003d99c 	.word	0x2003d99c
   d5acc:	2003d9e8 	.word	0x2003d9e8
   d5ad0:	000df460 	.word	0x000df460
   d5ad4:	000dfdc0 	.word	0x000dfdc0
   d5ad8:	000df48c 	.word	0x000df48c
   d5adc:	000d42b1 	.word	0x000d42b1
   d5ae0:	2003d350 	.word	0x2003d350
   d5ae4:	2003d358 	.word	0x2003d358
   d5ae8:	000df907 	.word	0x000df907
   d5aec:	2003db40 	.word	0x2003db40
   d5af0:	000d8bdf 	.word	0x000d8bdf
   d5af4:	000d4d4d 	.word	0x000d4d4d
   d5af8:	2003d34c 	.word	0x2003d34c
   d5afc:	000df90a 	.word	0x000df90a
   d5b00:	2003d4e8 	.word	0x2003d4e8
   d5b04:	2003d354 	.word	0x2003d354
   d5b08:	000df90d 	.word	0x000df90d
   d5b0c:	2003d498 	.word	0x2003d498
   d5b10:	2003db70 	.word	0x2003db70
   d5b14:	2003db34 	.word	0x2003db34
   d5b18:	000d4159 	.word	0x000d4159
   d5b1c:	000d415d 	.word	0x000d415d
   d5b20:	2003e2c8 	.word	0x2003e2c8
   d5b24:	2003e224 	.word	0x2003e224
   d5b28:	2003e22c 	.word	0x2003e22c
   d5b2c:	000d8bed 	.word	0x000d8bed
   d5b30:	2003d470 	.word	0x2003d470
   d5b34:	000d4ed9 	.word	0x000d4ed9
   d5b38:	2003dab0 	.word	0x2003dab0
   d5b3c:	000d4399 	.word	0x000d4399
   d5b40:	000d4435 	.word	0x000d4435
   d5b44:	2003daf4 	.word	0x2003daf4
   d5b48:	000d40f5 	.word	0x000d40f5
   d5b4c:	2003db14 	.word	0x2003db14
   d5b50:	2003dacc 	.word	0x2003dacc

//LED Control
LEDStatus status;
   d5b54:	4a07      	ldr	r2, [pc, #28]	; (d5b74 <_GLOBAL__sub_I_SystemMode+0x3a8>)
   d5b56:	4908      	ldr	r1, [pc, #32]	; (d5b78 <_GLOBAL__sub_I_SystemMode+0x3ac>)
   d5b58:	4808      	ldr	r0, [pc, #32]	; (d5b7c <_GLOBAL__sub_I_SystemMode+0x3b0>)
   d5b5a:	f006 fa61 	bl	dc020 <__aeabi_atexit>
uint8_t errModeReply;
size_t txLen = 0;
char filename[MAX_FILENAME_LEN];
char filenameMessages[MAX_FILENAME_LEN];

String xbeeBuf;
   d5b5e:	4908      	ldr	r1, [pc, #32]	; (d5b80 <_GLOBAL__sub_I_SystemMode+0x3b4>)
   d5b60:	4808      	ldr	r0, [pc, #32]	; (d5b84 <_GLOBAL__sub_I_SystemMode+0x3b8>)
   d5b62:	f005 fee0 	bl	db926 <_ZN6StringC1EPK19__FlashStringHelper>
   d5b66:	4a03      	ldr	r2, [pc, #12]	; (d5b74 <_GLOBAL__sub_I_SystemMode+0x3a8>)
   d5b68:	4907      	ldr	r1, [pc, #28]	; (d5b88 <_GLOBAL__sub_I_SystemMode+0x3bc>)
   d5b6a:	4806      	ldr	r0, [pc, #24]	; (d5b84 <_GLOBAL__sub_I_SystemMode+0x3b8>)
   d5b6c:	f006 fa58 	bl	dc020 <__aeabi_atexit>
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
}
   d5b70:	b012      	add	sp, #72	; 0x48
   d5b72:	bd70      	pop	{r4, r5, r6, pc}
   d5b74:	2003d454 	.word	0x2003d454
   d5b78:	000d4281 	.word	0x000d4281
   d5b7c:	2003dacc 	.word	0x2003dacc
   d5b80:	000df9a7 	.word	0x000df9a7
   d5b84:	2003d9d8 	.word	0x2003d9d8
   d5b88:	000db899 	.word	0x000db899

000d5b8c <_ZN9MicroNMEA13isEndOfFieldsEc>:
	}


protected:
	static inline bool isEndOfFields(char c) {
		return c == '*' || c == '\0' || c == '\r' || c == '\n';
   d5b8c:	282a      	cmp	r0, #42	; 0x2a
   d5b8e:	d007      	beq.n	d5ba0 <_ZN9MicroNMEA13isEndOfFieldsEc+0x14>
   d5b90:	b130      	cbz	r0, d5ba0 <_ZN9MicroNMEA13isEndOfFieldsEc+0x14>
   d5b92:	280d      	cmp	r0, #13
   d5b94:	d004      	beq.n	d5ba0 <_ZN9MicroNMEA13isEndOfFieldsEc+0x14>
   d5b96:	f1a0 030a 	sub.w	r3, r0, #10
   d5b9a:	4258      	negs	r0, r3
   d5b9c:	4158      	adcs	r0, r3
   d5b9e:	4770      	bx	lr
   d5ba0:	2001      	movs	r0, #1
	}
   d5ba2:	4770      	bx	lr

000d5ba4 <_ZN9MicroNMEA9skipFieldEPKc>:

}


const char* MicroNMEA::skipField(const char* s)
{
   d5ba4:	b570      	push	{r4, r5, r6, lr}
	if (s == nullptr)
   d5ba6:	b190      	cbz	r0, d5bce <_ZN9MicroNMEA9skipFieldEPKc+0x2a>
   d5ba8:	4604      	mov	r4, r0
   d5baa:	4625      	mov	r5, r4
		return nullptr;

	while (!isEndOfFields(*s)) {
   d5bac:	f814 6b01 	ldrb.w	r6, [r4], #1
   d5bb0:	4630      	mov	r0, r6
   d5bb2:	f7ff ffeb 	bl	d5b8c <_ZN9MicroNMEA13isEndOfFieldsEc>
   d5bb6:	b948      	cbnz	r0, d5bcc <_ZN9MicroNMEA9skipFieldEPKc+0x28>
		if (*s == ',') {
   d5bb8:	2e2c      	cmp	r6, #44	; 0x2c
   d5bba:	d1f6      	bne.n	d5baa <_ZN9MicroNMEA9skipFieldEPKc+0x6>
			// Check next character
			if (isEndOfFields(*++s))
   d5bbc:	7868      	ldrb	r0, [r5, #1]
   d5bbe:	f7ff ffe5 	bl	d5b8c <_ZN9MicroNMEA13isEndOfFieldsEc>
				break;
			else
				return s;
   d5bc2:	2800      	cmp	r0, #0
   d5bc4:	bf0c      	ite	eq
   d5bc6:	4620      	moveq	r0, r4
   d5bc8:	2000      	movne	r0, #0
   d5bca:	bd70      	pop	{r4, r5, r6, pc}
		}
		++s;
	}
	return nullptr; // End of string or valid sentence
   d5bcc:	2000      	movs	r0, #0
}
   d5bce:	bd70      	pop	{r4, r5, r6, pc}

000d5bd0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>:


unsigned int MicroNMEA::parseUnsignedInt(const char *s, uint8_t len)
{
   d5bd0:	b510      	push	{r4, lr}
	int r = 0;
   d5bd2:	2300      	movs	r3, #0
	while (len--)
		r = 10 * r + *s++ - '0';
   d5bd4:	240a      	movs	r4, #10


unsigned int MicroNMEA::parseUnsignedInt(const char *s, uint8_t len)
{
	int r = 0;
	while (len--)
   d5bd6:	3901      	subs	r1, #1
   d5bd8:	b2c9      	uxtb	r1, r1
   d5bda:	29ff      	cmp	r1, #255	; 0xff
   d5bdc:	d005      	beq.n	d5bea <_ZN9MicroNMEA16parseUnsignedIntEPKch+0x1a>
		r = 10 * r + *s++ - '0';
   d5bde:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5be2:	fb04 2303 	mla	r3, r4, r3, r2
   d5be6:	3b30      	subs	r3, #48	; 0x30


unsigned int MicroNMEA::parseUnsignedInt(const char *s, uint8_t len)
{
	int r = 0;
	while (len--)
   d5be8:	e7f5      	b.n	d5bd6 <_ZN9MicroNMEA16parseUnsignedIntEPKch+0x6>
		r = 10 * r + *s++ - '0';
	return r;
}
   d5bea:	4618      	mov	r0, r3
   d5bec:	bd10      	pop	{r4, pc}

000d5bee <_ZN9MicroNMEA10parseFloatEPKchPS1_>:


long MicroNMEA::parseFloat(const char* s, uint8_t log10Multiplier, const char** eptr)
{
   d5bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5bf2:	460c      	mov	r4, r1
   d5bf4:	4616      	mov	r6, r2
   d5bf6:	4607      	mov	r7, r0
	int8_t neg = 1;
	long r = 0;
	while (isspace(*s))
   d5bf8:	f897 8000 	ldrb.w	r8, [r7]
   d5bfc:	4640      	mov	r0, r8
   d5bfe:	463d      	mov	r5, r7
   d5c00:	3701      	adds	r7, #1
   d5c02:	f007 f879 	bl	dccf8 <isspace>
   d5c06:	2800      	cmp	r0, #0
   d5c08:	d1f6      	bne.n	d5bf8 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xa>
		++s;
	if (*s == '-') {
   d5c0a:	f1b8 0f2d 	cmp.w	r8, #45	; 0x2d
   d5c0e:	d103      	bne.n	d5c18 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x2a>
		neg = -1;
		++s;
   d5c10:	463d      	mov	r5, r7
	int8_t neg = 1;
	long r = 0;
	while (isspace(*s))
		++s;
	if (*s == '-') {
		neg = -1;
   d5c12:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   d5c16:	e005      	b.n	d5c24 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x36>
		++s;
	}
	else if (*s == '+')
		++s;
   d5c18:	f1b8 0f2b 	cmp.w	r8, #43	; 0x2b
   d5c1c:	bf08      	it	eq
   d5c1e:	463d      	moveq	r5, r7
   d5c20:	f04f 0e01 	mov.w	lr, #1
}


long MicroNMEA::parseFloat(const char* s, uint8_t log10Multiplier, const char** eptr)
{
	int8_t neg = 1;
   d5c24:	2200      	movs	r2, #0
	}
	else if (*s == '+')
		++s;

	while (isdigit(*s))
		r = 10*r + *s++ - '0';
   d5c26:	230a      	movs	r3, #10
		++s;
	}
	else if (*s == '+')
		++s;

	while (isdigit(*s))
   d5c28:	782f      	ldrb	r7, [r5, #0]
   d5c2a:	f1a7 0130 	sub.w	r1, r7, #48	; 0x30
   d5c2e:	2909      	cmp	r1, #9
   d5c30:	4628      	mov	r0, r5
   d5c32:	f105 0501 	add.w	r5, r5, #1
   d5c36:	d903      	bls.n	d5c40 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x52>
   d5c38:	4621      	mov	r1, r4
   d5c3a:	2301      	movs	r3, #1

static long exp10(uint8_t b)
{
	long r = 1;
	while (b--)
		r *= 10;
   d5c3c:	250a      	movs	r5, #10
   d5c3e:	e003      	b.n	d5c48 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x5a>
	}
	else if (*s == '+')
		++s;

	while (isdigit(*s))
		r = 10*r + *s++ - '0';
   d5c40:	fb03 7202 	mla	r2, r3, r2, r7
   d5c44:	3a30      	subs	r2, #48	; 0x30
		++s;
	}
	else if (*s == '+')
		++s;

	while (isdigit(*s))
   d5c46:	e7ef      	b.n	d5c28 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x3a>


static long exp10(uint8_t b)
{
	long r = 1;
	while (b--)
   d5c48:	3901      	subs	r1, #1
   d5c4a:	b2c9      	uxtb	r1, r1
   d5c4c:	29ff      	cmp	r1, #255	; 0xff
   d5c4e:	d001      	beq.n	d5c54 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x66>
		r *= 10;
   d5c50:	436b      	muls	r3, r5
   d5c52:	e7f9      	b.n	d5c48 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x5a>

	while (isdigit(*s))
		r = 10*r + *s++ - '0';
	r *= exp10(log10Multiplier);

	if (*s == '.') {
   d5c54:	2f2e      	cmp	r7, #46	; 0x2e
	else if (*s == '+')
		++s;

	while (isdigit(*s))
		r = 10*r + *s++ - '0';
	r *= exp10(log10Multiplier);
   d5c56:	fb03 f302 	mul.w	r3, r3, r2

	if (*s == '.') {
   d5c5a:	d11e      	bne.n	d5c9a <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xac>
   d5c5c:	1c45      	adds	r5, r0, #1
		++s;
		long frac = 0;
   d5c5e:	2200      	movs	r2, #0
		while (isdigit(*s) && log10Multiplier) {
			frac = 10 * frac + *s++ -'0';
   d5c60:	270a      	movs	r7, #10
	r *= exp10(log10Multiplier);

	if (*s == '.') {
		++s;
		long frac = 0;
		while (isdigit(*s) && log10Multiplier) {
   d5c62:	7829      	ldrb	r1, [r5, #0]
   d5c64:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
   d5c68:	f1bc 0f09 	cmp.w	ip, #9
   d5c6c:	4628      	mov	r0, r5
   d5c6e:	f105 0501 	add.w	r5, r5, #1
   d5c72:	d902      	bls.n	d5c7a <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x8c>
   d5c74:	2501      	movs	r5, #1

static long exp10(uint8_t b)
{
	long r = 1;
	while (b--)
		r *= 10;
   d5c76:	270a      	movs	r7, #10
   d5c78:	e006      	b.n	d5c88 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x9a>
	r *= exp10(log10Multiplier);

	if (*s == '.') {
		++s;
		long frac = 0;
		while (isdigit(*s) && log10Multiplier) {
   d5c7a:	b15c      	cbz	r4, d5c94 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xa6>
			frac = 10 * frac + *s++ -'0';
   d5c7c:	fb07 1202 	mla	r2, r7, r2, r1
			--log10Multiplier;
   d5c80:	3c01      	subs	r4, #1

	if (*s == '.') {
		++s;
		long frac = 0;
		while (isdigit(*s) && log10Multiplier) {
			frac = 10 * frac + *s++ -'0';
   d5c82:	3a30      	subs	r2, #48	; 0x30
			--log10Multiplier;
   d5c84:	b2e4      	uxtb	r4, r4
	r *= exp10(log10Multiplier);

	if (*s == '.') {
		++s;
		long frac = 0;
		while (isdigit(*s) && log10Multiplier) {
   d5c86:	e7ec      	b.n	d5c62 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x74>


static long exp10(uint8_t b)
{
	long r = 1;
	while (b--)
   d5c88:	3c01      	subs	r4, #1
   d5c8a:	b2e4      	uxtb	r4, r4
   d5c8c:	2cff      	cmp	r4, #255	; 0xff
   d5c8e:	d002      	beq.n	d5c96 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xa8>
		r *= 10;
   d5c90:	437d      	muls	r5, r7
   d5c92:	e7f9      	b.n	d5c88 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x9a>
   d5c94:	2501      	movs	r5, #1
		while (isdigit(*s) && log10Multiplier) {
			frac = 10 * frac + *s++ -'0';
			--log10Multiplier;
		}
		frac *= exp10(log10Multiplier);
		r += frac;
   d5c96:	fb05 3302 	mla	r3, r5, r2, r3
	}
	r *= neg; // Include effect of any minus sign
   d5c9a:	fb03 f40e 	mul.w	r4, r3, lr

	if (eptr)
   d5c9e:	b116      	cbz	r6, d5ca6 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xb8>
		*eptr = skipField(s);
   d5ca0:	f7ff ff80 	bl	d5ba4 <_ZN9MicroNMEA9skipFieldEPKc>
   d5ca4:	6030      	str	r0, [r6, #0]

	return r;
}
   d5ca6:	4620      	mov	r0, r4
   d5ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5cac <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>:


long MicroNMEA::parseDegreeMinute(const char* s, uint8_t degWidth,
								  const char **eptr)
{
   d5cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (*s == ',') {
   d5cae:	7803      	ldrb	r3, [r0, #0]
   d5cb0:	2b2c      	cmp	r3, #44	; 0x2c
}


long MicroNMEA::parseDegreeMinute(const char* s, uint8_t degWidth,
								  const char **eptr)
{
   d5cb2:	4606      	mov	r6, r0
   d5cb4:	460f      	mov	r7, r1
   d5cb6:	4614      	mov	r4, r2
	if (*s == ',') {
   d5cb8:	d105      	bne.n	d5cc6 <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_+0x1a>
		if (eptr)
   d5cba:	b112      	cbz	r2, d5cc2 <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_+0x16>
			*eptr = skipField(s);
   d5cbc:	f7ff ff72 	bl	d5ba4 <_ZN9MicroNMEA9skipFieldEPKc>
   d5cc0:	6020      	str	r0, [r4, #0]
   d5cc2:	2000      	movs	r0, #0
   d5cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
	}
	long r = parseUnsignedInt(s, degWidth) * 1000000L;
   d5cc6:	f7ff ff83 	bl	d5bd0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
   d5cca:	4d06      	ldr	r5, [pc, #24]	; (d5ce4 <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_+0x38>)
	s += degWidth;
	r += parseFloat(s, 6, eptr) / 60;
   d5ccc:	4622      	mov	r2, r4
	if (*s == ',') {
		if (eptr)
			*eptr = skipField(s);
		return 0;
	}
	long r = parseUnsignedInt(s, degWidth) * 1000000L;
   d5cce:	4345      	muls	r5, r0
	s += degWidth;
	r += parseFloat(s, 6, eptr) / 60;
   d5cd0:	2106      	movs	r1, #6
   d5cd2:	19f0      	adds	r0, r6, r7
   d5cd4:	f7ff ff8b 	bl	d5bee <_ZN9MicroNMEA10parseFloatEPKchPS1_>
   d5cd8:	223c      	movs	r2, #60	; 0x3c
   d5cda:	fb90 f0f2 	sdiv	r0, r0, r2
   d5cde:	4428      	add	r0, r5
	return r;
   d5ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5ce2:	bf00      	nop
   d5ce4:	000f4240 	.word	0x000f4240

000d5ce8 <_ZN9MicroNMEA10parseFieldEPKcPci>:
}


const char* MicroNMEA::parseField(const char* s, char *result, int len)
{
   d5ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5cec:	460c      	mov	r4, r1
   d5cee:	4691      	mov	r9, r2
	if (s == nullptr)
   d5cf0:	b910      	cbnz	r0, d5cf8 <_ZN9MicroNMEA10parseFieldEPKcPci+0x10>
		return nullptr;
   d5cf2:	2000      	movs	r0, #0
   d5cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5cf8:	4606      	mov	r6, r0
}


const char* MicroNMEA::parseField(const char* s, char *result, int len)
{
	if (s == nullptr)
   d5cfa:	2500      	movs	r5, #0
   d5cfc:	4637      	mov	r7, r6
		return nullptr;

	int i = 0;
	while (*s != ',' && !isEndOfFields(*s)) {
   d5cfe:	f816 8b01 	ldrb.w	r8, [r6], #1
   d5d02:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   d5d06:	d011      	beq.n	d5d2c <_ZN9MicroNMEA10parseFieldEPKcPci+0x44>
   d5d08:	4640      	mov	r0, r8
   d5d0a:	f7ff ff3f 	bl	d5b8c <_ZN9MicroNMEA13isEndOfFieldsEc>
   d5d0e:	b9c0      	cbnz	r0, d5d42 <_ZN9MicroNMEA10parseFieldEPKcPci+0x5a>
		if (result && i++ < len)
   d5d10:	b154      	cbz	r4, d5d28 <_ZN9MicroNMEA10parseFieldEPKcPci+0x40>
   d5d12:	454d      	cmp	r5, r9
   d5d14:	f105 0301 	add.w	r3, r5, #1
   d5d18:	db01      	blt.n	d5d1e <_ZN9MicroNMEA10parseFieldEPKcPci+0x36>
   d5d1a:	461d      	mov	r5, r3
   d5d1c:	e004      	b.n	d5d28 <_ZN9MicroNMEA10parseFieldEPKcPci+0x40>
			*result++ = *s;
   d5d1e:	f884 8000 	strb.w	r8, [r4]
   d5d22:	3401      	adds	r4, #1
{
	if (s == nullptr)
		return nullptr;

	int i = 0;
	while (*s != ',' && !isEndOfFields(*s)) {
   d5d24:	461d      	mov	r5, r3
   d5d26:	e7e9      	b.n	d5cfc <_ZN9MicroNMEA10parseFieldEPKcPci+0x14>
   d5d28:	462b      	mov	r3, r5
   d5d2a:	e7fb      	b.n	d5d24 <_ZN9MicroNMEA10parseFieldEPKcPci+0x3c>
		if (result && i++ < len)
			*result++ = *s;
		++s;
	}
	if (result && i < len)
   d5d2c:	b134      	cbz	r4, d5d3c <_ZN9MicroNMEA10parseFieldEPKcPci+0x54>
   d5d2e:	454d      	cmp	r5, r9
		*result = '\0'; // Terminate unless too long
   d5d30:	bfbc      	itt	lt
   d5d32:	2300      	movlt	r3, #0
   d5d34:	7023      	strblt	r3, [r4, #0]

	if (*s == ',')
   d5d36:	783b      	ldrb	r3, [r7, #0]
   d5d38:	2b2c      	cmp	r3, #44	; 0x2c
   d5d3a:	d1da      	bne.n	d5cf2 <_ZN9MicroNMEA10parseFieldEPKcPci+0xa>
		return ++s; // Location of start of next field
   d5d3c:	1c78      	adds	r0, r7, #1
   d5d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	while (*s != ',' && !isEndOfFields(*s)) {
		if (result && i++ < len)
			*result++ = *s;
		++s;
	}
	if (result && i < len)
   d5d42:	2c00      	cmp	r4, #0
   d5d44:	d1f3      	bne.n	d5d2e <_ZN9MicroNMEA10parseFieldEPKcPci+0x46>
   d5d46:	e7d4      	b.n	d5cf2 <_ZN9MicroNMEA10parseFieldEPKcPci+0xa>

000d5d48 <_ZN9MicroNMEA16generateChecksumEPKcPc>:
		return nullptr; // End of string or valid sentence
}


const char* MicroNMEA::generateChecksum(const char* s, char* checksum)
{
   d5d48:	b510      	push	{r4, lr}
	uint8_t c = 0;
	// Initial $ is omitted from checksum, if present ignore it.
	if (*s == '$')
   d5d4a:	7803      	ldrb	r3, [r0, #0]
   d5d4c:	2b24      	cmp	r3, #36	; 0x24
		++s;
   d5d4e:	bf08      	it	eq
   d5d50:	3001      	addeq	r0, #1
   d5d52:	4602      	mov	r2, r0
		return nullptr; // End of string or valid sentence
}


const char* MicroNMEA::generateChecksum(const char* s, char* checksum)
{
   d5d54:	2300      	movs	r3, #0
   d5d56:	4610      	mov	r0, r2
	uint8_t c = 0;
	// Initial $ is omitted from checksum, if present ignore it.
	if (*s == '$')
		++s;

	while (*s != '\0' && *s != '*')
   d5d58:	f812 4b01 	ldrb.w	r4, [r2], #1
   d5d5c:	b11c      	cbz	r4, d5d66 <_ZN9MicroNMEA16generateChecksumEPKcPc+0x1e>
   d5d5e:	2c2a      	cmp	r4, #42	; 0x2a
   d5d60:	d001      	beq.n	d5d66 <_ZN9MicroNMEA16generateChecksumEPKcPc+0x1e>
		c ^= *s++;
   d5d62:	4063      	eors	r3, r4
	uint8_t c = 0;
	// Initial $ is omitted from checksum, if present ignore it.
	if (*s == '$')
		++s;

	while (*s != '\0' && *s != '*')
   d5d64:	e7f7      	b.n	d5d56 <_ZN9MicroNMEA16generateChecksumEPKcPc+0xe>
		c ^= *s++;

	if (checksum) {
   d5d66:	b169      	cbz	r1, d5d84 <_ZN9MicroNMEA16generateChecksumEPKcPc+0x3c>
		checksum[0] = toHex(c / 16);
   d5d68:	091a      	lsrs	r2, r3, #4
}


static char toHex(uint8_t nibble)
{
	if (nibble >= 10)
   d5d6a:	2a09      	cmp	r2, #9
	while (*s != '\0' && *s != '*')
		c ^= *s++;

	if (checksum) {
		checksum[0] = toHex(c / 16);
		checksum[1] = toHex(c % 16);
   d5d6c:	f003 030f 	and.w	r3, r3, #15


static char toHex(uint8_t nibble)
{
	if (nibble >= 10)
		return nibble + 'A' - 10;
   d5d70:	bf8c      	ite	hi
   d5d72:	3237      	addhi	r2, #55	; 0x37
	else
		return nibble + '0';
   d5d74:	3230      	addls	r2, #48	; 0x30
}


static char toHex(uint8_t nibble)
{
	if (nibble >= 10)
   d5d76:	2b09      	cmp	r3, #9
		return nibble + 'A' - 10;
	else
		return nibble + '0';
   d5d78:	b2d2      	uxtb	r2, r2


static char toHex(uint8_t nibble)
{
	if (nibble >= 10)
		return nibble + 'A' - 10;
   d5d7a:	bf8c      	ite	hi
   d5d7c:	3337      	addhi	r3, #55	; 0x37
	else
		return nibble + '0';
   d5d7e:	3330      	addls	r3, #48	; 0x30

	while (*s != '\0' && *s != '*')
		c ^= *s++;

	if (checksum) {
		checksum[0] = toHex(c / 16);
   d5d80:	700a      	strb	r2, [r1, #0]
		checksum[1] = toHex(c % 16);
   d5d82:	704b      	strb	r3, [r1, #1]
	}
	return s;
}
   d5d84:	bd10      	pop	{r4, pc}

000d5d86 <_ZN9MicroNMEA12testChecksumEPKc>:


bool MicroNMEA::testChecksum(const char* s)
{
   d5d86:	b507      	push	{r0, r1, r2, lr}
	char checksum[2];
	const char* p = generateChecksum(s, checksum);
   d5d88:	a901      	add	r1, sp, #4
   d5d8a:	f7ff ffdd 	bl	d5d48 <_ZN9MicroNMEA16generateChecksumEPKcPc>
	return *p == '*' && p[1] == checksum[0] && p[2] == checksum[1];
   d5d8e:	7803      	ldrb	r3, [r0, #0]
   d5d90:	2b2a      	cmp	r3, #42	; 0x2a
   d5d92:	d10b      	bne.n	d5dac <_ZN9MicroNMEA12testChecksumEPKc+0x26>
   d5d94:	7842      	ldrb	r2, [r0, #1]
   d5d96:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5d9a:	429a      	cmp	r2, r3
   d5d9c:	d106      	bne.n	d5dac <_ZN9MicroNMEA12testChecksumEPKc+0x26>
   d5d9e:	7883      	ldrb	r3, [r0, #2]
   d5da0:	f89d 0005 	ldrb.w	r0, [sp, #5]
   d5da4:	1a1b      	subs	r3, r3, r0
   d5da6:	4258      	negs	r0, r3
   d5da8:	4158      	adcs	r0, r3
   d5daa:	e000      	b.n	d5dae <_ZN9MicroNMEA12testChecksumEPKc+0x28>
   d5dac:	2000      	movs	r0, #0
}
   d5dae:	b003      	add	sp, #12
   d5db0:	f85d fb04 	ldr.w	pc, [sp], #4

000d5db4 <_ZN9MicroNMEA9setBufferEPvh>:
}


void MicroNMEA::setBuffer(void* buf, uint8_t len)
{
	_bufferLen = len;
   d5db4:	7002      	strb	r2, [r0, #0]
	_buffer = (char*)buf;
   d5db6:	6041      	str	r1, [r0, #4]
	_ptr = _buffer;
   d5db8:	6081      	str	r1, [r0, #8]
	if (_bufferLen) {
   d5dba:	b132      	cbz	r2, d5dca <_ZN9MicroNMEA9setBufferEPvh+0x16>
		*_ptr = '\0';
   d5dbc:	2200      	movs	r2, #0
   d5dbe:	700a      	strb	r2, [r1, #0]
		_buffer[_bufferLen - 1] = '\0';
   d5dc0:	7803      	ldrb	r3, [r0, #0]
   d5dc2:	6841      	ldr	r1, [r0, #4]
   d5dc4:	440b      	add	r3, r1
   d5dc6:	f803 2c01 	strb.w	r2, [r3, #-1]
   d5dca:	4770      	bx	lr

000d5dcc <_ZN9MicroNMEA5clearEv>:

void MicroNMEA::clear(void)
{
	_navSystem = '\0';
	_numSat = 0;
	_hdop = 255;
   d5dcc:	22ff      	movs	r2, #255	; 0xff
   d5dce:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
	_isValid = false;
	_latitude = 999000000L;
   d5dd2:	4a0f      	ldr	r2, [pc, #60]	; (d5e10 <_ZN9MicroNMEA5clearEv+0x44>)
   d5dd4:	6182      	str	r2, [r0, #24]
	_longitude = 999000000L;
   d5dd6:	61c2      	str	r2, [r0, #28]
	_altitude = _speed = _course = LONG_MIN;
   d5dd8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
}


void MicroNMEA::clear(void)
{
	_navSystem = '\0';
   d5ddc:	2300      	movs	r3, #0
	_numSat = 0;
	_hdop = 255;
	_isValid = false;
	_latitude = 999000000L;
	_longitude = 999000000L;
	_altitude = _speed = _course = LONG_MIN;
   d5dde:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5de0:	6282      	str	r2, [r0, #40]	; 0x28
   d5de2:	6202      	str	r2, [r0, #32]
	_altitudeValid = false;
	_year = _month = _day = 0;
	_hour = _minute = _second = 99;
   d5de4:	2263      	movs	r2, #99	; 0x63
}


void MicroNMEA::clear(void)
{
	_navSystem = '\0';
   d5de6:	74c3      	strb	r3, [r0, #19]
	_numSat = 0;
   d5de8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	_hdop = 255;
	_isValid = false;
   d5dec:	7503      	strb	r3, [r0, #20]
	_latitude = 999000000L;
	_longitude = 999000000L;
	_altitude = _speed = _course = LONG_MIN;
	_altitudeValid = false;
   d5dee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	_year = _month = _day = 0;
   d5df2:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
   d5df6:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   d5dfa:	8603      	strh	r3, [r0, #48]	; 0x30
	_hour = _minute = _second = 99;
   d5dfc:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
   d5e00:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
   d5e04:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
	_hundredths = 0;
   d5e08:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
   d5e0c:	4770      	bx	lr
   d5e0e:	bf00      	nop
   d5e10:	3b8b87c0 	.word	0x3b8b87c0

000d5e14 <_ZN9MicroNMEAC1EPvh>:
	setBuffer(nullptr, 0);
	clear();
}


MicroNMEA::MicroNMEA(void* buf, uint8_t len) :
   d5e14:	b538      	push	{r3, r4, r5, lr}
	_talkerID('\0'),
	_messageID{0},
	_badChecksumHandler(nullptr),
	_unknownSentenceHandler(nullptr)
   d5e16:	2300      	movs	r3, #0
   d5e18:	7303      	strb	r3, [r0, #12]
   d5e1a:	f8c0 300d 	str.w	r3, [r0, #13]
   d5e1e:	f8a0 3011 	strh.w	r3, [r0, #17]
   d5e22:	63c3      	str	r3, [r0, #60]	; 0x3c
   d5e24:	6403      	str	r3, [r0, #64]	; 0x40
{
	setBuffer(buf, len);
   d5e26:	f7ff ffc5 	bl	d5db4 <_ZN9MicroNMEA9setBufferEPvh>
	clear();
   d5e2a:	f7ff ffcf 	bl	d5dcc <_ZN9MicroNMEA5clearEv>
}
   d5e2e:	bd38      	pop	{r3, r4, r5, pc}

000d5e30 <_ZN9MicroNMEA9parseTimeEPKc>:
	return false;
}


const char* MicroNMEA::parseTime(const char* s)
{
   d5e30:	b538      	push	{r3, r4, r5, lr}
	if (*s == ',')
   d5e32:	780b      	ldrb	r3, [r1, #0]
   d5e34:	2b2c      	cmp	r3, #44	; 0x2c
	return false;
}


const char* MicroNMEA::parseTime(const char* s)
{
   d5e36:	4605      	mov	r5, r0
   d5e38:	460c      	mov	r4, r1
	if (*s == ',')
   d5e3a:	d101      	bne.n	d5e40 <_ZN9MicroNMEA9parseTimeEPKc+0x10>
		return skipField(s);
   d5e3c:	4608      	mov	r0, r1
   d5e3e:	e019      	b.n	d5e74 <_ZN9MicroNMEA9parseTimeEPKc+0x44>
	_hour = parseUnsignedInt(s, 2);
   d5e40:	2102      	movs	r1, #2
   d5e42:	4620      	mov	r0, r4
   d5e44:	f7ff fec4 	bl	d5bd0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_minute = parseUnsignedInt(s + 2, 2);
   d5e48:	2102      	movs	r1, #2

const char* MicroNMEA::parseTime(const char* s)
{
	if (*s == ',')
		return skipField(s);
	_hour = parseUnsignedInt(s, 2);
   d5e4a:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
	_minute = parseUnsignedInt(s + 2, 2);
   d5e4e:	1860      	adds	r0, r4, r1
   d5e50:	f7ff febe 	bl	d5bd0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_second = parseUnsignedInt(s + 4, 2);
   d5e54:	2102      	movs	r1, #2
const char* MicroNMEA::parseTime(const char* s)
{
	if (*s == ',')
		return skipField(s);
	_hour = parseUnsignedInt(s, 2);
	_minute = parseUnsignedInt(s + 2, 2);
   d5e56:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
	_second = parseUnsignedInt(s + 4, 2);
   d5e5a:	1d20      	adds	r0, r4, #4
   d5e5c:	f7ff feb8 	bl	d5bd0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_hundredths = parseUnsignedInt(s + 7, 2);
   d5e60:	2102      	movs	r1, #2
{
	if (*s == ',')
		return skipField(s);
	_hour = parseUnsignedInt(s, 2);
	_minute = parseUnsignedInt(s + 2, 2);
	_second = parseUnsignedInt(s + 4, 2);
   d5e62:	f885 0036 	strb.w	r0, [r5, #54]	; 0x36
	_hundredths = parseUnsignedInt(s + 7, 2);
   d5e66:	1de0      	adds	r0, r4, #7
   d5e68:	f7ff feb2 	bl	d5bd0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
   d5e6c:	f885 0037 	strb.w	r0, [r5, #55]	; 0x37
	return skipField(s + 9);
   d5e70:	f104 0009 	add.w	r0, r4, #9
}
   d5e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return skipField(s);
	_hour = parseUnsignedInt(s, 2);
	_minute = parseUnsignedInt(s + 2, 2);
	_second = parseUnsignedInt(s + 4, 2);
	_hundredths = parseUnsignedInt(s + 7, 2);
	return skipField(s + 9);
   d5e78:	f7ff be94 	b.w	d5ba4 <_ZN9MicroNMEA9skipFieldEPKc>

000d5e7c <_ZN9MicroNMEA9parseDateEPKc>:
}


const char* MicroNMEA::parseDate(const char* s)
{
   d5e7c:	b538      	push	{r3, r4, r5, lr}
	if (*s == ',')
   d5e7e:	780b      	ldrb	r3, [r1, #0]
   d5e80:	2b2c      	cmp	r3, #44	; 0x2c
	return skipField(s + 9);
}


const char* MicroNMEA::parseDate(const char* s)
{
   d5e82:	4605      	mov	r5, r0
   d5e84:	460c      	mov	r4, r1
	if (*s == ',')
   d5e86:	d101      	bne.n	d5e8c <_ZN9MicroNMEA9parseDateEPKc+0x10>
		return skipField(s);
   d5e88:	4608      	mov	r0, r1
   d5e8a:	e013      	b.n	d5eb4 <_ZN9MicroNMEA9parseDateEPKc+0x38>
	_day = parseUnsignedInt(s, 2);
   d5e8c:	2102      	movs	r1, #2
   d5e8e:	4620      	mov	r0, r4
   d5e90:	f7ff fe9e 	bl	d5bd0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_month = parseUnsignedInt(s + 2, 2);
   d5e94:	2102      	movs	r1, #2

const char* MicroNMEA::parseDate(const char* s)
{
	if (*s == ',')
		return skipField(s);
	_day = parseUnsignedInt(s, 2);
   d5e96:	f885 0033 	strb.w	r0, [r5, #51]	; 0x33
	_month = parseUnsignedInt(s + 2, 2);
   d5e9a:	1860      	adds	r0, r4, r1
   d5e9c:	f7ff fe98 	bl	d5bd0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_year = parseUnsignedInt(s + 4, 2) + 2000;
   d5ea0:	2102      	movs	r1, #2
const char* MicroNMEA::parseDate(const char* s)
{
	if (*s == ',')
		return skipField(s);
	_day = parseUnsignedInt(s, 2);
	_month = parseUnsignedInt(s + 2, 2);
   d5ea2:	f885 0032 	strb.w	r0, [r5, #50]	; 0x32
	_year = parseUnsignedInt(s + 4, 2) + 2000;
   d5ea6:	1d20      	adds	r0, r4, #4
   d5ea8:	f7ff fe92 	bl	d5bd0 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
   d5eac:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5eb0:	8628      	strh	r0, [r5, #48]	; 0x30
	return skipField(s + 6);
   d5eb2:	1da0      	adds	r0, r4, #6
}
   d5eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (*s == ',')
		return skipField(s);
	_day = parseUnsignedInt(s, 2);
	_month = parseUnsignedInt(s + 2, 2);
	_year = parseUnsignedInt(s + 4, 2) + 2000;
	return skipField(s + 6);
   d5eb8:	f7ff be74 	b.w	d5ba4 <_ZN9MicroNMEA9skipFieldEPKc>

000d5ebc <_ZN9MicroNMEA10processGGAEPKc>:
}


bool MicroNMEA::processGGA(const char *s)
{
   d5ebc:	b513      	push	{r0, r1, r4, lr}
	// If GxGSV messages are received _talker_ID can be changed after
	// other MicroNMEA sentences. Compatibility modes can set the talker ID
	// to indicate GPS regardless of actual navigation system used.
	_navSystem = _talkerID;
   d5ebe:	7b03      	ldrb	r3, [r0, #12]
   d5ec0:	74c3      	strb	r3, [r0, #19]
	return skipField(s + 6);
}


bool MicroNMEA::processGGA(const char *s)
{
   d5ec2:	4604      	mov	r4, r0
   d5ec4:	9101      	str	r1, [sp, #4]
	// If GxGSV messages are received _talker_ID can be changed after
	// other MicroNMEA sentences. Compatibility modes can set the talker ID
	// to indicate GPS regardless of actual navigation system used.
	_navSystem = _talkerID;

	s = parseTime(s);
   d5ec6:	f7ff ffb3 	bl	d5e30 <_ZN9MicroNMEA9parseTimeEPKc>
   d5eca:	9001      	str	r0, [sp, #4]
	if (s == nullptr)
   d5ecc:	b908      	cbnz	r0, d5ed2 <_ZN9MicroNMEA10processGGAEPKc+0x16>
		return false;
   d5ece:	2000      	movs	r0, #0
   d5ed0:	e056      	b.n	d5f80 <_ZN9MicroNMEA10processGGAEPKc+0xc4>
	// ++s;
	_latitude = parseDegreeMinute(s, 2, &s);
   d5ed2:	aa01      	add	r2, sp, #4
   d5ed4:	2102      	movs	r1, #2
   d5ed6:	f7ff fee9 	bl	d5cac <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>
	if (s == nullptr)
   d5eda:	9b01      	ldr	r3, [sp, #4]

	s = parseTime(s);
	if (s == nullptr)
		return false;
	// ++s;
	_latitude = parseDegreeMinute(s, 2, &s);
   d5edc:	61a0      	str	r0, [r4, #24]
	if (s == nullptr)
   d5ede:	2b00      	cmp	r3, #0
   d5ee0:	d0f5      	beq.n	d5ece <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	if (*s == ',')
   d5ee2:	781a      	ldrb	r2, [r3, #0]
   d5ee4:	2a2c      	cmp	r2, #44	; 0x2c
   d5ee6:	d101      	bne.n	d5eec <_ZN9MicroNMEA10processGGAEPKc+0x30>
		++s;
   d5ee8:	3301      	adds	r3, #1
   d5eea:	e004      	b.n	d5ef6 <_ZN9MicroNMEA10processGGAEPKc+0x3a>
	else {
		if (*s == 'S')
   d5eec:	2a53      	cmp	r2, #83	; 0x53
			_latitude *= -1;
   d5eee:	bf04      	itt	eq
   d5ef0:	4240      	negeq	r0, r0
   d5ef2:	61a0      	streq	r0, [r4, #24]
		s += 2; // Skip N/S and comma
   d5ef4:	3302      	adds	r3, #2
   d5ef6:	9301      	str	r3, [sp, #4]
	}
	_longitude = parseDegreeMinute(s, 3, &s);
   d5ef8:	aa01      	add	r2, sp, #4
   d5efa:	2103      	movs	r1, #3
   d5efc:	9801      	ldr	r0, [sp, #4]
   d5efe:	f7ff fed5 	bl	d5cac <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>
	if (s == nullptr)
   d5f02:	9b01      	ldr	r3, [sp, #4]
	else {
		if (*s == 'S')
			_latitude *= -1;
		s += 2; // Skip N/S and comma
	}
	_longitude = parseDegreeMinute(s, 3, &s);
   d5f04:	61e0      	str	r0, [r4, #28]
	if (s == nullptr)
   d5f06:	2b00      	cmp	r3, #0
   d5f08:	d0e1      	beq.n	d5ece <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	if (*s == ',')
   d5f0a:	781a      	ldrb	r2, [r3, #0]
   d5f0c:	2a2c      	cmp	r2, #44	; 0x2c
   d5f0e:	d101      	bne.n	d5f14 <_ZN9MicroNMEA10processGGAEPKc+0x58>
		++s;
   d5f10:	3301      	adds	r3, #1
   d5f12:	e004      	b.n	d5f1e <_ZN9MicroNMEA10processGGAEPKc+0x62>
	else {
		if (*s == 'W')
   d5f14:	2a57      	cmp	r2, #87	; 0x57
			_longitude *= -1;
   d5f16:	bf04      	itt	eq
   d5f18:	4240      	negeq	r0, r0
   d5f1a:	61e0      	streq	r0, [r4, #28]
		s += 2; // Skip E/W and comma
   d5f1c:	3302      	adds	r3, #2
   d5f1e:	9301      	str	r3, [sp, #4]
	}
	_isValid = (*s >= '1' && *s <= '5');
   d5f20:	9801      	ldr	r0, [sp, #4]
   d5f22:	f810 3b02 	ldrb.w	r3, [r0], #2
	s += 2; // Skip position fix flag and comma
   d5f26:	9001      	str	r0, [sp, #4]
	else {
		if (*s == 'W')
			_longitude *= -1;
		s += 2; // Skip E/W and comma
	}
	_isValid = (*s >= '1' && *s <= '5');
   d5f28:	3b31      	subs	r3, #49	; 0x31
   d5f2a:	2b04      	cmp	r3, #4
   d5f2c:	bf8c      	ite	hi
   d5f2e:	2300      	movhi	r3, #0
   d5f30:	2301      	movls	r3, #1
   d5f32:	7523      	strb	r3, [r4, #20]
	s += 2; // Skip position fix flag and comma
	long tmp = parseFloat(s, 0, &s);
   d5f34:	aa01      	add	r2, sp, #4
   d5f36:	2100      	movs	r1, #0
   d5f38:	f7ff fe59 	bl	d5bee <_ZN9MicroNMEA10parseFloatEPKchPS1_>
	_numSat = (tmp > 255 ? 255 : (tmp < 0 ? 0 : tmp));
   d5f3c:	28ff      	cmp	r0, #255	; 0xff
   d5f3e:	bfda      	itte	le
   d5f40:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
   d5f44:	b2c0      	uxtble	r0, r0
   d5f46:	20ff      	movgt	r0, #255	; 0xff
   d5f48:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	if (s == nullptr)
   d5f4c:	9801      	ldr	r0, [sp, #4]
   d5f4e:	2800      	cmp	r0, #0
   d5f50:	d0bd      	beq.n	d5ece <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	tmp = parseFloat(s, 1, &s);
   d5f52:	aa01      	add	r2, sp, #4
   d5f54:	2101      	movs	r1, #1
   d5f56:	f7ff fe4a 	bl	d5bee <_ZN9MicroNMEA10parseFloatEPKchPS1_>
	_hdop = (tmp > 255 || tmp < 0 ? 255 : tmp);
   d5f5a:	28ff      	cmp	r0, #255	; 0xff
   d5f5c:	bf28      	it	cs
   d5f5e:	20ff      	movcs	r0, #255	; 0xff
   d5f60:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	if (s == nullptr)
   d5f64:	9801      	ldr	r0, [sp, #4]
   d5f66:	2800      	cmp	r0, #0
   d5f68:	d0b1      	beq.n	d5ece <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	_altitude = parseFloat(s, 3, &s);
   d5f6a:	aa01      	add	r2, sp, #4
   d5f6c:	2103      	movs	r1, #3
   d5f6e:	f7ff fe3e 	bl	d5bee <_ZN9MicroNMEA10parseFloatEPKchPS1_>
	if (s == nullptr)
   d5f72:	9b01      	ldr	r3, [sp, #4]
		return false;
	tmp = parseFloat(s, 1, &s);
	_hdop = (tmp > 255 || tmp < 0 ? 255 : tmp);
	if (s == nullptr)
		return false;
	_altitude = parseFloat(s, 3, &s);
   d5f74:	6220      	str	r0, [r4, #32]
	if (s == nullptr)
   d5f76:	2b00      	cmp	r3, #0
   d5f78:	d0a9      	beq.n	d5ece <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	_altitudeValid = true;
   d5f7a:	2001      	movs	r0, #1
   d5f7c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	// That's all we care about
	return true;
}
   d5f80:	b002      	add	sp, #8
   d5f82:	bd10      	pop	{r4, pc}

000d5f84 <_ZN9MicroNMEA10processRMCEPKc>:


bool MicroNMEA::processRMC(const char* s)
{
   d5f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// If GxGSV messages are received _talker_ID can be changed after
	// other MicroNMEA sentences. Compatibility modes can set the talker
	// ID to indicate GPS regardless of actual navigation system used.
	_navSystem = _talkerID;
   d5f86:	7b03      	ldrb	r3, [r0, #12]
   d5f88:	74c3      	strb	r3, [r0, #19]
	return true;
}


bool MicroNMEA::processRMC(const char* s)
{
   d5f8a:	4604      	mov	r4, r0
   d5f8c:	9101      	str	r1, [sp, #4]
	// If GxGSV messages are received _talker_ID can be changed after
	// other MicroNMEA sentences. Compatibility modes can set the talker
	// ID to indicate GPS regardless of actual navigation system used.
	_navSystem = _talkerID;

	s = parseTime(s);
   d5f8e:	f7ff ff4f 	bl	d5e30 <_ZN9MicroNMEA9parseTimeEPKc>
   d5f92:	9001      	str	r0, [sp, #4]
	if (s == nullptr)
   d5f94:	b908      	cbnz	r0, d5f9a <_ZN9MicroNMEA10processRMCEPKc+0x16>
		return false;
   d5f96:	2000      	movs	r0, #0
   d5f98:	e045      	b.n	d6026 <_ZN9MicroNMEA10processRMCEPKc+0xa2>
	_isValid = (*s == 'A');
   d5f9a:	f810 3b02 	ldrb.w	r3, [r0], #2
	s += 2; // Skip validity and comma
   d5f9e:	ad02      	add	r5, sp, #8
	_navSystem = _talkerID;

	s = parseTime(s);
	if (s == nullptr)
		return false;
	_isValid = (*s == 'A');
   d5fa0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   d5fa4:	4253      	negs	r3, r2
	s += 2; // Skip validity and comma
   d5fa6:	f845 0d04 	str.w	r0, [r5, #-4]!
	_navSystem = _talkerID;

	s = parseTime(s);
	if (s == nullptr)
		return false;
	_isValid = (*s == 'A');
   d5faa:	4153      	adcs	r3, r2
   d5fac:	7523      	strb	r3, [r4, #20]
	s += 2; // Skip validity and comma
	_latitude = parseDegreeMinute(s, 2, &s);
   d5fae:	462a      	mov	r2, r5
   d5fb0:	2102      	movs	r1, #2
   d5fb2:	f7ff fe7b 	bl	d5cac <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>
	if (s == nullptr)
   d5fb6:	9b01      	ldr	r3, [sp, #4]
	s = parseTime(s);
	if (s == nullptr)
		return false;
	_isValid = (*s == 'A');
	s += 2; // Skip validity and comma
	_latitude = parseDegreeMinute(s, 2, &s);
   d5fb8:	61a0      	str	r0, [r4, #24]
	if (s == nullptr)
   d5fba:	2b00      	cmp	r3, #0
   d5fbc:	d0eb      	beq.n	d5f96 <_ZN9MicroNMEA10processRMCEPKc+0x12>
		return false;
	if (*s == ',')
   d5fbe:	781a      	ldrb	r2, [r3, #0]
   d5fc0:	2a2c      	cmp	r2, #44	; 0x2c
   d5fc2:	d101      	bne.n	d5fc8 <_ZN9MicroNMEA10processRMCEPKc+0x44>
		++s;
   d5fc4:	3301      	adds	r3, #1
   d5fc6:	e004      	b.n	d5fd2 <_ZN9MicroNMEA10processRMCEPKc+0x4e>
	else {
		if (*s == 'S')
   d5fc8:	2a53      	cmp	r2, #83	; 0x53
			_latitude *= -1;
   d5fca:	bf04      	itt	eq
   d5fcc:	4240      	negeq	r0, r0
   d5fce:	61a0      	streq	r0, [r4, #24]
		s += 2; // Skip N/S and comma
   d5fd0:	3302      	adds	r3, #2
   d5fd2:	9301      	str	r3, [sp, #4]
	}
	_longitude = parseDegreeMinute(s, 3, &s);
   d5fd4:	462a      	mov	r2, r5
   d5fd6:	2103      	movs	r1, #3
   d5fd8:	9801      	ldr	r0, [sp, #4]
   d5fda:	f7ff fe67 	bl	d5cac <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>
	if (s == nullptr)
   d5fde:	9b01      	ldr	r3, [sp, #4]
	else {
		if (*s == 'S')
			_latitude *= -1;
		s += 2; // Skip N/S and comma
	}
	_longitude = parseDegreeMinute(s, 3, &s);
   d5fe0:	61e0      	str	r0, [r4, #28]
	if (s == nullptr)
   d5fe2:	2b00      	cmp	r3, #0
   d5fe4:	d0d7      	beq.n	d5f96 <_ZN9MicroNMEA10processRMCEPKc+0x12>
		return false;
	if (*s == ',')
   d5fe6:	781a      	ldrb	r2, [r3, #0]
   d5fe8:	2a2c      	cmp	r2, #44	; 0x2c
   d5fea:	d101      	bne.n	d5ff0 <_ZN9MicroNMEA10processRMCEPKc+0x6c>
		++s;
   d5fec:	3301      	adds	r3, #1
   d5fee:	e004      	b.n	d5ffa <_ZN9MicroNMEA10processRMCEPKc+0x76>
	else {
		if (*s == 'W')
   d5ff0:	2a57      	cmp	r2, #87	; 0x57
			_longitude *= -1;
   d5ff2:	bf04      	itt	eq
   d5ff4:	4240      	negeq	r0, r0
   d5ff6:	61e0      	streq	r0, [r4, #28]
		s += 2; // Skip E/W and comma
   d5ff8:	3302      	adds	r3, #2
   d5ffa:	9301      	str	r3, [sp, #4]
	}
	_speed = parseFloat(s, 3, &s);
   d5ffc:	462a      	mov	r2, r5
   d5ffe:	2103      	movs	r1, #3
   d6000:	9801      	ldr	r0, [sp, #4]
   d6002:	f7ff fdf4 	bl	d5bee <_ZN9MicroNMEA10parseFloatEPKchPS1_>
   d6006:	62a0      	str	r0, [r4, #40]	; 0x28
	if (s == nullptr)
   d6008:	9801      	ldr	r0, [sp, #4]
   d600a:	2800      	cmp	r0, #0
   d600c:	d0c3      	beq.n	d5f96 <_ZN9MicroNMEA10processRMCEPKc+0x12>
		return false;
	_course = parseFloat(s, 3, &s);
   d600e:	2103      	movs	r1, #3
   d6010:	462a      	mov	r2, r5
   d6012:	f7ff fdec 	bl	d5bee <_ZN9MicroNMEA10parseFloatEPKchPS1_>
	if (s == nullptr)
   d6016:	9901      	ldr	r1, [sp, #4]
		s += 2; // Skip E/W and comma
	}
	_speed = parseFloat(s, 3, &s);
	if (s == nullptr)
		return false;
	_course = parseFloat(s, 3, &s);
   d6018:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (s == nullptr)
   d601a:	2900      	cmp	r1, #0
   d601c:	d0bb      	beq.n	d5f96 <_ZN9MicroNMEA10processRMCEPKc+0x12>
		return false;
	s = parseDate(s);
   d601e:	4620      	mov	r0, r4
   d6020:	f7ff ff2c 	bl	d5e7c <_ZN9MicroNMEA9parseDateEPKc>
	// That's all we care about
	return true;
   d6024:	2001      	movs	r0, #1
}
   d6026:	b003      	add	sp, #12
   d6028:	bd30      	pop	{r4, r5, pc}
	...

000d602c <_ZN9MicroNMEA7processEc>:
	_hundredths = 0;
}


bool MicroNMEA::process(char c)
{
   d602c:	b570      	push	{r4, r5, r6, lr}
	if (_buffer == nullptr || _bufferLen == 0)
   d602e:	6843      	ldr	r3, [r0, #4]
	_hundredths = 0;
}


bool MicroNMEA::process(char c)
{
   d6030:	4604      	mov	r4, r0
	if (_buffer == nullptr || _bufferLen == 0)
   d6032:	b303      	cbz	r3, d6076 <_ZN9MicroNMEA7processEc+0x4a>
   d6034:	7803      	ldrb	r3, [r0, #0]
   d6036:	b1f3      	cbz	r3, d6076 <_ZN9MicroNMEA7processEc+0x4a>
		return false;
	if (c == '\0' || c == '\n' || c == '\r') {
   d6038:	290d      	cmp	r1, #13
   d603a:	6882      	ldr	r2, [r0, #8]
   d603c:	d811      	bhi.n	d6062 <_ZN9MicroNMEA7processEc+0x36>
   d603e:	f242 4301 	movw	r3, #9217	; 0x2401
   d6042:	40cb      	lsrs	r3, r1
   d6044:	f003 0301 	and.w	r3, r3, #1
   d6048:	f083 0601 	eor.w	r6, r3, #1
   d604c:	b14b      	cbz	r3, d6062 <_ZN9MicroNMEA7processEc+0x36>
		// Terminate buffer then reset pointer
		*_ptr = '\0';
   d604e:	7016      	strb	r6, [r2, #0]
		_ptr = _buffer;
   d6050:	6840      	ldr	r0, [r0, #4]
   d6052:	60a0      	str	r0, [r4, #8]

		if (*_buffer == '$' && testChecksum(_buffer)) {
   d6054:	7803      	ldrb	r3, [r0, #0]
   d6056:	2b24      	cmp	r3, #36	; 0x24
   d6058:	d10f      	bne.n	d607a <_ZN9MicroNMEA7processEc+0x4e>
   d605a:	f7ff fe94 	bl	d5d86 <_ZN9MicroNMEA12testChecksumEPKc>
   d605e:	b9c8      	cbnz	r0, d6094 <_ZN9MicroNMEA7processEc+0x68>
   d6060:	e00b      	b.n	d607a <_ZN9MicroNMEA7processEc+0x4e>
		}
		// Return true for a complete, non-empty, sentence (even if not a valid one).
		return *_buffer != '\0'; //
	}
	else {
		*_ptr = c;
   d6062:	7011      	strb	r1, [r2, #0]
		if (_ptr < &_buffer[_bufferLen - 1])
   d6064:	7823      	ldrb	r3, [r4, #0]
   d6066:	6861      	ldr	r1, [r4, #4]
   d6068:	68a2      	ldr	r2, [r4, #8]
   d606a:	3b01      	subs	r3, #1
   d606c:	440b      	add	r3, r1
   d606e:	429a      	cmp	r2, r3
			++_ptr;
   d6070:	bf3c      	itt	cc
   d6072:	3201      	addcc	r2, #1
   d6074:	60a2      	strcc	r2, [r4, #8]
	}

	return false;
   d6076:	2000      	movs	r0, #0
   d6078:	bd70      	pop	{r4, r5, r6, pc}
				return processRMC(data);
			else if (_unknownSentenceHandler)
				(*_unknownSentenceHandler)(*this);
		}
		else {
			if (_badChecksumHandler && *_buffer != '\0') // don't send empty buffers as bad checksums!
   d607a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d607c:	b123      	cbz	r3, d6088 <_ZN9MicroNMEA7processEc+0x5c>
   d607e:	6862      	ldr	r2, [r4, #4]
   d6080:	7812      	ldrb	r2, [r2, #0]
   d6082:	b10a      	cbz	r2, d6088 <_ZN9MicroNMEA7processEc+0x5c>
				(*_badChecksumHandler)(*this);
   d6084:	4620      	mov	r0, r4
   d6086:	4798      	blx	r3
		}
		// Return true for a complete, non-empty, sentence (even if not a valid one).
		return *_buffer != '\0'; //
   d6088:	6863      	ldr	r3, [r4, #4]
   d608a:	7818      	ldrb	r0, [r3, #0]
   d608c:	3000      	adds	r0, #0
   d608e:	bf18      	it	ne
   d6090:	2001      	movne	r0, #1
   d6092:	bd70      	pop	{r4, r5, r6, pc}
		_ptr = _buffer;

		if (*_buffer == '$' && testChecksum(_buffer)) {
			// Valid message
			const char* data;
			if (_buffer[1] == 'G') {
   d6094:	6860      	ldr	r0, [r4, #4]
   d6096:	7843      	ldrb	r3, [r0, #1]
   d6098:	2b47      	cmp	r3, #71	; 0x47
   d609a:	f104 050d 	add.w	r5, r4, #13
   d609e:	d105      	bne.n	d60ac <_ZN9MicroNMEA7processEc+0x80>
				_talkerID = _buffer[2];
   d60a0:	7883      	ldrb	r3, [r0, #2]
   d60a2:	7323      	strb	r3, [r4, #12]
				data = parseField(&_buffer[3], &_messageID[0], sizeof(_messageID));
   d60a4:	2206      	movs	r2, #6
   d60a6:	4629      	mov	r1, r5
   d60a8:	3003      	adds	r0, #3
   d60aa:	e003      	b.n	d60b4 <_ZN9MicroNMEA7processEc+0x88>
			}
			else {
				_talkerID = '\0';
   d60ac:	7326      	strb	r6, [r4, #12]
				data = parseField(&_buffer[1], &_messageID[0], sizeof(_messageID));
   d60ae:	2206      	movs	r2, #6
   d60b0:	4629      	mov	r1, r5
   d60b2:	3001      	adds	r0, #1
   d60b4:	f7ff fe18 	bl	d5ce8 <_ZN9MicroNMEA10parseFieldEPKcPci>
   d60b8:	4606      	mov	r6, r0
			}

			if (data != nullptr && strcmp(&_messageID[0], "GGA") == 0)
   d60ba:	b1a8      	cbz	r0, d60e8 <_ZN9MicroNMEA7processEc+0xbc>
   d60bc:	490c      	ldr	r1, [pc, #48]	; (d60f0 <_ZN9MicroNMEA7processEc+0xc4>)
   d60be:	4628      	mov	r0, r5
   d60c0:	f006 ffad 	bl	dd01e <strcmp>
   d60c4:	b928      	cbnz	r0, d60d2 <_ZN9MicroNMEA7processEc+0xa6>
				return processGGA(data);
   d60c6:	4631      	mov	r1, r6
   d60c8:	4620      	mov	r0, r4
		if (_ptr < &_buffer[_bufferLen - 1])
			++_ptr;
	}

	return false;
}
   d60ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				_talkerID = '\0';
				data = parseField(&_buffer[1], &_messageID[0], sizeof(_messageID));
			}

			if (data != nullptr && strcmp(&_messageID[0], "GGA") == 0)
				return processGGA(data);
   d60ce:	f7ff bef5 	b.w	d5ebc <_ZN9MicroNMEA10processGGAEPKc>
			else if (data != nullptr && strcmp(&_messageID[0], "RMC") == 0)
   d60d2:	4908      	ldr	r1, [pc, #32]	; (d60f4 <_ZN9MicroNMEA7processEc+0xc8>)
   d60d4:	4628      	mov	r0, r5
   d60d6:	f006 ffa2 	bl	dd01e <strcmp>
   d60da:	b928      	cbnz	r0, d60e8 <_ZN9MicroNMEA7processEc+0xbc>
				return processRMC(data);
   d60dc:	4631      	mov	r1, r6
   d60de:	4620      	mov	r0, r4
		if (_ptr < &_buffer[_bufferLen - 1])
			++_ptr;
	}

	return false;
}
   d60e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			}

			if (data != nullptr && strcmp(&_messageID[0], "GGA") == 0)
				return processGGA(data);
			else if (data != nullptr && strcmp(&_messageID[0], "RMC") == 0)
				return processRMC(data);
   d60e4:	f7ff bf4e 	b.w	d5f84 <_ZN9MicroNMEA10processRMCEPKc>
			else if (_unknownSentenceHandler)
   d60e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d60ea:	2b00      	cmp	r3, #0
   d60ec:	d1ca      	bne.n	d6084 <_ZN9MicroNMEA7processEc+0x58>
   d60ee:	e7cb      	b.n	d6088 <_ZN9MicroNMEA7processEc+0x5c>
   d60f0:	000df9a8 	.word	0x000df9a8
   d60f4:	000df9ac 	.word	0x000df9ac

000d60f8 <_GLOBAL__sub_I__ZN9MicroNMEA9skipFieldEPKc>:
   d60f8:	f001 bebe 	b.w	d7e78 <HAL_Pin_Map>

000d60fc <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d60fc:	f001 bebc 	b.w	d7e78 <HAL_Pin_Map>

000d6100 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d6100:	b510      	push	{r4, lr}
   d6102:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6104:	3024      	adds	r0, #36	; 0x24
   d6106:	f000 ff9a 	bl	d703e <_ZN8FatCache4syncEv>
   d610a:	b128      	cbz	r0, d6118 <_ZN9FatVolume9cacheSyncEv+0x18>
   d610c:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d6110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6114:	f000 bf93 	b.w	d703e <_ZN8FatCache4syncEv>
  }
   d6118:	bd10      	pop	{r4, pc}

000d611a <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d611a:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d611c:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d611e:	f043 0304 	orr.w	r3, r3, #4
   d6122:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6124:	f100 0210 	add.w	r2, r0, #16
   d6128:	6880      	ldr	r0, [r0, #8]
   d612a:	f001 b83e 	b.w	d71aa <_ZN9FatVolume15allocateClusterEmPm>
	...

000d6130 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6134:	7803      	ldrb	r3, [r0, #0]
   d6136:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d613a:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d613c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d6140:	b10b      	cbz	r3, d6146 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d6142:	2600      	movs	r6, #0
   d6144:	e02e      	b.n	d61a4 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d6146:	6942      	ldr	r2, [r0, #20]
   d6148:	4b18      	ldr	r3, [pc, #96]	; (d61ac <_ZN7FatFile13addDirClusterEv+0x7c>)
   d614a:	429a      	cmp	r2, r3
   d614c:	d8f9      	bhi.n	d6142 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d614e:	f7ff ffe4 	bl	d611a <_ZN7FatFile10addClusterEv>
   d6152:	4606      	mov	r6, r0
   d6154:	2800      	cmp	r0, #0
   d6156:	d0f4      	beq.n	d6142 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d6158:	6921      	ldr	r1, [r4, #16]
   d615a:	68a0      	ldr	r0, [r4, #8]
   d615c:	f000 ffba 	bl	d70d4 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6160:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6162:	68a0      	ldr	r0, [r4, #8]
   d6164:	2205      	movs	r2, #5
   d6166:	4639      	mov	r1, r7
   d6168:	3024      	adds	r0, #36	; 0x24
   d616a:	f000 ff8f 	bl	d708c <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d616e:	4680      	mov	r8, r0
   d6170:	2800      	cmp	r0, #0
   d6172:	d0e6      	beq.n	d6142 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d6174:	4629      	mov	r1, r5
   d6176:	f44f 7200 	mov.w	r2, #512	; 0x200
   d617a:	f006 fef8 	bl	dcf6e <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d617e:	2501      	movs	r5, #1
   d6180:	68a3      	ldr	r3, [r4, #8]
   d6182:	791a      	ldrb	r2, [r3, #4]
   d6184:	42aa      	cmp	r2, r5
   d6186:	d909      	bls.n	d619c <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6188:	4642      	mov	r2, r8
   d618a:	19e9      	adds	r1, r5, r7
   d618c:	6818      	ldr	r0, [r3, #0]
   d618e:	f001 faff 	bl	d7790 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d6192:	2800      	cmp	r0, #0
   d6194:	d0d5      	beq.n	d6142 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6196:	3501      	adds	r5, #1
   d6198:	b2ed      	uxtb	r5, r5
   d619a:	e7f1      	b.n	d6180 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d619c:	6963      	ldr	r3, [r4, #20]
   d619e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d61a2:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d61a4:	4630      	mov	r0, r6
   d61a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d61aa:	bf00      	nop
   d61ac:	001ffdff 	.word	0x001ffdff

000d61b0 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d61b0:	b510      	push	{r4, lr}
   d61b2:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d61b4:	6880      	ldr	r0, [r0, #8]
   d61b6:	460a      	mov	r2, r1
   d61b8:	3024      	adds	r0, #36	; 0x24
   d61ba:	69a1      	ldr	r1, [r4, #24]
   d61bc:	f000 ff66 	bl	d708c <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d61c0:	b120      	cbz	r0, d61cc <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d61c2:	88a3      	ldrh	r3, [r4, #4]
   d61c4:	f003 030f 	and.w	r3, r3, #15
   d61c8:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d61cc:	bd10      	pop	{r4, pc}

000d61ce <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d61ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   d61d0:	2400      	movs	r4, #0
   d61d2:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d61d4:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d61d6:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d61d8:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d61da:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d61de:	2a20      	cmp	r2, #32
   d61e0:	d018      	beq.n	d6214 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d61e2:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d61e4:	bf02      	ittt	eq
   d61e6:	54cf      	strbeq	r7, [r1, r3]
   d61e8:	1c5a      	addeq	r2, r3, #1
   d61ea:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d61ec:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d61ee:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d61f2:	bf08      	it	eq
   d61f4:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d61f6:	f1be 0f19 	cmp.w	lr, #25
   d61fa:	d806      	bhi.n	d620a <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d61fc:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d6200:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d6204:	bf1c      	itt	ne
   d6206:	3220      	addne	r2, #32
   d6208:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d620a:	f103 0e01 	add.w	lr, r3, #1
   d620e:	54ca      	strb	r2, [r1, r3]
   d6210:	fa5f f38e 	uxtb.w	r3, lr
   d6214:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d6216:	2c0b      	cmp	r4, #11
   d6218:	d1df      	bne.n	d61da <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d621a:	2200      	movs	r2, #0
   d621c:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d621e:	4618      	mov	r0, r3
   d6220:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6222 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6222:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d6224:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6226:	4605      	mov	r5, r0
   d6228:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d622a:	b984      	cbnz	r4, d624e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d622c:	2224      	movs	r2, #36	; 0x24
   d622e:	4621      	mov	r1, r4
   d6230:	f006 fe9d 	bl	dcf6e <memset>

  m_vol = vol;
   d6234:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d6236:	79f3      	ldrb	r3, [r6, #7]
   d6238:	2b10      	cmp	r3, #16
   d623a:	d003      	beq.n	d6244 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d623c:	2b20      	cmp	r3, #32
   d623e:	d106      	bne.n	d624e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d6240:	2340      	movs	r3, #64	; 0x40
   d6242:	e000      	b.n	d6246 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d6244:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d6246:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d6248:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d624a:	70a8      	strb	r0, [r5, #2]
   d624c:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d624e:	2000      	movs	r0, #0
   d6250:	bd70      	pop	{r4, r5, r6, pc}

000d6252 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d6252:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6256:	7803      	ldrb	r3, [r0, #0]
   d6258:	4604      	mov	r4, r0
   d625a:	4689      	mov	r9, r1
   d625c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d625e:	b14b      	cbz	r3, d6274 <_ZN7FatFile4readEPvj+0x22>
   d6260:	7882      	ldrb	r2, [r0, #2]
   d6262:	07d1      	lsls	r1, r2, #31
   d6264:	d506      	bpl.n	d6274 <_ZN7FatFile4readEPvj+0x22>
   d6266:	e00c      	b.n	d6282 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6268:	465a      	mov	r2, fp
   d626a:	6921      	ldr	r1, [r4, #16]
   d626c:	f000 ff38 	bl	d70e0 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d6270:	2800      	cmp	r0, #0
   d6272:	da3d      	bge.n	d62f0 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d6274:	7863      	ldrb	r3, [r4, #1]
   d6276:	f043 0302 	orr.w	r3, r3, #2
   d627a:	7063      	strb	r3, [r4, #1]
  return -1;
   d627c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6280:	e097      	b.n	d63b2 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d6282:	071a      	lsls	r2, r3, #28
   d6284:	d503      	bpl.n	d628e <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d6286:	69e3      	ldr	r3, [r4, #28]
   d6288:	6962      	ldr	r2, [r4, #20]
   d628a:	1a9b      	subs	r3, r3, r2
   d628c:	e007      	b.n	d629e <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d628e:	069a      	lsls	r2, r3, #26
   d6290:	d508      	bpl.n	d62a4 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d6292:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d6294:	891a      	ldrh	r2, [r3, #8]
   d6296:	6963      	ldr	r3, [r4, #20]
   d6298:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d629c:	b29b      	uxth	r3, r3
   d629e:	429d      	cmp	r5, r3
   d62a0:	bf28      	it	cs
   d62a2:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d62a4:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d62a6:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d62aa:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d62ae:	2e00      	cmp	r6, #0
   d62b0:	d035      	beq.n	d631e <_ZN7FatFile4readEPvj+0xcc>
   d62b2:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d62b4:	6963      	ldr	r3, [r4, #20]
   d62b6:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d62b8:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d62bc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d62c0:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d62c4:	d002      	beq.n	d62cc <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d62c6:	6a03      	ldr	r3, [r0, #32]
   d62c8:	4419      	add	r1, r3
   d62ca:	e01d      	b.n	d6308 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d62cc:	f890 8005 	ldrb.w	r8, [r0, #5]
   d62d0:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d62d4:	f1ba 0f00 	cmp.w	sl, #0
   d62d8:	d110      	bne.n	d62fc <_ZN7FatFile4readEPvj+0xaa>
   d62da:	f1b8 0f00 	cmp.w	r8, #0
   d62de:	d10d      	bne.n	d62fc <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d62e0:	2b00      	cmp	r3, #0
   d62e2:	d1c1      	bne.n	d6268 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d62e4:	0653      	lsls	r3, r2, #25
   d62e6:	bf4c      	ite	mi
   d62e8:	6a03      	ldrmi	r3, [r0, #32]
   d62ea:	6a23      	ldrpl	r3, [r4, #32]
   d62ec:	6123      	str	r3, [r4, #16]
   d62ee:	e005      	b.n	d62fc <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d62f0:	d104      	bne.n	d62fc <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d62f2:	7823      	ldrb	r3, [r4, #0]
   d62f4:	f013 0f70 	tst.w	r3, #112	; 0x70
   d62f8:	d111      	bne.n	d631e <_ZN7FatFile4readEPvj+0xcc>
   d62fa:	e7bb      	b.n	d6274 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d62fc:	6921      	ldr	r1, [r4, #16]
   d62fe:	68a0      	ldr	r0, [r4, #8]
   d6300:	f000 fee8 	bl	d70d4 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6304:	eb08 0100 	add.w	r1, r8, r0
   d6308:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d630a:	f1ba 0f00 	cmp.w	sl, #0
   d630e:	d135      	bne.n	d637c <_ZN7FatFile4readEPvj+0x12a>
   d6310:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6314:	d332      	bcc.n	d637c <_ZN7FatFile4readEPvj+0x12a>
   d6316:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6318:	4299      	cmp	r1, r3
   d631a:	d102      	bne.n	d6322 <_ZN7FatFile4readEPvj+0xd0>
   d631c:	e02e      	b.n	d637c <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d631e:	1ba8      	subs	r0, r5, r6
   d6320:	e047      	b.n	d63b2 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d6322:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6326:	d31b      	bcc.n	d6360 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d6328:	7822      	ldrb	r2, [r4, #0]
   d632a:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d632c:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d6330:	d406      	bmi.n	d6340 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d6332:	7902      	ldrb	r2, [r0, #4]
   d6334:	ebc8 0202 	rsb	r2, r8, r2
   d6338:	b2d2      	uxtb	r2, r2
   d633a:	4592      	cmp	sl, r2
   d633c:	bf28      	it	cs
   d633e:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6340:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d6342:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6346:	d207      	bcs.n	d6358 <_ZN7FatFile4readEPvj+0x106>
   d6348:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d634a:	4653      	mov	r3, sl
   d634c:	464a      	mov	r2, r9
   d634e:	6800      	ldr	r0, [r0, #0]
   d6350:	f001 f9dc 	bl	d770c <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d6354:	b960      	cbnz	r0, d6370 <_ZN7FatFile4readEPvj+0x11e>
   d6356:	e78d      	b.n	d6274 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6358:	4453      	add	r3, sl
   d635a:	4299      	cmp	r1, r3
   d635c:	d321      	bcc.n	d63a2 <_ZN7FatFile4readEPvj+0x150>
   d635e:	e7f3      	b.n	d6348 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6360:	464a      	mov	r2, r9
   d6362:	6800      	ldr	r0, [r0, #0]
   d6364:	f001 f98a 	bl	d767c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d6368:	2800      	cmp	r0, #0
   d636a:	d083      	beq.n	d6274 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d636c:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d6370:	6963      	ldr	r3, [r4, #20]
   d6372:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d6374:	44b9      	add	r9, r7
    m_curPosition += n;
   d6376:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d6378:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d637a:	e798      	b.n	d62ae <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d637c:	2200      	movs	r2, #0
   d637e:	3024      	adds	r0, #36	; 0x24
   d6380:	f000 fe84 	bl	d708c <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d6384:	2800      	cmp	r0, #0
   d6386:	f43f af75 	beq.w	d6274 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d638a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d638e:	42b7      	cmp	r7, r6
   d6390:	bf28      	it	cs
   d6392:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d6394:	eb00 010a 	add.w	r1, r0, sl
   d6398:	463a      	mov	r2, r7
   d639a:	4648      	mov	r0, r9
   d639c:	f006 fdc1 	bl	dcf22 <memcpy>
   d63a0:	e7e6      	b.n	d6370 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d63a2:	3024      	adds	r0, #36	; 0x24
   d63a4:	9101      	str	r1, [sp, #4]
   d63a6:	f000 fe4a 	bl	d703e <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d63aa:	9901      	ldr	r1, [sp, #4]
   d63ac:	2800      	cmp	r0, #0
   d63ae:	d1cb      	bne.n	d6348 <_ZN7FatFile4readEPvj+0xf6>
   d63b0:	e760      	b.n	d6274 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d63b2:	b003      	add	sp, #12
   d63b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d63b8 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d63b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d63ba:	2201      	movs	r2, #1
   d63bc:	f10d 0107 	add.w	r1, sp, #7
   d63c0:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d63c2:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d63c4:	6905      	ldr	r5, [r0, #16]
   d63c6:	f7ff ff44 	bl	d6252 <_ZN7FatFile4readEPvj>
   d63ca:	2801      	cmp	r0, #1
   d63cc:	bf05      	ittet	eq
   d63ce:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d63d2:	6166      	streq	r6, [r4, #20]
   d63d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curCluster = pos->cluster;
   d63d8:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d63da:	b002      	add	sp, #8
   d63dc:	bd70      	pop	{r4, r5, r6, pc}

000d63de <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d63de:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d63e0:	6943      	ldr	r3, [r0, #20]
   d63e2:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d63e6:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d63e8:	b105      	cbz	r5, d63ec <_ZN7FatFile12readDirCacheEb+0xe>
   d63ea:	b969      	cbnz	r1, d6408 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d63ec:	2201      	movs	r2, #1
   d63ee:	f10d 0107 	add.w	r1, sp, #7
   d63f2:	4620      	mov	r0, r4
   d63f4:	f7ff ff2d 	bl	d6252 <_ZN7FatFile4readEPvj>
   d63f8:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d63fa:	2801      	cmp	r0, #1
   d63fc:	d001      	beq.n	d6402 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d63fe:	2000      	movs	r0, #0
   d6400:	e008      	b.n	d6414 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d6402:	6963      	ldr	r3, [r4, #20]
   d6404:	331f      	adds	r3, #31
   d6406:	e000      	b.n	d640a <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d6408:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d640a:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d640c:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d640e:	3030      	adds	r0, #48	; 0x30
   d6410:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d6414:	b003      	add	sp, #12
   d6416:	bd30      	pop	{r4, r5, pc}

000d6418 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d641c:	460e      	mov	r6, r1
   d641e:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d6420:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6422:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d6424:	2900      	cmp	r1, #0
   d6426:	d039      	beq.n	d649c <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d6428:	6945      	ldr	r5, [r0, #20]
   d642a:	42b5      	cmp	r5, r6
   d642c:	d03a      	beq.n	d64a4 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d642e:	b90e      	cbnz	r6, d6434 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d6430:	6106      	str	r6, [r0, #16]
    goto done;
   d6432:	e031      	b.n	d6498 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d6434:	070b      	lsls	r3, r1, #28
   d6436:	d503      	bpl.n	d6440 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d6438:	69c3      	ldr	r3, [r0, #28]
   d643a:	429e      	cmp	r6, r3
   d643c:	d82e      	bhi.n	d649c <_ZN7FatFile7seekSetEm+0x84>
   d643e:	e007      	b.n	d6450 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d6440:	0688      	lsls	r0, r1, #26
   d6442:	d505      	bpl.n	d6450 <_ZN7FatFile7seekSetEm+0x38>
   d6444:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d6446:	891b      	ldrh	r3, [r3, #8]
   d6448:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d644c:	d826      	bhi.n	d649c <_ZN7FatFile7seekSetEm+0x84>
   d644e:	e023      	b.n	d6498 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6450:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d6454:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d6458:	1e6a      	subs	r2, r5, #1
   d645a:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d645e:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6460:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6462:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d6464:	429a      	cmp	r2, r3
   d6466:	d800      	bhi.n	d646a <_ZN7FatFile7seekSetEm+0x52>
   d6468:	b94d      	cbnz	r5, d647e <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d646a:	064a      	lsls	r2, r1, #25
   d646c:	bf4c      	ite	mi
   d646e:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d6472:	6a22      	ldrpl	r2, [r4, #32]
   d6474:	6122      	str	r2, [r4, #16]
   d6476:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6478:	f104 0810 	add.w	r8, r4, #16
   d647c:	e00a      	b.n	d6494 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d647e:	1a9b      	subs	r3, r3, r2
   d6480:	e7f9      	b.n	d6476 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6482:	4642      	mov	r2, r8
   d6484:	6921      	ldr	r1, [r4, #16]
   d6486:	68a0      	ldr	r0, [r4, #8]
   d6488:	f000 fe2a 	bl	d70e0 <_ZN9FatVolume6fatGetEmPm>
   d648c:	2800      	cmp	r0, #0
   d648e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   d6492:	dd03      	ble.n	d649c <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d6494:	2d00      	cmp	r5, #0
   d6496:	d1f4      	bne.n	d6482 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d6498:	6166      	str	r6, [r4, #20]
   d649a:	e003      	b.n	d64a4 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d649c:	6127      	str	r7, [r4, #16]
  return false;
   d649e:	2000      	movs	r0, #0
   d64a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d64a4:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d64a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d64aa <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d64aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64ac:	460f      	mov	r7, r1
   d64ae:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d64b0:	2100      	movs	r1, #0
   d64b2:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d64b4:	4604      	mov	r4, r0
   d64b6:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d64b8:	f006 fd59 	bl	dcf6e <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d64bc:	68b8      	ldr	r0, [r7, #8]
   d64be:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d64c0:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d64c4:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d64c6:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d64ca:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d64cc:	6a3b      	ldr	r3, [r7, #32]
   d64ce:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d64d0:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d64d2:	7acb      	ldrb	r3, [r1, #11]
   d64d4:	071d      	lsls	r5, r3, #28
   d64d6:	d44c      	bmi.n	d6572 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d64d8:	1883      	adds	r3, r0, r2
   d64da:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d64de:	f003 0317 	and.w	r3, r3, #23
   d64e2:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d64e4:	7ac9      	ldrb	r1, [r1, #11]
   d64e6:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d64ea:	bf04      	itt	eq
   d64ec:	f043 0308 	orreq.w	r3, r3, #8
   d64f0:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d64f2:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d64f6:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d64f8:	f006 0303 	and.w	r3, r6, #3
   d64fc:	2b01      	cmp	r3, #1
   d64fe:	d009      	beq.n	d6514 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d6500:	2b02      	cmp	r3, #2
   d6502:	d005      	beq.n	d6510 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d6504:	2b00      	cmp	r3, #0
   d6506:	d134      	bne.n	d6572 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d6508:	0571      	lsls	r1, r6, #21
   d650a:	d432      	bmi.n	d6572 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d650c:	2301      	movs	r3, #1
   d650e:	e002      	b.n	d6516 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d6510:	2303      	movs	r3, #3
   d6512:	e000      	b.n	d6516 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d6514:	2302      	movs	r3, #2
   d6516:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d6518:	78a1      	ldrb	r1, [r4, #2]
   d651a:	078b      	lsls	r3, r1, #30
   d651c:	d503      	bpl.n	d6526 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d651e:	7823      	ldrb	r3, [r4, #0]
   d6520:	f013 0f11 	tst.w	r3, #17
   d6524:	d125      	bne.n	d6572 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d6526:	b24b      	sxtb	r3, r1
   d6528:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d652c:	f006 0108 	and.w	r1, r6, #8
   d6530:	bf14      	ite	ne
   d6532:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d6536:	2700      	moveq	r7, #0
   d6538:	4319      	orrs	r1, r3
   d653a:	4339      	orrs	r1, r7
   d653c:	70a1      	strb	r1, [r4, #2]
   d653e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d6540:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d6542:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d6544:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d6546:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d654a:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d654e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d6552:	d504      	bpl.n	d655e <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d6554:	b181      	cbz	r1, d6578 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d6556:	f000 fe63 	bl	d7220 <_ZN9FatVolume9freeChainEm>
   d655a:	b968      	cbnz	r0, d6578 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d655c:	e009      	b.n	d6572 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d655e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d6560:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d6562:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d6564:	0473      	lsls	r3, r6, #17
   d6566:	d50c      	bpl.n	d6582 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d6568:	69e1      	ldr	r1, [r4, #28]
   d656a:	4620      	mov	r0, r4
   d656c:	f7ff ff54 	bl	d6418 <_ZN7FatFile7seekSetEm>
   d6570:	b938      	cbnz	r0, d6582 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d6572:	2000      	movs	r0, #0
   d6574:	7020      	strb	r0, [r4, #0]
  return false;
   d6576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d6578:	78a3      	ldrb	r3, [r4, #2]
   d657a:	f043 0304 	orr.w	r3, r3, #4
   d657e:	70a3      	strb	r3, [r4, #2]
   d6580:	e7f0      	b.n	d6564 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d6582:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d6584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6586 <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6586:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d658a:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d658c:	4606      	mov	r6, r0
   d658e:	460d      	mov	r5, r1
   d6590:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6592:	bb53      	cbnz	r3, d65ea <_ZN7FatFile8openNextEPS_i+0x64>
   d6594:	780b      	ldrb	r3, [r1, #0]
   d6596:	f013 0f70 	tst.w	r3, #112	; 0x70
   d659a:	d026      	beq.n	d65ea <_ZN7FatFile8openNextEPS_i+0x64>
   d659c:	694c      	ldr	r4, [r1, #20]
   d659e:	f014 041f 	ands.w	r4, r4, #31
   d65a2:	d122      	bne.n	d65ea <_ZN7FatFile8openNextEPS_i+0x64>
   d65a4:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d65a6:	2100      	movs	r1, #0
   d65a8:	4628      	mov	r0, r5
   d65aa:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d65ae:	f7ff ff16 	bl	d63de <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d65b2:	b1d0      	cbz	r0, d65ea <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d65b4:	7803      	ldrb	r3, [r0, #0]
   d65b6:	b1c3      	cbz	r3, d65ea <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d65b8:	2b2e      	cmp	r3, #46	; 0x2e
   d65ba:	d101      	bne.n	d65c0 <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d65bc:	2400      	movs	r4, #0
   d65be:	e7f2      	b.n	d65a6 <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d65c0:	2be5      	cmp	r3, #229	; 0xe5
   d65c2:	d0fb      	beq.n	d65bc <_ZN7FatFile8openNextEPS_i+0x36>
   d65c4:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d65c6:	f011 0f08 	tst.w	r1, #8
   d65ca:	d105      	bne.n	d65d8 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d65cc:	b17c      	cbz	r4, d65ee <_ZN7FatFile8openNextEPS_i+0x68>
   d65ce:	f000 f973 	bl	d68b8 <_ZN7FatFile11lfnChecksumEPh>
   d65d2:	4580      	cmp	r8, r0
   d65d4:	d109      	bne.n	d65ea <_ZN7FatFile8openNextEPS_i+0x64>
   d65d6:	e00a      	b.n	d65ee <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d65d8:	290f      	cmp	r1, #15
   d65da:	d1ef      	bne.n	d65bc <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d65dc:	0659      	lsls	r1, r3, #25
   d65de:	d5e2      	bpl.n	d65a6 <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d65e0:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d65e4:	f890 800d 	ldrb.w	r8, [r0, #13]
   d65e8:	e7dd      	b.n	d65a6 <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d65ea:	2000      	movs	r0, #0
   d65ec:	e007      	b.n	d65fe <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d65ee:	9400      	str	r4, [sp, #0]
   d65f0:	463b      	mov	r3, r7
   d65f2:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d65f6:	4629      	mov	r1, r5
   d65f8:	4630      	mov	r0, r6
   d65fa:	f7ff ff56 	bl	d64aa <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d65fe:	b003      	add	sp, #12
   d6600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6604 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6604:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d6606:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6608:	4604      	mov	r4, r0
  if (!isOpen()) {
   d660a:	b90b      	cbnz	r3, d6610 <_ZN7FatFile4syncEv+0xc>
    return true;
   d660c:	2001      	movs	r0, #1
   d660e:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d6610:	7883      	ldrb	r3, [r0, #2]
   d6612:	075a      	lsls	r2, r3, #29
   d6614:	d523      	bpl.n	d665e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6616:	2101      	movs	r1, #1
   d6618:	f7ff fdca 	bl	d61b0 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d661c:	4605      	mov	r5, r0
   d661e:	b928      	cbnz	r0, d662c <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d6620:	7863      	ldrb	r3, [r4, #1]
   d6622:	f043 0301 	orr.w	r3, r3, #1
   d6626:	7063      	strb	r3, [r4, #1]
  return false;
   d6628:	2000      	movs	r0, #0
   d662a:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d662c:	7803      	ldrb	r3, [r0, #0]
   d662e:	2be5      	cmp	r3, #229	; 0xe5
   d6630:	d0f6      	beq.n	d6620 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d6632:	7823      	ldrb	r3, [r4, #0]
   d6634:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d6636:	bf44      	itt	mi
   d6638:	69e3      	ldrmi	r3, [r4, #28]
   d663a:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d663c:	8c23      	ldrh	r3, [r4, #32]
   d663e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d6640:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d6642:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d6644:	4b09      	ldr	r3, [pc, #36]	; (d666c <_ZN7FatFile4syncEv+0x68>)
   d6646:	681b      	ldr	r3, [r3, #0]
   d6648:	b12b      	cbz	r3, d6656 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d664a:	f100 0116 	add.w	r1, r0, #22
   d664e:	3018      	adds	r0, #24
   d6650:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d6652:	8b2b      	ldrh	r3, [r5, #24]
   d6654:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d6656:	78a3      	ldrb	r3, [r4, #2]
   d6658:	f023 0304 	bic.w	r3, r3, #4
   d665c:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d665e:	68a0      	ldr	r0, [r4, #8]
   d6660:	f7ff fd4e 	bl	d6100 <_ZN9FatVolume9cacheSyncEv>
   d6664:	2800      	cmp	r0, #0
   d6666:	d0db      	beq.n	d6620 <_ZN7FatFile4syncEv+0x1c>
   d6668:	e7d0      	b.n	d660c <_ZN7FatFile4syncEv+0x8>
   d666a:	bf00      	nop
   d666c:	2003e310 	.word	0x2003e310

000d6670 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d6670:	b510      	push	{r4, lr}
   d6672:	4604      	mov	r4, r0
  bool rtn = sync();
   d6674:	f7ff ffc6 	bl	d6604 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d6678:	2300      	movs	r3, #0
   d667a:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d667c:	bd10      	pop	{r4, pc}

000d667e <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d667e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6680:	b093      	sub	sp, #76	; 0x4c
   d6682:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6684:	2300      	movs	r3, #0
   d6686:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d668a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d668e:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6690:	9201      	str	r2, [sp, #4]
   d6692:	4606      	mov	r6, r0
   d6694:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d6696:	b10b      	cbz	r3, d669c <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d6698:	2000      	movs	r0, #0
   d669a:	e03d      	b.n	d6718 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d669c:	780b      	ldrb	r3, [r1, #0]
   d669e:	f013 0f70 	tst.w	r3, #112	; 0x70
   d66a2:	d0f9      	beq.n	d6698 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d66a4:	7813      	ldrb	r3, [r2, #0]
   d66a6:	2b2f      	cmp	r3, #47	; 0x2f
   d66a8:	d112      	bne.n	d66d0 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d66aa:	9b01      	ldr	r3, [sp, #4]
   d66ac:	781a      	ldrb	r2, [r3, #0]
   d66ae:	2a2f      	cmp	r2, #47	; 0x2f
   d66b0:	d102      	bne.n	d66b8 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d66b2:	3301      	adds	r3, #1
   d66b4:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d66b6:	e7f8      	b.n	d66aa <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d66b8:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d66ba:	b91a      	cbnz	r2, d66c4 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d66bc:	4630      	mov	r0, r6
   d66be:	f7ff fdb0 	bl	d6222 <_ZN7FatFile8openRootEP9FatVolume>
   d66c2:	e029      	b.n	d6718 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d66c4:	a809      	add	r0, sp, #36	; 0x24
   d66c6:	f7ff fdac 	bl	d6222 <_ZN7FatFile8openRootEP9FatVolume>
   d66ca:	2800      	cmp	r0, #0
   d66cc:	d0e4      	beq.n	d6698 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d66ce:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d66d0:	aa01      	add	r2, sp, #4
   d66d2:	a903      	add	r1, sp, #12
   d66d4:	9801      	ldr	r0, [sp, #4]
   d66d6:	f000 f98f 	bl	d69f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d66da:	2800      	cmp	r0, #0
   d66dc:	d0dc      	beq.n	d6698 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d66de:	9b01      	ldr	r3, [sp, #4]
   d66e0:	781b      	ldrb	r3, [r3, #0]
   d66e2:	b19b      	cbz	r3, d670c <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d66e4:	2300      	movs	r3, #0
   d66e6:	aa03      	add	r2, sp, #12
   d66e8:	4621      	mov	r1, r4
   d66ea:	4630      	mov	r0, r6
   d66ec:	f000 fac6 	bl	d6c7c <_ZN7FatFile4openEPS_P7fname_ti>
   d66f0:	2800      	cmp	r0, #0
   d66f2:	d0d1      	beq.n	d6698 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d66f4:	4635      	mov	r5, r6
   d66f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d66f8:	ac09      	add	r4, sp, #36	; 0x24
   d66fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d66fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d66fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6700:	682b      	ldr	r3, [r5, #0]
   d6702:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d6704:	4630      	mov	r0, r6
   d6706:	f7ff ffb3 	bl	d6670 <_ZN7FatFile5closeEv>
   d670a:	e7e0      	b.n	d66ce <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d670c:	463b      	mov	r3, r7
   d670e:	aa03      	add	r2, sp, #12
   d6710:	4621      	mov	r1, r4
   d6712:	4630      	mov	r0, r6
   d6714:	f000 fab2 	bl	d6c7c <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d6718:	b013      	add	sp, #76	; 0x4c
   d671a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d671c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d671c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6720:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6722:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6724:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6726:	4604      	mov	r4, r0
   d6728:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d672a:	d508      	bpl.n	d673e <_ZN7FatFile5writeEPKvj+0x22>
   d672c:	7883      	ldrb	r3, [r0, #2]
   d672e:	079a      	lsls	r2, r3, #30
   d6730:	d505      	bpl.n	d673e <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d6732:	071b      	lsls	r3, r3, #28
   d6734:	d50b      	bpl.n	d674e <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d6736:	69e1      	ldr	r1, [r4, #28]
   d6738:	f7ff fe6e 	bl	d6418 <_ZN7FatFile7seekSetEm>
   d673c:	b938      	cbnz	r0, d674e <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d673e:	7863      	ldrb	r3, [r4, #1]
   d6740:	f043 0301 	orr.w	r3, r3, #1
   d6744:	7063      	strb	r3, [r4, #1]
  return -1;
   d6746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d674a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d674e:	6963      	ldr	r3, [r4, #20]
   d6750:	43db      	mvns	r3, r3
   d6752:	4598      	cmp	r8, r3
   d6754:	d8f3      	bhi.n	d673e <_ZN7FatFile5writeEPKvj+0x22>
   d6756:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6758:	f04f 0a00 	mov.w	sl, #0
   d675c:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d675e:	2e00      	cmp	r6, #0
   d6760:	f000 8081 	beq.w	d6866 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d6764:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6766:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6768:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d676c:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6770:	d11c      	bne.n	d67ac <_ZN7FatFile5writeEPKvj+0x90>
   d6772:	b9df      	cbnz	r7, d67ac <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d6774:	6921      	ldr	r1, [r4, #16]
   d6776:	b171      	cbz	r1, d6796 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6778:	f104 0210 	add.w	r2, r4, #16
   d677c:	f000 fcb0 	bl	d70e0 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d6780:	2800      	cmp	r0, #0
   d6782:	dbdc      	blt.n	d673e <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d6784:	f040 808e 	bne.w	d68a4 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d6788:	4620      	mov	r0, r4
   d678a:	f7ff fcc6 	bl	d611a <_ZN7FatFile10addClusterEv>
   d678e:	2800      	cmp	r0, #0
   d6790:	f040 8088 	bne.w	d68a4 <_ZN7FatFile5writeEPKvj+0x188>
   d6794:	e7d3      	b.n	d673e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d6796:	6a23      	ldr	r3, [r4, #32]
   d6798:	b93b      	cbnz	r3, d67aa <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d679a:	4620      	mov	r0, r4
   d679c:	f7ff fcbd 	bl	d611a <_ZN7FatFile10addClusterEv>
   d67a0:	2800      	cmp	r0, #0
   d67a2:	d0cc      	beq.n	d673e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d67a4:	6923      	ldr	r3, [r4, #16]
   d67a6:	6223      	str	r3, [r4, #32]
   d67a8:	e000      	b.n	d67ac <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d67aa:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d67ac:	6921      	ldr	r1, [r4, #16]
   d67ae:	68a0      	ldr	r0, [r4, #8]
   d67b0:	f000 fc90 	bl	d70d4 <_ZNK9FatVolume17clusterFirstBlockEm>
   d67b4:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d67b6:	b917      	cbnz	r7, d67be <_ZN7FatFile5writeEPKvj+0xa2>
   d67b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d67bc:	d221      	bcs.n	d6802 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d67be:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d67c2:	42b5      	cmp	r5, r6
   d67c4:	bf28      	it	cs
   d67c6:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d67c8:	b937      	cbnz	r7, d67d8 <_ZN7FatFile5writeEPKvj+0xbc>
   d67ca:	6963      	ldr	r3, [r4, #20]
   d67cc:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d67ce:	4293      	cmp	r3, r2
   d67d0:	bf34      	ite	cc
   d67d2:	2201      	movcc	r2, #1
   d67d4:	2205      	movcs	r2, #5
   d67d6:	e000      	b.n	d67da <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d67d8:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d67da:	68a0      	ldr	r0, [r4, #8]
   d67dc:	3024      	adds	r0, #36	; 0x24
   d67de:	f000 fc55 	bl	d708c <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d67e2:	2800      	cmp	r0, #0
   d67e4:	d0ab      	beq.n	d673e <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d67e6:	4438      	add	r0, r7
   d67e8:	462a      	mov	r2, r5
   d67ea:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d67ec:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d67ee:	f006 fb98 	bl	dcf22 <memcpy>
      if (512 == (n + blockOffset)) {
   d67f2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d67f6:	d130      	bne.n	d685a <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d67f8:	68a0      	ldr	r0, [r4, #8]
   d67fa:	3024      	adds	r0, #36	; 0x24
   d67fc:	f000 fc1f 	bl	d703e <_ZN8FatCache4syncEv>
   d6800:	e017      	b.n	d6832 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d6802:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6806:	68a0      	ldr	r0, [r4, #8]
   d6808:	d315      	bcc.n	d6836 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d680a:	7902      	ldrb	r2, [r0, #4]
   d680c:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d680e:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d6810:	b2d2      	uxtb	r2, r2
   d6812:	4293      	cmp	r3, r2
   d6814:	bf28      	it	cs
   d6816:	4613      	movcs	r3, r2
   d6818:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d681a:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d681c:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6820:	d302      	bcc.n	d6828 <_ZN7FatFile5writeEPKvj+0x10c>
   d6822:	441a      	add	r2, r3
   d6824:	4291      	cmp	r1, r2
   d6826:	d337      	bcc.n	d6898 <_ZN7FatFile5writeEPKvj+0x17c>
   d6828:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d682a:	464a      	mov	r2, r9
   d682c:	6838      	ldr	r0, [r7, #0]
   d682e:	f001 f821 	bl	d7874 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d6832:	b990      	cbnz	r0, d685a <_ZN7FatFile5writeEPKvj+0x13e>
   d6834:	e783      	b.n	d673e <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d6836:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6838:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d683a:	bf02      	ittt	eq
   d683c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6840:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6844:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d6846:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6848:	464a      	mov	r2, r9
   d684a:	6818      	ldr	r0, [r3, #0]
   d684c:	f000 ffa0 	bl	d7790 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d6850:	2800      	cmp	r0, #0
   d6852:	f43f af74 	beq.w	d673e <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d6856:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d685a:	6963      	ldr	r3, [r4, #20]
   d685c:	442b      	add	r3, r5
   d685e:	6163      	str	r3, [r4, #20]
    src += n;
   d6860:	44a9      	add	r9, r5
    nToWrite -= n;
   d6862:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d6864:	e77a      	b.n	d675c <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d6866:	69e2      	ldr	r2, [r4, #28]
   d6868:	4293      	cmp	r3, r2
   d686a:	d901      	bls.n	d6870 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d686c:	61e3      	str	r3, [r4, #28]
   d686e:	e002      	b.n	d6876 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d6870:	4b0f      	ldr	r3, [pc, #60]	; (d68b0 <_ZN7FatFile5writeEPKvj+0x194>)
   d6872:	681b      	ldr	r3, [r3, #0]
   d6874:	b11b      	cbz	r3, d687e <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d6876:	78a3      	ldrb	r3, [r4, #2]
   d6878:	f043 0304 	orr.w	r3, r3, #4
   d687c:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d687e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d6882:	2b00      	cmp	r3, #0
   d6884:	db02      	blt.n	d688c <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d6886:	4640      	mov	r0, r8
   d6888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d688c:	4620      	mov	r0, r4
   d688e:	f7ff feb9 	bl	d6604 <_ZN7FatFile4syncEv>
   d6892:	2800      	cmp	r0, #0
   d6894:	d1f7      	bne.n	d6886 <_ZN7FatFile5writeEPKvj+0x16a>
   d6896:	e752      	b.n	d673e <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d689c:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d68a0:	62c2      	str	r2, [r0, #44]	; 0x2c
   d68a2:	e7c1      	b.n	d6828 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d68a4:	6921      	ldr	r1, [r4, #16]
   d68a6:	68a0      	ldr	r0, [r4, #8]
   d68a8:	f000 fc14 	bl	d70d4 <_ZNK9FatVolume17clusterFirstBlockEm>
   d68ac:	4601      	mov	r1, r0
   d68ae:	e783      	b.n	d67b8 <_ZN7FatFile5writeEPKvj+0x9c>
   d68b0:	2003e310 	.word	0x2003e310

000d68b4 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d68b4:	f001 bae0 	b.w	d7e78 <HAL_Pin_Map>

000d68b8 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d68b8:	1e41      	subs	r1, r0, #1
   d68ba:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d68be:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d68c0:	0843      	lsrs	r3, r0, #1
   d68c2:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d68c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d68ca:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d68ce:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d68d0:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d68d2:	d1f5      	bne.n	d68c0 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d68d4:	4770      	bx	lr

000d68d6 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d68d6:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d68d8:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d68da:	4604      	mov	r4, r0
   d68dc:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d68de:	b923      	cbnz	r3, d68ea <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d68e0:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d68e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d68e6:	f7ff bc9c 	b.w	d6222 <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d68ea:	2224      	movs	r2, #36	; 0x24
   d68ec:	2100      	movs	r1, #0
   d68ee:	f006 fb3e 	bl	dcf6e <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d68f2:	2310      	movs	r3, #16
  m_flags = F_READ;
   d68f4:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d68f6:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d68f8:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d68fa:	68ab      	ldr	r3, [r5, #8]
   d68fc:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d68fe:	68eb      	ldr	r3, [r5, #12]
   d6900:	6223      	str	r3, [r4, #32]
  return true;
}
   d6902:	bd38      	pop	{r3, r4, r5, pc}

000d6904 <_ZN7FatFile7getNameEPcj>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d6904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6908:	b08b      	sub	sp, #44	; 0x2c
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d690a:	7803      	ldrb	r3, [r0, #0]
   d690c:	2500      	movs	r5, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d690e:	4680      	mov	r8, r0
   d6910:	460e      	mov	r6, r1
   d6912:	4617      	mov	r7, r2
   d6914:	f88d 5004 	strb.w	r5, [sp, #4]
   d6918:	f88d 5005 	strb.w	r5, [sp, #5]
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d691c:	b163      	cbz	r3, d6938 <_ZN7FatFile7getNameEPcj+0x34>
   d691e:	2a0c      	cmp	r2, #12
   d6920:	d90a      	bls.n	d6938 <_ZN7FatFile7getNameEPcj+0x34>
   d6922:	e00e      	b.n	d6942 <_ZN7FatFile7getNameEPcj+0x3e>
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
   d6924:	4641      	mov	r1, r8
   d6926:	a801      	add	r0, sp, #4
   d6928:	f7ff ffd5 	bl	d68d6 <_ZN7FatFile11openClusterEPS_>
   d692c:	b120      	cbz	r0, d6938 <_ZN7FatFile7getNameEPcj+0x34>
   d692e:	2401      	movs	r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d6930:	f898 3003 	ldrb.w	r3, [r8, #3]
   d6934:	42a3      	cmp	r3, r4
   d6936:	d20b      	bcs.n	d6950 <_ZN7FatFile7getNameEPcj+0x4c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
   d6938:	f04f 0900 	mov.w	r9, #0
   d693c:	f886 9000 	strb.w	r9, [r6]
  return false;
   d6940:	e055      	b.n	d69ee <_ZN7FatFile7getNameEPcj+0xea>
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6942:	78c3      	ldrb	r3, [r0, #3]
   d6944:	2b00      	cmp	r3, #0
   d6946:	d1ed      	bne.n	d6924 <_ZN7FatFile7getNameEPcj+0x20>
    return getSFN(name);
   d6948:	f000 fb60 	bl	d700c <_ZN7FatFile6getSFNEPc>
   d694c:	4681      	mov	r9, r0
   d694e:	e04e      	b.n	d69ee <_ZN7FatFile7getNameEPcj+0xea>
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d6950:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   d6954:	1b09      	subs	r1, r1, r4
   d6956:	0149      	lsls	r1, r1, #5
   d6958:	a801      	add	r0, sp, #4
   d695a:	f7ff fd5d 	bl	d6418 <_ZN7FatFile7seekSetEm>
   d695e:	4681      	mov	r9, r0
   d6960:	2800      	cmp	r0, #0
   d6962:	d0e9      	beq.n	d6938 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d6964:	2100      	movs	r1, #0
   d6966:	a801      	add	r0, sp, #4
   d6968:	f7ff fd39 	bl	d63de <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d696c:	2800      	cmp	r0, #0
   d696e:	d0e3      	beq.n	d6938 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   d6970:	7ac3      	ldrb	r3, [r0, #11]
   d6972:	2b0f      	cmp	r3, #15
   d6974:	d1e0      	bne.n	d6938 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ord != (ldir->ord & 0X1F)) {
   d6976:	7803      	ldrb	r3, [r0, #0]
   d6978:	f003 031f 	and.w	r3, r3, #31
   d697c:	429c      	cmp	r4, r3
   d697e:	d1db      	bne.n	d6938 <_ZN7FatFile7getNameEPcj+0x34>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6980:	1e63      	subs	r3, r4, #1
   d6982:	220d      	movs	r2, #13
   d6984:	435a      	muls	r2, r3
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d6986:	eb06 0e02 	add.w	lr, r6, r2
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d698a:	2300      	movs	r3, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d698c:	2b04      	cmp	r3, #4
   d698e:	b2d9      	uxtb	r1, r3
   d6990:	d804      	bhi.n	d699c <_ZN7FatFile7getNameEPcj+0x98>
    return ldir->name1[i];
   d6992:	eb00 0143 	add.w	r1, r0, r3, lsl #1
   d6996:	f8b1 1001 	ldrh.w	r1, [r1, #1]
   d699a:	e00b      	b.n	d69b4 <_ZN7FatFile7getNameEPcj+0xb0>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d699c:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d699e:	bf95      	itete	ls
   d69a0:	f103 31ff 	addls.w	r1, r3, #4294967295	; 0xffffffff
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d69a4:	1c59      	addhi	r1, r3, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d69a6:	eb00 0141 	addls.w	r1, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d69aa:	eb00 0141 	addhi.w	r1, r0, r1, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d69ae:	bf94      	ite	ls
   d69b0:	88c9      	ldrhls	r1, [r1, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d69b2:	8889      	ldrhhi	r1, [r1, #4]
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
   d69b4:	b161      	cbz	r1, d69d0 <_ZN7FatFile7getNameEPcj+0xcc>
   d69b6:	4297      	cmp	r7, r2
   d69b8:	d910      	bls.n	d69dc <_ZN7FatFile7getNameEPcj+0xd8>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d69ba:	297e      	cmp	r1, #126	; 0x7e
   d69bc:	bf94      	ite	ls
   d69be:	b2c9      	uxtbls	r1, r1
   d69c0:	213f      	movhi	r1, #63	; 0x3f
   d69c2:	f80e 1003 	strb.w	r1, [lr, r3]
   d69c6:	3301      	adds	r3, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d69c8:	2b0d      	cmp	r3, #13
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d69ca:	f102 0201 	add.w	r2, r2, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d69ce:	d1dd      	bne.n	d698c <_ZN7FatFile7getNameEPcj+0x88>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   d69d0:	4297      	cmp	r7, r2
   d69d2:	d903      	bls.n	d69dc <_ZN7FatFile7getNameEPcj+0xd8>
   d69d4:	7803      	ldrb	r3, [r0, #0]
   d69d6:	0659      	lsls	r1, r3, #25
    name[k] = 0;
   d69d8:	bf48      	it	mi
   d69da:	54b5      	strbmi	r5, [r6, r2]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
   d69dc:	19f3      	adds	r3, r6, r7
   d69de:	f803 5c01 	strb.w	r5, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d69e2:	7803      	ldrb	r3, [r0, #0]
   d69e4:	065b      	lsls	r3, r3, #25
   d69e6:	d402      	bmi.n	d69ee <_ZN7FatFile7getNameEPcj+0xea>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d69e8:	3401      	adds	r4, #1
   d69ea:	b2e4      	uxtb	r4, r4
   d69ec:	e7a0      	b.n	d6930 <_ZN7FatFile7getNameEPcj+0x2c>
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
   d69ee:	4648      	mov	r0, r9
   d69f0:	b00b      	add	sp, #44	; 0x2c
   d69f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d69f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d69f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d69fc:	7803      	ldrb	r3, [r0, #0]
   d69fe:	2b20      	cmp	r3, #32
   d6a00:	f100 0401 	add.w	r4, r0, #1
   d6a04:	d101      	bne.n	d6a0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d6a06:	4620      	mov	r0, r4
   d6a08:	e7f8      	b.n	d69fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6a0a:	4f70      	ldr	r7, [pc, #448]	; (d6bcc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d6a0c:	6088      	str	r0, [r1, #8]
   d6a0e:	4605      	mov	r5, r0
   d6a10:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d6a12:	462e      	mov	r6, r5
   d6a14:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d6a18:	b30b      	cbz	r3, d6a5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6a1a:	2b2f      	cmp	r3, #47	; 0x2f
   d6a1c:	d101      	bne.n	d6a22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d6a1e:	1903      	adds	r3, r0, r4
   d6a20:	e017      	b.n	d6a52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6a22:	2b5c      	cmp	r3, #92	; 0x5c
   d6a24:	d102      	bne.n	d6a2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6a26:	2000      	movs	r0, #0
   d6a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6a2c:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d6a30:	b2e4      	uxtb	r4, r4
   d6a32:	2c1d      	cmp	r4, #29
   d6a34:	d803      	bhi.n	d6a3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d6a36:	fa27 f404 	lsr.w	r4, r7, r4
   d6a3a:	07e4      	lsls	r4, r4, #31
   d6a3c:	d4f3      	bmi.n	d6a26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d6a3e:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d6a42:	2c3c      	cmp	r4, #60	; 0x3c
   d6a44:	d0ef      	beq.n	d6a26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d6a46:	3b20      	subs	r3, #32
   d6a48:	2b5e      	cmp	r3, #94	; 0x5e
   d6a4a:	d9e1      	bls.n	d6a10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d6a4c:	e7eb      	b.n	d6a26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d6a4e:	2d2f      	cmp	r5, #47	; 0x2f
   d6a50:	d105      	bne.n	d6a5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6a52:	461e      	mov	r6, r3
   d6a54:	f813 5b01 	ldrb.w	r5, [r3], #1
   d6a58:	2d20      	cmp	r5, #32
   d6a5a:	d1f8      	bne.n	d6a4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d6a5c:	e7f9      	b.n	d6a52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d6a5e:	6016      	str	r6, [r2, #0]
   d6a60:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d6a62:	4298      	cmp	r0, r3
   d6a64:	ebc0 0803 	rsb	r8, r0, r3
   d6a68:	d009      	beq.n	d6a7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d6a6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d6a6e:	2a2e      	cmp	r2, #46	; 0x2e
   d6a70:	d0f7      	beq.n	d6a62 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d6a72:	2a20      	cmp	r2, #32
   d6a74:	d0f5      	beq.n	d6a62 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d6a76:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d6a7a:	dcd4      	bgt.n	d6a26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d6a7c:	e001      	b.n	d6a82 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d6a7e:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d6a82:	f8c1 8004 	str.w	r8, [r1, #4]
   d6a86:	f101 030c 	add.w	r3, r1, #12
   d6a8a:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d6a8e:	2420      	movs	r4, #32
   d6a90:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d6a94:	4293      	cmp	r3, r2
   d6a96:	d1fb      	bne.n	d6a90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6a98:	4603      	mov	r3, r0
   d6a9a:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6a9c:	f813 4b01 	ldrb.w	r4, [r3], #1
   d6aa0:	2c2e      	cmp	r4, #46	; 0x2e
   d6aa2:	d0fa      	beq.n	d6a9a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d6aa4:	2c20      	cmp	r4, #32
   d6aa6:	d0f8      	beq.n	d6a9a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d6aa8:	fab2 f482 	clz	r4, r2
   d6aac:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6aae:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   d6ab2:	1c73      	adds	r3, r6, #1
   d6ab4:	d107      	bne.n	d6ac6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d6ab6:	2700      	movs	r7, #0
   d6ab8:	f04f 0e07 	mov.w	lr, #7
   d6abc:	463d      	mov	r5, r7
   d6abe:	46ba      	mov	sl, r7
   d6ac0:	f04f 0908 	mov.w	r9, #8
   d6ac4:	e009      	b.n	d6ada <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d6ac6:	5d83      	ldrb	r3, [r0, r6]
   d6ac8:	2b2e      	cmp	r3, #46	; 0x2e
   d6aca:	d0f4      	beq.n	d6ab6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d6acc:	3e01      	subs	r6, #1
   d6ace:	e7f0      	b.n	d6ab2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d6ad0:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d6ad2:	2b20      	cmp	r3, #32
   d6ad4:	d104      	bne.n	d6ae0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d6ad6:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d6ad8:	3201      	adds	r2, #1
   d6ada:	4542      	cmp	r2, r8
   d6adc:	dbf8      	blt.n	d6ad0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d6ade:	e04b      	b.n	d6b78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d6ae0:	2b2e      	cmp	r3, #46	; 0x2e
   d6ae2:	d102      	bne.n	d6aea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d6ae4:	42b2      	cmp	r2, r6
   d6ae6:	d1f6      	bne.n	d6ad6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6ae8:	e003      	b.n	d6af2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d6aea:	2b22      	cmp	r3, #34	; 0x22
   d6aec:	d017      	beq.n	d6b1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d6aee:	2b7c      	cmp	r3, #124	; 0x7c
   d6af0:	d015      	beq.n	d6b1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d6af2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d6af6:	f1bc 0f05 	cmp.w	ip, #5
   d6afa:	d801      	bhi.n	d6b00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6afc:	2b2d      	cmp	r3, #45	; 0x2d
   d6afe:	d10e      	bne.n	d6b1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d6b00:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6b04:	f1bc 0f05 	cmp.w	ip, #5
   d6b08:	d909      	bls.n	d6b1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d6b0a:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d6b0e:	f1bc 0f02 	cmp.w	ip, #2
   d6b12:	d904      	bls.n	d6b1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d6b14:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6b18:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d6b1c:	d902      	bls.n	d6b24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d6b1e:	42b2      	cmp	r2, r6
   d6b20:	d10e      	bne.n	d6b40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d6b22:	e049      	b.n	d6bb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6b24:	42b2      	cmp	r2, r6
   d6b26:	d047      	beq.n	d6bb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d6b28:	4575      	cmp	r5, lr
   d6b2a:	d821      	bhi.n	d6b70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d6b2c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6b30:	f1bc 0f19 	cmp.w	ip, #25
   d6b34:	d808      	bhi.n	d6b48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d6b36:	3b20      	subs	r3, #32
   d6b38:	b2db      	uxtb	r3, r3
        lc |= bit;
   d6b3a:	ea49 0707 	orr.w	r7, r9, r7
   d6b3e:	e00a      	b.n	d6b56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6b40:	4575      	cmp	r5, lr
   d6b42:	d815      	bhi.n	d6b70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d6b44:	2400      	movs	r4, #0
      c = '_';
   d6b46:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d6b48:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d6b4c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6b50:	bf98      	it	ls
   d6b52:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d6b56:	f105 0c01 	add.w	ip, r5, #1
   d6b5a:	fa5f fc8c 	uxtb.w	ip, ip
   d6b5e:	440d      	add	r5, r1
      if (i < 7) {
   d6b60:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d6b64:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d6b66:	d801      	bhi.n	d6b6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d6b68:	f881 c00c 	strb.w	ip, [r1, #12]
   d6b6c:	4665      	mov	r5, ip
   d6b6e:	e7b3      	b.n	d6ad8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6b70:	f1be 0f0a 	cmp.w	lr, #10
   d6b74:	d117      	bne.n	d6ba6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d6b76:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d6b78:	7b4b      	ldrb	r3, [r1, #13]
   d6b7a:	2b20      	cmp	r3, #32
   d6b7c:	f43f af53 	beq.w	d6a26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d6b80:	b13c      	cbz	r4, d6b92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6b82:	ea1a 0f07 	tst.w	sl, r7
   d6b86:	bf18      	it	ne
   d6b88:	2702      	movne	r7, #2
   d6b8a:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d6b8c:	2001      	movs	r0, #1
   d6b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d6b92:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6b94:	2001      	movs	r0, #1
   d6b96:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6b98:	4419      	add	r1, r3
   d6b9a:	237e      	movs	r3, #126	; 0x7e
   d6b9c:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d6b9e:	2331      	movs	r3, #49	; 0x31
   d6ba0:	738b      	strb	r3, [r1, #14]
   d6ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d6ba6:	42b2      	cmp	r2, r6
   d6ba8:	dce5      	bgt.n	d6b76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d6baa:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d6bac:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d6bb0:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6bb2:	f04f 0910 	mov.w	r9, #16
   d6bb6:	e78e      	b.n	d6ad6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6bb8:	f1be 0f0a 	cmp.w	lr, #10
   d6bbc:	d0db      	beq.n	d6b76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d6bbe:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d6bc0:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d6bc4:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6bc6:	f04f 0910 	mov.w	r9, #16
   d6bca:	e785      	b.n	d6ad8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d6bcc:	31000101 	.word	0x31000101

000d6bd0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6bd4:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6bd8:	4606      	mov	r6, r0
   d6bda:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6bdc:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6bde:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6be0:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d6be4:	6869      	ldr	r1, [r5, #4]
   d6be6:	68aa      	ldr	r2, [r5, #8]
   d6be8:	1863      	adds	r3, r4, r1
   d6bea:	b29b      	uxth	r3, r3
   d6bec:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d6bee:	4291      	cmp	r1, r2
   d6bf0:	d006      	beq.n	d6c00 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d6bf2:	f812 0b01 	ldrb.w	r0, [r2], #1
   d6bf6:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d6bfa:	4043      	eors	r3, r0
   d6bfc:	b29b      	uxth	r3, r3
   d6bfe:	e7f6      	b.n	d6bee <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d6c00:	f1b9 0f03 	cmp.w	r9, #3
   d6c04:	bf28      	it	cs
   d6c06:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6c0a:	f109 0204 	add.w	r2, r9, #4
   d6c0e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6c10:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6c14:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6c16:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6c18:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6c1a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6c1c:	bf94      	ite	ls
   d6c1e:	3130      	addls	r1, #48	; 0x30
   d6c20:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6c22:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6c24:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d6c26:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6c2a:	d3f1      	bcc.n	d6c10 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6c2c:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d6c30:	2100      	movs	r1, #0
   d6c32:	735f      	strb	r7, [r3, #13]
   d6c34:	4630      	mov	r0, r6
   d6c36:	f7ff fbef 	bl	d6418 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d6c3a:	2101      	movs	r1, #1
   d6c3c:	4630      	mov	r0, r6
   d6c3e:	f7ff fbce 	bl	d63de <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6c42:	4601      	mov	r1, r0
   d6c44:	b928      	cbnz	r0, d6c52 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d6c46:	7870      	ldrb	r0, [r6, #1]
   d6c48:	fab0 f080 	clz	r0, r0
   d6c4c:	0940      	lsrs	r0, r0, #5
   d6c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6c52:	7803      	ldrb	r3, [r0, #0]
   d6c54:	b14b      	cbz	r3, d6c6a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6c56:	7ac3      	ldrb	r3, [r0, #11]
   d6c58:	071b      	lsls	r3, r3, #28
   d6c5a:	d4ee      	bmi.n	d6c3a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6c5c:	220b      	movs	r2, #11
   d6c5e:	4640      	mov	r0, r8
   d6c60:	f006 f950 	bl	dcf04 <memcmp>
   d6c64:	2800      	cmp	r0, #0
   d6c66:	d1e8      	bne.n	d6c3a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6c68:	e002      	b.n	d6c70 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d6c6a:	2001      	movs	r0, #1
   d6c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6c70:	3401      	adds	r4, #1
   d6c72:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d6c74:	2c64      	cmp	r4, #100	; 0x64
   d6c76:	d1b5      	bne.n	d6be4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d6c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6c7c <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c80:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6c82:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6c84:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6c86:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6c8a:	9005      	str	r0, [sp, #20]
   d6c8c:	460e      	mov	r6, r1
   d6c8e:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6c90:	d101      	bne.n	d6c96 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d6c92:	2000      	movs	r0, #0
   d6c94:	e1a0      	b.n	d6fd8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6c96:	9b05      	ldr	r3, [sp, #20]
   d6c98:	781b      	ldrb	r3, [r3, #0]
   d6c9a:	2b00      	cmp	r3, #0
   d6c9c:	d1f9      	bne.n	d6c92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d6c9e:	6853      	ldr	r3, [r2, #4]
   d6ca0:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6ca2:	7813      	ldrb	r3, [r2, #0]
   d6ca4:	079b      	lsls	r3, r3, #30
   d6ca6:	f000 818d 	beq.w	d6fc4 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d6caa:	9b02      	ldr	r3, [sp, #8]
   d6cac:	270d      	movs	r7, #13
   d6cae:	330c      	adds	r3, #12
   d6cb0:	fbb3 f7f7 	udiv	r7, r3, r7
   d6cb4:	3701      	adds	r7, #1
   d6cb6:	b2ff      	uxtb	r7, r7
   d6cb8:	2100      	movs	r1, #0
   d6cba:	4630      	mov	r0, r6
   d6cbc:	f7ff fbac 	bl	d6418 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d6cc0:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6cc4:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d6cc8:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d6ccc:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d6cce:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d6cd0:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d6cd2:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6cd6:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6cd8:	6972      	ldr	r2, [r6, #20]
   d6cda:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d6cdc:	2101      	movs	r1, #1
   d6cde:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6ce0:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d6ce4:	f7ff fb7b 	bl	d63de <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6ce8:	9b07      	ldr	r3, [sp, #28]
   d6cea:	b920      	cbnz	r0, d6cf6 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d6cec:	7873      	ldrb	r3, [r6, #1]
   d6cee:	2b00      	cmp	r3, #0
   d6cf0:	f000 8090 	beq.w	d6e14 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d6cf4:	e7cd      	b.n	d6c92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d6cf6:	7802      	ldrb	r2, [r0, #0]
   d6cf8:	2ae5      	cmp	r2, #229	; 0xe5
   d6cfa:	d000      	beq.n	d6cfe <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d6cfc:	b942      	cbnz	r2, d6d10 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6cfe:	2c00      	cmp	r4, #0
   d6d00:	bf08      	it	eq
   d6d02:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d6d04:	42bc      	cmp	r4, r7
        freeFound++;
   d6d06:	bf3c      	itt	cc
   d6d08:	3401      	addcc	r4, #1
   d6d0a:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6d0c:	b922      	cbnz	r2, d6d18 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d6d0e:	e081      	b.n	d6e14 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d6d10:	42bc      	cmp	r4, r7
   d6d12:	bf38      	it	cc
   d6d14:	2400      	movcc	r4, #0
   d6d16:	e003      	b.n	d6d20 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6d18:	2ae5      	cmp	r2, #229	; 0xe5
   d6d1a:	d101      	bne.n	d6d20 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d6d1c:	2500      	movs	r5, #0
   d6d1e:	e7db      	b.n	d6cd8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6d20:	2a2e      	cmp	r2, #46	; 0x2e
   d6d22:	d0fb      	beq.n	d6d1c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6d24:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6d26:	290f      	cmp	r1, #15
   d6d28:	d152      	bne.n	d6dd0 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d6d2a:	b93d      	cbnz	r5, d6d3c <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d6d2c:	0651      	lsls	r1, r2, #25
   d6d2e:	d5d3      	bpl.n	d6cd8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d6d30:	7b43      	ldrb	r3, [r0, #13]
   d6d32:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d6d34:	f002 051f 	and.w	r5, r2, #31
   d6d38:	462b      	mov	r3, r5
   d6d3a:	e007      	b.n	d6d4c <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6d3c:	3b01      	subs	r3, #1
   d6d3e:	b2db      	uxtb	r3, r3
   d6d40:	429a      	cmp	r2, r3
   d6d42:	d1eb      	bne.n	d6d1c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6d44:	7b42      	ldrb	r2, [r0, #13]
   d6d46:	9903      	ldr	r1, [sp, #12]
   d6d48:	4291      	cmp	r1, r2
   d6d4a:	d1e7      	bne.n	d6d1c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d6d4c:	1e5a      	subs	r2, r3, #1
   d6d4e:	f04f 0c0d 	mov.w	ip, #13
   d6d52:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d6d56:	9a02      	ldr	r2, [sp, #8]
   d6d58:	4562      	cmp	r2, ip
   d6d5a:	d9df      	bls.n	d6d1c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6d5c:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d6d60:	f1be 0f04 	cmp.w	lr, #4
   d6d64:	fa5f f28e 	uxtb.w	r2, lr
   d6d68:	d804      	bhi.n	d6d74 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d6d6a:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d6d6e:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d6d72:	e00c      	b.n	d6d8e <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6d74:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6d76:	bf95      	itete	ls
   d6d78:	f10e 32ff 	addls.w	r2, lr, #4294967295	; 0xffffffff
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6d7c:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6d80:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6d84:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6d88:	bf94      	ite	ls
   d6d8a:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6d8c:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d6d8e:	9902      	ldr	r1, [sp, #8]
   d6d90:	4561      	cmp	r1, ip
   d6d92:	d103      	bne.n	d6d9c <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d6d94:	2a00      	cmp	r2, #0
   d6d96:	bf18      	it	ne
   d6d98:	2500      	movne	r5, #0
   d6d9a:	e79d      	b.n	d6cd8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6d9c:	2aff      	cmp	r2, #255	; 0xff
   d6d9e:	d8bd      	bhi.n	d6d1c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6da0:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6da2:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d6da6:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6da8:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d6dac:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6db0:	bf98      	it	ls
   d6db2:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6db4:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6db8:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d6dbc:	bf98      	it	ls
   d6dbe:	b2d2      	uxtbls	r2, r2
   d6dc0:	f1bc 0f19 	cmp.w	ip, #25
   d6dc4:	bf9c      	itt	ls
   d6dc6:	3120      	addls	r1, #32
   d6dc8:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6dca:	4291      	cmp	r1, r2
   d6dcc:	d1a6      	bne.n	d6d1c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6dce:	e0fb      	b.n	d6fc8 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6dd0:	0709      	lsls	r1, r1, #28
   d6dd2:	d4a3      	bmi.n	d6d1c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d6dd4:	b14d      	cbz	r5, d6dea <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d6dd6:	2b01      	cmp	r3, #1
   d6dd8:	f47f af5b 	bne.w	d6c92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6ddc:	f7ff fd6c 	bl	d68b8 <_ZN7FatFile11lfnChecksumEPh>
   d6de0:	9b03      	ldr	r3, [sp, #12]
   d6de2:	4283      	cmp	r3, r0
   d6de4:	f47f af55 	bne.w	d6c92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6de8:	e00f      	b.n	d6e0a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6dea:	220b      	movs	r2, #11
   d6dec:	9906      	ldr	r1, [sp, #24]
   d6dee:	9307      	str	r3, [sp, #28]
   d6df0:	f006 f888 	bl	dcf04 <memcmp>
   d6df4:	9b07      	ldr	r3, [sp, #28]
   d6df6:	2800      	cmp	r0, #0
   d6df8:	f47f af6e 	bne.w	d6cd8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6dfc:	f899 2000 	ldrb.w	r2, [r9]
   d6e00:	07d2      	lsls	r2, r2, #31
   d6e02:	d502      	bpl.n	d6e0a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d6e04:	2201      	movs	r2, #1
   d6e06:	9204      	str	r2, [sp, #16]
   d6e08:	e766      	b.n	d6cd8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d6e0a:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d6e0e:	f000 80d1 	beq.w	d6fb4 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d6e12:	e73e      	b.n	d6c92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6e14:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d6e18:	f43f af3b 	beq.w	d6c92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6e1c:	f00b 0303 	and.w	r3, fp, #3
   d6e20:	3b01      	subs	r3, #1
   d6e22:	2b01      	cmp	r3, #1
   d6e24:	f63f af35 	bhi.w	d6c92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d6e28:	2c00      	cmp	r4, #0
   d6e2a:	bf08      	it	eq
   d6e2c:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6e2e:	42bc      	cmp	r4, r7
   d6e30:	d302      	bcc.n	d6e38 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d6e32:	9b04      	ldr	r3, [sp, #16]
   d6e34:	b9cb      	cbnz	r3, d6e6a <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d6e36:	e01f      	b.n	d6e78 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d6e38:	2100      	movs	r1, #0
   d6e3a:	4630      	mov	r0, r6
   d6e3c:	f7ff facf 	bl	d63de <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6e40:	b910      	cbnz	r0, d6e48 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d6e42:	7873      	ldrb	r3, [r6, #1]
   d6e44:	b15b      	cbz	r3, d6e5e <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d6e46:	e724      	b.n	d6c92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d6e48:	3401      	adds	r4, #1
   d6e4a:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6e4c:	e7ef      	b.n	d6e2e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d6e4e:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d6e50:	791b      	ldrb	r3, [r3, #4]
   d6e52:	2b01      	cmp	r3, #1
   d6e54:	d8ed      	bhi.n	d6e32 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d6e56:	3410      	adds	r4, #16
   d6e58:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d6e5a:	42a7      	cmp	r7, r4
   d6e5c:	d9e9      	bls.n	d6e32 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d6e5e:	4630      	mov	r0, r6
   d6e60:	f7ff f966 	bl	d6130 <_ZN7FatFile13addDirClusterEv>
   d6e64:	2800      	cmp	r0, #0
   d6e66:	d1f2      	bne.n	d6e4e <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d6e68:	e713      	b.n	d6c92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d6e6a:	4649      	mov	r1, r9
   d6e6c:	4630      	mov	r0, r6
   d6e6e:	f7ff feaf 	bl	d6bd0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d6e72:	2800      	cmp	r0, #0
   d6e74:	f43f af0d 	beq.w	d6c92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d6e78:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d6e7c:	4630      	mov	r0, r6
   d6e7e:	f7ff facb 	bl	d6418 <_ZN7FatFile7seekSetEm>
   d6e82:	2800      	cmp	r0, #0
   d6e84:	f43f af05 	beq.w	d6c92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d6e88:	1e7d      	subs	r5, r7, #1
   d6e8a:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6e8c:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6e8e:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d6e92:	f04f 080f 	mov.w	r8, #15
   d6e96:	e041      	b.n	d6f1c <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6e98:	2100      	movs	r1, #0
   d6e9a:	4630      	mov	r0, r6
   d6e9c:	f7ff fa9f 	bl	d63de <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6ea0:	4607      	mov	r7, r0
   d6ea2:	2800      	cmp	r0, #0
   d6ea4:	f43f aef5 	beq.w	d6c92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d6ea8:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d6eaa:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6eae:	42ac      	cmp	r4, r5
   d6eb0:	f043 0301 	orr.w	r3, r3, #1
   d6eb4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d6eb8:	bf0c      	ite	eq
   d6eba:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d6ebe:	4622      	movne	r2, r4
   d6ec0:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d6ec2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d6ec6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d6eca:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6ece:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6ed0:	f7ff fcf2 	bl	d68b8 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6ed4:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6ed6:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d6ed8:	f887 a01a 	strb.w	sl, [r7, #26]
   d6edc:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6ee0:	f002 021f 	and.w	r2, r2, #31
   d6ee4:	230d      	movs	r3, #13
   d6ee6:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d6ee8:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6eec:	435a      	muls	r2, r3
   d6eee:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6ef0:	9902      	ldr	r1, [sp, #8]
   d6ef2:	4291      	cmp	r1, r2
   d6ef4:	d915      	bls.n	d6f22 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d6ef6:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d6efa:	2b04      	cmp	r3, #4
   d6efc:	fa5f fc83 	uxtb.w	ip, r3
   d6f00:	f103 0001 	add.w	r0, r3, #1
   d6f04:	d813      	bhi.n	d6f2e <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d6f06:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d6f0a:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d6f0e:	280d      	cmp	r0, #13
   d6f10:	f102 0201 	add.w	r2, r2, #1
   d6f14:	4603      	mov	r3, r0
   d6f16:	d1eb      	bne.n	d6ef0 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6f18:	3c01      	subs	r4, #1
   d6f1a:	b2e4      	uxtb	r4, r4
   d6f1c:	2c00      	cmp	r4, #0
   d6f1e:	d1bb      	bne.n	d6e98 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d6f20:	e00e      	b.n	d6f40 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6f22:	bf14      	ite	ne
   d6f24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d6f28:	2100      	moveq	r1, #0
   d6f2a:	b289      	uxth	r1, r1
   d6f2c:	e7e5      	b.n	d6efa <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6f2e:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d6f32:	bf94      	ite	ls
   d6f34:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d6f38:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d6f3c:	8099      	strh	r1, [r3, #4]
   d6f3e:	e7e6      	b.n	d6f0e <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6f40:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d6f42:	4621      	mov	r1, r4
   d6f44:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6f46:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d6f4a:	f7ff fa48 	bl	d63de <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d6f4e:	4607      	mov	r7, r0
   d6f50:	2800      	cmp	r0, #0
   d6f52:	f43f ae9e 	beq.w	d6c92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d6f56:	2220      	movs	r2, #32
   d6f58:	4621      	mov	r1, r4
   d6f5a:	f006 f808 	bl	dcf6e <memset>
  memcpy(dir->name, fname->sfn, 11);
   d6f5e:	464b      	mov	r3, r9
   d6f60:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6f64:	603a      	str	r2, [r7, #0]
   d6f66:	685a      	ldr	r2, [r3, #4]
   d6f68:	607a      	str	r2, [r7, #4]
   d6f6a:	891a      	ldrh	r2, [r3, #8]
   d6f6c:	813a      	strh	r2, [r7, #8]
   d6f6e:	7a9b      	ldrb	r3, [r3, #10]
   d6f70:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d6f72:	f899 3000 	ldrb.w	r3, [r9]
   d6f76:	f003 0318 	and.w	r3, r3, #24
   d6f7a:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d6f7c:	4b18      	ldr	r3, [pc, #96]	; (d6fe0 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d6f7e:	681b      	ldr	r3, [r3, #0]
   d6f80:	b12b      	cbz	r3, d6f8e <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d6f82:	f107 010e 	add.w	r1, r7, #14
   d6f86:	f107 0010 	add.w	r0, r7, #16
   d6f8a:	4798      	blx	r3
   d6f8c:	e006      	b.n	d6f9c <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d6f8e:	2321      	movs	r3, #33	; 0x21
   d6f90:	743b      	strb	r3, [r7, #16]
   d6f92:	2328      	movs	r3, #40	; 0x28
   d6f94:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d6f96:	2308      	movs	r3, #8
   d6f98:	73bc      	strb	r4, [r7, #14]
   d6f9a:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d6f9c:	8a3b      	ldrh	r3, [r7, #16]
   d6f9e:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d6fa0:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d6fa2:	89fb      	ldrh	r3, [r7, #14]
   d6fa4:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d6fa6:	68b2      	ldr	r2, [r6, #8]
   d6fa8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d6fac:	f043 0301 	orr.w	r3, r3, #1
   d6fb0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d6fb4:	9500      	str	r5, [sp, #0]
   d6fb6:	465b      	mov	r3, fp
   d6fb8:	4652      	mov	r2, sl
   d6fba:	4631      	mov	r1, r6
   d6fbc:	9805      	ldr	r0, [sp, #20]
   d6fbe:	f7ff fa74 	bl	d64aa <_ZN7FatFile15openCachedEntryEPS_tih>
   d6fc2:	e009      	b.n	d6fd8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6fc4:	2701      	movs	r7, #1
   d6fc6:	e677      	b.n	d6cb8 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d6fc8:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d6fcc:	f1be 0f0d 	cmp.w	lr, #13
   d6fd0:	f43f ae82 	beq.w	d6cd8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6fd4:	46d4      	mov	ip, sl
   d6fd6:	e6c3      	b.n	d6d60 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d6fd8:	b009      	add	sp, #36	; 0x24
   d6fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6fde:	bf00      	nop
   d6fe0:	2003e310 	.word	0x2003e310

000d6fe4 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d6fe4:	f000 bf48 	b.w	d7e78 <HAL_Pin_Map>

000d6fe8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6fe8:	b570      	push	{r4, r5, r6, lr}
   d6fea:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6fec:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6fee:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6ff0:	b149      	cbz	r1, d7006 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6ff2:	f006 f842 	bl	dd07a <strlen>
   d6ff6:	682b      	ldr	r3, [r5, #0]
   d6ff8:	4602      	mov	r2, r0
   d6ffa:	4621      	mov	r1, r4
   d6ffc:	4628      	mov	r0, r5
   d6ffe:	68db      	ldr	r3, [r3, #12]
    }
   d7000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7004:	4718      	bx	r3
    }
   d7006:	bd70      	pop	{r4, r5, r6, pc}

000d7008 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d7008:	f000 bf36 	b.w	d7e78 <HAL_Pin_Map>

000d700c <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d700c:	b510      	push	{r4, lr}
   d700e:	460c      	mov	r4, r1
   d7010:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d7012:	b909      	cbnz	r1, d7018 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d7014:	2000      	movs	r0, #0
   d7016:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d7018:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d701c:	d004      	beq.n	d7028 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d701e:	232f      	movs	r3, #47	; 0x2f
   d7020:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d7022:	2300      	movs	r3, #0
   d7024:	7063      	strb	r3, [r4, #1]
   d7026:	e006      	b.n	d7036 <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d7028:	f7ff f8c2 	bl	d61b0 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d702c:	2800      	cmp	r0, #0
   d702e:	d0f1      	beq.n	d7014 <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d7030:	4621      	mov	r1, r4
   d7032:	f7ff f8cc 	bl	d61ce <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d7036:	2001      	movs	r0, #1

fail:
  return false;
}
   d7038:	bd10      	pop	{r4, pc}

000d703a <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d703a:	f000 bf1d 	b.w	d7e78 <HAL_Pin_Map>

000d703e <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d703e:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d7040:	7803      	ldrb	r3, [r0, #0]
   d7042:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d7044:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d7046:	d51e      	bpl.n	d7086 <_ZN8FatCache4syncEv+0x48>
   d7048:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d704a:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d704c:	f100 060c 	add.w	r6, r0, #12
   d7050:	4632      	mov	r2, r6
   d7052:	6818      	ldr	r0, [r3, #0]
   d7054:	f000 fb9c 	bl	d7790 <_ZN9SdSpiCard10writeBlockEmPKh>
   d7058:	4605      	mov	r5, r0
   d705a:	b908      	cbnz	r0, d7060 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d705c:	2500      	movs	r5, #0
   d705e:	e013      	b.n	d7088 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d7060:	7823      	ldrb	r3, [r4, #0]
   d7062:	079b      	lsls	r3, r3, #30
   d7064:	d404      	bmi.n	d7070 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d7066:	7823      	ldrb	r3, [r4, #0]
   d7068:	f023 0301 	bic.w	r3, r3, #1
   d706c:	7023      	strb	r3, [r4, #0]
   d706e:	e00b      	b.n	d7088 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d7070:	6863      	ldr	r3, [r4, #4]
   d7072:	68a0      	ldr	r0, [r4, #8]
   d7074:	6919      	ldr	r1, [r3, #16]
   d7076:	4632      	mov	r2, r6
   d7078:	4401      	add	r1, r0
   d707a:	6818      	ldr	r0, [r3, #0]
   d707c:	f000 fb88 	bl	d7790 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d7080:	2800      	cmp	r0, #0
   d7082:	d1f0      	bne.n	d7066 <_ZN8FatCache4syncEv+0x28>
   d7084:	e7ea      	b.n	d705c <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d7086:	2501      	movs	r5, #1

fail:
  return false;
}
   d7088:	4628      	mov	r0, r5
   d708a:	bd70      	pop	{r4, r5, r6, pc}

000d708c <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d708c:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d708e:	6883      	ldr	r3, [r0, #8]
   d7090:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7092:	4604      	mov	r4, r0
   d7094:	460e      	mov	r6, r1
   d7096:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d7098:	d014      	beq.n	d70c4 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d709a:	f7ff ffd0 	bl	d703e <_ZN8FatCache4syncEv>
   d709e:	b908      	cbnz	r0, d70a4 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d70a0:	2000      	movs	r0, #0
   d70a2:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d70a4:	076b      	lsls	r3, r5, #29
   d70a6:	d503      	bpl.n	d70b0 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d70a8:	2300      	movs	r3, #0
   d70aa:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d70ac:	60a6      	str	r6, [r4, #8]
   d70ae:	e009      	b.n	d70c4 <_ZN8FatCache4readEmh+0x38>
   d70b0:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d70b2:	f104 020c 	add.w	r2, r4, #12
   d70b6:	4631      	mov	r1, r6
   d70b8:	6818      	ldr	r0, [r3, #0]
   d70ba:	f000 fadf 	bl	d767c <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d70be:	2800      	cmp	r0, #0
   d70c0:	d1f2      	bne.n	d70a8 <_ZN8FatCache4readEmh+0x1c>
   d70c2:	e7ed      	b.n	d70a0 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d70c4:	7823      	ldrb	r3, [r4, #0]
   d70c6:	4620      	mov	r0, r4
   d70c8:	f005 0503 	and.w	r5, r5, #3
   d70cc:	431d      	orrs	r5, r3
   d70ce:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d70d2:	bd70      	pop	{r4, r5, r6, pc}

000d70d4 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d70d4:	7983      	ldrb	r3, [r0, #6]
   d70d6:	6940      	ldr	r0, [r0, #20]
   d70d8:	3902      	subs	r1, #2
   d70da:	4099      	lsls	r1, r3
}
   d70dc:	4408      	add	r0, r1
   d70de:	4770      	bx	lr

000d70e0 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d70e0:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d70e2:	b570      	push	{r4, r5, r6, lr}
   d70e4:	4605      	mov	r5, r0
   d70e6:	460c      	mov	r4, r1
   d70e8:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d70ea:	d802      	bhi.n	d70f2 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d70ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d70f0:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d70f2:	69c3      	ldr	r3, [r0, #28]
   d70f4:	4299      	cmp	r1, r3
   d70f6:	d8f9      	bhi.n	d70ec <_ZN9FatVolume6fatGetEmPm+0xc>
   d70f8:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d70fa:	2b20      	cmp	r3, #32
   d70fc:	d110      	bne.n	d7120 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d70fe:	6981      	ldr	r1, [r0, #24]
   d7100:	2202      	movs	r2, #2
   d7102:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7106:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d710a:	f7ff ffbf 	bl	d708c <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d710e:	2800      	cmp	r0, #0
   d7110:	d0ec      	beq.n	d70ec <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d7112:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7116:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d711a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d711e:	e00f      	b.n	d7140 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d7120:	2b10      	cmp	r3, #16
   d7122:	d1e3      	bne.n	d70ec <_ZN9FatVolume6fatGetEmPm+0xc>
   d7124:	6983      	ldr	r3, [r0, #24]
   d7126:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d712a:	2202      	movs	r2, #2
   d712c:	4419      	add	r1, r3
   d712e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7132:	f7ff ffab 	bl	d708c <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7136:	2800      	cmp	r0, #0
   d7138:	d0d8      	beq.n	d70ec <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d713a:	b2e4      	uxtb	r4, r4
   d713c:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d7140:	69ea      	ldr	r2, [r5, #28]
   d7142:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d7144:	bf9a      	itte	ls
   d7146:	6033      	strls	r3, [r6, #0]
  return 1;
   d7148:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d714a:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d714c:	bd70      	pop	{r4, r5, r6, pc}

000d714e <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d714e:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d7150:	b538      	push	{r3, r4, r5, lr}
   d7152:	460c      	mov	r4, r1
   d7154:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7156:	d801      	bhi.n	d715c <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d7158:	2000      	movs	r0, #0
   d715a:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d715c:	69c3      	ldr	r3, [r0, #28]
   d715e:	4299      	cmp	r1, r3
   d7160:	d8fa      	bhi.n	d7158 <_ZN9FatVolume6fatPutEmm+0xa>
   d7162:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d7164:	2b20      	cmp	r3, #32
   d7166:	d10e      	bne.n	d7186 <_ZN9FatVolume6fatPutEmm+0x38>
   d7168:	6981      	ldr	r1, [r0, #24]
   d716a:	2203      	movs	r2, #3
   d716c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7170:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7174:	f7ff ff8a 	bl	d708c <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d7178:	2800      	cmp	r0, #0
   d717a:	d0ed      	beq.n	d7158 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d717c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7180:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d7184:	e00f      	b.n	d71a6 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d7186:	2b10      	cmp	r3, #16
   d7188:	d1e6      	bne.n	d7158 <_ZN9FatVolume6fatPutEmm+0xa>
   d718a:	6983      	ldr	r3, [r0, #24]
   d718c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d7190:	2203      	movs	r2, #3
   d7192:	4419      	add	r1, r3
   d7194:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7198:	f7ff ff78 	bl	d708c <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d719c:	2800      	cmp	r0, #0
   d719e:	d0db      	beq.n	d7158 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d71a0:	b2e4      	uxtb	r4, r4
   d71a2:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d71a6:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d71a8:	bd38      	pop	{r3, r4, r5, pc}

000d71aa <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d71aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d71ae:	68c4      	ldr	r4, [r0, #12]
   d71b0:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d71b2:	4605      	mov	r5, r0
   d71b4:	460e      	mov	r6, r1
   d71b6:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d71b8:	d207      	bcs.n	d71ca <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d71ba:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d71bc:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d71be:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d71c0:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d71c2:	429c      	cmp	r4, r3
   d71c4:	d903      	bls.n	d71ce <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d71c6:	b9cf      	cbnz	r7, d71fc <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d71c8:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d71ca:	2701      	movs	r7, #1
   d71cc:	e7f7      	b.n	d71be <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d71ce:	42a6      	cmp	r6, r4
   d71d0:	d014      	beq.n	d71fc <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d71d2:	aa01      	add	r2, sp, #4
   d71d4:	4621      	mov	r1, r4
   d71d6:	4628      	mov	r0, r5
   d71d8:	f7ff ff82 	bl	d70e0 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d71dc:	2800      	cmp	r0, #0
   d71de:	db0d      	blt.n	d71fc <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d71e0:	d0ed      	beq.n	d71be <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d71e2:	9b01      	ldr	r3, [sp, #4]
   d71e4:	2b00      	cmp	r3, #0
   d71e6:	d1ea      	bne.n	d71be <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d71e8:	b107      	cbz	r7, d71ec <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d71ea:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d71ec:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d71f0:	4621      	mov	r1, r4
   d71f2:	4628      	mov	r0, r5
   d71f4:	f7ff ffab 	bl	d714e <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d71f8:	4607      	mov	r7, r0
   d71fa:	b908      	cbnz	r0, d7200 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d71fc:	2700      	movs	r7, #0
   d71fe:	e00b      	b.n	d7218 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d7200:	b916      	cbnz	r6, d7208 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d7202:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d7206:	e007      	b.n	d7218 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d7208:	4622      	mov	r2, r4
   d720a:	4631      	mov	r1, r6
   d720c:	4628      	mov	r0, r5
   d720e:	f7ff ff9e 	bl	d714e <_ZN9FatVolume6fatPutEmm>
   d7212:	2800      	cmp	r0, #0
   d7214:	d1f5      	bne.n	d7202 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d7216:	e7f1      	b.n	d71fc <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d7218:	4638      	mov	r0, r7
   d721a:	b002      	add	sp, #8
   d721c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7220 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d7220:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7222:	4605      	mov	r5, r0
   d7224:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d7226:	aa01      	add	r2, sp, #4
   d7228:	4621      	mov	r1, r4
   d722a:	4628      	mov	r0, r5
   d722c:	f7ff ff58 	bl	d70e0 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7230:	1e06      	subs	r6, r0, #0
   d7232:	da01      	bge.n	d7238 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d7234:	2000      	movs	r0, #0
   d7236:	e00f      	b.n	d7258 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d7238:	2200      	movs	r2, #0
   d723a:	4621      	mov	r1, r4
   d723c:	4628      	mov	r0, r5
   d723e:	f7ff ff86 	bl	d714e <_ZN9FatVolume6fatPutEmm>
   d7242:	2800      	cmp	r0, #0
   d7244:	d0f6      	beq.n	d7234 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d7246:	68eb      	ldr	r3, [r5, #12]
   d7248:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d724a:	bf9c      	itt	ls
   d724c:	f104 34ff 	addls.w	r4, r4, #4294967295	; 0xffffffff
   d7250:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d7252:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d7254:	2e00      	cmp	r6, #0
   d7256:	d1e6      	bne.n	d7226 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d7258:	b002      	add	sp, #8
   d725a:	bd70      	pop	{r4, r5, r6, pc}

000d725c <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d725c:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d725e:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d7260:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d7262:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d7264:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d7266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d726a:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d726c:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d726e:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7270:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7274:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d7276:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d727a:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d727e:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d7282:	b1a1      	cbz	r1, d72ae <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d7284:	2904      	cmp	r1, #4
   d7286:	d85d      	bhi.n	d7344 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d7288:	4611      	mov	r1, r2
   d728a:	3024      	adds	r0, #36	; 0x24
   d728c:	f7ff fefe 	bl	d708c <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7290:	2800      	cmp	r0, #0
   d7292:	d057      	beq.n	d7344 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d7294:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d7298:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d729c:	065b      	lsls	r3, r3, #25
   d729e:	d151      	bne.n	d7344 <_ZN9FatVolume4initEh+0xe8>
   d72a0:	351b      	adds	r5, #27
   d72a2:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d72a6:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d72aa:	2d00      	cmp	r5, #0
   d72ac:	d04a      	beq.n	d7344 <_ZN9FatVolume4initEh+0xe8>
   d72ae:	2200      	movs	r2, #0
   d72b0:	4629      	mov	r1, r5
   d72b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d72b6:	f7ff fee9 	bl	d708c <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d72ba:	2800      	cmp	r0, #0
   d72bc:	d042      	beq.n	d7344 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d72be:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d72c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d72c6:	d13d      	bne.n	d7344 <_ZN9FatVolume4initEh+0xe8>
   d72c8:	7c03      	ldrb	r3, [r0, #16]
   d72ca:	2b02      	cmp	r3, #2
   d72cc:	d13a      	bne.n	d7344 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d72ce:	89c3      	ldrh	r3, [r0, #14]
   d72d0:	2b00      	cmp	r3, #0
   d72d2:	d037      	beq.n	d7344 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d72d4:	7b41      	ldrb	r1, [r0, #13]
   d72d6:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d72d8:	1e4b      	subs	r3, r1, #1
   d72da:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d72dc:	2300      	movs	r3, #0
   d72de:	71a3      	strb	r3, [r4, #6]
   d72e0:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d72e2:	2301      	movs	r3, #1
   d72e4:	428b      	cmp	r3, r1
   d72e6:	d007      	beq.n	d72f8 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d72e8:	3e01      	subs	r6, #1
   d72ea:	d02b      	beq.n	d7344 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d72ec:	79a2      	ldrb	r2, [r4, #6]
   d72ee:	005b      	lsls	r3, r3, #1
   d72f0:	3201      	adds	r2, #1
   d72f2:	b2db      	uxtb	r3, r3
   d72f4:	71a2      	strb	r2, [r4, #6]
   d72f6:	e7f5      	b.n	d72e4 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d72f8:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d72fa:	b902      	cbnz	r2, d72fe <_ZN9FatVolume4initEh+0xa2>
   d72fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d72fe:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d7300:	89c6      	ldrh	r6, [r0, #14]
   d7302:	442e      	add	r6, r5
   d7304:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d7306:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d730a:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d730c:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d7310:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d7312:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d7316:	0152      	lsls	r2, r2, #5
   d7318:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d731c:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d7320:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d7322:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d7326:	b903      	cbnz	r3, d732a <_ZN9FatVolume4initEh+0xce>
   d7328:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d732a:	1aad      	subs	r5, r5, r2
   d732c:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d732e:	79a5      	ldrb	r5, [r4, #6]
   d7330:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d7334:	1c6b      	adds	r3, r5, #1
   d7336:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d7338:	f640 73f4 	movw	r3, #4084	; 0xff4
   d733c:	429d      	cmp	r5, r3
   d733e:	d803      	bhi.n	d7348 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d7340:	230c      	movs	r3, #12
   d7342:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d7344:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d7346:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d7348:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d734c:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d734e:	bf85      	ittet	hi
   d7350:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d7352:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d7354:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d7356:	2320      	movhi	r3, #32
   d7358:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d735a:	2001      	movs	r0, #1

fail:
  return false;
}
   d735c:	bd70      	pop	{r4, r5, r6, pc}

000d735e <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d735e:	f000 bd8b 	b.w	d7e78 <HAL_Pin_Map>

000d7362 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d7362:	f000 bd89 	b.w	d7e78 <HAL_Pin_Map>

000d7366 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d7366:	f000 bd87 	b.w	d7e78 <HAL_Pin_Map>

000d736a <_GLOBAL__sub_I__ZN7istream3getEv>:
   d736a:	f000 bd85 	b.w	d7e78 <HAL_Pin_Map>

000d736e <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d736e:	f000 bd83 	b.w	d7e78 <HAL_Pin_Map>
	...

000d7374 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7374:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7376:	4c0e      	ldr	r4, [pc, #56]	; (d73b0 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7378:	460e      	mov	r6, r1
   d737a:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d737c:	f000 fd5c 	bl	d7e38 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7380:	6823      	ldr	r3, [r4, #0]
   d7382:	1ac0      	subs	r0, r0, r3
   d7384:	4b0b      	ldr	r3, [pc, #44]	; (d73b4 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d7386:	4298      	cmp	r0, r3
   d7388:	d908      	bls.n	d739c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d738a:	f000 fd5d 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d738e:	4b0a      	ldr	r3, [pc, #40]	; (d73b8 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d7390:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d7392:	f000 ff6f 	bl	d8274 <spark_process>
   d7396:	f000 fd4f 	bl	d7e38 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d739a:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d739c:	f000 fd54 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d73a0:	b280      	uxth	r0, r0
   d73a2:	1b80      	subs	r0, r0, r6
}
   d73a4:	42a8      	cmp	r0, r5
   d73a6:	bfd4      	ite	le
   d73a8:	2000      	movle	r0, #0
   d73aa:	2001      	movgt	r0, #1
   d73ac:	bd70      	pop	{r4, r5, r6, pc}
   d73ae:	bf00      	nop
   d73b0:	2003e314 	.word	0x2003e314
   d73b4:	000186a0 	.word	0x000186a0
   d73b8:	2003e708 	.word	0x2003e708

000d73bc <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d73bc:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d73be:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d73c0:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d73c2:	b94d      	cbnz	r5, d73d8 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d73c4:	6840      	ldr	r0, [r0, #4]
   d73c6:	f000 fa7d 	bl	d78c4 <_ZN14SdSpiAltDriver8activateEv>
   d73ca:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d73cc:	4629      	mov	r1, r5
   d73ce:	7d18      	ldrb	r0, [r3, #20]
   d73d0:	f004 fdcd 	bl	dbf6e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d73d4:	2301      	movs	r3, #1
   d73d6:	7223      	strb	r3, [r4, #8]
   d73d8:	bd38      	pop	{r3, r4, r5, pc}

000d73da <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d73da:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d73dc:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d73de:	4604      	mov	r4, r0
  if (m_spiActive) {
   d73e0:	b16b      	cbz	r3, d73fe <_ZN9SdSpiCard7spiStopEv+0x24>
   d73e2:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d73e4:	2101      	movs	r1, #1
   d73e6:	7d18      	ldrb	r0, [r3, #20]
   d73e8:	f004 fdc1 	bl	dbf6e <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d73ec:	21ff      	movs	r1, #255	; 0xff
   d73ee:	6860      	ldr	r0, [r4, #4]
   d73f0:	f000 fa9a 	bl	d7928 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d73f4:	6860      	ldr	r0, [r4, #4]
   d73f6:	f000 fa79 	bl	d78ec <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d73fa:	2300      	movs	r3, #0
   d73fc:	7223      	strb	r3, [r4, #8]
   d73fe:	bd10      	pop	{r4, pc}

000d7400 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d7400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7402:	4604      	mov	r4, r0
   d7404:	460d      	mov	r5, r1
   d7406:	4616      	mov	r6, r2
   d7408:	f000 fd1e 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d740c:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d740e:	6860      	ldr	r0, [r4, #4]
   d7410:	f000 fa6f 	bl	d78f2 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d7414:	28ff      	cmp	r0, #255	; 0xff
   d7416:	7260      	strb	r0, [r4, #9]
   d7418:	d109      	bne.n	d742e <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d741a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d741e:	4639      	mov	r1, r7
   d7420:	4620      	mov	r0, r4
   d7422:	f7ff ffa7 	bl	d7374 <_ZN9SdSpiCard10isTimedOutEtt>
   d7426:	2800      	cmp	r0, #0
   d7428:	d0f1      	beq.n	d740e <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d742a:	2355      	movs	r3, #85	; 0x55
   d742c:	e00b      	b.n	d7446 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d742e:	28fe      	cmp	r0, #254	; 0xfe
   d7430:	d001      	beq.n	d7436 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d7432:	2350      	movs	r3, #80	; 0x50
   d7434:	e007      	b.n	d7446 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d7436:	4632      	mov	r2, r6
   d7438:	4629      	mov	r1, r5
   d743a:	6860      	ldr	r0, [r4, #4]
   d743c:	f000 fa5e 	bl	d78fc <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d7440:	7260      	strb	r0, [r4, #9]
   d7442:	b130      	cbz	r0, d7452 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7444:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d7446:	4620      	mov	r0, r4
   d7448:	7023      	strb	r3, [r4, #0]
   d744a:	f7ff ffc6 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d744e:	2000      	movs	r0, #0
}
   d7450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7452:	6860      	ldr	r0, [r4, #4]
   d7454:	f000 fa4d 	bl	d78f2 <_ZN14SdSpiAltDriver7receiveEv>
   d7458:	6860      	ldr	r0, [r4, #4]
   d745a:	f000 fa4a 	bl	d78f2 <_ZN14SdSpiAltDriver7receiveEv>
   d745e:	2001      	movs	r0, #1
   d7460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7462 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d7462:	b570      	push	{r4, r5, r6, lr}
   d7464:	4604      	mov	r4, r0
   d7466:	460e      	mov	r6, r1
   d7468:	f000 fcee 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
   d746c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d746e:	4632      	mov	r2, r6
   d7470:	4629      	mov	r1, r5
   d7472:	4620      	mov	r0, r4
   d7474:	f7ff ff7e 	bl	d7374 <_ZN9SdSpiCard10isTimedOutEtt>
   d7478:	b930      	cbnz	r0, d7488 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d747a:	6860      	ldr	r0, [r4, #4]
   d747c:	f000 fa39 	bl	d78f2 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d7480:	28ff      	cmp	r0, #255	; 0xff
   d7482:	d1f4      	bne.n	d746e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d7484:	2001      	movs	r0, #1
   d7486:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d7488:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d748a:	bd70      	pop	{r4, r5, r6, pc}

000d748c <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d748c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d748e:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7490:	9201      	str	r2, [sp, #4]
   d7492:	4604      	mov	r4, r0
   d7494:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d7496:	b90b      	cbnz	r3, d749c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d7498:	f7ff ff90 	bl	d73bc <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d749c:	b125      	cbz	r5, d74a8 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d749e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d74a2:	4620      	mov	r0, r4
   d74a4:	f7ff ffdd 	bl	d7462 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d74a8:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d74ac:	6860      	ldr	r0, [r4, #4]
   d74ae:	f000 fa3b 	bl	d7928 <_ZN14SdSpiAltDriver4sendEh>
   d74b2:	f10d 0607 	add.w	r6, sp, #7
   d74b6:	f10d 0703 	add.w	r7, sp, #3
   d74ba:	f816 1901 	ldrb.w	r1, [r6], #-1
   d74be:	6860      	ldr	r0, [r4, #4]
   d74c0:	f000 fa32 	bl	d7928 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d74c4:	42be      	cmp	r6, r7
   d74c6:	d1f8      	bne.n	d74ba <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d74c8:	2d00      	cmp	r5, #0
   d74ca:	bf0c      	ite	eq
   d74cc:	2195      	moveq	r1, #149	; 0x95
   d74ce:	2187      	movne	r1, #135	; 0x87
   d74d0:	6860      	ldr	r0, [r4, #4]
   d74d2:	f000 fa29 	bl	d7928 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d74d6:	6860      	ldr	r0, [r4, #4]
   d74d8:	f000 fa0b 	bl	d78f2 <_ZN14SdSpiAltDriver7receiveEv>
   d74dc:	250b      	movs	r5, #11
   d74de:	6860      	ldr	r0, [r4, #4]
   d74e0:	f000 fa07 	bl	d78f2 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d74e4:	0603      	lsls	r3, r0, #24
   d74e6:	7260      	strb	r0, [r4, #9]
   d74e8:	d503      	bpl.n	d74f2 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d74ea:	3d01      	subs	r5, #1
   d74ec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d74f0:	d1f5      	bne.n	d74de <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d74f2:	b003      	add	sp, #12
   d74f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d74f6 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d74f6:	b570      	push	{r4, r5, r6, lr}
   d74f8:	4604      	mov	r4, r0
   d74fa:	460d      	mov	r5, r1
   d74fc:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d74fe:	2137      	movs	r1, #55	; 0x37
   d7500:	2200      	movs	r2, #0
   d7502:	f7ff ffc3 	bl	d748c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d7506:	4632      	mov	r2, r6
   d7508:	4629      	mov	r1, r5
   d750a:	4620      	mov	r0, r4
  }
   d750c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d7510:	f7ff bfbc 	b.w	d748c <_ZN9SdSpiCard11cardCommandEhm>

000d7514 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d7518:	2500      	movs	r5, #0
   d751a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d751c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d751e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d7520:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7522:	4604      	mov	r4, r0
   d7524:	4690      	mov	r8, r2
   d7526:	461e      	mov	r6, r3
   d7528:	f000 fc8e 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d752c:	4641      	mov	r1, r8
   d752e:	4607      	mov	r7, r0
   d7530:	6860      	ldr	r0, [r4, #4]
   d7532:	f000 f9cb 	bl	d78cc <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d7536:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d7538:	4a4f      	ldr	r2, [pc, #316]	; (d7678 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d753a:	721d      	strb	r5, [r3, #8]
   d753c:	f04f 0801 	mov.w	r8, #1
   d7540:	60da      	str	r2, [r3, #12]
   d7542:	745d      	strb	r5, [r3, #17]
   d7544:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d7548:	4620      	mov	r0, r4
   d754a:	f7ff ff37 	bl	d73bc <_ZN9SdSpiCard8spiStartEv>
   d754e:	6863      	ldr	r3, [r4, #4]
   d7550:	4641      	mov	r1, r8
   d7552:	7d18      	ldrb	r0, [r3, #20]
   d7554:	f004 fd0b 	bl	dbf6e <digitalWrite>
   d7558:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d755a:	21ff      	movs	r1, #255	; 0xff
   d755c:	6860      	ldr	r0, [r4, #4]
   d755e:	3d01      	subs	r5, #1
   d7560:	f000 f9e2 	bl	d7928 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d7564:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7568:	d1f7      	bne.n	d755a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d756a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d756c:	4629      	mov	r1, r5
   d756e:	7d18      	ldrb	r0, [r3, #20]
   d7570:	f004 fcfd 	bl	dbf6e <digitalWrite>
   d7574:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d7576:	2200      	movs	r2, #0
   d7578:	4611      	mov	r1, r2
   d757a:	4620      	mov	r0, r4
   d757c:	f7ff ff86 	bl	d748c <_ZN9SdSpiCard11cardCommandEhm>
   d7580:	2801      	cmp	r0, #1
   d7582:	4680      	mov	r8, r0
   d7584:	d012      	beq.n	d75ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d7586:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d7588:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d758c:	d101      	bne.n	d7592 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d758e:	2320      	movs	r3, #32
   d7590:	e057      	b.n	d7642 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7592:	21fd      	movs	r1, #253	; 0xfd
   d7594:	6860      	ldr	r0, [r4, #4]
   d7596:	f000 f9c7 	bl	d7928 <_ZN14SdSpiAltDriver4sendEh>
   d759a:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d759e:	6860      	ldr	r0, [r4, #4]
   d75a0:	f000 f9a7 	bl	d78f2 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d75a4:	f1b8 0801 	subs.w	r8, r8, #1
   d75a8:	d1f9      	bne.n	d759e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d75aa:	e7e4      	b.n	d7576 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d75ac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d75b0:	2108      	movs	r1, #8
   d75b2:	4620      	mov	r0, r4
   d75b4:	f7ff ff6a 	bl	d748c <_ZN9SdSpiCard11cardCommandEhm>
   d75b8:	2805      	cmp	r0, #5
   d75ba:	d102      	bne.n	d75c2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d75bc:	f884 800a 	strb.w	r8, [r4, #10]
   d75c0:	e00f      	b.n	d75e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d75c2:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d75c4:	6860      	ldr	r0, [r4, #4]
   d75c6:	f000 f994 	bl	d78f2 <_ZN14SdSpiAltDriver7receiveEv>
   d75ca:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d75cc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d75d0:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d75d2:	d1f7      	bne.n	d75c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d75d4:	28aa      	cmp	r0, #170	; 0xaa
   d75d6:	d102      	bne.n	d75de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d75d8:	2302      	movs	r3, #2
   d75da:	72a3      	strb	r3, [r4, #10]
   d75dc:	e001      	b.n	d75e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d75de:	2325      	movs	r3, #37	; 0x25
   d75e0:	e02f      	b.n	d7642 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d75e2:	7aa3      	ldrb	r3, [r4, #10]
   d75e4:	2b02      	cmp	r3, #2
   d75e6:	bf0c      	ite	eq
   d75e8:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d75ec:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d75ee:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d75f0:	462a      	mov	r2, r5
   d75f2:	2129      	movs	r1, #41	; 0x29
   d75f4:	4620      	mov	r0, r4
   d75f6:	f7ff ff7e 	bl	d74f6 <_ZN9SdSpiCard8cardAcmdEhm>
   d75fa:	4602      	mov	r2, r0
   d75fc:	b148      	cbz	r0, d7612 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d75fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d7602:	4639      	mov	r1, r7
   d7604:	4620      	mov	r0, r4
   d7606:	f7ff feb5 	bl	d7374 <_ZN9SdSpiCard10isTimedOutEtt>
   d760a:	2800      	cmp	r0, #0
   d760c:	d0f0      	beq.n	d75f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d760e:	2343      	movs	r3, #67	; 0x43
   d7610:	e017      	b.n	d7642 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d7612:	7aa3      	ldrb	r3, [r4, #10]
   d7614:	2b02      	cmp	r3, #2
   d7616:	d00e      	beq.n	d7636 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d7618:	4620      	mov	r0, r4
   d761a:	f7ff fede 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d761e:	6863      	ldr	r3, [r4, #4]
   d7620:	68b0      	ldr	r0, [r6, #8]
   d7622:	7934      	ldrb	r4, [r6, #4]
   d7624:	7b31      	ldrb	r1, [r6, #12]
   d7626:	7b72      	ldrb	r2, [r6, #13]
   d7628:	745a      	strb	r2, [r3, #17]
   d762a:	60d8      	str	r0, [r3, #12]
   d762c:	721c      	strb	r4, [r3, #8]
   d762e:	7419      	strb	r1, [r3, #16]
  return true;
   d7630:	2001      	movs	r0, #1
   d7632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d7636:	213a      	movs	r1, #58	; 0x3a
   d7638:	4620      	mov	r0, r4
   d763a:	f7ff ff27 	bl	d748c <_ZN9SdSpiCard11cardCommandEhm>
   d763e:	b138      	cbz	r0, d7650 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d7640:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d7642:	4620      	mov	r0, r4
   d7644:	7023      	strb	r3, [r4, #0]
   d7646:	f7ff fec8 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d764a:	2000      	movs	r0, #0
}
   d764c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7650:	6860      	ldr	r0, [r4, #4]
   d7652:	f000 f94e 	bl	d78f2 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d7656:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d765a:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d765c:	bf04      	itt	eq
   d765e:	2303      	moveq	r3, #3
   d7660:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7662:	6860      	ldr	r0, [r4, #4]
   d7664:	f000 f945 	bl	d78f2 <_ZN14SdSpiAltDriver7receiveEv>
   d7668:	6860      	ldr	r0, [r4, #4]
   d766a:	f000 f942 	bl	d78f2 <_ZN14SdSpiAltDriver7receiveEv>
   d766e:	6860      	ldr	r0, [r4, #4]
   d7670:	f000 f93f 	bl	d78f2 <_ZN14SdSpiAltDriver7receiveEv>
   d7674:	e7d0      	b.n	d7618 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d7676:	bf00      	nop
   d7678:	0003d090 	.word	0x0003d090

000d767c <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d767c:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d767e:	7a83      	ldrb	r3, [r0, #10]
   d7680:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7682:	bf18      	it	ne
   d7684:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7686:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7688:	460a      	mov	r2, r1
   d768a:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d768c:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d768e:	f7ff fefd 	bl	d748c <_ZN9SdSpiCard11cardCommandEhm>
   d7692:	b110      	cbz	r0, d769a <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7694:	2330      	movs	r3, #48	; 0x30
   d7696:	7023      	strb	r3, [r4, #0]
   d7698:	e00b      	b.n	d76b2 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d769a:	4629      	mov	r1, r5
   d769c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d76a0:	4620      	mov	r0, r4
   d76a2:	f7ff fead 	bl	d7400 <_ZN9SdSpiCard8readDataEPhj>
   d76a6:	4605      	mov	r5, r0
   d76a8:	b118      	cbz	r0, d76b2 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d76aa:	4620      	mov	r0, r4
   d76ac:	f7ff fe95 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  return true;
   d76b0:	e003      	b.n	d76ba <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d76b2:	4620      	mov	r0, r4
   d76b4:	f7ff fe91 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d76b8:	2500      	movs	r5, #0
}
   d76ba:	4628      	mov	r0, r5
   d76bc:	bd38      	pop	{r3, r4, r5, pc}

000d76be <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d76be:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d76c0:	7a83      	ldrb	r3, [r0, #10]
   d76c2:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d76c4:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d76c6:	bf18      	it	ne
   d76c8:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d76ca:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d76cc:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d76ce:	f7ff fedd 	bl	d748c <_ZN9SdSpiCard11cardCommandEhm>
   d76d2:	b130      	cbz	r0, d76e2 <_ZN9SdSpiCard9readStartEm+0x24>
   d76d4:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d76d6:	4620      	mov	r0, r4
   d76d8:	7023      	strb	r3, [r4, #0]
   d76da:	f7ff fe7e 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d76de:	2000      	movs	r0, #0
   d76e0:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d76e2:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d76e4:	bd10      	pop	{r4, pc}

000d76e6 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d76e6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d76e8:	2200      	movs	r2, #0
   d76ea:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d76ec:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d76ee:	f7ff fecd 	bl	d748c <_ZN9SdSpiCard11cardCommandEhm>
   d76f2:	b130      	cbz	r0, d7702 <_ZN9SdSpiCard8readStopEv+0x1c>
   d76f4:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d76f6:	4620      	mov	r0, r4
   d76f8:	7023      	strb	r3, [r4, #0]
   d76fa:	f7ff fe6e 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d76fe:	2000      	movs	r0, #0
   d7700:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d7702:	4620      	mov	r0, r4
   d7704:	f7ff fe69 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7708:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d770a:	bd10      	pop	{r4, pc}

000d770c <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d770e:	4605      	mov	r5, r0
   d7710:	4616      	mov	r6, r2
   d7712:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d7714:	f7ff ffd3 	bl	d76be <_ZN9SdSpiCard9readStartEm>
   d7718:	b198      	cbz	r0, d7742 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d771a:	2400      	movs	r4, #0
   d771c:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d771e:	429f      	cmp	r7, r3
   d7720:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d7724:	d908      	bls.n	d7738 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d7726:	f44f 7200 	mov.w	r2, #512	; 0x200
   d772a:	4628      	mov	r0, r5
   d772c:	f7ff fe68 	bl	d7400 <_ZN9SdSpiCard8readDataEPhj>
   d7730:	3401      	adds	r4, #1
   d7732:	2800      	cmp	r0, #0
   d7734:	d1f2      	bne.n	d771c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d7736:	e004      	b.n	d7742 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d7738:	4628      	mov	r0, r5
}
   d773a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d773e:	f7ff bfd2 	b.w	d76e6 <_ZN9SdSpiCard8readStopEv>
}
   d7742:	2000      	movs	r0, #0
   d7744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7746 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d7746:	b538      	push	{r3, r4, r5, lr}
   d7748:	4604      	mov	r4, r0
   d774a:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d774c:	6840      	ldr	r0, [r0, #4]
   d774e:	f000 f8eb 	bl	d7928 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d7752:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7756:	4629      	mov	r1, r5
   d7758:	6860      	ldr	r0, [r4, #4]
   d775a:	f000 f8e9 	bl	d7930 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d775e:	21ff      	movs	r1, #255	; 0xff
   d7760:	6860      	ldr	r0, [r4, #4]
   d7762:	f000 f8e1 	bl	d7928 <_ZN14SdSpiAltDriver4sendEh>
   d7766:	21ff      	movs	r1, #255	; 0xff
   d7768:	6860      	ldr	r0, [r4, #4]
   d776a:	f000 f8dd 	bl	d7928 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d776e:	6860      	ldr	r0, [r4, #4]
   d7770:	f000 f8bf 	bl	d78f2 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d7774:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d7776:	f000 001f 	and.w	r0, r0, #31
   d777a:	2805      	cmp	r0, #5
   d777c:	d006      	beq.n	d778c <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d777e:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7780:	4620      	mov	r0, r4
   d7782:	7023      	strb	r3, [r4, #0]
   d7784:	f7ff fe29 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7788:	2000      	movs	r0, #0
   d778a:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d778c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d778e:	bd38      	pop	{r3, r4, r5, pc}

000d7790 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7790:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7792:	7a83      	ldrb	r3, [r0, #10]
   d7794:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7796:	bf18      	it	ne
   d7798:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d779a:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d779c:	460a      	mov	r2, r1
   d779e:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d77a0:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d77a2:	f7ff fe73 	bl	d748c <_ZN9SdSpiCard11cardCommandEhm>
   d77a6:	4606      	mov	r6, r0
   d77a8:	b108      	cbz	r0, d77ae <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d77aa:	2332      	movs	r3, #50	; 0x32
   d77ac:	e01d      	b.n	d77ea <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d77ae:	462a      	mov	r2, r5
   d77b0:	21fe      	movs	r1, #254	; 0xfe
   d77b2:	4620      	mov	r0, r4
   d77b4:	f7ff ffc7 	bl	d7746 <_ZN9SdSpiCard9writeDataEhPKh>
   d77b8:	b1c0      	cbz	r0, d77ec <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d77ba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d77be:	4620      	mov	r0, r4
   d77c0:	f7ff fe4f 	bl	d7462 <_ZN9SdSpiCard11waitNotBusyEt>
   d77c4:	4605      	mov	r5, r0
   d77c6:	b908      	cbnz	r0, d77cc <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d77c8:	235a      	movs	r3, #90	; 0x5a
   d77ca:	e00e      	b.n	d77ea <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d77cc:	4632      	mov	r2, r6
   d77ce:	210d      	movs	r1, #13
   d77d0:	4620      	mov	r0, r4
   d77d2:	f7ff fe5b 	bl	d748c <_ZN9SdSpiCard11cardCommandEhm>
   d77d6:	b938      	cbnz	r0, d77e8 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d77d8:	6860      	ldr	r0, [r4, #4]
   d77da:	f000 f88a 	bl	d78f2 <_ZN14SdSpiAltDriver7receiveEv>
   d77de:	b918      	cbnz	r0, d77e8 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d77e0:	4620      	mov	r0, r4
   d77e2:	f7ff fdfa 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  return true;
   d77e6:	e005      	b.n	d77f4 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d77e8:	2329      	movs	r3, #41	; 0x29
   d77ea:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d77ec:	4620      	mov	r0, r4
   d77ee:	f7ff fdf4 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d77f2:	2500      	movs	r5, #0
}
   d77f4:	4628      	mov	r0, r5
   d77f6:	bd70      	pop	{r4, r5, r6, pc}

000d77f8 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d77f8:	b538      	push	{r3, r4, r5, lr}
   d77fa:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d77fc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d7800:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7802:	f7ff fe2e 	bl	d7462 <_ZN9SdSpiCard11waitNotBusyEt>
   d7806:	b910      	cbnz	r0, d780e <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d7808:	235b      	movs	r3, #91	; 0x5b
   d780a:	7023      	strb	r3, [r4, #0]
   d780c:	e005      	b.n	d781a <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d780e:	462a      	mov	r2, r5
   d7810:	21fc      	movs	r1, #252	; 0xfc
   d7812:	4620      	mov	r0, r4
   d7814:	f7ff ff97 	bl	d7746 <_ZN9SdSpiCard9writeDataEhPKh>
   d7818:	b918      	cbnz	r0, d7822 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d781a:	4620      	mov	r0, r4
   d781c:	f7ff fddd 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7820:	2000      	movs	r0, #0
}
   d7822:	bd38      	pop	{r3, r4, r5, pc}

000d7824 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7824:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7826:	7a83      	ldrb	r3, [r0, #10]
   d7828:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d782a:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d782c:	bf18      	it	ne
   d782e:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7830:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7832:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7834:	f7ff fe2a 	bl	d748c <_ZN9SdSpiCard11cardCommandEhm>
   d7838:	b130      	cbz	r0, d7848 <_ZN9SdSpiCard10writeStartEm+0x24>
   d783a:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d783c:	4620      	mov	r0, r4
   d783e:	7023      	strb	r3, [r4, #0]
   d7840:	f7ff fdcb 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7844:	2000      	movs	r0, #0
   d7846:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d7848:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d784a:	bd10      	pop	{r4, pc}

000d784c <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d784c:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d784e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7852:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7854:	f7ff fe05 	bl	d7462 <_ZN9SdSpiCard11waitNotBusyEt>
   d7858:	4605      	mov	r5, r0
   d785a:	b120      	cbz	r0, d7866 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d785c:	21fd      	movs	r1, #253	; 0xfd
   d785e:	6860      	ldr	r0, [r4, #4]
   d7860:	f000 f862 	bl	d7928 <_ZN14SdSpiAltDriver4sendEh>
   d7864:	e001      	b.n	d786a <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7866:	2356      	movs	r3, #86	; 0x56
   d7868:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d786a:	4620      	mov	r0, r4
   d786c:	f7ff fdb5 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7870:	4628      	mov	r0, r5
   d7872:	bd38      	pop	{r3, r4, r5, pc}

000d7874 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7876:	4605      	mov	r5, r0
   d7878:	4616      	mov	r6, r2
   d787a:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d787c:	f7ff ffd2 	bl	d7824 <_ZN9SdSpiCard10writeStartEm>
   d7880:	b170      	cbz	r0, d78a0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d7882:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7884:	42bc      	cmp	r4, r7
   d7886:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d788a:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d788c:	d004      	beq.n	d7898 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d788e:	f7ff ffb3 	bl	d77f8 <_ZN9SdSpiCard9writeDataEPKh>
   d7892:	b128      	cbz	r0, d78a0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7894:	3401      	adds	r4, #1
   d7896:	e7f5      	b.n	d7884 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d7898:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d789c:	f7ff bfd6 	b.w	d784c <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d78a0:	4628      	mov	r0, r5
   d78a2:	f7ff fd9a 	bl	d73da <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d78a6:	2000      	movs	r0, #0
   d78a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d78aa <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d78aa:	f000 bae5 	b.w	d7e78 <HAL_Pin_Map>

000d78ae <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d78ae:	f000 bae3 	b.w	d7e78 <HAL_Pin_Map>

000d78b2 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d78b2:	f000 bae1 	b.w	d7e78 <HAL_Pin_Map>
	...

000d78b8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d78b8:	4b01      	ldr	r3, [pc, #4]	; (d78c0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d78ba:	2201      	movs	r2, #1
   d78bc:	701a      	strb	r2, [r3, #0]
   d78be:	4770      	bx	lr
   d78c0:	2003e318 	.word	0x2003e318

000d78c4 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d78c4:	1d01      	adds	r1, r0, #4
   d78c6:	6800      	ldr	r0, [r0, #0]
   d78c8:	f003 bed0 	b.w	db66c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d78cc <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d78cc:	b510      	push	{r4, lr}
   d78ce:	4604      	mov	r4, r0
  m_csPin = csPin;
   d78d0:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d78d2:	6800      	ldr	r0, [r0, #0]
   d78d4:	f003 fe8c 	bl	db5f0 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d78d8:	7d20      	ldrb	r0, [r4, #20]
   d78da:	2101      	movs	r1, #1
   d78dc:	f004 fb36 	bl	dbf4c <pinMode>
  digitalWrite(m_csPin, HIGH);
   d78e0:	7d20      	ldrb	r0, [r4, #20]
   d78e2:	2101      	movs	r1, #1
}
   d78e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d78e8:	f004 bb41 	b.w	dbf6e <digitalWrite>

000d78ec <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d78ec:	6800      	ldr	r0, [r0, #0]
   d78ee:	f003 bea4 	b.w	db63a <_ZN8SPIClass14endTransactionEv>

000d78f2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d78f2:	21ff      	movs	r1, #255	; 0xff
   d78f4:	6800      	ldr	r0, [r0, #0]
   d78f6:	f003 bf5b 	b.w	db7b0 <_ZN8SPIClass8transferEh>
	...

000d78fc <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d78fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d78fe:	4b08      	ldr	r3, [pc, #32]	; (d7920 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d7900:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7902:	2500      	movs	r5, #0
   d7904:	4c07      	ldr	r4, [pc, #28]	; (d7924 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7906:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7908:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d790a:	4613      	mov	r3, r2
   d790c:	460a      	mov	r2, r1
   d790e:	4629      	mov	r1, r5
   d7910:	f003 ff54 	bl	db7bc <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7914:	7823      	ldrb	r3, [r4, #0]
   d7916:	2b00      	cmp	r3, #0
   d7918:	d0fc      	beq.n	d7914 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d791a:	2000      	movs	r0, #0
   d791c:	b003      	add	sp, #12
   d791e:	bd30      	pop	{r4, r5, pc}
   d7920:	000d78b9 	.word	0x000d78b9
   d7924:	2003e318 	.word	0x2003e318

000d7928 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d7928:	6800      	ldr	r0, [r0, #0]
   d792a:	f003 bf41 	b.w	db7b0 <_ZN8SPIClass8transferEh>
	...

000d7930 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d7930:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7932:	4b07      	ldr	r3, [pc, #28]	; (d7950 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d7934:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7936:	2500      	movs	r5, #0
   d7938:	4c06      	ldr	r4, [pc, #24]	; (d7954 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d793a:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d793c:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d793e:	4613      	mov	r3, r2
   d7940:	462a      	mov	r2, r5
   d7942:	f003 ff3b 	bl	db7bc <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d7946:	7823      	ldrb	r3, [r4, #0]
   d7948:	2b00      	cmp	r3, #0
   d794a:	d0fc      	beq.n	d7946 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d794c:	b003      	add	sp, #12
   d794e:	bd30      	pop	{r4, r5, pc}
   d7950:	000d78b9 	.word	0x000d78b9
   d7954:	2003e318 	.word	0x2003e318

000d7958 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d7958:	f000 ba8e 	b.w	d7e78 <HAL_Pin_Map>

000d795c <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d795c:	f000 ba8c 	b.w	d7e78 <HAL_Pin_Map>

000d7960 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d7960:	f000 ba8a 	b.w	d7e78 <HAL_Pin_Map>

000d7964 <_ZN13SFE_UBLOX_GPSC1Ev>:
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "SparkFun_Ublox_Arduino_Library.h"

SFE_UBLOX_GPS::SFE_UBLOX_GPS(void)
   d7964:	b570      	push	{r4, r5, r6, lr}
   d7966:	2342      	movs	r3, #66	; 0x42
   d7968:	2500      	movs	r5, #0
   d796a:	2610      	movs	r6, #16
   d796c:	4604      	mov	r4, r0
   d796e:	8105      	strh	r5, [r0, #8]
   d7970:	7285      	strb	r5, [r0, #10]
   d7972:	72c5      	strb	r5, [r0, #11]
   d7974:	7305      	strb	r5, [r0, #12]
   d7976:	6145      	str	r5, [r0, #20]
   d7978:	7603      	strb	r3, [r0, #24]
   d797a:	4632      	mov	r2, r6
   d797c:	4629      	mov	r1, r5
   d797e:	305c      	adds	r0, #92	; 0x5c
   d7980:	f005 faf5 	bl	dcf6e <memset>
   d7984:	f104 0319 	add.w	r3, r4, #25
   d7988:	6663      	str	r3, [r4, #100]	; 0x64
   d798a:	4632      	mov	r2, r6
   d798c:	4629      	mov	r1, r5
   d798e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   d7992:	f005 faec 	bl	dcf6e <memset>
   d7996:	f104 031b 	add.w	r3, r4, #27
   d799a:	6763      	str	r3, [r4, #116]	; 0x74
   d799c:	2319      	movs	r3, #25
   d799e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
   d79a2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   d79a6:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
   d79aa:	f8a4 5086 	strh.w	r5, [r4, #134]	; 0x86
{
  // Constructor
}
   d79ae:	4620      	mov	r0, r4
   d79b0:	bd70      	pop	{r4, r5, r6, pc}

000d79b2 <_ZN13SFE_UBLOX_GPS5beginER7TwoWire>:

//Initialize the Serial port
void SFE_UBLOX_GPS::begin(TwoWire &wirePort)
{
   d79b2:	b510      	push	{r4, lr}
	commType = COMM_TYPE_I2C;
   d79b4:	2300      	movs	r3, #0
   d79b6:	7303      	strb	r3, [r0, #12]
  // Constructor
}

//Initialize the Serial port
void SFE_UBLOX_GPS::begin(TwoWire &wirePort)
{
   d79b8:	4604      	mov	r4, r0
	commType = COMM_TYPE_I2C;
	_i2cPort = &wirePort; //Grab which port the user wants us to use
   d79ba:	6101      	str	r1, [r0, #16]

	//We expect caller to begin their I2C port, with the speed of their choice external to the library
	//But if they forget, we start the hardware here.
	_i2cPort->begin();
   d79bc:	4608      	mov	r0, r1
   d79be:	f002 f99d 	bl	d9cfc <_ZN7TwoWire5beginEv>
//Sets the internal global variable that is the I2C address we read from
//This does not change the I2C address of the module
//0x42 is the default but can be changed via software command
void SFE_UBLOX_GPS::setI2CReadAddress(uint8_t deviceAddress)
{
	_gpsI2Caddress = deviceAddress; //Store the I2C address from user
   d79c2:	2342      	movs	r3, #66	; 0x42
   d79c4:	7623      	strb	r3, [r4, #24]
   d79c6:	bd10      	pop	{r4, pc}

000d79c8 <_ZN13SFE_UBLOX_GPS11processRTCMEh>:

//This function is called for each byte of an RTCM frame
//Ths user can overwrite this function and process the RTCM frame as they please
//Bytes can be piped to Serial or other interface. The consumer could be a radio or the internet (Ntrip broadcaster)
void SFE_UBLOX_GPS::processRTCM(uint8_t incoming)
{
   d79c8:	4770      	bx	lr

000d79ca <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket>:
  incomingUBX->counter++;
}

//Once a packet has been received and validated, identify this packet's class/id and update internal flags
void SFE_UBLOX_GPS::processUBXpacket(ubxPacket *msg)
{
   d79ca:	b510      	push	{r4, lr}
  if (msg->cls == UBX_CLASS_ACK)
   d79cc:	780b      	ldrb	r3, [r1, #0]
   d79ce:	2b05      	cmp	r3, #5
   d79d0:	d10f      	bne.n	d79f2 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x28>
  {
    //We don't want to store ACK packets, just set commandAck flag
    if (msg->id == UBX_ACK_ACK)
   d79d2:	784b      	ldrb	r3, [r1, #1]
   d79d4:	2b01      	cmp	r3, #1
   d79d6:	d10c      	bne.n	d79f2 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x28>
    {
      if (msg->payload[0] == packetCfg.cls && msg->payload[1] == packetCfg.id)
   d79d8:	688a      	ldr	r2, [r1, #8]
   d79da:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
   d79de:	7814      	ldrb	r4, [r2, #0]
   d79e0:	428c      	cmp	r4, r1
   d79e2:	d106      	bne.n	d79f2 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x28>
   d79e4:	7851      	ldrb	r1, [r2, #1]
   d79e6:	f890 206d 	ldrb.w	r2, [r0, #109]	; 0x6d
   d79ea:	4291      	cmp	r1, r2
      {
        //The ack we just received matched the CLS/ID of last packetCfg sent
        //Serial.println("Command sent/ack'd successfully");
        commandAck = true;
   d79ec:	bf08      	it	eq
   d79ee:	f880 3084 	strbeq.w	r3, [r0, #132]	; 0x84
   d79f2:	bd10      	pop	{r4, pc}

000d79f4 <_ZN13SFE_UBLOX_GPS11isConnectedEv>:
  return (true);
}

//Returns true if I2C device ack's
boolean SFE_UBLOX_GPS::isConnected()
{
   d79f4:	b510      	push	{r4, lr}
   d79f6:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   d79f8:	7e01      	ldrb	r1, [r0, #24]
   d79fa:	6900      	ldr	r0, [r0, #16]
   d79fc:	f002 f9b5 	bl	d9d6a <_ZN7TwoWire17beginTransmissionEh>
  if (_i2cPort->endTransmission() != 0)
   d7a00:	6920      	ldr	r0, [r4, #16]
   d7a02:	f002 f9bd 	bl	d9d80 <_ZN7TwoWire15endTransmissionEv>
    return (false); //Sensor did not ACK
  return (true);
}
   d7a06:	fab0 f080 	clz	r0, r0
   d7a0a:	0940      	lsrs	r0, r0, #5
   d7a0c:	bd10      	pop	{r4, pc}

000d7a0e <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket>:
void SFE_UBLOX_GPS::calcChecksum(ubxPacket *msg)
{
  msg->checksumA = 0;
  msg->checksumB = 0;

  msg->checksumA += msg->cls;
   d7a0e:	780a      	ldrb	r2, [r1, #0]
  msg->checksumB += msg->checksumA;

  msg->checksumA += msg->id;
   d7a10:	7848      	ldrb	r0, [r1, #1]
  return (true);
}

//Given a message, calc and store the two byte "8-Bit Fletcher" checksum
void SFE_UBLOX_GPS::calcChecksum(ubxPacket *msg)
{
   d7a12:	b530      	push	{r4, r5, lr}
  msg->checksumB = 0;

  msg->checksumA += msg->cls;
  msg->checksumB += msg->checksumA;

  msg->checksumA += msg->id;
   d7a14:	4410      	add	r0, r2
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len & 0xFF);
   d7a16:	884d      	ldrh	r5, [r1, #2]
  msg->checksumB = 0;

  msg->checksumA += msg->cls;
  msg->checksumB += msg->checksumA;

  msg->checksumA += msg->id;
   d7a18:	b2c3      	uxtb	r3, r0
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len & 0xFF);
   d7a1a:	195c      	adds	r4, r3, r5
   d7a1c:	b2e4      	uxtb	r4, r4
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len >> 8);
  msg->checksumB += msg->checksumA;
   d7a1e:	441a      	add	r2, r3
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len & 0xFF);
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len >> 8);
   d7a20:	eb04 2015 	add.w	r0, r4, r5, lsr #8
   d7a24:	b2c0      	uxtb	r0, r0
  msg->checksumB += msg->checksumA;
   d7a26:	18a3      	adds	r3, r4, r2
   d7a28:	4403      	add	r3, r0
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len & 0xFF);
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len >> 8);
   d7a2a:	7308      	strb	r0, [r1, #12]
  msg->checksumB += msg->checksumA;
   d7a2c:	734b      	strb	r3, [r1, #13]
   d7a2e:	2200      	movs	r2, #0

  for (uint16_t i = 0 ; i < msg->len; i++)
   d7a30:	b293      	uxth	r3, r2
   d7a32:	42ab      	cmp	r3, r5
   d7a34:	d20a      	bcs.n	d7a4c <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket+0x3e>
  {
    msg->checksumA += msg->payload[i];
   d7a36:	688b      	ldr	r3, [r1, #8]
   d7a38:	5c98      	ldrb	r0, [r3, r2]
   d7a3a:	7b0b      	ldrb	r3, [r1, #12]
   d7a3c:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   d7a3e:	7b48      	ldrb	r0, [r1, #13]
  msg->checksumA += (msg->len >> 8);
  msg->checksumB += msg->checksumA;

  for (uint16_t i = 0 ; i < msg->len; i++)
  {
    msg->checksumA += msg->payload[i];
   d7a40:	b2db      	uxtb	r3, r3
   d7a42:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   d7a44:	4403      	add	r3, r0
   d7a46:	734b      	strb	r3, [r1, #13]
   d7a48:	3201      	adds	r2, #1
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len >> 8);
  msg->checksumB += msg->checksumA;

  for (uint16_t i = 0 ; i < msg->len; i++)
   d7a4a:	e7f1      	b.n	d7a30 <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket+0x22>
   d7a4c:	bd30      	pop	{r4, r5, pc}

000d7a4e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket>:
}	

//Given a character, file it away into the uxb packet structure
//Set valid = true once sentence is completely received and passes CRC
void SFE_UBLOX_GPS::processUBX(uint8_t incoming, ubxPacket *incomingUBX)
{
   d7a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (incomingUBX->counter == 0)
   d7a50:	7913      	ldrb	r3, [r2, #4]
}	

//Given a character, file it away into the uxb packet structure
//Set valid = true once sentence is completely received and passes CRC
void SFE_UBLOX_GPS::processUBX(uint8_t incoming, ubxPacket *incomingUBX)
{
   d7a52:	4606      	mov	r6, r0
   d7a54:	460d      	mov	r5, r1
   d7a56:	4614      	mov	r4, r2
  if (incomingUBX->counter == 0)
   d7a58:	b90b      	cbnz	r3, d7a5e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x10>
  {
    incomingUBX->cls = incoming;
   d7a5a:	7021      	strb	r1, [r4, #0]
   d7a5c:	e02c      	b.n	d7ab8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
  }
  else if (incomingUBX->counter == 1)
   d7a5e:	2b01      	cmp	r3, #1
   d7a60:	d101      	bne.n	d7a66 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x18>
  {
    incomingUBX->id = incoming;
   d7a62:	7061      	strb	r1, [r4, #1]
   d7a64:	e028      	b.n	d7ab8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
  }
  else if (incomingUBX->counter == 2) //Len LSB
   d7a66:	2b02      	cmp	r3, #2
   d7a68:	d004      	beq.n	d7a74 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x26>
  {
    incomingUBX->len = incoming;
  }
  else if (incomingUBX->counter == 3) //Len MSB
   d7a6a:	2b03      	cmp	r3, #3
   d7a6c:	d104      	bne.n	d7a78 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x2a>
  {
    incomingUBX->len |= incoming << 8;
   d7a6e:	8853      	ldrh	r3, [r2, #2]
   d7a70:	ea43 2501 	orr.w	r5, r3, r1, lsl #8
   d7a74:	8065      	strh	r5, [r4, #2]
   d7a76:	e01f      	b.n	d7ab8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
  }
  else if (incomingUBX->counter == incomingUBX->len + 4) //ChecksumA
   d7a78:	8852      	ldrh	r2, [r2, #2]
   d7a7a:	1d11      	adds	r1, r2, #4
   d7a7c:	428b      	cmp	r3, r1
   d7a7e:	d101      	bne.n	d7a84 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x36>
  {
    incomingUBX->checksumA = incoming;
   d7a80:	7325      	strb	r5, [r4, #12]
   d7a82:	e019      	b.n	d7ab8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
  }
  else if (incomingUBX->counter == incomingUBX->len + 5) //ChecksumB
   d7a84:	3205      	adds	r2, #5
   d7a86:	4293      	cmp	r3, r2
   d7a88:	d112      	bne.n	d7ab0 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x62>
    //Validate this sentence

    uint8_t tempA = incomingUBX->checksumA;
    uint8_t tempB = incoming;

    calcChecksum(incomingUBX); //Calc checksum across this message. Results stored in message.
   d7a8a:	4621      	mov	r1, r4
  }
  else if (incomingUBX->counter == incomingUBX->len + 5) //ChecksumB
  {
    //Validate this sentence

    uint8_t tempA = incomingUBX->checksumA;
   d7a8c:	7b27      	ldrb	r7, [r4, #12]
    uint8_t tempB = incoming;

    calcChecksum(incomingUBX); //Calc checksum across this message. Results stored in message.
   d7a8e:	f7ff ffbe 	bl	d7a0e <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket>

    currentSentence = NONE; //We're done! Reset the sentence to being looking for a new start char
   d7a92:	2300      	movs	r3, #0
   d7a94:	72b3      	strb	r3, [r6, #10]

    if (incomingUBX->checksumA == tempA && incomingUBX->checksumB == tempB)
   d7a96:	7b23      	ldrb	r3, [r4, #12]
   d7a98:	42bb      	cmp	r3, r7
   d7a9a:	d10d      	bne.n	d7ab8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
   d7a9c:	7b63      	ldrb	r3, [r4, #13]
   d7a9e:	42ab      	cmp	r3, r5
   d7aa0:	d10a      	bne.n	d7ab8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
    {
      //Serial.print("Frame cleared: ");
      //printFrame(incomingUBX);

      incomingUBX->valid = true;
   d7aa2:	2301      	movs	r3, #1
   d7aa4:	73a3      	strb	r3, [r4, #14]
      processUBXpacket(incomingUBX); //We've got a valid packet, now do something with it
   d7aa6:	4621      	mov	r1, r4
   d7aa8:	4630      	mov	r0, r6
   d7aaa:	f7ff ff8e 	bl	d79ca <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket>
   d7aae:	e003      	b.n	d7ab8 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
    }
  }
  else //Load this byte into the appropriate array
  {
    incomingUBX->payload[incomingUBX->counter - 4] = incoming; //Store this byte into payload array
   d7ab0:	68a2      	ldr	r2, [r4, #8]
   d7ab2:	4413      	add	r3, r2
   d7ab4:	f803 5c04 	strb.w	r5, [r3, #-4]
  }

  incomingUBX->counter++;
   d7ab8:	7923      	ldrb	r3, [r4, #4]
   d7aba:	3301      	adds	r3, #1
   d7abc:	7123      	strb	r3, [r4, #4]
   d7abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ac0 <_ZN13SFE_UBLOX_GPS7processEh>:

//Processes NMEA and UBX binary sentences one byte at a time
//Take a given byte and file it into the proper array
void SFE_UBLOX_GPS::process(uint8_t incoming)
{
  if (currentSentence == NONE || currentSentence == NMEA)
   d7ac0:	7a83      	ldrb	r3, [r0, #10]
   d7ac2:	2b01      	cmp	r3, #1
} //end checkUbloxSerial()

//Processes NMEA and UBX binary sentences one byte at a time
//Take a given byte and file it into the proper array
void SFE_UBLOX_GPS::process(uint8_t incoming)
{
   d7ac4:	b510      	push	{r4, lr}
  if (currentSentence == NONE || currentSentence == NMEA)
   d7ac6:	d810      	bhi.n	d7aea <_ZN13SFE_UBLOX_GPS7processEh+0x2a>
  {
    if (incoming == 0xB5) //UBX binary frames start with 0xB5
   d7ac8:	29b5      	cmp	r1, #181	; 0xb5
   d7aca:	d104      	bne.n	d7ad6 <_ZN13SFE_UBLOX_GPS7processEh+0x16>
    {
      //This is the start of a binary sentence. Reset flags.
      //We still don't know the response class
      ubxFrameCounter = 0;
   d7acc:	2300      	movs	r3, #0
   d7ace:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
      currentSentence = UBX;
   d7ad2:	2302      	movs	r3, #2
   d7ad4:	e008      	b.n	d7ae8 <_ZN13SFE_UBLOX_GPS7processEh+0x28>
    }
    else if (incoming == '$')
   d7ad6:	2924      	cmp	r1, #36	; 0x24
   d7ad8:	d101      	bne.n	d7ade <_ZN13SFE_UBLOX_GPS7processEh+0x1e>
    {
      currentSentence = NMEA;
   d7ada:	2301      	movs	r3, #1
   d7adc:	e004      	b.n	d7ae8 <_ZN13SFE_UBLOX_GPS7processEh+0x28>
    }
    else if (incoming == 0xD3) //RTCM frames start with 0xD3
   d7ade:	29d3      	cmp	r1, #211	; 0xd3
   d7ae0:	d103      	bne.n	d7aea <_ZN13SFE_UBLOX_GPS7processEh+0x2a>
    {
      rtcmFrameCounter = 0;
   d7ae2:	2300      	movs	r3, #0
   d7ae4:	8103      	strh	r3, [r0, #8]
      currentSentence = RTCM;
   d7ae6:	2303      	movs	r3, #3
   d7ae8:	7283      	strb	r3, [r0, #10]
      //This character is unknown or we missed the previous start of a sentence
    }
  }

  //Depending on the sentence, pass the character to the individual processor
  if (currentSentence == UBX)
   d7aea:	7a83      	ldrb	r3, [r0, #10]
   d7aec:	2b02      	cmp	r3, #2
   d7aee:	d12e      	bne.n	d7b4e <_ZN13SFE_UBLOX_GPS7processEh+0x8e>
  {
    //Decide what type of response this is
    if (ubxFrameCounter == 0 && incoming != 0xB5)
   d7af0:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
   d7af4:	b923      	cbnz	r3, d7b00 <_ZN13SFE_UBLOX_GPS7processEh+0x40>
   d7af6:	29b5      	cmp	r1, #181	; 0xb5
   d7af8:	d018      	beq.n	d7b2c <_ZN13SFE_UBLOX_GPS7processEh+0x6c>
      currentSentence = NONE; //Something went wrong. Reset.
   d7afa:	2200      	movs	r2, #0
   d7afc:	7282      	strb	r2, [r0, #10]
   d7afe:	e015      	b.n	d7b2c <_ZN13SFE_UBLOX_GPS7processEh+0x6c>
    else if (ubxFrameCounter == 1 && incoming != 0x62)
   d7b00:	2b01      	cmp	r3, #1
   d7b02:	d101      	bne.n	d7b08 <_ZN13SFE_UBLOX_GPS7processEh+0x48>
   d7b04:	2962      	cmp	r1, #98	; 0x62
   d7b06:	e7f7      	b.n	d7af8 <_ZN13SFE_UBLOX_GPS7processEh+0x38>
      currentSentence = NONE; //Something went wrong. Reset.
    else if (ubxFrameCounter == 2) //Class
   d7b08:	2b02      	cmp	r3, #2
   d7b0a:	d10f      	bne.n	d7b2c <_ZN13SFE_UBLOX_GPS7processEh+0x6c>
    {
      //We can now identify the type of response
      if (incoming == UBX_CLASS_ACK)
   d7b0c:	2905      	cmp	r1, #5
   d7b0e:	f04f 0200 	mov.w	r2, #0
      {
        ubxFrameClass = CLASS_ACK;
   d7b12:	bf01      	itttt	eq
   d7b14:	2401      	moveq	r4, #1
   d7b16:	72c4      	strbeq	r4, [r0, #11]
        packetAck.counter = 0;
   d7b18:	f880 2060 	strbeq.w	r2, [r0, #96]	; 0x60
        packetAck.valid = false;
   d7b1c:	f880 206a 	strbeq.w	r2, [r0, #106]	; 0x6a
      }
      else
      {
        ubxFrameClass = CLASS_NOT_AN_ACK;
   d7b20:	bf1e      	ittt	ne
   d7b22:	72c3      	strbne	r3, [r0, #11]
        packetCfg.counter = 0;
   d7b24:	f880 2070 	strbne.w	r2, [r0, #112]	; 0x70
        packetCfg.valid = false;
   d7b28:	f880 207a 	strbne.w	r2, [r0, #122]	; 0x7a
      }
    }

    ubxFrameCounter++;
   d7b2c:	3301      	adds	r3, #1
   d7b2e:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85

    //Depending on this frame's class, pass different structs and payload arrays
    if (ubxFrameClass == CLASS_ACK)
   d7b32:	7ac3      	ldrb	r3, [r0, #11]
   d7b34:	2b01      	cmp	r3, #1
   d7b36:	d102      	bne.n	d7b3e <_ZN13SFE_UBLOX_GPS7processEh+0x7e>
      processUBX(incoming, &packetAck);
   d7b38:	f100 025c 	add.w	r2, r0, #92	; 0x5c
   d7b3c:	e003      	b.n	d7b46 <_ZN13SFE_UBLOX_GPS7processEh+0x86>
    else if (ubxFrameClass == CLASS_NOT_AN_ACK)
   d7b3e:	2b02      	cmp	r3, #2
   d7b40:	d10e      	bne.n	d7b60 <_ZN13SFE_UBLOX_GPS7processEh+0xa0>
      processUBX(incoming, &packetCfg);
   d7b42:	f100 026c 	add.w	r2, r0, #108	; 0x6c
  }
  else if (currentSentence == RTCM)
  {
    processRTCM(incoming); //Deal with RTCM bytes
  }
}
   d7b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    //Depending on this frame's class, pass different structs and payload arrays
    if (ubxFrameClass == CLASS_ACK)
      processUBX(incoming, &packetAck);
    else if (ubxFrameClass == CLASS_NOT_AN_ACK)
      processUBX(incoming, &packetCfg);
   d7b4a:	f7ff bf80 	b.w	d7a4e <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket>
    else
      ; //Serial.println("No frame class set");
  }
  else if (currentSentence == NMEA)
   d7b4e:	2b01      	cmp	r3, #1
   d7b50:	d102      	bne.n	d7b58 <_ZN13SFE_UBLOX_GPS7processEh+0x98>
  {
	processNMEA(incoming); //Process each NMEA character
   d7b52:	f7fc fd2b 	bl	d45ac <_ZN13SFE_UBLOX_GPS11processNMEAEc>
   d7b56:	bd10      	pop	{r4, pc}
  }
  else if (currentSentence == RTCM)
   d7b58:	2b03      	cmp	r3, #3
   d7b5a:	d101      	bne.n	d7b60 <_ZN13SFE_UBLOX_GPS7processEh+0xa0>
  {
    processRTCM(incoming); //Deal with RTCM bytes
   d7b5c:	f7ff ff34 	bl	d79c8 <_ZN13SFE_UBLOX_GPS11processRTCMEh>
   d7b60:	bd10      	pop	{r4, pc}

000d7b62 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv>:
}

//Polls I2C for data, passing any new bytes to process()
//Times out after given amount of time
boolean SFE_UBLOX_GPS::checkUbloxI2C()
{
   d7b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b64:	4604      	mov	r4, r0
   d7b66:	f000 f96f 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
   d7b6a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   d7b6e:	1ac0      	subs	r0, r0, r3
   d7b70:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   d7b74:	4298      	cmp	r0, r3
   d7b76:	d31c      	bcc.n	d7bb2 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x50>
  {
    //Get the number of bytes available from the module
    uint16_t bytesAvailable = 0;
    _i2cPort->beginTransmission(_gpsI2Caddress);
   d7b78:	7e21      	ldrb	r1, [r4, #24]
   d7b7a:	6920      	ldr	r0, [r4, #16]
   d7b7c:	f002 f8f5 	bl	d9d6a <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD); //0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   d7b80:	21fd      	movs	r1, #253	; 0xfd
   d7b82:	6920      	ldr	r0, [r4, #16]
   d7b84:	f7fc fbc1 	bl	d430a <_ZN7TwoWire5writeEi>
    if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   d7b88:	2100      	movs	r1, #0
   d7b8a:	6920      	ldr	r0, [r4, #16]
   d7b8c:	f002 f8f4 	bl	d9d78 <_ZN7TwoWire15endTransmissionEh>
   d7b90:	b108      	cbz	r0, d7b96 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x34>
      return (false); //Sensor did not ACK
   d7b92:	2000      	movs	r0, #0
   d7b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)2);
   d7b96:	2202      	movs	r2, #2
   d7b98:	7e21      	ldrb	r1, [r4, #24]
   d7b9a:	6920      	ldr	r0, [r4, #16]
   d7b9c:	f002 f8e2 	bl	d9d64 <_ZN7TwoWire11requestFromEhj>
    if (_i2cPort->available())
   d7ba0:	6920      	ldr	r0, [r4, #16]
   d7ba2:	6803      	ldr	r3, [r0, #0]
   d7ba4:	691b      	ldr	r3, [r3, #16]
   d7ba6:	4798      	blx	r3
   d7ba8:	b928      	cbnz	r0, d7bb6 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x54>
   d7baa:	f000 f94d 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
      uint8_t lsb = _i2cPort->read();
      bytesAvailable = (uint16_t)msb << 8 | lsb;
    }

    if (bytesAvailable == 0)
      lastCheck = millis(); //Put off checking to avoid I2C bus traffic
   d7bae:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80

      bytesAvailable -= bytesToRead;
    }
  } //end timed read

  return (true);
   d7bb2:	2001      	movs	r0, #1
   d7bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return (false); //Sensor did not ACK

    _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)2);
    if (_i2cPort->available())
    {
      uint8_t msb = _i2cPort->read();
   d7bb6:	6920      	ldr	r0, [r4, #16]
   d7bb8:	6803      	ldr	r3, [r0, #0]
   d7bba:	695b      	ldr	r3, [r3, #20]
   d7bbc:	4798      	blx	r3
   d7bbe:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   d7bc0:	6920      	ldr	r0, [r4, #16]
   d7bc2:	6803      	ldr	r3, [r0, #0]
   d7bc4:	695b      	ldr	r3, [r3, #20]
   d7bc6:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   d7bc8:	022d      	lsls	r5, r5, #8
   d7bca:	f405 437f 	and.w	r3, r5, #65280	; 0xff00
   d7bce:	b2c0      	uxtb	r0, r0
    }

    if (bytesAvailable == 0)
   d7bd0:	ea50 0503 	orrs.w	r5, r0, r3
   d7bd4:	d0e9      	beq.n	d7baa <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x48>
      lastCheck = millis(); //Put off checking to avoid I2C bus traffic

    while (bytesAvailable)
    {
      _i2cPort->beginTransmission(_gpsI2Caddress);
   d7bd6:	7e21      	ldrb	r1, [r4, #24]
   d7bd8:	6920      	ldr	r0, [r4, #16]
   d7bda:	f002 f8c6 	bl	d9d6a <_ZN7TwoWire17beginTransmissionEh>
      _i2cPort->write(0xFF); //0xFF is the register to read general NMEA data from
   d7bde:	21ff      	movs	r1, #255	; 0xff
   d7be0:	6920      	ldr	r0, [r4, #16]
   d7be2:	f7fc fb92 	bl	d430a <_ZN7TwoWire5writeEi>
      if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   d7be6:	2100      	movs	r1, #0
   d7be8:	6920      	ldr	r0, [r4, #16]
   d7bea:	f002 f8c5 	bl	d9d78 <_ZN7TwoWire15endTransmissionEh>
   d7bee:	4606      	mov	r6, r0
   d7bf0:	2800      	cmp	r0, #0
   d7bf2:	d1ce      	bne.n	d7b92 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x30>
   d7bf4:	2d20      	cmp	r5, #32
   d7bf6:	462f      	mov	r7, r5
   d7bf8:	bf28      	it	cs
   d7bfa:	2720      	movcs	r7, #32

      //Limit to 32 bytes or whatever the buffer limit is for given platform
      uint16_t bytesToRead = bytesAvailable;
      if (bytesToRead > I2C_BUFFER_LENGTH) bytesToRead = I2C_BUFFER_LENGTH;

      _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   d7bfc:	463a      	mov	r2, r7
   d7bfe:	7e21      	ldrb	r1, [r4, #24]
   d7c00:	6920      	ldr	r0, [r4, #16]
   d7c02:	f002 f8af 	bl	d9d64 <_ZN7TwoWire11requestFromEhj>
      if (_i2cPort->available())
   d7c06:	6920      	ldr	r0, [r4, #16]
   d7c08:	6803      	ldr	r3, [r0, #0]
   d7c0a:	691b      	ldr	r3, [r3, #16]
   d7c0c:	4798      	blx	r3
   d7c0e:	2800      	cmp	r0, #0
   d7c10:	d0bf      	beq.n	d7b92 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x30>
      {
        for (uint16_t x = 0 ; x < bytesToRead ; x++)
        {
          process(_i2cPort->read()); //Grab the actual character and process it
   d7c12:	6920      	ldr	r0, [r4, #16]
   d7c14:	6803      	ldr	r3, [r0, #0]
   d7c16:	695b      	ldr	r3, [r3, #20]
   d7c18:	4798      	blx	r3
   d7c1a:	3601      	adds	r6, #1
   d7c1c:	b2c1      	uxtb	r1, r0
   d7c1e:	4620      	mov	r0, r4
   d7c20:	f7ff ff4e 	bl	d7ac0 <_ZN13SFE_UBLOX_GPS7processEh>
      if (bytesToRead > I2C_BUFFER_LENGTH) bytesToRead = I2C_BUFFER_LENGTH;

      _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
      if (_i2cPort->available())
      {
        for (uint16_t x = 0 ; x < bytesToRead ; x++)
   d7c24:	b2b3      	uxth	r3, r6
   d7c26:	429f      	cmp	r7, r3
   d7c28:	d8f3      	bhi.n	d7c12 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0xb0>
        }
      }
      else
        return (false); //Sensor did not respond

      bytesAvailable -= bytesToRead;
   d7c2a:	1bed      	subs	r5, r5, r7
   d7c2c:	b2ad      	uxth	r5, r5
    }

    if (bytesAvailable == 0)
      lastCheck = millis(); //Put off checking to avoid I2C bus traffic

    while (bytesAvailable)
   d7c2e:	2d00      	cmp	r5, #0
   d7c30:	d1d1      	bne.n	d7bd6 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x74>
   d7c32:	e7be      	b.n	d7bb2 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x50>

000d7c34 <_ZN13SFE_UBLOX_GPS10checkUbloxEv>:
}

//Called regularly to check for available bytes on the user' specified port
boolean SFE_UBLOX_GPS::checkUblox()
{
	if(commType == COMM_TYPE_I2C)
   d7c34:	7b03      	ldrb	r3, [r0, #12]
   d7c36:	b90b      	cbnz	r3, d7c3c <_ZN13SFE_UBLOX_GPS10checkUbloxEv+0x8>
		checkUbloxI2C();
   d7c38:	f7ff bf93 	b.w	d7b62 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv>
	else if(commType == COMM_TYPE_SERIAL)
		checkUbloxSerial();
}
   d7c3c:	4770      	bx	lr

000d7c3e <_GLOBAL__sub_I__ZN13SFE_UBLOX_GPSC2Ev>:
   d7c3e:	f000 b91b 	b.w	d7e78 <HAL_Pin_Map>
	...

000d7c44 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d7c44:	b508      	push	{r3, lr}
   d7c46:	4b02      	ldr	r3, [pc, #8]	; (d7c50 <hal_ble_stack_init+0xc>)
   d7c48:	681b      	ldr	r3, [r3, #0]
   d7c4a:	689b      	ldr	r3, [r3, #8]
   d7c4c:	9301      	str	r3, [sp, #4]
   d7c4e:	bd08      	pop	{r3, pc}
   d7c50:	00030278 	.word	0x00030278

000d7c54 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d7c54:	b508      	push	{r3, lr}
   d7c56:	4b02      	ldr	r3, [pc, #8]	; (d7c60 <hal_ble_gap_set_advertising_data+0xc>)
   d7c58:	681b      	ldr	r3, [r3, #0]
   d7c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7c5c:	9301      	str	r3, [sp, #4]
   d7c5e:	bd08      	pop	{r3, pc}
   d7c60:	00030278 	.word	0x00030278

000d7c64 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d7c64:	b508      	push	{r3, lr}
   d7c66:	4b02      	ldr	r3, [pc, #8]	; (d7c70 <hal_ble_gap_set_scan_response_data+0xc>)
   d7c68:	681b      	ldr	r3, [r3, #0]
   d7c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7c6c:	9301      	str	r3, [sp, #4]
   d7c6e:	bd08      	pop	{r3, pc}
   d7c70:	00030278 	.word	0x00030278

000d7c74 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d7c74:	b508      	push	{r3, lr}
   d7c76:	4b02      	ldr	r3, [pc, #8]	; (d7c80 <hal_ble_gap_start_advertising+0xc>)
   d7c78:	681b      	ldr	r3, [r3, #0]
   d7c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d7c7c:	9301      	str	r3, [sp, #4]
   d7c7e:	bd08      	pop	{r3, pc}
   d7c80:	00030278 	.word	0x00030278

000d7c84 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d7c84:	b508      	push	{r3, lr}
   d7c86:	4b03      	ldr	r3, [pc, #12]	; (d7c94 <hal_ble_gap_disconnect+0x10>)
   d7c88:	681b      	ldr	r3, [r3, #0]
   d7c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d7c8e:	9301      	str	r3, [sp, #4]
   d7c90:	bd08      	pop	{r3, pc}
   d7c92:	0000      	.short	0x0000
   d7c94:	00030278 	.word	0x00030278

000d7c98 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d7c98:	b508      	push	{r3, lr}
   d7c9a:	4b03      	ldr	r3, [pc, #12]	; (d7ca8 <hal_ble_gatt_server_add_service+0x10>)
   d7c9c:	681b      	ldr	r3, [r3, #0]
   d7c9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d7ca2:	9301      	str	r3, [sp, #4]
   d7ca4:	bd08      	pop	{r3, pc}
   d7ca6:	0000      	.short	0x0000
   d7ca8:	00030278 	.word	0x00030278

000d7cac <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d7cac:	b508      	push	{r3, lr}
   d7cae:	4b03      	ldr	r3, [pc, #12]	; (d7cbc <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d7cb0:	681b      	ldr	r3, [r3, #0]
   d7cb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d7cb6:	9301      	str	r3, [sp, #4]
   d7cb8:	bd08      	pop	{r3, pc}
   d7cba:	0000      	.short	0x0000
   d7cbc:	00030278 	.word	0x00030278

000d7cc0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d7cc0:	b508      	push	{r3, lr}
   d7cc2:	4b03      	ldr	r3, [pc, #12]	; (d7cd0 <hal_ble_gatt_client_write_with_response+0x10>)
   d7cc4:	681b      	ldr	r3, [r3, #0]
   d7cc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d7cca:	9301      	str	r3, [sp, #4]
   d7ccc:	bd08      	pop	{r3, pc}
   d7cce:	0000      	.short	0x0000
   d7cd0:	00030278 	.word	0x00030278

000d7cd4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d7cd4:	b508      	push	{r3, lr}
   d7cd6:	4b03      	ldr	r3, [pc, #12]	; (d7ce4 <hal_ble_gatt_client_write_without_response+0x10>)
   d7cd8:	681b      	ldr	r3, [r3, #0]
   d7cda:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d7cde:	9301      	str	r3, [sp, #4]
   d7ce0:	bd08      	pop	{r3, pc}
   d7ce2:	0000      	.short	0x0000
   d7ce4:	00030278 	.word	0x00030278

000d7ce8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d7ce8:	b508      	push	{r3, lr}
   d7cea:	4b03      	ldr	r3, [pc, #12]	; (d7cf8 <hal_ble_gatt_server_add_characteristic+0x10>)
   d7cec:	681b      	ldr	r3, [r3, #0]
   d7cee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d7cf2:	9301      	str	r3, [sp, #4]
   d7cf4:	bd08      	pop	{r3, pc}
   d7cf6:	0000      	.short	0x0000
   d7cf8:	00030278 	.word	0x00030278

000d7cfc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d7cfc:	b508      	push	{r3, lr}
   d7cfe:	4b03      	ldr	r3, [pc, #12]	; (d7d0c <hal_ble_set_callback_on_periph_link_events+0x10>)
   d7d00:	681b      	ldr	r3, [r3, #0]
   d7d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d7d06:	9301      	str	r3, [sp, #4]
   d7d08:	bd08      	pop	{r3, pc}
   d7d0a:	0000      	.short	0x0000
   d7d0c:	00030278 	.word	0x00030278

000d7d10 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d7d10:	b508      	push	{r3, lr}
   d7d12:	4b03      	ldr	r3, [pc, #12]	; (d7d20 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d7d14:	681b      	ldr	r3, [r3, #0]
   d7d16:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d7d1a:	9301      	str	r3, [sp, #4]
   d7d1c:	bd08      	pop	{r3, pc}
   d7d1e:	0000      	.short	0x0000
   d7d20:	00030278 	.word	0x00030278

000d7d24 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d7d24:	b508      	push	{r3, lr}
   d7d26:	4b03      	ldr	r3, [pc, #12]	; (d7d34 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d7d28:	681b      	ldr	r3, [r3, #0]
   d7d2a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d7d2e:	9301      	str	r3, [sp, #4]
   d7d30:	bd08      	pop	{r3, pc}
   d7d32:	0000      	.short	0x0000
   d7d34:	00030278 	.word	0x00030278

000d7d38 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d7d38:	b508      	push	{r3, lr}
   d7d3a:	4b02      	ldr	r3, [pc, #8]	; (d7d44 <os_thread_is_current+0xc>)
   d7d3c:	681b      	ldr	r3, [r3, #0]
   d7d3e:	689b      	ldr	r3, [r3, #8]
   d7d40:	9301      	str	r3, [sp, #4]
   d7d42:	bd08      	pop	{r3, pc}
   d7d44:	00030248 	.word	0x00030248

000d7d48 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7d48:	b508      	push	{r3, lr}
   d7d4a:	4b02      	ldr	r3, [pc, #8]	; (d7d54 <os_thread_yield+0xc>)
   d7d4c:	681b      	ldr	r3, [r3, #0]
   d7d4e:	68db      	ldr	r3, [r3, #12]
   d7d50:	9301      	str	r3, [sp, #4]
   d7d52:	bd08      	pop	{r3, pc}
   d7d54:	00030248 	.word	0x00030248

000d7d58 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d7d58:	b508      	push	{r3, lr}
   d7d5a:	4b02      	ldr	r3, [pc, #8]	; (d7d64 <os_thread_join+0xc>)
   d7d5c:	681b      	ldr	r3, [r3, #0]
   d7d5e:	691b      	ldr	r3, [r3, #16]
   d7d60:	9301      	str	r3, [sp, #4]
   d7d62:	bd08      	pop	{r3, pc}
   d7d64:	00030248 	.word	0x00030248

000d7d68 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7d68:	b508      	push	{r3, lr}
   d7d6a:	4b02      	ldr	r3, [pc, #8]	; (d7d74 <os_thread_cleanup+0xc>)
   d7d6c:	681b      	ldr	r3, [r3, #0]
   d7d6e:	695b      	ldr	r3, [r3, #20]
   d7d70:	9301      	str	r3, [sp, #4]
   d7d72:	bd08      	pop	{r3, pc}
   d7d74:	00030248 	.word	0x00030248

000d7d78 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7d78:	b508      	push	{r3, lr}
   d7d7a:	4b02      	ldr	r3, [pc, #8]	; (d7d84 <os_thread_scheduling+0xc>)
   d7d7c:	681b      	ldr	r3, [r3, #0]
   d7d7e:	69db      	ldr	r3, [r3, #28]
   d7d80:	9301      	str	r3, [sp, #4]
   d7d82:	bd08      	pop	{r3, pc}
   d7d84:	00030248 	.word	0x00030248

000d7d88 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7d88:	b508      	push	{r3, lr}
   d7d8a:	4b02      	ldr	r3, [pc, #8]	; (d7d94 <os_timer_create+0xc>)
   d7d8c:	681b      	ldr	r3, [r3, #0]
   d7d8e:	6a1b      	ldr	r3, [r3, #32]
   d7d90:	9301      	str	r3, [sp, #4]
   d7d92:	bd08      	pop	{r3, pc}
   d7d94:	00030248 	.word	0x00030248

000d7d98 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7d98:	b508      	push	{r3, lr}
   d7d9a:	4b02      	ldr	r3, [pc, #8]	; (d7da4 <os_timer_destroy+0xc>)
   d7d9c:	681b      	ldr	r3, [r3, #0]
   d7d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7da0:	9301      	str	r3, [sp, #4]
   d7da2:	bd08      	pop	{r3, pc}
   d7da4:	00030248 	.word	0x00030248

000d7da8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7da8:	b508      	push	{r3, lr}
   d7daa:	4b02      	ldr	r3, [pc, #8]	; (d7db4 <os_timer_get_id+0xc>)
   d7dac:	681b      	ldr	r3, [r3, #0]
   d7dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7db0:	9301      	str	r3, [sp, #4]
   d7db2:	bd08      	pop	{r3, pc}
   d7db4:	00030248 	.word	0x00030248

000d7db8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7db8:	b508      	push	{r3, lr}
   d7dba:	4b02      	ldr	r3, [pc, #8]	; (d7dc4 <os_timer_change+0xc>)
   d7dbc:	681b      	ldr	r3, [r3, #0]
   d7dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7dc0:	9301      	str	r3, [sp, #4]
   d7dc2:	bd08      	pop	{r3, pc}
   d7dc4:	00030248 	.word	0x00030248

000d7dc8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7dc8:	b508      	push	{r3, lr}
   d7dca:	4b02      	ldr	r3, [pc, #8]	; (d7dd4 <os_mutex_recursive_create+0xc>)
   d7dcc:	681b      	ldr	r3, [r3, #0]
   d7dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7dd0:	9301      	str	r3, [sp, #4]
   d7dd2:	bd08      	pop	{r3, pc}
   d7dd4:	00030248 	.word	0x00030248

000d7dd8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7dd8:	b508      	push	{r3, lr}
   d7dda:	4b02      	ldr	r3, [pc, #8]	; (d7de4 <os_mutex_recursive_destroy+0xc>)
   d7ddc:	681b      	ldr	r3, [r3, #0]
   d7dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7de0:	9301      	str	r3, [sp, #4]
   d7de2:	bd08      	pop	{r3, pc}
   d7de4:	00030248 	.word	0x00030248

000d7de8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d7de8:	b508      	push	{r3, lr}
   d7dea:	4b02      	ldr	r3, [pc, #8]	; (d7df4 <os_mutex_recursive_lock+0xc>)
   d7dec:	681b      	ldr	r3, [r3, #0]
   d7dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7df0:	9301      	str	r3, [sp, #4]
   d7df2:	bd08      	pop	{r3, pc}
   d7df4:	00030248 	.word	0x00030248

000d7df8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d7df8:	b508      	push	{r3, lr}
   d7dfa:	4b02      	ldr	r3, [pc, #8]	; (d7e04 <os_mutex_recursive_unlock+0xc>)
   d7dfc:	681b      	ldr	r3, [r3, #0]
   d7dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7e00:	9301      	str	r3, [sp, #4]
   d7e02:	bd08      	pop	{r3, pc}
   d7e04:	00030248 	.word	0x00030248

000d7e08 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7e08:	b508      	push	{r3, lr}
   d7e0a:	4b02      	ldr	r3, [pc, #8]	; (d7e14 <os_timer_set_id+0xc>)
   d7e0c:	681b      	ldr	r3, [r3, #0]
   d7e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7e10:	9301      	str	r3, [sp, #4]
   d7e12:	bd08      	pop	{r3, pc}
   d7e14:	00030248 	.word	0x00030248

000d7e18 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7e18:	b508      	push	{r3, lr}
   d7e1a:	4b02      	ldr	r3, [pc, #8]	; (d7e24 <HAL_RNG_GetRandomNumber+0xc>)
   d7e1c:	681b      	ldr	r3, [r3, #0]
   d7e1e:	685b      	ldr	r3, [r3, #4]
   d7e20:	9301      	str	r3, [sp, #4]
   d7e22:	bd08      	pop	{r3, pc}
   d7e24:	00030218 	.word	0x00030218

000d7e28 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7e28:	b508      	push	{r3, lr}
   d7e2a:	4b02      	ldr	r3, [pc, #8]	; (d7e34 <HAL_Delay_Microseconds+0xc>)
   d7e2c:	681b      	ldr	r3, [r3, #0]
   d7e2e:	68db      	ldr	r3, [r3, #12]
   d7e30:	9301      	str	r3, [sp, #4]
   d7e32:	bd08      	pop	{r3, pc}
   d7e34:	00030218 	.word	0x00030218

000d7e38 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7e38:	b508      	push	{r3, lr}
   d7e3a:	4b02      	ldr	r3, [pc, #8]	; (d7e44 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7e3c:	681b      	ldr	r3, [r3, #0]
   d7e3e:	691b      	ldr	r3, [r3, #16]
   d7e40:	9301      	str	r3, [sp, #4]
   d7e42:	bd08      	pop	{r3, pc}
   d7e44:	00030218 	.word	0x00030218

000d7e48 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7e48:	b508      	push	{r3, lr}
   d7e4a:	4b02      	ldr	r3, [pc, #8]	; (d7e54 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7e4c:	681b      	ldr	r3, [r3, #0]
   d7e4e:	695b      	ldr	r3, [r3, #20]
   d7e50:	9301      	str	r3, [sp, #4]
   d7e52:	bd08      	pop	{r3, pc}
   d7e54:	00030218 	.word	0x00030218

000d7e58 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d7e58:	b508      	push	{r3, lr}
   d7e5a:	4b02      	ldr	r3, [pc, #8]	; (d7e64 <HAL_RTC_Get_UnixTime+0xc>)
   d7e5c:	681b      	ldr	r3, [r3, #0]
   d7e5e:	69db      	ldr	r3, [r3, #28]
   d7e60:	9301      	str	r3, [sp, #4]
   d7e62:	bd08      	pop	{r3, pc}
   d7e64:	00030218 	.word	0x00030218

000d7e68 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d7e68:	b508      	push	{r3, lr}
   d7e6a:	4b02      	ldr	r3, [pc, #8]	; (d7e74 <HAL_RTC_Time_Is_Valid+0xc>)
   d7e6c:	681b      	ldr	r3, [r3, #0]
   d7e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7e70:	9301      	str	r3, [sp, #4]
   d7e72:	bd08      	pop	{r3, pc}
   d7e74:	00030218 	.word	0x00030218

000d7e78 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7e78:	b508      	push	{r3, lr}
   d7e7a:	4b02      	ldr	r3, [pc, #8]	; (d7e84 <HAL_Pin_Map+0xc>)
   d7e7c:	681b      	ldr	r3, [r3, #0]
   d7e7e:	681b      	ldr	r3, [r3, #0]
   d7e80:	9301      	str	r3, [sp, #4]
   d7e82:	bd08      	pop	{r3, pc}
   d7e84:	0003022c 	.word	0x0003022c

000d7e88 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7e88:	b508      	push	{r3, lr}
   d7e8a:	4b02      	ldr	r3, [pc, #8]	; (d7e94 <HAL_Pin_Mode+0xc>)
   d7e8c:	681b      	ldr	r3, [r3, #0]
   d7e8e:	689b      	ldr	r3, [r3, #8]
   d7e90:	9301      	str	r3, [sp, #4]
   d7e92:	bd08      	pop	{r3, pc}
   d7e94:	0003022c 	.word	0x0003022c

000d7e98 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7e98:	b508      	push	{r3, lr}
   d7e9a:	4b02      	ldr	r3, [pc, #8]	; (d7ea4 <HAL_Get_Pin_Mode+0xc>)
   d7e9c:	681b      	ldr	r3, [r3, #0]
   d7e9e:	68db      	ldr	r3, [r3, #12]
   d7ea0:	9301      	str	r3, [sp, #4]
   d7ea2:	bd08      	pop	{r3, pc}
   d7ea4:	0003022c 	.word	0x0003022c

000d7ea8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7ea8:	b508      	push	{r3, lr}
   d7eaa:	4b02      	ldr	r3, [pc, #8]	; (d7eb4 <HAL_GPIO_Write+0xc>)
   d7eac:	681b      	ldr	r3, [r3, #0]
   d7eae:	691b      	ldr	r3, [r3, #16]
   d7eb0:	9301      	str	r3, [sp, #4]
   d7eb2:	bd08      	pop	{r3, pc}
   d7eb4:	0003022c 	.word	0x0003022c

000d7eb8 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d7eb8:	b508      	push	{r3, lr}
   d7eba:	4b02      	ldr	r3, [pc, #8]	; (d7ec4 <HAL_I2C_Set_Speed+0xc>)
   d7ebc:	681b      	ldr	r3, [r3, #0]
   d7ebe:	681b      	ldr	r3, [r3, #0]
   d7ec0:	9301      	str	r3, [sp, #4]
   d7ec2:	bd08      	pop	{r3, pc}
   d7ec4:	00030228 	.word	0x00030228

000d7ec8 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d7ec8:	b508      	push	{r3, lr}
   d7eca:	4b02      	ldr	r3, [pc, #8]	; (d7ed4 <HAL_I2C_Begin+0xc>)
   d7ecc:	681b      	ldr	r3, [r3, #0]
   d7ece:	68db      	ldr	r3, [r3, #12]
   d7ed0:	9301      	str	r3, [sp, #4]
   d7ed2:	bd08      	pop	{r3, pc}
   d7ed4:	00030228 	.word	0x00030228

000d7ed8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d7ed8:	b508      	push	{r3, lr}
   d7eda:	4b02      	ldr	r3, [pc, #8]	; (d7ee4 <HAL_I2C_Begin_Transmission+0xc>)
   d7edc:	681b      	ldr	r3, [r3, #0]
   d7ede:	699b      	ldr	r3, [r3, #24]
   d7ee0:	9301      	str	r3, [sp, #4]
   d7ee2:	bd08      	pop	{r3, pc}
   d7ee4:	00030228 	.word	0x00030228

000d7ee8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d7ee8:	b508      	push	{r3, lr}
   d7eea:	4b02      	ldr	r3, [pc, #8]	; (d7ef4 <HAL_I2C_End_Transmission+0xc>)
   d7eec:	681b      	ldr	r3, [r3, #0]
   d7eee:	69db      	ldr	r3, [r3, #28]
   d7ef0:	9301      	str	r3, [sp, #4]
   d7ef2:	bd08      	pop	{r3, pc}
   d7ef4:	00030228 	.word	0x00030228

000d7ef8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7ef8:	b508      	push	{r3, lr}
   d7efa:	4b02      	ldr	r3, [pc, #8]	; (d7f04 <HAL_I2C_Write_Data+0xc>)
   d7efc:	681b      	ldr	r3, [r3, #0]
   d7efe:	6a1b      	ldr	r3, [r3, #32]
   d7f00:	9301      	str	r3, [sp, #4]
   d7f02:	bd08      	pop	{r3, pc}
   d7f04:	00030228 	.word	0x00030228

000d7f08 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d7f08:	b508      	push	{r3, lr}
   d7f0a:	4b02      	ldr	r3, [pc, #8]	; (d7f14 <HAL_I2C_Available_Data+0xc>)
   d7f0c:	681b      	ldr	r3, [r3, #0]
   d7f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f10:	9301      	str	r3, [sp, #4]
   d7f12:	bd08      	pop	{r3, pc}
   d7f14:	00030228 	.word	0x00030228

000d7f18 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d7f18:	b508      	push	{r3, lr}
   d7f1a:	4b02      	ldr	r3, [pc, #8]	; (d7f24 <HAL_I2C_Read_Data+0xc>)
   d7f1c:	681b      	ldr	r3, [r3, #0]
   d7f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7f20:	9301      	str	r3, [sp, #4]
   d7f22:	bd08      	pop	{r3, pc}
   d7f24:	00030228 	.word	0x00030228

000d7f28 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7f28:	b508      	push	{r3, lr}
   d7f2a:	4b02      	ldr	r3, [pc, #8]	; (d7f34 <HAL_I2C_Peek_Data+0xc>)
   d7f2c:	681b      	ldr	r3, [r3, #0]
   d7f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7f30:	9301      	str	r3, [sp, #4]
   d7f32:	bd08      	pop	{r3, pc}
   d7f34:	00030228 	.word	0x00030228

000d7f38 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d7f38:	b508      	push	{r3, lr}
   d7f3a:	4b02      	ldr	r3, [pc, #8]	; (d7f44 <HAL_I2C_Flush_Data+0xc>)
   d7f3c:	681b      	ldr	r3, [r3, #0]
   d7f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7f40:	9301      	str	r3, [sp, #4]
   d7f42:	bd08      	pop	{r3, pc}
   d7f44:	00030228 	.word	0x00030228

000d7f48 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d7f48:	b508      	push	{r3, lr}
   d7f4a:	4b02      	ldr	r3, [pc, #8]	; (d7f54 <HAL_I2C_Is_Enabled+0xc>)
   d7f4c:	681b      	ldr	r3, [r3, #0]
   d7f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7f50:	9301      	str	r3, [sp, #4]
   d7f52:	bd08      	pop	{r3, pc}
   d7f54:	00030228 	.word	0x00030228

000d7f58 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d7f58:	b508      	push	{r3, lr}
   d7f5a:	4b02      	ldr	r3, [pc, #8]	; (d7f64 <HAL_I2C_Init+0xc>)
   d7f5c:	681b      	ldr	r3, [r3, #0]
   d7f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7f60:	9301      	str	r3, [sp, #4]
   d7f62:	bd08      	pop	{r3, pc}
   d7f64:	00030228 	.word	0x00030228

000d7f68 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d7f68:	b508      	push	{r3, lr}
   d7f6a:	4b02      	ldr	r3, [pc, #8]	; (d7f74 <HAL_I2C_Request_Data_Ex+0xc>)
   d7f6c:	681b      	ldr	r3, [r3, #0]
   d7f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7f70:	9301      	str	r3, [sp, #4]
   d7f72:	bd08      	pop	{r3, pc}
   d7f74:	00030228 	.word	0x00030228

000d7f78 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7f78:	b508      	push	{r3, lr}
   d7f7a:	4b02      	ldr	r3, [pc, #8]	; (d7f84 <inet_inet_ntop+0xc>)
   d7f7c:	681b      	ldr	r3, [r3, #0]
   d7f7e:	695b      	ldr	r3, [r3, #20]
   d7f80:	9301      	str	r3, [sp, #4]
   d7f82:	bd08      	pop	{r3, pc}
   d7f84:	00030264 	.word	0x00030264

000d7f88 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7f88:	b508      	push	{r3, lr}
   d7f8a:	4b02      	ldr	r3, [pc, #8]	; (d7f94 <netdb_freeaddrinfo+0xc>)
   d7f8c:	681b      	ldr	r3, [r3, #0]
   d7f8e:	689b      	ldr	r3, [r3, #8]
   d7f90:	9301      	str	r3, [sp, #4]
   d7f92:	bd08      	pop	{r3, pc}
   d7f94:	00030268 	.word	0x00030268

000d7f98 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7f98:	b508      	push	{r3, lr}
   d7f9a:	4b02      	ldr	r3, [pc, #8]	; (d7fa4 <netdb_getaddrinfo+0xc>)
   d7f9c:	681b      	ldr	r3, [r3, #0]
   d7f9e:	68db      	ldr	r3, [r3, #12]
   d7fa0:	9301      	str	r3, [sp, #4]
   d7fa2:	bd08      	pop	{r3, pc}
   d7fa4:	00030268 	.word	0x00030268

000d7fa8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d7fa8:	b508      	push	{r3, lr}
   d7faa:	4b02      	ldr	r3, [pc, #8]	; (d7fb4 <HAL_SPI_Begin+0xc>)
   d7fac:	681b      	ldr	r3, [r3, #0]
   d7fae:	681b      	ldr	r3, [r3, #0]
   d7fb0:	9301      	str	r3, [sp, #4]
   d7fb2:	bd08      	pop	{r3, pc}
   d7fb4:	00030230 	.word	0x00030230

000d7fb8 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d7fb8:	b508      	push	{r3, lr}
   d7fba:	4b02      	ldr	r3, [pc, #8]	; (d7fc4 <HAL_SPI_Set_Clock_Divider+0xc>)
   d7fbc:	681b      	ldr	r3, [r3, #0]
   d7fbe:	691b      	ldr	r3, [r3, #16]
   d7fc0:	9301      	str	r3, [sp, #4]
   d7fc2:	bd08      	pop	{r3, pc}
   d7fc4:	00030230 	.word	0x00030230

000d7fc8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d7fc8:	b508      	push	{r3, lr}
   d7fca:	4b02      	ldr	r3, [pc, #8]	; (d7fd4 <HAL_SPI_Send_Receive_Data+0xc>)
   d7fcc:	681b      	ldr	r3, [r3, #0]
   d7fce:	695b      	ldr	r3, [r3, #20]
   d7fd0:	9301      	str	r3, [sp, #4]
   d7fd2:	bd08      	pop	{r3, pc}
   d7fd4:	00030230 	.word	0x00030230

000d7fd8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d7fd8:	b508      	push	{r3, lr}
   d7fda:	4b02      	ldr	r3, [pc, #8]	; (d7fe4 <HAL_SPI_Init+0xc>)
   d7fdc:	681b      	ldr	r3, [r3, #0]
   d7fde:	69db      	ldr	r3, [r3, #28]
   d7fe0:	9301      	str	r3, [sp, #4]
   d7fe2:	bd08      	pop	{r3, pc}
   d7fe4:	00030230 	.word	0x00030230

000d7fe8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d7fe8:	b508      	push	{r3, lr}
   d7fea:	4b02      	ldr	r3, [pc, #8]	; (d7ff4 <HAL_SPI_Is_Enabled+0xc>)
   d7fec:	681b      	ldr	r3, [r3, #0]
   d7fee:	6a1b      	ldr	r3, [r3, #32]
   d7ff0:	9301      	str	r3, [sp, #4]
   d7ff2:	bd08      	pop	{r3, pc}
   d7ff4:	00030230 	.word	0x00030230

000d7ff8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d7ff8:	b508      	push	{r3, lr}
   d7ffa:	4b02      	ldr	r3, [pc, #8]	; (d8004 <HAL_SPI_Info+0xc>)
   d7ffc:	681b      	ldr	r3, [r3, #0]
   d7ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8000:	9301      	str	r3, [sp, #4]
   d8002:	bd08      	pop	{r3, pc}
   d8004:	00030230 	.word	0x00030230

000d8008 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d8008:	b508      	push	{r3, lr}
   d800a:	4b02      	ldr	r3, [pc, #8]	; (d8014 <HAL_SPI_DMA_Transfer+0xc>)
   d800c:	681b      	ldr	r3, [r3, #0]
   d800e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8010:	9301      	str	r3, [sp, #4]
   d8012:	bd08      	pop	{r3, pc}
   d8014:	00030230 	.word	0x00030230

000d8018 <HAL_SPI_Begin_Ext>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
   d8018:	b508      	push	{r3, lr}
   d801a:	4b02      	ldr	r3, [pc, #8]	; (d8024 <HAL_SPI_Begin_Ext+0xc>)
   d801c:	681b      	ldr	r3, [r3, #0]
   d801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8020:	9301      	str	r3, [sp, #4]
   d8022:	bd08      	pop	{r3, pc}
   d8024:	00030230 	.word	0x00030230

000d8028 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d8028:	b508      	push	{r3, lr}
   d802a:	4b02      	ldr	r3, [pc, #8]	; (d8034 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d802c:	681b      	ldr	r3, [r3, #0]
   d802e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8030:	9301      	str	r3, [sp, #4]
   d8032:	bd08      	pop	{r3, pc}
   d8034:	00030230 	.word	0x00030230

000d8038 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d8038:	b508      	push	{r3, lr}
   d803a:	4b02      	ldr	r3, [pc, #8]	; (d8044 <HAL_SPI_Set_Settings+0xc>)
   d803c:	681b      	ldr	r3, [r3, #0]
   d803e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8040:	9301      	str	r3, [sp, #4]
   d8042:	bd08      	pop	{r3, pc}
   d8044:	00030230 	.word	0x00030230

000d8048 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d8048:	b508      	push	{r3, lr}
   d804a:	4b02      	ldr	r3, [pc, #8]	; (d8054 <HAL_SPI_Acquire+0xc>)
   d804c:	681b      	ldr	r3, [r3, #0]
   d804e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8050:	9301      	str	r3, [sp, #4]
   d8052:	bd08      	pop	{r3, pc}
   d8054:	00030230 	.word	0x00030230

000d8058 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d8058:	b508      	push	{r3, lr}
   d805a:	4b02      	ldr	r3, [pc, #8]	; (d8064 <HAL_SPI_Release+0xc>)
   d805c:	681b      	ldr	r3, [r3, #0]
   d805e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8060:	9301      	str	r3, [sp, #4]
   d8062:	bd08      	pop	{r3, pc}
   d8064:	00030230 	.word	0x00030230

000d8068 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d8068:	b508      	push	{r3, lr}
   d806a:	4b02      	ldr	r3, [pc, #8]	; (d8074 <HAL_USART_Init+0xc>)
   d806c:	681b      	ldr	r3, [r3, #0]
   d806e:	681b      	ldr	r3, [r3, #0]
   d8070:	9301      	str	r3, [sp, #4]
   d8072:	bd08      	pop	{r3, pc}
   d8074:	0003023c 	.word	0x0003023c

000d8078 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d8078:	b508      	push	{r3, lr}
   d807a:	4b02      	ldr	r3, [pc, #8]	; (d8084 <HAL_USART_End+0xc>)
   d807c:	681b      	ldr	r3, [r3, #0]
   d807e:	689b      	ldr	r3, [r3, #8]
   d8080:	9301      	str	r3, [sp, #4]
   d8082:	bd08      	pop	{r3, pc}
   d8084:	0003023c 	.word	0x0003023c

000d8088 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d8088:	b508      	push	{r3, lr}
   d808a:	4b02      	ldr	r3, [pc, #8]	; (d8094 <HAL_USART_Write_Data+0xc>)
   d808c:	681b      	ldr	r3, [r3, #0]
   d808e:	68db      	ldr	r3, [r3, #12]
   d8090:	9301      	str	r3, [sp, #4]
   d8092:	bd08      	pop	{r3, pc}
   d8094:	0003023c 	.word	0x0003023c

000d8098 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d8098:	b508      	push	{r3, lr}
   d809a:	4b02      	ldr	r3, [pc, #8]	; (d80a4 <HAL_USART_Available_Data+0xc>)
   d809c:	681b      	ldr	r3, [r3, #0]
   d809e:	691b      	ldr	r3, [r3, #16]
   d80a0:	9301      	str	r3, [sp, #4]
   d80a2:	bd08      	pop	{r3, pc}
   d80a4:	0003023c 	.word	0x0003023c

000d80a8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d80a8:	b508      	push	{r3, lr}
   d80aa:	4b02      	ldr	r3, [pc, #8]	; (d80b4 <HAL_USART_Read_Data+0xc>)
   d80ac:	681b      	ldr	r3, [r3, #0]
   d80ae:	695b      	ldr	r3, [r3, #20]
   d80b0:	9301      	str	r3, [sp, #4]
   d80b2:	bd08      	pop	{r3, pc}
   d80b4:	0003023c 	.word	0x0003023c

000d80b8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d80b8:	b508      	push	{r3, lr}
   d80ba:	4b02      	ldr	r3, [pc, #8]	; (d80c4 <HAL_USART_Peek_Data+0xc>)
   d80bc:	681b      	ldr	r3, [r3, #0]
   d80be:	699b      	ldr	r3, [r3, #24]
   d80c0:	9301      	str	r3, [sp, #4]
   d80c2:	bd08      	pop	{r3, pc}
   d80c4:	0003023c 	.word	0x0003023c

000d80c8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d80c8:	b508      	push	{r3, lr}
   d80ca:	4b02      	ldr	r3, [pc, #8]	; (d80d4 <HAL_USART_Flush_Data+0xc>)
   d80cc:	681b      	ldr	r3, [r3, #0]
   d80ce:	69db      	ldr	r3, [r3, #28]
   d80d0:	9301      	str	r3, [sp, #4]
   d80d2:	bd08      	pop	{r3, pc}
   d80d4:	0003023c 	.word	0x0003023c

000d80d8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d80d8:	b508      	push	{r3, lr}
   d80da:	4b02      	ldr	r3, [pc, #8]	; (d80e4 <HAL_USART_Is_Enabled+0xc>)
   d80dc:	681b      	ldr	r3, [r3, #0]
   d80de:	6a1b      	ldr	r3, [r3, #32]
   d80e0:	9301      	str	r3, [sp, #4]
   d80e2:	bd08      	pop	{r3, pc}
   d80e4:	0003023c 	.word	0x0003023c

000d80e8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d80e8:	b508      	push	{r3, lr}
   d80ea:	4b02      	ldr	r3, [pc, #8]	; (d80f4 <HAL_USART_Available_Data_For_Write+0xc>)
   d80ec:	681b      	ldr	r3, [r3, #0]
   d80ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d80f0:	9301      	str	r3, [sp, #4]
   d80f2:	bd08      	pop	{r3, pc}
   d80f4:	0003023c 	.word	0x0003023c

000d80f8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d80f8:	b508      	push	{r3, lr}
   d80fa:	4b02      	ldr	r3, [pc, #8]	; (d8104 <HAL_USART_BeginConfig+0xc>)
   d80fc:	681b      	ldr	r3, [r3, #0]
   d80fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8100:	9301      	str	r3, [sp, #4]
   d8102:	bd08      	pop	{r3, pc}
   d8104:	0003023c 	.word	0x0003023c

000d8108 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8108:	b508      	push	{r3, lr}
   d810a:	4b02      	ldr	r3, [pc, #8]	; (d8114 <HAL_USB_USART_Init+0xc>)
   d810c:	681b      	ldr	r3, [r3, #0]
   d810e:	681b      	ldr	r3, [r3, #0]
   d8110:	9301      	str	r3, [sp, #4]
   d8112:	bd08      	pop	{r3, pc}
   d8114:	0003024c 	.word	0x0003024c

000d8118 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8118:	b508      	push	{r3, lr}
   d811a:	4b02      	ldr	r3, [pc, #8]	; (d8124 <HAL_USB_USART_Begin+0xc>)
   d811c:	681b      	ldr	r3, [r3, #0]
   d811e:	685b      	ldr	r3, [r3, #4]
   d8120:	9301      	str	r3, [sp, #4]
   d8122:	bd08      	pop	{r3, pc}
   d8124:	0003024c 	.word	0x0003024c

000d8128 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d8128:	b508      	push	{r3, lr}
   d812a:	4b02      	ldr	r3, [pc, #8]	; (d8134 <HAL_USB_USART_End+0xc>)
   d812c:	681b      	ldr	r3, [r3, #0]
   d812e:	689b      	ldr	r3, [r3, #8]
   d8130:	9301      	str	r3, [sp, #4]
   d8132:	bd08      	pop	{r3, pc}
   d8134:	0003024c 	.word	0x0003024c

000d8138 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8138:	b508      	push	{r3, lr}
   d813a:	4b02      	ldr	r3, [pc, #8]	; (d8144 <HAL_USB_USART_Available_Data+0xc>)
   d813c:	681b      	ldr	r3, [r3, #0]
   d813e:	691b      	ldr	r3, [r3, #16]
   d8140:	9301      	str	r3, [sp, #4]
   d8142:	bd08      	pop	{r3, pc}
   d8144:	0003024c 	.word	0x0003024c

000d8148 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8148:	b508      	push	{r3, lr}
   d814a:	4b02      	ldr	r3, [pc, #8]	; (d8154 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d814c:	681b      	ldr	r3, [r3, #0]
   d814e:	695b      	ldr	r3, [r3, #20]
   d8150:	9301      	str	r3, [sp, #4]
   d8152:	bd08      	pop	{r3, pc}
   d8154:	0003024c 	.word	0x0003024c

000d8158 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8158:	b508      	push	{r3, lr}
   d815a:	4b02      	ldr	r3, [pc, #8]	; (d8164 <HAL_USB_USART_Receive_Data+0xc>)
   d815c:	681b      	ldr	r3, [r3, #0]
   d815e:	699b      	ldr	r3, [r3, #24]
   d8160:	9301      	str	r3, [sp, #4]
   d8162:	bd08      	pop	{r3, pc}
   d8164:	0003024c 	.word	0x0003024c

000d8168 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8168:	b508      	push	{r3, lr}
   d816a:	4b02      	ldr	r3, [pc, #8]	; (d8174 <HAL_USB_USART_Send_Data+0xc>)
   d816c:	681b      	ldr	r3, [r3, #0]
   d816e:	69db      	ldr	r3, [r3, #28]
   d8170:	9301      	str	r3, [sp, #4]
   d8172:	bd08      	pop	{r3, pc}
   d8174:	0003024c 	.word	0x0003024c

000d8178 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8178:	b508      	push	{r3, lr}
   d817a:	4b02      	ldr	r3, [pc, #8]	; (d8184 <HAL_USB_USART_Flush_Data+0xc>)
   d817c:	681b      	ldr	r3, [r3, #0]
   d817e:	6a1b      	ldr	r3, [r3, #32]
   d8180:	9301      	str	r3, [sp, #4]
   d8182:	bd08      	pop	{r3, pc}
   d8184:	0003024c 	.word	0x0003024c

000d8188 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8188:	b508      	push	{r3, lr}
   d818a:	4b02      	ldr	r3, [pc, #8]	; (d8194 <panic_+0xc>)
   d818c:	681b      	ldr	r3, [r3, #0]
   d818e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8190:	9301      	str	r3, [sp, #4]
   d8192:	bd08      	pop	{r3, pc}
   d8194:	00030260 	.word	0x00030260

000d8198 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d8198:	b508      	push	{r3, lr}
   d819a:	4b02      	ldr	r3, [pc, #8]	; (d81a4 <log_message+0xc>)
   d819c:	681b      	ldr	r3, [r3, #0]
   d819e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d81a0:	9301      	str	r3, [sp, #4]
   d81a2:	bd08      	pop	{r3, pc}
   d81a4:	00030260 	.word	0x00030260

000d81a8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d81a8:	b508      	push	{r3, lr}
   d81aa:	4b02      	ldr	r3, [pc, #8]	; (d81b4 <log_level_name+0xc>)
   d81ac:	681b      	ldr	r3, [r3, #0]
   d81ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d81b0:	9301      	str	r3, [sp, #4]
   d81b2:	bd08      	pop	{r3, pc}
   d81b4:	00030260 	.word	0x00030260

000d81b8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d81b8:	b508      	push	{r3, lr}
   d81ba:	4b02      	ldr	r3, [pc, #8]	; (d81c4 <log_set_callbacks+0xc>)
   d81bc:	681b      	ldr	r3, [r3, #0]
   d81be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d81c0:	9301      	str	r3, [sp, #4]
   d81c2:	bd08      	pop	{r3, pc}
   d81c4:	00030260 	.word	0x00030260

000d81c8 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   d81c8:	b508      	push	{r3, lr}
   d81ca:	4b03      	ldr	r3, [pc, #12]	; (d81d8 <led_set_status_active+0x10>)
   d81cc:	681b      	ldr	r3, [r3, #0]
   d81ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d81d2:	9301      	str	r3, [sp, #4]
   d81d4:	bd08      	pop	{r3, pc}
   d81d6:	0000      	.short	0x0000
   d81d8:	00030260 	.word	0x00030260

000d81dc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d81dc:	b508      	push	{r3, lr}
   d81de:	4b02      	ldr	r3, [pc, #8]	; (d81e8 <system_mode+0xc>)
   d81e0:	681b      	ldr	r3, [r3, #0]
   d81e2:	681b      	ldr	r3, [r3, #0]
   d81e4:	9301      	str	r3, [sp, #4]
   d81e6:	bd08      	pop	{r3, pc}
   d81e8:	00030220 	.word	0x00030220

000d81ec <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d81ec:	b508      	push	{r3, lr}
   d81ee:	4b02      	ldr	r3, [pc, #8]	; (d81f8 <set_system_mode+0xc>)
   d81f0:	681b      	ldr	r3, [r3, #0]
   d81f2:	685b      	ldr	r3, [r3, #4]
   d81f4:	9301      	str	r3, [sp, #4]
   d81f6:	bd08      	pop	{r3, pc}
   d81f8:	00030220 	.word	0x00030220

000d81fc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d81fc:	b508      	push	{r3, lr}
   d81fe:	4b02      	ldr	r3, [pc, #8]	; (d8208 <system_delay_ms+0xc>)
   d8200:	681b      	ldr	r3, [r3, #0]
   d8202:	695b      	ldr	r3, [r3, #20]
   d8204:	9301      	str	r3, [sp, #4]
   d8206:	bd08      	pop	{r3, pc}
   d8208:	00030220 	.word	0x00030220

000d820c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d820c:	b508      	push	{r3, lr}
   d820e:	4b02      	ldr	r3, [pc, #8]	; (d8218 <application_thread_current+0xc>)
   d8210:	681b      	ldr	r3, [r3, #0]
   d8212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8214:	9301      	str	r3, [sp, #4]
   d8216:	bd08      	pop	{r3, pc}
   d8218:	00030220 	.word	0x00030220

000d821c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d821c:	b508      	push	{r3, lr}
   d821e:	4b02      	ldr	r3, [pc, #8]	; (d8228 <application_thread_invoke+0xc>)
   d8220:	681b      	ldr	r3, [r3, #0]
   d8222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8224:	9301      	str	r3, [sp, #4]
   d8226:	bd08      	pop	{r3, pc}
   d8228:	00030220 	.word	0x00030220

000d822c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d822c:	b508      	push	{r3, lr}
   d822e:	4b02      	ldr	r3, [pc, #8]	; (d8238 <system_thread_get_state+0xc>)
   d8230:	681b      	ldr	r3, [r3, #0]
   d8232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8234:	9301      	str	r3, [sp, #4]
   d8236:	bd08      	pop	{r3, pc}
   d8238:	00030220 	.word	0x00030220

000d823c <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   d823c:	b508      	push	{r3, lr}
   d823e:	4b02      	ldr	r3, [pc, #8]	; (d8248 <led_pattern_period+0xc>)
   d8240:	681b      	ldr	r3, [r3, #0]
   d8242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d8244:	9301      	str	r3, [sp, #4]
   d8246:	bd08      	pop	{r3, pc}
   d8248:	00030220 	.word	0x00030220

000d824c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d824c:	b508      	push	{r3, lr}
   d824e:	4b03      	ldr	r3, [pc, #12]	; (d825c <system_ctrl_set_app_request_handler+0x10>)
   d8250:	681b      	ldr	r3, [r3, #0]
   d8252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8256:	9301      	str	r3, [sp, #4]
   d8258:	bd08      	pop	{r3, pc}
   d825a:	0000      	.short	0x0000
   d825c:	00030220 	.word	0x00030220

000d8260 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8260:	b508      	push	{r3, lr}
   d8262:	4b03      	ldr	r3, [pc, #12]	; (d8270 <system_ctrl_set_result+0x10>)
   d8264:	681b      	ldr	r3, [r3, #0]
   d8266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d826a:	9301      	str	r3, [sp, #4]
   d826c:	bd08      	pop	{r3, pc}
   d826e:	0000      	.short	0x0000
   d8270:	00030220 	.word	0x00030220

000d8274 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8274:	b508      	push	{r3, lr}
   d8276:	4b02      	ldr	r3, [pc, #8]	; (d8280 <spark_process+0xc>)
   d8278:	681b      	ldr	r3, [r3, #0]
   d827a:	689b      	ldr	r3, [r3, #8]
   d827c:	9301      	str	r3, [sp, #4]
   d827e:	bd08      	pop	{r3, pc}
   d8280:	00030244 	.word	0x00030244

000d8284 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8284:	b508      	push	{r3, lr}
   d8286:	4b02      	ldr	r3, [pc, #8]	; (d8290 <spark_cloud_flag_connected+0xc>)
   d8288:	681b      	ldr	r3, [r3, #0]
   d828a:	695b      	ldr	r3, [r3, #20]
   d828c:	9301      	str	r3, [sp, #4]
   d828e:	bd08      	pop	{r3, pc}
   d8290:	00030244 	.word	0x00030244

000d8294 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d8294:	b508      	push	{r3, lr}
   d8296:	4b02      	ldr	r3, [pc, #8]	; (d82a0 <spark_send_event+0xc>)
   d8298:	681b      	ldr	r3, [r3, #0]
   d829a:	6a1b      	ldr	r3, [r3, #32]
   d829c:	9301      	str	r3, [sp, #4]
   d829e:	bd08      	pop	{r3, pc}
   d82a0:	00030244 	.word	0x00030244

000d82a4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d82a4:	b508      	push	{r3, lr}
   d82a6:	4b02      	ldr	r3, [pc, #8]	; (d82b0 <spark_subscribe+0xc>)
   d82a8:	681b      	ldr	r3, [r3, #0]
   d82aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d82ac:	9301      	str	r3, [sp, #4]
   d82ae:	bd08      	pop	{r3, pc}
   d82b0:	00030244 	.word	0x00030244

000d82b4 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d82b4:	b508      	push	{r3, lr}
   d82b6:	4b02      	ldr	r3, [pc, #8]	; (d82c0 <spark_sync_time_pending+0xc>)
   d82b8:	681b      	ldr	r3, [r3, #0]
   d82ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d82bc:	9301      	str	r3, [sp, #4]
   d82be:	bd08      	pop	{r3, pc}
   d82c0:	00030244 	.word	0x00030244

000d82c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d82c4:	b508      	push	{r3, lr}
   d82c6:	4b02      	ldr	r3, [pc, #8]	; (d82d0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d82c8:	681b      	ldr	r3, [r3, #0]
   d82ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d82cc:	9301      	str	r3, [sp, #4]
   d82ce:	bd08      	pop	{r3, pc}
   d82d0:	00030244 	.word	0x00030244

000d82d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d82d4:	b508      	push	{r3, lr}
   d82d6:	4b02      	ldr	r3, [pc, #8]	; (d82e0 <network_connect+0xc>)
   d82d8:	681b      	ldr	r3, [r3, #0]
   d82da:	685b      	ldr	r3, [r3, #4]
   d82dc:	9301      	str	r3, [sp, #4]
   d82de:	bd08      	pop	{r3, pc}
   d82e0:	00030240 	.word	0x00030240

000d82e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d82e4:	b508      	push	{r3, lr}
   d82e6:	4b02      	ldr	r3, [pc, #8]	; (d82f0 <network_connecting+0xc>)
   d82e8:	681b      	ldr	r3, [r3, #0]
   d82ea:	689b      	ldr	r3, [r3, #8]
   d82ec:	9301      	str	r3, [sp, #4]
   d82ee:	bd08      	pop	{r3, pc}
   d82f0:	00030240 	.word	0x00030240

000d82f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d82f4:	b508      	push	{r3, lr}
   d82f6:	4b02      	ldr	r3, [pc, #8]	; (d8300 <network_disconnect+0xc>)
   d82f8:	681b      	ldr	r3, [r3, #0]
   d82fa:	68db      	ldr	r3, [r3, #12]
   d82fc:	9301      	str	r3, [sp, #4]
   d82fe:	bd08      	pop	{r3, pc}
   d8300:	00030240 	.word	0x00030240

000d8304 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8304:	b508      	push	{r3, lr}
   d8306:	4b02      	ldr	r3, [pc, #8]	; (d8310 <network_ready+0xc>)
   d8308:	681b      	ldr	r3, [r3, #0]
   d830a:	691b      	ldr	r3, [r3, #16]
   d830c:	9301      	str	r3, [sp, #4]
   d830e:	bd08      	pop	{r3, pc}
   d8310:	00030240 	.word	0x00030240

000d8314 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8314:	b508      	push	{r3, lr}
   d8316:	4b02      	ldr	r3, [pc, #8]	; (d8320 <network_on+0xc>)
   d8318:	681b      	ldr	r3, [r3, #0]
   d831a:	695b      	ldr	r3, [r3, #20]
   d831c:	9301      	str	r3, [sp, #4]
   d831e:	bd08      	pop	{r3, pc}
   d8320:	00030240 	.word	0x00030240

000d8324 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8324:	b508      	push	{r3, lr}
   d8326:	4b02      	ldr	r3, [pc, #8]	; (d8330 <network_off+0xc>)
   d8328:	681b      	ldr	r3, [r3, #0]
   d832a:	699b      	ldr	r3, [r3, #24]
   d832c:	9301      	str	r3, [sp, #4]
   d832e:	bd08      	pop	{r3, pc}
   d8330:	00030240 	.word	0x00030240

000d8334 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8334:	b508      	push	{r3, lr}
   d8336:	4b02      	ldr	r3, [pc, #8]	; (d8340 <network_listen+0xc>)
   d8338:	681b      	ldr	r3, [r3, #0]
   d833a:	69db      	ldr	r3, [r3, #28]
   d833c:	9301      	str	r3, [sp, #4]
   d833e:	bd08      	pop	{r3, pc}
   d8340:	00030240 	.word	0x00030240

000d8344 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8344:	b508      	push	{r3, lr}
   d8346:	4b02      	ldr	r3, [pc, #8]	; (d8350 <network_listening+0xc>)
   d8348:	681b      	ldr	r3, [r3, #0]
   d834a:	6a1b      	ldr	r3, [r3, #32]
   d834c:	9301      	str	r3, [sp, #4]
   d834e:	bd08      	pop	{r3, pc}
   d8350:	00030240 	.word	0x00030240

000d8354 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8354:	b508      	push	{r3, lr}
   d8356:	4b02      	ldr	r3, [pc, #8]	; (d8360 <network_set_listen_timeout+0xc>)
   d8358:	681b      	ldr	r3, [r3, #0]
   d835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d835c:	9301      	str	r3, [sp, #4]
   d835e:	bd08      	pop	{r3, pc}
   d8360:	00030240 	.word	0x00030240

000d8364 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8364:	b508      	push	{r3, lr}
   d8366:	4b02      	ldr	r3, [pc, #8]	; (d8370 <network_get_listen_timeout+0xc>)
   d8368:	681b      	ldr	r3, [r3, #0]
   d836a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d836c:	9301      	str	r3, [sp, #4]
   d836e:	bd08      	pop	{r3, pc}
   d8370:	00030240 	.word	0x00030240

000d8374 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8374:	b508      	push	{r3, lr}
   d8376:	4b02      	ldr	r3, [pc, #8]	; (d8380 <malloc+0xc>)
   d8378:	681b      	ldr	r3, [r3, #0]
   d837a:	681b      	ldr	r3, [r3, #0]
   d837c:	9301      	str	r3, [sp, #4]
   d837e:	bd08      	pop	{r3, pc}
   d8380:	0003021c 	.word	0x0003021c

000d8384 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8384:	b508      	push	{r3, lr}
   d8386:	4b02      	ldr	r3, [pc, #8]	; (d8390 <free+0xc>)
   d8388:	681b      	ldr	r3, [r3, #0]
   d838a:	685b      	ldr	r3, [r3, #4]
   d838c:	9301      	str	r3, [sp, #4]
   d838e:	bd08      	pop	{r3, pc}
   d8390:	0003021c 	.word	0x0003021c

000d8394 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8394:	b508      	push	{r3, lr}
   d8396:	4b02      	ldr	r3, [pc, #8]	; (d83a0 <realloc+0xc>)
   d8398:	681b      	ldr	r3, [r3, #0]
   d839a:	689b      	ldr	r3, [r3, #8]
   d839c:	9301      	str	r3, [sp, #4]
   d839e:	bd08      	pop	{r3, pc}
   d83a0:	0003021c 	.word	0x0003021c

000d83a4 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d83a4:	b508      	push	{r3, lr}
   d83a6:	4b02      	ldr	r3, [pc, #8]	; (d83b0 <sprintf+0xc>)
   d83a8:	681b      	ldr	r3, [r3, #0]
   d83aa:	68db      	ldr	r3, [r3, #12]
   d83ac:	9301      	str	r3, [sp, #4]
   d83ae:	bd08      	pop	{r3, pc}
   d83b0:	0003021c 	.word	0x0003021c

000d83b4 <siscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d83b4:	b508      	push	{r3, lr}
   d83b6:	4b02      	ldr	r3, [pc, #8]	; (d83c0 <siscanf+0xc>)
   d83b8:	681b      	ldr	r3, [r3, #0]
   d83ba:	699b      	ldr	r3, [r3, #24]
   d83bc:	9301      	str	r3, [sp, #4]
   d83be:	bd08      	pop	{r3, pc}
   d83c0:	0003021c 	.word	0x0003021c

000d83c4 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d83c4:	b508      	push	{r3, lr}
   d83c6:	4b02      	ldr	r3, [pc, #8]	; (d83d0 <snprintf+0xc>)
   d83c8:	681b      	ldr	r3, [r3, #0]
   d83ca:	69db      	ldr	r3, [r3, #28]
   d83cc:	9301      	str	r3, [sp, #4]
   d83ce:	bd08      	pop	{r3, pc}
   d83d0:	0003021c 	.word	0x0003021c

000d83d4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d83d4:	b508      	push	{r3, lr}
   d83d6:	4b02      	ldr	r3, [pc, #8]	; (d83e0 <vsnprintf+0xc>)
   d83d8:	681b      	ldr	r3, [r3, #0]
   d83da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d83dc:	9301      	str	r3, [sp, #4]
   d83de:	bd08      	pop	{r3, pc}
   d83e0:	0003021c 	.word	0x0003021c

000d83e4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d83e4:	b508      	push	{r3, lr}
   d83e6:	4b02      	ldr	r3, [pc, #8]	; (d83f0 <abort+0xc>)
   d83e8:	681b      	ldr	r3, [r3, #0]
   d83ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d83ec:	9301      	str	r3, [sp, #4]
   d83ee:	bd08      	pop	{r3, pc}
   d83f0:	0003021c 	.word	0x0003021c

000d83f4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d83f4:	b508      	push	{r3, lr}
   d83f6:	4b02      	ldr	r3, [pc, #8]	; (d8400 <_malloc_r+0xc>)
   d83f8:	681b      	ldr	r3, [r3, #0]
   d83fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d83fc:	9301      	str	r3, [sp, #4]
   d83fe:	bd08      	pop	{r3, pc}
   d8400:	0003021c 	.word	0x0003021c

000d8404 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8404:	2100      	movs	r1, #0
   d8406:	f7ff bef9 	b.w	d81fc <system_delay_ms>

000d840a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d840a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d840c:	6883      	ldr	r3, [r0, #8]
   d840e:	4604      	mov	r4, r0
   d8410:	b90b      	cbnz	r3, d8416 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8412:	f003 fe26 	bl	dc062 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8416:	68c3      	ldr	r3, [r0, #12]
   d8418:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d841a:	68a3      	ldr	r3, [r4, #8]
   d841c:	b11b      	cbz	r3, d8426 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d841e:	2203      	movs	r2, #3
   d8420:	4621      	mov	r1, r4
   d8422:	4620      	mov	r0, r4
   d8424:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8426:	4620      	mov	r0, r4
   d8428:	2110      	movs	r1, #16
}
   d842a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d842e:	f003 bdfc 	b.w	dc02a <_ZdlPvj>

000d8432 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8432:	4770      	bx	lr

000d8434 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d8434:	2000      	movs	r0, #0
   d8436:	4770      	bx	lr

000d8438 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8438:	4770      	bx	lr

000d843a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d843a:	2000      	movs	r0, #0
   d843c:	4770      	bx	lr

000d843e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d843e:	4770      	bx	lr

000d8440 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d8440:	2000      	movs	r0, #0
   d8442:	4770      	bx	lr

000d8444 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8444:	b510      	push	{r4, lr}
   d8446:	2114      	movs	r1, #20
   d8448:	4604      	mov	r4, r0
   d844a:	f003 fdee 	bl	dc02a <_ZdlPvj>
   d844e:	4620      	mov	r0, r4
   d8450:	bd10      	pop	{r4, pc}

000d8452 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d8452:	b510      	push	{r4, lr}
   d8454:	2114      	movs	r1, #20
   d8456:	4604      	mov	r4, r0
   d8458:	f003 fde7 	bl	dc02a <_ZdlPvj>
   d845c:	4620      	mov	r0, r4
   d845e:	bd10      	pop	{r4, pc}

000d8460 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d8460:	b510      	push	{r4, lr}
   d8462:	2114      	movs	r1, #20
   d8464:	4604      	mov	r4, r0
   d8466:	f003 fde0 	bl	dc02a <_ZdlPvj>
   d846a:	4620      	mov	r0, r4
   d846c:	bd10      	pop	{r4, pc}

000d846e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d846e:	f7fb be16 	b.w	d409e <_ZdlPv>

000d8472 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d8472:	f7fb be14 	b.w	d409e <_ZdlPv>

000d8476 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d8476:	f7fb be12 	b.w	d409e <_ZdlPv>

000d847a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d847a:	b510      	push	{r4, lr}
   d847c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d847e:	6800      	ldr	r0, [r0, #0]
   d8480:	b108      	cbz	r0, d8486 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d8482:	f7ff fca9 	bl	d7dd8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d8486:	4620      	mov	r0, r4
   d8488:	bd10      	pop	{r4, pc}
	...

000d848c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d848c:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d848e:	200a      	movs	r0, #10
   d8490:	4a02      	ldr	r2, [pc, #8]	; (d849c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d8492:	2100      	movs	r1, #0
   d8494:	f7ff fe78 	bl	d8188 <panic_>
    }
}
   d8498:	bd08      	pop	{r3, pc}
   d849a:	bf00      	nop
   d849c:	000d7e29 	.word	0x000d7e29

000d84a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d84a0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d84a2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d84a4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d84a6:	689b      	ldr	r3, [r3, #8]
   d84a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d84aa:	68a3      	ldr	r3, [r4, #8]
   d84ac:	3b01      	subs	r3, #1
   d84ae:	60a3      	str	r3, [r4, #8]
   d84b0:	b92b      	cbnz	r3, d84be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d84b2:	6823      	ldr	r3, [r4, #0]
   d84b4:	4620      	mov	r0, r4
   d84b6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d84b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d84bc:	4718      	bx	r3
   d84be:	bd10      	pop	{r4, pc}

000d84c0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d84c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d84c4:	b2da      	uxtb	r2, r3
   d84c6:	2a09      	cmp	r2, #9
   d84c8:	d801      	bhi.n	d84ce <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d84ca:	4618      	mov	r0, r3
   d84cc:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d84ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d84d2:	2b05      	cmp	r3, #5
   d84d4:	d801      	bhi.n	d84da <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d84d6:	3857      	subs	r0, #87	; 0x57
   d84d8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d84da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d84de:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d84e0:	bf94      	ite	ls
   d84e2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d84e4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d84e8:	4770      	bx	lr
	...

000d84ec <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d84ec:	b510      	push	{r4, lr}
            locked_(false) {
   d84ee:	2300      	movs	r3, #0
   d84f0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d84f2:	4b04      	ldr	r3, [pc, #16]	; (d8504 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d84f4:	4604      	mov	r4, r0
   d84f6:	6818      	ldr	r0, [r3, #0]
   d84f8:	f7ff fc76 	bl	d7de8 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d84fc:	2301      	movs	r3, #1
   d84fe:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d8500:	4620      	mov	r0, r4
   d8502:	bd10      	pop	{r4, pc}
   d8504:	2003e328 	.word	0x2003e328

000d8508 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d8508:	b510      	push	{r4, lr}
        if (locked_) {
   d850a:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d850c:	4604      	mov	r4, r0
        if (locked_) {
   d850e:	b11b      	cbz	r3, d8518 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d8510:	4b02      	ldr	r3, [pc, #8]	; (d851c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d8512:	6818      	ldr	r0, [r3, #0]
   d8514:	f7ff fc70 	bl	d7df8 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d8518:	4620      	mov	r0, r4
   d851a:	bd10      	pop	{r4, pc}
   d851c:	2003e328 	.word	0x2003e328

000d8520 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d8520:	2200      	movs	r2, #0
   d8522:	6002      	str	r2, [r0, #0]
   d8524:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d8526:	4770      	bx	lr

000d8528 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d8528:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d852a:	7982      	ldrb	r2, [r0, #6]
   d852c:	798b      	ldrb	r3, [r1, #6]
   d852e:	429a      	cmp	r2, r3
   d8530:	d106      	bne.n	d8540 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d8532:	2206      	movs	r2, #6
   d8534:	f004 fce6 	bl	dcf04 <memcmp>
   d8538:	fab0 f080 	clz	r0, r0
   d853c:	0940      	lsrs	r0, r0, #5
   d853e:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d8540:	2000      	movs	r0, #0
}
   d8542:	bd08      	pop	{r3, pc}

000d8544 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d8544:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d8546:	2301      	movs	r3, #1
   d8548:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d854a:	4b05      	ldr	r3, [pc, #20]	; (d8560 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d854c:	4602      	mov	r2, r0
   d854e:	f103 0110 	add.w	r1, r3, #16
   d8552:	f853 4b04 	ldr.w	r4, [r3], #4
   d8556:	f842 4b04 	str.w	r4, [r2], #4
   d855a:	428b      	cmp	r3, r1
   d855c:	d1f9      	bne.n	d8552 <_ZN8particle7BleUuidC1Ev+0xe>
}
   d855e:	bd10      	pop	{r4, pc}
   d8560:	000dfbb4 	.word	0x000dfbb4

000d8564 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d8564:	b510      	push	{r4, lr}
    if (uuid128) {
   d8566:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d8568:	4604      	mov	r4, r0
    if (uuid128) {
   d856a:	b1b9      	cbz	r1, d859c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d856c:	2a01      	cmp	r2, #1
   d856e:	d109      	bne.n	d8584 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d8570:	4603      	mov	r3, r0
   d8572:	f101 0210 	add.w	r2, r1, #16
   d8576:	f851 0b04 	ldr.w	r0, [r1], #4
   d857a:	f843 0b04 	str.w	r0, [r3], #4
   d857e:	4291      	cmp	r1, r2
   d8580:	d1f9      	bne.n	d8576 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d8582:	e008      	b.n	d8596 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d8584:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d8586:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d8588:	5c98      	ldrb	r0, [r3, r2]
   d858a:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d858e:	3a01      	subs	r2, #1
   d8590:	b2d2      	uxtb	r2, r2
   d8592:	2aff      	cmp	r2, #255	; 0xff
   d8594:	d1f8      	bne.n	d8588 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d8596:	2301      	movs	r3, #1
   d8598:	6123      	str	r3, [r4, #16]
   d859a:	e002      	b.n	d85a2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d859c:	2210      	movs	r2, #16
   d859e:	f004 fce6 	bl	dcf6e <memset>
    }
}
   d85a2:	4620      	mov	r0, r4
   d85a4:	bd10      	pop	{r4, pc}

000d85a6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
    type_ = BleUuidType::SHORT;
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d85a6:	b538      	push	{r3, r4, r5, lr}
   d85a8:	4605      	mov	r5, r0
   d85aa:	4614      	mov	r4, r2
        : BleUuid(uuid128, order) {
   d85ac:	461a      	mov	r2, r3
   d85ae:	f7ff ffd9 	bl	d8564 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d85b2:	732c      	strb	r4, [r5, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d85b4:	0a24      	lsrs	r4, r4, #8
   d85b6:	736c      	strb	r4, [r5, #13]
}
   d85b8:	4628      	mov	r0, r5
   d85ba:	bd38      	pop	{r3, r4, r5, pc}

000d85bc <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d85bc:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d85be:	6902      	ldr	r2, [r0, #16]
   d85c0:	b90a      	cbnz	r2, d85c6 <_ZNK8particle7BleUuid7isValidEv+0xa>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d85c2:	8980      	ldrh	r0, [r0, #12]
   d85c4:	e003      	b.n	d85ce <_ZNK8particle7BleUuid7isValidEv+0x12>
    } else {
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d85c6:	2210      	movs	r2, #16
   d85c8:	4903      	ldr	r1, [pc, #12]	; (d85d8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d85ca:	f004 fc9b 	bl	dcf04 <memcmp>
   d85ce:	3000      	adds	r0, #0
   d85d0:	bf18      	it	ne
   d85d2:	2001      	movne	r0, #1
    }
}
   d85d4:	bd08      	pop	{r3, pc}
   d85d6:	bf00      	nop
   d85d8:	000dfbb4 	.word	0x000dfbb4

000d85dc <_ZNK8particle7BleUuid4typeEv>:

BleUuidType BleUuid::type() const {
    return type_;
}
   d85dc:	6900      	ldr	r0, [r0, #16]
   d85de:	4770      	bx	lr

000d85e0 <_ZN8particle7BleUuid7halUUIDEv>:

hal_ble_uuid_t BleUuid::halUUID() {
   d85e0:	b538      	push	{r3, r4, r5, lr}
   d85e2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d85e4:	2214      	movs	r2, #20
   d85e6:	2100      	movs	r1, #0

BleUuidType BleUuid::type() const {
    return type_;
}

hal_ble_uuid_t BleUuid::halUUID() {
   d85e8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d85ea:	f004 fcc0 	bl	dcf6e <memset>
    if (type_ == BleUuidType::SHORT) {
   d85ee:	6923      	ldr	r3, [r4, #16]
   d85f0:	b92b      	cbnz	r3, d85fe <_ZN8particle7BleUuid7halUUIDEv+0x1e>
        uuid.type = BLE_UUID_TYPE_16BIT;
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d85f2:	7b62      	ldrb	r2, [r4, #13]
   d85f4:	7b23      	ldrb	r3, [r4, #12]
   d85f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d85fa:	802b      	strh	r3, [r5, #0]
   d85fc:	e00a      	b.n	d8614 <_ZN8particle7BleUuid7halUUIDEv+0x34>
    } else {
        uuid.type = BLE_UUID_TYPE_128BIT;
   d85fe:	2301      	movs	r3, #1
   d8600:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d8602:	f104 0210 	add.w	r2, r4, #16
   d8606:	462b      	mov	r3, r5
   d8608:	f854 1b04 	ldr.w	r1, [r4], #4
   d860c:	f843 1b04 	str.w	r1, [r3], #4
   d8610:	4294      	cmp	r4, r2
   d8612:	d1f9      	bne.n	d8608 <_ZN8particle7BleUuid7halUUIDEv+0x28>
    }
    return uuid;
}
   d8614:	4628      	mov	r0, r5
   d8616:	bd38      	pop	{r3, r4, r5, pc}

000d8618 <_ZNK8particle7BleUuid7shortedEv>:

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d8618:	7b42      	ldrb	r2, [r0, #13]
   d861a:	7b00      	ldrb	r0, [r0, #12]
}
   d861c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d8620:	4770      	bx	lr

000d8622 <_ZNK8particle7BleUuid8rawBytesEv>:
    return BLE_SIG_UUID_128BIT_LEN;
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}
   d8622:	4770      	bx	lr

000d8624 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d8624:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d8626:	690b      	ldr	r3, [r1, #16]
   d8628:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d862a:	f101 0210 	add.w	r2, r1, #16
   d862e:	4603      	mov	r3, r0
   d8630:	f851 4b04 	ldr.w	r4, [r1], #4
   d8634:	f843 4b04 	str.w	r4, [r3], #4
   d8638:	4291      	cmp	r1, r2
   d863a:	d1f9      	bne.n	d8630 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d863c:	bd10      	pop	{r4, pc}

000d863e <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d863e:	b510      	push	{r4, lr}
   d8640:	b086      	sub	sp, #24
   d8642:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d8644:	2201      	movs	r2, #1
   d8646:	a801      	add	r0, sp, #4
   d8648:	f7ff ff8c 	bl	d8564 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d864c:	a901      	add	r1, sp, #4
   d864e:	4620      	mov	r0, r4
   d8650:	f7ff ffe8 	bl	d8624 <_ZN8particle7BleUuidaSERKS0_>
}
   d8654:	b006      	add	sp, #24
   d8656:	bd10      	pop	{r4, pc}

000d8658 <_ZNK8particle7BleUuideqERKS0_>:

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    return *this = BleUuid(uuid);
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d8658:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d865a:	6902      	ldr	r2, [r0, #16]
   d865c:	690b      	ldr	r3, [r1, #16]
   d865e:	429a      	cmp	r2, r3
   d8660:	d106      	bne.n	d8670 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d8662:	2210      	movs	r2, #16
   d8664:	f004 fc4e 	bl	dcf04 <memcmp>
   d8668:	fab0 f080 	clz	r0, r0
   d866c:	0940      	lsrs	r0, r0, #5
   d866e:	bd08      	pop	{r3, pc}
   d8670:	2000      	movs	r0, #0
}
   d8672:	bd08      	pop	{r3, pc}

000d8674 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d8674:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d8676:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d8678:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d867a:	4b31      	ldr	r3, [pc, #196]	; (d8740 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d867c:	460e      	mov	r6, r1
   d867e:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d8680:	4602      	mov	r2, r0
   d8682:	f103 0110 	add.w	r1, r3, #16
   d8686:	f853 0b04 	ldr.w	r0, [r3], #4
   d868a:	f842 0b04 	str.w	r0, [r2], #4
   d868e:	428b      	cmp	r3, r1
   d8690:	d1f9      	bne.n	d8686 <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d8692:	2e00      	cmp	r6, #0
   d8694:	d051      	beq.n	d873a <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d8696:	2124      	movs	r1, #36	; 0x24
   d8698:	4630      	mov	r0, r6
   d869a:	f004 fd20 	bl	dd0de <strnlen>
   d869e:	2804      	cmp	r0, #4
   d86a0:	d010      	beq.n	d86c4 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d86a2:	2700      	movs	r7, #0
   d86a4:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d86a6:	2124      	movs	r1, #36	; 0x24
   d86a8:	4630      	mov	r0, r6
   d86aa:	f004 fd18 	bl	dd0de <strnlen>
   d86ae:	42b8      	cmp	r0, r7
   d86b0:	d901      	bls.n	d86b6 <_ZN8particle7BleUuid9constructEPKc+0x42>
   d86b2:	bb44      	cbnz	r4, d8706 <_ZN8particle7BleUuid9constructEPKc+0x92>
   d86b4:	e041      	b.n	d873a <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d86b6:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d86b8:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d86ba:	42a5      	cmp	r5, r4
   d86bc:	d03d      	beq.n	d873a <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d86be:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d86c2:	e7fa      	b.n	d86ba <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d86c4:	7830      	ldrb	r0, [r6, #0]
   d86c6:	f7ff fefb 	bl	d84c0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d86ca:	1e04      	subs	r4, r0, #0
   d86cc:	db18      	blt.n	d8700 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d86ce:	7870      	ldrb	r0, [r6, #1]
   d86d0:	f7ff fef6 	bl	d84c0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d86d4:	2800      	cmp	r0, #0
   d86d6:	db13      	blt.n	d8700 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d86d8:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d86dc:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d86e0:	78b0      	ldrb	r0, [r6, #2]
   d86e2:	f7ff feed 	bl	d84c0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d86e6:	1e04      	subs	r4, r0, #0
   d86e8:	db0a      	blt.n	d8700 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d86ea:	78f0      	ldrb	r0, [r6, #3]
   d86ec:	f7ff fee8 	bl	d84c0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d86f0:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d86f2:	bfa1      	itttt	ge
   d86f4:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d86f8:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d86fc:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d86fe:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d8700:	2300      	movs	r3, #0
   d8702:	612b      	str	r3, [r5, #16]
   d8704:	e019      	b.n	d873a <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d8706:	5df0      	ldrb	r0, [r6, r7]
   d8708:	f7ff feda 	bl	d84c0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d870c:	0603      	lsls	r3, r0, #24
   d870e:	d412      	bmi.n	d8736 <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d8710:	3c01      	subs	r4, #1
   d8712:	0100      	lsls	r0, r0, #4
   d8714:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d8716:	2124      	movs	r1, #36	; 0x24
   d8718:	4630      	mov	r0, r6
   d871a:	f004 fce0 	bl	dd0de <strnlen>
   d871e:	3701      	adds	r7, #1
   d8720:	4287      	cmp	r7, r0
   d8722:	d208      	bcs.n	d8736 <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d8724:	5df0      	ldrb	r0, [r6, r7]
   d8726:	f7ff fecb 	bl	d84c0 <_ZN8particle11hexToNibbleEc>
   d872a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d872c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d872e:	bfa2      	ittt	ge
   d8730:	5d2b      	ldrbge	r3, [r5, r4]
   d8732:	4318      	orrge	r0, r3
   d8734:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d8736:	3701      	adds	r7, #1
   d8738:	e7b5      	b.n	d86a6 <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d873a:	b003      	add	sp, #12
   d873c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d873e:	bf00      	nop
   d8740:	000dfbb4 	.word	0x000dfbb4

000d8744 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d8744:	b538      	push	{r3, r4, r5, lr}
   d8746:	4604      	mov	r4, r0
   d8748:	460d      	mov	r5, r1
        : BleUuid() {
   d874a:	f7ff fefb 	bl	d8544 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d874e:	4620      	mov	r0, r4
   d8750:	4629      	mov	r1, r5
   d8752:	f7ff ff8f 	bl	d8674 <_ZN8particle7BleUuid9constructEPKc>
}
   d8756:	4620      	mov	r0, r4
   d8758:	bd38      	pop	{r3, r4, r5, pc}

000d875a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d875a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d875c:	b18b      	cbz	r3, d8782 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d875e:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d8760:	1ce5      	adds	r5, r4, #3
   d8762:	428d      	cmp	r5, r1
   d8764:	d80f      	bhi.n	d8786 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d8766:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d8768:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d876a:	5d87      	ldrb	r7, [r0, r6]
   d876c:	4297      	cmp	r7, r2
   d876e:	d105      	bne.n	d877c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d8770:	442e      	add	r6, r5
   d8772:	42b1      	cmp	r1, r6
   d8774:	d307      	bcc.n	d8786 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d8776:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d8778:	1c68      	adds	r0, r5, #1
                return adsLen;
   d877a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d877c:	3501      	adds	r5, #1
   d877e:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d8780:	e7ee      	b.n	d8760 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d8782:	4618      	mov	r0, r3
   d8784:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8786:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d8788:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d878a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d878a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d878e:	4604      	mov	r4, r0
   d8790:	460e      	mov	r6, r1
   d8792:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d8794:	4617      	mov	r7, r2
   d8796:	2a00      	cmp	r2, #0
   d8798:	d03a      	beq.n	d8810 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d879a:	460a      	mov	r2, r1
   d879c:	ab01      	add	r3, sp, #4
   d879e:	6a01      	ldr	r1, [r0, #32]
   d87a0:	f7ff ffdb 	bl	d875a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d87a4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d87a8:	6a22      	ldr	r2, [r4, #32]
   d87aa:	bb03      	cbnz	r3, d87ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d87ac:	b1f8      	cbz	r0, d87ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d87ae:	1c96      	adds	r6, r2, #2
   d87b0:	442e      	add	r6, r5
   d87b2:	1a36      	subs	r6, r6, r0
   d87b4:	2e1f      	cmp	r6, #31
   d87b6:	d82b      	bhi.n	d8810 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d87b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d87bc:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d87c0:	ebc8 0202 	rsb	r2, r8, r2
   d87c4:	1a12      	subs	r2, r2, r0
   d87c6:	eb00 0108 	add.w	r1, r0, r8
   d87ca:	eb05 0009 	add.w	r0, r5, r9
   d87ce:	b292      	uxth	r2, r2
   d87d0:	4421      	add	r1, r4
   d87d2:	4420      	add	r0, r4
   d87d4:	f004 fbb0 	bl	dcf38 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d87d8:	1c6b      	adds	r3, r5, #1
   d87da:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d87de:	462a      	mov	r2, r5
   d87e0:	4639      	mov	r1, r7
   d87e2:	eb04 0009 	add.w	r0, r4, r9
   d87e6:	f004 fb9c 	bl	dcf22 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d87ea:	6226      	str	r6, [r4, #32]
   d87ec:	e010      	b.n	d8810 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d87ee:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d87f0:	182b      	adds	r3, r5, r0
   d87f2:	2b1f      	cmp	r3, #31
   d87f4:	d80c      	bhi.n	d8810 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d87f6:	1c6b      	adds	r3, r5, #1
   d87f8:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d87fa:	4422      	add	r2, r4
   d87fc:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d87fe:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d8800:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d8802:	4420      	add	r0, r4
   d8804:	462a      	mov	r2, r5
   d8806:	f004 fb8c 	bl	dcf22 <memcpy>
        selfLen_ += len;
   d880a:	6a22      	ldr	r2, [r4, #32]
   d880c:	442a      	add	r2, r5
   d880e:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d8810:	6a20      	ldr	r0, [r4, #32]
}
   d8812:	b003      	add	sp, #12
   d8814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8818 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d8818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d881a:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d881c:	4603      	mov	r3, r0
   d881e:	f100 021f 	add.w	r2, r0, #31
   d8822:	2000      	movs	r0, #0
   d8824:	f803 0b01 	strb.w	r0, [r3], #1
   d8828:	4293      	cmp	r3, r2
   d882a:	f04f 0100 	mov.w	r1, #0
   d882e:	d1f9      	bne.n	d8824 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d8830:	aa04      	add	r2, sp, #16
   d8832:	2306      	movs	r3, #6
   d8834:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d8838:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d883a:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d883c:	9100      	str	r1, [sp, #0]
   d883e:	4620      	mov	r0, r4
   d8840:	4619      	mov	r1, r3
   d8842:	f7ff ffa2 	bl	d878a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d8846:	4620      	mov	r0, r4
   d8848:	b004      	add	sp, #16
   d884a:	bd10      	pop	{r4, pc}

000d884c <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:

size_t BleAdvertisingData::appendLocalName(const String& name) {
    return appendLocalName(name.c_str());
}

size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   d884c:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   d884e:	9300      	str	r3, [sp, #0]
   d8850:	4613      	mov	r3, r2
   d8852:	460a      	mov	r2, r1
   d8854:	21ff      	movs	r1, #255	; 0xff
   d8856:	f7ff ff98 	bl	d878a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d885a:	b003      	add	sp, #12
   d885c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8860 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d8860:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d8862:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d8864:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d8866:	ab01      	add	r3, sp, #4
   d8868:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d886a:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d886c:	f7ff ff75 	bl	d875a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d8870:	4605      	mov	r5, r0
   d8872:	b178      	cbz	r0, d8894 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d8874:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d8876:	6a22      	ldr	r2, [r4, #32]
   d8878:	1829      	adds	r1, r5, r0
   d887a:	1a12      	subs	r2, r2, r0
   d887c:	1b52      	subs	r2, r2, r5
   d887e:	4421      	add	r1, r4
   d8880:	4420      	add	r0, r4
   d8882:	f004 fb4e 	bl	dcf22 <memcpy>
        selfLen_ -= len;
   d8886:	6a23      	ldr	r3, [r4, #32]
   d8888:	1b5d      	subs	r5, r3, r5
   d888a:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d888c:	4631      	mov	r1, r6
   d888e:	4620      	mov	r0, r4
   d8890:	f7ff ffe6 	bl	d8860 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d8894:	b002      	add	sp, #8
   d8896:	bd70      	pop	{r4, r5, r6, pc}

000d8898 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d8898:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d889a:	2500      	movs	r5, #0
   d889c:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d88a0:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d88a2:	8043      	strh	r3, [r0, #2]
   d88a4:	220e      	movs	r2, #14
   d88a6:	4629      	mov	r1, r5
   d88a8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d88aa:	7105      	strb	r5, [r0, #4]
   d88ac:	3006      	adds	r0, #6
   d88ae:	f004 fb5e 	bl	dcf6e <memset>
   d88b2:	f104 0014 	add.w	r0, r4, #20
   d88b6:	f7ff fe45 	bl	d8544 <_ZN8particle7BleUuidC1Ev>
   d88ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d88be:	f7ff fe41 	bl	d8544 <_ZN8particle7BleUuidC1Ev>
   d88c2:	4904      	ldr	r1, [pc, #16]	; (d88d4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d88c4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d88c8:	f003 f82d 	bl	db926 <_ZN6StringC1EPK19__FlashStringHelper>
   d88cc:	64e5      	str	r5, [r4, #76]	; 0x4c
   d88ce:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d88d0:	4620      	mov	r0, r4
   d88d2:	bd38      	pop	{r3, r4, r5, pc}
   d88d4:	000df9a7 	.word	0x000df9a7

000d88d8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d88d8:	b510      	push	{r4, lr}
   d88da:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d88dc:	69c2      	ldr	r2, [r0, #28]
   d88de:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d88e2:	4293      	cmp	r3, r2
   d88e4:	4618      	mov	r0, r3
   d88e6:	d006      	beq.n	d88f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d88e8:	6804      	ldr	r4, [r0, #0]
   d88ea:	8824      	ldrh	r4, [r4, #0]
   d88ec:	428c      	cmp	r4, r1
   d88ee:	f103 0308 	add.w	r3, r3, #8
   d88f2:	d1f6      	bne.n	d88e2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d88f4:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d88f6:	2000      	movs	r0, #0
    }
   d88f8:	bd10      	pop	{r4, pc}
	...

000d88fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d88fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8900:	4680      	mov	r8, r0
   d8902:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d8904:	460e      	mov	r6, r1
   d8906:	b369      	cbz	r1, d8964 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d8908:	b362      	cbz	r2, d8964 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d890a:	2af4      	cmp	r2, #244	; 0xf4
   d890c:	6805      	ldr	r5, [r0, #0]
   d890e:	bf28      	it	cs
   d8910:	22f4      	movcs	r2, #244	; 0xf4
   d8912:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d8914:	782a      	ldrb	r2, [r5, #0]
   d8916:	b1a2      	cbz	r2, d8942 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d8918:	792b      	ldrb	r3, [r5, #4]
   d891a:	0798      	lsls	r0, r3, #30
   d891c:	d507      	bpl.n	d892e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d891e:	2300      	movs	r3, #0
   d8920:	4622      	mov	r2, r4
   d8922:	89a8      	ldrh	r0, [r5, #12]
   d8924:	f7ff f9c2 	bl	d7cac <hal_ble_gatt_server_set_characteristic_value>
   d8928:	2800      	cmp	r0, #0
   d892a:	da02      	bge.n	d8932 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d892c:	e043      	b.n	d89b6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d892e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d8932:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d8936:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d8938:	06da      	lsls	r2, r3, #27
   d893a:	d518      	bpl.n	d896e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d893c:	2f01      	cmp	r7, #1
   d893e:	d123      	bne.n	d8988 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d8940:	e015      	b.n	d896e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d8942:	8868      	ldrh	r0, [r5, #2]
   d8944:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8948:	4298      	cmp	r0, r3
   d894a:	d00d      	beq.n	d8968 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d894c:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d894e:	0759      	lsls	r1, r3, #29
   d8950:	d523      	bpl.n	d899a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d8952:	2f01      	cmp	r7, #1
   d8954:	d021      	beq.n	d899a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d8956:	89a9      	ldrh	r1, [r5, #12]
   d8958:	9200      	str	r2, [sp, #0]
   d895a:	4623      	mov	r3, r4
   d895c:	4632      	mov	r2, r6
   d895e:	f7ff f9b9 	bl	d7cd4 <hal_ble_gatt_client_write_without_response>
   d8962:	e028      	b.n	d89b6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d8964:	4815      	ldr	r0, [pc, #84]	; (d89bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d8966:	e026      	b.n	d89b6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d8968:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d896c:	e023      	b.n	d89b6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d896e:	069a      	lsls	r2, r3, #26
   d8970:	d521      	bpl.n	d89b6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d8972:	2f02      	cmp	r7, #2
   d8974:	d01f      	beq.n	d89b6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d8976:	89a8      	ldrh	r0, [r5, #12]
   d8978:	2300      	movs	r3, #0
   d897a:	4622      	mov	r2, r4
   d897c:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d897e:	b002      	add	sp, #8
   d8980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d8984:	f7ff b9ce 	b.w	d7d24 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d8988:	89a8      	ldrh	r0, [r5, #12]
   d898a:	2300      	movs	r3, #0
   d898c:	4622      	mov	r2, r4
   d898e:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d8990:	b002      	add	sp, #8
   d8992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d8996:	f7ff b9bb 	b.w	d7d10 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d899a:	071b      	lsls	r3, r3, #28
   d899c:	d501      	bpl.n	d89a2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d899e:	2f02      	cmp	r7, #2
   d89a0:	d102      	bne.n	d89a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d89a2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d89a6:	e006      	b.n	d89b6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d89a8:	2300      	movs	r3, #0
   d89aa:	89a9      	ldrh	r1, [r5, #12]
   d89ac:	9300      	str	r3, [sp, #0]
   d89ae:	4632      	mov	r2, r6
   d89b0:	4623      	mov	r3, r4
   d89b2:	f7ff f985 	bl	d7cc0 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d89b6:	b002      	add	sp, #8
   d89b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d89bc:	fffffef2 	.word	0xfffffef2

000d89c0 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d89c0:	b510      	push	{r4, lr}
    return impl()->address();
   d89c2:	680a      	ldr	r2, [r1, #0]
   d89c4:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d89c8:	6003      	str	r3, [r0, #0]
   d89ca:	6853      	ldr	r3, [r2, #4]
   d89cc:	6043      	str	r3, [r0, #4]
}
   d89ce:	bd10      	pop	{r4, pc}

000d89d0 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d89d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d89d2:	6802      	ldr	r2, [r0, #0]
   d89d4:	680b      	ldr	r3, [r1, #0]
   d89d6:	8812      	ldrh	r2, [r2, #0]
   d89d8:	881b      	ldrh	r3, [r3, #0]
   d89da:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d89dc:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d89de:	d10c      	bne.n	d89fa <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d89e0:	4601      	mov	r1, r0
   d89e2:	4668      	mov	r0, sp
   d89e4:	f7ff ffec 	bl	d89c0 <_ZNK8particle13BlePeerDevice7addressEv>
   d89e8:	4621      	mov	r1, r4
   d89ea:	a802      	add	r0, sp, #8
   d89ec:	f7ff ffe8 	bl	d89c0 <_ZNK8particle13BlePeerDevice7addressEv>
   d89f0:	a902      	add	r1, sp, #8
   d89f2:	4668      	mov	r0, sp
   d89f4:	f7ff fd98 	bl	d8528 <_ZNK8particle10BleAddresseqERKS0_>
   d89f8:	b900      	cbnz	r0, d89fc <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d89fa:	2000      	movs	r0, #0
}
   d89fc:	b004      	add	sp, #16
   d89fe:	bd10      	pop	{r4, pc}

000d8a00 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d8a00:	b510      	push	{r4, lr}
   d8a02:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d8a04:	2034      	movs	r0, #52	; 0x34
   d8a06:	f7fb fb48 	bl	d409a <_Znwj>
   d8a0a:	4601      	mov	r1, r0
   d8a0c:	b168      	cbz	r0, d8a2a <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8a0e:	2300      	movs	r3, #0
   d8a10:	6003      	str	r3, [r0, #0]
   d8a12:	6043      	str	r3, [r0, #4]
   d8a14:	6083      	str	r3, [r0, #8]
   d8a16:	60c3      	str	r3, [r0, #12]
   d8a18:	6103      	str	r3, [r0, #16]
   d8a1a:	6143      	str	r3, [r0, #20]
   d8a1c:	6183      	str	r3, [r0, #24]
   d8a1e:	61c3      	str	r3, [r0, #28]
   d8a20:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d8a22:	6243      	str	r3, [r0, #36]	; 0x24
   d8a24:	6283      	str	r3, [r0, #40]	; 0x28
   d8a26:	62c3      	str	r3, [r0, #44]	; 0x2c
   d8a28:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8a2a:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d8a2c:	b919      	cbnz	r1, d8a36 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d8a2e:	4a0a      	ldr	r2, [pc, #40]	; (d8a58 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d8a30:	200a      	movs	r0, #10
   d8a32:	f7ff fba9 	bl	d8188 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d8a36:	2000      	movs	r0, #0
   d8a38:	f7ff f904 	bl	d7c44 <hal_ble_stack_init>
   d8a3c:	b120      	cbz	r0, d8a48 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d8a3e:	4a06      	ldr	r2, [pc, #24]	; (d8a58 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d8a40:	2100      	movs	r1, #0
   d8a42:	200a      	movs	r0, #10
   d8a44:	f7ff fba0 	bl	d8188 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d8a48:	2200      	movs	r2, #0
   d8a4a:	6821      	ldr	r1, [r4, #0]
   d8a4c:	4803      	ldr	r0, [pc, #12]	; (d8a5c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d8a4e:	f7ff f955 	bl	d7cfc <hal_ble_set_callback_on_periph_link_events>
}
   d8a52:	4620      	mov	r0, r4
   d8a54:	bd10      	pop	{r4, pc}
   d8a56:	bf00      	nop
   d8a58:	000d7e29 	.word	0x000d7e29
   d8a5c:	000d8e79 	.word	0x000d8e79

000d8a60 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d8a60:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d8a62:	4c0a      	ldr	r4, [pc, #40]	; (d8a8c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d8a64:	6823      	ldr	r3, [r4, #0]
   d8a66:	07db      	lsls	r3, r3, #31
   d8a68:	d40e      	bmi.n	d8a88 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d8a6a:	4620      	mov	r0, r4
   d8a6c:	f7fb fb26 	bl	d40bc <__cxa_guard_acquire>
   d8a70:	b150      	cbz	r0, d8a88 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d8a72:	4807      	ldr	r0, [pc, #28]	; (d8a90 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d8a74:	f7ff ffc4 	bl	d8a00 <_ZN8particle14BleLocalDeviceC1Ev>
   d8a78:	4620      	mov	r0, r4
   d8a7a:	f7fb fb24 	bl	d40c6 <__cxa_guard_release>
   d8a7e:	4a05      	ldr	r2, [pc, #20]	; (d8a94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d8a80:	4905      	ldr	r1, [pc, #20]	; (d8a98 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d8a82:	4803      	ldr	r0, [pc, #12]	; (d8a90 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d8a84:	f003 facc 	bl	dc020 <__aeabi_atexit>
    return instance;
}
   d8a88:	4801      	ldr	r0, [pc, #4]	; (d8a90 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d8a8a:	bd10      	pop	{r4, pc}
   d8a8c:	2003e320 	.word	0x2003e320
   d8a90:	2003e31c 	.word	0x2003e31c
   d8a94:	2003d454 	.word	0x2003d454
   d8a98:	000d8c61 	.word	0x000d8c61

000d8a9c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d8a9c:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d8a9e:	6803      	ldr	r3, [r0, #0]
   d8aa0:	3b09      	subs	r3, #9
   d8aa2:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d8aa4:	b08a      	sub	sp, #40	; 0x28
   d8aa6:	4604      	mov	r4, r0
   d8aa8:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d8aaa:	d819      	bhi.n	d8ae0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d8aac:	f7ff ffd8 	bl	d8a60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d8ab0:	88a1      	ldrh	r1, [r4, #4]
   d8ab2:	6800      	ldr	r0, [r0, #0]
   d8ab4:	f7ff ff10 	bl	d88d8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d8ab8:	4602      	mov	r2, r0
   d8aba:	b958      	cbnz	r0, d8ad4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d8abc:	2320      	movs	r3, #32
   d8abe:	9302      	str	r3, [sp, #8]
   d8ac0:	4b08      	ldr	r3, [pc, #32]	; (d8ae4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d8ac2:	9003      	str	r0, [sp, #12]
   d8ac4:	9300      	str	r3, [sp, #0]
   d8ac6:	aa02      	add	r2, sp, #8
   d8ac8:	4603      	mov	r3, r0
   d8aca:	4907      	ldr	r1, [pc, #28]	; (d8ae8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d8acc:	2032      	movs	r0, #50	; 0x32
   d8ace:	f7ff fb63 	bl	d8198 <log_message>
   d8ad2:	e005      	b.n	d8ae0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d8ad4:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d8ad6:	b11d      	cbz	r5, d8ae0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d8ad8:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d8ada:	68e1      	ldr	r1, [r4, #12]
   d8adc:	6920      	ldr	r0, [r4, #16]
   d8ade:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d8ae0:	b00a      	add	sp, #40	; 0x28
   d8ae2:	bd70      	pop	{r4, r5, r6, pc}
   d8ae4:	000dfa5e 	.word	0x000dfa5e
   d8ae8:	000dfa14 	.word	0x000dfa14

000d8aec <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d8aec:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d8aee:	a801      	add	r0, sp, #4
   d8af0:	f7ff fcfc 	bl	d84ec <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d8af4:	2000      	movs	r0, #0
   d8af6:	f7ff f8a5 	bl	d7c44 <hal_ble_stack_init>
   d8afa:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d8afc:	a801      	add	r0, sp, #4
   d8afe:	f7ff fd03 	bl	d8508 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d8b02:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d8b06:	b002      	add	sp, #8
   d8b08:	bd10      	pop	{r4, pc}

000d8b0a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d8b0a:	4608      	mov	r0, r1
   d8b0c:	b909      	cbnz	r1, d8b12 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d8b0e:	460a      	mov	r2, r1
   d8b10:	e001      	b.n	d8b16 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d8b12:	6a09      	ldr	r1, [r1, #32]
   d8b14:	2200      	movs	r2, #0
   d8b16:	f7ff b89d 	b.w	d7c54 <hal_ble_gap_set_advertising_data>

000d8b1a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d8b1a:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d8b1c:	460c      	mov	r4, r1
   d8b1e:	b911      	cbnz	r1, d8b26 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d8b20:	460a      	mov	r2, r1
   d8b22:	4608      	mov	r0, r1
   d8b24:	e006      	b.n	d8b34 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d8b26:	2101      	movs	r1, #1
   d8b28:	4620      	mov	r0, r4
   d8b2a:	f7ff fe99 	bl	d8860 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d8b2e:	6a21      	ldr	r1, [r4, #32]
   d8b30:	2200      	movs	r2, #0
   d8b32:	4620      	mov	r0, r4
    }
}
   d8b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d8b38:	f7ff b894 	b.w	d7c64 <hal_ble_gap_set_scan_response_data>

000d8b3c <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d8b3c:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d8b3e:	a801      	add	r0, sp, #4
   d8b40:	f7ff fcd4 	bl	d84ec <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d8b44:	2000      	movs	r0, #0
   d8b46:	f7ff f895 	bl	d7c74 <hal_ble_gap_start_advertising>
   d8b4a:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d8b4c:	a801      	add	r0, sp, #4
   d8b4e:	f7ff fcdb 	bl	d8508 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d8b52:	4620      	mov	r0, r4
   d8b54:	b002      	add	sp, #8
   d8b56:	bd10      	pop	{r4, pc}

000d8b58 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d8b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8b5a:	4605      	mov	r5, r0
   d8b5c:	460c      	mov	r4, r1
    WiringBleLock lk;
   d8b5e:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d8b60:	4616      	mov	r6, r2
    WiringBleLock lk;
   d8b62:	f7ff fcc3 	bl	d84ec <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d8b66:	4621      	mov	r1, r4
   d8b68:	4628      	mov	r0, r5
   d8b6a:	f7ff ffce 	bl	d8b0a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d8b6e:	2800      	cmp	r0, #0
   d8b70:	db08      	blt.n	d8b84 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d8b72:	4631      	mov	r1, r6
   d8b74:	4628      	mov	r0, r5
   d8b76:	f7ff ffd0 	bl	d8b1a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d8b7a:	2800      	cmp	r0, #0
   d8b7c:	db02      	blt.n	d8b84 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d8b7e:	4628      	mov	r0, r5
   d8b80:	f7ff ffdc 	bl	d8b3c <_ZNK8particle14BleLocalDevice9advertiseEv>
   d8b84:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d8b86:	a801      	add	r0, sp, #4
   d8b88:	f7ff fcbe 	bl	d8508 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d8b8c:	4620      	mov	r0, r4
   d8b8e:	b002      	add	sp, #8
   d8b90:	bd70      	pop	{r4, r5, r6, pc}

000d8b92 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d8b92:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d8b94:	69d8      	ldr	r0, [r3, #28]
}
   d8b96:	2800      	cmp	r0, #0
   d8b98:	bfd4      	ite	le
   d8b9a:	2000      	movle	r0, #0
   d8b9c:	2001      	movgt	r0, #1
   d8b9e:	4770      	bx	lr

000d8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d8ba0:	680b      	ldr	r3, [r1, #0]
   d8ba2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d8ba4:	b113      	cbz	r3, d8bac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d8ba6:	685a      	ldr	r2, [r3, #4]
   d8ba8:	3201      	adds	r2, #1
   d8baa:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d8bac:	4770      	bx	lr

000d8bae <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d8bae:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8bb0:	f851 3b04 	ldr.w	r3, [r1], #4
   d8bb4:	4604      	mov	r4, r0
   d8bb6:	f840 3b04 	str.w	r3, [r0], #4
   d8bba:	f7ff fff1 	bl	d8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d8bbe:	6823      	ldr	r3, [r4, #0]
   d8bc0:	b90b      	cbnz	r3, d8bc6 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d8bc2:	f7ff fc63 	bl	d848c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d8bc6:	4620      	mov	r0, r4
   d8bc8:	bd10      	pop	{r4, pc}

000d8bca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d8bca:	b510      	push	{r4, lr}
   d8bcc:	f851 3b04 	ldr.w	r3, [r1], #4
   d8bd0:	4604      	mov	r4, r0
   d8bd2:	f840 3b04 	str.w	r3, [r0], #4
   d8bd6:	f7ff ffe3 	bl	d8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d8bda:	4620      	mov	r0, r4
   d8bdc:	bd10      	pop	{r4, pc}

000d8bde <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d8bde:	b510      	push	{r4, lr}
   d8be0:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8be2:	3004      	adds	r0, #4
   d8be4:	f7fb fd4c 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d8be8:	4620      	mov	r0, r4
   d8bea:	bd10      	pop	{r4, pc}

000d8bec <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d8bec:	b510      	push	{r4, lr}
   d8bee:	4604      	mov	r4, r0
   d8bf0:	3004      	adds	r0, #4
   d8bf2:	f7fb fd45 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d8bf6:	4620      	mov	r0, r4
   d8bf8:	bd10      	pop	{r4, pc}

000d8bfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8bfa:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8bfc:	6804      	ldr	r4, [r0, #0]
   d8bfe:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8c00:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d8c02:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8c06:	42a6      	cmp	r6, r4
   d8c08:	d004      	beq.n	d8c14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d8c0a:	1d20      	adds	r0, r4, #4
   d8c0c:	f7fb fd38 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8c10:	3408      	adds	r4, #8
   d8c12:	e7f8      	b.n	d8c06 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8c14:	6828      	ldr	r0, [r5, #0]
   d8c16:	f7ff fbb5 	bl	d8384 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d8c1a:	4628      	mov	r0, r5
   d8c1c:	bd70      	pop	{r4, r5, r6, pc}

000d8c1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8c1e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8c20:	6804      	ldr	r4, [r0, #0]
   d8c22:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8c24:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d8c26:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8c2a:	42a6      	cmp	r6, r4
   d8c2c:	d004      	beq.n	d8c38 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d8c2e:	1d20      	adds	r0, r4, #4
   d8c30:	f7fb fd26 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8c34:	3408      	adds	r4, #8
   d8c36:	e7f8      	b.n	d8c2a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8c38:	6828      	ldr	r0, [r5, #0]
   d8c3a:	f7ff fba3 	bl	d8384 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d8c3e:	4628      	mov	r0, r5
   d8c40:	bd70      	pop	{r4, r5, r6, pc}

000d8c42 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8c42:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8c44:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d8c46:	f104 0018 	add.w	r0, r4, #24
   d8c4a:	f7ff ffe8 	bl	d8c1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d8c4e:	f104 000c 	add.w	r0, r4, #12
   d8c52:	f7ff ffd2 	bl	d8bfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d8c56:	4620      	mov	r0, r4
   d8c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8c5c:	f7fb ba1f 	b.w	d409e <_ZdlPv>

000d8c60 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d8c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8c62:	6804      	ldr	r4, [r0, #0]
   d8c64:	4607      	mov	r7, r0
   d8c66:	b1c4      	cbz	r4, d8c9a <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d8c68:	69a5      	ldr	r5, [r4, #24]
   d8c6a:	69e3      	ldr	r3, [r4, #28]
   d8c6c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8c70:	42ae      	cmp	r6, r5
   d8c72:	d004      	beq.n	d8c7e <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8c74:	1d28      	adds	r0, r5, #4
   d8c76:	f7fb fd03 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8c7a:	3508      	adds	r5, #8
   d8c7c:	e7f8      	b.n	d8c70 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8c7e:	69a0      	ldr	r0, [r4, #24]
   d8c80:	f7ff fb80 	bl	d8384 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d8c84:	f104 000c 	add.w	r0, r4, #12
   d8c88:	f7ff ffc9 	bl	d8c1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d8c8c:	4620      	mov	r0, r4
   d8c8e:	f7ff ffb4 	bl	d8bfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8c92:	2134      	movs	r1, #52	; 0x34
   d8c94:	4620      	mov	r0, r4
   d8c96:	f003 f9c8 	bl	dc02a <_ZdlPvj>
   d8c9a:	4638      	mov	r0, r7
   d8c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d8ca0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d8ca0:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8ca2:	2500      	movs	r5, #0
   d8ca4:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8ca6:	6045      	str	r5, [r0, #4]
   d8ca8:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8caa:	2024      	movs	r0, #36	; 0x24
   d8cac:	f7fb f9f5 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8cb0:	4604      	mov	r4, r0
   d8cb2:	b178      	cbz	r0, d8cd4 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d8cb4:	4603      	mov	r3, r0
   d8cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d8cba:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d8cbe:	f8c0 5002 	str.w	r5, [r0, #2]
   d8cc2:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d8cc4:	7285      	strb	r5, [r0, #10]
   d8cc6:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8cc8:	60c5      	str	r5, [r0, #12]
   d8cca:	6105      	str	r5, [r0, #16]
   d8ccc:	6145      	str	r5, [r0, #20]
   d8cce:	6185      	str	r5, [r0, #24]
   d8cd0:	61c5      	str	r5, [r0, #28]
   d8cd2:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d8cd4:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8cd6:	2014      	movs	r0, #20
   d8cd8:	9301      	str	r3, [sp, #4]
   d8cda:	f7fb f9de 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8cde:	4603      	mov	r3, r0
   d8ce0:	b128      	cbz	r0, d8cee <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8ce2:	2201      	movs	r2, #1
   d8ce4:	6042      	str	r2, [r0, #4]
   d8ce6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8ce8:	4a08      	ldr	r2, [pc, #32]	; (d8d0c <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d8cea:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8cec:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8cee:	a802      	add	r0, sp, #8
   d8cf0:	6872      	ldr	r2, [r6, #4]
   d8cf2:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d8cf6:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8cf8:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8cfa:	f7fb fcc1 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d8cfe:	6833      	ldr	r3, [r6, #0]
   d8d00:	b90b      	cbnz	r3, d8d06 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d8d02:	f7ff fbc3 	bl	d848c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d8d06:	4630      	mov	r0, r6
   d8d08:	b002      	add	sp, #8
   d8d0a:	bd70      	pop	{r4, r5, r6, pc}
   d8d0c:	000df9f0 	.word	0x000df9f0

000d8d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d8d10:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8d12:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d8d14:	6803      	ldr	r3, [r0, #0]
   d8d16:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d8d18:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d8d1a:	d00c      	beq.n	d8d36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d8d1c:	b114      	cbz	r4, d8d24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d8d1e:	6863      	ldr	r3, [r4, #4]
   d8d20:	3301      	adds	r3, #1
   d8d22:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d8d24:	6828      	ldr	r0, [r5, #0]
   d8d26:	b128      	cbz	r0, d8d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8d28:	6843      	ldr	r3, [r0, #4]
   d8d2a:	3b01      	subs	r3, #1
   d8d2c:	6043      	str	r3, [r0, #4]
   d8d2e:	b90b      	cbnz	r3, d8d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d8d30:	f7ff fbb6 	bl	d84a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d8d34:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d8d36:	4628      	mov	r0, r5
   d8d38:	bd38      	pop	{r3, r4, r5, pc}

000d8d3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d8d3a:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d8d3c:	b570      	push	{r4, r5, r6, lr}
   d8d3e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d8d40:	d91a      	bls.n	d8d78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d8d42:	4290      	cmp	r0, r2
   d8d44:	d219      	bcs.n	d8d7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d8d46:	f1a1 0608 	sub.w	r6, r1, #8
   d8d4a:	1a51      	subs	r1, r2, r1
   d8d4c:	3904      	subs	r1, #4
   d8d4e:	1f15      	subs	r5, r2, #4
   d8d50:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d8d52:	1f2b      	subs	r3, r5, #4
   d8d54:	429e      	cmp	r6, r3
   d8d56:	d025      	beq.n	d8da4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d8d58:	2c04      	cmp	r4, #4
   d8d5a:	d007      	beq.n	d8d6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8d5c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d8d60:	f844 3c04 	str.w	r3, [r4, #-4]
   d8d64:	4629      	mov	r1, r5
   d8d66:	4620      	mov	r0, r4
   d8d68:	f7ff ff1a 	bl	d8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8d6c:	4628      	mov	r0, r5
   d8d6e:	f7fb fc87 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8d72:	3d08      	subs	r5, #8
   d8d74:	3c08      	subs	r4, #8
   d8d76:	e7ec      	b.n	d8d52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d8d78:	d014      	beq.n	d8da4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d8d7a:	1d0c      	adds	r4, r1, #4
   d8d7c:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d8d7e:	1f23      	subs	r3, r4, #4
   d8d80:	429d      	cmp	r5, r3
   d8d82:	d00f      	beq.n	d8da4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d8d84:	2e04      	cmp	r6, #4
   d8d86:	d007      	beq.n	d8d98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8d88:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d8d8c:	f846 3c04 	str.w	r3, [r6, #-4]
   d8d90:	4621      	mov	r1, r4
   d8d92:	4630      	mov	r0, r6
   d8d94:	f7ff ff04 	bl	d8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8d98:	4620      	mov	r0, r4
   d8d9a:	f7fb fc71 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8d9e:	3408      	adds	r4, #8
   d8da0:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d8da2:	e7ec      	b.n	d8d7e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d8da4:	bd70      	pop	{r4, r5, r6, pc}

000d8da6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d8daa:	6804      	ldr	r4, [r0, #0]
   d8dac:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8dae:	4605      	mov	r5, r0
   d8db0:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d8db2:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d8db6:	42a7      	cmp	r7, r4
   d8db8:	d018      	beq.n	d8dec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d8dba:	4641      	mov	r1, r8
   d8dbc:	4620      	mov	r0, r4
   d8dbe:	f7ff fe07 	bl	d89d0 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d8dc2:	4606      	mov	r6, r0
   d8dc4:	b908      	cbnz	r0, d8dca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d8dc6:	3408      	adds	r4, #8
   d8dc8:	e7f5      	b.n	d8db6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d8dca:	b18c      	cbz	r4, d8df0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d8dcc:	1d20      	adds	r0, r4, #4
   d8dce:	f7fb fc57 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d8dd2:	682b      	ldr	r3, [r5, #0]
   d8dd4:	686a      	ldr	r2, [r5, #4]
   d8dd6:	f104 0108 	add.w	r1, r4, #8
   d8dda:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d8dde:	4620      	mov	r0, r4
   d8de0:	f7ff ffab 	bl	d8d3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d8de4:	686b      	ldr	r3, [r5, #4]
   d8de6:	3b01      	subs	r3, #1
   d8de8:	606b      	str	r3, [r5, #4]
    return true;
   d8dea:	e002      	b.n	d8df2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d8dec:	2600      	movs	r6, #0
   d8dee:	e000      	b.n	d8df2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d8df0:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d8df2:	4630      	mov	r0, r6
   d8df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8df8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d8df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8dfa:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8dfc:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d8e00:	6847      	ldr	r7, [r0, #4]
   d8e02:	9300      	str	r3, [sp, #0]
   d8e04:	a801      	add	r0, sp, #4
   d8e06:	f7ff fecb 	bl	d8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8e0a:	6866      	ldr	r6, [r4, #4]
   d8e0c:	68a3      	ldr	r3, [r4, #8]
   d8e0e:	429e      	cmp	r6, r3
   d8e10:	db14      	blt.n	d8e3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d8e12:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d8e14:	2e00      	cmp	r6, #0
   d8e16:	dd0b      	ble.n	d8e30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d8e18:	00f0      	lsls	r0, r6, #3
   d8e1a:	f7ff faab 	bl	d8374 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d8e1e:	4605      	mov	r5, r0
   d8e20:	b318      	cbz	r0, d8e6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d8e22:	e894 0006 	ldmia.w	r4, {r1, r2}
   d8e26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d8e2a:	f7ff ff86 	bl	d8d3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d8e2e:	e000      	b.n	d8e32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d8e30:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8e32:	6820      	ldr	r0, [r4, #0]
   d8e34:	f7ff faa6 	bl	d8384 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d8e38:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d8e3a:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8e3c:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d8e3e:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8e40:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d8e44:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d8e48:	4629      	mov	r1, r5
   d8e4a:	f105 0008 	add.w	r0, r5, #8
   d8e4e:	f7ff ff74 	bl	d8d3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d8e52:	b135      	cbz	r5, d8e62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d8e54:	9b00      	ldr	r3, [sp, #0]
   d8e56:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d8e5a:	a901      	add	r1, sp, #4
   d8e5c:	1d28      	adds	r0, r5, #4
   d8e5e:	f7ff fe9f 	bl	d8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d8e62:	6863      	ldr	r3, [r4, #4]
   d8e64:	3301      	adds	r3, #1
   d8e66:	6063      	str	r3, [r4, #4]
   d8e68:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8e6a:	a801      	add	r0, sp, #4
   d8e6c:	f7fb fc08 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d8e70:	4628      	mov	r0, r5
   d8e72:	b003      	add	sp, #12
   d8e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d8e78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d8e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8e7c:	4604      	mov	r4, r0
   d8e7e:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d8e80:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d8e82:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d8e84:	f7ff fb32 	bl	d84ec <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d8e88:	6823      	ldr	r3, [r4, #0]
   d8e8a:	2b03      	cmp	r3, #3
   d8e8c:	d002      	beq.n	d8e94 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d8e8e:	2b04      	cmp	r3, #4
   d8e90:	d042      	beq.n	d8f18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d8e92:	e087      	b.n	d8fa4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d8e94:	a804      	add	r0, sp, #16
   d8e96:	f7ff ff03 	bl	d8ca0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d8e9a:	9b04      	ldr	r3, [sp, #16]
   d8e9c:	8922      	ldrh	r2, [r4, #8]
   d8e9e:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d8ea0:	6862      	ldr	r2, [r4, #4]
   d8ea2:	9904      	ldr	r1, [sp, #16]
   d8ea4:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d8ea8:	f8c1 3002 	str.w	r3, [r1, #2]
   d8eac:	6853      	ldr	r3, [r2, #4]
   d8eae:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8eb2:	a807      	add	r0, sp, #28
   d8eb4:	9b04      	ldr	r3, [sp, #16]
   d8eb6:	9306      	str	r3, [sp, #24]
   d8eb8:	a905      	add	r1, sp, #20
   d8eba:	f7ff fe71 	bl	d8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d8ebe:	a906      	add	r1, sp, #24
   d8ec0:	f105 0018 	add.w	r0, r5, #24
   d8ec4:	f7ff ff98 	bl	d8df8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d8ec8:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8eca:	a807      	add	r0, sp, #28
   d8ecc:	f7fb fbd8 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8ed0:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d8ed2:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d8ed4:	b974      	cbnz	r4, d8ef4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d8ed6:	4b36      	ldr	r3, [pc, #216]	; (d8fb0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d8ed8:	9300      	str	r3, [sp, #0]
   d8eda:	aa06      	add	r2, sp, #24
   d8edc:	4623      	mov	r3, r4
   d8ede:	4935      	ldr	r1, [pc, #212]	; (d8fb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d8ee0:	9407      	str	r4, [sp, #28]
   d8ee2:	2032      	movs	r0, #50	; 0x32
   d8ee4:	f7ff f958 	bl	d8198 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d8ee8:	9b04      	ldr	r3, [sp, #16]
   d8eea:	4621      	mov	r1, r4
   d8eec:	8818      	ldrh	r0, [r3, #0]
   d8eee:	f7fe fec9 	bl	d7c84 <hal_ble_gap_disconnect>
   d8ef2:	e00d      	b.n	d8f10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d8ef4:	4a30      	ldr	r2, [pc, #192]	; (d8fb8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d8ef6:	9200      	str	r2, [sp, #0]
   d8ef8:	2300      	movs	r3, #0
   d8efa:	aa06      	add	r2, sp, #24
   d8efc:	492d      	ldr	r1, [pc, #180]	; (d8fb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d8efe:	9307      	str	r3, [sp, #28]
   d8f00:	2001      	movs	r0, #1
   d8f02:	f7ff f949 	bl	d8198 <log_message>
                if (impl->connectedCb_) {
   d8f06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d8f08:	b113      	cbz	r3, d8f10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d8f0a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d8f0c:	a804      	add	r0, sp, #16
   d8f0e:	4798      	blx	r3
   d8f10:	a805      	add	r0, sp, #20
   d8f12:	f7fb fbb5 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8f16:	e045      	b.n	d8fa4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d8f18:	8921      	ldrh	r1, [r4, #8]
   d8f1a:	4628      	mov	r0, r5
   d8f1c:	f7ff fcdc 	bl	d88d8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d8f20:	4607      	mov	r7, r0
   d8f22:	2800      	cmp	r0, #0
   d8f24:	d03e      	beq.n	d8fa4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d8f26:	6804      	ldr	r4, [r0, #0]
   d8f28:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8f2a:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d8f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d8f30:	8022      	strh	r2, [r4, #0]
   d8f32:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d8f36:	4299      	cmp	r1, r3
   d8f38:	d003      	beq.n	d8f42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d8f3a:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d8f3e:	8042      	strh	r2, [r0, #2]
   d8f40:	e7f9      	b.n	d8f36 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d8f42:	68e6      	ldr	r6, [r4, #12]
   d8f44:	6923      	ldr	r3, [r4, #16]
   d8f46:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8f4a:	45b0      	cmp	r8, r6
   d8f4c:	d004      	beq.n	d8f58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d8f4e:	1d30      	adds	r0, r6, #4
   d8f50:	f7fb fb96 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8f54:	3608      	adds	r6, #8
   d8f56:	e7f8      	b.n	d8f4a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d8f58:	2300      	movs	r3, #0
   d8f5a:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d8f5c:	69a6      	ldr	r6, [r4, #24]
   d8f5e:	69e3      	ldr	r3, [r4, #28]
   d8f60:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8f64:	45b0      	cmp	r8, r6
   d8f66:	d004      	beq.n	d8f72 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d8f68:	1d30      	adds	r0, r6, #4
   d8f6a:	f7fb fb89 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8f6e:	3608      	adds	r6, #8
   d8f70:	e7f8      	b.n	d8f64 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d8f72:	2300      	movs	r3, #0
   d8f74:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d8f76:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d8f78:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d8f7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d8f7c:	b113      	cbz	r3, d8f84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d8f7e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d8f80:	4638      	mov	r0, r7
   d8f82:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d8f84:	2320      	movs	r3, #32
   d8f86:	4a0d      	ldr	r2, [pc, #52]	; (d8fbc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d8f88:	9306      	str	r3, [sp, #24]
   d8f8a:	9200      	str	r2, [sp, #0]
   d8f8c:	2300      	movs	r3, #0
   d8f8e:	4909      	ldr	r1, [pc, #36]	; (d8fb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d8f90:	9307      	str	r3, [sp, #28]
   d8f92:	2001      	movs	r0, #1
   d8f94:	aa06      	add	r2, sp, #24
   d8f96:	f7ff f8ff 	bl	d8198 <log_message>
                    impl->peers_.removeOne(*peer);
   d8f9a:	4639      	mov	r1, r7
   d8f9c:	f105 0018 	add.w	r0, r5, #24
   d8fa0:	f7ff ff01 	bl	d8da6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d8fa4:	a803      	add	r0, sp, #12
   d8fa6:	f7ff faaf 	bl	d8508 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d8faa:	b00e      	add	sp, #56	; 0x38
   d8fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8fb0:	000dfa76 	.word	0x000dfa76
   d8fb4:	000dfa14 	.word	0x000dfa14
   d8fb8:	000dfa9c 	.word	0x000dfa9c
   d8fbc:	000dfab9 	.word	0x000dfab9

000d8fc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d8fc0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d8fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8fc4:	4606      	mov	r6, r0
   d8fc6:	460c      	mov	r4, r1
   d8fc8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d8fca:	d914      	bls.n	d8ff6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d8fcc:	4290      	cmp	r0, r2
   d8fce:	d213      	bcs.n	d8ff8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d8fd0:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d8fd4:	1a6c      	subs	r4, r5, r1
   d8fd6:	f1a1 0708 	sub.w	r7, r1, #8
   d8fda:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d8fdc:	42af      	cmp	r7, r5
   d8fde:	d018      	beq.n	d9012 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d8fe0:	b11c      	cbz	r4, d8fea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d8fe2:	4629      	mov	r1, r5
   d8fe4:	4620      	mov	r0, r4
   d8fe6:	f7ff fdf0 	bl	d8bca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d8fea:	1d28      	adds	r0, r5, #4
   d8fec:	f7fb fb48 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d8ff0:	3d08      	subs	r5, #8
   d8ff2:	3c08      	subs	r4, #8
   d8ff4:	e7f2      	b.n	d8fdc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d8ff6:	d00c      	beq.n	d9012 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d8ff8:	42ac      	cmp	r4, r5
   d8ffa:	d00a      	beq.n	d9012 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d8ffc:	b11e      	cbz	r6, d9006 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d8ffe:	4621      	mov	r1, r4
   d9000:	4630      	mov	r0, r6
   d9002:	f7ff fde2 	bl	d8bca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d9006:	1d20      	adds	r0, r4, #4
   d9008:	f7fb fb3a 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d900c:	3408      	adds	r4, #8
   d900e:	3608      	adds	r6, #8
   d9010:	e7f2      	b.n	d8ff8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d9012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9014 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d9014:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d9016:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d9018:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d901a:	dd0b      	ble.n	d9034 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d901c:	00f0      	lsls	r0, r6, #3
   d901e:	f7ff f9a9 	bl	d8374 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d9022:	4604      	mov	r4, r0
   d9024:	b170      	cbz	r0, d9044 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d9026:	e895 0006 	ldmia.w	r5, {r1, r2}
   d902a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d902e:	f7ff ffc7 	bl	d8fc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d9032:	e000      	b.n	d9036 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d9034:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d9036:	6828      	ldr	r0, [r5, #0]
   d9038:	f7ff f9a4 	bl	d8384 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d903c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d903e:	60ae      	str	r6, [r5, #8]
        return true;
   d9040:	2001      	movs	r0, #1
   d9042:	bd70      	pop	{r4, r5, r6, pc}
    }
   d9044:	bd70      	pop	{r4, r5, r6, pc}

000d9046 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d9046:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9048:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d904a:	6845      	ldr	r5, [r0, #4]
   d904c:	4668      	mov	r0, sp
   d904e:	f7ff fdbc 	bl	d8bca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9052:	6861      	ldr	r1, [r4, #4]
   d9054:	68a3      	ldr	r3, [r4, #8]
   d9056:	4299      	cmp	r1, r3
   d9058:	db05      	blt.n	d9066 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d905a:	3101      	adds	r1, #1
   d905c:	4620      	mov	r0, r4
   d905e:	f7ff ffd9 	bl	d9014 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d9062:	4606      	mov	r6, r0
   d9064:	b198      	cbz	r0, d908e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d9066:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d9068:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d906a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d906e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d9072:	4629      	mov	r1, r5
   d9074:	f105 0008 	add.w	r0, r5, #8
   d9078:	f7ff ffa2 	bl	d8fc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d907c:	b11d      	cbz	r5, d9086 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d907e:	4669      	mov	r1, sp
   d9080:	4628      	mov	r0, r5
   d9082:	f7ff fda2 	bl	d8bca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d9086:	6863      	ldr	r3, [r4, #4]
   d9088:	3301      	adds	r3, #1
   d908a:	6063      	str	r3, [r4, #4]
   d908c:	2601      	movs	r6, #1
   d908e:	a801      	add	r0, sp, #4
   d9090:	f7fb faf6 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d9094:	4630      	mov	r0, r6
   d9096:	b002      	add	sp, #8
   d9098:	bd70      	pop	{r4, r5, r6, pc}

000d909a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d909a:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d909e:	4606      	mov	r6, r0
   d90a0:	460c      	mov	r4, r1
   d90a2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d90a4:	d914      	bls.n	d90d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d90a6:	4290      	cmp	r0, r2
   d90a8:	d213      	bcs.n	d90d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d90aa:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d90ae:	1a6c      	subs	r4, r5, r1
   d90b0:	f1a1 0708 	sub.w	r7, r1, #8
   d90b4:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d90b6:	42af      	cmp	r7, r5
   d90b8:	d018      	beq.n	d90ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d90ba:	b11c      	cbz	r4, d90c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d90bc:	4629      	mov	r1, r5
   d90be:	4620      	mov	r0, r4
   d90c0:	f7ff fd75 	bl	d8bae <_ZN8particle17BleCharacteristicC1ERKS0_>
   d90c4:	1d28      	adds	r0, r5, #4
   d90c6:	f7fb fadb 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d90ca:	3d08      	subs	r5, #8
   d90cc:	3c08      	subs	r4, #8
   d90ce:	e7f2      	b.n	d90b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d90d0:	d00c      	beq.n	d90ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d90d2:	42ac      	cmp	r4, r5
   d90d4:	d00a      	beq.n	d90ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d90d6:	b11e      	cbz	r6, d90e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d90d8:	4621      	mov	r1, r4
   d90da:	4630      	mov	r0, r6
   d90dc:	f7ff fd67 	bl	d8bae <_ZN8particle17BleCharacteristicC1ERKS0_>
   d90e0:	1d20      	adds	r0, r4, #4
   d90e2:	f7fb facd 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d90e6:	3408      	adds	r4, #8
   d90e8:	3608      	adds	r6, #8
   d90ea:	e7f2      	b.n	d90d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d90ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d90ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d90ee:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d90f0:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d90f2:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d90f4:	dd0b      	ble.n	d910e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d90f6:	00f0      	lsls	r0, r6, #3
   d90f8:	f7ff f93c 	bl	d8374 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d90fc:	4604      	mov	r4, r0
   d90fe:	b170      	cbz	r0, d911e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d9100:	e895 0006 	ldmia.w	r5, {r1, r2}
   d9104:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d9108:	f7ff ffc7 	bl	d909a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d910c:	e000      	b.n	d9110 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d910e:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d9110:	6828      	ldr	r0, [r5, #0]
   d9112:	f7ff f937 	bl	d8384 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d9116:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d9118:	60ae      	str	r6, [r5, #8]
        return true;
   d911a:	2001      	movs	r0, #1
   d911c:	bd70      	pop	{r4, r5, r6, pc}
    }
   d911e:	bd70      	pop	{r4, r5, r6, pc}

000d9120 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d9120:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9122:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d9124:	6845      	ldr	r5, [r0, #4]
   d9126:	4668      	mov	r0, sp
   d9128:	f7ff fd41 	bl	d8bae <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d912c:	6861      	ldr	r1, [r4, #4]
   d912e:	68a3      	ldr	r3, [r4, #8]
   d9130:	4299      	cmp	r1, r3
   d9132:	db05      	blt.n	d9140 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d9134:	3101      	adds	r1, #1
   d9136:	4620      	mov	r0, r4
   d9138:	f7ff ffd9 	bl	d90ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d913c:	4606      	mov	r6, r0
   d913e:	b198      	cbz	r0, d9168 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d9140:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d9142:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d9144:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d9148:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d914c:	4629      	mov	r1, r5
   d914e:	f105 0008 	add.w	r0, r5, #8
   d9152:	f7ff ffa2 	bl	d909a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d9156:	b11d      	cbz	r5, d9160 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d9158:	4669      	mov	r1, sp
   d915a:	4628      	mov	r0, r5
   d915c:	f7ff fd27 	bl	d8bae <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d9160:	6863      	ldr	r3, [r4, #4]
   d9162:	3301      	adds	r3, #1
   d9164:	6063      	str	r3, [r4, #4]
   d9166:	2601      	movs	r6, #1
   d9168:	a801      	add	r0, sp, #4
   d916a:	f7fb fa89 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d916e:	4630      	mov	r0, r6
   d9170:	b002      	add	sp, #8
   d9172:	bd70      	pop	{r4, r5, r6, pc}

000d9174 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d9174:	b510      	push	{r4, lr}
   d9176:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d9178:	6840      	ldr	r0, [r0, #4]
   d917a:	b108      	cbz	r0, d9180 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d917c:	f7fa ff8f 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d9180:	4620      	mov	r0, r4
   d9182:	bd10      	pop	{r4, pc}

000d9184 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d9184:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d9186:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d9188:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d918a:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d918e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d9192:	f002 fb81 	bl	db898 <_ZN6StringD1Ev>
   d9196:	4668      	mov	r0, sp
   d9198:	f7ff ffec 	bl	d9174 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d919c:	b003      	add	sp, #12
   d919e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d91a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d91a4:	b538      	push	{r3, r4, r5, lr}
   d91a6:	2300      	movs	r3, #0
   d91a8:	4604      	mov	r4, r0
   d91aa:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d91ac:	2014      	movs	r0, #20
   d91ae:	460d      	mov	r5, r1
   d91b0:	f7fa ff73 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d91b4:	b128      	cbz	r0, d91c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d91b6:	2301      	movs	r3, #1
   d91b8:	6043      	str	r3, [r0, #4]
   d91ba:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d91bc:	4b02      	ldr	r3, [pc, #8]	; (d91c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d91be:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d91c0:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d91c2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d91c4:	4620      	mov	r0, r4
   d91c6:	bd38      	pop	{r3, r4, r5, pc}
   d91c8:	000df9b8 	.word	0x000df9b8

000d91cc <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d91cc:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d91ce:	2500      	movs	r5, #0
   d91d0:	b086      	sub	sp, #24
   d91d2:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d91d4:	6045      	str	r5, [r0, #4]
   d91d6:	4604      	mov	r4, r0
   d91d8:	2054      	movs	r0, #84	; 0x54
   d91da:	f7fa ff5e 	bl	d409a <_Znwj>
   d91de:	f8cd d010 	str.w	sp, [sp, #16]
   d91e2:	4606      	mov	r6, r0
   d91e4:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d91e6:	b108      	cbz	r0, d91ec <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d91e8:	f7ff fb56 	bl	d8898 <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d91ec:	4631      	mov	r1, r6
   d91ee:	ab01      	add	r3, sp, #4
   d91f0:	aa02      	add	r2, sp, #8
   d91f2:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d91f4:	9505      	str	r5, [sp, #20]
   d91f6:	f7ff ffd5 	bl	d91a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d91fa:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d91fc:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d91fe:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d9200:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d9202:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d9204:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d9206:	f7fb fa3b 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d920a:	a804      	add	r0, sp, #16
   d920c:	f7ff ffb2 	bl	d9174 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d9210:	6823      	ldr	r3, [r4, #0]
   d9212:	b90b      	cbnz	r3, d9218 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d9214:	f7ff f93a 	bl	d848c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d9218:	4620      	mov	r0, r4
   d921a:	b006      	add	sp, #24
   d921c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9220 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d9220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9224:	b088      	sub	sp, #32
   d9226:	4605      	mov	r5, r0
   d9228:	461e      	mov	r6, r3
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d922a:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d922c:	2300      	movs	r3, #0
   d922e:	460f      	mov	r7, r1
   d9230:	4690      	mov	r8, r2
   d9232:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d9234:	9305      	str	r3, [sp, #20]
   d9236:	f7fa ff30 	bl	d409a <_Znwj>
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d923a:	f8cd d018 	str.w	sp, [sp, #24]
   d923e:	4604      	mov	r4, r0
   d9240:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9242:	b1c0      	cbz	r0, d9276 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x56>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d9244:	f898 8000 	ldrb.w	r8, [r8]
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d9248:	f7ff fb26 	bl	d8898 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d924c:	4639      	mov	r1, r7
   d924e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d9252:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d9256:	f002 fb93 	bl	db980 <_ZN6StringaSEPKc>
        callback_ = callback;
   d925a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d925c:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d925e:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d9260:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9262:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d9264:	f104 0014 	add.w	r0, r4, #20
   d9268:	f7ff f9dc 	bl	d8624 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d926c:	990e      	ldr	r1, [sp, #56]	; 0x38
   d926e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d9272:	f7ff f9d7 	bl	d8624 <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d9276:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d9278:	2600      	movs	r6, #0
   d927a:	ab01      	add	r3, sp, #4
   d927c:	aa02      	add	r2, sp, #8
   d927e:	a803      	add	r0, sp, #12
   d9280:	9607      	str	r6, [sp, #28]
   d9282:	f7ff ff8f 	bl	d91a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d9286:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d9288:	9a05      	ldr	r2, [sp, #20]
   d928a:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d928c:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d928e:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d9290:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d9292:	f7fb f9f5 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d9296:	a806      	add	r0, sp, #24
   d9298:	f7ff ff6c 	bl	d9174 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d929c:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d929e:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d92a0:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d92a2:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d92a4:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d92a6:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d92a8:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d92aa:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d92ac:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d92b0:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d92b2:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d92b4:	f7fb f9e4 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d92b8:	a805      	add	r0, sp, #20
   d92ba:	f7fb f9e1 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d92be:	6829      	ldr	r1, [r5, #0]
   d92c0:	b919      	cbnz	r1, d92ca <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xaa>
        SPARK_ASSERT(false);
   d92c2:	4a03      	ldr	r2, [pc, #12]	; (d92d0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xb0>)
   d92c4:	200a      	movs	r0, #10
   d92c6:	f7fe ff5f 	bl	d8188 <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d92ca:	b008      	add	sp, #32
   d92cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d92d0:	000d7e29 	.word	0x000d7e29

000d92d4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d92d4:	b510      	push	{r4, lr}
   d92d6:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d92d8:	6840      	ldr	r0, [r0, #4]
   d92da:	b108      	cbz	r0, d92e0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d92dc:	f7fa fedf 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d92e0:	4620      	mov	r0, r4
   d92e2:	bd10      	pop	{r4, pc}

000d92e4 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d92e4:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d92e6:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d92e8:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d92ea:	e88d 0009 	stmia.w	sp, {r0, r3}
   d92ee:	4668      	mov	r0, sp
   d92f0:	f7ff fff0 	bl	d92d4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d92f4:	b003      	add	sp, #12
   d92f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d92fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d92fc:	b538      	push	{r3, r4, r5, lr}
   d92fe:	2300      	movs	r3, #0
   d9300:	4604      	mov	r4, r0
   d9302:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9304:	2014      	movs	r0, #20
   d9306:	460d      	mov	r5, r1
   d9308:	f7fa fec7 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d930c:	b128      	cbz	r0, d931a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d930e:	2301      	movs	r3, #1
   d9310:	6043      	str	r3, [r0, #4]
   d9312:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d9314:	4b02      	ldr	r3, [pc, #8]	; (d9320 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d9316:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d9318:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d931a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d931c:	4620      	mov	r0, r4
   d931e:	bd38      	pop	{r3, r4, r5, pc}
   d9320:	000df9d4 	.word	0x000df9d4

000d9324 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d9324:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d9326:	2600      	movs	r6, #0
   d9328:	b087      	sub	sp, #28
   d932a:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d932c:	6046      	str	r6, [r0, #4]
   d932e:	4604      	mov	r4, r0
   d9330:	2018      	movs	r0, #24
   d9332:	460f      	mov	r7, r1
   d9334:	f7fa feb1 	bl	d409a <_Znwj>
   d9338:	f8cd d010 	str.w	sp, [sp, #16]
   d933c:	4605      	mov	r5, r0
   d933e:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9340:	b138      	cbz	r0, d9352 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d9342:	f7ff f8ff 	bl	d8544 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d9346:	4639      	mov	r1, r7
   d9348:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d934a:	82ae      	strh	r6, [r5, #20]
   d934c:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d934e:	f7ff f969 	bl	d8624 <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d9352:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d9354:	4629      	mov	r1, r5
   d9356:	9305      	str	r3, [sp, #20]
   d9358:	aa02      	add	r2, sp, #8
   d935a:	ab01      	add	r3, sp, #4
   d935c:	a803      	add	r0, sp, #12
   d935e:	f7ff ffcd 	bl	d92fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d9362:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d9364:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d9366:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d9368:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d936a:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d936c:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d936e:	f7fb f987 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d9372:	a804      	add	r0, sp, #16
   d9374:	f7ff ffae 	bl	d92d4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d9378:	6823      	ldr	r3, [r4, #0]
   d937a:	b90b      	cbnz	r3, d9380 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d937c:	f7ff f886 	bl	d848c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d9380:	4620      	mov	r0, r4
   d9382:	b007      	add	sp, #28
   d9384:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d9388 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d9388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d938c:	4617      	mov	r7, r2
   d938e:	b0a1      	sub	sp, #132	; 0x84
   d9390:	4680      	mov	r8, r0
    WiringBleLock lk;
   d9392:	a80a      	add	r0, sp, #40	; 0x28
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d9394:	460e      	mov	r6, r1
    WiringBleLock lk;
   d9396:	f7ff f8a9 	bl	d84ec <_ZN8particle3ble13WiringBleLockC1Ev>
   d939a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d939c:	7923      	ldrb	r3, [r4, #4]
   d939e:	2b00      	cmp	r3, #0
   d93a0:	f000 80de 	beq.w	d9560 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d93a4:	6833      	ldr	r3, [r6, #0]
   d93a6:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d93a8:	691b      	ldr	r3, [r3, #16]
   d93aa:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d93ae:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d93b0:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d93b4:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d93b8:	9b03      	ldr	r3, [sp, #12]
   d93ba:	42ab      	cmp	r3, r5
   d93bc:	d023      	beq.n	d9406 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d93be:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d93c2:	4650      	mov	r0, sl
   d93c4:	f109 0114 	add.w	r1, r9, #20
   d93c8:	f7ff f946 	bl	d8658 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d93cc:	2800      	cmp	r0, #0
   d93ce:	f000 80cc 	beq.w	d956a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d93d2:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d93d6:	4658      	mov	r0, fp
   d93d8:	f7ff f93e 	bl	d8658 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d93dc:	2800      	cmp	r0, #0
   d93de:	f000 80c4 	beq.w	d956a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d93e2:	6823      	ldr	r3, [r4, #0]
   d93e4:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d93e8:	f8d9 3000 	ldr.w	r3, [r9]
   d93ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d93f0:	4299      	cmp	r1, r3
   d93f2:	f040 80ba 	bne.w	d956a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d93f6:	2320      	movs	r3, #32
   d93f8:	4a60      	ldr	r2, [pc, #384]	; (d957c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d93fa:	9315      	str	r3, [sp, #84]	; 0x54
   d93fc:	2300      	movs	r3, #0
   d93fe:	9200      	str	r2, [sp, #0]
   d9400:	9316      	str	r3, [sp, #88]	; 0x58
   d9402:	aa15      	add	r2, sp, #84	; 0x54
   d9404:	e0a8      	b.n	d9558 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d9406:	f104 0928 	add.w	r9, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d940a:	4648      	mov	r0, r9
   d940c:	f7ff f8d6 	bl	d85bc <_ZNK8particle7BleUuid7isValidEv>
   d9410:	b918      	cbnz	r0, d941a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d9412:	495b      	ldr	r1, [pc, #364]	; (d9580 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d9414:	4648      	mov	r0, r9
   d9416:	f7ff f912 	bl	d863e <_ZN8particle7BleUuidaSEPKh>
   d941a:	6833      	ldr	r3, [r6, #0]
   d941c:	681d      	ldr	r5, [r3, #0]
   d941e:	685b      	ldr	r3, [r3, #4]
   d9420:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d9424:	4555      	cmp	r5, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d9426:	4649      	mov	r1, r9
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d9428:	d005      	beq.n	d9436 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d942a:	6828      	ldr	r0, [r5, #0]
   d942c:	f7ff f914 	bl	d8658 <_ZNK8particle7BleUuideqERKS0_>
   d9430:	bb58      	cbnz	r0, d948a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x102>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d9432:	3508      	adds	r5, #8
   d9434:	e7f6      	b.n	d9424 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d9436:	a80b      	add	r0, sp, #44	; 0x2c
   d9438:	f7ff ff74 	bl	d9324 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d943c:	4649      	mov	r1, r9
   d943e:	a815      	add	r0, sp, #84	; 0x54
   d9440:	f7ff f8ce 	bl	d85e0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d9444:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d9446:	2300      	movs	r3, #0
   d9448:	3214      	adds	r2, #20
   d944a:	a915      	add	r1, sp, #84	; 0x54
   d944c:	2001      	movs	r0, #1
   d944e:	f7fe fc23 	bl	d7c98 <hal_ble_gatt_server_add_service>
   d9452:	2800      	cmp	r0, #0
   d9454:	d178      	bne.n	d9548 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d9456:	6835      	ldr	r5, [r6, #0]
   d9458:	a90b      	add	r1, sp, #44	; 0x2c
   d945a:	a80d      	add	r0, sp, #52	; 0x34
   d945c:	f7ff fbb5 	bl	d8bca <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d9460:	4628      	mov	r0, r5
   d9462:	a90d      	add	r1, sp, #52	; 0x34
   d9464:	f7ff fdef 	bl	d9046 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d9468:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d946a:	a80e      	add	r0, sp, #56	; 0x38
   d946c:	f7fb f908 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9470:	2d00      	cmp	r5, #0
   d9472:	d069      	beq.n	d9548 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
   d9474:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d9476:	6855      	ldr	r5, [r2, #4]
   d9478:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
   d947c:	6815      	ldr	r5, [r2, #0]
   d947e:	3b01      	subs	r3, #1
   d9480:	a80c      	add	r0, sp, #48	; 0x30
   d9482:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d9486:	f7fb f8fb 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d948a:	f104 0914 	add.w	r9, r4, #20
   d948e:	4648      	mov	r0, r9
   d9490:	f7ff f894 	bl	d85bc <_ZNK8particle7BleUuid7isValidEv>
   d9494:	b968      	cbnz	r0, d94b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x12a>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d9496:	4b3b      	ldr	r3, [pc, #236]	; (d9584 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d9498:	4939      	ldr	r1, [pc, #228]	; (d9580 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d949a:	881a      	ldrh	r2, [r3, #0]
   d949c:	3201      	adds	r2, #1
   d949e:	b292      	uxth	r2, r2
   d94a0:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d94a2:	a815      	add	r0, sp, #84	; 0x54
   d94a4:	2301      	movs	r3, #1
   d94a6:	f7ff f87e 	bl	d85a6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d94aa:	a915      	add	r1, sp, #84	; 0x54
   d94ac:	4648      	mov	r0, r9
   d94ae:	f7ff f8b9 	bl	d8624 <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d94b2:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d94b6:	4652      	mov	r2, sl
   d94b8:	2100      	movs	r1, #0
   d94ba:	a815      	add	r0, sp, #84	; 0x54
   d94bc:	f003 fd57 	bl	dcf6e <memset>
    charInit.version = BLE_API_VERSION;
   d94c0:	2301      	movs	r3, #1
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d94c2:	4649      	mov	r1, r9
   d94c4:	a804      	add	r0, sp, #16
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d94c6:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    charInit.size = sizeof(hal_ble_char_init_t);
   d94ca:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    charInit.uuid = charImpl->charUUID().halUUID();
   d94ce:	f7ff f887 	bl	d85e0 <_ZN8particle7BleUuid7halUUIDEv>
   d94d2:	ab04      	add	r3, sp, #16
   d94d4:	aa18      	add	r2, sp, #96	; 0x60
   d94d6:	f10d 0c20 	add.w	ip, sp, #32
   d94da:	6818      	ldr	r0, [r3, #0]
   d94dc:	6859      	ldr	r1, [r3, #4]
   d94de:	4696      	mov	lr, r2
   d94e0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d94e4:	3308      	adds	r3, #8
   d94e6:	4563      	cmp	r3, ip
   d94e8:	4672      	mov	r2, lr
   d94ea:	d1f6      	bne.n	d94da <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x152>
   d94ec:	6818      	ldr	r0, [r3, #0]
   d94ee:	f8ce 0000 	str.w	r0, [lr]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   d94f2:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   d94f4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d94f8:	682b      	ldr	r3, [r5, #0]
   d94fa:	8a9b      	ldrh	r3, [r3, #20]
   d94fc:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d9500:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9502:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d9504:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d9506:	4b20      	ldr	r3, [pc, #128]	; (d9588 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
   d9508:	931e      	str	r3, [sp, #120]	; 0x78
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d950a:	1da1      	adds	r1, r4, #6
   d950c:	a815      	add	r0, sp, #84	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d950e:	941f      	str	r4, [sp, #124]	; 0x7c
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d9510:	f7fe fbea 	bl	d7ce8 <hal_ble_gatt_server_add_characteristic>
   d9514:	bb20      	cbnz	r0, d9560 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        return characteristic;
    }
    charImpl->local() = true;
   d9516:	2301      	movs	r3, #1
   d9518:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d951a:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d951c:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d951e:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d9520:	a80d      	add	r0, sp, #52	; 0x34
   d9522:	f7ff fb44 	bl	d8bae <_ZN8particle17BleCharacteristicC1ERKS0_>
   d9526:	4620      	mov	r0, r4
   d9528:	a90d      	add	r1, sp, #52	; 0x34
   d952a:	f7ff fdf9 	bl	d9120 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d952e:	4604      	mov	r4, r0
   d9530:	a80e      	add	r0, sp, #56	; 0x38
   d9532:	f7fb f8a5 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9536:	b99c      	cbnz	r4, d9560 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        LOG(ERROR, "Failed to append local characteristic.");
   d9538:	2320      	movs	r3, #32
   d953a:	930d      	str	r3, [sp, #52]	; 0x34
   d953c:	4b13      	ldr	r3, [pc, #76]	; (d958c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d953e:	9300      	str	r3, [sp, #0]
   d9540:	940e      	str	r4, [sp, #56]	; 0x38
   d9542:	4623      	mov	r3, r4
   d9544:	aa0d      	add	r2, sp, #52	; 0x34
   d9546:	e007      	b.n	d9558 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d9548:	4639      	mov	r1, r7
   d954a:	4640      	mov	r0, r8
   d954c:	f7ff fb2f 	bl	d8bae <_ZN8particle17BleCharacteristicC1ERKS0_>
   d9550:	a80c      	add	r0, sp, #48	; 0x30
   d9552:	f7fb f895 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9556:	e00a      	b.n	d956e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d9558:	490d      	ldr	r1, [pc, #52]	; (d9590 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
   d955a:	2032      	movs	r0, #50	; 0x32
   d955c:	f7fe fe1c 	bl	d8198 <log_message>
            return characteristic;
   d9560:	4639      	mov	r1, r7
   d9562:	4640      	mov	r0, r8
   d9564:	f7ff fb23 	bl	d8bae <_ZN8particle17BleCharacteristicC1ERKS0_>
   d9568:	e001      	b.n	d956e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
   d956a:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d956c:	e724      	b.n	d93b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d956e:	a80a      	add	r0, sp, #40	; 0x28
   d9570:	f7fe ffca 	bl	d8508 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d9574:	4640      	mov	r0, r8
   d9576:	b021      	add	sp, #132	; 0x84
   d9578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d957c:	000dfb89 	.word	0x000dfb89
   d9580:	000dfa04 	.word	0x000dfa04
   d9584:	2003e324 	.word	0x2003e324
   d9588:	000d8a9d 	.word	0x000d8a9d
   d958c:	000dfb62 	.word	0x000dfb62
   d9590:	000dfa14 	.word	0x000dfa14

000d9594 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d9594:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d9596:	4c06      	ldr	r4, [pc, #24]	; (d95b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d9598:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d959a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d959c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d959e:	f7fe fc13 	bl	d7dc8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d95a2:	4620      	mov	r0, r4
   d95a4:	4a03      	ldr	r2, [pc, #12]	; (d95b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d95a6:	4904      	ldr	r1, [pc, #16]	; (d95b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d95a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d95ac:	f002 bd38 	b.w	dc020 <__aeabi_atexit>
   d95b0:	2003e328 	.word	0x2003e328
   d95b4:	2003d454 	.word	0x2003d454
   d95b8:	000d847b 	.word	0x000d847b

000d95bc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d95bc:	2200      	movs	r2, #0
   d95be:	4611      	mov	r1, r2
   d95c0:	6840      	ldr	r0, [r0, #4]
   d95c2:	f7fe be9f 	b.w	d8304 <network_ready>

000d95c6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d95c6:	2200      	movs	r2, #0
   d95c8:	4611      	mov	r1, r2
   d95ca:	6840      	ldr	r0, [r0, #4]
   d95cc:	f7fe beba 	b.w	d8344 <network_listening>

000d95d0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d95d0:	2200      	movs	r2, #0
   d95d2:	4611      	mov	r1, r2
   d95d4:	6840      	ldr	r0, [r0, #4]
   d95d6:	f7fe bec5 	b.w	d8364 <network_get_listen_timeout>

000d95da <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d95da:	2200      	movs	r2, #0
   d95dc:	6840      	ldr	r0, [r0, #4]
   d95de:	f7fe beb9 	b.w	d8354 <network_set_listen_timeout>

000d95e2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d95e2:	2200      	movs	r2, #0
   d95e4:	f081 0101 	eor.w	r1, r1, #1
   d95e8:	6840      	ldr	r0, [r0, #4]
   d95ea:	f7fe bea3 	b.w	d8334 <network_listen>

000d95ee <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d95ee:	2300      	movs	r3, #0
   d95f0:	461a      	mov	r2, r3
   d95f2:	4619      	mov	r1, r3
   d95f4:	6840      	ldr	r0, [r0, #4]
   d95f6:	f7fe be95 	b.w	d8324 <network_off>

000d95fa <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d95fa:	2300      	movs	r3, #0
   d95fc:	461a      	mov	r2, r3
   d95fe:	4619      	mov	r1, r3
   d9600:	6840      	ldr	r0, [r0, #4]
   d9602:	f7fe be87 	b.w	d8314 <network_on>

000d9606 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9606:	2200      	movs	r2, #0
   d9608:	4611      	mov	r1, r2
   d960a:	6840      	ldr	r0, [r0, #4]
   d960c:	f7fe be6a 	b.w	d82e4 <network_connecting>

000d9610 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9610:	2200      	movs	r2, #0
   d9612:	2102      	movs	r1, #2
   d9614:	6840      	ldr	r0, [r0, #4]
   d9616:	f7fe be6d 	b.w	d82f4 <network_disconnect>

000d961a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d961a:	2300      	movs	r3, #0
   d961c:	461a      	mov	r2, r3
   d961e:	6840      	ldr	r0, [r0, #4]
   d9620:	f7fe be58 	b.w	d82d4 <network_connect>

000d9624 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d9624:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d9626:	4c08      	ldr	r4, [pc, #32]	; (d9648 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d9628:	2528      	movs	r5, #40	; 0x28
   d962a:	462a      	mov	r2, r5
   d962c:	2100      	movs	r1, #0
   d962e:	4620      	mov	r0, r4
   d9630:	f003 fc9d 	bl	dcf6e <memset>
        cid = -1;
   d9634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9638:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d963a:	4b04      	ldr	r3, [pc, #16]	; (d964c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d963c:	8025      	strh	r5, [r4, #0]
   d963e:	2204      	movs	r2, #4
   d9640:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d9642:	4a03      	ldr	r2, [pc, #12]	; (d9650 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d9644:	601a      	str	r2, [r3, #0]
   d9646:	bd38      	pop	{r3, r4, r5, pc}
   d9648:	2003e334 	.word	0x2003e334
   d964c:	2003e32c 	.word	0x2003e32c
   d9650:	000dfbcc 	.word	0x000dfbcc

000d9654 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d9654:	4770      	bx	lr

000d9656 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d9656:	2000      	movs	r0, #0
   d9658:	4770      	bx	lr

000d965a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d965a:	b510      	push	{r4, lr}
   d965c:	2110      	movs	r1, #16
   d965e:	4604      	mov	r4, r0
   d9660:	f002 fce3 	bl	dc02a <_ZdlPvj>
   d9664:	4620      	mov	r0, r4
   d9666:	bd10      	pop	{r4, pc}

000d9668 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d9668:	b508      	push	{r3, lr}
      { delete this; }
   d966a:	b108      	cbz	r0, d9670 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d966c:	f7ff fff5 	bl	d965a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d9670:	bd08      	pop	{r3, pc}

000d9672 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d9672:	2200      	movs	r2, #0
   d9674:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d9676:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d9678:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d967c:	8082      	strh	r2, [r0, #4]
   d967e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d9682:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d9684:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9686:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d9688:	680c      	ldr	r4, [r1, #0]
   d968a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d968c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d968e:	bd10      	pop	{r4, pc}

000d9690 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d9690:	b510      	push	{r4, lr}
   d9692:	4604      	mov	r4, r0
    free((void*)msg_);
   d9694:	6800      	ldr	r0, [r0, #0]
   d9696:	f7fe fe75 	bl	d8384 <free>
}
   d969a:	4620      	mov	r0, r4
   d969c:	bd10      	pop	{r4, pc}

000d969e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d969e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d96a0:	68c4      	ldr	r4, [r0, #12]
   d96a2:	b1f4      	cbz	r4, d96e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d96a4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d96a6:	2b02      	cmp	r3, #2
   d96a8:	d103      	bne.n	d96b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d96aa:	f104 000c 	add.w	r0, r4, #12
   d96ae:	f7ff ffef 	bl	d9690 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d96b2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d96b4:	b135      	cbz	r5, d96c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d96b6:	4628      	mov	r0, r5
   d96b8:	f7fa fe1e 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
   d96bc:	2110      	movs	r1, #16
   d96be:	4628      	mov	r0, r5
   d96c0:	f002 fcb3 	bl	dc02a <_ZdlPvj>
   d96c4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d96c6:	b135      	cbz	r5, d96d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d96c8:	4628      	mov	r0, r5
   d96ca:	f7fa fe15 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
   d96ce:	2110      	movs	r1, #16
   d96d0:	4628      	mov	r0, r5
   d96d2:	f002 fcaa 	bl	dc02a <_ZdlPvj>
   d96d6:	4620      	mov	r0, r4
   d96d8:	2114      	movs	r1, #20
   d96da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d96de:	f002 bca4 	b.w	dc02a <_ZdlPvj>
   d96e2:	bd38      	pop	{r3, r4, r5, pc}

000d96e4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d96e4:	b513      	push	{r0, r1, r4, lr}
   d96e6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d96e8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d96ec:	2300      	movs	r3, #0
   d96ee:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d96f0:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d96f2:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d96f4:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d96f6:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d96f8:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d96fa:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d96fc:	f7fa ffc0 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9700:	4620      	mov	r0, r4
   d9702:	b002      	add	sp, #8
   d9704:	bd10      	pop	{r4, pc}

000d9706 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d9706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9708:	460c      	mov	r4, r1
   d970a:	ad02      	add	r5, sp, #8
   d970c:	f854 3b04 	ldr.w	r3, [r4], #4
   d9710:	f845 3d08 	str.w	r3, [r5, #-8]!
   d9714:	4606      	mov	r6, r0
   d9716:	460f      	mov	r7, r1
   d9718:	a801      	add	r0, sp, #4
   d971a:	4621      	mov	r1, r4
   d971c:	f7ff fa40 	bl	d8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d9720:	4629      	mov	r1, r5
   d9722:	4630      	mov	r0, r6
   d9724:	f7ff ffde 	bl	d96e4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9728:	a801      	add	r0, sp, #4
   d972a:	f7fa ffa9 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d972e:	4620      	mov	r0, r4
   d9730:	f7fa ffa6 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d9734:	4638      	mov	r0, r7
   d9736:	2108      	movs	r1, #8
   d9738:	f002 fc77 	bl	dc02a <_ZdlPvj>
        return p;
    }
   d973c:	4630      	mov	r0, r6
   d973e:	b003      	add	sp, #12
   d9740:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9742 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d9742:	b513      	push	{r0, r1, r4, lr}
   d9744:	460b      	mov	r3, r1
   d9746:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9748:	c803      	ldmia	r0, {r0, r1}
   d974a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d974e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d9752:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d9756:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d975a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d975e:	b002      	add	sp, #8
   d9760:	bd10      	pop	{r4, pc}
	...

000d9764 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d9764:	b538      	push	{r3, r4, r5, lr}
   d9766:	2300      	movs	r3, #0
   d9768:	4604      	mov	r4, r0
   d976a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d976c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d976e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9770:	f7fa fc93 	bl	d409a <_Znwj>
   d9774:	b128      	cbz	r0, d9782 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d9776:	2301      	movs	r3, #1
   d9778:	6043      	str	r3, [r0, #4]
   d977a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d977c:	4b02      	ldr	r3, [pc, #8]	; (d9788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d977e:	6003      	str	r3, [r0, #0]
   d9780:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9782:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d9784:	4620      	mov	r0, r4
   d9786:	bd38      	pop	{r3, r4, r5, pc}
   d9788:	000dfc00 	.word	0x000dfc00

000d978c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d978c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d978e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d9790:	b90a      	cbnz	r2, d9796 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d9792:	f002 fc66 	bl	dc062 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9796:	68c3      	ldr	r3, [r0, #12]
    }
   d9798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d979c:	4718      	bx	r3

000d979e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d979e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d97a0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d97a2:	f100 0110 	add.w	r1, r0, #16
   d97a6:	f7ff fff1 	bl	d978c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d97aa:	bd08      	pop	{r3, pc}

000d97ac <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d97ac:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d97ae:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d97b0:	b90a      	cbnz	r2, d97b6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d97b2:	f002 fc56 	bl	dc062 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d97b6:	68c3      	ldr	r3, [r0, #12]
    }
   d97b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d97bc:	4718      	bx	r3

000d97be <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d97be:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d97c0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d97c2:	f100 0110 	add.w	r1, r0, #16
   d97c6:	f7ff fff1 	bl	d97ac <_ZNKSt8functionIFvRKbEEclES1_>
   d97ca:	bd08      	pop	{r3, pc}

000d97cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d97cc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d97ce:	2300      	movs	r3, #0
   d97d0:	6083      	str	r3, [r0, #8]
   d97d2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d97d4:	4604      	mov	r4, r0
   d97d6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d97d8:	b12b      	cbz	r3, d97e6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d97da:	2202      	movs	r2, #2
   d97dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d97de:	68eb      	ldr	r3, [r5, #12]
   d97e0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d97e2:	68ab      	ldr	r3, [r5, #8]
   d97e4:	60a3      	str	r3, [r4, #8]
	}
    }
   d97e6:	4620      	mov	r0, r4
   d97e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d97ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d97ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d97ee:	b089      	sub	sp, #36	; 0x24
   d97f0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d97f2:	4668      	mov	r0, sp
   d97f4:	f7ff ff3d 	bl	d9672 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d97f8:	2300      	movs	r3, #0
   d97fa:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d97fe:	f04f 0202 	mov.w	r2, #2
   d9802:	e8d4 3f4f 	ldrexb	r3, [r4]
   d9806:	2b00      	cmp	r3, #0
   d9808:	d103      	bne.n	d9812 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d980a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d980e:	2900      	cmp	r1, #0
   d9810:	d1f7      	bne.n	d9802 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d9812:	d002      	beq.n	d981a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d9814:	f88d 3008 	strb.w	r3, [sp, #8]
   d9818:	e063      	b.n	d98e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d981a:	f114 050c 	adds.w	r5, r4, #12
   d981e:	d003      	beq.n	d9828 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d9820:	4669      	mov	r1, sp
   d9822:	4628      	mov	r0, r5
   d9824:	f7ff ff25 	bl	d9672 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d9828:	f3bf 8f5f 	dmb	sy
   d982c:	2301      	movs	r3, #1
   d982e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d9830:	2000      	movs	r0, #0
   d9832:	f104 0308 	add.w	r3, r4, #8
   d9836:	f3bf 8f5f 	dmb	sy
   d983a:	e853 6f00 	ldrex	r6, [r3]
   d983e:	e843 0200 	strex	r2, r0, [r3]
   d9842:	2a00      	cmp	r2, #0
   d9844:	d1f9      	bne.n	d983a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d9846:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d984a:	2e00      	cmp	r6, #0
   d984c:	d049      	beq.n	d98e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d984e:	f7fe fcdd 	bl	d820c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d9852:	b120      	cbz	r0, d985e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9854:	4629      	mov	r1, r5
   d9856:	4630      	mov	r0, r6
   d9858:	f7ff ff98 	bl	d978c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d985c:	e03a      	b.n	d98d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d985e:	4631      	mov	r1, r6
   d9860:	a802      	add	r0, sp, #8
   d9862:	f7ff ffb3 	bl	d97cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d9866:	68e0      	ldr	r0, [r4, #12]
   d9868:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d986c:	b108      	cbz	r0, d9872 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d986e:	f003 fbe9 	bl	dd044 <strdup>
   d9872:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d9874:	2010      	movs	r0, #16
   d9876:	f8ad 501c 	strh.w	r5, [sp, #28]
   d987a:	f7fa fc0e 	bl	d409a <_Znwj>
   d987e:	4605      	mov	r5, r0
   d9880:	b1e8      	cbz	r0, d98be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9882:	2700      	movs	r7, #0
   d9884:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9886:	2018      	movs	r0, #24
   d9888:	f7fa fc07 	bl	d409a <_Znwj>
   d988c:	4604      	mov	r4, r0
   d988e:	b188      	cbz	r0, d98b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d9890:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9892:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d9894:	a802      	add	r0, sp, #8
   d9896:	f7ff ff54 	bl	d9742 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d989a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d989c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d989e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d98a0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d98a2:	9204      	str	r2, [sp, #16]
   d98a4:	a906      	add	r1, sp, #24
   d98a6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d98a8:	60e3      	str	r3, [r4, #12]
   d98aa:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d98ae:	9205      	str	r2, [sp, #20]
   d98b0:	f7ff fedf 	bl	d9672 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d98b4:	4b0d      	ldr	r3, [pc, #52]	; (d98ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d98b6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d98b8:	4b0d      	ldr	r3, [pc, #52]	; (d98f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d98ba:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d98bc:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d98be:	a806      	add	r0, sp, #24
   d98c0:	f7ff fee6 	bl	d9690 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d98c4:	a802      	add	r0, sp, #8
   d98c6:	f7fa fd17 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d98ca:	2200      	movs	r2, #0
   d98cc:	4629      	mov	r1, r5
   d98ce:	4809      	ldr	r0, [pc, #36]	; (d98f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d98d0:	f7fe fca4 	bl	d821c <application_thread_invoke>
   d98d4:	4630      	mov	r0, r6
   d98d6:	f7fa fd0f 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d98da:	2110      	movs	r1, #16
   d98dc:	4630      	mov	r0, r6
   d98de:	f002 fba4 	bl	dc02a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d98e2:	4668      	mov	r0, sp
   d98e4:	f7ff fed4 	bl	d9690 <_ZN8particle5ErrorD1Ev>
    }
   d98e8:	b009      	add	sp, #36	; 0x24
   d98ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d98ec:	000d979f 	.word	0x000d979f
   d98f0:	000d9a15 	.word	0x000d9a15
   d98f4:	000d840b 	.word	0x000d840b

000d98f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d98f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d98fc:	b08b      	sub	sp, #44	; 0x2c
   d98fe:	4606      	mov	r6, r0
   d9900:	460f      	mov	r7, r1
   d9902:	4690      	mov	r8, r2
   d9904:	4699      	mov	r9, r3
   d9906:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d990a:	f7fe fcbb 	bl	d8284 <spark_cloud_flag_connected>
   d990e:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d9910:	4683      	mov	fp, r0
   d9912:	bb30      	cbnz	r0, d9962 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d9914:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d9918:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d991a:	a905      	add	r1, sp, #20
   d991c:	4628      	mov	r0, r5
   d991e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d9922:	f7ff fea6 	bl	d9672 <_ZN8particle5ErrorC1EOS0_>
   d9926:	2014      	movs	r0, #20
   d9928:	f7fa fbb7 	bl	d409a <_Znwj>
   d992c:	4604      	mov	r4, r0
   d992e:	b158      	cbz	r0, d9948 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d9930:	2302      	movs	r3, #2
   d9932:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9934:	2301      	movs	r3, #1
   d9936:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d9938:	f8c0 b004 	str.w	fp, [r0, #4]
   d993c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d9940:	4629      	mov	r1, r5
   d9942:	300c      	adds	r0, #12
   d9944:	f7ff fe95 	bl	d9672 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d9948:	4630      	mov	r0, r6
   d994a:	4621      	mov	r1, r4
   d994c:	f840 4b04 	str.w	r4, [r0], #4
   d9950:	f7ff ff08 	bl	d9764 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d9954:	4628      	mov	r0, r5
   d9956:	f7ff fe9b 	bl	d9690 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d995a:	a805      	add	r0, sp, #20
   d995c:	f7ff fe98 	bl	d9690 <_ZN8particle5ErrorD1Ev>
   d9960:	e052      	b.n	d9a08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d9962:	2400      	movs	r4, #0
   d9964:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d9966:	2014      	movs	r0, #20
   d9968:	606c      	str	r4, [r5, #4]
   d996a:	60ac      	str	r4, [r5, #8]
   d996c:	9307      	str	r3, [sp, #28]
   d996e:	f7fa fb94 	bl	d409a <_Znwj>
   d9972:	4601      	mov	r1, r0
   d9974:	b118      	cbz	r0, d997e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d9976:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9978:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d997a:	6044      	str	r4, [r0, #4]
   d997c:	6084      	str	r4, [r0, #8]
   d997e:	a804      	add	r0, sp, #16
   d9980:	9103      	str	r1, [sp, #12]
   d9982:	f7ff feef 	bl	d9764 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d9986:	4b22      	ldr	r3, [pc, #136]	; (d9a10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d9988:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d998a:	2008      	movs	r0, #8
   d998c:	f7fa fb85 	bl	d409a <_Znwj>
   d9990:	4604      	mov	r4, r0
   d9992:	b128      	cbz	r0, d99a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9994:	9b03      	ldr	r3, [sp, #12]
   d9996:	f840 3b04 	str.w	r3, [r0], #4
   d999a:	a904      	add	r1, sp, #16
   d999c:	f7ff f900 	bl	d8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d99a0:	9500      	str	r5, [sp, #0]
   d99a2:	fa5f f38a 	uxtb.w	r3, sl
   d99a6:	464a      	mov	r2, r9
   d99a8:	4641      	mov	r1, r8
   d99aa:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d99ac:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d99ae:	f7fe fc71 	bl	d8294 <spark_send_event>
   d99b2:	b920      	cbnz	r0, d99be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d99b4:	9b03      	ldr	r3, [sp, #12]
   d99b6:	785b      	ldrb	r3, [r3, #1]
   d99b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d99bc:	b183      	cbz	r3, d99e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d99be:	9b03      	ldr	r3, [sp, #12]
   d99c0:	9305      	str	r3, [sp, #20]
   d99c2:	a904      	add	r1, sp, #16
   d99c4:	a806      	add	r0, sp, #24
   d99c6:	f7ff f8eb 	bl	d8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d99ca:	a905      	add	r1, sp, #20
   d99cc:	4630      	mov	r0, r6
   d99ce:	f7ff fe89 	bl	d96e4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d99d2:	a806      	add	r0, sp, #24
   d99d4:	f7fa fe54 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d99d8:	a804      	add	r0, sp, #16
   d99da:	f7fa fe51 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d99de:	e013      	b.n	d9a08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d99e0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d99e4:	a905      	add	r1, sp, #20
   d99e6:	a803      	add	r0, sp, #12
   d99e8:	9205      	str	r2, [sp, #20]
   d99ea:	f8ad 3018 	strh.w	r3, [sp, #24]
   d99ee:	f7ff fefd 	bl	d97ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d99f2:	a805      	add	r0, sp, #20
   d99f4:	f7ff fe4c 	bl	d9690 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d99f8:	a805      	add	r0, sp, #20
   d99fa:	9909      	ldr	r1, [sp, #36]	; 0x24
   d99fc:	f7ff fe83 	bl	d9706 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d9a00:	a806      	add	r0, sp, #24
   d9a02:	f7fa fe3d 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9a06:	e7da      	b.n	d99be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d9a08:	4630      	mov	r0, r6
   d9a0a:	b00b      	add	sp, #44	; 0x2c
   d9a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9a10:	000d9b85 	.word	0x000d9b85

000d9a14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d9a14:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d9a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9a18:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d9a1a:	d006      	beq.n	d9a2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d9a1c:	2a03      	cmp	r2, #3
   d9a1e:	d017      	beq.n	d9a50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d9a20:	2a01      	cmp	r2, #1
   d9a22:	d122      	bne.n	d9a6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d9a24:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9a26:	6003      	str	r3, [r0, #0]
	      break;
   d9a28:	e01f      	b.n	d9a6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9a2a:	2018      	movs	r0, #24
   d9a2c:	680e      	ldr	r6, [r1, #0]
   d9a2e:	f7fa fb34 	bl	d409a <_Znwj>
   d9a32:	4605      	mov	r5, r0
   d9a34:	b150      	cbz	r0, d9a4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9a36:	4631      	mov	r1, r6
   d9a38:	f7ff fec8 	bl	d97cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d9a3c:	6930      	ldr	r0, [r6, #16]
   d9a3e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d9a42:	b108      	cbz	r0, d9a48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d9a44:	f003 fafe 	bl	dd044 <strdup>
   d9a48:	6128      	str	r0, [r5, #16]
   d9a4a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9a4c:	6025      	str	r5, [r4, #0]
   d9a4e:	e00c      	b.n	d9a6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9a50:	6804      	ldr	r4, [r0, #0]
   d9a52:	b154      	cbz	r4, d9a6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d9a54:	f104 0010 	add.w	r0, r4, #16
   d9a58:	f7ff fe1a 	bl	d9690 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9a5c:	4620      	mov	r0, r4
   d9a5e:	f7fa fc4b 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9a62:	2118      	movs	r1, #24
   d9a64:	4620      	mov	r0, r4
   d9a66:	f002 fae0 	bl	dc02a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d9a6a:	2000      	movs	r0, #0
   d9a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9a6e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d9a6e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9a70:	2300      	movs	r3, #0
   d9a72:	6083      	str	r3, [r0, #8]
   d9a74:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d9a76:	4604      	mov	r4, r0
   d9a78:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d9a7a:	b12b      	cbz	r3, d9a88 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d9a7c:	2202      	movs	r2, #2
   d9a7e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d9a80:	68eb      	ldr	r3, [r5, #12]
   d9a82:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d9a84:	68ab      	ldr	r3, [r5, #8]
   d9a86:	60a3      	str	r3, [r4, #8]
	}
    }
   d9a88:	4620      	mov	r0, r4
   d9a8a:	bd38      	pop	{r3, r4, r5, pc}

000d9a8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d9a8c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d9a8e:	b570      	push	{r4, r5, r6, lr}
   d9a90:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d9a92:	d006      	beq.n	d9aa2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d9a94:	2a03      	cmp	r2, #3
   d9a96:	d011      	beq.n	d9abc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d9a98:	2a01      	cmp	r2, #1
   d9a9a:	d118      	bne.n	d9ace <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d9a9c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9a9e:	6003      	str	r3, [r0, #0]
	      break;
   d9aa0:	e015      	b.n	d9ace <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9aa2:	2014      	movs	r0, #20
   d9aa4:	680e      	ldr	r6, [r1, #0]
   d9aa6:	f7fa faf8 	bl	d409a <_Znwj>
   d9aaa:	4605      	mov	r5, r0
   d9aac:	b120      	cbz	r0, d9ab8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9aae:	4631      	mov	r1, r6
   d9ab0:	f7ff ffdd 	bl	d9a6e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d9ab4:	7c33      	ldrb	r3, [r6, #16]
   d9ab6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9ab8:	6025      	str	r5, [r4, #0]
   d9aba:	e008      	b.n	d9ace <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9abc:	6804      	ldr	r4, [r0, #0]
   d9abe:	b134      	cbz	r4, d9ace <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9ac0:	4620      	mov	r0, r4
   d9ac2:	f7fa fc19 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9ac6:	2114      	movs	r1, #20
   d9ac8:	4620      	mov	r0, r4
   d9aca:	f002 faae 	bl	dc02a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d9ace:	2000      	movs	r0, #0
   d9ad0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9ad4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d9ad4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d9ad6:	2300      	movs	r3, #0
   d9ad8:	b087      	sub	sp, #28
   d9ada:	460c      	mov	r4, r1
   d9adc:	f3bf 8f5f 	dmb	sy
   d9ae0:	e850 6f00 	ldrex	r6, [r0]
   d9ae4:	e840 3200 	strex	r2, r3, [r0]
   d9ae8:	2a00      	cmp	r2, #0
   d9aea:	d1f9      	bne.n	d9ae0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d9aec:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d9af0:	2e00      	cmp	r6, #0
   d9af2:	d03f      	beq.n	d9b74 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d9af4:	4618      	mov	r0, r3
   d9af6:	f7fe fb89 	bl	d820c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d9afa:	4607      	mov	r7, r0
   d9afc:	b120      	cbz	r0, d9b08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9afe:	4621      	mov	r1, r4
   d9b00:	4630      	mov	r0, r6
   d9b02:	f7ff fe53 	bl	d97ac <_ZNKSt8functionIFvRKbEEclES1_>
   d9b06:	e02e      	b.n	d9b66 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9b08:	4631      	mov	r1, r6
   d9b0a:	a801      	add	r0, sp, #4
   d9b0c:	f7ff ffaf 	bl	d9a6e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9b10:	7823      	ldrb	r3, [r4, #0]
   d9b12:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d9b16:	2010      	movs	r0, #16
   d9b18:	f7fa fabf 	bl	d409a <_Znwj>
   d9b1c:	4605      	mov	r5, r0
   d9b1e:	b1d0      	cbz	r0, d9b56 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9b20:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9b22:	2014      	movs	r0, #20
   d9b24:	f7fa fab9 	bl	d409a <_Znwj>
   d9b28:	4604      	mov	r4, r0
   d9b2a:	b178      	cbz	r0, d9b4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9b2c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d9b2e:	4601      	mov	r1, r0
   d9b30:	a801      	add	r0, sp, #4
   d9b32:	f7ff fe06 	bl	d9742 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9b36:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9b38:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9b3a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9b3c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9b3e:	9203      	str	r2, [sp, #12]
   d9b40:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9b42:	60e3      	str	r3, [r4, #12]
   d9b44:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d9b48:	9204      	str	r2, [sp, #16]
   d9b4a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d9b4c:	4b0a      	ldr	r3, [pc, #40]	; (d9b78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d9b4e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9b50:	4b0a      	ldr	r3, [pc, #40]	; (d9b7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9b52:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d9b54:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9b56:	a801      	add	r0, sp, #4
   d9b58:	f7fa fbce 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d9b5c:	2200      	movs	r2, #0
   d9b5e:	4629      	mov	r1, r5
   d9b60:	4807      	ldr	r0, [pc, #28]	; (d9b80 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d9b62:	f7fe fb5b 	bl	d821c <application_thread_invoke>
   d9b66:	4630      	mov	r0, r6
   d9b68:	f7fa fbc6 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d9b6c:	2110      	movs	r1, #16
   d9b6e:	4630      	mov	r0, r6
   d9b70:	f002 fa5b 	bl	dc02a <_ZdlPvj>
        }
    }
   d9b74:	b007      	add	sp, #28
   d9b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9b78:	000d97bf 	.word	0x000d97bf
   d9b7c:	000d9a8d 	.word	0x000d9a8d
   d9b80:	000d840b 	.word	0x000d840b

000d9b84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d9b84:	b530      	push	{r4, r5, lr}
   d9b86:	b085      	sub	sp, #20
   d9b88:	4604      	mov	r4, r0
   d9b8a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d9b8c:	4668      	mov	r0, sp
   d9b8e:	4611      	mov	r1, r2
   d9b90:	f7ff fdb9 	bl	d9706 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d9b94:	b17c      	cbz	r4, d9bb6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d9b96:	b224      	sxth	r4, r4
   d9b98:	4628      	mov	r0, r5
   d9b9a:	b10d      	cbz	r5, d9ba0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d9b9c:	f003 fa52 	bl	dd044 <strdup>
   d9ba0:	9002      	str	r0, [sp, #8]
   d9ba2:	a902      	add	r1, sp, #8
   d9ba4:	4668      	mov	r0, sp
   d9ba6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d9baa:	f7ff fe1f 	bl	d97ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d9bae:	a802      	add	r0, sp, #8
   d9bb0:	f7ff fd6e 	bl	d9690 <_ZN8particle5ErrorD1Ev>
   d9bb4:	e01d      	b.n	d9bf2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d9bb6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d9bb8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d9bbc:	f04f 0201 	mov.w	r2, #1
   d9bc0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d9bc4:	42a3      	cmp	r3, r4
   d9bc6:	d103      	bne.n	d9bd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d9bc8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d9bcc:	2900      	cmp	r1, #0
   d9bce:	d1f7      	bne.n	d9bc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d9bd0:	d002      	beq.n	d9bd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d9bd2:	f88d 3008 	strb.w	r3, [sp, #8]
   d9bd6:	e00c      	b.n	d9bf2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d9bd8:	f110 010c 	adds.w	r1, r0, #12
   d9bdc:	f04f 0301 	mov.w	r3, #1
   d9be0:	bf18      	it	ne
   d9be2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d9be4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d9be8:	3004      	adds	r0, #4
   d9bea:	f800 3c03 	strb.w	r3, [r0, #-3]
   d9bee:	f7ff ff71 	bl	d9ad4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d9bf2:	a801      	add	r0, sp, #4
   d9bf4:	f7fa fd44 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d9bf8:	b005      	add	sp, #20
   d9bfa:	bd30      	pop	{r4, r5, pc}

000d9bfc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9bfc:	2200      	movs	r2, #0
   d9bfe:	4611      	mov	r1, r2
   d9c00:	6840      	ldr	r0, [r0, #4]
   d9c02:	f7fe bb9f 	b.w	d8344 <network_listening>

000d9c06 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9c06:	2200      	movs	r2, #0
   d9c08:	4611      	mov	r1, r2
   d9c0a:	6840      	ldr	r0, [r0, #4]
   d9c0c:	f7fe bbaa 	b.w	d8364 <network_get_listen_timeout>

000d9c10 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d9c10:	2200      	movs	r2, #0
   d9c12:	6840      	ldr	r0, [r0, #4]
   d9c14:	f7fe bb9e 	b.w	d8354 <network_set_listen_timeout>

000d9c18 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9c18:	2200      	movs	r2, #0
   d9c1a:	f081 0101 	eor.w	r1, r1, #1
   d9c1e:	6840      	ldr	r0, [r0, #4]
   d9c20:	f7fe bb88 	b.w	d8334 <network_listen>

000d9c24 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d9c24:	2300      	movs	r3, #0
   d9c26:	461a      	mov	r2, r3
   d9c28:	4619      	mov	r1, r3
   d9c2a:	6840      	ldr	r0, [r0, #4]
   d9c2c:	f7fe bb7a 	b.w	d8324 <network_off>

000d9c30 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d9c30:	2300      	movs	r3, #0
   d9c32:	461a      	mov	r2, r3
   d9c34:	4619      	mov	r1, r3
   d9c36:	6840      	ldr	r0, [r0, #4]
   d9c38:	f7fe bb6c 	b.w	d8314 <network_on>

000d9c3c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9c3c:	2200      	movs	r2, #0
   d9c3e:	4611      	mov	r1, r2
   d9c40:	6840      	ldr	r0, [r0, #4]
   d9c42:	f7fe bb5f 	b.w	d8304 <network_ready>

000d9c46 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9c46:	2200      	movs	r2, #0
   d9c48:	4611      	mov	r1, r2
   d9c4a:	6840      	ldr	r0, [r0, #4]
   d9c4c:	f7fe bb4a 	b.w	d82e4 <network_connecting>

000d9c50 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9c50:	2200      	movs	r2, #0
   d9c52:	2102      	movs	r1, #2
   d9c54:	6840      	ldr	r0, [r0, #4]
   d9c56:	f7fe bb4d 	b.w	d82f4 <network_disconnect>

000d9c5a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9c5a:	2300      	movs	r3, #0
   d9c5c:	461a      	mov	r2, r3
   d9c5e:	6840      	ldr	r0, [r0, #4]
   d9c60:	f7fe bb38 	b.w	d82d4 <network_connect>

000d9c64 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d9c64:	4b02      	ldr	r3, [pc, #8]	; (d9c70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d9c66:	2203      	movs	r2, #3
   d9c68:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d9c6a:	4a02      	ldr	r2, [pc, #8]	; (d9c74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9c6c:	601a      	str	r2, [r3, #0]
   d9c6e:	4770      	bx	lr
   d9c70:	2003e35c 	.word	0x2003e35c
   d9c74:	000dfc1c 	.word	0x000dfc1c

000d9c78 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d9c78:	4770      	bx	lr

000d9c7a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d9c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9c7c:	4606      	mov	r6, r0
   d9c7e:	4615      	mov	r5, r2
   d9c80:	460c      	mov	r4, r1
   d9c82:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9c84:	42bc      	cmp	r4, r7
   d9c86:	d006      	beq.n	d9c96 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9c88:	6833      	ldr	r3, [r6, #0]
   d9c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d9c8e:	689b      	ldr	r3, [r3, #8]
   d9c90:	4630      	mov	r0, r6
   d9c92:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9c94:	e7f6      	b.n	d9c84 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d9c96:	4628      	mov	r0, r5
   d9c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9c9a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d9c9a:	2200      	movs	r2, #0
   d9c9c:	7c00      	ldrb	r0, [r0, #16]
   d9c9e:	f7fe b92b 	b.w	d7ef8 <HAL_I2C_Write_Data>

000d9ca2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d9ca2:	2100      	movs	r1, #0
   d9ca4:	7c00      	ldrb	r0, [r0, #16]
   d9ca6:	f7fe b92f 	b.w	d7f08 <HAL_I2C_Available_Data>

000d9caa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d9caa:	2100      	movs	r1, #0
   d9cac:	7c00      	ldrb	r0, [r0, #16]
   d9cae:	f7fe b933 	b.w	d7f18 <HAL_I2C_Read_Data>

000d9cb2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d9cb2:	2100      	movs	r1, #0
   d9cb4:	7c00      	ldrb	r0, [r0, #16]
   d9cb6:	f7fe b937 	b.w	d7f28 <HAL_I2C_Peek_Data>

000d9cba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d9cba:	2100      	movs	r1, #0
   d9cbc:	7c00      	ldrb	r0, [r0, #16]
   d9cbe:	f7fe b93b 	b.w	d7f38 <HAL_I2C_Flush_Data>

000d9cc2 <_ZN7TwoWireD0Ev>:
   d9cc2:	b510      	push	{r4, lr}
   d9cc4:	2114      	movs	r1, #20
   d9cc6:	4604      	mov	r4, r0
   d9cc8:	f002 f9af 	bl	dc02a <_ZdlPvj>
   d9ccc:	4620      	mov	r0, r4
   d9cce:	bd10      	pop	{r4, pc}

000d9cd0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d9cd0:	b510      	push	{r4, lr}
   d9cd2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9cd4:	2300      	movs	r3, #0
   d9cd6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9cdc:	60a3      	str	r3, [r4, #8]
   d9cde:	4b04      	ldr	r3, [pc, #16]	; (d9cf0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d9ce0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d9ce2:	4608      	mov	r0, r1
   d9ce4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d9ce6:	4611      	mov	r1, r2
   d9ce8:	f7fe f936 	bl	d7f58 <HAL_I2C_Init>
}
   d9cec:	4620      	mov	r0, r4
   d9cee:	bd10      	pop	{r4, pc}
   d9cf0:	000dfc50 	.word	0x000dfc50

000d9cf4 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   d9cf4:	2200      	movs	r2, #0
   d9cf6:	7c00      	ldrb	r0, [r0, #16]
   d9cf8:	f7fe b8de 	b.w	d7eb8 <HAL_I2C_Set_Speed>

000d9cfc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d9cfc:	2300      	movs	r3, #0
   d9cfe:	461a      	mov	r2, r3
   d9d00:	4619      	mov	r1, r3
   d9d02:	7c00      	ldrb	r0, [r0, #16]
   d9d04:	f7fe b8e0 	b.w	d7ec8 <HAL_I2C_Begin>

000d9d08 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d9d08:	b570      	push	{r4, r5, r6, lr}
   d9d0a:	460c      	mov	r4, r1
   d9d0c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d9d0e:	2514      	movs	r5, #20
   d9d10:	4606      	mov	r6, r0
   d9d12:	462a      	mov	r2, r5
   d9d14:	2100      	movs	r1, #0
   d9d16:	a801      	add	r0, sp, #4
   d9d18:	f003 f929 	bl	dcf6e <memset>
   d9d1c:	7823      	ldrb	r3, [r4, #0]
   d9d1e:	f88d 3008 	strb.w	r3, [sp, #8]
   d9d22:	6863      	ldr	r3, [r4, #4]
   d9d24:	9303      	str	r3, [sp, #12]
   d9d26:	68e3      	ldr	r3, [r4, #12]
   d9d28:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d9d2a:	2200      	movs	r2, #0
   d9d2c:	7a23      	ldrb	r3, [r4, #8]
   d9d2e:	7c30      	ldrb	r0, [r6, #16]
   d9d30:	f8ad 5004 	strh.w	r5, [sp, #4]
   d9d34:	a901      	add	r1, sp, #4
   d9d36:	9305      	str	r3, [sp, #20]
   d9d38:	f7fe f916 	bl	d7f68 <HAL_I2C_Request_Data_Ex>
}
   d9d3c:	b006      	add	sp, #24
   d9d3e:	bd70      	pop	{r4, r5, r6, pc}

000d9d40 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d9d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d9d42:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9d44:	f88d 1000 	strb.w	r1, [sp]
   d9d48:	f04f 0164 	mov.w	r1, #100	; 0x64
   d9d4c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d9d4e:	bf18      	it	ne
   d9d50:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d9d52:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d9d54:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d9d56:	f88d 3008 	strb.w	r3, [sp, #8]
   d9d5a:	f7ff ffd5 	bl	d9d08 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d9d5e:	b005      	add	sp, #20
   d9d60:	f85d fb04 	ldr.w	pc, [sp], #4

000d9d64 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d9d64:	2301      	movs	r3, #1
   d9d66:	f7ff bfeb 	b.w	d9d40 <_ZN7TwoWire11requestFromEhjh>

000d9d6a <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d9d6a:	2200      	movs	r2, #0
   d9d6c:	7c00      	ldrb	r0, [r0, #16]
   d9d6e:	f7fe b8b3 	b.w	d7ed8 <HAL_I2C_Begin_Transmission>

000d9d72 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d9d72:	b2c9      	uxtb	r1, r1
   d9d74:	f7ff bff9 	b.w	d9d6a <_ZN7TwoWire17beginTransmissionEh>

000d9d78 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d9d78:	2200      	movs	r2, #0
   d9d7a:	7c00      	ldrb	r0, [r0, #16]
   d9d7c:	f7fe b8b4 	b.w	d7ee8 <HAL_I2C_End_Transmission>

000d9d80 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d9d80:	2101      	movs	r1, #1
   d9d82:	f7ff bff9 	b.w	d9d78 <_ZN7TwoWire15endTransmissionEh>

000d9d86 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d9d86:	2100      	movs	r1, #0
   d9d88:	7c00      	ldrb	r0, [r0, #16]
   d9d8a:	f7fe b8dd 	b.w	d7f48 <HAL_I2C_Is_Enabled>

000d9d8e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9d8e:	4770      	bx	lr

000d9d90 <_ZN9IPAddressD0Ev>:
   d9d90:	b510      	push	{r4, lr}
   d9d92:	2118      	movs	r1, #24
   d9d94:	4604      	mov	r4, r0
   d9d96:	f002 f948 	bl	dc02a <_ZdlPvj>
   d9d9a:	4620      	mov	r0, r4
   d9d9c:	bd10      	pop	{r4, pc}

000d9d9e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9d9e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9da0:	7d03      	ldrb	r3, [r0, #20]
   d9da2:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9da4:	b08d      	sub	sp, #52	; 0x34
   d9da6:	460e      	mov	r6, r1
   d9da8:	f100 0704 	add.w	r7, r0, #4
   d9dac:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9db0:	d002      	beq.n	d9db8 <_ZNK9IPAddress7printToER5Print+0x1a>
   d9db2:	f100 0508 	add.w	r5, r0, #8
   d9db6:	e018      	b.n	d9dea <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9db8:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9dba:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9dbc:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9dc0:	232f      	movs	r3, #47	; 0x2f
   d9dc2:	462a      	mov	r2, r5
   d9dc4:	200a      	movs	r0, #10
   d9dc6:	f7fe f8d7 	bl	d7f78 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d9dca:	4628      	mov	r0, r5
   d9dcc:	f003 f955 	bl	dd07a <strlen>
   d9dd0:	6833      	ldr	r3, [r6, #0]
   d9dd2:	4602      	mov	r2, r0
   d9dd4:	68db      	ldr	r3, [r3, #12]
   d9dd6:	4629      	mov	r1, r5
   d9dd8:	4630      	mov	r0, r6
   d9dda:	4798      	blx	r3
   d9ddc:	e00f      	b.n	d9dfe <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d9dde:	b124      	cbz	r4, d9dea <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d9de0:	212e      	movs	r1, #46	; 0x2e
   d9de2:	4630      	mov	r0, r6
   d9de4:	f001 fb6c 	bl	db4c0 <_ZN5Print5printEc>
   d9de8:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9dea:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9dee:	220a      	movs	r2, #10
   d9df0:	4630      	mov	r0, r6
   d9df2:	f001 fb7e 	bl	db4f2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9df6:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9df8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9dfa:	d1f0      	bne.n	d9dde <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9dfc:	4620      	mov	r0, r4
    }
    return n;
}
   d9dfe:	b00d      	add	sp, #52	; 0x34
   d9e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d9e04 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d9e04:	b510      	push	{r4, lr}
   d9e06:	4b05      	ldr	r3, [pc, #20]	; (d9e1c <_ZN9IPAddressC1Ev+0x18>)
   d9e08:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9e0a:	2211      	movs	r2, #17
   d9e0c:	f840 3b04 	str.w	r3, [r0], #4
   d9e10:	2100      	movs	r1, #0
   d9e12:	f003 f8ac 	bl	dcf6e <memset>
{
    clear();
}
   d9e16:	4620      	mov	r0, r4
   d9e18:	bd10      	pop	{r4, pc}
   d9e1a:	bf00      	nop
   d9e1c:	000dfc78 	.word	0x000dfc78

000d9e20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d9e20:	4603      	mov	r3, r0
   d9e22:	4a07      	ldr	r2, [pc, #28]	; (d9e40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9e24:	b510      	push	{r4, lr}
   d9e26:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d9e2a:	f101 0210 	add.w	r2, r1, #16
   d9e2e:	f851 4b04 	ldr.w	r4, [r1], #4
   d9e32:	f843 4b04 	str.w	r4, [r3], #4
   d9e36:	4291      	cmp	r1, r2
   d9e38:	d1f9      	bne.n	d9e2e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9e3a:	780a      	ldrb	r2, [r1, #0]
   d9e3c:	701a      	strb	r2, [r3, #0]
}
   d9e3e:	bd10      	pop	{r4, pc}
   d9e40:	000dfc78 	.word	0x000dfc78

000d9e44 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d9e44:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9e46:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9e4a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9e4e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9e52:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d9e56:	2304      	movs	r3, #4
   d9e58:	6041      	str	r1, [r0, #4]
   d9e5a:	7503      	strb	r3, [r0, #20]
   d9e5c:	bd10      	pop	{r4, pc}

000d9e5e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d9e5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9e60:	780d      	ldrb	r5, [r1, #0]
   d9e62:	788b      	ldrb	r3, [r1, #2]
   d9e64:	784a      	ldrb	r2, [r1, #1]
   d9e66:	78c9      	ldrb	r1, [r1, #3]
   d9e68:	9100      	str	r1, [sp, #0]
   d9e6a:	4629      	mov	r1, r5
   d9e6c:	f7ff ffea 	bl	d9e44 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d9e70:	b003      	add	sp, #12
   d9e72:	bd30      	pop	{r4, r5, pc}

000d9e74 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d9e74:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d9e78:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d9e7a:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d9e7e:	2901      	cmp	r1, #1
   d9e80:	4610      	mov	r0, r2
   d9e82:	d104      	bne.n	d9e8e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d9e84:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d9e88:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d9e8c:	e004      	b.n	d9e98 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d9e8e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d9e90:	bf04      	itt	eq
   d9e92:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d9e96:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d9e98:	3b01      	subs	r3, #1
   d9e9a:	f102 0210 	add.w	r2, r2, #16
   d9e9e:	d1ec      	bne.n	d9e7a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d9ea0:	4770      	bx	lr

000d9ea2 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d9ea2:	b40e      	push	{r1, r2, r3}
   d9ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9ea8:	b087      	sub	sp, #28
   d9eaa:	af00      	add	r7, sp, #0
   d9eac:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d9eb0:	4605      	mov	r5, r0
   d9eb2:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d9eb6:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9eb8:	4623      	mov	r3, r4
   d9eba:	4632      	mov	r2, r6
   d9ebc:	2110      	movs	r1, #16
   d9ebe:	f107 0008 	add.w	r0, r7, #8
   d9ec2:	f7fe fa87 	bl	d83d4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d9ec6:	280f      	cmp	r0, #15
   d9ec8:	d916      	bls.n	d9ef8 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d9eca:	f100 0308 	add.w	r3, r0, #8
   d9ece:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d9ed2:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d9ed4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9ed8:	4632      	mov	r2, r6
   d9eda:	1c41      	adds	r1, r0, #1
   d9edc:	4623      	mov	r3, r4
   d9ede:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d9ee0:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9ee2:	f7fe fa77 	bl	d83d4 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d9ee6:	1e02      	subs	r2, r0, #0
   d9ee8:	dd04      	ble.n	d9ef4 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d9eea:	682b      	ldr	r3, [r5, #0]
   d9eec:	4669      	mov	r1, sp
   d9eee:	689b      	ldr	r3, [r3, #8]
   d9ef0:	4628      	mov	r0, r5
   d9ef2:	4798      	blx	r3
   d9ef4:	46c5      	mov	sp, r8
   d9ef6:	e007      	b.n	d9f08 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d9ef8:	b130      	cbz	r0, d9f08 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d9efa:	682b      	ldr	r3, [r5, #0]
   d9efc:	4602      	mov	r2, r0
   d9efe:	689b      	ldr	r3, [r3, #8]
   d9f00:	f107 0108 	add.w	r1, r7, #8
   d9f04:	4628      	mov	r0, r5
   d9f06:	4798      	blx	r3
    }
}
   d9f08:	371c      	adds	r7, #28
   d9f0a:	46bd      	mov	sp, r7
   d9f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d9f10:	b003      	add	sp, #12
   d9f12:	4770      	bx	lr

000d9f14 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d9f14:	b513      	push	{r0, r1, r4, lr}
   d9f16:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d9f18:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d9f1a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d9f1e:	6894      	ldr	r4, [r2, #8]
   d9f20:	4619      	mov	r1, r3
   d9f22:	2201      	movs	r2, #1
   d9f24:	47a0      	blx	r4
}
   d9f26:	b002      	add	sp, #8
   d9f28:	bd10      	pop	{r4, pc}

000d9f2a <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d9f2a:	6883      	ldr	r3, [r0, #8]
   d9f2c:	b1fb      	cbz	r3, d9f6e <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d9f2e:	781a      	ldrb	r2, [r3, #0]
   d9f30:	2a03      	cmp	r2, #3
   d9f32:	d81a      	bhi.n	d9f6a <_ZNK5spark9JSONValue4typeEv+0x40>
   d9f34:	e8df f002 	tbb	[pc, r2]
   d9f38:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d9f3c:	2005      	movs	r0, #5
   d9f3e:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d9f40:	6802      	ldr	r2, [r0, #0]
   d9f42:	685b      	ldr	r3, [r3, #4]
   d9f44:	6852      	ldr	r2, [r2, #4]
   d9f46:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d9f48:	282d      	cmp	r0, #45	; 0x2d
   d9f4a:	d014      	beq.n	d9f76 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d9f4c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9f50:	2b09      	cmp	r3, #9
   d9f52:	d910      	bls.n	d9f76 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d9f54:	2874      	cmp	r0, #116	; 0x74
   d9f56:	d010      	beq.n	d9f7a <_ZNK5spark9JSONValue4typeEv+0x50>
   d9f58:	2866      	cmp	r0, #102	; 0x66
   d9f5a:	d00e      	beq.n	d9f7a <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d9f5c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d9f60:	4258      	negs	r0, r3
   d9f62:	4158      	adcs	r0, r3
   d9f64:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d9f66:	2006      	movs	r0, #6
   d9f68:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d9f6a:	2000      	movs	r0, #0
   d9f6c:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d9f6e:	4618      	mov	r0, r3
   d9f70:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d9f72:	2004      	movs	r0, #4
   d9f74:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d9f76:	2003      	movs	r0, #3
   d9f78:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d9f7a:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d9f7c:	4770      	bx	lr

000d9f7e <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d9f7e:	b510      	push	{r4, lr}
   d9f80:	4604      	mov	r4, r0
    switch (type()) {
   d9f82:	f7ff ffd2 	bl	d9f2a <_ZNK5spark9JSONValue4typeEv>
   d9f86:	2802      	cmp	r0, #2
   d9f88:	d00d      	beq.n	d9fa6 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d9f8a:	d316      	bcc.n	d9fba <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d9f8c:	2804      	cmp	r0, #4
   d9f8e:	d814      	bhi.n	d9fba <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d9f90:	6822      	ldr	r2, [r4, #0]
   d9f92:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d9f94:	6850      	ldr	r0, [r2, #4]
   d9f96:	685b      	ldr	r3, [r3, #4]
   d9f98:	220a      	movs	r2, #10
   d9f9a:	2100      	movs	r1, #0
   d9f9c:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d9f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d9fa2:	f003 bf7f 	b.w	ddea4 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d9fa6:	6822      	ldr	r2, [r4, #0]
   d9fa8:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d9faa:	6852      	ldr	r2, [r2, #4]
   d9fac:	685b      	ldr	r3, [r3, #4]
   d9fae:	5cd0      	ldrb	r0, [r2, r3]
   d9fb0:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d9fb4:	4258      	negs	r0, r3
   d9fb6:	4158      	adcs	r0, r3
   d9fb8:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d9fba:	2000      	movs	r0, #0
    }
}
   d9fbc:	bd10      	pop	{r4, pc}

000d9fbe <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d9fbe:	b510      	push	{r4, lr}
    if (!n_) {
   d9fc0:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d9fc2:	4604      	mov	r4, r0
    if (!n_) {
   d9fc4:	b15b      	cbz	r3, d9fde <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d9fc6:	6880      	ldr	r0, [r0, #8]
   d9fc8:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d9fca:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d9fcc:	3010      	adds	r0, #16
   d9fce:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d9fd0:	6120      	str	r0, [r4, #16]
    --n_;
   d9fd2:	6163      	str	r3, [r4, #20]
    if (n_) {
   d9fd4:	b12b      	cbz	r3, d9fe2 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d9fd6:	f7ff ff4d 	bl	d9e74 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d9fda:	60a0      	str	r0, [r4, #8]
   d9fdc:	e001      	b.n	d9fe2 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d9fde:	4618      	mov	r0, r3
   d9fe0:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d9fe2:	2001      	movs	r0, #1
}
   d9fe4:	bd10      	pop	{r4, pc}

000d9fe6 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d9fe6:	b510      	push	{r4, lr}
    write('}');
   d9fe8:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d9fea:	4604      	mov	r4, r0
    write('}');
   d9fec:	f7ff ff92 	bl	d9f14 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d9ff0:	2301      	movs	r3, #1
   d9ff2:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d9ff4:	4620      	mov	r0, r4
   d9ff6:	bd10      	pop	{r4, pc}

000d9ff8 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d9ff8:	b508      	push	{r3, lr}
    switch (state_) {
   d9ffa:	7903      	ldrb	r3, [r0, #4]
   d9ffc:	2b01      	cmp	r3, #1
   d9ffe:	d002      	beq.n	da006 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   da000:	2b02      	cmp	r3, #2
   da002:	d002      	beq.n	da00a <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   da004:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   da006:	212c      	movs	r1, #44	; 0x2c
   da008:	e000      	b.n	da00c <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   da00a:	213a      	movs	r1, #58	; 0x3a
   da00c:	f7ff ff82 	bl	d9f14 <_ZN5spark10JSONWriter5writeEc>
   da010:	bd08      	pop	{r3, pc}

000da012 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   da012:	b510      	push	{r4, lr}
   da014:	4604      	mov	r4, r0
    writeSeparator();
   da016:	f7ff ffef 	bl	d9ff8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   da01a:	4620      	mov	r0, r4
   da01c:	217b      	movs	r1, #123	; 0x7b
   da01e:	f7ff ff79 	bl	d9f14 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   da022:	2300      	movs	r3, #0
   da024:	7123      	strb	r3, [r4, #4]
    return *this;
}
   da026:	4620      	mov	r0, r4
   da028:	bd10      	pop	{r4, pc}
	...

000da02c <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   da02c:	b538      	push	{r3, r4, r5, lr}
   da02e:	4604      	mov	r4, r0
   da030:	460d      	mov	r5, r1
    writeSeparator();
   da032:	f7ff ffe1 	bl	d9ff8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   da036:	6823      	ldr	r3, [r4, #0]
   da038:	4904      	ldr	r1, [pc, #16]	; (da04c <_ZN5spark10JSONWriter5valueEi+0x20>)
   da03a:	68db      	ldr	r3, [r3, #12]
   da03c:	4620      	mov	r0, r4
   da03e:	462a      	mov	r2, r5
   da040:	4798      	blx	r3
    state_ = NEXT;
   da042:	2301      	movs	r3, #1
   da044:	7123      	strb	r3, [r4, #4]
    return *this;
}
   da046:	4620      	mov	r0, r4
   da048:	bd38      	pop	{r3, r4, r5, pc}
   da04a:	bf00      	nop
   da04c:	000df61a 	.word	0x000df61a

000da050 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   da050:	b538      	push	{r3, r4, r5, lr}
   da052:	4604      	mov	r4, r0
   da054:	460d      	mov	r5, r1
    writeSeparator();
   da056:	f7ff ffcf 	bl	d9ff8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   da05a:	6823      	ldr	r3, [r4, #0]
   da05c:	4904      	ldr	r1, [pc, #16]	; (da070 <_ZN5spark10JSONWriter5valueEj+0x20>)
   da05e:	68db      	ldr	r3, [r3, #12]
   da060:	4620      	mov	r0, r4
   da062:	462a      	mov	r2, r5
   da064:	4798      	blx	r3
    state_ = NEXT;
   da066:	2301      	movs	r3, #1
   da068:	7123      	strb	r3, [r4, #4]
    return *this;
}
   da06a:	4620      	mov	r0, r4
   da06c:	bd38      	pop	{r3, r4, r5, pc}
   da06e:	bf00      	nop
   da070:	000dfc93 	.word	0x000dfc93

000da074 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   da074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da076:	460d      	mov	r5, r1
   da078:	4617      	mov	r7, r2
    write('"');
   da07a:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   da07c:	4604      	mov	r4, r0
   da07e:	442f      	add	r7, r5
    write('"');
   da080:	f7ff ff48 	bl	d9f14 <_ZN5spark10JSONWriter5writeEc>
   da084:	462a      	mov	r2, r5
    const char* const end = str + size;
   da086:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   da088:	42ba      	cmp	r2, r7
   da08a:	d038      	beq.n	da0fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   da08c:	4616      	mov	r6, r2
   da08e:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   da092:	2d22      	cmp	r5, #34	; 0x22
   da094:	d003      	beq.n	da09e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   da096:	2d5c      	cmp	r5, #92	; 0x5c
   da098:	d001      	beq.n	da09e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   da09a:	2d1f      	cmp	r5, #31
   da09c:	d82d      	bhi.n	da0fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   da09e:	6823      	ldr	r3, [r4, #0]
   da0a0:	1a52      	subs	r2, r2, r1
   da0a2:	689b      	ldr	r3, [r3, #8]
   da0a4:	4620      	mov	r0, r4
   da0a6:	4798      	blx	r3
            write('\\');
   da0a8:	215c      	movs	r1, #92	; 0x5c
   da0aa:	4620      	mov	r0, r4
   da0ac:	f7ff ff32 	bl	d9f14 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   da0b0:	2d0c      	cmp	r5, #12
   da0b2:	d019      	beq.n	da0e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   da0b4:	d807      	bhi.n	da0c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   da0b6:	2d09      	cmp	r5, #9
   da0b8:	d00f      	beq.n	da0da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   da0ba:	2d0a      	cmp	r5, #10
   da0bc:	d012      	beq.n	da0e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   da0be:	2d08      	cmp	r5, #8
   da0c0:	d114      	bne.n	da0ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   da0c2:	2162      	movs	r1, #98	; 0x62
   da0c4:	e00a      	b.n	da0dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   da0c6:	2d22      	cmp	r5, #34	; 0x22
   da0c8:	d005      	beq.n	da0d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   da0ca:	2d5c      	cmp	r5, #92	; 0x5c
   da0cc:	d003      	beq.n	da0d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   da0ce:	2d0d      	cmp	r5, #13
   da0d0:	d10c      	bne.n	da0ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   da0d2:	2172      	movs	r1, #114	; 0x72
   da0d4:	e002      	b.n	da0dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   da0d6:	4629      	mov	r1, r5
   da0d8:	e000      	b.n	da0dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   da0da:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   da0dc:	4620      	mov	r0, r4
   da0de:	f7ff ff19 	bl	d9f14 <_ZN5spark10JSONWriter5writeEc>
                break;
   da0e2:	e009      	b.n	da0f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   da0e4:	216e      	movs	r1, #110	; 0x6e
   da0e6:	e7f9      	b.n	da0dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   da0e8:	2166      	movs	r1, #102	; 0x66
   da0ea:	e7f7      	b.n	da0dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   da0ec:	6823      	ldr	r3, [r4, #0]
   da0ee:	490a      	ldr	r1, [pc, #40]	; (da118 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   da0f0:	68db      	ldr	r3, [r3, #12]
   da0f2:	462a      	mov	r2, r5
   da0f4:	4620      	mov	r0, r4
   da0f6:	4798      	blx	r3
                break;
            }
            str = s + 1;
   da0f8:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   da0fa:	4632      	mov	r2, r6
   da0fc:	e7c4      	b.n	da088 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   da0fe:	4291      	cmp	r1, r2
   da100:	d004      	beq.n	da10c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   da102:	6823      	ldr	r3, [r4, #0]
   da104:	1a52      	subs	r2, r2, r1
   da106:	689d      	ldr	r5, [r3, #8]
   da108:	4620      	mov	r0, r4
   da10a:	47a8      	blx	r5
    }
    write('"');
   da10c:	2122      	movs	r1, #34	; 0x22
   da10e:	4620      	mov	r0, r4
   da110:	f7ff ff00 	bl	d9f14 <_ZN5spark10JSONWriter5writeEc>
   da114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da116:	bf00      	nop
   da118:	000dfca4 	.word	0x000dfca4

000da11c <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   da11c:	b570      	push	{r4, r5, r6, lr}
   da11e:	4604      	mov	r4, r0
   da120:	460d      	mov	r5, r1
   da122:	4616      	mov	r6, r2
    writeSeparator();
   da124:	f7ff ff68 	bl	d9ff8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   da128:	4620      	mov	r0, r4
   da12a:	4632      	mov	r2, r6
   da12c:	4629      	mov	r1, r5
   da12e:	f7ff ffa1 	bl	da074 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   da132:	2302      	movs	r3, #2
   da134:	7123      	strb	r3, [r4, #4]
    return *this;
}
   da136:	4620      	mov	r0, r4
   da138:	bd70      	pop	{r4, r5, r6, pc}

000da13a <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   da13a:	b570      	push	{r4, r5, r6, lr}
   da13c:	4604      	mov	r4, r0
   da13e:	460d      	mov	r5, r1
   da140:	4616      	mov	r6, r2
    writeSeparator();
   da142:	f7ff ff59 	bl	d9ff8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   da146:	4620      	mov	r0, r4
   da148:	4632      	mov	r2, r6
   da14a:	4629      	mov	r1, r5
   da14c:	f7ff ff92 	bl	da074 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   da150:	2301      	movs	r3, #1
   da152:	7123      	strb	r3, [r4, #4]
    return *this;
}
   da154:	4620      	mov	r0, r4
   da156:	bd70      	pop	{r4, r5, r6, pc}

000da158 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   da158:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   da15a:	2300      	movs	r3, #0
   da15c:	4604      	mov	r4, r0
   da15e:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   da160:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   da162:	4810      	ldr	r0, [pc, #64]	; (da1a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   da164:	60a0      	str	r0, [r4, #8]
   da166:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   da168:	b1d1      	cbz	r1, da1a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   da16a:	780b      	ldrb	r3, [r1, #0]
   da16c:	2b03      	cmp	r3, #3
   da16e:	d006      	beq.n	da17e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   da170:	b9b3      	cbnz	r3, da1a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   da172:	6813      	ldr	r3, [r2, #0]
   da174:	6858      	ldr	r0, [r3, #4]
   da176:	684b      	ldr	r3, [r1, #4]
   da178:	5cc3      	ldrb	r3, [r0, r3]
   da17a:	2b6e      	cmp	r3, #110	; 0x6e
   da17c:	d008      	beq.n	da190 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   da17e:	6813      	ldr	r3, [r2, #0]
   da180:	6858      	ldr	r0, [r3, #4]
   da182:	684b      	ldr	r3, [r1, #4]
   da184:	4403      	add	r3, r0
   da186:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   da188:	688b      	ldr	r3, [r1, #8]
   da18a:	6849      	ldr	r1, [r1, #4]
   da18c:	1a5b      	subs	r3, r3, r1
   da18e:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   da190:	4611      	mov	r1, r2
   da192:	4620      	mov	r0, r4
   da194:	f851 3b04 	ldr.w	r3, [r1], #4
   da198:	f840 3b04 	str.w	r3, [r0], #4
   da19c:	f7fe fdb8 	bl	d8d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   da1a0:	4620      	mov	r0, r4
   da1a2:	bd10      	pop	{r4, pc}
   da1a4:	000df9a7 	.word	0x000df9a7

000da1a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   da1a8:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   da1aa:	b510      	push	{r4, lr}
   da1ac:	4604      	mov	r4, r0
   da1ae:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   da1b0:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   da1b2:	6083      	str	r3, [r0, #8]
   da1b4:	60c3      	str	r3, [r0, #12]
   da1b6:	6103      	str	r3, [r0, #16]
   da1b8:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   da1ba:	b171      	cbz	r1, da1da <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   da1bc:	780b      	ldrb	r3, [r1, #0]
   da1be:	2b01      	cmp	r3, #1
   da1c0:	d10b      	bne.n	da1da <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   da1c2:	f101 0310 	add.w	r3, r1, #16
   da1c6:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   da1c8:	68cb      	ldr	r3, [r1, #12]
   da1ca:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   da1cc:	4611      	mov	r1, r2
   da1ce:	f851 3b04 	ldr.w	r3, [r1], #4
   da1d2:	f840 3b04 	str.w	r3, [r0], #4
   da1d6:	f7fe fd9b 	bl	d8d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   da1da:	4620      	mov	r0, r4
   da1dc:	bd10      	pop	{r4, pc}

000da1de <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   da1de:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   da1e0:	b510      	push	{r4, lr}
   da1e2:	4604      	mov	r4, r0
   da1e4:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   da1e6:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   da1e8:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   da1ea:	b131      	cbz	r1, da1fa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   da1ec:	4611      	mov	r1, r2
   da1ee:	f851 3b04 	ldr.w	r3, [r1], #4
   da1f2:	f840 3b04 	str.w	r3, [r0], #4
   da1f6:	f7fe fd8b 	bl	d8d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   da1fa:	4620      	mov	r0, r4
   da1fc:	bd10      	pop	{r4, pc}

000da1fe <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   da1fe:	680a      	ldr	r2, [r1, #0]
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   da200:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   da202:	6892      	ldr	r2, [r2, #8]
   da204:	4601      	mov	r1, r0
   da206:	4618      	mov	r0, r3
   da208:	4710      	bx	r2
	...

000da20c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
 */

#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   da20c:	b570      	push	{r4, r5, r6, lr}
   da20e:	4c0e      	ldr	r4, [pc, #56]	; (da248 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   da210:	6004      	str	r4, [r0, #0]
    d_.size = sizeof(LEDStatusData);
   da212:	241c      	movs	r4, #28
   da214:	6044      	str	r4, [r0, #4]
    d_.next = nullptr;
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   da216:	f89d 4014 	ldrb.w	r4, [sp, #20]
   da21a:	f89d 6010 	ldrb.w	r6, [sp, #16]
   da21e:	f004 0403 	and.w	r4, r4, #3
   da222:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   da226:	2500      	movs	r5, #0
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   da228:	b2e4      	uxtb	r4, r4
   da22a:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   da22c:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   da22e:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   da230:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   da232:	7c42      	ldrb	r2, [r0, #17]
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   da234:	6085      	str	r5, [r0, #8]
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   da236:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   da238:	bf08      	it	eq
   da23a:	4b04      	ldreq	r3, [pc, #16]	; (da24c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
    d_.prev = nullptr;
   da23c:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
        d_.callback = updateCallback; // User callback
   da23e:	bf06      	itte	eq
   da240:	6183      	streq	r3, [r0, #24]
        d_.data = this; // Callback data
   da242:	61c0      	streq	r0, [r0, #28]
    } else {
        d_.period = period;
   da244:	8303      	strhne	r3, [r0, #24]
    }
}
   da246:	bd70      	pop	{r4, r5, r6, pc}
   da248:	000df478 	.word	0x000df478
   da24c:	000da1ff 	.word	0x000da1ff

000da250 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   da250:	6880      	ldr	r0, [r0, #8]
   da252:	6803      	ldr	r3, [r0, #0]
   da254:	68db      	ldr	r3, [r3, #12]
   da256:	4718      	bx	r3

000da258 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   da258:	4770      	bx	lr

000da25a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   da25a:	b119      	cbz	r1, da264 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   da25c:	680b      	ldr	r3, [r1, #0]
   da25e:	4608      	mov	r0, r1
   da260:	685b      	ldr	r3, [r3, #4]
   da262:	4718      	bx	r3
   da264:	4770      	bx	lr

000da266 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   da266:	b119      	cbz	r1, da270 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   da268:	680b      	ldr	r3, [r1, #0]
   da26a:	4608      	mov	r0, r1
   da26c:	685b      	ldr	r3, [r3, #4]
   da26e:	4718      	bx	r3
   da270:	4770      	bx	lr

000da272 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   da272:	4770      	bx	lr

000da274 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   da274:	4770      	bx	lr

000da276 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   da276:	4770      	bx	lr

000da278 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   da278:	b538      	push	{r3, r4, r5, lr}
   da27a:	4604      	mov	r4, r0
   da27c:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   da27e:	6800      	ldr	r0, [r0, #0]
   da280:	212e      	movs	r1, #46	; 0x2e
   da282:	f002 fec2 	bl	dd00a <strchrnul>
    size = s - category;
   da286:	6823      	ldr	r3, [r4, #0]
   da288:	1ac3      	subs	r3, r0, r3
   da28a:	602b      	str	r3, [r5, #0]
    if (size) {
   da28c:	b123      	cbz	r3, da298 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   da28e:	7803      	ldrb	r3, [r0, #0]
   da290:	b103      	cbz	r3, da294 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   da292:	3001      	adds	r0, #1
   da294:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   da296:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   da298:	4618      	mov	r0, r3
}
   da29a:	bd38      	pop	{r3, r4, r5, pc}

000da29c <_ZN5spark16JSONStreamWriterD0Ev>:
   da29c:	b510      	push	{r4, lr}
   da29e:	210c      	movs	r1, #12
   da2a0:	4604      	mov	r4, r0
   da2a2:	f001 fec2 	bl	dc02a <_ZdlPvj>
   da2a6:	4620      	mov	r0, r4
   da2a8:	bd10      	pop	{r4, pc}

000da2aa <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   da2aa:	b510      	push	{r4, lr}
   da2ac:	2104      	movs	r1, #4
   da2ae:	4604      	mov	r4, r0
   da2b0:	f001 febb 	bl	dc02a <_ZdlPvj>
   da2b4:	4620      	mov	r0, r4
   da2b6:	bd10      	pop	{r4, pc}

000da2b8 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   da2b8:	b510      	push	{r4, lr}
   da2ba:	2104      	movs	r1, #4
   da2bc:	4604      	mov	r4, r0
   da2be:	f001 feb4 	bl	dc02a <_ZdlPvj>
   da2c2:	4620      	mov	r0, r4
   da2c4:	bd10      	pop	{r4, pc}

000da2c6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   da2c6:	b538      	push	{r3, r4, r5, lr}
   da2c8:	460c      	mov	r4, r1
   da2ca:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   da2cc:	f001 fd5a 	bl	dbd84 <_Z16_fetch_usbserialv>
   da2d0:	4284      	cmp	r4, r0
   da2d2:	d00d      	beq.n	da2f0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   da2d4:	f001 fcca 	bl	dbc6c <_Z22__fetch_global_Serial1v>
   da2d8:	4284      	cmp	r4, r0
   da2da:	d105      	bne.n	da2e8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   da2dc:	f001 fcc6 	bl	dbc6c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   da2e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   da2e4:	f001 bcbb 	b.w	dbc5e <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   da2e8:	4621      	mov	r1, r4
   da2ea:	4628      	mov	r0, r5
   da2ec:	f7ff ffbb 	bl	da266 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   da2f0:	bd38      	pop	{r3, r4, r5, pc}

000da2f2 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   da2f2:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   da2f4:	f002 fe93 	bl	dd01e <strcmp>
}
   da2f8:	fab0 f080 	clz	r0, r0
   da2fc:	0940      	lsrs	r0, r0, #5
   da2fe:	bd08      	pop	{r3, pc}

000da300 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   da300:	b538      	push	{r3, r4, r5, lr}
   da302:	4605      	mov	r5, r0
    return value(val, strlen(val));
   da304:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   da306:	460c      	mov	r4, r1
    return value(val, strlen(val));
   da308:	f002 feb7 	bl	dd07a <strlen>
   da30c:	4621      	mov	r1, r4
   da30e:	4602      	mov	r2, r0
   da310:	4628      	mov	r0, r5
}
   da312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   da316:	f7ff bf10 	b.w	da13a <_ZN5spark10JSONWriter5valueEPKcj>

000da31a <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   da31a:	6800      	ldr	r0, [r0, #0]
   da31c:	f7fd bd64 	b.w	d7de8 <os_mutex_recursive_lock>

000da320 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   da320:	b570      	push	{r4, r5, r6, lr}
   da322:	4604      	mov	r4, r0
    write(str, strlen(str));
   da324:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   da326:	460d      	mov	r5, r1
    write(str, strlen(str));
   da328:	f002 fea7 	bl	dd07a <strlen>
   da32c:	6823      	ldr	r3, [r4, #0]
   da32e:	4602      	mov	r2, r0
   da330:	4629      	mov	r1, r5
   da332:	4620      	mov	r0, r4
   da334:	68db      	ldr	r3, [r3, #12]
}
   da336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   da33a:	4718      	bx	r3

000da33c <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   da33c:	b513      	push	{r0, r1, r4, lr}
   da33e:	ab02      	add	r3, sp, #8
    write(&c, 1);
   da340:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   da342:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   da346:	68d4      	ldr	r4, [r2, #12]
   da348:	4619      	mov	r1, r3
   da34a:	2201      	movs	r2, #1
   da34c:	47a0      	blx	r4
}
   da34e:	b002      	add	sp, #8
   da350:	bd10      	pop	{r4, pc}
	...

000da354 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   da354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   da358:	6845      	ldr	r5, [r0, #4]
   da35a:	6807      	ldr	r7, [r0, #0]
   da35c:	b085      	sub	sp, #20
   da35e:	4691      	mov	r9, r2
   da360:	2214      	movs	r2, #20
   da362:	4355      	muls	r5, r2
   da364:	9301      	str	r3, [sp, #4]
   da366:	10ab      	asrs	r3, r5, #2
   da368:	4d19      	ldr	r5, [pc, #100]	; (da3d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   da36a:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   da36c:	435d      	muls	r5, r3
   da36e:	468b      	mov	fp, r1
   da370:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   da372:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   da374:	2d00      	cmp	r5, #0
   da376:	9303      	str	r3, [sp, #12]
   da378:	dd23      	ble.n	da3c2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   da37a:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   da37c:	106e      	asrs	r6, r5, #1
   da37e:	fb03 f006 	mul.w	r0, r3, r6
   da382:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   da386:	464a      	mov	r2, r9
   da388:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   da38c:	5820      	ldr	r0, [r4, r0]
   da38e:	45d1      	cmp	r9, sl
   da390:	bf28      	it	cs
   da392:	4652      	movcs	r2, sl
   da394:	4659      	mov	r1, fp
   da396:	f002 fe8d 	bl	dd0b4 <strncmp>
                if (cmp == 0) {
   da39a:	9b03      	ldr	r3, [sp, #12]
   da39c:	b948      	cbnz	r0, da3b2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   da39e:	45d1      	cmp	r9, sl
   da3a0:	d103      	bne.n	da3aa <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   da3a2:	9a01      	ldr	r2, [sp, #4]
   da3a4:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   da3a6:	4635      	mov	r5, r6
   da3a8:	e7e4      	b.n	da374 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   da3aa:	bf8c      	ite	hi
   da3ac:	2001      	movhi	r0, #1
   da3ae:	2000      	movls	r0, #0
   da3b0:	e000      	b.n	da3b4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   da3b2:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   da3b4:	2800      	cmp	r0, #0
   da3b6:	d0f6      	beq.n	da3a6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   da3b8:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   da3ba:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   da3be:	3e01      	subs	r6, #1
   da3c0:	e7f1      	b.n	da3a6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   da3c2:	1be4      	subs	r4, r4, r7
}
   da3c4:	4802      	ldr	r0, [pc, #8]	; (da3d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   da3c6:	10a4      	asrs	r4, r4, #2
}
   da3c8:	4360      	muls	r0, r4
   da3ca:	b005      	add	sp, #20
   da3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da3d0:	cccccccd 	.word	0xcccccccd

000da3d4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   da3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   da3d6:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   da3d8:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   da3da:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   da3dc:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   da3de:	b313      	cbz	r3, da426 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   da3e0:	b309      	cbz	r1, da426 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   da3e2:	af04      	add	r7, sp, #16
   da3e4:	2300      	movs	r3, #0
   da3e6:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   da3ea:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   da3ee:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   da3f0:	4639      	mov	r1, r7
   da3f2:	a801      	add	r0, sp, #4
   da3f4:	f7ff ff40 	bl	da278 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   da3f8:	4601      	mov	r1, r0
   da3fa:	b1a0      	cbz	r0, da426 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   da3fc:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   da3fe:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   da400:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   da404:	4620      	mov	r0, r4
   da406:	f7ff ffa5 	bl	da354 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   da40a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   da40e:	b153      	cbz	r3, da426 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   da410:	6823      	ldr	r3, [r4, #0]
   da412:	2414      	movs	r4, #20
   da414:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   da418:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   da41a:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   da41e:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   da420:	bfa8      	it	ge
   da422:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   da424:	e7e4      	b.n	da3f0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   da426:	4630      	mov	r0, r6
   da428:	b005      	add	sp, #20
   da42a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da42c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   da42c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   da42e:	4c09      	ldr	r4, [pc, #36]	; (da454 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   da430:	6823      	ldr	r3, [r4, #0]
   da432:	07db      	lsls	r3, r3, #31
   da434:	d40b      	bmi.n	da44e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   da436:	4620      	mov	r0, r4
   da438:	f7f9 fe40 	bl	d40bc <__cxa_guard_acquire>
   da43c:	b138      	cbz	r0, da44e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   da43e:	4620      	mov	r0, r4
   da440:	f7f9 fe41 	bl	d40c6 <__cxa_guard_release>
   da444:	4a04      	ldr	r2, [pc, #16]	; (da458 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   da446:	4905      	ldr	r1, [pc, #20]	; (da45c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   da448:	4805      	ldr	r0, [pc, #20]	; (da460 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   da44a:	f001 fde9 	bl	dc020 <__aeabi_atexit>
    return &factory;
}
   da44e:	4804      	ldr	r0, [pc, #16]	; (da460 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   da450:	bd10      	pop	{r4, pc}
   da452:	bf00      	nop
   da454:	2003e364 	.word	0x2003e364
   da458:	2003d454 	.word	0x2003d454
   da45c:	000da275 	.word	0x000da275
   da460:	2003d360 	.word	0x2003d360

000da464 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   da464:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   da466:	4c09      	ldr	r4, [pc, #36]	; (da48c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   da468:	6823      	ldr	r3, [r4, #0]
   da46a:	07db      	lsls	r3, r3, #31
   da46c:	d40b      	bmi.n	da486 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   da46e:	4620      	mov	r0, r4
   da470:	f7f9 fe24 	bl	d40bc <__cxa_guard_acquire>
   da474:	b138      	cbz	r0, da486 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   da476:	4620      	mov	r0, r4
   da478:	f7f9 fe25 	bl	d40c6 <__cxa_guard_release>
   da47c:	4a04      	ldr	r2, [pc, #16]	; (da490 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   da47e:	4905      	ldr	r1, [pc, #20]	; (da494 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   da480:	4805      	ldr	r0, [pc, #20]	; (da498 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   da482:	f001 fdcd 	bl	dc020 <__aeabi_atexit>
    return &factory;
}
   da486:	4804      	ldr	r0, [pc, #16]	; (da498 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   da488:	bd10      	pop	{r4, pc}
   da48a:	bf00      	nop
   da48c:	2003e394 	.word	0x2003e394
   da490:	2003d454 	.word	0x2003d454
   da494:	000da273 	.word	0x000da273
   da498:	2003d35c 	.word	0x2003d35c

000da49c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   da49c:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da49e:	2500      	movs	r5, #0
   da4a0:	4604      	mov	r4, r0
   da4a2:	6005      	str	r5, [r0, #0]
   da4a4:	6045      	str	r5, [r0, #4]
   da4a6:	6085      	str	r5, [r0, #8]
   da4a8:	6105      	str	r5, [r0, #16]
   da4aa:	6145      	str	r5, [r0, #20]
   da4ac:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da4ae:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   da4b2:	f7fd fc89 	bl	d7dc8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   da4b6:	f7ff ffb9 	bl	da42c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   da4ba:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   da4bc:	f7ff ffd2 	bl	da464 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   da4c0:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   da4c2:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   da4c4:	4620      	mov	r0, r4
   da4c6:	bd38      	pop	{r3, r4, r5, pc}

000da4c8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   da4c8:	b510      	push	{r4, lr}
    static LogManager mgr;
   da4ca:	4c0a      	ldr	r4, [pc, #40]	; (da4f4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   da4cc:	6823      	ldr	r3, [r4, #0]
   da4ce:	07db      	lsls	r3, r3, #31
   da4d0:	d40e      	bmi.n	da4f0 <_ZN5spark10LogManager8instanceEv+0x28>
   da4d2:	4620      	mov	r0, r4
   da4d4:	f7f9 fdf2 	bl	d40bc <__cxa_guard_acquire>
   da4d8:	b150      	cbz	r0, da4f0 <_ZN5spark10LogManager8instanceEv+0x28>
   da4da:	4807      	ldr	r0, [pc, #28]	; (da4f8 <_ZN5spark10LogManager8instanceEv+0x30>)
   da4dc:	f7ff ffde 	bl	da49c <_ZN5spark10LogManagerC1Ev>
   da4e0:	4620      	mov	r0, r4
   da4e2:	f7f9 fdf0 	bl	d40c6 <__cxa_guard_release>
   da4e6:	4a05      	ldr	r2, [pc, #20]	; (da4fc <_ZN5spark10LogManager8instanceEv+0x34>)
   da4e8:	4905      	ldr	r1, [pc, #20]	; (da500 <_ZN5spark10LogManager8instanceEv+0x38>)
   da4ea:	4803      	ldr	r0, [pc, #12]	; (da4f8 <_ZN5spark10LogManager8instanceEv+0x30>)
   da4ec:	f001 fd98 	bl	dc020 <__aeabi_atexit>
    return &mgr;
}
   da4f0:	4801      	ldr	r0, [pc, #4]	; (da4f8 <_ZN5spark10LogManager8instanceEv+0x30>)
   da4f2:	bd10      	pop	{r4, pc}
   da4f4:	2003e368 	.word	0x2003e368
   da4f8:	2003e36c 	.word	0x2003e36c
   da4fc:	2003d454 	.word	0x2003d454
   da500:	000da933 	.word	0x000da933

000da504 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   da504:	2300      	movs	r3, #0
   da506:	4a02      	ldr	r2, [pc, #8]	; (da510 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   da508:	4902      	ldr	r1, [pc, #8]	; (da514 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   da50a:	4803      	ldr	r0, [pc, #12]	; (da518 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   da50c:	f7fd be54 	b.w	d81b8 <log_set_callbacks>
   da510:	000da815 	.word	0x000da815
   da514:	000da7a5 	.word	0x000da7a5
   da518:	000da72d 	.word	0x000da72d

000da51c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   da51c:	2300      	movs	r3, #0
   da51e:	461a      	mov	r2, r3
   da520:	4619      	mov	r1, r3
   da522:	4618      	mov	r0, r3
   da524:	f7fd be48 	b.w	d81b8 <log_set_callbacks>

000da528 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   da528:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   da52a:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   da52c:	688e      	ldr	r6, [r1, #8]
   da52e:	f851 3b04 	ldr.w	r3, [r1], #4
   da532:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   da536:	4605      	mov	r5, r0
   da538:	a801      	add	r0, sp, #4
   da53a:	f7fe fb31 	bl	d8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   da53e:	4622      	mov	r2, r4
   da540:	4631      	mov	r1, r6
   da542:	4628      	mov	r0, r5
   da544:	f7ff fe30 	bl	da1a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   da548:	a801      	add	r0, sp, #4
   da54a:	f7fa f899 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da54e:	4628      	mov	r0, r5
   da550:	b002      	add	sp, #8
   da552:	bd70      	pop	{r4, r5, r6, pc}

000da554 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   da554:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   da556:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   da558:	690e      	ldr	r6, [r1, #16]
   da55a:	f851 3b04 	ldr.w	r3, [r1], #4
   da55e:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   da562:	4605      	mov	r5, r0
   da564:	a801      	add	r0, sp, #4
   da566:	f7fe fb1b 	bl	d8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   da56a:	4622      	mov	r2, r4
   da56c:	4631      	mov	r1, r6
   da56e:	4628      	mov	r0, r5
   da570:	f7ff fe35 	bl	da1de <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   da574:	a801      	add	r0, sp, #4
   da576:	f7fa f883 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da57a:	4628      	mov	r0, r5
   da57c:	b002      	add	sp, #8
   da57e:	bd70      	pop	{r4, r5, r6, pc}

000da580 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   da580:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   da582:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   da584:	68ce      	ldr	r6, [r1, #12]
   da586:	f851 3b04 	ldr.w	r3, [r1], #4
   da58a:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   da58e:	4605      	mov	r5, r0
   da590:	a801      	add	r0, sp, #4
   da592:	f7fe fb05 	bl	d8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   da596:	4622      	mov	r2, r4
   da598:	4631      	mov	r1, r6
   da59a:	4628      	mov	r0, r5
   da59c:	f7ff fddc 	bl	da158 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   da5a0:	a801      	add	r0, sp, #4
   da5a2:	f7fa f86d 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da5a6:	4628      	mov	r0, r5
   da5a8:	b002      	add	sp, #8
   da5aa:	bd70      	pop	{r4, r5, r6, pc}

000da5ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   da5ac:	b530      	push	{r4, r5, lr}
   da5ae:	b08b      	sub	sp, #44	; 0x2c
   da5b0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   da5b2:	4601      	mov	r1, r0
   da5b4:	a804      	add	r0, sp, #16
   da5b6:	f7ff ffb7 	bl	da528 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   da5ba:	a804      	add	r0, sp, #16
   da5bc:	f7ff fcff 	bl	d9fbe <_ZN5spark18JSONObjectIterator4nextEv>
   da5c0:	b1e8      	cbz	r0, da5fe <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   da5c2:	a904      	add	r1, sp, #16
   da5c4:	4668      	mov	r0, sp
   da5c6:	f7ff ffdb 	bl	da580 <_ZNK5spark18JSONObjectIterator4nameEv>
   da5ca:	490f      	ldr	r1, [pc, #60]	; (da608 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   da5cc:	9802      	ldr	r0, [sp, #8]
   da5ce:	f7ff fe90 	bl	da2f2 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   da5d2:	4604      	mov	r4, r0
   da5d4:	b110      	cbz	r0, da5dc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   da5d6:	1c2c      	adds	r4, r5, #0
   da5d8:	bf18      	it	ne
   da5da:	2401      	movne	r4, #1
   da5dc:	a801      	add	r0, sp, #4
   da5de:	f7fa f84f 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da5e2:	2c00      	cmp	r4, #0
   da5e4:	d0e9      	beq.n	da5ba <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   da5e6:	a904      	add	r1, sp, #16
   da5e8:	4668      	mov	r0, sp
   da5ea:	f7ff ffb3 	bl	da554 <_ZNK5spark18JSONObjectIterator5valueEv>
   da5ee:	4668      	mov	r0, sp
   da5f0:	f7ff fcc5 	bl	d9f7e <_ZNK5spark9JSONValue5toIntEv>
   da5f4:	6028      	str	r0, [r5, #0]
   da5f6:	a801      	add	r0, sp, #4
   da5f8:	f7fa f842 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da5fc:	e7dd      	b.n	da5ba <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   da5fe:	a805      	add	r0, sp, #20
   da600:	f7fa f83e 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   da604:	b00b      	add	sp, #44	; 0x2c
   da606:	bd30      	pop	{r4, r5, pc}
   da608:	000dfcdc 	.word	0x000dfcdc

000da60c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   da60c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da60e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   da610:	4620      	mov	r0, r4
   da612:	4913      	ldr	r1, [pc, #76]	; (da660 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   da614:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   da616:	f002 fd02 	bl	dd01e <strcmp>
   da61a:	b940      	cbnz	r0, da62e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   da61c:	f001 fbb2 	bl	dbd84 <_Z16_fetch_usbserialv>
   da620:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   da624:	f001 fb9e 	bl	dbd64 <_ZN9USBSerial5beginEl>
        return &Serial;
   da628:	f001 fbac 	bl	dbd84 <_Z16_fetch_usbserialv>
   da62c:	e015      	b.n	da65a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   da62e:	490d      	ldr	r1, [pc, #52]	; (da664 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   da630:	4620      	mov	r0, r4
   da632:	f002 fcf4 	bl	dd01e <strcmp>
   da636:	b978      	cbnz	r0, da658 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   da638:	a902      	add	r1, sp, #8
   da63a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   da63e:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   da642:	4628      	mov	r0, r5
   da644:	f7ff ffb2 	bl	da5ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   da648:	f001 fb10 	bl	dbc6c <_Z22__fetch_global_Serial1v>
   da64c:	9901      	ldr	r1, [sp, #4]
   da64e:	f001 fb03 	bl	dbc58 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   da652:	f001 fb0b 	bl	dbc6c <_Z22__fetch_global_Serial1v>
   da656:	e000      	b.n	da65a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   da658:	2000      	movs	r0, #0
}
   da65a:	b003      	add	sp, #12
   da65c:	bd30      	pop	{r4, r5, pc}
   da65e:	bf00      	nop
   da660:	000dfce1 	.word	0x000dfce1
   da664:	000dfce8 	.word	0x000dfce8

000da668 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   da668:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   da66a:	6804      	ldr	r4, [r0, #0]
   da66c:	6843      	ldr	r3, [r0, #4]
   da66e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   da670:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   da672:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   da676:	42a6      	cmp	r6, r4
   da678:	d005      	beq.n	da686 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   da67a:	f104 0008 	add.w	r0, r4, #8
   da67e:	f7ff fff3 	bl	da668 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   da682:	3414      	adds	r4, #20
   da684:	e7f7      	b.n	da676 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   da686:	6828      	ldr	r0, [r5, #0]
   da688:	f7fd fe7c 	bl	d8384 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   da68c:	4628      	mov	r0, r5
   da68e:	bd70      	pop	{r4, r5, r6, pc}

000da690 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   da690:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   da692:	6804      	ldr	r4, [r0, #0]
   da694:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   da696:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   da698:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   da69c:	42a6      	cmp	r6, r4
   da69e:	d004      	beq.n	da6aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   da6a0:	4620      	mov	r0, r4
   da6a2:	f001 f8f9 	bl	db898 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   da6a6:	3410      	adds	r4, #16
   da6a8:	e7f8      	b.n	da69c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   da6aa:	6828      	ldr	r0, [r5, #0]
   da6ac:	f7fd fe6a 	bl	d8384 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   da6b0:	4628      	mov	r0, r5
   da6b2:	bd70      	pop	{r4, r5, r6, pc}

000da6b4 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   da6b4:	b510      	push	{r4, lr}
   da6b6:	4604      	mov	r4, r0
   da6b8:	300c      	adds	r0, #12
   da6ba:	f7ff ffd5 	bl	da668 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   da6be:	4620      	mov	r0, r4
   da6c0:	f7ff ffe6 	bl	da690 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   da6c4:	4620      	mov	r0, r4
   da6c6:	bd10      	pop	{r4, pc}

000da6c8 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   da6c8:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   da6ca:	4b04      	ldr	r3, [pc, #16]	; (da6dc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   da6cc:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   da6ce:	f840 3b04 	str.w	r3, [r0], #4
   da6d2:	f7ff ffef 	bl	da6b4 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   da6d6:	4620      	mov	r0, r4
   da6d8:	bd10      	pop	{r4, pc}
   da6da:	bf00      	nop
   da6dc:	000df460 	.word	0x000df460

000da6e0 <_ZN5spark16StreamLogHandlerD0Ev>:
   da6e0:	b510      	push	{r4, lr}
   da6e2:	4604      	mov	r4, r0
   da6e4:	f7ff fff0 	bl	da6c8 <_ZN5spark16StreamLogHandlerD1Ev>
   da6e8:	4620      	mov	r0, r4
   da6ea:	2124      	movs	r1, #36	; 0x24
   da6ec:	f001 fc9d 	bl	dc02a <_ZdlPvj>
   da6f0:	4620      	mov	r0, r4
   da6f2:	bd10      	pop	{r4, pc}

000da6f4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   da6f4:	b510      	push	{r4, lr}
   da6f6:	4b03      	ldr	r3, [pc, #12]	; (da704 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   da6f8:	6003      	str	r3, [r0, #0]
   da6fa:	4604      	mov	r4, r0
   da6fc:	f7ff ffe4 	bl	da6c8 <_ZN5spark16StreamLogHandlerD1Ev>
   da700:	4620      	mov	r0, r4
   da702:	bd10      	pop	{r4, pc}
   da704:	000dfccc 	.word	0x000dfccc

000da708 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   da708:	b510      	push	{r4, lr}
   da70a:	4604      	mov	r4, r0
   da70c:	f7ff fff2 	bl	da6f4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   da710:	4620      	mov	r0, r4
   da712:	2124      	movs	r1, #36	; 0x24
   da714:	f001 fc89 	bl	dc02a <_ZdlPvj>
   da718:	4620      	mov	r0, r4
   da71a:	bd10      	pop	{r4, pc}

000da71c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   da71c:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   da71e:	6803      	ldr	r3, [r0, #0]
   da720:	4604      	mov	r4, r0
   da722:	6818      	ldr	r0, [r3, #0]
   da724:	f7fd fb68 	bl	d7df8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   da728:	4620      	mov	r0, r4
   da72a:	bd10      	pop	{r4, pc}

000da72c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   da72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da730:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   da732:	4b1b      	ldr	r3, [pc, #108]	; (da7a0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   da734:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   da736:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   da73a:	b085      	sub	sp, #20
   da73c:	4682      	mov	sl, r0
   da73e:	460e      	mov	r6, r1
   da740:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   da742:	bb53      	cbnz	r3, da79a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   da744:	f7ff fec0 	bl	da4c8 <_ZN5spark10LogManager8instanceEv>
   da748:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   da74a:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da74c:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   da74e:	f7ff fde4 	bl	da31a <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   da752:	7b23      	ldrb	r3, [r4, #12]
   da754:	b9f3      	cbnz	r3, da794 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   da756:	2301      	movs	r3, #1
   da758:	7323      	strb	r3, [r4, #12]
   da75a:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   da75c:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   da75e:	b2f6      	uxtb	r6, r6
   da760:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   da764:	454d      	cmp	r5, r9
   da766:	d013      	beq.n	da790 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   da768:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   da76c:	4641      	mov	r1, r8
   da76e:	1d38      	adds	r0, r7, #4
   da770:	f7ff fe30 	bl	da3d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   da774:	4286      	cmp	r6, r0
   da776:	d3f5      	bcc.n	da764 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   da778:	683b      	ldr	r3, [r7, #0]
   da77a:	f8cd b000 	str.w	fp, [sp]
   da77e:	689b      	ldr	r3, [r3, #8]
   da780:	469e      	mov	lr, r3
   da782:	4638      	mov	r0, r7
   da784:	4643      	mov	r3, r8
   da786:	4632      	mov	r2, r6
   da788:	4651      	mov	r1, sl
   da78a:	4677      	mov	r7, lr
   da78c:	47b8      	blx	r7
   da78e:	e7e9      	b.n	da764 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   da790:	2300      	movs	r3, #0
   da792:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   da794:	a803      	add	r0, sp, #12
   da796:	f7ff ffc1 	bl	da71c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   da79a:	b005      	add	sp, #20
   da79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da7a0:	e000ed00 	.word	0xe000ed00

000da7a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   da7a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da7a8:	4699      	mov	r9, r3
   da7aa:	4b19      	ldr	r3, [pc, #100]	; (da810 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   da7ac:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   da7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   da7b2:	4607      	mov	r7, r0
   da7b4:	4688      	mov	r8, r1
   da7b6:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   da7b8:	bb33      	cbnz	r3, da808 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   da7ba:	f7ff fe85 	bl	da4c8 <_ZN5spark10LogManager8instanceEv>
   da7be:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   da7c0:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da7c2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da7c4:	f7ff fda9 	bl	da31a <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   da7c8:	7b23      	ldrb	r3, [r4, #12]
   da7ca:	b9d3      	cbnz	r3, da802 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   da7cc:	2301      	movs	r3, #1
   da7ce:	7323      	strb	r3, [r4, #12]
   da7d0:	6825      	ldr	r5, [r4, #0]
   da7d2:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   da7d4:	fa5f fb86 	uxtb.w	fp, r6
   da7d8:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   da7dc:	4555      	cmp	r5, sl
   da7de:	d00e      	beq.n	da7fe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   da7e0:	f855 6b04 	ldr.w	r6, [r5], #4
   da7e4:	4649      	mov	r1, r9
   da7e6:	1d30      	adds	r0, r6, #4
   da7e8:	f7ff fdf4 	bl	da3d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   da7ec:	4583      	cmp	fp, r0
   da7ee:	d3f5      	bcc.n	da7dc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   da7f0:	6833      	ldr	r3, [r6, #0]
   da7f2:	4642      	mov	r2, r8
   da7f4:	68db      	ldr	r3, [r3, #12]
   da7f6:	4639      	mov	r1, r7
   da7f8:	4630      	mov	r0, r6
   da7fa:	4798      	blx	r3
   da7fc:	e7ee      	b.n	da7dc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   da7fe:	2300      	movs	r3, #0
   da800:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   da802:	a801      	add	r0, sp, #4
   da804:	f7ff ff8a 	bl	da71c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   da808:	b003      	add	sp, #12
   da80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da80e:	bf00      	nop
   da810:	e000ed00 	.word	0xe000ed00

000da814 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   da814:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   da818:	4b15      	ldr	r3, [pc, #84]	; (da870 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   da81a:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   da81c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   da820:	4604      	mov	r4, r0
   da822:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   da824:	b9fb      	cbnz	r3, da866 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   da826:	f7ff fe4f 	bl	da4c8 <_ZN5spark10LogManager8instanceEv>
   da82a:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   da82c:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da82e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da830:	f7ff fd73 	bl	da31a <_ZN14RecursiveMutex4lockEv>
   da834:	e896 00a0 	ldmia.w	r6, {r5, r7}
   da838:	2646      	movs	r6, #70	; 0x46
   da83a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   da83e:	42af      	cmp	r7, r5
   da840:	d107      	bne.n	da852 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   da842:	a801      	add	r0, sp, #4
   da844:	f7ff ff6a 	bl	da71c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   da848:	42b4      	cmp	r4, r6
   da84a:	bfb4      	ite	lt
   da84c:	2000      	movlt	r0, #0
   da84e:	2001      	movge	r0, #1
   da850:	e00a      	b.n	da868 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   da852:	f855 0b04 	ldr.w	r0, [r5], #4
   da856:	4641      	mov	r1, r8
   da858:	3004      	adds	r0, #4
   da85a:	f7ff fdbb 	bl	da3d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   da85e:	4286      	cmp	r6, r0
   da860:	bfa8      	it	ge
   da862:	4606      	movge	r6, r0
   da864:	e7eb      	b.n	da83e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   da866:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   da868:	b002      	add	sp, #8
   da86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da86e:	bf00      	nop
   da870:	e000ed00 	.word	0xe000ed00

000da874 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   da874:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   da876:	6803      	ldr	r3, [r0, #0]
   da878:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   da87a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   da87c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   da880:	429a      	cmp	r2, r3
   da882:	4618      	mov	r0, r3
   da884:	d00e      	beq.n	da8a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   da886:	6806      	ldr	r6, [r0, #0]
   da888:	680d      	ldr	r5, [r1, #0]
   da88a:	42ae      	cmp	r6, r5
   da88c:	f103 0304 	add.w	r3, r3, #4
   da890:	d1f6      	bne.n	da880 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   da892:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   da894:	1a52      	subs	r2, r2, r1
   da896:	f002 fb4f 	bl	dcf38 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   da89a:	6863      	ldr	r3, [r4, #4]
   da89c:	3b01      	subs	r3, #1
   da89e:	6063      	str	r3, [r4, #4]
    return true;
   da8a0:	2001      	movs	r0, #1
}
   da8a2:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   da8a4:	2000      	movs	r0, #0
   da8a6:	bd70      	pop	{r4, r5, r6, pc}

000da8a8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   da8a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da8aa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   da8ac:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   da8ae:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da8b0:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   da8b2:	f7ff fd32 	bl	da31a <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   da8b6:	a901      	add	r1, sp, #4
   da8b8:	4620      	mov	r0, r4
   da8ba:	f7ff ffdb 	bl	da874 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   da8be:	b920      	cbnz	r0, da8ca <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   da8c0:	a803      	add	r0, sp, #12
   da8c2:	f7ff ff2b 	bl	da71c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   da8c6:	b004      	add	sp, #16
   da8c8:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   da8ca:	6863      	ldr	r3, [r4, #4]
   da8cc:	2b00      	cmp	r3, #0
   da8ce:	d1f7      	bne.n	da8c0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   da8d0:	f7ff fe24 	bl	da51c <_ZN5spark10LogManager20resetSystemCallbacksEv>
   da8d4:	e7f4      	b.n	da8c0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000da8d6 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   da8d6:	b570      	push	{r4, r5, r6, lr}
   da8d8:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   da8da:	6943      	ldr	r3, [r0, #20]
   da8dc:	2618      	movs	r6, #24
   da8de:	4604      	mov	r4, r0
   da8e0:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   da8e4:	42ae      	cmp	r6, r5
   da8e6:	d015      	beq.n	da914 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   da8e8:	f105 0110 	add.w	r1, r5, #16
   da8ec:	4620      	mov	r0, r4
   da8ee:	f7ff ffc1 	bl	da874 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   da8f2:	6863      	ldr	r3, [r4, #4]
   da8f4:	b90b      	cbnz	r3, da8fa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   da8f6:	f7ff fe11 	bl	da51c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   da8fa:	69e0      	ldr	r0, [r4, #28]
   da8fc:	6929      	ldr	r1, [r5, #16]
   da8fe:	6803      	ldr	r3, [r0, #0]
   da900:	68db      	ldr	r3, [r3, #12]
   da902:	4798      	blx	r3
        if (h.stream) {
   da904:	6969      	ldr	r1, [r5, #20]
   da906:	b119      	cbz	r1, da910 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   da908:	6a20      	ldr	r0, [r4, #32]
   da90a:	6803      	ldr	r3, [r0, #0]
   da90c:	68db      	ldr	r3, [r3, #12]
   da90e:	4798      	blx	r3
   da910:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   da912:	e7e7      	b.n	da8e4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   da914:	6925      	ldr	r5, [r4, #16]
   da916:	6963      	ldr	r3, [r4, #20]
   da918:	2618      	movs	r6, #24
   da91a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   da91e:	42b5      	cmp	r5, r6
   da920:	d004      	beq.n	da92c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   da922:	4628      	mov	r0, r5
   da924:	f000 ffb8 	bl	db898 <_ZN6StringD1Ev>
   da928:	3518      	adds	r5, #24
   da92a:	e7f8      	b.n	da91e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   da92c:	2300      	movs	r3, #0
   da92e:	6163      	str	r3, [r4, #20]
   da930:	bd70      	pop	{r4, r5, r6, pc}

000da932 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   da932:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da934:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da936:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   da938:	f7ff fdf0 	bl	da51c <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   da93c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   da940:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   da944:	f7ff fce9 	bl	da31a <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   da948:	4620      	mov	r0, r4
   da94a:	f7ff ffc4 	bl	da8d6 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   da94e:	4628      	mov	r0, r5
   da950:	f7ff fee4 	bl	da71c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   da954:	6a60      	ldr	r0, [r4, #36]	; 0x24
   da956:	b108      	cbz	r0, da95c <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   da958:	f7fd fa3e 	bl	d7dd8 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   da95c:	6925      	ldr	r5, [r4, #16]
   da95e:	6963      	ldr	r3, [r4, #20]
   da960:	2618      	movs	r6, #24
   da962:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   da966:	42b5      	cmp	r5, r6
   da968:	d004      	beq.n	da974 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   da96a:	4628      	mov	r0, r5
   da96c:	f000 ff94 	bl	db898 <_ZN6StringD1Ev>
   da970:	3518      	adds	r5, #24
   da972:	e7f8      	b.n	da966 <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   da974:	6920      	ldr	r0, [r4, #16]
   da976:	f7fd fd05 	bl	d8384 <free>
   da97a:	6820      	ldr	r0, [r4, #0]
   da97c:	f7fd fd02 	bl	d8384 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   da980:	4620      	mov	r0, r4
   da982:	b002      	add	sp, #8
   da984:	bd70      	pop	{r4, r5, r6, pc}

000da986 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da986:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   da988:	680a      	ldr	r2, [r1, #0]
   da98a:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   da98c:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da98e:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   da990:	684a      	ldr	r2, [r1, #4]
   da992:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   da994:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da996:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   da998:	688a      	ldr	r2, [r1, #8]
   da99a:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da99c:	608b      	str	r3, [r1, #8]
   da99e:	4770      	bx	lr

000da9a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   da9a0:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da9a2:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   da9a4:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da9a6:	6003      	str	r3, [r0, #0]
   da9a8:	6043      	str	r3, [r0, #4]
   da9aa:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   da9ac:	f7ff ffeb 	bl	da986 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   da9b0:	4620      	mov	r0, r4
   da9b2:	bd10      	pop	{r4, pc}

000da9b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   da9b4:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   da9b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da9b8:	4604      	mov	r4, r0
   da9ba:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   da9bc:	d925      	bls.n	daa0a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   da9be:	4290      	cmp	r0, r2
   da9c0:	d224      	bcs.n	daa0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   da9c2:	1a55      	subs	r5, r2, r1
   da9c4:	3d14      	subs	r5, #20
   da9c6:	442c      	add	r4, r5
   da9c8:	f1a1 0714 	sub.w	r7, r1, #20
   da9cc:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da9d0:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   da9d2:	f1a5 0308 	sub.w	r3, r5, #8
   da9d6:	429f      	cmp	r7, r3
   da9d8:	d037      	beq.n	daa4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   da9da:	b184      	cbz	r4, da9fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   da9dc:	f855 3c08 	ldr.w	r3, [r5, #-8]
   da9e0:	6023      	str	r3, [r4, #0]
   da9e2:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   da9e6:	80a3      	strh	r3, [r4, #4]
   da9e8:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   da9ec:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da9ee:	60a6      	str	r6, [r4, #8]
   da9f0:	60e6      	str	r6, [r4, #12]
   da9f2:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   da9f4:	4629      	mov	r1, r5
   da9f6:	f104 0008 	add.w	r0, r4, #8
   da9fa:	f7ff ffc4 	bl	da986 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   da9fe:	4628      	mov	r0, r5
   daa00:	f7ff fe32 	bl	da668 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   daa04:	3c14      	subs	r4, #20
   daa06:	3d14      	subs	r5, #20
   daa08:	e7e3      	b.n	da9d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   daa0a:	d01e      	beq.n	daa4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   daa0c:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   daa10:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   daa12:	f1a5 0308 	sub.w	r3, r5, #8
   daa16:	429e      	cmp	r6, r3
   daa18:	d017      	beq.n	daa4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   daa1a:	b184      	cbz	r4, daa3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   daa1c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   daa20:	6023      	str	r3, [r4, #0]
   daa22:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   daa26:	80a3      	strh	r3, [r4, #4]
   daa28:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   daa2c:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   daa2e:	60a7      	str	r7, [r4, #8]
   daa30:	60e7      	str	r7, [r4, #12]
   daa32:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   daa34:	4629      	mov	r1, r5
   daa36:	f104 0008 	add.w	r0, r4, #8
   daa3a:	f7ff ffa4 	bl	da986 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   daa3e:	4628      	mov	r0, r5
   daa40:	f7ff fe12 	bl	da668 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   daa44:	3414      	adds	r4, #20
   daa46:	3514      	adds	r5, #20
   daa48:	e7e3      	b.n	daa12 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   daa4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000daa4c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   daa4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   daa4e:	6845      	ldr	r5, [r0, #4]
   daa50:	6883      	ldr	r3, [r0, #8]
   daa52:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   daa54:	4604      	mov	r4, r0
   daa56:	460e      	mov	r6, r1
   daa58:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   daa5a:	db0e      	blt.n	daa7a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   daa5c:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   daa5e:	2d00      	cmp	r5, #0
   daa60:	dd05      	ble.n	daa6e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   daa62:	00a9      	lsls	r1, r5, #2
   daa64:	6800      	ldr	r0, [r0, #0]
   daa66:	f7fd fc95 	bl	d8394 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   daa6a:	b920      	cbnz	r0, daa76 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   daa6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   daa6e:	6800      	ldr	r0, [r0, #0]
   daa70:	f7fd fc88 	bl	d8384 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   daa74:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   daa76:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   daa78:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   daa7a:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   daa7c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   daa7e:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   daa82:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   daa86:	1a52      	subs	r2, r2, r1
   daa88:	1d08      	adds	r0, r1, #4
   daa8a:	f002 fa55 	bl	dcf38 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   daa8e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   daa92:	6863      	ldr	r3, [r4, #4]
   daa94:	3301      	adds	r3, #1
   daa96:	6063      	str	r3, [r4, #4]
   daa98:	2001      	movs	r0, #1
    return true;
}
   daa9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000daa9c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   daa9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   daa9e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   daaa0:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   daaa2:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   daaa4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   daaa6:	f7ff fc38 	bl	da31a <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   daaaa:	6823      	ldr	r3, [r4, #0]
   daaac:	6861      	ldr	r1, [r4, #4]
   daaae:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   daab2:	4283      	cmp	r3, r0
   daab4:	461a      	mov	r2, r3
   daab6:	d009      	beq.n	daacc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   daab8:	6812      	ldr	r2, [r2, #0]
   daaba:	42aa      	cmp	r2, r5
   daabc:	f103 0304 	add.w	r3, r3, #4
   daac0:	d1f7      	bne.n	daab2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   daac2:	a801      	add	r0, sp, #4
   daac4:	f7ff fe2a 	bl	da71c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   daac8:	2500      	movs	r5, #0
   daaca:	e00e      	b.n	daaea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   daacc:	462a      	mov	r2, r5
   daace:	4620      	mov	r0, r4
   daad0:	f7ff ffbc 	bl	daa4c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   daad4:	4605      	mov	r5, r0
   daad6:	2800      	cmp	r0, #0
   daad8:	d0f3      	beq.n	daac2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   daada:	6863      	ldr	r3, [r4, #4]
   daadc:	2b01      	cmp	r3, #1
   daade:	d101      	bne.n	daae4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   daae0:	f7ff fd10 	bl	da504 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   daae4:	a801      	add	r0, sp, #4
   daae6:	f7ff fe19 	bl	da71c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   daaea:	4628      	mov	r0, r5
   daaec:	b003      	add	sp, #12
   daaee:	bd30      	pop	{r4, r5, pc}

000daaf0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   daaf0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   daaf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   daaf4:	4606      	mov	r6, r0
   daaf6:	460c      	mov	r4, r1
   daaf8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   daafa:	d914      	bls.n	dab26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   daafc:	4290      	cmp	r0, r2
   daafe:	d213      	bcs.n	dab28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   dab00:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   dab04:	1a6c      	subs	r4, r5, r1
   dab06:	f1a1 0710 	sub.w	r7, r1, #16
   dab0a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   dab0c:	42af      	cmp	r7, r5
   dab0e:	d018      	beq.n	dab42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   dab10:	b11c      	cbz	r4, dab1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   dab12:	4629      	mov	r1, r5
   dab14:	4620      	mov	r0, r4
   dab16:	f000 feaf 	bl	db878 <_ZN6StringC1EOS_>
                end->~T();
   dab1a:	4628      	mov	r0, r5
   dab1c:	f000 febc 	bl	db898 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   dab20:	3d10      	subs	r5, #16
   dab22:	3c10      	subs	r4, #16
   dab24:	e7f2      	b.n	dab0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   dab26:	d00c      	beq.n	dab42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   dab28:	42ac      	cmp	r4, r5
   dab2a:	d00a      	beq.n	dab42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   dab2c:	b11e      	cbz	r6, dab36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   dab2e:	4621      	mov	r1, r4
   dab30:	4630      	mov	r0, r6
   dab32:	f000 fea1 	bl	db878 <_ZN6StringC1EOS_>
                p->~T();
   dab36:	4620      	mov	r0, r4
   dab38:	f000 feae 	bl	db898 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   dab3c:	3410      	adds	r4, #16
   dab3e:	3610      	adds	r6, #16
   dab40:	e7f2      	b.n	dab28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   dab42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dab44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   dab44:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   dab46:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   dab48:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   dab4a:	dd0b      	ble.n	dab64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   dab4c:	0130      	lsls	r0, r6, #4
   dab4e:	f7fd fc11 	bl	d8374 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   dab52:	4604      	mov	r4, r0
   dab54:	b170      	cbz	r0, dab74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   dab56:	e895 0006 	ldmia.w	r5, {r1, r2}
   dab5a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   dab5e:	f7ff ffc7 	bl	daaf0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   dab62:	e000      	b.n	dab66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   dab64:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   dab66:	6828      	ldr	r0, [r5, #0]
   dab68:	f7fd fc0c 	bl	d8384 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   dab6c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   dab6e:	60ae      	str	r6, [r5, #8]
        return true;
   dab70:	2001      	movs	r0, #1
   dab72:	bd70      	pop	{r4, r5, r6, pc}
    }
   dab74:	bd70      	pop	{r4, r5, r6, pc}

000dab76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   dab76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   dab7a:	2300      	movs	r3, #0
   dab7c:	b095      	sub	sp, #84	; 0x54
   dab7e:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   dab80:	2246      	movs	r2, #70	; 0x46
   dab82:	6003      	str	r3, [r0, #0]
   dab84:	6043      	str	r3, [r0, #4]
   dab86:	6083      	str	r3, [r0, #8]
   dab88:	60c3      	str	r3, [r0, #12]
   dab8a:	6103      	str	r3, [r0, #16]
   dab8c:	6143      	str	r3, [r0, #20]
   dab8e:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   dab90:	9102      	str	r1, [sp, #8]
   dab92:	f8da 1004 	ldr.w	r1, [sl, #4]
   dab96:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   dab98:	4299      	cmp	r1, r3
   dab9a:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   dab9c:	9309      	str	r3, [sp, #36]	; 0x24
   dab9e:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   daba0:	f340 809d 	ble.w	dacde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   daba4:	a808      	add	r0, sp, #32
   daba6:	f7ff ffcd 	bl	dab44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dabaa:	2800      	cmp	r0, #0
   dabac:	f040 8097 	bne.w	dacde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   dabb0:	e08e      	b.n	dacd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   dabb2:	4621      	mov	r1, r4
   dabb4:	a80b      	add	r0, sp, #44	; 0x2c
   dabb6:	f000 fe5f 	bl	db878 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   dabba:	a90b      	add	r1, sp, #44	; 0x2c
   dabbc:	a80f      	add	r0, sp, #60	; 0x3c
   dabbe:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dabc0:	f000 fe5a 	bl	db878 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dabc4:	9909      	ldr	r1, [sp, #36]	; 0x24
   dabc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dabc8:	4299      	cmp	r1, r3
   dabca:	f2c0 80ce 	blt.w	dad6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   dabce:	3101      	adds	r1, #1
   dabd0:	a808      	add	r0, sp, #32
   dabd2:	f7ff ffb7 	bl	dab44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dabd6:	2800      	cmp	r0, #0
   dabd8:	f040 80c7 	bne.w	dad6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   dabdc:	a80f      	add	r0, sp, #60	; 0x3c
   dabde:	f000 fe5b 	bl	db898 <_ZN6StringD1Ev>
   dabe2:	a80b      	add	r0, sp, #44	; 0x2c
   dabe4:	f000 fe58 	bl	db898 <_ZN6StringD1Ev>
   dabe8:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   dabea:	42a7      	cmp	r7, r4
   dabec:	d1e1      	bne.n	dabb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   dabee:	2600      	movs	r6, #0
   dabf0:	960b      	str	r6, [sp, #44]	; 0x2c
   dabf2:	960c      	str	r6, [sp, #48]	; 0x30
   dabf4:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   dabf6:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   dabf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dabfa:	429e      	cmp	r6, r3
   dabfc:	f280 80a8 	bge.w	dad50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   dac00:	0133      	lsls	r3, r6, #4
   dac02:	9a08      	ldr	r2, [sp, #32]
   dac04:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   dac06:	9306      	str	r3, [sp, #24]
        if (!category) {
   dac08:	2b00      	cmp	r3, #0
   dac0a:	f000 809f 	beq.w	dad4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   dac0e:	2314      	movs	r3, #20
   dac10:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   dac12:	f8cd 901c 	str.w	r9, [sp, #28]
   dac16:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   dac18:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   dac1a:	a907      	add	r1, sp, #28
   dac1c:	a806      	add	r0, sp, #24
   dac1e:	f7ff fb2b 	bl	da278 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   dac22:	4607      	mov	r7, r0
   dac24:	2800      	cmp	r0, #0
   dac26:	f000 8091 	beq.w	dad4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   dac2a:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   dac2c:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   dac2e:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   dac32:	9a07      	ldr	r2, [sp, #28]
   dac34:	4620      	mov	r0, r4
   dac36:	f7ff fb8d 	bl	da354 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dac3a:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   dac3e:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dac40:	f1b8 0f00 	cmp.w	r8, #0
   dac44:	d153      	bne.n	dacee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   dac46:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   dac4a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   dac4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dac52:	970f      	str	r7, [sp, #60]	; 0x3c
   dac54:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   dac58:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   dac5c:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   dac60:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dac64:	6867      	ldr	r7, [r4, #4]
   dac66:	68a3      	ldr	r3, [r4, #8]
   dac68:	429f      	cmp	r7, r3
   dac6a:	da4f      	bge.n	dad0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   dac6c:	9b00      	ldr	r3, [sp, #0]
   dac6e:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   dac72:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   dac74:	2214      	movs	r2, #20
   dac76:	4353      	muls	r3, r2
   dac78:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   dac7c:	fb02 b201 	mla	r2, r2, r1, fp
   dac80:	f107 0014 	add.w	r0, r7, #20
   dac84:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   dac86:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   dac88:	f7ff fe94 	bl	da9b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   dac8c:	b1a7      	cbz	r7, dacb8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   dac8e:	9b03      	ldr	r3, [sp, #12]
   dac90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dac92:	f84b 2003 	str.w	r2, [fp, r3]
   dac96:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   dac9a:	80bb      	strh	r3, [r7, #4]
   dac9c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   daca0:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   daca2:	f8c7 9008 	str.w	r9, [r7, #8]
   daca6:	f8c7 900c 	str.w	r9, [r7, #12]
   dacaa:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   dacae:	a911      	add	r1, sp, #68	; 0x44
   dacb0:	f107 0008 	add.w	r0, r7, #8
   dacb4:	f7ff fe67 	bl	da986 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   dacb8:	6863      	ldr	r3, [r4, #4]
   dacba:	3301      	adds	r3, #1
   dacbc:	6063      	str	r3, [r4, #4]
   dacbe:	a811      	add	r0, sp, #68	; 0x44
   dacc0:	f7ff fcd2 	bl	da668 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dacc4:	f1b8 0f00 	cmp.w	r8, #0
   dacc8:	d011      	beq.n	dacee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   dacca:	a80b      	add	r0, sp, #44	; 0x2c
   daccc:	f7ff fccc 	bl	da668 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dacd0:	a808      	add	r0, sp, #32
   dacd2:	f7ff fcdd 	bl	da690 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   dacd6:	4628      	mov	r0, r5
   dacd8:	b015      	add	sp, #84	; 0x54
   dacda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dacde:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   dace2:	f8da 3004 	ldr.w	r3, [sl, #4]
   dace6:	2714      	movs	r7, #20
   dace8:	fb07 4703 	mla	r7, r7, r3, r4
   dacec:	e77d      	b.n	dabea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   dacee:	6823      	ldr	r3, [r4, #0]
   dacf0:	9a00      	ldr	r2, [sp, #0]
   dacf2:	2414      	movs	r4, #20
   dacf4:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   dacf8:	9b06      	ldr	r3, [sp, #24]
   dacfa:	781b      	ldrb	r3, [r3, #0]
   dacfc:	bb23      	cbnz	r3, dad48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   dacfe:	f8da 3000 	ldr.w	r3, [sl]
   dad02:	9a01      	ldr	r2, [sp, #4]
   dad04:	4413      	add	r3, r2
   dad06:	7c1b      	ldrb	r3, [r3, #16]
   dad08:	80e3      	strh	r3, [r4, #6]
   dad0a:	e01d      	b.n	dad48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dad0c:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   dad0e:	2f00      	cmp	r7, #0
   dad10:	dd0f      	ble.n	dad32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   dad12:	2314      	movs	r3, #20
   dad14:	fb03 f007 	mul.w	r0, r3, r7
   dad18:	9303      	str	r3, [sp, #12]
   dad1a:	f7fd fb2b 	bl	d8374 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   dad1e:	4683      	mov	fp, r0
   dad20:	b178      	cbz	r0, dad42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   dad22:	e894 0006 	ldmia.w	r4, {r1, r2}
   dad26:	9b03      	ldr	r3, [sp, #12]
   dad28:	fb03 1202 	mla	r2, r3, r2, r1
   dad2c:	f7ff fe42 	bl	da9b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   dad30:	e000      	b.n	dad34 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   dad32:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   dad34:	6820      	ldr	r0, [r4, #0]
   dad36:	f7fd fb25 	bl	d8384 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   dad3a:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   dad3e:	60a7      	str	r7, [r4, #8]
   dad40:	e794      	b.n	dac6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dad42:	f04f 0801 	mov.w	r8, #1
   dad46:	e7ba      	b.n	dacbe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   dad48:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   dad4a:	e766      	b.n	dac1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   dad4c:	3601      	adds	r6, #1
   dad4e:	e753      	b.n	dabf8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   dad50:	a908      	add	r1, sp, #32
   dad52:	4628      	mov	r0, r5
   dad54:	f7ff fe17 	bl	da986 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   dad58:	a90b      	add	r1, sp, #44	; 0x2c
   dad5a:	f105 000c 	add.w	r0, r5, #12
   dad5e:	f7ff fe12 	bl	da986 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   dad62:	f89d 3008 	ldrb.w	r3, [sp, #8]
   dad66:	762b      	strb	r3, [r5, #24]
   dad68:	e7af      	b.n	dacca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   dad6a:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   dad6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   dad6e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   dad72:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   dad76:	4631      	mov	r1, r6
   dad78:	f106 0010 	add.w	r0, r6, #16
   dad7c:	f7ff feb8 	bl	daaf0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   dad80:	b11e      	cbz	r6, dad8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   dad82:	a90f      	add	r1, sp, #60	; 0x3c
   dad84:	4630      	mov	r0, r6
   dad86:	f000 fd77 	bl	db878 <_ZN6StringC1EOS_>
    ++size_;
   dad8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dad8c:	3301      	adds	r3, #1
   dad8e:	9309      	str	r3, [sp, #36]	; 0x24
   dad90:	e724      	b.n	dabdc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000dad94 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dad94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   dad96:	4604      	mov	r4, r0
   dad98:	4b09      	ldr	r3, [pc, #36]	; (dadc0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   dad9a:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dad9e:	4605      	mov	r5, r0
   dada0:	460e      	mov	r6, r1
        filter_(level, filters) {
   dada2:	a801      	add	r0, sp, #4
   dada4:	4611      	mov	r1, r2
   dada6:	f7fa fcdd 	bl	d5764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dadaa:	aa01      	add	r2, sp, #4
   dadac:	4631      	mov	r1, r6
   dadae:	4620      	mov	r0, r4
   dadb0:	f7ff fee1 	bl	dab76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dadb4:	a801      	add	r0, sp, #4
   dadb6:	f7f9 fd5d 	bl	d4874 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   dadba:	4628      	mov	r0, r5
   dadbc:	b004      	add	sp, #16
   dadbe:	bd70      	pop	{r4, r5, r6, pc}
   dadc0:	000df460 	.word	0x000df460

000dadc4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   dadc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   dadc6:	460f      	mov	r7, r1
   dadc8:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dadca:	492b      	ldr	r1, [pc, #172]	; (dae78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   dadcc:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dadce:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   dadd0:	4616      	mov	r6, r2
   dadd2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dadd4:	f002 f923 	bl	dd01e <strcmp>
   dadd8:	bb28      	cbnz	r0, dae26 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   dadda:	2c00      	cmp	r4, #0
   daddc:	d049      	beq.n	dae72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   dadde:	4629      	mov	r1, r5
   dade0:	a801      	add	r0, sp, #4
   dade2:	f7ff fddd 	bl	da9a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dade6:	4925      	ldr	r1, [pc, #148]	; (dae7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   dade8:	2024      	movs	r0, #36	; 0x24
   dadea:	f001 f929 	bl	dc040 <_ZnwjRKSt9nothrow_t>
   dadee:	4605      	mov	r5, r0
   dadf0:	b1b8      	cbz	r0, dae22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   dadf2:	a901      	add	r1, sp, #4
   dadf4:	a804      	add	r0, sp, #16
   dadf6:	f7ff fdd3 	bl	da9a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   dadfa:	a904      	add	r1, sp, #16
   dadfc:	a807      	add	r0, sp, #28
   dadfe:	f7fa fcb1 	bl	d5764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dae02:	aa07      	add	r2, sp, #28
   dae04:	4631      	mov	r1, r6
   dae06:	4628      	mov	r0, r5
   dae08:	f7ff ffc4 	bl	dad94 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dae0c:	a807      	add	r0, sp, #28
   dae0e:	f7f9 fd31 	bl	d4874 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dae12:	4b1b      	ldr	r3, [pc, #108]	; (dae80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   dae14:	602b      	str	r3, [r5, #0]
   dae16:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   dae18:	a804      	add	r0, sp, #16
   dae1a:	f7f9 fd2b 	bl	d4874 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dae1e:	4b19      	ldr	r3, [pc, #100]	; (dae84 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   dae20:	602b      	str	r3, [r5, #0]
   dae22:	a801      	add	r0, sp, #4
   dae24:	e01f      	b.n	dae66 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   dae26:	4918      	ldr	r1, [pc, #96]	; (dae88 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   dae28:	4638      	mov	r0, r7
   dae2a:	f002 f8f8 	bl	dd01e <strcmp>
   dae2e:	b9f0      	cbnz	r0, dae6e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   dae30:	b1fc      	cbz	r4, dae72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dae32:	4629      	mov	r1, r5
   dae34:	a804      	add	r0, sp, #16
   dae36:	f7ff fdb3 	bl	da9a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dae3a:	4910      	ldr	r1, [pc, #64]	; (dae7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   dae3c:	2024      	movs	r0, #36	; 0x24
   dae3e:	f001 f8ff 	bl	dc040 <_ZnwjRKSt9nothrow_t>
   dae42:	4605      	mov	r5, r0
   dae44:	b170      	cbz	r0, dae64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   dae46:	a904      	add	r1, sp, #16
   dae48:	a807      	add	r0, sp, #28
   dae4a:	f7fa fc8b 	bl	d5764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dae4e:	aa07      	add	r2, sp, #28
   dae50:	4631      	mov	r1, r6
   dae52:	4628      	mov	r0, r5
   dae54:	f7ff ff9e 	bl	dad94 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dae58:	a807      	add	r0, sp, #28
   dae5a:	f7f9 fd0b 	bl	d4874 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dae5e:	4b08      	ldr	r3, [pc, #32]	; (dae80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   dae60:	602b      	str	r3, [r5, #0]
   dae62:	622c      	str	r4, [r5, #32]
   dae64:	a804      	add	r0, sp, #16
   dae66:	f7f9 fd05 	bl	d4874 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dae6a:	4628      	mov	r0, r5
   dae6c:	e002      	b.n	dae74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   dae6e:	2000      	movs	r0, #0
   dae70:	e000      	b.n	dae74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   dae72:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   dae74:	b00b      	add	sp, #44	; 0x2c
   dae76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dae78:	000dfd3a 	.word	0x000dfd3a
   dae7c:	000dfef8 	.word	0x000dfef8
   dae80:	000dfdc0 	.word	0x000dfdc0
   dae84:	000dfccc 	.word	0x000dfccc
   dae88:	000dfd3e 	.word	0x000dfd3e

000dae8c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   dae8c:	4b01      	ldr	r3, [pc, #4]	; (dae94 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   dae8e:	4a02      	ldr	r2, [pc, #8]	; (dae98 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   dae90:	601a      	str	r2, [r3, #0]
   dae92:	4770      	bx	lr
   dae94:	2003e398 	.word	0x2003e398
   dae98:	000dfd4f 	.word	0x000dfd4f

000dae9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dae9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   daea0:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   daea2:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   daea6:	4604      	mov	r4, r0
   daea8:	460e      	mov	r6, r1
   daeaa:	4617      	mov	r7, r2
   daeac:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   daeae:	f000 ff69 	bl	dbd84 <_Z16_fetch_usbserialv>
   daeb2:	4581      	cmp	r9, r0
   daeb4:	d105      	bne.n	daec2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   daeb6:	485a      	ldr	r0, [pc, #360]	; (db020 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   daeb8:	f000 fa73 	bl	db3a2 <_ZN5spark12NetworkClass9listeningEv>
   daebc:	2800      	cmp	r0, #0
   daebe:	f040 80ac 	bne.w	db01a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   daec2:	792b      	ldrb	r3, [r5, #4]
   daec4:	071b      	lsls	r3, r3, #28
   daec6:	d505      	bpl.n	daed4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   daec8:	696b      	ldr	r3, [r5, #20]
   daeca:	4a56      	ldr	r2, [pc, #344]	; (db024 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   daecc:	6a20      	ldr	r0, [r4, #32]
   daece:	2100      	movs	r1, #0
   daed0:	f000 fb2f 	bl	db532 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   daed4:	f1b8 0f00 	cmp.w	r8, #0
   daed8:	d00d      	beq.n	daef6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   daeda:	215b      	movs	r1, #91	; 0x5b
   daedc:	4620      	mov	r0, r4
   daede:	f7ff fa2d 	bl	da33c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   daee2:	4641      	mov	r1, r8
   daee4:	4620      	mov	r0, r4
   daee6:	f7ff fa1b 	bl	da320 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   daeea:	6823      	ldr	r3, [r4, #0]
   daeec:	494e      	ldr	r1, [pc, #312]	; (db028 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   daeee:	68db      	ldr	r3, [r3, #12]
   daef0:	2202      	movs	r2, #2
   daef2:	4620      	mov	r0, r4
   daef4:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   daef6:	792b      	ldrb	r3, [r5, #4]
   daef8:	07d9      	lsls	r1, r3, #31
   daefa:	d525      	bpl.n	daf48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   daefc:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   daf00:	212f      	movs	r1, #47	; 0x2f
   daf02:	4640      	mov	r0, r8
   daf04:	f002 f8f7 	bl	dd0f6 <strrchr>
    if (s1) {
   daf08:	b108      	cbz	r0, daf0e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   daf0a:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   daf0e:	4641      	mov	r1, r8
   daf10:	4620      	mov	r0, r4
   daf12:	f7ff fa05 	bl	da320 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   daf16:	792b      	ldrb	r3, [r5, #4]
   daf18:	079a      	lsls	r2, r3, #30
   daf1a:	d509      	bpl.n	daf30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   daf1c:	213a      	movs	r1, #58	; 0x3a
   daf1e:	4620      	mov	r0, r4
   daf20:	f7ff fa0c 	bl	da33c <_ZN5spark16StreamLogHandler5writeEc>
   daf24:	68eb      	ldr	r3, [r5, #12]
   daf26:	4a41      	ldr	r2, [pc, #260]	; (db02c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   daf28:	6a20      	ldr	r0, [r4, #32]
   daf2a:	2100      	movs	r1, #0
   daf2c:	f000 fb01 	bl	db532 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   daf30:	792b      	ldrb	r3, [r5, #4]
   daf32:	f013 0f04 	tst.w	r3, #4
   daf36:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   daf38:	bf18      	it	ne
   daf3a:	493d      	ldrne	r1, [pc, #244]	; (db030 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   daf3c:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   daf3e:	bf08      	it	eq
   daf40:	493c      	ldreq	r1, [pc, #240]	; (db034 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   daf42:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   daf44:	4620      	mov	r0, r4
   daf46:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   daf48:	792b      	ldrb	r3, [r5, #4]
   daf4a:	075b      	lsls	r3, r3, #29
   daf4c:	d518      	bpl.n	daf80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   daf4e:	6929      	ldr	r1, [r5, #16]
   daf50:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   daf52:	4613      	mov	r3, r2
   daf54:	f813 0b01 	ldrb.w	r0, [r3], #1
   daf58:	b138      	cbz	r0, daf6a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   daf5a:	2820      	cmp	r0, #32
   daf5c:	d101      	bne.n	daf62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   daf5e:	4619      	mov	r1, r3
   daf60:	e001      	b.n	daf66 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   daf62:	2828      	cmp	r0, #40	; 0x28
   daf64:	d001      	beq.n	daf6a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   daf66:	461a      	mov	r2, r3
   daf68:	e7f3      	b.n	daf52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   daf6a:	6823      	ldr	r3, [r4, #0]
   daf6c:	1a52      	subs	r2, r2, r1
   daf6e:	68db      	ldr	r3, [r3, #12]
   daf70:	4620      	mov	r0, r4
   daf72:	4798      	blx	r3
        write("(): ", 4);
   daf74:	6823      	ldr	r3, [r4, #0]
   daf76:	4930      	ldr	r1, [pc, #192]	; (db038 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   daf78:	68db      	ldr	r3, [r3, #12]
   daf7a:	2204      	movs	r2, #4
   daf7c:	4620      	mov	r0, r4
   daf7e:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   daf80:	2100      	movs	r1, #0
   daf82:	4638      	mov	r0, r7
   daf84:	f7fd f910 	bl	d81a8 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   daf88:	4601      	mov	r1, r0
   daf8a:	4620      	mov	r0, r4
   daf8c:	f7ff f9c8 	bl	da320 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   daf90:	6823      	ldr	r3, [r4, #0]
   daf92:	4928      	ldr	r1, [pc, #160]	; (db034 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   daf94:	68db      	ldr	r3, [r3, #12]
   daf96:	2202      	movs	r2, #2
   daf98:	4620      	mov	r0, r4
   daf9a:	4798      	blx	r3
    // Message
    if (msg) {
   daf9c:	b11e      	cbz	r6, dafa6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   daf9e:	4631      	mov	r1, r6
   dafa0:	4620      	mov	r0, r4
   dafa2:	f7ff f9bd 	bl	da320 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   dafa6:	792b      	ldrb	r3, [r5, #4]
   dafa8:	f013 0f30 	tst.w	r3, #48	; 0x30
   dafac:	d02d      	beq.n	db00a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   dafae:	6823      	ldr	r3, [r4, #0]
   dafb0:	4922      	ldr	r1, [pc, #136]	; (db03c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   dafb2:	68db      	ldr	r3, [r3, #12]
   dafb4:	4620      	mov	r0, r4
   dafb6:	2202      	movs	r2, #2
   dafb8:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   dafba:	792b      	ldrb	r3, [r5, #4]
   dafbc:	06d8      	lsls	r0, r3, #27
   dafbe:	d50b      	bpl.n	dafd8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   dafc0:	6823      	ldr	r3, [r4, #0]
   dafc2:	491f      	ldr	r1, [pc, #124]	; (db040 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   dafc4:	68db      	ldr	r3, [r3, #12]
   dafc6:	2207      	movs	r2, #7
   dafc8:	4620      	mov	r0, r4
   dafca:	4798      	blx	r3
   dafcc:	69ab      	ldr	r3, [r5, #24]
   dafce:	4a1d      	ldr	r2, [pc, #116]	; (db044 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   dafd0:	6a20      	ldr	r0, [r4, #32]
   dafd2:	2100      	movs	r1, #0
   dafd4:	f000 faad 	bl	db532 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   dafd8:	792b      	ldrb	r3, [r5, #4]
   dafda:	0699      	lsls	r1, r3, #26
   dafdc:	d511      	bpl.n	db002 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   dafde:	06da      	lsls	r2, r3, #27
   dafe0:	d505      	bpl.n	dafee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   dafe2:	6823      	ldr	r3, [r4, #0]
   dafe4:	4912      	ldr	r1, [pc, #72]	; (db030 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   dafe6:	68db      	ldr	r3, [r3, #12]
   dafe8:	2202      	movs	r2, #2
   dafea:	4620      	mov	r0, r4
   dafec:	4798      	blx	r3
            }
            write("details = ", 10);
   dafee:	6823      	ldr	r3, [r4, #0]
   daff0:	4915      	ldr	r1, [pc, #84]	; (db048 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   daff2:	68db      	ldr	r3, [r3, #12]
   daff4:	4620      	mov	r0, r4
   daff6:	220a      	movs	r2, #10
   daff8:	4798      	blx	r3
            write(attr.details);
   daffa:	69e9      	ldr	r1, [r5, #28]
   daffc:	4620      	mov	r0, r4
   daffe:	f7ff f98f 	bl	da320 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   db002:	215d      	movs	r1, #93	; 0x5d
   db004:	4620      	mov	r0, r4
   db006:	f7ff f999 	bl	da33c <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   db00a:	6823      	ldr	r3, [r4, #0]
   db00c:	490f      	ldr	r1, [pc, #60]	; (db04c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   db00e:	68db      	ldr	r3, [r3, #12]
   db010:	4620      	mov	r0, r4
   db012:	2202      	movs	r2, #2
}
   db014:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   db018:	4718      	bx	r3
   db01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db01e:	bf00      	nop
   db020:	2003e570 	.word	0x2003e570
   db024:	000dfd53 	.word	0x000dfd53
   db028:	000dfd5a 	.word	0x000dfd5a
   db02c:	000df61a 	.word	0x000df61a
   db030:	000dfd5d 	.word	0x000dfd5d
   db034:	000dfd62 	.word	0x000dfd62
   db038:	000dfd60 	.word	0x000dfd60
   db03c:	000dfd65 	.word	0x000dfd65
   db040:	000dfd68 	.word	0x000dfd68
   db044:	000dfd70 	.word	0x000dfd70
   db048:	000dfd73 	.word	0x000dfd73
   db04c:	000df9a5 	.word	0x000df9a5

000db050 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   db050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db054:	b085      	sub	sp, #20
   db056:	f8d0 8020 	ldr.w	r8, [r0, #32]
   db05a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   db05c:	4606      	mov	r6, r0
   db05e:	460f      	mov	r7, r1
   db060:	4691      	mov	r9, r2
   db062:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   db064:	f000 fe8e 	bl	dbd84 <_Z16_fetch_usbserialv>
   db068:	4580      	cmp	r8, r0
   db06a:	d105      	bne.n	db078 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   db06c:	484a      	ldr	r0, [pc, #296]	; (db198 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   db06e:	f000 f998 	bl	db3a2 <_ZN5spark12NetworkClass9listeningEv>
   db072:	2800      	cmp	r0, #0
   db074:	f040 808c 	bne.w	db190 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   db078:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   db07a:	4a48      	ldr	r2, [pc, #288]	; (db19c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   db07c:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   db07e:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   db082:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   db084:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   db086:	f88d 8008 	strb.w	r8, [sp, #8]
   db08a:	f7fe ffc2 	bl	da012 <_ZN5spark10JSONWriter11beginObjectEv>
   db08e:	4641      	mov	r1, r8
   db090:	4648      	mov	r0, r9
   db092:	f7fd f889 	bl	d81a8 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   db096:	4942      	ldr	r1, [pc, #264]	; (db1a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   db098:	4680      	mov	r8, r0
   db09a:	2201      	movs	r2, #1
   db09c:	a801      	add	r0, sp, #4
   db09e:	f7ff f83d 	bl	da11c <_ZN5spark10JSONWriter4nameEPKcj>
   db0a2:	4641      	mov	r1, r8
   db0a4:	f7ff f92c 	bl	da300 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   db0a8:	b13f      	cbz	r7, db0ba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   db0aa:	493e      	ldr	r1, [pc, #248]	; (db1a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   db0ac:	2201      	movs	r2, #1
   db0ae:	a801      	add	r0, sp, #4
   db0b0:	f7ff f834 	bl	da11c <_ZN5spark10JSONWriter4nameEPKcj>
   db0b4:	4639      	mov	r1, r7
   db0b6:	f7ff f923 	bl	da300 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   db0ba:	b13d      	cbz	r5, db0cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   db0bc:	493a      	ldr	r1, [pc, #232]	; (db1a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   db0be:	2201      	movs	r2, #1
   db0c0:	a801      	add	r0, sp, #4
   db0c2:	f7ff f82b 	bl	da11c <_ZN5spark10JSONWriter4nameEPKcj>
   db0c6:	4629      	mov	r1, r5
   db0c8:	f7ff f91a 	bl	da300 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   db0cc:	7923      	ldrb	r3, [r4, #4]
   db0ce:	07df      	lsls	r7, r3, #31
   db0d0:	d50e      	bpl.n	db0f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   db0d2:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   db0d4:	212f      	movs	r1, #47	; 0x2f
   db0d6:	4628      	mov	r0, r5
   db0d8:	f002 f80d 	bl	dd0f6 <strrchr>
    if (s1) {
   db0dc:	b100      	cbz	r0, db0e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   db0de:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   db0e0:	4932      	ldr	r1, [pc, #200]	; (db1ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   db0e2:	2201      	movs	r2, #1
   db0e4:	a801      	add	r0, sp, #4
   db0e6:	f7ff f819 	bl	da11c <_ZN5spark10JSONWriter4nameEPKcj>
   db0ea:	4629      	mov	r1, r5
   db0ec:	f7ff f908 	bl	da300 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   db0f0:	7923      	ldrb	r3, [r4, #4]
   db0f2:	079d      	lsls	r5, r3, #30
   db0f4:	d507      	bpl.n	db106 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   db0f6:	492e      	ldr	r1, [pc, #184]	; (db1b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   db0f8:	2202      	movs	r2, #2
   db0fa:	a801      	add	r0, sp, #4
   db0fc:	f7ff f80e 	bl	da11c <_ZN5spark10JSONWriter4nameEPKcj>
   db100:	68e1      	ldr	r1, [r4, #12]
   db102:	f7fe ff93 	bl	da02c <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   db106:	7923      	ldrb	r3, [r4, #4]
   db108:	0758      	lsls	r0, r3, #29
   db10a:	d516      	bpl.n	db13a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   db10c:	6925      	ldr	r5, [r4, #16]
   db10e:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   db110:	463b      	mov	r3, r7
   db112:	f813 2b01 	ldrb.w	r2, [r3], #1
   db116:	b13a      	cbz	r2, db128 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   db118:	2a20      	cmp	r2, #32
   db11a:	d101      	bne.n	db120 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   db11c:	461d      	mov	r5, r3
   db11e:	e001      	b.n	db124 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   db120:	2a28      	cmp	r2, #40	; 0x28
   db122:	d001      	beq.n	db128 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   db124:	461f      	mov	r7, r3
   db126:	e7f3      	b.n	db110 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   db128:	2202      	movs	r2, #2
   db12a:	4922      	ldr	r1, [pc, #136]	; (db1b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   db12c:	a801      	add	r0, sp, #4
   db12e:	f7fe fff5 	bl	da11c <_ZN5spark10JSONWriter4nameEPKcj>
   db132:	1b7a      	subs	r2, r7, r5
   db134:	4629      	mov	r1, r5
   db136:	f7ff f800 	bl	da13a <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   db13a:	7923      	ldrb	r3, [r4, #4]
   db13c:	0719      	lsls	r1, r3, #28
   db13e:	d507      	bpl.n	db150 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   db140:	491d      	ldr	r1, [pc, #116]	; (db1b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   db142:	2201      	movs	r2, #1
   db144:	a801      	add	r0, sp, #4
   db146:	f7fe ffe9 	bl	da11c <_ZN5spark10JSONWriter4nameEPKcj>
   db14a:	6961      	ldr	r1, [r4, #20]
   db14c:	f7fe ff80 	bl	da050 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   db150:	7923      	ldrb	r3, [r4, #4]
   db152:	06da      	lsls	r2, r3, #27
   db154:	d508      	bpl.n	db168 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   db156:	2204      	movs	r2, #4
   db158:	4918      	ldr	r1, [pc, #96]	; (db1bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   db15a:	eb0d 0002 	add.w	r0, sp, r2
   db15e:	f7fe ffdd 	bl	da11c <_ZN5spark10JSONWriter4nameEPKcj>
   db162:	69a1      	ldr	r1, [r4, #24]
   db164:	f7fe ff62 	bl	da02c <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   db168:	7923      	ldrb	r3, [r4, #4]
   db16a:	069b      	lsls	r3, r3, #26
   db16c:	d507      	bpl.n	db17e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   db16e:	4914      	ldr	r1, [pc, #80]	; (db1c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   db170:	2206      	movs	r2, #6
   db172:	a801      	add	r0, sp, #4
   db174:	f7fe ffd2 	bl	da11c <_ZN5spark10JSONWriter4nameEPKcj>
   db178:	69e1      	ldr	r1, [r4, #28]
   db17a:	f7ff f8c1 	bl	da300 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   db17e:	a801      	add	r0, sp, #4
   db180:	f7fe ff31 	bl	d9fe6 <_ZN5spark10JSONWriter9endObjectEv>
   db184:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   db186:	490f      	ldr	r1, [pc, #60]	; (db1c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   db188:	6803      	ldr	r3, [r0, #0]
   db18a:	2202      	movs	r2, #2
   db18c:	68db      	ldr	r3, [r3, #12]
   db18e:	4798      	blx	r3
}
   db190:	b005      	add	sp, #20
   db192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db196:	bf00      	nop
   db198:	2003e570 	.word	0x2003e570
   db19c:	000dfcb4 	.word	0x000dfcb4
   db1a0:	000dfce6 	.word	0x000dfce6
   db1a4:	000dfcf9 	.word	0x000dfcf9
   db1a8:	000dfdaf 	.word	0x000dfdaf
   db1ac:	000df7ea 	.word	0x000df7ea
   db1b0:	000dfd7e 	.word	0x000dfd7e
   db1b4:	000dfd81 	.word	0x000dfd81
   db1b8:	000df53a 	.word	0x000df53a
   db1bc:	000dfd84 	.word	0x000dfd84
   db1c0:	000dfd89 	.word	0x000dfd89
   db1c4:	000df9a5 	.word	0x000df9a5

000db1c8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db1c8:	2200      	movs	r2, #0
   db1ca:	4611      	mov	r1, r2
   db1cc:	6840      	ldr	r0, [r0, #4]
   db1ce:	f7fd b8b9 	b.w	d8344 <network_listening>

000db1d2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   db1d2:	2200      	movs	r2, #0
   db1d4:	4611      	mov	r1, r2
   db1d6:	6840      	ldr	r0, [r0, #4]
   db1d8:	f7fd b8c4 	b.w	d8364 <network_get_listen_timeout>

000db1dc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   db1dc:	2200      	movs	r2, #0
   db1de:	6840      	ldr	r0, [r0, #4]
   db1e0:	f7fd b8b8 	b.w	d8354 <network_set_listen_timeout>

000db1e4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   db1e4:	2200      	movs	r2, #0
   db1e6:	f081 0101 	eor.w	r1, r1, #1
   db1ea:	6840      	ldr	r0, [r0, #4]
   db1ec:	f7fd b8a2 	b.w	d8334 <network_listen>

000db1f0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   db1f0:	2300      	movs	r3, #0
   db1f2:	461a      	mov	r2, r3
   db1f4:	2101      	movs	r1, #1
   db1f6:	6840      	ldr	r0, [r0, #4]
   db1f8:	f7fd b894 	b.w	d8324 <network_off>

000db1fc <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   db1fc:	2300      	movs	r3, #0
   db1fe:	461a      	mov	r2, r3
   db200:	4619      	mov	r1, r3
   db202:	6840      	ldr	r0, [r0, #4]
   db204:	f7fd b886 	b.w	d8314 <network_on>

000db208 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   db208:	2200      	movs	r2, #0
   db20a:	4611      	mov	r1, r2
   db20c:	6840      	ldr	r0, [r0, #4]
   db20e:	f7fd b879 	b.w	d8304 <network_ready>

000db212 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   db212:	2200      	movs	r2, #0
   db214:	4611      	mov	r1, r2
   db216:	6840      	ldr	r0, [r0, #4]
   db218:	f7fd b864 	b.w	d82e4 <network_connecting>

000db21c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db21c:	2200      	movs	r2, #0
   db21e:	2102      	movs	r1, #2
   db220:	6840      	ldr	r0, [r0, #4]
   db222:	f7fd b867 	b.w	d82f4 <network_disconnect>

000db226 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   db226:	2300      	movs	r3, #0
   db228:	461a      	mov	r2, r3
   db22a:	6840      	ldr	r0, [r0, #4]
   db22c:	f7fd b852 	b.w	d82d4 <network_connect>

000db230 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   db230:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db232:	4605      	mov	r5, r0
   db234:	b188      	cbz	r0, db25a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db236:	6804      	ldr	r4, [r0, #0]
   db238:	b14c      	cbz	r4, db24e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   db23a:	68a3      	ldr	r3, [r4, #8]
   db23c:	b11b      	cbz	r3, db246 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db23e:	2203      	movs	r2, #3
   db240:	4621      	mov	r1, r4
   db242:	4620      	mov	r0, r4
   db244:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db246:	2110      	movs	r1, #16
   db248:	4620      	mov	r0, r4
   db24a:	f000 feee 	bl	dc02a <_ZdlPvj>
   db24e:	4628      	mov	r0, r5
   db250:	2114      	movs	r1, #20
      }
   db252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db256:	f000 bee8 	b.w	dc02a <_ZdlPvj>
   db25a:	bd38      	pop	{r3, r4, r5, pc}

000db25c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   db25c:	b110      	cbz	r0, db264 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   db25e:	6803      	ldr	r3, [r0, #0]
   db260:	685b      	ldr	r3, [r3, #4]
   db262:	4718      	bx	r3
   db264:	4770      	bx	lr

000db266 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   db266:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   db268:	6803      	ldr	r3, [r0, #0]
   db26a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   db26c:	b1bb      	cbz	r3, db29e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   db26e:	6858      	ldr	r0, [r3, #4]
   db270:	f7fc fd62 	bl	d7d38 <os_thread_is_current>
   db274:	b978      	cbnz	r0, db296 <_ZN6ThreadD1Ev+0x30>
   db276:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   db278:	7c5a      	ldrb	r2, [r3, #17]
   db27a:	b912      	cbnz	r2, db282 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   db27c:	6858      	ldr	r0, [r3, #4]
   db27e:	f7fc fd6b 	bl	d7d58 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   db282:	6823      	ldr	r3, [r4, #0]
   db284:	6858      	ldr	r0, [r3, #4]
   db286:	f7fc fd6f 	bl	d7d68 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db28a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   db28c:	2300      	movs	r3, #0
   db28e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   db290:	b128      	cbz	r0, db29e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   db292:	f7ff ffcd 	bl	db230 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db296:	6820      	ldr	r0, [r4, #0]
   db298:	b108      	cbz	r0, db29e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   db29a:	f7ff ffc9 	bl	db230 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   db29e:	4620      	mov	r0, r4
   db2a0:	bd10      	pop	{r4, pc}

000db2a2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   db2a2:	b538      	push	{r3, r4, r5, lr}
   db2a4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db2a6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   db2aa:	b108      	cbz	r0, db2b0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   db2ac:	f7f8 fef9 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   db2b0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   db2b4:	b108      	cbz	r0, db2ba <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   db2b6:	f7fc fd8f 	bl	d7dd8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db2ba:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   db2be:	b135      	cbz	r5, db2ce <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db2c0:	4628      	mov	r0, r5
   db2c2:	f7ff ffd0 	bl	db266 <_ZN6ThreadD1Ev>
   db2c6:	2104      	movs	r1, #4
   db2c8:	4628      	mov	r0, r5
   db2ca:	f000 feae 	bl	dc02a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db2ce:	6820      	ldr	r0, [r4, #0]
   db2d0:	b108      	cbz	r0, db2d6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   db2d2:	f7ff ffc3 	bl	db25c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   db2d6:	4620      	mov	r0, r4
   db2d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000db2dc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   db2dc:	b510      	push	{r4, lr}
   db2de:	4b04      	ldr	r3, [pc, #16]	; (db2f0 <_ZN5spark9MeshClassD1Ev+0x14>)
   db2e0:	4604      	mov	r4, r0
   db2e2:	f840 3b08 	str.w	r3, [r0], #8
   db2e6:	f7ff ffdc 	bl	db2a2 <_ZN5spark11MeshPublishD1Ev>
   db2ea:	4620      	mov	r0, r4
   db2ec:	bd10      	pop	{r4, pc}
   db2ee:	bf00      	nop
   db2f0:	000dfe08 	.word	0x000dfe08

000db2f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   db2f4:	b538      	push	{r3, r4, r5, lr}
   db2f6:	4c0e      	ldr	r4, [pc, #56]	; (db330 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   db2f8:	4b0e      	ldr	r3, [pc, #56]	; (db334 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   db2fa:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   db2fc:	2500      	movs	r5, #0
   db2fe:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   db300:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   db304:	6063      	str	r3, [r4, #4]
   db306:	60a5      	str	r5, [r4, #8]
   db308:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   db30c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   db310:	f7fc fd5a 	bl	d7dc8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   db314:	4b08      	ldr	r3, [pc, #32]	; (db338 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   db316:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db31a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   db31e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   db320:	4620      	mov	r0, r4
   db322:	4a06      	ldr	r2, [pc, #24]	; (db33c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   db324:	4906      	ldr	r1, [pc, #24]	; (db340 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   db326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   db32a:	f000 be79 	b.w	dc020 <__aeabi_atexit>
   db32e:	bf00      	nop
   db330:	2003e39c 	.word	0x2003e39c
   db334:	000dfe3c 	.word	0x000dfe3c
   db338:	000dfe08 	.word	0x000dfe08
   db33c:	2003d454 	.word	0x2003d454
   db340:	000db2dd 	.word	0x000db2dd

000db344 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   db344:	2300      	movs	r3, #0
   db346:	461a      	mov	r2, r3
   db348:	6840      	ldr	r0, [r0, #4]
   db34a:	f7fc bfc3 	b.w	d82d4 <network_connect>

000db34e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   db34e:	2200      	movs	r2, #0
   db350:	2102      	movs	r1, #2
   db352:	6840      	ldr	r0, [r0, #4]
   db354:	f7fc bfce 	b.w	d82f4 <network_disconnect>

000db358 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   db358:	2200      	movs	r2, #0
   db35a:	4611      	mov	r1, r2
   db35c:	6840      	ldr	r0, [r0, #4]
   db35e:	f7fc bfc1 	b.w	d82e4 <network_connecting>

000db362 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   db362:	2200      	movs	r2, #0
   db364:	4611      	mov	r1, r2
   db366:	6840      	ldr	r0, [r0, #4]
   db368:	f7fc bfcc 	b.w	d8304 <network_ready>

000db36c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   db36c:	2300      	movs	r3, #0
   db36e:	461a      	mov	r2, r3
   db370:	4619      	mov	r1, r3
   db372:	6840      	ldr	r0, [r0, #4]
   db374:	f7fc bfce 	b.w	d8314 <network_on>

000db378 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   db378:	2300      	movs	r3, #0
   db37a:	461a      	mov	r2, r3
   db37c:	4619      	mov	r1, r3
   db37e:	6840      	ldr	r0, [r0, #4]
   db380:	f7fc bfd0 	b.w	d8324 <network_off>

000db384 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   db384:	2200      	movs	r2, #0
   db386:	f081 0101 	eor.w	r1, r1, #1
   db38a:	6840      	ldr	r0, [r0, #4]
   db38c:	f7fc bfd2 	b.w	d8334 <network_listen>

000db390 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   db390:	2200      	movs	r2, #0
   db392:	6840      	ldr	r0, [r0, #4]
   db394:	f7fc bfde 	b.w	d8354 <network_set_listen_timeout>

000db398 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   db398:	2200      	movs	r2, #0
   db39a:	4611      	mov	r1, r2
   db39c:	6840      	ldr	r0, [r0, #4]
   db39e:	f7fc bfe1 	b.w	d8364 <network_get_listen_timeout>

000db3a2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   db3a2:	2200      	movs	r2, #0
   db3a4:	4611      	mov	r1, r2
   db3a6:	6840      	ldr	r0, [r0, #4]
   db3a8:	f7fc bfcc 	b.w	d8344 <network_listening>

000db3ac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   db3ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   db3b0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   db3b2:	b095      	sub	sp, #84	; 0x54
   db3b4:	4616      	mov	r6, r2
   db3b6:	460d      	mov	r5, r1
   db3b8:	4607      	mov	r7, r0
    IPAddress addr;
   db3ba:	f7fe fd23 	bl	d9e04 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   db3be:	4621      	mov	r1, r4
   db3c0:	2220      	movs	r2, #32
   db3c2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   db3c4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   db3c6:	f001 fdd2 	bl	dcf6e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   db3ca:	2340      	movs	r3, #64	; 0x40
   db3cc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   db3ce:	4621      	mov	r1, r4
   db3d0:	466b      	mov	r3, sp
   db3d2:	aa0c      	add	r2, sp, #48	; 0x30
   db3d4:	4630      	mov	r0, r6
   db3d6:	f7fc fddf 	bl	d7f98 <netdb_getaddrinfo>
    if (!r) {
   db3da:	4604      	mov	r4, r0
   db3dc:	2800      	cmp	r0, #0
   db3de:	d144      	bne.n	db46a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db3e0:	4602      	mov	r2, r0
   db3e2:	2101      	movs	r1, #1
   db3e4:	6868      	ldr	r0, [r5, #4]
   db3e6:	f7fc ff8d 	bl	d8304 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db3ea:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db3ec:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db3ee:	4622      	mov	r2, r4
   db3f0:	6868      	ldr	r0, [r5, #4]
   db3f2:	f7fc ff87 	bl	d8304 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db3f6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db3f8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   db3fa:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db3fc:	2e00      	cmp	r6, #0
   db3fe:	d034      	beq.n	db46a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   db400:	2900      	cmp	r1, #0
   db402:	d132      	bne.n	db46a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   db404:	6873      	ldr	r3, [r6, #4]
   db406:	2b02      	cmp	r3, #2
   db408:	d002      	beq.n	db410 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   db40a:	2b0a      	cmp	r3, #10
   db40c:	d009      	beq.n	db422 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   db40e:	e02a      	b.n	db466 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   db410:	f1b8 0f00 	cmp.w	r8, #0
   db414:	d027      	beq.n	db466 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   db416:	6971      	ldr	r1, [r6, #20]
   db418:	4638      	mov	r0, r7
   db41a:	3104      	adds	r1, #4
   db41c:	f7fe fd1f 	bl	d9e5e <_ZN9IPAddressaSEPKh>
   db420:	e020      	b.n	db464 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   db422:	f1b9 0f00 	cmp.w	r9, #0
   db426:	d01e      	beq.n	db466 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   db428:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   db42a:	2211      	movs	r2, #17
   db42c:	a801      	add	r0, sp, #4
   db42e:	f001 fd9e 	bl	dcf6e <memset>
                    a.v = 6;
   db432:	2306      	movs	r3, #6
   db434:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   db438:	ad01      	add	r5, sp, #4
   db43a:	f104 0308 	add.w	r3, r4, #8
   db43e:	3418      	adds	r4, #24
   db440:	6818      	ldr	r0, [r3, #0]
   db442:	6859      	ldr	r1, [r3, #4]
   db444:	462a      	mov	r2, r5
   db446:	c203      	stmia	r2!, {r0, r1}
   db448:	3308      	adds	r3, #8
   db44a:	42a3      	cmp	r3, r4
   db44c:	4615      	mov	r5, r2
   db44e:	d1f7      	bne.n	db440 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   db450:	a901      	add	r1, sp, #4
   db452:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   db454:	ad07      	add	r5, sp, #28
   db456:	f7fe fce3 	bl	d9e20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   db45a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db45c:	1d3c      	adds	r4, r7, #4
   db45e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db460:	682b      	ldr	r3, [r5, #0]
   db462:	7023      	strb	r3, [r4, #0]
                    ok = true;
   db464:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db466:	69f6      	ldr	r6, [r6, #28]
   db468:	e7c8      	b.n	db3fc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   db46a:	9800      	ldr	r0, [sp, #0]
   db46c:	f7fc fd8c 	bl	d7f88 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   db470:	4638      	mov	r0, r7
   db472:	b015      	add	sp, #84	; 0x54
   db474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db478 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   db478:	4b02      	ldr	r3, [pc, #8]	; (db484 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   db47a:	4a03      	ldr	r2, [pc, #12]	; (db488 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   db47c:	601a      	str	r2, [r3, #0]
   db47e:	2200      	movs	r2, #0
   db480:	605a      	str	r2, [r3, #4]
   db482:	4770      	bx	lr
   db484:	2003e570 	.word	0x2003e570
   db488:	000dfe3c 	.word	0x000dfe3c

000db48c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   db48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db48e:	4606      	mov	r6, r0
   db490:	460d      	mov	r5, r1
   db492:	188f      	adds	r7, r1, r2
  size_t n = 0;
   db494:	2400      	movs	r4, #0
  while (size--) {
   db496:	42bd      	cmp	r5, r7
   db498:	d00c      	beq.n	db4b4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   db49a:	6833      	ldr	r3, [r6, #0]
   db49c:	f815 1b01 	ldrb.w	r1, [r5], #1
   db4a0:	689b      	ldr	r3, [r3, #8]
   db4a2:	4630      	mov	r0, r6
   db4a4:	4798      	blx	r3
     if (chunk>=0)
   db4a6:	2800      	cmp	r0, #0
   db4a8:	db01      	blt.n	db4ae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   db4aa:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   db4ac:	e7f3      	b.n	db496 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   db4ae:	2c00      	cmp	r4, #0
   db4b0:	bf08      	it	eq
   db4b2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   db4b4:	4620      	mov	r0, r4
   db4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db4b8 <_ZN5Print5printEPKc>:
   db4b8:	b508      	push	{r3, lr}
   db4ba:	f7fb fd95 	bl	d6fe8 <_ZN5Print5writeEPKc>
   db4be:	bd08      	pop	{r3, pc}

000db4c0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   db4c0:	6803      	ldr	r3, [r0, #0]
   db4c2:	689b      	ldr	r3, [r3, #8]
   db4c4:	4718      	bx	r3

000db4c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   db4c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   db4c8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   db4ca:	4605      	mov	r5, r0
  size_t n = print('\r');
   db4cc:	f7ff fff8 	bl	db4c0 <_ZN5Print5printEc>
  n += print('\n');
   db4d0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   db4d2:	4604      	mov	r4, r0
  n += print('\n');
   db4d4:	4628      	mov	r0, r5
   db4d6:	f7ff fff3 	bl	db4c0 <_ZN5Print5printEc>
  return n;
}
   db4da:	4420      	add	r0, r4
   db4dc:	bd38      	pop	{r3, r4, r5, pc}

000db4de <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   db4de:	b538      	push	{r3, r4, r5, lr}
   db4e0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db4e2:	f7fb fd81 	bl	d6fe8 <_ZN5Print5writeEPKc>
   db4e6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   db4e8:	4628      	mov	r0, r5
   db4ea:	f7ff ffec 	bl	db4c6 <_ZN5Print7printlnEv>
  return n;
}
   db4ee:	4420      	add	r0, r4
   db4f0:	bd38      	pop	{r3, r4, r5, pc}

000db4f2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   db4f2:	b530      	push	{r4, r5, lr}
   db4f4:	b08b      	sub	sp, #44	; 0x2c
   db4f6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   db4f8:	2100      	movs	r1, #0
   db4fa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   db4fe:	2a01      	cmp	r2, #1
   db500:	bf98      	it	ls
   db502:	220a      	movls	r2, #10
   db504:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   db508:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   db50c:	fb05 3312 	mls	r3, r5, r2, r3
   db510:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   db514:	2b09      	cmp	r3, #9
   db516:	bf94      	ite	ls
   db518:	3330      	addls	r3, #48	; 0x30
   db51a:	3337      	addhi	r3, #55	; 0x37
   db51c:	b2db      	uxtb	r3, r3
   db51e:	4621      	mov	r1, r4
   db520:	f804 3901 	strb.w	r3, [r4], #-1
   db524:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   db526:	2d00      	cmp	r5, #0
   db528:	d1ee      	bne.n	db508 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   db52a:	f7fb fd5d 	bl	d6fe8 <_ZN5Print5writeEPKc>
}
   db52e:	b00b      	add	sp, #44	; 0x2c
   db530:	bd30      	pop	{r4, r5, pc}

000db532 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   db532:	b40c      	push	{r2, r3}
   db534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db538:	b087      	sub	sp, #28
   db53a:	af00      	add	r7, sp, #0
   db53c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   db540:	4605      	mov	r5, r0
   db542:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   db546:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   db548:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   db54a:	4623      	mov	r3, r4
   db54c:	464a      	mov	r2, r9
   db54e:	2114      	movs	r1, #20
   db550:	1d38      	adds	r0, r7, #4
   db552:	f7fc ff3f 	bl	d83d4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   db556:	2813      	cmp	r0, #19
   db558:	d805      	bhi.n	db566 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db55a:	1d39      	adds	r1, r7, #4
   db55c:	4628      	mov	r0, r5
   db55e:	f7fb fd43 	bl	d6fe8 <_ZN5Print5writeEPKc>
   db562:	4604      	mov	r4, r0
   db564:	e013      	b.n	db58e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   db566:	f100 0308 	add.w	r3, r0, #8
   db56a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   db56e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   db570:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   db574:	1c41      	adds	r1, r0, #1
   db576:	4623      	mov	r3, r4
   db578:	464a      	mov	r2, r9
   db57a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   db57c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   db57e:	f7fc ff29 	bl	d83d4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db582:	4669      	mov	r1, sp
   db584:	4628      	mov	r0, r5
   db586:	f7fb fd2f 	bl	d6fe8 <_ZN5Print5writeEPKc>
   db58a:	4604      	mov	r4, r0
   db58c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   db58e:	b11e      	cbz	r6, db598 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   db590:	4628      	mov	r0, r5
   db592:	f7ff ff98 	bl	db4c6 <_ZN5Print7printlnEv>
   db596:	4404      	add	r4, r0
    return n;
}
   db598:	4620      	mov	r0, r4
   db59a:	371c      	adds	r7, #28
   db59c:	46bd      	mov	sp, r7
   db59e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db5a2:	b002      	add	sp, #8
   db5a4:	4770      	bx	lr

000db5a6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   db5a6:	b510      	push	{r4, lr}
   db5a8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   db5aa:	f7f8 fea5 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
   db5ae:	4620      	mov	r0, r4
   db5b0:	bd10      	pop	{r4, pc}
	...

000db5b4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   db5b4:	4803      	ldr	r0, [pc, #12]	; (db5c4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   db5b6:	4a04      	ldr	r2, [pc, #16]	; (db5c8 <_GLOBAL__sub_I_RGB+0x14>)
   db5b8:	4904      	ldr	r1, [pc, #16]	; (db5cc <_GLOBAL__sub_I_RGB+0x18>)
   db5ba:	2300      	movs	r3, #0
   db5bc:	6083      	str	r3, [r0, #8]
   db5be:	f000 bd2f 	b.w	dc020 <__aeabi_atexit>
   db5c2:	bf00      	nop
   db5c4:	2003e578 	.word	0x2003e578
   db5c8:	2003d454 	.word	0x2003d454
   db5cc:	000db5a7 	.word	0x000db5a7

000db5d0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   db5d0:	2100      	movs	r1, #0
   db5d2:	f7fc bd39 	b.w	d8048 <HAL_SPI_Acquire>

000db5d6 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   db5d6:	2100      	movs	r1, #0
   db5d8:	f7fc bd3e 	b.w	d8058 <HAL_SPI_Release>

000db5dc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   db5dc:	b510      	push	{r4, lr}
   db5de:	4604      	mov	r4, r0
{
    _spi = spi;
   db5e0:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   db5e2:	4608      	mov	r0, r1
   db5e4:	f7fc fcf8 	bl	d7fd8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   db5e8:	2300      	movs	r3, #0
   db5ea:	6063      	str	r3, [r4, #4]
}
   db5ec:	4620      	mov	r0, r4
   db5ee:	bd10      	pop	{r4, pc}

000db5f0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   db5f0:	b510      	push	{r4, lr}
   db5f2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   db5f4:	7800      	ldrb	r0, [r0, #0]
   db5f6:	f7ff ffeb 	bl	db5d0 <_ZN8SPIClass4lockEv.isra.0>
   db5fa:	b948      	cbnz	r0, db610 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   db5fc:	7820      	ldrb	r0, [r4, #0]
   db5fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   db602:	f7fc fcd1 	bl	d7fa8 <HAL_SPI_Begin>
        unlock();
   db606:	7820      	ldrb	r0, [r4, #0]
    }
}
   db608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   db60c:	f7ff bfe3 	b.w	db5d6 <_ZN8SPIClass6unlockEv.isra.1>
   db610:	bd10      	pop	{r4, pc}

000db612 <_ZN8SPIClass5beginE8SPI_Modet>:
        unlock();
    }
}

void SPIClass::begin(SPI_Mode mode, uint16_t ss_pin)
{
   db612:	b570      	push	{r4, r5, r6, lr}
   db614:	4604      	mov	r4, r0
    if (!lock())
   db616:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::begin(SPI_Mode mode, uint16_t ss_pin)
{
   db618:	460d      	mov	r5, r1
   db61a:	4616      	mov	r6, r2
    if (!lock())
   db61c:	f7ff ffd8 	bl	db5d0 <_ZN8SPIClass4lockEv.isra.0>
   db620:	4603      	mov	r3, r0
   db622:	b948      	cbnz	r0, db638 <_ZN8SPIClass5beginE8SPI_Modet+0x26>
    {
        HAL_SPI_Begin_Ext(_spi, mode, ss_pin, NULL);
   db624:	7820      	ldrb	r0, [r4, #0]
   db626:	4632      	mov	r2, r6
   db628:	4629      	mov	r1, r5
   db62a:	f7fc fcf5 	bl	d8018 <HAL_SPI_Begin_Ext>
        unlock();
   db62e:	7820      	ldrb	r0, [r4, #0]
    }
}
   db630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void SPIClass::begin(SPI_Mode mode, uint16_t ss_pin)
{
    if (!lock())
    {
        HAL_SPI_Begin_Ext(_spi, mode, ss_pin, NULL);
        unlock();
   db634:	f7ff bfcf 	b.w	db5d6 <_ZN8SPIClass6unlockEv.isra.1>
   db638:	bd70      	pop	{r4, r5, r6, pc}

000db63a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   db63a:	7800      	ldrb	r0, [r0, #0]
   db63c:	f7ff bfcb 	b.w	db5d6 <_ZN8SPIClass6unlockEv.isra.1>

000db640 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   db640:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   db642:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   db644:	6018      	str	r0, [r3, #0]
   db646:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   db648:	6818      	ldr	r0, [r3, #0]
   db64a:	4288      	cmp	r0, r1
   db64c:	b2e5      	uxtb	r5, r4
   db64e:	d906      	bls.n	db65e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   db650:	3401      	adds	r4, #1
   db652:	2c08      	cmp	r4, #8
   db654:	d002      	beq.n	db65c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   db656:	0840      	lsrs	r0, r0, #1
   db658:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   db65a:	e7f5      	b.n	db648 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   db65c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   db65e:	4b02      	ldr	r3, [pc, #8]	; (db668 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   db660:	5d5b      	ldrb	r3, [r3, r5]
   db662:	7013      	strb	r3, [r2, #0]
   db664:	bd30      	pop	{r4, r5, pc}
   db666:	bf00      	nop
   db668:	000dfe68 	.word	0x000dfe68

000db66c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   db66c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db670:	4607      	mov	r7, r0
   db672:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   db674:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   db676:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   db678:	f7ff ffaa 	bl	db5d0 <_ZN8SPIClass4lockEv.isra.0>
   db67c:	2800      	cmp	r0, #0
   db67e:	db62      	blt.n	db746 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   db680:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   db682:	2214      	movs	r2, #20
   db684:	2100      	movs	r1, #0
   db686:	a809      	add	r0, sp, #36	; 0x24
   db688:	f001 fc71 	bl	dcf6e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   db68c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   db68e:	4620      	mov	r0, r4
   db690:	2200      	movs	r2, #0
   db692:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   db694:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   db698:	f7fc fcae 	bl	d7ff8 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   db69c:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   db6a0:	b154      	cbz	r4, db6b8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   db6a2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   db6a6:	b935      	cbnz	r5, db6b6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   db6a8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   db6ac:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   db6b0:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   db6b4:	e003      	b.n	db6be <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   db6b6:	2400      	movs	r4, #0
   db6b8:	46a1      	mov	r9, r4
   db6ba:	46a0      	mov	r8, r4
   db6bc:	2501      	movs	r5, #1
   db6be:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   db6c0:	b105      	cbz	r5, db6c4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   db6c2:	b9bb      	cbnz	r3, db6f4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   db6c4:	429d      	cmp	r5, r3
   db6c6:	d10b      	bne.n	db6e0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   db6c8:	68b2      	ldr	r2, [r6, #8]
   db6ca:	4542      	cmp	r2, r8
   db6cc:	d108      	bne.n	db6e0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   db6ce:	f88d 9020 	strb.w	r9, [sp, #32]
   db6d2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   db6d6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   db6da:	89b2      	ldrh	r2, [r6, #12]
   db6dc:	4291      	cmp	r1, r2
   db6de:	d009      	beq.n	db6f4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   db6e0:	b153      	cbz	r3, db6f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   db6e2:	2400      	movs	r4, #0
   db6e4:	7838      	ldrb	r0, [r7, #0]
   db6e6:	9401      	str	r4, [sp, #4]
   db6e8:	9400      	str	r4, [sp, #0]
   db6ea:	4623      	mov	r3, r4
   db6ec:	4622      	mov	r2, r4
   db6ee:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   db6f0:	f7fc fca2 	bl	d8038 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   db6f4:	2000      	movs	r0, #0
   db6f6:	e026      	b.n	db746 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   db6f8:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   db6fc:	68b1      	ldr	r1, [r6, #8]
   db6fe:	980a      	ldr	r0, [sp, #40]	; 0x28
   db700:	ab04      	add	r3, sp, #16
   db702:	f10d 020f 	add.w	r2, sp, #15
   db706:	f7ff ff9b 	bl	db640 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   db70a:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   db70c:	b105      	cbz	r5, db710 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   db70e:	b9b1      	cbnz	r1, db73e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   db710:	42a9      	cmp	r1, r5
   db712:	d008      	beq.n	db726 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   db714:	2400      	movs	r4, #0
   db716:	7838      	ldrb	r0, [r7, #0]
   db718:	9401      	str	r4, [sp, #4]
   db71a:	7b74      	ldrb	r4, [r6, #13]
   db71c:	7b33      	ldrb	r3, [r6, #12]
   db71e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   db722:	9400      	str	r4, [sp, #0]
   db724:	e7e4      	b.n	db6f0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   db726:	68b3      	ldr	r3, [r6, #8]
   db728:	4543      	cmp	r3, r8
   db72a:	d3f3      	bcc.n	db714 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   db72c:	f88d 9020 	strb.w	r9, [sp, #32]
   db730:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   db734:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   db738:	89b3      	ldrh	r3, [r6, #12]
   db73a:	429a      	cmp	r2, r3
   db73c:	d1ea      	bne.n	db714 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   db73e:	9b04      	ldr	r3, [sp, #16]
   db740:	4543      	cmp	r3, r8
   db742:	d1e7      	bne.n	db714 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   db744:	e7d6      	b.n	db6f4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   db746:	b00f      	add	sp, #60	; 0x3c
   db748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db74c <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   db74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db750:	b088      	sub	sp, #32
    unsigned clock = 0;
   db752:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   db754:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   db756:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   db758:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   db75a:	460e      	mov	r6, r1
   db75c:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   db75e:	f7ff ff37 	bl	db5d0 <_ZN8SPIClass4lockEv.isra.0>
   db762:	4605      	mov	r5, r0
   db764:	bb00      	cbnz	r0, db7a8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   db766:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   db76a:	4601      	mov	r1, r0
   db76c:	2214      	movs	r2, #20
   db76e:	a803      	add	r0, sp, #12
   db770:	f001 fbfd 	bl	dcf6e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   db774:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   db776:	462a      	mov	r2, r5
   db778:	a903      	add	r1, sp, #12
   db77a:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   db77c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   db780:	f7fc fc3a 	bl	d7ff8 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   db784:	ab02      	add	r3, sp, #8
   db786:	f10d 0207 	add.w	r2, sp, #7
   db78a:	fb07 f106 	mul.w	r1, r7, r6
   db78e:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   db790:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   db794:	f7ff ff54 	bl	db640 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   db798:	7820      	ldrb	r0, [r4, #0]
   db79a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   db79e:	f7fc fc0b 	bl	d7fb8 <HAL_SPI_Set_Clock_Divider>
        unlock();
   db7a2:	7820      	ldrb	r0, [r4, #0]
   db7a4:	f7ff ff17 	bl	db5d6 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   db7a8:	9802      	ldr	r0, [sp, #8]
   db7aa:	b008      	add	sp, #32
   db7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db7b0 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   db7b0:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   db7b2:	7800      	ldrb	r0, [r0, #0]
   db7b4:	f7fc fc08 	bl	d7fc8 <HAL_SPI_Send_Receive_Data>
}
   db7b8:	b2c0      	uxtb	r0, r0
   db7ba:	bd08      	pop	{r3, pc}

000db7bc <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   db7bc:	b530      	push	{r4, r5, lr}
   db7be:	b087      	sub	sp, #28
   db7c0:	4604      	mov	r4, r0
   db7c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   db7c4:	7800      	ldrb	r0, [r0, #0]
   db7c6:	9500      	str	r5, [sp, #0]
   db7c8:	f7fc fc1e 	bl	d8008 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   db7cc:	b93d      	cbnz	r5, db7de <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   db7ce:	a902      	add	r1, sp, #8
   db7d0:	7820      	ldrb	r0, [r4, #0]
   db7d2:	f7fc fc29 	bl	d8028 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   db7d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   db7da:	07db      	lsls	r3, r3, #31
   db7dc:	d4f7      	bmi.n	db7ce <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   db7de:	b007      	add	sp, #28
   db7e0:	bd30      	pop	{r4, r5, pc}

000db7e2 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   db7e2:	7800      	ldrb	r0, [r0, #0]
   db7e4:	f7fc bc00 	b.w	d7fe8 <HAL_SPI_Is_Enabled>

000db7e8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   db7e8:	b510      	push	{r4, lr}
   db7ea:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   db7ec:	f7fc fb2c 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   db7f0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   db7f2:	6823      	ldr	r3, [r4, #0]
   db7f4:	4620      	mov	r0, r4
   db7f6:	695b      	ldr	r3, [r3, #20]
   db7f8:	4798      	blx	r3
    if (c >= 0) return c;
   db7fa:	2800      	cmp	r0, #0
   db7fc:	da08      	bge.n	db810 <_ZN6Stream9timedReadEv+0x28>
   db7fe:	f7fc fb23 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   db802:	68e3      	ldr	r3, [r4, #12]
   db804:	1ac0      	subs	r0, r0, r3
   db806:	68a3      	ldr	r3, [r4, #8]
   db808:	4298      	cmp	r0, r3
   db80a:	d3f2      	bcc.n	db7f2 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   db80c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   db810:	bd10      	pop	{r4, pc}

000db812 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   db812:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db816:	4680      	mov	r8, r0
   db818:	4689      	mov	r9, r1
   db81a:	4616      	mov	r6, r2
  if (length < 1) return 0;
   db81c:	b17b      	cbz	r3, db83e <_ZN6Stream14readBytesUntilEcPcj+0x2c>
   db81e:	18d7      	adds	r7, r2, r3
   db820:	4615      	mov	r5, r2
  size_t index = 0;
  while (index < length) {
   db822:	42bd      	cmp	r5, r7
   db824:	eba5 0406 	sub.w	r4, r5, r6
   db828:	d00a      	beq.n	db840 <_ZN6Stream14readBytesUntilEcPcj+0x2e>
    int c = timedRead();
   db82a:	4640      	mov	r0, r8
   db82c:	f7ff ffdc 	bl	db7e8 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   db830:	2800      	cmp	r0, #0
   db832:	db05      	blt.n	db840 <_ZN6Stream14readBytesUntilEcPcj+0x2e>
   db834:	4548      	cmp	r0, r9
   db836:	d003      	beq.n	db840 <_ZN6Stream14readBytesUntilEcPcj+0x2e>
    *buffer++ = (char)c;
   db838:	f805 0b01 	strb.w	r0, [r5], #1

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
   db83c:	e7f1      	b.n	db822 <_ZN6Stream14readBytesUntilEcPcj+0x10>
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
   db83e:	461c      	mov	r4, r3
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
   db840:	4620      	mov	r0, r4
   db842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000db848 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   db848:	b570      	push	{r4, r5, r6, lr}
   db84a:	460d      	mov	r5, r1
  String ret;
   db84c:	4909      	ldr	r1, [pc, #36]	; (db874 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   db84e:	4604      	mov	r4, r0
   db850:	4616      	mov	r6, r2
  String ret;
   db852:	f000 f868 	bl	db926 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   db856:	4628      	mov	r0, r5
   db858:	f7ff ffc6 	bl	db7e8 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   db85c:	2800      	cmp	r0, #0
   db85e:	db06      	blt.n	db86e <_ZN6Stream15readStringUntilEc+0x26>
   db860:	42b0      	cmp	r0, r6
   db862:	d004      	beq.n	db86e <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   db864:	b2c1      	uxtb	r1, r0
   db866:	4620      	mov	r0, r4
   db868:	f000 f8b2 	bl	db9d0 <_ZN6String6concatEc>
   db86c:	e7f3      	b.n	db856 <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
   db86e:	4620      	mov	r0, r4
   db870:	bd70      	pop	{r4, r5, r6, pc}
   db872:	bf00      	nop
   db874:	000df9a7 	.word	0x000df9a7

000db878 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   db878:	2300      	movs	r3, #0
   db87a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   db87c:	6043      	str	r3, [r0, #4]
	len = 0;
   db87e:	6083      	str	r3, [r0, #8]
	flags = 0;
   db880:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   db882:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   db884:	680c      	ldr	r4, [r1, #0]
   db886:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   db888:	684c      	ldr	r4, [r1, #4]
   db88a:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   db88c:	688c      	ldr	r4, [r1, #8]
   db88e:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   db890:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   db892:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   db894:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   db896:	bd10      	pop	{r4, pc}

000db898 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   db898:	b510      	push	{r4, lr}
   db89a:	4604      	mov	r4, r0
{
	free(buffer);
   db89c:	6800      	ldr	r0, [r0, #0]
   db89e:	f7fc fd71 	bl	d8384 <free>
}
   db8a2:	4620      	mov	r0, r4
   db8a4:	bd10      	pop	{r4, pc}

000db8a6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   db8a6:	b510      	push	{r4, lr}
   db8a8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   db8aa:	6800      	ldr	r0, [r0, #0]
   db8ac:	b108      	cbz	r0, db8b2 <_ZN6String10invalidateEv+0xc>
   db8ae:	f7fc fd69 	bl	d8384 <free>
	buffer = NULL;
   db8b2:	2300      	movs	r3, #0
   db8b4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   db8b6:	60a3      	str	r3, [r4, #8]
   db8b8:	6063      	str	r3, [r4, #4]
   db8ba:	bd10      	pop	{r4, pc}

000db8bc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   db8bc:	b538      	push	{r3, r4, r5, lr}
   db8be:	4604      	mov	r4, r0
   db8c0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   db8c2:	6800      	ldr	r0, [r0, #0]
   db8c4:	3101      	adds	r1, #1
   db8c6:	f7fc fd65 	bl	d8394 <realloc>
	if (newbuffer) {
   db8ca:	b110      	cbz	r0, db8d2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   db8cc:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   db8d0:	2001      	movs	r0, #1
	}
	return 0;
}
   db8d2:	bd38      	pop	{r3, r4, r5, pc}

000db8d4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   db8d4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   db8d6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   db8d8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   db8da:	b113      	cbz	r3, db8e2 <_ZN6String7reserveEj+0xe>
   db8dc:	6843      	ldr	r3, [r0, #4]
   db8de:	428b      	cmp	r3, r1
   db8e0:	d207      	bcs.n	db8f2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   db8e2:	4620      	mov	r0, r4
   db8e4:	f7ff ffea 	bl	db8bc <_ZN6String12changeBufferEj>
   db8e8:	b120      	cbz	r0, db8f4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   db8ea:	68a3      	ldr	r3, [r4, #8]
   db8ec:	b90b      	cbnz	r3, db8f2 <_ZN6String7reserveEj+0x1e>
   db8ee:	6822      	ldr	r2, [r4, #0]
   db8f0:	7013      	strb	r3, [r2, #0]
   db8f2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   db8f4:	bd10      	pop	{r4, pc}

000db8f6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   db8f6:	b570      	push	{r4, r5, r6, lr}
   db8f8:	460e      	mov	r6, r1
	if (!reserve(length)) {
   db8fa:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   db8fc:	4604      	mov	r4, r0
   db8fe:	4615      	mov	r5, r2
	if (!reserve(length)) {
   db900:	f7ff ffe8 	bl	db8d4 <_ZN6String7reserveEj>
   db904:	b918      	cbnz	r0, db90e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   db906:	4620      	mov	r0, r4
   db908:	f7ff ffcd 	bl	db8a6 <_ZN6String10invalidateEv>
		return *this;
   db90c:	e009      	b.n	db922 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   db90e:	462a      	mov	r2, r5
   db910:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   db912:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   db914:	6820      	ldr	r0, [r4, #0]
   db916:	f001 fb04 	bl	dcf22 <memcpy>
	buffer[len] = 0;
   db91a:	6822      	ldr	r2, [r4, #0]
   db91c:	68a3      	ldr	r3, [r4, #8]
   db91e:	2100      	movs	r1, #0
   db920:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   db922:	4620      	mov	r0, r4
   db924:	bd70      	pop	{r4, r5, r6, pc}

000db926 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   db926:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   db928:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   db92a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   db92c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   db92e:	6043      	str	r3, [r0, #4]
	len = 0;
   db930:	6083      	str	r3, [r0, #8]
	flags = 0;
   db932:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   db934:	460d      	mov	r5, r1
   db936:	b139      	cbz	r1, db948 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   db938:	4608      	mov	r0, r1
   db93a:	f001 fb9e 	bl	dd07a <strlen>
   db93e:	4629      	mov	r1, r5
   db940:	4602      	mov	r2, r0
   db942:	4620      	mov	r0, r4
   db944:	f7ff ffd7 	bl	db8f6 <_ZN6String4copyEPKcj>
}
   db948:	4620      	mov	r0, r4
   db94a:	bd38      	pop	{r3, r4, r5, pc}

000db94c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   db94c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   db94e:	b510      	push	{r4, lr}
   db950:	460b      	mov	r3, r1
   db952:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   db954:	d007      	beq.n	db966 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   db956:	6809      	ldr	r1, [r1, #0]
   db958:	b119      	cbz	r1, db962 <_ZN6StringaSERKS_+0x16>
   db95a:	689a      	ldr	r2, [r3, #8]
   db95c:	f7ff ffcb 	bl	db8f6 <_ZN6String4copyEPKcj>
   db960:	e001      	b.n	db966 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   db962:	f7ff ffa0 	bl	db8a6 <_ZN6String10invalidateEv>

	return *this;
}
   db966:	4620      	mov	r0, r4
   db968:	bd10      	pop	{r4, pc}

000db96a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   db96a:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   db96c:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   db96e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   db970:	6003      	str	r3, [r0, #0]
	capacity = 0;
   db972:	6043      	str	r3, [r0, #4]
	len = 0;
   db974:	6083      	str	r3, [r0, #8]
	flags = 0;
   db976:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   db978:	f7ff ffe8 	bl	db94c <_ZN6StringaSERKS_>
}
   db97c:	4620      	mov	r0, r4
   db97e:	bd10      	pop	{r4, pc}

000db980 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   db980:	b538      	push	{r3, r4, r5, lr}
   db982:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   db984:	460c      	mov	r4, r1
   db986:	b141      	cbz	r1, db99a <_ZN6StringaSEPKc+0x1a>
   db988:	4608      	mov	r0, r1
   db98a:	f001 fb76 	bl	dd07a <strlen>
   db98e:	4621      	mov	r1, r4
   db990:	4602      	mov	r2, r0
   db992:	4628      	mov	r0, r5
   db994:	f7ff ffaf 	bl	db8f6 <_ZN6String4copyEPKcj>
   db998:	e001      	b.n	db99e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   db99a:	f7ff ff84 	bl	db8a6 <_ZN6String10invalidateEv>

	return *this;
}
   db99e:	4628      	mov	r0, r5
   db9a0:	bd38      	pop	{r3, r4, r5, pc}

000db9a2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   db9a2:	b570      	push	{r4, r5, r6, lr}
   db9a4:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   db9a6:	460e      	mov	r6, r1
   db9a8:	b909      	cbnz	r1, db9ae <_ZN6String6concatEPKcj+0xc>
   db9aa:	2000      	movs	r0, #0
   db9ac:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   db9ae:	b16a      	cbz	r2, db9cc <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   db9b0:	6883      	ldr	r3, [r0, #8]
   db9b2:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   db9b4:	4629      	mov	r1, r5
   db9b6:	f7ff ff8d 	bl	db8d4 <_ZN6String7reserveEj>
   db9ba:	2800      	cmp	r0, #0
   db9bc:	d0f5      	beq.n	db9aa <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   db9be:	6820      	ldr	r0, [r4, #0]
   db9c0:	68a3      	ldr	r3, [r4, #8]
   db9c2:	4631      	mov	r1, r6
   db9c4:	4418      	add	r0, r3
   db9c6:	f001 fb34 	bl	dd032 <strcpy>
	len = newlen;
   db9ca:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   db9cc:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   db9ce:	bd70      	pop	{r4, r5, r6, pc}

000db9d0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   db9d0:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   db9d2:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   db9d4:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   db9d8:	2201      	movs	r2, #1
   db9da:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   db9dc:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   db9e0:	f7ff ffdf 	bl	db9a2 <_ZN6String6concatEPKcj>
}
   db9e4:	b003      	add	sp, #12
   db9e6:	f85d fb04 	ldr.w	pc, [sp], #4

000db9ea <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   db9ea:	6883      	ldr	r3, [r0, #8]
   db9ec:	428b      	cmp	r3, r1
   db9ee:	d903      	bls.n	db9f8 <_ZNK6StringixEj+0xe>
   db9f0:	6800      	ldr	r0, [r0, #0]
   db9f2:	b110      	cbz	r0, db9fa <_ZNK6StringixEj+0x10>
	return buffer[index];
   db9f4:	5c40      	ldrb	r0, [r0, r1]
   db9f6:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   db9f8:	2000      	movs	r0, #0
	return buffer[index];
}
   db9fa:	4770      	bx	lr

000db9fc <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   db9fc:	f7ff bff5 	b.w	db9ea <_ZNK6StringixEj>

000dba00 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   dba00:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   dba02:	4c09      	ldr	r4, [pc, #36]	; (dba28 <_GLOBAL__sub_I_System+0x28>)
   dba04:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   dba06:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   dba0a:	6020      	str	r0, [r4, #0]
   dba0c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   dba0e:	71a0      	strb	r0, [r4, #6]
   dba10:	8120      	strh	r0, [r4, #8]
   dba12:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dba14:	f7fc fbea 	bl	d81ec <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   dba18:	4620      	mov	r0, r4
   dba1a:	4a04      	ldr	r2, [pc, #16]	; (dba2c <_GLOBAL__sub_I_System+0x2c>)
   dba1c:	4904      	ldr	r1, [pc, #16]	; (dba30 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   dba1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   dba22:	f000 bafd 	b.w	dc020 <__aeabi_atexit>
   dba26:	bf00      	nop
   dba28:	2003e588 	.word	0x2003e588
   dba2c:	2003d454 	.word	0x2003d454
   dba30:	000d4271 	.word	0x000d4271

000dba34 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dba34:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   dba36:	4b14      	ldr	r3, [pc, #80]	; (dba88 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dba38:	4f14      	ldr	r7, [pc, #80]	; (dba8c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   dba3a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   dba3c:	4b14      	ldr	r3, [pc, #80]	; (dba90 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   dba3e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   dba40:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   dba42:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   dba44:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   dba46:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dba48:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dba4a:	d01b      	beq.n	dba84 <_ZL22Refresh_UnixTime_Cachel+0x50>
   dba4c:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   dba4e:	ad01      	add	r5, sp, #4
   dba50:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   dba54:	f001 f95a 	bl	dcd0c <localtime>
	calendar_time->tm_year += 1900;
   dba58:	6943      	ldr	r3, [r0, #20]
   dba5a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   dba5e:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   dba60:	4604      	mov	r4, r0
   dba62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dba64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dba66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dba68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dba6a:	f8d4 e000 	ldr.w	lr, [r4]
   dba6e:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dba72:	ad01      	add	r5, sp, #4
   dba74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dba76:	4c07      	ldr	r4, [pc, #28]	; (dba94 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   dba78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dba7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dba7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   dba7e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dba80:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   dba84:	b00b      	add	sp, #44	; 0x2c
   dba86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dba88:	2003e5c4 	.word	0x2003e5c4
   dba8c:	2003e5c0 	.word	0x2003e5c0
   dba90:	2003e5bc 	.word	0x2003e5bc
   dba94:	2003e594 	.word	0x2003e594

000dba98 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   dba98:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   dba9a:	2000      	movs	r0, #0
   dba9c:	f7fc fc0a 	bl	d82b4 <spark_sync_time_pending>
   dbaa0:	b128      	cbz	r0, dbaae <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dbaa2:	f7fc fbef 	bl	d8284 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   dbaa6:	f080 0001 	eor.w	r0, r0, #1
   dbaaa:	b2c0      	uxtb	r0, r0
   dbaac:	bd08      	pop	{r3, pc}
   dbaae:	2001      	movs	r0, #1
    }
   dbab0:	bd08      	pop	{r3, pc}
	...

000dbab4 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   dbab4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dbab6:	f7ff ffbd 	bl	dba34 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   dbaba:	4b02      	ldr	r3, [pc, #8]	; (dbac4 <_ZN9TimeClass5monthEl+0x10>)
   dbabc:	6918      	ldr	r0, [r3, #16]
}
   dbabe:	3001      	adds	r0, #1
   dbac0:	bd08      	pop	{r3, pc}
   dbac2:	bf00      	nop
   dbac4:	2003e594 	.word	0x2003e594

000dbac8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   dbac8:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   dbaca:	2000      	movs	r0, #0
   dbacc:	f7fc f9cc 	bl	d7e68 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   dbad0:	4604      	mov	r4, r0
   dbad2:	b968      	cbnz	r0, dbaf0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   dbad4:	f7fc fb82 	bl	d81dc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   dbad8:	2801      	cmp	r0, #1
   dbada:	d10b      	bne.n	dbaf4 <_ZN9TimeClass7isValidEv+0x2c>
   dbadc:	4620      	mov	r0, r4
   dbade:	f7fc fba5 	bl	d822c <system_thread_get_state>
   dbae2:	b938      	cbnz	r0, dbaf4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   dbae4:	f7ff ffd8 	bl	dba98 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   dbae8:	b930      	cbnz	r0, dbaf8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   dbaea:	f7fc fbc3 	bl	d8274 <spark_process>
   dbaee:	e7f9      	b.n	dbae4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   dbaf0:	2001      	movs	r0, #1
   dbaf2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   dbaf4:	2000      	movs	r0, #0
   dbaf6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   dbaf8:	f7ff ffce 	bl	dba98 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   dbafc:	2000      	movs	r0, #0
   dbafe:	f7fc f9b3 	bl	d7e68 <HAL_RTC_Time_Is_Valid>
   dbb02:	3000      	adds	r0, #0
   dbb04:	bf18      	it	ne
   dbb06:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   dbb08:	bd10      	pop	{r4, pc}

000dbb0a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   dbb0a:	b508      	push	{r3, lr}
    (void)isValid();
   dbb0c:	f7ff ffdc 	bl	dbac8 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   dbb10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   dbb14:	f7fc b9a0 	b.w	d7e58 <HAL_RTC_Get_UnixTime>

000dbb18 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   dbb18:	b508      	push	{r3, lr}
	return hour(now());
   dbb1a:	f7ff fff6 	bl	dbb0a <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dbb1e:	f7ff ff89 	bl	dba34 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   dbb22:	4b01      	ldr	r3, [pc, #4]	; (dbb28 <_ZN9TimeClass4hourEv+0x10>)
   dbb24:	6898      	ldr	r0, [r3, #8]
   dbb26:	bd08      	pop	{r3, pc}
   dbb28:	2003e594 	.word	0x2003e594

000dbb2c <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   dbb2c:	b508      	push	{r3, lr}
	return minute(now());
   dbb2e:	f7ff ffec 	bl	dbb0a <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dbb32:	f7ff ff7f 	bl	dba34 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   dbb36:	4b01      	ldr	r3, [pc, #4]	; (dbb3c <_ZN9TimeClass6minuteEv+0x10>)
   dbb38:	6858      	ldr	r0, [r3, #4]
   dbb3a:	bd08      	pop	{r3, pc}
   dbb3c:	2003e594 	.word	0x2003e594

000dbb40 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   dbb40:	b508      	push	{r3, lr}
	return second(now());
   dbb42:	f7ff ffe2 	bl	dbb0a <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dbb46:	f7ff ff75 	bl	dba34 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   dbb4a:	4b01      	ldr	r3, [pc, #4]	; (dbb50 <_ZN9TimeClass6secondEv+0x10>)
   dbb4c:	6818      	ldr	r0, [r3, #0]
   dbb4e:	bd08      	pop	{r3, pc}
   dbb50:	2003e594 	.word	0x2003e594

000dbb54 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   dbb54:	b508      	push	{r3, lr}
	return day(now());
   dbb56:	f7ff ffd8 	bl	dbb0a <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dbb5a:	f7ff ff6b 	bl	dba34 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   dbb5e:	4b01      	ldr	r3, [pc, #4]	; (dbb64 <_ZN9TimeClass3dayEv+0x10>)
   dbb60:	68d8      	ldr	r0, [r3, #12]
   dbb62:	bd08      	pop	{r3, pc}
   dbb64:	2003e594 	.word	0x2003e594

000dbb68 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   dbb68:	b508      	push	{r3, lr}
	return month(now());
   dbb6a:	f7ff ffce 	bl	dbb0a <_ZN9TimeClass3nowEv>
}
   dbb6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   dbb72:	f7ff bf9f 	b.w	dbab4 <_ZN9TimeClass5monthEl>
	...

000dbb78 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   dbb78:	b508      	push	{r3, lr}
	return year(now());
   dbb7a:	f7ff ffc6 	bl	dbb0a <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dbb7e:	f7ff ff59 	bl	dba34 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   dbb82:	4b01      	ldr	r3, [pc, #4]	; (dbb88 <_ZN9TimeClass4yearEv+0x10>)
   dbb84:	6958      	ldr	r0, [r3, #20]
   dbb86:	bd08      	pop	{r3, pc}
   dbb88:	2003e594 	.word	0x2003e594

000dbb8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   dbb8c:	4b02      	ldr	r3, [pc, #8]	; (dbb98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   dbb8e:	681a      	ldr	r2, [r3, #0]
   dbb90:	4b02      	ldr	r3, [pc, #8]	; (dbb9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dbb92:	601a      	str	r2, [r3, #0]
   dbb94:	4770      	bx	lr
   dbb96:	bf00      	nop
   dbb98:	2003d364 	.word	0x2003d364
   dbb9c:	2003e5b8 	.word	0x2003e5b8

000dbba0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   dbba0:	4770      	bx	lr

000dbba2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dbba2:	7441      	strb	r1, [r0, #17]
   dbba4:	4770      	bx	lr

000dbba6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   dbba6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   dbba8:	7c00      	ldrb	r0, [r0, #16]
   dbbaa:	f7fc fa9d 	bl	d80e8 <HAL_USART_Available_Data_For_Write>
}
   dbbae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dbbb2:	bd08      	pop	{r3, pc}

000dbbb4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   dbbb4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   dbbb6:	7c00      	ldrb	r0, [r0, #16]
   dbbb8:	f7fc fa6e 	bl	d8098 <HAL_USART_Available_Data>
}
   dbbbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dbbc0:	bd08      	pop	{r3, pc}

000dbbc2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   dbbc2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   dbbc4:	7c00      	ldrb	r0, [r0, #16]
   dbbc6:	f7fc fa77 	bl	d80b8 <HAL_USART_Peek_Data>
}
   dbbca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dbbce:	bf28      	it	cs
   dbbd0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   dbbd4:	bd08      	pop	{r3, pc}

000dbbd6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   dbbd6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   dbbd8:	7c00      	ldrb	r0, [r0, #16]
   dbbda:	f7fc fa65 	bl	d80a8 <HAL_USART_Read_Data>
}
   dbbde:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dbbe2:	bf28      	it	cs
   dbbe4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   dbbe8:	bd08      	pop	{r3, pc}

000dbbea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   dbbea:	7c00      	ldrb	r0, [r0, #16]
   dbbec:	f7fc ba6c 	b.w	d80c8 <HAL_USART_Flush_Data>

000dbbf0 <_ZN11USARTSerialD0Ev>:
   dbbf0:	b510      	push	{r4, lr}
   dbbf2:	2114      	movs	r1, #20
   dbbf4:	4604      	mov	r4, r0
   dbbf6:	f000 fa18 	bl	dc02a <_ZdlPvj>
   dbbfa:	4620      	mov	r0, r4
   dbbfc:	bd10      	pop	{r4, pc}

000dbbfe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   dbbfe:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dbc00:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   dbc02:	4604      	mov	r4, r0
   dbc04:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dbc06:	b925      	cbnz	r5, dbc12 <_ZN11USARTSerial5writeEh+0x14>
   dbc08:	7c00      	ldrb	r0, [r0, #16]
   dbc0a:	f7fc fa6d 	bl	d80e8 <HAL_USART_Available_Data_For_Write>
   dbc0e:	2800      	cmp	r0, #0
   dbc10:	dd05      	ble.n	dbc1e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dbc12:	4631      	mov	r1, r6
   dbc14:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   dbc16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dbc1a:	f7fc ba35 	b.w	d8088 <HAL_USART_Write_Data>
  }
  return 0;
}
   dbc1e:	4628      	mov	r0, r5
   dbc20:	bd70      	pop	{r4, r5, r6, pc}
	...

000dbc24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   dbc24:	b510      	push	{r4, lr}
   dbc26:	4604      	mov	r4, r0
   dbc28:	4608      	mov	r0, r1
   dbc2a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dbc2c:	2200      	movs	r2, #0
   dbc2e:	6062      	str	r2, [r4, #4]
   dbc30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dbc34:	60a2      	str	r2, [r4, #8]
   dbc36:	4a05      	ldr	r2, [pc, #20]	; (dbc4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   dbc38:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   dbc3a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   dbc3c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   dbc3e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   dbc40:	461a      	mov	r2, r3
   dbc42:	f7fc fa11 	bl	d8068 <HAL_USART_Init>
}
   dbc46:	4620      	mov	r0, r4
   dbc48:	bd10      	pop	{r4, pc}
   dbc4a:	bf00      	nop
   dbc4c:	000dfea0 	.word	0x000dfea0

000dbc50 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   dbc50:	2300      	movs	r3, #0
   dbc52:	7c00      	ldrb	r0, [r0, #16]
   dbc54:	f7fc ba50 	b.w	d80f8 <HAL_USART_BeginConfig>

000dbc58 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   dbc58:	2200      	movs	r2, #0
   dbc5a:	f7ff bff9 	b.w	dbc50 <_ZN11USARTSerial5beginEmm>

000dbc5e <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   dbc5e:	7c00      	ldrb	r0, [r0, #16]
   dbc60:	f7fc ba0a 	b.w	d8078 <HAL_USART_End>

000dbc64 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   dbc64:	7c00      	ldrb	r0, [r0, #16]
   dbc66:	f7fc ba37 	b.w	d80d8 <HAL_USART_Is_Enabled>
	...

000dbc6c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   dbc6c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dbc6e:	4d0c      	ldr	r5, [pc, #48]	; (dbca0 <_Z22__fetch_global_Serial1v+0x34>)
   dbc70:	6829      	ldr	r1, [r5, #0]
   dbc72:	f011 0401 	ands.w	r4, r1, #1
   dbc76:	d111      	bne.n	dbc9c <_Z22__fetch_global_Serial1v+0x30>
   dbc78:	4628      	mov	r0, r5
   dbc7a:	f7f8 fa1f 	bl	d40bc <__cxa_guard_acquire>
   dbc7e:	b168      	cbz	r0, dbc9c <_Z22__fetch_global_Serial1v+0x30>
   dbc80:	4a08      	ldr	r2, [pc, #32]	; (dbca4 <_Z22__fetch_global_Serial1v+0x38>)
   dbc82:	4b09      	ldr	r3, [pc, #36]	; (dbca8 <_Z22__fetch_global_Serial1v+0x3c>)
   dbc84:	4809      	ldr	r0, [pc, #36]	; (dbcac <_Z22__fetch_global_Serial1v+0x40>)
   dbc86:	4621      	mov	r1, r4
   dbc88:	f7ff ffcc 	bl	dbc24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   dbc8c:	4628      	mov	r0, r5
   dbc8e:	f7f8 fa1a 	bl	d40c6 <__cxa_guard_release>
   dbc92:	4a07      	ldr	r2, [pc, #28]	; (dbcb0 <_Z22__fetch_global_Serial1v+0x44>)
   dbc94:	4907      	ldr	r1, [pc, #28]	; (dbcb4 <_Z22__fetch_global_Serial1v+0x48>)
   dbc96:	4805      	ldr	r0, [pc, #20]	; (dbcac <_Z22__fetch_global_Serial1v+0x40>)
   dbc98:	f000 f9c2 	bl	dc020 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dbc9c:	4803      	ldr	r0, [pc, #12]	; (dbcac <_Z22__fetch_global_Serial1v+0x40>)
   dbc9e:	bd38      	pop	{r3, r4, r5, pc}
   dbca0:	2003e660 	.word	0x2003e660
   dbca4:	2003e664 	.word	0x2003e664
   dbca8:	2003e5dc 	.word	0x2003e5dc
   dbcac:	2003e5c8 	.word	0x2003e5c8
   dbcb0:	2003d454 	.word	0x2003d454
   dbcb4:	000dbba1 	.word	0x000dbba1

000dbcb8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dbcb8:	7441      	strb	r1, [r0, #17]
   dbcba:	4770      	bx	lr

000dbcbc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dbcbc:	4770      	bx	lr

000dbcbe <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   dbcbe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dbcc0:	2100      	movs	r1, #0
   dbcc2:	7c00      	ldrb	r0, [r0, #16]
   dbcc4:	f7fc fa48 	bl	d8158 <HAL_USB_USART_Receive_Data>
}
   dbcc8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dbccc:	bf28      	it	cs
   dbcce:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   dbcd2:	bd08      	pop	{r3, pc}

000dbcd4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   dbcd4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dbcd6:	2101      	movs	r1, #1
   dbcd8:	7c00      	ldrb	r0, [r0, #16]
   dbcda:	f7fc fa3d 	bl	d8158 <HAL_USB_USART_Receive_Data>
}
   dbcde:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dbce2:	bf28      	it	cs
   dbce4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   dbce8:	bd08      	pop	{r3, pc}

000dbcea <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   dbcea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dbcec:	7c00      	ldrb	r0, [r0, #16]
   dbcee:	f7fc fa2b 	bl	d8148 <HAL_USB_USART_Available_Data_For_Write>
}
   dbcf2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dbcf6:	bd08      	pop	{r3, pc}

000dbcf8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   dbcf8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dbcfa:	7c00      	ldrb	r0, [r0, #16]
   dbcfc:	f7fc fa1c 	bl	d8138 <HAL_USB_USART_Available_Data>
}
   dbd00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dbd04:	bd08      	pop	{r3, pc}

000dbd06 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   dbd06:	7c00      	ldrb	r0, [r0, #16]
   dbd08:	f7fc ba36 	b.w	d8178 <HAL_USB_USART_Flush_Data>

000dbd0c <_ZN9USBSerialD0Ev>:
   dbd0c:	b510      	push	{r4, lr}
   dbd0e:	2114      	movs	r1, #20
   dbd10:	4604      	mov	r4, r0
   dbd12:	f000 f98a 	bl	dc02a <_ZdlPvj>
   dbd16:	4620      	mov	r0, r4
   dbd18:	bd10      	pop	{r4, pc}

000dbd1a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dbd1a:	b538      	push	{r3, r4, r5, lr}
   dbd1c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dbd1e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dbd20:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dbd22:	f7fc fa11 	bl	d8148 <HAL_USB_USART_Available_Data_For_Write>
   dbd26:	2800      	cmp	r0, #0
   dbd28:	dc01      	bgt.n	dbd2e <_ZN9USBSerial5writeEh+0x14>
   dbd2a:	7c60      	ldrb	r0, [r4, #17]
   dbd2c:	b128      	cbz	r0, dbd3a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dbd2e:	4629      	mov	r1, r5
   dbd30:	7c20      	ldrb	r0, [r4, #16]
   dbd32:	f7fc fa19 	bl	d8168 <HAL_USB_USART_Send_Data>
   dbd36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   dbd3a:	bd38      	pop	{r3, r4, r5, pc}

000dbd3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dbd3c:	b510      	push	{r4, lr}
   dbd3e:	4604      	mov	r4, r0
   dbd40:	2300      	movs	r3, #0
   dbd42:	6063      	str	r3, [r4, #4]
   dbd44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dbd48:	60a3      	str	r3, [r4, #8]
   dbd4a:	4b05      	ldr	r3, [pc, #20]	; (dbd60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dbd4c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   dbd4e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dbd50:	4608      	mov	r0, r1
{
  _serial = serial;
   dbd52:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   dbd54:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   dbd56:	4611      	mov	r1, r2
   dbd58:	f7fc f9d6 	bl	d8108 <HAL_USB_USART_Init>
}
   dbd5c:	4620      	mov	r0, r4
   dbd5e:	bd10      	pop	{r4, pc}
   dbd60:	000dfed0 	.word	0x000dfed0

000dbd64 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   dbd64:	2200      	movs	r2, #0
   dbd66:	7c00      	ldrb	r0, [r0, #16]
   dbd68:	f7fc b9d6 	b.w	d8118 <HAL_USB_USART_Begin>

000dbd6c <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   dbd6c:	7c00      	ldrb	r0, [r0, #16]
   dbd6e:	f7fc b9db 	b.w	d8128 <HAL_USB_USART_End>

000dbd72 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dbd72:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dbd74:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dbd76:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dbd78:	2100      	movs	r1, #0
   dbd7a:	f001 f8f8 	bl	dcf6e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   dbd7e:	4620      	mov	r0, r4
   dbd80:	bd10      	pop	{r4, pc}
	...

000dbd84 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   dbd84:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dbd86:	4d0e      	ldr	r5, [pc, #56]	; (dbdc0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   dbd88:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dbd8a:	a801      	add	r0, sp, #4
   dbd8c:	f7ff fff1 	bl	dbd72 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dbd90:	6829      	ldr	r1, [r5, #0]
   dbd92:	f011 0401 	ands.w	r4, r1, #1
   dbd96:	d110      	bne.n	dbdba <_Z16_fetch_usbserialv+0x36>
   dbd98:	4628      	mov	r0, r5
   dbd9a:	f7f8 f98f 	bl	d40bc <__cxa_guard_acquire>
   dbd9e:	b160      	cbz	r0, dbdba <_Z16_fetch_usbserialv+0x36>
   dbda0:	aa01      	add	r2, sp, #4
   dbda2:	4621      	mov	r1, r4
   dbda4:	4807      	ldr	r0, [pc, #28]	; (dbdc4 <_Z16_fetch_usbserialv+0x40>)
   dbda6:	f7ff ffc9 	bl	dbd3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dbdaa:	4628      	mov	r0, r5
   dbdac:	f7f8 f98b 	bl	d40c6 <__cxa_guard_release>
   dbdb0:	4a05      	ldr	r2, [pc, #20]	; (dbdc8 <_Z16_fetch_usbserialv+0x44>)
   dbdb2:	4906      	ldr	r1, [pc, #24]	; (dbdcc <_Z16_fetch_usbserialv+0x48>)
   dbdb4:	4803      	ldr	r0, [pc, #12]	; (dbdc4 <_Z16_fetch_usbserialv+0x40>)
   dbdb6:	f000 f933 	bl	dc020 <__aeabi_atexit>
	return _usbserial;
}
   dbdba:	4802      	ldr	r0, [pc, #8]	; (dbdc4 <_Z16_fetch_usbserialv+0x40>)
   dbdbc:	b007      	add	sp, #28
   dbdbe:	bd30      	pop	{r4, r5, pc}
   dbdc0:	2003e6e8 	.word	0x2003e6e8
   dbdc4:	2003e6ec 	.word	0x2003e6ec
   dbdc8:	2003d454 	.word	0x2003d454
   dbdcc:	000dbcbd 	.word	0x000dbcbd

000dbdd0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   dbdd0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dbdd2:	4b0c      	ldr	r3, [pc, #48]	; (dbe04 <serialEventRun+0x34>)
   dbdd4:	b133      	cbz	r3, dbde4 <serialEventRun+0x14>
   dbdd6:	f7ff ffd5 	bl	dbd84 <_Z16_fetch_usbserialv>
   dbdda:	6803      	ldr	r3, [r0, #0]
   dbddc:	691b      	ldr	r3, [r3, #16]
   dbdde:	4798      	blx	r3
   dbde0:	2800      	cmp	r0, #0
   dbde2:	dc09      	bgt.n	dbdf8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   dbde4:	4b08      	ldr	r3, [pc, #32]	; (dbe08 <serialEventRun+0x38>)
   dbde6:	b163      	cbz	r3, dbe02 <serialEventRun+0x32>
   dbde8:	f7ff ff40 	bl	dbc6c <_Z22__fetch_global_Serial1v>
   dbdec:	6803      	ldr	r3, [r0, #0]
   dbdee:	691b      	ldr	r3, [r3, #16]
   dbdf0:	4798      	blx	r3
   dbdf2:	2800      	cmp	r0, #0
   dbdf4:	dc03      	bgt.n	dbdfe <serialEventRun+0x2e>
   dbdf6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   dbdf8:	f3af 8000 	nop.w
   dbdfc:	e7f2      	b.n	dbde4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   dbdfe:	f3af 8000 	nop.w
   dbe02:	bd08      	pop	{r3, pc}
	...

000dbe0c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   dbe0c:	b508      	push	{r3, lr}
	serialEventRun();
   dbe0e:	f7ff ffdf 	bl	dbdd0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dbe12:	f7fc f819 	bl	d7e48 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dbe16:	4b01      	ldr	r3, [pc, #4]	; (dbe1c <_post_loop+0x10>)
   dbe18:	6018      	str	r0, [r3, #0]
   dbe1a:	bd08      	pop	{r3, pc}
   dbe1c:	2003e708 	.word	0x2003e708

000dbe20 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dbe20:	4802      	ldr	r0, [pc, #8]	; (dbe2c <_Z33system_initialize_user_backup_ramv+0xc>)
   dbe22:	4a03      	ldr	r2, [pc, #12]	; (dbe30 <_Z33system_initialize_user_backup_ramv+0x10>)
   dbe24:	4903      	ldr	r1, [pc, #12]	; (dbe34 <_Z33system_initialize_user_backup_ramv+0x14>)
   dbe26:	1a12      	subs	r2, r2, r0
   dbe28:	f001 b87b 	b.w	dcf22 <memcpy>
   dbe2c:	2003f400 	.word	0x2003f400
   dbe30:	2003f404 	.word	0x2003f404
   dbe34:	000e02e0 	.word	0x000e02e0

000dbe38 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dbe38:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dbe3a:	2300      	movs	r3, #0
   dbe3c:	9300      	str	r3, [sp, #0]
   dbe3e:	461a      	mov	r2, r3
   dbe40:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dbe44:	f7fc fa0c 	bl	d8260 <system_ctrl_set_result>
}
   dbe48:	b003      	add	sp, #12
   dbe4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dbe50 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   dbe50:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dbe52:	8843      	ldrh	r3, [r0, #2]
   dbe54:	2b0a      	cmp	r3, #10
   dbe56:	d008      	beq.n	dbe6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dbe58:	2b50      	cmp	r3, #80	; 0x50
   dbe5a:	d109      	bne.n	dbe70 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   dbe5c:	4b09      	ldr	r3, [pc, #36]	; (dbe84 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dbe5e:	681b      	ldr	r3, [r3, #0]
   dbe60:	b13b      	cbz	r3, dbe72 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   dbe62:	b003      	add	sp, #12
   dbe64:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   dbe68:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   dbe6a:	f7ff ffe5 	bl	dbe38 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   dbe6e:	e006      	b.n	dbe7e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dbe70:	2300      	movs	r3, #0
   dbe72:	9300      	str	r3, [sp, #0]
   dbe74:	461a      	mov	r2, r3
   dbe76:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dbe7a:	f7fc f9f1 	bl	d8260 <system_ctrl_set_result>
        break;
    }
}
   dbe7e:	b003      	add	sp, #12
   dbe80:	f85d fb04 	ldr.w	pc, [sp], #4
   dbe84:	2003e700 	.word	0x2003e700

000dbe88 <module_user_init_hook>:

void module_user_init_hook()
{
   dbe88:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   dbe8a:	4c10      	ldr	r4, [pc, #64]	; (dbecc <module_user_init_hook+0x44>)
   dbe8c:	4d10      	ldr	r5, [pc, #64]	; (dbed0 <module_user_init_hook+0x48>)
   dbe8e:	6823      	ldr	r3, [r4, #0]
   dbe90:	42ab      	cmp	r3, r5
   dbe92:	4b10      	ldr	r3, [pc, #64]	; (dbed4 <module_user_init_hook+0x4c>)
   dbe94:	bf0c      	ite	eq
   dbe96:	2201      	moveq	r2, #1
   dbe98:	2200      	movne	r2, #0
   dbe9a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dbe9c:	d002      	beq.n	dbea4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   dbe9e:	f7ff ffbf 	bl	dbe20 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   dbea2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dbea4:	f7fb ffb8 	bl	d7e18 <HAL_RNG_GetRandomNumber>
   dbea8:	4604      	mov	r4, r0
    srand(seed);
   dbeaa:	f001 f869 	bl	dcf80 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dbeae:	4b0a      	ldr	r3, [pc, #40]	; (dbed8 <module_user_init_hook+0x50>)
   dbeb0:	b113      	cbz	r3, dbeb8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   dbeb2:	4620      	mov	r0, r4
   dbeb4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dbeb8:	2100      	movs	r1, #0
   dbeba:	4807      	ldr	r0, [pc, #28]	; (dbed8 <module_user_init_hook+0x50>)
   dbebc:	f7fc fa02 	bl	d82c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dbec0:	2100      	movs	r1, #0
   dbec2:	4806      	ldr	r0, [pc, #24]	; (dbedc <module_user_init_hook+0x54>)
}
   dbec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dbec8:	f7fc b9c0 	b.w	d824c <system_ctrl_set_app_request_handler>
   dbecc:	2003f400 	.word	0x2003f400
   dbed0:	9a271c1e 	.word	0x9a271c1e
   dbed4:	2003e704 	.word	0x2003e704
   dbed8:	00000000 	.word	0x00000000
   dbedc:	000dbe51 	.word	0x000dbe51

000dbee0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   dbee0:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   dbee2:	4e18      	ldr	r6, [pc, #96]	; (dbf44 <pinAvailable+0x64>)
   dbee4:	6831      	ldr	r1, [r6, #0]
   dbee6:	f011 0501 	ands.w	r5, r1, #1
   dbeea:	4604      	mov	r4, r0
   dbeec:	d10a      	bne.n	dbf04 <pinAvailable+0x24>
   dbeee:	4630      	mov	r0, r6
   dbef0:	f7f8 f8e4 	bl	d40bc <__cxa_guard_acquire>
   dbef4:	b130      	cbz	r0, dbf04 <pinAvailable+0x24>
   dbef6:	4629      	mov	r1, r5
   dbef8:	4813      	ldr	r0, [pc, #76]	; (dbf48 <pinAvailable+0x68>)
   dbefa:	f7ff fb6f 	bl	db5dc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   dbefe:	4630      	mov	r0, r6
   dbf00:	f7f8 f8e1 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   dbf04:	4810      	ldr	r0, [pc, #64]	; (dbf48 <pinAvailable+0x68>)
   dbf06:	f7ff fc6c 	bl	db7e2 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   dbf0a:	b128      	cbz	r0, dbf18 <pinAvailable+0x38>
   dbf0c:	f1a4 030b 	sub.w	r3, r4, #11
   dbf10:	2b02      	cmp	r3, #2
   dbf12:	d801      	bhi.n	dbf18 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   dbf14:	2000      	movs	r0, #0
   dbf16:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   dbf18:	f000 f85c 	bl	dbfd4 <_Z19__fetch_global_Wirev>
   dbf1c:	f7fd ff33 	bl	d9d86 <_ZN7TwoWire9isEnabledEv>
   dbf20:	b108      	cbz	r0, dbf26 <pinAvailable+0x46>
   dbf22:	2c01      	cmp	r4, #1
   dbf24:	d9f6      	bls.n	dbf14 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   dbf26:	f7ff fea1 	bl	dbc6c <_Z22__fetch_global_Serial1v>
   dbf2a:	f7ff fe9b 	bl	dbc64 <_ZN11USARTSerial9isEnabledEv>
   dbf2e:	b118      	cbz	r0, dbf38 <pinAvailable+0x58>
   dbf30:	f1a4 0309 	sub.w	r3, r4, #9
   dbf34:	2b01      	cmp	r3, #1
   dbf36:	d9ed      	bls.n	dbf14 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   dbf38:	2c25      	cmp	r4, #37	; 0x25
   dbf3a:	bf8c      	ite	hi
   dbf3c:	2000      	movhi	r0, #0
   dbf3e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   dbf40:	bd70      	pop	{r4, r5, r6, pc}
   dbf42:	bf00      	nop
   dbf44:	2003d464 	.word	0x2003d464
   dbf48:	2003d468 	.word	0x2003d468

000dbf4c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dbf4c:	2825      	cmp	r0, #37	; 0x25
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   dbf4e:	b538      	push	{r3, r4, r5, lr}
   dbf50:	4604      	mov	r4, r0
   dbf52:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dbf54:	d80a      	bhi.n	dbf6c <pinMode+0x20>
   dbf56:	29ff      	cmp	r1, #255	; 0xff
   dbf58:	d008      	beq.n	dbf6c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dbf5a:	f7ff ffc1 	bl	dbee0 <pinAvailable>
   dbf5e:	b128      	cbz	r0, dbf6c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dbf60:	4629      	mov	r1, r5
   dbf62:	4620      	mov	r0, r4
}
   dbf64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dbf68:	f7fb bf8e 	b.w	d7e88 <HAL_Pin_Mode>
   dbf6c:	bd38      	pop	{r3, r4, r5, pc}

000dbf6e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dbf6e:	b538      	push	{r3, r4, r5, lr}
   dbf70:	4604      	mov	r4, r0
   dbf72:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dbf74:	f7fb ff90 	bl	d7e98 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dbf78:	28ff      	cmp	r0, #255	; 0xff
   dbf7a:	d010      	beq.n	dbf9e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   dbf7c:	2806      	cmp	r0, #6
   dbf7e:	d804      	bhi.n	dbf8a <digitalWrite+0x1c>
   dbf80:	234d      	movs	r3, #77	; 0x4d
   dbf82:	fa23 f000 	lsr.w	r0, r3, r0
   dbf86:	07c3      	lsls	r3, r0, #31
   dbf88:	d409      	bmi.n	dbf9e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dbf8a:	4620      	mov	r0, r4
   dbf8c:	f7ff ffa8 	bl	dbee0 <pinAvailable>
   dbf90:	b128      	cbz	r0, dbf9e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dbf92:	4629      	mov	r1, r5
   dbf94:	4620      	mov	r0, r4
}
   dbf96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   dbf9a:	f7fb bf85 	b.w	d7ea8 <HAL_GPIO_Write>
   dbf9e:	bd38      	pop	{r3, r4, r5, pc}

000dbfa0 <_Z17acquireWireBufferv>:
   dbfa0:	b570      	push	{r4, r5, r6, lr}
   dbfa2:	4604      	mov	r4, r0
   dbfa4:	2514      	movs	r5, #20
   dbfa6:	462a      	mov	r2, r5
   dbfa8:	4e09      	ldr	r6, [pc, #36]	; (dbfd0 <_Z17acquireWireBufferv+0x30>)
   dbfaa:	2100      	movs	r1, #0
   dbfac:	f000 ffdf 	bl	dcf6e <memset>
   dbfb0:	8025      	strh	r5, [r4, #0]
   dbfb2:	2520      	movs	r5, #32
   dbfb4:	4631      	mov	r1, r6
   dbfb6:	60a5      	str	r5, [r4, #8]
   dbfb8:	6125      	str	r5, [r4, #16]
   dbfba:	4628      	mov	r0, r5
   dbfbc:	f000 f84f 	bl	dc05e <_ZnajRKSt9nothrow_t>
   dbfc0:	4631      	mov	r1, r6
   dbfc2:	6060      	str	r0, [r4, #4]
   dbfc4:	4628      	mov	r0, r5
   dbfc6:	f000 f84a 	bl	dc05e <_ZnajRKSt9nothrow_t>
   dbfca:	60e0      	str	r0, [r4, #12]
   dbfcc:	4620      	mov	r0, r4
   dbfce:	bd70      	pop	{r4, r5, r6, pc}
   dbfd0:	000dfef8 	.word	0x000dfef8

000dbfd4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   dbfd4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dbfd6:	4d0e      	ldr	r5, [pc, #56]	; (dc010 <_Z19__fetch_global_Wirev+0x3c>)
   dbfd8:	6829      	ldr	r1, [r5, #0]
   dbfda:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   dbfde:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dbfe0:	d113      	bne.n	dc00a <_Z19__fetch_global_Wirev+0x36>
   dbfe2:	4628      	mov	r0, r5
   dbfe4:	f7f8 f86a 	bl	d40bc <__cxa_guard_acquire>
   dbfe8:	b178      	cbz	r0, dc00a <_Z19__fetch_global_Wirev+0x36>
   dbfea:	a801      	add	r0, sp, #4
   dbfec:	f7ff ffd8 	bl	dbfa0 <_Z17acquireWireBufferv>
   dbff0:	aa01      	add	r2, sp, #4
   dbff2:	4621      	mov	r1, r4
   dbff4:	4807      	ldr	r0, [pc, #28]	; (dc014 <_Z19__fetch_global_Wirev+0x40>)
   dbff6:	f7fd fe6b 	bl	d9cd0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   dbffa:	4628      	mov	r0, r5
   dbffc:	f7f8 f863 	bl	d40c6 <__cxa_guard_release>
   dc000:	4a05      	ldr	r2, [pc, #20]	; (dc018 <_Z19__fetch_global_Wirev+0x44>)
   dc002:	4906      	ldr	r1, [pc, #24]	; (dc01c <_Z19__fetch_global_Wirev+0x48>)
   dc004:	4803      	ldr	r0, [pc, #12]	; (dc014 <_Z19__fetch_global_Wirev+0x40>)
   dc006:	f000 f80b 	bl	dc020 <__aeabi_atexit>
	return wire;
}
   dc00a:	4802      	ldr	r0, [pc, #8]	; (dc014 <_Z19__fetch_global_Wirev+0x40>)
   dc00c:	b007      	add	sp, #28
   dc00e:	bd30      	pop	{r4, r5, pc}
   dc010:	2003e70c 	.word	0x2003e70c
   dc014:	2003e710 	.word	0x2003e710
   dc018:	2003d454 	.word	0x2003d454
   dc01c:	000d9c79 	.word	0x000d9c79

000dc020 <__aeabi_atexit>:
   dc020:	460b      	mov	r3, r1
   dc022:	4601      	mov	r1, r0
   dc024:	4618      	mov	r0, r3
   dc026:	f000 be59 	b.w	dccdc <__cxa_atexit>

000dc02a <_ZdlPvj>:
   dc02a:	f7f8 b838 	b.w	d409e <_ZdlPv>
	...

000dc030 <_ZSt15get_new_handlerv>:
   dc030:	4b02      	ldr	r3, [pc, #8]	; (dc03c <_ZSt15get_new_handlerv+0xc>)
   dc032:	6818      	ldr	r0, [r3, #0]
   dc034:	f3bf 8f5f 	dmb	sy
   dc038:	4770      	bx	lr
   dc03a:	bf00      	nop
   dc03c:	2003e724 	.word	0x2003e724

000dc040 <_ZnwjRKSt9nothrow_t>:
   dc040:	b510      	push	{r4, lr}
   dc042:	2800      	cmp	r0, #0
   dc044:	bf14      	ite	ne
   dc046:	4604      	movne	r4, r0
   dc048:	2401      	moveq	r4, #1
   dc04a:	4620      	mov	r0, r4
   dc04c:	f7fc f992 	bl	d8374 <malloc>
   dc050:	b920      	cbnz	r0, dc05c <_ZnwjRKSt9nothrow_t+0x1c>
   dc052:	f7ff ffed 	bl	dc030 <_ZSt15get_new_handlerv>
   dc056:	b108      	cbz	r0, dc05c <_ZnwjRKSt9nothrow_t+0x1c>
   dc058:	4780      	blx	r0
   dc05a:	e7f6      	b.n	dc04a <_ZnwjRKSt9nothrow_t+0xa>
   dc05c:	bd10      	pop	{r4, pc}

000dc05e <_ZnajRKSt9nothrow_t>:
   dc05e:	f7ff bfef 	b.w	dc040 <_ZnwjRKSt9nothrow_t>

000dc062 <_ZSt25__throw_bad_function_callv>:
   dc062:	b508      	push	{r3, lr}
   dc064:	f7fc f9be 	bl	d83e4 <abort>

000dc068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dc068:	4b24      	ldr	r3, [pc, #144]	; (dc0fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dc06a:	681a      	ldr	r2, [r3, #0]
   dc06c:	07d0      	lsls	r0, r2, #31
   dc06e:	bf5c      	itt	pl
   dc070:	2201      	movpl	r2, #1
   dc072:	601a      	strpl	r2, [r3, #0]
   dc074:	4b22      	ldr	r3, [pc, #136]	; (dc100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dc076:	681a      	ldr	r2, [r3, #0]
   dc078:	07d1      	lsls	r1, r2, #31
   dc07a:	bf5c      	itt	pl
   dc07c:	2201      	movpl	r2, #1
   dc07e:	601a      	strpl	r2, [r3, #0]
   dc080:	4b20      	ldr	r3, [pc, #128]	; (dc104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dc082:	681a      	ldr	r2, [r3, #0]
   dc084:	07d2      	lsls	r2, r2, #31
   dc086:	bf5c      	itt	pl
   dc088:	2201      	movpl	r2, #1
   dc08a:	601a      	strpl	r2, [r3, #0]
   dc08c:	4b1e      	ldr	r3, [pc, #120]	; (dc108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dc08e:	681a      	ldr	r2, [r3, #0]
   dc090:	07d0      	lsls	r0, r2, #31
   dc092:	bf5c      	itt	pl
   dc094:	2201      	movpl	r2, #1
   dc096:	601a      	strpl	r2, [r3, #0]
   dc098:	4b1c      	ldr	r3, [pc, #112]	; (dc10c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   dc09a:	681a      	ldr	r2, [r3, #0]
   dc09c:	07d1      	lsls	r1, r2, #31
   dc09e:	bf5c      	itt	pl
   dc0a0:	2201      	movpl	r2, #1
   dc0a2:	601a      	strpl	r2, [r3, #0]
   dc0a4:	4b1a      	ldr	r3, [pc, #104]	; (dc110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dc0a6:	681a      	ldr	r2, [r3, #0]
   dc0a8:	07d2      	lsls	r2, r2, #31
   dc0aa:	bf5c      	itt	pl
   dc0ac:	2201      	movpl	r2, #1
   dc0ae:	601a      	strpl	r2, [r3, #0]
   dc0b0:	4b18      	ldr	r3, [pc, #96]	; (dc114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dc0b2:	681a      	ldr	r2, [r3, #0]
   dc0b4:	07d0      	lsls	r0, r2, #31
   dc0b6:	bf5c      	itt	pl
   dc0b8:	2201      	movpl	r2, #1
   dc0ba:	601a      	strpl	r2, [r3, #0]
   dc0bc:	4b16      	ldr	r3, [pc, #88]	; (dc118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dc0be:	681a      	ldr	r2, [r3, #0]
   dc0c0:	07d1      	lsls	r1, r2, #31
   dc0c2:	bf5c      	itt	pl
   dc0c4:	2201      	movpl	r2, #1
   dc0c6:	601a      	strpl	r2, [r3, #0]
   dc0c8:	4b14      	ldr	r3, [pc, #80]	; (dc11c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dc0ca:	681a      	ldr	r2, [r3, #0]
   dc0cc:	07d2      	lsls	r2, r2, #31
   dc0ce:	bf5c      	itt	pl
   dc0d0:	2201      	movpl	r2, #1
   dc0d2:	601a      	strpl	r2, [r3, #0]
   dc0d4:	4b12      	ldr	r3, [pc, #72]	; (dc120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dc0d6:	681a      	ldr	r2, [r3, #0]
   dc0d8:	07d0      	lsls	r0, r2, #31
   dc0da:	bf5c      	itt	pl
   dc0dc:	2201      	movpl	r2, #1
   dc0de:	601a      	strpl	r2, [r3, #0]
   dc0e0:	4b10      	ldr	r3, [pc, #64]	; (dc124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dc0e2:	681a      	ldr	r2, [r3, #0]
   dc0e4:	07d1      	lsls	r1, r2, #31
   dc0e6:	bf5c      	itt	pl
   dc0e8:	2201      	movpl	r2, #1
   dc0ea:	601a      	strpl	r2, [r3, #0]
   dc0ec:	4b0e      	ldr	r3, [pc, #56]	; (dc128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dc0ee:	681a      	ldr	r2, [r3, #0]
   dc0f0:	07d2      	lsls	r2, r2, #31
   dc0f2:	bf5c      	itt	pl
   dc0f4:	2201      	movpl	r2, #1
   dc0f6:	601a      	strpl	r2, [r3, #0]
   dc0f8:	4770      	bx	lr
   dc0fa:	bf00      	nop
   dc0fc:	2003e754 	.word	0x2003e754
   dc100:	2003e750 	.word	0x2003e750
   dc104:	2003e74c 	.word	0x2003e74c
   dc108:	2003e748 	.word	0x2003e748
   dc10c:	2003e744 	.word	0x2003e744
   dc110:	2003e740 	.word	0x2003e740
   dc114:	2003e73c 	.word	0x2003e73c
   dc118:	2003e738 	.word	0x2003e738
   dc11c:	2003e734 	.word	0x2003e734
   dc120:	2003e730 	.word	0x2003e730
   dc124:	2003e72c 	.word	0x2003e72c
   dc128:	2003e728 	.word	0x2003e728

000dc12c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dc12c:	4b18      	ldr	r3, [pc, #96]	; (dc190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dc12e:	681a      	ldr	r2, [r3, #0]
   dc130:	07d1      	lsls	r1, r2, #31
   dc132:	bf5c      	itt	pl
   dc134:	2201      	movpl	r2, #1
   dc136:	601a      	strpl	r2, [r3, #0]
   dc138:	4b16      	ldr	r3, [pc, #88]	; (dc194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dc13a:	681a      	ldr	r2, [r3, #0]
   dc13c:	07d2      	lsls	r2, r2, #31
   dc13e:	bf5c      	itt	pl
   dc140:	2201      	movpl	r2, #1
   dc142:	601a      	strpl	r2, [r3, #0]
   dc144:	4b14      	ldr	r3, [pc, #80]	; (dc198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dc146:	681a      	ldr	r2, [r3, #0]
   dc148:	07d0      	lsls	r0, r2, #31
   dc14a:	bf5c      	itt	pl
   dc14c:	2201      	movpl	r2, #1
   dc14e:	601a      	strpl	r2, [r3, #0]
   dc150:	4b12      	ldr	r3, [pc, #72]	; (dc19c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dc152:	681a      	ldr	r2, [r3, #0]
   dc154:	07d1      	lsls	r1, r2, #31
   dc156:	bf5c      	itt	pl
   dc158:	2201      	movpl	r2, #1
   dc15a:	601a      	strpl	r2, [r3, #0]
   dc15c:	4b10      	ldr	r3, [pc, #64]	; (dc1a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dc15e:	681a      	ldr	r2, [r3, #0]
   dc160:	07d2      	lsls	r2, r2, #31
   dc162:	bf5c      	itt	pl
   dc164:	2201      	movpl	r2, #1
   dc166:	601a      	strpl	r2, [r3, #0]
   dc168:	4b0e      	ldr	r3, [pc, #56]	; (dc1a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dc16a:	681a      	ldr	r2, [r3, #0]
   dc16c:	07d0      	lsls	r0, r2, #31
   dc16e:	bf5c      	itt	pl
   dc170:	2201      	movpl	r2, #1
   dc172:	601a      	strpl	r2, [r3, #0]
   dc174:	4b0c      	ldr	r3, [pc, #48]	; (dc1a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dc176:	681a      	ldr	r2, [r3, #0]
   dc178:	07d1      	lsls	r1, r2, #31
   dc17a:	bf5c      	itt	pl
   dc17c:	2201      	movpl	r2, #1
   dc17e:	601a      	strpl	r2, [r3, #0]
   dc180:	4b0a      	ldr	r3, [pc, #40]	; (dc1ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dc182:	681a      	ldr	r2, [r3, #0]
   dc184:	07d2      	lsls	r2, r2, #31
   dc186:	bf5c      	itt	pl
   dc188:	2201      	movpl	r2, #1
   dc18a:	601a      	strpl	r2, [r3, #0]
   dc18c:	4770      	bx	lr
   dc18e:	bf00      	nop
   dc190:	2003e774 	.word	0x2003e774
   dc194:	2003e770 	.word	0x2003e770
   dc198:	2003e76c 	.word	0x2003e76c
   dc19c:	2003e768 	.word	0x2003e768
   dc1a0:	2003e764 	.word	0x2003e764
   dc1a4:	2003e760 	.word	0x2003e760
   dc1a8:	2003e75c 	.word	0x2003e75c
   dc1ac:	2003e758 	.word	0x2003e758

000dc1b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dc1b0:	4b18      	ldr	r3, [pc, #96]	; (dc214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dc1b2:	681a      	ldr	r2, [r3, #0]
   dc1b4:	07d1      	lsls	r1, r2, #31
   dc1b6:	bf5c      	itt	pl
   dc1b8:	2201      	movpl	r2, #1
   dc1ba:	601a      	strpl	r2, [r3, #0]
   dc1bc:	4b16      	ldr	r3, [pc, #88]	; (dc218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dc1be:	681a      	ldr	r2, [r3, #0]
   dc1c0:	07d2      	lsls	r2, r2, #31
   dc1c2:	bf5c      	itt	pl
   dc1c4:	2201      	movpl	r2, #1
   dc1c6:	601a      	strpl	r2, [r3, #0]
   dc1c8:	4b14      	ldr	r3, [pc, #80]	; (dc21c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dc1ca:	681a      	ldr	r2, [r3, #0]
   dc1cc:	07d0      	lsls	r0, r2, #31
   dc1ce:	bf5c      	itt	pl
   dc1d0:	2201      	movpl	r2, #1
   dc1d2:	601a      	strpl	r2, [r3, #0]
   dc1d4:	4b12      	ldr	r3, [pc, #72]	; (dc220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dc1d6:	681a      	ldr	r2, [r3, #0]
   dc1d8:	07d1      	lsls	r1, r2, #31
   dc1da:	bf5c      	itt	pl
   dc1dc:	2201      	movpl	r2, #1
   dc1de:	601a      	strpl	r2, [r3, #0]
   dc1e0:	4b10      	ldr	r3, [pc, #64]	; (dc224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dc1e2:	681a      	ldr	r2, [r3, #0]
   dc1e4:	07d2      	lsls	r2, r2, #31
   dc1e6:	bf5c      	itt	pl
   dc1e8:	2201      	movpl	r2, #1
   dc1ea:	601a      	strpl	r2, [r3, #0]
   dc1ec:	4b0e      	ldr	r3, [pc, #56]	; (dc228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dc1ee:	681a      	ldr	r2, [r3, #0]
   dc1f0:	07d0      	lsls	r0, r2, #31
   dc1f2:	bf5c      	itt	pl
   dc1f4:	2201      	movpl	r2, #1
   dc1f6:	601a      	strpl	r2, [r3, #0]
   dc1f8:	4b0c      	ldr	r3, [pc, #48]	; (dc22c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dc1fa:	681a      	ldr	r2, [r3, #0]
   dc1fc:	07d1      	lsls	r1, r2, #31
   dc1fe:	bf5c      	itt	pl
   dc200:	2201      	movpl	r2, #1
   dc202:	601a      	strpl	r2, [r3, #0]
   dc204:	4b0a      	ldr	r3, [pc, #40]	; (dc230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dc206:	681a      	ldr	r2, [r3, #0]
   dc208:	07d2      	lsls	r2, r2, #31
   dc20a:	bf5c      	itt	pl
   dc20c:	2201      	movpl	r2, #1
   dc20e:	601a      	strpl	r2, [r3, #0]
   dc210:	4770      	bx	lr
   dc212:	bf00      	nop
   dc214:	2003e794 	.word	0x2003e794
   dc218:	2003e790 	.word	0x2003e790
   dc21c:	2003e78c 	.word	0x2003e78c
   dc220:	2003e788 	.word	0x2003e788
   dc224:	2003e784 	.word	0x2003e784
   dc228:	2003e780 	.word	0x2003e780
   dc22c:	2003e77c 	.word	0x2003e77c
   dc230:	2003e778 	.word	0x2003e778

000dc234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dc234:	4b24      	ldr	r3, [pc, #144]	; (dc2c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dc236:	681a      	ldr	r2, [r3, #0]
   dc238:	07d0      	lsls	r0, r2, #31
   dc23a:	bf5c      	itt	pl
   dc23c:	2201      	movpl	r2, #1
   dc23e:	601a      	strpl	r2, [r3, #0]
   dc240:	4b22      	ldr	r3, [pc, #136]	; (dc2cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   dc242:	681a      	ldr	r2, [r3, #0]
   dc244:	07d1      	lsls	r1, r2, #31
   dc246:	bf5c      	itt	pl
   dc248:	2201      	movpl	r2, #1
   dc24a:	601a      	strpl	r2, [r3, #0]
   dc24c:	4b20      	ldr	r3, [pc, #128]	; (dc2d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   dc24e:	681a      	ldr	r2, [r3, #0]
   dc250:	07d2      	lsls	r2, r2, #31
   dc252:	bf5c      	itt	pl
   dc254:	2201      	movpl	r2, #1
   dc256:	601a      	strpl	r2, [r3, #0]
   dc258:	4b1e      	ldr	r3, [pc, #120]	; (dc2d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   dc25a:	681a      	ldr	r2, [r3, #0]
   dc25c:	07d0      	lsls	r0, r2, #31
   dc25e:	bf5c      	itt	pl
   dc260:	2201      	movpl	r2, #1
   dc262:	601a      	strpl	r2, [r3, #0]
   dc264:	4b1c      	ldr	r3, [pc, #112]	; (dc2d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   dc266:	681a      	ldr	r2, [r3, #0]
   dc268:	07d1      	lsls	r1, r2, #31
   dc26a:	bf5c      	itt	pl
   dc26c:	2201      	movpl	r2, #1
   dc26e:	601a      	strpl	r2, [r3, #0]
   dc270:	4b1a      	ldr	r3, [pc, #104]	; (dc2dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   dc272:	681a      	ldr	r2, [r3, #0]
   dc274:	07d2      	lsls	r2, r2, #31
   dc276:	bf5c      	itt	pl
   dc278:	2201      	movpl	r2, #1
   dc27a:	601a      	strpl	r2, [r3, #0]
   dc27c:	4b18      	ldr	r3, [pc, #96]	; (dc2e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   dc27e:	681a      	ldr	r2, [r3, #0]
   dc280:	07d0      	lsls	r0, r2, #31
   dc282:	bf5c      	itt	pl
   dc284:	2201      	movpl	r2, #1
   dc286:	601a      	strpl	r2, [r3, #0]
   dc288:	4b16      	ldr	r3, [pc, #88]	; (dc2e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   dc28a:	681a      	ldr	r2, [r3, #0]
   dc28c:	07d1      	lsls	r1, r2, #31
   dc28e:	bf5c      	itt	pl
   dc290:	2201      	movpl	r2, #1
   dc292:	601a      	strpl	r2, [r3, #0]
   dc294:	4b14      	ldr	r3, [pc, #80]	; (dc2e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   dc296:	681a      	ldr	r2, [r3, #0]
   dc298:	07d2      	lsls	r2, r2, #31
   dc29a:	bf5c      	itt	pl
   dc29c:	2201      	movpl	r2, #1
   dc29e:	601a      	strpl	r2, [r3, #0]
   dc2a0:	4b12      	ldr	r3, [pc, #72]	; (dc2ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   dc2a2:	681a      	ldr	r2, [r3, #0]
   dc2a4:	07d0      	lsls	r0, r2, #31
   dc2a6:	bf5c      	itt	pl
   dc2a8:	2201      	movpl	r2, #1
   dc2aa:	601a      	strpl	r2, [r3, #0]
   dc2ac:	4b10      	ldr	r3, [pc, #64]	; (dc2f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   dc2ae:	681a      	ldr	r2, [r3, #0]
   dc2b0:	07d1      	lsls	r1, r2, #31
   dc2b2:	bf5c      	itt	pl
   dc2b4:	2201      	movpl	r2, #1
   dc2b6:	601a      	strpl	r2, [r3, #0]
   dc2b8:	4b0e      	ldr	r3, [pc, #56]	; (dc2f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   dc2ba:	681a      	ldr	r2, [r3, #0]
   dc2bc:	07d2      	lsls	r2, r2, #31
   dc2be:	bf5c      	itt	pl
   dc2c0:	2201      	movpl	r2, #1
   dc2c2:	601a      	strpl	r2, [r3, #0]
   dc2c4:	4770      	bx	lr
   dc2c6:	bf00      	nop
   dc2c8:	2003e7c4 	.word	0x2003e7c4
   dc2cc:	2003e7c0 	.word	0x2003e7c0
   dc2d0:	2003e7bc 	.word	0x2003e7bc
   dc2d4:	2003e7b8 	.word	0x2003e7b8
   dc2d8:	2003e7b4 	.word	0x2003e7b4
   dc2dc:	2003e7b0 	.word	0x2003e7b0
   dc2e0:	2003e7ac 	.word	0x2003e7ac
   dc2e4:	2003e7a8 	.word	0x2003e7a8
   dc2e8:	2003e7a4 	.word	0x2003e7a4
   dc2ec:	2003e7a0 	.word	0x2003e7a0
   dc2f0:	2003e79c 	.word	0x2003e79c
   dc2f4:	2003e798 	.word	0x2003e798

000dc2f8 <__aeabi_drsub>:
   dc2f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dc2fc:	e002      	b.n	dc304 <__adddf3>
   dc2fe:	bf00      	nop

000dc300 <__aeabi_dsub>:
   dc300:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dc304 <__adddf3>:
   dc304:	b530      	push	{r4, r5, lr}
   dc306:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dc30a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dc30e:	ea94 0f05 	teq	r4, r5
   dc312:	bf08      	it	eq
   dc314:	ea90 0f02 	teqeq	r0, r2
   dc318:	bf1f      	itttt	ne
   dc31a:	ea54 0c00 	orrsne.w	ip, r4, r0
   dc31e:	ea55 0c02 	orrsne.w	ip, r5, r2
   dc322:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dc326:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc32a:	f000 80e2 	beq.w	dc4f2 <__adddf3+0x1ee>
   dc32e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dc332:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dc336:	bfb8      	it	lt
   dc338:	426d      	neglt	r5, r5
   dc33a:	dd0c      	ble.n	dc356 <__adddf3+0x52>
   dc33c:	442c      	add	r4, r5
   dc33e:	ea80 0202 	eor.w	r2, r0, r2
   dc342:	ea81 0303 	eor.w	r3, r1, r3
   dc346:	ea82 0000 	eor.w	r0, r2, r0
   dc34a:	ea83 0101 	eor.w	r1, r3, r1
   dc34e:	ea80 0202 	eor.w	r2, r0, r2
   dc352:	ea81 0303 	eor.w	r3, r1, r3
   dc356:	2d36      	cmp	r5, #54	; 0x36
   dc358:	bf88      	it	hi
   dc35a:	bd30      	pophi	{r4, r5, pc}
   dc35c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc360:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc364:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dc368:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dc36c:	d002      	beq.n	dc374 <__adddf3+0x70>
   dc36e:	4240      	negs	r0, r0
   dc370:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc374:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dc378:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc37c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dc380:	d002      	beq.n	dc388 <__adddf3+0x84>
   dc382:	4252      	negs	r2, r2
   dc384:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc388:	ea94 0f05 	teq	r4, r5
   dc38c:	f000 80a7 	beq.w	dc4de <__adddf3+0x1da>
   dc390:	f1a4 0401 	sub.w	r4, r4, #1
   dc394:	f1d5 0e20 	rsbs	lr, r5, #32
   dc398:	db0d      	blt.n	dc3b6 <__adddf3+0xb2>
   dc39a:	fa02 fc0e 	lsl.w	ip, r2, lr
   dc39e:	fa22 f205 	lsr.w	r2, r2, r5
   dc3a2:	1880      	adds	r0, r0, r2
   dc3a4:	f141 0100 	adc.w	r1, r1, #0
   dc3a8:	fa03 f20e 	lsl.w	r2, r3, lr
   dc3ac:	1880      	adds	r0, r0, r2
   dc3ae:	fa43 f305 	asr.w	r3, r3, r5
   dc3b2:	4159      	adcs	r1, r3
   dc3b4:	e00e      	b.n	dc3d4 <__adddf3+0xd0>
   dc3b6:	f1a5 0520 	sub.w	r5, r5, #32
   dc3ba:	f10e 0e20 	add.w	lr, lr, #32
   dc3be:	2a01      	cmp	r2, #1
   dc3c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   dc3c4:	bf28      	it	cs
   dc3c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   dc3ca:	fa43 f305 	asr.w	r3, r3, r5
   dc3ce:	18c0      	adds	r0, r0, r3
   dc3d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dc3d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc3d8:	d507      	bpl.n	dc3ea <__adddf3+0xe6>
   dc3da:	f04f 0e00 	mov.w	lr, #0
   dc3de:	f1dc 0c00 	rsbs	ip, ip, #0
   dc3e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   dc3e6:	eb6e 0101 	sbc.w	r1, lr, r1
   dc3ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dc3ee:	d31b      	bcc.n	dc428 <__adddf3+0x124>
   dc3f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dc3f4:	d30c      	bcc.n	dc410 <__adddf3+0x10c>
   dc3f6:	0849      	lsrs	r1, r1, #1
   dc3f8:	ea5f 0030 	movs.w	r0, r0, rrx
   dc3fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dc400:	f104 0401 	add.w	r4, r4, #1
   dc404:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dc408:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dc40c:	f080 809a 	bcs.w	dc544 <__adddf3+0x240>
   dc410:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dc414:	bf08      	it	eq
   dc416:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc41a:	f150 0000 	adcs.w	r0, r0, #0
   dc41e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc422:	ea41 0105 	orr.w	r1, r1, r5
   dc426:	bd30      	pop	{r4, r5, pc}
   dc428:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dc42c:	4140      	adcs	r0, r0
   dc42e:	eb41 0101 	adc.w	r1, r1, r1
   dc432:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc436:	f1a4 0401 	sub.w	r4, r4, #1
   dc43a:	d1e9      	bne.n	dc410 <__adddf3+0x10c>
   dc43c:	f091 0f00 	teq	r1, #0
   dc440:	bf04      	itt	eq
   dc442:	4601      	moveq	r1, r0
   dc444:	2000      	moveq	r0, #0
   dc446:	fab1 f381 	clz	r3, r1
   dc44a:	bf08      	it	eq
   dc44c:	3320      	addeq	r3, #32
   dc44e:	f1a3 030b 	sub.w	r3, r3, #11
   dc452:	f1b3 0220 	subs.w	r2, r3, #32
   dc456:	da0c      	bge.n	dc472 <__adddf3+0x16e>
   dc458:	320c      	adds	r2, #12
   dc45a:	dd08      	ble.n	dc46e <__adddf3+0x16a>
   dc45c:	f102 0c14 	add.w	ip, r2, #20
   dc460:	f1c2 020c 	rsb	r2, r2, #12
   dc464:	fa01 f00c 	lsl.w	r0, r1, ip
   dc468:	fa21 f102 	lsr.w	r1, r1, r2
   dc46c:	e00c      	b.n	dc488 <__adddf3+0x184>
   dc46e:	f102 0214 	add.w	r2, r2, #20
   dc472:	bfd8      	it	le
   dc474:	f1c2 0c20 	rsble	ip, r2, #32
   dc478:	fa01 f102 	lsl.w	r1, r1, r2
   dc47c:	fa20 fc0c 	lsr.w	ip, r0, ip
   dc480:	bfdc      	itt	le
   dc482:	ea41 010c 	orrle.w	r1, r1, ip
   dc486:	4090      	lslle	r0, r2
   dc488:	1ae4      	subs	r4, r4, r3
   dc48a:	bfa2      	ittt	ge
   dc48c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dc490:	4329      	orrge	r1, r5
   dc492:	bd30      	popge	{r4, r5, pc}
   dc494:	ea6f 0404 	mvn.w	r4, r4
   dc498:	3c1f      	subs	r4, #31
   dc49a:	da1c      	bge.n	dc4d6 <__adddf3+0x1d2>
   dc49c:	340c      	adds	r4, #12
   dc49e:	dc0e      	bgt.n	dc4be <__adddf3+0x1ba>
   dc4a0:	f104 0414 	add.w	r4, r4, #20
   dc4a4:	f1c4 0220 	rsb	r2, r4, #32
   dc4a8:	fa20 f004 	lsr.w	r0, r0, r4
   dc4ac:	fa01 f302 	lsl.w	r3, r1, r2
   dc4b0:	ea40 0003 	orr.w	r0, r0, r3
   dc4b4:	fa21 f304 	lsr.w	r3, r1, r4
   dc4b8:	ea45 0103 	orr.w	r1, r5, r3
   dc4bc:	bd30      	pop	{r4, r5, pc}
   dc4be:	f1c4 040c 	rsb	r4, r4, #12
   dc4c2:	f1c4 0220 	rsb	r2, r4, #32
   dc4c6:	fa20 f002 	lsr.w	r0, r0, r2
   dc4ca:	fa01 f304 	lsl.w	r3, r1, r4
   dc4ce:	ea40 0003 	orr.w	r0, r0, r3
   dc4d2:	4629      	mov	r1, r5
   dc4d4:	bd30      	pop	{r4, r5, pc}
   dc4d6:	fa21 f004 	lsr.w	r0, r1, r4
   dc4da:	4629      	mov	r1, r5
   dc4dc:	bd30      	pop	{r4, r5, pc}
   dc4de:	f094 0f00 	teq	r4, #0
   dc4e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dc4e6:	bf06      	itte	eq
   dc4e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dc4ec:	3401      	addeq	r4, #1
   dc4ee:	3d01      	subne	r5, #1
   dc4f0:	e74e      	b.n	dc390 <__adddf3+0x8c>
   dc4f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc4f6:	bf18      	it	ne
   dc4f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc4fc:	d029      	beq.n	dc552 <__adddf3+0x24e>
   dc4fe:	ea94 0f05 	teq	r4, r5
   dc502:	bf08      	it	eq
   dc504:	ea90 0f02 	teqeq	r0, r2
   dc508:	d005      	beq.n	dc516 <__adddf3+0x212>
   dc50a:	ea54 0c00 	orrs.w	ip, r4, r0
   dc50e:	bf04      	itt	eq
   dc510:	4619      	moveq	r1, r3
   dc512:	4610      	moveq	r0, r2
   dc514:	bd30      	pop	{r4, r5, pc}
   dc516:	ea91 0f03 	teq	r1, r3
   dc51a:	bf1e      	ittt	ne
   dc51c:	2100      	movne	r1, #0
   dc51e:	2000      	movne	r0, #0
   dc520:	bd30      	popne	{r4, r5, pc}
   dc522:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dc526:	d105      	bne.n	dc534 <__adddf3+0x230>
   dc528:	0040      	lsls	r0, r0, #1
   dc52a:	4149      	adcs	r1, r1
   dc52c:	bf28      	it	cs
   dc52e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dc532:	bd30      	pop	{r4, r5, pc}
   dc534:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dc538:	bf3c      	itt	cc
   dc53a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dc53e:	bd30      	popcc	{r4, r5, pc}
   dc540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc544:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dc548:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc54c:	f04f 0000 	mov.w	r0, #0
   dc550:	bd30      	pop	{r4, r5, pc}
   dc552:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc556:	bf1a      	itte	ne
   dc558:	4619      	movne	r1, r3
   dc55a:	4610      	movne	r0, r2
   dc55c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dc560:	bf1c      	itt	ne
   dc562:	460b      	movne	r3, r1
   dc564:	4602      	movne	r2, r0
   dc566:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc56a:	bf06      	itte	eq
   dc56c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dc570:	ea91 0f03 	teqeq	r1, r3
   dc574:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dc578:	bd30      	pop	{r4, r5, pc}
   dc57a:	bf00      	nop

000dc57c <__aeabi_ui2d>:
   dc57c:	f090 0f00 	teq	r0, #0
   dc580:	bf04      	itt	eq
   dc582:	2100      	moveq	r1, #0
   dc584:	4770      	bxeq	lr
   dc586:	b530      	push	{r4, r5, lr}
   dc588:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc58c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc590:	f04f 0500 	mov.w	r5, #0
   dc594:	f04f 0100 	mov.w	r1, #0
   dc598:	e750      	b.n	dc43c <__adddf3+0x138>
   dc59a:	bf00      	nop

000dc59c <__aeabi_i2d>:
   dc59c:	f090 0f00 	teq	r0, #0
   dc5a0:	bf04      	itt	eq
   dc5a2:	2100      	moveq	r1, #0
   dc5a4:	4770      	bxeq	lr
   dc5a6:	b530      	push	{r4, r5, lr}
   dc5a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc5ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc5b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dc5b4:	bf48      	it	mi
   dc5b6:	4240      	negmi	r0, r0
   dc5b8:	f04f 0100 	mov.w	r1, #0
   dc5bc:	e73e      	b.n	dc43c <__adddf3+0x138>
   dc5be:	bf00      	nop

000dc5c0 <__aeabi_f2d>:
   dc5c0:	0042      	lsls	r2, r0, #1
   dc5c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dc5c6:	ea4f 0131 	mov.w	r1, r1, rrx
   dc5ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dc5ce:	bf1f      	itttt	ne
   dc5d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dc5d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dc5d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dc5dc:	4770      	bxne	lr
   dc5de:	f092 0f00 	teq	r2, #0
   dc5e2:	bf14      	ite	ne
   dc5e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dc5e8:	4770      	bxeq	lr
   dc5ea:	b530      	push	{r4, r5, lr}
   dc5ec:	f44f 7460 	mov.w	r4, #896	; 0x380
   dc5f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc5f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc5f8:	e720      	b.n	dc43c <__adddf3+0x138>
   dc5fa:	bf00      	nop

000dc5fc <__aeabi_ul2d>:
   dc5fc:	ea50 0201 	orrs.w	r2, r0, r1
   dc600:	bf08      	it	eq
   dc602:	4770      	bxeq	lr
   dc604:	b530      	push	{r4, r5, lr}
   dc606:	f04f 0500 	mov.w	r5, #0
   dc60a:	e00a      	b.n	dc622 <__aeabi_l2d+0x16>

000dc60c <__aeabi_l2d>:
   dc60c:	ea50 0201 	orrs.w	r2, r0, r1
   dc610:	bf08      	it	eq
   dc612:	4770      	bxeq	lr
   dc614:	b530      	push	{r4, r5, lr}
   dc616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dc61a:	d502      	bpl.n	dc622 <__aeabi_l2d+0x16>
   dc61c:	4240      	negs	r0, r0
   dc61e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc622:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc626:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc62a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dc62e:	f43f aedc 	beq.w	dc3ea <__adddf3+0xe6>
   dc632:	f04f 0203 	mov.w	r2, #3
   dc636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc63a:	bf18      	it	ne
   dc63c:	3203      	addne	r2, #3
   dc63e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc642:	bf18      	it	ne
   dc644:	3203      	addne	r2, #3
   dc646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dc64a:	f1c2 0320 	rsb	r3, r2, #32
   dc64e:	fa00 fc03 	lsl.w	ip, r0, r3
   dc652:	fa20 f002 	lsr.w	r0, r0, r2
   dc656:	fa01 fe03 	lsl.w	lr, r1, r3
   dc65a:	ea40 000e 	orr.w	r0, r0, lr
   dc65e:	fa21 f102 	lsr.w	r1, r1, r2
   dc662:	4414      	add	r4, r2
   dc664:	e6c1      	b.n	dc3ea <__adddf3+0xe6>
   dc666:	bf00      	nop

000dc668 <__aeabi_dmul>:
   dc668:	b570      	push	{r4, r5, r6, lr}
   dc66a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc66e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc676:	bf1d      	ittte	ne
   dc678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc67c:	ea94 0f0c 	teqne	r4, ip
   dc680:	ea95 0f0c 	teqne	r5, ip
   dc684:	f000 f8de 	bleq	dc844 <__aeabi_dmul+0x1dc>
   dc688:	442c      	add	r4, r5
   dc68a:	ea81 0603 	eor.w	r6, r1, r3
   dc68e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dc692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dc696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dc69a:	bf18      	it	ne
   dc69c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dc6a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc6a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc6a8:	d038      	beq.n	dc71c <__aeabi_dmul+0xb4>
   dc6aa:	fba0 ce02 	umull	ip, lr, r0, r2
   dc6ae:	f04f 0500 	mov.w	r5, #0
   dc6b2:	fbe1 e502 	umlal	lr, r5, r1, r2
   dc6b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dc6ba:	fbe0 e503 	umlal	lr, r5, r0, r3
   dc6be:	f04f 0600 	mov.w	r6, #0
   dc6c2:	fbe1 5603 	umlal	r5, r6, r1, r3
   dc6c6:	f09c 0f00 	teq	ip, #0
   dc6ca:	bf18      	it	ne
   dc6cc:	f04e 0e01 	orrne.w	lr, lr, #1
   dc6d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dc6d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dc6d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dc6dc:	d204      	bcs.n	dc6e8 <__aeabi_dmul+0x80>
   dc6de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dc6e2:	416d      	adcs	r5, r5
   dc6e4:	eb46 0606 	adc.w	r6, r6, r6
   dc6e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dc6ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dc6f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dc6f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dc6f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dc6fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc700:	bf88      	it	hi
   dc702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc706:	d81e      	bhi.n	dc746 <__aeabi_dmul+0xde>
   dc708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dc70c:	bf08      	it	eq
   dc70e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dc712:	f150 0000 	adcs.w	r0, r0, #0
   dc716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc71a:	bd70      	pop	{r4, r5, r6, pc}
   dc71c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dc720:	ea46 0101 	orr.w	r1, r6, r1
   dc724:	ea40 0002 	orr.w	r0, r0, r2
   dc728:	ea81 0103 	eor.w	r1, r1, r3
   dc72c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dc730:	bfc2      	ittt	gt
   dc732:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc73a:	bd70      	popgt	{r4, r5, r6, pc}
   dc73c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc740:	f04f 0e00 	mov.w	lr, #0
   dc744:	3c01      	subs	r4, #1
   dc746:	f300 80ab 	bgt.w	dc8a0 <__aeabi_dmul+0x238>
   dc74a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dc74e:	bfde      	ittt	le
   dc750:	2000      	movle	r0, #0
   dc752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dc756:	bd70      	pople	{r4, r5, r6, pc}
   dc758:	f1c4 0400 	rsb	r4, r4, #0
   dc75c:	3c20      	subs	r4, #32
   dc75e:	da35      	bge.n	dc7cc <__aeabi_dmul+0x164>
   dc760:	340c      	adds	r4, #12
   dc762:	dc1b      	bgt.n	dc79c <__aeabi_dmul+0x134>
   dc764:	f104 0414 	add.w	r4, r4, #20
   dc768:	f1c4 0520 	rsb	r5, r4, #32
   dc76c:	fa00 f305 	lsl.w	r3, r0, r5
   dc770:	fa20 f004 	lsr.w	r0, r0, r4
   dc774:	fa01 f205 	lsl.w	r2, r1, r5
   dc778:	ea40 0002 	orr.w	r0, r0, r2
   dc77c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dc780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc788:	fa21 f604 	lsr.w	r6, r1, r4
   dc78c:	eb42 0106 	adc.w	r1, r2, r6
   dc790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc794:	bf08      	it	eq
   dc796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc79a:	bd70      	pop	{r4, r5, r6, pc}
   dc79c:	f1c4 040c 	rsb	r4, r4, #12
   dc7a0:	f1c4 0520 	rsb	r5, r4, #32
   dc7a4:	fa00 f304 	lsl.w	r3, r0, r4
   dc7a8:	fa20 f005 	lsr.w	r0, r0, r5
   dc7ac:	fa01 f204 	lsl.w	r2, r1, r4
   dc7b0:	ea40 0002 	orr.w	r0, r0, r2
   dc7b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc7b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc7bc:	f141 0100 	adc.w	r1, r1, #0
   dc7c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc7c4:	bf08      	it	eq
   dc7c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc7ca:	bd70      	pop	{r4, r5, r6, pc}
   dc7cc:	f1c4 0520 	rsb	r5, r4, #32
   dc7d0:	fa00 f205 	lsl.w	r2, r0, r5
   dc7d4:	ea4e 0e02 	orr.w	lr, lr, r2
   dc7d8:	fa20 f304 	lsr.w	r3, r0, r4
   dc7dc:	fa01 f205 	lsl.w	r2, r1, r5
   dc7e0:	ea43 0302 	orr.w	r3, r3, r2
   dc7e4:	fa21 f004 	lsr.w	r0, r1, r4
   dc7e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc7ec:	fa21 f204 	lsr.w	r2, r1, r4
   dc7f0:	ea20 0002 	bic.w	r0, r0, r2
   dc7f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dc7f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc7fc:	bf08      	it	eq
   dc7fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc802:	bd70      	pop	{r4, r5, r6, pc}
   dc804:	f094 0f00 	teq	r4, #0
   dc808:	d10f      	bne.n	dc82a <__aeabi_dmul+0x1c2>
   dc80a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dc80e:	0040      	lsls	r0, r0, #1
   dc810:	eb41 0101 	adc.w	r1, r1, r1
   dc814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc818:	bf08      	it	eq
   dc81a:	3c01      	subeq	r4, #1
   dc81c:	d0f7      	beq.n	dc80e <__aeabi_dmul+0x1a6>
   dc81e:	ea41 0106 	orr.w	r1, r1, r6
   dc822:	f095 0f00 	teq	r5, #0
   dc826:	bf18      	it	ne
   dc828:	4770      	bxne	lr
   dc82a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dc82e:	0052      	lsls	r2, r2, #1
   dc830:	eb43 0303 	adc.w	r3, r3, r3
   dc834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dc838:	bf08      	it	eq
   dc83a:	3d01      	subeq	r5, #1
   dc83c:	d0f7      	beq.n	dc82e <__aeabi_dmul+0x1c6>
   dc83e:	ea43 0306 	orr.w	r3, r3, r6
   dc842:	4770      	bx	lr
   dc844:	ea94 0f0c 	teq	r4, ip
   dc848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc84c:	bf18      	it	ne
   dc84e:	ea95 0f0c 	teqne	r5, ip
   dc852:	d00c      	beq.n	dc86e <__aeabi_dmul+0x206>
   dc854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc858:	bf18      	it	ne
   dc85a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc85e:	d1d1      	bne.n	dc804 <__aeabi_dmul+0x19c>
   dc860:	ea81 0103 	eor.w	r1, r1, r3
   dc864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc868:	f04f 0000 	mov.w	r0, #0
   dc86c:	bd70      	pop	{r4, r5, r6, pc}
   dc86e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc872:	bf06      	itte	eq
   dc874:	4610      	moveq	r0, r2
   dc876:	4619      	moveq	r1, r3
   dc878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc87c:	d019      	beq.n	dc8b2 <__aeabi_dmul+0x24a>
   dc87e:	ea94 0f0c 	teq	r4, ip
   dc882:	d102      	bne.n	dc88a <__aeabi_dmul+0x222>
   dc884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dc888:	d113      	bne.n	dc8b2 <__aeabi_dmul+0x24a>
   dc88a:	ea95 0f0c 	teq	r5, ip
   dc88e:	d105      	bne.n	dc89c <__aeabi_dmul+0x234>
   dc890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dc894:	bf1c      	itt	ne
   dc896:	4610      	movne	r0, r2
   dc898:	4619      	movne	r1, r3
   dc89a:	d10a      	bne.n	dc8b2 <__aeabi_dmul+0x24a>
   dc89c:	ea81 0103 	eor.w	r1, r1, r3
   dc8a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc8a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc8a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc8ac:	f04f 0000 	mov.w	r0, #0
   dc8b0:	bd70      	pop	{r4, r5, r6, pc}
   dc8b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc8b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dc8ba:	bd70      	pop	{r4, r5, r6, pc}

000dc8bc <__aeabi_ddiv>:
   dc8bc:	b570      	push	{r4, r5, r6, lr}
   dc8be:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc8c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc8c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc8ca:	bf1d      	ittte	ne
   dc8cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc8d0:	ea94 0f0c 	teqne	r4, ip
   dc8d4:	ea95 0f0c 	teqne	r5, ip
   dc8d8:	f000 f8a7 	bleq	dca2a <__aeabi_ddiv+0x16e>
   dc8dc:	eba4 0405 	sub.w	r4, r4, r5
   dc8e0:	ea81 0e03 	eor.w	lr, r1, r3
   dc8e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc8e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc8ec:	f000 8088 	beq.w	dca00 <__aeabi_ddiv+0x144>
   dc8f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc8f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dc8f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dc8fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dc900:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dc904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dc908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dc90c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dc910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dc914:	429d      	cmp	r5, r3
   dc916:	bf08      	it	eq
   dc918:	4296      	cmpeq	r6, r2
   dc91a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dc91e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dc922:	d202      	bcs.n	dc92a <__aeabi_ddiv+0x6e>
   dc924:	085b      	lsrs	r3, r3, #1
   dc926:	ea4f 0232 	mov.w	r2, r2, rrx
   dc92a:	1ab6      	subs	r6, r6, r2
   dc92c:	eb65 0503 	sbc.w	r5, r5, r3
   dc930:	085b      	lsrs	r3, r3, #1
   dc932:	ea4f 0232 	mov.w	r2, r2, rrx
   dc936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dc93a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dc93e:	ebb6 0e02 	subs.w	lr, r6, r2
   dc942:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc946:	bf22      	ittt	cs
   dc948:	1ab6      	subcs	r6, r6, r2
   dc94a:	4675      	movcs	r5, lr
   dc94c:	ea40 000c 	orrcs.w	r0, r0, ip
   dc950:	085b      	lsrs	r3, r3, #1
   dc952:	ea4f 0232 	mov.w	r2, r2, rrx
   dc956:	ebb6 0e02 	subs.w	lr, r6, r2
   dc95a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc95e:	bf22      	ittt	cs
   dc960:	1ab6      	subcs	r6, r6, r2
   dc962:	4675      	movcs	r5, lr
   dc964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dc968:	085b      	lsrs	r3, r3, #1
   dc96a:	ea4f 0232 	mov.w	r2, r2, rrx
   dc96e:	ebb6 0e02 	subs.w	lr, r6, r2
   dc972:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc976:	bf22      	ittt	cs
   dc978:	1ab6      	subcs	r6, r6, r2
   dc97a:	4675      	movcs	r5, lr
   dc97c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dc980:	085b      	lsrs	r3, r3, #1
   dc982:	ea4f 0232 	mov.w	r2, r2, rrx
   dc986:	ebb6 0e02 	subs.w	lr, r6, r2
   dc98a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc98e:	bf22      	ittt	cs
   dc990:	1ab6      	subcs	r6, r6, r2
   dc992:	4675      	movcs	r5, lr
   dc994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dc998:	ea55 0e06 	orrs.w	lr, r5, r6
   dc99c:	d018      	beq.n	dc9d0 <__aeabi_ddiv+0x114>
   dc99e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dc9a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dc9a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dc9aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dc9ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dc9b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dc9b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dc9ba:	d1c0      	bne.n	dc93e <__aeabi_ddiv+0x82>
   dc9bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc9c0:	d10b      	bne.n	dc9da <__aeabi_ddiv+0x11e>
   dc9c2:	ea41 0100 	orr.w	r1, r1, r0
   dc9c6:	f04f 0000 	mov.w	r0, #0
   dc9ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dc9ce:	e7b6      	b.n	dc93e <__aeabi_ddiv+0x82>
   dc9d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc9d4:	bf04      	itt	eq
   dc9d6:	4301      	orreq	r1, r0
   dc9d8:	2000      	moveq	r0, #0
   dc9da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc9de:	bf88      	it	hi
   dc9e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc9e4:	f63f aeaf 	bhi.w	dc746 <__aeabi_dmul+0xde>
   dc9e8:	ebb5 0c03 	subs.w	ip, r5, r3
   dc9ec:	bf04      	itt	eq
   dc9ee:	ebb6 0c02 	subseq.w	ip, r6, r2
   dc9f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc9f6:	f150 0000 	adcs.w	r0, r0, #0
   dc9fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc9fe:	bd70      	pop	{r4, r5, r6, pc}
   dca00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dca04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dca08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dca0c:	bfc2      	ittt	gt
   dca0e:	ebd4 050c 	rsbsgt	r5, r4, ip
   dca12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dca16:	bd70      	popgt	{r4, r5, r6, pc}
   dca18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dca1c:	f04f 0e00 	mov.w	lr, #0
   dca20:	3c01      	subs	r4, #1
   dca22:	e690      	b.n	dc746 <__aeabi_dmul+0xde>
   dca24:	ea45 0e06 	orr.w	lr, r5, r6
   dca28:	e68d      	b.n	dc746 <__aeabi_dmul+0xde>
   dca2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dca2e:	ea94 0f0c 	teq	r4, ip
   dca32:	bf08      	it	eq
   dca34:	ea95 0f0c 	teqeq	r5, ip
   dca38:	f43f af3b 	beq.w	dc8b2 <__aeabi_dmul+0x24a>
   dca3c:	ea94 0f0c 	teq	r4, ip
   dca40:	d10a      	bne.n	dca58 <__aeabi_ddiv+0x19c>
   dca42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dca46:	f47f af34 	bne.w	dc8b2 <__aeabi_dmul+0x24a>
   dca4a:	ea95 0f0c 	teq	r5, ip
   dca4e:	f47f af25 	bne.w	dc89c <__aeabi_dmul+0x234>
   dca52:	4610      	mov	r0, r2
   dca54:	4619      	mov	r1, r3
   dca56:	e72c      	b.n	dc8b2 <__aeabi_dmul+0x24a>
   dca58:	ea95 0f0c 	teq	r5, ip
   dca5c:	d106      	bne.n	dca6c <__aeabi_ddiv+0x1b0>
   dca5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dca62:	f43f aefd 	beq.w	dc860 <__aeabi_dmul+0x1f8>
   dca66:	4610      	mov	r0, r2
   dca68:	4619      	mov	r1, r3
   dca6a:	e722      	b.n	dc8b2 <__aeabi_dmul+0x24a>
   dca6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dca70:	bf18      	it	ne
   dca72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dca76:	f47f aec5 	bne.w	dc804 <__aeabi_dmul+0x19c>
   dca7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dca7e:	f47f af0d 	bne.w	dc89c <__aeabi_dmul+0x234>
   dca82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dca86:	f47f aeeb 	bne.w	dc860 <__aeabi_dmul+0x1f8>
   dca8a:	e712      	b.n	dc8b2 <__aeabi_dmul+0x24a>

000dca8c <__gedf2>:
   dca8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dca90:	e006      	b.n	dcaa0 <__cmpdf2+0x4>
   dca92:	bf00      	nop

000dca94 <__ledf2>:
   dca94:	f04f 0c01 	mov.w	ip, #1
   dca98:	e002      	b.n	dcaa0 <__cmpdf2+0x4>
   dca9a:	bf00      	nop

000dca9c <__cmpdf2>:
   dca9c:	f04f 0c01 	mov.w	ip, #1
   dcaa0:	f84d cd04 	str.w	ip, [sp, #-4]!
   dcaa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dcaa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcaac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dcab0:	bf18      	it	ne
   dcab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dcab6:	d01b      	beq.n	dcaf0 <__cmpdf2+0x54>
   dcab8:	b001      	add	sp, #4
   dcaba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dcabe:	bf0c      	ite	eq
   dcac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dcac4:	ea91 0f03 	teqne	r1, r3
   dcac8:	bf02      	ittt	eq
   dcaca:	ea90 0f02 	teqeq	r0, r2
   dcace:	2000      	moveq	r0, #0
   dcad0:	4770      	bxeq	lr
   dcad2:	f110 0f00 	cmn.w	r0, #0
   dcad6:	ea91 0f03 	teq	r1, r3
   dcada:	bf58      	it	pl
   dcadc:	4299      	cmppl	r1, r3
   dcade:	bf08      	it	eq
   dcae0:	4290      	cmpeq	r0, r2
   dcae2:	bf2c      	ite	cs
   dcae4:	17d8      	asrcs	r0, r3, #31
   dcae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dcaea:	f040 0001 	orr.w	r0, r0, #1
   dcaee:	4770      	bx	lr
   dcaf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dcaf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcaf8:	d102      	bne.n	dcb00 <__cmpdf2+0x64>
   dcafa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dcafe:	d107      	bne.n	dcb10 <__cmpdf2+0x74>
   dcb00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dcb04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcb08:	d1d6      	bne.n	dcab8 <__cmpdf2+0x1c>
   dcb0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dcb0e:	d0d3      	beq.n	dcab8 <__cmpdf2+0x1c>
   dcb10:	f85d 0b04 	ldr.w	r0, [sp], #4
   dcb14:	4770      	bx	lr
   dcb16:	bf00      	nop

000dcb18 <__aeabi_cdrcmple>:
   dcb18:	4684      	mov	ip, r0
   dcb1a:	4610      	mov	r0, r2
   dcb1c:	4662      	mov	r2, ip
   dcb1e:	468c      	mov	ip, r1
   dcb20:	4619      	mov	r1, r3
   dcb22:	4663      	mov	r3, ip
   dcb24:	e000      	b.n	dcb28 <__aeabi_cdcmpeq>
   dcb26:	bf00      	nop

000dcb28 <__aeabi_cdcmpeq>:
   dcb28:	b501      	push	{r0, lr}
   dcb2a:	f7ff ffb7 	bl	dca9c <__cmpdf2>
   dcb2e:	2800      	cmp	r0, #0
   dcb30:	bf48      	it	mi
   dcb32:	f110 0f00 	cmnmi.w	r0, #0
   dcb36:	bd01      	pop	{r0, pc}

000dcb38 <__aeabi_dcmpeq>:
   dcb38:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcb3c:	f7ff fff4 	bl	dcb28 <__aeabi_cdcmpeq>
   dcb40:	bf0c      	ite	eq
   dcb42:	2001      	moveq	r0, #1
   dcb44:	2000      	movne	r0, #0
   dcb46:	f85d fb08 	ldr.w	pc, [sp], #8
   dcb4a:	bf00      	nop

000dcb4c <__aeabi_dcmplt>:
   dcb4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcb50:	f7ff ffea 	bl	dcb28 <__aeabi_cdcmpeq>
   dcb54:	bf34      	ite	cc
   dcb56:	2001      	movcc	r0, #1
   dcb58:	2000      	movcs	r0, #0
   dcb5a:	f85d fb08 	ldr.w	pc, [sp], #8
   dcb5e:	bf00      	nop

000dcb60 <__aeabi_dcmple>:
   dcb60:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcb64:	f7ff ffe0 	bl	dcb28 <__aeabi_cdcmpeq>
   dcb68:	bf94      	ite	ls
   dcb6a:	2001      	movls	r0, #1
   dcb6c:	2000      	movhi	r0, #0
   dcb6e:	f85d fb08 	ldr.w	pc, [sp], #8
   dcb72:	bf00      	nop

000dcb74 <__aeabi_dcmpge>:
   dcb74:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcb78:	f7ff ffce 	bl	dcb18 <__aeabi_cdrcmple>
   dcb7c:	bf94      	ite	ls
   dcb7e:	2001      	movls	r0, #1
   dcb80:	2000      	movhi	r0, #0
   dcb82:	f85d fb08 	ldr.w	pc, [sp], #8
   dcb86:	bf00      	nop

000dcb88 <__aeabi_dcmpgt>:
   dcb88:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcb8c:	f7ff ffc4 	bl	dcb18 <__aeabi_cdrcmple>
   dcb90:	bf34      	ite	cc
   dcb92:	2001      	movcc	r0, #1
   dcb94:	2000      	movcs	r0, #0
   dcb96:	f85d fb08 	ldr.w	pc, [sp], #8
   dcb9a:	bf00      	nop

000dcb9c <__aeabi_d2iz>:
   dcb9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dcba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dcba4:	d215      	bcs.n	dcbd2 <__aeabi_d2iz+0x36>
   dcba6:	d511      	bpl.n	dcbcc <__aeabi_d2iz+0x30>
   dcba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dcbac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dcbb0:	d912      	bls.n	dcbd8 <__aeabi_d2iz+0x3c>
   dcbb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dcbb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dcbba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dcbbe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dcbc2:	fa23 f002 	lsr.w	r0, r3, r2
   dcbc6:	bf18      	it	ne
   dcbc8:	4240      	negne	r0, r0
   dcbca:	4770      	bx	lr
   dcbcc:	f04f 0000 	mov.w	r0, #0
   dcbd0:	4770      	bx	lr
   dcbd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dcbd6:	d105      	bne.n	dcbe4 <__aeabi_d2iz+0x48>
   dcbd8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dcbdc:	bf08      	it	eq
   dcbde:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dcbe2:	4770      	bx	lr
   dcbe4:	f04f 0000 	mov.w	r0, #0
   dcbe8:	4770      	bx	lr
   dcbea:	bf00      	nop

000dcbec <__aeabi_d2uiz>:
   dcbec:	004a      	lsls	r2, r1, #1
   dcbee:	d211      	bcs.n	dcc14 <__aeabi_d2uiz+0x28>
   dcbf0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dcbf4:	d211      	bcs.n	dcc1a <__aeabi_d2uiz+0x2e>
   dcbf6:	d50d      	bpl.n	dcc14 <__aeabi_d2uiz+0x28>
   dcbf8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dcbfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dcc00:	d40e      	bmi.n	dcc20 <__aeabi_d2uiz+0x34>
   dcc02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dcc06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dcc0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dcc0e:	fa23 f002 	lsr.w	r0, r3, r2
   dcc12:	4770      	bx	lr
   dcc14:	f04f 0000 	mov.w	r0, #0
   dcc18:	4770      	bx	lr
   dcc1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dcc1e:	d102      	bne.n	dcc26 <__aeabi_d2uiz+0x3a>
   dcc20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dcc24:	4770      	bx	lr
   dcc26:	f04f 0000 	mov.w	r0, #0
   dcc2a:	4770      	bx	lr

000dcc2c <__aeabi_d2f>:
   dcc2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dcc30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dcc34:	bf24      	itt	cs
   dcc36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dcc3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dcc3e:	d90d      	bls.n	dcc5c <__aeabi_d2f+0x30>
   dcc40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dcc44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dcc48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dcc4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dcc50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dcc54:	bf08      	it	eq
   dcc56:	f020 0001 	biceq.w	r0, r0, #1
   dcc5a:	4770      	bx	lr
   dcc5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dcc60:	d121      	bne.n	dcca6 <__aeabi_d2f+0x7a>
   dcc62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dcc66:	bfbc      	itt	lt
   dcc68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dcc6c:	4770      	bxlt	lr
   dcc6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dcc72:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dcc76:	f1c2 0218 	rsb	r2, r2, #24
   dcc7a:	f1c2 0c20 	rsb	ip, r2, #32
   dcc7e:	fa10 f30c 	lsls.w	r3, r0, ip
   dcc82:	fa20 f002 	lsr.w	r0, r0, r2
   dcc86:	bf18      	it	ne
   dcc88:	f040 0001 	orrne.w	r0, r0, #1
   dcc8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dcc90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dcc94:	fa03 fc0c 	lsl.w	ip, r3, ip
   dcc98:	ea40 000c 	orr.w	r0, r0, ip
   dcc9c:	fa23 f302 	lsr.w	r3, r3, r2
   dcca0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dcca4:	e7cc      	b.n	dcc40 <__aeabi_d2f+0x14>
   dcca6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dccaa:	d107      	bne.n	dccbc <__aeabi_d2f+0x90>
   dccac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dccb0:	bf1e      	ittt	ne
   dccb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dccb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dccba:	4770      	bxne	lr
   dccbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dccc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dccc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dccc8:	4770      	bx	lr
   dccca:	bf00      	nop

000dcccc <atof>:
   dcccc:	2100      	movs	r1, #0
   dccce:	f001 b85b 	b.w	ddd88 <strtod>

000dccd2 <atoi>:
   dccd2:	220a      	movs	r2, #10
   dccd4:	2100      	movs	r1, #0
   dccd6:	f001 b8e5 	b.w	ddea4 <strtol>
	...

000dccdc <__cxa_atexit>:
   dccdc:	b510      	push	{r4, lr}
   dccde:	4c05      	ldr	r4, [pc, #20]	; (dccf4 <__cxa_atexit+0x18>)
   dcce0:	4613      	mov	r3, r2
   dcce2:	b12c      	cbz	r4, dccf0 <__cxa_atexit+0x14>
   dcce4:	460a      	mov	r2, r1
   dcce6:	4601      	mov	r1, r0
   dcce8:	2002      	movs	r0, #2
   dccea:	f3af 8000 	nop.w
   dccee:	bd10      	pop	{r4, pc}
   dccf0:	4620      	mov	r0, r4
   dccf2:	bd10      	pop	{r4, pc}
   dccf4:	00000000 	.word	0x00000000

000dccf8 <isspace>:
   dccf8:	4b03      	ldr	r3, [pc, #12]	; (dcd08 <isspace+0x10>)
   dccfa:	681b      	ldr	r3, [r3, #0]
   dccfc:	4418      	add	r0, r3
   dccfe:	7840      	ldrb	r0, [r0, #1]
   dcd00:	f000 0008 	and.w	r0, r0, #8
   dcd04:	4770      	bx	lr
   dcd06:	bf00      	nop
   dcd08:	2003d368 	.word	0x2003d368

000dcd0c <localtime>:
   dcd0c:	b538      	push	{r3, r4, r5, lr}
   dcd0e:	4b07      	ldr	r3, [pc, #28]	; (dcd2c <localtime+0x20>)
   dcd10:	681c      	ldr	r4, [r3, #0]
   dcd12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dcd14:	4605      	mov	r5, r0
   dcd16:	b91b      	cbnz	r3, dcd20 <localtime+0x14>
   dcd18:	2024      	movs	r0, #36	; 0x24
   dcd1a:	f7fb fb2b 	bl	d8374 <malloc>
   dcd1e:	63e0      	str	r0, [r4, #60]	; 0x3c
   dcd20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dcd22:	4628      	mov	r0, r5
   dcd24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dcd28:	f000 b802 	b.w	dcd30 <localtime_r>
   dcd2c:	2003d3cc 	.word	0x2003d3cc

000dcd30 <localtime_r>:
   dcd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dcd34:	460c      	mov	r4, r1
   dcd36:	4680      	mov	r8, r0
   dcd38:	f001 fed8 	bl	deaec <__gettzinfo>
   dcd3c:	4621      	mov	r1, r4
   dcd3e:	4607      	mov	r7, r0
   dcd40:	4640      	mov	r0, r8
   dcd42:	f001 fed7 	bl	deaf4 <gmtime_r>
   dcd46:	6946      	ldr	r6, [r0, #20]
   dcd48:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   dcd4c:	07b3      	lsls	r3, r6, #30
   dcd4e:	4604      	mov	r4, r0
   dcd50:	d105      	bne.n	dcd5e <localtime_r+0x2e>
   dcd52:	2264      	movs	r2, #100	; 0x64
   dcd54:	fb96 f3f2 	sdiv	r3, r6, r2
   dcd58:	fb02 6313 	mls	r3, r2, r3, r6
   dcd5c:	b94b      	cbnz	r3, dcd72 <localtime_r+0x42>
   dcd5e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   dcd62:	fb96 f3f5 	sdiv	r3, r6, r5
   dcd66:	fb05 6513 	mls	r5, r5, r3, r6
   dcd6a:	fab5 f385 	clz	r3, r5
   dcd6e:	095b      	lsrs	r3, r3, #5
   dcd70:	e000      	b.n	dcd74 <localtime_r+0x44>
   dcd72:	2301      	movs	r3, #1
   dcd74:	4a5f      	ldr	r2, [pc, #380]	; (dcef4 <localtime_r+0x1c4>)
   dcd76:	2530      	movs	r5, #48	; 0x30
   dcd78:	fb05 2503 	mla	r5, r5, r3, r2
   dcd7c:	f001 f9cc 	bl	de118 <__tz_lock>
   dcd80:	f001 f9cc 	bl	de11c <_tzset_unlocked>
   dcd84:	4b5c      	ldr	r3, [pc, #368]	; (dcef8 <localtime_r+0x1c8>)
   dcd86:	681b      	ldr	r3, [r3, #0]
   dcd88:	b1f3      	cbz	r3, dcdc8 <localtime_r+0x98>
   dcd8a:	687b      	ldr	r3, [r7, #4]
   dcd8c:	429e      	cmp	r6, r3
   dcd8e:	d105      	bne.n	dcd9c <localtime_r+0x6c>
   dcd90:	6839      	ldr	r1, [r7, #0]
   dcd92:	f8d8 3000 	ldr.w	r3, [r8]
   dcd96:	69fa      	ldr	r2, [r7, #28]
   dcd98:	b941      	cbnz	r1, dcdac <localtime_r+0x7c>
   dcd9a:	e00a      	b.n	dcdb2 <localtime_r+0x82>
   dcd9c:	4630      	mov	r0, r6
   dcd9e:	f001 f913 	bl	ddfc8 <__tzcalc_limits>
   dcda2:	2800      	cmp	r0, #0
   dcda4:	d1f4      	bne.n	dcd90 <localtime_r+0x60>
   dcda6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dcdaa:	e00d      	b.n	dcdc8 <localtime_r+0x98>
   dcdac:	4293      	cmp	r3, r2
   dcdae:	db08      	blt.n	dcdc2 <localtime_r+0x92>
   dcdb0:	e001      	b.n	dcdb6 <localtime_r+0x86>
   dcdb2:	4293      	cmp	r3, r2
   dcdb4:	da07      	bge.n	dcdc6 <localtime_r+0x96>
   dcdb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   dcdb8:	4293      	cmp	r3, r2
   dcdba:	bfac      	ite	ge
   dcdbc:	2300      	movge	r3, #0
   dcdbe:	2301      	movlt	r3, #1
   dcdc0:	e002      	b.n	dcdc8 <localtime_r+0x98>
   dcdc2:	2300      	movs	r3, #0
   dcdc4:	e000      	b.n	dcdc8 <localtime_r+0x98>
   dcdc6:	2301      	movs	r3, #1
   dcdc8:	6223      	str	r3, [r4, #32]
   dcdca:	6a23      	ldr	r3, [r4, #32]
   dcdcc:	2b01      	cmp	r3, #1
   dcdce:	bf0c      	ite	eq
   dcdd0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   dcdd2:	6a39      	ldrne	r1, [r7, #32]
   dcdd4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dcdd8:	203c      	movs	r0, #60	; 0x3c
   dcdda:	fb91 f6f3 	sdiv	r6, r1, r3
   dcdde:	fb03 1316 	mls	r3, r3, r6, r1
   dcde2:	6861      	ldr	r1, [r4, #4]
   dcde4:	fb93 f2f0 	sdiv	r2, r3, r0
   dcde8:	fb00 3012 	mls	r0, r0, r2, r3
   dcdec:	6823      	ldr	r3, [r4, #0]
   dcdee:	1a89      	subs	r1, r1, r2
   dcdf0:	68a2      	ldr	r2, [r4, #8]
   dcdf2:	6061      	str	r1, [r4, #4]
   dcdf4:	1a1b      	subs	r3, r3, r0
   dcdf6:	1b92      	subs	r2, r2, r6
   dcdf8:	2b3b      	cmp	r3, #59	; 0x3b
   dcdfa:	6023      	str	r3, [r4, #0]
   dcdfc:	60a2      	str	r2, [r4, #8]
   dcdfe:	dd03      	ble.n	dce08 <localtime_r+0xd8>
   dce00:	3101      	adds	r1, #1
   dce02:	6061      	str	r1, [r4, #4]
   dce04:	3b3c      	subs	r3, #60	; 0x3c
   dce06:	e004      	b.n	dce12 <localtime_r+0xe2>
   dce08:	2b00      	cmp	r3, #0
   dce0a:	da03      	bge.n	dce14 <localtime_r+0xe4>
   dce0c:	3901      	subs	r1, #1
   dce0e:	6061      	str	r1, [r4, #4]
   dce10:	333c      	adds	r3, #60	; 0x3c
   dce12:	6023      	str	r3, [r4, #0]
   dce14:	6863      	ldr	r3, [r4, #4]
   dce16:	2b3b      	cmp	r3, #59	; 0x3b
   dce18:	dd03      	ble.n	dce22 <localtime_r+0xf2>
   dce1a:	3201      	adds	r2, #1
   dce1c:	60a2      	str	r2, [r4, #8]
   dce1e:	3b3c      	subs	r3, #60	; 0x3c
   dce20:	e004      	b.n	dce2c <localtime_r+0xfc>
   dce22:	2b00      	cmp	r3, #0
   dce24:	da03      	bge.n	dce2e <localtime_r+0xfe>
   dce26:	3a01      	subs	r2, #1
   dce28:	60a2      	str	r2, [r4, #8]
   dce2a:	333c      	adds	r3, #60	; 0x3c
   dce2c:	6063      	str	r3, [r4, #4]
   dce2e:	68a3      	ldr	r3, [r4, #8]
   dce30:	2b17      	cmp	r3, #23
   dce32:	dd22      	ble.n	dce7a <localtime_r+0x14a>
   dce34:	69e2      	ldr	r2, [r4, #28]
   dce36:	3201      	adds	r2, #1
   dce38:	61e2      	str	r2, [r4, #28]
   dce3a:	69a2      	ldr	r2, [r4, #24]
   dce3c:	3201      	adds	r2, #1
   dce3e:	2a06      	cmp	r2, #6
   dce40:	bfc8      	it	gt
   dce42:	2200      	movgt	r2, #0
   dce44:	61a2      	str	r2, [r4, #24]
   dce46:	68e2      	ldr	r2, [r4, #12]
   dce48:	3b18      	subs	r3, #24
   dce4a:	3201      	adds	r2, #1
   dce4c:	60a3      	str	r3, [r4, #8]
   dce4e:	6923      	ldr	r3, [r4, #16]
   dce50:	60e2      	str	r2, [r4, #12]
   dce52:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   dce56:	428a      	cmp	r2, r1
   dce58:	dd46      	ble.n	dcee8 <localtime_r+0x1b8>
   dce5a:	3301      	adds	r3, #1
   dce5c:	2b0c      	cmp	r3, #12
   dce5e:	bf0c      	ite	eq
   dce60:	6963      	ldreq	r3, [r4, #20]
   dce62:	6123      	strne	r3, [r4, #16]
   dce64:	eba2 0201 	sub.w	r2, r2, r1
   dce68:	60e2      	str	r2, [r4, #12]
   dce6a:	bf01      	itttt	eq
   dce6c:	3301      	addeq	r3, #1
   dce6e:	2200      	moveq	r2, #0
   dce70:	6122      	streq	r2, [r4, #16]
   dce72:	6163      	streq	r3, [r4, #20]
   dce74:	bf08      	it	eq
   dce76:	61e2      	streq	r2, [r4, #28]
   dce78:	e036      	b.n	dcee8 <localtime_r+0x1b8>
   dce7a:	2b00      	cmp	r3, #0
   dce7c:	da34      	bge.n	dcee8 <localtime_r+0x1b8>
   dce7e:	69e2      	ldr	r2, [r4, #28]
   dce80:	3a01      	subs	r2, #1
   dce82:	61e2      	str	r2, [r4, #28]
   dce84:	69a2      	ldr	r2, [r4, #24]
   dce86:	3a01      	subs	r2, #1
   dce88:	bf48      	it	mi
   dce8a:	2206      	movmi	r2, #6
   dce8c:	61a2      	str	r2, [r4, #24]
   dce8e:	68e2      	ldr	r2, [r4, #12]
   dce90:	3318      	adds	r3, #24
   dce92:	3a01      	subs	r2, #1
   dce94:	60e2      	str	r2, [r4, #12]
   dce96:	60a3      	str	r3, [r4, #8]
   dce98:	bb32      	cbnz	r2, dcee8 <localtime_r+0x1b8>
   dce9a:	6923      	ldr	r3, [r4, #16]
   dce9c:	3b01      	subs	r3, #1
   dce9e:	d401      	bmi.n	dcea4 <localtime_r+0x174>
   dcea0:	6123      	str	r3, [r4, #16]
   dcea2:	e01d      	b.n	dcee0 <localtime_r+0x1b0>
   dcea4:	230b      	movs	r3, #11
   dcea6:	6123      	str	r3, [r4, #16]
   dcea8:	6963      	ldr	r3, [r4, #20]
   dceaa:	1e5a      	subs	r2, r3, #1
   dceac:	f012 0f03 	tst.w	r2, #3
   dceb0:	6162      	str	r2, [r4, #20]
   dceb2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   dceb6:	d105      	bne.n	dcec4 <localtime_r+0x194>
   dceb8:	2164      	movs	r1, #100	; 0x64
   dceba:	fb93 f2f1 	sdiv	r2, r3, r1
   dcebe:	fb01 3212 	mls	r2, r1, r2, r3
   dcec2:	b94a      	cbnz	r2, dced8 <localtime_r+0x1a8>
   dcec4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dcec8:	fb93 f2f1 	sdiv	r2, r3, r1
   dcecc:	fb01 3312 	mls	r3, r1, r2, r3
   dced0:	fab3 f383 	clz	r3, r3
   dced4:	095b      	lsrs	r3, r3, #5
   dced6:	e000      	b.n	dceda <localtime_r+0x1aa>
   dced8:	2301      	movs	r3, #1
   dceda:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   dcede:	61e3      	str	r3, [r4, #28]
   dcee0:	6923      	ldr	r3, [r4, #16]
   dcee2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   dcee6:	60e3      	str	r3, [r4, #12]
   dcee8:	f001 f917 	bl	de11a <__tz_unlock>
   dceec:	4620      	mov	r0, r4
   dceee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dcef2:	bf00      	nop
   dcef4:	000e0064 	.word	0x000e0064
   dcef8:	2003e7e4 	.word	0x2003e7e4

000dcefc <_localeconv_r>:
   dcefc:	4800      	ldr	r0, [pc, #0]	; (dcf00 <_localeconv_r+0x4>)
   dcefe:	4770      	bx	lr
   dcf00:	2003d3d0 	.word	0x2003d3d0

000dcf04 <memcmp>:
   dcf04:	b510      	push	{r4, lr}
   dcf06:	3901      	subs	r1, #1
   dcf08:	4402      	add	r2, r0
   dcf0a:	4290      	cmp	r0, r2
   dcf0c:	d007      	beq.n	dcf1e <memcmp+0x1a>
   dcf0e:	f810 3b01 	ldrb.w	r3, [r0], #1
   dcf12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dcf16:	42a3      	cmp	r3, r4
   dcf18:	d0f7      	beq.n	dcf0a <memcmp+0x6>
   dcf1a:	1b18      	subs	r0, r3, r4
   dcf1c:	bd10      	pop	{r4, pc}
   dcf1e:	2000      	movs	r0, #0
   dcf20:	bd10      	pop	{r4, pc}

000dcf22 <memcpy>:
   dcf22:	b510      	push	{r4, lr}
   dcf24:	1e43      	subs	r3, r0, #1
   dcf26:	440a      	add	r2, r1
   dcf28:	4291      	cmp	r1, r2
   dcf2a:	d004      	beq.n	dcf36 <memcpy+0x14>
   dcf2c:	f811 4b01 	ldrb.w	r4, [r1], #1
   dcf30:	f803 4f01 	strb.w	r4, [r3, #1]!
   dcf34:	e7f8      	b.n	dcf28 <memcpy+0x6>
   dcf36:	bd10      	pop	{r4, pc}

000dcf38 <memmove>:
   dcf38:	4288      	cmp	r0, r1
   dcf3a:	b510      	push	{r4, lr}
   dcf3c:	eb01 0302 	add.w	r3, r1, r2
   dcf40:	d801      	bhi.n	dcf46 <memmove+0xe>
   dcf42:	1e42      	subs	r2, r0, #1
   dcf44:	e00b      	b.n	dcf5e <memmove+0x26>
   dcf46:	4298      	cmp	r0, r3
   dcf48:	d2fb      	bcs.n	dcf42 <memmove+0xa>
   dcf4a:	1881      	adds	r1, r0, r2
   dcf4c:	1ad2      	subs	r2, r2, r3
   dcf4e:	42d3      	cmn	r3, r2
   dcf50:	d004      	beq.n	dcf5c <memmove+0x24>
   dcf52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dcf56:	f801 4d01 	strb.w	r4, [r1, #-1]!
   dcf5a:	e7f8      	b.n	dcf4e <memmove+0x16>
   dcf5c:	bd10      	pop	{r4, pc}
   dcf5e:	4299      	cmp	r1, r3
   dcf60:	d004      	beq.n	dcf6c <memmove+0x34>
   dcf62:	f811 4b01 	ldrb.w	r4, [r1], #1
   dcf66:	f802 4f01 	strb.w	r4, [r2, #1]!
   dcf6a:	e7f8      	b.n	dcf5e <memmove+0x26>
   dcf6c:	bd10      	pop	{r4, pc}

000dcf6e <memset>:
   dcf6e:	4402      	add	r2, r0
   dcf70:	4603      	mov	r3, r0
   dcf72:	4293      	cmp	r3, r2
   dcf74:	d002      	beq.n	dcf7c <memset+0xe>
   dcf76:	f803 1b01 	strb.w	r1, [r3], #1
   dcf7a:	e7fa      	b.n	dcf72 <memset+0x4>
   dcf7c:	4770      	bx	lr
	...

000dcf80 <srand>:
   dcf80:	b538      	push	{r3, r4, r5, lr}
   dcf82:	4b12      	ldr	r3, [pc, #72]	; (dcfcc <srand+0x4c>)
   dcf84:	681c      	ldr	r4, [r3, #0]
   dcf86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dcf88:	4605      	mov	r5, r0
   dcf8a:	b9d3      	cbnz	r3, dcfc2 <srand+0x42>
   dcf8c:	2018      	movs	r0, #24
   dcf8e:	f7fb f9f1 	bl	d8374 <malloc>
   dcf92:	f243 330e 	movw	r3, #13070	; 0x330e
   dcf96:	63a0      	str	r0, [r4, #56]	; 0x38
   dcf98:	8003      	strh	r3, [r0, #0]
   dcf9a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dcf9e:	8043      	strh	r3, [r0, #2]
   dcfa0:	f241 2334 	movw	r3, #4660	; 0x1234
   dcfa4:	8083      	strh	r3, [r0, #4]
   dcfa6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dcfaa:	80c3      	strh	r3, [r0, #6]
   dcfac:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dcfb0:	8103      	strh	r3, [r0, #8]
   dcfb2:	2305      	movs	r3, #5
   dcfb4:	8143      	strh	r3, [r0, #10]
   dcfb6:	230b      	movs	r3, #11
   dcfb8:	8183      	strh	r3, [r0, #12]
   dcfba:	2201      	movs	r2, #1
   dcfbc:	2300      	movs	r3, #0
   dcfbe:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dcfc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dcfc4:	2200      	movs	r2, #0
   dcfc6:	611d      	str	r5, [r3, #16]
   dcfc8:	615a      	str	r2, [r3, #20]
   dcfca:	bd38      	pop	{r3, r4, r5, pc}
   dcfcc:	2003d3cc 	.word	0x2003d3cc

000dcfd0 <strcat>:
   dcfd0:	b510      	push	{r4, lr}
   dcfd2:	4602      	mov	r2, r0
   dcfd4:	4613      	mov	r3, r2
   dcfd6:	3201      	adds	r2, #1
   dcfd8:	781c      	ldrb	r4, [r3, #0]
   dcfda:	2c00      	cmp	r4, #0
   dcfdc:	d1fa      	bne.n	dcfd4 <strcat+0x4>
   dcfde:	3b01      	subs	r3, #1
   dcfe0:	f811 2b01 	ldrb.w	r2, [r1], #1
   dcfe4:	f803 2f01 	strb.w	r2, [r3, #1]!
   dcfe8:	2a00      	cmp	r2, #0
   dcfea:	d1f9      	bne.n	dcfe0 <strcat+0x10>
   dcfec:	bd10      	pop	{r4, pc}

000dcfee <strchr>:
   dcfee:	b2c9      	uxtb	r1, r1
   dcff0:	4603      	mov	r3, r0
   dcff2:	f810 2b01 	ldrb.w	r2, [r0], #1
   dcff6:	b11a      	cbz	r2, dd000 <strchr+0x12>
   dcff8:	4291      	cmp	r1, r2
   dcffa:	d1f9      	bne.n	dcff0 <strchr+0x2>
   dcffc:	4618      	mov	r0, r3
   dcffe:	4770      	bx	lr
   dd000:	2900      	cmp	r1, #0
   dd002:	bf0c      	ite	eq
   dd004:	4618      	moveq	r0, r3
   dd006:	2000      	movne	r0, #0
   dd008:	4770      	bx	lr

000dd00a <strchrnul>:
   dd00a:	b510      	push	{r4, lr}
   dd00c:	4604      	mov	r4, r0
   dd00e:	f7ff ffee 	bl	dcfee <strchr>
   dd012:	b918      	cbnz	r0, dd01c <strchrnul+0x12>
   dd014:	4620      	mov	r0, r4
   dd016:	f000 f830 	bl	dd07a <strlen>
   dd01a:	4420      	add	r0, r4
   dd01c:	bd10      	pop	{r4, pc}

000dd01e <strcmp>:
   dd01e:	f810 2b01 	ldrb.w	r2, [r0], #1
   dd022:	f811 3b01 	ldrb.w	r3, [r1], #1
   dd026:	2a01      	cmp	r2, #1
   dd028:	bf28      	it	cs
   dd02a:	429a      	cmpcs	r2, r3
   dd02c:	d0f7      	beq.n	dd01e <strcmp>
   dd02e:	1ad0      	subs	r0, r2, r3
   dd030:	4770      	bx	lr

000dd032 <strcpy>:
   dd032:	4603      	mov	r3, r0
   dd034:	f811 2b01 	ldrb.w	r2, [r1], #1
   dd038:	f803 2b01 	strb.w	r2, [r3], #1
   dd03c:	2a00      	cmp	r2, #0
   dd03e:	d1f9      	bne.n	dd034 <strcpy+0x2>
   dd040:	4770      	bx	lr
	...

000dd044 <strdup>:
   dd044:	4b02      	ldr	r3, [pc, #8]	; (dd050 <strdup+0xc>)
   dd046:	4601      	mov	r1, r0
   dd048:	6818      	ldr	r0, [r3, #0]
   dd04a:	f000 b803 	b.w	dd054 <_strdup_r>
   dd04e:	bf00      	nop
   dd050:	2003d3cc 	.word	0x2003d3cc

000dd054 <_strdup_r>:
   dd054:	b570      	push	{r4, r5, r6, lr}
   dd056:	4606      	mov	r6, r0
   dd058:	4608      	mov	r0, r1
   dd05a:	460c      	mov	r4, r1
   dd05c:	f000 f80d 	bl	dd07a <strlen>
   dd060:	1c45      	adds	r5, r0, #1
   dd062:	4629      	mov	r1, r5
   dd064:	4630      	mov	r0, r6
   dd066:	f7fb f9c5 	bl	d83f4 <_malloc_r>
   dd06a:	4606      	mov	r6, r0
   dd06c:	b118      	cbz	r0, dd076 <_strdup_r+0x22>
   dd06e:	462a      	mov	r2, r5
   dd070:	4621      	mov	r1, r4
   dd072:	f7ff ff56 	bl	dcf22 <memcpy>
   dd076:	4630      	mov	r0, r6
   dd078:	bd70      	pop	{r4, r5, r6, pc}

000dd07a <strlen>:
   dd07a:	4603      	mov	r3, r0
   dd07c:	f813 2b01 	ldrb.w	r2, [r3], #1
   dd080:	2a00      	cmp	r2, #0
   dd082:	d1fb      	bne.n	dd07c <strlen+0x2>
   dd084:	1a18      	subs	r0, r3, r0
   dd086:	3801      	subs	r0, #1
   dd088:	4770      	bx	lr
	...

000dd08c <strlwr>:
   dd08c:	b510      	push	{r4, lr}
   dd08e:	4c08      	ldr	r4, [pc, #32]	; (dd0b0 <strlwr+0x24>)
   dd090:	4602      	mov	r2, r0
   dd092:	7813      	ldrb	r3, [r2, #0]
   dd094:	b153      	cbz	r3, dd0ac <strlwr+0x20>
   dd096:	6821      	ldr	r1, [r4, #0]
   dd098:	4419      	add	r1, r3
   dd09a:	7849      	ldrb	r1, [r1, #1]
   dd09c:	f001 0103 	and.w	r1, r1, #3
   dd0a0:	2901      	cmp	r1, #1
   dd0a2:	bf08      	it	eq
   dd0a4:	3320      	addeq	r3, #32
   dd0a6:	f802 3b01 	strb.w	r3, [r2], #1
   dd0aa:	e7f2      	b.n	dd092 <strlwr+0x6>
   dd0ac:	bd10      	pop	{r4, pc}
   dd0ae:	bf00      	nop
   dd0b0:	2003d368 	.word	0x2003d368

000dd0b4 <strncmp>:
   dd0b4:	b530      	push	{r4, r5, lr}
   dd0b6:	b182      	cbz	r2, dd0da <strncmp+0x26>
   dd0b8:	1e45      	subs	r5, r0, #1
   dd0ba:	3901      	subs	r1, #1
   dd0bc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dd0c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dd0c4:	42a3      	cmp	r3, r4
   dd0c6:	d106      	bne.n	dd0d6 <strncmp+0x22>
   dd0c8:	43ec      	mvns	r4, r5
   dd0ca:	4414      	add	r4, r2
   dd0cc:	42e0      	cmn	r0, r4
   dd0ce:	d001      	beq.n	dd0d4 <strncmp+0x20>
   dd0d0:	2b00      	cmp	r3, #0
   dd0d2:	d1f3      	bne.n	dd0bc <strncmp+0x8>
   dd0d4:	461c      	mov	r4, r3
   dd0d6:	1b18      	subs	r0, r3, r4
   dd0d8:	bd30      	pop	{r4, r5, pc}
   dd0da:	4610      	mov	r0, r2
   dd0dc:	bd30      	pop	{r4, r5, pc}

000dd0de <strnlen>:
   dd0de:	b510      	push	{r4, lr}
   dd0e0:	4603      	mov	r3, r0
   dd0e2:	4401      	add	r1, r0
   dd0e4:	428b      	cmp	r3, r1
   dd0e6:	d004      	beq.n	dd0f2 <strnlen+0x14>
   dd0e8:	781a      	ldrb	r2, [r3, #0]
   dd0ea:	1c5c      	adds	r4, r3, #1
   dd0ec:	b10a      	cbz	r2, dd0f2 <strnlen+0x14>
   dd0ee:	4623      	mov	r3, r4
   dd0f0:	e7f8      	b.n	dd0e4 <strnlen+0x6>
   dd0f2:	1a18      	subs	r0, r3, r0
   dd0f4:	bd10      	pop	{r4, pc}

000dd0f6 <strrchr>:
   dd0f6:	b538      	push	{r3, r4, r5, lr}
   dd0f8:	4603      	mov	r3, r0
   dd0fa:	460d      	mov	r5, r1
   dd0fc:	b141      	cbz	r1, dd110 <strrchr+0x1a>
   dd0fe:	2400      	movs	r4, #0
   dd100:	4629      	mov	r1, r5
   dd102:	4618      	mov	r0, r3
   dd104:	f7ff ff73 	bl	dcfee <strchr>
   dd108:	b130      	cbz	r0, dd118 <strrchr+0x22>
   dd10a:	1c43      	adds	r3, r0, #1
   dd10c:	4604      	mov	r4, r0
   dd10e:	e7f7      	b.n	dd100 <strrchr+0xa>
   dd110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dd114:	f7ff bf6b 	b.w	dcfee <strchr>
   dd118:	4620      	mov	r0, r4
   dd11a:	bd38      	pop	{r3, r4, r5, pc}

000dd11c <strstr>:
   dd11c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd11e:	7803      	ldrb	r3, [r0, #0]
   dd120:	b963      	cbnz	r3, dd13c <strstr+0x20>
   dd122:	780b      	ldrb	r3, [r1, #0]
   dd124:	2b00      	cmp	r3, #0
   dd126:	bf18      	it	ne
   dd128:	2000      	movne	r0, #0
   dd12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd12c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   dd130:	b162      	cbz	r2, dd14c <strstr+0x30>
   dd132:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   dd136:	4297      	cmp	r7, r2
   dd138:	4630      	mov	r0, r6
   dd13a:	d0f7      	beq.n	dd12c <strstr+0x10>
   dd13c:	4603      	mov	r3, r0
   dd13e:	1c46      	adds	r6, r0, #1
   dd140:	7800      	ldrb	r0, [r0, #0]
   dd142:	b110      	cbz	r0, dd14a <strstr+0x2e>
   dd144:	1e4d      	subs	r5, r1, #1
   dd146:	1e5c      	subs	r4, r3, #1
   dd148:	e7f0      	b.n	dd12c <strstr+0x10>
   dd14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd14c:	4618      	mov	r0, r3
   dd14e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dd150 <sulp>:
   dd150:	b570      	push	{r4, r5, r6, lr}
   dd152:	4604      	mov	r4, r0
   dd154:	460d      	mov	r5, r1
   dd156:	ec45 4b10 	vmov	d0, r4, r5
   dd15a:	4616      	mov	r6, r2
   dd15c:	f002 f828 	bl	df1b0 <__ulp>
   dd160:	ec51 0b10 	vmov	r0, r1, d0
   dd164:	b17e      	cbz	r6, dd186 <sulp+0x36>
   dd166:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dd16a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dd16e:	2b00      	cmp	r3, #0
   dd170:	dd09      	ble.n	dd186 <sulp+0x36>
   dd172:	051b      	lsls	r3, r3, #20
   dd174:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dd178:	2400      	movs	r4, #0
   dd17a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dd17e:	4622      	mov	r2, r4
   dd180:	462b      	mov	r3, r5
   dd182:	f7ff fa71 	bl	dc668 <__aeabi_dmul>
   dd186:	bd70      	pop	{r4, r5, r6, pc}

000dd188 <_strtod_r>:
   dd188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd18c:	b09d      	sub	sp, #116	; 0x74
   dd18e:	2300      	movs	r3, #0
   dd190:	9002      	str	r0, [sp, #8]
   dd192:	460c      	mov	r4, r1
   dd194:	9213      	str	r2, [sp, #76]	; 0x4c
   dd196:	9318      	str	r3, [sp, #96]	; 0x60
   dd198:	f04f 0a00 	mov.w	sl, #0
   dd19c:	f04f 0b00 	mov.w	fp, #0
   dd1a0:	9117      	str	r1, [sp, #92]	; 0x5c
   dd1a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd1a4:	781a      	ldrb	r2, [r3, #0]
   dd1a6:	2a0d      	cmp	r2, #13
   dd1a8:	d805      	bhi.n	dd1b6 <_strtod_r+0x2e>
   dd1aa:	2a09      	cmp	r2, #9
   dd1ac:	d213      	bcs.n	dd1d6 <_strtod_r+0x4e>
   dd1ae:	2a00      	cmp	r2, #0
   dd1b0:	f000 81ac 	beq.w	dd50c <_strtod_r+0x384>
   dd1b4:	e012      	b.n	dd1dc <_strtod_r+0x54>
   dd1b6:	2a2b      	cmp	r2, #43	; 0x2b
   dd1b8:	d004      	beq.n	dd1c4 <_strtod_r+0x3c>
   dd1ba:	2a2d      	cmp	r2, #45	; 0x2d
   dd1bc:	d004      	beq.n	dd1c8 <_strtod_r+0x40>
   dd1be:	2a20      	cmp	r2, #32
   dd1c0:	d10c      	bne.n	dd1dc <_strtod_r+0x54>
   dd1c2:	e008      	b.n	dd1d6 <_strtod_r+0x4e>
   dd1c4:	2200      	movs	r2, #0
   dd1c6:	e000      	b.n	dd1ca <_strtod_r+0x42>
   dd1c8:	2201      	movs	r2, #1
   dd1ca:	920c      	str	r2, [sp, #48]	; 0x30
   dd1cc:	1c5a      	adds	r2, r3, #1
   dd1ce:	9217      	str	r2, [sp, #92]	; 0x5c
   dd1d0:	785b      	ldrb	r3, [r3, #1]
   dd1d2:	b92b      	cbnz	r3, dd1e0 <_strtod_r+0x58>
   dd1d4:	e19a      	b.n	dd50c <_strtod_r+0x384>
   dd1d6:	3301      	adds	r3, #1
   dd1d8:	9317      	str	r3, [sp, #92]	; 0x5c
   dd1da:	e7e2      	b.n	dd1a2 <_strtod_r+0x1a>
   dd1dc:	2300      	movs	r3, #0
   dd1de:	930c      	str	r3, [sp, #48]	; 0x30
   dd1e0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   dd1e2:	782b      	ldrb	r3, [r5, #0]
   dd1e4:	2b30      	cmp	r3, #48	; 0x30
   dd1e6:	d15c      	bne.n	dd2a2 <_strtod_r+0x11a>
   dd1e8:	786b      	ldrb	r3, [r5, #1]
   dd1ea:	2b58      	cmp	r3, #88	; 0x58
   dd1ec:	d001      	beq.n	dd1f2 <_strtod_r+0x6a>
   dd1ee:	2b78      	cmp	r3, #120	; 0x78
   dd1f0:	d14c      	bne.n	dd28c <_strtod_r+0x104>
   dd1f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dd1f4:	9301      	str	r3, [sp, #4]
   dd1f6:	ab18      	add	r3, sp, #96	; 0x60
   dd1f8:	9300      	str	r3, [sp, #0]
   dd1fa:	4aa9      	ldr	r2, [pc, #676]	; (dd4a0 <_strtod_r+0x318>)
   dd1fc:	9802      	ldr	r0, [sp, #8]
   dd1fe:	ab19      	add	r3, sp, #100	; 0x64
   dd200:	a917      	add	r1, sp, #92	; 0x5c
   dd202:	f001 f95c 	bl	de4be <__gethex>
   dd206:	f010 0607 	ands.w	r6, r0, #7
   dd20a:	4604      	mov	r4, r0
   dd20c:	f000 8587 	beq.w	ddd1e <_strtod_r+0xb96>
   dd210:	2e06      	cmp	r6, #6
   dd212:	d105      	bne.n	dd220 <_strtod_r+0x98>
   dd214:	3501      	adds	r5, #1
   dd216:	2300      	movs	r3, #0
   dd218:	9517      	str	r5, [sp, #92]	; 0x5c
   dd21a:	930c      	str	r3, [sp, #48]	; 0x30
   dd21c:	f000 bd7f 	b.w	ddd1e <_strtod_r+0xb96>
   dd220:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dd222:	b13a      	cbz	r2, dd234 <_strtod_r+0xac>
   dd224:	2135      	movs	r1, #53	; 0x35
   dd226:	a81a      	add	r0, sp, #104	; 0x68
   dd228:	f002 f8af 	bl	df38a <__copybits>
   dd22c:	9918      	ldr	r1, [sp, #96]	; 0x60
   dd22e:	9802      	ldr	r0, [sp, #8]
   dd230:	f001 fd2d 	bl	dec8e <_Bfree>
   dd234:	2e06      	cmp	r6, #6
   dd236:	d822      	bhi.n	dd27e <_strtod_r+0xf6>
   dd238:	e8df f006 	tbb	[pc, r6]
   dd23c:	18080d04 	.word	0x18080d04
   dd240:	0d1d      	.short	0x0d1d
   dd242:	04          	.byte	0x04
   dd243:	00          	.byte	0x00
   dd244:	f04f 0b00 	mov.w	fp, #0
   dd248:	46da      	mov	sl, fp
   dd24a:	e018      	b.n	dd27e <_strtod_r+0xf6>
   dd24c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dd250:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   dd254:	e013      	b.n	dd27e <_strtod_r+0xf6>
   dd256:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   dd258:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dd25a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dd25e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dd262:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dd266:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dd26a:	e008      	b.n	dd27e <_strtod_r+0xf6>
   dd26c:	f8df b234 	ldr.w	fp, [pc, #564]	; dd4a4 <_strtod_r+0x31c>
   dd270:	f04f 0a00 	mov.w	sl, #0
   dd274:	e003      	b.n	dd27e <_strtod_r+0xf6>
   dd276:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dd27a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dd27e:	0721      	lsls	r1, r4, #28
   dd280:	f140 854d 	bpl.w	ddd1e <_strtod_r+0xb96>
   dd284:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dd288:	f000 bd49 	b.w	ddd1e <_strtod_r+0xb96>
   dd28c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd28e:	1c5a      	adds	r2, r3, #1
   dd290:	9217      	str	r2, [sp, #92]	; 0x5c
   dd292:	785b      	ldrb	r3, [r3, #1]
   dd294:	2b30      	cmp	r3, #48	; 0x30
   dd296:	d0f9      	beq.n	dd28c <_strtod_r+0x104>
   dd298:	2b00      	cmp	r3, #0
   dd29a:	f000 8540 	beq.w	ddd1e <_strtod_r+0xb96>
   dd29e:	2301      	movs	r3, #1
   dd2a0:	e000      	b.n	dd2a4 <_strtod_r+0x11c>
   dd2a2:	2300      	movs	r3, #0
   dd2a4:	f04f 0800 	mov.w	r8, #0
   dd2a8:	9306      	str	r3, [sp, #24]
   dd2aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd2ac:	9307      	str	r3, [sp, #28]
   dd2ae:	f8cd 8014 	str.w	r8, [sp, #20]
   dd2b2:	f8cd 8010 	str.w	r8, [sp, #16]
   dd2b6:	220a      	movs	r2, #10
   dd2b8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   dd2ba:	782e      	ldrb	r6, [r5, #0]
   dd2bc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dd2c0:	b2d9      	uxtb	r1, r3
   dd2c2:	2909      	cmp	r1, #9
   dd2c4:	d80e      	bhi.n	dd2e4 <_strtod_r+0x15c>
   dd2c6:	9904      	ldr	r1, [sp, #16]
   dd2c8:	2908      	cmp	r1, #8
   dd2ca:	bfdd      	ittte	le
   dd2cc:	9905      	ldrle	r1, [sp, #20]
   dd2ce:	fb02 3301 	mlale	r3, r2, r1, r3
   dd2d2:	9305      	strle	r3, [sp, #20]
   dd2d4:	fb02 3808 	mlagt	r8, r2, r8, r3
   dd2d8:	9b04      	ldr	r3, [sp, #16]
   dd2da:	3501      	adds	r5, #1
   dd2dc:	3301      	adds	r3, #1
   dd2de:	9304      	str	r3, [sp, #16]
   dd2e0:	9517      	str	r5, [sp, #92]	; 0x5c
   dd2e2:	e7e9      	b.n	dd2b8 <_strtod_r+0x130>
   dd2e4:	9802      	ldr	r0, [sp, #8]
   dd2e6:	f7ff fe09 	bl	dcefc <_localeconv_r>
   dd2ea:	6807      	ldr	r7, [r0, #0]
   dd2ec:	9802      	ldr	r0, [sp, #8]
   dd2ee:	f7ff fe05 	bl	dcefc <_localeconv_r>
   dd2f2:	6800      	ldr	r0, [r0, #0]
   dd2f4:	f7ff fec1 	bl	dd07a <strlen>
   dd2f8:	4639      	mov	r1, r7
   dd2fa:	4602      	mov	r2, r0
   dd2fc:	4628      	mov	r0, r5
   dd2fe:	f7ff fed9 	bl	dd0b4 <strncmp>
   dd302:	4607      	mov	r7, r0
   dd304:	b128      	cbz	r0, dd312 <_strtod_r+0x18a>
   dd306:	2000      	movs	r0, #0
   dd308:	4633      	mov	r3, r6
   dd30a:	9d04      	ldr	r5, [sp, #16]
   dd30c:	4602      	mov	r2, r0
   dd30e:	4601      	mov	r1, r0
   dd310:	e057      	b.n	dd3c2 <_strtod_r+0x23a>
   dd312:	9802      	ldr	r0, [sp, #8]
   dd314:	f7ff fdf2 	bl	dcefc <_localeconv_r>
   dd318:	6800      	ldr	r0, [r0, #0]
   dd31a:	f7ff feae 	bl	dd07a <strlen>
   dd31e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd320:	181a      	adds	r2, r3, r0
   dd322:	9217      	str	r2, [sp, #92]	; 0x5c
   dd324:	9a04      	ldr	r2, [sp, #16]
   dd326:	5c1b      	ldrb	r3, [r3, r0]
   dd328:	2a00      	cmp	r2, #0
   dd32a:	d142      	bne.n	dd3b2 <_strtod_r+0x22a>
   dd32c:	4610      	mov	r0, r2
   dd32e:	2b30      	cmp	r3, #48	; 0x30
   dd330:	d105      	bne.n	dd33e <_strtod_r+0x1b6>
   dd332:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd334:	1c5a      	adds	r2, r3, #1
   dd336:	9217      	str	r2, [sp, #92]	; 0x5c
   dd338:	3001      	adds	r0, #1
   dd33a:	785b      	ldrb	r3, [r3, #1]
   dd33c:	e7f7      	b.n	dd32e <_strtod_r+0x1a6>
   dd33e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dd342:	2a08      	cmp	r2, #8
   dd344:	d843      	bhi.n	dd3ce <_strtod_r+0x246>
   dd346:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   dd348:	9207      	str	r2, [sp, #28]
   dd34a:	4602      	mov	r2, r0
   dd34c:	2000      	movs	r0, #0
   dd34e:	4605      	mov	r5, r0
   dd350:	3b30      	subs	r3, #48	; 0x30
   dd352:	f100 0101 	add.w	r1, r0, #1
   dd356:	d026      	beq.n	dd3a6 <_strtod_r+0x21e>
   dd358:	440a      	add	r2, r1
   dd35a:	eb05 0c00 	add.w	ip, r5, r0
   dd35e:	4629      	mov	r1, r5
   dd360:	260a      	movs	r6, #10
   dd362:	4561      	cmp	r1, ip
   dd364:	d00e      	beq.n	dd384 <_strtod_r+0x1fc>
   dd366:	3101      	adds	r1, #1
   dd368:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   dd36c:	f1be 0f08 	cmp.w	lr, #8
   dd370:	dc03      	bgt.n	dd37a <_strtod_r+0x1f2>
   dd372:	9f05      	ldr	r7, [sp, #20]
   dd374:	4377      	muls	r7, r6
   dd376:	9705      	str	r7, [sp, #20]
   dd378:	e7f3      	b.n	dd362 <_strtod_r+0x1da>
   dd37a:	2910      	cmp	r1, #16
   dd37c:	bfd8      	it	le
   dd37e:	fb06 f808 	mulle.w	r8, r6, r8
   dd382:	e7ee      	b.n	dd362 <_strtod_r+0x1da>
   dd384:	4428      	add	r0, r5
   dd386:	2808      	cmp	r0, #8
   dd388:	f100 0501 	add.w	r5, r0, #1
   dd38c:	dc05      	bgt.n	dd39a <_strtod_r+0x212>
   dd38e:	9805      	ldr	r0, [sp, #20]
   dd390:	210a      	movs	r1, #10
   dd392:	fb01 3300 	mla	r3, r1, r0, r3
   dd396:	9305      	str	r3, [sp, #20]
   dd398:	e004      	b.n	dd3a4 <_strtod_r+0x21c>
   dd39a:	2d10      	cmp	r5, #16
   dd39c:	bfdc      	itt	le
   dd39e:	210a      	movle	r1, #10
   dd3a0:	fb01 3808 	mlale	r8, r1, r8, r3
   dd3a4:	2100      	movs	r1, #0
   dd3a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd3a8:	1c58      	adds	r0, r3, #1
   dd3aa:	9017      	str	r0, [sp, #92]	; 0x5c
   dd3ac:	785b      	ldrb	r3, [r3, #1]
   dd3ae:	4608      	mov	r0, r1
   dd3b0:	e002      	b.n	dd3b8 <_strtod_r+0x230>
   dd3b2:	9d04      	ldr	r5, [sp, #16]
   dd3b4:	4638      	mov	r0, r7
   dd3b6:	463a      	mov	r2, r7
   dd3b8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dd3bc:	2909      	cmp	r1, #9
   dd3be:	d9c7      	bls.n	dd350 <_strtod_r+0x1c8>
   dd3c0:	2101      	movs	r1, #1
   dd3c2:	2b65      	cmp	r3, #101	; 0x65
   dd3c4:	d001      	beq.n	dd3ca <_strtod_r+0x242>
   dd3c6:	2b45      	cmp	r3, #69	; 0x45
   dd3c8:	d151      	bne.n	dd46e <_strtod_r+0x2e6>
   dd3ca:	b96d      	cbnz	r5, dd3e8 <_strtod_r+0x260>
   dd3cc:	e004      	b.n	dd3d8 <_strtod_r+0x250>
   dd3ce:	2b65      	cmp	r3, #101	; 0x65
   dd3d0:	f040 84b3 	bne.w	ddd3a <_strtod_r+0xbb2>
   dd3d4:	2200      	movs	r2, #0
   dd3d6:	2101      	movs	r1, #1
   dd3d8:	b928      	cbnz	r0, dd3e6 <_strtod_r+0x25e>
   dd3da:	9b06      	ldr	r3, [sp, #24]
   dd3dc:	2b00      	cmp	r3, #0
   dd3de:	f000 8095 	beq.w	dd50c <_strtod_r+0x384>
   dd3e2:	4605      	mov	r5, r0
   dd3e4:	e000      	b.n	dd3e8 <_strtod_r+0x260>
   dd3e6:	2500      	movs	r5, #0
   dd3e8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   dd3ea:	1c63      	adds	r3, r4, #1
   dd3ec:	9317      	str	r3, [sp, #92]	; 0x5c
   dd3ee:	7863      	ldrb	r3, [r4, #1]
   dd3f0:	2b2b      	cmp	r3, #43	; 0x2b
   dd3f2:	d006      	beq.n	dd402 <_strtod_r+0x27a>
   dd3f4:	2b2d      	cmp	r3, #45	; 0x2d
   dd3f6:	d002      	beq.n	dd3fe <_strtod_r+0x276>
   dd3f8:	2600      	movs	r6, #0
   dd3fa:	9603      	str	r6, [sp, #12]
   dd3fc:	e006      	b.n	dd40c <_strtod_r+0x284>
   dd3fe:	2301      	movs	r3, #1
   dd400:	e000      	b.n	dd404 <_strtod_r+0x27c>
   dd402:	2300      	movs	r3, #0
   dd404:	9303      	str	r3, [sp, #12]
   dd406:	1ca3      	adds	r3, r4, #2
   dd408:	9317      	str	r3, [sp, #92]	; 0x5c
   dd40a:	78a3      	ldrb	r3, [r4, #2]
   dd40c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dd410:	2e09      	cmp	r6, #9
   dd412:	d82b      	bhi.n	dd46c <_strtod_r+0x2e4>
   dd414:	2b30      	cmp	r3, #48	; 0x30
   dd416:	d104      	bne.n	dd422 <_strtod_r+0x29a>
   dd418:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd41a:	1c5e      	adds	r6, r3, #1
   dd41c:	9617      	str	r6, [sp, #92]	; 0x5c
   dd41e:	785b      	ldrb	r3, [r3, #1]
   dd420:	e7f8      	b.n	dd414 <_strtod_r+0x28c>
   dd422:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   dd426:	2e08      	cmp	r6, #8
   dd428:	d821      	bhi.n	dd46e <_strtod_r+0x2e6>
   dd42a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dd42e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd430:	f04f 0c0a 	mov.w	ip, #10
   dd434:	461f      	mov	r7, r3
   dd436:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd438:	1c5e      	adds	r6, r3, #1
   dd43a:	9617      	str	r6, [sp, #92]	; 0x5c
   dd43c:	785b      	ldrb	r3, [r3, #1]
   dd43e:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   dd442:	f1b9 0f09 	cmp.w	r9, #9
   dd446:	d804      	bhi.n	dd452 <_strtod_r+0x2ca>
   dd448:	fb0c 3e0e 	mla	lr, ip, lr, r3
   dd44c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dd450:	e7f1      	b.n	dd436 <_strtod_r+0x2ae>
   dd452:	1bf6      	subs	r6, r6, r7
   dd454:	2e08      	cmp	r6, #8
   dd456:	f644 691f 	movw	r9, #19999	; 0x4e1f
   dd45a:	dc02      	bgt.n	dd462 <_strtod_r+0x2da>
   dd45c:	45f1      	cmp	r9, lr
   dd45e:	bfa8      	it	ge
   dd460:	46f1      	movge	r9, lr
   dd462:	9e03      	ldr	r6, [sp, #12]
   dd464:	b12e      	cbz	r6, dd472 <_strtod_r+0x2ea>
   dd466:	f1c9 0900 	rsb	r9, r9, #0
   dd46a:	e002      	b.n	dd472 <_strtod_r+0x2ea>
   dd46c:	9417      	str	r4, [sp, #92]	; 0x5c
   dd46e:	f04f 0900 	mov.w	r9, #0
   dd472:	2d00      	cmp	r5, #0
   dd474:	d153      	bne.n	dd51e <_strtod_r+0x396>
   dd476:	2800      	cmp	r0, #0
   dd478:	f040 8451 	bne.w	ddd1e <_strtod_r+0xb96>
   dd47c:	9a06      	ldr	r2, [sp, #24]
   dd47e:	2a00      	cmp	r2, #0
   dd480:	f040 844d 	bne.w	ddd1e <_strtod_r+0xb96>
   dd484:	2900      	cmp	r1, #0
   dd486:	d141      	bne.n	dd50c <_strtod_r+0x384>
   dd488:	2b4e      	cmp	r3, #78	; 0x4e
   dd48a:	d020      	beq.n	dd4ce <_strtod_r+0x346>
   dd48c:	dc02      	bgt.n	dd494 <_strtod_r+0x30c>
   dd48e:	2b49      	cmp	r3, #73	; 0x49
   dd490:	d00a      	beq.n	dd4a8 <_strtod_r+0x320>
   dd492:	e03b      	b.n	dd50c <_strtod_r+0x384>
   dd494:	2b69      	cmp	r3, #105	; 0x69
   dd496:	d007      	beq.n	dd4a8 <_strtod_r+0x320>
   dd498:	2b6e      	cmp	r3, #110	; 0x6e
   dd49a:	d018      	beq.n	dd4ce <_strtod_r+0x346>
   dd49c:	e036      	b.n	dd50c <_strtod_r+0x384>
   dd49e:	bf00      	nop
   dd4a0:	000e00c4 	.word	0x000e00c4
   dd4a4:	7ff00000 	.word	0x7ff00000
   dd4a8:	49a8      	ldr	r1, [pc, #672]	; (dd74c <_strtod_r+0x5c4>)
   dd4aa:	a817      	add	r0, sp, #92	; 0x5c
   dd4ac:	f001 fa38 	bl	de920 <__match>
   dd4b0:	b360      	cbz	r0, dd50c <_strtod_r+0x384>
   dd4b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd4b4:	49a6      	ldr	r1, [pc, #664]	; (dd750 <_strtod_r+0x5c8>)
   dd4b6:	3b01      	subs	r3, #1
   dd4b8:	a817      	add	r0, sp, #92	; 0x5c
   dd4ba:	9317      	str	r3, [sp, #92]	; 0x5c
   dd4bc:	f001 fa30 	bl	de920 <__match>
   dd4c0:	b910      	cbnz	r0, dd4c8 <_strtod_r+0x340>
   dd4c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd4c4:	3301      	adds	r3, #1
   dd4c6:	9317      	str	r3, [sp, #92]	; 0x5c
   dd4c8:	f8df b2a0 	ldr.w	fp, [pc, #672]	; dd76c <_strtod_r+0x5e4>
   dd4cc:	e01a      	b.n	dd504 <_strtod_r+0x37c>
   dd4ce:	49a1      	ldr	r1, [pc, #644]	; (dd754 <_strtod_r+0x5cc>)
   dd4d0:	a817      	add	r0, sp, #92	; 0x5c
   dd4d2:	f001 fa25 	bl	de920 <__match>
   dd4d6:	b1c8      	cbz	r0, dd50c <_strtod_r+0x384>
   dd4d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd4da:	781b      	ldrb	r3, [r3, #0]
   dd4dc:	2b28      	cmp	r3, #40	; 0x28
   dd4de:	d10f      	bne.n	dd500 <_strtod_r+0x378>
   dd4e0:	aa1a      	add	r2, sp, #104	; 0x68
   dd4e2:	499d      	ldr	r1, [pc, #628]	; (dd758 <_strtod_r+0x5d0>)
   dd4e4:	a817      	add	r0, sp, #92	; 0x5c
   dd4e6:	f001 fa2e 	bl	de946 <__hexnan>
   dd4ea:	2805      	cmp	r0, #5
   dd4ec:	d108      	bne.n	dd500 <_strtod_r+0x378>
   dd4ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   dd4f0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dd4f4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dd4f8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dd4fc:	f000 bc0f 	b.w	ddd1e <_strtod_r+0xb96>
   dd500:	f8df b26c 	ldr.w	fp, [pc, #620]	; dd770 <_strtod_r+0x5e8>
   dd504:	f04f 0a00 	mov.w	sl, #0
   dd508:	f000 bc09 	b.w	ddd1e <_strtod_r+0xb96>
   dd50c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dd50e:	9417      	str	r4, [sp, #92]	; 0x5c
   dd510:	2b00      	cmp	r3, #0
   dd512:	f000 840f 	beq.w	ddd34 <_strtod_r+0xbac>
   dd516:	2300      	movs	r3, #0
   dd518:	930c      	str	r3, [sp, #48]	; 0x30
   dd51a:	f000 bc02 	b.w	ddd22 <_strtod_r+0xb9a>
   dd51e:	9b04      	ldr	r3, [sp, #16]
   dd520:	9805      	ldr	r0, [sp, #20]
   dd522:	2b00      	cmp	r3, #0
   dd524:	bf08      	it	eq
   dd526:	462b      	moveq	r3, r5
   dd528:	2d10      	cmp	r5, #16
   dd52a:	462c      	mov	r4, r5
   dd52c:	ebc2 0909 	rsb	r9, r2, r9
   dd530:	bfa8      	it	ge
   dd532:	2410      	movge	r4, #16
   dd534:	9304      	str	r3, [sp, #16]
   dd536:	f7ff f821 	bl	dc57c <__aeabi_ui2d>
   dd53a:	2c09      	cmp	r4, #9
   dd53c:	4682      	mov	sl, r0
   dd53e:	468b      	mov	fp, r1
   dd540:	dd13      	ble.n	dd56a <_strtod_r+0x3e2>
   dd542:	4b86      	ldr	r3, [pc, #536]	; (dd75c <_strtod_r+0x5d4>)
   dd544:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   dd548:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dd54c:	f7ff f88c 	bl	dc668 <__aeabi_dmul>
   dd550:	4606      	mov	r6, r0
   dd552:	4640      	mov	r0, r8
   dd554:	460f      	mov	r7, r1
   dd556:	f7ff f811 	bl	dc57c <__aeabi_ui2d>
   dd55a:	4602      	mov	r2, r0
   dd55c:	460b      	mov	r3, r1
   dd55e:	4630      	mov	r0, r6
   dd560:	4639      	mov	r1, r7
   dd562:	f7fe fecf 	bl	dc304 <__adddf3>
   dd566:	4682      	mov	sl, r0
   dd568:	468b      	mov	fp, r1
   dd56a:	2d0f      	cmp	r5, #15
   dd56c:	dc36      	bgt.n	dd5dc <_strtod_r+0x454>
   dd56e:	f1b9 0f00 	cmp.w	r9, #0
   dd572:	f000 83d4 	beq.w	ddd1e <_strtod_r+0xb96>
   dd576:	dd24      	ble.n	dd5c2 <_strtod_r+0x43a>
   dd578:	f1b9 0f16 	cmp.w	r9, #22
   dd57c:	dc07      	bgt.n	dd58e <_strtod_r+0x406>
   dd57e:	4d77      	ldr	r5, [pc, #476]	; (dd75c <_strtod_r+0x5d4>)
   dd580:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   dd584:	4652      	mov	r2, sl
   dd586:	465b      	mov	r3, fp
   dd588:	e9d9 0100 	ldrd	r0, r1, [r9]
   dd58c:	e014      	b.n	dd5b8 <_strtod_r+0x430>
   dd58e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dd592:	4599      	cmp	r9, r3
   dd594:	dc22      	bgt.n	dd5dc <_strtod_r+0x454>
   dd596:	4c71      	ldr	r4, [pc, #452]	; (dd75c <_strtod_r+0x5d4>)
   dd598:	f1c5 050f 	rsb	r5, r5, #15
   dd59c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dd5a0:	ebc5 0509 	rsb	r5, r5, r9
   dd5a4:	4652      	mov	r2, sl
   dd5a6:	465b      	mov	r3, fp
   dd5a8:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd5ac:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dd5b0:	f7ff f85a 	bl	dc668 <__aeabi_dmul>
   dd5b4:	e9d4 2300 	ldrd	r2, r3, [r4]
   dd5b8:	f7ff f856 	bl	dc668 <__aeabi_dmul>
   dd5bc:	4682      	mov	sl, r0
   dd5be:	468b      	mov	fp, r1
   dd5c0:	e3ad      	b.n	ddd1e <_strtod_r+0xb96>
   dd5c2:	f119 0f16 	cmn.w	r9, #22
   dd5c6:	db09      	blt.n	dd5dc <_strtod_r+0x454>
   dd5c8:	4d64      	ldr	r5, [pc, #400]	; (dd75c <_strtod_r+0x5d4>)
   dd5ca:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   dd5ce:	e9d9 2300 	ldrd	r2, r3, [r9]
   dd5d2:	4650      	mov	r0, sl
   dd5d4:	4659      	mov	r1, fp
   dd5d6:	f7ff f971 	bl	dc8bc <__aeabi_ddiv>
   dd5da:	e7ef      	b.n	dd5bc <_strtod_r+0x434>
   dd5dc:	1b2c      	subs	r4, r5, r4
   dd5de:	444c      	add	r4, r9
   dd5e0:	2c00      	cmp	r4, #0
   dd5e2:	dd57      	ble.n	dd694 <_strtod_r+0x50c>
   dd5e4:	f014 010f 	ands.w	r1, r4, #15
   dd5e8:	d00a      	beq.n	dd600 <_strtod_r+0x478>
   dd5ea:	4b5c      	ldr	r3, [pc, #368]	; (dd75c <_strtod_r+0x5d4>)
   dd5ec:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   dd5f0:	4652      	mov	r2, sl
   dd5f2:	465b      	mov	r3, fp
   dd5f4:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd5f8:	f7ff f836 	bl	dc668 <__aeabi_dmul>
   dd5fc:	4682      	mov	sl, r0
   dd5fe:	468b      	mov	fp, r1
   dd600:	f034 040f 	bics.w	r4, r4, #15
   dd604:	f000 80b8 	beq.w	dd778 <_strtod_r+0x5f0>
   dd608:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   dd60c:	dd0b      	ble.n	dd626 <_strtod_r+0x49e>
   dd60e:	2400      	movs	r4, #0
   dd610:	4625      	mov	r5, r4
   dd612:	9405      	str	r4, [sp, #20]
   dd614:	9404      	str	r4, [sp, #16]
   dd616:	9a02      	ldr	r2, [sp, #8]
   dd618:	f8df b150 	ldr.w	fp, [pc, #336]	; dd76c <_strtod_r+0x5e4>
   dd61c:	2322      	movs	r3, #34	; 0x22
   dd61e:	6013      	str	r3, [r2, #0]
   dd620:	f04f 0a00 	mov.w	sl, #0
   dd624:	e187      	b.n	dd936 <_strtod_r+0x7ae>
   dd626:	4e4e      	ldr	r6, [pc, #312]	; (dd760 <_strtod_r+0x5d8>)
   dd628:	2300      	movs	r3, #0
   dd62a:	1124      	asrs	r4, r4, #4
   dd62c:	4650      	mov	r0, sl
   dd62e:	4659      	mov	r1, fp
   dd630:	4698      	mov	r8, r3
   dd632:	4637      	mov	r7, r6
   dd634:	2c01      	cmp	r4, #1
   dd636:	dd0b      	ble.n	dd650 <_strtod_r+0x4c8>
   dd638:	07e2      	lsls	r2, r4, #31
   dd63a:	d504      	bpl.n	dd646 <_strtod_r+0x4be>
   dd63c:	e9d6 2300 	ldrd	r2, r3, [r6]
   dd640:	f7ff f812 	bl	dc668 <__aeabi_dmul>
   dd644:	2301      	movs	r3, #1
   dd646:	f108 0801 	add.w	r8, r8, #1
   dd64a:	1064      	asrs	r4, r4, #1
   dd64c:	3608      	adds	r6, #8
   dd64e:	e7f1      	b.n	dd634 <_strtod_r+0x4ac>
   dd650:	b10b      	cbz	r3, dd656 <_strtod_r+0x4ce>
   dd652:	4682      	mov	sl, r0
   dd654:	468b      	mov	fp, r1
   dd656:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dd65a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   dd65e:	4652      	mov	r2, sl
   dd660:	465b      	mov	r3, fp
   dd662:	e9d7 0100 	ldrd	r0, r1, [r7]
   dd666:	f7fe ffff 	bl	dc668 <__aeabi_dmul>
   dd66a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dd66e:	468b      	mov	fp, r1
   dd670:	460a      	mov	r2, r1
   dd672:	0d1b      	lsrs	r3, r3, #20
   dd674:	493b      	ldr	r1, [pc, #236]	; (dd764 <_strtod_r+0x5dc>)
   dd676:	051b      	lsls	r3, r3, #20
   dd678:	428b      	cmp	r3, r1
   dd67a:	4682      	mov	sl, r0
   dd67c:	d8c7      	bhi.n	dd60e <_strtod_r+0x486>
   dd67e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dd682:	428b      	cmp	r3, r1
   dd684:	bf86      	itte	hi
   dd686:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; dd774 <_strtod_r+0x5ec>
   dd68a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   dd68e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dd692:	e071      	b.n	dd778 <_strtod_r+0x5f0>
   dd694:	d070      	beq.n	dd778 <_strtod_r+0x5f0>
   dd696:	4264      	negs	r4, r4
   dd698:	f014 020f 	ands.w	r2, r4, #15
   dd69c:	d00a      	beq.n	dd6b4 <_strtod_r+0x52c>
   dd69e:	4b2f      	ldr	r3, [pc, #188]	; (dd75c <_strtod_r+0x5d4>)
   dd6a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dd6a4:	4650      	mov	r0, sl
   dd6a6:	4659      	mov	r1, fp
   dd6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd6ac:	f7ff f906 	bl	dc8bc <__aeabi_ddiv>
   dd6b0:	4682      	mov	sl, r0
   dd6b2:	468b      	mov	fp, r1
   dd6b4:	1124      	asrs	r4, r4, #4
   dd6b6:	d05f      	beq.n	dd778 <_strtod_r+0x5f0>
   dd6b8:	2c1f      	cmp	r4, #31
   dd6ba:	dd04      	ble.n	dd6c6 <_strtod_r+0x53e>
   dd6bc:	2400      	movs	r4, #0
   dd6be:	4625      	mov	r5, r4
   dd6c0:	9405      	str	r4, [sp, #20]
   dd6c2:	9404      	str	r4, [sp, #16]
   dd6c4:	e130      	b.n	dd928 <_strtod_r+0x7a0>
   dd6c6:	f014 0f10 	tst.w	r4, #16
   dd6ca:	bf0c      	ite	eq
   dd6cc:	2300      	moveq	r3, #0
   dd6ce:	236a      	movne	r3, #106	; 0x6a
   dd6d0:	4e25      	ldr	r6, [pc, #148]	; (dd768 <_strtod_r+0x5e0>)
   dd6d2:	9303      	str	r3, [sp, #12]
   dd6d4:	4650      	mov	r0, sl
   dd6d6:	4659      	mov	r1, fp
   dd6d8:	2300      	movs	r3, #0
   dd6da:	2c00      	cmp	r4, #0
   dd6dc:	dd09      	ble.n	dd6f2 <_strtod_r+0x56a>
   dd6de:	07e2      	lsls	r2, r4, #31
   dd6e0:	d504      	bpl.n	dd6ec <_strtod_r+0x564>
   dd6e2:	e9d6 2300 	ldrd	r2, r3, [r6]
   dd6e6:	f7fe ffbf 	bl	dc668 <__aeabi_dmul>
   dd6ea:	2301      	movs	r3, #1
   dd6ec:	1064      	asrs	r4, r4, #1
   dd6ee:	3608      	adds	r6, #8
   dd6f0:	e7f3      	b.n	dd6da <_strtod_r+0x552>
   dd6f2:	b10b      	cbz	r3, dd6f8 <_strtod_r+0x570>
   dd6f4:	4682      	mov	sl, r0
   dd6f6:	468b      	mov	fp, r1
   dd6f8:	9b03      	ldr	r3, [sp, #12]
   dd6fa:	b1eb      	cbz	r3, dd738 <_strtod_r+0x5b0>
   dd6fc:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dd700:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dd704:	2b00      	cmp	r3, #0
   dd706:	4659      	mov	r1, fp
   dd708:	dd16      	ble.n	dd738 <_strtod_r+0x5b0>
   dd70a:	2b1f      	cmp	r3, #31
   dd70c:	dd0e      	ble.n	dd72c <_strtod_r+0x5a4>
   dd70e:	2b34      	cmp	r3, #52	; 0x34
   dd710:	bfde      	ittt	le
   dd712:	3b20      	suble	r3, #32
   dd714:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   dd718:	fa02 f303 	lslle.w	r3, r2, r3
   dd71c:	f04f 0a00 	mov.w	sl, #0
   dd720:	bfcc      	ite	gt
   dd722:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dd726:	ea03 0b01 	andle.w	fp, r3, r1
   dd72a:	e005      	b.n	dd738 <_strtod_r+0x5b0>
   dd72c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dd730:	fa02 f303 	lsl.w	r3, r2, r3
   dd734:	ea03 0a0a 	and.w	sl, r3, sl
   dd738:	2200      	movs	r2, #0
   dd73a:	2300      	movs	r3, #0
   dd73c:	4650      	mov	r0, sl
   dd73e:	4659      	mov	r1, fp
   dd740:	f7ff f9fa 	bl	dcb38 <__aeabi_dcmpeq>
   dd744:	2800      	cmp	r0, #0
   dd746:	d1b9      	bne.n	dd6bc <_strtod_r+0x534>
   dd748:	e018      	b.n	dd77c <_strtod_r+0x5f4>
   dd74a:	bf00      	nop
   dd74c:	000e00ec 	.word	0x000e00ec
   dd750:	000e00ef 	.word	0x000e00ef
   dd754:	000e00f5 	.word	0x000e00f5
   dd758:	000e00d8 	.word	0x000e00d8
   dd75c:	000e0160 	.word	0x000e0160
   dd760:	000e0228 	.word	0x000e0228
   dd764:	7ca00000 	.word	0x7ca00000
   dd768:	000e00f8 	.word	0x000e00f8
   dd76c:	7ff00000 	.word	0x7ff00000
   dd770:	fff80000 	.word	0xfff80000
   dd774:	7fefffff 	.word	0x7fefffff
   dd778:	2300      	movs	r3, #0
   dd77a:	9303      	str	r3, [sp, #12]
   dd77c:	9b05      	ldr	r3, [sp, #20]
   dd77e:	9300      	str	r3, [sp, #0]
   dd780:	9a04      	ldr	r2, [sp, #16]
   dd782:	9907      	ldr	r1, [sp, #28]
   dd784:	9802      	ldr	r0, [sp, #8]
   dd786:	462b      	mov	r3, r5
   dd788:	f001 fad3 	bl	ded32 <__s2b>
   dd78c:	9005      	str	r0, [sp, #20]
   dd78e:	2800      	cmp	r0, #0
   dd790:	f43f af3d 	beq.w	dd60e <_strtod_r+0x486>
   dd794:	f1b9 0f00 	cmp.w	r9, #0
   dd798:	f1c9 0300 	rsb	r3, r9, #0
   dd79c:	bfa8      	it	ge
   dd79e:	2300      	movge	r3, #0
   dd7a0:	930d      	str	r3, [sp, #52]	; 0x34
   dd7a2:	2400      	movs	r4, #0
   dd7a4:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   dd7a8:	9312      	str	r3, [sp, #72]	; 0x48
   dd7aa:	4625      	mov	r5, r4
   dd7ac:	9b05      	ldr	r3, [sp, #20]
   dd7ae:	9802      	ldr	r0, [sp, #8]
   dd7b0:	6859      	ldr	r1, [r3, #4]
   dd7b2:	f001 fa37 	bl	dec24 <_Balloc>
   dd7b6:	9004      	str	r0, [sp, #16]
   dd7b8:	2800      	cmp	r0, #0
   dd7ba:	f43f af2c 	beq.w	dd616 <_strtod_r+0x48e>
   dd7be:	9b05      	ldr	r3, [sp, #20]
   dd7c0:	691a      	ldr	r2, [r3, #16]
   dd7c2:	3202      	adds	r2, #2
   dd7c4:	f103 010c 	add.w	r1, r3, #12
   dd7c8:	0092      	lsls	r2, r2, #2
   dd7ca:	300c      	adds	r0, #12
   dd7cc:	f7ff fba9 	bl	dcf22 <memcpy>
   dd7d0:	aa1a      	add	r2, sp, #104	; 0x68
   dd7d2:	a919      	add	r1, sp, #100	; 0x64
   dd7d4:	ec4b ab10 	vmov	d0, sl, fp
   dd7d8:	9802      	ldr	r0, [sp, #8]
   dd7da:	e9cd ab08 	strd	sl, fp, [sp, #32]
   dd7de:	f001 fd5c 	bl	df29a <__d2b>
   dd7e2:	9018      	str	r0, [sp, #96]	; 0x60
   dd7e4:	2800      	cmp	r0, #0
   dd7e6:	f43f af16 	beq.w	dd616 <_strtod_r+0x48e>
   dd7ea:	2101      	movs	r1, #1
   dd7ec:	9802      	ldr	r0, [sp, #8]
   dd7ee:	f001 fb2b 	bl	dee48 <__i2b>
   dd7f2:	4605      	mov	r5, r0
   dd7f4:	2800      	cmp	r0, #0
   dd7f6:	f43f af0e 	beq.w	dd616 <_strtod_r+0x48e>
   dd7fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dd7fc:	9903      	ldr	r1, [sp, #12]
   dd7fe:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   dd800:	2b00      	cmp	r3, #0
   dd802:	bfad      	iteet	ge
   dd804:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   dd806:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   dd808:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   dd80c:	eb02 0803 	addge.w	r8, r2, r3
   dd810:	bfb8      	it	lt
   dd812:	1ad2      	sublt	r2, r2, r3
   dd814:	eba3 0301 	sub.w	r3, r3, r1
   dd818:	4433      	add	r3, r6
   dd81a:	49b5      	ldr	r1, [pc, #724]	; (ddaf0 <_strtod_r+0x968>)
   dd81c:	bfa8      	it	ge
   dd81e:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   dd820:	3b01      	subs	r3, #1
   dd822:	428b      	cmp	r3, r1
   dd824:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   dd828:	f280 808a 	bge.w	dd940 <_strtod_r+0x7b8>
   dd82c:	1ac9      	subs	r1, r1, r3
   dd82e:	291f      	cmp	r1, #31
   dd830:	bfc8      	it	gt
   dd832:	4fb0      	ldrgt	r7, [pc, #704]	; (ddaf4 <_strtod_r+0x96c>)
   dd834:	f04f 0901 	mov.w	r9, #1
   dd838:	bfd4      	ite	le
   dd83a:	fa09 f301 	lslle.w	r3, r9, r1
   dd83e:	1aff      	subgt	r7, r7, r3
   dd840:	eba6 0601 	sub.w	r6, r6, r1
   dd844:	bfd9      	ittee	le
   dd846:	9306      	strle	r3, [sp, #24]
   dd848:	2700      	movle	r7, #0
   dd84a:	fa09 f707 	lslgt.w	r7, r9, r7
   dd84e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   dd852:	eb08 0906 	add.w	r9, r8, r6
   dd856:	9b03      	ldr	r3, [sp, #12]
   dd858:	45c8      	cmp	r8, r9
   dd85a:	4416      	add	r6, r2
   dd85c:	441e      	add	r6, r3
   dd85e:	4643      	mov	r3, r8
   dd860:	bfa8      	it	ge
   dd862:	464b      	movge	r3, r9
   dd864:	42b3      	cmp	r3, r6
   dd866:	bfa8      	it	ge
   dd868:	4633      	movge	r3, r6
   dd86a:	2b00      	cmp	r3, #0
   dd86c:	bfc2      	ittt	gt
   dd86e:	ebc3 0909 	rsbgt	r9, r3, r9
   dd872:	1af6      	subgt	r6, r6, r3
   dd874:	ebc3 0808 	rsbgt	r8, r3, r8
   dd878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dd87a:	2b00      	cmp	r3, #0
   dd87c:	d164      	bne.n	dd948 <_strtod_r+0x7c0>
   dd87e:	f1b9 0f00 	cmp.w	r9, #0
   dd882:	dc7a      	bgt.n	dd97a <_strtod_r+0x7f2>
   dd884:	9b12      	ldr	r3, [sp, #72]	; 0x48
   dd886:	2b00      	cmp	r3, #0
   dd888:	f040 8081 	bne.w	dd98e <_strtod_r+0x806>
   dd88c:	2e00      	cmp	r6, #0
   dd88e:	f300 8088 	bgt.w	dd9a2 <_strtod_r+0x81a>
   dd892:	f1b8 0f00 	cmp.w	r8, #0
   dd896:	f300 808e 	bgt.w	dd9b6 <_strtod_r+0x82e>
   dd89a:	9a04      	ldr	r2, [sp, #16]
   dd89c:	9918      	ldr	r1, [sp, #96]	; 0x60
   dd89e:	9802      	ldr	r0, [sp, #8]
   dd8a0:	f001 fc27 	bl	df0f2 <__mdiff>
   dd8a4:	4604      	mov	r4, r0
   dd8a6:	2800      	cmp	r0, #0
   dd8a8:	f43f aeb5 	beq.w	dd616 <_strtod_r+0x48e>
   dd8ac:	68c3      	ldr	r3, [r0, #12]
   dd8ae:	9307      	str	r3, [sp, #28]
   dd8b0:	2300      	movs	r3, #0
   dd8b2:	60c3      	str	r3, [r0, #12]
   dd8b4:	4629      	mov	r1, r5
   dd8b6:	f001 fc00 	bl	df0ba <__mcmp>
   dd8ba:	2800      	cmp	r0, #0
   dd8bc:	f280 8089 	bge.w	dd9d2 <_strtod_r+0x84a>
   dd8c0:	9b07      	ldr	r3, [sp, #28]
   dd8c2:	2b00      	cmp	r3, #0
   dd8c4:	f040 8204 	bne.w	ddcd0 <_strtod_r+0xb48>
   dd8c8:	f1ba 0f00 	cmp.w	sl, #0
   dd8cc:	f040 8200 	bne.w	ddcd0 <_strtod_r+0xb48>
   dd8d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd8d4:	2b00      	cmp	r3, #0
   dd8d6:	f040 81fb 	bne.w	ddcd0 <_strtod_r+0xb48>
   dd8da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dd8de:	0d1b      	lsrs	r3, r3, #20
   dd8e0:	051b      	lsls	r3, r3, #20
   dd8e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dd8e6:	f240 81f3 	bls.w	ddcd0 <_strtod_r+0xb48>
   dd8ea:	6963      	ldr	r3, [r4, #20]
   dd8ec:	2b00      	cmp	r3, #0
   dd8ee:	d06c      	beq.n	dd9ca <_strtod_r+0x842>
   dd8f0:	4621      	mov	r1, r4
   dd8f2:	2201      	movs	r2, #1
   dd8f4:	9802      	ldr	r0, [sp, #8]
   dd8f6:	f001 fb8f 	bl	df018 <__lshift>
   dd8fa:	4629      	mov	r1, r5
   dd8fc:	4604      	mov	r4, r0
   dd8fe:	f001 fbdc 	bl	df0ba <__mcmp>
   dd902:	2800      	cmp	r0, #0
   dd904:	f340 81e4 	ble.w	ddcd0 <_strtod_r+0xb48>
   dd908:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dd90c:	9a03      	ldr	r2, [sp, #12]
   dd90e:	0d1b      	lsrs	r3, r3, #20
   dd910:	051b      	lsls	r3, r3, #20
   dd912:	2a00      	cmp	r2, #0
   dd914:	f000 808c 	beq.w	dda30 <_strtod_r+0x8a8>
   dd918:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dd91c:	f300 8088 	bgt.w	dda30 <_strtod_r+0x8a8>
   dd920:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   dd924:	f300 81d6 	bgt.w	ddcd4 <_strtod_r+0xb4c>
   dd928:	9a02      	ldr	r2, [sp, #8]
   dd92a:	2322      	movs	r3, #34	; 0x22
   dd92c:	f04f 0a00 	mov.w	sl, #0
   dd930:	f04f 0b00 	mov.w	fp, #0
   dd934:	6013      	str	r3, [r2, #0]
   dd936:	9b05      	ldr	r3, [sp, #20]
   dd938:	2b00      	cmp	r3, #0
   dd93a:	f040 81dc 	bne.w	ddcf6 <_strtod_r+0xb6e>
   dd93e:	e1ee      	b.n	ddd1e <_strtod_r+0xb96>
   dd940:	2301      	movs	r3, #1
   dd942:	2700      	movs	r7, #0
   dd944:	9306      	str	r3, [sp, #24]
   dd946:	e784      	b.n	dd852 <_strtod_r+0x6ca>
   dd948:	4629      	mov	r1, r5
   dd94a:	461a      	mov	r2, r3
   dd94c:	9802      	ldr	r0, [sp, #8]
   dd94e:	f001 fb15 	bl	def7c <__pow5mult>
   dd952:	4605      	mov	r5, r0
   dd954:	2800      	cmp	r0, #0
   dd956:	f43f ae5e 	beq.w	dd616 <_strtod_r+0x48e>
   dd95a:	4601      	mov	r1, r0
   dd95c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dd95e:	9802      	ldr	r0, [sp, #8]
   dd960:	f001 fa7b 	bl	dee5a <__multiply>
   dd964:	9007      	str	r0, [sp, #28]
   dd966:	2800      	cmp	r0, #0
   dd968:	f43f ae55 	beq.w	dd616 <_strtod_r+0x48e>
   dd96c:	9918      	ldr	r1, [sp, #96]	; 0x60
   dd96e:	9802      	ldr	r0, [sp, #8]
   dd970:	f001 f98d 	bl	dec8e <_Bfree>
   dd974:	9b07      	ldr	r3, [sp, #28]
   dd976:	9318      	str	r3, [sp, #96]	; 0x60
   dd978:	e781      	b.n	dd87e <_strtod_r+0x6f6>
   dd97a:	464a      	mov	r2, r9
   dd97c:	9918      	ldr	r1, [sp, #96]	; 0x60
   dd97e:	9802      	ldr	r0, [sp, #8]
   dd980:	f001 fb4a 	bl	df018 <__lshift>
   dd984:	9018      	str	r0, [sp, #96]	; 0x60
   dd986:	2800      	cmp	r0, #0
   dd988:	f47f af7c 	bne.w	dd884 <_strtod_r+0x6fc>
   dd98c:	e643      	b.n	dd616 <_strtod_r+0x48e>
   dd98e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   dd990:	9904      	ldr	r1, [sp, #16]
   dd992:	9802      	ldr	r0, [sp, #8]
   dd994:	f001 faf2 	bl	def7c <__pow5mult>
   dd998:	9004      	str	r0, [sp, #16]
   dd99a:	2800      	cmp	r0, #0
   dd99c:	f47f af76 	bne.w	dd88c <_strtod_r+0x704>
   dd9a0:	e639      	b.n	dd616 <_strtod_r+0x48e>
   dd9a2:	4632      	mov	r2, r6
   dd9a4:	9904      	ldr	r1, [sp, #16]
   dd9a6:	9802      	ldr	r0, [sp, #8]
   dd9a8:	f001 fb36 	bl	df018 <__lshift>
   dd9ac:	9004      	str	r0, [sp, #16]
   dd9ae:	2800      	cmp	r0, #0
   dd9b0:	f47f af6f 	bne.w	dd892 <_strtod_r+0x70a>
   dd9b4:	e62f      	b.n	dd616 <_strtod_r+0x48e>
   dd9b6:	4629      	mov	r1, r5
   dd9b8:	4642      	mov	r2, r8
   dd9ba:	9802      	ldr	r0, [sp, #8]
   dd9bc:	f001 fb2c 	bl	df018 <__lshift>
   dd9c0:	4605      	mov	r5, r0
   dd9c2:	2800      	cmp	r0, #0
   dd9c4:	f47f af69 	bne.w	dd89a <_strtod_r+0x712>
   dd9c8:	e625      	b.n	dd616 <_strtod_r+0x48e>
   dd9ca:	6923      	ldr	r3, [r4, #16]
   dd9cc:	2b01      	cmp	r3, #1
   dd9ce:	dc8f      	bgt.n	dd8f0 <_strtod_r+0x768>
   dd9d0:	e17e      	b.n	ddcd0 <_strtod_r+0xb48>
   dd9d2:	d161      	bne.n	dda98 <_strtod_r+0x910>
   dd9d4:	9a07      	ldr	r2, [sp, #28]
   dd9d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd9da:	b322      	cbz	r2, dda26 <_strtod_r+0x89e>
   dd9dc:	4946      	ldr	r1, [pc, #280]	; (ddaf8 <_strtod_r+0x970>)
   dd9de:	428b      	cmp	r3, r1
   dd9e0:	465a      	mov	r2, fp
   dd9e2:	d12e      	bne.n	dda42 <_strtod_r+0x8ba>
   dd9e4:	9b03      	ldr	r3, [sp, #12]
   dd9e6:	4651      	mov	r1, sl
   dd9e8:	b163      	cbz	r3, dda04 <_strtod_r+0x87c>
   dd9ea:	4b44      	ldr	r3, [pc, #272]	; (ddafc <_strtod_r+0x974>)
   dd9ec:	4013      	ands	r3, r2
   dd9ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dd9f2:	d807      	bhi.n	dda04 <_strtod_r+0x87c>
   dd9f4:	0d1b      	lsrs	r3, r3, #20
   dd9f6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dd9fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dd9fe:	fa00 f303 	lsl.w	r3, r0, r3
   dda02:	e001      	b.n	dda08 <_strtod_r+0x880>
   dda04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dda08:	428b      	cmp	r3, r1
   dda0a:	d11a      	bne.n	dda42 <_strtod_r+0x8ba>
   dda0c:	493c      	ldr	r1, [pc, #240]	; (ddb00 <_strtod_r+0x978>)
   dda0e:	428a      	cmp	r2, r1
   dda10:	d102      	bne.n	dda18 <_strtod_r+0x890>
   dda12:	3301      	adds	r3, #1
   dda14:	f43f adff 	beq.w	dd616 <_strtod_r+0x48e>
   dda18:	4b38      	ldr	r3, [pc, #224]	; (ddafc <_strtod_r+0x974>)
   dda1a:	4013      	ands	r3, r2
   dda1c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dda20:	f04f 0a00 	mov.w	sl, #0
   dda24:	e154      	b.n	ddcd0 <_strtod_r+0xb48>
   dda26:	b963      	cbnz	r3, dda42 <_strtod_r+0x8ba>
   dda28:	f1ba 0f00 	cmp.w	sl, #0
   dda2c:	d109      	bne.n	dda42 <_strtod_r+0x8ba>
   dda2e:	e76b      	b.n	dd908 <_strtod_r+0x780>
   dda30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dda34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dda38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dda3c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dda40:	e146      	b.n	ddcd0 <_strtod_r+0xb48>
   dda42:	b117      	cbz	r7, dda4a <_strtod_r+0x8c2>
   dda44:	ea17 0f0b 	tst.w	r7, fp
   dda48:	e002      	b.n	dda50 <_strtod_r+0x8c8>
   dda4a:	9b06      	ldr	r3, [sp, #24]
   dda4c:	ea13 0f0a 	tst.w	r3, sl
   dda50:	f000 813e 	beq.w	ddcd0 <_strtod_r+0xb48>
   dda54:	9b07      	ldr	r3, [sp, #28]
   dda56:	9a03      	ldr	r2, [sp, #12]
   dda58:	4650      	mov	r0, sl
   dda5a:	4659      	mov	r1, fp
   dda5c:	b153      	cbz	r3, dda74 <_strtod_r+0x8ec>
   dda5e:	f7ff fb77 	bl	dd150 <sulp>
   dda62:	4602      	mov	r2, r0
   dda64:	460b      	mov	r3, r1
   dda66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   dda6a:	f7fe fc4b 	bl	dc304 <__adddf3>
   dda6e:	4682      	mov	sl, r0
   dda70:	468b      	mov	fp, r1
   dda72:	e12d      	b.n	ddcd0 <_strtod_r+0xb48>
   dda74:	f7ff fb6c 	bl	dd150 <sulp>
   dda78:	4602      	mov	r2, r0
   dda7a:	460b      	mov	r3, r1
   dda7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   dda80:	f7fe fc3e 	bl	dc300 <__aeabi_dsub>
   dda84:	2200      	movs	r2, #0
   dda86:	2300      	movs	r3, #0
   dda88:	4682      	mov	sl, r0
   dda8a:	468b      	mov	fp, r1
   dda8c:	f7ff f854 	bl	dcb38 <__aeabi_dcmpeq>
   dda90:	2800      	cmp	r0, #0
   dda92:	f47f af49 	bne.w	dd928 <_strtod_r+0x7a0>
   dda96:	e11b      	b.n	ddcd0 <_strtod_r+0xb48>
   dda98:	4629      	mov	r1, r5
   dda9a:	4620      	mov	r0, r4
   dda9c:	f001 fc4b 	bl	df336 <__ratio>
   ddaa0:	ec57 6b10 	vmov	r6, r7, d0
   ddaa4:	2200      	movs	r2, #0
   ddaa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ddaaa:	ee10 0a10 	vmov	r0, s0
   ddaae:	4639      	mov	r1, r7
   ddab0:	f7ff f856 	bl	dcb60 <__aeabi_dcmple>
   ddab4:	2800      	cmp	r0, #0
   ddab6:	d042      	beq.n	ddb3e <_strtod_r+0x9b6>
   ddab8:	9b07      	ldr	r3, [sp, #28]
   ddaba:	b123      	cbz	r3, ddac6 <_strtod_r+0x93e>
   ddabc:	f04f 0800 	mov.w	r8, #0
   ddac0:	f8df 9040 	ldr.w	r9, [pc, #64]	; ddb04 <_strtod_r+0x97c>
   ddac4:	e011      	b.n	ddaea <_strtod_r+0x962>
   ddac6:	f1ba 0f00 	cmp.w	sl, #0
   ddaca:	d103      	bne.n	ddad4 <_strtod_r+0x94c>
   ddacc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ddad0:	b93b      	cbnz	r3, ddae2 <_strtod_r+0x95a>
   ddad2:	e01b      	b.n	ddb0c <_strtod_r+0x984>
   ddad4:	f1ba 0f01 	cmp.w	sl, #1
   ddad8:	d103      	bne.n	ddae2 <_strtod_r+0x95a>
   ddada:	f1bb 0f00 	cmp.w	fp, #0
   ddade:	f43f af23 	beq.w	dd928 <_strtod_r+0x7a0>
   ddae2:	f8df 9024 	ldr.w	r9, [pc, #36]	; ddb08 <_strtod_r+0x980>
   ddae6:	f04f 0800 	mov.w	r8, #0
   ddaea:	2600      	movs	r6, #0
   ddaec:	4f05      	ldr	r7, [pc, #20]	; (ddb04 <_strtod_r+0x97c>)
   ddaee:	e039      	b.n	ddb64 <_strtod_r+0x9dc>
   ddaf0:	fffffc02 	.word	0xfffffc02
   ddaf4:	fffffbe2 	.word	0xfffffbe2
   ddaf8:	000fffff 	.word	0x000fffff
   ddafc:	7ff00000 	.word	0x7ff00000
   ddb00:	7fefffff 	.word	0x7fefffff
   ddb04:	3ff00000 	.word	0x3ff00000
   ddb08:	bff00000 	.word	0xbff00000
   ddb0c:	2200      	movs	r2, #0
   ddb0e:	4b98      	ldr	r3, [pc, #608]	; (ddd70 <_strtod_r+0xbe8>)
   ddb10:	4630      	mov	r0, r6
   ddb12:	4639      	mov	r1, r7
   ddb14:	f7ff f81a 	bl	dcb4c <__aeabi_dcmplt>
   ddb18:	b940      	cbnz	r0, ddb2c <_strtod_r+0x9a4>
   ddb1a:	4630      	mov	r0, r6
   ddb1c:	4639      	mov	r1, r7
   ddb1e:	2200      	movs	r2, #0
   ddb20:	4b94      	ldr	r3, [pc, #592]	; (ddd74 <_strtod_r+0xbec>)
   ddb22:	f7fe fda1 	bl	dc668 <__aeabi_dmul>
   ddb26:	4606      	mov	r6, r0
   ddb28:	460f      	mov	r7, r1
   ddb2a:	e001      	b.n	ddb30 <_strtod_r+0x9a8>
   ddb2c:	4f91      	ldr	r7, [pc, #580]	; (ddd74 <_strtod_r+0xbec>)
   ddb2e:	2600      	movs	r6, #0
   ddb30:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   ddb34:	9614      	str	r6, [sp, #80]	; 0x50
   ddb36:	9315      	str	r3, [sp, #84]	; 0x54
   ddb38:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   ddb3c:	e012      	b.n	ddb64 <_strtod_r+0x9dc>
   ddb3e:	4b8d      	ldr	r3, [pc, #564]	; (ddd74 <_strtod_r+0xbec>)
   ddb40:	4630      	mov	r0, r6
   ddb42:	4639      	mov	r1, r7
   ddb44:	2200      	movs	r2, #0
   ddb46:	f7fe fd8f 	bl	dc668 <__aeabi_dmul>
   ddb4a:	9b07      	ldr	r3, [sp, #28]
   ddb4c:	4606      	mov	r6, r0
   ddb4e:	460f      	mov	r7, r1
   ddb50:	b923      	cbnz	r3, ddb5c <_strtod_r+0x9d4>
   ddb52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ddb56:	900e      	str	r0, [sp, #56]	; 0x38
   ddb58:	930f      	str	r3, [sp, #60]	; 0x3c
   ddb5a:	e001      	b.n	ddb60 <_strtod_r+0x9d8>
   ddb5c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   ddb60:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   ddb64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ddb68:	0d1b      	lsrs	r3, r3, #20
   ddb6a:	051b      	lsls	r3, r3, #20
   ddb6c:	9306      	str	r3, [sp, #24]
   ddb6e:	9a06      	ldr	r2, [sp, #24]
   ddb70:	4b81      	ldr	r3, [pc, #516]	; (ddd78 <_strtod_r+0xbf0>)
   ddb72:	429a      	cmp	r2, r3
   ddb74:	d12b      	bne.n	ddbce <_strtod_r+0xa46>
   ddb76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   ddb7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   ddb7e:	ec4b ab10 	vmov	d0, sl, fp
   ddb82:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   ddb86:	f001 fb13 	bl	df1b0 <__ulp>
   ddb8a:	4640      	mov	r0, r8
   ddb8c:	ec53 2b10 	vmov	r2, r3, d0
   ddb90:	4649      	mov	r1, r9
   ddb92:	f7fe fd69 	bl	dc668 <__aeabi_dmul>
   ddb96:	4652      	mov	r2, sl
   ddb98:	465b      	mov	r3, fp
   ddb9a:	f7fe fbb3 	bl	dc304 <__adddf3>
   ddb9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   ddba2:	0d1b      	lsrs	r3, r3, #20
   ddba4:	4a75      	ldr	r2, [pc, #468]	; (ddd7c <_strtod_r+0xbf4>)
   ddba6:	051b      	lsls	r3, r3, #20
   ddba8:	4293      	cmp	r3, r2
   ddbaa:	4682      	mov	sl, r0
   ddbac:	d90c      	bls.n	ddbc8 <_strtod_r+0xa40>
   ddbae:	4b74      	ldr	r3, [pc, #464]	; (ddd80 <_strtod_r+0xbf8>)
   ddbb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ddbb2:	429a      	cmp	r2, r3
   ddbb4:	d103      	bne.n	ddbbe <_strtod_r+0xa36>
   ddbb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ddbb8:	3301      	adds	r3, #1
   ddbba:	f43f ad2c 	beq.w	dd616 <_strtod_r+0x48e>
   ddbbe:	f8df b1c0 	ldr.w	fp, [pc, #448]	; ddd80 <_strtod_r+0xbf8>
   ddbc2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   ddbc6:	e072      	b.n	ddcae <_strtod_r+0xb26>
   ddbc8:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   ddbcc:	e038      	b.n	ddc40 <_strtod_r+0xab8>
   ddbce:	9b03      	ldr	r3, [sp, #12]
   ddbd0:	b333      	cbz	r3, ddc20 <_strtod_r+0xa98>
   ddbd2:	9b06      	ldr	r3, [sp, #24]
   ddbd4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ddbd8:	d822      	bhi.n	ddc20 <_strtod_r+0xa98>
   ddbda:	a35d      	add	r3, pc, #372	; (adr r3, ddd50 <_strtod_r+0xbc8>)
   ddbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddbe0:	4630      	mov	r0, r6
   ddbe2:	4639      	mov	r1, r7
   ddbe4:	f7fe ffbc 	bl	dcb60 <__aeabi_dcmple>
   ddbe8:	b1a8      	cbz	r0, ddc16 <_strtod_r+0xa8e>
   ddbea:	4639      	mov	r1, r7
   ddbec:	4630      	mov	r0, r6
   ddbee:	f7fe fffd 	bl	dcbec <__aeabi_d2uiz>
   ddbf2:	2800      	cmp	r0, #0
   ddbf4:	bf08      	it	eq
   ddbf6:	2001      	moveq	r0, #1
   ddbf8:	f7fe fcc0 	bl	dc57c <__aeabi_ui2d>
   ddbfc:	9b07      	ldr	r3, [sp, #28]
   ddbfe:	4606      	mov	r6, r0
   ddc00:	460f      	mov	r7, r1
   ddc02:	b923      	cbnz	r3, ddc0e <_strtod_r+0xa86>
   ddc04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ddc08:	9010      	str	r0, [sp, #64]	; 0x40
   ddc0a:	9311      	str	r3, [sp, #68]	; 0x44
   ddc0c:	e001      	b.n	ddc12 <_strtod_r+0xa8a>
   ddc0e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   ddc12:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   ddc16:	9a06      	ldr	r2, [sp, #24]
   ddc18:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   ddc1c:	ebc2 0903 	rsb	r9, r2, r3
   ddc20:	ed9d 0b08 	vldr	d0, [sp, #32]
   ddc24:	f001 fac4 	bl	df1b0 <__ulp>
   ddc28:	4640      	mov	r0, r8
   ddc2a:	ec53 2b10 	vmov	r2, r3, d0
   ddc2e:	4649      	mov	r1, r9
   ddc30:	f7fe fd1a 	bl	dc668 <__aeabi_dmul>
   ddc34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   ddc38:	f7fe fb64 	bl	dc304 <__adddf3>
   ddc3c:	4682      	mov	sl, r0
   ddc3e:	468b      	mov	fp, r1
   ddc40:	9b03      	ldr	r3, [sp, #12]
   ddc42:	bba3      	cbnz	r3, ddcae <_strtod_r+0xb26>
   ddc44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ddc48:	0d1b      	lsrs	r3, r3, #20
   ddc4a:	9a06      	ldr	r2, [sp, #24]
   ddc4c:	051b      	lsls	r3, r3, #20
   ddc4e:	429a      	cmp	r2, r3
   ddc50:	46d8      	mov	r8, fp
   ddc52:	d12c      	bne.n	ddcae <_strtod_r+0xb26>
   ddc54:	4639      	mov	r1, r7
   ddc56:	4630      	mov	r0, r6
   ddc58:	f7fe ffa0 	bl	dcb9c <__aeabi_d2iz>
   ddc5c:	f7fe fc9e 	bl	dc59c <__aeabi_i2d>
   ddc60:	460b      	mov	r3, r1
   ddc62:	4602      	mov	r2, r0
   ddc64:	4639      	mov	r1, r7
   ddc66:	4630      	mov	r0, r6
   ddc68:	f7fe fb4a 	bl	dc300 <__aeabi_dsub>
   ddc6c:	9b07      	ldr	r3, [sp, #28]
   ddc6e:	4606      	mov	r6, r0
   ddc70:	460f      	mov	r7, r1
   ddc72:	b92b      	cbnz	r3, ddc80 <_strtod_r+0xaf8>
   ddc74:	f1ba 0f00 	cmp.w	sl, #0
   ddc78:	d102      	bne.n	ddc80 <_strtod_r+0xaf8>
   ddc7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ddc7e:	b183      	cbz	r3, ddca2 <_strtod_r+0xb1a>
   ddc80:	a335      	add	r3, pc, #212	; (adr r3, ddd58 <_strtod_r+0xbd0>)
   ddc82:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddc86:	4630      	mov	r0, r6
   ddc88:	4639      	mov	r1, r7
   ddc8a:	f7fe ff5f 	bl	dcb4c <__aeabi_dcmplt>
   ddc8e:	2800      	cmp	r0, #0
   ddc90:	d131      	bne.n	ddcf6 <_strtod_r+0xb6e>
   ddc92:	a333      	add	r3, pc, #204	; (adr r3, ddd60 <_strtod_r+0xbd8>)
   ddc94:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddc98:	4630      	mov	r0, r6
   ddc9a:	4639      	mov	r1, r7
   ddc9c:	f7fe ff74 	bl	dcb88 <__aeabi_dcmpgt>
   ddca0:	e004      	b.n	ddcac <_strtod_r+0xb24>
   ddca2:	a331      	add	r3, pc, #196	; (adr r3, ddd68 <_strtod_r+0xbe0>)
   ddca4:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddca8:	f7fe ff50 	bl	dcb4c <__aeabi_dcmplt>
   ddcac:	bb18      	cbnz	r0, ddcf6 <_strtod_r+0xb6e>
   ddcae:	9918      	ldr	r1, [sp, #96]	; 0x60
   ddcb0:	9802      	ldr	r0, [sp, #8]
   ddcb2:	f000 ffec 	bl	dec8e <_Bfree>
   ddcb6:	9904      	ldr	r1, [sp, #16]
   ddcb8:	9802      	ldr	r0, [sp, #8]
   ddcba:	f000 ffe8 	bl	dec8e <_Bfree>
   ddcbe:	4629      	mov	r1, r5
   ddcc0:	9802      	ldr	r0, [sp, #8]
   ddcc2:	f000 ffe4 	bl	dec8e <_Bfree>
   ddcc6:	4621      	mov	r1, r4
   ddcc8:	9802      	ldr	r0, [sp, #8]
   ddcca:	f000 ffe0 	bl	dec8e <_Bfree>
   ddcce:	e56d      	b.n	dd7ac <_strtod_r+0x624>
   ddcd0:	9b03      	ldr	r3, [sp, #12]
   ddcd2:	b183      	cbz	r3, ddcf6 <_strtod_r+0xb6e>
   ddcd4:	4b2b      	ldr	r3, [pc, #172]	; (ddd84 <_strtod_r+0xbfc>)
   ddcd6:	930b      	str	r3, [sp, #44]	; 0x2c
   ddcd8:	2300      	movs	r3, #0
   ddcda:	930a      	str	r3, [sp, #40]	; 0x28
   ddcdc:	4650      	mov	r0, sl
   ddcde:	4659      	mov	r1, fp
   ddce0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   ddce4:	f7fe fcc0 	bl	dc668 <__aeabi_dmul>
   ddce8:	4682      	mov	sl, r0
   ddcea:	468b      	mov	fp, r1
   ddcec:	b919      	cbnz	r1, ddcf6 <_strtod_r+0xb6e>
   ddcee:	b910      	cbnz	r0, ddcf6 <_strtod_r+0xb6e>
   ddcf0:	9a02      	ldr	r2, [sp, #8]
   ddcf2:	2322      	movs	r3, #34	; 0x22
   ddcf4:	6013      	str	r3, [r2, #0]
   ddcf6:	9918      	ldr	r1, [sp, #96]	; 0x60
   ddcf8:	9802      	ldr	r0, [sp, #8]
   ddcfa:	f000 ffc8 	bl	dec8e <_Bfree>
   ddcfe:	9904      	ldr	r1, [sp, #16]
   ddd00:	9802      	ldr	r0, [sp, #8]
   ddd02:	f000 ffc4 	bl	dec8e <_Bfree>
   ddd06:	4629      	mov	r1, r5
   ddd08:	9802      	ldr	r0, [sp, #8]
   ddd0a:	f000 ffc0 	bl	dec8e <_Bfree>
   ddd0e:	9905      	ldr	r1, [sp, #20]
   ddd10:	9802      	ldr	r0, [sp, #8]
   ddd12:	f000 ffbc 	bl	dec8e <_Bfree>
   ddd16:	4621      	mov	r1, r4
   ddd18:	9802      	ldr	r0, [sp, #8]
   ddd1a:	f000 ffb8 	bl	dec8e <_Bfree>
   ddd1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ddd20:	b113      	cbz	r3, ddd28 <_strtod_r+0xba0>
   ddd22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   ddd24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ddd26:	6013      	str	r3, [r2, #0]
   ddd28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ddd2a:	b11b      	cbz	r3, ddd34 <_strtod_r+0xbac>
   ddd2c:	4652      	mov	r2, sl
   ddd2e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ddd32:	e007      	b.n	ddd44 <_strtod_r+0xbbc>
   ddd34:	4652      	mov	r2, sl
   ddd36:	465b      	mov	r3, fp
   ddd38:	e004      	b.n	ddd44 <_strtod_r+0xbbc>
   ddd3a:	2500      	movs	r5, #0
   ddd3c:	462a      	mov	r2, r5
   ddd3e:	2101      	movs	r1, #1
   ddd40:	f7ff bb41 	b.w	dd3c6 <_strtod_r+0x23e>
   ddd44:	ec43 2b10 	vmov	d0, r2, r3
   ddd48:	b01d      	add	sp, #116	; 0x74
   ddd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddd4e:	bf00      	nop
   ddd50:	ffc00000 	.word	0xffc00000
   ddd54:	41dfffff 	.word	0x41dfffff
   ddd58:	94a03595 	.word	0x94a03595
   ddd5c:	3fdfffff 	.word	0x3fdfffff
   ddd60:	35afe535 	.word	0x35afe535
   ddd64:	3fe00000 	.word	0x3fe00000
   ddd68:	94a03595 	.word	0x94a03595
   ddd6c:	3fcfffff 	.word	0x3fcfffff
   ddd70:	3ff00000 	.word	0x3ff00000
   ddd74:	3fe00000 	.word	0x3fe00000
   ddd78:	7fe00000 	.word	0x7fe00000
   ddd7c:	7c9fffff 	.word	0x7c9fffff
   ddd80:	7fefffff 	.word	0x7fefffff
   ddd84:	39500000 	.word	0x39500000

000ddd88 <strtod>:
   ddd88:	4b02      	ldr	r3, [pc, #8]	; (ddd94 <strtod+0xc>)
   ddd8a:	460a      	mov	r2, r1
   ddd8c:	4601      	mov	r1, r0
   ddd8e:	6818      	ldr	r0, [r3, #0]
   ddd90:	f7ff b9fa 	b.w	dd188 <_strtod_r>
   ddd94:	2003d3cc 	.word	0x2003d3cc

000ddd98 <_strtol_r>:
   ddd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ddd9c:	4680      	mov	r8, r0
   ddd9e:	4840      	ldr	r0, [pc, #256]	; (ddea0 <_strtol_r+0x108>)
   ddda0:	f8d0 9000 	ldr.w	r9, [r0]
   ddda4:	460f      	mov	r7, r1
   ddda6:	463d      	mov	r5, r7
   ddda8:	f815 4b01 	ldrb.w	r4, [r5], #1
   dddac:	eb09 0004 	add.w	r0, r9, r4
   dddb0:	7840      	ldrb	r0, [r0, #1]
   dddb2:	f000 0008 	and.w	r0, r0, #8
   dddb6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   dddba:	b108      	cbz	r0, dddc0 <_strtol_r+0x28>
   dddbc:	462f      	mov	r7, r5
   dddbe:	e7f2      	b.n	ddda6 <_strtol_r+0xe>
   dddc0:	2c2d      	cmp	r4, #45	; 0x2d
   dddc2:	d103      	bne.n	dddcc <_strtol_r+0x34>
   dddc4:	1cbd      	adds	r5, r7, #2
   dddc6:	787c      	ldrb	r4, [r7, #1]
   dddc8:	2601      	movs	r6, #1
   dddca:	e003      	b.n	dddd4 <_strtol_r+0x3c>
   dddcc:	2c2b      	cmp	r4, #43	; 0x2b
   dddce:	bf04      	itt	eq
   dddd0:	787c      	ldrbeq	r4, [r7, #1]
   dddd2:	1cbd      	addeq	r5, r7, #2
   dddd4:	b113      	cbz	r3, ddddc <_strtol_r+0x44>
   dddd6:	2b10      	cmp	r3, #16
   dddd8:	d10a      	bne.n	dddf0 <_strtol_r+0x58>
   dddda:	e05b      	b.n	dde94 <_strtol_r+0xfc>
   ddddc:	2c30      	cmp	r4, #48	; 0x30
   dddde:	d157      	bne.n	dde90 <_strtol_r+0xf8>
   ddde0:	7828      	ldrb	r0, [r5, #0]
   ddde2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   ddde6:	2858      	cmp	r0, #88	; 0x58
   ddde8:	d14d      	bne.n	dde86 <_strtol_r+0xee>
   dddea:	786c      	ldrb	r4, [r5, #1]
   dddec:	2310      	movs	r3, #16
   dddee:	3502      	adds	r5, #2
   dddf0:	2e00      	cmp	r6, #0
   dddf2:	bf14      	ite	ne
   dddf4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   dddf8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   dddfc:	2700      	movs	r7, #0
   dddfe:	fbbc faf3 	udiv	sl, ip, r3
   dde02:	4638      	mov	r0, r7
   dde04:	fb03 cc1a 	mls	ip, r3, sl, ip
   dde08:	eb09 0e04 	add.w	lr, r9, r4
   dde0c:	f89e e001 	ldrb.w	lr, [lr, #1]
   dde10:	f01e 0f04 	tst.w	lr, #4
   dde14:	d001      	beq.n	dde1a <_strtol_r+0x82>
   dde16:	3c30      	subs	r4, #48	; 0x30
   dde18:	e00b      	b.n	dde32 <_strtol_r+0x9a>
   dde1a:	f01e 0e03 	ands.w	lr, lr, #3
   dde1e:	d01b      	beq.n	dde58 <_strtol_r+0xc0>
   dde20:	f1be 0f01 	cmp.w	lr, #1
   dde24:	bf0c      	ite	eq
   dde26:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dde2a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dde2e:	ebce 0404 	rsb	r4, lr, r4
   dde32:	42a3      	cmp	r3, r4
   dde34:	dd10      	ble.n	dde58 <_strtol_r+0xc0>
   dde36:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   dde3a:	d00a      	beq.n	dde52 <_strtol_r+0xba>
   dde3c:	4550      	cmp	r0, sl
   dde3e:	d806      	bhi.n	dde4e <_strtol_r+0xb6>
   dde40:	d101      	bne.n	dde46 <_strtol_r+0xae>
   dde42:	4564      	cmp	r4, ip
   dde44:	dc03      	bgt.n	dde4e <_strtol_r+0xb6>
   dde46:	fb03 4000 	mla	r0, r3, r0, r4
   dde4a:	2701      	movs	r7, #1
   dde4c:	e001      	b.n	dde52 <_strtol_r+0xba>
   dde4e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dde52:	f815 4b01 	ldrb.w	r4, [r5], #1
   dde56:	e7d7      	b.n	dde08 <_strtol_r+0x70>
   dde58:	1c7b      	adds	r3, r7, #1
   dde5a:	d10c      	bne.n	dde76 <_strtol_r+0xde>
   dde5c:	2e00      	cmp	r6, #0
   dde5e:	f04f 0322 	mov.w	r3, #34	; 0x22
   dde62:	bf14      	ite	ne
   dde64:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dde68:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dde6c:	f8c8 3000 	str.w	r3, [r8]
   dde70:	b92a      	cbnz	r2, dde7e <_strtol_r+0xe6>
   dde72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dde76:	b106      	cbz	r6, dde7a <_strtol_r+0xe2>
   dde78:	4240      	negs	r0, r0
   dde7a:	b172      	cbz	r2, dde9a <_strtol_r+0x102>
   dde7c:	b107      	cbz	r7, dde80 <_strtol_r+0xe8>
   dde7e:	1e69      	subs	r1, r5, #1
   dde80:	6011      	str	r1, [r2, #0]
   dde82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dde86:	2430      	movs	r4, #48	; 0x30
   dde88:	2b00      	cmp	r3, #0
   dde8a:	d1b1      	bne.n	dddf0 <_strtol_r+0x58>
   dde8c:	2308      	movs	r3, #8
   dde8e:	e7af      	b.n	dddf0 <_strtol_r+0x58>
   dde90:	230a      	movs	r3, #10
   dde92:	e7ad      	b.n	dddf0 <_strtol_r+0x58>
   dde94:	2c30      	cmp	r4, #48	; 0x30
   dde96:	d0a3      	beq.n	ddde0 <_strtol_r+0x48>
   dde98:	e7aa      	b.n	dddf0 <_strtol_r+0x58>
   dde9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dde9e:	bf00      	nop
   ddea0:	2003d368 	.word	0x2003d368

000ddea4 <strtol>:
   ddea4:	4613      	mov	r3, r2
   ddea6:	460a      	mov	r2, r1
   ddea8:	4601      	mov	r1, r0
   ddeaa:	4802      	ldr	r0, [pc, #8]	; (ddeb4 <strtol+0x10>)
   ddeac:	6800      	ldr	r0, [r0, #0]
   ddeae:	f7ff bf73 	b.w	ddd98 <_strtol_r>
   ddeb2:	bf00      	nop
   ddeb4:	2003d3cc 	.word	0x2003d3cc

000ddeb8 <_strtoul_r>:
   ddeb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ddebc:	4680      	mov	r8, r0
   ddebe:	483c      	ldr	r0, [pc, #240]	; (ddfb0 <_strtoul_r+0xf8>)
   ddec0:	f8d0 9000 	ldr.w	r9, [r0]
   ddec4:	460e      	mov	r6, r1
   ddec6:	4635      	mov	r5, r6
   ddec8:	f815 4b01 	ldrb.w	r4, [r5], #1
   ddecc:	eb09 0004 	add.w	r0, r9, r4
   dded0:	7840      	ldrb	r0, [r0, #1]
   dded2:	f000 0008 	and.w	r0, r0, #8
   dded6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   ddeda:	b108      	cbz	r0, ddee0 <_strtoul_r+0x28>
   ddedc:	462e      	mov	r6, r5
   ddede:	e7f2      	b.n	ddec6 <_strtoul_r+0xe>
   ddee0:	2c2d      	cmp	r4, #45	; 0x2d
   ddee2:	d103      	bne.n	ddeec <_strtoul_r+0x34>
   ddee4:	1cb5      	adds	r5, r6, #2
   ddee6:	7874      	ldrb	r4, [r6, #1]
   ddee8:	2701      	movs	r7, #1
   ddeea:	e003      	b.n	ddef4 <_strtoul_r+0x3c>
   ddeec:	2c2b      	cmp	r4, #43	; 0x2b
   ddeee:	bf04      	itt	eq
   ddef0:	7874      	ldrbeq	r4, [r6, #1]
   ddef2:	1cb5      	addeq	r5, r6, #2
   ddef4:	b113      	cbz	r3, ddefc <_strtoul_r+0x44>
   ddef6:	2b10      	cmp	r3, #16
   ddef8:	d10a      	bne.n	ddf10 <_strtoul_r+0x58>
   ddefa:	e053      	b.n	ddfa4 <_strtoul_r+0xec>
   ddefc:	2c30      	cmp	r4, #48	; 0x30
   ddefe:	d14f      	bne.n	ddfa0 <_strtoul_r+0xe8>
   ddf00:	7828      	ldrb	r0, [r5, #0]
   ddf02:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   ddf06:	2858      	cmp	r0, #88	; 0x58
   ddf08:	d145      	bne.n	ddf96 <_strtoul_r+0xde>
   ddf0a:	786c      	ldrb	r4, [r5, #1]
   ddf0c:	2310      	movs	r3, #16
   ddf0e:	3502      	adds	r5, #2
   ddf10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   ddf14:	2600      	movs	r6, #0
   ddf16:	fbbc fcf3 	udiv	ip, ip, r3
   ddf1a:	fb03 fa0c 	mul.w	sl, r3, ip
   ddf1e:	ea6f 0a0a 	mvn.w	sl, sl
   ddf22:	4630      	mov	r0, r6
   ddf24:	eb09 0e04 	add.w	lr, r9, r4
   ddf28:	f89e e001 	ldrb.w	lr, [lr, #1]
   ddf2c:	f01e 0f04 	tst.w	lr, #4
   ddf30:	d001      	beq.n	ddf36 <_strtoul_r+0x7e>
   ddf32:	3c30      	subs	r4, #48	; 0x30
   ddf34:	e00b      	b.n	ddf4e <_strtoul_r+0x96>
   ddf36:	f01e 0e03 	ands.w	lr, lr, #3
   ddf3a:	d01a      	beq.n	ddf72 <_strtoul_r+0xba>
   ddf3c:	f1be 0f01 	cmp.w	lr, #1
   ddf40:	bf0c      	ite	eq
   ddf42:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   ddf46:	f04f 0e57 	movne.w	lr, #87	; 0x57
   ddf4a:	ebce 0404 	rsb	r4, lr, r4
   ddf4e:	42a3      	cmp	r3, r4
   ddf50:	dd0f      	ble.n	ddf72 <_strtoul_r+0xba>
   ddf52:	2e00      	cmp	r6, #0
   ddf54:	db08      	blt.n	ddf68 <_strtoul_r+0xb0>
   ddf56:	4560      	cmp	r0, ip
   ddf58:	d806      	bhi.n	ddf68 <_strtoul_r+0xb0>
   ddf5a:	d101      	bne.n	ddf60 <_strtoul_r+0xa8>
   ddf5c:	4554      	cmp	r4, sl
   ddf5e:	dc03      	bgt.n	ddf68 <_strtoul_r+0xb0>
   ddf60:	fb03 4000 	mla	r0, r3, r0, r4
   ddf64:	2601      	movs	r6, #1
   ddf66:	e001      	b.n	ddf6c <_strtoul_r+0xb4>
   ddf68:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   ddf6c:	f815 4b01 	ldrb.w	r4, [r5], #1
   ddf70:	e7d8      	b.n	ddf24 <_strtoul_r+0x6c>
   ddf72:	2e00      	cmp	r6, #0
   ddf74:	da07      	bge.n	ddf86 <_strtoul_r+0xce>
   ddf76:	2322      	movs	r3, #34	; 0x22
   ddf78:	f8c8 3000 	str.w	r3, [r8]
   ddf7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ddf80:	b92a      	cbnz	r2, ddf8e <_strtoul_r+0xd6>
   ddf82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddf86:	b107      	cbz	r7, ddf8a <_strtoul_r+0xd2>
   ddf88:	4240      	negs	r0, r0
   ddf8a:	b172      	cbz	r2, ddfaa <_strtoul_r+0xf2>
   ddf8c:	b106      	cbz	r6, ddf90 <_strtoul_r+0xd8>
   ddf8e:	1e69      	subs	r1, r5, #1
   ddf90:	6011      	str	r1, [r2, #0]
   ddf92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddf96:	2430      	movs	r4, #48	; 0x30
   ddf98:	2b00      	cmp	r3, #0
   ddf9a:	d1b9      	bne.n	ddf10 <_strtoul_r+0x58>
   ddf9c:	2308      	movs	r3, #8
   ddf9e:	e7b7      	b.n	ddf10 <_strtoul_r+0x58>
   ddfa0:	230a      	movs	r3, #10
   ddfa2:	e7b5      	b.n	ddf10 <_strtoul_r+0x58>
   ddfa4:	2c30      	cmp	r4, #48	; 0x30
   ddfa6:	d0ab      	beq.n	ddf00 <_strtoul_r+0x48>
   ddfa8:	e7b2      	b.n	ddf10 <_strtoul_r+0x58>
   ddfaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddfae:	bf00      	nop
   ddfb0:	2003d368 	.word	0x2003d368

000ddfb4 <strtoul>:
   ddfb4:	4613      	mov	r3, r2
   ddfb6:	460a      	mov	r2, r1
   ddfb8:	4601      	mov	r1, r0
   ddfba:	4802      	ldr	r0, [pc, #8]	; (ddfc4 <strtoul+0x10>)
   ddfbc:	6800      	ldr	r0, [r0, #0]
   ddfbe:	f7ff bf7b 	b.w	ddeb8 <_strtoul_r>
   ddfc2:	bf00      	nop
   ddfc4:	2003d3cc 	.word	0x2003d3cc

000ddfc8 <__tzcalc_limits>:
   ddfc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddfcc:	4604      	mov	r4, r0
   ddfce:	f000 fd8d 	bl	deaec <__gettzinfo>
   ddfd2:	f240 73b1 	movw	r3, #1969	; 0x7b1
   ddfd6:	429c      	cmp	r4, r3
   ddfd8:	f340 8096 	ble.w	de108 <__tzcalc_limits+0x140>
   ddfdc:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   ddfe0:	18e3      	adds	r3, r4, r3
   ddfe2:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   ddfe6:	109b      	asrs	r3, r3, #2
   ddfe8:	f240 156d 	movw	r5, #365	; 0x16d
   ddfec:	fb05 3502 	mla	r5, r5, r2, r3
   ddff0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   ddff4:	f06f 0363 	mvn.w	r3, #99	; 0x63
   ddff8:	fb92 f3f3 	sdiv	r3, r2, r3
   ddffc:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   de000:	442b      	add	r3, r5
   de002:	18a5      	adds	r5, r4, r2
   de004:	f44f 72c8 	mov.w	r2, #400	; 0x190
   de008:	fb95 f5f2 	sdiv	r5, r5, r2
   de00c:	441d      	add	r5, r3
   de00e:	2364      	movs	r3, #100	; 0x64
   de010:	fb94 f7f2 	sdiv	r7, r4, r2
   de014:	fb94 f6f3 	sdiv	r6, r4, r3
   de018:	fb02 4717 	mls	r7, r2, r7, r4
   de01c:	fb03 4616 	mls	r6, r3, r6, r4
   de020:	f100 0338 	add.w	r3, r0, #56	; 0x38
   de024:	fab7 fe87 	clz	lr, r7
   de028:	9301      	str	r3, [sp, #4]
   de02a:	f004 0303 	and.w	r3, r4, #3
   de02e:	6044      	str	r4, [r0, #4]
   de030:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   de034:	4601      	mov	r1, r0
   de036:	9300      	str	r3, [sp, #0]
   de038:	f04f 0c07 	mov.w	ip, #7
   de03c:	7a0b      	ldrb	r3, [r1, #8]
   de03e:	2b4a      	cmp	r3, #74	; 0x4a
   de040:	d10e      	bne.n	de060 <__tzcalc_limits+0x98>
   de042:	694b      	ldr	r3, [r1, #20]
   de044:	9a00      	ldr	r2, [sp, #0]
   de046:	18ec      	adds	r4, r5, r3
   de048:	b902      	cbnz	r2, de04c <__tzcalc_limits+0x84>
   de04a:	b906      	cbnz	r6, de04e <__tzcalc_limits+0x86>
   de04c:	b927      	cbnz	r7, de058 <__tzcalc_limits+0x90>
   de04e:	2b3b      	cmp	r3, #59	; 0x3b
   de050:	bfd4      	ite	le
   de052:	2300      	movle	r3, #0
   de054:	2301      	movgt	r3, #1
   de056:	e000      	b.n	de05a <__tzcalc_limits+0x92>
   de058:	2300      	movs	r3, #0
   de05a:	4423      	add	r3, r4
   de05c:	3b01      	subs	r3, #1
   de05e:	e03f      	b.n	de0e0 <__tzcalc_limits+0x118>
   de060:	2b44      	cmp	r3, #68	; 0x44
   de062:	d102      	bne.n	de06a <__tzcalc_limits+0xa2>
   de064:	694b      	ldr	r3, [r1, #20]
   de066:	442b      	add	r3, r5
   de068:	e03a      	b.n	de0e0 <__tzcalc_limits+0x118>
   de06a:	9b00      	ldr	r3, [sp, #0]
   de06c:	b92b      	cbnz	r3, de07a <__tzcalc_limits+0xb2>
   de06e:	2e00      	cmp	r6, #0
   de070:	bf0c      	ite	eq
   de072:	46f0      	moveq	r8, lr
   de074:	f04f 0801 	movne.w	r8, #1
   de078:	e000      	b.n	de07c <__tzcalc_limits+0xb4>
   de07a:	46f0      	mov	r8, lr
   de07c:	4b24      	ldr	r3, [pc, #144]	; (de110 <__tzcalc_limits+0x148>)
   de07e:	68cc      	ldr	r4, [r1, #12]
   de080:	2230      	movs	r2, #48	; 0x30
   de082:	fb02 3808 	mla	r8, r2, r8, r3
   de086:	f1a8 0a04 	sub.w	sl, r8, #4
   de08a:	46a9      	mov	r9, r5
   de08c:	2301      	movs	r3, #1
   de08e:	42a3      	cmp	r3, r4
   de090:	da04      	bge.n	de09c <__tzcalc_limits+0xd4>
   de092:	f85a bf04 	ldr.w	fp, [sl, #4]!
   de096:	3301      	adds	r3, #1
   de098:	44d9      	add	r9, fp
   de09a:	e7f8      	b.n	de08e <__tzcalc_limits+0xc6>
   de09c:	f109 0304 	add.w	r3, r9, #4
   de0a0:	fb93 fbfc 	sdiv	fp, r3, ip
   de0a4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   de0a8:	2c01      	cmp	r4, #1
   de0aa:	ebca 0a03 	rsb	sl, sl, r3
   de0ae:	694b      	ldr	r3, [r1, #20]
   de0b0:	bfb8      	it	lt
   de0b2:	2401      	movlt	r4, #1
   de0b4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   de0b8:	ebb3 0a0a 	subs.w	sl, r3, sl
   de0bc:	690b      	ldr	r3, [r1, #16]
   de0be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   de0c2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   de0c6:	bf48      	it	mi
   de0c8:	f10a 0a07 	addmi.w	sl, sl, #7
   de0cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   de0d0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   de0d4:	4453      	add	r3, sl
   de0d6:	42a3      	cmp	r3, r4
   de0d8:	db01      	blt.n	de0de <__tzcalc_limits+0x116>
   de0da:	3b07      	subs	r3, #7
   de0dc:	e7fb      	b.n	de0d6 <__tzcalc_limits+0x10e>
   de0de:	444b      	add	r3, r9
   de0e0:	698c      	ldr	r4, [r1, #24]
   de0e2:	4a0c      	ldr	r2, [pc, #48]	; (de114 <__tzcalc_limits+0x14c>)
   de0e4:	fb02 4303 	mla	r3, r2, r3, r4
   de0e8:	6a0c      	ldr	r4, [r1, #32]
   de0ea:	4423      	add	r3, r4
   de0ec:	f841 3f1c 	str.w	r3, [r1, #28]!
   de0f0:	9b01      	ldr	r3, [sp, #4]
   de0f2:	4299      	cmp	r1, r3
   de0f4:	d1a2      	bne.n	de03c <__tzcalc_limits+0x74>
   de0f6:	69c3      	ldr	r3, [r0, #28]
   de0f8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   de0fa:	4293      	cmp	r3, r2
   de0fc:	bfac      	ite	ge
   de0fe:	2300      	movge	r3, #0
   de100:	2301      	movlt	r3, #1
   de102:	6003      	str	r3, [r0, #0]
   de104:	2001      	movs	r0, #1
   de106:	e000      	b.n	de10a <__tzcalc_limits+0x142>
   de108:	2000      	movs	r0, #0
   de10a:	b003      	add	sp, #12
   de10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de110:	000e0064 	.word	0x000e0064
   de114:	00015180 	.word	0x00015180

000de118 <__tz_lock>:
   de118:	4770      	bx	lr

000de11a <__tz_unlock>:
   de11a:	4770      	bx	lr

000de11c <_tzset_unlocked>:
   de11c:	4b01      	ldr	r3, [pc, #4]	; (de124 <_tzset_unlocked+0x8>)
   de11e:	6818      	ldr	r0, [r3, #0]
   de120:	f000 b802 	b.w	de128 <_tzset_unlocked_r>
   de124:	2003d3cc 	.word	0x2003d3cc

000de128 <_tzset_unlocked_r>:
   de128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de12c:	b08d      	sub	sp, #52	; 0x34
   de12e:	4607      	mov	r7, r0
   de130:	f000 fcdc 	bl	deaec <__gettzinfo>
   de134:	49b0      	ldr	r1, [pc, #704]	; (de3f8 <_tzset_unlocked_r+0x2d0>)
   de136:	4eb1      	ldr	r6, [pc, #708]	; (de3fc <_tzset_unlocked_r+0x2d4>)
   de138:	4604      	mov	r4, r0
   de13a:	4638      	mov	r0, r7
   de13c:	f000 fcce 	bl	deadc <_getenv_r>
   de140:	4605      	mov	r5, r0
   de142:	b960      	cbnz	r0, de15e <_tzset_unlocked_r+0x36>
   de144:	4bae      	ldr	r3, [pc, #696]	; (de400 <_tzset_unlocked_r+0x2d8>)
   de146:	4aaf      	ldr	r2, [pc, #700]	; (de404 <_tzset_unlocked_r+0x2dc>)
   de148:	6018      	str	r0, [r3, #0]
   de14a:	4baf      	ldr	r3, [pc, #700]	; (de408 <_tzset_unlocked_r+0x2e0>)
   de14c:	6018      	str	r0, [r3, #0]
   de14e:	4baf      	ldr	r3, [pc, #700]	; (de40c <_tzset_unlocked_r+0x2e4>)
   de150:	6830      	ldr	r0, [r6, #0]
   de152:	601a      	str	r2, [r3, #0]
   de154:	605a      	str	r2, [r3, #4]
   de156:	f7fa f915 	bl	d8384 <free>
   de15a:	6035      	str	r5, [r6, #0]
   de15c:	e148      	b.n	de3f0 <_tzset_unlocked_r+0x2c8>
   de15e:	6831      	ldr	r1, [r6, #0]
   de160:	b979      	cbnz	r1, de182 <_tzset_unlocked_r+0x5a>
   de162:	6830      	ldr	r0, [r6, #0]
   de164:	f7fa f90e 	bl	d8384 <free>
   de168:	4628      	mov	r0, r5
   de16a:	f7fe ff86 	bl	dd07a <strlen>
   de16e:	1c41      	adds	r1, r0, #1
   de170:	4638      	mov	r0, r7
   de172:	f7fa f93f 	bl	d83f4 <_malloc_r>
   de176:	6030      	str	r0, [r6, #0]
   de178:	b148      	cbz	r0, de18e <_tzset_unlocked_r+0x66>
   de17a:	4629      	mov	r1, r5
   de17c:	f7fe ff59 	bl	dd032 <strcpy>
   de180:	e005      	b.n	de18e <_tzset_unlocked_r+0x66>
   de182:	f7fe ff4c 	bl	dd01e <strcmp>
   de186:	2800      	cmp	r0, #0
   de188:	f000 8132 	beq.w	de3f0 <_tzset_unlocked_r+0x2c8>
   de18c:	e7e9      	b.n	de162 <_tzset_unlocked_r+0x3a>
   de18e:	782b      	ldrb	r3, [r5, #0]
   de190:	4a9f      	ldr	r2, [pc, #636]	; (de410 <_tzset_unlocked_r+0x2e8>)
   de192:	49a0      	ldr	r1, [pc, #640]	; (de414 <_tzset_unlocked_r+0x2ec>)
   de194:	2b3a      	cmp	r3, #58	; 0x3a
   de196:	bf08      	it	eq
   de198:	3501      	addeq	r5, #1
   de19a:	ae0a      	add	r6, sp, #40	; 0x28
   de19c:	4633      	mov	r3, r6
   de19e:	4628      	mov	r0, r5
   de1a0:	f7fa f908 	bl	d83b4 <siscanf>
   de1a4:	2800      	cmp	r0, #0
   de1a6:	f340 8123 	ble.w	de3f0 <_tzset_unlocked_r+0x2c8>
   de1aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   de1ac:	18ef      	adds	r7, r5, r3
   de1ae:	5ceb      	ldrb	r3, [r5, r3]
   de1b0:	2b2d      	cmp	r3, #45	; 0x2d
   de1b2:	d103      	bne.n	de1bc <_tzset_unlocked_r+0x94>
   de1b4:	3701      	adds	r7, #1
   de1b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   de1ba:	e003      	b.n	de1c4 <_tzset_unlocked_r+0x9c>
   de1bc:	2b2b      	cmp	r3, #43	; 0x2b
   de1be:	bf08      	it	eq
   de1c0:	3701      	addeq	r7, #1
   de1c2:	2501      	movs	r5, #1
   de1c4:	f10d 0a20 	add.w	sl, sp, #32
   de1c8:	f10d 0b1e 	add.w	fp, sp, #30
   de1cc:	f04f 0800 	mov.w	r8, #0
   de1d0:	9603      	str	r6, [sp, #12]
   de1d2:	f8cd a008 	str.w	sl, [sp, #8]
   de1d6:	9601      	str	r6, [sp, #4]
   de1d8:	f8cd b000 	str.w	fp, [sp]
   de1dc:	4633      	mov	r3, r6
   de1de:	aa07      	add	r2, sp, #28
   de1e0:	498d      	ldr	r1, [pc, #564]	; (de418 <_tzset_unlocked_r+0x2f0>)
   de1e2:	f8ad 801e 	strh.w	r8, [sp, #30]
   de1e6:	4638      	mov	r0, r7
   de1e8:	f8ad 8020 	strh.w	r8, [sp, #32]
   de1ec:	f7fa f8e2 	bl	d83b4 <siscanf>
   de1f0:	4540      	cmp	r0, r8
   de1f2:	f340 80fd 	ble.w	de3f0 <_tzset_unlocked_r+0x2c8>
   de1f6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   de1fa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   de1fe:	f8df 9224 	ldr.w	r9, [pc, #548]	; de424 <_tzset_unlocked_r+0x2fc>
   de202:	213c      	movs	r1, #60	; 0x3c
   de204:	fb01 3302 	mla	r3, r1, r2, r3
   de208:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   de20c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   de210:	fb01 3302 	mla	r3, r1, r2, r3
   de214:	435d      	muls	r5, r3
   de216:	6225      	str	r5, [r4, #32]
   de218:	4d7c      	ldr	r5, [pc, #496]	; (de40c <_tzset_unlocked_r+0x2e4>)
   de21a:	4b7d      	ldr	r3, [pc, #500]	; (de410 <_tzset_unlocked_r+0x2e8>)
   de21c:	602b      	str	r3, [r5, #0]
   de21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   de220:	497c      	ldr	r1, [pc, #496]	; (de414 <_tzset_unlocked_r+0x2ec>)
   de222:	441f      	add	r7, r3
   de224:	464a      	mov	r2, r9
   de226:	4633      	mov	r3, r6
   de228:	4638      	mov	r0, r7
   de22a:	f7fa f8c3 	bl	d83b4 <siscanf>
   de22e:	4540      	cmp	r0, r8
   de230:	dc08      	bgt.n	de244 <_tzset_unlocked_r+0x11c>
   de232:	682b      	ldr	r3, [r5, #0]
   de234:	606b      	str	r3, [r5, #4]
   de236:	4b72      	ldr	r3, [pc, #456]	; (de400 <_tzset_unlocked_r+0x2d8>)
   de238:	6a22      	ldr	r2, [r4, #32]
   de23a:	601a      	str	r2, [r3, #0]
   de23c:	4b72      	ldr	r3, [pc, #456]	; (de408 <_tzset_unlocked_r+0x2e0>)
   de23e:	f8c3 8000 	str.w	r8, [r3]
   de242:	e0d5      	b.n	de3f0 <_tzset_unlocked_r+0x2c8>
   de244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   de246:	f8c5 9004 	str.w	r9, [r5, #4]
   de24a:	18fd      	adds	r5, r7, r3
   de24c:	5cfb      	ldrb	r3, [r7, r3]
   de24e:	2b2d      	cmp	r3, #45	; 0x2d
   de250:	d103      	bne.n	de25a <_tzset_unlocked_r+0x132>
   de252:	3501      	adds	r5, #1
   de254:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   de258:	e003      	b.n	de262 <_tzset_unlocked_r+0x13a>
   de25a:	2b2b      	cmp	r3, #43	; 0x2b
   de25c:	bf08      	it	eq
   de25e:	3501      	addeq	r5, #1
   de260:	2701      	movs	r7, #1
   de262:	2300      	movs	r3, #0
   de264:	f8ad 301c 	strh.w	r3, [sp, #28]
   de268:	f8ad 301e 	strh.w	r3, [sp, #30]
   de26c:	f8ad 3020 	strh.w	r3, [sp, #32]
   de270:	930a      	str	r3, [sp, #40]	; 0x28
   de272:	9603      	str	r6, [sp, #12]
   de274:	f8cd a008 	str.w	sl, [sp, #8]
   de278:	9601      	str	r6, [sp, #4]
   de27a:	f8cd b000 	str.w	fp, [sp]
   de27e:	4633      	mov	r3, r6
   de280:	aa07      	add	r2, sp, #28
   de282:	4965      	ldr	r1, [pc, #404]	; (de418 <_tzset_unlocked_r+0x2f0>)
   de284:	4628      	mov	r0, r5
   de286:	f7fa f895 	bl	d83b4 <siscanf>
   de28a:	2800      	cmp	r0, #0
   de28c:	dc04      	bgt.n	de298 <_tzset_unlocked_r+0x170>
   de28e:	6a23      	ldr	r3, [r4, #32]
   de290:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   de294:	63e3      	str	r3, [r4, #60]	; 0x3c
   de296:	e00e      	b.n	de2b6 <_tzset_unlocked_r+0x18e>
   de298:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   de29c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   de2a0:	213c      	movs	r1, #60	; 0x3c
   de2a2:	fb01 3302 	mla	r3, r1, r2, r3
   de2a6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   de2aa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   de2ae:	fb01 3302 	mla	r3, r1, r2, r3
   de2b2:	435f      	muls	r7, r3
   de2b4:	63e7      	str	r7, [r4, #60]	; 0x3c
   de2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   de2b8:	4627      	mov	r7, r4
   de2ba:	441d      	add	r5, r3
   de2bc:	f04f 0900 	mov.w	r9, #0
   de2c0:	782b      	ldrb	r3, [r5, #0]
   de2c2:	2b2c      	cmp	r3, #44	; 0x2c
   de2c4:	bf08      	it	eq
   de2c6:	3501      	addeq	r5, #1
   de2c8:	f895 8000 	ldrb.w	r8, [r5]
   de2cc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   de2d0:	d126      	bne.n	de320 <_tzset_unlocked_r+0x1f8>
   de2d2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   de2d6:	9302      	str	r3, [sp, #8]
   de2d8:	ab09      	add	r3, sp, #36	; 0x24
   de2da:	9300      	str	r3, [sp, #0]
   de2dc:	9603      	str	r6, [sp, #12]
   de2de:	9601      	str	r6, [sp, #4]
   de2e0:	4633      	mov	r3, r6
   de2e2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   de2e6:	494d      	ldr	r1, [pc, #308]	; (de41c <_tzset_unlocked_r+0x2f4>)
   de2e8:	4628      	mov	r0, r5
   de2ea:	f7fa f863 	bl	d83b4 <siscanf>
   de2ee:	2803      	cmp	r0, #3
   de2f0:	d17e      	bne.n	de3f0 <_tzset_unlocked_r+0x2c8>
   de2f2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   de2f6:	1e4b      	subs	r3, r1, #1
   de2f8:	2b0b      	cmp	r3, #11
   de2fa:	d879      	bhi.n	de3f0 <_tzset_unlocked_r+0x2c8>
   de2fc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   de300:	1e53      	subs	r3, r2, #1
   de302:	2b04      	cmp	r3, #4
   de304:	d874      	bhi.n	de3f0 <_tzset_unlocked_r+0x2c8>
   de306:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   de30a:	2b06      	cmp	r3, #6
   de30c:	d870      	bhi.n	de3f0 <_tzset_unlocked_r+0x2c8>
   de30e:	f887 8008 	strb.w	r8, [r7, #8]
   de312:	60f9      	str	r1, [r7, #12]
   de314:	613a      	str	r2, [r7, #16]
   de316:	617b      	str	r3, [r7, #20]
   de318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   de31a:	eb05 0803 	add.w	r8, r5, r3
   de31e:	e02a      	b.n	de376 <_tzset_unlocked_r+0x24e>
   de320:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   de324:	bf06      	itte	eq
   de326:	3501      	addeq	r5, #1
   de328:	4643      	moveq	r3, r8
   de32a:	2344      	movne	r3, #68	; 0x44
   de32c:	220a      	movs	r2, #10
   de32e:	a90b      	add	r1, sp, #44	; 0x2c
   de330:	4628      	mov	r0, r5
   de332:	9305      	str	r3, [sp, #20]
   de334:	f7ff fe3e 	bl	ddfb4 <strtoul>
   de338:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   de33c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   de340:	4545      	cmp	r5, r8
   de342:	9b05      	ldr	r3, [sp, #20]
   de344:	d114      	bne.n	de370 <_tzset_unlocked_r+0x248>
   de346:	234d      	movs	r3, #77	; 0x4d
   de348:	f1b9 0f00 	cmp.w	r9, #0
   de34c:	d107      	bne.n	de35e <_tzset_unlocked_r+0x236>
   de34e:	7223      	strb	r3, [r4, #8]
   de350:	2303      	movs	r3, #3
   de352:	60e3      	str	r3, [r4, #12]
   de354:	2302      	movs	r3, #2
   de356:	6123      	str	r3, [r4, #16]
   de358:	f8c4 9014 	str.w	r9, [r4, #20]
   de35c:	e00b      	b.n	de376 <_tzset_unlocked_r+0x24e>
   de35e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   de362:	230b      	movs	r3, #11
   de364:	62a3      	str	r3, [r4, #40]	; 0x28
   de366:	2301      	movs	r3, #1
   de368:	62e3      	str	r3, [r4, #44]	; 0x2c
   de36a:	2300      	movs	r3, #0
   de36c:	6323      	str	r3, [r4, #48]	; 0x30
   de36e:	e002      	b.n	de376 <_tzset_unlocked_r+0x24e>
   de370:	b280      	uxth	r0, r0
   de372:	723b      	strb	r3, [r7, #8]
   de374:	6178      	str	r0, [r7, #20]
   de376:	2302      	movs	r3, #2
   de378:	f8ad 301c 	strh.w	r3, [sp, #28]
   de37c:	2300      	movs	r3, #0
   de37e:	f8ad 301e 	strh.w	r3, [sp, #30]
   de382:	f8ad 3020 	strh.w	r3, [sp, #32]
   de386:	930a      	str	r3, [sp, #40]	; 0x28
   de388:	f898 3000 	ldrb.w	r3, [r8]
   de38c:	2b2f      	cmp	r3, #47	; 0x2f
   de38e:	d10b      	bne.n	de3a8 <_tzset_unlocked_r+0x280>
   de390:	9603      	str	r6, [sp, #12]
   de392:	f8cd a008 	str.w	sl, [sp, #8]
   de396:	9601      	str	r6, [sp, #4]
   de398:	f8cd b000 	str.w	fp, [sp]
   de39c:	4633      	mov	r3, r6
   de39e:	aa07      	add	r2, sp, #28
   de3a0:	491f      	ldr	r1, [pc, #124]	; (de420 <_tzset_unlocked_r+0x2f8>)
   de3a2:	4640      	mov	r0, r8
   de3a4:	f7fa f806 	bl	d83b4 <siscanf>
   de3a8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   de3ac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   de3b0:	213c      	movs	r1, #60	; 0x3c
   de3b2:	fb01 3302 	mla	r3, r1, r2, r3
   de3b6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   de3ba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   de3be:	fb01 3302 	mla	r3, r1, r2, r3
   de3c2:	61bb      	str	r3, [r7, #24]
   de3c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   de3c6:	f109 0901 	add.w	r9, r9, #1
   de3ca:	f1b9 0f02 	cmp.w	r9, #2
   de3ce:	4445      	add	r5, r8
   de3d0:	f107 071c 	add.w	r7, r7, #28
   de3d4:	f47f af74 	bne.w	de2c0 <_tzset_unlocked_r+0x198>
   de3d8:	6860      	ldr	r0, [r4, #4]
   de3da:	f7ff fdf5 	bl	ddfc8 <__tzcalc_limits>
   de3de:	4b08      	ldr	r3, [pc, #32]	; (de400 <_tzset_unlocked_r+0x2d8>)
   de3e0:	6a22      	ldr	r2, [r4, #32]
   de3e2:	601a      	str	r2, [r3, #0]
   de3e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   de3e6:	1a9b      	subs	r3, r3, r2
   de3e8:	4a07      	ldr	r2, [pc, #28]	; (de408 <_tzset_unlocked_r+0x2e0>)
   de3ea:	bf18      	it	ne
   de3ec:	2301      	movne	r3, #1
   de3ee:	6013      	str	r3, [r2, #0]
   de3f0:	b00d      	add	sp, #52	; 0x34
   de3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de3f6:	bf00      	nop
   de3f8:	000e0120 	.word	0x000e0120
   de3fc:	2003e7e0 	.word	0x2003e7e0
   de400:	2003e7e8 	.word	0x2003e7e8
   de404:	000e0123 	.word	0x000e0123
   de408:	2003e7e4 	.word	0x2003e7e4
   de40c:	2003d408 	.word	0x2003d408
   de410:	2003e7d3 	.word	0x2003e7d3
   de414:	000e0127 	.word	0x000e0127
   de418:	000e014a 	.word	0x000e014a
   de41c:	000e0136 	.word	0x000e0136
   de420:	000e0149 	.word	0x000e0149
   de424:	2003e7c8 	.word	0x2003e7c8

000de428 <rshift>:
   de428:	b5f0      	push	{r4, r5, r6, r7, lr}
   de42a:	6906      	ldr	r6, [r0, #16]
   de42c:	114b      	asrs	r3, r1, #5
   de42e:	42b3      	cmp	r3, r6
   de430:	f100 0514 	add.w	r5, r0, #20
   de434:	da27      	bge.n	de486 <rshift+0x5e>
   de436:	f011 011f 	ands.w	r1, r1, #31
   de43a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   de43e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   de442:	d101      	bne.n	de448 <rshift+0x20>
   de444:	4629      	mov	r1, r5
   de446:	e016      	b.n	de476 <rshift+0x4e>
   de448:	1d14      	adds	r4, r2, #4
   de44a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   de44e:	f1c1 0e20 	rsb	lr, r1, #32
   de452:	40ca      	lsrs	r2, r1
   de454:	462b      	mov	r3, r5
   de456:	42b4      	cmp	r4, r6
   de458:	d209      	bcs.n	de46e <rshift+0x46>
   de45a:	6827      	ldr	r7, [r4, #0]
   de45c:	fa07 f70e 	lsl.w	r7, r7, lr
   de460:	433a      	orrs	r2, r7
   de462:	f843 2b04 	str.w	r2, [r3], #4
   de466:	f854 2b04 	ldr.w	r2, [r4], #4
   de46a:	40ca      	lsrs	r2, r1
   de46c:	e7f3      	b.n	de456 <rshift+0x2e>
   de46e:	601a      	str	r2, [r3, #0]
   de470:	b152      	cbz	r2, de488 <rshift+0x60>
   de472:	3304      	adds	r3, #4
   de474:	e008      	b.n	de488 <rshift+0x60>
   de476:	42b2      	cmp	r2, r6
   de478:	460b      	mov	r3, r1
   de47a:	d205      	bcs.n	de488 <rshift+0x60>
   de47c:	f852 3b04 	ldr.w	r3, [r2], #4
   de480:	f841 3b04 	str.w	r3, [r1], #4
   de484:	e7f7      	b.n	de476 <rshift+0x4e>
   de486:	462b      	mov	r3, r5
   de488:	1b5b      	subs	r3, r3, r5
   de48a:	109b      	asrs	r3, r3, #2
   de48c:	6103      	str	r3, [r0, #16]
   de48e:	b903      	cbnz	r3, de492 <rshift+0x6a>
   de490:	6143      	str	r3, [r0, #20]
   de492:	bdf0      	pop	{r4, r5, r6, r7, pc}

000de494 <__hexdig_fun>:
   de494:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   de498:	2b09      	cmp	r3, #9
   de49a:	d801      	bhi.n	de4a0 <__hexdig_fun+0xc>
   de49c:	3820      	subs	r0, #32
   de49e:	e00a      	b.n	de4b6 <__hexdig_fun+0x22>
   de4a0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   de4a4:	2b05      	cmp	r3, #5
   de4a6:	d801      	bhi.n	de4ac <__hexdig_fun+0x18>
   de4a8:	3847      	subs	r0, #71	; 0x47
   de4aa:	e004      	b.n	de4b6 <__hexdig_fun+0x22>
   de4ac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   de4b0:	2b05      	cmp	r3, #5
   de4b2:	d802      	bhi.n	de4ba <__hexdig_fun+0x26>
   de4b4:	3827      	subs	r0, #39	; 0x27
   de4b6:	b2c0      	uxtb	r0, r0
   de4b8:	4770      	bx	lr
   de4ba:	2000      	movs	r0, #0
   de4bc:	4770      	bx	lr

000de4be <__gethex>:
   de4be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de4c2:	b08b      	sub	sp, #44	; 0x2c
   de4c4:	468a      	mov	sl, r1
   de4c6:	4690      	mov	r8, r2
   de4c8:	9306      	str	r3, [sp, #24]
   de4ca:	9002      	str	r0, [sp, #8]
   de4cc:	f7fe fd16 	bl	dcefc <_localeconv_r>
   de4d0:	6803      	ldr	r3, [r0, #0]
   de4d2:	9303      	str	r3, [sp, #12]
   de4d4:	4618      	mov	r0, r3
   de4d6:	f7fe fdd0 	bl	dd07a <strlen>
   de4da:	9b03      	ldr	r3, [sp, #12]
   de4dc:	9001      	str	r0, [sp, #4]
   de4de:	4403      	add	r3, r0
   de4e0:	f04f 0b00 	mov.w	fp, #0
   de4e4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   de4e8:	9307      	str	r3, [sp, #28]
   de4ea:	f8da 3000 	ldr.w	r3, [sl]
   de4ee:	3302      	adds	r3, #2
   de4f0:	461f      	mov	r7, r3
   de4f2:	f813 0b01 	ldrb.w	r0, [r3], #1
   de4f6:	2830      	cmp	r0, #48	; 0x30
   de4f8:	d102      	bne.n	de500 <__gethex+0x42>
   de4fa:	f10b 0b01 	add.w	fp, fp, #1
   de4fe:	e7f7      	b.n	de4f0 <__gethex+0x32>
   de500:	f7ff ffc8 	bl	de494 <__hexdig_fun>
   de504:	4604      	mov	r4, r0
   de506:	b9e0      	cbnz	r0, de542 <__gethex+0x84>
   de508:	9a01      	ldr	r2, [sp, #4]
   de50a:	9903      	ldr	r1, [sp, #12]
   de50c:	4638      	mov	r0, r7
   de50e:	f7fe fdd1 	bl	dd0b4 <strncmp>
   de512:	2800      	cmp	r0, #0
   de514:	d134      	bne.n	de580 <__gethex+0xc2>
   de516:	9b01      	ldr	r3, [sp, #4]
   de518:	5cf8      	ldrb	r0, [r7, r3]
   de51a:	18fe      	adds	r6, r7, r3
   de51c:	f7ff ffba 	bl	de494 <__hexdig_fun>
   de520:	b380      	cbz	r0, de584 <__gethex+0xc6>
   de522:	4633      	mov	r3, r6
   de524:	7818      	ldrb	r0, [r3, #0]
   de526:	2830      	cmp	r0, #48	; 0x30
   de528:	461f      	mov	r7, r3
   de52a:	f103 0301 	add.w	r3, r3, #1
   de52e:	d0f9      	beq.n	de524 <__gethex+0x66>
   de530:	f7ff ffb0 	bl	de494 <__hexdig_fun>
   de534:	fab0 f580 	clz	r5, r0
   de538:	096d      	lsrs	r5, r5, #5
   de53a:	4634      	mov	r4, r6
   de53c:	f04f 0b01 	mov.w	fp, #1
   de540:	e001      	b.n	de546 <__gethex+0x88>
   de542:	2500      	movs	r5, #0
   de544:	462c      	mov	r4, r5
   de546:	463a      	mov	r2, r7
   de548:	4616      	mov	r6, r2
   de54a:	3201      	adds	r2, #1
   de54c:	7830      	ldrb	r0, [r6, #0]
   de54e:	f7ff ffa1 	bl	de494 <__hexdig_fun>
   de552:	2800      	cmp	r0, #0
   de554:	d1f8      	bne.n	de548 <__gethex+0x8a>
   de556:	9a01      	ldr	r2, [sp, #4]
   de558:	9903      	ldr	r1, [sp, #12]
   de55a:	4630      	mov	r0, r6
   de55c:	f7fe fdaa 	bl	dd0b4 <strncmp>
   de560:	b950      	cbnz	r0, de578 <__gethex+0xba>
   de562:	b954      	cbnz	r4, de57a <__gethex+0xbc>
   de564:	9b01      	ldr	r3, [sp, #4]
   de566:	18f4      	adds	r4, r6, r3
   de568:	4622      	mov	r2, r4
   de56a:	4616      	mov	r6, r2
   de56c:	3201      	adds	r2, #1
   de56e:	7830      	ldrb	r0, [r6, #0]
   de570:	f7ff ff90 	bl	de494 <__hexdig_fun>
   de574:	2800      	cmp	r0, #0
   de576:	d1f8      	bne.n	de56a <__gethex+0xac>
   de578:	b134      	cbz	r4, de588 <__gethex+0xca>
   de57a:	1ba4      	subs	r4, r4, r6
   de57c:	00a4      	lsls	r4, r4, #2
   de57e:	e003      	b.n	de588 <__gethex+0xca>
   de580:	463e      	mov	r6, r7
   de582:	e000      	b.n	de586 <__gethex+0xc8>
   de584:	4604      	mov	r4, r0
   de586:	2501      	movs	r5, #1
   de588:	7833      	ldrb	r3, [r6, #0]
   de58a:	2b50      	cmp	r3, #80	; 0x50
   de58c:	d001      	beq.n	de592 <__gethex+0xd4>
   de58e:	2b70      	cmp	r3, #112	; 0x70
   de590:	d12a      	bne.n	de5e8 <__gethex+0x12a>
   de592:	7873      	ldrb	r3, [r6, #1]
   de594:	2b2b      	cmp	r3, #43	; 0x2b
   de596:	d008      	beq.n	de5aa <__gethex+0xec>
   de598:	2b2d      	cmp	r3, #45	; 0x2d
   de59a:	d003      	beq.n	de5a4 <__gethex+0xe6>
   de59c:	1c71      	adds	r1, r6, #1
   de59e:	f04f 0900 	mov.w	r9, #0
   de5a2:	e005      	b.n	de5b0 <__gethex+0xf2>
   de5a4:	f04f 0901 	mov.w	r9, #1
   de5a8:	e001      	b.n	de5ae <__gethex+0xf0>
   de5aa:	f04f 0900 	mov.w	r9, #0
   de5ae:	1cb1      	adds	r1, r6, #2
   de5b0:	7808      	ldrb	r0, [r1, #0]
   de5b2:	f7ff ff6f 	bl	de494 <__hexdig_fun>
   de5b6:	1e43      	subs	r3, r0, #1
   de5b8:	b2db      	uxtb	r3, r3
   de5ba:	2b18      	cmp	r3, #24
   de5bc:	d814      	bhi.n	de5e8 <__gethex+0x12a>
   de5be:	f1a0 0210 	sub.w	r2, r0, #16
   de5c2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   de5c6:	f7ff ff65 	bl	de494 <__hexdig_fun>
   de5ca:	1e43      	subs	r3, r0, #1
   de5cc:	b2db      	uxtb	r3, r3
   de5ce:	2b18      	cmp	r3, #24
   de5d0:	d804      	bhi.n	de5dc <__gethex+0x11e>
   de5d2:	230a      	movs	r3, #10
   de5d4:	fb03 0202 	mla	r2, r3, r2, r0
   de5d8:	3a10      	subs	r2, #16
   de5da:	e7f2      	b.n	de5c2 <__gethex+0x104>
   de5dc:	f1b9 0f00 	cmp.w	r9, #0
   de5e0:	d000      	beq.n	de5e4 <__gethex+0x126>
   de5e2:	4252      	negs	r2, r2
   de5e4:	4414      	add	r4, r2
   de5e6:	e000      	b.n	de5ea <__gethex+0x12c>
   de5e8:	4631      	mov	r1, r6
   de5ea:	f8ca 1000 	str.w	r1, [sl]
   de5ee:	b12d      	cbz	r5, de5fc <__gethex+0x13e>
   de5f0:	f1bb 0f00 	cmp.w	fp, #0
   de5f4:	bf14      	ite	ne
   de5f6:	2000      	movne	r0, #0
   de5f8:	2006      	moveq	r0, #6
   de5fa:	e17c      	b.n	de8f6 <__gethex+0x438>
   de5fc:	1bf3      	subs	r3, r6, r7
   de5fe:	3b01      	subs	r3, #1
   de600:	4629      	mov	r1, r5
   de602:	2b07      	cmp	r3, #7
   de604:	dd02      	ble.n	de60c <__gethex+0x14e>
   de606:	3101      	adds	r1, #1
   de608:	105b      	asrs	r3, r3, #1
   de60a:	e7fa      	b.n	de602 <__gethex+0x144>
   de60c:	9802      	ldr	r0, [sp, #8]
   de60e:	f000 fb09 	bl	dec24 <_Balloc>
   de612:	9b01      	ldr	r3, [sp, #4]
   de614:	f100 0a14 	add.w	sl, r0, #20
   de618:	f04f 0900 	mov.w	r9, #0
   de61c:	f1c3 0301 	rsb	r3, r3, #1
   de620:	4605      	mov	r5, r0
   de622:	f8cd a010 	str.w	sl, [sp, #16]
   de626:	46cb      	mov	fp, r9
   de628:	9308      	str	r3, [sp, #32]
   de62a:	42b7      	cmp	r7, r6
   de62c:	d22f      	bcs.n	de68e <__gethex+0x1d0>
   de62e:	1e73      	subs	r3, r6, #1
   de630:	9305      	str	r3, [sp, #20]
   de632:	9a07      	ldr	r2, [sp, #28]
   de634:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   de638:	4293      	cmp	r3, r2
   de63a:	d00b      	beq.n	de654 <__gethex+0x196>
   de63c:	f1bb 0f20 	cmp.w	fp, #32
   de640:	d116      	bne.n	de670 <__gethex+0x1b2>
   de642:	9b04      	ldr	r3, [sp, #16]
   de644:	f8c3 9000 	str.w	r9, [r3]
   de648:	3304      	adds	r3, #4
   de64a:	f04f 0900 	mov.w	r9, #0
   de64e:	9304      	str	r3, [sp, #16]
   de650:	46cb      	mov	fp, r9
   de652:	e00d      	b.n	de670 <__gethex+0x1b2>
   de654:	9b05      	ldr	r3, [sp, #20]
   de656:	9a08      	ldr	r2, [sp, #32]
   de658:	4413      	add	r3, r2
   de65a:	429f      	cmp	r7, r3
   de65c:	d8ee      	bhi.n	de63c <__gethex+0x17e>
   de65e:	4618      	mov	r0, r3
   de660:	9a01      	ldr	r2, [sp, #4]
   de662:	9903      	ldr	r1, [sp, #12]
   de664:	9309      	str	r3, [sp, #36]	; 0x24
   de666:	f7fe fd25 	bl	dd0b4 <strncmp>
   de66a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   de66c:	b168      	cbz	r0, de68a <__gethex+0x1cc>
   de66e:	e7e5      	b.n	de63c <__gethex+0x17e>
   de670:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   de674:	f7ff ff0e 	bl	de494 <__hexdig_fun>
   de678:	f000 000f 	and.w	r0, r0, #15
   de67c:	fa00 f00b 	lsl.w	r0, r0, fp
   de680:	9b05      	ldr	r3, [sp, #20]
   de682:	ea49 0900 	orr.w	r9, r9, r0
   de686:	f10b 0b04 	add.w	fp, fp, #4
   de68a:	461e      	mov	r6, r3
   de68c:	e7cd      	b.n	de62a <__gethex+0x16c>
   de68e:	9804      	ldr	r0, [sp, #16]
   de690:	f840 9b04 	str.w	r9, [r0], #4
   de694:	ebca 0000 	rsb	r0, sl, r0
   de698:	1080      	asrs	r0, r0, #2
   de69a:	6128      	str	r0, [r5, #16]
   de69c:	0147      	lsls	r7, r0, #5
   de69e:	4648      	mov	r0, r9
   de6a0:	f000 fb85 	bl	dedae <__hi0bits>
   de6a4:	f8d8 6000 	ldr.w	r6, [r8]
   de6a8:	1a38      	subs	r0, r7, r0
   de6aa:	42b0      	cmp	r0, r6
   de6ac:	dd26      	ble.n	de6fc <__gethex+0x23e>
   de6ae:	1b87      	subs	r7, r0, r6
   de6b0:	4639      	mov	r1, r7
   de6b2:	4628      	mov	r0, r5
   de6b4:	f000 fe83 	bl	df3be <__any_on>
   de6b8:	b1c8      	cbz	r0, de6ee <__gethex+0x230>
   de6ba:	1e7b      	subs	r3, r7, #1
   de6bc:	1159      	asrs	r1, r3, #5
   de6be:	f003 021f 	and.w	r2, r3, #31
   de6c2:	f04f 0901 	mov.w	r9, #1
   de6c6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   de6ca:	fa09 f202 	lsl.w	r2, r9, r2
   de6ce:	420a      	tst	r2, r1
   de6d0:	d00e      	beq.n	de6f0 <__gethex+0x232>
   de6d2:	454b      	cmp	r3, r9
   de6d4:	dc02      	bgt.n	de6dc <__gethex+0x21e>
   de6d6:	f04f 0902 	mov.w	r9, #2
   de6da:	e009      	b.n	de6f0 <__gethex+0x232>
   de6dc:	1eb9      	subs	r1, r7, #2
   de6de:	4628      	mov	r0, r5
   de6e0:	f000 fe6d 	bl	df3be <__any_on>
   de6e4:	2800      	cmp	r0, #0
   de6e6:	d0f6      	beq.n	de6d6 <__gethex+0x218>
   de6e8:	f04f 0903 	mov.w	r9, #3
   de6ec:	e000      	b.n	de6f0 <__gethex+0x232>
   de6ee:	4681      	mov	r9, r0
   de6f0:	4639      	mov	r1, r7
   de6f2:	4628      	mov	r0, r5
   de6f4:	f7ff fe98 	bl	de428 <rshift>
   de6f8:	443c      	add	r4, r7
   de6fa:	e00c      	b.n	de716 <__gethex+0x258>
   de6fc:	da09      	bge.n	de712 <__gethex+0x254>
   de6fe:	1a37      	subs	r7, r6, r0
   de700:	4629      	mov	r1, r5
   de702:	463a      	mov	r2, r7
   de704:	9802      	ldr	r0, [sp, #8]
   de706:	f000 fc87 	bl	df018 <__lshift>
   de70a:	1be4      	subs	r4, r4, r7
   de70c:	4605      	mov	r5, r0
   de70e:	f100 0a14 	add.w	sl, r0, #20
   de712:	f04f 0900 	mov.w	r9, #0
   de716:	f8d8 3008 	ldr.w	r3, [r8, #8]
   de71a:	429c      	cmp	r4, r3
   de71c:	dd08      	ble.n	de730 <__gethex+0x272>
   de71e:	9802      	ldr	r0, [sp, #8]
   de720:	4629      	mov	r1, r5
   de722:	f000 fab4 	bl	dec8e <_Bfree>
   de726:	9a14      	ldr	r2, [sp, #80]	; 0x50
   de728:	2300      	movs	r3, #0
   de72a:	6013      	str	r3, [r2, #0]
   de72c:	20a3      	movs	r0, #163	; 0xa3
   de72e:	e0e2      	b.n	de8f6 <__gethex+0x438>
   de730:	f8d8 0004 	ldr.w	r0, [r8, #4]
   de734:	4284      	cmp	r4, r0
   de736:	da53      	bge.n	de7e0 <__gethex+0x322>
   de738:	1b04      	subs	r4, r0, r4
   de73a:	42a6      	cmp	r6, r4
   de73c:	dc2e      	bgt.n	de79c <__gethex+0x2de>
   de73e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   de742:	2b02      	cmp	r3, #2
   de744:	d01a      	beq.n	de77c <__gethex+0x2be>
   de746:	2b03      	cmp	r3, #3
   de748:	d01c      	beq.n	de784 <__gethex+0x2c6>
   de74a:	2b01      	cmp	r3, #1
   de74c:	d11d      	bne.n	de78a <__gethex+0x2cc>
   de74e:	42a6      	cmp	r6, r4
   de750:	d11b      	bne.n	de78a <__gethex+0x2cc>
   de752:	2e01      	cmp	r6, #1
   de754:	dc0b      	bgt.n	de76e <__gethex+0x2b0>
   de756:	9a06      	ldr	r2, [sp, #24]
   de758:	f8d8 3004 	ldr.w	r3, [r8, #4]
   de75c:	6013      	str	r3, [r2, #0]
   de75e:	2301      	movs	r3, #1
   de760:	612b      	str	r3, [r5, #16]
   de762:	f8ca 3000 	str.w	r3, [sl]
   de766:	9b14      	ldr	r3, [sp, #80]	; 0x50
   de768:	2062      	movs	r0, #98	; 0x62
   de76a:	601d      	str	r5, [r3, #0]
   de76c:	e0c3      	b.n	de8f6 <__gethex+0x438>
   de76e:	1e71      	subs	r1, r6, #1
   de770:	4628      	mov	r0, r5
   de772:	f000 fe24 	bl	df3be <__any_on>
   de776:	2800      	cmp	r0, #0
   de778:	d1ed      	bne.n	de756 <__gethex+0x298>
   de77a:	e006      	b.n	de78a <__gethex+0x2cc>
   de77c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   de77e:	2b00      	cmp	r3, #0
   de780:	d0e9      	beq.n	de756 <__gethex+0x298>
   de782:	e002      	b.n	de78a <__gethex+0x2cc>
   de784:	9b15      	ldr	r3, [sp, #84]	; 0x54
   de786:	2b00      	cmp	r3, #0
   de788:	d1e5      	bne.n	de756 <__gethex+0x298>
   de78a:	9802      	ldr	r0, [sp, #8]
   de78c:	4629      	mov	r1, r5
   de78e:	f000 fa7e 	bl	dec8e <_Bfree>
   de792:	9a14      	ldr	r2, [sp, #80]	; 0x50
   de794:	2300      	movs	r3, #0
   de796:	6013      	str	r3, [r2, #0]
   de798:	2050      	movs	r0, #80	; 0x50
   de79a:	e0ac      	b.n	de8f6 <__gethex+0x438>
   de79c:	1e67      	subs	r7, r4, #1
   de79e:	f1b9 0f00 	cmp.w	r9, #0
   de7a2:	d106      	bne.n	de7b2 <__gethex+0x2f4>
   de7a4:	b13f      	cbz	r7, de7b6 <__gethex+0x2f8>
   de7a6:	4639      	mov	r1, r7
   de7a8:	4628      	mov	r0, r5
   de7aa:	f000 fe08 	bl	df3be <__any_on>
   de7ae:	4681      	mov	r9, r0
   de7b0:	e001      	b.n	de7b6 <__gethex+0x2f8>
   de7b2:	f04f 0901 	mov.w	r9, #1
   de7b6:	117a      	asrs	r2, r7, #5
   de7b8:	2301      	movs	r3, #1
   de7ba:	f007 071f 	and.w	r7, r7, #31
   de7be:	fa03 f707 	lsl.w	r7, r3, r7
   de7c2:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   de7c6:	4621      	mov	r1, r4
   de7c8:	421f      	tst	r7, r3
   de7ca:	4628      	mov	r0, r5
   de7cc:	bf18      	it	ne
   de7ce:	f049 0902 	orrne.w	r9, r9, #2
   de7d2:	1b36      	subs	r6, r6, r4
   de7d4:	f7ff fe28 	bl	de428 <rshift>
   de7d8:	2702      	movs	r7, #2
   de7da:	f8d8 4004 	ldr.w	r4, [r8, #4]
   de7de:	e000      	b.n	de7e2 <__gethex+0x324>
   de7e0:	2701      	movs	r7, #1
   de7e2:	f1b9 0f00 	cmp.w	r9, #0
   de7e6:	f000 8081 	beq.w	de8ec <__gethex+0x42e>
   de7ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
   de7ee:	2b02      	cmp	r3, #2
   de7f0:	d00e      	beq.n	de810 <__gethex+0x352>
   de7f2:	2b03      	cmp	r3, #3
   de7f4:	d010      	beq.n	de818 <__gethex+0x35a>
   de7f6:	2b01      	cmp	r3, #1
   de7f8:	d176      	bne.n	de8e8 <__gethex+0x42a>
   de7fa:	f019 0f02 	tst.w	r9, #2
   de7fe:	d073      	beq.n	de8e8 <__gethex+0x42a>
   de800:	f8da 0000 	ldr.w	r0, [sl]
   de804:	ea49 0900 	orr.w	r9, r9, r0
   de808:	f019 0f01 	tst.w	r9, #1
   de80c:	d107      	bne.n	de81e <__gethex+0x360>
   de80e:	e06b      	b.n	de8e8 <__gethex+0x42a>
   de810:	9b15      	ldr	r3, [sp, #84]	; 0x54
   de812:	f1c3 0301 	rsb	r3, r3, #1
   de816:	9315      	str	r3, [sp, #84]	; 0x54
   de818:	9b15      	ldr	r3, [sp, #84]	; 0x54
   de81a:	2b00      	cmp	r3, #0
   de81c:	d064      	beq.n	de8e8 <__gethex+0x42a>
   de81e:	f8d5 a010 	ldr.w	sl, [r5, #16]
   de822:	f105 0314 	add.w	r3, r5, #20
   de826:	ea4f 098a 	mov.w	r9, sl, lsl #2
   de82a:	eb03 0109 	add.w	r1, r3, r9
   de82e:	2000      	movs	r0, #0
   de830:	681a      	ldr	r2, [r3, #0]
   de832:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   de836:	d002      	beq.n	de83e <__gethex+0x380>
   de838:	3201      	adds	r2, #1
   de83a:	601a      	str	r2, [r3, #0]
   de83c:	e020      	b.n	de880 <__gethex+0x3c2>
   de83e:	f843 0b04 	str.w	r0, [r3], #4
   de842:	4299      	cmp	r1, r3
   de844:	d8f4      	bhi.n	de830 <__gethex+0x372>
   de846:	68ab      	ldr	r3, [r5, #8]
   de848:	459a      	cmp	sl, r3
   de84a:	db12      	blt.n	de872 <__gethex+0x3b4>
   de84c:	6869      	ldr	r1, [r5, #4]
   de84e:	9802      	ldr	r0, [sp, #8]
   de850:	3101      	adds	r1, #1
   de852:	f000 f9e7 	bl	dec24 <_Balloc>
   de856:	692a      	ldr	r2, [r5, #16]
   de858:	3202      	adds	r2, #2
   de85a:	f105 010c 	add.w	r1, r5, #12
   de85e:	4683      	mov	fp, r0
   de860:	0092      	lsls	r2, r2, #2
   de862:	300c      	adds	r0, #12
   de864:	f7fe fb5d 	bl	dcf22 <memcpy>
   de868:	4629      	mov	r1, r5
   de86a:	9802      	ldr	r0, [sp, #8]
   de86c:	f000 fa0f 	bl	dec8e <_Bfree>
   de870:	465d      	mov	r5, fp
   de872:	692b      	ldr	r3, [r5, #16]
   de874:	1c5a      	adds	r2, r3, #1
   de876:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   de87a:	612a      	str	r2, [r5, #16]
   de87c:	2201      	movs	r2, #1
   de87e:	615a      	str	r2, [r3, #20]
   de880:	2f02      	cmp	r7, #2
   de882:	f105 0214 	add.w	r2, r5, #20
   de886:	d111      	bne.n	de8ac <__gethex+0x3ee>
   de888:	f8d8 3000 	ldr.w	r3, [r8]
   de88c:	3b01      	subs	r3, #1
   de88e:	429e      	cmp	r6, r3
   de890:	d127      	bne.n	de8e2 <__gethex+0x424>
   de892:	1171      	asrs	r1, r6, #5
   de894:	2301      	movs	r3, #1
   de896:	f006 061f 	and.w	r6, r6, #31
   de89a:	fa03 f606 	lsl.w	r6, r3, r6
   de89e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   de8a2:	421e      	tst	r6, r3
   de8a4:	bf0c      	ite	eq
   de8a6:	2702      	moveq	r7, #2
   de8a8:	2701      	movne	r7, #1
   de8aa:	e01a      	b.n	de8e2 <__gethex+0x424>
   de8ac:	692b      	ldr	r3, [r5, #16]
   de8ae:	459a      	cmp	sl, r3
   de8b0:	da0a      	bge.n	de8c8 <__gethex+0x40a>
   de8b2:	2101      	movs	r1, #1
   de8b4:	4628      	mov	r0, r5
   de8b6:	f7ff fdb7 	bl	de428 <rshift>
   de8ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
   de8be:	3401      	adds	r4, #1
   de8c0:	429c      	cmp	r4, r3
   de8c2:	f73f af2c 	bgt.w	de71e <__gethex+0x260>
   de8c6:	e00b      	b.n	de8e0 <__gethex+0x422>
   de8c8:	f016 061f 	ands.w	r6, r6, #31
   de8cc:	d008      	beq.n	de8e0 <__gethex+0x422>
   de8ce:	4491      	add	r9, r2
   de8d0:	f1c6 0620 	rsb	r6, r6, #32
   de8d4:	f859 0c04 	ldr.w	r0, [r9, #-4]
   de8d8:	f000 fa69 	bl	dedae <__hi0bits>
   de8dc:	42b0      	cmp	r0, r6
   de8de:	dbe8      	blt.n	de8b2 <__gethex+0x3f4>
   de8e0:	2701      	movs	r7, #1
   de8e2:	f047 0720 	orr.w	r7, r7, #32
   de8e6:	e001      	b.n	de8ec <__gethex+0x42e>
   de8e8:	f047 0710 	orr.w	r7, r7, #16
   de8ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
   de8ee:	601d      	str	r5, [r3, #0]
   de8f0:	9b06      	ldr	r3, [sp, #24]
   de8f2:	4638      	mov	r0, r7
   de8f4:	601c      	str	r4, [r3, #0]
   de8f6:	b00b      	add	sp, #44	; 0x2c
   de8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000de8fc <L_shift>:
   de8fc:	f1c2 0208 	rsb	r2, r2, #8
   de900:	0092      	lsls	r2, r2, #2
   de902:	b570      	push	{r4, r5, r6, lr}
   de904:	f1c2 0620 	rsb	r6, r2, #32
   de908:	6843      	ldr	r3, [r0, #4]
   de90a:	6805      	ldr	r5, [r0, #0]
   de90c:	fa03 f406 	lsl.w	r4, r3, r6
   de910:	432c      	orrs	r4, r5
   de912:	40d3      	lsrs	r3, r2
   de914:	6004      	str	r4, [r0, #0]
   de916:	f840 3f04 	str.w	r3, [r0, #4]!
   de91a:	4288      	cmp	r0, r1
   de91c:	d3f4      	bcc.n	de908 <L_shift+0xc>
   de91e:	bd70      	pop	{r4, r5, r6, pc}

000de920 <__match>:
   de920:	b530      	push	{r4, r5, lr}
   de922:	6803      	ldr	r3, [r0, #0]
   de924:	f811 4b01 	ldrb.w	r4, [r1], #1
   de928:	3301      	adds	r3, #1
   de92a:	b14c      	cbz	r4, de940 <__match+0x20>
   de92c:	781a      	ldrb	r2, [r3, #0]
   de92e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   de932:	2d19      	cmp	r5, #25
   de934:	bf98      	it	ls
   de936:	3220      	addls	r2, #32
   de938:	42a2      	cmp	r2, r4
   de93a:	d0f3      	beq.n	de924 <__match+0x4>
   de93c:	2000      	movs	r0, #0
   de93e:	bd30      	pop	{r4, r5, pc}
   de940:	6003      	str	r3, [r0, #0]
   de942:	2001      	movs	r0, #1
   de944:	bd30      	pop	{r4, r5, pc}

000de946 <__hexnan>:
   de946:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de94a:	680b      	ldr	r3, [r1, #0]
   de94c:	f8d0 b000 	ldr.w	fp, [r0]
   de950:	115e      	asrs	r6, r3, #5
   de952:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   de956:	f013 031f 	ands.w	r3, r3, #31
   de95a:	b085      	sub	sp, #20
   de95c:	bf18      	it	ne
   de95e:	3604      	addne	r6, #4
   de960:	1f35      	subs	r5, r6, #4
   de962:	4617      	mov	r7, r2
   de964:	2200      	movs	r2, #0
   de966:	4682      	mov	sl, r0
   de968:	9301      	str	r3, [sp, #4]
   de96a:	f846 2c04 	str.w	r2, [r6, #-4]
   de96e:	46a8      	mov	r8, r5
   de970:	462c      	mov	r4, r5
   de972:	9200      	str	r2, [sp, #0]
   de974:	4691      	mov	r9, r2
   de976:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   de97a:	2900      	cmp	r1, #0
   de97c:	d03c      	beq.n	de9f8 <__hexnan+0xb2>
   de97e:	4608      	mov	r0, r1
   de980:	9203      	str	r2, [sp, #12]
   de982:	9102      	str	r1, [sp, #8]
   de984:	f7ff fd86 	bl	de494 <__hexdig_fun>
   de988:	9a03      	ldr	r2, [sp, #12]
   de98a:	bb00      	cbnz	r0, de9ce <__hexnan+0x88>
   de98c:	9902      	ldr	r1, [sp, #8]
   de98e:	2920      	cmp	r1, #32
   de990:	d816      	bhi.n	de9c0 <__hexnan+0x7a>
   de992:	9b00      	ldr	r3, [sp, #0]
   de994:	4599      	cmp	r9, r3
   de996:	ddee      	ble.n	de976 <__hexnan+0x30>
   de998:	4544      	cmp	r4, r8
   de99a:	d205      	bcs.n	de9a8 <__hexnan+0x62>
   de99c:	2a07      	cmp	r2, #7
   de99e:	dc03      	bgt.n	de9a8 <__hexnan+0x62>
   de9a0:	4641      	mov	r1, r8
   de9a2:	4620      	mov	r0, r4
   de9a4:	f7ff ffaa 	bl	de8fc <L_shift>
   de9a8:	42bc      	cmp	r4, r7
   de9aa:	d923      	bls.n	de9f4 <__hexnan+0xae>
   de9ac:	2300      	movs	r3, #0
   de9ae:	f1a4 0804 	sub.w	r8, r4, #4
   de9b2:	f844 3c04 	str.w	r3, [r4, #-4]
   de9b6:	f8cd 9000 	str.w	r9, [sp]
   de9ba:	4644      	mov	r4, r8
   de9bc:	461a      	mov	r2, r3
   de9be:	e7da      	b.n	de976 <__hexnan+0x30>
   de9c0:	2929      	cmp	r1, #41	; 0x29
   de9c2:	d148      	bne.n	dea56 <__hexnan+0x110>
   de9c4:	f10b 0301 	add.w	r3, fp, #1
   de9c8:	f8ca 3000 	str.w	r3, [sl]
   de9cc:	e014      	b.n	de9f8 <__hexnan+0xb2>
   de9ce:	3201      	adds	r2, #1
   de9d0:	2a08      	cmp	r2, #8
   de9d2:	f109 0901 	add.w	r9, r9, #1
   de9d6:	dd06      	ble.n	de9e6 <__hexnan+0xa0>
   de9d8:	42bc      	cmp	r4, r7
   de9da:	d9cc      	bls.n	de976 <__hexnan+0x30>
   de9dc:	2300      	movs	r3, #0
   de9de:	f844 3c04 	str.w	r3, [r4, #-4]
   de9e2:	2201      	movs	r2, #1
   de9e4:	3c04      	subs	r4, #4
   de9e6:	6821      	ldr	r1, [r4, #0]
   de9e8:	f000 000f 	and.w	r0, r0, #15
   de9ec:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   de9f0:	6020      	str	r0, [r4, #0]
   de9f2:	e7c0      	b.n	de976 <__hexnan+0x30>
   de9f4:	2208      	movs	r2, #8
   de9f6:	e7be      	b.n	de976 <__hexnan+0x30>
   de9f8:	f1b9 0f00 	cmp.w	r9, #0
   de9fc:	d02b      	beq.n	dea56 <__hexnan+0x110>
   de9fe:	4544      	cmp	r4, r8
   dea00:	d205      	bcs.n	dea0e <__hexnan+0xc8>
   dea02:	2a07      	cmp	r2, #7
   dea04:	dc03      	bgt.n	dea0e <__hexnan+0xc8>
   dea06:	4641      	mov	r1, r8
   dea08:	4620      	mov	r0, r4
   dea0a:	f7ff ff77 	bl	de8fc <L_shift>
   dea0e:	42bc      	cmp	r4, r7
   dea10:	d90c      	bls.n	dea2c <__hexnan+0xe6>
   dea12:	463b      	mov	r3, r7
   dea14:	f854 2b04 	ldr.w	r2, [r4], #4
   dea18:	f843 2b04 	str.w	r2, [r3], #4
   dea1c:	42a5      	cmp	r5, r4
   dea1e:	d2f9      	bcs.n	dea14 <__hexnan+0xce>
   dea20:	2200      	movs	r2, #0
   dea22:	f843 2b04 	str.w	r2, [r3], #4
   dea26:	429d      	cmp	r5, r3
   dea28:	d2fb      	bcs.n	dea22 <__hexnan+0xdc>
   dea2a:	e00b      	b.n	dea44 <__hexnan+0xfe>
   dea2c:	9b01      	ldr	r3, [sp, #4]
   dea2e:	b14b      	cbz	r3, dea44 <__hexnan+0xfe>
   dea30:	f1c3 0220 	rsb	r2, r3, #32
   dea34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dea38:	40d3      	lsrs	r3, r2
   dea3a:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dea3e:	4013      	ands	r3, r2
   dea40:	f846 3c04 	str.w	r3, [r6, #-4]
   dea44:	682b      	ldr	r3, [r5, #0]
   dea46:	b943      	cbnz	r3, dea5a <__hexnan+0x114>
   dea48:	42bd      	cmp	r5, r7
   dea4a:	d102      	bne.n	dea52 <__hexnan+0x10c>
   dea4c:	2301      	movs	r3, #1
   dea4e:	602b      	str	r3, [r5, #0]
   dea50:	e003      	b.n	dea5a <__hexnan+0x114>
   dea52:	3d04      	subs	r5, #4
   dea54:	e7f6      	b.n	dea44 <__hexnan+0xfe>
   dea56:	2004      	movs	r0, #4
   dea58:	e000      	b.n	dea5c <__hexnan+0x116>
   dea5a:	2005      	movs	r0, #5
   dea5c:	b005      	add	sp, #20
   dea5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000dea64 <_findenv_r>:
   dea64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dea68:	4607      	mov	r7, r0
   dea6a:	468b      	mov	fp, r1
   dea6c:	4690      	mov	r8, r2
   dea6e:	f000 fcd6 	bl	df41e <__env_lock>
   dea72:	4b19      	ldr	r3, [pc, #100]	; (dead8 <_findenv_r+0x74>)
   dea74:	681d      	ldr	r5, [r3, #0]
   dea76:	469a      	mov	sl, r3
   dea78:	b13d      	cbz	r5, dea8a <_findenv_r+0x26>
   dea7a:	465c      	mov	r4, fp
   dea7c:	4623      	mov	r3, r4
   dea7e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dea82:	b142      	cbz	r2, dea96 <_findenv_r+0x32>
   dea84:	2a3d      	cmp	r2, #61	; 0x3d
   dea86:	461c      	mov	r4, r3
   dea88:	d1f8      	bne.n	dea7c <_findenv_r+0x18>
   dea8a:	4638      	mov	r0, r7
   dea8c:	f000 fcc8 	bl	df420 <__env_unlock>
   dea90:	2000      	movs	r0, #0
   dea92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dea96:	ebcb 0404 	rsb	r4, fp, r4
   dea9a:	46a9      	mov	r9, r5
   dea9c:	f859 0b04 	ldr.w	r0, [r9], #4
   deaa0:	2800      	cmp	r0, #0
   deaa2:	d0f2      	beq.n	dea8a <_findenv_r+0x26>
   deaa4:	4622      	mov	r2, r4
   deaa6:	4659      	mov	r1, fp
   deaa8:	f7fe fb04 	bl	dd0b4 <strncmp>
   deaac:	b988      	cbnz	r0, dead2 <_findenv_r+0x6e>
   deaae:	f859 3c04 	ldr.w	r3, [r9, #-4]
   deab2:	191e      	adds	r6, r3, r4
   deab4:	5d1b      	ldrb	r3, [r3, r4]
   deab6:	2b3d      	cmp	r3, #61	; 0x3d
   deab8:	d10b      	bne.n	dead2 <_findenv_r+0x6e>
   deaba:	f8da 3000 	ldr.w	r3, [sl]
   deabe:	1aed      	subs	r5, r5, r3
   deac0:	10ad      	asrs	r5, r5, #2
   deac2:	4638      	mov	r0, r7
   deac4:	f8c8 5000 	str.w	r5, [r8]
   deac8:	f000 fcaa 	bl	df420 <__env_unlock>
   deacc:	1c70      	adds	r0, r6, #1
   deace:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dead2:	464d      	mov	r5, r9
   dead4:	e7e1      	b.n	dea9a <_findenv_r+0x36>
   dead6:	bf00      	nop
   dead8:	2003d450 	.word	0x2003d450

000deadc <_getenv_r>:
   deadc:	b507      	push	{r0, r1, r2, lr}
   deade:	aa01      	add	r2, sp, #4
   deae0:	f7ff ffc0 	bl	dea64 <_findenv_r>
   deae4:	b003      	add	sp, #12
   deae6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000deaec <__gettzinfo>:
   deaec:	4800      	ldr	r0, [pc, #0]	; (deaf0 <__gettzinfo+0x4>)
   deaee:	4770      	bx	lr
   deaf0:	2003d410 	.word	0x2003d410

000deaf4 <gmtime_r>:
   deaf4:	6802      	ldr	r2, [r0, #0]
   deaf6:	4b47      	ldr	r3, [pc, #284]	; (dec14 <gmtime_r+0x120>)
   deaf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   deafa:	fb92 f4f3 	sdiv	r4, r2, r3
   deafe:	fb03 2214 	mls	r2, r3, r4, r2
   deb02:	2a00      	cmp	r2, #0
   deb04:	bfbc      	itt	lt
   deb06:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   deb0a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   deb0e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   deb12:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   deb16:	fb92 f3f0 	sdiv	r3, r2, r0
   deb1a:	fb00 2213 	mls	r2, r0, r3, r2
   deb1e:	f04f 003c 	mov.w	r0, #60	; 0x3c
   deb22:	bfac      	ite	ge
   deb24:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   deb28:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   deb2c:	608b      	str	r3, [r1, #8]
   deb2e:	fb92 f3f0 	sdiv	r3, r2, r0
   deb32:	fb00 2213 	mls	r2, r0, r3, r2
   deb36:	604b      	str	r3, [r1, #4]
   deb38:	600a      	str	r2, [r1, #0]
   deb3a:	2307      	movs	r3, #7
   deb3c:	1ce2      	adds	r2, r4, #3
   deb3e:	fb92 f3f3 	sdiv	r3, r2, r3
   deb42:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   deb46:	1ad3      	subs	r3, r2, r3
   deb48:	618b      	str	r3, [r1, #24]
   deb4a:	4b33      	ldr	r3, [pc, #204]	; (dec18 <gmtime_r+0x124>)
   deb4c:	4d33      	ldr	r5, [pc, #204]	; (dec1c <gmtime_r+0x128>)
   deb4e:	fb94 f5f5 	sdiv	r5, r4, r5
   deb52:	fb03 4405 	mla	r4, r3, r5, r4
   deb56:	f648 62ac 	movw	r2, #36524	; 0x8eac
   deb5a:	fbb4 f2f2 	udiv	r2, r4, r2
   deb5e:	4422      	add	r2, r4
   deb60:	f240 57b4 	movw	r7, #1460	; 0x5b4
   deb64:	fbb4 f3f7 	udiv	r3, r4, r7
   deb68:	1ad2      	subs	r2, r2, r3
   deb6a:	482d      	ldr	r0, [pc, #180]	; (dec20 <gmtime_r+0x12c>)
   deb6c:	fbb4 f0f0 	udiv	r0, r4, r0
   deb70:	f648 6694 	movw	r6, #36500	; 0x8e94
   deb74:	1a13      	subs	r3, r2, r0
   deb76:	fbb3 f6f6 	udiv	r6, r3, r6
   deb7a:	4434      	add	r4, r6
   deb7c:	f240 126d 	movw	r2, #365	; 0x16d
   deb80:	fbb3 f0f2 	udiv	r0, r3, r2
   deb84:	fbb3 f3f7 	udiv	r3, r3, r7
   deb88:	1ae3      	subs	r3, r4, r3
   deb8a:	fb02 3310 	mls	r3, r2, r0, r3
   deb8e:	2499      	movs	r4, #153	; 0x99
   deb90:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   deb94:	3202      	adds	r2, #2
   deb96:	fbb2 f2f4 	udiv	r2, r2, r4
   deb9a:	2a0a      	cmp	r2, #10
   deb9c:	fb04 f402 	mul.w	r4, r4, r2
   deba0:	f104 0602 	add.w	r6, r4, #2
   deba4:	f04f 0405 	mov.w	r4, #5
   deba8:	fbb6 f4f4 	udiv	r4, r6, r4
   debac:	bf34      	ite	cc
   debae:	2602      	movcc	r6, #2
   debb0:	f06f 0609 	mvncs.w	r6, #9
   debb4:	4416      	add	r6, r2
   debb6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   debba:	fb02 0505 	mla	r5, r2, r5, r0
   debbe:	1c5f      	adds	r7, r3, #1
   debc0:	2e01      	cmp	r6, #1
   debc2:	bf98      	it	ls
   debc4:	3501      	addls	r5, #1
   debc6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   debca:	eba7 0704 	sub.w	r7, r7, r4
   debce:	d302      	bcc.n	debd6 <gmtime_r+0xe2>
   debd0:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   debd4:	e014      	b.n	dec00 <gmtime_r+0x10c>
   debd6:	0782      	lsls	r2, r0, #30
   debd8:	d105      	bne.n	debe6 <gmtime_r+0xf2>
   debda:	2464      	movs	r4, #100	; 0x64
   debdc:	fbb0 f2f4 	udiv	r2, r0, r4
   debe0:	fb04 0212 	mls	r2, r4, r2, r0
   debe4:	b94a      	cbnz	r2, debfa <gmtime_r+0x106>
   debe6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   debea:	fbb0 f4f2 	udiv	r4, r0, r2
   debee:	fb02 0014 	mls	r0, r2, r4, r0
   debf2:	fab0 f280 	clz	r2, r0
   debf6:	0952      	lsrs	r2, r2, #5
   debf8:	e000      	b.n	debfc <gmtime_r+0x108>
   debfa:	2201      	movs	r2, #1
   debfc:	333b      	adds	r3, #59	; 0x3b
   debfe:	441a      	add	r2, r3
   dec00:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dec04:	2300      	movs	r3, #0
   dec06:	61ca      	str	r2, [r1, #28]
   dec08:	614d      	str	r5, [r1, #20]
   dec0a:	610e      	str	r6, [r1, #16]
   dec0c:	60cf      	str	r7, [r1, #12]
   dec0e:	620b      	str	r3, [r1, #32]
   dec10:	4608      	mov	r0, r1
   dec12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dec14:	00015180 	.word	0x00015180
   dec18:	fffdc54f 	.word	0xfffdc54f
   dec1c:	00023ab1 	.word	0x00023ab1
   dec20:	00023ab0 	.word	0x00023ab0

000dec24 <_Balloc>:
   dec24:	b570      	push	{r4, r5, r6, lr}
   dec26:	6a45      	ldr	r5, [r0, #36]	; 0x24
   dec28:	4604      	mov	r4, r0
   dec2a:	460e      	mov	r6, r1
   dec2c:	b93d      	cbnz	r5, dec3e <_Balloc+0x1a>
   dec2e:	2010      	movs	r0, #16
   dec30:	f7f9 fba0 	bl	d8374 <malloc>
   dec34:	6260      	str	r0, [r4, #36]	; 0x24
   dec36:	6045      	str	r5, [r0, #4]
   dec38:	6085      	str	r5, [r0, #8]
   dec3a:	6005      	str	r5, [r0, #0]
   dec3c:	60c5      	str	r5, [r0, #12]
   dec3e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   dec40:	68eb      	ldr	r3, [r5, #12]
   dec42:	b143      	cbz	r3, dec56 <_Balloc+0x32>
   dec44:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dec46:	68db      	ldr	r3, [r3, #12]
   dec48:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   dec4c:	b178      	cbz	r0, dec6e <_Balloc+0x4a>
   dec4e:	6802      	ldr	r2, [r0, #0]
   dec50:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   dec54:	e017      	b.n	dec86 <_Balloc+0x62>
   dec56:	2221      	movs	r2, #33	; 0x21
   dec58:	2104      	movs	r1, #4
   dec5a:	4620      	mov	r0, r4
   dec5c:	f000 fbd1 	bl	df402 <_calloc_r>
   dec60:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dec62:	60e8      	str	r0, [r5, #12]
   dec64:	68db      	ldr	r3, [r3, #12]
   dec66:	2b00      	cmp	r3, #0
   dec68:	d1ec      	bne.n	dec44 <_Balloc+0x20>
   dec6a:	2000      	movs	r0, #0
   dec6c:	bd70      	pop	{r4, r5, r6, pc}
   dec6e:	2101      	movs	r1, #1
   dec70:	fa01 f506 	lsl.w	r5, r1, r6
   dec74:	1d6a      	adds	r2, r5, #5
   dec76:	0092      	lsls	r2, r2, #2
   dec78:	4620      	mov	r0, r4
   dec7a:	f000 fbc2 	bl	df402 <_calloc_r>
   dec7e:	2800      	cmp	r0, #0
   dec80:	d0f3      	beq.n	dec6a <_Balloc+0x46>
   dec82:	6046      	str	r6, [r0, #4]
   dec84:	6085      	str	r5, [r0, #8]
   dec86:	2300      	movs	r3, #0
   dec88:	6103      	str	r3, [r0, #16]
   dec8a:	60c3      	str	r3, [r0, #12]
   dec8c:	bd70      	pop	{r4, r5, r6, pc}

000dec8e <_Bfree>:
   dec8e:	b570      	push	{r4, r5, r6, lr}
   dec90:	6a44      	ldr	r4, [r0, #36]	; 0x24
   dec92:	4606      	mov	r6, r0
   dec94:	460d      	mov	r5, r1
   dec96:	b93c      	cbnz	r4, deca8 <_Bfree+0x1a>
   dec98:	2010      	movs	r0, #16
   dec9a:	f7f9 fb6b 	bl	d8374 <malloc>
   dec9e:	6270      	str	r0, [r6, #36]	; 0x24
   deca0:	6044      	str	r4, [r0, #4]
   deca2:	6084      	str	r4, [r0, #8]
   deca4:	6004      	str	r4, [r0, #0]
   deca6:	60c4      	str	r4, [r0, #12]
   deca8:	b13d      	cbz	r5, decba <_Bfree+0x2c>
   decaa:	6a73      	ldr	r3, [r6, #36]	; 0x24
   decac:	686a      	ldr	r2, [r5, #4]
   decae:	68db      	ldr	r3, [r3, #12]
   decb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   decb4:	6029      	str	r1, [r5, #0]
   decb6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   decba:	bd70      	pop	{r4, r5, r6, pc}

000decbc <__multadd>:
   decbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   decc0:	690d      	ldr	r5, [r1, #16]
   decc2:	461f      	mov	r7, r3
   decc4:	4606      	mov	r6, r0
   decc6:	460c      	mov	r4, r1
   decc8:	f101 0e14 	add.w	lr, r1, #20
   deccc:	2300      	movs	r3, #0
   decce:	f8de 0000 	ldr.w	r0, [lr]
   decd2:	b281      	uxth	r1, r0
   decd4:	fb02 7101 	mla	r1, r2, r1, r7
   decd8:	0c0f      	lsrs	r7, r1, #16
   decda:	0c00      	lsrs	r0, r0, #16
   decdc:	fb02 7000 	mla	r0, r2, r0, r7
   dece0:	b289      	uxth	r1, r1
   dece2:	3301      	adds	r3, #1
   dece4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   dece8:	429d      	cmp	r5, r3
   decea:	ea4f 4710 	mov.w	r7, r0, lsr #16
   decee:	f84e 1b04 	str.w	r1, [lr], #4
   decf2:	dcec      	bgt.n	decce <__multadd+0x12>
   decf4:	b1d7      	cbz	r7, ded2c <__multadd+0x70>
   decf6:	68a3      	ldr	r3, [r4, #8]
   decf8:	429d      	cmp	r5, r3
   decfa:	db12      	blt.n	ded22 <__multadd+0x66>
   decfc:	6861      	ldr	r1, [r4, #4]
   decfe:	4630      	mov	r0, r6
   ded00:	3101      	adds	r1, #1
   ded02:	f7ff ff8f 	bl	dec24 <_Balloc>
   ded06:	6922      	ldr	r2, [r4, #16]
   ded08:	3202      	adds	r2, #2
   ded0a:	f104 010c 	add.w	r1, r4, #12
   ded0e:	4680      	mov	r8, r0
   ded10:	0092      	lsls	r2, r2, #2
   ded12:	300c      	adds	r0, #12
   ded14:	f7fe f905 	bl	dcf22 <memcpy>
   ded18:	4621      	mov	r1, r4
   ded1a:	4630      	mov	r0, r6
   ded1c:	f7ff ffb7 	bl	dec8e <_Bfree>
   ded20:	4644      	mov	r4, r8
   ded22:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   ded26:	3501      	adds	r5, #1
   ded28:	615f      	str	r7, [r3, #20]
   ded2a:	6125      	str	r5, [r4, #16]
   ded2c:	4620      	mov	r0, r4
   ded2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ded32 <__s2b>:
   ded32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ded36:	460c      	mov	r4, r1
   ded38:	4615      	mov	r5, r2
   ded3a:	461f      	mov	r7, r3
   ded3c:	2209      	movs	r2, #9
   ded3e:	3308      	adds	r3, #8
   ded40:	4606      	mov	r6, r0
   ded42:	fb93 f3f2 	sdiv	r3, r3, r2
   ded46:	2100      	movs	r1, #0
   ded48:	2201      	movs	r2, #1
   ded4a:	429a      	cmp	r2, r3
   ded4c:	da02      	bge.n	ded54 <__s2b+0x22>
   ded4e:	0052      	lsls	r2, r2, #1
   ded50:	3101      	adds	r1, #1
   ded52:	e7fa      	b.n	ded4a <__s2b+0x18>
   ded54:	4630      	mov	r0, r6
   ded56:	f7ff ff65 	bl	dec24 <_Balloc>
   ded5a:	9b08      	ldr	r3, [sp, #32]
   ded5c:	6143      	str	r3, [r0, #20]
   ded5e:	2d09      	cmp	r5, #9
   ded60:	f04f 0301 	mov.w	r3, #1
   ded64:	6103      	str	r3, [r0, #16]
   ded66:	dd11      	ble.n	ded8c <__s2b+0x5a>
   ded68:	f104 0809 	add.w	r8, r4, #9
   ded6c:	46c1      	mov	r9, r8
   ded6e:	442c      	add	r4, r5
   ded70:	f819 3b01 	ldrb.w	r3, [r9], #1
   ded74:	4601      	mov	r1, r0
   ded76:	3b30      	subs	r3, #48	; 0x30
   ded78:	220a      	movs	r2, #10
   ded7a:	4630      	mov	r0, r6
   ded7c:	f7ff ff9e 	bl	decbc <__multadd>
   ded80:	45a1      	cmp	r9, r4
   ded82:	d1f5      	bne.n	ded70 <__s2b+0x3e>
   ded84:	eb08 0405 	add.w	r4, r8, r5
   ded88:	3c08      	subs	r4, #8
   ded8a:	e001      	b.n	ded90 <__s2b+0x5e>
   ded8c:	340a      	adds	r4, #10
   ded8e:	2509      	movs	r5, #9
   ded90:	1b2d      	subs	r5, r5, r4
   ded92:	1963      	adds	r3, r4, r5
   ded94:	429f      	cmp	r7, r3
   ded96:	dd08      	ble.n	dedaa <__s2b+0x78>
   ded98:	f814 3b01 	ldrb.w	r3, [r4], #1
   ded9c:	4601      	mov	r1, r0
   ded9e:	3b30      	subs	r3, #48	; 0x30
   deda0:	220a      	movs	r2, #10
   deda2:	4630      	mov	r0, r6
   deda4:	f7ff ff8a 	bl	decbc <__multadd>
   deda8:	e7f3      	b.n	ded92 <__s2b+0x60>
   dedaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dedae <__hi0bits>:
   dedae:	0c03      	lsrs	r3, r0, #16
   dedb0:	041b      	lsls	r3, r3, #16
   dedb2:	b913      	cbnz	r3, dedba <__hi0bits+0xc>
   dedb4:	0400      	lsls	r0, r0, #16
   dedb6:	2310      	movs	r3, #16
   dedb8:	e000      	b.n	dedbc <__hi0bits+0xe>
   dedba:	2300      	movs	r3, #0
   dedbc:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dedc0:	bf04      	itt	eq
   dedc2:	0200      	lsleq	r0, r0, #8
   dedc4:	3308      	addeq	r3, #8
   dedc6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dedca:	bf04      	itt	eq
   dedcc:	0100      	lsleq	r0, r0, #4
   dedce:	3304      	addeq	r3, #4
   dedd0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dedd4:	bf04      	itt	eq
   dedd6:	0080      	lsleq	r0, r0, #2
   dedd8:	3302      	addeq	r3, #2
   dedda:	2800      	cmp	r0, #0
   deddc:	db03      	blt.n	dede6 <__hi0bits+0x38>
   dedde:	0042      	lsls	r2, r0, #1
   dede0:	d503      	bpl.n	dedea <__hi0bits+0x3c>
   dede2:	1c58      	adds	r0, r3, #1
   dede4:	4770      	bx	lr
   dede6:	4618      	mov	r0, r3
   dede8:	4770      	bx	lr
   dedea:	2020      	movs	r0, #32
   dedec:	4770      	bx	lr

000dedee <__lo0bits>:
   dedee:	6803      	ldr	r3, [r0, #0]
   dedf0:	f013 0207 	ands.w	r2, r3, #7
   dedf4:	d00b      	beq.n	dee0e <__lo0bits+0x20>
   dedf6:	07d9      	lsls	r1, r3, #31
   dedf8:	d422      	bmi.n	dee40 <__lo0bits+0x52>
   dedfa:	079a      	lsls	r2, r3, #30
   dedfc:	bf4b      	itete	mi
   dedfe:	085b      	lsrmi	r3, r3, #1
   dee00:	089b      	lsrpl	r3, r3, #2
   dee02:	6003      	strmi	r3, [r0, #0]
   dee04:	6003      	strpl	r3, [r0, #0]
   dee06:	bf4c      	ite	mi
   dee08:	2001      	movmi	r0, #1
   dee0a:	2002      	movpl	r0, #2
   dee0c:	4770      	bx	lr
   dee0e:	b299      	uxth	r1, r3
   dee10:	b909      	cbnz	r1, dee16 <__lo0bits+0x28>
   dee12:	0c1b      	lsrs	r3, r3, #16
   dee14:	2210      	movs	r2, #16
   dee16:	f013 0fff 	tst.w	r3, #255	; 0xff
   dee1a:	bf04      	itt	eq
   dee1c:	0a1b      	lsreq	r3, r3, #8
   dee1e:	3208      	addeq	r2, #8
   dee20:	0719      	lsls	r1, r3, #28
   dee22:	bf04      	itt	eq
   dee24:	091b      	lsreq	r3, r3, #4
   dee26:	3204      	addeq	r2, #4
   dee28:	0799      	lsls	r1, r3, #30
   dee2a:	bf04      	itt	eq
   dee2c:	089b      	lsreq	r3, r3, #2
   dee2e:	3202      	addeq	r2, #2
   dee30:	07d9      	lsls	r1, r3, #31
   dee32:	d402      	bmi.n	dee3a <__lo0bits+0x4c>
   dee34:	085b      	lsrs	r3, r3, #1
   dee36:	d005      	beq.n	dee44 <__lo0bits+0x56>
   dee38:	3201      	adds	r2, #1
   dee3a:	6003      	str	r3, [r0, #0]
   dee3c:	4610      	mov	r0, r2
   dee3e:	4770      	bx	lr
   dee40:	2000      	movs	r0, #0
   dee42:	4770      	bx	lr
   dee44:	2020      	movs	r0, #32
   dee46:	4770      	bx	lr

000dee48 <__i2b>:
   dee48:	b510      	push	{r4, lr}
   dee4a:	460c      	mov	r4, r1
   dee4c:	2101      	movs	r1, #1
   dee4e:	f7ff fee9 	bl	dec24 <_Balloc>
   dee52:	2201      	movs	r2, #1
   dee54:	6144      	str	r4, [r0, #20]
   dee56:	6102      	str	r2, [r0, #16]
   dee58:	bd10      	pop	{r4, pc}

000dee5a <__multiply>:
   dee5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dee5e:	4614      	mov	r4, r2
   dee60:	690a      	ldr	r2, [r1, #16]
   dee62:	6923      	ldr	r3, [r4, #16]
   dee64:	429a      	cmp	r2, r3
   dee66:	bfb8      	it	lt
   dee68:	460b      	movlt	r3, r1
   dee6a:	4688      	mov	r8, r1
   dee6c:	bfbc      	itt	lt
   dee6e:	46a0      	movlt	r8, r4
   dee70:	461c      	movlt	r4, r3
   dee72:	f8d8 7010 	ldr.w	r7, [r8, #16]
   dee76:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dee7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dee7e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   dee82:	eb07 0609 	add.w	r6, r7, r9
   dee86:	429e      	cmp	r6, r3
   dee88:	bfc8      	it	gt
   dee8a:	3101      	addgt	r1, #1
   dee8c:	f7ff feca 	bl	dec24 <_Balloc>
   dee90:	f100 0514 	add.w	r5, r0, #20
   dee94:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   dee98:	462b      	mov	r3, r5
   dee9a:	2200      	movs	r2, #0
   dee9c:	4563      	cmp	r3, ip
   dee9e:	d202      	bcs.n	deea6 <__multiply+0x4c>
   deea0:	f843 2b04 	str.w	r2, [r3], #4
   deea4:	e7fa      	b.n	dee9c <__multiply+0x42>
   deea6:	f104 0214 	add.w	r2, r4, #20
   deeaa:	f108 0114 	add.w	r1, r8, #20
   deeae:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   deeb2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   deeb6:	9300      	str	r3, [sp, #0]
   deeb8:	9b00      	ldr	r3, [sp, #0]
   deeba:	9201      	str	r2, [sp, #4]
   deebc:	4293      	cmp	r3, r2
   deebe:	d957      	bls.n	def70 <__multiply+0x116>
   deec0:	f8b2 b000 	ldrh.w	fp, [r2]
   deec4:	f1bb 0f00 	cmp.w	fp, #0
   deec8:	d023      	beq.n	def12 <__multiply+0xb8>
   deeca:	4689      	mov	r9, r1
   deecc:	46ae      	mov	lr, r5
   deece:	f04f 0800 	mov.w	r8, #0
   deed2:	f859 4b04 	ldr.w	r4, [r9], #4
   deed6:	f8be a000 	ldrh.w	sl, [lr]
   deeda:	b2a3      	uxth	r3, r4
   deedc:	fb0b a303 	mla	r3, fp, r3, sl
   deee0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   deee4:	f8de 4000 	ldr.w	r4, [lr]
   deee8:	4443      	add	r3, r8
   deeea:	ea4f 4814 	mov.w	r8, r4, lsr #16
   deeee:	fb0b 840a 	mla	r4, fp, sl, r8
   deef2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   deef6:	46f2      	mov	sl, lr
   deef8:	b29b      	uxth	r3, r3
   deefa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   deefe:	454f      	cmp	r7, r9
   def00:	ea4f 4814 	mov.w	r8, r4, lsr #16
   def04:	f84a 3b04 	str.w	r3, [sl], #4
   def08:	d901      	bls.n	def0e <__multiply+0xb4>
   def0a:	46d6      	mov	lr, sl
   def0c:	e7e1      	b.n	deed2 <__multiply+0x78>
   def0e:	f8ce 8004 	str.w	r8, [lr, #4]
   def12:	9b01      	ldr	r3, [sp, #4]
   def14:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   def18:	3204      	adds	r2, #4
   def1a:	f1ba 0f00 	cmp.w	sl, #0
   def1e:	d021      	beq.n	def64 <__multiply+0x10a>
   def20:	682b      	ldr	r3, [r5, #0]
   def22:	462c      	mov	r4, r5
   def24:	4689      	mov	r9, r1
   def26:	f04f 0800 	mov.w	r8, #0
   def2a:	f8b9 e000 	ldrh.w	lr, [r9]
   def2e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   def32:	fb0a be0e 	mla	lr, sl, lr, fp
   def36:	44f0      	add	r8, lr
   def38:	46a3      	mov	fp, r4
   def3a:	b29b      	uxth	r3, r3
   def3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   def40:	f84b 3b04 	str.w	r3, [fp], #4
   def44:	f859 3b04 	ldr.w	r3, [r9], #4
   def48:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   def4c:	0c1b      	lsrs	r3, r3, #16
   def4e:	fb0a e303 	mla	r3, sl, r3, lr
   def52:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   def56:	454f      	cmp	r7, r9
   def58:	ea4f 4813 	mov.w	r8, r3, lsr #16
   def5c:	d901      	bls.n	def62 <__multiply+0x108>
   def5e:	465c      	mov	r4, fp
   def60:	e7e3      	b.n	def2a <__multiply+0xd0>
   def62:	6063      	str	r3, [r4, #4]
   def64:	3504      	adds	r5, #4
   def66:	e7a7      	b.n	deeb8 <__multiply+0x5e>
   def68:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   def6c:	b913      	cbnz	r3, def74 <__multiply+0x11a>
   def6e:	3e01      	subs	r6, #1
   def70:	2e00      	cmp	r6, #0
   def72:	dcf9      	bgt.n	def68 <__multiply+0x10e>
   def74:	6106      	str	r6, [r0, #16]
   def76:	b003      	add	sp, #12
   def78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000def7c <__pow5mult>:
   def7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   def80:	4615      	mov	r5, r2
   def82:	f012 0203 	ands.w	r2, r2, #3
   def86:	4606      	mov	r6, r0
   def88:	460f      	mov	r7, r1
   def8a:	d007      	beq.n	def9c <__pow5mult+0x20>
   def8c:	3a01      	subs	r2, #1
   def8e:	4c21      	ldr	r4, [pc, #132]	; (df014 <__pow5mult+0x98>)
   def90:	2300      	movs	r3, #0
   def92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   def96:	f7ff fe91 	bl	decbc <__multadd>
   def9a:	4607      	mov	r7, r0
   def9c:	10ad      	asrs	r5, r5, #2
   def9e:	d036      	beq.n	df00e <__pow5mult+0x92>
   defa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   defa2:	b93c      	cbnz	r4, defb4 <__pow5mult+0x38>
   defa4:	2010      	movs	r0, #16
   defa6:	f7f9 f9e5 	bl	d8374 <malloc>
   defaa:	6270      	str	r0, [r6, #36]	; 0x24
   defac:	6044      	str	r4, [r0, #4]
   defae:	6084      	str	r4, [r0, #8]
   defb0:	6004      	str	r4, [r0, #0]
   defb2:	60c4      	str	r4, [r0, #12]
   defb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   defb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   defbc:	b94c      	cbnz	r4, defd2 <__pow5mult+0x56>
   defbe:	f240 2171 	movw	r1, #625	; 0x271
   defc2:	4630      	mov	r0, r6
   defc4:	f7ff ff40 	bl	dee48 <__i2b>
   defc8:	2300      	movs	r3, #0
   defca:	f8c8 0008 	str.w	r0, [r8, #8]
   defce:	4604      	mov	r4, r0
   defd0:	6003      	str	r3, [r0, #0]
   defd2:	f04f 0800 	mov.w	r8, #0
   defd6:	07eb      	lsls	r3, r5, #31
   defd8:	d50a      	bpl.n	deff0 <__pow5mult+0x74>
   defda:	4639      	mov	r1, r7
   defdc:	4622      	mov	r2, r4
   defde:	4630      	mov	r0, r6
   defe0:	f7ff ff3b 	bl	dee5a <__multiply>
   defe4:	4639      	mov	r1, r7
   defe6:	4681      	mov	r9, r0
   defe8:	4630      	mov	r0, r6
   defea:	f7ff fe50 	bl	dec8e <_Bfree>
   defee:	464f      	mov	r7, r9
   deff0:	106d      	asrs	r5, r5, #1
   deff2:	d00c      	beq.n	df00e <__pow5mult+0x92>
   deff4:	6820      	ldr	r0, [r4, #0]
   deff6:	b108      	cbz	r0, deffc <__pow5mult+0x80>
   deff8:	4604      	mov	r4, r0
   deffa:	e7ec      	b.n	defd6 <__pow5mult+0x5a>
   deffc:	4622      	mov	r2, r4
   deffe:	4621      	mov	r1, r4
   df000:	4630      	mov	r0, r6
   df002:	f7ff ff2a 	bl	dee5a <__multiply>
   df006:	6020      	str	r0, [r4, #0]
   df008:	f8c0 8000 	str.w	r8, [r0]
   df00c:	e7f4      	b.n	deff8 <__pow5mult+0x7c>
   df00e:	4638      	mov	r0, r7
   df010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df014:	000e0250 	.word	0x000e0250

000df018 <__lshift>:
   df018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df01c:	460c      	mov	r4, r1
   df01e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   df022:	6926      	ldr	r6, [r4, #16]
   df024:	6849      	ldr	r1, [r1, #4]
   df026:	68a3      	ldr	r3, [r4, #8]
   df028:	4456      	add	r6, sl
   df02a:	4607      	mov	r7, r0
   df02c:	4691      	mov	r9, r2
   df02e:	1c75      	adds	r5, r6, #1
   df030:	42ab      	cmp	r3, r5
   df032:	da02      	bge.n	df03a <__lshift+0x22>
   df034:	3101      	adds	r1, #1
   df036:	005b      	lsls	r3, r3, #1
   df038:	e7fa      	b.n	df030 <__lshift+0x18>
   df03a:	4638      	mov	r0, r7
   df03c:	f7ff fdf2 	bl	dec24 <_Balloc>
   df040:	2300      	movs	r3, #0
   df042:	4680      	mov	r8, r0
   df044:	f100 0114 	add.w	r1, r0, #20
   df048:	461a      	mov	r2, r3
   df04a:	4553      	cmp	r3, sl
   df04c:	da03      	bge.n	df056 <__lshift+0x3e>
   df04e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   df052:	3301      	adds	r3, #1
   df054:	e7f9      	b.n	df04a <__lshift+0x32>
   df056:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   df05a:	6920      	ldr	r0, [r4, #16]
   df05c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   df060:	f019 091f 	ands.w	r9, r9, #31
   df064:	f104 0114 	add.w	r1, r4, #20
   df068:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   df06c:	d014      	beq.n	df098 <__lshift+0x80>
   df06e:	f1c9 0c20 	rsb	ip, r9, #32
   df072:	2200      	movs	r2, #0
   df074:	6808      	ldr	r0, [r1, #0]
   df076:	fa00 f009 	lsl.w	r0, r0, r9
   df07a:	4302      	orrs	r2, r0
   df07c:	469a      	mov	sl, r3
   df07e:	f843 2b04 	str.w	r2, [r3], #4
   df082:	f851 2b04 	ldr.w	r2, [r1], #4
   df086:	458e      	cmp	lr, r1
   df088:	fa22 f20c 	lsr.w	r2, r2, ip
   df08c:	d8f2      	bhi.n	df074 <__lshift+0x5c>
   df08e:	f8ca 2004 	str.w	r2, [sl, #4]
   df092:	b142      	cbz	r2, df0a6 <__lshift+0x8e>
   df094:	1cb5      	adds	r5, r6, #2
   df096:	e006      	b.n	df0a6 <__lshift+0x8e>
   df098:	3b04      	subs	r3, #4
   df09a:	f851 2b04 	ldr.w	r2, [r1], #4
   df09e:	f843 2f04 	str.w	r2, [r3, #4]!
   df0a2:	458e      	cmp	lr, r1
   df0a4:	d8f9      	bhi.n	df09a <__lshift+0x82>
   df0a6:	3d01      	subs	r5, #1
   df0a8:	4638      	mov	r0, r7
   df0aa:	f8c8 5010 	str.w	r5, [r8, #16]
   df0ae:	4621      	mov	r1, r4
   df0b0:	f7ff fded 	bl	dec8e <_Bfree>
   df0b4:	4640      	mov	r0, r8
   df0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000df0ba <__mcmp>:
   df0ba:	6903      	ldr	r3, [r0, #16]
   df0bc:	690a      	ldr	r2, [r1, #16]
   df0be:	1a9b      	subs	r3, r3, r2
   df0c0:	b510      	push	{r4, lr}
   df0c2:	d111      	bne.n	df0e8 <__mcmp+0x2e>
   df0c4:	0092      	lsls	r2, r2, #2
   df0c6:	3014      	adds	r0, #20
   df0c8:	3114      	adds	r1, #20
   df0ca:	1883      	adds	r3, r0, r2
   df0cc:	440a      	add	r2, r1
   df0ce:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   df0d2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   df0d6:	428c      	cmp	r4, r1
   df0d8:	d002      	beq.n	df0e0 <__mcmp+0x26>
   df0da:	d307      	bcc.n	df0ec <__mcmp+0x32>
   df0dc:	2001      	movs	r0, #1
   df0de:	bd10      	pop	{r4, pc}
   df0e0:	4298      	cmp	r0, r3
   df0e2:	d3f4      	bcc.n	df0ce <__mcmp+0x14>
   df0e4:	2000      	movs	r0, #0
   df0e6:	bd10      	pop	{r4, pc}
   df0e8:	4618      	mov	r0, r3
   df0ea:	bd10      	pop	{r4, pc}
   df0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   df0f0:	bd10      	pop	{r4, pc}

000df0f2 <__mdiff>:
   df0f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   df0f6:	460c      	mov	r4, r1
   df0f8:	4607      	mov	r7, r0
   df0fa:	4611      	mov	r1, r2
   df0fc:	4620      	mov	r0, r4
   df0fe:	4615      	mov	r5, r2
   df100:	f7ff ffdb 	bl	df0ba <__mcmp>
   df104:	1e06      	subs	r6, r0, #0
   df106:	d108      	bne.n	df11a <__mdiff+0x28>
   df108:	4631      	mov	r1, r6
   df10a:	4638      	mov	r0, r7
   df10c:	f7ff fd8a 	bl	dec24 <_Balloc>
   df110:	2301      	movs	r3, #1
   df112:	6103      	str	r3, [r0, #16]
   df114:	6146      	str	r6, [r0, #20]
   df116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df11a:	bfbc      	itt	lt
   df11c:	4623      	movlt	r3, r4
   df11e:	462c      	movlt	r4, r5
   df120:	4638      	mov	r0, r7
   df122:	6861      	ldr	r1, [r4, #4]
   df124:	bfba      	itte	lt
   df126:	461d      	movlt	r5, r3
   df128:	2601      	movlt	r6, #1
   df12a:	2600      	movge	r6, #0
   df12c:	f7ff fd7a 	bl	dec24 <_Balloc>
   df130:	692b      	ldr	r3, [r5, #16]
   df132:	60c6      	str	r6, [r0, #12]
   df134:	6926      	ldr	r6, [r4, #16]
   df136:	f105 0914 	add.w	r9, r5, #20
   df13a:	3414      	adds	r4, #20
   df13c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   df140:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   df144:	f100 0514 	add.w	r5, r0, #20
   df148:	f04f 0c00 	mov.w	ip, #0
   df14c:	f854 3b04 	ldr.w	r3, [r4], #4
   df150:	f859 2b04 	ldr.w	r2, [r9], #4
   df154:	fa1c f183 	uxtah	r1, ip, r3
   df158:	fa1f fe82 	uxth.w	lr, r2
   df15c:	0c12      	lsrs	r2, r2, #16
   df15e:	ebce 0101 	rsb	r1, lr, r1
   df162:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   df166:	eb03 4321 	add.w	r3, r3, r1, asr #16
   df16a:	b289      	uxth	r1, r1
   df16c:	ea4f 4c23 	mov.w	ip, r3, asr #16
   df170:	45c8      	cmp	r8, r9
   df172:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   df176:	46a6      	mov	lr, r4
   df178:	f845 3b04 	str.w	r3, [r5], #4
   df17c:	d8e6      	bhi.n	df14c <__mdiff+0x5a>
   df17e:	45be      	cmp	lr, r7
   df180:	d20e      	bcs.n	df1a0 <__mdiff+0xae>
   df182:	f85e 1b04 	ldr.w	r1, [lr], #4
   df186:	fa1c f281 	uxtah	r2, ip, r1
   df18a:	1413      	asrs	r3, r2, #16
   df18c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   df190:	b292      	uxth	r2, r2
   df192:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   df196:	ea4f 4c23 	mov.w	ip, r3, asr #16
   df19a:	f845 2b04 	str.w	r2, [r5], #4
   df19e:	e7ee      	b.n	df17e <__mdiff+0x8c>
   df1a0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   df1a4:	b90b      	cbnz	r3, df1aa <__mdiff+0xb8>
   df1a6:	3e01      	subs	r6, #1
   df1a8:	e7fa      	b.n	df1a0 <__mdiff+0xae>
   df1aa:	6106      	str	r6, [r0, #16]
   df1ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000df1b0 <__ulp>:
   df1b0:	4b12      	ldr	r3, [pc, #72]	; (df1fc <__ulp+0x4c>)
   df1b2:	ee10 2a90 	vmov	r2, s1
   df1b6:	401a      	ands	r2, r3
   df1b8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   df1bc:	2b00      	cmp	r3, #0
   df1be:	dd02      	ble.n	df1c6 <__ulp+0x16>
   df1c0:	2000      	movs	r0, #0
   df1c2:	4619      	mov	r1, r3
   df1c4:	e017      	b.n	df1f6 <__ulp+0x46>
   df1c6:	425b      	negs	r3, r3
   df1c8:	151b      	asrs	r3, r3, #20
   df1ca:	2b13      	cmp	r3, #19
   df1cc:	f04f 0000 	mov.w	r0, #0
   df1d0:	f04f 0100 	mov.w	r1, #0
   df1d4:	dc04      	bgt.n	df1e0 <__ulp+0x30>
   df1d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   df1da:	fa42 f103 	asr.w	r1, r2, r3
   df1de:	e00a      	b.n	df1f6 <__ulp+0x46>
   df1e0:	3b14      	subs	r3, #20
   df1e2:	2b1e      	cmp	r3, #30
   df1e4:	f04f 0201 	mov.w	r2, #1
   df1e8:	bfda      	itte	le
   df1ea:	f1c3 031f 	rsble	r3, r3, #31
   df1ee:	fa02 f303 	lslle.w	r3, r2, r3
   df1f2:	4613      	movgt	r3, r2
   df1f4:	4618      	mov	r0, r3
   df1f6:	ec41 0b10 	vmov	d0, r0, r1
   df1fa:	4770      	bx	lr
   df1fc:	7ff00000 	.word	0x7ff00000

000df200 <__b2d>:
   df200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   df202:	6905      	ldr	r5, [r0, #16]
   df204:	f100 0614 	add.w	r6, r0, #20
   df208:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   df20c:	1f2f      	subs	r7, r5, #4
   df20e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   df212:	4620      	mov	r0, r4
   df214:	f7ff fdcb 	bl	dedae <__hi0bits>
   df218:	f1c0 0320 	rsb	r3, r0, #32
   df21c:	280a      	cmp	r0, #10
   df21e:	600b      	str	r3, [r1, #0]
   df220:	dc14      	bgt.n	df24c <__b2d+0x4c>
   df222:	f1c0 0e0b 	rsb	lr, r0, #11
   df226:	fa24 f10e 	lsr.w	r1, r4, lr
   df22a:	42be      	cmp	r6, r7
   df22c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   df230:	bf34      	ite	cc
   df232:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   df236:	2100      	movcs	r1, #0
   df238:	3015      	adds	r0, #21
   df23a:	fa04 f000 	lsl.w	r0, r4, r0
   df23e:	fa21 f10e 	lsr.w	r1, r1, lr
   df242:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   df246:	ea40 0201 	orr.w	r2, r0, r1
   df24a:	e023      	b.n	df294 <__b2d+0x94>
   df24c:	42be      	cmp	r6, r7
   df24e:	bf3a      	itte	cc
   df250:	f1a5 0708 	subcc.w	r7, r5, #8
   df254:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   df258:	2100      	movcs	r1, #0
   df25a:	380b      	subs	r0, #11
   df25c:	d015      	beq.n	df28a <__b2d+0x8a>
   df25e:	4084      	lsls	r4, r0
   df260:	f1c0 0520 	rsb	r5, r0, #32
   df264:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   df268:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   df26c:	42b7      	cmp	r7, r6
   df26e:	fa21 fe05 	lsr.w	lr, r1, r5
   df272:	ea44 030e 	orr.w	r3, r4, lr
   df276:	bf8c      	ite	hi
   df278:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   df27c:	2400      	movls	r4, #0
   df27e:	fa01 f000 	lsl.w	r0, r1, r0
   df282:	40ec      	lsrs	r4, r5
   df284:	ea40 0204 	orr.w	r2, r0, r4
   df288:	e004      	b.n	df294 <__b2d+0x94>
   df28a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   df28e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   df292:	460a      	mov	r2, r1
   df294:	ec43 2b10 	vmov	d0, r2, r3
   df298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000df29a <__d2b>:
   df29a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   df29e:	460e      	mov	r6, r1
   df2a0:	2101      	movs	r1, #1
   df2a2:	ec59 8b10 	vmov	r8, r9, d0
   df2a6:	4615      	mov	r5, r2
   df2a8:	f7ff fcbc 	bl	dec24 <_Balloc>
   df2ac:	f3c9 540a 	ubfx	r4, r9, #20, #11
   df2b0:	4607      	mov	r7, r0
   df2b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
   df2b6:	b10c      	cbz	r4, df2bc <__d2b+0x22>
   df2b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   df2bc:	9301      	str	r3, [sp, #4]
   df2be:	f1b8 0f00 	cmp.w	r8, #0
   df2c2:	d019      	beq.n	df2f8 <__d2b+0x5e>
   df2c4:	a802      	add	r0, sp, #8
   df2c6:	f840 8d08 	str.w	r8, [r0, #-8]!
   df2ca:	f7ff fd90 	bl	dedee <__lo0bits>
   df2ce:	9b00      	ldr	r3, [sp, #0]
   df2d0:	b148      	cbz	r0, df2e6 <__d2b+0x4c>
   df2d2:	9a01      	ldr	r2, [sp, #4]
   df2d4:	f1c0 0120 	rsb	r1, r0, #32
   df2d8:	fa02 f101 	lsl.w	r1, r2, r1
   df2dc:	430b      	orrs	r3, r1
   df2de:	40c2      	lsrs	r2, r0
   df2e0:	617b      	str	r3, [r7, #20]
   df2e2:	9201      	str	r2, [sp, #4]
   df2e4:	e000      	b.n	df2e8 <__d2b+0x4e>
   df2e6:	617b      	str	r3, [r7, #20]
   df2e8:	9b01      	ldr	r3, [sp, #4]
   df2ea:	61bb      	str	r3, [r7, #24]
   df2ec:	2b00      	cmp	r3, #0
   df2ee:	bf14      	ite	ne
   df2f0:	2102      	movne	r1, #2
   df2f2:	2101      	moveq	r1, #1
   df2f4:	6139      	str	r1, [r7, #16]
   df2f6:	e007      	b.n	df308 <__d2b+0x6e>
   df2f8:	a801      	add	r0, sp, #4
   df2fa:	f7ff fd78 	bl	dedee <__lo0bits>
   df2fe:	9b01      	ldr	r3, [sp, #4]
   df300:	617b      	str	r3, [r7, #20]
   df302:	2101      	movs	r1, #1
   df304:	6139      	str	r1, [r7, #16]
   df306:	3020      	adds	r0, #32
   df308:	b134      	cbz	r4, df318 <__d2b+0x7e>
   df30a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   df30e:	4404      	add	r4, r0
   df310:	6034      	str	r4, [r6, #0]
   df312:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   df316:	e009      	b.n	df32c <__d2b+0x92>
   df318:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   df31c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   df320:	6030      	str	r0, [r6, #0]
   df322:	6918      	ldr	r0, [r3, #16]
   df324:	f7ff fd43 	bl	dedae <__hi0bits>
   df328:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   df32c:	6028      	str	r0, [r5, #0]
   df32e:	4638      	mov	r0, r7
   df330:	b003      	add	sp, #12
   df332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000df336 <__ratio>:
   df336:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   df33a:	4688      	mov	r8, r1
   df33c:	4669      	mov	r1, sp
   df33e:	4681      	mov	r9, r0
   df340:	f7ff ff5e 	bl	df200 <__b2d>
   df344:	a901      	add	r1, sp, #4
   df346:	4640      	mov	r0, r8
   df348:	ec55 4b10 	vmov	r4, r5, d0
   df34c:	f7ff ff58 	bl	df200 <__b2d>
   df350:	f8d9 3010 	ldr.w	r3, [r9, #16]
   df354:	f8d8 2010 	ldr.w	r2, [r8, #16]
   df358:	1a9a      	subs	r2, r3, r2
   df35a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   df35e:	1ac9      	subs	r1, r1, r3
   df360:	ec57 6b10 	vmov	r6, r7, d0
   df364:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   df368:	2b00      	cmp	r3, #0
   df36a:	bfcc      	ite	gt
   df36c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   df370:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   df374:	4632      	mov	r2, r6
   df376:	463b      	mov	r3, r7
   df378:	4620      	mov	r0, r4
   df37a:	4629      	mov	r1, r5
   df37c:	f7fd fa9e 	bl	dc8bc <__aeabi_ddiv>
   df380:	ec41 0b10 	vmov	d0, r0, r1
   df384:	b003      	add	sp, #12
   df386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000df38a <__copybits>:
   df38a:	3901      	subs	r1, #1
   df38c:	b510      	push	{r4, lr}
   df38e:	1149      	asrs	r1, r1, #5
   df390:	6914      	ldr	r4, [r2, #16]
   df392:	3101      	adds	r1, #1
   df394:	f102 0314 	add.w	r3, r2, #20
   df398:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   df39c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   df3a0:	42a3      	cmp	r3, r4
   df3a2:	4602      	mov	r2, r0
   df3a4:	d204      	bcs.n	df3b0 <__copybits+0x26>
   df3a6:	f853 2b04 	ldr.w	r2, [r3], #4
   df3aa:	f840 2b04 	str.w	r2, [r0], #4
   df3ae:	e7f7      	b.n	df3a0 <__copybits+0x16>
   df3b0:	2300      	movs	r3, #0
   df3b2:	428a      	cmp	r2, r1
   df3b4:	d202      	bcs.n	df3bc <__copybits+0x32>
   df3b6:	f842 3b04 	str.w	r3, [r2], #4
   df3ba:	e7fa      	b.n	df3b2 <__copybits+0x28>
   df3bc:	bd10      	pop	{r4, pc}

000df3be <__any_on>:
   df3be:	f100 0214 	add.w	r2, r0, #20
   df3c2:	6900      	ldr	r0, [r0, #16]
   df3c4:	114b      	asrs	r3, r1, #5
   df3c6:	4298      	cmp	r0, r3
   df3c8:	b510      	push	{r4, lr}
   df3ca:	db0c      	blt.n	df3e6 <__any_on+0x28>
   df3cc:	dd0c      	ble.n	df3e8 <__any_on+0x2a>
   df3ce:	f011 011f 	ands.w	r1, r1, #31
   df3d2:	d009      	beq.n	df3e8 <__any_on+0x2a>
   df3d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   df3d8:	fa24 f001 	lsr.w	r0, r4, r1
   df3dc:	fa00 f101 	lsl.w	r1, r0, r1
   df3e0:	428c      	cmp	r4, r1
   df3e2:	d10c      	bne.n	df3fe <__any_on+0x40>
   df3e4:	e000      	b.n	df3e8 <__any_on+0x2a>
   df3e6:	4603      	mov	r3, r0
   df3e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   df3ec:	4293      	cmp	r3, r2
   df3ee:	d904      	bls.n	df3fa <__any_on+0x3c>
   df3f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   df3f4:	2900      	cmp	r1, #0
   df3f6:	d0f9      	beq.n	df3ec <__any_on+0x2e>
   df3f8:	e001      	b.n	df3fe <__any_on+0x40>
   df3fa:	2000      	movs	r0, #0
   df3fc:	bd10      	pop	{r4, pc}
   df3fe:	2001      	movs	r0, #1
   df400:	bd10      	pop	{r4, pc}

000df402 <_calloc_r>:
   df402:	b538      	push	{r3, r4, r5, lr}
   df404:	fb02 f401 	mul.w	r4, r2, r1
   df408:	4621      	mov	r1, r4
   df40a:	f7f8 fff3 	bl	d83f4 <_malloc_r>
   df40e:	4605      	mov	r5, r0
   df410:	b118      	cbz	r0, df41a <_calloc_r+0x18>
   df412:	4622      	mov	r2, r4
   df414:	2100      	movs	r1, #0
   df416:	f7fd fdaa 	bl	dcf6e <memset>
   df41a:	4628      	mov	r0, r5
   df41c:	bd38      	pop	{r3, r4, r5, pc}

000df41e <__env_lock>:
   df41e:	4770      	bx	lr

000df420 <__env_unlock>:
   df420:	4770      	bx	lr

000df422 <link_code_end>:
	...

000df424 <dynalib_user>:
   df424:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   df434:	0000 0000                                   ....

000df438 <_ZTVN8particle13__SPISettingsE>:
	...
   df440:	4179 000d                                   yA..

000df444 <_ZTV5Timer>:
	...
   df44c:	4399 000d 43e1 000d 41fd 000d               .C...C...A..

000df458 <_ZTVN5spark10LogHandlerE>:
	...
   df468:	40a9 000d 40cd 000d                         .@...@..

000df470 <_ZTVN8particle9LEDStatusE>:
	...
   df478:	4281 000d 429d 000d 40d7 000d               .B...B...@..

000df484 <_ZTVN5spark16SerialLogHandlerE>:
	...
   df48c:	42b1 000d 42e5 000d ae9d 000d 40cf 000d     .B...B.......@..

000df49c <_ZTV4File>:
	...
   df4a4:	4175 000d 41ef 000d 41d7 000d 41d1 000d     uA...A...A...A..
   df4b4:	40d9 000d 4215 000d 420f 000d 4209 000d     .@...B...B...B..
   df4c4:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   df4d4:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   df4e4:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   df4f4:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   df504:	2545 3e64 5300 6174 7574 3a73 2520 0064     E%d>.Status: %d.
   df514:	4343 7548 0062 6548 6c6c 206f 7266 6d6f     CCHub.Hello from
   df524:	4220 746f 2520 0a64 2500 2573 3230 0078      Bot %d..%s%02x.
   df534:	6f42 3174 6164 0074 2542 4164 7342 7075     Bot1dat.B%dABsup
   df544:	3025 6433 3025 6433 3025 362e 2566 2e30     %03d%03d%0.6f%0.
   df554:	6636 4200 6425 4241 6363 0a73 5700 534e     6f.B%dABccs..WNS
   df564:	2f00 6600 6c69 6e65 6d61 0065 6553 646e     ./.filename.Send
   df574:	6e69 2067 6f63 6d6d 6e61 2064 7325 4600     ing command %s.F
   df584:	6c69 2065 7325 6920 2073 2061 632e 7673     ile %s is a .csv
   df594:	6f20 2072 742e 7478 7020 6972 746e 6e69      or .txt printin
   df5a4:	2067 6164 6174 6600 6c69 6365 6d6f 0070     g data.filecomp.
   df5b4:	6966 656c 6f64 656e 4300 6568 6b63 6e69     filedone.Checkin
   df5c4:	2067 6669 6620 6c69 2065 7325 6920 2073     g if file %s is 
   df5d4:	2061 632e 7673 6f20 2072 742e 7478 2e2e     a .csv or .txt..
   df5e4:	002e 632e 7673 4300 6568 6b63 7573 3a6d     ...csv.Checksum:
   df5f4:	2520 3230 2c78 2520 3330 0064 7453 6972      %02x, %03d.Stri
   df604:	676e 4c20 6e65 203a 6425 202c 6843 6365     ng Len: %d, Chec
   df614:	736b 6d75 203a 6425 5b00 4157 4e52 205d     ksum: %d.[WARN] 
   df624:	654d 7373 6761 2065 6843 6365 736b 6d75     Message Checksum
   df634:	4420 656f 2073 6f4e 2074 614d 6374 2168      Does Not Match!
   df644:	203a 7325 5700 7261 696e 676e 202c 6863     : %s.Warning, ch
   df654:	6365 736b 6d75 6420 656f 2073 6f6e 2074     ecksum does not 
   df664:	616d 6374 0068 2542 2564 7332 616e 256b     match.B%d%2snak%
   df674:	7333 4200 6425 4241 616e 256b 7333 6100     3s.B%dABnak%3s.a
   df684:	6b63 6d00 7274 7200 7165 7000 7374 5b00     ck.mtr.req.pts.[
   df694:	5550 5354 205d 6552 6563 7669 6465 5320     PUTS] Received S
   df6a4:	7274 6e69 2067 6f43 6d6d 6e61 3a64 2520     tring Command: %
   df6b4:	0073 6363 0073 7561 0074 6d64 0070 495b     s.ccs.aut.dmp.[I
   df6c4:	464e 5d4f 5220 6365 6965 6576 2064 544c     NFO] Received LT
   df6d4:	2045 654d 7373 6761 3a65 2520 0073 654e     E Message: %s.Ne
   df6e4:	2077 5442 4320 6d6f 616d 646e 003a 495b     w BT Command:.[I
   df6f4:	464e 5d4f 5220 6365 6965 6576 2064 4c42     NFO] Received BL
   df704:	2045 654d 7373 6761 3a65 2520 0073 654e     E Message: %s.Ne
   df714:	2077 4258 6565 4320 6d6f 616d 646e 003a     w XBee Command:.
   df724:	495b 464e 5d4f 5220 6365 6965 6576 2064     [INFO] Received 
   df734:	4258 6565 4d20 7365 6173 6567 203a 7325     XBee Message: %s
   df744:	5b00 4157 4e52 205d 4258 6565 4d20 7365     .[WARN] XBee Mes
   df754:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   df764:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   df774:	6425 2c73 6120 7373 6d75 6e69 2067 4258     %ds, assuming XB
   df784:	6565 6920 2073 6e75 7661 6961 616c 6c62     ee is unavailabl
   df794:	0065 575b 5241 5d4e 4220 454c 4d20 7365     e.[WARN] BLE Mes
   df7a4:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   df7b4:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   df7c4:	6425 2c73 6120 7373 6d75 6e69 2067 4c42     %ds, assuming BL
   df7d4:	2045 7369 7520 616e 6176 6c69 6261 656c     E is unavailable
   df7e4:	7000 3a48 2520 0066 694d 696e 6f43 646e     .pH: %f.MiniCond
   df7f4:	203a 6625 4300 6e6f 7564 7463 7669 7469     : %f.Conductivit
   df804:	3a79 2520 0066 6554 706d 7265 7461 7275     y: %f.Temperatur
   df814:	3a65 2520 0066 3025 6432 3025 6432 3025     e: %f.%02d%02d%0
   df824:	6434 3025 6432 3025 6432 3025 6432 2500     4d%02d%02d%02d.%
   df834:	2c73 6625 252c 2c66 6625 252c 2c66 6625     s,%f,%f,%f,%f,%f
   df844:	252c 2c66 6625 5700 4e54 3332 425f 746f     ,%f,%f.WTN23_Bot
   df854:	5700 7461 7265 6f42 0074 4c5f 474f 742e     .WaterBot._LOG.t
   df864:	7478 4500 7272 726f 203a 6f63 6c75 2064     xt.Error: could 
   df874:	6f6e 2074 6f63 6e6e 6365 2074 6f74 5320     not connect to S
   df884:	2044 6163 6472 0021 6954 656d 4c2c 7461     D card!.Time,Lat
   df894:	7469 6475 2c65 6f4c 676e 7469 6475 2c65     itude,Longitude,
   df8a4:	6554 706d 7265 7461 7275 2c65 4870 442c     Temperature,pH,D
   df8b4:	7369 6f73 766c 6465 4f20 2c32 6f43 646e     issolved O2,Cond
   df8c4:	6375 6974 6976 7974 3020 312e 2c4b 6f43     uctivity 0.1K,Co
   df8d4:	646e 6375 6974 6976 7974 3120 004b 495b     nductivity 1K.[I
   df8e4:	464e 5d4f 5720 7461 7265 6f42 2074 6425     NFO] WaterBot %d
   df8f4:	203a 7453 7261 6574 2064 6f4c 6767 6e69     : Started Loggin
   df904:	2167 7400 0078 7872 6f00 6666 6200 3234     g!.tx.rx.off.b42
   df914:	3630 3139 2d34 6364 6234 352d 3437 2d33     06914-dc4b-5743-
   df924:	3863 3162 392d 6432 6530 3537 3831 6232     c8b1-92d0e75182b
   df934:	0030 3462 3032 3936 3331 642d 3463 2d62     0.b4206913-dc4b-
   df944:	3735 3334 632d 6238 2d31 3239 3064 3765     5743-c8b1-92d0e7
   df954:	3135 3238 3062 6200 3234 3630 3139 2d32     5182b0.b4206912-
   df964:	6364 6234 352d 3437 2d33 3863 3162 392d     dc4b-5743-c8b1-9
   df974:	6432 6530 3537 3831 6232 0030 3462 3032     2d0e75182b0.b420
   df984:	3936 3031 642d 3463 2d62 3735 3334 632d     6910-dc4b-5743-c
   df994:	6238 2d31 3239 3064 3765 3135 3238 3062     8b1-92d0e75182b0
   df9a4:	0d00 000a 4747 0041 4d52 0043               ....GGA.RMC.

000df9b0 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   df9b8:	843f 000d 8445 000d 9185 000d 846f 000d     ?...E.......o...
   df9c8:	8441 000d                                   A...

000df9cc <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   df9d4:	8439 000d 8453 000d 92e5 000d 8473 000d     9...S.......s...
   df9e4:	843b 000d                                   ;...

000df9e8 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   df9f0:	8433 000d 8461 000d 8c43 000d 8477 000d     3...a...C...w...
   dfa00:	8435 000d                                   5...

000dfa04 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   dfa04:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   dfa14:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   dfa24:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   dfa34:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   dfa44:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   dfa54:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   dfa64:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   dfa74:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   dfa84:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   dfa94:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   dfaa4:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   dfab4:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   dfac4:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   dfad4:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   dfae4:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   dfaf4:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   dfb04:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   dfb14:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   dfb24:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   dfb34:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   dfb44:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   dfb54:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   dfb64:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   dfb74:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   dfb84:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   dfb94:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   dfba4:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..

000dfbb4 <_ZN8particle7BleUuid9BASE_UUIDE>:
   dfbb4:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000dfbc4 <_ZTVN5spark13CellularClassE>:
	...
   dfbcc:	961b 000d 9611 000d 9607 000d 95bd 000d     ................
   dfbdc:	95fb 000d 95ef 000d 95e3 000d 95db 000d     ................
   dfbec:	95d1 000d 95c7 000d b3ad 000d               ............

000dfbf8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dfc00:	9655 000d 965b 000d 969f 000d 9669 000d     U...[.......i...
   dfc10:	9657 000d                                   W...

000dfc14 <_ZTVN5spark13EthernetClassE>:
	...
   dfc1c:	9c5b 000d 9c51 000d 9c47 000d 9c3d 000d     [...Q...G...=...
   dfc2c:	9c31 000d 9c25 000d 9c19 000d 9c11 000d     1...%...........
   dfc3c:	9c07 000d 9bfd 000d b3ad 000d               ............

000dfc48 <_ZTV7TwoWire>:
	...
   dfc50:	9c79 000d 9cc3 000d 9c9b 000d 9c7b 000d     y...........{...
   dfc60:	9ca3 000d 9cab 000d 9cb3 000d 9cbb 000d     ................

000dfc70 <_ZTV9IPAddress>:
	...
   dfc78:	9d9f 000d 9d8f 000d 9d91 000d 2e30 0030     ............0.0.
   dfc88:	6166 736c 0065 7274 6575 2500 0075 2e25     false.true.%u.%.
   dfc98:	6c2a 0066 6725 6e00 6c75 006c 2575 3430     *lf.%g.null.u%04
   dfca8:	0078 0000                                   x...

000dfcac <_ZTVN5spark16JSONStreamWriterE>:
	...
   dfcb4:	a277 000d a29d 000d a251 000d 9ea3 000d     w.......Q.......

000dfcc4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dfccc:	a6f5 000d a709 000d b051 000d a259 000d     ........Q...Y...
   dfcdc:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   dfcec:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   dfcfc:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   dfd0c:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   dfd1c:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   dfd2c:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   dfd3c:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   dfd4c:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   dfd5c:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   dfd6c:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   dfd7c:	0020 6e6c 6600 006e 6f63 6564 6400 7465      .ln.fn.code.det
   dfd8c:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   dfd9c:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   dfdac:	6e61 6369 6100 6c6c 0000 0000               anic.all....

000dfdb8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dfdc0:	a6c9 000d a6e1 000d ae9d 000d 40cf 000d     .............@..

000dfdd0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dfdd8:	a275 000d a2ab 000d adc5 000d a25b 000d     u...........[...

000dfde8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dfdf0:	a273 000d a2b9 000d a60d 000d a2c7 000d     s...............

000dfe00 <_ZTVN5spark9MeshClassE>:
	...
   dfe08:	b227 000d b21d 000d b213 000d b209 000d     '...............
   dfe18:	b1fd 000d b1f1 000d b1e5 000d b1dd 000d     ................
   dfe28:	b1d3 000d b1c9 000d b3ad 000d               ............

000dfe34 <_ZTVN5spark12NetworkClassE>:
	...
   dfe3c:	b345 000d b34f 000d b359 000d b363 000d     E...O...Y...c...
   dfe4c:	b36d 000d b379 000d b385 000d b391 000d     m...y...........
   dfe5c:	b399 000d b3a3 000d b3ad 000d               ............

000dfe68 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dfe68:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
   dfe78:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dfe88:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000dfe98 <_ZTV11USARTSerial>:
	...
   dfea0:	bba1 000d bbf1 000d bbff 000d b48d 000d     ................
   dfeb0:	bbb5 000d bbd7 000d bbc3 000d bbeb 000d     ................
   dfec0:	bba3 000d bba7 000d                         ........

000dfec8 <_ZTV9USBSerial>:
	...
   dfed0:	bcbd 000d bd0d 000d bd1b 000d b48d 000d     ................
   dfee0:	bcf9 000d bcbf 000d bcd5 000d bd07 000d     ................
   dfef0:	bceb 000d bcb9 000d                         ........

000dfef8 <_ZSt7nothrow>:
	...

000dfef9 <_ctype_>:
   dfef9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dff09:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dff19:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dff29:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dff39:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dff49:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dff59:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dff69:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dff79:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dfffc <__sf_fake_stdin>:
	...

000e001c <__sf_fake_stdout>:
	...

000e003c <__sf_fake_stderr>:
	...
   e005c:	4f50 4953 0058 0000                         POSIX...

000e0064 <__month_lengths>:
   e0064:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e0074:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e0084:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e0094:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e00a4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e00b4:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e00c4 <fpi.5344>:
   e00c4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e00d4:	0000 0000                                   ....

000e00d8 <fpinan.5380>:
   e00d8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e00e8:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000e00f8 <tinytens>:
   e00f8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e0108:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e0118:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   e0128:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   e0138:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   e0148:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   e0158:	2575 006e 0000 0000                         u%n.....

000e0160 <__mprec_tens>:
   e0160:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e0170:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e0180:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e0190:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e01a0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e01b0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e01c0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e01d0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e01e0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e01f0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e0200:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e0210:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e0220:	9db4 79d9 7843 44ea                         ...yCx.D

000e0228 <__mprec_bigtens>:
   e0228:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e0238:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e0248:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e0250 <p05.5387>:
   e0250:	0005 0000 0019 0000 007d 0000               ........}...

000e025c <link_const_variable_data_end>:
   e025c:	000d57cd 	.word	0x000d57cd
   e0260:	000d60f9 	.word	0x000d60f9
   e0264:	000d60fd 	.word	0x000d60fd
   e0268:	000d68b5 	.word	0x000d68b5
   e026c:	000d6fe5 	.word	0x000d6fe5
   e0270:	000d7009 	.word	0x000d7009
   e0274:	000d703b 	.word	0x000d703b
   e0278:	000d735f 	.word	0x000d735f
   e027c:	000d7363 	.word	0x000d7363
   e0280:	000d7367 	.word	0x000d7367
   e0284:	000d736b 	.word	0x000d736b
   e0288:	000d736f 	.word	0x000d736f
   e028c:	000d78ab 	.word	0x000d78ab
   e0290:	000d78af 	.word	0x000d78af
   e0294:	000d78b3 	.word	0x000d78b3
   e0298:	000d7959 	.word	0x000d7959
   e029c:	000d795d 	.word	0x000d795d
   e02a0:	000d7961 	.word	0x000d7961
   e02a4:	000d7c3f 	.word	0x000d7c3f
   e02a8:	000d9595 	.word	0x000d9595
   e02ac:	000d9625 	.word	0x000d9625
   e02b0:	000d9c65 	.word	0x000d9c65
   e02b4:	000dae8d 	.word	0x000dae8d
   e02b8:	000db2f5 	.word	0x000db2f5
   e02bc:	000db479 	.word	0x000db479
   e02c0:	000db5b5 	.word	0x000db5b5
   e02c4:	000dba01 	.word	0x000dba01
   e02c8:	000dbb8d 	.word	0x000dbb8d
   e02cc:	000dc069 	.word	0x000dc069
   e02d0:	000dc12d 	.word	0x000dc12d
   e02d4:	000dc1b1 	.word	0x000dc1b1
   e02d8:	000dc235 	.word	0x000dc235

000e02dc <link_constructors_end>:
   e02dc:	00000000 	.word	0x00000000
