
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23PreAlpha/target/1.5.2/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008404  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dc420  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000d0  2003d330  000dc424  0001d330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000013f0  2003d400  2003d400  0002d400  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dc4f4  000dc4f4  0002c4f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dc51c  000dc51c  0002c51c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001a0f43  00000000  00000000  0002c520  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00020769  00000000  00000000  001cd463  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002e969  00000000  00000000  001edbcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003538  00000000  00000000  0021c535  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006430  00000000  00000000  0021fa6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004f450  00000000  00000000  00225e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00057c7e  00000000  00000000  002752ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001139a7  00000000  00000000  002ccf6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ff30  00000000  00000000  003e0914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
   d4022:	b508      	push	{r3, lr}
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f006 fe64 	bl	dacfa <memcpy>
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f006 fe84 	bl	dad46 <memset>
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d330 	.word	0x2003d330
   d4048:	000dc424 	.word	0x000dc424
   d404c:	2003d400 	.word	0x2003d400
   d4050:	2003d400 	.word	0x2003d400
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
   d4058:	b570      	push	{r4, r5, r6, lr}
   d405a:	f005 fdab 	bl	d9bb4 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000dc418 	.word	0x000dc418
   d4080:	000dc398 	.word	0x000dc398

000d4084 <module_user_setup>:
   d4084:	f000 bdb8 	b.w	d4bf8 <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 fa91 	bl	d45b0 <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f005 bd51 	b.w	d9b38 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f003 b8d7 	b.w	d7248 <malloc>

000d409a <_ZdlPv>:
   d409a:	f003 b8dd 	b.w	d7258 <free>

000d409e <_ZdaPv>:
   d409e:	f003 b8db 	b.w	d7258 <free>
	...

000d40a4 <__cxa_pure_virtual>:
   d40a4:	b508      	push	{r3, lr}
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 ffee 	bl	d708c <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6cbd 	.word	0x000d6cbd

000d40b8 <__cxa_guard_acquire>:
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3

000d40d2 <_ZN8particle9LEDStatus6updateEm>:

inline bool particle::LEDStatus::isActive() const {
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
   d40d2:	4770      	bx	lr

000d40d4 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40d4:	7c03      	ldrb	r3, [r0, #16]
   d40d6:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40da:	4602      	mov	r2, r0
   d40dc:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40e0:	b12b      	cbz	r3, d40ee <_ZN4File9availableEv+0x1a>
   d40e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40e4:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40e6:	1a18      	subs	r0, r3, r0
   d40e8:	bf48      	it	mi
   d40ea:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40ee:	4770      	bx	lr

000d40f0 <_Z13StatusHandlerv>:
}

void StatusHandler(){
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   d40f0:	4b0f      	ldr	r3, [pc, #60]	; (d4130 <_Z13StatusHandlerv+0x40>)
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d40f2:	781a      	ldrb	r2, [r3, #0]

void StatusHandler(){
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
   d40f4:	4b0f      	ldr	r3, [pc, #60]	; (d4134 <_Z13StatusHandlerv+0x44>)
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d40f6:	781b      	ldrb	r3, [r3, #0]
   d40f8:	009b      	lsls	r3, r3, #2
   d40fa:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    }
}

void StatusHandler(){
    statusFlags = 0;
    statusFlags = LTEAvail;
   d40fe:	4a0e      	ldr	r2, [pc, #56]	; (d4138 <_Z13StatusHandlerv+0x48>)
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d4100:	7812      	ldrb	r2, [r2, #0]
   d4102:	4313      	orrs	r3, r2
void StatusHandler(){
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
   d4104:	4a0d      	ldr	r2, [pc, #52]	; (d413c <_Z13StatusHandlerv+0x4c>)
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d4106:	7812      	ldrb	r2, [r2, #0]
   d4108:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
   d410c:	4a0c      	ldr	r2, [pc, #48]	; (d4140 <_Z13StatusHandlerv+0x50>)
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d410e:	7812      	ldrb	r2, [r2, #0]
   d4110:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
   d4114:	4a0b      	ldr	r2, [pc, #44]	; (d4144 <_Z13StatusHandlerv+0x54>)
    statusFlags |= logSensors << 6;
   d4116:	7812      	ldrb	r2, [r2, #0]
   d4118:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d411c:	4a0a      	ldr	r2, [pc, #40]	; (d4148 <_Z13StatusHandlerv+0x58>)
   d411e:	7812      	ldrb	r2, [r2, #0]
   d4120:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   d4124:	4a09      	ldr	r2, [pc, #36]	; (d414c <_Z13StatusHandlerv+0x5c>)
   d4126:	7013      	strb	r3, [r2, #0]
    statusReady = true;
   d4128:	4b09      	ldr	r3, [pc, #36]	; (d4150 <_Z13StatusHandlerv+0x60>)
   d412a:	2201      	movs	r2, #1
   d412c:	701a      	strb	r2, [r3, #0]
   d412e:	4770      	bx	lr
   d4130:	2003dae2 	.word	0x2003dae2
   d4134:	2003dae1 	.word	0x2003dae1
   d4138:	2003d9ad 	.word	0x2003d9ad
   d413c:	2003d9a4 	.word	0x2003d9a4
   d4140:	2003e1dc 	.word	0x2003e1dc
   d4144:	2003d41d 	.word	0x2003d41d
   d4148:	2003dae3 	.word	0x2003dae3
   d414c:	2003e2d4 	.word	0x2003e2d4
   d4150:	2003e2ac 	.word	0x2003e2ac

000d4154 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4154:	6803      	ldr	r3, [r0, #0]
   d4156:	4718      	bx	r3

000d4158 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4158:	2a01      	cmp	r2, #1
   d415a:	d002      	beq.n	d4162 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d415c:	2a02      	cmp	r2, #2
   d415e:	d002      	beq.n	d4166 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d4160:	e004      	b.n	d416c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4162:	6001      	str	r1, [r0, #0]
	      break;
   d4164:	e002      	b.n	d416c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4166:	680b      	ldr	r3, [r1, #0]
   d4168:	b100      	cbz	r0, d416c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d416a:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d416c:	2000      	movs	r0, #0
   d416e:	4770      	bx	lr

000d4170 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4170:	4770      	bx	lr
	...

000d4174 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4174:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4176:	4602      	mov	r2, r0
   d4178:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d417a:	7913      	ldrb	r3, [r2, #4]
   d417c:	6895      	ldr	r5, [r2, #8]
   d417e:	b133      	cbz	r3, d418e <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4180:	b93d      	cbnz	r5, d4192 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4182:	490c      	ldr	r1, [pc, #48]	; (d41b4 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4184:	b004      	add	sp, #16
   d4186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d418a:	f004 bbab 	b.w	d88e4 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d418e:	4b0a      	ldr	r3, [pc, #40]	; (d41b8 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4190:	e000      	b.n	d4194 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4192:	4b0a      	ldr	r3, [pc, #40]	; (d41bc <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4194:	7b16      	ldrb	r6, [r2, #12]
   d4196:	4c0a      	ldr	r4, [pc, #40]	; (d41c0 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4198:	490a      	ldr	r1, [pc, #40]	; (d41c4 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d419a:	7b52      	ldrb	r2, [r2, #13]
   d419c:	9202      	str	r2, [sp, #8]
   d419e:	2e01      	cmp	r6, #1
   d41a0:	bf08      	it	eq
   d41a2:	4621      	moveq	r1, r4
   d41a4:	9101      	str	r1, [sp, #4]
   d41a6:	9500      	str	r5, [sp, #0]
   d41a8:	4a07      	ldr	r2, [pc, #28]	; (d41c8 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d41aa:	2100      	movs	r1, #0
   d41ac:	f004 fbd7 	bl	d895e <_ZN5Print11printf_implEbPKcz>
  }
   d41b0:	b004      	add	sp, #16
   d41b2:	bd70      	pop	{r4, r5, r6, pc}
   d41b4:	000db799 	.word	0x000db799
   d41b8:	000dbf90 	.word	0x000dbf90
   d41bc:	000db788 	.word	0x000db788
   d41c0:	000db791 	.word	0x000db791
   d41c4:	000db795 	.word	0x000db795
   d41c8:	000db7af 	.word	0x000db7af

000d41cc <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d41cc:	3010      	adds	r0, #16
   d41ce:	f001 bf27 	b.w	d6020 <_ZN7FatFile5writeEPKvj>

000d41d2 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d41d2:	b507      	push	{r0, r1, r2, lr}
   d41d4:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d41d6:	2201      	movs	r2, #1
   d41d8:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d41dc:	3010      	adds	r0, #16
   d41de:	4619      	mov	r1, r3
   d41e0:	f001 ff1e 	bl	d6020 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d41e4:	b003      	add	sp, #12
   d41e6:	f85d fb04 	ldr.w	pc, [sp], #4

000d41ea <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d41ea:	b510      	push	{r4, lr}
   d41ec:	2134      	movs	r1, #52	; 0x34
   d41ee:	4604      	mov	r4, r0
   d41f0:	f006 fb0e 	bl	da810 <_ZdlPvj>
   d41f4:	4620      	mov	r0, r4
   d41f6:	bd10      	pop	{r4, pc}

000d41f8 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41f8:	6943      	ldr	r3, [r0, #20]
   d41fa:	b113      	cbz	r3, d4202 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41fc:	6983      	ldr	r3, [r0, #24]
   d41fe:	300c      	adds	r0, #12
   d4200:	4718      	bx	r3
   d4202:	4770      	bx	lr

000d4204 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4204:	3010      	adds	r0, #16
   d4206:	f001 be7f 	b.w	d5f08 <_ZN7FatFile4syncEv>

000d420a <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d420a:	3010      	adds	r0, #16
   d420c:	f001 bd94 	b.w	d5d38 <_ZN7FatFile4peekEv>

000d4210 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4210:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4212:	2201      	movs	r2, #1
   d4214:	f10d 0107 	add.w	r1, sp, #7
   d4218:	3010      	adds	r0, #16
   d421a:	f001 fcda 	bl	d5bd2 <_ZN7FatFile4readEPvj>
   d421e:	2801      	cmp	r0, #1
   d4220:	bf0c      	ite	eq
   d4222:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4226:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d422a:	b003      	add	sp, #12
   d422c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4230 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4230:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4232:	2100      	movs	r1, #0
   d4234:	4604      	mov	r4, r0
   d4236:	4608      	mov	r0, r1
   d4238:	f002 fdd0 	bl	d6ddc <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d423c:	a902      	add	r1, sp, #8
   d423e:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4240:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4242:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d4246:	f002 fde1 	bl	d6e0c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d424a:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d424c:	b10c      	cbz	r4, d4252 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d424e:	2301      	movs	r3, #1
   d4250:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4252:	2100      	movs	r1, #0
   d4254:	2001      	movs	r0, #1
   d4256:	f002 fdc1 	bl	d6ddc <os_thread_scheduling>
            }
        }
        if (t) {
   d425a:	b12c      	cbz	r4, d4268 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d425c:	6823      	ldr	r3, [r4, #0]
   d425e:	4620      	mov	r0, r4
   d4260:	689b      	ldr	r3, [r3, #8]
   d4262:	4798      	blx	r3
            t->running = false;
   d4264:	2300      	movs	r3, #0
   d4266:	7123      	strb	r3, [r4, #4]
        }
    }
   d4268:	b002      	add	sp, #8
   d426a:	bd10      	pop	{r4, pc}

000d426c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d426c:	b510      	push	{r4, lr}
   d426e:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4270:	6800      	ldr	r0, [r0, #0]
   d4272:	b108      	cbz	r0, d4278 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4274:	f002 fff0 	bl	d7258 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4278:	4620      	mov	r0, r4
   d427a:	bd10      	pop	{r4, pc}

000d427c <_ZNSt6vectorI7PairBotSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d427c:	b510      	push	{r4, lr}
   d427e:	4604      	mov	r4, r0
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
   d4280:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4282:	b108      	cbz	r0, d4288 <_ZNSt6vectorI7PairBotSaIS0_EED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4284:	f7ff ff09 	bl	d409a <_ZdlPv>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
   d4288:	4620      	mov	r0, r4
   d428a:	bd10      	pop	{r4, pc}

000d428c <_ZN8particle9LEDStatusD1Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d428c:	b510      	push	{r4, lr}
   d428e:	4b05      	ldr	r3, [pc, #20]	; (d42a4 <_ZN8particle9LEDStatusD1Ev+0x18>)
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d4290:	2200      	movs	r2, #0

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d4292:	4604      	mov	r4, r0
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d4294:	4611      	mov	r1, r2

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d4296:	f840 3b04 	str.w	r3, [r0], #4
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d429a:	f002 ff17 	bl	d70cc <led_set_status_active>
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}
   d429e:	4620      	mov	r0, r4
   d42a0:	bd10      	pop	{r4, pc}
   d42a2:	bf00      	nop
   d42a4:	000db73c 	.word	0x000db73c

000d42a8 <_ZN8particle9LEDStatusD0Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42a8:	b510      	push	{r4, lr}
   d42aa:	4604      	mov	r4, r0
    setActive(false);
}
   d42ac:	f7ff ffee 	bl	d428c <_ZN8particle9LEDStatusD1Ev>
   d42b0:	4620      	mov	r0, r4
   d42b2:	2120      	movs	r1, #32
   d42b4:	f006 faac 	bl	da810 <_ZdlPvj>
   d42b8:	4620      	mov	r0, r4
   d42ba:	bd10      	pop	{r4, pc}

000d42bc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d42bc:	4b0a      	ldr	r3, [pc, #40]	; (d42e8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d42be:	b510      	push	{r4, lr}
   d42c0:	4604      	mov	r4, r0
   d42c2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d42c4:	f004 fcc0 	bl	d8c48 <_ZN5spark10LogManager8instanceEv>
   d42c8:	4621      	mov	r1, r4
   d42ca:	f004 fead 	bl	d9028 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d42ce:	f005 fd75 	bl	d9dbc <_Z16_fetch_usbserialv>
   d42d2:	f005 fd67 	bl	d9da4 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d42d6:	4620      	mov	r0, r4
   d42d8:	4b04      	ldr	r3, [pc, #16]	; (d42ec <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d42da:	f840 3b04 	str.w	r3, [r0], #4
   d42de:	f004 fda9 	bl	d8e34 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d42e2:	4620      	mov	r0, r4
   d42e4:	bd10      	pop	{r4, pc}
   d42e6:	bf00      	nop
   d42e8:	000db750 	.word	0x000db750
   d42ec:	000db724 	.word	0x000db724

000d42f0 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d42f0:	b510      	push	{r4, lr}
   d42f2:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d42f4:	f7ff ffe2 	bl	d42bc <_ZN5spark16SerialLogHandlerD1Ev>
   d42f8:	4620      	mov	r0, r4
   d42fa:	2124      	movs	r1, #36	; 0x24
   d42fc:	f006 fa88 	bl	da810 <_ZdlPvj>
   d4300:	4620      	mov	r0, r4
   d4302:	bd10      	pop	{r4, pc}

000d4304 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4304:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4306:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4308:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d430a:	b113      	cbz	r3, d4312 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d430c:	2203      	movs	r2, #3
   d430e:	4601      	mov	r1, r0
   d4310:	4798      	blx	r3
    }
   d4312:	4620      	mov	r0, r4
   d4314:	bd10      	pop	{r4, pc}
	...

000d4318 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4318:	b5f0      	push	{r4, r5, r6, r7, lr}
   d431a:	2500      	movs	r5, #0
   d431c:	468e      	mov	lr, r1
   d431e:	4915      	ldr	r1, [pc, #84]	; (d4374 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d4320:	7105      	strb	r5, [r0, #4]
   d4322:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4324:	6145      	str	r5, [r0, #20]
   d4326:	6001      	str	r1, [r0, #0]
   d4328:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d432a:	e892 0003 	ldmia.w	r2, {r0, r1}
   d432e:	b085      	sub	sp, #20
   d4330:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d4332:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4336:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d433a:	e896 0003 	ldmia.w	r6, {r0, r1}
   d433e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4342:	e897 0003 	ldmia.w	r7, {r0, r1}
   d4346:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d434a:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d434c:	6960      	ldr	r0, [r4, #20]
   d434e:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4350:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4352:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4354:	69a0      	ldr	r0, [r4, #24]
   d4356:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4358:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d435a:	e88d 0028 	stmia.w	sp, {r3, r5}
   d435e:	4a06      	ldr	r2, [pc, #24]	; (d4378 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d4360:	4623      	mov	r3, r4
   d4362:	4671      	mov	r1, lr
   d4364:	f104 0008 	add.w	r0, r4, #8
   d4368:	f002 fd40 	bl	d6dec <os_timer_create>
    }
   d436c:	4620      	mov	r0, r4
   d436e:	b005      	add	sp, #20
   d4370:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4372:	bf00      	nop
   d4374:	000db710 	.word	0x000db710
   d4378:	000d4231 	.word	0x000d4231

000d437c <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d437c:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d437e:	6880      	ldr	r0, [r0, #8]
   d4380:	2300      	movs	r3, #0
   d4382:	b138      	cbz	r0, d4394 <_ZN5Timer5_stopEjb+0x18>
   d4384:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4388:	2102      	movs	r1, #2
   d438a:	f002 fd47 	bl	d6e1c <os_timer_change>
   d438e:	fab0 f080 	clz	r0, r0
   d4392:	0940      	lsrs	r0, r0, #5
    }
   d4394:	b003      	add	sp, #12
   d4396:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d439c <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d439c:	b538      	push	{r3, r4, r5, lr}
   d439e:	4b10      	ldr	r3, [pc, #64]	; (d43e0 <_ZN5TimerD1Ev+0x44>)
   d43a0:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d43a2:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d43a4:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d43a6:	b1a3      	cbz	r3, d43d2 <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d43ac:	2200      	movs	r2, #0
   d43ae:	f7ff ffe5 	bl	d437c <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d43b2:	2100      	movs	r1, #0
   d43b4:	68a0      	ldr	r0, [r4, #8]
   d43b6:	f002 fd59 	bl	d6e6c <os_timer_set_id>
            while (running) {
   d43ba:	7923      	ldrb	r3, [r4, #4]
   d43bc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d43c0:	b113      	cbz	r3, d43c8 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d43c2:	f002 fcf3 	bl	d6dac <os_thread_yield>
   d43c6:	e7f8      	b.n	d43ba <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d43c8:	4629      	mov	r1, r5
   d43ca:	68a0      	ldr	r0, [r4, #8]
   d43cc:	f002 fd16 	bl	d6dfc <os_timer_destroy>
            handle = nullptr;
   d43d0:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d43d2:	f104 000c 	add.w	r0, r4, #12
   d43d6:	f7ff ff95 	bl	d4304 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43da:	4620      	mov	r0, r4
   d43dc:	bd38      	pop	{r3, r4, r5, pc}
   d43de:	bf00      	nop
   d43e0:	000db710 	.word	0x000db710

000d43e4 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d43e4:	b510      	push	{r4, lr}
   d43e6:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43e8:	f7ff ffd8 	bl	d439c <_ZN5TimerD1Ev>
   d43ec:	4620      	mov	r0, r4
   d43ee:	211c      	movs	r1, #28
   d43f0:	f006 fa0e 	bl	da810 <_ZdlPvj>
   d43f4:	4620      	mov	r0, r4
   d43f6:	bd10      	pop	{r4, pc}

000d43f8 <_ZN5Timer5startEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43fa:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43fc:	2200      	movs	r2, #0
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43fe:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4400:	4611      	mov	r1, r2
   d4402:	f7ff ffbb 	bl	d437c <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4406:	68a8      	ldr	r0, [r5, #8]
   d4408:	2300      	movs	r3, #0
   d440a:	b140      	cbz	r0, d441e <_ZN5Timer5startEj+0x26>
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	9400      	str	r4, [sp, #0]
   d4410:	461a      	mov	r2, r3
   d4412:	4619      	mov	r1, r3
   d4414:	f002 fd02 	bl	d6e1c <os_timer_change>
   d4418:	fab0 f080 	clz	r0, r0
   d441c:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d441e:	b003      	add	sp, #12
   d4420:	bd30      	pop	{r4, r5, pc}

000d4422 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:

inline LEDPattern particle::LEDStatus::pattern() const {
    return (LEDPattern)d_.pattern;
}

inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   d4422:	b510      	push	{r4, lr}
   d4424:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   d4426:	2200      	movs	r2, #0
   d4428:	7c40      	ldrb	r0, [r0, #17]
   d442a:	f002 fe79 	bl	d7120 <led_pattern_period>
}

inline void particle::LEDStatus::setPeriod(uint16_t period) {
    // Pattern period cannot be set for custom pattern type
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   d442e:	7c63      	ldrb	r3, [r4, #17]
   d4430:	2b0f      	cmp	r3, #15
        d_.period = period;
   d4432:	bf18      	it	ne
   d4434:	8320      	strhne	r0, [r4, #24]
   d4436:	bd10      	pop	{r4, pc}

000d4438 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   d4438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(offloadMode){
   d443a:	4b2e      	ldr	r3, [pc, #184]	; (d44f4 <_Z10LEDHandlerv+0xbc>)
   d443c:	4d2e      	ldr	r5, [pc, #184]	; (d44f8 <_Z10LEDHandlerv+0xc0>)
   d443e:	781b      	ldrb	r3, [r3, #0]
   d4440:	b133      	cbz	r3, d4450 <_Z10LEDHandlerv+0x18>
    return d_.color;
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   d4442:	7c6b      	ldrb	r3, [r5, #17]
   d4444:	2b0f      	cmp	r3, #15
   d4446:	d14f      	bne.n	d44e8 <_Z10LEDHandlerv+0xb0>
inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}

inline void particle::LEDStatus::setColor(uint32_t color) {
    d_.color = color;
   d4448:	23ff      	movs	r3, #255	; 0xff
   d444a:	616b      	str	r3, [r5, #20]
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
   d444c:	211e      	movs	r1, #30
   d444e:	e047      	b.n	d44e0 <_Z10LEDHandlerv+0xa8>
        return;                
    }
    if(lowBattery){
   d4450:	4b2a      	ldr	r3, [pc, #168]	; (d44fc <_Z10LEDHandlerv+0xc4>)
   d4452:	781b      	ldrb	r3, [r3, #0]
   d4454:	b95b      	cbnz	r3, d446e <_Z10LEDHandlerv+0x36>
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(logSensors){
   d4456:	4b2a      	ldr	r3, [pc, #168]	; (d4500 <_Z10LEDHandlerv+0xc8>)
   d4458:	781b      	ldrb	r3, [r3, #0]
   d445a:	b95b      	cbnz	r3, d4474 <_Z10LEDHandlerv+0x3c>
        SetPattern = LED_PATTERN_SOLID;
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(manualRC){
   d445c:	4b29      	ldr	r3, [pc, #164]	; (d4504 <_Z10LEDHandlerv+0xcc>)
   d445e:	781b      	ldrb	r3, [r3, #0]
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_SLOW;
    }
    else{
        SetSpeed = LED_SPEED_NORMAL;
   d4460:	2b00      	cmp	r3, #0
   d4462:	bf15      	itete	ne
   d4464:	270a      	movne	r7, #10
   d4466:	2714      	moveq	r7, #20
   d4468:	2602      	movne	r6, #2
   d446a:	2603      	moveq	r6, #3
   d446c:	e004      	b.n	d4478 <_Z10LEDHandlerv+0x40>
        status.setSpeed(LED_SPEED_FAST);
        return;                
    }
    if(lowBattery){
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_NORMAL;
   d446e:	2714      	movs	r7, #20
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
        return;                
    }
    if(lowBattery){
        SetPattern = LED_PATTERN_BLINK;
   d4470:	2602      	movs	r6, #2
   d4472:	e001      	b.n	d4478 <_Z10LEDHandlerv+0x40>
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(logSensors){
        SetPattern = LED_PATTERN_SOLID;
        SetSpeed = LED_SPEED_NORMAL;
   d4474:	2714      	movs	r7, #20
    if(lowBattery){
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(logSensors){
        SetPattern = LED_PATTERN_SOLID;
   d4476:	2601      	movs	r6, #1
    }

    statusMode = 0;
    statusMode = LTEAvail;
    statusMode |= XBeeAvail << 1;
    statusMode |= BLEAvail << 2;
   d4478:	4a23      	ldr	r2, [pc, #140]	; (d4508 <_Z10LEDHandlerv+0xd0>)
        SetPattern = LED_PATTERN_FADE;
    }

    statusMode = 0;
    statusMode = LTEAvail;
    statusMode |= XBeeAvail << 1;
   d447a:	4b24      	ldr	r3, [pc, #144]	; (d450c <_Z10LEDHandlerv+0xd4>)
    statusMode |= BLEAvail << 2;
   d447c:	7814      	ldrb	r4, [r2, #0]
   d447e:	781b      	ldrb	r3, [r3, #0]
   d4480:	00a4      	lsls	r4, r4, #2
   d4482:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
        SetSpeed = LED_SPEED_NORMAL;
        SetPattern = LED_PATTERN_FADE;
    }

    statusMode = 0;
    statusMode = LTEAvail;
   d4486:	4b22      	ldr	r3, [pc, #136]	; (d4510 <_Z10LEDHandlerv+0xd8>)
    statusMode |= XBeeAvail << 1;
    statusMode |= BLEAvail << 2;
   d4488:	781b      	ldrb	r3, [r3, #0]
   d448a:	431c      	orrs	r4, r3
   d448c:	b264      	sxtb	r4, r4
    Serial.printlnf("Status: %d",statusMode);
   d448e:	f005 fc95 	bl	d9dbc <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4492:	4623      	mov	r3, r4
   d4494:	4a1f      	ldr	r2, [pc, #124]	; (d4514 <_Z10LEDHandlerv+0xdc>)
   d4496:	2101      	movs	r1, #1
    switch (statusMode){
   d4498:	3c01      	subs	r4, #1
   d449a:	f004 fa60 	bl	d895e <_ZN5Print11printf_implEbPKcz>
   d449e:	2c06      	cmp	r4, #6
   d44a0:	d814      	bhi.n	d44cc <_Z10LEDHandlerv+0x94>
   d44a2:	e8df f004 	tbb	[pc, r4]
   d44a6:	0e10      	.short	0x0e10
   d44a8:	0406090b 	.word	0x0406090b
   d44ac:	16          	.byte	0x16
   d44ad:	00          	.byte	0x00
    case 7:
        SetColor = RGB_COLOR_CYAN;
        break;
    case 6:
        SetColor = RGB_COLOR_YELLOW;
   d44ae:	4b1a      	ldr	r3, [pc, #104]	; (d4518 <_Z10LEDHandlerv+0xe0>)
   d44b0:	e011      	b.n	d44d6 <_Z10LEDHandlerv+0x9e>
        break;
    case 5:
        SetColor = RGB_COLOR_WHITE;
   d44b2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
        break;
   d44b6:	e00e      	b.n	d44d6 <_Z10LEDHandlerv+0x9e>
    case 4:
        SetColor = RGB_COLOR_BLUE;
   d44b8:	23ff      	movs	r3, #255	; 0xff
        break;
   d44ba:	e00c      	b.n	d44d6 <_Z10LEDHandlerv+0x9e>
    case 3:
        SetColor = RGB_COLOR_GREEN;
   d44bc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
        break;
   d44c0:	e009      	b.n	d44d6 <_Z10LEDHandlerv+0x9e>
    case 2:
        SetColor = RGB_COLOR_ORANGE;
   d44c2:	4b16      	ldr	r3, [pc, #88]	; (d451c <_Z10LEDHandlerv+0xe4>)
        break;
   d44c4:	e007      	b.n	d44d6 <_Z10LEDHandlerv+0x9e>
    case 1:
        SetColor = RGB_COLOR_MAGENTA;
   d44c6:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
        break;
   d44ca:	e004      	b.n	d44d6 <_Z10LEDHandlerv+0x9e>
    case 0:
        SetColor = RGB_COLOR_RED;
   d44cc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
        break;
   d44d0:	e001      	b.n	d44d6 <_Z10LEDHandlerv+0x9e>
    statusMode |= XBeeAvail << 1;
    statusMode |= BLEAvail << 2;
    Serial.printlnf("Status: %d",statusMode);
    switch (statusMode){
    case 7:
        SetColor = RGB_COLOR_CYAN;
   d44d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return d_.color;
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   d44d6:	7c6a      	ldrb	r2, [r5, #17]
   d44d8:	2a0f      	cmp	r2, #15
   d44da:	d108      	bne.n	d44ee <_Z10LEDHandlerv+0xb6>
inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}

inline void particle::LEDStatus::setColor(uint32_t color) {
    d_.color = color;
   d44dc:	616b      	str	r3, [r5, #20]
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   d44de:	4639      	mov	r1, r7
   d44e0:	4805      	ldr	r0, [pc, #20]	; (d44f8 <_Z10LEDHandlerv+0xc0>)
   d44e2:	f7ff ff9e 	bl	d4422 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   d44e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
        d_.pattern = pattern;
   d44e8:	2302      	movs	r3, #2
   d44ea:	746b      	strb	r3, [r5, #17]
   d44ec:	e7ac      	b.n	d4448 <_Z10LEDHandlerv+0x10>
   d44ee:	4a02      	ldr	r2, [pc, #8]	; (d44f8 <_Z10LEDHandlerv+0xc0>)
   d44f0:	7456      	strb	r6, [r2, #17]
   d44f2:	e7f3      	b.n	d44dc <_Z10LEDHandlerv+0xa4>
   d44f4:	2003d9a4 	.word	0x2003d9a4
   d44f8:	2003da64 	.word	0x2003da64
   d44fc:	2003d41d 	.word	0x2003d41d
   d4500:	2003dae3 	.word	0x2003dae3
   d4504:	2003e1dc 	.word	0x2003e1dc
   d4508:	2003dae1 	.word	0x2003dae1
   d450c:	2003dae2 	.word	0x2003dae2
   d4510:	2003d9ad 	.word	0x2003d9ad
   d4514:	000db7cd 	.word	0x000db7cd
   d4518:	00ffff00 	.word	0x00ffff00
   d451c:	00ff6000 	.word	0x00ff6000

000d4520 <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d4520:	4613      	mov	r3, r2
   d4522:	460a      	mov	r2, r1
   d4524:	4901      	ldr	r1, [pc, #4]	; (d452c <_ZN7FatFile4openEPKci+0xc>)
   d4526:	6809      	ldr	r1, [r1, #0]
   d4528:	f001 bd2b 	b.w	d5f82 <_ZN7FatFile4openEPS_PKci>
   d452c:	2003e30c 	.word	0x2003e30c

000d4530 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4530:	b530      	push	{r4, r5, lr}
   d4532:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4534:	4b1c      	ldr	r3, [pc, #112]	; (d45a8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d4536:	9300      	str	r3, [sp, #0]
   d4538:	7913      	ldrb	r3, [r2, #4]
   d453a:	f88d 3004 	strb.w	r3, [sp, #4]
   d453e:	6893      	ldr	r3, [r2, #8]
   d4540:	9302      	str	r3, [sp, #8]
   d4542:	7b13      	ldrb	r3, [r2, #12]
   d4544:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4548:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d454c:	7b53      	ldrb	r3, [r2, #13]
   d454e:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4552:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4554:	460a      	mov	r2, r1
   d4556:	466b      	mov	r3, sp
   d4558:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d455c:	4628      	mov	r0, r5
   d455e:	f002 f8a7 	bl	d66b0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d4562:	b1f0      	cbz	r0, d45a2 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4564:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d4566:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d456a:	4628      	mov	r0, r5
   d456c:	f001 fd02 	bl	d5f74 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4570:	2101      	movs	r1, #1
   d4572:	4620      	mov	r0, r4
   d4574:	f001 ff45 	bl	d6402 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4578:	4601      	mov	r1, r0
   d457a:	b168      	cbz	r0, d4598 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d457c:	4621      	mov	r1, r4
   d457e:	4628      	mov	r0, r5
   d4580:	f001 fb0f 	bl	d5ba2 <_ZN7FatFile8openRootEP9FatVolume>
   d4584:	b168      	cbz	r0, d45a2 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d4586:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d458a:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d458e:	bf16      	itet	ne
   d4590:	4b06      	ldrne	r3, [pc, #24]	; (d45ac <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d4592:	4618      	moveq	r0, r3
   d4594:	601d      	strne	r5, [r3, #0]
   d4596:	e005      	b.n	d45a4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d4598:	4620      	mov	r0, r4
   d459a:	f001 ff32 	bl	d6402 <_ZN9FatVolume4initEh>
   d459e:	2800      	cmp	r0, #0
   d45a0:	d1ec      	bne.n	d457c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d45a2:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d45a4:	b005      	add	sp, #20
   d45a6:	bd30      	pop	{r4, r5, pc}
   d45a8:	000db704 	.word	0x000db704
   d45ac:	2003e30c 	.word	0x2003e30c

000d45b0 <loop>:
            delay(100);
        }
    }
}

void loop(){
   d45b0:	4770      	bx	lr
	...

000d45b4 <_Z8setupLTEv>:
  //Take the incoming char from the Ublox I2C port and pass it on to the MicroNMEA lib
  //for sentence cracking
  nmea.process(incoming);
}
//Initialization for LTE events and flags
void setupLTE(){
   d45b4:	b513      	push	{r0, r1, r4, lr}
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d45b6:	2400      	movs	r4, #0
   d45b8:	9401      	str	r4, [sp, #4]
   d45ba:	9400      	str	r4, [sp, #0]
   d45bc:	2301      	movs	r3, #1
   d45be:	4622      	mov	r2, r4
   d45c0:	4903      	ldr	r1, [pc, #12]	; (d45d0 <_Z8setupLTEv+0x1c>)
   d45c2:	4804      	ldr	r0, [pc, #16]	; (d45d4 <_Z8setupLTEv+0x20>)
   d45c4:	f002 fe28 	bl	d7218 <spark_subscribe>
    Particle.subscribe("CCHub", cmdLTEHandler); //Subscribe to LTE data from Central Control Hub
    LTEAvail = false;
   d45c8:	4b03      	ldr	r3, [pc, #12]	; (d45d8 <_Z8setupLTEv+0x24>)
   d45ca:	701c      	strb	r4, [r3, #0]
}
   d45cc:	b002      	add	sp, #8
   d45ce:	bd10      	pop	{r4, pc}
   d45d0:	000d49d1 	.word	0x000d49d1
   d45d4:	000db7d8 	.word	0x000db7d8
   d45d8:	2003d9ad 	.word	0x2003d9ad

000d45dc <_Z9setupXBeev>:
void setupSPI(){
    SPI.begin(SPI_MODE_MASTER);
    SPI.setClockSpeed(1000000);
}
//Code to initially configure XBee module over serial
void setupXBee(){
   d45dc:	b510      	push	{r4, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   d45de:	f005 fcc5 	bl	d9f6c <_Z22__fetch_global_Serial1v>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d45e2:	4a0c      	ldr	r2, [pc, #48]	; (d4614 <_Z9setupXBeev+0x38>)
   d45e4:	2100      	movs	r1, #0
   d45e6:	f004 f9ba 	bl	d895e <_ZN5Print11printf_implEbPKcz>
    delay(20);              //Wait some time before sending next character
   d45ea:	2014      	movs	r0, #20
   d45ec:	f005 fa6e 	bl	d9acc <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   d45f0:	f005 fcbc 	bl	d9f6c <_Z22__fetch_global_Serial1v>
   d45f4:	4a08      	ldr	r2, [pc, #32]	; (d4618 <_Z9setupXBeev+0x3c>)
   d45f6:	2100      	movs	r1, #0
   d45f8:	f004 f9b1 	bl	d895e <_ZN5Print11printf_implEbPKcz>
    delay(20);
   d45fc:	2014      	movs	r0, #20
   d45fe:	f005 fa65 	bl	d9acc <delay>
    Serial1.printf("Hello from Bot %d\n", BOTNUM);   //Send Hello World message!
   d4602:	f005 fcb3 	bl	d9f6c <_Z22__fetch_global_Serial1v>
   d4606:	2301      	movs	r3, #1
   d4608:	4a04      	ldr	r2, [pc, #16]	; (d461c <_Z9setupXBeev+0x40>)
   d460a:	2100      	movs	r1, #0
}
   d460c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4610:	f004 b9a5 	b.w	d895e <_ZN5Print11printf_implEbPKcz>
   d4614:	000dbf8f 	.word	0x000dbf8f
   d4618:	000db797 	.word	0x000db797
   d461c:	000db7de 	.word	0x000db7de

000d4620 <_Z8setupGPSv>:

//I2C setup for NEO-M8U GPS
void setupGPS(){
   d4620:	b510      	push	{r4, lr}
    myGPS.begin(Wire);
   d4622:	f006 f8c1 	bl	da7a8 <_Z19__fetch_global_Wirev>
   d4626:	4c07      	ldr	r4, [pc, #28]	; (d4644 <_Z8setupGPSv+0x24>)
   d4628:	4601      	mov	r1, r0
   d462a:	4620      	mov	r0, r4
   d462c:	f002 fa8b 	bl	d6b46 <_ZN13SFE_UBLOX_GPS5beginER7TwoWire>
    if (myGPS.isConnected() == false){
   d4630:	4620      	mov	r0, r4
   d4632:	f002 fa93 	bl	d6b5c <_ZN13SFE_UBLOX_GPS11isConnectedEv>
        //Log.warn("Ublox GPS not detected at default I2C address, freezing.");
        //while (1);
    }
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   d4636:	f006 f8b7 	bl	da7a8 <_Z19__fetch_global_Wirev>

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d463a:	4903      	ldr	r1, [pc, #12]	; (d4648 <_Z8setupGPSv+0x28>)
}
   d463c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4640:	f005 bcf8 	b.w	da034 <_ZN7TwoWire8setSpeedEm>
   d4644:	2003e224 	.word	0x2003e224
   d4648:	00061a80 	.word	0x00061a80

000d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d464c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d464e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4650:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4652:	b17c      	cbz	r4, d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4654:	6863      	ldr	r3, [r4, #4]
   d4656:	3b01      	subs	r3, #1
   d4658:	6063      	str	r3, [r4, #4]
   d465a:	b95b      	cbnz	r3, d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d465c:	6823      	ldr	r3, [r4, #0]
   d465e:	4620      	mov	r0, r4
   d4660:	689b      	ldr	r3, [r3, #8]
   d4662:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4664:	68a3      	ldr	r3, [r4, #8]
   d4666:	3b01      	subs	r3, #1
   d4668:	60a3      	str	r3, [r4, #8]
   d466a:	b91b      	cbnz	r3, d4674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d466c:	6823      	ldr	r3, [r4, #0]
   d466e:	4620      	mov	r0, r4
   d4670:	68db      	ldr	r3, [r3, #12]
   d4672:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4674:	4628      	mov	r0, r5
   d4676:	bd38      	pop	{r3, r4, r5, pc}

000d4678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4678:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d467a:	6804      	ldr	r4, [r0, #0]
   d467c:	6843      	ldr	r3, [r0, #4]
   d467e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4680:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4682:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4686:	42a6      	cmp	r6, r4
   d4688:	d004      	beq.n	d4694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d468a:	4620      	mov	r0, r4
   d468c:	f003 f834 	bl	d76f8 <_ZN6StringD1Ev>
   d4690:	3414      	adds	r4, #20
   d4692:	e7f8      	b.n	d4686 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4694:	6828      	ldr	r0, [r5, #0]
   d4696:	f002 fddf 	bl	d7258 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d469a:	4628      	mov	r0, r5
   d469c:	bd70      	pop	{r4, r5, r6, pc}

000d469e <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d469e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d46a0:	460e      	mov	r6, r1
   d46a2:	b091      	sub	sp, #68	; 0x44

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d46a4:	2100      	movs	r1, #0
   d46a6:	4604      	mov	r4, r0
   d46a8:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d46aa:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d46ac:	ad0b      	add	r5, sp, #44	; 0x2c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d46ae:	4619      	mov	r1, r3
   d46b0:	a806      	add	r0, sp, #24
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d46b2:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d46b4:	f003 fa2e 	bl	d7b14 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d46b8:	9916      	ldr	r1, [sp, #88]	; 0x58
   d46ba:	4628      	mov	r0, r5
   d46bc:	f003 fa2a 	bl	d7b14 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d46c0:	aa10      	add	r2, sp, #64	; 0x40
   d46c2:	783b      	ldrb	r3, [r7, #0]
   d46c4:	f802 3d2c 	strb.w	r3, [r2, #-44]!
        construct(desc, properties, cUuid, sUuid, callback, context);
   d46c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d46ca:	9302      	str	r3, [sp, #8]
   d46cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d46ce:	9301      	str	r3, [sp, #4]
   d46d0:	4620      	mov	r0, r4
   d46d2:	9500      	str	r5, [sp, #0]
   d46d4:	ab06      	add	r3, sp, #24
   d46d6:	4631      	mov	r1, r6
   d46d8:	f003 ff20 	bl	d851c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d46dc:	4620      	mov	r0, r4
   d46de:	b011      	add	sp, #68	; 0x44
   d46e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d46e2 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d46e2:	4613      	mov	r3, r2
   d46e4:	460a      	mov	r2, r1
   d46e6:	2101      	movs	r1, #1
   d46e8:	f004 b939 	b.w	d895e <_ZN5Print11printf_implEbPKcz>

000d46ec <_Z14processCommandPKchb>:
        uint8_t BLEPeer;    //Identify which peer this bot is connected to

};*/

//Mode 1 - BLE, Mode 2 - XBEE, Mode 4 - LTE
void processCommand(const char *command, uint8_t mode, bool sendAck){
   d46ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d46f0:	b086      	sub	sp, #24
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   d46f2:	7883      	ldrb	r3, [r0, #2]
   d46f4:	2b41      	cmp	r3, #65	; 0x41
        uint8_t BLEPeer;    //Identify which peer this bot is connected to

};*/

//Mode 1 - BLE, Mode 2 - XBEE, Mode 4 - LTE
void processCommand(const char *command, uint8_t mode, bool sendAck){
   d46f6:	af02      	add	r7, sp, #8
   d46f8:	4604      	mov	r4, r0
   d46fa:	468a      	mov	sl, r1
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   d46fc:	d102      	bne.n	d4704 <_Z14processCommandPKchb+0x18>
   d46fe:	78c3      	ldrb	r3, [r0, #3]
   d4700:	2b42      	cmp	r3, #66	; 0x42
   d4702:	e004      	b.n	d470e <_Z14processCommandPKchb+0x22>
   d4704:	2b42      	cmp	r3, #66	; 0x42
   d4706:	f040 8124 	bne.w	d4952 <_Z14processCommandPKchb+0x266>
   d470a:	78c3      	ldrb	r3, [r0, #3]
   d470c:	2b31      	cmp	r3, #49	; 0x31
   d470e:	f040 8120 	bne.w	d4952 <_Z14processCommandPKchb+0x266>
        
        uint8_t checksum;
        char dataStr[strlen(command)-8];
   d4712:	4620      	mov	r0, r4
   d4714:	f006 fb81 	bl	dae1a <strlen>
   d4718:	3801      	subs	r0, #1
   d471a:	f020 0007 	bic.w	r0, r0, #7
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
            offloadMode = true;
            status.setPattern(LED_PATTERN_BLINK);
            status.setColor(RGB_COLOR_BLUE);
            status.setSpeed(LED_SPEED_FAST);
        }
   d471e:	46e9      	mov	r9, sp
void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
        
        uint8_t checksum;
        char dataStr[strlen(command)-8];
   d4720:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   d4724:	4620      	mov	r0, r4
   d4726:	f006 fb78 	bl	dae1a <strlen>
void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
        
        uint8_t checksum;
        char dataStr[strlen(command)-8];
   d472a:	ad02      	add	r5, sp, #8
        dataStr[strlen(command)-9] = '\0';
   d472c:	4428      	add	r0, r5
   d472e:	2600      	movs	r6, #0
   d4730:	f800 6c09 	strb.w	r6, [r0, #-9]
        char cmdStr[4];
        cmdStr[3] = '\0';
        char checkStr[3];
        checkStr[0] = command[strlen(command)-2];
   d4734:	4620      	mov	r0, r4
        
        uint8_t checksum;
        char dataStr[strlen(command)-8];
        dataStr[strlen(command)-9] = '\0';
        char cmdStr[4];
        cmdStr[3] = '\0';
   d4736:	73fe      	strb	r6, [r7, #15]
        char checkStr[3];
        checkStr[0] = command[strlen(command)-2];
   d4738:	f006 fb6f 	bl	dae1a <strlen>
   d473c:	4420      	add	r0, r4
   d473e:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   d4742:	703b      	strb	r3, [r7, #0]
        checkStr[1] = command[strlen(command)-1];
   d4744:	4620      	mov	r0, r4
   d4746:	f006 fb68 	bl	dae1a <strlen>
   d474a:	4420      	add	r0, r4
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   d474c:	4631      	mov	r1, r6
        dataStr[strlen(command)-9] = '\0';
        char cmdStr[4];
        cmdStr[3] = '\0';
        char checkStr[3];
        checkStr[0] = command[strlen(command)-2];
        checkStr[1] = command[strlen(command)-1];
   d474e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   d4752:	707b      	strb	r3, [r7, #1]
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   d4754:	2210      	movs	r2, #16
   d4756:	4638      	mov	r0, r7
        char cmdStr[4];
        cmdStr[3] = '\0';
        char checkStr[3];
        checkStr[0] = command[strlen(command)-2];
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
   d4758:	70be      	strb	r6, [r7, #2]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   d475a:	f006 fc21 	bl	dafa0 <strtol>
   d475e:	4680      	mov	r8, r0
   d4760:	fa5f f888 	uxtb.w	r8, r8
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   d4764:	f005 fb2a 	bl	d9dbc <_Z16_fetch_usbserialv>
   d4768:	f8cd 8000 	str.w	r8, [sp]
   d476c:	4643      	mov	r3, r8
   d476e:	4a7b      	ldr	r2, [pc, #492]	; (d495c <_Z14processCommandPKchb+0x270>)
   d4770:	2101      	movs	r1, #1
   d4772:	f004 f8f4 	bl	d895e <_ZN5Print11printf_implEbPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   d4776:	2604      	movs	r6, #4
   d4778:	4620      	mov	r0, r4
   d477a:	f006 fb4e 	bl	dae1a <strlen>
   d477e:	3802      	subs	r0, #2
   d4780:	4286      	cmp	r6, r0
   d4782:	d211      	bcs.n	d47a8 <_Z14processCommandPKchb+0xbc>
            if(i < 7) cmdStr[i-4] = command[i];
   d4784:	2e06      	cmp	r6, #6
   d4786:	bf9b      	ittet	ls
   d4788:	f107 0310 	addls.w	r3, r7, #16
   d478c:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   d478e:	19ab      	addhi	r3, r5, r6
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-2;i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d4790:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   d4792:	bf8c      	ite	hi
   d4794:	5da2      	ldrbhi	r2, [r4, r6]
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-2;i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d4796:	f803 2c08 	strbls.w	r2, [r3, #-8]
        checkStr[0] = command[strlen(command)-2];
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   d479a:	f106 0601 	add.w	r6, r6, #1
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
   d479e:	bf88      	it	hi
   d47a0:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        checkStr[0] = command[strlen(command)-2];
        checkStr[1] = command[strlen(command)-1];
        checkStr[2] = '\0';
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   d47a4:	b2f6      	uxtb	r6, r6
   d47a6:	e7e7      	b.n	d4778 <_Z14processCommandPKchb+0x8c>
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
        }
        if(checksum != strlen(command)-2){
   d47a8:	4540      	cmp	r0, r8
   d47aa:	f107 060c 	add.w	r6, r7, #12
   d47ae:	d046      	beq.n	d483e <_Z14processCommandPKchb+0x152>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   d47b0:	f005 fb04 	bl	d9dbc <_Z16_fetch_usbserialv>
   d47b4:	4605      	mov	r5, r0
   d47b6:	4620      	mov	r0, r4
   d47b8:	f006 fb2f 	bl	dae1a <strlen>
   d47bc:	1e83      	subs	r3, r0, #2
   d47be:	4628      	mov	r0, r5
   d47c0:	4d67      	ldr	r5, [pc, #412]	; (d4960 <_Z14processCommandPKchb+0x274>)
   d47c2:	f8cd 8000 	str.w	r8, [sp]
   d47c6:	4a67      	ldr	r2, [pc, #412]	; (d4964 <_Z14processCommandPKchb+0x278>)
   d47c8:	2101      	movs	r1, #1
   d47ca:	f004 f8c8 	bl	d895e <_ZN5Print11printf_implEbPKcz>
            if(!logFile.isOpen()){
   d47ce:	7c2b      	ldrb	r3, [r5, #16]
   d47d0:	b983      	cbnz	r3, d47f4 <_Z14processCommandPKchb+0x108>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d47d2:	f244 2202 	movw	r2, #16898	; 0x4202
   d47d6:	4964      	ldr	r1, [pc, #400]	; (d4968 <_Z14processCommandPKchb+0x27c>)
   d47d8:	f105 0010 	add.w	r0, r5, #16
   d47dc:	f7ff fea0 	bl	d4520 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   d47e0:	4622      	mov	r2, r4
   d47e2:	4962      	ldr	r1, [pc, #392]	; (d496c <_Z14processCommandPKchb+0x280>)
   d47e4:	4628      	mov	r0, r5
   d47e6:	f7ff ff7c 	bl	d46e2 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
                logFile.close();
   d47ea:	f105 0010 	add.w	r0, r5, #16
   d47ee:	f001 fbc1 	bl	d5f74 <_ZN7FatFile5closeEv>
   d47f2:	e004      	b.n	d47fe <_Z14processCommandPKchb+0x112>
            }
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   d47f4:	4622      	mov	r2, r4
   d47f6:	495d      	ldr	r1, [pc, #372]	; (d496c <_Z14processCommandPKchb+0x280>)
   d47f8:	4628      	mov	r0, r5
   d47fa:	f7ff ff72 	bl	d46e2 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
            Serial.println("Warning, checksum does not match");
   d47fe:	f005 fadd 	bl	d9dbc <_Z16_fetch_usbserialv>
   d4802:	495b      	ldr	r1, [pc, #364]	; (d4970 <_Z14processCommandPKchb+0x284>)
   d4804:	f004 f881 	bl	d890a <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   d4808:	7863      	ldrb	r3, [r4, #1]
   d480a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d480e:	2a09      	cmp	r2, #9
   d4810:	d901      	bls.n	d4816 <_Z14processCommandPKchb+0x12a>
   d4812:	2b43      	cmp	r3, #67	; 0x43
   d4814:	d10b      	bne.n	d482e <_Z14processCommandPKchb+0x142>
                char rxBotNum[2];
                rxBotNum[0] = command[0];
   d4816:	7822      	ldrb	r2, [r4, #0]
   d4818:	723a      	strb	r2, [r7, #8]
                rxBotNum[1] = command[1];
   d481a:	727b      	strb	r3, [r7, #9]
                sprintf(errBuf,"B%d%2snak%3s",BOTNUM,rxBotNum,cmdStr);
   d481c:	2201      	movs	r2, #1
   d481e:	9600      	str	r6, [sp, #0]
   d4820:	f107 0308 	add.w	r3, r7, #8
   d4824:	4953      	ldr	r1, [pc, #332]	; (d4974 <_Z14processCommandPKchb+0x288>)
   d4826:	4854      	ldr	r0, [pc, #336]	; (d4978 <_Z14processCommandPKchb+0x28c>)
   d4828:	f002 fd26 	bl	d7278 <sprintf>
   d482c:	e005      	b.n	d483a <_Z14processCommandPKchb+0x14e>
            }
            else{
                sprintf(errBuf,"B%dABnak%3s",BOTNUM,cmdStr);
   d482e:	4633      	mov	r3, r6
   d4830:	2201      	movs	r2, #1
   d4832:	4952      	ldr	r1, [pc, #328]	; (d497c <_Z14processCommandPKchb+0x290>)
   d4834:	4850      	ldr	r0, [pc, #320]	; (d4978 <_Z14processCommandPKchb+0x28c>)
   d4836:	f002 fd1f 	bl	d7278 <sprintf>
            }
            errModeReply = mode;
   d483a:	4b51      	ldr	r3, [pc, #324]	; (d4980 <_Z14processCommandPKchb+0x294>)
   d483c:	e03e      	b.n	d48bc <_Z14processCommandPKchb+0x1d0>
            return;
        }
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   d483e:	4951      	ldr	r1, [pc, #324]	; (d4984 <_Z14processCommandPKchb+0x298>)
   d4840:	4630      	mov	r0, r6
   d4842:	f006 fad8 	bl	dadf6 <strcmp>
   d4846:	2800      	cmp	r0, #0
   d4848:	d07e      	beq.n	d4948 <_Z14processCommandPKchb+0x25c>
            else if(mode == 1){ //Acknowledge from BLE
                
            }
            return;
        }
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   d484a:	494f      	ldr	r1, [pc, #316]	; (d4988 <_Z14processCommandPKchb+0x29c>)
   d484c:	4630      	mov	r0, r6
   d484e:	f006 fad2 	bl	dadf6 <strcmp>
   d4852:	bb68      	cbnz	r0, d48b0 <_Z14processCommandPKchb+0x1c4>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   d4854:	782b      	ldrb	r3, [r5, #0]
   d4856:	713b      	strb	r3, [r7, #4]
   d4858:	786b      	ldrb	r3, [r5, #1]
   d485a:	717b      	strb	r3, [r7, #5]
   d485c:	78ab      	ldrb	r3, [r5, #2]
   d485e:	71bb      	strb	r3, [r7, #6]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   d4860:	78eb      	ldrb	r3, [r5, #3]
   d4862:	723b      	strb	r3, [r7, #8]
   d4864:	792b      	ldrb	r3, [r5, #4]
   d4866:	727b      	strb	r3, [r7, #9]
            setLSpeed = atoi(lSpd);
   d4868:	1d38      	adds	r0, r7, #4
            }
            return;
        }
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   d486a:	796b      	ldrb	r3, [r5, #5]
   d486c:	72bb      	strb	r3, [r7, #10]
            setLSpeed = atoi(lSpd);
   d486e:	f006 f92b 	bl	daac8 <atoi>
   d4872:	4d46      	ldr	r5, [pc, #280]	; (d498c <_Z14processCommandPKchb+0x2a0>)
            setRSpeed = atoi(rSpd);
   d4874:	4c46      	ldr	r4, [pc, #280]	; (d4990 <_Z14processCommandPKchb+0x2a4>)
            return;
        }
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
            setLSpeed = atoi(lSpd);
   d4876:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);
   d4878:	f107 0008 	add.w	r0, r7, #8
   d487c:	f006 f924 	bl	daac8 <atoi>
   d4880:	7020      	strb	r0, [r4, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   d4882:	f005 fa9b 	bl	d9dbc <_Z16_fetch_usbserialv>
   d4886:	7822      	ldrb	r2, [r4, #0]
   d4888:	782b      	ldrb	r3, [r5, #0]
   d488a:	9200      	str	r2, [sp, #0]
   d488c:	2101      	movs	r1, #1
   d488e:	4a41      	ldr	r2, [pc, #260]	; (d4994 <_Z14processCommandPKchb+0x2a8>)
   d4890:	f004 f865 	bl	d895e <_ZN5Print11printf_implEbPKcz>
            ESCL.write(setLSpeed);
   d4894:	7829      	ldrb	r1, [r5, #0]
   d4896:	4840      	ldr	r0, [pc, #256]	; (d4998 <_Z14processCommandPKchb+0x2ac>)
   d4898:	f002 fe99 	bl	d75ce <_ZN5Servo5writeEi>
            ESCR.write(setRSpeed);
   d489c:	7821      	ldrb	r1, [r4, #0]
   d489e:	483f      	ldr	r0, [pc, #252]	; (d499c <_Z14processCommandPKchb+0x2b0>)
   d48a0:	f002 fe95 	bl	d75ce <_ZN5Servo5writeEi>
            updateMotorControl = true;
   d48a4:	4a3e      	ldr	r2, [pc, #248]	; (d49a0 <_Z14processCommandPKchb+0x2b4>)
   d48a6:	2301      	movs	r3, #1
   d48a8:	7013      	strb	r3, [r2, #0]
            manualRC = true;
   d48aa:	4a3e      	ldr	r2, [pc, #248]	; (d49a4 <_Z14processCommandPKchb+0x2b8>)
   d48ac:	7013      	strb	r3, [r2, #0]
   d48ae:	e04b      	b.n	d4948 <_Z14processCommandPKchb+0x25c>
        }
        else if(!strcmp(cmdStr,"req")){  //Data Request
   d48b0:	493d      	ldr	r1, [pc, #244]	; (d49a8 <_Z14processCommandPKchb+0x2bc>)
   d48b2:	4630      	mov	r0, r6
   d48b4:	f006 fa9f 	bl	dadf6 <strcmp>
   d48b8:	b918      	cbnz	r0, d48c2 <_Z14processCommandPKchb+0x1d6>
            requestActive = mode;
   d48ba:	4b3c      	ldr	r3, [pc, #240]	; (d49ac <_Z14processCommandPKchb+0x2c0>)
   d48bc:	f883 a000 	strb.w	sl, [r3]
   d48c0:	e042      	b.n	d4948 <_Z14processCommandPKchb+0x25c>
        }
        else if(!strcmp(cmdStr,"pts")){
   d48c2:	493b      	ldr	r1, [pc, #236]	; (d49b0 <_Z14processCommandPKchb+0x2c4>)
   d48c4:	4630      	mov	r0, r6
   d48c6:	f006 fa96 	bl	dadf6 <strcmp>
   d48ca:	b9f0      	cbnz	r0, d490a <_Z14processCommandPKchb+0x21e>
   d48cc:	4c24      	ldr	r4, [pc, #144]	; (d4960 <_Z14processCommandPKchb+0x274>)
            Serial.println(dataStr);
   d48ce:	f005 fa75 	bl	d9dbc <_Z16_fetch_usbserialv>
   d48d2:	4629      	mov	r1, r5
   d48d4:	f004 f819 	bl	d890a <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   d48d8:	7c23      	ldrb	r3, [r4, #16]
   d48da:	b983      	cbnz	r3, d48fe <_Z14processCommandPKchb+0x212>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d48dc:	f244 2202 	movw	r2, #16898	; 0x4202
   d48e0:	4921      	ldr	r1, [pc, #132]	; (d4968 <_Z14processCommandPKchb+0x27c>)
   d48e2:	f104 0010 	add.w	r0, r4, #16
   d48e6:	f7ff fe1b 	bl	d4520 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   d48ea:	462a      	mov	r2, r5
   d48ec:	4931      	ldr	r1, [pc, #196]	; (d49b4 <_Z14processCommandPKchb+0x2c8>)
   d48ee:	4620      	mov	r0, r4
   d48f0:	f7ff fef7 	bl	d46e2 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
                logFile.close();
   d48f4:	f104 0010 	add.w	r0, r4, #16
   d48f8:	f001 fb3c 	bl	d5f74 <_ZN7FatFile5closeEv>
   d48fc:	e024      	b.n	d4948 <_Z14processCommandPKchb+0x25c>
            }
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   d48fe:	462a      	mov	r2, r5
   d4900:	492c      	ldr	r1, [pc, #176]	; (d49b4 <_Z14processCommandPKchb+0x2c8>)
   d4902:	4620      	mov	r0, r4
   d4904:	f7ff feed 	bl	d46e2 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
   d4908:	e01e      	b.n	d4948 <_Z14processCommandPKchb+0x25c>
        }
        else if(!strcmp(cmdStr,"hwa")){  //Incoming hello-world acknowledge
   d490a:	492b      	ldr	r1, [pc, #172]	; (d49b8 <_Z14processCommandPKchb+0x2cc>)
   d490c:	4630      	mov	r0, r6
   d490e:	f006 fa72 	bl	dadf6 <strcmp>
   d4912:	b910      	cbnz	r0, d491a <_Z14processCommandPKchb+0x22e>
            waitForConnection = false;
   d4914:	4b29      	ldr	r3, [pc, #164]	; (d49bc <_Z14processCommandPKchb+0x2d0>)
   d4916:	7018      	strb	r0, [r3, #0]
   d4918:	e016      	b.n	d4948 <_Z14processCommandPKchb+0x25c>
        }
        else if(!strcmp(cmdStr,"aut")){  //Enter autonomous mode
   d491a:	4929      	ldr	r1, [pc, #164]	; (d49c0 <_Z14processCommandPKchb+0x2d4>)
   d491c:	4630      	mov	r0, r6
   d491e:	f006 fa6a 	bl	dadf6 <strcmp>
   d4922:	b188      	cbz	r0, d4948 <_Z14processCommandPKchb+0x25c>
            
        }
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   d4924:	4927      	ldr	r1, [pc, #156]	; (d49c4 <_Z14processCommandPKchb+0x2d8>)
   d4926:	4630      	mov	r0, r6
   d4928:	f006 fa65 	bl	dadf6 <strcmp>
   d492c:	b960      	cbnz	r0, d4948 <_Z14processCommandPKchb+0x25c>
            offloadMode = true;
   d492e:	4b26      	ldr	r3, [pc, #152]	; (d49c8 <_Z14processCommandPKchb+0x2dc>)
   d4930:	2201      	movs	r2, #1
   d4932:	701a      	strb	r2, [r3, #0]
    return d_.color;
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   d4934:	4b25      	ldr	r3, [pc, #148]	; (d49cc <_Z14processCommandPKchb+0x2e0>)
   d4936:	7c5a      	ldrb	r2, [r3, #17]
   d4938:	2a0f      	cmp	r2, #15
   d493a:	d107      	bne.n	d494c <_Z14processCommandPKchb+0x260>
inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}

inline void particle::LEDStatus::setColor(uint32_t color) {
    d_.color = color;
   d493c:	22ff      	movs	r2, #255	; 0xff
            status.setPattern(LED_PATTERN_BLINK);
            status.setColor(RGB_COLOR_BLUE);
            status.setSpeed(LED_SPEED_FAST);
   d493e:	211e      	movs	r1, #30
   d4940:	4822      	ldr	r0, [pc, #136]	; (d49cc <_Z14processCommandPKchb+0x2e0>)
   d4942:	615a      	str	r2, [r3, #20]
   d4944:	f7ff fd6d 	bl	d4422 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
            }
            else{
                sprintf(errBuf,"B%dABnak%3s",BOTNUM,cmdStr);
            }
            errModeReply = mode;
            return;
   d4948:	46cd      	mov	sp, r9
   d494a:	e002      	b.n	d4952 <_Z14processCommandPKchb+0x266>
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
        d_.pattern = pattern;
   d494c:	2202      	movs	r2, #2
   d494e:	745a      	strb	r2, [r3, #17]
   d4950:	e7f4      	b.n	d493c <_Z14processCommandPKchb+0x250>
            status.setPattern(LED_PATTERN_BLINK);
            status.setColor(RGB_COLOR_BLUE);
            status.setSpeed(LED_SPEED_FAST);
        }
    }
}
   d4952:	3710      	adds	r7, #16
   d4954:	46bd      	mov	sp, r7
   d4956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d495a:	bf00      	nop
   d495c:	000db8eb 	.word	0x000db8eb
   d4960:	2003e2d8 	.word	0x2003e2d8
   d4964:	000db900 	.word	0x000db900
   d4968:	2003d940 	.word	0x2003d940
   d496c:	000db91d 	.word	0x000db91d
   d4970:	000db949 	.word	0x000db949
   d4974:	000db96a 	.word	0x000db96a
   d4978:	2003e1de 	.word	0x2003e1de
   d497c:	000db977 	.word	0x000db977
   d4980:	2003daec 	.word	0x2003daec
   d4984:	000db983 	.word	0x000db983
   d4988:	000db987 	.word	0x000db987
   d498c:	2003e2b5 	.word	0x2003e2b5
   d4990:	2003e204 	.word	0x2003e204
   d4994:	000db98b 	.word	0x000db98b
   d4998:	2003d92c 	.word	0x2003d92c
   d499c:	2003d994 	.word	0x2003d994
   d49a0:	2003d41c 	.word	0x2003d41c
   d49a4:	2003e1dc 	.word	0x2003e1dc
   d49a8:	000db9b7 	.word	0x000db9b7
   d49ac:	2003dae0 	.word	0x2003dae0
   d49b0:	000db9bb 	.word	0x000db9bb
   d49b4:	000db9bf 	.word	0x000db9bf
   d49b8:	000db9e2 	.word	0x000db9e2
   d49bc:	2003d904 	.word	0x2003d904
   d49c0:	000db9e6 	.word	0x000db9e6
   d49c4:	000db9ea 	.word	0x000db9ea
   d49c8:	2003d9a4 	.word	0x2003d9a4
   d49cc:	2003da64 	.word	0x2003da64

000d49d0 <_Z13cmdLTEHandlerPKcS0_>:

void cmdLTEHandler(const char *event, const char *data){
   d49d0:	b510      	push	{r4, lr}
   d49d2:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   d49d4:	2200      	movs	r2, #0
   d49d6:	2104      	movs	r1, #4
   d49d8:	4620      	mov	r0, r4
   d49da:	f7ff fe87 	bl	d46ec <_Z14processCommandPKchb>
    if(logMessages){
   d49de:	4b0b      	ldr	r3, [pc, #44]	; (d4a0c <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   d49e0:	781b      	ldrb	r3, [r3, #0]
   d49e2:	b193      	cbz	r3, d4a0a <_Z13cmdLTEHandlerPKcS0_+0x3a>
   d49e4:	480a      	ldr	r0, [pc, #40]	; (d4a10 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d49e6:	7c03      	ldrb	r3, [r0, #16]
   d49e8:	b92b      	cbnz	r3, d49f6 <_Z13cmdLTEHandlerPKcS0_+0x26>
   d49ea:	f244 2202 	movw	r2, #16898	; 0x4202
   d49ee:	4909      	ldr	r1, [pc, #36]	; (d4a14 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   d49f0:	3010      	adds	r0, #16
   d49f2:	f7ff fd95 	bl	d4520 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   d49f6:	4622      	mov	r2, r4
   d49f8:	4907      	ldr	r1, [pc, #28]	; (d4a18 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   d49fa:	4805      	ldr	r0, [pc, #20]	; (d4a10 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   d49fc:	f7ff fe71 	bl	d46e2 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        logFile.close();
   d4a00:	4806      	ldr	r0, [pc, #24]	; (d4a1c <_Z13cmdLTEHandlerPKcS0_+0x4c>)
    }
}
   d4a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void cmdLTEHandler(const char *event, const char *data){
    processCommand(data, 4,false);
    if(logMessages){
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
   d4a06:	f001 bab5 	b.w	d5f74 <_ZN7FatFile5closeEv>
   d4a0a:	bd10      	pop	{r4, pc}
   d4a0c:	2003e1dd 	.word	0x2003e1dd
   d4a10:	2003e2d8 	.word	0x2003e2d8
   d4a14:	2003d940 	.word	0x2003d940
   d4a18:	000db9ee 	.word	0x000db9ee
   d4a1c:	2003e2e8 	.word	0x2003e2e8

000d4a20 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
        char lteBuf[7] = {'B',BOTNUM+48,'A','B','c','c','s'};
        Particle.publish("WNS", lteBuf, PRIVATE);
    }
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4a20:	b598      	push	{r3, r4, r7, lr}
    char btBuf[len+1];
   d4a22:	f101 0308 	add.w	r3, r1, #8
   d4a26:	f023 0307 	bic.w	r3, r3, #7
        char lteBuf[7] = {'B',BOTNUM+48,'A','B','c','c','s'};
        Particle.publish("WNS", lteBuf, PRIVATE);
    }
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4a2a:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   d4a2c:	ebad 0d03 	sub.w	sp, sp, r3
   d4a30:	466c      	mov	r4, sp
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   d4a32:	2300      	movs	r3, #0
   d4a34:	428b      	cmp	r3, r1
   d4a36:	d003      	beq.n	d4a40 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>
   d4a38:	5cc2      	ldrb	r2, [r0, r3]
   d4a3a:	54e2      	strb	r2, [r4, r3]
   d4a3c:	3301      	adds	r3, #1
   d4a3e:	e7f9      	b.n	d4a34 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   d4a40:	1e5a      	subs	r2, r3, #1
   d4a42:	5ca1      	ldrb	r1, [r4, r2]
   d4a44:	b111      	cbz	r1, d4a4c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   d4a46:	2200      	movs	r2, #0
   d4a48:	54e2      	strb	r2, [r4, r3]
   d4a4a:	e000      	b.n	d4a4e <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
    else btBuf[len-1] = '\0';
   d4a4c:	54a1      	strb	r1, [r4, r2]
    Serial.println("New BT Command:");
   d4a4e:	f005 f9b5 	bl	d9dbc <_Z16_fetch_usbserialv>
   d4a52:	4916      	ldr	r1, [pc, #88]	; (d4aac <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   d4a54:	f003 ff59 	bl	d890a <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   d4a58:	f005 f9b0 	bl	d9dbc <_Z16_fetch_usbserialv>
   d4a5c:	4621      	mov	r1, r4
   d4a5e:	f003 ff54 	bl	d890a <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   d4a62:	2201      	movs	r2, #1
   d4a64:	4611      	mov	r1, r2
   d4a66:	4620      	mov	r0, r4
   d4a68:	f7ff fe40 	bl	d46ec <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   d4a6c:	7823      	ldrb	r3, [r4, #0]
   d4a6e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   d4a72:	2b41      	cmp	r3, #65	; 0x41
   d4a74:	d103      	bne.n	d4a7e <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4a76:	f002 f931 	bl	d6cdc <HAL_Timer_Get_Milli_Seconds>
   d4a7a:	4b0d      	ldr	r3, [pc, #52]	; (d4ab0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   d4a7c:	6018      	str	r0, [r3, #0]
    if(logMessages){
   d4a7e:	4b0d      	ldr	r3, [pc, #52]	; (d4ab4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   d4a80:	781b      	ldrb	r3, [r3, #0]
   d4a82:	b183      	cbz	r3, d4aa6 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   d4a84:	480c      	ldr	r0, [pc, #48]	; (d4ab8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4a86:	7c03      	ldrb	r3, [r0, #16]
   d4a88:	b92b      	cbnz	r3, d4a96 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   d4a8a:	f244 2202 	movw	r2, #16898	; 0x4202
   d4a8e:	490b      	ldr	r1, [pc, #44]	; (d4abc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   d4a90:	3010      	adds	r0, #16
   d4a92:	f7ff fd45 	bl	d4520 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   d4a96:	4622      	mov	r2, r4
   d4a98:	4909      	ldr	r1, [pc, #36]	; (d4ac0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   d4a9a:	4807      	ldr	r0, [pc, #28]	; (d4ab8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   d4a9c:	f7ff fe21 	bl	d46e2 <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        logFile.close();
   d4aa0:	4808      	ldr	r0, [pc, #32]	; (d4ac4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   d4aa2:	f001 fa67 	bl	d5f74 <_ZN7FatFile5closeEv>
    }
}
   d4aa6:	46bd      	mov	sp, r7
   d4aa8:	bd98      	pop	{r3, r4, r7, pc}
   d4aaa:	bf00      	nop
   d4aac:	000dba0e 	.word	0x000dba0e
   d4ab0:	2003d93c 	.word	0x2003d93c
   d4ab4:	2003e1dd 	.word	0x2003e1dd
   d4ab8:	2003e2d8 	.word	0x2003e2d8
   d4abc:	2003d940 	.word	0x2003d940
   d4ac0:	000dba1e 	.word	0x000dba1e
   d4ac4:	2003e2e8 	.word	0x2003e2e8

000d4ac8 <_ZN5Print8printlnfIIiEEEjPKcDpT_>:
   d4ac8:	4613      	mov	r3, r2
   d4aca:	460a      	mov	r2, r1
   d4acc:	2101      	movs	r1, #1
   d4ace:	f003 bf46 	b.w	d895e <_ZN5Print11printf_implEbPKcz>
	...

000d4ad4 <_Z11wdogHandlerv>:

void wdogHandler(){
   d4ad4:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4ad6:	f002 fb97 	bl	d7208 <spark_cloud_flag_connected>
   d4ada:	4c29      	ldr	r4, [pc, #164]	; (d4b80 <_Z11wdogHandlerv+0xac>)
    if(Particle.connected()) LTEAvail = true;
   d4adc:	b108      	cbz	r0, d4ae2 <_Z11wdogHandlerv+0xe>
   d4ade:	2301      	movs	r3, #1
   d4ae0:	e010      	b.n	d4b04 <_Z11wdogHandlerv+0x30>
    else if(LTEAvail){
   d4ae2:	7823      	ldrb	r3, [r4, #0]
   d4ae4:	b17b      	cbz	r3, d4b06 <_Z11wdogHandlerv+0x32>
   d4ae6:	4827      	ldr	r0, [pc, #156]	; (d4b84 <_Z11wdogHandlerv+0xb0>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4ae8:	7c03      	ldrb	r3, [r0, #16]
   d4aea:	b92b      	cbnz	r3, d4af8 <_Z11wdogHandlerv+0x24>
   d4aec:	f244 2202 	movw	r2, #16898	; 0x4202
   d4af0:	4925      	ldr	r1, [pc, #148]	; (d4b88 <_Z11wdogHandlerv+0xb4>)
   d4af2:	3010      	adds	r0, #16
   d4af4:	f7ff fd14 	bl	d4520 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   d4af8:	221e      	movs	r2, #30
   d4afa:	4924      	ldr	r1, [pc, #144]	; (d4b8c <_Z11wdogHandlerv+0xb8>)
   d4afc:	4821      	ldr	r0, [pc, #132]	; (d4b84 <_Z11wdogHandlerv+0xb0>)
   d4afe:	f7ff ffe3 	bl	d4ac8 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        LTEAvail = false;
   d4b02:	2300      	movs	r3, #0
   d4b04:	7023      	strb	r3, [r4, #0]
   d4b06:	f002 f8e9 	bl	d6cdc <HAL_Timer_Get_Milli_Seconds>
    }
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL){
   d4b0a:	4b21      	ldr	r3, [pc, #132]	; (d4b90 <_Z11wdogHandlerv+0xbc>)
   d4b0c:	4c21      	ldr	r4, [pc, #132]	; (d4b94 <_Z11wdogHandlerv+0xc0>)
   d4b0e:	681b      	ldr	r3, [r3, #0]
   d4b10:	1ac0      	subs	r0, r0, r3
   d4b12:	f247 5330 	movw	r3, #30000	; 0x7530
   d4b16:	4298      	cmp	r0, r3
   d4b18:	d911      	bls.n	d4b3e <_Z11wdogHandlerv+0x6a>
        if(XBeeAvail){
   d4b1a:	7823      	ldrb	r3, [r4, #0]
   d4b1c:	b16b      	cbz	r3, d4b3a <_Z11wdogHandlerv+0x66>
   d4b1e:	4819      	ldr	r0, [pc, #100]	; (d4b84 <_Z11wdogHandlerv+0xb0>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4b20:	7c03      	ldrb	r3, [r0, #16]
   d4b22:	b92b      	cbnz	r3, d4b30 <_Z11wdogHandlerv+0x5c>
   d4b24:	f244 2202 	movw	r2, #16898	; 0x4202
   d4b28:	4917      	ldr	r1, [pc, #92]	; (d4b88 <_Z11wdogHandlerv+0xb4>)
   d4b2a:	3010      	adds	r0, #16
   d4b2c:	f7ff fcf8 	bl	d4520 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   d4b30:	221e      	movs	r2, #30
   d4b32:	4916      	ldr	r1, [pc, #88]	; (d4b8c <_Z11wdogHandlerv+0xb8>)
   d4b34:	4813      	ldr	r0, [pc, #76]	; (d4b84 <_Z11wdogHandlerv+0xb0>)
   d4b36:	f7ff ffc7 	bl	d4ac8 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        }
        XBeeAvail = false;
   d4b3a:	2300      	movs	r3, #0
   d4b3c:	e000      	b.n	d4b40 <_Z11wdogHandlerv+0x6c>
    }
    else XBeeAvail = true;
   d4b3e:	2301      	movs	r3, #1
   d4b40:	7023      	strb	r3, [r4, #0]
   d4b42:	f002 f8cb 	bl	d6cdc <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL){
   d4b46:	4b14      	ldr	r3, [pc, #80]	; (d4b98 <_Z11wdogHandlerv+0xc4>)
   d4b48:	4c14      	ldr	r4, [pc, #80]	; (d4b9c <_Z11wdogHandlerv+0xc8>)
   d4b4a:	681b      	ldr	r3, [r3, #0]
   d4b4c:	1ac0      	subs	r0, r0, r3
   d4b4e:	f247 5330 	movw	r3, #30000	; 0x7530
   d4b52:	4298      	cmp	r0, r3
   d4b54:	d911      	bls.n	d4b7a <_Z11wdogHandlerv+0xa6>
        if(BLEAvail){
   d4b56:	7823      	ldrb	r3, [r4, #0]
   d4b58:	b16b      	cbz	r3, d4b76 <_Z11wdogHandlerv+0xa2>
   d4b5a:	480a      	ldr	r0, [pc, #40]	; (d4b84 <_Z11wdogHandlerv+0xb0>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4b5c:	7c03      	ldrb	r3, [r0, #16]
   d4b5e:	b92b      	cbnz	r3, d4b6c <_Z11wdogHandlerv+0x98>
   d4b60:	f244 2202 	movw	r2, #16898	; 0x4202
   d4b64:	4908      	ldr	r1, [pc, #32]	; (d4b88 <_Z11wdogHandlerv+0xb4>)
   d4b66:	3010      	adds	r0, #16
   d4b68:	f7ff fcda 	bl	d4520 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   d4b6c:	221e      	movs	r2, #30
   d4b6e:	490c      	ldr	r1, [pc, #48]	; (d4ba0 <_Z11wdogHandlerv+0xcc>)
   d4b70:	4804      	ldr	r0, [pc, #16]	; (d4b84 <_Z11wdogHandlerv+0xb0>)
   d4b72:	f7ff ffa9 	bl	d4ac8 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        }
        BLEAvail = false;
   d4b76:	2300      	movs	r3, #0
   d4b78:	e000      	b.n	d4b7c <_Z11wdogHandlerv+0xa8>
    }
    else BLEAvail = true;
   d4b7a:	2301      	movs	r3, #1
   d4b7c:	7023      	strb	r3, [r4, #0]
   d4b7e:	bd10      	pop	{r4, pc}
   d4b80:	2003d9ad 	.word	0x2003d9ad
   d4b84:	2003e2d8 	.word	0x2003e2d8
   d4b88:	2003d940 	.word	0x2003d940
   d4b8c:	000dba71 	.word	0x000dba71
   d4b90:	2003e2b0 	.word	0x2003e2b0
   d4b94:	2003dae2 	.word	0x2003dae2
   d4b98:	2003d93c 	.word	0x2003d93c
   d4b9c:	2003dae1 	.word	0x2003dae1
   d4ba0:	000dbac2 	.word	0x000dbac2

000d4ba4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4ba4:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4ba6:	4d09      	ldr	r5, [pc, #36]	; (d4bcc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4ba8:	6829      	ldr	r1, [r5, #0]
   d4baa:	f011 0401 	ands.w	r4, r1, #1
   d4bae:	d10a      	bne.n	d4bc6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4bb0:	4628      	mov	r0, r5
   d4bb2:	f7ff fa81 	bl	d40b8 <__cxa_guard_acquire>
   d4bb6:	b130      	cbz	r0, d4bc6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4bb8:	4621      	mov	r1, r4
   d4bba:	4805      	ldr	r0, [pc, #20]	; (d4bd0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4bbc:	f002 fbf0 	bl	d73a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4bc0:	4628      	mov	r0, r5
   d4bc2:	f7ff fa7e 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d4bc6:	4802      	ldr	r0, [pc, #8]	; (d4bd0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4bc8:	bd38      	pop	{r3, r4, r5, pc}
   d4bca:	bf00      	nop
   d4bcc:	2003d410 	.word	0x2003d410
   d4bd0:	2003d414 	.word	0x2003d414

000d4bd4 <_Z8setupSPIv>:
void setupLTE(){
    Particle.subscribe("CCHub", cmdLTEHandler); //Subscribe to LTE data from Central Control Hub
    LTEAvail = false;
}

void setupSPI(){
   d4bd4:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(SPI_Mode mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   d4bd6:	f7ff ffe5 	bl	d4ba4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4bde:	2100      	movs	r1, #0
   d4be0:	f002 fbf9 	bl	d73d6 <_ZN8SPIClass5beginE8SPI_Modet>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   d4be4:	f7ff ffde 	bl	d4ba4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4be8:	2201      	movs	r2, #1
   d4bea:	4902      	ldr	r1, [pc, #8]	; (d4bf4 <_Z8setupSPIv+0x20>)
    SPI.begin(SPI_MODE_MASTER);
    SPI.setClockSpeed(1000000);
}
   d4bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4bf0:	f002 bc8e 	b.w	d7510 <_ZN8SPIClass13setClockSpeedEjj>
   d4bf4:	000f4240 	.word	0x000f4240

000d4bf8 <setup>:
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
    }
}

void setup(){
   d4bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
inline uint16_t particle::LEDStatus::period() const {
    return (d_.pattern != LED_PATTERN_CUSTOM ? d_.period : 0);
}

inline void particle::LEDStatus::setPriority(LEDPriority priority) {
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   d4bfc:	48a8      	ldr	r0, [pc, #672]	; (d4ea0 <setup+0x2a8>)
    status.setPriority(LED_PRIORITY_IMPORTANT);
    status.setActive(true);

    uint32_t mtrArmTime = millis();
    setLSpeed = 90;
   d4bfe:	4ea9      	ldr	r6, [pc, #676]	; (d4ea4 <setup+0x2ac>)
   d4c00:	7c03      	ldrb	r3, [r0, #16]
    setRSpeed = 90;
   d4c02:	4da9      	ldr	r5, [pc, #676]	; (d4ea8 <setup+0x2b0>)
   d4c04:	f003 0303 	and.w	r3, r3, #3
   d4c08:	f043 0378 	orr.w	r3, r3, #120	; 0x78
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
    }
}

void setup(){
   d4c0c:	b092      	sub	sp, #72	; 0x48
   d4c0e:	7403      	strb	r3, [r0, #16]
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d4c10:	2200      	movs	r2, #0
   d4c12:	2101      	movs	r1, #1
   d4c14:	3004      	adds	r0, #4
    status.setActive(true);

    uint32_t mtrArmTime = millis();
    setLSpeed = 90;
    setRSpeed = 90;
    ESCL.attach(ESC_PWM_L,1000,2000); //Initialize motor control
   d4c16:	2400      	movs	r4, #0
   d4c18:	f002 fa58 	bl	d70cc <led_set_status_active>
   d4c1c:	27b4      	movs	r7, #180	; 0xb4
   d4c1e:	f002 f85d 	bl	d6cdc <HAL_Timer_Get_Milli_Seconds>
void setup(){
    status.setPriority(LED_PRIORITY_IMPORTANT);
    status.setActive(true);

    uint32_t mtrArmTime = millis();
    setLSpeed = 90;
   d4c22:	235a      	movs	r3, #90	; 0x5a
   d4c24:	7033      	strb	r3, [r6, #0]
    setRSpeed = 90;
   d4c26:	702b      	strb	r3, [r5, #0]
    ESCL.attach(ESC_PWM_L,1000,2000); //Initialize motor control
   d4c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4c2c:	e88d 0090 	stmia.w	sp, {r4, r7}
   d4c30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d4c34:	2106      	movs	r1, #6
   d4c36:	489d      	ldr	r0, [pc, #628]	; (d4eac <setup+0x2b4>)
   d4c38:	f002 fd08 	bl	d764c <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);
   d4c3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d4c40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4c44:	e88d 0090 	stmia.w	sp, {r4, r7}
   d4c48:	2105      	movs	r1, #5
   d4c4a:	4899      	ldr	r0, [pc, #612]	; (d4eb0 <setup+0x2b8>)
   d4c4c:	f002 fcfe 	bl	d764c <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);                   //Set ESC position to 90 for at least 2 seconds to "arm" the motors
   d4c50:	7831      	ldrb	r1, [r6, #0]
   d4c52:	4896      	ldr	r0, [pc, #600]	; (d4eac <setup+0x2b4>)
    senseTimer = millis();
    dataTimer = millis();
    XBeeRxTime = 0;
    BLERxTime = 0;
    dataWait = false;
    logSensors = true;
   d4c54:	4e97      	ldr	r6, [pc, #604]	; (d4eb4 <setup+0x2bc>)
    uint32_t mtrArmTime = millis();
    setLSpeed = 90;
    setRSpeed = 90;
    ESCL.attach(ESC_PWM_L,1000,2000); //Initialize motor control
    ESCR.attach(ESC_PWM_R,1000,2000);
    ESCL.write(setLSpeed);                   //Set ESC position to 90 for at least 2 seconds to "arm" the motors
   d4c56:	f002 fcba 	bl	d75ce <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);
   d4c5a:	7829      	ldrb	r1, [r5, #0]
   d4c5c:	4894      	ldr	r0, [pc, #592]	; (d4eb0 <setup+0x2b8>)
    dataTimer = millis();
    XBeeRxTime = 0;
    BLERxTime = 0;
    dataWait = false;
    logSensors = true;
    logMessages = true;
   d4c5e:	4d96      	ldr	r5, [pc, #600]	; (d4eb8 <setup+0x2c0>)
    setLSpeed = 90;
    setRSpeed = 90;
    ESCL.attach(ESC_PWM_L,1000,2000); //Initialize motor control
    ESCR.attach(ESC_PWM_R,1000,2000);
    ESCL.write(setLSpeed);                   //Set ESC position to 90 for at least 2 seconds to "arm" the motors
    ESCR.write(setRSpeed);
   d4c60:	f002 fcb5 	bl	d75ce <_ZN5Servo5writeEi>
    delay(2000);
   d4c64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4c68:	f004 ff30 	bl	d9acc <delay>
    //ESCL.write(100);
    //delay(5000);
    //ESCL.write(90);

    BLE.on();
   d4c6c:	f003 f87e 	bl	d7d6c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4c70:	f003 f8c2 	bl	d7df8 <_ZNK8particle14BleLocalDevice2onEv>
    
    //Log.info("Hello from WaterNet23!");
    Serial.begin();
   d4c74:	f005 f8a2 	bl	d9dbc <_Z16_fetch_usbserialv>
   d4c78:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4c7c:	f005 f88e 	bl	d9d9c <_ZN9USBSerial5beginEl>
    Serial1.begin(9600, SERIAL_PARITY_EVEN);                        //Start serial for XBee module
   d4c80:	f005 f974 	bl	d9f6c <_Z22__fetch_global_Serial1v>
   d4c84:	2204      	movs	r2, #4
   d4c86:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4c8a:	f005 f961 	bl	d9f50 <_ZN11USARTSerial5beginEmm>
    setupSPI();                                 //Setup SPI for BeagleBone
   d4c8e:	f7ff ffa1 	bl	d4bd4 <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   d4c92:	f7ff fca3 	bl	d45dc <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   d4c96:	f7ff fcc3 	bl	d4620 <_Z8setupGPSv>
    setupLTE();                                 //Initialize LTE Flags
   d4c9a:	f7ff fc8b 	bl	d45b4 <_Z8setupLTEv>

    manualRC = true;
   d4c9e:	4b87      	ldr	r3, [pc, #540]	; (d4ebc <setup+0x2c4>)
   d4ca0:	2701      	movs	r7, #1
   d4ca2:	701f      	strb	r7, [r3, #0]
   d4ca4:	f002 f81a 	bl	d6cdc <HAL_Timer_Get_Milli_Seconds>

    senseTimer = millis();
   d4ca8:	4b85      	ldr	r3, [pc, #532]	; (d4ec0 <setup+0x2c8>)
   d4caa:	6018      	str	r0, [r3, #0]
   d4cac:	f002 f816 	bl	d6cdc <HAL_Timer_Get_Milli_Seconds>
    dataTimer = millis();
   d4cb0:	4b84      	ldr	r3, [pc, #528]	; (d4ec4 <setup+0x2cc>)
    LTEStatusCount = LTE_MAX_STATUS;

    battPercent = 50;

    char deviceName[10];
    strcpy(deviceName,"WTN23_Bot");
   d4cb2:	4985      	ldr	r1, [pc, #532]	; (d4ec8 <setup+0x2d0>)
    setupLTE();                                 //Initialize LTE Flags

    manualRC = true;

    senseTimer = millis();
    dataTimer = millis();
   d4cb4:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   d4cb6:	4b85      	ldr	r3, [pc, #532]	; (d4ecc <setup+0x2d4>)
    BLERxTime = 0;
    dataWait = false;
    logSensors = true;
   d4cb8:	7037      	strb	r7, [r6, #0]

    manualRC = true;

    senseTimer = millis();
    dataTimer = millis();
    XBeeRxTime = 0;
   d4cba:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   d4cbc:	4b84      	ldr	r3, [pc, #528]	; (d4ed0 <setup+0x2d8>)
    dataWait = false;
    logSensors = true;
    logMessages = true;
   d4cbe:	702f      	strb	r7, [r5, #0]
    manualRC = true;

    senseTimer = millis();
    dataTimer = millis();
    XBeeRxTime = 0;
    BLERxTime = 0;
   d4cc0:	601c      	str	r4, [r3, #0]
    dataWait = false;
   d4cc2:	4b84      	ldr	r3, [pc, #528]	; (d4ed4 <setup+0x2dc>)
   d4cc4:	701c      	strb	r4, [r3, #0]
    logSensors = true;
    logMessages = true;
    offloadMode = false;
   d4cc6:	4b84      	ldr	r3, [pc, #528]	; (d4ed8 <setup+0x2e0>)
   d4cc8:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   d4cca:	4b84      	ldr	r3, [pc, #528]	; (d4edc <setup+0x2e4>)
   d4ccc:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   d4cce:	4b84      	ldr	r3, [pc, #528]	; (d4ee0 <setup+0x2e8>)
   d4cd0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   d4cd4:	801a      	strh	r2, [r3, #0]

    battPercent = 50;
   d4cd6:	4b83      	ldr	r3, [pc, #524]	; (d4ee4 <setup+0x2ec>)
   d4cd8:	2232      	movs	r2, #50	; 0x32

    char deviceName[10];
    strcpy(deviceName,"WTN23_Bot");
   d4cda:	a806      	add	r0, sp, #24
    logMessages = true;
    offloadMode = false;
    requestActive = false;
    LTEStatusCount = LTE_MAX_STATUS;

    battPercent = 50;
   d4cdc:	701a      	strb	r2, [r3, #0]

    char deviceName[10];
    strcpy(deviceName,"WTN23_Bot");
   d4cde:	f006 f894 	bl	dae0a <strcpy>
    deviceName[9] = BOTNUM+48;
   d4ce2:	2331      	movs	r3, #49	; 0x31
   d4ce4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    BLECustomData[0] = BOTNUM;
   d4ce8:	4b7f      	ldr	r3, [pc, #508]	; (d4ee8 <setup+0x2f0>)
   d4cea:	701f      	strb	r7, [r3, #0]

    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   d4cec:	f003 f83e 	bl	d7d6c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4cf0:	4a7e      	ldr	r2, [pc, #504]	; (d4eec <setup+0x2f4>)
   d4cf2:	4601      	mov	r1, r0
   d4cf4:	a80d      	add	r0, sp, #52	; 0x34
   d4cf6:	f003 fcc5 	bl	d8684 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4cfa:	a80d      	add	r0, sp, #52	; 0x34
   d4cfc:	f003 f8ee 	bl	d7edc <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   d4d00:	f003 f834 	bl	d7d6c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4d04:	4a7a      	ldr	r2, [pc, #488]	; (d4ef0 <setup+0x2f8>)
   d4d06:	4601      	mov	r1, r0
   d4d08:	a80d      	add	r0, sp, #52	; 0x34
   d4d0a:	f003 fcbb 	bl	d8684 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4d0e:	a80d      	add	r0, sp, #52	; 0x34
   d4d10:	f003 f8e4 	bl	d7edc <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   d4d14:	f003 f82a 	bl	d7d6c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4d18:	4a76      	ldr	r2, [pc, #472]	; (d4ef4 <setup+0x2fc>)
   d4d1a:	4601      	mov	r1, r0
   d4d1c:	a80d      	add	r0, sp, #52	; 0x34
   d4d1e:	f003 fcb1 	bl	d8684 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4d22:	a80d      	add	r0, sp, #52	; 0x34
   d4d24:	f003 f8da 	bl	d7edc <_ZN8particle17BleCharacteristicD1Ev>

    advData.appendServiceUUID(WaterNetService); // Add the app service
   d4d28:	4b73      	ldr	r3, [pc, #460]	; (d4ef8 <setup+0x300>)
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4d2a:	a80d      	add	r0, sp, #52	; 0x34
   d4d2c:	6819      	ldr	r1, [r3, #0]
   d4d2e:	f002 fef1 	bl	d7b14 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4d32:	a80d      	add	r0, sp, #52	; 0x34
   d4d34:	f002 fe3a 	bl	d79ac <_ZNK8particle7BleUuid4typeEv>
   d4d38:	4607      	mov	r7, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4d3a:	a80d      	add	r0, sp, #52	; 0x34
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4d3c:	b947      	cbnz	r7, d4d50 <setup+0x158>
            uint16_t uuid16 = tempUUID.shorted();
   d4d3e:	f002 fe53 	bl	d79e8 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4d42:	9700      	str	r7, [sp, #0]

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d4d44:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4d48:	2302      	movs	r3, #2
   d4d4a:	aa09      	add	r2, sp, #36	; 0x24
   d4d4c:	2103      	movs	r1, #3
   d4d4e:	e005      	b.n	d4d5c <setup+0x164>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4d50:	f002 fe4f 	bl	d79f2 <_ZNK8particle7BleUuid8rawBytesEv>
   d4d54:	9400      	str	r4, [sp, #0]
   d4d56:	2310      	movs	r3, #16
   d4d58:	4602      	mov	r2, r0
   d4d5a:	2107      	movs	r1, #7
   d4d5c:	4867      	ldr	r0, [pc, #412]	; (d4efc <setup+0x304>)
   d4d5e:	f002 fefc 	bl	d7b5a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   d4d62:	2300      	movs	r3, #0
   d4d64:	2208      	movs	r2, #8
   d4d66:	4960      	ldr	r1, [pc, #384]	; (d4ee8 <setup+0x2f0>)
   d4d68:	4864      	ldr	r0, [pc, #400]	; (d4efc <setup+0x304>)
   d4d6a:	f002 ff57 	bl	d7c1c <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    //advData.appendLocalName(deviceName);           //Local advertising name

    BLE.advertise(&advData);                    //Start advertising the characteristics
   d4d6e:	f002 fffd 	bl	d7d6c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4d72:	2200      	movs	r2, #0
   d4d74:	4961      	ldr	r1, [pc, #388]	; (d4efc <setup+0x304>)
   d4d76:	f003 f875 	bl	d7e64 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   d4d7a:	f005 fd15 	bl	da7a8 <_Z19__fetch_global_Wirev>
   d4d7e:	f005 f95d 	bl	da03c <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   d4d82:	f005 fd11 	bl	da7a8 <_Z19__fetch_global_Wirev>
   d4d86:	495e      	ldr	r1, [pc, #376]	; (d4f00 <setup+0x308>)
   d4d88:	f005 f954 	bl	da034 <_ZN7TwoWire8setSpeedEm>

    char timestamp[16];
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   d4d8c:	f004 fe76 	bl	d9a7c <_ZN9TimeClass5monthEv>
   d4d90:	4604      	mov	r4, r0
   d4d92:	f004 fe69 	bl	d9a68 <_ZN9TimeClass3dayEv>
   d4d96:	4607      	mov	r7, r0
   d4d98:	f004 fe78 	bl	d9a8c <_ZN9TimeClass4yearEv>
   d4d9c:	4680      	mov	r8, r0
   d4d9e:	f004 fe45 	bl	d9a2c <_ZN9TimeClass4hourEv>
   d4da2:	4681      	mov	r9, r0
   d4da4:	f004 fe4c 	bl	d9a40 <_ZN9TimeClass6minuteEv>
   d4da8:	4682      	mov	sl, r0
   d4daa:	f004 fe53 	bl	d9a54 <_ZN9TimeClass6secondEv>
   d4dae:	4623      	mov	r3, r4
   d4db0:	4a54      	ldr	r2, [pc, #336]	; (d4f04 <setup+0x30c>)
   d4db2:	9004      	str	r0, [sp, #16]
   d4db4:	2110      	movs	r1, #16
   d4db6:	e88d 0780 	stmia.w	sp, {r7, r8, r9, sl}
   d4dba:	a809      	add	r0, sp, #36	; 0x24
   d4dbc:	f002 fa6c 	bl	d7298 <snprintf>
    strcpy(filename,DEF_FILENAME);
   d4dc0:	4951      	ldr	r1, [pc, #324]	; (d4f08 <setup+0x310>)
   d4dc2:	4852      	ldr	r0, [pc, #328]	; (d4f0c <setup+0x314>)
   d4dc4:	f006 f821 	bl	dae0a <strcpy>
    strcat(filename,timestamp);
   d4dc8:	a909      	add	r1, sp, #36	; 0x24
   d4dca:	4850      	ldr	r0, [pc, #320]	; (d4f0c <setup+0x314>)
   d4dcc:	f005 ffec 	bl	dada8 <strcat>
    strcpy(filenameMessages,filename);
   d4dd0:	494e      	ldr	r1, [pc, #312]	; (d4f0c <setup+0x314>)
   d4dd2:	484f      	ldr	r0, [pc, #316]	; (d4f10 <setup+0x318>)
   d4dd4:	f006 f819 	bl	dae0a <strcpy>
    strcat(filename,".csv");
   d4dd8:	494e      	ldr	r1, [pc, #312]	; (d4f14 <setup+0x31c>)
   d4dda:	484c      	ldr	r0, [pc, #304]	; (d4f0c <setup+0x314>)
   d4ddc:	f005 ffe4 	bl	dada8 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   d4de0:	494d      	ldr	r1, [pc, #308]	; (d4f18 <setup+0x320>)
   d4de2:	484b      	ldr	r0, [pc, #300]	; (d4f10 <setup+0x318>)
   d4de4:	f005 ffe0 	bl	dada8 <strcat>

    Serial.println(filename);
   d4de8:	f004 ffe8 	bl	d9dbc <_Z16_fetch_usbserialv>
   d4dec:	4947      	ldr	r1, [pc, #284]	; (d4f0c <setup+0x314>)
   d4dee:	f003 fd8c 	bl	d890a <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   d4df2:	f004 ffe3 	bl	d9dbc <_Z16_fetch_usbserialv>
   d4df6:	4946      	ldr	r1, [pc, #280]	; (d4f10 <setup+0x318>)
   d4df8:	f003 fd87 	bl	d890a <_ZN5Print7printlnEPKc>

    watchdog.start();
   d4dfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4e00:	4846      	ldr	r0, [pc, #280]	; (d4f1c <setup+0x324>)
   d4e02:	f7ff faf9 	bl	d43f8 <_ZN5Timer5startEj>
    ledTimer.start();
   d4e06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4e0a:	4845      	ldr	r0, [pc, #276]	; (d4f20 <setup+0x328>)
   d4e0c:	f7ff faf4 	bl	d43f8 <_ZN5Timer5startEj>
    statusPD.start();
   d4e10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4e14:	4843      	ldr	r0, [pc, #268]	; (d4f24 <setup+0x32c>)
   d4e16:	f7ff faef 	bl	d43f8 <_ZN5Timer5startEj>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4e1a:	4a43      	ldr	r2, [pc, #268]	; (d4f28 <setup+0x330>)
   d4e1c:	4b43      	ldr	r3, [pc, #268]	; (d4f2c <setup+0x334>)
   d4e1e:	920f      	str	r2, [sp, #60]	; 0x3c
   d4e20:	2201      	movs	r2, #1
   d4e22:	930d      	str	r3, [sp, #52]	; 0x34
   d4e24:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
   d4e28:	2300      	movs	r3, #0

    if (!sd.begin(chipSelect, SD_SCK_MHZ(4))) {
   d4e2a:	aa0d      	add	r2, sp, #52	; 0x34
   d4e2c:	2108      	movs	r1, #8
   d4e2e:	4840      	ldr	r0, [pc, #256]	; (d4f30 <setup+0x338>)
   d4e30:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   d4e34:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   d4e38:	f7ff fb7a 	bl	d4530 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d4e3c:	4604      	mov	r4, r0
   d4e3e:	b930      	cbnz	r0, d4e4e <setup+0x256>
        Serial.println("Error: could not connect to SD card!");
   d4e40:	f004 ffbc 	bl	d9dbc <_Z16_fetch_usbserialv>
   d4e44:	493b      	ldr	r1, [pc, #236]	; (d4f34 <setup+0x33c>)
   d4e46:	f003 fd60 	bl	d890a <_ZN5Print7printlnEPKc>
        logSensors = false;
   d4e4a:	7034      	strb	r4, [r6, #0]
        logMessages = false;
   d4e4c:	702c      	strb	r4, [r5, #0]
    }
    if(logSensors){
   d4e4e:	7833      	ldrb	r3, [r6, #0]
   d4e50:	b17b      	cbz	r3, d4e72 <setup+0x27a>
   d4e52:	4839      	ldr	r0, [pc, #228]	; (d4f38 <setup+0x340>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   d4e54:	7c03      	ldrb	r3, [r0, #16]
   d4e56:	b92b      	cbnz	r3, d4e64 <setup+0x26c>
   d4e58:	f244 2202 	movw	r2, #16898	; 0x4202
   d4e5c:	492b      	ldr	r1, [pc, #172]	; (d4f0c <setup+0x314>)
   d4e5e:	3010      	adds	r0, #16
   d4e60:	f7ff fb5e 	bl	d4520 <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   d4e64:	4935      	ldr	r1, [pc, #212]	; (d4f3c <setup+0x344>)
   d4e66:	4834      	ldr	r0, [pc, #208]	; (d4f38 <setup+0x340>)
   d4e68:	f003 fd4f 	bl	d890a <_ZN5Print7printlnEPKc>
        myFile.close();
   d4e6c:	4834      	ldr	r0, [pc, #208]	; (d4f40 <setup+0x348>)
   d4e6e:	f001 f881 	bl	d5f74 <_ZN7FatFile5closeEv>
    }
    if(logMessages){
   d4e72:	782b      	ldrb	r3, [r5, #0]
   d4e74:	b183      	cbz	r3, d4e98 <setup+0x2a0>
   d4e76:	4833      	ldr	r0, [pc, #204]	; (d4f44 <setup+0x34c>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4e78:	7c03      	ldrb	r3, [r0, #16]
   d4e7a:	b92b      	cbnz	r3, d4e88 <setup+0x290>
   d4e7c:	f244 2202 	movw	r2, #16898	; 0x4202
   d4e80:	4923      	ldr	r1, [pc, #140]	; (d4f10 <setup+0x318>)
   d4e82:	3010      	adds	r0, #16
   d4e84:	f7ff fb4c 	bl	d4520 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   d4e88:	2201      	movs	r2, #1
   d4e8a:	492f      	ldr	r1, [pc, #188]	; (d4f48 <setup+0x350>)
   d4e8c:	482d      	ldr	r0, [pc, #180]	; (d4f44 <setup+0x34c>)
   d4e8e:	f7ff fe1b 	bl	d4ac8 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        logFile.close();
   d4e92:	482e      	ldr	r0, [pc, #184]	; (d4f4c <setup+0x354>)
   d4e94:	f001 f86e 	bl	d5f74 <_ZN7FatFile5closeEv>
                sendData(dataBuf,0,false,true,false);
            }
            delay(100);
        }
    }
}
   d4e98:	b012      	add	sp, #72	; 0x48
   d4e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4e9e:	bf00      	nop
   d4ea0:	2003da64 	.word	0x2003da64
   d4ea4:	2003e2b5 	.word	0x2003e2b5
   d4ea8:	2003e204 	.word	0x2003e204
   d4eac:	2003d92c 	.word	0x2003d92c
   d4eb0:	2003d994 	.word	0x2003d994
   d4eb4:	2003dae3 	.word	0x2003dae3
   d4eb8:	2003e1dd 	.word	0x2003e1dd
   d4ebc:	2003e1dc 	.word	0x2003e1dc
   d4ec0:	2003d900 	.word	0x2003d900
   d4ec4:	2003d8fc 	.word	0x2003d8fc
   d4ec8:	000dbb11 	.word	0x000dbb11
   d4ecc:	2003e2b0 	.word	0x2003e2b0
   d4ed0:	2003d93c 	.word	0x2003d93c
   d4ed4:	2003e2b4 	.word	0x2003e2b4
   d4ed8:	2003d9a4 	.word	0x2003d9a4
   d4edc:	2003dae0 	.word	0x2003dae0
   d4ee0:	2003dad4 	.word	0x2003dad4
   d4ee4:	2003da98 	.word	0x2003da98
   d4ee8:	2003d9a5 	.word	0x2003d9a5
   d4eec:	2003dae4 	.word	0x2003dae4
   d4ef0:	2003d470 	.word	0x2003d470
   d4ef4:	2003d420 	.word	0x2003d420
   d4ef8:	2003d334 	.word	0x2003d334
   d4efc:	2003d908 	.word	0x2003d908
   d4f00:	00061a80 	.word	0x00061a80
   d4f04:	000db7f1 	.word	0x000db7f1
   d4f08:	000dbb1b 	.word	0x000dbb1b
   d4f0c:	2003daed 	.word	0x2003daed
   d4f10:	2003d940 	.word	0x2003d940
   d4f14:	000db8e6 	.word	0x000db8e6
   d4f18:	000dbb24 	.word	0x000dbb24
   d4f1c:	2003da48 	.word	0x2003da48
   d4f20:	2003da9c 	.word	0x2003da9c
   d4f24:	2003dab8 	.word	0x2003dab8
   d4f28:	003d0900 	.word	0x003d0900
   d4f2c:	000db704 	.word	0x000db704
   d4f30:	2003d478 	.word	0x2003d478
   d4f34:	000dbb2d 	.word	0x000dbb2d
   d4f38:	2003d9b0 	.word	0x2003d9b0
   d4f3c:	000dbb52 	.word	0x000dbb52
   d4f40:	2003d9c0 	.word	0x2003d9c0
   d4f44:	2003e2d8 	.word	0x2003e2d8
   d4f48:	000dbba8 	.word	0x000dbba8
   d4f4c:	2003e2e8 	.word	0x2003e2e8

000d4f50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4f50:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f54:	4606      	mov	r6, r0
   d4f56:	460c      	mov	r4, r1
   d4f58:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4f5a:	d916      	bls.n	d4f8a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4f5c:	4290      	cmp	r0, r2
   d4f5e:	d215      	bcs.n	d4f8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d4f60:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d4f64:	1a6c      	subs	r4, r5, r1
   d4f66:	f1a1 0714 	sub.w	r7, r1, #20
   d4f6a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4f6c:	42af      	cmp	r7, r5
   d4f6e:	d01c      	beq.n	d4faa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4f70:	b12c      	cbz	r4, d4f7e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4f72:	4629      	mov	r1, r5
   d4f74:	4620      	mov	r0, r4
   d4f76:	f002 fbaf 	bl	d76d8 <_ZN6StringC1EOS_>
   d4f7a:	7c2b      	ldrb	r3, [r5, #16]
   d4f7c:	7423      	strb	r3, [r4, #16]
   d4f7e:	4628      	mov	r0, r5
   d4f80:	f002 fbba 	bl	d76f8 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4f84:	3d14      	subs	r5, #20
   d4f86:	3c14      	subs	r4, #20
   d4f88:	e7f0      	b.n	d4f6c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4f8a:	d00e      	beq.n	d4faa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4f8c:	42ac      	cmp	r4, r5
   d4f8e:	d00c      	beq.n	d4faa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4f90:	b12e      	cbz	r6, d4f9e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4f92:	4621      	mov	r1, r4
   d4f94:	4630      	mov	r0, r6
   d4f96:	f002 fb9f 	bl	d76d8 <_ZN6StringC1EOS_>
   d4f9a:	7c23      	ldrb	r3, [r4, #16]
   d4f9c:	7433      	strb	r3, [r6, #16]
   d4f9e:	4620      	mov	r0, r4
   d4fa0:	f002 fbaa 	bl	d76f8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4fa4:	3414      	adds	r4, #20
   d4fa6:	3614      	adds	r6, #20
   d4fa8:	e7f0      	b.n	d4f8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d4faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4fb0:	2300      	movs	r3, #0
   d4fb2:	6003      	str	r3, [r0, #0]
   d4fb4:	6043      	str	r3, [r0, #4]
   d4fb6:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4fb8:	684e      	ldr	r6, [r1, #4]
   d4fba:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4fbc:	4604      	mov	r4, r0
   d4fbe:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4fc0:	dd24      	ble.n	d500c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4fc2:	f04f 0814 	mov.w	r8, #20
   d4fc6:	fb08 f006 	mul.w	r0, r8, r6
   d4fca:	f002 f93d 	bl	d7248 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4fce:	4605      	mov	r5, r0
   d4fd0:	b1e0      	cbz	r0, d500c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4fd2:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4fd6:	fb08 1202 	mla	r2, r8, r2, r1
   d4fda:	f7ff ffb9 	bl	d4f50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4fde:	6820      	ldr	r0, [r4, #0]
   d4fe0:	f002 f93a 	bl	d7258 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4fe4:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4fe6:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4fe8:	683e      	ldr	r6, [r7, #0]
   d4fea:	687b      	ldr	r3, [r7, #4]
   d4fec:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4ff0:	4546      	cmp	r6, r8
   d4ff2:	d009      	beq.n	d5008 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4ff4:	b12d      	cbz	r5, d5002 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4ff6:	4631      	mov	r1, r6
   d4ff8:	4628      	mov	r0, r5
   d4ffa:	f002 fbe6 	bl	d77ca <_ZN6StringC1ERKS_>
   d4ffe:	7c33      	ldrb	r3, [r6, #16]
   d5000:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d5002:	3614      	adds	r6, #20
   d5004:	3514      	adds	r5, #20
   d5006:	e7f3      	b.n	d4ff0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d5008:	687b      	ldr	r3, [r7, #4]
   d500a:	6063      	str	r3, [r4, #4]
    }
}
   d500c:	4620      	mov	r0, r4
   d500e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5014 <_GLOBAL__sub_I_SystemMode>:
                    break;
                }
			}
		}
	}*/
   d5014:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5016:	4bad      	ldr	r3, [pc, #692]	; (d52cc <_GLOBAL__sub_I_SystemMode+0x2b8>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5018:	4cad      	ldr	r4, [pc, #692]	; (d52d0 <_GLOBAL__sub_I_SystemMode+0x2bc>)
   d501a:	b092      	sub	sp, #72	; 0x48
   d501c:	2501      	movs	r5, #1
   d501e:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5020:	f001 fdbc 	bl	d6b9c <HAL_Pin_Map>
   d5024:	2300      	movs	r3, #0
   d5026:	6023      	str	r3, [r4, #0]
   d5028:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d502a:	71a3      	strb	r3, [r4, #6]
   d502c:	8123      	strh	r3, [r4, #8]
   d502e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5032:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5034:	2003      	movs	r0, #3
   d5036:	f002 f85b 	bl	d70f0 <set_system_mode>
#define FILE_LABELS         "Time,Latitude,Longitude,Temperature,pH,Dissolved O2,Conductivity 0.1K,Conductivity 1K"
#define BLE_OFFLD_BUF       100
#define CUSTOM_DATA_LEN     8
#define MAX_FILENAME_LEN    30

SYSTEM_MODE(MANUAL);
   d503a:	4aa6      	ldr	r2, [pc, #664]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d503c:	49a6      	ldr	r1, [pc, #664]	; (d52d8 <_GLOBAL__sub_I_SystemMode+0x2c4>)
   d503e:	4620      	mov	r0, r4
   d5040:	f005 fbd8 	bl	da7f4 <__aeabi_atexit>

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5044:	4ca5      	ldr	r4, [pc, #660]	; (d52dc <_GLOBAL__sub_I_SystemMode+0x2c8>)

//GPS Buffers and Objects
char nmeaBuffer[100];
MicroNMEA nmea(nmeaBuffer, sizeof(nmeaBuffer));
   d5046:	49a6      	ldr	r1, [pc, #664]	; (d52e0 <_GLOBAL__sub_I_SystemMode+0x2cc>)
   d5048:	48a6      	ldr	r0, [pc, #664]	; (d52e4 <_GLOBAL__sub_I_SystemMode+0x2d0>)
   d504a:	2264      	movs	r2, #100	; 0x64
   d504c:	f000 fa22 	bl	d5494 <_ZN9MicroNMEAC1EPvh>
SFE_UBLOX_GPS myGPS;
   d5050:	48a5      	ldr	r0, [pc, #660]	; (d52e8 <_GLOBAL__sub_I_SystemMode+0x2d4>)
   d5052:	f001 fd51 	bl	d6af8 <_ZN13SFE_UBLOX_GPSC1Ev>
   d5056:	6823      	ldr	r3, [r4, #0]
   d5058:	07db      	lsls	r3, r3, #31
   d505a:	d40a      	bmi.n	d5072 <_GLOBAL__sub_I_SystemMode+0x5e>
   d505c:	4620      	mov	r0, r4
   d505e:	f7ff f82b 	bl	d40b8 <__cxa_guard_acquire>
   d5062:	b130      	cbz	r0, d5072 <_GLOBAL__sub_I_SystemMode+0x5e>
   d5064:	4629      	mov	r1, r5
   d5066:	48a1      	ldr	r0, [pc, #644]	; (d52ec <_GLOBAL__sub_I_SystemMode+0x2d8>)
   d5068:	f002 f99a 	bl	d73a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d506c:	4620      	mov	r0, r4
   d506e:	f7ff f828 	bl	d40c2 <__cxa_guard_release>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d5072:	4b9f      	ldr	r3, [pc, #636]	; (d52f0 <_GLOBAL__sub_I_SystemMode+0x2dc>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5074:	489f      	ldr	r0, [pc, #636]	; (d52f4 <_GLOBAL__sub_I_SystemMode+0x2e0>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d5076:	4da0      	ldr	r5, [pc, #640]	; (d52f8 <_GLOBAL__sub_I_SystemMode+0x2e4>)

//SD File system object
SdFat sd((SPIClass*)&SPI1);

File myFile;
   d5078:	49a0      	ldr	r1, [pc, #640]	; (d52fc <_GLOBAL__sub_I_SystemMode+0x2e8>)
   d507a:	6005      	str	r5, [r0, #0]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d507c:	2264      	movs	r2, #100	; 0x64
   d507e:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d5082:	4a9f      	ldr	r2, [pc, #636]	; (d5300 <_GLOBAL__sub_I_SystemMode+0x2ec>)
   d5084:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d5088:	2201      	movs	r2, #1
   d508a:	2400      	movs	r4, #0
   d508c:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5090:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d5094:	4a95      	ldr	r2, [pc, #596]	; (d52ec <_GLOBAL__sub_I_SystemMode+0x2d8>)
   d5096:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   d509a:	71dc      	strb	r4, [r3, #7]
   d509c:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d50a0:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d50a4:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d50a8:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d50ac:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d50b0:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d50b4:	6086      	str	r6, [r0, #8]
   d50b6:	4a87      	ldr	r2, [pc, #540]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d50b8:	7404      	strb	r4, [r0, #16]
   d50ba:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d50bc:	6044      	str	r4, [r0, #4]
   d50be:	f005 fb99 	bl	da7f4 <__aeabi_atexit>
   d50c2:	4890      	ldr	r0, [pc, #576]	; (d5304 <_GLOBAL__sub_I_SystemMode+0x2f0>)
File logFile;
   d50c4:	4a83      	ldr	r2, [pc, #524]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d50c6:	6086      	str	r6, [r0, #8]
   d50c8:	498c      	ldr	r1, [pc, #560]	; (d52fc <_GLOBAL__sub_I_SystemMode+0x2e8>)
   d50ca:	7404      	strb	r4, [r0, #16]
   d50cc:	7444      	strb	r4, [r0, #17]
   d50ce:	6044      	str	r4, [r0, #4]
   d50d0:	6005      	str	r5, [r0, #0]
   d50d2:	f005 fb8f 	bl	da7f4 <__aeabi_atexit>
   d50d6:	488c      	ldr	r0, [pc, #560]	; (d5308 <_GLOBAL__sub_I_SystemMode+0x2f4>)
File logDir;
   d50d8:	4a7e      	ldr	r2, [pc, #504]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d50da:	4988      	ldr	r1, [pc, #544]	; (d52fc <_GLOBAL__sub_I_SystemMode+0x2e8>)
   d50dc:	6086      	str	r6, [r0, #8]
   d50de:	7404      	strb	r4, [r0, #16]
   d50e0:	7444      	strb	r4, [r0, #17]
   d50e2:	6044      	str	r4, [r0, #4]
   d50e4:	6005      	str	r5, [r0, #0]
   d50e6:	f005 fb85 	bl	da7f4 <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d50ea:	9405      	str	r4, [sp, #20]
   d50ec:	9406      	str	r4, [sp, #24]
   d50ee:	9407      	str	r4, [sp, #28]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d50f0:	f004 fe64 	bl	d9dbc <_Z16_fetch_usbserialv>
   d50f4:	a905      	add	r1, sp, #20
   d50f6:	4606      	mov	r6, r0
   d50f8:	a808      	add	r0, sp, #32
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d50fa:	4d84      	ldr	r5, [pc, #528]	; (d530c <_GLOBAL__sub_I_SystemMode+0x2f8>)
   d50fc:	f7ff ff56 	bl	d4fac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d5100:	a908      	add	r1, sp, #32
   d5102:	a80b      	add	r0, sp, #44	; 0x2c
   d5104:	f7ff ff52 	bl	d4fac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d5108:	4b81      	ldr	r3, [pc, #516]	; (d5310 <_GLOBAL__sub_I_SystemMode+0x2fc>)
   d510a:	602b      	str	r3, [r5, #0]
   d510c:	a90b      	add	r1, sp, #44	; 0x2c
   d510e:	a80e      	add	r0, sp, #56	; 0x38
   d5110:	f7ff ff4c 	bl	d4fac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5114:	aa0e      	add	r2, sp, #56	; 0x38
   d5116:	211e      	movs	r1, #30
   d5118:	1d28      	adds	r0, r5, #4
   d511a:	f004 f8ec 	bl	d92f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d511e:	a80e      	add	r0, sp, #56	; 0x38
   d5120:	f7ff faaa 	bl	d4678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d5124:	a80b      	add	r0, sp, #44	; 0x2c
   d5126:	f7ff faa7 	bl	d4678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d512a:	4b7a      	ldr	r3, [pc, #488]	; (d5314 <_GLOBAL__sub_I_SystemMode+0x300>)
   d512c:	602b      	str	r3, [r5, #0]
   d512e:	622e      	str	r6, [r5, #32]
   d5130:	a808      	add	r0, sp, #32
   d5132:	f7ff faa1 	bl	d4678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5136:	4b78      	ldr	r3, [pc, #480]	; (d5318 <_GLOBAL__sub_I_SystemMode+0x304>)
   d5138:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d513a:	f004 fe3f 	bl	d9dbc <_Z16_fetch_usbserialv>
   d513e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5142:	f004 fe2b 	bl	d9d9c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d5146:	f003 fd7f 	bl	d8c48 <_ZN5spark10LogManager8instanceEv>
   d514a:	4629      	mov	r1, r5
   d514c:	f004 f866 	bl	d921c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   d5150:	a805      	add	r0, sp, #20
   d5152:	f7ff fa91 	bl	d4678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5156:	4a5f      	ldr	r2, [pc, #380]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d5158:	4970      	ldr	r1, [pc, #448]	; (d531c <_GLOBAL__sub_I_SystemMode+0x308>)
   d515a:	4628      	mov	r0, r5
   d515c:	f005 fb4a 	bl	da7f4 <__aeabi_atexit>

Servo ESCL;     // create servo object to control the left motor ESC
   d5160:	486f      	ldr	r0, [pc, #444]	; (d5320 <_GLOBAL__sub_I_SystemMode+0x30c>)

const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
const BleUuid peerRxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
const BleUuid peerTxUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   d5162:	4d70      	ldr	r5, [pc, #448]	; (d5324 <_GLOBAL__sub_I_SystemMode+0x310>)
File logFile;
File logDir;

SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration

Servo ESCL;     // create servo object to control the left motor ESC
   d5164:	f002 fa5e 	bl	d7624 <_ZN5ServoC1Ev>
Servo ESCR;     // create servo object to control the right motor ESC
   d5168:	486f      	ldr	r0, [pc, #444]	; (d5328 <_GLOBAL__sub_I_SystemMode+0x314>)
   d516a:	f002 fa5b 	bl	d7624 <_ZN5ServoC1Ev>
const char* WaterNetService = "b4206910-dc4b-5743-c8b1-92d0e75182b0"; //Main BLE Service
const char* rxUuid          = "b4206912-dc4b-5743-c8b1-92d0e75182b0"; //GPS Latitude Service
const char* txUuid          = "b4206913-dc4b-5743-c8b1-92d0e75182b0"; //GPS Longitude Service
const char* offldUuid       = "b4206914-dc4b-5743-c8b1-92d0e75182b0"; //GPS Longitude Service

const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   d516e:	496f      	ldr	r1, [pc, #444]	; (d532c <_GLOBAL__sub_I_SystemMode+0x318>)
   d5170:	486f      	ldr	r0, [pc, #444]	; (d5330 <_GLOBAL__sub_I_SystemMode+0x31c>)
   d5172:	f002 fccf 	bl	d7b14 <_ZN8particle7BleUuidC1EPKc>
const BleUuid peerRxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   d5176:	496f      	ldr	r1, [pc, #444]	; (d5334 <_GLOBAL__sub_I_SystemMode+0x320>)
   d5178:	486f      	ldr	r0, [pc, #444]	; (d5338 <_GLOBAL__sub_I_SystemMode+0x324>)
   d517a:	f002 fccb 	bl	d7b14 <_ZN8particle7BleUuidC1EPKc>
const BleUuid peerTxUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   d517e:	496f      	ldr	r1, [pc, #444]	; (d533c <_GLOBAL__sub_I_SystemMode+0x328>)
   d5180:	486f      	ldr	r0, [pc, #444]	; (d5340 <_GLOBAL__sub_I_SystemMode+0x32c>)
   d5182:	f002 fcc7 	bl	d7b14 <_ZN8particle7BleUuidC1EPKc>

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   d5186:	9402      	str	r4, [sp, #8]
   d5188:	9401      	str	r4, [sp, #4]
   d518a:	682b      	ldr	r3, [r5, #0]
   d518c:	9300      	str	r3, [sp, #0]
   d518e:	4b6d      	ldr	r3, [pc, #436]	; (d5344 <_GLOBAL__sub_I_SystemMode+0x330>)
   d5190:	496d      	ldr	r1, [pc, #436]	; (d5348 <_GLOBAL__sub_I_SystemMode+0x334>)
   d5192:	681b      	ldr	r3, [r3, #0]
   d5194:	486d      	ldr	r0, [pc, #436]	; (d534c <_GLOBAL__sub_I_SystemMode+0x338>)
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d5196:	2610      	movs	r6, #16
   d5198:	aa0e      	add	r2, sp, #56	; 0x38
   d519a:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
   d519e:	f7ff fa7e 	bl	d469e <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d51a2:	4a4c      	ldr	r2, [pc, #304]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d51a4:	496a      	ldr	r1, [pc, #424]	; (d5350 <_GLOBAL__sub_I_SystemMode+0x33c>)
   d51a6:	4869      	ldr	r0, [pc, #420]	; (d534c <_GLOBAL__sub_I_SystemMode+0x338>)
   d51a8:	f005 fb24 	bl	da7f4 <__aeabi_atexit>
   d51ac:	2304      	movs	r3, #4
   d51ae:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   d51b2:	4b68      	ldr	r3, [pc, #416]	; (d5354 <_GLOBAL__sub_I_SystemMode+0x340>)
   d51b4:	9402      	str	r4, [sp, #8]
   d51b6:	9301      	str	r3, [sp, #4]
   d51b8:	682b      	ldr	r3, [r5, #0]
   d51ba:	9300      	str	r3, [sp, #0]
   d51bc:	4b66      	ldr	r3, [pc, #408]	; (d5358 <_GLOBAL__sub_I_SystemMode+0x344>)
   d51be:	4967      	ldr	r1, [pc, #412]	; (d535c <_GLOBAL__sub_I_SystemMode+0x348>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	4867      	ldr	r0, [pc, #412]	; (d5360 <_GLOBAL__sub_I_SystemMode+0x34c>)
   d51c4:	aa0e      	add	r2, sp, #56	; 0x38
   d51c6:	f7ff fa6a 	bl	d469e <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d51ca:	4a42      	ldr	r2, [pc, #264]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d51cc:	4960      	ldr	r1, [pc, #384]	; (d5350 <_GLOBAL__sub_I_SystemMode+0x33c>)
   d51ce:	4864      	ldr	r0, [pc, #400]	; (d5360 <_GLOBAL__sub_I_SystemMode+0x34c>)
   d51d0:	f005 fb10 	bl	da7f4 <__aeabi_atexit>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   d51d4:	9402      	str	r4, [sp, #8]
   d51d6:	9401      	str	r4, [sp, #4]
   d51d8:	682b      	ldr	r3, [r5, #0]
   d51da:	9300      	str	r3, [sp, #0]
   d51dc:	4b61      	ldr	r3, [pc, #388]	; (d5364 <_GLOBAL__sub_I_SystemMode+0x350>)
   d51de:	4962      	ldr	r1, [pc, #392]	; (d5368 <_GLOBAL__sub_I_SystemMode+0x354>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	4862      	ldr	r0, [pc, #392]	; (d536c <_GLOBAL__sub_I_SystemMode+0x358>)
   d51e4:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
   d51e8:	aa0e      	add	r2, sp, #56	; 0x38
   d51ea:	f7ff fa58 	bl	d469e <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d51ee:	4a39      	ldr	r2, [pc, #228]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d51f0:	4957      	ldr	r1, [pc, #348]	; (d5350 <_GLOBAL__sub_I_SystemMode+0x33c>)
   d51f2:	485e      	ldr	r0, [pc, #376]	; (d536c <_GLOBAL__sub_I_SystemMode+0x358>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d51f4:	4d5e      	ldr	r5, [pc, #376]	; (d5370 <_GLOBAL__sub_I_SystemMode+0x35c>)
   d51f6:	f005 fafd 	bl	da7f4 <__aeabi_atexit>
   d51fa:	1928      	adds	r0, r5, r4
   d51fc:	f002 fb78 	bl	d78f0 <_ZN8particle10BleAddressC1Ev>
   d5200:	f104 0008 	add.w	r0, r4, #8
   d5204:	4428      	add	r0, r5
   d5206:	f002 fcef 	bl	d7be8 <_ZN8particle18BleAdvertisingDataC1Ev>
   d520a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d520e:	4428      	add	r0, r5
   d5210:	3454      	adds	r4, #84	; 0x54
   d5212:	f002 fce9 	bl	d7be8 <_ZN8particle18BleAdvertisingDataC1Ev>

BleScanResult scanResults[SCAN_RESULT_COUNT];
   d5216:	f5b4 6fd2 	cmp.w	r4, #1680	; 0x690
   d521a:	d1ee      	bne.n	d51fa <_GLOBAL__sub_I_SystemMode+0x1e6>
BleCharacteristic peerTxCharacteristic;
   d521c:	4855      	ldr	r0, [pc, #340]	; (d5374 <_GLOBAL__sub_I_SystemMode+0x360>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d521e:	4e56      	ldr	r6, [pc, #344]	; (d5378 <_GLOBAL__sub_I_SystemMode+0x364>)
	    _M_manager = &_My_handler::_M_manager;
   d5220:	4d56      	ldr	r5, [pc, #344]	; (d537c <_GLOBAL__sub_I_SystemMode+0x368>)
   d5222:	f003 f951 	bl	d84c8 <_ZN8particle17BleCharacteristicC1Ev>
   d5226:	4a2b      	ldr	r2, [pc, #172]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d5228:	4949      	ldr	r1, [pc, #292]	; (d5350 <_GLOBAL__sub_I_SystemMode+0x33c>)
   d522a:	4852      	ldr	r0, [pc, #328]	; (d5374 <_GLOBAL__sub_I_SystemMode+0x360>)
   d522c:	f005 fae2 	bl	da7f4 <__aeabi_atexit>
BleCharacteristic peerRxCharacteristic;
   d5230:	4853      	ldr	r0, [pc, #332]	; (d5380 <_GLOBAL__sub_I_SystemMode+0x36c>)
   d5232:	f003 f949 	bl	d84c8 <_ZN8particle17BleCharacteristicC1Ev>
   d5236:	4a27      	ldr	r2, [pc, #156]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d5238:	4945      	ldr	r1, [pc, #276]	; (d5350 <_GLOBAL__sub_I_SystemMode+0x33c>)
   d523a:	4851      	ldr	r0, [pc, #324]	; (d5380 <_GLOBAL__sub_I_SystemMode+0x36c>)
   d523c:	f005 fada 	bl	da7f4 <__aeabi_atexit>
BleCharacteristic offldCopyCharacteristic;
   d5240:	4850      	ldr	r0, [pc, #320]	; (d5384 <_GLOBAL__sub_I_SystemMode+0x370>)
   d5242:	f003 f941 	bl	d84c8 <_ZN8particle17BleCharacteristicC1Ev>
   d5246:	4a23      	ldr	r2, [pc, #140]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d5248:	4941      	ldr	r1, [pc, #260]	; (d5350 <_GLOBAL__sub_I_SystemMode+0x33c>)
   d524a:	484e      	ldr	r0, [pc, #312]	; (d5384 <_GLOBAL__sub_I_SystemMode+0x370>)
   d524c:	f005 fad2 	bl	da7f4 <__aeabi_atexit>
BlePeerDevice peer;
   d5250:	484d      	ldr	r0, [pc, #308]	; (d5388 <_GLOBAL__sub_I_SystemMode+0x374>)
   d5252:	f002 fea3 	bl	d7f9c <_ZN8particle13BlePeerDeviceC1Ev>
   d5256:	4a1f      	ldr	r2, [pc, #124]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d5258:	494c      	ldr	r1, [pc, #304]	; (d538c <_GLOBAL__sub_I_SystemMode+0x378>)
   d525a:	484b      	ldr	r0, [pc, #300]	; (d5388 <_GLOBAL__sub_I_SystemMode+0x374>)
   d525c:	f005 faca 	bl	da7f4 <__aeabi_atexit>

BleAdvertisingData advData;                 //Advertising data
   d5260:	484b      	ldr	r0, [pc, #300]	; (d5390 <_GLOBAL__sub_I_SystemMode+0x37c>)
   d5262:	f002 fcc1 	bl	d7be8 <_ZN8particle18BleAdvertisingDataC1Ev>
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
   d5266:	484b      	ldr	r0, [pc, #300]	; (d5394 <_GLOBAL__sub_I_SystemMode+0x380>)

uint8_t BLECustomData[CUSTOM_DATA_LEN];
const unsigned long SCAN_PERIOD_MS = 2000;
unsigned long lastScan = 0;
std::vector<PairBot> BLEPair;
   d5268:	4a1a      	ldr	r2, [pc, #104]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d526a:	494b      	ldr	r1, [pc, #300]	; (d5398 <_GLOBAL__sub_I_SystemMode+0x384>)
   d526c:	2400      	movs	r4, #0
   d526e:	6004      	str	r4, [r0, #0]
   d5270:	6044      	str	r4, [r0, #4]
   d5272:	6084      	str	r4, [r0, #8]
   d5274:	f005 fabe 	bl	da7f4 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5278:	4b48      	ldr	r3, [pc, #288]	; (d539c <_GLOBAL__sub_I_SystemMode+0x388>)
   d527a:	930e      	str	r3, [sp, #56]	; 0x38
void sensorHandler();
void dataOffloader();
void statusUpdate();

//Tmers
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   d527c:	aa0e      	add	r2, sp, #56	; 0x38
   d527e:	4623      	mov	r3, r4
   d5280:	f643 2198 	movw	r1, #15000	; 0x3a98
   d5284:	4846      	ldr	r0, [pc, #280]	; (d53a0 <_GLOBAL__sub_I_SystemMode+0x38c>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5286:	9611      	str	r6, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   d5288:	9510      	str	r5, [sp, #64]	; 0x40
   d528a:	f7ff f845 	bl	d4318 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d528e:	a80e      	add	r0, sp, #56	; 0x38
   d5290:	f7ff f838 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
   d5294:	4a0f      	ldr	r2, [pc, #60]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d5296:	4943      	ldr	r1, [pc, #268]	; (d53a4 <_GLOBAL__sub_I_SystemMode+0x390>)
   d5298:	4841      	ldr	r0, [pc, #260]	; (d53a0 <_GLOBAL__sub_I_SystemMode+0x38c>)
   d529a:	f005 faab 	bl	da7f4 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d529e:	4b42      	ldr	r3, [pc, #264]	; (d53a8 <_GLOBAL__sub_I_SystemMode+0x394>)
   d52a0:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   d52a2:	aa0e      	add	r2, sp, #56	; 0x38
   d52a4:	4623      	mov	r3, r4
   d52a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d52aa:	4840      	ldr	r0, [pc, #256]	; (d53ac <_GLOBAL__sub_I_SystemMode+0x398>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d52ac:	9611      	str	r6, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   d52ae:	9510      	str	r5, [sp, #64]	; 0x40
   d52b0:	f7ff f832 	bl	d4318 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d52b4:	a80e      	add	r0, sp, #56	; 0x38
   d52b6:	f7ff f825 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
   d52ba:	4a06      	ldr	r2, [pc, #24]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d52bc:	4939      	ldr	r1, [pc, #228]	; (d53a4 <_GLOBAL__sub_I_SystemMode+0x390>)
   d52be:	483b      	ldr	r0, [pc, #236]	; (d53ac <_GLOBAL__sub_I_SystemMode+0x398>)
   d52c0:	f005 fa98 	bl	da7f4 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d52c4:	4b3a      	ldr	r3, [pc, #232]	; (d53b0 <_GLOBAL__sub_I_SystemMode+0x39c>)
   d52c6:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   d52c8:	aa0e      	add	r2, sp, #56	; 0x38
   d52ca:	e073      	b.n	d53b4 <_GLOBAL__sub_I_SystemMode+0x3a0>
   d52cc:	2003d46c 	.word	0x2003d46c
   d52d0:	2003e1d0 	.word	0x2003e1d0
   d52d4:	2003d400 	.word	0x2003d400
   d52d8:	000d426d 	.word	0x000d426d
   d52dc:	2003d404 	.word	0x2003d404
   d52e0:	2003d9e4 	.word	0x2003d9e4
   d52e4:	2003d428 	.word	0x2003d428
   d52e8:	2003e224 	.word	0x2003e224
   d52ec:	2003d408 	.word	0x2003d408
   d52f0:	2003d478 	.word	0x2003d478
   d52f4:	2003d9b0 	.word	0x2003d9b0
   d52f8:	000db768 	.word	0x000db768
   d52fc:	000d4171 	.word	0x000d4171
   d5300:	000db704 	.word	0x000db704
   d5304:	2003e2d8 	.word	0x2003e2d8
   d5308:	2003e19c 	.word	0x2003e19c
   d530c:	2003d970 	.word	0x2003d970
   d5310:	000db724 	.word	0x000db724
   d5314:	000dbfd0 	.word	0x000dbfd0
   d5318:	000db750 	.word	0x000db750
   d531c:	000d42bd 	.word	0x000d42bd
   d5320:	2003d92c 	.word	0x2003d92c
   d5324:	2003d334 	.word	0x2003d334
   d5328:	2003d994 	.word	0x2003d994
   d532c:	000dbbcd 	.word	0x000dbbcd
   d5330:	2003e2c0 	.word	0x2003e2c0
   d5334:	000dbbf2 	.word	0x000dbbf2
   d5338:	2003e1f0 	.word	0x2003e1f0
   d533c:	000dbc17 	.word	0x000dbc17
   d5340:	2003da84 	.word	0x2003da84
   d5344:	2003d33c 	.word	0x2003d33c
   d5348:	000dbc3c 	.word	0x000dbc3c
   d534c:	2003dae4 	.word	0x2003dae4
   d5350:	000d7edd 	.word	0x000d7edd
   d5354:	000d4a21 	.word	0x000d4a21
   d5358:	2003d330 	.word	0x2003d330
   d535c:	000dbc3f 	.word	0x000dbc3f
   d5360:	2003d470 	.word	0x2003d470
   d5364:	2003d338 	.word	0x2003d338
   d5368:	000dbc42 	.word	0x000dbc42
   d536c:	2003d420 	.word	0x2003d420
   d5370:	2003db0c 	.word	0x2003db0c
   d5374:	2003dad8 	.word	0x2003dad8
   d5378:	000d4155 	.word	0x000d4155
   d537c:	000d4159 	.word	0x000d4159
   d5380:	2003e2b8 	.word	0x2003e2b8
   d5384:	2003e208 	.word	0x2003e208
   d5388:	2003e21c 	.word	0x2003e21c
   d538c:	000d7eeb 	.word	0x000d7eeb
   d5390:	2003d908 	.word	0x2003d908
   d5394:	2003e210 	.word	0x2003e210
   d5398:	000d427d 	.word	0x000d427d
   d539c:	000d4ad5 	.word	0x000d4ad5
   d53a0:	2003da48 	.word	0x2003da48
   d53a4:	000d439d 	.word	0x000d439d
   d53a8:	000d4439 	.word	0x000d4439
   d53ac:	2003da9c 	.word	0x2003da9c
   d53b0:	000d40f1 	.word	0x000d40f1
   d53b4:	4623      	mov	r3, r4
   d53b6:	f643 2198 	movw	r1, #15000	; 0x3a98
   d53ba:	4816      	ldr	r0, [pc, #88]	; (d5414 <_GLOBAL__sub_I_SystemMode+0x400>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d53bc:	9611      	str	r6, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   d53be:	9510      	str	r5, [sp, #64]	; 0x40
   d53c0:	f7fe ffaa 	bl	d4318 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53c4:	a80e      	add	r0, sp, #56	; 0x38
   d53c6:	f7fe ff9d 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
   d53ca:	4a13      	ldr	r2, [pc, #76]	; (d5418 <_GLOBAL__sub_I_SystemMode+0x404>)
   d53cc:	4913      	ldr	r1, [pc, #76]	; (d541c <_GLOBAL__sub_I_SystemMode+0x408>)
   d53ce:	4811      	ldr	r0, [pc, #68]	; (d5414 <_GLOBAL__sub_I_SystemMode+0x400>)
   d53d0:	f005 fa10 	bl	da7f4 <__aeabi_atexit>
inline particle::LEDStatus::LEDStatus(LEDPattern pattern, LEDPriority priority, LEDSource source) :
        LEDStatus(pattern, LED_SPEED_NORMAL, priority, source) { // Use normal speed by default
}

inline particle::LEDStatus::LEDStatus(LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d53d4:	4622      	mov	r2, r4
   d53d6:	2114      	movs	r1, #20
   d53d8:	2001      	movs	r0, #1
   d53da:	f001 fea1 	bl	d7120 <led_pattern_period>
}

inline particle::LEDStatus::LEDStatus(LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) :
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   d53de:	2201      	movs	r2, #1
   d53e0:	2314      	movs	r3, #20
   d53e2:	9201      	str	r2, [sp, #4]
   d53e4:	9300      	str	r3, [sp, #0]
   d53e6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   d53ea:	4603      	mov	r3, r0
   d53ec:	480c      	ldr	r0, [pc, #48]	; (d5420 <_GLOBAL__sub_I_SystemMode+0x40c>)
   d53ee:	f001 ffaf 	bl	d7350 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>

//LED Control
LEDStatus status;
   d53f2:	4a09      	ldr	r2, [pc, #36]	; (d5418 <_GLOBAL__sub_I_SystemMode+0x404>)
   d53f4:	490b      	ldr	r1, [pc, #44]	; (d5424 <_GLOBAL__sub_I_SystemMode+0x410>)
   d53f6:	480a      	ldr	r0, [pc, #40]	; (d5420 <_GLOBAL__sub_I_SystemMode+0x40c>)
   d53f8:	f005 f9fc 	bl	da7f4 <__aeabi_atexit>
uint8_t errModeReply;
size_t txLen = 0;
char filename[MAX_FILENAME_LEN];
char filenameMessages[MAX_FILENAME_LEN];

String xbeeBuf;
   d53fc:	490a      	ldr	r1, [pc, #40]	; (d5428 <_GLOBAL__sub_I_SystemMode+0x414>)
   d53fe:	480b      	ldr	r0, [pc, #44]	; (d542c <_GLOBAL__sub_I_SystemMode+0x418>)
   d5400:	f002 f9c1 	bl	d7786 <_ZN6StringC1EPK19__FlashStringHelper>
   d5404:	4a04      	ldr	r2, [pc, #16]	; (d5418 <_GLOBAL__sub_I_SystemMode+0x404>)
   d5406:	490a      	ldr	r1, [pc, #40]	; (d5430 <_GLOBAL__sub_I_SystemMode+0x41c>)
   d5408:	4808      	ldr	r0, [pc, #32]	; (d542c <_GLOBAL__sub_I_SystemMode+0x418>)
   d540a:	f005 f9f3 	bl	da7f4 <__aeabi_atexit>
                    break;
                }
			}
		}
	}*/
   d540e:	b012      	add	sp, #72	; 0x48
   d5410:	bd70      	pop	{r4, r5, r6, pc}
   d5412:	bf00      	nop
   d5414:	2003dab8 	.word	0x2003dab8
   d5418:	2003d400 	.word	0x2003d400
   d541c:	000d439d 	.word	0x000d439d
   d5420:	2003da64 	.word	0x2003da64
   d5424:	000d428d 	.word	0x000d428d
   d5428:	000dbf90 	.word	0x000dbf90
   d542c:	2003d960 	.word	0x2003d960
   d5430:	000d76f9 	.word	0x000d76f9

000d5434 <_ZN9MicroNMEA9setBufferEPvh>:
}


void MicroNMEA::setBuffer(void* buf, uint8_t len)
{
	_bufferLen = len;
   d5434:	7002      	strb	r2, [r0, #0]
	_buffer = (char*)buf;
   d5436:	6041      	str	r1, [r0, #4]
	_ptr = _buffer;
   d5438:	6081      	str	r1, [r0, #8]
	if (_bufferLen) {
   d543a:	b132      	cbz	r2, d544a <_ZN9MicroNMEA9setBufferEPvh+0x16>
		*_ptr = '\0';
   d543c:	2200      	movs	r2, #0
   d543e:	700a      	strb	r2, [r1, #0]
		_buffer[_bufferLen - 1] = '\0';
   d5440:	7803      	ldrb	r3, [r0, #0]
   d5442:	6841      	ldr	r1, [r0, #4]
   d5444:	440b      	add	r3, r1
   d5446:	f803 2c01 	strb.w	r2, [r3, #-1]
   d544a:	4770      	bx	lr

000d544c <_ZN9MicroNMEA5clearEv>:

void MicroNMEA::clear(void)
{
	_navSystem = '\0';
	_numSat = 0;
	_hdop = 255;
   d544c:	22ff      	movs	r2, #255	; 0xff
   d544e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
	_isValid = false;
	_latitude = 999000000L;
   d5452:	4a0f      	ldr	r2, [pc, #60]	; (d5490 <_ZN9MicroNMEA5clearEv+0x44>)
   d5454:	6182      	str	r2, [r0, #24]
	_longitude = 999000000L;
   d5456:	61c2      	str	r2, [r0, #28]
	_altitude = _speed = _course = LONG_MIN;
   d5458:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
}


void MicroNMEA::clear(void)
{
	_navSystem = '\0';
   d545c:	2300      	movs	r3, #0
	_numSat = 0;
	_hdop = 255;
	_isValid = false;
	_latitude = 999000000L;
	_longitude = 999000000L;
	_altitude = _speed = _course = LONG_MIN;
   d545e:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5460:	6282      	str	r2, [r0, #40]	; 0x28
   d5462:	6202      	str	r2, [r0, #32]
	_altitudeValid = false;
	_year = _month = _day = 0;
	_hour = _minute = _second = 99;
   d5464:	2263      	movs	r2, #99	; 0x63
}


void MicroNMEA::clear(void)
{
	_navSystem = '\0';
   d5466:	74c3      	strb	r3, [r0, #19]
	_numSat = 0;
   d5468:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	_hdop = 255;
	_isValid = false;
   d546c:	7503      	strb	r3, [r0, #20]
	_latitude = 999000000L;
	_longitude = 999000000L;
	_altitude = _speed = _course = LONG_MIN;
	_altitudeValid = false;
   d546e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	_year = _month = _day = 0;
   d5472:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
   d5476:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   d547a:	8603      	strh	r3, [r0, #48]	; 0x30
	_hour = _minute = _second = 99;
   d547c:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
   d5480:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
   d5484:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
	_hundredths = 0;
   d5488:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
   d548c:	4770      	bx	lr
   d548e:	bf00      	nop
   d5490:	3b8b87c0 	.word	0x3b8b87c0

000d5494 <_ZN9MicroNMEAC1EPvh>:
	setBuffer(nullptr, 0);
	clear();
}


MicroNMEA::MicroNMEA(void* buf, uint8_t len) :
   d5494:	b538      	push	{r3, r4, r5, lr}
	_talkerID('\0'),
	_messageID{0},
	_badChecksumHandler(nullptr),
	_unknownSentenceHandler(nullptr)
   d5496:	2300      	movs	r3, #0
   d5498:	7303      	strb	r3, [r0, #12]
   d549a:	f8c0 300d 	str.w	r3, [r0, #13]
   d549e:	f8a0 3011 	strh.w	r3, [r0, #17]
   d54a2:	63c3      	str	r3, [r0, #60]	; 0x3c
   d54a4:	6403      	str	r3, [r0, #64]	; 0x40
{
	setBuffer(buf, len);
   d54a6:	f7ff ffc5 	bl	d5434 <_ZN9MicroNMEA9setBufferEPvh>
	clear();
   d54aa:	f7ff ffcf 	bl	d544c <_ZN9MicroNMEA5clearEv>
}
   d54ae:	bd38      	pop	{r3, r4, r5, pc}

000d54b0 <_GLOBAL__sub_I__ZN9MicroNMEA9skipFieldEPKc>:
   d54b0:	f001 bb74 	b.w	d6b9c <HAL_Pin_Map>

000d54b4 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d54b4:	f001 bb72 	b.w	d6b9c <HAL_Pin_Map>

000d54b8 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d54b8:	f001 bb70 	b.w	d6b9c <HAL_Pin_Map>

000d54bc <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d54bc:	b510      	push	{r4, lr}
   d54be:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d54c0:	3024      	adds	r0, #36	; 0x24
   d54c2:	f000 fe8f 	bl	d61e4 <_ZN8FatCache4syncEv>
   d54c6:	b128      	cbz	r0, d54d4 <_ZN9FatVolume9cacheSyncEv+0x18>
   d54c8:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d54cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d54d0:	f000 be88 	b.w	d61e4 <_ZN8FatCache4syncEv>
  }
   d54d4:	bd10      	pop	{r4, pc}

000d54d6 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d54d6:	1e41      	subs	r1, r0, #1
   d54d8:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d54dc:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d54de:	0843      	lsrs	r3, r0, #1
   d54e0:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d54e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d54e8:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d54ec:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d54ee:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d54f0:	d1f5      	bne.n	d54de <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d54f2:	4770      	bx	lr

000d54f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d54f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d54f8:	7803      	ldrb	r3, [r0, #0]
   d54fa:	2b20      	cmp	r3, #32
   d54fc:	f100 0401 	add.w	r4, r0, #1
   d5500:	d101      	bne.n	d5506 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d5502:	4620      	mov	r0, r4
   d5504:	e7f8      	b.n	d54f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5506:	4f70      	ldr	r7, [pc, #448]	; (d56c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d5508:	6088      	str	r0, [r1, #8]
   d550a:	4605      	mov	r5, r0
   d550c:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d550e:	462e      	mov	r6, r5
   d5510:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d5514:	b30b      	cbz	r3, d555a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d5516:	2b2f      	cmp	r3, #47	; 0x2f
   d5518:	d101      	bne.n	d551e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d551a:	1903      	adds	r3, r0, r4
   d551c:	e017      	b.n	d554e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d551e:	2b5c      	cmp	r3, #92	; 0x5c
   d5520:	d102      	bne.n	d5528 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d5522:	2000      	movs	r0, #0
   d5524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5528:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d552c:	b2e4      	uxtb	r4, r4
   d552e:	2c1d      	cmp	r4, #29
   d5530:	d803      	bhi.n	d553a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d5532:	fa27 f404 	lsr.w	r4, r7, r4
   d5536:	07e4      	lsls	r4, r4, #31
   d5538:	d4f3      	bmi.n	d5522 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d553a:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d553e:	2c3c      	cmp	r4, #60	; 0x3c
   d5540:	d0ef      	beq.n	d5522 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d5542:	3b20      	subs	r3, #32
   d5544:	2b5e      	cmp	r3, #94	; 0x5e
   d5546:	d9e1      	bls.n	d550c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d5548:	e7eb      	b.n	d5522 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d554a:	2d2f      	cmp	r5, #47	; 0x2f
   d554c:	d105      	bne.n	d555a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d554e:	461e      	mov	r6, r3
   d5550:	f813 5b01 	ldrb.w	r5, [r3], #1
   d5554:	2d20      	cmp	r5, #32
   d5556:	d1f8      	bne.n	d554a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d5558:	e7f9      	b.n	d554e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d555a:	6016      	str	r6, [r2, #0]
   d555c:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d555e:	4298      	cmp	r0, r3
   d5560:	ebc0 0803 	rsb	r8, r0, r3
   d5564:	d009      	beq.n	d557a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d5566:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d556a:	2a2e      	cmp	r2, #46	; 0x2e
   d556c:	d0f7      	beq.n	d555e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d556e:	2a20      	cmp	r2, #32
   d5570:	d0f5      	beq.n	d555e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d5572:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d5576:	dcd4      	bgt.n	d5522 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d5578:	e001      	b.n	d557e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d557a:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d557e:	f8c1 8004 	str.w	r8, [r1, #4]
   d5582:	f101 030c 	add.w	r3, r1, #12
   d5586:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d558a:	2420      	movs	r4, #32
   d558c:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d5590:	4293      	cmp	r3, r2
   d5592:	d1fb      	bne.n	d558c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d5594:	4603      	mov	r3, r0
   d5596:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d5598:	f813 4b01 	ldrb.w	r4, [r3], #1
   d559c:	2c2e      	cmp	r4, #46	; 0x2e
   d559e:	d0fa      	beq.n	d5596 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d55a0:	2c20      	cmp	r4, #32
   d55a2:	d0f8      	beq.n	d5596 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d55a4:	fab2 f482 	clz	r4, r2
   d55a8:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d55aa:	f108 36ff 	add.w	r6, r8, #4294967295
   d55ae:	1c73      	adds	r3, r6, #1
   d55b0:	d107      	bne.n	d55c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d55b2:	2700      	movs	r7, #0
   d55b4:	f04f 0e07 	mov.w	lr, #7
   d55b8:	463d      	mov	r5, r7
   d55ba:	46ba      	mov	sl, r7
   d55bc:	f04f 0908 	mov.w	r9, #8
   d55c0:	e009      	b.n	d55d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d55c2:	5d83      	ldrb	r3, [r0, r6]
   d55c4:	2b2e      	cmp	r3, #46	; 0x2e
   d55c6:	d0f4      	beq.n	d55b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d55c8:	3e01      	subs	r6, #1
   d55ca:	e7f0      	b.n	d55ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d55cc:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d55ce:	2b20      	cmp	r3, #32
   d55d0:	d104      	bne.n	d55dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d55d2:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d55d4:	3201      	adds	r2, #1
   d55d6:	4542      	cmp	r2, r8
   d55d8:	dbf8      	blt.n	d55cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d55da:	e04b      	b.n	d5674 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d55dc:	2b2e      	cmp	r3, #46	; 0x2e
   d55de:	d102      	bne.n	d55e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d55e0:	42b2      	cmp	r2, r6
   d55e2:	d1f6      	bne.n	d55d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d55e4:	e003      	b.n	d55ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d55e6:	2b22      	cmp	r3, #34	; 0x22
   d55e8:	d017      	beq.n	d561a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d55ea:	2b7c      	cmp	r3, #124	; 0x7c
   d55ec:	d015      	beq.n	d561a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d55ee:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d55f2:	f1bc 0f05 	cmp.w	ip, #5
   d55f6:	d801      	bhi.n	d55fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d55f8:	2b2d      	cmp	r3, #45	; 0x2d
   d55fa:	d10e      	bne.n	d561a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d55fc:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d5600:	f1bc 0f05 	cmp.w	ip, #5
   d5604:	d909      	bls.n	d561a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d5606:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d560a:	f1bc 0f02 	cmp.w	ip, #2
   d560e:	d904      	bls.n	d561a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d5610:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d5614:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d5618:	d902      	bls.n	d5620 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d561a:	42b2      	cmp	r2, r6
   d561c:	d10e      	bne.n	d563c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d561e:	e049      	b.n	d56b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5620:	42b2      	cmp	r2, r6
   d5622:	d047      	beq.n	d56b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d5624:	4575      	cmp	r5, lr
   d5626:	d821      	bhi.n	d566c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d5628:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d562c:	f1bc 0f19 	cmp.w	ip, #25
   d5630:	d808      	bhi.n	d5644 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d5632:	3b20      	subs	r3, #32
   d5634:	b2db      	uxtb	r3, r3
        lc |= bit;
   d5636:	ea49 0707 	orr.w	r7, r9, r7
   d563a:	e00a      	b.n	d5652 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d563c:	4575      	cmp	r5, lr
   d563e:	d815      	bhi.n	d566c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d5640:	2400      	movs	r4, #0
      c = '_';
   d5642:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d5644:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d5648:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d564c:	bf98      	it	ls
   d564e:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d5652:	f105 0c01 	add.w	ip, r5, #1
   d5656:	fa5f fc8c 	uxtb.w	ip, ip
   d565a:	440d      	add	r5, r1
      if (i < 7) {
   d565c:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d5660:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d5662:	d801      	bhi.n	d5668 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d5664:	f881 c00c 	strb.w	ip, [r1, #12]
   d5668:	4665      	mov	r5, ip
   d566a:	e7b3      	b.n	d55d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d566c:	f1be 0f0a 	cmp.w	lr, #10
   d5670:	d117      	bne.n	d56a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d5672:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d5674:	7b4b      	ldrb	r3, [r1, #13]
   d5676:	2b20      	cmp	r3, #32
   d5678:	f43f af53 	beq.w	d5522 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d567c:	b13c      	cbz	r4, d568e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d567e:	ea1a 0f07 	tst.w	sl, r7
   d5682:	bf18      	it	ne
   d5684:	2702      	movne	r7, #2
   d5686:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d5688:	2001      	movs	r0, #1
   d568a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d568e:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d5690:	2001      	movs	r0, #1
   d5692:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d5694:	4419      	add	r1, r3
   d5696:	237e      	movs	r3, #126	; 0x7e
   d5698:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d569a:	2331      	movs	r3, #49	; 0x31
   d569c:	738b      	strb	r3, [r1, #14]
   d569e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d56a2:	42b2      	cmp	r2, r6
   d56a4:	dce5      	bgt.n	d5672 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d56a6:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d56a8:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d56ac:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d56ae:	f04f 0910 	mov.w	r9, #16
   d56b2:	e78e      	b.n	d55d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d56b4:	f1be 0f0a 	cmp.w	lr, #10
   d56b8:	d0db      	beq.n	d5672 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d56ba:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d56bc:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d56c0:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d56c2:	f04f 0910 	mov.w	r9, #16
   d56c6:	e785      	b.n	d55d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d56c8:	31000101 	.word	0x31000101

000d56cc <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d56cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d56d0:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d56d4:	4606      	mov	r6, r0
   d56d6:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d56d8:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d56da:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d56dc:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d56e0:	6869      	ldr	r1, [r5, #4]
   d56e2:	68aa      	ldr	r2, [r5, #8]
   d56e4:	1863      	adds	r3, r4, r1
   d56e6:	b29b      	uxth	r3, r3
   d56e8:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d56ea:	4291      	cmp	r1, r2
   d56ec:	d006      	beq.n	d56fc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d56ee:	f812 0b01 	ldrb.w	r0, [r2], #1
   d56f2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d56f6:	4043      	eors	r3, r0
   d56f8:	b29b      	uxth	r3, r3
   d56fa:	e7f6      	b.n	d56ea <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d56fc:	f1b9 0f03 	cmp.w	r9, #3
   d5700:	bf28      	it	cs
   d5702:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5706:	f109 0204 	add.w	r2, r9, #4
   d570a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d570c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5710:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5712:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5714:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5716:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5718:	bf94      	ite	ls
   d571a:	3130      	addls	r1, #48	; 0x30
   d571c:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d571e:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5720:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d5722:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5726:	d3f1      	bcc.n	d570c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d5728:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d572c:	2100      	movs	r1, #0
   d572e:	735f      	strb	r7, [r3, #13]
   d5730:	4630      	mov	r0, r6
   d5732:	f000 fb31 	bl	d5d98 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d5736:	2101      	movs	r1, #1
   d5738:	4630      	mov	r0, r6
   d573a:	f000 fb10 	bl	d5d5e <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d573e:	4601      	mov	r1, r0
   d5740:	b928      	cbnz	r0, d574e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d5742:	7870      	ldrb	r0, [r6, #1]
   d5744:	fab0 f080 	clz	r0, r0
   d5748:	0940      	lsrs	r0, r0, #5
   d574a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d574e:	7803      	ldrb	r3, [r0, #0]
   d5750:	b14b      	cbz	r3, d5766 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d5752:	7ac3      	ldrb	r3, [r0, #11]
   d5754:	071b      	lsls	r3, r3, #28
   d5756:	d4ee      	bmi.n	d5736 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5758:	220b      	movs	r2, #11
   d575a:	4640      	mov	r0, r8
   d575c:	f005 fabe 	bl	dacdc <memcmp>
   d5760:	2800      	cmp	r0, #0
   d5762:	d1e8      	bne.n	d5736 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5764:	e002      	b.n	d576c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d5766:	2001      	movs	r0, #1
   d5768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d576c:	3401      	adds	r4, #1
   d576e:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d5770:	2c64      	cmp	r4, #100	; 0x64
   d5772:	d1b5      	bne.n	d56e0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d5774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5778 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d577c:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d577e:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5780:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5782:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5786:	9005      	str	r0, [sp, #20]
   d5788:	460e      	mov	r6, r1
   d578a:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d578c:	d101      	bne.n	d5792 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d578e:	2000      	movs	r0, #0
   d5790:	e1a0      	b.n	d5ad4 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5792:	9b05      	ldr	r3, [sp, #20]
   d5794:	781b      	ldrb	r3, [r3, #0]
   d5796:	2b00      	cmp	r3, #0
   d5798:	d1f9      	bne.n	d578e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d579a:	6853      	ldr	r3, [r2, #4]
   d579c:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d579e:	7813      	ldrb	r3, [r2, #0]
   d57a0:	079b      	lsls	r3, r3, #30
   d57a2:	f000 818d 	beq.w	d5ac0 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d57a6:	9b02      	ldr	r3, [sp, #8]
   d57a8:	270d      	movs	r7, #13
   d57aa:	330c      	adds	r3, #12
   d57ac:	fbb3 f7f7 	udiv	r7, r3, r7
   d57b0:	3701      	adds	r7, #1
   d57b2:	b2ff      	uxtb	r7, r7
   d57b4:	2100      	movs	r1, #0
   d57b6:	4630      	mov	r0, r6
   d57b8:	f000 faee 	bl	d5d98 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d57bc:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d57c0:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d57c4:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d57c8:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d57ca:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d57cc:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d57ce:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d57d2:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d57d4:	6972      	ldr	r2, [r6, #20]
   d57d6:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d57d8:	2101      	movs	r1, #1
   d57da:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d57dc:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d57e0:	f000 fabd 	bl	d5d5e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d57e4:	9b07      	ldr	r3, [sp, #28]
   d57e6:	b920      	cbnz	r0, d57f2 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d57e8:	7873      	ldrb	r3, [r6, #1]
   d57ea:	2b00      	cmp	r3, #0
   d57ec:	f000 8090 	beq.w	d5910 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d57f0:	e7cd      	b.n	d578e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d57f2:	7802      	ldrb	r2, [r0, #0]
   d57f4:	2ae5      	cmp	r2, #229	; 0xe5
   d57f6:	d000      	beq.n	d57fa <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d57f8:	b942      	cbnz	r2, d580c <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d57fa:	2c00      	cmp	r4, #0
   d57fc:	bf08      	it	eq
   d57fe:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d5800:	42bc      	cmp	r4, r7
        freeFound++;
   d5802:	bf3c      	itt	cc
   d5804:	3401      	addcc	r4, #1
   d5806:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d5808:	b922      	cbnz	r2, d5814 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d580a:	e081      	b.n	d5910 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d580c:	42bc      	cmp	r4, r7
   d580e:	bf38      	it	cc
   d5810:	2400      	movcc	r4, #0
   d5812:	e003      	b.n	d581c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5814:	2ae5      	cmp	r2, #229	; 0xe5
   d5816:	d101      	bne.n	d581c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d5818:	2500      	movs	r5, #0
   d581a:	e7db      	b.n	d57d4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d581c:	2a2e      	cmp	r2, #46	; 0x2e
   d581e:	d0fb      	beq.n	d5818 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5820:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d5822:	290f      	cmp	r1, #15
   d5824:	d152      	bne.n	d58cc <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d5826:	b93d      	cbnz	r5, d5838 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d5828:	0651      	lsls	r1, r2, #25
   d582a:	d5d3      	bpl.n	d57d4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d582c:	7b43      	ldrb	r3, [r0, #13]
   d582e:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d5830:	f002 051f 	and.w	r5, r2, #31
   d5834:	462b      	mov	r3, r5
   d5836:	e007      	b.n	d5848 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d5838:	3b01      	subs	r3, #1
   d583a:	b2db      	uxtb	r3, r3
   d583c:	429a      	cmp	r2, r3
   d583e:	d1eb      	bne.n	d5818 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5840:	7b42      	ldrb	r2, [r0, #13]
   d5842:	9903      	ldr	r1, [sp, #12]
   d5844:	4291      	cmp	r1, r2
   d5846:	d1e7      	bne.n	d5818 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d5848:	1e5a      	subs	r2, r3, #1
   d584a:	f04f 0c0d 	mov.w	ip, #13
   d584e:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d5852:	9a02      	ldr	r2, [sp, #8]
   d5854:	4562      	cmp	r2, ip
   d5856:	d9df      	bls.n	d5818 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5858:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d585c:	f1be 0f04 	cmp.w	lr, #4
   d5860:	fa5f f28e 	uxtb.w	r2, lr
   d5864:	d804      	bhi.n	d5870 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d5866:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d586a:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d586e:	e00c      	b.n	d588a <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d5870:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5872:	bf95      	itete	ls
   d5874:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5878:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d587c:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5880:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5884:	bf94      	ite	ls
   d5886:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5888:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d588a:	9902      	ldr	r1, [sp, #8]
   d588c:	4561      	cmp	r1, ip
   d588e:	d103      	bne.n	d5898 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d5890:	2a00      	cmp	r2, #0
   d5892:	bf18      	it	ne
   d5894:	2500      	movne	r5, #0
   d5896:	e79d      	b.n	d57d4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5898:	2aff      	cmp	r2, #255	; 0xff
   d589a:	d8bd      	bhi.n	d5818 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d589c:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d589e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d58a2:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d58a4:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d58a8:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d58ac:	bf98      	it	ls
   d58ae:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d58b0:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d58b4:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d58b8:	bf98      	it	ls
   d58ba:	b2d2      	uxtbls	r2, r2
   d58bc:	f1bc 0f19 	cmp.w	ip, #25
   d58c0:	bf9c      	itt	ls
   d58c2:	3120      	addls	r1, #32
   d58c4:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d58c6:	4291      	cmp	r1, r2
   d58c8:	d1a6      	bne.n	d5818 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d58ca:	e0fb      	b.n	d5ac4 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d58cc:	0709      	lsls	r1, r1, #28
   d58ce:	d4a3      	bmi.n	d5818 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d58d0:	b14d      	cbz	r5, d58e6 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d58d2:	2b01      	cmp	r3, #1
   d58d4:	f47f af5b 	bne.w	d578e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d58d8:	f7ff fdfd 	bl	d54d6 <_ZN7FatFile11lfnChecksumEPh>
   d58dc:	9b03      	ldr	r3, [sp, #12]
   d58de:	4283      	cmp	r3, r0
   d58e0:	f47f af55 	bne.w	d578e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d58e4:	e00f      	b.n	d5906 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d58e6:	220b      	movs	r2, #11
   d58e8:	9906      	ldr	r1, [sp, #24]
   d58ea:	9307      	str	r3, [sp, #28]
   d58ec:	f005 f9f6 	bl	dacdc <memcmp>
   d58f0:	9b07      	ldr	r3, [sp, #28]
   d58f2:	2800      	cmp	r0, #0
   d58f4:	f47f af6e 	bne.w	d57d4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d58f8:	f899 2000 	ldrb.w	r2, [r9]
   d58fc:	07d2      	lsls	r2, r2, #31
   d58fe:	d502      	bpl.n	d5906 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d5900:	2201      	movs	r2, #1
   d5902:	9204      	str	r2, [sp, #16]
   d5904:	e766      	b.n	d57d4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d5906:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d590a:	f000 80d1 	beq.w	d5ab0 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d590e:	e73e      	b.n	d578e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d5910:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d5914:	f43f af3b 	beq.w	d578e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5918:	f00b 0303 	and.w	r3, fp, #3
   d591c:	3b01      	subs	r3, #1
   d591e:	2b01      	cmp	r3, #1
   d5920:	f63f af35 	bhi.w	d578e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d5924:	2c00      	cmp	r4, #0
   d5926:	bf08      	it	eq
   d5928:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d592a:	42bc      	cmp	r4, r7
   d592c:	d302      	bcc.n	d5934 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d592e:	9b04      	ldr	r3, [sp, #16]
   d5930:	b9cb      	cbnz	r3, d5966 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d5932:	e01f      	b.n	d5974 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d5934:	2100      	movs	r1, #0
   d5936:	4630      	mov	r0, r6
   d5938:	f000 fa11 	bl	d5d5e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d593c:	b910      	cbnz	r0, d5944 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d593e:	7873      	ldrb	r3, [r6, #1]
   d5940:	b15b      	cbz	r3, d595a <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d5942:	e724      	b.n	d578e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d5944:	3401      	adds	r4, #1
   d5946:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d5948:	e7ef      	b.n	d592a <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d594a:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d594c:	791b      	ldrb	r3, [r3, #4]
   d594e:	2b01      	cmp	r3, #1
   d5950:	d8ed      	bhi.n	d592e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d5952:	3410      	adds	r4, #16
   d5954:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d5956:	42a7      	cmp	r7, r4
   d5958:	d9e9      	bls.n	d592e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d595a:	4630      	mov	r0, r6
   d595c:	f000 f8d2 	bl	d5b04 <_ZN7FatFile13addDirClusterEv>
   d5960:	2800      	cmp	r0, #0
   d5962:	d1f2      	bne.n	d594a <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d5964:	e713      	b.n	d578e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d5966:	4649      	mov	r1, r9
   d5968:	4630      	mov	r0, r6
   d596a:	f7ff feaf 	bl	d56cc <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d596e:	2800      	cmp	r0, #0
   d5970:	f43f af0d 	beq.w	d578e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d5974:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d5978:	4630      	mov	r0, r6
   d597a:	f000 fa0d 	bl	d5d98 <_ZN7FatFile7seekSetEm>
   d597e:	2800      	cmp	r0, #0
   d5980:	f43f af05 	beq.w	d578e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d5984:	1e7d      	subs	r5, r7, #1
   d5986:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5988:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d598a:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d598e:	f04f 080f 	mov.w	r8, #15
   d5992:	e041      	b.n	d5a18 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5994:	2100      	movs	r1, #0
   d5996:	4630      	mov	r0, r6
   d5998:	f000 f9e1 	bl	d5d5e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d599c:	4607      	mov	r7, r0
   d599e:	2800      	cmp	r0, #0
   d59a0:	f43f aef5 	beq.w	d578e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d59a4:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d59a6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d59aa:	42ac      	cmp	r4, r5
   d59ac:	f043 0301 	orr.w	r3, r3, #1
   d59b0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d59b4:	bf0c      	ite	eq
   d59b6:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d59ba:	4622      	movne	r2, r4
   d59bc:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d59be:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d59c2:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d59c6:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d59ca:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d59cc:	f7ff fd83 	bl	d54d6 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d59d0:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d59d2:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d59d4:	f887 a01a 	strb.w	sl, [r7, #26]
   d59d8:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d59dc:	f002 021f 	and.w	r2, r2, #31
   d59e0:	230d      	movs	r3, #13
   d59e2:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d59e4:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d59e8:	435a      	muls	r2, r3
   d59ea:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d59ec:	9902      	ldr	r1, [sp, #8]
   d59ee:	4291      	cmp	r1, r2
   d59f0:	d915      	bls.n	d5a1e <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d59f2:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d59f6:	2b04      	cmp	r3, #4
   d59f8:	fa5f fc83 	uxtb.w	ip, r3
   d59fc:	f103 0001 	add.w	r0, r3, #1
   d5a00:	d813      	bhi.n	d5a2a <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d5a02:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d5a06:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d5a0a:	280d      	cmp	r0, #13
   d5a0c:	f102 0201 	add.w	r2, r2, #1
   d5a10:	4603      	mov	r3, r0
   d5a12:	d1eb      	bne.n	d59ec <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5a14:	3c01      	subs	r4, #1
   d5a16:	b2e4      	uxtb	r4, r4
   d5a18:	2c00      	cmp	r4, #0
   d5a1a:	d1bb      	bne.n	d5994 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d5a1c:	e00e      	b.n	d5a3c <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5a1e:	bf14      	ite	ne
   d5a20:	f04f 31ff 	movne.w	r1, #4294967295
   d5a24:	2100      	moveq	r1, #0
   d5a26:	b289      	uxth	r1, r1
   d5a28:	e7e5      	b.n	d59f6 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d5a2a:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d5a2e:	bf94      	ite	ls
   d5a30:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d5a34:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d5a38:	8099      	strh	r1, [r3, #4]
   d5a3a:	e7e6      	b.n	d5a0a <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5a3c:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d5a3e:	4621      	mov	r1, r4
   d5a40:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5a42:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d5a46:	f000 f98a 	bl	d5d5e <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d5a4a:	4607      	mov	r7, r0
   d5a4c:	2800      	cmp	r0, #0
   d5a4e:	f43f ae9e 	beq.w	d578e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d5a52:	2220      	movs	r2, #32
   d5a54:	4621      	mov	r1, r4
   d5a56:	f005 f976 	bl	dad46 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d5a5a:	464b      	mov	r3, r9
   d5a5c:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d5a60:	603a      	str	r2, [r7, #0]
   d5a62:	685a      	ldr	r2, [r3, #4]
   d5a64:	607a      	str	r2, [r7, #4]
   d5a66:	891a      	ldrh	r2, [r3, #8]
   d5a68:	813a      	strh	r2, [r7, #8]
   d5a6a:	7a9b      	ldrb	r3, [r3, #10]
   d5a6c:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d5a6e:	f899 3000 	ldrb.w	r3, [r9]
   d5a72:	f003 0318 	and.w	r3, r3, #24
   d5a76:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d5a78:	4b18      	ldr	r3, [pc, #96]	; (d5adc <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d5a7a:	681b      	ldr	r3, [r3, #0]
   d5a7c:	b12b      	cbz	r3, d5a8a <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d5a7e:	f107 010e 	add.w	r1, r7, #14
   d5a82:	f107 0010 	add.w	r0, r7, #16
   d5a86:	4798      	blx	r3
   d5a88:	e006      	b.n	d5a98 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d5a8a:	2321      	movs	r3, #33	; 0x21
   d5a8c:	743b      	strb	r3, [r7, #16]
   d5a8e:	2328      	movs	r3, #40	; 0x28
   d5a90:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d5a92:	2308      	movs	r3, #8
   d5a94:	73bc      	strb	r4, [r7, #14]
   d5a96:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d5a98:	8a3b      	ldrh	r3, [r7, #16]
   d5a9a:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d5a9c:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d5a9e:	89fb      	ldrh	r3, [r7, #14]
   d5aa0:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d5aa2:	68b2      	ldr	r2, [r6, #8]
   d5aa4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d5aa8:	f043 0301 	orr.w	r3, r3, #1
   d5aac:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5ab0:	9500      	str	r5, [sp, #0]
   d5ab2:	465b      	mov	r3, fp
   d5ab4:	4652      	mov	r2, sl
   d5ab6:	4631      	mov	r1, r6
   d5ab8:	9805      	ldr	r0, [sp, #20]
   d5aba:	f000 f9b6 	bl	d5e2a <_ZN7FatFile15openCachedEntryEPS_tih>
   d5abe:	e009      	b.n	d5ad4 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5ac0:	2701      	movs	r7, #1
   d5ac2:	e677      	b.n	d57b4 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5ac4:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d5ac8:	f1be 0f0d 	cmp.w	lr, #13
   d5acc:	f43f ae82 	beq.w	d57d4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5ad0:	46d4      	mov	ip, sl
   d5ad2:	e6c3      	b.n	d585c <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5ad4:	b009      	add	sp, #36	; 0x24
   d5ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5ada:	bf00      	nop
   d5adc:	2003e310 	.word	0x2003e310

000d5ae0 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5ae0:	f001 b85c 	b.w	d6b9c <HAL_Pin_Map>

000d5ae4 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5ae4:	f001 b85a 	b.w	d6b9c <HAL_Pin_Map>

000d5ae8 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5ae8:	f001 b858 	b.w	d6b9c <HAL_Pin_Map>

000d5aec <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5aec:	f001 b856 	b.w	d6b9c <HAL_Pin_Map>

000d5af0 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5af0:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5af2:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5af4:	f043 0304 	orr.w	r3, r3, #4
   d5af8:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5afa:	f100 0210 	add.w	r2, r0, #16
   d5afe:	6880      	ldr	r0, [r0, #8]
   d5b00:	f000 bc26 	b.w	d6350 <_ZN9FatVolume15allocateClusterEmPm>

000d5b04 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5b08:	7803      	ldrb	r3, [r0, #0]
   d5b0a:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5b0e:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5b10:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5b14:	b10b      	cbz	r3, d5b1a <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d5b16:	2600      	movs	r6, #0
   d5b18:	e02e      	b.n	d5b78 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d5b1a:	6942      	ldr	r2, [r0, #20]
   d5b1c:	4b18      	ldr	r3, [pc, #96]	; (d5b80 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d5b1e:	429a      	cmp	r2, r3
   d5b20:	d8f9      	bhi.n	d5b16 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d5b22:	f7ff ffe5 	bl	d5af0 <_ZN7FatFile10addClusterEv>
   d5b26:	4606      	mov	r6, r0
   d5b28:	2800      	cmp	r0, #0
   d5b2a:	d0f4      	beq.n	d5b16 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d5b2c:	6921      	ldr	r1, [r4, #16]
   d5b2e:	68a0      	ldr	r0, [r4, #8]
   d5b30:	f000 fba3 	bl	d627a <_ZNK9FatVolume17clusterFirstBlockEm>
   d5b34:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5b36:	68a0      	ldr	r0, [r4, #8]
   d5b38:	2205      	movs	r2, #5
   d5b3a:	4639      	mov	r1, r7
   d5b3c:	3024      	adds	r0, #36	; 0x24
   d5b3e:	f000 fb78 	bl	d6232 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d5b42:	4680      	mov	r8, r0
   d5b44:	2800      	cmp	r0, #0
   d5b46:	d0e6      	beq.n	d5b16 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d5b48:	4629      	mov	r1, r5
   d5b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5b4e:	f005 f8fa 	bl	dad46 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5b52:	2501      	movs	r5, #1
   d5b54:	68a3      	ldr	r3, [r4, #8]
   d5b56:	791a      	ldrb	r2, [r3, #4]
   d5b58:	42aa      	cmp	r2, r5
   d5b5a:	d909      	bls.n	d5b70 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5b5c:	4642      	mov	r2, r8
   d5b5e:	19e9      	adds	r1, r5, r7
   d5b60:	6818      	ldr	r0, [r3, #0]
   d5b62:	f000 fee3 	bl	d692c <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d5b66:	2800      	cmp	r0, #0
   d5b68:	d0d5      	beq.n	d5b16 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5b6a:	3501      	adds	r5, #1
   d5b6c:	b2ed      	uxtb	r5, r5
   d5b6e:	e7f1      	b.n	d5b54 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d5b70:	6963      	ldr	r3, [r4, #20]
   d5b72:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5b76:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d5b78:	4630      	mov	r0, r6
   d5b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5b7e:	bf00      	nop
   d5b80:	001ffdff 	.word	0x001ffdff

000d5b84 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5b84:	b510      	push	{r4, lr}
   d5b86:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5b88:	6880      	ldr	r0, [r0, #8]
   d5b8a:	460a      	mov	r2, r1
   d5b8c:	3024      	adds	r0, #36	; 0x24
   d5b8e:	69a1      	ldr	r1, [r4, #24]
   d5b90:	f000 fb4f 	bl	d6232 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5b94:	b120      	cbz	r0, d5ba0 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5b96:	88a3      	ldrh	r3, [r4, #4]
   d5b98:	f003 030f 	and.w	r3, r3, #15
   d5b9c:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5ba0:	bd10      	pop	{r4, pc}

000d5ba2 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5ba2:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5ba4:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5ba6:	4605      	mov	r5, r0
   d5ba8:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d5baa:	b984      	cbnz	r4, d5bce <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5bac:	2224      	movs	r2, #36	; 0x24
   d5bae:	4621      	mov	r1, r4
   d5bb0:	f005 f8c9 	bl	dad46 <memset>

  m_vol = vol;
   d5bb4:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5bb6:	79f3      	ldrb	r3, [r6, #7]
   d5bb8:	2b10      	cmp	r3, #16
   d5bba:	d003      	beq.n	d5bc4 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5bbc:	2b20      	cmp	r3, #32
   d5bbe:	d106      	bne.n	d5bce <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5bc0:	2340      	movs	r3, #64	; 0x40
   d5bc2:	e000      	b.n	d5bc6 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5bc4:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5bc6:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5bc8:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5bca:	70a8      	strb	r0, [r5, #2]
   d5bcc:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d5bce:	2000      	movs	r0, #0
   d5bd0:	bd70      	pop	{r4, r5, r6, pc}

000d5bd2 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5bd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5bd6:	7803      	ldrb	r3, [r0, #0]
   d5bd8:	4604      	mov	r4, r0
   d5bda:	4689      	mov	r9, r1
   d5bdc:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5bde:	b14b      	cbz	r3, d5bf4 <_ZN7FatFile4readEPvj+0x22>
   d5be0:	7882      	ldrb	r2, [r0, #2]
   d5be2:	07d1      	lsls	r1, r2, #31
   d5be4:	d506      	bpl.n	d5bf4 <_ZN7FatFile4readEPvj+0x22>
   d5be6:	e00c      	b.n	d5c02 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5be8:	465a      	mov	r2, fp
   d5bea:	6921      	ldr	r1, [r4, #16]
   d5bec:	f000 fb4b 	bl	d6286 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5bf0:	2800      	cmp	r0, #0
   d5bf2:	da3d      	bge.n	d5c70 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5bf4:	7863      	ldrb	r3, [r4, #1]
   d5bf6:	f043 0302 	orr.w	r3, r3, #2
   d5bfa:	7063      	strb	r3, [r4, #1]
  return -1;
   d5bfc:	f04f 30ff 	mov.w	r0, #4294967295
   d5c00:	e097      	b.n	d5d32 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5c02:	071a      	lsls	r2, r3, #28
   d5c04:	d503      	bpl.n	d5c0e <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5c06:	69e3      	ldr	r3, [r4, #28]
   d5c08:	6962      	ldr	r2, [r4, #20]
   d5c0a:	1a9b      	subs	r3, r3, r2
   d5c0c:	e007      	b.n	d5c1e <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5c0e:	069a      	lsls	r2, r3, #26
   d5c10:	d508      	bpl.n	d5c24 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5c12:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d5c14:	891a      	ldrh	r2, [r3, #8]
   d5c16:	6963      	ldr	r3, [r4, #20]
   d5c18:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5c1c:	b29b      	uxth	r3, r3
   d5c1e:	429d      	cmp	r5, r3
   d5c20:	bf28      	it	cs
   d5c22:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5c24:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d5c26:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5c2a:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5c2e:	2e00      	cmp	r6, #0
   d5c30:	d035      	beq.n	d5c9e <_ZN7FatFile4readEPvj+0xcc>
   d5c32:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5c34:	6963      	ldr	r3, [r4, #20]
   d5c36:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5c38:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5c3c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5c40:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5c44:	d002      	beq.n	d5c4c <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5c46:	6a03      	ldr	r3, [r0, #32]
   d5c48:	4419      	add	r1, r3
   d5c4a:	e01d      	b.n	d5c88 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5c4c:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5c50:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5c54:	f1ba 0f00 	cmp.w	sl, #0
   d5c58:	d110      	bne.n	d5c7c <_ZN7FatFile4readEPvj+0xaa>
   d5c5a:	f1b8 0f00 	cmp.w	r8, #0
   d5c5e:	d10d      	bne.n	d5c7c <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5c60:	2b00      	cmp	r3, #0
   d5c62:	d1c1      	bne.n	d5be8 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5c64:	0653      	lsls	r3, r2, #25
   d5c66:	bf4c      	ite	mi
   d5c68:	6a03      	ldrmi	r3, [r0, #32]
   d5c6a:	6a23      	ldrpl	r3, [r4, #32]
   d5c6c:	6123      	str	r3, [r4, #16]
   d5c6e:	e005      	b.n	d5c7c <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5c70:	d104      	bne.n	d5c7c <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d5c72:	7823      	ldrb	r3, [r4, #0]
   d5c74:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5c78:	d111      	bne.n	d5c9e <_ZN7FatFile4readEPvj+0xcc>
   d5c7a:	e7bb      	b.n	d5bf4 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5c7c:	6921      	ldr	r1, [r4, #16]
   d5c7e:	68a0      	ldr	r0, [r4, #8]
   d5c80:	f000 fafb 	bl	d627a <_ZNK9FatVolume17clusterFirstBlockEm>
   d5c84:	eb08 0100 	add.w	r1, r8, r0
   d5c88:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5c8a:	f1ba 0f00 	cmp.w	sl, #0
   d5c8e:	d135      	bne.n	d5cfc <_ZN7FatFile4readEPvj+0x12a>
   d5c90:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5c94:	d332      	bcc.n	d5cfc <_ZN7FatFile4readEPvj+0x12a>
   d5c96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5c98:	4299      	cmp	r1, r3
   d5c9a:	d102      	bne.n	d5ca2 <_ZN7FatFile4readEPvj+0xd0>
   d5c9c:	e02e      	b.n	d5cfc <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5c9e:	1ba8      	subs	r0, r5, r6
   d5ca0:	e047      	b.n	d5d32 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5ca2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5ca6:	d31b      	bcc.n	d5ce0 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5ca8:	7822      	ldrb	r2, [r4, #0]
   d5caa:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5cac:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5cb0:	d406      	bmi.n	d5cc0 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5cb2:	7902      	ldrb	r2, [r0, #4]
   d5cb4:	ebc8 0202 	rsb	r2, r8, r2
   d5cb8:	b2d2      	uxtb	r2, r2
   d5cba:	4592      	cmp	sl, r2
   d5cbc:	bf28      	it	cs
   d5cbe:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5cc0:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5cc2:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5cc6:	d207      	bcs.n	d5cd8 <_ZN7FatFile4readEPvj+0x106>
   d5cc8:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5cca:	4653      	mov	r3, sl
   d5ccc:	464a      	mov	r2, r9
   d5cce:	6800      	ldr	r0, [r0, #0]
   d5cd0:	f000 fdea 	bl	d68a8 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5cd4:	b960      	cbnz	r0, d5cf0 <_ZN7FatFile4readEPvj+0x11e>
   d5cd6:	e78d      	b.n	d5bf4 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5cd8:	4453      	add	r3, sl
   d5cda:	4299      	cmp	r1, r3
   d5cdc:	d321      	bcc.n	d5d22 <_ZN7FatFile4readEPvj+0x150>
   d5cde:	e7f3      	b.n	d5cc8 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5ce0:	464a      	mov	r2, r9
   d5ce2:	6800      	ldr	r0, [r0, #0]
   d5ce4:	f000 fd98 	bl	d6818 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5ce8:	2800      	cmp	r0, #0
   d5cea:	d083      	beq.n	d5bf4 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5cec:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5cf0:	6963      	ldr	r3, [r4, #20]
   d5cf2:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5cf4:	44b9      	add	r9, r7
    m_curPosition += n;
   d5cf6:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5cf8:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5cfa:	e798      	b.n	d5c2e <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5cfc:	2200      	movs	r2, #0
   d5cfe:	3024      	adds	r0, #36	; 0x24
   d5d00:	f000 fa97 	bl	d6232 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5d04:	2800      	cmp	r0, #0
   d5d06:	f43f af75 	beq.w	d5bf4 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5d0a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5d0e:	42b7      	cmp	r7, r6
   d5d10:	bf28      	it	cs
   d5d12:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5d14:	eb00 010a 	add.w	r1, r0, sl
   d5d18:	463a      	mov	r2, r7
   d5d1a:	4648      	mov	r0, r9
   d5d1c:	f004 ffed 	bl	dacfa <memcpy>
   d5d20:	e7e6      	b.n	d5cf0 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5d22:	3024      	adds	r0, #36	; 0x24
   d5d24:	9101      	str	r1, [sp, #4]
   d5d26:	f000 fa5d 	bl	d61e4 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5d2a:	9901      	ldr	r1, [sp, #4]
   d5d2c:	2800      	cmp	r0, #0
   d5d2e:	d1cb      	bne.n	d5cc8 <_ZN7FatFile4readEPvj+0xf6>
   d5d30:	e760      	b.n	d5bf4 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5d32:	b003      	add	sp, #12
   d5d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5d38 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d5d38:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5d3a:	2201      	movs	r2, #1
   d5d3c:	f10d 0107 	add.w	r1, sp, #7
   d5d40:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d5d42:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d5d44:	6905      	ldr	r5, [r0, #16]
   d5d46:	f7ff ff44 	bl	d5bd2 <_ZN7FatFile4readEPvj>
   d5d4a:	2801      	cmp	r0, #1
   d5d4c:	bf05      	ittet	eq
   d5d4e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d5d52:	6166      	streq	r6, [r4, #20]
   d5d54:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d5d58:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d5d5a:	b002      	add	sp, #8
   d5d5c:	bd70      	pop	{r4, r5, r6, pc}

000d5d5e <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5d5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5d60:	6943      	ldr	r3, [r0, #20]
   d5d62:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5d66:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d5d68:	b105      	cbz	r5, d5d6c <_ZN7FatFile12readDirCacheEb+0xe>
   d5d6a:	b969      	cbnz	r1, d5d88 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d5d6c:	2201      	movs	r2, #1
   d5d6e:	f10d 0107 	add.w	r1, sp, #7
   d5d72:	4620      	mov	r0, r4
   d5d74:	f7ff ff2d 	bl	d5bd2 <_ZN7FatFile4readEPvj>
   d5d78:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d5d7a:	2801      	cmp	r0, #1
   d5d7c:	d001      	beq.n	d5d82 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d5d7e:	2000      	movs	r0, #0
   d5d80:	e008      	b.n	d5d94 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d5d82:	6963      	ldr	r3, [r4, #20]
   d5d84:	331f      	adds	r3, #31
   d5d86:	e000      	b.n	d5d8a <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d5d88:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5d8a:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d5d8c:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5d8e:	3030      	adds	r0, #48	; 0x30
   d5d90:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d5d94:	b003      	add	sp, #12
   d5d96:	bd30      	pop	{r4, r5, pc}

000d5d98 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d9c:	460e      	mov	r6, r1
   d5d9e:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5da0:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5da2:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5da4:	2900      	cmp	r1, #0
   d5da6:	d039      	beq.n	d5e1c <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5da8:	6945      	ldr	r5, [r0, #20]
   d5daa:	42b5      	cmp	r5, r6
   d5dac:	d03a      	beq.n	d5e24 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5dae:	b90e      	cbnz	r6, d5db4 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5db0:	6106      	str	r6, [r0, #16]
    goto done;
   d5db2:	e031      	b.n	d5e18 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5db4:	070b      	lsls	r3, r1, #28
   d5db6:	d503      	bpl.n	d5dc0 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5db8:	69c3      	ldr	r3, [r0, #28]
   d5dba:	429e      	cmp	r6, r3
   d5dbc:	d82e      	bhi.n	d5e1c <_ZN7FatFile7seekSetEm+0x84>
   d5dbe:	e007      	b.n	d5dd0 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5dc0:	0688      	lsls	r0, r1, #26
   d5dc2:	d505      	bpl.n	d5dd0 <_ZN7FatFile7seekSetEm+0x38>
   d5dc4:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5dc6:	891b      	ldrh	r3, [r3, #8]
   d5dc8:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5dcc:	d826      	bhi.n	d5e1c <_ZN7FatFile7seekSetEm+0x84>
   d5dce:	e023      	b.n	d5e18 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5dd0:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5dd4:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5dd8:	1e6a      	subs	r2, r5, #1
   d5dda:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5dde:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5de0:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5de2:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5de4:	429a      	cmp	r2, r3
   d5de6:	d800      	bhi.n	d5dea <_ZN7FatFile7seekSetEm+0x52>
   d5de8:	b94d      	cbnz	r5, d5dfe <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5dea:	064a      	lsls	r2, r1, #25
   d5dec:	bf4c      	ite	mi
   d5dee:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5df2:	6a22      	ldrpl	r2, [r4, #32]
   d5df4:	6122      	str	r2, [r4, #16]
   d5df6:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5df8:	f104 0810 	add.w	r8, r4, #16
   d5dfc:	e00a      	b.n	d5e14 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5dfe:	1a9b      	subs	r3, r3, r2
   d5e00:	e7f9      	b.n	d5df6 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5e02:	4642      	mov	r2, r8
   d5e04:	6921      	ldr	r1, [r4, #16]
   d5e06:	68a0      	ldr	r0, [r4, #8]
   d5e08:	f000 fa3d 	bl	d6286 <_ZN9FatVolume6fatGetEmPm>
   d5e0c:	2800      	cmp	r0, #0
   d5e0e:	f105 35ff 	add.w	r5, r5, #4294967295
   d5e12:	dd03      	ble.n	d5e1c <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5e14:	2d00      	cmp	r5, #0
   d5e16:	d1f4      	bne.n	d5e02 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5e18:	6166      	str	r6, [r4, #20]
   d5e1a:	e003      	b.n	d5e24 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5e1c:	6127      	str	r7, [r4, #16]
  return false;
   d5e1e:	2000      	movs	r0, #0
   d5e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5e24:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5e2a <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e2c:	460f      	mov	r7, r1
   d5e2e:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5e30:	2100      	movs	r1, #0
   d5e32:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5e34:	4604      	mov	r4, r0
   d5e36:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5e38:	f004 ff85 	bl	dad46 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d5e3c:	68b8      	ldr	r0, [r7, #8]
   d5e3e:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5e40:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d5e44:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5e46:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d5e4a:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d5e4c:	6a3b      	ldr	r3, [r7, #32]
   d5e4e:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5e50:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5e52:	7acb      	ldrb	r3, [r1, #11]
   d5e54:	071d      	lsls	r5, r3, #28
   d5e56:	d44c      	bmi.n	d5ef2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5e58:	1883      	adds	r3, r0, r2
   d5e5a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d5e5e:	f003 0317 	and.w	r3, r3, #23
   d5e62:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5e64:	7ac9      	ldrb	r1, [r1, #11]
   d5e66:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d5e6a:	bf04      	itt	eq
   d5e6c:	f043 0308 	orreq.w	r3, r3, #8
   d5e70:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5e72:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5e76:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d5e78:	f006 0303 	and.w	r3, r6, #3
   d5e7c:	2b01      	cmp	r3, #1
   d5e7e:	d009      	beq.n	d5e94 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5e80:	2b02      	cmp	r3, #2
   d5e82:	d005      	beq.n	d5e90 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d5e84:	2b00      	cmp	r3, #0
   d5e86:	d134      	bne.n	d5ef2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d5e88:	0571      	lsls	r1, r6, #21
   d5e8a:	d432      	bmi.n	d5ef2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d5e8c:	2301      	movs	r3, #1
   d5e8e:	e002      	b.n	d5e96 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d5e90:	2303      	movs	r3, #3
   d5e92:	e000      	b.n	d5e96 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d5e94:	2302      	movs	r3, #2
   d5e96:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d5e98:	78a1      	ldrb	r1, [r4, #2]
   d5e9a:	078b      	lsls	r3, r1, #30
   d5e9c:	d503      	bpl.n	d5ea6 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d5e9e:	7823      	ldrb	r3, [r4, #0]
   d5ea0:	f013 0f11 	tst.w	r3, #17
   d5ea4:	d125      	bne.n	d5ef2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5ea6:	b24b      	sxtb	r3, r1
   d5ea8:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d5eac:	f006 0108 	and.w	r1, r6, #8
   d5eb0:	bf14      	ite	ne
   d5eb2:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d5eb6:	2700      	moveq	r7, #0
   d5eb8:	4319      	orrs	r1, r3
   d5eba:	4339      	orrs	r1, r7
   d5ebc:	70a1      	strb	r1, [r4, #2]
   d5ebe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5ec0:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5ec2:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d5ec4:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d5ec6:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d5eca:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d5ece:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5ed2:	d504      	bpl.n	d5ede <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5ed4:	b181      	cbz	r1, d5ef8 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5ed6:	f000 fa76 	bl	d63c6 <_ZN9FatVolume9freeChainEm>
   d5eda:	b968      	cbnz	r0, d5ef8 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5edc:	e009      	b.n	d5ef2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d5ede:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5ee0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d5ee2:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5ee4:	0473      	lsls	r3, r6, #17
   d5ee6:	d50c      	bpl.n	d5f02 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d5ee8:	69e1      	ldr	r1, [r4, #28]
   d5eea:	4620      	mov	r0, r4
   d5eec:	f7ff ff54 	bl	d5d98 <_ZN7FatFile7seekSetEm>
   d5ef0:	b938      	cbnz	r0, d5f02 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5ef2:	2000      	movs	r0, #0
   d5ef4:	7020      	strb	r0, [r4, #0]
  return false;
   d5ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d5ef8:	78a3      	ldrb	r3, [r4, #2]
   d5efa:	f043 0304 	orr.w	r3, r3, #4
   d5efe:	70a3      	strb	r3, [r4, #2]
   d5f00:	e7f0      	b.n	d5ee4 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5f02:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d5f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5f08 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5f08:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5f0a:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5f0c:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5f0e:	b90b      	cbnz	r3, d5f14 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5f10:	2001      	movs	r0, #1
   d5f12:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5f14:	7883      	ldrb	r3, [r0, #2]
   d5f16:	075a      	lsls	r2, r3, #29
   d5f18:	d523      	bpl.n	d5f62 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5f1a:	2101      	movs	r1, #1
   d5f1c:	f7ff fe32 	bl	d5b84 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5f20:	4605      	mov	r5, r0
   d5f22:	b928      	cbnz	r0, d5f30 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5f24:	7863      	ldrb	r3, [r4, #1]
   d5f26:	f043 0301 	orr.w	r3, r3, #1
   d5f2a:	7063      	strb	r3, [r4, #1]
  return false;
   d5f2c:	2000      	movs	r0, #0
   d5f2e:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5f30:	7803      	ldrb	r3, [r0, #0]
   d5f32:	2be5      	cmp	r3, #229	; 0xe5
   d5f34:	d0f6      	beq.n	d5f24 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5f36:	7823      	ldrb	r3, [r4, #0]
   d5f38:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5f3a:	bf44      	itt	mi
   d5f3c:	69e3      	ldrmi	r3, [r4, #28]
   d5f3e:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5f40:	8c23      	ldrh	r3, [r4, #32]
   d5f42:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5f44:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5f46:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5f48:	4b09      	ldr	r3, [pc, #36]	; (d5f70 <_ZN7FatFile4syncEv+0x68>)
   d5f4a:	681b      	ldr	r3, [r3, #0]
   d5f4c:	b12b      	cbz	r3, d5f5a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5f4e:	f100 0116 	add.w	r1, r0, #22
   d5f52:	3018      	adds	r0, #24
   d5f54:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5f56:	8b2b      	ldrh	r3, [r5, #24]
   d5f58:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5f5a:	78a3      	ldrb	r3, [r4, #2]
   d5f5c:	f023 0304 	bic.w	r3, r3, #4
   d5f60:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5f62:	68a0      	ldr	r0, [r4, #8]
   d5f64:	f7ff faaa 	bl	d54bc <_ZN9FatVolume9cacheSyncEv>
   d5f68:	2800      	cmp	r0, #0
   d5f6a:	d0db      	beq.n	d5f24 <_ZN7FatFile4syncEv+0x1c>
   d5f6c:	e7d0      	b.n	d5f10 <_ZN7FatFile4syncEv+0x8>
   d5f6e:	bf00      	nop
   d5f70:	2003e310 	.word	0x2003e310

000d5f74 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5f74:	b510      	push	{r4, lr}
   d5f76:	4604      	mov	r4, r0
  bool rtn = sync();
   d5f78:	f7ff ffc6 	bl	d5f08 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5f7c:	2300      	movs	r3, #0
   d5f7e:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5f80:	bd10      	pop	{r4, pc}

000d5f82 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5f82:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5f84:	b093      	sub	sp, #76	; 0x4c
   d5f86:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5f88:	2300      	movs	r3, #0
   d5f8a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5f8e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5f92:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5f94:	9201      	str	r2, [sp, #4]
   d5f96:	4606      	mov	r6, r0
   d5f98:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5f9a:	b10b      	cbz	r3, d5fa0 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d5f9c:	2000      	movs	r0, #0
   d5f9e:	e03d      	b.n	d601c <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5fa0:	780b      	ldrb	r3, [r1, #0]
   d5fa2:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5fa6:	d0f9      	beq.n	d5f9c <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d5fa8:	7813      	ldrb	r3, [r2, #0]
   d5faa:	2b2f      	cmp	r3, #47	; 0x2f
   d5fac:	d112      	bne.n	d5fd4 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d5fae:	9b01      	ldr	r3, [sp, #4]
   d5fb0:	781a      	ldrb	r2, [r3, #0]
   d5fb2:	2a2f      	cmp	r2, #47	; 0x2f
   d5fb4:	d102      	bne.n	d5fbc <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d5fb6:	3301      	adds	r3, #1
   d5fb8:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d5fba:	e7f8      	b.n	d5fae <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d5fbc:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d5fbe:	b91a      	cbnz	r2, d5fc8 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d5fc0:	4630      	mov	r0, r6
   d5fc2:	f7ff fdee 	bl	d5ba2 <_ZN7FatFile8openRootEP9FatVolume>
   d5fc6:	e029      	b.n	d601c <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5fc8:	a809      	add	r0, sp, #36	; 0x24
   d5fca:	f7ff fdea 	bl	d5ba2 <_ZN7FatFile8openRootEP9FatVolume>
   d5fce:	2800      	cmp	r0, #0
   d5fd0:	d0e4      	beq.n	d5f9c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d5fd2:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5fd4:	aa01      	add	r2, sp, #4
   d5fd6:	a903      	add	r1, sp, #12
   d5fd8:	9801      	ldr	r0, [sp, #4]
   d5fda:	f7ff fa8b 	bl	d54f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d5fde:	2800      	cmp	r0, #0
   d5fe0:	d0dc      	beq.n	d5f9c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d5fe2:	9b01      	ldr	r3, [sp, #4]
   d5fe4:	781b      	ldrb	r3, [r3, #0]
   d5fe6:	b19b      	cbz	r3, d6010 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d5fe8:	2300      	movs	r3, #0
   d5fea:	aa03      	add	r2, sp, #12
   d5fec:	4621      	mov	r1, r4
   d5fee:	4630      	mov	r0, r6
   d5ff0:	f7ff fbc2 	bl	d5778 <_ZN7FatFile4openEPS_P7fname_ti>
   d5ff4:	2800      	cmp	r0, #0
   d5ff6:	d0d1      	beq.n	d5f9c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d5ff8:	4635      	mov	r5, r6
   d5ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ffc:	ac09      	add	r4, sp, #36	; 0x24
   d5ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6004:	682b      	ldr	r3, [r5, #0]
   d6006:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d6008:	4630      	mov	r0, r6
   d600a:	f7ff ffb3 	bl	d5f74 <_ZN7FatFile5closeEv>
   d600e:	e7e0      	b.n	d5fd2 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d6010:	463b      	mov	r3, r7
   d6012:	aa03      	add	r2, sp, #12
   d6014:	4621      	mov	r1, r4
   d6016:	4630      	mov	r0, r6
   d6018:	f7ff fbae 	bl	d5778 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d601c:	b013      	add	sp, #76	; 0x4c
   d601e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6020 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6024:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6026:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6028:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d602a:	4604      	mov	r4, r0
   d602c:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d602e:	d508      	bpl.n	d6042 <_ZN7FatFile5writeEPKvj+0x22>
   d6030:	7883      	ldrb	r3, [r0, #2]
   d6032:	079a      	lsls	r2, r3, #30
   d6034:	d505      	bpl.n	d6042 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d6036:	071b      	lsls	r3, r3, #28
   d6038:	d50b      	bpl.n	d6052 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d603a:	69e1      	ldr	r1, [r4, #28]
   d603c:	f7ff feac 	bl	d5d98 <_ZN7FatFile7seekSetEm>
   d6040:	b938      	cbnz	r0, d6052 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d6042:	7863      	ldrb	r3, [r4, #1]
   d6044:	f043 0301 	orr.w	r3, r3, #1
   d6048:	7063      	strb	r3, [r4, #1]
  return -1;
   d604a:	f04f 30ff 	mov.w	r0, #4294967295
   d604e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d6052:	6963      	ldr	r3, [r4, #20]
   d6054:	43db      	mvns	r3, r3
   d6056:	4598      	cmp	r8, r3
   d6058:	d8f3      	bhi.n	d6042 <_ZN7FatFile5writeEPKvj+0x22>
   d605a:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d605c:	f04f 0a00 	mov.w	sl, #0
   d6060:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d6062:	2e00      	cmp	r6, #0
   d6064:	f000 8081 	beq.w	d616a <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d6068:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d606a:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d606c:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d6070:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6074:	d11c      	bne.n	d60b0 <_ZN7FatFile5writeEPKvj+0x90>
   d6076:	b9df      	cbnz	r7, d60b0 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d6078:	6921      	ldr	r1, [r4, #16]
   d607a:	b171      	cbz	r1, d609a <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d607c:	f104 0210 	add.w	r2, r4, #16
   d6080:	f000 f901 	bl	d6286 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d6084:	2800      	cmp	r0, #0
   d6086:	dbdc      	blt.n	d6042 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d6088:	f040 808e 	bne.w	d61a8 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d608c:	4620      	mov	r0, r4
   d608e:	f7ff fd2f 	bl	d5af0 <_ZN7FatFile10addClusterEv>
   d6092:	2800      	cmp	r0, #0
   d6094:	f040 8088 	bne.w	d61a8 <_ZN7FatFile5writeEPKvj+0x188>
   d6098:	e7d3      	b.n	d6042 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d609a:	6a23      	ldr	r3, [r4, #32]
   d609c:	b93b      	cbnz	r3, d60ae <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d609e:	4620      	mov	r0, r4
   d60a0:	f7ff fd26 	bl	d5af0 <_ZN7FatFile10addClusterEv>
   d60a4:	2800      	cmp	r0, #0
   d60a6:	d0cc      	beq.n	d6042 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d60a8:	6923      	ldr	r3, [r4, #16]
   d60aa:	6223      	str	r3, [r4, #32]
   d60ac:	e000      	b.n	d60b0 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d60ae:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d60b0:	6921      	ldr	r1, [r4, #16]
   d60b2:	68a0      	ldr	r0, [r4, #8]
   d60b4:	f000 f8e1 	bl	d627a <_ZNK9FatVolume17clusterFirstBlockEm>
   d60b8:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d60ba:	b917      	cbnz	r7, d60c2 <_ZN7FatFile5writeEPKvj+0xa2>
   d60bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d60c0:	d221      	bcs.n	d6106 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d60c2:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d60c6:	42b5      	cmp	r5, r6
   d60c8:	bf28      	it	cs
   d60ca:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d60cc:	b937      	cbnz	r7, d60dc <_ZN7FatFile5writeEPKvj+0xbc>
   d60ce:	6963      	ldr	r3, [r4, #20]
   d60d0:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d60d2:	4293      	cmp	r3, r2
   d60d4:	bf34      	ite	cc
   d60d6:	2201      	movcc	r2, #1
   d60d8:	2205      	movcs	r2, #5
   d60da:	e000      	b.n	d60de <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d60dc:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d60de:	68a0      	ldr	r0, [r4, #8]
   d60e0:	3024      	adds	r0, #36	; 0x24
   d60e2:	f000 f8a6 	bl	d6232 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d60e6:	2800      	cmp	r0, #0
   d60e8:	d0ab      	beq.n	d6042 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d60ea:	4438      	add	r0, r7
   d60ec:	462a      	mov	r2, r5
   d60ee:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d60f0:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d60f2:	f004 fe02 	bl	dacfa <memcpy>
      if (512 == (n + blockOffset)) {
   d60f6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d60fa:	d130      	bne.n	d615e <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d60fc:	68a0      	ldr	r0, [r4, #8]
   d60fe:	3024      	adds	r0, #36	; 0x24
   d6100:	f000 f870 	bl	d61e4 <_ZN8FatCache4syncEv>
   d6104:	e017      	b.n	d6136 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d6106:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d610a:	68a0      	ldr	r0, [r4, #8]
   d610c:	d315      	bcc.n	d613a <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d610e:	7902      	ldrb	r2, [r0, #4]
   d6110:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d6112:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d6114:	b2d2      	uxtb	r2, r2
   d6116:	4293      	cmp	r3, r2
   d6118:	bf28      	it	cs
   d611a:	4613      	movcs	r3, r2
   d611c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d611e:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d6120:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6124:	d302      	bcc.n	d612c <_ZN7FatFile5writeEPKvj+0x10c>
   d6126:	441a      	add	r2, r3
   d6128:	4291      	cmp	r1, r2
   d612a:	d337      	bcc.n	d619c <_ZN7FatFile5writeEPKvj+0x17c>
   d612c:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d612e:	464a      	mov	r2, r9
   d6130:	6838      	ldr	r0, [r7, #0]
   d6132:	f000 fc6d 	bl	d6a10 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d6136:	b990      	cbnz	r0, d615e <_ZN7FatFile5writeEPKvj+0x13e>
   d6138:	e783      	b.n	d6042 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d613a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d613c:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d613e:	bf02      	ittt	eq
   d6140:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6144:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6148:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d614a:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d614c:	464a      	mov	r2, r9
   d614e:	6818      	ldr	r0, [r3, #0]
   d6150:	f000 fbec 	bl	d692c <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d6154:	2800      	cmp	r0, #0
   d6156:	f43f af74 	beq.w	d6042 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d615a:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d615e:	6963      	ldr	r3, [r4, #20]
   d6160:	442b      	add	r3, r5
   d6162:	6163      	str	r3, [r4, #20]
    src += n;
   d6164:	44a9      	add	r9, r5
    nToWrite -= n;
   d6166:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d6168:	e77a      	b.n	d6060 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d616a:	69e2      	ldr	r2, [r4, #28]
   d616c:	4293      	cmp	r3, r2
   d616e:	d901      	bls.n	d6174 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d6170:	61e3      	str	r3, [r4, #28]
   d6172:	e002      	b.n	d617a <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d6174:	4b0f      	ldr	r3, [pc, #60]	; (d61b4 <_ZN7FatFile5writeEPKvj+0x194>)
   d6176:	681b      	ldr	r3, [r3, #0]
   d6178:	b11b      	cbz	r3, d6182 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d617a:	78a3      	ldrb	r3, [r4, #2]
   d617c:	f043 0304 	orr.w	r3, r3, #4
   d6180:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d6182:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d6186:	2b00      	cmp	r3, #0
   d6188:	db02      	blt.n	d6190 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d618a:	4640      	mov	r0, r8
   d618c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d6190:	4620      	mov	r0, r4
   d6192:	f7ff feb9 	bl	d5f08 <_ZN7FatFile4syncEv>
   d6196:	2800      	cmp	r0, #0
   d6198:	d1f7      	bne.n	d618a <_ZN7FatFile5writeEPKvj+0x16a>
   d619a:	e752      	b.n	d6042 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d619c:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d61a0:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d61a4:	62c2      	str	r2, [r0, #44]	; 0x2c
   d61a6:	e7c1      	b.n	d612c <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d61a8:	6921      	ldr	r1, [r4, #16]
   d61aa:	68a0      	ldr	r0, [r4, #8]
   d61ac:	f000 f865 	bl	d627a <_ZNK9FatVolume17clusterFirstBlockEm>
   d61b0:	4601      	mov	r1, r0
   d61b2:	e783      	b.n	d60bc <_ZN7FatFile5writeEPKvj+0x9c>
   d61b4:	2003e310 	.word	0x2003e310

000d61b8 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d61b8:	f000 bcf0 	b.w	d6b9c <HAL_Pin_Map>

000d61bc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d61bc:	b570      	push	{r4, r5, r6, lr}
   d61be:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d61c0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d61c2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d61c4:	b149      	cbz	r1, d61da <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d61c6:	f004 fe28 	bl	dae1a <strlen>
   d61ca:	682b      	ldr	r3, [r5, #0]
   d61cc:	4602      	mov	r2, r0
   d61ce:	4621      	mov	r1, r4
   d61d0:	4628      	mov	r0, r5
   d61d2:	68db      	ldr	r3, [r3, #12]
    }
   d61d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d61d8:	4718      	bx	r3
    }
   d61da:	bd70      	pop	{r4, r5, r6, pc}

000d61dc <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d61dc:	f000 bcde 	b.w	d6b9c <HAL_Pin_Map>

000d61e0 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d61e0:	f000 bcdc 	b.w	d6b9c <HAL_Pin_Map>

000d61e4 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d61e4:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d61e6:	7803      	ldrb	r3, [r0, #0]
   d61e8:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d61ea:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d61ec:	d51e      	bpl.n	d622c <_ZN8FatCache4syncEv+0x48>
   d61ee:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d61f0:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d61f2:	f100 060c 	add.w	r6, r0, #12
   d61f6:	4632      	mov	r2, r6
   d61f8:	6818      	ldr	r0, [r3, #0]
   d61fa:	f000 fb97 	bl	d692c <_ZN9SdSpiCard10writeBlockEmPKh>
   d61fe:	4605      	mov	r5, r0
   d6200:	b908      	cbnz	r0, d6206 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d6202:	2500      	movs	r5, #0
   d6204:	e013      	b.n	d622e <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d6206:	7823      	ldrb	r3, [r4, #0]
   d6208:	079b      	lsls	r3, r3, #30
   d620a:	d404      	bmi.n	d6216 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d620c:	7823      	ldrb	r3, [r4, #0]
   d620e:	f023 0301 	bic.w	r3, r3, #1
   d6212:	7023      	strb	r3, [r4, #0]
   d6214:	e00b      	b.n	d622e <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d6216:	6863      	ldr	r3, [r4, #4]
   d6218:	68a0      	ldr	r0, [r4, #8]
   d621a:	6919      	ldr	r1, [r3, #16]
   d621c:	4632      	mov	r2, r6
   d621e:	4401      	add	r1, r0
   d6220:	6818      	ldr	r0, [r3, #0]
   d6222:	f000 fb83 	bl	d692c <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d6226:	2800      	cmp	r0, #0
   d6228:	d1f0      	bne.n	d620c <_ZN8FatCache4syncEv+0x28>
   d622a:	e7ea      	b.n	d6202 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d622c:	2501      	movs	r5, #1

fail:
  return false;
}
   d622e:	4628      	mov	r0, r5
   d6230:	bd70      	pop	{r4, r5, r6, pc}

000d6232 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6232:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d6234:	6883      	ldr	r3, [r0, #8]
   d6236:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6238:	4604      	mov	r4, r0
   d623a:	460e      	mov	r6, r1
   d623c:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d623e:	d014      	beq.n	d626a <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d6240:	f7ff ffd0 	bl	d61e4 <_ZN8FatCache4syncEv>
   d6244:	b908      	cbnz	r0, d624a <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d6246:	2000      	movs	r0, #0
   d6248:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d624a:	076b      	lsls	r3, r5, #29
   d624c:	d503      	bpl.n	d6256 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d624e:	2300      	movs	r3, #0
   d6250:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d6252:	60a6      	str	r6, [r4, #8]
   d6254:	e009      	b.n	d626a <_ZN8FatCache4readEmh+0x38>
   d6256:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6258:	f104 020c 	add.w	r2, r4, #12
   d625c:	4631      	mov	r1, r6
   d625e:	6818      	ldr	r0, [r3, #0]
   d6260:	f000 fada 	bl	d6818 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d6264:	2800      	cmp	r0, #0
   d6266:	d1f2      	bne.n	d624e <_ZN8FatCache4readEmh+0x1c>
   d6268:	e7ed      	b.n	d6246 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d626a:	7823      	ldrb	r3, [r4, #0]
   d626c:	4620      	mov	r0, r4
   d626e:	f005 0503 	and.w	r5, r5, #3
   d6272:	431d      	orrs	r5, r3
   d6274:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d6278:	bd70      	pop	{r4, r5, r6, pc}

000d627a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d627a:	7983      	ldrb	r3, [r0, #6]
   d627c:	6940      	ldr	r0, [r0, #20]
   d627e:	3902      	subs	r1, #2
   d6280:	4099      	lsls	r1, r3
}
   d6282:	4408      	add	r0, r1
   d6284:	4770      	bx	lr

000d6286 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6286:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d6288:	b570      	push	{r4, r5, r6, lr}
   d628a:	4605      	mov	r5, r0
   d628c:	460c      	mov	r4, r1
   d628e:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6290:	d802      	bhi.n	d6298 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d6292:	f04f 30ff 	mov.w	r0, #4294967295
   d6296:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6298:	69c3      	ldr	r3, [r0, #28]
   d629a:	4299      	cmp	r1, r3
   d629c:	d8f9      	bhi.n	d6292 <_ZN9FatVolume6fatGetEmPm+0xc>
   d629e:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d62a0:	2b20      	cmp	r3, #32
   d62a2:	d110      	bne.n	d62c6 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d62a4:	6981      	ldr	r1, [r0, #24]
   d62a6:	2202      	movs	r2, #2
   d62a8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d62ac:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d62b0:	f7ff ffbf 	bl	d6232 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d62b4:	2800      	cmp	r0, #0
   d62b6:	d0ec      	beq.n	d6292 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d62b8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d62bc:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d62c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d62c4:	e00f      	b.n	d62e6 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d62c6:	2b10      	cmp	r3, #16
   d62c8:	d1e3      	bne.n	d6292 <_ZN9FatVolume6fatGetEmPm+0xc>
   d62ca:	6983      	ldr	r3, [r0, #24]
   d62cc:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d62d0:	2202      	movs	r2, #2
   d62d2:	4419      	add	r1, r3
   d62d4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d62d8:	f7ff ffab 	bl	d6232 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d62dc:	2800      	cmp	r0, #0
   d62de:	d0d8      	beq.n	d6292 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d62e0:	b2e4      	uxtb	r4, r4
   d62e2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d62e6:	69ea      	ldr	r2, [r5, #28]
   d62e8:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d62ea:	bf9a      	itte	ls
   d62ec:	6033      	strls	r3, [r6, #0]
  return 1;
   d62ee:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d62f0:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d62f2:	bd70      	pop	{r4, r5, r6, pc}

000d62f4 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d62f4:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d62f6:	b538      	push	{r3, r4, r5, lr}
   d62f8:	460c      	mov	r4, r1
   d62fa:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d62fc:	d801      	bhi.n	d6302 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d62fe:	2000      	movs	r0, #0
   d6300:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6302:	69c3      	ldr	r3, [r0, #28]
   d6304:	4299      	cmp	r1, r3
   d6306:	d8fa      	bhi.n	d62fe <_ZN9FatVolume6fatPutEmm+0xa>
   d6308:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d630a:	2b20      	cmp	r3, #32
   d630c:	d10e      	bne.n	d632c <_ZN9FatVolume6fatPutEmm+0x38>
   d630e:	6981      	ldr	r1, [r0, #24]
   d6310:	2203      	movs	r2, #3
   d6312:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6316:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d631a:	f7ff ff8a 	bl	d6232 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d631e:	2800      	cmp	r0, #0
   d6320:	d0ed      	beq.n	d62fe <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d6322:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6326:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d632a:	e00f      	b.n	d634c <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d632c:	2b10      	cmp	r3, #16
   d632e:	d1e6      	bne.n	d62fe <_ZN9FatVolume6fatPutEmm+0xa>
   d6330:	6983      	ldr	r3, [r0, #24]
   d6332:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6336:	2203      	movs	r2, #3
   d6338:	4419      	add	r1, r3
   d633a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d633e:	f7ff ff78 	bl	d6232 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6342:	2800      	cmp	r0, #0
   d6344:	d0db      	beq.n	d62fe <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d6346:	b2e4      	uxtb	r4, r4
   d6348:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d634c:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d634e:	bd38      	pop	{r3, r4, r5, pc}

000d6350 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6350:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6354:	68c4      	ldr	r4, [r0, #12]
   d6356:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6358:	4605      	mov	r5, r0
   d635a:	460e      	mov	r6, r1
   d635c:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d635e:	d207      	bcs.n	d6370 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d6360:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d6362:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d6364:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d6366:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d6368:	429c      	cmp	r4, r3
   d636a:	d903      	bls.n	d6374 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d636c:	b9cf      	cbnz	r7, d63a2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d636e:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d6370:	2701      	movs	r7, #1
   d6372:	e7f7      	b.n	d6364 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d6374:	42a6      	cmp	r6, r4
   d6376:	d014      	beq.n	d63a2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d6378:	aa01      	add	r2, sp, #4
   d637a:	4621      	mov	r1, r4
   d637c:	4628      	mov	r0, r5
   d637e:	f7ff ff82 	bl	d6286 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d6382:	2800      	cmp	r0, #0
   d6384:	db0d      	blt.n	d63a2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d6386:	d0ed      	beq.n	d6364 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d6388:	9b01      	ldr	r3, [sp, #4]
   d638a:	2b00      	cmp	r3, #0
   d638c:	d1ea      	bne.n	d6364 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d638e:	b107      	cbz	r7, d6392 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d6390:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d6392:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d6396:	4621      	mov	r1, r4
   d6398:	4628      	mov	r0, r5
   d639a:	f7ff ffab 	bl	d62f4 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d639e:	4607      	mov	r7, r0
   d63a0:	b908      	cbnz	r0, d63a6 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d63a2:	2700      	movs	r7, #0
   d63a4:	e00b      	b.n	d63be <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d63a6:	b916      	cbnz	r6, d63ae <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d63a8:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d63ac:	e007      	b.n	d63be <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d63ae:	4622      	mov	r2, r4
   d63b0:	4631      	mov	r1, r6
   d63b2:	4628      	mov	r0, r5
   d63b4:	f7ff ff9e 	bl	d62f4 <_ZN9FatVolume6fatPutEmm>
   d63b8:	2800      	cmp	r0, #0
   d63ba:	d1f5      	bne.n	d63a8 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d63bc:	e7f1      	b.n	d63a2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d63be:	4638      	mov	r0, r7
   d63c0:	b002      	add	sp, #8
   d63c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d63c6 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d63c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d63c8:	4605      	mov	r5, r0
   d63ca:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d63cc:	aa01      	add	r2, sp, #4
   d63ce:	4621      	mov	r1, r4
   d63d0:	4628      	mov	r0, r5
   d63d2:	f7ff ff58 	bl	d6286 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d63d6:	1e06      	subs	r6, r0, #0
   d63d8:	da01      	bge.n	d63de <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d63da:	2000      	movs	r0, #0
   d63dc:	e00f      	b.n	d63fe <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d63de:	2200      	movs	r2, #0
   d63e0:	4621      	mov	r1, r4
   d63e2:	4628      	mov	r0, r5
   d63e4:	f7ff ff86 	bl	d62f4 <_ZN9FatVolume6fatPutEmm>
   d63e8:	2800      	cmp	r0, #0
   d63ea:	d0f6      	beq.n	d63da <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d63ec:	68eb      	ldr	r3, [r5, #12]
   d63ee:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d63f0:	bf9c      	itt	ls
   d63f2:	f104 34ff 	addls.w	r4, r4, #4294967295
   d63f6:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d63f8:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d63fa:	2e00      	cmp	r6, #0
   d63fc:	d1e6      	bne.n	d63cc <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d63fe:	b002      	add	sp, #8
   d6400:	bd70      	pop	{r4, r5, r6, pc}

000d6402 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d6402:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d6404:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d6406:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6408:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d640a:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d640c:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6410:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d6412:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6414:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6416:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d641a:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d641c:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6420:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d6424:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d6428:	b1a1      	cbz	r1, d6454 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d642a:	2904      	cmp	r1, #4
   d642c:	d85d      	bhi.n	d64ea <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d642e:	4611      	mov	r1, r2
   d6430:	3024      	adds	r0, #36	; 0x24
   d6432:	f7ff fefe 	bl	d6232 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6436:	2800      	cmp	r0, #0
   d6438:	d057      	beq.n	d64ea <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d643a:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d643e:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d6442:	065b      	lsls	r3, r3, #25
   d6444:	d151      	bne.n	d64ea <_ZN9FatVolume4initEh+0xe8>
   d6446:	351b      	adds	r5, #27
   d6448:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d644c:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d6450:	2d00      	cmp	r5, #0
   d6452:	d04a      	beq.n	d64ea <_ZN9FatVolume4initEh+0xe8>
   d6454:	2200      	movs	r2, #0
   d6456:	4629      	mov	r1, r5
   d6458:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d645c:	f7ff fee9 	bl	d6232 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d6460:	2800      	cmp	r0, #0
   d6462:	d042      	beq.n	d64ea <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d6464:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d6468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d646c:	d13d      	bne.n	d64ea <_ZN9FatVolume4initEh+0xe8>
   d646e:	7c03      	ldrb	r3, [r0, #16]
   d6470:	2b02      	cmp	r3, #2
   d6472:	d13a      	bne.n	d64ea <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d6474:	89c3      	ldrh	r3, [r0, #14]
   d6476:	2b00      	cmp	r3, #0
   d6478:	d037      	beq.n	d64ea <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d647a:	7b41      	ldrb	r1, [r0, #13]
   d647c:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d647e:	1e4b      	subs	r3, r1, #1
   d6480:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d6482:	2300      	movs	r3, #0
   d6484:	71a3      	strb	r3, [r4, #6]
   d6486:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6488:	2301      	movs	r3, #1
   d648a:	428b      	cmp	r3, r1
   d648c:	d007      	beq.n	d649e <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d648e:	3e01      	subs	r6, #1
   d6490:	d02b      	beq.n	d64ea <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6492:	79a2      	ldrb	r2, [r4, #6]
   d6494:	005b      	lsls	r3, r3, #1
   d6496:	3201      	adds	r2, #1
   d6498:	b2db      	uxtb	r3, r3
   d649a:	71a2      	strb	r2, [r4, #6]
   d649c:	e7f5      	b.n	d648a <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d649e:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d64a0:	b902      	cbnz	r2, d64a4 <_ZN9FatVolume4initEh+0xa2>
   d64a2:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d64a4:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d64a6:	89c6      	ldrh	r6, [r0, #14]
   d64a8:	442e      	add	r6, r5
   d64aa:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d64ac:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d64b0:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d64b2:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d64b6:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d64b8:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d64bc:	0152      	lsls	r2, r2, #5
   d64be:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d64c2:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d64c6:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d64c8:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d64cc:	b903      	cbnz	r3, d64d0 <_ZN9FatVolume4initEh+0xce>
   d64ce:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d64d0:	1aad      	subs	r5, r5, r2
   d64d2:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d64d4:	79a5      	ldrb	r5, [r4, #6]
   d64d6:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d64da:	1c6b      	adds	r3, r5, #1
   d64dc:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d64de:	f640 73f4 	movw	r3, #4084	; 0xff4
   d64e2:	429d      	cmp	r5, r3
   d64e4:	d803      	bhi.n	d64ee <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d64e6:	230c      	movs	r3, #12
   d64e8:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d64ea:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d64ec:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d64ee:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d64f2:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d64f4:	bf85      	ittet	hi
   d64f6:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d64f8:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d64fa:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d64fc:	2320      	movhi	r3, #32
   d64fe:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d6500:	2001      	movs	r0, #1

fail:
  return false;
}
   d6502:	bd70      	pop	{r4, r5, r6, pc}

000d6504 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d6504:	f000 bb4a 	b.w	d6b9c <HAL_Pin_Map>

000d6508 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d6508:	f000 bb48 	b.w	d6b9c <HAL_Pin_Map>

000d650c <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d650c:	f000 bb46 	b.w	d6b9c <HAL_Pin_Map>

000d6510 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6510:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6512:	4c0e      	ldr	r4, [pc, #56]	; (d654c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6514:	460e      	mov	r6, r1
   d6516:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6518:	f000 fbd8 	bl	d6ccc <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d651c:	6823      	ldr	r3, [r4, #0]
   d651e:	1ac0      	subs	r0, r0, r3
   d6520:	4b0b      	ldr	r3, [pc, #44]	; (d6550 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d6522:	4298      	cmp	r0, r3
   d6524:	d908      	bls.n	d6538 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6526:	f000 fbd9 	bl	d6cdc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d652a:	4b0a      	ldr	r3, [pc, #40]	; (d6554 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d652c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d652e:	f000 fe63 	bl	d71f8 <spark_process>
   d6532:	f000 fbcb 	bl	d6ccc <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d6536:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6538:	f000 fbd0 	bl	d6cdc <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d653c:	b280      	uxth	r0, r0
   d653e:	1b80      	subs	r0, r0, r6
}
   d6540:	42a8      	cmp	r0, r5
   d6542:	bfd4      	ite	le
   d6544:	2000      	movle	r0, #0
   d6546:	2001      	movgt	r0, #1
   d6548:	bd70      	pop	{r4, r5, r6, pc}
   d654a:	bf00      	nop
   d654c:	2003e314 	.word	0x2003e314
   d6550:	000186a0 	.word	0x000186a0
   d6554:	2003e708 	.word	0x2003e708

000d6558 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6558:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d655a:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d655c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d655e:	b94d      	cbnz	r5, d6574 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d6560:	6840      	ldr	r0, [r0, #4]
   d6562:	f000 fa7d 	bl	d6a60 <_ZN14SdSpiAltDriver8activateEv>
   d6566:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d6568:	4629      	mov	r1, r5
   d656a:	7d18      	ldrb	r0, [r3, #20]
   d656c:	f004 f8e9 	bl	da742 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d6570:	2301      	movs	r3, #1
   d6572:	7223      	strb	r3, [r4, #8]
   d6574:	bd38      	pop	{r3, r4, r5, pc}

000d6576 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d6576:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d6578:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d657a:	4604      	mov	r4, r0
  if (m_spiActive) {
   d657c:	b16b      	cbz	r3, d659a <_ZN9SdSpiCard7spiStopEv+0x24>
   d657e:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d6580:	2101      	movs	r1, #1
   d6582:	7d18      	ldrb	r0, [r3, #20]
   d6584:	f004 f8dd 	bl	da742 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6588:	21ff      	movs	r1, #255	; 0xff
   d658a:	6860      	ldr	r0, [r4, #4]
   d658c:	f000 fa9a 	bl	d6ac4 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d6590:	6860      	ldr	r0, [r4, #4]
   d6592:	f000 fa79 	bl	d6a88 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d6596:	2300      	movs	r3, #0
   d6598:	7223      	strb	r3, [r4, #8]
   d659a:	bd10      	pop	{r4, pc}

000d659c <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d659e:	4604      	mov	r4, r0
   d65a0:	460d      	mov	r5, r1
   d65a2:	4616      	mov	r6, r2
   d65a4:	f000 fb9a 	bl	d6cdc <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d65a8:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d65aa:	6860      	ldr	r0, [r4, #4]
   d65ac:	f000 fa6f 	bl	d6a8e <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d65b0:	28ff      	cmp	r0, #255	; 0xff
   d65b2:	7260      	strb	r0, [r4, #9]
   d65b4:	d109      	bne.n	d65ca <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d65b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d65ba:	4639      	mov	r1, r7
   d65bc:	4620      	mov	r0, r4
   d65be:	f7ff ffa7 	bl	d6510 <_ZN9SdSpiCard10isTimedOutEtt>
   d65c2:	2800      	cmp	r0, #0
   d65c4:	d0f1      	beq.n	d65aa <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d65c6:	2355      	movs	r3, #85	; 0x55
   d65c8:	e00b      	b.n	d65e2 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d65ca:	28fe      	cmp	r0, #254	; 0xfe
   d65cc:	d001      	beq.n	d65d2 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d65ce:	2350      	movs	r3, #80	; 0x50
   d65d0:	e007      	b.n	d65e2 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d65d2:	4632      	mov	r2, r6
   d65d4:	4629      	mov	r1, r5
   d65d6:	6860      	ldr	r0, [r4, #4]
   d65d8:	f000 fa5e 	bl	d6a98 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d65dc:	7260      	strb	r0, [r4, #9]
   d65de:	b130      	cbz	r0, d65ee <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d65e0:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d65e2:	4620      	mov	r0, r4
   d65e4:	7023      	strb	r3, [r4, #0]
   d65e6:	f7ff ffc6 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d65ea:	2000      	movs	r0, #0
}
   d65ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d65ee:	6860      	ldr	r0, [r4, #4]
   d65f0:	f000 fa4d 	bl	d6a8e <_ZN14SdSpiAltDriver7receiveEv>
   d65f4:	6860      	ldr	r0, [r4, #4]
   d65f6:	f000 fa4a 	bl	d6a8e <_ZN14SdSpiAltDriver7receiveEv>
   d65fa:	2001      	movs	r0, #1
   d65fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d65fe <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d65fe:	b570      	push	{r4, r5, r6, lr}
   d6600:	4604      	mov	r4, r0
   d6602:	460e      	mov	r6, r1
   d6604:	f000 fb6a 	bl	d6cdc <HAL_Timer_Get_Milli_Seconds>
   d6608:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d660a:	4632      	mov	r2, r6
   d660c:	4629      	mov	r1, r5
   d660e:	4620      	mov	r0, r4
   d6610:	f7ff ff7e 	bl	d6510 <_ZN9SdSpiCard10isTimedOutEtt>
   d6614:	b930      	cbnz	r0, d6624 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d6616:	6860      	ldr	r0, [r4, #4]
   d6618:	f000 fa39 	bl	d6a8e <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d661c:	28ff      	cmp	r0, #255	; 0xff
   d661e:	d1f4      	bne.n	d660a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6620:	2001      	movs	r0, #1
   d6622:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d6624:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d6626:	bd70      	pop	{r4, r5, r6, pc}

000d6628 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d662a:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d662c:	9201      	str	r2, [sp, #4]
   d662e:	4604      	mov	r4, r0
   d6630:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d6632:	b90b      	cbnz	r3, d6638 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d6634:	f7ff ff90 	bl	d6558 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d6638:	b125      	cbz	r5, d6644 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d663a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d663e:	4620      	mov	r0, r4
   d6640:	f7ff ffdd 	bl	d65fe <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6644:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6648:	6860      	ldr	r0, [r4, #4]
   d664a:	f000 fa3b 	bl	d6ac4 <_ZN14SdSpiAltDriver4sendEh>
   d664e:	f10d 0607 	add.w	r6, sp, #7
   d6652:	f10d 0703 	add.w	r7, sp, #3
   d6656:	f816 1901 	ldrb.w	r1, [r6], #-1
   d665a:	6860      	ldr	r0, [r4, #4]
   d665c:	f000 fa32 	bl	d6ac4 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d6660:	42be      	cmp	r6, r7
   d6662:	d1f8      	bne.n	d6656 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d6664:	2d00      	cmp	r5, #0
   d6666:	bf0c      	ite	eq
   d6668:	2195      	moveq	r1, #149	; 0x95
   d666a:	2187      	movne	r1, #135	; 0x87
   d666c:	6860      	ldr	r0, [r4, #4]
   d666e:	f000 fa29 	bl	d6ac4 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6672:	6860      	ldr	r0, [r4, #4]
   d6674:	f000 fa0b 	bl	d6a8e <_ZN14SdSpiAltDriver7receiveEv>
   d6678:	250b      	movs	r5, #11
   d667a:	6860      	ldr	r0, [r4, #4]
   d667c:	f000 fa07 	bl	d6a8e <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d6680:	0603      	lsls	r3, r0, #24
   d6682:	7260      	strb	r0, [r4, #9]
   d6684:	d503      	bpl.n	d668e <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d6686:	3d01      	subs	r5, #1
   d6688:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d668c:	d1f5      	bne.n	d667a <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d668e:	b003      	add	sp, #12
   d6690:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6692 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d6692:	b570      	push	{r4, r5, r6, lr}
   d6694:	4604      	mov	r4, r0
   d6696:	460d      	mov	r5, r1
   d6698:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d669a:	2137      	movs	r1, #55	; 0x37
   d669c:	2200      	movs	r2, #0
   d669e:	f7ff ffc3 	bl	d6628 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d66a2:	4632      	mov	r2, r6
   d66a4:	4629      	mov	r1, r5
   d66a6:	4620      	mov	r0, r4
  }
   d66a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d66ac:	f7ff bfbc 	b.w	d6628 <_ZN9SdSpiCard11cardCommandEhm>

000d66b0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d66b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d66b4:	2500      	movs	r5, #0
   d66b6:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d66b8:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d66ba:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d66bc:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d66be:	4604      	mov	r4, r0
   d66c0:	4690      	mov	r8, r2
   d66c2:	461e      	mov	r6, r3
   d66c4:	f000 fb0a 	bl	d6cdc <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d66c8:	4641      	mov	r1, r8
   d66ca:	4607      	mov	r7, r0
   d66cc:	6860      	ldr	r0, [r4, #4]
   d66ce:	f000 f9cb 	bl	d6a68 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d66d2:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d66d4:	4a4f      	ldr	r2, [pc, #316]	; (d6814 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d66d6:	721d      	strb	r5, [r3, #8]
   d66d8:	f04f 0801 	mov.w	r8, #1
   d66dc:	60da      	str	r2, [r3, #12]
   d66de:	745d      	strb	r5, [r3, #17]
   d66e0:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d66e4:	4620      	mov	r0, r4
   d66e6:	f7ff ff37 	bl	d6558 <_ZN9SdSpiCard8spiStartEv>
   d66ea:	6863      	ldr	r3, [r4, #4]
   d66ec:	4641      	mov	r1, r8
   d66ee:	7d18      	ldrb	r0, [r3, #20]
   d66f0:	f004 f827 	bl	da742 <digitalWrite>
   d66f4:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d66f6:	21ff      	movs	r1, #255	; 0xff
   d66f8:	6860      	ldr	r0, [r4, #4]
   d66fa:	3d01      	subs	r5, #1
   d66fc:	f000 f9e2 	bl	d6ac4 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d6700:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6704:	d1f7      	bne.n	d66f6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d6706:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d6708:	4629      	mov	r1, r5
   d670a:	7d18      	ldrb	r0, [r3, #20]
   d670c:	f004 f819 	bl	da742 <digitalWrite>
   d6710:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d6712:	2200      	movs	r2, #0
   d6714:	4611      	mov	r1, r2
   d6716:	4620      	mov	r0, r4
   d6718:	f7ff ff86 	bl	d6628 <_ZN9SdSpiCard11cardCommandEhm>
   d671c:	2801      	cmp	r0, #1
   d671e:	4680      	mov	r8, r0
   d6720:	d012      	beq.n	d6748 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d6722:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d6724:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6728:	d101      	bne.n	d672e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d672a:	2320      	movs	r3, #32
   d672c:	e057      	b.n	d67de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d672e:	21fd      	movs	r1, #253	; 0xfd
   d6730:	6860      	ldr	r0, [r4, #4]
   d6732:	f000 f9c7 	bl	d6ac4 <_ZN14SdSpiAltDriver4sendEh>
   d6736:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d673a:	6860      	ldr	r0, [r4, #4]
   d673c:	f000 f9a7 	bl	d6a8e <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d6740:	f1b8 0801 	subs.w	r8, r8, #1
   d6744:	d1f9      	bne.n	d673a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d6746:	e7e4      	b.n	d6712 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6748:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d674c:	2108      	movs	r1, #8
   d674e:	4620      	mov	r0, r4
   d6750:	f7ff ff6a 	bl	d6628 <_ZN9SdSpiCard11cardCommandEhm>
   d6754:	2805      	cmp	r0, #5
   d6756:	d102      	bne.n	d675e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6758:	f884 800a 	strb.w	r8, [r4, #10]
   d675c:	e00f      	b.n	d677e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d675e:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6760:	6860      	ldr	r0, [r4, #4]
   d6762:	f000 f994 	bl	d6a8e <_ZN14SdSpiAltDriver7receiveEv>
   d6766:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6768:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d676c:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d676e:	d1f7      	bne.n	d6760 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d6770:	28aa      	cmp	r0, #170	; 0xaa
   d6772:	d102      	bne.n	d677a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6774:	2302      	movs	r3, #2
   d6776:	72a3      	strb	r3, [r4, #10]
   d6778:	e001      	b.n	d677e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d677a:	2325      	movs	r3, #37	; 0x25
   d677c:	e02f      	b.n	d67de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d677e:	7aa3      	ldrb	r3, [r4, #10]
   d6780:	2b02      	cmp	r3, #2
   d6782:	bf0c      	ite	eq
   d6784:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d6788:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d678a:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d678c:	462a      	mov	r2, r5
   d678e:	2129      	movs	r1, #41	; 0x29
   d6790:	4620      	mov	r0, r4
   d6792:	f7ff ff7e 	bl	d6692 <_ZN9SdSpiCard8cardAcmdEhm>
   d6796:	4602      	mov	r2, r0
   d6798:	b148      	cbz	r0, d67ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d679a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d679e:	4639      	mov	r1, r7
   d67a0:	4620      	mov	r0, r4
   d67a2:	f7ff feb5 	bl	d6510 <_ZN9SdSpiCard10isTimedOutEtt>
   d67a6:	2800      	cmp	r0, #0
   d67a8:	d0f0      	beq.n	d678c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d67aa:	2343      	movs	r3, #67	; 0x43
   d67ac:	e017      	b.n	d67de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d67ae:	7aa3      	ldrb	r3, [r4, #10]
   d67b0:	2b02      	cmp	r3, #2
   d67b2:	d00e      	beq.n	d67d2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d67b4:	4620      	mov	r0, r4
   d67b6:	f7ff fede 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d67ba:	6863      	ldr	r3, [r4, #4]
   d67bc:	68b0      	ldr	r0, [r6, #8]
   d67be:	7934      	ldrb	r4, [r6, #4]
   d67c0:	7b31      	ldrb	r1, [r6, #12]
   d67c2:	7b72      	ldrb	r2, [r6, #13]
   d67c4:	745a      	strb	r2, [r3, #17]
   d67c6:	60d8      	str	r0, [r3, #12]
   d67c8:	721c      	strb	r4, [r3, #8]
   d67ca:	7419      	strb	r1, [r3, #16]
  return true;
   d67cc:	2001      	movs	r0, #1
   d67ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d67d2:	213a      	movs	r1, #58	; 0x3a
   d67d4:	4620      	mov	r0, r4
   d67d6:	f7ff ff27 	bl	d6628 <_ZN9SdSpiCard11cardCommandEhm>
   d67da:	b138      	cbz	r0, d67ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d67dc:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d67de:	4620      	mov	r0, r4
   d67e0:	7023      	strb	r3, [r4, #0]
   d67e2:	f7ff fec8 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d67e6:	2000      	movs	r0, #0
}
   d67e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d67ec:	6860      	ldr	r0, [r4, #4]
   d67ee:	f000 f94e 	bl	d6a8e <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d67f2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d67f6:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d67f8:	bf04      	itt	eq
   d67fa:	2303      	moveq	r3, #3
   d67fc:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d67fe:	6860      	ldr	r0, [r4, #4]
   d6800:	f000 f945 	bl	d6a8e <_ZN14SdSpiAltDriver7receiveEv>
   d6804:	6860      	ldr	r0, [r4, #4]
   d6806:	f000 f942 	bl	d6a8e <_ZN14SdSpiAltDriver7receiveEv>
   d680a:	6860      	ldr	r0, [r4, #4]
   d680c:	f000 f93f 	bl	d6a8e <_ZN14SdSpiAltDriver7receiveEv>
   d6810:	e7d0      	b.n	d67b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d6812:	bf00      	nop
   d6814:	0003d090 	.word	0x0003d090

000d6818 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6818:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d681a:	7a83      	ldrb	r3, [r0, #10]
   d681c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d681e:	bf18      	it	ne
   d6820:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6822:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6824:	460a      	mov	r2, r1
   d6826:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6828:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d682a:	f7ff fefd 	bl	d6628 <_ZN9SdSpiCard11cardCommandEhm>
   d682e:	b110      	cbz	r0, d6836 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6830:	2330      	movs	r3, #48	; 0x30
   d6832:	7023      	strb	r3, [r4, #0]
   d6834:	e00b      	b.n	d684e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d6836:	4629      	mov	r1, r5
   d6838:	f44f 7200 	mov.w	r2, #512	; 0x200
   d683c:	4620      	mov	r0, r4
   d683e:	f7ff fead 	bl	d659c <_ZN9SdSpiCard8readDataEPhj>
   d6842:	4605      	mov	r5, r0
   d6844:	b118      	cbz	r0, d684e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d6846:	4620      	mov	r0, r4
   d6848:	f7ff fe95 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d684c:	e003      	b.n	d6856 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d684e:	4620      	mov	r0, r4
   d6850:	f7ff fe91 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6854:	2500      	movs	r5, #0
}
   d6856:	4628      	mov	r0, r5
   d6858:	bd38      	pop	{r3, r4, r5, pc}

000d685a <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d685a:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d685c:	7a83      	ldrb	r3, [r0, #10]
   d685e:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6860:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6862:	bf18      	it	ne
   d6864:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d6866:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6868:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d686a:	f7ff fedd 	bl	d6628 <_ZN9SdSpiCard11cardCommandEhm>
   d686e:	b130      	cbz	r0, d687e <_ZN9SdSpiCard9readStartEm+0x24>
   d6870:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d6872:	4620      	mov	r0, r4
   d6874:	7023      	strb	r3, [r4, #0]
   d6876:	f7ff fe7e 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d687a:	2000      	movs	r0, #0
   d687c:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d687e:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6880:	bd10      	pop	{r4, pc}

000d6882 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6882:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d6884:	2200      	movs	r2, #0
   d6886:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6888:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d688a:	f7ff fecd 	bl	d6628 <_ZN9SdSpiCard11cardCommandEhm>
   d688e:	b130      	cbz	r0, d689e <_ZN9SdSpiCard8readStopEv+0x1c>
   d6890:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d6892:	4620      	mov	r0, r4
   d6894:	7023      	strb	r3, [r4, #0]
   d6896:	f7ff fe6e 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d689a:	2000      	movs	r0, #0
   d689c:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d689e:	4620      	mov	r0, r4
   d68a0:	f7ff fe69 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d68a4:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d68a6:	bd10      	pop	{r4, pc}

000d68a8 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d68a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d68aa:	4605      	mov	r5, r0
   d68ac:	4616      	mov	r6, r2
   d68ae:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d68b0:	f7ff ffd3 	bl	d685a <_ZN9SdSpiCard9readStartEm>
   d68b4:	b198      	cbz	r0, d68de <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d68b6:	2400      	movs	r4, #0
   d68b8:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d68ba:	429f      	cmp	r7, r3
   d68bc:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d68c0:	d908      	bls.n	d68d4 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d68c2:	f44f 7200 	mov.w	r2, #512	; 0x200
   d68c6:	4628      	mov	r0, r5
   d68c8:	f7ff fe68 	bl	d659c <_ZN9SdSpiCard8readDataEPhj>
   d68cc:	3401      	adds	r4, #1
   d68ce:	2800      	cmp	r0, #0
   d68d0:	d1f2      	bne.n	d68b8 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d68d2:	e004      	b.n	d68de <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d68d4:	4628      	mov	r0, r5
}
   d68d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d68da:	f7ff bfd2 	b.w	d6882 <_ZN9SdSpiCard8readStopEv>
}
   d68de:	2000      	movs	r0, #0
   d68e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d68e2 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d68e2:	b538      	push	{r3, r4, r5, lr}
   d68e4:	4604      	mov	r4, r0
   d68e6:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d68e8:	6840      	ldr	r0, [r0, #4]
   d68ea:	f000 f8eb 	bl	d6ac4 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d68ee:	f44f 7200 	mov.w	r2, #512	; 0x200
   d68f2:	4629      	mov	r1, r5
   d68f4:	6860      	ldr	r0, [r4, #4]
   d68f6:	f000 f8e9 	bl	d6acc <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d68fa:	21ff      	movs	r1, #255	; 0xff
   d68fc:	6860      	ldr	r0, [r4, #4]
   d68fe:	f000 f8e1 	bl	d6ac4 <_ZN14SdSpiAltDriver4sendEh>
   d6902:	21ff      	movs	r1, #255	; 0xff
   d6904:	6860      	ldr	r0, [r4, #4]
   d6906:	f000 f8dd 	bl	d6ac4 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d690a:	6860      	ldr	r0, [r4, #4]
   d690c:	f000 f8bf 	bl	d6a8e <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d6910:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d6912:	f000 001f 	and.w	r0, r0, #31
   d6916:	2805      	cmp	r0, #5
   d6918:	d006      	beq.n	d6928 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d691a:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d691c:	4620      	mov	r0, r4
   d691e:	7023      	strb	r3, [r4, #0]
   d6920:	f7ff fe29 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6924:	2000      	movs	r0, #0
   d6926:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6928:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d692a:	bd38      	pop	{r3, r4, r5, pc}

000d692c <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d692c:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d692e:	7a83      	ldrb	r3, [r0, #10]
   d6930:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6932:	bf18      	it	ne
   d6934:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6936:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6938:	460a      	mov	r2, r1
   d693a:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d693c:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d693e:	f7ff fe73 	bl	d6628 <_ZN9SdSpiCard11cardCommandEhm>
   d6942:	4606      	mov	r6, r0
   d6944:	b108      	cbz	r0, d694a <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d6946:	2332      	movs	r3, #50	; 0x32
   d6948:	e01d      	b.n	d6986 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d694a:	462a      	mov	r2, r5
   d694c:	21fe      	movs	r1, #254	; 0xfe
   d694e:	4620      	mov	r0, r4
   d6950:	f7ff ffc7 	bl	d68e2 <_ZN9SdSpiCard9writeDataEhPKh>
   d6954:	b1c0      	cbz	r0, d6988 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6956:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d695a:	4620      	mov	r0, r4
   d695c:	f7ff fe4f 	bl	d65fe <_ZN9SdSpiCard11waitNotBusyEt>
   d6960:	4605      	mov	r5, r0
   d6962:	b908      	cbnz	r0, d6968 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d6964:	235a      	movs	r3, #90	; 0x5a
   d6966:	e00e      	b.n	d6986 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d6968:	4632      	mov	r2, r6
   d696a:	210d      	movs	r1, #13
   d696c:	4620      	mov	r0, r4
   d696e:	f7ff fe5b 	bl	d6628 <_ZN9SdSpiCard11cardCommandEhm>
   d6972:	b938      	cbnz	r0, d6984 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6974:	6860      	ldr	r0, [r4, #4]
   d6976:	f000 f88a 	bl	d6a8e <_ZN14SdSpiAltDriver7receiveEv>
   d697a:	b918      	cbnz	r0, d6984 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d697c:	4620      	mov	r0, r4
   d697e:	f7ff fdfa 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6982:	e005      	b.n	d6990 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6984:	2329      	movs	r3, #41	; 0x29
   d6986:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d6988:	4620      	mov	r0, r4
   d698a:	f7ff fdf4 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d698e:	2500      	movs	r5, #0
}
   d6990:	4628      	mov	r0, r5
   d6992:	bd70      	pop	{r4, r5, r6, pc}

000d6994 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6994:	b538      	push	{r3, r4, r5, lr}
   d6996:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6998:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d699c:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d699e:	f7ff fe2e 	bl	d65fe <_ZN9SdSpiCard11waitNotBusyEt>
   d69a2:	b910      	cbnz	r0, d69aa <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d69a4:	235b      	movs	r3, #91	; 0x5b
   d69a6:	7023      	strb	r3, [r4, #0]
   d69a8:	e005      	b.n	d69b6 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d69aa:	462a      	mov	r2, r5
   d69ac:	21fc      	movs	r1, #252	; 0xfc
   d69ae:	4620      	mov	r0, r4
   d69b0:	f7ff ff97 	bl	d68e2 <_ZN9SdSpiCard9writeDataEhPKh>
   d69b4:	b918      	cbnz	r0, d69be <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d69b6:	4620      	mov	r0, r4
   d69b8:	f7ff fddd 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d69bc:	2000      	movs	r0, #0
}
   d69be:	bd38      	pop	{r3, r4, r5, pc}

000d69c0 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d69c0:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d69c2:	7a83      	ldrb	r3, [r0, #10]
   d69c4:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d69c6:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d69c8:	bf18      	it	ne
   d69ca:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d69cc:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d69ce:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d69d0:	f7ff fe2a 	bl	d6628 <_ZN9SdSpiCard11cardCommandEhm>
   d69d4:	b130      	cbz	r0, d69e4 <_ZN9SdSpiCard10writeStartEm+0x24>
   d69d6:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d69d8:	4620      	mov	r0, r4
   d69da:	7023      	strb	r3, [r4, #0]
   d69dc:	f7ff fdcb 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d69e0:	2000      	movs	r0, #0
   d69e2:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d69e4:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d69e6:	bd10      	pop	{r4, pc}

000d69e8 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d69e8:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d69ea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d69ee:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d69f0:	f7ff fe05 	bl	d65fe <_ZN9SdSpiCard11waitNotBusyEt>
   d69f4:	4605      	mov	r5, r0
   d69f6:	b120      	cbz	r0, d6a02 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d69f8:	21fd      	movs	r1, #253	; 0xfd
   d69fa:	6860      	ldr	r0, [r4, #4]
   d69fc:	f000 f862 	bl	d6ac4 <_ZN14SdSpiAltDriver4sendEh>
   d6a00:	e001      	b.n	d6a06 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6a02:	2356      	movs	r3, #86	; 0x56
   d6a04:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d6a06:	4620      	mov	r0, r4
   d6a08:	f7ff fdb5 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6a0c:	4628      	mov	r0, r5
   d6a0e:	bd38      	pop	{r3, r4, r5, pc}

000d6a10 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d6a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a12:	4605      	mov	r5, r0
   d6a14:	4616      	mov	r6, r2
   d6a16:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6a18:	f7ff ffd2 	bl	d69c0 <_ZN9SdSpiCard10writeStartEm>
   d6a1c:	b170      	cbz	r0, d6a3c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d6a1e:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6a20:	42bc      	cmp	r4, r7
   d6a22:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6a26:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6a28:	d004      	beq.n	d6a34 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6a2a:	f7ff ffb3 	bl	d6994 <_ZN9SdSpiCard9writeDataEPKh>
   d6a2e:	b128      	cbz	r0, d6a3c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6a30:	3401      	adds	r4, #1
   d6a32:	e7f5      	b.n	d6a20 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d6a34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6a38:	f7ff bfd6 	b.w	d69e8 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d6a3c:	4628      	mov	r0, r5
   d6a3e:	f7ff fd9a 	bl	d6576 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6a42:	2000      	movs	r0, #0
   d6a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a46 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d6a46:	f000 b8a9 	b.w	d6b9c <HAL_Pin_Map>

000d6a4a <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d6a4a:	f000 b8a7 	b.w	d6b9c <HAL_Pin_Map>

000d6a4e <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d6a4e:	f000 b8a5 	b.w	d6b9c <HAL_Pin_Map>
	...

000d6a54 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d6a54:	4b01      	ldr	r3, [pc, #4]	; (d6a5c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d6a56:	2201      	movs	r2, #1
   d6a58:	701a      	strb	r2, [r3, #0]
   d6a5a:	4770      	bx	lr
   d6a5c:	2003e318 	.word	0x2003e318

000d6a60 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d6a60:	1d01      	adds	r1, r0, #4
   d6a62:	6800      	ldr	r0, [r0, #0]
   d6a64:	f000 bce4 	b.w	d7430 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d6a68 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d6a68:	b510      	push	{r4, lr}
   d6a6a:	4604      	mov	r4, r0
  m_csPin = csPin;
   d6a6c:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d6a6e:	6800      	ldr	r0, [r0, #0]
   d6a70:	f000 fca0 	bl	d73b4 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d6a74:	7d20      	ldrb	r0, [r4, #20]
   d6a76:	2101      	movs	r1, #1
   d6a78:	f003 fe52 	bl	da720 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d6a7c:	7d20      	ldrb	r0, [r4, #20]
   d6a7e:	2101      	movs	r1, #1
}
   d6a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d6a84:	f003 be5d 	b.w	da742 <digitalWrite>

000d6a88 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d6a88:	6800      	ldr	r0, [r0, #0]
   d6a8a:	f000 bcb8 	b.w	d73fe <_ZN8SPIClass14endTransactionEv>

000d6a8e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d6a8e:	21ff      	movs	r1, #255	; 0xff
   d6a90:	6800      	ldr	r0, [r0, #0]
   d6a92:	f000 bd6f 	b.w	d7574 <_ZN8SPIClass8transferEh>
	...

000d6a98 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d6a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6a9a:	4b08      	ldr	r3, [pc, #32]	; (d6abc <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d6a9c:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6a9e:	2500      	movs	r5, #0
   d6aa0:	4c07      	ldr	r4, [pc, #28]	; (d6ac0 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6aa2:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6aa4:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6aa6:	4613      	mov	r3, r2
   d6aa8:	460a      	mov	r2, r1
   d6aaa:	4629      	mov	r1, r5
   d6aac:	f000 fd68 	bl	d7580 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d6ab0:	7823      	ldrb	r3, [r4, #0]
   d6ab2:	2b00      	cmp	r3, #0
   d6ab4:	d0fc      	beq.n	d6ab0 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d6ab6:	2000      	movs	r0, #0
   d6ab8:	b003      	add	sp, #12
   d6aba:	bd30      	pop	{r4, r5, pc}
   d6abc:	000d6a55 	.word	0x000d6a55
   d6ac0:	2003e318 	.word	0x2003e318

000d6ac4 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6ac4:	6800      	ldr	r0, [r0, #0]
   d6ac6:	f000 bd55 	b.w	d7574 <_ZN8SPIClass8transferEh>
	...

000d6acc <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6ace:	4b07      	ldr	r3, [pc, #28]	; (d6aec <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d6ad0:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6ad2:	2500      	movs	r5, #0
   d6ad4:	4c06      	ldr	r4, [pc, #24]	; (d6af0 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6ad6:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6ad8:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6ada:	4613      	mov	r3, r2
   d6adc:	462a      	mov	r2, r5
   d6ade:	f000 fd4f 	bl	d7580 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d6ae2:	7823      	ldrb	r3, [r4, #0]
   d6ae4:	2b00      	cmp	r3, #0
   d6ae6:	d0fc      	beq.n	d6ae2 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6ae8:	b003      	add	sp, #12
   d6aea:	bd30      	pop	{r4, r5, pc}
   d6aec:	000d6a55 	.word	0x000d6a55
   d6af0:	2003e318 	.word	0x2003e318

000d6af4 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d6af4:	f000 b852 	b.w	d6b9c <HAL_Pin_Map>

000d6af8 <_ZN13SFE_UBLOX_GPSC1Ev>:
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "SparkFun_Ublox_Arduino_Library.h"

SFE_UBLOX_GPS::SFE_UBLOX_GPS(void)
   d6af8:	b570      	push	{r4, r5, r6, lr}
   d6afa:	2342      	movs	r3, #66	; 0x42
   d6afc:	2500      	movs	r5, #0
   d6afe:	2610      	movs	r6, #16
   d6b00:	4604      	mov	r4, r0
   d6b02:	8105      	strh	r5, [r0, #8]
   d6b04:	7285      	strb	r5, [r0, #10]
   d6b06:	72c5      	strb	r5, [r0, #11]
   d6b08:	7305      	strb	r5, [r0, #12]
   d6b0a:	6145      	str	r5, [r0, #20]
   d6b0c:	7603      	strb	r3, [r0, #24]
   d6b0e:	4632      	mov	r2, r6
   d6b10:	4629      	mov	r1, r5
   d6b12:	305c      	adds	r0, #92	; 0x5c
   d6b14:	f004 f917 	bl	dad46 <memset>
   d6b18:	f104 0319 	add.w	r3, r4, #25
   d6b1c:	6663      	str	r3, [r4, #100]	; 0x64
   d6b1e:	4632      	mov	r2, r6
   d6b20:	4629      	mov	r1, r5
   d6b22:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   d6b26:	f004 f90e 	bl	dad46 <memset>
   d6b2a:	f104 031b 	add.w	r3, r4, #27
   d6b2e:	6763      	str	r3, [r4, #116]	; 0x74
   d6b30:	2319      	movs	r3, #25
   d6b32:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
   d6b36:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   d6b3a:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
   d6b3e:	f8a4 5086 	strh.w	r5, [r4, #134]	; 0x86
{
  // Constructor
}
   d6b42:	4620      	mov	r0, r4
   d6b44:	bd70      	pop	{r4, r5, r6, pc}

000d6b46 <_ZN13SFE_UBLOX_GPS5beginER7TwoWire>:

//Initialize the Serial port
void SFE_UBLOX_GPS::begin(TwoWire &wirePort)
{
   d6b46:	b510      	push	{r4, lr}
	commType = COMM_TYPE_I2C;
   d6b48:	2300      	movs	r3, #0
   d6b4a:	7303      	strb	r3, [r0, #12]
  // Constructor
}

//Initialize the Serial port
void SFE_UBLOX_GPS::begin(TwoWire &wirePort)
{
   d6b4c:	4604      	mov	r4, r0
	commType = COMM_TYPE_I2C;
	_i2cPort = &wirePort; //Grab which port the user wants us to use
   d6b4e:	6101      	str	r1, [r0, #16]

	//We expect caller to begin their I2C port, with the speed of their choice external to the library
	//But if they forget, we start the hardware here.
	_i2cPort->begin();
   d6b50:	4608      	mov	r0, r1
   d6b52:	f003 fa73 	bl	da03c <_ZN7TwoWire5beginEv>
//Sets the internal global variable that is the I2C address we read from
//This does not change the I2C address of the module
//0x42 is the default but can be changed via software command
void SFE_UBLOX_GPS::setI2CReadAddress(uint8_t deviceAddress)
{
	_gpsI2Caddress = deviceAddress; //Store the I2C address from user
   d6b56:	2342      	movs	r3, #66	; 0x42
   d6b58:	7623      	strb	r3, [r4, #24]
   d6b5a:	bd10      	pop	{r4, pc}

000d6b5c <_ZN13SFE_UBLOX_GPS11isConnectedEv>:
  return (true);
}

//Returns true if I2C device ack's
boolean SFE_UBLOX_GPS::isConnected()
{
   d6b5c:	b510      	push	{r4, lr}
   d6b5e:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   d6b60:	7e01      	ldrb	r1, [r0, #24]
   d6b62:	6900      	ldr	r0, [r0, #16]
   d6b64:	f003 fa70 	bl	da048 <_ZN7TwoWire17beginTransmissionEh>
  if (_i2cPort->endTransmission() != 0)
   d6b68:	6920      	ldr	r0, [r4, #16]
   d6b6a:	f003 fa75 	bl	da058 <_ZN7TwoWire15endTransmissionEv>
    return (false); //Sensor did not ACK
  return (true);
}
   d6b6e:	fab0 f080 	clz	r0, r0
   d6b72:	0940      	lsrs	r0, r0, #5
   d6b74:	bd10      	pop	{r4, pc}

000d6b76 <_GLOBAL__sub_I__ZN13SFE_UBLOX_GPSC2Ev>:
   d6b76:	f000 b811 	b.w	d6b9c <HAL_Pin_Map>
	...

000d6b7c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6b7c:	b508      	push	{r3, lr}
   d6b7e:	4b02      	ldr	r3, [pc, #8]	; (d6b88 <netdb_freeaddrinfo+0xc>)
   d6b80:	681b      	ldr	r3, [r3, #0]
   d6b82:	689b      	ldr	r3, [r3, #8]
   d6b84:	9301      	str	r3, [sp, #4]
   d6b86:	bd08      	pop	{r3, pc}
   d6b88:	00030268 	.word	0x00030268

000d6b8c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6b8c:	b508      	push	{r3, lr}
   d6b8e:	4b02      	ldr	r3, [pc, #8]	; (d6b98 <netdb_getaddrinfo+0xc>)
   d6b90:	681b      	ldr	r3, [r3, #0]
   d6b92:	68db      	ldr	r3, [r3, #12]
   d6b94:	9301      	str	r3, [sp, #4]
   d6b96:	bd08      	pop	{r3, pc}
   d6b98:	00030268 	.word	0x00030268

000d6b9c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6b9c:	b508      	push	{r3, lr}
   d6b9e:	4b02      	ldr	r3, [pc, #8]	; (d6ba8 <HAL_Pin_Map+0xc>)
   d6ba0:	681b      	ldr	r3, [r3, #0]
   d6ba2:	681b      	ldr	r3, [r3, #0]
   d6ba4:	9301      	str	r3, [sp, #4]
   d6ba6:	bd08      	pop	{r3, pc}
   d6ba8:	0003022c 	.word	0x0003022c

000d6bac <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6bac:	b508      	push	{r3, lr}
   d6bae:	4b02      	ldr	r3, [pc, #8]	; (d6bb8 <HAL_Validate_Pin_Function+0xc>)
   d6bb0:	681b      	ldr	r3, [r3, #0]
   d6bb2:	685b      	ldr	r3, [r3, #4]
   d6bb4:	9301      	str	r3, [sp, #4]
   d6bb6:	bd08      	pop	{r3, pc}
   d6bb8:	0003022c 	.word	0x0003022c

000d6bbc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6bbc:	b508      	push	{r3, lr}
   d6bbe:	4b02      	ldr	r3, [pc, #8]	; (d6bc8 <HAL_Pin_Mode+0xc>)
   d6bc0:	681b      	ldr	r3, [r3, #0]
   d6bc2:	689b      	ldr	r3, [r3, #8]
   d6bc4:	9301      	str	r3, [sp, #4]
   d6bc6:	bd08      	pop	{r3, pc}
   d6bc8:	0003022c 	.word	0x0003022c

000d6bcc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6bcc:	b508      	push	{r3, lr}
   d6bce:	4b02      	ldr	r3, [pc, #8]	; (d6bd8 <HAL_Get_Pin_Mode+0xc>)
   d6bd0:	681b      	ldr	r3, [r3, #0]
   d6bd2:	68db      	ldr	r3, [r3, #12]
   d6bd4:	9301      	str	r3, [sp, #4]
   d6bd6:	bd08      	pop	{r3, pc}
   d6bd8:	0003022c 	.word	0x0003022c

000d6bdc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6bdc:	b508      	push	{r3, lr}
   d6bde:	4b02      	ldr	r3, [pc, #8]	; (d6be8 <HAL_GPIO_Write+0xc>)
   d6be0:	681b      	ldr	r3, [r3, #0]
   d6be2:	691b      	ldr	r3, [r3, #16]
   d6be4:	9301      	str	r3, [sp, #4]
   d6be6:	bd08      	pop	{r3, pc}
   d6be8:	0003022c 	.word	0x0003022c

000d6bec <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d6bec:	b508      	push	{r3, lr}
   d6bee:	4b02      	ldr	r3, [pc, #8]	; (d6bf8 <HAL_SPI_Begin+0xc>)
   d6bf0:	681b      	ldr	r3, [r3, #0]
   d6bf2:	681b      	ldr	r3, [r3, #0]
   d6bf4:	9301      	str	r3, [sp, #4]
   d6bf6:	bd08      	pop	{r3, pc}
   d6bf8:	00030230 	.word	0x00030230

000d6bfc <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d6bfc:	b508      	push	{r3, lr}
   d6bfe:	4b02      	ldr	r3, [pc, #8]	; (d6c08 <HAL_SPI_Set_Clock_Divider+0xc>)
   d6c00:	681b      	ldr	r3, [r3, #0]
   d6c02:	691b      	ldr	r3, [r3, #16]
   d6c04:	9301      	str	r3, [sp, #4]
   d6c06:	bd08      	pop	{r3, pc}
   d6c08:	00030230 	.word	0x00030230

000d6c0c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6c0c:	b508      	push	{r3, lr}
   d6c0e:	4b02      	ldr	r3, [pc, #8]	; (d6c18 <HAL_SPI_Send_Receive_Data+0xc>)
   d6c10:	681b      	ldr	r3, [r3, #0]
   d6c12:	695b      	ldr	r3, [r3, #20]
   d6c14:	9301      	str	r3, [sp, #4]
   d6c16:	bd08      	pop	{r3, pc}
   d6c18:	00030230 	.word	0x00030230

000d6c1c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6c1c:	b508      	push	{r3, lr}
   d6c1e:	4b02      	ldr	r3, [pc, #8]	; (d6c28 <HAL_SPI_Init+0xc>)
   d6c20:	681b      	ldr	r3, [r3, #0]
   d6c22:	69db      	ldr	r3, [r3, #28]
   d6c24:	9301      	str	r3, [sp, #4]
   d6c26:	bd08      	pop	{r3, pc}
   d6c28:	00030230 	.word	0x00030230

000d6c2c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6c2c:	b508      	push	{r3, lr}
   d6c2e:	4b02      	ldr	r3, [pc, #8]	; (d6c38 <HAL_SPI_Is_Enabled+0xc>)
   d6c30:	681b      	ldr	r3, [r3, #0]
   d6c32:	6a1b      	ldr	r3, [r3, #32]
   d6c34:	9301      	str	r3, [sp, #4]
   d6c36:	bd08      	pop	{r3, pc}
   d6c38:	00030230 	.word	0x00030230

000d6c3c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6c3c:	b508      	push	{r3, lr}
   d6c3e:	4b02      	ldr	r3, [pc, #8]	; (d6c48 <HAL_SPI_Info+0xc>)
   d6c40:	681b      	ldr	r3, [r3, #0]
   d6c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6c44:	9301      	str	r3, [sp, #4]
   d6c46:	bd08      	pop	{r3, pc}
   d6c48:	00030230 	.word	0x00030230

000d6c4c <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d6c4c:	b508      	push	{r3, lr}
   d6c4e:	4b02      	ldr	r3, [pc, #8]	; (d6c58 <HAL_SPI_DMA_Transfer+0xc>)
   d6c50:	681b      	ldr	r3, [r3, #0]
   d6c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c54:	9301      	str	r3, [sp, #4]
   d6c56:	bd08      	pop	{r3, pc}
   d6c58:	00030230 	.word	0x00030230

000d6c5c <HAL_SPI_Begin_Ext>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
   d6c5c:	b508      	push	{r3, lr}
   d6c5e:	4b02      	ldr	r3, [pc, #8]	; (d6c68 <HAL_SPI_Begin_Ext+0xc>)
   d6c60:	681b      	ldr	r3, [r3, #0]
   d6c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c64:	9301      	str	r3, [sp, #4]
   d6c66:	bd08      	pop	{r3, pc}
   d6c68:	00030230 	.word	0x00030230

000d6c6c <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d6c6c:	b508      	push	{r3, lr}
   d6c6e:	4b02      	ldr	r3, [pc, #8]	; (d6c78 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d6c70:	681b      	ldr	r3, [r3, #0]
   d6c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6c74:	9301      	str	r3, [sp, #4]
   d6c76:	bd08      	pop	{r3, pc}
   d6c78:	00030230 	.word	0x00030230

000d6c7c <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6c7c:	b508      	push	{r3, lr}
   d6c7e:	4b02      	ldr	r3, [pc, #8]	; (d6c88 <HAL_SPI_Set_Settings+0xc>)
   d6c80:	681b      	ldr	r3, [r3, #0]
   d6c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6c84:	9301      	str	r3, [sp, #4]
   d6c86:	bd08      	pop	{r3, pc}
   d6c88:	00030230 	.word	0x00030230

000d6c8c <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d6c8c:	b508      	push	{r3, lr}
   d6c8e:	4b02      	ldr	r3, [pc, #8]	; (d6c98 <HAL_SPI_Acquire+0xc>)
   d6c90:	681b      	ldr	r3, [r3, #0]
   d6c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c94:	9301      	str	r3, [sp, #4]
   d6c96:	bd08      	pop	{r3, pc}
   d6c98:	00030230 	.word	0x00030230

000d6c9c <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d6c9c:	b508      	push	{r3, lr}
   d6c9e:	4b02      	ldr	r3, [pc, #8]	; (d6ca8 <HAL_SPI_Release+0xc>)
   d6ca0:	681b      	ldr	r3, [r3, #0]
   d6ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6ca4:	9301      	str	r3, [sp, #4]
   d6ca6:	bd08      	pop	{r3, pc}
   d6ca8:	00030230 	.word	0x00030230

000d6cac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6cac:	b508      	push	{r3, lr}
   d6cae:	4b02      	ldr	r3, [pc, #8]	; (d6cb8 <HAL_RNG_GetRandomNumber+0xc>)
   d6cb0:	681b      	ldr	r3, [r3, #0]
   d6cb2:	685b      	ldr	r3, [r3, #4]
   d6cb4:	9301      	str	r3, [sp, #4]
   d6cb6:	bd08      	pop	{r3, pc}
   d6cb8:	00030218 	.word	0x00030218

000d6cbc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6cbc:	b508      	push	{r3, lr}
   d6cbe:	4b02      	ldr	r3, [pc, #8]	; (d6cc8 <HAL_Delay_Microseconds+0xc>)
   d6cc0:	681b      	ldr	r3, [r3, #0]
   d6cc2:	68db      	ldr	r3, [r3, #12]
   d6cc4:	9301      	str	r3, [sp, #4]
   d6cc6:	bd08      	pop	{r3, pc}
   d6cc8:	00030218 	.word	0x00030218

000d6ccc <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d6ccc:	b508      	push	{r3, lr}
   d6cce:	4b02      	ldr	r3, [pc, #8]	; (d6cd8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6cd0:	681b      	ldr	r3, [r3, #0]
   d6cd2:	691b      	ldr	r3, [r3, #16]
   d6cd4:	9301      	str	r3, [sp, #4]
   d6cd6:	bd08      	pop	{r3, pc}
   d6cd8:	00030218 	.word	0x00030218

000d6cdc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6cdc:	b508      	push	{r3, lr}
   d6cde:	4b02      	ldr	r3, [pc, #8]	; (d6ce8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6ce0:	681b      	ldr	r3, [r3, #0]
   d6ce2:	695b      	ldr	r3, [r3, #20]
   d6ce4:	9301      	str	r3, [sp, #4]
   d6ce6:	bd08      	pop	{r3, pc}
   d6ce8:	00030218 	.word	0x00030218

000d6cec <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d6cec:	b508      	push	{r3, lr}
   d6cee:	4b02      	ldr	r3, [pc, #8]	; (d6cf8 <HAL_RTC_Get_UnixTime+0xc>)
   d6cf0:	681b      	ldr	r3, [r3, #0]
   d6cf2:	69db      	ldr	r3, [r3, #28]
   d6cf4:	9301      	str	r3, [sp, #4]
   d6cf6:	bd08      	pop	{r3, pc}
   d6cf8:	00030218 	.word	0x00030218

000d6cfc <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6cfc:	b508      	push	{r3, lr}
   d6cfe:	4b02      	ldr	r3, [pc, #8]	; (d6d08 <HAL_RTC_Time_Is_Valid+0xc>)
   d6d00:	681b      	ldr	r3, [r3, #0]
   d6d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6d04:	9301      	str	r3, [sp, #4]
   d6d06:	bd08      	pop	{r3, pc}
   d6d08:	00030218 	.word	0x00030218

000d6d0c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d6d0c:	b508      	push	{r3, lr}
   d6d0e:	4b02      	ldr	r3, [pc, #8]	; (d6d18 <hal_ble_stack_init+0xc>)
   d6d10:	681b      	ldr	r3, [r3, #0]
   d6d12:	689b      	ldr	r3, [r3, #8]
   d6d14:	9301      	str	r3, [sp, #4]
   d6d16:	bd08      	pop	{r3, pc}
   d6d18:	00030278 	.word	0x00030278

000d6d1c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d6d1c:	b508      	push	{r3, lr}
   d6d1e:	4b02      	ldr	r3, [pc, #8]	; (d6d28 <hal_ble_gap_set_advertising_data+0xc>)
   d6d20:	681b      	ldr	r3, [r3, #0]
   d6d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6d24:	9301      	str	r3, [sp, #4]
   d6d26:	bd08      	pop	{r3, pc}
   d6d28:	00030278 	.word	0x00030278

000d6d2c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d6d2c:	b508      	push	{r3, lr}
   d6d2e:	4b02      	ldr	r3, [pc, #8]	; (d6d38 <hal_ble_gap_set_scan_response_data+0xc>)
   d6d30:	681b      	ldr	r3, [r3, #0]
   d6d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6d34:	9301      	str	r3, [sp, #4]
   d6d36:	bd08      	pop	{r3, pc}
   d6d38:	00030278 	.word	0x00030278

000d6d3c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d6d3c:	b508      	push	{r3, lr}
   d6d3e:	4b02      	ldr	r3, [pc, #8]	; (d6d48 <hal_ble_gap_start_advertising+0xc>)
   d6d40:	681b      	ldr	r3, [r3, #0]
   d6d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d6d44:	9301      	str	r3, [sp, #4]
   d6d46:	bd08      	pop	{r3, pc}
   d6d48:	00030278 	.word	0x00030278

000d6d4c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d6d4c:	b508      	push	{r3, lr}
   d6d4e:	4b03      	ldr	r3, [pc, #12]	; (d6d5c <hal_ble_gap_disconnect+0x10>)
   d6d50:	681b      	ldr	r3, [r3, #0]
   d6d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d6d56:	9301      	str	r3, [sp, #4]
   d6d58:	bd08      	pop	{r3, pc}
   d6d5a:	0000      	.short	0x0000
   d6d5c:	00030278 	.word	0x00030278

000d6d60 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d6d60:	b508      	push	{r3, lr}
   d6d62:	4b03      	ldr	r3, [pc, #12]	; (d6d70 <hal_ble_gatt_server_add_service+0x10>)
   d6d64:	681b      	ldr	r3, [r3, #0]
   d6d66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d6d6a:	9301      	str	r3, [sp, #4]
   d6d6c:	bd08      	pop	{r3, pc}
   d6d6e:	0000      	.short	0x0000
   d6d70:	00030278 	.word	0x00030278

000d6d74 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d6d74:	b508      	push	{r3, lr}
   d6d76:	4b03      	ldr	r3, [pc, #12]	; (d6d84 <hal_ble_gatt_server_add_characteristic+0x10>)
   d6d78:	681b      	ldr	r3, [r3, #0]
   d6d7a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d6d7e:	9301      	str	r3, [sp, #4]
   d6d80:	bd08      	pop	{r3, pc}
   d6d82:	0000      	.short	0x0000
   d6d84:	00030278 	.word	0x00030278

000d6d88 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d6d88:	b508      	push	{r3, lr}
   d6d8a:	4b03      	ldr	r3, [pc, #12]	; (d6d98 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d6d8c:	681b      	ldr	r3, [r3, #0]
   d6d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d6d92:	9301      	str	r3, [sp, #4]
   d6d94:	bd08      	pop	{r3, pc}
   d6d96:	0000      	.short	0x0000
   d6d98:	00030278 	.word	0x00030278

000d6d9c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6d9c:	b508      	push	{r3, lr}
   d6d9e:	4b02      	ldr	r3, [pc, #8]	; (d6da8 <os_thread_is_current+0xc>)
   d6da0:	681b      	ldr	r3, [r3, #0]
   d6da2:	689b      	ldr	r3, [r3, #8]
   d6da4:	9301      	str	r3, [sp, #4]
   d6da6:	bd08      	pop	{r3, pc}
   d6da8:	00030248 	.word	0x00030248

000d6dac <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6dac:	b508      	push	{r3, lr}
   d6dae:	4b02      	ldr	r3, [pc, #8]	; (d6db8 <os_thread_yield+0xc>)
   d6db0:	681b      	ldr	r3, [r3, #0]
   d6db2:	68db      	ldr	r3, [r3, #12]
   d6db4:	9301      	str	r3, [sp, #4]
   d6db6:	bd08      	pop	{r3, pc}
   d6db8:	00030248 	.word	0x00030248

000d6dbc <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6dbc:	b508      	push	{r3, lr}
   d6dbe:	4b02      	ldr	r3, [pc, #8]	; (d6dc8 <os_thread_join+0xc>)
   d6dc0:	681b      	ldr	r3, [r3, #0]
   d6dc2:	691b      	ldr	r3, [r3, #16]
   d6dc4:	9301      	str	r3, [sp, #4]
   d6dc6:	bd08      	pop	{r3, pc}
   d6dc8:	00030248 	.word	0x00030248

000d6dcc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6dcc:	b508      	push	{r3, lr}
   d6dce:	4b02      	ldr	r3, [pc, #8]	; (d6dd8 <os_thread_cleanup+0xc>)
   d6dd0:	681b      	ldr	r3, [r3, #0]
   d6dd2:	695b      	ldr	r3, [r3, #20]
   d6dd4:	9301      	str	r3, [sp, #4]
   d6dd6:	bd08      	pop	{r3, pc}
   d6dd8:	00030248 	.word	0x00030248

000d6ddc <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6ddc:	b508      	push	{r3, lr}
   d6dde:	4b02      	ldr	r3, [pc, #8]	; (d6de8 <os_thread_scheduling+0xc>)
   d6de0:	681b      	ldr	r3, [r3, #0]
   d6de2:	69db      	ldr	r3, [r3, #28]
   d6de4:	9301      	str	r3, [sp, #4]
   d6de6:	bd08      	pop	{r3, pc}
   d6de8:	00030248 	.word	0x00030248

000d6dec <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6dec:	b508      	push	{r3, lr}
   d6dee:	4b02      	ldr	r3, [pc, #8]	; (d6df8 <os_timer_create+0xc>)
   d6df0:	681b      	ldr	r3, [r3, #0]
   d6df2:	6a1b      	ldr	r3, [r3, #32]
   d6df4:	9301      	str	r3, [sp, #4]
   d6df6:	bd08      	pop	{r3, pc}
   d6df8:	00030248 	.word	0x00030248

000d6dfc <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d6dfc:	b508      	push	{r3, lr}
   d6dfe:	4b02      	ldr	r3, [pc, #8]	; (d6e08 <os_timer_destroy+0xc>)
   d6e00:	681b      	ldr	r3, [r3, #0]
   d6e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6e04:	9301      	str	r3, [sp, #4]
   d6e06:	bd08      	pop	{r3, pc}
   d6e08:	00030248 	.word	0x00030248

000d6e0c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d6e0c:	b508      	push	{r3, lr}
   d6e0e:	4b02      	ldr	r3, [pc, #8]	; (d6e18 <os_timer_get_id+0xc>)
   d6e10:	681b      	ldr	r3, [r3, #0]
   d6e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6e14:	9301      	str	r3, [sp, #4]
   d6e16:	bd08      	pop	{r3, pc}
   d6e18:	00030248 	.word	0x00030248

000d6e1c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d6e1c:	b508      	push	{r3, lr}
   d6e1e:	4b02      	ldr	r3, [pc, #8]	; (d6e28 <os_timer_change+0xc>)
   d6e20:	681b      	ldr	r3, [r3, #0]
   d6e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6e24:	9301      	str	r3, [sp, #4]
   d6e26:	bd08      	pop	{r3, pc}
   d6e28:	00030248 	.word	0x00030248

000d6e2c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6e2c:	b508      	push	{r3, lr}
   d6e2e:	4b02      	ldr	r3, [pc, #8]	; (d6e38 <os_mutex_recursive_create+0xc>)
   d6e30:	681b      	ldr	r3, [r3, #0]
   d6e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6e34:	9301      	str	r3, [sp, #4]
   d6e36:	bd08      	pop	{r3, pc}
   d6e38:	00030248 	.word	0x00030248

000d6e3c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6e3c:	b508      	push	{r3, lr}
   d6e3e:	4b02      	ldr	r3, [pc, #8]	; (d6e48 <os_mutex_recursive_destroy+0xc>)
   d6e40:	681b      	ldr	r3, [r3, #0]
   d6e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6e44:	9301      	str	r3, [sp, #4]
   d6e46:	bd08      	pop	{r3, pc}
   d6e48:	00030248 	.word	0x00030248

000d6e4c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d6e4c:	b508      	push	{r3, lr}
   d6e4e:	4b02      	ldr	r3, [pc, #8]	; (d6e58 <os_mutex_recursive_lock+0xc>)
   d6e50:	681b      	ldr	r3, [r3, #0]
   d6e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6e54:	9301      	str	r3, [sp, #4]
   d6e56:	bd08      	pop	{r3, pc}
   d6e58:	00030248 	.word	0x00030248

000d6e5c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d6e5c:	b508      	push	{r3, lr}
   d6e5e:	4b02      	ldr	r3, [pc, #8]	; (d6e68 <os_mutex_recursive_unlock+0xc>)
   d6e60:	681b      	ldr	r3, [r3, #0]
   d6e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6e64:	9301      	str	r3, [sp, #4]
   d6e66:	bd08      	pop	{r3, pc}
   d6e68:	00030248 	.word	0x00030248

000d6e6c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d6e6c:	b508      	push	{r3, lr}
   d6e6e:	4b02      	ldr	r3, [pc, #8]	; (d6e78 <os_timer_set_id+0xc>)
   d6e70:	681b      	ldr	r3, [r3, #0]
   d6e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6e74:	9301      	str	r3, [sp, #4]
   d6e76:	bd08      	pop	{r3, pc}
   d6e78:	00030248 	.word	0x00030248

000d6e7c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6e7c:	b508      	push	{r3, lr}
   d6e7e:	4b02      	ldr	r3, [pc, #8]	; (d6e88 <inet_inet_ntop+0xc>)
   d6e80:	681b      	ldr	r3, [r3, #0]
   d6e82:	695b      	ldr	r3, [r3, #20]
   d6e84:	9301      	str	r3, [sp, #4]
   d6e86:	bd08      	pop	{r3, pc}
   d6e88:	00030264 	.word	0x00030264

000d6e8c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6e8c:	b508      	push	{r3, lr}
   d6e8e:	4b02      	ldr	r3, [pc, #8]	; (d6e98 <HAL_USART_Init+0xc>)
   d6e90:	681b      	ldr	r3, [r3, #0]
   d6e92:	681b      	ldr	r3, [r3, #0]
   d6e94:	9301      	str	r3, [sp, #4]
   d6e96:	bd08      	pop	{r3, pc}
   d6e98:	0003023c 	.word	0x0003023c

000d6e9c <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d6e9c:	b508      	push	{r3, lr}
   d6e9e:	4b02      	ldr	r3, [pc, #8]	; (d6ea8 <HAL_USART_End+0xc>)
   d6ea0:	681b      	ldr	r3, [r3, #0]
   d6ea2:	689b      	ldr	r3, [r3, #8]
   d6ea4:	9301      	str	r3, [sp, #4]
   d6ea6:	bd08      	pop	{r3, pc}
   d6ea8:	0003023c 	.word	0x0003023c

000d6eac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6eac:	b508      	push	{r3, lr}
   d6eae:	4b02      	ldr	r3, [pc, #8]	; (d6eb8 <HAL_USART_Write_Data+0xc>)
   d6eb0:	681b      	ldr	r3, [r3, #0]
   d6eb2:	68db      	ldr	r3, [r3, #12]
   d6eb4:	9301      	str	r3, [sp, #4]
   d6eb6:	bd08      	pop	{r3, pc}
   d6eb8:	0003023c 	.word	0x0003023c

000d6ebc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6ebc:	b508      	push	{r3, lr}
   d6ebe:	4b02      	ldr	r3, [pc, #8]	; (d6ec8 <HAL_USART_Available_Data+0xc>)
   d6ec0:	681b      	ldr	r3, [r3, #0]
   d6ec2:	691b      	ldr	r3, [r3, #16]
   d6ec4:	9301      	str	r3, [sp, #4]
   d6ec6:	bd08      	pop	{r3, pc}
   d6ec8:	0003023c 	.word	0x0003023c

000d6ecc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6ecc:	b508      	push	{r3, lr}
   d6ece:	4b02      	ldr	r3, [pc, #8]	; (d6ed8 <HAL_USART_Read_Data+0xc>)
   d6ed0:	681b      	ldr	r3, [r3, #0]
   d6ed2:	695b      	ldr	r3, [r3, #20]
   d6ed4:	9301      	str	r3, [sp, #4]
   d6ed6:	bd08      	pop	{r3, pc}
   d6ed8:	0003023c 	.word	0x0003023c

000d6edc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6edc:	b508      	push	{r3, lr}
   d6ede:	4b02      	ldr	r3, [pc, #8]	; (d6ee8 <HAL_USART_Peek_Data+0xc>)
   d6ee0:	681b      	ldr	r3, [r3, #0]
   d6ee2:	699b      	ldr	r3, [r3, #24]
   d6ee4:	9301      	str	r3, [sp, #4]
   d6ee6:	bd08      	pop	{r3, pc}
   d6ee8:	0003023c 	.word	0x0003023c

000d6eec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6eec:	b508      	push	{r3, lr}
   d6eee:	4b02      	ldr	r3, [pc, #8]	; (d6ef8 <HAL_USART_Flush_Data+0xc>)
   d6ef0:	681b      	ldr	r3, [r3, #0]
   d6ef2:	69db      	ldr	r3, [r3, #28]
   d6ef4:	9301      	str	r3, [sp, #4]
   d6ef6:	bd08      	pop	{r3, pc}
   d6ef8:	0003023c 	.word	0x0003023c

000d6efc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6efc:	b508      	push	{r3, lr}
   d6efe:	4b02      	ldr	r3, [pc, #8]	; (d6f08 <HAL_USART_Is_Enabled+0xc>)
   d6f00:	681b      	ldr	r3, [r3, #0]
   d6f02:	6a1b      	ldr	r3, [r3, #32]
   d6f04:	9301      	str	r3, [sp, #4]
   d6f06:	bd08      	pop	{r3, pc}
   d6f08:	0003023c 	.word	0x0003023c

000d6f0c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6f0c:	b508      	push	{r3, lr}
   d6f0e:	4b02      	ldr	r3, [pc, #8]	; (d6f18 <HAL_USART_Available_Data_For_Write+0xc>)
   d6f10:	681b      	ldr	r3, [r3, #0]
   d6f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6f14:	9301      	str	r3, [sp, #4]
   d6f16:	bd08      	pop	{r3, pc}
   d6f18:	0003023c 	.word	0x0003023c

000d6f1c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d6f1c:	b508      	push	{r3, lr}
   d6f1e:	4b02      	ldr	r3, [pc, #8]	; (d6f28 <HAL_USART_BeginConfig+0xc>)
   d6f20:	681b      	ldr	r3, [r3, #0]
   d6f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f24:	9301      	str	r3, [sp, #4]
   d6f26:	bd08      	pop	{r3, pc}
   d6f28:	0003023c 	.word	0x0003023c

000d6f2c <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d6f2c:	b508      	push	{r3, lr}
   d6f2e:	4b02      	ldr	r3, [pc, #8]	; (d6f38 <HAL_I2C_Set_Speed+0xc>)
   d6f30:	681b      	ldr	r3, [r3, #0]
   d6f32:	681b      	ldr	r3, [r3, #0]
   d6f34:	9301      	str	r3, [sp, #4]
   d6f36:	bd08      	pop	{r3, pc}
   d6f38:	00030228 	.word	0x00030228

000d6f3c <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6f3c:	b508      	push	{r3, lr}
   d6f3e:	4b02      	ldr	r3, [pc, #8]	; (d6f48 <HAL_I2C_Begin+0xc>)
   d6f40:	681b      	ldr	r3, [r3, #0]
   d6f42:	68db      	ldr	r3, [r3, #12]
   d6f44:	9301      	str	r3, [sp, #4]
   d6f46:	bd08      	pop	{r3, pc}
   d6f48:	00030228 	.word	0x00030228

000d6f4c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d6f4c:	b508      	push	{r3, lr}
   d6f4e:	4b02      	ldr	r3, [pc, #8]	; (d6f58 <HAL_I2C_Begin_Transmission+0xc>)
   d6f50:	681b      	ldr	r3, [r3, #0]
   d6f52:	699b      	ldr	r3, [r3, #24]
   d6f54:	9301      	str	r3, [sp, #4]
   d6f56:	bd08      	pop	{r3, pc}
   d6f58:	00030228 	.word	0x00030228

000d6f5c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6f5c:	b508      	push	{r3, lr}
   d6f5e:	4b02      	ldr	r3, [pc, #8]	; (d6f68 <HAL_I2C_End_Transmission+0xc>)
   d6f60:	681b      	ldr	r3, [r3, #0]
   d6f62:	69db      	ldr	r3, [r3, #28]
   d6f64:	9301      	str	r3, [sp, #4]
   d6f66:	bd08      	pop	{r3, pc}
   d6f68:	00030228 	.word	0x00030228

000d6f6c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6f6c:	b508      	push	{r3, lr}
   d6f6e:	4b02      	ldr	r3, [pc, #8]	; (d6f78 <HAL_I2C_Write_Data+0xc>)
   d6f70:	681b      	ldr	r3, [r3, #0]
   d6f72:	6a1b      	ldr	r3, [r3, #32]
   d6f74:	9301      	str	r3, [sp, #4]
   d6f76:	bd08      	pop	{r3, pc}
   d6f78:	00030228 	.word	0x00030228

000d6f7c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6f7c:	b508      	push	{r3, lr}
   d6f7e:	4b02      	ldr	r3, [pc, #8]	; (d6f88 <HAL_I2C_Available_Data+0xc>)
   d6f80:	681b      	ldr	r3, [r3, #0]
   d6f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6f84:	9301      	str	r3, [sp, #4]
   d6f86:	bd08      	pop	{r3, pc}
   d6f88:	00030228 	.word	0x00030228

000d6f8c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6f8c:	b508      	push	{r3, lr}
   d6f8e:	4b02      	ldr	r3, [pc, #8]	; (d6f98 <HAL_I2C_Read_Data+0xc>)
   d6f90:	681b      	ldr	r3, [r3, #0]
   d6f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6f94:	9301      	str	r3, [sp, #4]
   d6f96:	bd08      	pop	{r3, pc}
   d6f98:	00030228 	.word	0x00030228

000d6f9c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6f9c:	b508      	push	{r3, lr}
   d6f9e:	4b02      	ldr	r3, [pc, #8]	; (d6fa8 <HAL_I2C_Peek_Data+0xc>)
   d6fa0:	681b      	ldr	r3, [r3, #0]
   d6fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6fa4:	9301      	str	r3, [sp, #4]
   d6fa6:	bd08      	pop	{r3, pc}
   d6fa8:	00030228 	.word	0x00030228

000d6fac <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6fac:	b508      	push	{r3, lr}
   d6fae:	4b02      	ldr	r3, [pc, #8]	; (d6fb8 <HAL_I2C_Flush_Data+0xc>)
   d6fb0:	681b      	ldr	r3, [r3, #0]
   d6fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6fb4:	9301      	str	r3, [sp, #4]
   d6fb6:	bd08      	pop	{r3, pc}
   d6fb8:	00030228 	.word	0x00030228

000d6fbc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6fbc:	b508      	push	{r3, lr}
   d6fbe:	4b02      	ldr	r3, [pc, #8]	; (d6fc8 <HAL_I2C_Is_Enabled+0xc>)
   d6fc0:	681b      	ldr	r3, [r3, #0]
   d6fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6fc4:	9301      	str	r3, [sp, #4]
   d6fc6:	bd08      	pop	{r3, pc}
   d6fc8:	00030228 	.word	0x00030228

000d6fcc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6fcc:	b508      	push	{r3, lr}
   d6fce:	4b02      	ldr	r3, [pc, #8]	; (d6fd8 <HAL_I2C_Init+0xc>)
   d6fd0:	681b      	ldr	r3, [r3, #0]
   d6fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6fd4:	9301      	str	r3, [sp, #4]
   d6fd6:	bd08      	pop	{r3, pc}
   d6fd8:	00030228 	.word	0x00030228

000d6fdc <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   d6fdc:	b508      	push	{r3, lr}
   d6fde:	4b02      	ldr	r3, [pc, #8]	; (d6fe8 <HAL_Servo_Attach+0xc>)
   d6fe0:	681b      	ldr	r3, [r3, #0]
   d6fe2:	691b      	ldr	r3, [r3, #16]
   d6fe4:	9301      	str	r3, [sp, #4]
   d6fe6:	bd08      	pop	{r3, pc}
   d6fe8:	00030224 	.word	0x00030224

000d6fec <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   d6fec:	b508      	push	{r3, lr}
   d6fee:	4b02      	ldr	r3, [pc, #8]	; (d6ff8 <HAL_Servo_Detach+0xc>)
   d6ff0:	681b      	ldr	r3, [r3, #0]
   d6ff2:	695b      	ldr	r3, [r3, #20]
   d6ff4:	9301      	str	r3, [sp, #4]
   d6ff6:	bd08      	pop	{r3, pc}
   d6ff8:	00030224 	.word	0x00030224

000d6ffc <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   d6ffc:	b508      	push	{r3, lr}
   d6ffe:	4b02      	ldr	r3, [pc, #8]	; (d7008 <HAL_Servo_Write_Pulse_Width+0xc>)
   d7000:	681b      	ldr	r3, [r3, #0]
   d7002:	699b      	ldr	r3, [r3, #24]
   d7004:	9301      	str	r3, [sp, #4]
   d7006:	bd08      	pop	{r3, pc}
   d7008:	00030224 	.word	0x00030224

000d700c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d700c:	b508      	push	{r3, lr}
   d700e:	4b02      	ldr	r3, [pc, #8]	; (d7018 <HAL_USB_USART_Init+0xc>)
   d7010:	681b      	ldr	r3, [r3, #0]
   d7012:	681b      	ldr	r3, [r3, #0]
   d7014:	9301      	str	r3, [sp, #4]
   d7016:	bd08      	pop	{r3, pc}
   d7018:	0003024c 	.word	0x0003024c

000d701c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d701c:	b508      	push	{r3, lr}
   d701e:	4b02      	ldr	r3, [pc, #8]	; (d7028 <HAL_USB_USART_Begin+0xc>)
   d7020:	681b      	ldr	r3, [r3, #0]
   d7022:	685b      	ldr	r3, [r3, #4]
   d7024:	9301      	str	r3, [sp, #4]
   d7026:	bd08      	pop	{r3, pc}
   d7028:	0003024c 	.word	0x0003024c

000d702c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d702c:	b508      	push	{r3, lr}
   d702e:	4b02      	ldr	r3, [pc, #8]	; (d7038 <HAL_USB_USART_End+0xc>)
   d7030:	681b      	ldr	r3, [r3, #0]
   d7032:	689b      	ldr	r3, [r3, #8]
   d7034:	9301      	str	r3, [sp, #4]
   d7036:	bd08      	pop	{r3, pc}
   d7038:	0003024c 	.word	0x0003024c

000d703c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d703c:	b508      	push	{r3, lr}
   d703e:	4b02      	ldr	r3, [pc, #8]	; (d7048 <HAL_USB_USART_Available_Data+0xc>)
   d7040:	681b      	ldr	r3, [r3, #0]
   d7042:	691b      	ldr	r3, [r3, #16]
   d7044:	9301      	str	r3, [sp, #4]
   d7046:	bd08      	pop	{r3, pc}
   d7048:	0003024c 	.word	0x0003024c

000d704c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d704c:	b508      	push	{r3, lr}
   d704e:	4b02      	ldr	r3, [pc, #8]	; (d7058 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7050:	681b      	ldr	r3, [r3, #0]
   d7052:	695b      	ldr	r3, [r3, #20]
   d7054:	9301      	str	r3, [sp, #4]
   d7056:	bd08      	pop	{r3, pc}
   d7058:	0003024c 	.word	0x0003024c

000d705c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d705c:	b508      	push	{r3, lr}
   d705e:	4b02      	ldr	r3, [pc, #8]	; (d7068 <HAL_USB_USART_Receive_Data+0xc>)
   d7060:	681b      	ldr	r3, [r3, #0]
   d7062:	699b      	ldr	r3, [r3, #24]
   d7064:	9301      	str	r3, [sp, #4]
   d7066:	bd08      	pop	{r3, pc}
   d7068:	0003024c 	.word	0x0003024c

000d706c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d706c:	b508      	push	{r3, lr}
   d706e:	4b02      	ldr	r3, [pc, #8]	; (d7078 <HAL_USB_USART_Send_Data+0xc>)
   d7070:	681b      	ldr	r3, [r3, #0]
   d7072:	69db      	ldr	r3, [r3, #28]
   d7074:	9301      	str	r3, [sp, #4]
   d7076:	bd08      	pop	{r3, pc}
   d7078:	0003024c 	.word	0x0003024c

000d707c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d707c:	b508      	push	{r3, lr}
   d707e:	4b02      	ldr	r3, [pc, #8]	; (d7088 <HAL_USB_USART_Flush_Data+0xc>)
   d7080:	681b      	ldr	r3, [r3, #0]
   d7082:	6a1b      	ldr	r3, [r3, #32]
   d7084:	9301      	str	r3, [sp, #4]
   d7086:	bd08      	pop	{r3, pc}
   d7088:	0003024c 	.word	0x0003024c

000d708c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d708c:	b508      	push	{r3, lr}
   d708e:	4b02      	ldr	r3, [pc, #8]	; (d7098 <panic_+0xc>)
   d7090:	681b      	ldr	r3, [r3, #0]
   d7092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7094:	9301      	str	r3, [sp, #4]
   d7096:	bd08      	pop	{r3, pc}
   d7098:	00030260 	.word	0x00030260

000d709c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d709c:	b508      	push	{r3, lr}
   d709e:	4b02      	ldr	r3, [pc, #8]	; (d70a8 <log_message+0xc>)
   d70a0:	681b      	ldr	r3, [r3, #0]
   d70a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d70a4:	9301      	str	r3, [sp, #4]
   d70a6:	bd08      	pop	{r3, pc}
   d70a8:	00030260 	.word	0x00030260

000d70ac <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d70ac:	b508      	push	{r3, lr}
   d70ae:	4b02      	ldr	r3, [pc, #8]	; (d70b8 <log_level_name+0xc>)
   d70b0:	681b      	ldr	r3, [r3, #0]
   d70b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d70b4:	9301      	str	r3, [sp, #4]
   d70b6:	bd08      	pop	{r3, pc}
   d70b8:	00030260 	.word	0x00030260

000d70bc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d70bc:	b508      	push	{r3, lr}
   d70be:	4b02      	ldr	r3, [pc, #8]	; (d70c8 <log_set_callbacks+0xc>)
   d70c0:	681b      	ldr	r3, [r3, #0]
   d70c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d70c4:	9301      	str	r3, [sp, #4]
   d70c6:	bd08      	pop	{r3, pc}
   d70c8:	00030260 	.word	0x00030260

000d70cc <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   d70cc:	b508      	push	{r3, lr}
   d70ce:	4b03      	ldr	r3, [pc, #12]	; (d70dc <led_set_status_active+0x10>)
   d70d0:	681b      	ldr	r3, [r3, #0]
   d70d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d70d6:	9301      	str	r3, [sp, #4]
   d70d8:	bd08      	pop	{r3, pc}
   d70da:	0000      	.short	0x0000
   d70dc:	00030260 	.word	0x00030260

000d70e0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d70e0:	b508      	push	{r3, lr}
   d70e2:	4b02      	ldr	r3, [pc, #8]	; (d70ec <system_mode+0xc>)
   d70e4:	681b      	ldr	r3, [r3, #0]
   d70e6:	681b      	ldr	r3, [r3, #0]
   d70e8:	9301      	str	r3, [sp, #4]
   d70ea:	bd08      	pop	{r3, pc}
   d70ec:	00030220 	.word	0x00030220

000d70f0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d70f0:	b508      	push	{r3, lr}
   d70f2:	4b02      	ldr	r3, [pc, #8]	; (d70fc <set_system_mode+0xc>)
   d70f4:	681b      	ldr	r3, [r3, #0]
   d70f6:	685b      	ldr	r3, [r3, #4]
   d70f8:	9301      	str	r3, [sp, #4]
   d70fa:	bd08      	pop	{r3, pc}
   d70fc:	00030220 	.word	0x00030220

000d7100 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7100:	b508      	push	{r3, lr}
   d7102:	4b02      	ldr	r3, [pc, #8]	; (d710c <system_delay_ms+0xc>)
   d7104:	681b      	ldr	r3, [r3, #0]
   d7106:	695b      	ldr	r3, [r3, #20]
   d7108:	9301      	str	r3, [sp, #4]
   d710a:	bd08      	pop	{r3, pc}
   d710c:	00030220 	.word	0x00030220

000d7110 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7110:	b508      	push	{r3, lr}
   d7112:	4b02      	ldr	r3, [pc, #8]	; (d711c <system_thread_get_state+0xc>)
   d7114:	681b      	ldr	r3, [r3, #0]
   d7116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7118:	9301      	str	r3, [sp, #4]
   d711a:	bd08      	pop	{r3, pc}
   d711c:	00030220 	.word	0x00030220

000d7120 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   d7120:	b508      	push	{r3, lr}
   d7122:	4b02      	ldr	r3, [pc, #8]	; (d712c <led_pattern_period+0xc>)
   d7124:	681b      	ldr	r3, [r3, #0]
   d7126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d7128:	9301      	str	r3, [sp, #4]
   d712a:	bd08      	pop	{r3, pc}
   d712c:	00030220 	.word	0x00030220

000d7130 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7130:	b508      	push	{r3, lr}
   d7132:	4b03      	ldr	r3, [pc, #12]	; (d7140 <system_ctrl_set_app_request_handler+0x10>)
   d7134:	681b      	ldr	r3, [r3, #0]
   d7136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d713a:	9301      	str	r3, [sp, #4]
   d713c:	bd08      	pop	{r3, pc}
   d713e:	0000      	.short	0x0000
   d7140:	00030220 	.word	0x00030220

000d7144 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7144:	b508      	push	{r3, lr}
   d7146:	4b03      	ldr	r3, [pc, #12]	; (d7154 <system_ctrl_set_result+0x10>)
   d7148:	681b      	ldr	r3, [r3, #0]
   d714a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d714e:	9301      	str	r3, [sp, #4]
   d7150:	bd08      	pop	{r3, pc}
   d7152:	0000      	.short	0x0000
   d7154:	00030220 	.word	0x00030220

000d7158 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7158:	b508      	push	{r3, lr}
   d715a:	4b02      	ldr	r3, [pc, #8]	; (d7164 <network_connect+0xc>)
   d715c:	681b      	ldr	r3, [r3, #0]
   d715e:	685b      	ldr	r3, [r3, #4]
   d7160:	9301      	str	r3, [sp, #4]
   d7162:	bd08      	pop	{r3, pc}
   d7164:	00030240 	.word	0x00030240

000d7168 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7168:	b508      	push	{r3, lr}
   d716a:	4b02      	ldr	r3, [pc, #8]	; (d7174 <network_connecting+0xc>)
   d716c:	681b      	ldr	r3, [r3, #0]
   d716e:	689b      	ldr	r3, [r3, #8]
   d7170:	9301      	str	r3, [sp, #4]
   d7172:	bd08      	pop	{r3, pc}
   d7174:	00030240 	.word	0x00030240

000d7178 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7178:	b508      	push	{r3, lr}
   d717a:	4b02      	ldr	r3, [pc, #8]	; (d7184 <network_disconnect+0xc>)
   d717c:	681b      	ldr	r3, [r3, #0]
   d717e:	68db      	ldr	r3, [r3, #12]
   d7180:	9301      	str	r3, [sp, #4]
   d7182:	bd08      	pop	{r3, pc}
   d7184:	00030240 	.word	0x00030240

000d7188 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7188:	b508      	push	{r3, lr}
   d718a:	4b02      	ldr	r3, [pc, #8]	; (d7194 <network_ready+0xc>)
   d718c:	681b      	ldr	r3, [r3, #0]
   d718e:	691b      	ldr	r3, [r3, #16]
   d7190:	9301      	str	r3, [sp, #4]
   d7192:	bd08      	pop	{r3, pc}
   d7194:	00030240 	.word	0x00030240

000d7198 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7198:	b508      	push	{r3, lr}
   d719a:	4b02      	ldr	r3, [pc, #8]	; (d71a4 <network_on+0xc>)
   d719c:	681b      	ldr	r3, [r3, #0]
   d719e:	695b      	ldr	r3, [r3, #20]
   d71a0:	9301      	str	r3, [sp, #4]
   d71a2:	bd08      	pop	{r3, pc}
   d71a4:	00030240 	.word	0x00030240

000d71a8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d71a8:	b508      	push	{r3, lr}
   d71aa:	4b02      	ldr	r3, [pc, #8]	; (d71b4 <network_off+0xc>)
   d71ac:	681b      	ldr	r3, [r3, #0]
   d71ae:	699b      	ldr	r3, [r3, #24]
   d71b0:	9301      	str	r3, [sp, #4]
   d71b2:	bd08      	pop	{r3, pc}
   d71b4:	00030240 	.word	0x00030240

000d71b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d71b8:	b508      	push	{r3, lr}
   d71ba:	4b02      	ldr	r3, [pc, #8]	; (d71c4 <network_listen+0xc>)
   d71bc:	681b      	ldr	r3, [r3, #0]
   d71be:	69db      	ldr	r3, [r3, #28]
   d71c0:	9301      	str	r3, [sp, #4]
   d71c2:	bd08      	pop	{r3, pc}
   d71c4:	00030240 	.word	0x00030240

000d71c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d71c8:	b508      	push	{r3, lr}
   d71ca:	4b02      	ldr	r3, [pc, #8]	; (d71d4 <network_listening+0xc>)
   d71cc:	681b      	ldr	r3, [r3, #0]
   d71ce:	6a1b      	ldr	r3, [r3, #32]
   d71d0:	9301      	str	r3, [sp, #4]
   d71d2:	bd08      	pop	{r3, pc}
   d71d4:	00030240 	.word	0x00030240

000d71d8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d71d8:	b508      	push	{r3, lr}
   d71da:	4b02      	ldr	r3, [pc, #8]	; (d71e4 <network_set_listen_timeout+0xc>)
   d71dc:	681b      	ldr	r3, [r3, #0]
   d71de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d71e0:	9301      	str	r3, [sp, #4]
   d71e2:	bd08      	pop	{r3, pc}
   d71e4:	00030240 	.word	0x00030240

000d71e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d71e8:	b508      	push	{r3, lr}
   d71ea:	4b02      	ldr	r3, [pc, #8]	; (d71f4 <network_get_listen_timeout+0xc>)
   d71ec:	681b      	ldr	r3, [r3, #0]
   d71ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d71f0:	9301      	str	r3, [sp, #4]
   d71f2:	bd08      	pop	{r3, pc}
   d71f4:	00030240 	.word	0x00030240

000d71f8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d71f8:	b508      	push	{r3, lr}
   d71fa:	4b02      	ldr	r3, [pc, #8]	; (d7204 <spark_process+0xc>)
   d71fc:	681b      	ldr	r3, [r3, #0]
   d71fe:	689b      	ldr	r3, [r3, #8]
   d7200:	9301      	str	r3, [sp, #4]
   d7202:	bd08      	pop	{r3, pc}
   d7204:	00030244 	.word	0x00030244

000d7208 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7208:	b508      	push	{r3, lr}
   d720a:	4b02      	ldr	r3, [pc, #8]	; (d7214 <spark_cloud_flag_connected+0xc>)
   d720c:	681b      	ldr	r3, [r3, #0]
   d720e:	695b      	ldr	r3, [r3, #20]
   d7210:	9301      	str	r3, [sp, #4]
   d7212:	bd08      	pop	{r3, pc}
   d7214:	00030244 	.word	0x00030244

000d7218 <spark_subscribe>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d7218:	b508      	push	{r3, lr}
   d721a:	4b02      	ldr	r3, [pc, #8]	; (d7224 <spark_subscribe+0xc>)
   d721c:	681b      	ldr	r3, [r3, #0]
   d721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7220:	9301      	str	r3, [sp, #4]
   d7222:	bd08      	pop	{r3, pc}
   d7224:	00030244 	.word	0x00030244

000d7228 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7228:	b508      	push	{r3, lr}
   d722a:	4b02      	ldr	r3, [pc, #8]	; (d7234 <spark_sync_time_pending+0xc>)
   d722c:	681b      	ldr	r3, [r3, #0]
   d722e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7230:	9301      	str	r3, [sp, #4]
   d7232:	bd08      	pop	{r3, pc}
   d7234:	00030244 	.word	0x00030244

000d7238 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7238:	b508      	push	{r3, lr}
   d723a:	4b02      	ldr	r3, [pc, #8]	; (d7244 <spark_set_random_seed_from_cloud_handler+0xc>)
   d723c:	681b      	ldr	r3, [r3, #0]
   d723e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7240:	9301      	str	r3, [sp, #4]
   d7242:	bd08      	pop	{r3, pc}
   d7244:	00030244 	.word	0x00030244

000d7248 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7248:	b508      	push	{r3, lr}
   d724a:	4b02      	ldr	r3, [pc, #8]	; (d7254 <malloc+0xc>)
   d724c:	681b      	ldr	r3, [r3, #0]
   d724e:	681b      	ldr	r3, [r3, #0]
   d7250:	9301      	str	r3, [sp, #4]
   d7252:	bd08      	pop	{r3, pc}
   d7254:	0003021c 	.word	0x0003021c

000d7258 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7258:	b508      	push	{r3, lr}
   d725a:	4b02      	ldr	r3, [pc, #8]	; (d7264 <free+0xc>)
   d725c:	681b      	ldr	r3, [r3, #0]
   d725e:	685b      	ldr	r3, [r3, #4]
   d7260:	9301      	str	r3, [sp, #4]
   d7262:	bd08      	pop	{r3, pc}
   d7264:	0003021c 	.word	0x0003021c

000d7268 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7268:	b508      	push	{r3, lr}
   d726a:	4b02      	ldr	r3, [pc, #8]	; (d7274 <realloc+0xc>)
   d726c:	681b      	ldr	r3, [r3, #0]
   d726e:	689b      	ldr	r3, [r3, #8]
   d7270:	9301      	str	r3, [sp, #4]
   d7272:	bd08      	pop	{r3, pc}
   d7274:	0003021c 	.word	0x0003021c

000d7278 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d7278:	b508      	push	{r3, lr}
   d727a:	4b02      	ldr	r3, [pc, #8]	; (d7284 <sprintf+0xc>)
   d727c:	681b      	ldr	r3, [r3, #0]
   d727e:	68db      	ldr	r3, [r3, #12]
   d7280:	9301      	str	r3, [sp, #4]
   d7282:	bd08      	pop	{r3, pc}
   d7284:	0003021c 	.word	0x0003021c

000d7288 <siscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d7288:	b508      	push	{r3, lr}
   d728a:	4b02      	ldr	r3, [pc, #8]	; (d7294 <siscanf+0xc>)
   d728c:	681b      	ldr	r3, [r3, #0]
   d728e:	699b      	ldr	r3, [r3, #24]
   d7290:	9301      	str	r3, [sp, #4]
   d7292:	bd08      	pop	{r3, pc}
   d7294:	0003021c 	.word	0x0003021c

000d7298 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7298:	b508      	push	{r3, lr}
   d729a:	4b02      	ldr	r3, [pc, #8]	; (d72a4 <snprintf+0xc>)
   d729c:	681b      	ldr	r3, [r3, #0]
   d729e:	69db      	ldr	r3, [r3, #28]
   d72a0:	9301      	str	r3, [sp, #4]
   d72a2:	bd08      	pop	{r3, pc}
   d72a4:	0003021c 	.word	0x0003021c

000d72a8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d72a8:	b508      	push	{r3, lr}
   d72aa:	4b02      	ldr	r3, [pc, #8]	; (d72b4 <vsnprintf+0xc>)
   d72ac:	681b      	ldr	r3, [r3, #0]
   d72ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d72b0:	9301      	str	r3, [sp, #4]
   d72b2:	bd08      	pop	{r3, pc}
   d72b4:	0003021c 	.word	0x0003021c

000d72b8 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d72b8:	b508      	push	{r3, lr}
   d72ba:	4b02      	ldr	r3, [pc, #8]	; (d72c4 <_malloc_r+0xc>)
   d72bc:	681b      	ldr	r3, [r3, #0]
   d72be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d72c0:	9301      	str	r3, [sp, #4]
   d72c2:	bd08      	pop	{r3, pc}
   d72c4:	0003021c 	.word	0x0003021c

000d72c8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d72c8:	2200      	movs	r2, #0
   d72ca:	4611      	mov	r1, r2
   d72cc:	6840      	ldr	r0, [r0, #4]
   d72ce:	f7ff bf7b 	b.w	d71c8 <network_listening>

000d72d2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d72d2:	2200      	movs	r2, #0
   d72d4:	4611      	mov	r1, r2
   d72d6:	6840      	ldr	r0, [r0, #4]
   d72d8:	f7ff bf86 	b.w	d71e8 <network_get_listen_timeout>

000d72dc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d72dc:	2200      	movs	r2, #0
   d72de:	6840      	ldr	r0, [r0, #4]
   d72e0:	f7ff bf7a 	b.w	d71d8 <network_set_listen_timeout>

000d72e4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d72e4:	2200      	movs	r2, #0
   d72e6:	f081 0101 	eor.w	r1, r1, #1
   d72ea:	6840      	ldr	r0, [r0, #4]
   d72ec:	f7ff bf64 	b.w	d71b8 <network_listen>

000d72f0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d72f0:	2300      	movs	r3, #0
   d72f2:	461a      	mov	r2, r3
   d72f4:	4619      	mov	r1, r3
   d72f6:	6840      	ldr	r0, [r0, #4]
   d72f8:	f7ff bf56 	b.w	d71a8 <network_off>

000d72fc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d72fc:	2300      	movs	r3, #0
   d72fe:	461a      	mov	r2, r3
   d7300:	4619      	mov	r1, r3
   d7302:	6840      	ldr	r0, [r0, #4]
   d7304:	f7ff bf48 	b.w	d7198 <network_on>

000d7308 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7308:	2200      	movs	r2, #0
   d730a:	4611      	mov	r1, r2
   d730c:	6840      	ldr	r0, [r0, #4]
   d730e:	f7ff bf3b 	b.w	d7188 <network_ready>

000d7312 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7312:	2200      	movs	r2, #0
   d7314:	4611      	mov	r1, r2
   d7316:	6840      	ldr	r0, [r0, #4]
   d7318:	f7ff bf26 	b.w	d7168 <network_connecting>

000d731c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d731c:	2200      	movs	r2, #0
   d731e:	2102      	movs	r1, #2
   d7320:	6840      	ldr	r0, [r0, #4]
   d7322:	f7ff bf29 	b.w	d7178 <network_disconnect>

000d7326 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7326:	2300      	movs	r3, #0
   d7328:	461a      	mov	r2, r3
   d732a:	6840      	ldr	r0, [r0, #4]
   d732c:	f7ff bf14 	b.w	d7158 <network_connect>

000d7330 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7330:	4b02      	ldr	r3, [pc, #8]	; (d733c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7332:	2203      	movs	r2, #3
   d7334:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7336:	4a02      	ldr	r2, [pc, #8]	; (d7340 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7338:	601a      	str	r2, [r3, #0]
   d733a:	4770      	bx	lr
   d733c:	2003e31c 	.word	0x2003e31c
   d7340:	000dbc74 	.word	0x000dbc74

000d7344 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d7344:	680a      	ldr	r2, [r1, #0]
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   d7346:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d7348:	6892      	ldr	r2, [r2, #8]
   d734a:	4601      	mov	r1, r0
   d734c:	4618      	mov	r0, r3
   d734e:	4710      	bx	r2

000d7350 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
 */

#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   d7350:	b570      	push	{r4, r5, r6, lr}
   d7352:	4c0e      	ldr	r4, [pc, #56]	; (d738c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   d7354:	6004      	str	r4, [r0, #0]
    d_.size = sizeof(LEDStatusData);
   d7356:	241c      	movs	r4, #28
   d7358:	6044      	str	r4, [r0, #4]
    d_.next = nullptr;
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d735a:	f89d 4014 	ldrb.w	r4, [sp, #20]
   d735e:	f89d 6010 	ldrb.w	r6, [sp, #16]
   d7362:	f004 0403 	and.w	r4, r4, #3
   d7366:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   d736a:	2500      	movs	r5, #0
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d736c:	b2e4      	uxtb	r4, r4
   d736e:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   d7370:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   d7372:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   d7374:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d7376:	7c42      	ldrb	r2, [r0, #17]
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   d7378:	6085      	str	r5, [r0, #8]
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d737a:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   d737c:	bf08      	it	eq
   d737e:	4b04      	ldreq	r3, [pc, #16]	; (d7390 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
    d_.prev = nullptr;
   d7380:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
        d_.callback = updateCallback; // User callback
   d7382:	bf06      	itte	eq
   d7384:	6183      	streq	r3, [r0, #24]
        d_.data = this; // Callback data
   d7386:	61c0      	streq	r0, [r0, #28]
    } else {
        d_.period = period;
   d7388:	8303      	strhne	r3, [r0, #24]
    }
}
   d738a:	bd70      	pop	{r4, r5, r6, pc}
   d738c:	000db73c 	.word	0x000db73c
   d7390:	000d7345 	.word	0x000d7345

000d7394 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d7394:	2100      	movs	r1, #0
   d7396:	f7ff bc79 	b.w	d6c8c <HAL_SPI_Acquire>

000d739a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d739a:	2100      	movs	r1, #0
   d739c:	f7ff bc7e 	b.w	d6c9c <HAL_SPI_Release>

000d73a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d73a0:	b510      	push	{r4, lr}
   d73a2:	4604      	mov	r4, r0
{
    _spi = spi;
   d73a4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d73a6:	4608      	mov	r0, r1
   d73a8:	f7ff fc38 	bl	d6c1c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d73ac:	2300      	movs	r3, #0
   d73ae:	6063      	str	r3, [r4, #4]
}
   d73b0:	4620      	mov	r0, r4
   d73b2:	bd10      	pop	{r4, pc}

000d73b4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d73b4:	b510      	push	{r4, lr}
   d73b6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d73b8:	7800      	ldrb	r0, [r0, #0]
   d73ba:	f7ff ffeb 	bl	d7394 <_ZN8SPIClass4lockEv.isra.0>
   d73be:	b948      	cbnz	r0, d73d4 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d73c0:	7820      	ldrb	r0, [r4, #0]
   d73c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d73c6:	f7ff fc11 	bl	d6bec <HAL_SPI_Begin>
        unlock();
   d73ca:	7820      	ldrb	r0, [r4, #0]
    }
}
   d73cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d73d0:	f7ff bfe3 	b.w	d739a <_ZN8SPIClass6unlockEv.isra.1>
   d73d4:	bd10      	pop	{r4, pc}

000d73d6 <_ZN8SPIClass5beginE8SPI_Modet>:
        unlock();
    }
}

void SPIClass::begin(SPI_Mode mode, uint16_t ss_pin)
{
   d73d6:	b570      	push	{r4, r5, r6, lr}
   d73d8:	4604      	mov	r4, r0
    if (!lock())
   d73da:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::begin(SPI_Mode mode, uint16_t ss_pin)
{
   d73dc:	460d      	mov	r5, r1
   d73de:	4616      	mov	r6, r2
    if (!lock())
   d73e0:	f7ff ffd8 	bl	d7394 <_ZN8SPIClass4lockEv.isra.0>
   d73e4:	4603      	mov	r3, r0
   d73e6:	b948      	cbnz	r0, d73fc <_ZN8SPIClass5beginE8SPI_Modet+0x26>
    {
        HAL_SPI_Begin_Ext(_spi, mode, ss_pin, NULL);
   d73e8:	7820      	ldrb	r0, [r4, #0]
   d73ea:	4632      	mov	r2, r6
   d73ec:	4629      	mov	r1, r5
   d73ee:	f7ff fc35 	bl	d6c5c <HAL_SPI_Begin_Ext>
        unlock();
   d73f2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d73f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void SPIClass::begin(SPI_Mode mode, uint16_t ss_pin)
{
    if (!lock())
    {
        HAL_SPI_Begin_Ext(_spi, mode, ss_pin, NULL);
        unlock();
   d73f8:	f7ff bfcf 	b.w	d739a <_ZN8SPIClass6unlockEv.isra.1>
   d73fc:	bd70      	pop	{r4, r5, r6, pc}

000d73fe <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d73fe:	7800      	ldrb	r0, [r0, #0]
   d7400:	f7ff bfcb 	b.w	d739a <_ZN8SPIClass6unlockEv.isra.1>

000d7404 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7404:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d7406:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7408:	6018      	str	r0, [r3, #0]
   d740a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d740c:	6818      	ldr	r0, [r3, #0]
   d740e:	4288      	cmp	r0, r1
   d7410:	b2e5      	uxtb	r5, r4
   d7412:	d906      	bls.n	d7422 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7414:	3401      	adds	r4, #1
   d7416:	2c08      	cmp	r4, #8
   d7418:	d002      	beq.n	d7420 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d741a:	0840      	lsrs	r0, r0, #1
   d741c:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d741e:	e7f5      	b.n	d740c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7420:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d7422:	4b02      	ldr	r3, [pc, #8]	; (d742c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7424:	5d5b      	ldrb	r3, [r3, r5]
   d7426:	7013      	strb	r3, [r2, #0]
   d7428:	bd30      	pop	{r4, r5, pc}
   d742a:	bf00      	nop
   d742c:	000dbca0 	.word	0x000dbca0

000d7430 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d7430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7434:	4607      	mov	r7, r0
   d7436:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d7438:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d743a:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d743c:	f7ff ffaa 	bl	d7394 <_ZN8SPIClass4lockEv.isra.0>
   d7440:	2800      	cmp	r0, #0
   d7442:	db62      	blt.n	d750a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d7444:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d7446:	2214      	movs	r2, #20
   d7448:	2100      	movs	r1, #0
   d744a:	a809      	add	r0, sp, #36	; 0x24
   d744c:	f003 fc7b 	bl	dad46 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7450:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d7452:	4620      	mov	r0, r4
   d7454:	2200      	movs	r2, #0
   d7456:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d7458:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d745c:	f7ff fbee 	bl	d6c3c <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d7460:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d7464:	b154      	cbz	r4, d747c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d7466:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d746a:	b935      	cbnz	r5, d747a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d746c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7470:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7474:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d7478:	e003      	b.n	d7482 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d747a:	2400      	movs	r4, #0
   d747c:	46a1      	mov	r9, r4
   d747e:	46a0      	mov	r8, r4
   d7480:	2501      	movs	r5, #1
   d7482:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7484:	b105      	cbz	r5, d7488 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d7486:	b9bb      	cbnz	r3, d74b8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d7488:	429d      	cmp	r5, r3
   d748a:	d10b      	bne.n	d74a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d748c:	68b2      	ldr	r2, [r6, #8]
   d748e:	4542      	cmp	r2, r8
   d7490:	d108      	bne.n	d74a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7492:	f88d 9020 	strb.w	r9, [sp, #32]
   d7496:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d749a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d749e:	89b2      	ldrh	r2, [r6, #12]
   d74a0:	4291      	cmp	r1, r2
   d74a2:	d009      	beq.n	d74b8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d74a4:	b153      	cbz	r3, d74bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d74a6:	2400      	movs	r4, #0
   d74a8:	7838      	ldrb	r0, [r7, #0]
   d74aa:	9401      	str	r4, [sp, #4]
   d74ac:	9400      	str	r4, [sp, #0]
   d74ae:	4623      	mov	r3, r4
   d74b0:	4622      	mov	r2, r4
   d74b2:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d74b4:	f7ff fbe2 	bl	d6c7c <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d74b8:	2000      	movs	r0, #0
   d74ba:	e026      	b.n	d750a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d74bc:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d74c0:	68b1      	ldr	r1, [r6, #8]
   d74c2:	980a      	ldr	r0, [sp, #40]	; 0x28
   d74c4:	ab04      	add	r3, sp, #16
   d74c6:	f10d 020f 	add.w	r2, sp, #15
   d74ca:	f7ff ff9b 	bl	d7404 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d74ce:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d74d0:	b105      	cbz	r5, d74d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d74d2:	b9b1      	cbnz	r1, d7502 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d74d4:	42a9      	cmp	r1, r5
   d74d6:	d008      	beq.n	d74ea <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d74d8:	2400      	movs	r4, #0
   d74da:	7838      	ldrb	r0, [r7, #0]
   d74dc:	9401      	str	r4, [sp, #4]
   d74de:	7b74      	ldrb	r4, [r6, #13]
   d74e0:	7b33      	ldrb	r3, [r6, #12]
   d74e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d74e6:	9400      	str	r4, [sp, #0]
   d74e8:	e7e4      	b.n	d74b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d74ea:	68b3      	ldr	r3, [r6, #8]
   d74ec:	4543      	cmp	r3, r8
   d74ee:	d3f3      	bcc.n	d74d8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d74f0:	f88d 9020 	strb.w	r9, [sp, #32]
   d74f4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d74f8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d74fc:	89b3      	ldrh	r3, [r6, #12]
   d74fe:	429a      	cmp	r2, r3
   d7500:	d1ea      	bne.n	d74d8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d7502:	9b04      	ldr	r3, [sp, #16]
   d7504:	4543      	cmp	r3, r8
   d7506:	d1e7      	bne.n	d74d8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d7508:	e7d6      	b.n	d74b8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d750a:	b00f      	add	sp, #60	; 0x3c
   d750c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7510 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d7510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7514:	b088      	sub	sp, #32
    unsigned clock = 0;
   d7516:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d7518:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d751a:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d751c:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d751e:	460e      	mov	r6, r1
   d7520:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d7522:	f7ff ff37 	bl	d7394 <_ZN8SPIClass4lockEv.isra.0>
   d7526:	4605      	mov	r5, r0
   d7528:	bb00      	cbnz	r0, d756c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d752a:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d752e:	4601      	mov	r1, r0
   d7530:	2214      	movs	r2, #20
   d7532:	a803      	add	r0, sp, #12
   d7534:	f003 fc07 	bl	dad46 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7538:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d753a:	462a      	mov	r2, r5
   d753c:	a903      	add	r1, sp, #12
   d753e:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d7540:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d7544:	f7ff fb7a 	bl	d6c3c <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7548:	ab02      	add	r3, sp, #8
   d754a:	f10d 0207 	add.w	r2, sp, #7
   d754e:	fb07 f106 	mul.w	r1, r7, r6
   d7552:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d7554:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7558:	f7ff ff54 	bl	d7404 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d755c:	7820      	ldrb	r0, [r4, #0]
   d755e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d7562:	f7ff fb4b 	bl	d6bfc <HAL_SPI_Set_Clock_Divider>
        unlock();
   d7566:	7820      	ldrb	r0, [r4, #0]
   d7568:	f7ff ff17 	bl	d739a <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d756c:	9802      	ldr	r0, [sp, #8]
   d756e:	b008      	add	sp, #32
   d7570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7574 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d7574:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d7576:	7800      	ldrb	r0, [r0, #0]
   d7578:	f7ff fb48 	bl	d6c0c <HAL_SPI_Send_Receive_Data>
}
   d757c:	b2c0      	uxtb	r0, r0
   d757e:	bd08      	pop	{r3, pc}

000d7580 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d7580:	b530      	push	{r4, r5, lr}
   d7582:	b087      	sub	sp, #28
   d7584:	4604      	mov	r4, r0
   d7586:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7588:	7800      	ldrb	r0, [r0, #0]
   d758a:	9500      	str	r5, [sp, #0]
   d758c:	f7ff fb5e 	bl	d6c4c <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d7590:	b93d      	cbnz	r5, d75a2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d7592:	a902      	add	r1, sp, #8
   d7594:	7820      	ldrb	r0, [r4, #0]
   d7596:	f7ff fb69 	bl	d6c6c <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d759a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d759e:	07db      	lsls	r3, r3, #31
   d75a0:	d4f7      	bmi.n	d7592 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d75a2:	b007      	add	sp, #28
   d75a4:	bd30      	pop	{r4, r5, pc}

000d75a6 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d75a6:	7800      	ldrb	r0, [r0, #0]
   d75a8:	f7ff bb40 	b.w	d6c2c <HAL_SPI_Is_Enabled>

000d75ac <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
   d75ac:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
   d75b0:	1c53      	adds	r3, r2, #1
   d75b2:	d00b      	beq.n	d75cc <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   d75b4:	8843      	ldrh	r3, [r0, #2]
   d75b6:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d75b8:	428b      	cmp	r3, r1
   d75ba:	d803      	bhi.n	d75c4 <_ZN5Servo17writeMicrosecondsEt+0x18>
   d75bc:	4288      	cmp	r0, r1
   d75be:	4603      	mov	r3, r0
   d75c0:	bf28      	it	cs
   d75c2:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   d75c4:	4619      	mov	r1, r3
   d75c6:	b290      	uxth	r0, r2
   d75c8:	f7ff bd18 	b.w	d6ffc <HAL_Servo_Write_Pulse_Width>
   d75cc:	4770      	bx	lr

000d75ce <_ZN5Servo5writeEi>:

  return true;
}

void Servo::write(int degrees)
{
   d75ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d75d0:	4604      	mov	r4, r0
   d75d2:	4608      	mov	r0, r1
   d75d4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  degrees = constrain(degrees, this->minAngle, this->maxAngle);
   d75d8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d75dc:	4281      	cmp	r1, r0
   d75de:	dc03      	bgt.n	d75e8 <_ZN5Servo5writeEi+0x1a>
   d75e0:	4290      	cmp	r0, r2
   d75e2:	bfa8      	it	ge
   d75e4:	4610      	movge	r0, r2
   d75e6:	e000      	b.n	d75ea <_ZN5Servo5writeEi+0x1c>
   d75e8:	4608      	mov	r0, r1
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   d75ea:	88a5      	ldrh	r5, [r4, #4]
   d75ec:	8863      	ldrh	r3, [r4, #2]
   d75ee:	9500      	str	r5, [sp, #0]
   d75f0:	f002 fa60 	bl	d9ab4 <_Z3mapiiiii>
   d75f4:	68e1      	ldr	r1, [r4, #12]
   d75f6:	4401      	add	r1, r0
   d75f8:	b289      	uxth	r1, r1
   d75fa:	4620      	mov	r0, r4
}
   d75fc:	b003      	add	sp, #12
   d75fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
}

void Servo::write(int degrees)
{
  degrees = constrain(degrees, this->minAngle, this->maxAngle);
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   d7602:	f7ff bfd3 	b.w	d75ac <_ZN5Servo17writeMicrosecondsEt>

000d7606 <_ZN5Servo11resetFieldsEv>:

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   d7606:	22b4      	movs	r2, #180	; 0xb4
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
   d7608:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   d760c:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
   d760e:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
   d7612:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
   d7614:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
   d7616:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   d7618:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
   d761c:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   d761e:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
   d7620:	60c3      	str	r3, [r0, #12]
   d7622:	4770      	bx	lr

000d7624 <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
   d7624:	b508      	push	{r3, lr}
{
  this->resetFields();
   d7626:	f7ff ffee 	bl	d7606 <_ZN5Servo11resetFieldsEv>
}
   d762a:	bd08      	pop	{r3, pc}

000d762c <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
   d762c:	b510      	push	{r4, lr}
   d762e:	4604      	mov	r4, r0
   d7630:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   d7634:	1c43      	adds	r3, r0, #1
   d7636:	d007      	beq.n	d7648 <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
   d7638:	b280      	uxth	r0, r0
   d763a:	f7ff fcd7 	bl	d6fec <HAL_Servo_Detach>

  this->resetFields();
   d763e:	4620      	mov	r0, r4
   d7640:	f7ff ffe1 	bl	d7606 <_ZN5Servo11resetFieldsEv>

  return true;
   d7644:	2001      	movs	r0, #1
   d7646:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
   d7648:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
   d764a:	bd10      	pop	{r4, pc}

000d764c <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
   d764c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7650:	460d      	mov	r5, r1
   d7652:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   d7654:	2102      	movs	r1, #2
   d7656:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
   d7658:	4690      	mov	r8, r2
   d765a:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   d765c:	f7ff faa6 	bl	d6bac <HAL_Validate_Pin_Function>
   d7660:	2802      	cmp	r0, #2
   d7662:	d001      	beq.n	d7668 <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
   d7664:	2600      	movs	r6, #0
   d7666:	e019      	b.n	d769c <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
   d7668:	4628      	mov	r0, r5
   d766a:	f003 f823 	bl	da6b4 <pinAvailable>
   d766e:	4606      	mov	r6, r0
   d7670:	2800      	cmp	r0, #0
   d7672:	d0f7      	beq.n	d7664 <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
   d7674:	f9b4 3000 	ldrsh.w	r3, [r4]
   d7678:	3301      	adds	r3, #1
   d767a:	d002      	beq.n	d7682 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
   d767c:	4620      	mov	r0, r4
   d767e:	f7ff ffd5 	bl	d762c <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
   d7682:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   d7686:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   d7688:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
   d768c:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   d768e:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   d7692:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
   d7694:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
   d7696:	4628      	mov	r0, r5
   d7698:	f7ff fca0 	bl	d6fdc <HAL_Servo_Attach>

  return true;
}
   d769c:	4630      	mov	r0, r6
   d769e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d76a4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d76a4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d76a6:	4c09      	ldr	r4, [pc, #36]	; (d76cc <_GLOBAL__sub_I_System+0x28>)
   d76a8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d76aa:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d76ae:	6020      	str	r0, [r4, #0]
   d76b0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d76b2:	71a0      	strb	r0, [r4, #6]
   d76b4:	8120      	strh	r0, [r4, #8]
   d76b6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d76b8:	f7ff fd1a 	bl	d70f0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d76bc:	4620      	mov	r0, r4
   d76be:	4a04      	ldr	r2, [pc, #16]	; (d76d0 <_GLOBAL__sub_I_System+0x2c>)
   d76c0:	4904      	ldr	r1, [pc, #16]	; (d76d4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d76c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d76c6:	f003 b895 	b.w	da7f4 <__aeabi_atexit>
   d76ca:	bf00      	nop
   d76cc:	2003e324 	.word	0x2003e324
   d76d0:	2003d400 	.word	0x2003d400
   d76d4:	000d426d 	.word	0x000d426d

000d76d8 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d76d8:	2300      	movs	r3, #0
   d76da:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d76dc:	6043      	str	r3, [r0, #4]
	len = 0;
   d76de:	6083      	str	r3, [r0, #8]
	flags = 0;
   d76e0:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d76e2:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d76e4:	680c      	ldr	r4, [r1, #0]
   d76e6:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d76e8:	684c      	ldr	r4, [r1, #4]
   d76ea:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d76ec:	688c      	ldr	r4, [r1, #8]
   d76ee:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d76f0:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d76f2:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d76f4:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d76f6:	bd10      	pop	{r4, pc}

000d76f8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d76f8:	b510      	push	{r4, lr}
   d76fa:	4604      	mov	r4, r0
{
	free(buffer);
   d76fc:	6800      	ldr	r0, [r0, #0]
   d76fe:	f7ff fdab 	bl	d7258 <free>
}
   d7702:	4620      	mov	r0, r4
   d7704:	bd10      	pop	{r4, pc}

000d7706 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7706:	b510      	push	{r4, lr}
   d7708:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d770a:	6800      	ldr	r0, [r0, #0]
   d770c:	b108      	cbz	r0, d7712 <_ZN6String10invalidateEv+0xc>
   d770e:	f7ff fda3 	bl	d7258 <free>
	buffer = NULL;
   d7712:	2300      	movs	r3, #0
   d7714:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7716:	60a3      	str	r3, [r4, #8]
   d7718:	6063      	str	r3, [r4, #4]
   d771a:	bd10      	pop	{r4, pc}

000d771c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d771c:	b538      	push	{r3, r4, r5, lr}
   d771e:	4604      	mov	r4, r0
   d7720:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7722:	6800      	ldr	r0, [r0, #0]
   d7724:	3101      	adds	r1, #1
   d7726:	f7ff fd9f 	bl	d7268 <realloc>
	if (newbuffer) {
   d772a:	b110      	cbz	r0, d7732 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d772c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7730:	2001      	movs	r0, #1
	}
	return 0;
}
   d7732:	bd38      	pop	{r3, r4, r5, pc}

000d7734 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7734:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7736:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7738:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d773a:	b113      	cbz	r3, d7742 <_ZN6String7reserveEj+0xe>
   d773c:	6843      	ldr	r3, [r0, #4]
   d773e:	428b      	cmp	r3, r1
   d7740:	d207      	bcs.n	d7752 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7742:	4620      	mov	r0, r4
   d7744:	f7ff ffea 	bl	d771c <_ZN6String12changeBufferEj>
   d7748:	b120      	cbz	r0, d7754 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d774a:	68a3      	ldr	r3, [r4, #8]
   d774c:	b90b      	cbnz	r3, d7752 <_ZN6String7reserveEj+0x1e>
   d774e:	6822      	ldr	r2, [r4, #0]
   d7750:	7013      	strb	r3, [r2, #0]
   d7752:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7754:	bd10      	pop	{r4, pc}

000d7756 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7756:	b570      	push	{r4, r5, r6, lr}
   d7758:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d775a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d775c:	4604      	mov	r4, r0
   d775e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7760:	f7ff ffe8 	bl	d7734 <_ZN6String7reserveEj>
   d7764:	b918      	cbnz	r0, d776e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7766:	4620      	mov	r0, r4
   d7768:	f7ff ffcd 	bl	d7706 <_ZN6String10invalidateEv>
		return *this;
   d776c:	e009      	b.n	d7782 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d776e:	462a      	mov	r2, r5
   d7770:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7772:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7774:	6820      	ldr	r0, [r4, #0]
   d7776:	f003 fac0 	bl	dacfa <memcpy>
	buffer[len] = 0;
   d777a:	6822      	ldr	r2, [r4, #0]
   d777c:	68a3      	ldr	r3, [r4, #8]
   d777e:	2100      	movs	r1, #0
   d7780:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7782:	4620      	mov	r0, r4
   d7784:	bd70      	pop	{r4, r5, r6, pc}

000d7786 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7786:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7788:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d778a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d778c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d778e:	6043      	str	r3, [r0, #4]
	len = 0;
   d7790:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7792:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7794:	460d      	mov	r5, r1
   d7796:	b139      	cbz	r1, d77a8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7798:	4608      	mov	r0, r1
   d779a:	f003 fb3e 	bl	dae1a <strlen>
   d779e:	4629      	mov	r1, r5
   d77a0:	4602      	mov	r2, r0
   d77a2:	4620      	mov	r0, r4
   d77a4:	f7ff ffd7 	bl	d7756 <_ZN6String4copyEPKcj>
}
   d77a8:	4620      	mov	r0, r4
   d77aa:	bd38      	pop	{r3, r4, r5, pc}

000d77ac <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d77ac:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d77ae:	b510      	push	{r4, lr}
   d77b0:	460b      	mov	r3, r1
   d77b2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d77b4:	d007      	beq.n	d77c6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d77b6:	6809      	ldr	r1, [r1, #0]
   d77b8:	b119      	cbz	r1, d77c2 <_ZN6StringaSERKS_+0x16>
   d77ba:	689a      	ldr	r2, [r3, #8]
   d77bc:	f7ff ffcb 	bl	d7756 <_ZN6String4copyEPKcj>
   d77c0:	e001      	b.n	d77c6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d77c2:	f7ff ffa0 	bl	d7706 <_ZN6String10invalidateEv>

	return *this;
}
   d77c6:	4620      	mov	r0, r4
   d77c8:	bd10      	pop	{r4, pc}

000d77ca <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d77ca:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d77cc:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d77ce:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d77d0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d77d2:	6043      	str	r3, [r0, #4]
	len = 0;
   d77d4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d77d6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d77d8:	f7ff ffe8 	bl	d77ac <_ZN6StringaSERKS_>
}
   d77dc:	4620      	mov	r0, r4
   d77de:	bd10      	pop	{r4, pc}

000d77e0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d77e0:	b538      	push	{r3, r4, r5, lr}
   d77e2:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d77e4:	460c      	mov	r4, r1
   d77e6:	b141      	cbz	r1, d77fa <_ZN6StringaSEPKc+0x1a>
   d77e8:	4608      	mov	r0, r1
   d77ea:	f003 fb16 	bl	dae1a <strlen>
   d77ee:	4621      	mov	r1, r4
   d77f0:	4602      	mov	r2, r0
   d77f2:	4628      	mov	r0, r5
   d77f4:	f7ff ffaf 	bl	d7756 <_ZN6String4copyEPKcj>
   d77f8:	e001      	b.n	d77fe <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d77fa:	f7ff ff84 	bl	d7706 <_ZN6String10invalidateEv>

	return *this;
}
   d77fe:	4628      	mov	r0, r5
   d7800:	bd38      	pop	{r3, r4, r5, pc}

000d7802 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7802:	4770      	bx	lr

000d7804 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7804:	2000      	movs	r0, #0
   d7806:	4770      	bx	lr

000d7808 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7808:	4770      	bx	lr

000d780a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d780a:	2000      	movs	r0, #0
   d780c:	4770      	bx	lr

000d780e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d780e:	4770      	bx	lr

000d7810 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7810:	2000      	movs	r0, #0
   d7812:	4770      	bx	lr

000d7814 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7814:	b510      	push	{r4, lr}
   d7816:	2114      	movs	r1, #20
   d7818:	4604      	mov	r4, r0
   d781a:	f002 fff9 	bl	da810 <_ZdlPvj>
   d781e:	4620      	mov	r0, r4
   d7820:	bd10      	pop	{r4, pc}

000d7822 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d7822:	b510      	push	{r4, lr}
   d7824:	2114      	movs	r1, #20
   d7826:	4604      	mov	r4, r0
   d7828:	f002 fff2 	bl	da810 <_ZdlPvj>
   d782c:	4620      	mov	r0, r4
   d782e:	bd10      	pop	{r4, pc}

000d7830 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d7830:	b510      	push	{r4, lr}
   d7832:	2114      	movs	r1, #20
   d7834:	4604      	mov	r4, r0
   d7836:	f002 ffeb 	bl	da810 <_ZdlPvj>
   d783a:	4620      	mov	r0, r4
   d783c:	bd10      	pop	{r4, pc}

000d783e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d783e:	f7fc bc2c 	b.w	d409a <_ZdlPv>

000d7842 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d7842:	f7fc bc2a 	b.w	d409a <_ZdlPv>

000d7846 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d7846:	f7fc bc28 	b.w	d409a <_ZdlPv>

000d784a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d784a:	b510      	push	{r4, lr}
   d784c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d784e:	6800      	ldr	r0, [r0, #0]
   d7850:	b108      	cbz	r0, d7856 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7852:	f7ff faf3 	bl	d6e3c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d7856:	4620      	mov	r0, r4
   d7858:	bd10      	pop	{r4, pc}
	...

000d785c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d785c:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d785e:	200a      	movs	r0, #10
   d7860:	4a02      	ldr	r2, [pc, #8]	; (d786c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d7862:	2100      	movs	r1, #0
   d7864:	f7ff fc12 	bl	d708c <panic_>
    }
}
   d7868:	bd08      	pop	{r3, pc}
   d786a:	bf00      	nop
   d786c:	000d6cbd 	.word	0x000d6cbd

000d7870 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7870:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7872:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7874:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7876:	689b      	ldr	r3, [r3, #8]
   d7878:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d787a:	68a3      	ldr	r3, [r4, #8]
   d787c:	3b01      	subs	r3, #1
   d787e:	60a3      	str	r3, [r4, #8]
   d7880:	b92b      	cbnz	r3, d788e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d7882:	6823      	ldr	r3, [r4, #0]
   d7884:	4620      	mov	r0, r4
   d7886:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d788c:	4718      	bx	r3
   d788e:	bd10      	pop	{r4, pc}

000d7890 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d7890:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d7894:	b2da      	uxtb	r2, r3
   d7896:	2a09      	cmp	r2, #9
   d7898:	d801      	bhi.n	d789e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d789a:	4618      	mov	r0, r3
   d789c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d789e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d78a2:	2b05      	cmp	r3, #5
   d78a4:	d801      	bhi.n	d78aa <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d78a6:	3857      	subs	r0, #87	; 0x57
   d78a8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d78aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d78ae:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d78b0:	bf94      	ite	ls
   d78b2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d78b4:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d78b8:	4770      	bx	lr
	...

000d78bc <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d78bc:	b510      	push	{r4, lr}
            locked_(false) {
   d78be:	2300      	movs	r3, #0
   d78c0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d78c2:	4b04      	ldr	r3, [pc, #16]	; (d78d4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d78c4:	4604      	mov	r4, r0
   d78c6:	6818      	ldr	r0, [r3, #0]
   d78c8:	f7ff fac0 	bl	d6e4c <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d78cc:	2301      	movs	r3, #1
   d78ce:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d78d0:	4620      	mov	r0, r4
   d78d2:	bd10      	pop	{r4, pc}
   d78d4:	2003e33c 	.word	0x2003e33c

000d78d8 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d78d8:	b510      	push	{r4, lr}
        if (locked_) {
   d78da:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d78dc:	4604      	mov	r4, r0
        if (locked_) {
   d78de:	b11b      	cbz	r3, d78e8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d78e0:	4b02      	ldr	r3, [pc, #8]	; (d78ec <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d78e2:	6818      	ldr	r0, [r3, #0]
   d78e4:	f7ff faba 	bl	d6e5c <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d78e8:	4620      	mov	r0, r4
   d78ea:	bd10      	pop	{r4, pc}
   d78ec:	2003e33c 	.word	0x2003e33c

000d78f0 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d78f0:	2200      	movs	r2, #0
   d78f2:	6002      	str	r2, [r0, #0]
   d78f4:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d78f6:	4770      	bx	lr

000d78f8 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d78f8:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d78fa:	7982      	ldrb	r2, [r0, #6]
   d78fc:	798b      	ldrb	r3, [r1, #6]
   d78fe:	429a      	cmp	r2, r3
   d7900:	d106      	bne.n	d7910 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d7902:	2206      	movs	r2, #6
   d7904:	f003 f9ea 	bl	dacdc <memcmp>
   d7908:	fab0 f080 	clz	r0, r0
   d790c:	0940      	lsrs	r0, r0, #5
   d790e:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d7910:	2000      	movs	r0, #0
}
   d7912:	bd08      	pop	{r3, pc}

000d7914 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d7914:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d7916:	2301      	movs	r3, #1
   d7918:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d791a:	4b05      	ldr	r3, [pc, #20]	; (d7930 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d791c:	4602      	mov	r2, r0
   d791e:	f103 0110 	add.w	r1, r3, #16
   d7922:	f853 4b04 	ldr.w	r4, [r3], #4
   d7926:	f842 4b04 	str.w	r4, [r2], #4
   d792a:	428b      	cmp	r3, r1
   d792c:	d1f9      	bne.n	d7922 <_ZN8particle7BleUuidC1Ev+0xe>
}
   d792e:	bd10      	pop	{r4, pc}
   d7930:	000dbeac 	.word	0x000dbeac

000d7934 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d7934:	b510      	push	{r4, lr}
    if (uuid128) {
   d7936:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d7938:	4604      	mov	r4, r0
    if (uuid128) {
   d793a:	b1b9      	cbz	r1, d796c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d793c:	2a01      	cmp	r2, #1
   d793e:	d109      	bne.n	d7954 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d7940:	4603      	mov	r3, r0
   d7942:	f101 0210 	add.w	r2, r1, #16
   d7946:	f851 0b04 	ldr.w	r0, [r1], #4
   d794a:	f843 0b04 	str.w	r0, [r3], #4
   d794e:	4291      	cmp	r1, r2
   d7950:	d1f9      	bne.n	d7946 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d7952:	e008      	b.n	d7966 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d7954:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d7956:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d7958:	5c98      	ldrb	r0, [r3, r2]
   d795a:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d795e:	3a01      	subs	r2, #1
   d7960:	b2d2      	uxtb	r2, r2
   d7962:	2aff      	cmp	r2, #255	; 0xff
   d7964:	d1f8      	bne.n	d7958 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d7966:	2301      	movs	r3, #1
   d7968:	6123      	str	r3, [r4, #16]
   d796a:	e002      	b.n	d7972 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d796c:	2210      	movs	r2, #16
   d796e:	f003 f9ea 	bl	dad46 <memset>
    }
}
   d7972:	4620      	mov	r0, r4
   d7974:	bd10      	pop	{r4, pc}

000d7976 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
    type_ = BleUuidType::SHORT;
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d7976:	b538      	push	{r3, r4, r5, lr}
   d7978:	4605      	mov	r5, r0
   d797a:	4614      	mov	r4, r2
        : BleUuid(uuid128, order) {
   d797c:	461a      	mov	r2, r3
   d797e:	f7ff ffd9 	bl	d7934 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d7982:	732c      	strb	r4, [r5, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d7984:	0a24      	lsrs	r4, r4, #8
   d7986:	736c      	strb	r4, [r5, #13]
}
   d7988:	4628      	mov	r0, r5
   d798a:	bd38      	pop	{r3, r4, r5, pc}

000d798c <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d798c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d798e:	6902      	ldr	r2, [r0, #16]
   d7990:	b90a      	cbnz	r2, d7996 <_ZNK8particle7BleUuid7isValidEv+0xa>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d7992:	8980      	ldrh	r0, [r0, #12]
   d7994:	e003      	b.n	d799e <_ZNK8particle7BleUuid7isValidEv+0x12>
    } else {
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d7996:	2210      	movs	r2, #16
   d7998:	4903      	ldr	r1, [pc, #12]	; (d79a8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d799a:	f003 f99f 	bl	dacdc <memcmp>
   d799e:	3000      	adds	r0, #0
   d79a0:	bf18      	it	ne
   d79a2:	2001      	movne	r0, #1
    }
}
   d79a4:	bd08      	pop	{r3, pc}
   d79a6:	bf00      	nop
   d79a8:	000dbeac 	.word	0x000dbeac

000d79ac <_ZNK8particle7BleUuid4typeEv>:

BleUuidType BleUuid::type() const {
    return type_;
}
   d79ac:	6900      	ldr	r0, [r0, #16]
   d79ae:	4770      	bx	lr

000d79b0 <_ZN8particle7BleUuid7halUUIDEv>:

hal_ble_uuid_t BleUuid::halUUID() {
   d79b0:	b538      	push	{r3, r4, r5, lr}
   d79b2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d79b4:	2214      	movs	r2, #20
   d79b6:	2100      	movs	r1, #0

BleUuidType BleUuid::type() const {
    return type_;
}

hal_ble_uuid_t BleUuid::halUUID() {
   d79b8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d79ba:	f003 f9c4 	bl	dad46 <memset>
    if (type_ == BleUuidType::SHORT) {
   d79be:	6923      	ldr	r3, [r4, #16]
   d79c0:	b92b      	cbnz	r3, d79ce <_ZN8particle7BleUuid7halUUIDEv+0x1e>
        uuid.type = BLE_UUID_TYPE_16BIT;
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d79c2:	7b62      	ldrb	r2, [r4, #13]
   d79c4:	7b23      	ldrb	r3, [r4, #12]
   d79c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d79ca:	802b      	strh	r3, [r5, #0]
   d79cc:	e00a      	b.n	d79e4 <_ZN8particle7BleUuid7halUUIDEv+0x34>
    } else {
        uuid.type = BLE_UUID_TYPE_128BIT;
   d79ce:	2301      	movs	r3, #1
   d79d0:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d79d2:	f104 0210 	add.w	r2, r4, #16
   d79d6:	462b      	mov	r3, r5
   d79d8:	f854 1b04 	ldr.w	r1, [r4], #4
   d79dc:	f843 1b04 	str.w	r1, [r3], #4
   d79e0:	4294      	cmp	r4, r2
   d79e2:	d1f9      	bne.n	d79d8 <_ZN8particle7BleUuid7halUUIDEv+0x28>
    }
    return uuid;
}
   d79e4:	4628      	mov	r0, r5
   d79e6:	bd38      	pop	{r3, r4, r5, pc}

000d79e8 <_ZNK8particle7BleUuid7shortedEv>:

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d79e8:	7b42      	ldrb	r2, [r0, #13]
   d79ea:	7b00      	ldrb	r0, [r0, #12]
}
   d79ec:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d79f0:	4770      	bx	lr

000d79f2 <_ZNK8particle7BleUuid8rawBytesEv>:
    return BLE_SIG_UUID_128BIT_LEN;
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}
   d79f2:	4770      	bx	lr

000d79f4 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d79f4:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d79f6:	690b      	ldr	r3, [r1, #16]
   d79f8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d79fa:	f101 0210 	add.w	r2, r1, #16
   d79fe:	4603      	mov	r3, r0
   d7a00:	f851 4b04 	ldr.w	r4, [r1], #4
   d7a04:	f843 4b04 	str.w	r4, [r3], #4
   d7a08:	4291      	cmp	r1, r2
   d7a0a:	d1f9      	bne.n	d7a00 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d7a0c:	bd10      	pop	{r4, pc}

000d7a0e <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d7a0e:	b510      	push	{r4, lr}
   d7a10:	b086      	sub	sp, #24
   d7a12:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d7a14:	2201      	movs	r2, #1
   d7a16:	a801      	add	r0, sp, #4
   d7a18:	f7ff ff8c 	bl	d7934 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d7a1c:	a901      	add	r1, sp, #4
   d7a1e:	4620      	mov	r0, r4
   d7a20:	f7ff ffe8 	bl	d79f4 <_ZN8particle7BleUuidaSERKS0_>
}
   d7a24:	b006      	add	sp, #24
   d7a26:	bd10      	pop	{r4, pc}

000d7a28 <_ZNK8particle7BleUuideqERKS0_>:

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    return *this = BleUuid(uuid);
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d7a28:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d7a2a:	6902      	ldr	r2, [r0, #16]
   d7a2c:	690b      	ldr	r3, [r1, #16]
   d7a2e:	429a      	cmp	r2, r3
   d7a30:	d106      	bne.n	d7a40 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d7a32:	2210      	movs	r2, #16
   d7a34:	f003 f952 	bl	dacdc <memcmp>
   d7a38:	fab0 f080 	clz	r0, r0
   d7a3c:	0940      	lsrs	r0, r0, #5
   d7a3e:	bd08      	pop	{r3, pc}
   d7a40:	2000      	movs	r0, #0
}
   d7a42:	bd08      	pop	{r3, pc}

000d7a44 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d7a44:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d7a46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d7a48:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d7a4a:	4b31      	ldr	r3, [pc, #196]	; (d7b10 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d7a4c:	460e      	mov	r6, r1
   d7a4e:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d7a50:	4602      	mov	r2, r0
   d7a52:	f103 0110 	add.w	r1, r3, #16
   d7a56:	f853 0b04 	ldr.w	r0, [r3], #4
   d7a5a:	f842 0b04 	str.w	r0, [r2], #4
   d7a5e:	428b      	cmp	r3, r1
   d7a60:	d1f9      	bne.n	d7a56 <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d7a62:	2e00      	cmp	r6, #0
   d7a64:	d051      	beq.n	d7b0a <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d7a66:	2124      	movs	r1, #36	; 0x24
   d7a68:	4630      	mov	r0, r6
   d7a6a:	f003 f9f3 	bl	dae54 <strnlen>
   d7a6e:	2804      	cmp	r0, #4
   d7a70:	d010      	beq.n	d7a94 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d7a72:	2700      	movs	r7, #0
   d7a74:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d7a76:	2124      	movs	r1, #36	; 0x24
   d7a78:	4630      	mov	r0, r6
   d7a7a:	f003 f9eb 	bl	dae54 <strnlen>
   d7a7e:	42b8      	cmp	r0, r7
   d7a80:	d901      	bls.n	d7a86 <_ZN8particle7BleUuid9constructEPKc+0x42>
   d7a82:	bb44      	cbnz	r4, d7ad6 <_ZN8particle7BleUuid9constructEPKc+0x92>
   d7a84:	e041      	b.n	d7b0a <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d7a86:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d7a88:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d7a8a:	42a5      	cmp	r5, r4
   d7a8c:	d03d      	beq.n	d7b0a <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d7a8e:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d7a92:	e7fa      	b.n	d7a8a <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d7a94:	7830      	ldrb	r0, [r6, #0]
   d7a96:	f7ff fefb 	bl	d7890 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d7a9a:	1e04      	subs	r4, r0, #0
   d7a9c:	db18      	blt.n	d7ad0 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d7a9e:	7870      	ldrb	r0, [r6, #1]
   d7aa0:	f7ff fef6 	bl	d7890 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d7aa4:	2800      	cmp	r0, #0
   d7aa6:	db13      	blt.n	d7ad0 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d7aa8:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d7aac:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d7ab0:	78b0      	ldrb	r0, [r6, #2]
   d7ab2:	f7ff feed 	bl	d7890 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d7ab6:	1e04      	subs	r4, r0, #0
   d7ab8:	db0a      	blt.n	d7ad0 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d7aba:	78f0      	ldrb	r0, [r6, #3]
   d7abc:	f7ff fee8 	bl	d7890 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d7ac0:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d7ac2:	bfa1      	itttt	ge
   d7ac4:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d7ac8:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d7acc:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d7ace:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d7ad0:	2300      	movs	r3, #0
   d7ad2:	612b      	str	r3, [r5, #16]
   d7ad4:	e019      	b.n	d7b0a <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d7ad6:	5df0      	ldrb	r0, [r6, r7]
   d7ad8:	f7ff feda 	bl	d7890 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d7adc:	0603      	lsls	r3, r0, #24
   d7ade:	d412      	bmi.n	d7b06 <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d7ae0:	3c01      	subs	r4, #1
   d7ae2:	0100      	lsls	r0, r0, #4
   d7ae4:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d7ae6:	2124      	movs	r1, #36	; 0x24
   d7ae8:	4630      	mov	r0, r6
   d7aea:	f003 f9b3 	bl	dae54 <strnlen>
   d7aee:	3701      	adds	r7, #1
   d7af0:	4287      	cmp	r7, r0
   d7af2:	d208      	bcs.n	d7b06 <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d7af4:	5df0      	ldrb	r0, [r6, r7]
   d7af6:	f7ff fecb 	bl	d7890 <_ZN8particle11hexToNibbleEc>
   d7afa:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d7afc:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d7afe:	bfa2      	ittt	ge
   d7b00:	5d2b      	ldrbge	r3, [r5, r4]
   d7b02:	4318      	orrge	r0, r3
   d7b04:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d7b06:	3701      	adds	r7, #1
   d7b08:	e7b5      	b.n	d7a76 <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d7b0a:	b003      	add	sp, #12
   d7b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7b0e:	bf00      	nop
   d7b10:	000dbeac 	.word	0x000dbeac

000d7b14 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d7b14:	b538      	push	{r3, r4, r5, lr}
   d7b16:	4604      	mov	r4, r0
   d7b18:	460d      	mov	r5, r1
        : BleUuid() {
   d7b1a:	f7ff fefb 	bl	d7914 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d7b1e:	4620      	mov	r0, r4
   d7b20:	4629      	mov	r1, r5
   d7b22:	f7ff ff8f 	bl	d7a44 <_ZN8particle7BleUuid9constructEPKc>
}
   d7b26:	4620      	mov	r0, r4
   d7b28:	bd38      	pop	{r3, r4, r5, pc}

000d7b2a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d7b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d7b2c:	b18b      	cbz	r3, d7b52 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d7b2e:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d7b30:	1ce5      	adds	r5, r4, #3
   d7b32:	428d      	cmp	r5, r1
   d7b34:	d80f      	bhi.n	d7b56 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d7b36:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d7b38:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d7b3a:	5d87      	ldrb	r7, [r0, r6]
   d7b3c:	4297      	cmp	r7, r2
   d7b3e:	d105      	bne.n	d7b4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d7b40:	442e      	add	r6, r5
   d7b42:	42b1      	cmp	r1, r6
   d7b44:	d307      	bcc.n	d7b56 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d7b46:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d7b48:	1c68      	adds	r0, r5, #1
                return adsLen;
   d7b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d7b4c:	3501      	adds	r5, #1
   d7b4e:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d7b50:	e7ee      	b.n	d7b30 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d7b52:	4618      	mov	r0, r3
   d7b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7b56:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d7b58:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7b5a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d7b5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7b5e:	4604      	mov	r4, r0
   d7b60:	460e      	mov	r6, r1
   d7b62:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d7b64:	4617      	mov	r7, r2
   d7b66:	2a00      	cmp	r2, #0
   d7b68:	d03a      	beq.n	d7be0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d7b6a:	460a      	mov	r2, r1
   d7b6c:	ab01      	add	r3, sp, #4
   d7b6e:	6a01      	ldr	r1, [r0, #32]
   d7b70:	f7ff ffdb 	bl	d7b2a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d7b74:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d7b78:	6a22      	ldr	r2, [r4, #32]
   d7b7a:	bb03      	cbnz	r3, d7bbe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d7b7c:	b1f8      	cbz	r0, d7bbe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d7b7e:	1c96      	adds	r6, r2, #2
   d7b80:	442e      	add	r6, r5
   d7b82:	1a36      	subs	r6, r6, r0
   d7b84:	2e1f      	cmp	r6, #31
   d7b86:	d82b      	bhi.n	d7be0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d7b88:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d7b8c:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d7b90:	ebc8 0202 	rsb	r2, r8, r2
   d7b94:	1a12      	subs	r2, r2, r0
   d7b96:	eb00 0108 	add.w	r1, r0, r8
   d7b9a:	eb05 0009 	add.w	r0, r5, r9
   d7b9e:	b292      	uxth	r2, r2
   d7ba0:	4421      	add	r1, r4
   d7ba2:	4420      	add	r0, r4
   d7ba4:	f003 f8b4 	bl	dad10 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d7ba8:	1c6b      	adds	r3, r5, #1
   d7baa:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d7bae:	462a      	mov	r2, r5
   d7bb0:	4639      	mov	r1, r7
   d7bb2:	eb04 0009 	add.w	r0, r4, r9
   d7bb6:	f003 f8a0 	bl	dacfa <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d7bba:	6226      	str	r6, [r4, #32]
   d7bbc:	e010      	b.n	d7be0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d7bbe:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d7bc0:	182b      	adds	r3, r5, r0
   d7bc2:	2b1f      	cmp	r3, #31
   d7bc4:	d80c      	bhi.n	d7be0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d7bc6:	1c6b      	adds	r3, r5, #1
   d7bc8:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d7bca:	4422      	add	r2, r4
   d7bcc:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d7bce:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d7bd0:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d7bd2:	4420      	add	r0, r4
   d7bd4:	462a      	mov	r2, r5
   d7bd6:	f003 f890 	bl	dacfa <memcpy>
        selfLen_ += len;
   d7bda:	6a22      	ldr	r2, [r4, #32]
   d7bdc:	442a      	add	r2, r5
   d7bde:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d7be0:	6a20      	ldr	r0, [r4, #32]
}
   d7be2:	b003      	add	sp, #12
   d7be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7be8 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d7be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7bea:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d7bec:	4603      	mov	r3, r0
   d7bee:	f100 021f 	add.w	r2, r0, #31
   d7bf2:	2000      	movs	r0, #0
   d7bf4:	f803 0b01 	strb.w	r0, [r3], #1
   d7bf8:	4293      	cmp	r3, r2
   d7bfa:	f04f 0100 	mov.w	r1, #0
   d7bfe:	d1f9      	bne.n	d7bf4 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d7c00:	aa04      	add	r2, sp, #16
   d7c02:	2306      	movs	r3, #6
   d7c04:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d7c08:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d7c0a:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d7c0c:	9100      	str	r1, [sp, #0]
   d7c0e:	4620      	mov	r0, r4
   d7c10:	4619      	mov	r1, r3
   d7c12:	f7ff ffa2 	bl	d7b5a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d7c16:	4620      	mov	r0, r4
   d7c18:	b004      	add	sp, #16
   d7c1a:	bd10      	pop	{r4, pc}

000d7c1c <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:

size_t BleAdvertisingData::appendLocalName(const String& name) {
    return appendLocalName(name.c_str());
}

size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   d7c1c:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   d7c1e:	9300      	str	r3, [sp, #0]
   d7c20:	4613      	mov	r3, r2
   d7c22:	460a      	mov	r2, r1
   d7c24:	21ff      	movs	r1, #255	; 0xff
   d7c26:	f7ff ff98 	bl	d7b5a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d7c2a:	b003      	add	sp, #12
   d7c2c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7c30 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d7c30:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d7c32:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d7c34:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d7c36:	ab01      	add	r3, sp, #4
   d7c38:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d7c3a:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d7c3c:	f7ff ff75 	bl	d7b2a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d7c40:	4605      	mov	r5, r0
   d7c42:	b178      	cbz	r0, d7c64 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d7c44:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d7c46:	6a22      	ldr	r2, [r4, #32]
   d7c48:	1829      	adds	r1, r5, r0
   d7c4a:	1a12      	subs	r2, r2, r0
   d7c4c:	1b52      	subs	r2, r2, r5
   d7c4e:	4421      	add	r1, r4
   d7c50:	4420      	add	r0, r4
   d7c52:	f003 f852 	bl	dacfa <memcpy>
        selfLen_ -= len;
   d7c56:	6a23      	ldr	r3, [r4, #32]
   d7c58:	1b5d      	subs	r5, r3, r5
   d7c5a:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d7c5c:	4631      	mov	r1, r6
   d7c5e:	4620      	mov	r0, r4
   d7c60:	f7ff ffe6 	bl	d7c30 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d7c64:	b002      	add	sp, #8
   d7c66:	bd70      	pop	{r4, r5, r6, pc}

000d7c68 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d7c68:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d7c6a:	2500      	movs	r5, #0
   d7c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d7c70:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d7c72:	8043      	strh	r3, [r0, #2]
   d7c74:	220e      	movs	r2, #14
   d7c76:	4629      	mov	r1, r5
   d7c78:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d7c7a:	7105      	strb	r5, [r0, #4]
   d7c7c:	3006      	adds	r0, #6
   d7c7e:	f003 f862 	bl	dad46 <memset>
   d7c82:	f104 0014 	add.w	r0, r4, #20
   d7c86:	f7ff fe45 	bl	d7914 <_ZN8particle7BleUuidC1Ev>
   d7c8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d7c8e:	f7ff fe41 	bl	d7914 <_ZN8particle7BleUuidC1Ev>
   d7c92:	4904      	ldr	r1, [pc, #16]	; (d7ca4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d7c94:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d7c98:	f7ff fd75 	bl	d7786 <_ZN6StringC1EPK19__FlashStringHelper>
   d7c9c:	64e5      	str	r5, [r4, #76]	; 0x4c
   d7c9e:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d7ca0:	4620      	mov	r0, r4
   d7ca2:	bd38      	pop	{r3, r4, r5, pc}
   d7ca4:	000dbf90 	.word	0x000dbf90

000d7ca8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d7ca8:	b510      	push	{r4, lr}
   d7caa:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7cac:	69c2      	ldr	r2, [r0, #28]
   d7cae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d7cb2:	4293      	cmp	r3, r2
   d7cb4:	4618      	mov	r0, r3
   d7cb6:	d006      	beq.n	d7cc6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d7cb8:	6804      	ldr	r4, [r0, #0]
   d7cba:	8824      	ldrh	r4, [r4, #0]
   d7cbc:	428c      	cmp	r4, r1
   d7cbe:	f103 0308 	add.w	r3, r3, #8
   d7cc2:	d1f6      	bne.n	d7cb2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d7cc4:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d7cc6:	2000      	movs	r0, #0
    }
   d7cc8:	bd10      	pop	{r4, pc}

000d7cca <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d7cca:	b510      	push	{r4, lr}
    return impl()->address();
   d7ccc:	680a      	ldr	r2, [r1, #0]
   d7cce:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d7cd2:	6003      	str	r3, [r0, #0]
   d7cd4:	6853      	ldr	r3, [r2, #4]
   d7cd6:	6043      	str	r3, [r0, #4]
}
   d7cd8:	bd10      	pop	{r4, pc}

000d7cda <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d7cda:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d7cdc:	6802      	ldr	r2, [r0, #0]
   d7cde:	680b      	ldr	r3, [r1, #0]
   d7ce0:	8812      	ldrh	r2, [r2, #0]
   d7ce2:	881b      	ldrh	r3, [r3, #0]
   d7ce4:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d7ce6:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d7ce8:	d10c      	bne.n	d7d04 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d7cea:	4601      	mov	r1, r0
   d7cec:	4668      	mov	r0, sp
   d7cee:	f7ff ffec 	bl	d7cca <_ZNK8particle13BlePeerDevice7addressEv>
   d7cf2:	4621      	mov	r1, r4
   d7cf4:	a802      	add	r0, sp, #8
   d7cf6:	f7ff ffe8 	bl	d7cca <_ZNK8particle13BlePeerDevice7addressEv>
   d7cfa:	a902      	add	r1, sp, #8
   d7cfc:	4668      	mov	r0, sp
   d7cfe:	f7ff fdfb 	bl	d78f8 <_ZNK8particle10BleAddresseqERKS0_>
   d7d02:	b900      	cbnz	r0, d7d06 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d7d04:	2000      	movs	r0, #0
}
   d7d06:	b004      	add	sp, #16
   d7d08:	bd10      	pop	{r4, pc}
	...

000d7d0c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d7d0c:	b510      	push	{r4, lr}
   d7d0e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d7d10:	2034      	movs	r0, #52	; 0x34
   d7d12:	f7fc f9c0 	bl	d4096 <_Znwj>
   d7d16:	4601      	mov	r1, r0
   d7d18:	b168      	cbz	r0, d7d36 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7d1a:	2300      	movs	r3, #0
   d7d1c:	6003      	str	r3, [r0, #0]
   d7d1e:	6043      	str	r3, [r0, #4]
   d7d20:	6083      	str	r3, [r0, #8]
   d7d22:	60c3      	str	r3, [r0, #12]
   d7d24:	6103      	str	r3, [r0, #16]
   d7d26:	6143      	str	r3, [r0, #20]
   d7d28:	6183      	str	r3, [r0, #24]
   d7d2a:	61c3      	str	r3, [r0, #28]
   d7d2c:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d7d2e:	6243      	str	r3, [r0, #36]	; 0x24
   d7d30:	6283      	str	r3, [r0, #40]	; 0x28
   d7d32:	62c3      	str	r3, [r0, #44]	; 0x2c
   d7d34:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7d36:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d7d38:	b919      	cbnz	r1, d7d42 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d7d3a:	4a0a      	ldr	r2, [pc, #40]	; (d7d64 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7d3c:	200a      	movs	r0, #10
   d7d3e:	f7ff f9a5 	bl	d708c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d7d42:	2000      	movs	r0, #0
   d7d44:	f7fe ffe2 	bl	d6d0c <hal_ble_stack_init>
   d7d48:	b120      	cbz	r0, d7d54 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d7d4a:	4a06      	ldr	r2, [pc, #24]	; (d7d64 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7d4c:	2100      	movs	r1, #0
   d7d4e:	200a      	movs	r0, #10
   d7d50:	f7ff f99c 	bl	d708c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d7d54:	2200      	movs	r2, #0
   d7d56:	6821      	ldr	r1, [r4, #0]
   d7d58:	4803      	ldr	r0, [pc, #12]	; (d7d68 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d7d5a:	f7ff f815 	bl	d6d88 <hal_ble_set_callback_on_periph_link_events>
}
   d7d5e:	4620      	mov	r0, r4
   d7d60:	bd10      	pop	{r4, pc}
   d7d62:	bf00      	nop
   d7d64:	000d6cbd 	.word	0x000d6cbd
   d7d68:	000d8175 	.word	0x000d8175

000d7d6c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d7d6c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d7d6e:	4c0a      	ldr	r4, [pc, #40]	; (d7d98 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d7d70:	6823      	ldr	r3, [r4, #0]
   d7d72:	07db      	lsls	r3, r3, #31
   d7d74:	d40e      	bmi.n	d7d94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d7d76:	4620      	mov	r0, r4
   d7d78:	f7fc f99e 	bl	d40b8 <__cxa_guard_acquire>
   d7d7c:	b150      	cbz	r0, d7d94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d7d7e:	4807      	ldr	r0, [pc, #28]	; (d7d9c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d7d80:	f7ff ffc4 	bl	d7d0c <_ZN8particle14BleLocalDeviceC1Ev>
   d7d84:	4620      	mov	r0, r4
   d7d86:	f7fc f99c 	bl	d40c2 <__cxa_guard_release>
   d7d8a:	4a05      	ldr	r2, [pc, #20]	; (d7da0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d7d8c:	4905      	ldr	r1, [pc, #20]	; (d7da4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d7d8e:	4803      	ldr	r0, [pc, #12]	; (d7d9c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d7d90:	f002 fd30 	bl	da7f4 <__aeabi_atexit>
    return instance;
}
   d7d94:	4801      	ldr	r0, [pc, #4]	; (d7d9c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d7d96:	bd10      	pop	{r4, pc}
   d7d98:	2003e334 	.word	0x2003e334
   d7d9c:	2003e330 	.word	0x2003e330
   d7da0:	2003d400 	.word	0x2003d400
   d7da4:	000d7f5f 	.word	0x000d7f5f

000d7da8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d7da8:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d7daa:	6803      	ldr	r3, [r0, #0]
   d7dac:	3b09      	subs	r3, #9
   d7dae:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d7db0:	b08a      	sub	sp, #40	; 0x28
   d7db2:	4604      	mov	r4, r0
   d7db4:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d7db6:	d819      	bhi.n	d7dec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d7db8:	f7ff ffd8 	bl	d7d6c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d7dbc:	88a1      	ldrh	r1, [r4, #4]
   d7dbe:	6800      	ldr	r0, [r0, #0]
   d7dc0:	f7ff ff72 	bl	d7ca8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d7dc4:	4602      	mov	r2, r0
   d7dc6:	b958      	cbnz	r0, d7de0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d7dc8:	2320      	movs	r3, #32
   d7dca:	9302      	str	r3, [sp, #8]
   d7dcc:	4b08      	ldr	r3, [pc, #32]	; (d7df0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d7dce:	9003      	str	r0, [sp, #12]
   d7dd0:	9300      	str	r3, [sp, #0]
   d7dd2:	aa02      	add	r2, sp, #8
   d7dd4:	4603      	mov	r3, r0
   d7dd6:	4907      	ldr	r1, [pc, #28]	; (d7df4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d7dd8:	2032      	movs	r0, #50	; 0x32
   d7dda:	f7ff f95f 	bl	d709c <log_message>
   d7dde:	e005      	b.n	d7dec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d7de0:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d7de2:	b11d      	cbz	r5, d7dec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d7de4:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d7de6:	68e1      	ldr	r1, [r4, #12]
   d7de8:	6920      	ldr	r0, [r4, #16]
   d7dea:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d7dec:	b00a      	add	sp, #40	; 0x28
   d7dee:	bd70      	pop	{r4, r5, r6, pc}
   d7df0:	000dbd56 	.word	0x000dbd56
   d7df4:	000dbd0c 	.word	0x000dbd0c

000d7df8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d7df8:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d7dfa:	a801      	add	r0, sp, #4
   d7dfc:	f7ff fd5e 	bl	d78bc <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d7e00:	2000      	movs	r0, #0
   d7e02:	f7fe ff83 	bl	d6d0c <hal_ble_stack_init>
   d7e06:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d7e08:	a801      	add	r0, sp, #4
   d7e0a:	f7ff fd65 	bl	d78d8 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d7e0e:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d7e12:	b002      	add	sp, #8
   d7e14:	bd10      	pop	{r4, pc}

000d7e16 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d7e16:	4608      	mov	r0, r1
   d7e18:	b909      	cbnz	r1, d7e1e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d7e1a:	460a      	mov	r2, r1
   d7e1c:	e001      	b.n	d7e22 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d7e1e:	6a09      	ldr	r1, [r1, #32]
   d7e20:	2200      	movs	r2, #0
   d7e22:	f7fe bf7b 	b.w	d6d1c <hal_ble_gap_set_advertising_data>

000d7e26 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d7e26:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d7e28:	460c      	mov	r4, r1
   d7e2a:	b911      	cbnz	r1, d7e32 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d7e2c:	460a      	mov	r2, r1
   d7e2e:	4608      	mov	r0, r1
   d7e30:	e006      	b.n	d7e40 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d7e32:	2101      	movs	r1, #1
   d7e34:	4620      	mov	r0, r4
   d7e36:	f7ff fefb 	bl	d7c30 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d7e3a:	6a21      	ldr	r1, [r4, #32]
   d7e3c:	2200      	movs	r2, #0
   d7e3e:	4620      	mov	r0, r4
    }
}
   d7e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d7e44:	f7fe bf72 	b.w	d6d2c <hal_ble_gap_set_scan_response_data>

000d7e48 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d7e48:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d7e4a:	a801      	add	r0, sp, #4
   d7e4c:	f7ff fd36 	bl	d78bc <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d7e50:	2000      	movs	r0, #0
   d7e52:	f7fe ff73 	bl	d6d3c <hal_ble_gap_start_advertising>
   d7e56:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d7e58:	a801      	add	r0, sp, #4
   d7e5a:	f7ff fd3d 	bl	d78d8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d7e5e:	4620      	mov	r0, r4
   d7e60:	b002      	add	sp, #8
   d7e62:	bd10      	pop	{r4, pc}

000d7e64 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d7e64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7e66:	4605      	mov	r5, r0
   d7e68:	460c      	mov	r4, r1
    WiringBleLock lk;
   d7e6a:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d7e6c:	4616      	mov	r6, r2
    WiringBleLock lk;
   d7e6e:	f7ff fd25 	bl	d78bc <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d7e72:	4621      	mov	r1, r4
   d7e74:	4628      	mov	r0, r5
   d7e76:	f7ff ffce 	bl	d7e16 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d7e7a:	2800      	cmp	r0, #0
   d7e7c:	db08      	blt.n	d7e90 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d7e7e:	4631      	mov	r1, r6
   d7e80:	4628      	mov	r0, r5
   d7e82:	f7ff ffd0 	bl	d7e26 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d7e86:	2800      	cmp	r0, #0
   d7e88:	db02      	blt.n	d7e90 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d7e8a:	4628      	mov	r0, r5
   d7e8c:	f7ff ffdc 	bl	d7e48 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d7e90:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d7e92:	a801      	add	r0, sp, #4
   d7e94:	f7ff fd20 	bl	d78d8 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d7e98:	4620      	mov	r0, r4
   d7e9a:	b002      	add	sp, #8
   d7e9c:	bd70      	pop	{r4, r5, r6, pc}

000d7e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7e9e:	680b      	ldr	r3, [r1, #0]
   d7ea0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7ea2:	b113      	cbz	r3, d7eaa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d7ea4:	685a      	ldr	r2, [r3, #4]
   d7ea6:	3201      	adds	r2, #1
   d7ea8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d7eaa:	4770      	bx	lr

000d7eac <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d7eac:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7eae:	f851 3b04 	ldr.w	r3, [r1], #4
   d7eb2:	4604      	mov	r4, r0
   d7eb4:	f840 3b04 	str.w	r3, [r0], #4
   d7eb8:	f7ff fff1 	bl	d7e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d7ebc:	6823      	ldr	r3, [r4, #0]
   d7ebe:	b90b      	cbnz	r3, d7ec4 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d7ec0:	f7ff fccc 	bl	d785c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d7ec4:	4620      	mov	r0, r4
   d7ec6:	bd10      	pop	{r4, pc}

000d7ec8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d7ec8:	b510      	push	{r4, lr}
   d7eca:	f851 3b04 	ldr.w	r3, [r1], #4
   d7ece:	4604      	mov	r4, r0
   d7ed0:	f840 3b04 	str.w	r3, [r0], #4
   d7ed4:	f7ff ffe3 	bl	d7e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d7ed8:	4620      	mov	r0, r4
   d7eda:	bd10      	pop	{r4, pc}

000d7edc <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d7edc:	b510      	push	{r4, lr}
   d7ede:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7ee0:	3004      	adds	r0, #4
   d7ee2:	f7fc fbb3 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d7ee6:	4620      	mov	r0, r4
   d7ee8:	bd10      	pop	{r4, pc}

000d7eea <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d7eea:	b510      	push	{r4, lr}
   d7eec:	4604      	mov	r4, r0
   d7eee:	3004      	adds	r0, #4
   d7ef0:	f7fc fbac 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d7ef4:	4620      	mov	r0, r4
   d7ef6:	bd10      	pop	{r4, pc}

000d7ef8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7ef8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7efa:	6804      	ldr	r4, [r0, #0]
   d7efc:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7efe:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7f00:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7f04:	42a6      	cmp	r6, r4
   d7f06:	d004      	beq.n	d7f12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d7f08:	1d20      	adds	r0, r4, #4
   d7f0a:	f7fc fb9f 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f0e:	3408      	adds	r4, #8
   d7f10:	e7f8      	b.n	d7f04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7f12:	6828      	ldr	r0, [r5, #0]
   d7f14:	f7ff f9a0 	bl	d7258 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7f18:	4628      	mov	r0, r5
   d7f1a:	bd70      	pop	{r4, r5, r6, pc}

000d7f1c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7f1c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7f1e:	6804      	ldr	r4, [r0, #0]
   d7f20:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7f22:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7f24:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7f28:	42a6      	cmp	r6, r4
   d7f2a:	d004      	beq.n	d7f36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d7f2c:	1d20      	adds	r0, r4, #4
   d7f2e:	f7fc fb8d 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f32:	3408      	adds	r4, #8
   d7f34:	e7f8      	b.n	d7f28 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7f36:	6828      	ldr	r0, [r5, #0]
   d7f38:	f7ff f98e 	bl	d7258 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7f3c:	4628      	mov	r0, r5
   d7f3e:	bd70      	pop	{r4, r5, r6, pc}

000d7f40 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7f40:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7f42:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d7f44:	f104 0018 	add.w	r0, r4, #24
   d7f48:	f7ff ffe8 	bl	d7f1c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d7f4c:	f104 000c 	add.w	r0, r4, #12
   d7f50:	f7ff ffd2 	bl	d7ef8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d7f54:	4620      	mov	r0, r4
   d7f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7f5a:	f7fc b89e 	b.w	d409a <_ZdlPv>

000d7f5e <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d7f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7f60:	6804      	ldr	r4, [r0, #0]
   d7f62:	4607      	mov	r7, r0
   d7f64:	b1c4      	cbz	r4, d7f98 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d7f66:	69a5      	ldr	r5, [r4, #24]
   d7f68:	69e3      	ldr	r3, [r4, #28]
   d7f6a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7f6e:	42ae      	cmp	r6, r5
   d7f70:	d004      	beq.n	d7f7c <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7f72:	1d28      	adds	r0, r5, #4
   d7f74:	f7fc fb6a 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f78:	3508      	adds	r5, #8
   d7f7a:	e7f8      	b.n	d7f6e <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7f7c:	69a0      	ldr	r0, [r4, #24]
   d7f7e:	f7ff f96b 	bl	d7258 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d7f82:	f104 000c 	add.w	r0, r4, #12
   d7f86:	f7ff ffc9 	bl	d7f1c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d7f8a:	4620      	mov	r0, r4
   d7f8c:	f7ff ffb4 	bl	d7ef8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7f90:	2134      	movs	r1, #52	; 0x34
   d7f92:	4620      	mov	r0, r4
   d7f94:	f002 fc3c 	bl	da810 <_ZdlPvj>
   d7f98:	4638      	mov	r0, r7
   d7f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7f9c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d7f9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7f9e:	2500      	movs	r5, #0
   d7fa0:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7fa2:	6045      	str	r5, [r0, #4]
   d7fa4:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7fa6:	2024      	movs	r0, #36	; 0x24
   d7fa8:	f7fc f875 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7fac:	4604      	mov	r4, r0
   d7fae:	b178      	cbz	r0, d7fd0 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d7fb0:	4603      	mov	r3, r0
   d7fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7fb6:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d7fba:	f8c0 5002 	str.w	r5, [r0, #2]
   d7fbe:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d7fc0:	7285      	strb	r5, [r0, #10]
   d7fc2:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7fc4:	60c5      	str	r5, [r0, #12]
   d7fc6:	6105      	str	r5, [r0, #16]
   d7fc8:	6145      	str	r5, [r0, #20]
   d7fca:	6185      	str	r5, [r0, #24]
   d7fcc:	61c5      	str	r5, [r0, #28]
   d7fce:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d7fd0:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7fd2:	2014      	movs	r0, #20
   d7fd4:	9301      	str	r3, [sp, #4]
   d7fd6:	f7fc f85e 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7fda:	4603      	mov	r3, r0
   d7fdc:	b128      	cbz	r0, d7fea <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7fde:	2201      	movs	r2, #1
   d7fe0:	6042      	str	r2, [r0, #4]
   d7fe2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7fe4:	4a08      	ldr	r2, [pc, #32]	; (d8008 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d7fe6:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7fe8:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7fea:	a802      	add	r0, sp, #8
   d7fec:	6872      	ldr	r2, [r6, #4]
   d7fee:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d7ff2:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7ff4:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7ff6:	f7fc fb29 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d7ffa:	6833      	ldr	r3, [r6, #0]
   d7ffc:	b90b      	cbnz	r3, d8002 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d7ffe:	f7ff fc2d 	bl	d785c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d8002:	4630      	mov	r0, r6
   d8004:	b002      	add	sp, #8
   d8006:	bd70      	pop	{r4, r5, r6, pc}
   d8008:	000dbce8 	.word	0x000dbce8

000d800c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d800c:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d800e:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d8010:	6803      	ldr	r3, [r0, #0]
   d8012:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d8014:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d8016:	d00c      	beq.n	d8032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d8018:	b114      	cbz	r4, d8020 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d801a:	6863      	ldr	r3, [r4, #4]
   d801c:	3301      	adds	r3, #1
   d801e:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d8020:	6828      	ldr	r0, [r5, #0]
   d8022:	b128      	cbz	r0, d8030 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8024:	6843      	ldr	r3, [r0, #4]
   d8026:	3b01      	subs	r3, #1
   d8028:	6043      	str	r3, [r0, #4]
   d802a:	b90b      	cbnz	r3, d8030 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d802c:	f7ff fc20 	bl	d7870 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d8030:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d8032:	4628      	mov	r0, r5
   d8034:	bd38      	pop	{r3, r4, r5, pc}

000d8036 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d8036:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d8038:	b570      	push	{r4, r5, r6, lr}
   d803a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d803c:	d91a      	bls.n	d8074 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d803e:	4290      	cmp	r0, r2
   d8040:	d219      	bcs.n	d8076 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d8042:	f1a1 0608 	sub.w	r6, r1, #8
   d8046:	1a51      	subs	r1, r2, r1
   d8048:	3904      	subs	r1, #4
   d804a:	1f15      	subs	r5, r2, #4
   d804c:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d804e:	1f2b      	subs	r3, r5, #4
   d8050:	429e      	cmp	r6, r3
   d8052:	d025      	beq.n	d80a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d8054:	2c04      	cmp	r4, #4
   d8056:	d007      	beq.n	d8068 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8058:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d805c:	f844 3c04 	str.w	r3, [r4, #-4]
   d8060:	4629      	mov	r1, r5
   d8062:	4620      	mov	r0, r4
   d8064:	f7ff ff1b 	bl	d7e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8068:	4628      	mov	r0, r5
   d806a:	f7fc faef 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d806e:	3d08      	subs	r5, #8
   d8070:	3c08      	subs	r4, #8
   d8072:	e7ec      	b.n	d804e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d8074:	d014      	beq.n	d80a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d8076:	1d0c      	adds	r4, r1, #4
   d8078:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d807a:	1f23      	subs	r3, r4, #4
   d807c:	429d      	cmp	r5, r3
   d807e:	d00f      	beq.n	d80a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d8080:	2e04      	cmp	r6, #4
   d8082:	d007      	beq.n	d8094 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8084:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d8088:	f846 3c04 	str.w	r3, [r6, #-4]
   d808c:	4621      	mov	r1, r4
   d808e:	4630      	mov	r0, r6
   d8090:	f7ff ff05 	bl	d7e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8094:	4620      	mov	r0, r4
   d8096:	f7fc fad9 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d809a:	3408      	adds	r4, #8
   d809c:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d809e:	e7ec      	b.n	d807a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d80a0:	bd70      	pop	{r4, r5, r6, pc}

000d80a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d80a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d80a6:	6804      	ldr	r4, [r0, #0]
   d80a8:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d80aa:	4605      	mov	r5, r0
   d80ac:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d80ae:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d80b2:	42a7      	cmp	r7, r4
   d80b4:	d018      	beq.n	d80e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d80b6:	4641      	mov	r1, r8
   d80b8:	4620      	mov	r0, r4
   d80ba:	f7ff fe0e 	bl	d7cda <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d80be:	4606      	mov	r6, r0
   d80c0:	b908      	cbnz	r0, d80c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d80c2:	3408      	adds	r4, #8
   d80c4:	e7f5      	b.n	d80b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d80c6:	b18c      	cbz	r4, d80ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d80c8:	1d20      	adds	r0, r4, #4
   d80ca:	f7fc fabf 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d80ce:	682b      	ldr	r3, [r5, #0]
   d80d0:	686a      	ldr	r2, [r5, #4]
   d80d2:	f104 0108 	add.w	r1, r4, #8
   d80d6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d80da:	4620      	mov	r0, r4
   d80dc:	f7ff ffab 	bl	d8036 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d80e0:	686b      	ldr	r3, [r5, #4]
   d80e2:	3b01      	subs	r3, #1
   d80e4:	606b      	str	r3, [r5, #4]
    return true;
   d80e6:	e002      	b.n	d80ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d80e8:	2600      	movs	r6, #0
   d80ea:	e000      	b.n	d80ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d80ec:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d80ee:	4630      	mov	r0, r6
   d80f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d80f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d80f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d80f6:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d80f8:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d80fc:	6847      	ldr	r7, [r0, #4]
   d80fe:	9300      	str	r3, [sp, #0]
   d8100:	a801      	add	r0, sp, #4
   d8102:	f7ff fecc 	bl	d7e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8106:	6866      	ldr	r6, [r4, #4]
   d8108:	68a3      	ldr	r3, [r4, #8]
   d810a:	429e      	cmp	r6, r3
   d810c:	db14      	blt.n	d8138 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d810e:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d8110:	2e00      	cmp	r6, #0
   d8112:	dd0b      	ble.n	d812c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d8114:	00f0      	lsls	r0, r6, #3
   d8116:	f7ff f897 	bl	d7248 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d811a:	4605      	mov	r5, r0
   d811c:	b318      	cbz	r0, d8166 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d811e:	e894 0006 	ldmia.w	r4, {r1, r2}
   d8122:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d8126:	f7ff ff86 	bl	d8036 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d812a:	e000      	b.n	d812e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d812c:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d812e:	6820      	ldr	r0, [r4, #0]
   d8130:	f7ff f892 	bl	d7258 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d8134:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d8136:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8138:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d813a:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d813c:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d8140:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d8144:	4629      	mov	r1, r5
   d8146:	f105 0008 	add.w	r0, r5, #8
   d814a:	f7ff ff74 	bl	d8036 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d814e:	b135      	cbz	r5, d815e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d8150:	9b00      	ldr	r3, [sp, #0]
   d8152:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d8156:	a901      	add	r1, sp, #4
   d8158:	1d28      	adds	r0, r5, #4
   d815a:	f7ff fea0 	bl	d7e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d815e:	6863      	ldr	r3, [r4, #4]
   d8160:	3301      	adds	r3, #1
   d8162:	6063      	str	r3, [r4, #4]
   d8164:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8166:	a801      	add	r0, sp, #4
   d8168:	f7fc fa70 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d816c:	4628      	mov	r0, r5
   d816e:	b003      	add	sp, #12
   d8170:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d8174 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d8174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8178:	4604      	mov	r4, r0
   d817a:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d817c:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d817e:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d8180:	f7ff fb9c 	bl	d78bc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d8184:	6823      	ldr	r3, [r4, #0]
   d8186:	2b03      	cmp	r3, #3
   d8188:	d002      	beq.n	d8190 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d818a:	2b04      	cmp	r3, #4
   d818c:	d042      	beq.n	d8214 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d818e:	e087      	b.n	d82a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d8190:	a804      	add	r0, sp, #16
   d8192:	f7ff ff03 	bl	d7f9c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d8196:	9b04      	ldr	r3, [sp, #16]
   d8198:	8922      	ldrh	r2, [r4, #8]
   d819a:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d819c:	6862      	ldr	r2, [r4, #4]
   d819e:	9904      	ldr	r1, [sp, #16]
   d81a0:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d81a4:	f8c1 3002 	str.w	r3, [r1, #2]
   d81a8:	6853      	ldr	r3, [r2, #4]
   d81aa:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d81ae:	a807      	add	r0, sp, #28
   d81b0:	9b04      	ldr	r3, [sp, #16]
   d81b2:	9306      	str	r3, [sp, #24]
   d81b4:	a905      	add	r1, sp, #20
   d81b6:	f7ff fe72 	bl	d7e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d81ba:	a906      	add	r1, sp, #24
   d81bc:	f105 0018 	add.w	r0, r5, #24
   d81c0:	f7ff ff98 	bl	d80f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d81c4:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d81c6:	a807      	add	r0, sp, #28
   d81c8:	f7fc fa40 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d81cc:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d81ce:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d81d0:	b974      	cbnz	r4, d81f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d81d2:	4b36      	ldr	r3, [pc, #216]	; (d82ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d81d4:	9300      	str	r3, [sp, #0]
   d81d6:	aa06      	add	r2, sp, #24
   d81d8:	4623      	mov	r3, r4
   d81da:	4935      	ldr	r1, [pc, #212]	; (d82b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d81dc:	9407      	str	r4, [sp, #28]
   d81de:	2032      	movs	r0, #50	; 0x32
   d81e0:	f7fe ff5c 	bl	d709c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d81e4:	9b04      	ldr	r3, [sp, #16]
   d81e6:	4621      	mov	r1, r4
   d81e8:	8818      	ldrh	r0, [r3, #0]
   d81ea:	f7fe fdaf 	bl	d6d4c <hal_ble_gap_disconnect>
   d81ee:	e00d      	b.n	d820c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d81f0:	4a30      	ldr	r2, [pc, #192]	; (d82b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d81f2:	9200      	str	r2, [sp, #0]
   d81f4:	2300      	movs	r3, #0
   d81f6:	aa06      	add	r2, sp, #24
   d81f8:	492d      	ldr	r1, [pc, #180]	; (d82b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d81fa:	9307      	str	r3, [sp, #28]
   d81fc:	2001      	movs	r0, #1
   d81fe:	f7fe ff4d 	bl	d709c <log_message>
                if (impl->connectedCb_) {
   d8202:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d8204:	b113      	cbz	r3, d820c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d8206:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d8208:	a804      	add	r0, sp, #16
   d820a:	4798      	blx	r3
   d820c:	a805      	add	r0, sp, #20
   d820e:	f7fc fa1d 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8212:	e045      	b.n	d82a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d8214:	8921      	ldrh	r1, [r4, #8]
   d8216:	4628      	mov	r0, r5
   d8218:	f7ff fd46 	bl	d7ca8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d821c:	4607      	mov	r7, r0
   d821e:	2800      	cmp	r0, #0
   d8220:	d03e      	beq.n	d82a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d8222:	6804      	ldr	r4, [r0, #0]
   d8224:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8226:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d8228:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d822c:	8022      	strh	r2, [r4, #0]
   d822e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d8232:	4299      	cmp	r1, r3
   d8234:	d003      	beq.n	d823e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d8236:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d823a:	8042      	strh	r2, [r0, #2]
   d823c:	e7f9      	b.n	d8232 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d823e:	68e6      	ldr	r6, [r4, #12]
   d8240:	6923      	ldr	r3, [r4, #16]
   d8242:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8246:	45b0      	cmp	r8, r6
   d8248:	d004      	beq.n	d8254 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d824a:	1d30      	adds	r0, r6, #4
   d824c:	f7fc f9fe 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8250:	3608      	adds	r6, #8
   d8252:	e7f8      	b.n	d8246 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d8254:	2300      	movs	r3, #0
   d8256:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d8258:	69a6      	ldr	r6, [r4, #24]
   d825a:	69e3      	ldr	r3, [r4, #28]
   d825c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8260:	45b0      	cmp	r8, r6
   d8262:	d004      	beq.n	d826e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d8264:	1d30      	adds	r0, r6, #4
   d8266:	f7fc f9f1 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d826a:	3608      	adds	r6, #8
   d826c:	e7f8      	b.n	d8260 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d826e:	2300      	movs	r3, #0
   d8270:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d8272:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d8274:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d8276:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d8278:	b113      	cbz	r3, d8280 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d827a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d827c:	4638      	mov	r0, r7
   d827e:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d8280:	2320      	movs	r3, #32
   d8282:	4a0d      	ldr	r2, [pc, #52]	; (d82b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d8284:	9306      	str	r3, [sp, #24]
   d8286:	9200      	str	r2, [sp, #0]
   d8288:	2300      	movs	r3, #0
   d828a:	4909      	ldr	r1, [pc, #36]	; (d82b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d828c:	9307      	str	r3, [sp, #28]
   d828e:	2001      	movs	r0, #1
   d8290:	aa06      	add	r2, sp, #24
   d8292:	f7fe ff03 	bl	d709c <log_message>
                    impl->peers_.removeOne(*peer);
   d8296:	4639      	mov	r1, r7
   d8298:	f105 0018 	add.w	r0, r5, #24
   d829c:	f7ff ff01 	bl	d80a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d82a0:	a803      	add	r0, sp, #12
   d82a2:	f7ff fb19 	bl	d78d8 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d82a6:	b00e      	add	sp, #56	; 0x38
   d82a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d82ac:	000dbd6e 	.word	0x000dbd6e
   d82b0:	000dbd0c 	.word	0x000dbd0c
   d82b4:	000dbd94 	.word	0x000dbd94
   d82b8:	000dbdb1 	.word	0x000dbdb1

000d82bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d82bc:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d82be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d82c0:	4606      	mov	r6, r0
   d82c2:	460c      	mov	r4, r1
   d82c4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d82c6:	d914      	bls.n	d82f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d82c8:	4290      	cmp	r0, r2
   d82ca:	d213      	bcs.n	d82f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d82cc:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d82d0:	1a6c      	subs	r4, r5, r1
   d82d2:	f1a1 0708 	sub.w	r7, r1, #8
   d82d6:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d82d8:	42af      	cmp	r7, r5
   d82da:	d018      	beq.n	d830e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d82dc:	b11c      	cbz	r4, d82e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d82de:	4629      	mov	r1, r5
   d82e0:	4620      	mov	r0, r4
   d82e2:	f7ff fdf1 	bl	d7ec8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d82e6:	1d28      	adds	r0, r5, #4
   d82e8:	f7fc f9b0 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d82ec:	3d08      	subs	r5, #8
   d82ee:	3c08      	subs	r4, #8
   d82f0:	e7f2      	b.n	d82d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d82f2:	d00c      	beq.n	d830e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d82f4:	42ac      	cmp	r4, r5
   d82f6:	d00a      	beq.n	d830e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d82f8:	b11e      	cbz	r6, d8302 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d82fa:	4621      	mov	r1, r4
   d82fc:	4630      	mov	r0, r6
   d82fe:	f7ff fde3 	bl	d7ec8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d8302:	1d20      	adds	r0, r4, #4
   d8304:	f7fc f9a2 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d8308:	3408      	adds	r4, #8
   d830a:	3608      	adds	r6, #8
   d830c:	e7f2      	b.n	d82f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d830e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8310 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d8310:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d8312:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d8314:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d8316:	dd0b      	ble.n	d8330 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d8318:	00f0      	lsls	r0, r6, #3
   d831a:	f7fe ff95 	bl	d7248 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d831e:	4604      	mov	r4, r0
   d8320:	b170      	cbz	r0, d8340 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d8322:	e895 0006 	ldmia.w	r5, {r1, r2}
   d8326:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d832a:	f7ff ffc7 	bl	d82bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d832e:	e000      	b.n	d8332 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d8330:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8332:	6828      	ldr	r0, [r5, #0]
   d8334:	f7fe ff90 	bl	d7258 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d8338:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d833a:	60ae      	str	r6, [r5, #8]
        return true;
   d833c:	2001      	movs	r0, #1
   d833e:	bd70      	pop	{r4, r5, r6, pc}
    }
   d8340:	bd70      	pop	{r4, r5, r6, pc}

000d8342 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d8342:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8344:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d8346:	6845      	ldr	r5, [r0, #4]
   d8348:	4668      	mov	r0, sp
   d834a:	f7ff fdbd 	bl	d7ec8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d834e:	6861      	ldr	r1, [r4, #4]
   d8350:	68a3      	ldr	r3, [r4, #8]
   d8352:	4299      	cmp	r1, r3
   d8354:	db05      	blt.n	d8362 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d8356:	3101      	adds	r1, #1
   d8358:	4620      	mov	r0, r4
   d835a:	f7ff ffd9 	bl	d8310 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d835e:	4606      	mov	r6, r0
   d8360:	b198      	cbz	r0, d838a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d8362:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d8364:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8366:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d836a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d836e:	4629      	mov	r1, r5
   d8370:	f105 0008 	add.w	r0, r5, #8
   d8374:	f7ff ffa2 	bl	d82bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d8378:	b11d      	cbz	r5, d8382 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d837a:	4669      	mov	r1, sp
   d837c:	4628      	mov	r0, r5
   d837e:	f7ff fda3 	bl	d7ec8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d8382:	6863      	ldr	r3, [r4, #4]
   d8384:	3301      	adds	r3, #1
   d8386:	6063      	str	r3, [r4, #4]
   d8388:	2601      	movs	r6, #1
   d838a:	a801      	add	r0, sp, #4
   d838c:	f7fc f95e 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d8390:	4630      	mov	r0, r6
   d8392:	b002      	add	sp, #8
   d8394:	bd70      	pop	{r4, r5, r6, pc}

000d8396 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d8396:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d8398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d839a:	4606      	mov	r6, r0
   d839c:	460c      	mov	r4, r1
   d839e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d83a0:	d914      	bls.n	d83cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d83a2:	4290      	cmp	r0, r2
   d83a4:	d213      	bcs.n	d83ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d83a6:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d83aa:	1a6c      	subs	r4, r5, r1
   d83ac:	f1a1 0708 	sub.w	r7, r1, #8
   d83b0:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d83b2:	42af      	cmp	r7, r5
   d83b4:	d018      	beq.n	d83e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d83b6:	b11c      	cbz	r4, d83c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d83b8:	4629      	mov	r1, r5
   d83ba:	4620      	mov	r0, r4
   d83bc:	f7ff fd76 	bl	d7eac <_ZN8particle17BleCharacteristicC1ERKS0_>
   d83c0:	1d28      	adds	r0, r5, #4
   d83c2:	f7fc f943 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d83c6:	3d08      	subs	r5, #8
   d83c8:	3c08      	subs	r4, #8
   d83ca:	e7f2      	b.n	d83b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d83cc:	d00c      	beq.n	d83e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d83ce:	42ac      	cmp	r4, r5
   d83d0:	d00a      	beq.n	d83e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d83d2:	b11e      	cbz	r6, d83dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d83d4:	4621      	mov	r1, r4
   d83d6:	4630      	mov	r0, r6
   d83d8:	f7ff fd68 	bl	d7eac <_ZN8particle17BleCharacteristicC1ERKS0_>
   d83dc:	1d20      	adds	r0, r4, #4
   d83de:	f7fc f935 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d83e2:	3408      	adds	r4, #8
   d83e4:	3608      	adds	r6, #8
   d83e6:	e7f2      	b.n	d83ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d83e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d83ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d83ea:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d83ec:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d83ee:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d83f0:	dd0b      	ble.n	d840a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d83f2:	00f0      	lsls	r0, r6, #3
   d83f4:	f7fe ff28 	bl	d7248 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d83f8:	4604      	mov	r4, r0
   d83fa:	b170      	cbz	r0, d841a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d83fc:	e895 0006 	ldmia.w	r5, {r1, r2}
   d8400:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d8404:	f7ff ffc7 	bl	d8396 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d8408:	e000      	b.n	d840c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d840a:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d840c:	6828      	ldr	r0, [r5, #0]
   d840e:	f7fe ff23 	bl	d7258 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d8412:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d8414:	60ae      	str	r6, [r5, #8]
        return true;
   d8416:	2001      	movs	r0, #1
   d8418:	bd70      	pop	{r4, r5, r6, pc}
    }
   d841a:	bd70      	pop	{r4, r5, r6, pc}

000d841c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d841c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d841e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d8420:	6845      	ldr	r5, [r0, #4]
   d8422:	4668      	mov	r0, sp
   d8424:	f7ff fd42 	bl	d7eac <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8428:	6861      	ldr	r1, [r4, #4]
   d842a:	68a3      	ldr	r3, [r4, #8]
   d842c:	4299      	cmp	r1, r3
   d842e:	db05      	blt.n	d843c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d8430:	3101      	adds	r1, #1
   d8432:	4620      	mov	r0, r4
   d8434:	f7ff ffd9 	bl	d83ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d8438:	4606      	mov	r6, r0
   d843a:	b198      	cbz	r0, d8464 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d843c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d843e:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8440:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d8444:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d8448:	4629      	mov	r1, r5
   d844a:	f105 0008 	add.w	r0, r5, #8
   d844e:	f7ff ffa2 	bl	d8396 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d8452:	b11d      	cbz	r5, d845c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d8454:	4669      	mov	r1, sp
   d8456:	4628      	mov	r0, r5
   d8458:	f7ff fd28 	bl	d7eac <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d845c:	6863      	ldr	r3, [r4, #4]
   d845e:	3301      	adds	r3, #1
   d8460:	6063      	str	r3, [r4, #4]
   d8462:	2601      	movs	r6, #1
   d8464:	a801      	add	r0, sp, #4
   d8466:	f7fc f8f1 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d846a:	4630      	mov	r0, r6
   d846c:	b002      	add	sp, #8
   d846e:	bd70      	pop	{r4, r5, r6, pc}

000d8470 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d8470:	b510      	push	{r4, lr}
   d8472:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d8474:	6840      	ldr	r0, [r0, #4]
   d8476:	b108      	cbz	r0, d847c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8478:	f7fb fe0f 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d847c:	4620      	mov	r0, r4
   d847e:	bd10      	pop	{r4, pc}

000d8480 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8480:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8482:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d8484:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d8486:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d848a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d848e:	f7ff f933 	bl	d76f8 <_ZN6StringD1Ev>
   d8492:	4668      	mov	r0, sp
   d8494:	f7ff ffec 	bl	d8470 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8498:	b003      	add	sp, #12
   d849a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d84a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d84a0:	b538      	push	{r3, r4, r5, lr}
   d84a2:	2300      	movs	r3, #0
   d84a4:	4604      	mov	r4, r0
   d84a6:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d84a8:	2014      	movs	r0, #20
   d84aa:	460d      	mov	r5, r1
   d84ac:	f7fb fdf3 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d84b0:	b128      	cbz	r0, d84be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d84b2:	2301      	movs	r3, #1
   d84b4:	6043      	str	r3, [r0, #4]
   d84b6:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d84b8:	4b02      	ldr	r3, [pc, #8]	; (d84c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d84ba:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d84bc:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d84be:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d84c0:	4620      	mov	r0, r4
   d84c2:	bd38      	pop	{r3, r4, r5, pc}
   d84c4:	000dbcb0 	.word	0x000dbcb0

000d84c8 <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d84c8:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d84ca:	2500      	movs	r5, #0
   d84cc:	b086      	sub	sp, #24
   d84ce:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d84d0:	6045      	str	r5, [r0, #4]
   d84d2:	4604      	mov	r4, r0
   d84d4:	2054      	movs	r0, #84	; 0x54
   d84d6:	f7fb fdde 	bl	d4096 <_Znwj>
   d84da:	f8cd d010 	str.w	sp, [sp, #16]
   d84de:	4606      	mov	r6, r0
   d84e0:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d84e2:	b108      	cbz	r0, d84e8 <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d84e4:	f7ff fbc0 	bl	d7c68 <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d84e8:	4631      	mov	r1, r6
   d84ea:	ab01      	add	r3, sp, #4
   d84ec:	aa02      	add	r2, sp, #8
   d84ee:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d84f0:	9505      	str	r5, [sp, #20]
   d84f2:	f7ff ffd5 	bl	d84a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d84f6:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d84f8:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d84fa:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d84fc:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d84fe:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8500:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8502:	f7fc f8a3 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d8506:	a804      	add	r0, sp, #16
   d8508:	f7ff ffb2 	bl	d8470 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d850c:	6823      	ldr	r3, [r4, #0]
   d850e:	b90b      	cbnz	r3, d8514 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d8510:	f7ff f9a4 	bl	d785c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d8514:	4620      	mov	r0, r4
   d8516:	b006      	add	sp, #24
   d8518:	bd70      	pop	{r4, r5, r6, pc}
	...

000d851c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d851c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8520:	b088      	sub	sp, #32
   d8522:	4605      	mov	r5, r0
   d8524:	461e      	mov	r6, r3
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8526:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8528:	2300      	movs	r3, #0
   d852a:	460f      	mov	r7, r1
   d852c:	4690      	mov	r8, r2
   d852e:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8530:	9305      	str	r3, [sp, #20]
   d8532:	f7fb fdb0 	bl	d4096 <_Znwj>
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d8536:	f8cd d018 	str.w	sp, [sp, #24]
   d853a:	4604      	mov	r4, r0
   d853c:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d853e:	b1c0      	cbz	r0, d8572 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x56>
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d8540:	f898 8000 	ldrb.w	r8, [r8]
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d8544:	f7ff fb90 	bl	d7c68 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d8548:	4639      	mov	r1, r7
   d854a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d854e:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d8552:	f7ff f945 	bl	d77e0 <_ZN6StringaSEPKc>
        callback_ = callback;
   d8556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8558:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d855a:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d855c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d855e:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d8560:	f104 0014 	add.w	r0, r4, #20
   d8564:	f7ff fa46 	bl	d79f4 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d8568:	990e      	ldr	r1, [sp, #56]	; 0x38
   d856a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d856e:	f7ff fa41 	bl	d79f4 <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8572:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d8574:	2600      	movs	r6, #0
   d8576:	ab01      	add	r3, sp, #4
   d8578:	aa02      	add	r2, sp, #8
   d857a:	a803      	add	r0, sp, #12
   d857c:	9607      	str	r6, [sp, #28]
   d857e:	f7ff ff8f 	bl	d84a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8582:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d8584:	9a05      	ldr	r2, [sp, #20]
   d8586:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8588:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d858a:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d858c:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d858e:	f7fc f85d 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d8592:	a806      	add	r0, sp, #24
   d8594:	f7ff ff6c 	bl	d8470 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8598:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d859a:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d859c:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d859e:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d85a0:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d85a2:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d85a4:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d85a6:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d85a8:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d85ac:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d85ae:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d85b0:	f7fc f84c 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d85b4:	a805      	add	r0, sp, #20
   d85b6:	f7fc f849 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d85ba:	6829      	ldr	r1, [r5, #0]
   d85bc:	b919      	cbnz	r1, d85c6 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xaa>
        SPARK_ASSERT(false);
   d85be:	4a03      	ldr	r2, [pc, #12]	; (d85cc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xb0>)
   d85c0:	200a      	movs	r0, #10
   d85c2:	f7fe fd63 	bl	d708c <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d85c6:	b008      	add	sp, #32
   d85c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d85cc:	000d6cbd 	.word	0x000d6cbd

000d85d0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d85d0:	b510      	push	{r4, lr}
   d85d2:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d85d4:	6840      	ldr	r0, [r0, #4]
   d85d6:	b108      	cbz	r0, d85dc <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d85d8:	f7fb fd5f 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d85dc:	4620      	mov	r0, r4
   d85de:	bd10      	pop	{r4, pc}

000d85e0 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d85e0:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d85e2:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d85e4:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d85e6:	e88d 0009 	stmia.w	sp, {r0, r3}
   d85ea:	4668      	mov	r0, sp
   d85ec:	f7ff fff0 	bl	d85d0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d85f0:	b003      	add	sp, #12
   d85f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d85f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d85f8:	b538      	push	{r3, r4, r5, lr}
   d85fa:	2300      	movs	r3, #0
   d85fc:	4604      	mov	r4, r0
   d85fe:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8600:	2014      	movs	r0, #20
   d8602:	460d      	mov	r5, r1
   d8604:	f7fb fd47 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8608:	b128      	cbz	r0, d8616 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d860a:	2301      	movs	r3, #1
   d860c:	6043      	str	r3, [r0, #4]
   d860e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8610:	4b02      	ldr	r3, [pc, #8]	; (d861c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d8612:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8614:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d8616:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d8618:	4620      	mov	r0, r4
   d861a:	bd38      	pop	{r3, r4, r5, pc}
   d861c:	000dbccc 	.word	0x000dbccc

000d8620 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d8620:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8622:	2600      	movs	r6, #0
   d8624:	b087      	sub	sp, #28
   d8626:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8628:	6046      	str	r6, [r0, #4]
   d862a:	4604      	mov	r4, r0
   d862c:	2018      	movs	r0, #24
   d862e:	460f      	mov	r7, r1
   d8630:	f7fb fd31 	bl	d4096 <_Znwj>
   d8634:	f8cd d010 	str.w	sp, [sp, #16]
   d8638:	4605      	mov	r5, r0
   d863a:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d863c:	b138      	cbz	r0, d864e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d863e:	f7ff f969 	bl	d7914 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d8642:	4639      	mov	r1, r7
   d8644:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d8646:	82ae      	strh	r6, [r5, #20]
   d8648:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d864a:	f7ff f9d3 	bl	d79f4 <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d864e:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8650:	4629      	mov	r1, r5
   d8652:	9305      	str	r3, [sp, #20]
   d8654:	aa02      	add	r2, sp, #8
   d8656:	ab01      	add	r3, sp, #4
   d8658:	a803      	add	r0, sp, #12
   d865a:	f7ff ffcd 	bl	d85f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d865e:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d8660:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8662:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8664:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8666:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8668:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d866a:	f7fb ffef 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d866e:	a804      	add	r0, sp, #16
   d8670:	f7ff ffae 	bl	d85d0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d8674:	6823      	ldr	r3, [r4, #0]
   d8676:	b90b      	cbnz	r3, d867c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d8678:	f7ff f8f0 	bl	d785c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d867c:	4620      	mov	r0, r4
   d867e:	b007      	add	sp, #28
   d8680:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d8684 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d8684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8688:	4617      	mov	r7, r2
   d868a:	b0a1      	sub	sp, #132	; 0x84
   d868c:	4680      	mov	r8, r0
    WiringBleLock lk;
   d868e:	a80a      	add	r0, sp, #40	; 0x28
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d8690:	460e      	mov	r6, r1
    WiringBleLock lk;
   d8692:	f7ff f913 	bl	d78bc <_ZN8particle3ble13WiringBleLockC1Ev>
   d8696:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d8698:	7923      	ldrb	r3, [r4, #4]
   d869a:	2b00      	cmp	r3, #0
   d869c:	f000 80de 	beq.w	d885c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d86a0:	6833      	ldr	r3, [r6, #0]
   d86a2:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d86a4:	691b      	ldr	r3, [r3, #16]
   d86a6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d86aa:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d86ac:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d86b0:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d86b4:	9b03      	ldr	r3, [sp, #12]
   d86b6:	42ab      	cmp	r3, r5
   d86b8:	d023      	beq.n	d8702 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d86ba:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d86be:	4650      	mov	r0, sl
   d86c0:	f109 0114 	add.w	r1, r9, #20
   d86c4:	f7ff f9b0 	bl	d7a28 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d86c8:	2800      	cmp	r0, #0
   d86ca:	f000 80cc 	beq.w	d8866 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d86ce:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d86d2:	4658      	mov	r0, fp
   d86d4:	f7ff f9a8 	bl	d7a28 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d86d8:	2800      	cmp	r0, #0
   d86da:	f000 80c4 	beq.w	d8866 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d86de:	6823      	ldr	r3, [r4, #0]
   d86e0:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d86e4:	f8d9 3000 	ldr.w	r3, [r9]
   d86e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d86ec:	4299      	cmp	r1, r3
   d86ee:	f040 80ba 	bne.w	d8866 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d86f2:	2320      	movs	r3, #32
   d86f4:	4a60      	ldr	r2, [pc, #384]	; (d8878 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d86f6:	9315      	str	r3, [sp, #84]	; 0x54
   d86f8:	2300      	movs	r3, #0
   d86fa:	9200      	str	r2, [sp, #0]
   d86fc:	9316      	str	r3, [sp, #88]	; 0x58
   d86fe:	aa15      	add	r2, sp, #84	; 0x54
   d8700:	e0a8      	b.n	d8854 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d8702:	f104 0928 	add.w	r9, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d8706:	4648      	mov	r0, r9
   d8708:	f7ff f940 	bl	d798c <_ZNK8particle7BleUuid7isValidEv>
   d870c:	b918      	cbnz	r0, d8716 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d870e:	495b      	ldr	r1, [pc, #364]	; (d887c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d8710:	4648      	mov	r0, r9
   d8712:	f7ff f97c 	bl	d7a0e <_ZN8particle7BleUuidaSEPKh>
   d8716:	6833      	ldr	r3, [r6, #0]
   d8718:	681d      	ldr	r5, [r3, #0]
   d871a:	685b      	ldr	r3, [r3, #4]
   d871c:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d8720:	4555      	cmp	r5, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d8722:	4649      	mov	r1, r9
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d8724:	d005      	beq.n	d8732 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d8726:	6828      	ldr	r0, [r5, #0]
   d8728:	f7ff f97e 	bl	d7a28 <_ZNK8particle7BleUuideqERKS0_>
   d872c:	bb58      	cbnz	r0, d8786 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x102>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d872e:	3508      	adds	r5, #8
   d8730:	e7f6      	b.n	d8720 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d8732:	a80b      	add	r0, sp, #44	; 0x2c
   d8734:	f7ff ff74 	bl	d8620 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d8738:	4649      	mov	r1, r9
   d873a:	a815      	add	r0, sp, #84	; 0x54
   d873c:	f7ff f938 	bl	d79b0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d8740:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d8742:	2300      	movs	r3, #0
   d8744:	3214      	adds	r2, #20
   d8746:	a915      	add	r1, sp, #84	; 0x54
   d8748:	2001      	movs	r0, #1
   d874a:	f7fe fb09 	bl	d6d60 <hal_ble_gatt_server_add_service>
   d874e:	2800      	cmp	r0, #0
   d8750:	d178      	bne.n	d8844 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d8752:	6835      	ldr	r5, [r6, #0]
   d8754:	a90b      	add	r1, sp, #44	; 0x2c
   d8756:	a80d      	add	r0, sp, #52	; 0x34
   d8758:	f7ff fbb6 	bl	d7ec8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d875c:	4628      	mov	r0, r5
   d875e:	a90d      	add	r1, sp, #52	; 0x34
   d8760:	f7ff fdef 	bl	d8342 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d8764:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8766:	a80e      	add	r0, sp, #56	; 0x38
   d8768:	f7fb ff70 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d876c:	2d00      	cmp	r5, #0
   d876e:	d069      	beq.n	d8844 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
   d8770:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d8772:	6855      	ldr	r5, [r2, #4]
   d8774:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
   d8778:	6815      	ldr	r5, [r2, #0]
   d877a:	3b01      	subs	r3, #1
   d877c:	a80c      	add	r0, sp, #48	; 0x30
   d877e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d8782:	f7fb ff63 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d8786:	f104 0914 	add.w	r9, r4, #20
   d878a:	4648      	mov	r0, r9
   d878c:	f7ff f8fe 	bl	d798c <_ZNK8particle7BleUuid7isValidEv>
   d8790:	b968      	cbnz	r0, d87ae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x12a>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d8792:	4b3b      	ldr	r3, [pc, #236]	; (d8880 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d8794:	4939      	ldr	r1, [pc, #228]	; (d887c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d8796:	881a      	ldrh	r2, [r3, #0]
   d8798:	3201      	adds	r2, #1
   d879a:	b292      	uxth	r2, r2
   d879c:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d879e:	a815      	add	r0, sp, #84	; 0x54
   d87a0:	2301      	movs	r3, #1
   d87a2:	f7ff f8e8 	bl	d7976 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d87a6:	a915      	add	r1, sp, #84	; 0x54
   d87a8:	4648      	mov	r0, r9
   d87aa:	f7ff f923 	bl	d79f4 <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d87ae:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d87b2:	4652      	mov	r2, sl
   d87b4:	2100      	movs	r1, #0
   d87b6:	a815      	add	r0, sp, #84	; 0x54
   d87b8:	f002 fac5 	bl	dad46 <memset>
    charInit.version = BLE_API_VERSION;
   d87bc:	2301      	movs	r3, #1
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d87be:	4649      	mov	r1, r9
   d87c0:	a804      	add	r0, sp, #16
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d87c2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    charInit.size = sizeof(hal_ble_char_init_t);
   d87c6:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    charInit.uuid = charImpl->charUUID().halUUID();
   d87ca:	f7ff f8f1 	bl	d79b0 <_ZN8particle7BleUuid7halUUIDEv>
   d87ce:	ab04      	add	r3, sp, #16
   d87d0:	aa18      	add	r2, sp, #96	; 0x60
   d87d2:	f10d 0c20 	add.w	ip, sp, #32
   d87d6:	6818      	ldr	r0, [r3, #0]
   d87d8:	6859      	ldr	r1, [r3, #4]
   d87da:	4696      	mov	lr, r2
   d87dc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d87e0:	3308      	adds	r3, #8
   d87e2:	4563      	cmp	r3, ip
   d87e4:	4672      	mov	r2, lr
   d87e6:	d1f6      	bne.n	d87d6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x152>
   d87e8:	6818      	ldr	r0, [r3, #0]
   d87ea:	f8ce 0000 	str.w	r0, [lr]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   d87ee:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   d87f0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d87f4:	682b      	ldr	r3, [r5, #0]
   d87f6:	8a9b      	ldrh	r3, [r3, #20]
   d87f8:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d87fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d87fe:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d8800:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d8802:	4b20      	ldr	r3, [pc, #128]	; (d8884 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
   d8804:	931e      	str	r3, [sp, #120]	; 0x78
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d8806:	1da1      	adds	r1, r4, #6
   d8808:	a815      	add	r0, sp, #84	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d880a:	941f      	str	r4, [sp, #124]	; 0x7c
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d880c:	f7fe fab2 	bl	d6d74 <hal_ble_gatt_server_add_characteristic>
   d8810:	bb20      	cbnz	r0, d885c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        return characteristic;
    }
    charImpl->local() = true;
   d8812:	2301      	movs	r3, #1
   d8814:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d8816:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d8818:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d881a:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d881c:	a80d      	add	r0, sp, #52	; 0x34
   d881e:	f7ff fb45 	bl	d7eac <_ZN8particle17BleCharacteristicC1ERKS0_>
   d8822:	4620      	mov	r0, r4
   d8824:	a90d      	add	r1, sp, #52	; 0x34
   d8826:	f7ff fdf9 	bl	d841c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d882a:	4604      	mov	r4, r0
   d882c:	a80e      	add	r0, sp, #56	; 0x38
   d882e:	f7fb ff0d 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8832:	b99c      	cbnz	r4, d885c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        LOG(ERROR, "Failed to append local characteristic.");
   d8834:	2320      	movs	r3, #32
   d8836:	930d      	str	r3, [sp, #52]	; 0x34
   d8838:	4b13      	ldr	r3, [pc, #76]	; (d8888 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d883a:	9300      	str	r3, [sp, #0]
   d883c:	940e      	str	r4, [sp, #56]	; 0x38
   d883e:	4623      	mov	r3, r4
   d8840:	aa0d      	add	r2, sp, #52	; 0x34
   d8842:	e007      	b.n	d8854 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d8844:	4639      	mov	r1, r7
   d8846:	4640      	mov	r0, r8
   d8848:	f7ff fb30 	bl	d7eac <_ZN8particle17BleCharacteristicC1ERKS0_>
   d884c:	a80c      	add	r0, sp, #48	; 0x30
   d884e:	f7fb fefd 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8852:	e00a      	b.n	d886a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d8854:	490d      	ldr	r1, [pc, #52]	; (d888c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
   d8856:	2032      	movs	r0, #50	; 0x32
   d8858:	f7fe fc20 	bl	d709c <log_message>
            return characteristic;
   d885c:	4639      	mov	r1, r7
   d885e:	4640      	mov	r0, r8
   d8860:	f7ff fb24 	bl	d7eac <_ZN8particle17BleCharacteristicC1ERKS0_>
   d8864:	e001      	b.n	d886a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
   d8866:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d8868:	e724      	b.n	d86b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d886a:	a80a      	add	r0, sp, #40	; 0x28
   d886c:	f7ff f834 	bl	d78d8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d8870:	4640      	mov	r0, r8
   d8872:	b021      	add	sp, #132	; 0x84
   d8874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8878:	000dbe81 	.word	0x000dbe81
   d887c:	000dbcfc 	.word	0x000dbcfc
   d8880:	2003e338 	.word	0x2003e338
   d8884:	000d7da9 	.word	0x000d7da9
   d8888:	000dbe5a 	.word	0x000dbe5a
   d888c:	000dbd0c 	.word	0x000dbd0c

000d8890 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8890:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8892:	4c06      	ldr	r4, [pc, #24]	; (d88ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8894:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d8896:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8898:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d889a:	f7fe fac7 	bl	d6e2c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d889e:	4620      	mov	r0, r4
   d88a0:	4a03      	ldr	r2, [pc, #12]	; (d88b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d88a2:	4904      	ldr	r1, [pc, #16]	; (d88b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d88a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d88a8:	f001 bfa4 	b.w	da7f4 <__aeabi_atexit>
   d88ac:	2003e33c 	.word	0x2003e33c
   d88b0:	2003d400 	.word	0x2003d400
   d88b4:	000d784b 	.word	0x000d784b

000d88b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d88b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d88ba:	4606      	mov	r6, r0
   d88bc:	460d      	mov	r5, r1
   d88be:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d88c0:	2400      	movs	r4, #0
  while (size--) {
   d88c2:	42bd      	cmp	r5, r7
   d88c4:	d00c      	beq.n	d88e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d88c6:	6833      	ldr	r3, [r6, #0]
   d88c8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d88cc:	689b      	ldr	r3, [r3, #8]
   d88ce:	4630      	mov	r0, r6
   d88d0:	4798      	blx	r3
     if (chunk>=0)
   d88d2:	2800      	cmp	r0, #0
   d88d4:	db01      	blt.n	d88da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d88d6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d88d8:	e7f3      	b.n	d88c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d88da:	2c00      	cmp	r4, #0
   d88dc:	bf08      	it	eq
   d88de:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d88e0:	4620      	mov	r0, r4
   d88e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d88e4 <_ZN5Print5printEPKc>:
   d88e4:	b508      	push	{r3, lr}
   d88e6:	f7fd fc69 	bl	d61bc <_ZN5Print5writeEPKc>
   d88ea:	bd08      	pop	{r3, pc}

000d88ec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d88ec:	6803      	ldr	r3, [r0, #0]
   d88ee:	689b      	ldr	r3, [r3, #8]
   d88f0:	4718      	bx	r3

000d88f2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d88f2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d88f4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d88f6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d88f8:	f7ff fff8 	bl	d88ec <_ZN5Print5printEc>
  n += print('\n');
   d88fc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d88fe:	4604      	mov	r4, r0
  n += print('\n');
   d8900:	4628      	mov	r0, r5
   d8902:	f7ff fff3 	bl	d88ec <_ZN5Print5printEc>
  return n;
}
   d8906:	4420      	add	r0, r4
   d8908:	bd38      	pop	{r3, r4, r5, pc}

000d890a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d890a:	b538      	push	{r3, r4, r5, lr}
   d890c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d890e:	f7fd fc55 	bl	d61bc <_ZN5Print5writeEPKc>
   d8912:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d8914:	4628      	mov	r0, r5
   d8916:	f7ff ffec 	bl	d88f2 <_ZN5Print7printlnEv>
  return n;
}
   d891a:	4420      	add	r0, r4
   d891c:	bd38      	pop	{r3, r4, r5, pc}

000d891e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d891e:	b530      	push	{r4, r5, lr}
   d8920:	b08b      	sub	sp, #44	; 0x2c
   d8922:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8924:	2100      	movs	r1, #0
   d8926:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d892a:	2a01      	cmp	r2, #1
   d892c:	bf98      	it	ls
   d892e:	220a      	movls	r2, #10
   d8930:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d8934:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d8938:	fb05 3312 	mls	r3, r5, r2, r3
   d893c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8940:	2b09      	cmp	r3, #9
   d8942:	bf94      	ite	ls
   d8944:	3330      	addls	r3, #48	; 0x30
   d8946:	3337      	addhi	r3, #55	; 0x37
   d8948:	b2db      	uxtb	r3, r3
   d894a:	4621      	mov	r1, r4
   d894c:	f804 3901 	strb.w	r3, [r4], #-1
   d8950:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d8952:	2d00      	cmp	r5, #0
   d8954:	d1ee      	bne.n	d8934 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d8956:	f7fd fc31 	bl	d61bc <_ZN5Print5writeEPKc>
}
   d895a:	b00b      	add	sp, #44	; 0x2c
   d895c:	bd30      	pop	{r4, r5, pc}

000d895e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d895e:	b40c      	push	{r2, r3}
   d8960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8964:	b087      	sub	sp, #28
   d8966:	af00      	add	r7, sp, #0
   d8968:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d896c:	4605      	mov	r5, r0
   d896e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d8972:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8974:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d8976:	4623      	mov	r3, r4
   d8978:	464a      	mov	r2, r9
   d897a:	2114      	movs	r1, #20
   d897c:	1d38      	adds	r0, r7, #4
   d897e:	f7fe fc93 	bl	d72a8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d8982:	2813      	cmp	r0, #19
   d8984:	d805      	bhi.n	d8992 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8986:	1d39      	adds	r1, r7, #4
   d8988:	4628      	mov	r0, r5
   d898a:	f7fd fc17 	bl	d61bc <_ZN5Print5writeEPKc>
   d898e:	4604      	mov	r4, r0
   d8990:	e013      	b.n	d89ba <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8992:	f100 0308 	add.w	r3, r0, #8
   d8996:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d899a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d899c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d89a0:	1c41      	adds	r1, r0, #1
   d89a2:	4623      	mov	r3, r4
   d89a4:	464a      	mov	r2, r9
   d89a6:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d89a8:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d89aa:	f7fe fc7d 	bl	d72a8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d89ae:	4669      	mov	r1, sp
   d89b0:	4628      	mov	r0, r5
   d89b2:	f7fd fc03 	bl	d61bc <_ZN5Print5writeEPKc>
   d89b6:	4604      	mov	r4, r0
   d89b8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d89ba:	b11e      	cbz	r6, d89c4 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d89bc:	4628      	mov	r0, r5
   d89be:	f7ff ff98 	bl	d88f2 <_ZN5Print7printlnEv>
   d89c2:	4404      	add	r4, r0
    return n;
}
   d89c4:	4620      	mov	r0, r4
   d89c6:	371c      	adds	r7, #28
   d89c8:	46bd      	mov	sp, r7
   d89ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d89ce:	b002      	add	sp, #8
   d89d0:	4770      	bx	lr

000d89d2 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d89d2:	6880      	ldr	r0, [r0, #8]
   d89d4:	6803      	ldr	r3, [r0, #0]
   d89d6:	68db      	ldr	r3, [r3, #12]
   d89d8:	4718      	bx	r3

000d89da <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d89da:	4770      	bx	lr

000d89dc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d89dc:	b119      	cbz	r1, d89e6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d89de:	680b      	ldr	r3, [r1, #0]
   d89e0:	4608      	mov	r0, r1
   d89e2:	685b      	ldr	r3, [r3, #4]
   d89e4:	4718      	bx	r3
   d89e6:	4770      	bx	lr

000d89e8 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d89e8:	b119      	cbz	r1, d89f2 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d89ea:	680b      	ldr	r3, [r1, #0]
   d89ec:	4608      	mov	r0, r1
   d89ee:	685b      	ldr	r3, [r3, #4]
   d89f0:	4718      	bx	r3
   d89f2:	4770      	bx	lr

000d89f4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d89f4:	4770      	bx	lr

000d89f6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d89f6:	4770      	bx	lr

000d89f8 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d89f8:	4770      	bx	lr

000d89fa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d89fa:	b538      	push	{r3, r4, r5, lr}
   d89fc:	4604      	mov	r4, r0
   d89fe:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d8a00:	6800      	ldr	r0, [r0, #0]
   d8a02:	212e      	movs	r1, #46	; 0x2e
   d8a04:	f002 f9ed 	bl	dade2 <strchrnul>
    size = s - category;
   d8a08:	6823      	ldr	r3, [r4, #0]
   d8a0a:	1ac3      	subs	r3, r0, r3
   d8a0c:	602b      	str	r3, [r5, #0]
    if (size) {
   d8a0e:	b123      	cbz	r3, d8a1a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d8a10:	7803      	ldrb	r3, [r0, #0]
   d8a12:	b103      	cbz	r3, d8a16 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d8a14:	3001      	adds	r0, #1
   d8a16:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8a18:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d8a1a:	4618      	mov	r0, r3
}
   d8a1c:	bd38      	pop	{r3, r4, r5, pc}

000d8a1e <_ZN5spark16JSONStreamWriterD0Ev>:
   d8a1e:	b510      	push	{r4, lr}
   d8a20:	210c      	movs	r1, #12
   d8a22:	4604      	mov	r4, r0
   d8a24:	f001 fef4 	bl	da810 <_ZdlPvj>
   d8a28:	4620      	mov	r0, r4
   d8a2a:	bd10      	pop	{r4, pc}

000d8a2c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d8a2c:	b510      	push	{r4, lr}
   d8a2e:	2104      	movs	r1, #4
   d8a30:	4604      	mov	r4, r0
   d8a32:	f001 feed 	bl	da810 <_ZdlPvj>
   d8a36:	4620      	mov	r0, r4
   d8a38:	bd10      	pop	{r4, pc}

000d8a3a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8a3a:	b510      	push	{r4, lr}
   d8a3c:	2104      	movs	r1, #4
   d8a3e:	4604      	mov	r4, r0
   d8a40:	f001 fee6 	bl	da810 <_ZdlPvj>
   d8a44:	4620      	mov	r0, r4
   d8a46:	bd10      	pop	{r4, pc}

000d8a48 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d8a48:	b538      	push	{r3, r4, r5, lr}
   d8a4a:	460c      	mov	r4, r1
   d8a4c:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d8a4e:	f001 f9b5 	bl	d9dbc <_Z16_fetch_usbserialv>
   d8a52:	4284      	cmp	r4, r0
   d8a54:	d00d      	beq.n	d8a72 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d8a56:	f001 fa89 	bl	d9f6c <_Z22__fetch_global_Serial1v>
   d8a5a:	4284      	cmp	r4, r0
   d8a5c:	d105      	bne.n	d8a6a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d8a5e:	f001 fa85 	bl	d9f6c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d8a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d8a66:	f001 ba7a 	b.w	d9f5e <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d8a6a:	4621      	mov	r1, r4
   d8a6c:	4628      	mov	r0, r5
   d8a6e:	f7ff ffbb 	bl	d89e8 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d8a72:	bd38      	pop	{r3, r4, r5, pc}

000d8a74 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d8a74:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d8a76:	f002 f9be 	bl	dadf6 <strcmp>
}
   d8a7a:	fab0 f080 	clz	r0, r0
   d8a7e:	0940      	lsrs	r0, r0, #5
   d8a80:	bd08      	pop	{r3, pc}

000d8a82 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d8a82:	b538      	push	{r3, r4, r5, lr}
   d8a84:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d8a86:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d8a88:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d8a8a:	f002 f9c6 	bl	dae1a <strlen>
   d8a8e:	4621      	mov	r1, r4
   d8a90:	4602      	mov	r2, r0
   d8a92:	4628      	mov	r0, r5
}
   d8a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d8a98:	f001 bda9 	b.w	da5ee <_ZN5spark10JSONWriter5valueEPKcj>

000d8a9c <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d8a9c:	6800      	ldr	r0, [r0, #0]
   d8a9e:	f7fe b9d5 	b.w	d6e4c <os_mutex_recursive_lock>

000d8aa2 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d8aa2:	b570      	push	{r4, r5, r6, lr}
   d8aa4:	4604      	mov	r4, r0
    write(str, strlen(str));
   d8aa6:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d8aa8:	460d      	mov	r5, r1
    write(str, strlen(str));
   d8aaa:	f002 f9b6 	bl	dae1a <strlen>
   d8aae:	6823      	ldr	r3, [r4, #0]
   d8ab0:	4602      	mov	r2, r0
   d8ab2:	4629      	mov	r1, r5
   d8ab4:	4620      	mov	r0, r4
   d8ab6:	68db      	ldr	r3, [r3, #12]
}
   d8ab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d8abc:	4718      	bx	r3

000d8abe <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d8abe:	b513      	push	{r0, r1, r4, lr}
   d8ac0:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d8ac2:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d8ac4:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d8ac8:	68d4      	ldr	r4, [r2, #12]
   d8aca:	4619      	mov	r1, r3
   d8acc:	2201      	movs	r2, #1
   d8ace:	47a0      	blx	r4
}
   d8ad0:	b002      	add	sp, #8
   d8ad2:	bd10      	pop	{r4, pc}

000d8ad4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d8ad8:	6845      	ldr	r5, [r0, #4]
   d8ada:	6807      	ldr	r7, [r0, #0]
   d8adc:	b085      	sub	sp, #20
   d8ade:	4691      	mov	r9, r2
   d8ae0:	2214      	movs	r2, #20
   d8ae2:	4355      	muls	r5, r2
   d8ae4:	9301      	str	r3, [sp, #4]
   d8ae6:	10ab      	asrs	r3, r5, #2
   d8ae8:	4d19      	ldr	r5, [pc, #100]	; (d8b50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d8aea:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d8aec:	435d      	muls	r5, r3
   d8aee:	468b      	mov	fp, r1
   d8af0:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d8af2:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d8af4:	2d00      	cmp	r5, #0
   d8af6:	9303      	str	r3, [sp, #12]
   d8af8:	dd23      	ble.n	d8b42 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d8afa:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d8afc:	106e      	asrs	r6, r5, #1
   d8afe:	fb03 f006 	mul.w	r0, r3, r6
   d8b02:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d8b06:	464a      	mov	r2, r9
   d8b08:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d8b0c:	5820      	ldr	r0, [r4, r0]
   d8b0e:	45d1      	cmp	r9, sl
   d8b10:	bf28      	it	cs
   d8b12:	4652      	movcs	r2, sl
   d8b14:	4659      	mov	r1, fp
   d8b16:	f002 f988 	bl	dae2a <strncmp>
                if (cmp == 0) {
   d8b1a:	9b03      	ldr	r3, [sp, #12]
   d8b1c:	b948      	cbnz	r0, d8b32 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d8b1e:	45d1      	cmp	r9, sl
   d8b20:	d103      	bne.n	d8b2a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d8b22:	9a01      	ldr	r2, [sp, #4]
   d8b24:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8b26:	4635      	mov	r5, r6
   d8b28:	e7e4      	b.n	d8af4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d8b2a:	bf8c      	ite	hi
   d8b2c:	2001      	movhi	r0, #1
   d8b2e:	2000      	movls	r0, #0
   d8b30:	e000      	b.n	d8b34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d8b32:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d8b34:	2800      	cmp	r0, #0
   d8b36:	d0f6      	beq.n	d8b26 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d8b38:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d8b3a:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d8b3e:	3e01      	subs	r6, #1
   d8b40:	e7f1      	b.n	d8b26 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d8b42:	1be4      	subs	r4, r4, r7
}
   d8b44:	4802      	ldr	r0, [pc, #8]	; (d8b50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d8b46:	10a4      	asrs	r4, r4, #2
}
   d8b48:	4360      	muls	r0, r4
   d8b4a:	b005      	add	sp, #20
   d8b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8b50:	cccccccd 	.word	0xcccccccd

000d8b54 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8b56:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d8b58:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8b5a:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d8b5c:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d8b5e:	b313      	cbz	r3, d8ba6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d8b60:	b309      	cbz	r1, d8ba6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d8b62:	af04      	add	r7, sp, #16
   d8b64:	2300      	movs	r3, #0
   d8b66:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d8b6a:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d8b6e:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d8b70:	4639      	mov	r1, r7
   d8b72:	a801      	add	r0, sp, #4
   d8b74:	f7ff ff41 	bl	d89fa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d8b78:	4601      	mov	r1, r0
   d8b7a:	b1a0      	cbz	r0, d8ba6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d8b7c:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d8b7e:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d8b80:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d8b84:	4620      	mov	r0, r4
   d8b86:	f7ff ffa5 	bl	d8ad4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d8b8a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d8b8e:	b153      	cbz	r3, d8ba6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d8b90:	6823      	ldr	r3, [r4, #0]
   d8b92:	2414      	movs	r4, #20
   d8b94:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d8b98:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d8b9a:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d8b9e:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d8ba0:	bfa8      	it	ge
   d8ba2:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d8ba4:	e7e4      	b.n	d8b70 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d8ba6:	4630      	mov	r0, r6
   d8ba8:	b005      	add	sp, #20
   d8baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8bac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d8bac:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d8bae:	4c09      	ldr	r4, [pc, #36]	; (d8bd4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d8bb0:	6823      	ldr	r3, [r4, #0]
   d8bb2:	07db      	lsls	r3, r3, #31
   d8bb4:	d40b      	bmi.n	d8bce <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8bb6:	4620      	mov	r0, r4
   d8bb8:	f7fb fa7e 	bl	d40b8 <__cxa_guard_acquire>
   d8bbc:	b138      	cbz	r0, d8bce <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8bbe:	4620      	mov	r0, r4
   d8bc0:	f7fb fa7f 	bl	d40c2 <__cxa_guard_release>
   d8bc4:	4a04      	ldr	r2, [pc, #16]	; (d8bd8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d8bc6:	4905      	ldr	r1, [pc, #20]	; (d8bdc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d8bc8:	4805      	ldr	r0, [pc, #20]	; (d8be0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d8bca:	f001 fe13 	bl	da7f4 <__aeabi_atexit>
    return &factory;
}
   d8bce:	4804      	ldr	r0, [pc, #16]	; (d8be0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d8bd0:	bd10      	pop	{r4, pc}
   d8bd2:	bf00      	nop
   d8bd4:	2003e340 	.word	0x2003e340
   d8bd8:	2003d400 	.word	0x2003d400
   d8bdc:	000d89f7 	.word	0x000d89f7
   d8be0:	2003d344 	.word	0x2003d344

000d8be4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d8be4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d8be6:	4c09      	ldr	r4, [pc, #36]	; (d8c0c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d8be8:	6823      	ldr	r3, [r4, #0]
   d8bea:	07db      	lsls	r3, r3, #31
   d8bec:	d40b      	bmi.n	d8c06 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8bee:	4620      	mov	r0, r4
   d8bf0:	f7fb fa62 	bl	d40b8 <__cxa_guard_acquire>
   d8bf4:	b138      	cbz	r0, d8c06 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8bf6:	4620      	mov	r0, r4
   d8bf8:	f7fb fa63 	bl	d40c2 <__cxa_guard_release>
   d8bfc:	4a04      	ldr	r2, [pc, #16]	; (d8c10 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d8bfe:	4905      	ldr	r1, [pc, #20]	; (d8c14 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d8c00:	4805      	ldr	r0, [pc, #20]	; (d8c18 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d8c02:	f001 fdf7 	bl	da7f4 <__aeabi_atexit>
    return &factory;
}
   d8c06:	4804      	ldr	r0, [pc, #16]	; (d8c18 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d8c08:	bd10      	pop	{r4, pc}
   d8c0a:	bf00      	nop
   d8c0c:	2003e370 	.word	0x2003e370
   d8c10:	2003d400 	.word	0x2003d400
   d8c14:	000d89f5 	.word	0x000d89f5
   d8c18:	2003d340 	.word	0x2003d340

000d8c1c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d8c1c:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8c1e:	2500      	movs	r5, #0
   d8c20:	4604      	mov	r4, r0
   d8c22:	6005      	str	r5, [r0, #0]
   d8c24:	6045      	str	r5, [r0, #4]
   d8c26:	6085      	str	r5, [r0, #8]
   d8c28:	6105      	str	r5, [r0, #16]
   d8c2a:	6145      	str	r5, [r0, #20]
   d8c2c:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8c2e:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d8c32:	f7fe f8fb 	bl	d6e2c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d8c36:	f7ff ffb9 	bl	d8bac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d8c3a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d8c3c:	f7ff ffd2 	bl	d8be4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d8c40:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d8c42:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d8c44:	4620      	mov	r0, r4
   d8c46:	bd38      	pop	{r3, r4, r5, pc}

000d8c48 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d8c48:	b510      	push	{r4, lr}
    static LogManager mgr;
   d8c4a:	4c0a      	ldr	r4, [pc, #40]	; (d8c74 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d8c4c:	6823      	ldr	r3, [r4, #0]
   d8c4e:	07db      	lsls	r3, r3, #31
   d8c50:	d40e      	bmi.n	d8c70 <_ZN5spark10LogManager8instanceEv+0x28>
   d8c52:	4620      	mov	r0, r4
   d8c54:	f7fb fa30 	bl	d40b8 <__cxa_guard_acquire>
   d8c58:	b150      	cbz	r0, d8c70 <_ZN5spark10LogManager8instanceEv+0x28>
   d8c5a:	4807      	ldr	r0, [pc, #28]	; (d8c78 <_ZN5spark10LogManager8instanceEv+0x30>)
   d8c5c:	f7ff ffde 	bl	d8c1c <_ZN5spark10LogManagerC1Ev>
   d8c60:	4620      	mov	r0, r4
   d8c62:	f7fb fa2e 	bl	d40c2 <__cxa_guard_release>
   d8c66:	4a05      	ldr	r2, [pc, #20]	; (d8c7c <_ZN5spark10LogManager8instanceEv+0x34>)
   d8c68:	4905      	ldr	r1, [pc, #20]	; (d8c80 <_ZN5spark10LogManager8instanceEv+0x38>)
   d8c6a:	4803      	ldr	r0, [pc, #12]	; (d8c78 <_ZN5spark10LogManager8instanceEv+0x30>)
   d8c6c:	f001 fdc2 	bl	da7f4 <__aeabi_atexit>
    return &mgr;
}
   d8c70:	4801      	ldr	r0, [pc, #4]	; (d8c78 <_ZN5spark10LogManager8instanceEv+0x30>)
   d8c72:	bd10      	pop	{r4, pc}
   d8c74:	2003e344 	.word	0x2003e344
   d8c78:	2003e348 	.word	0x2003e348
   d8c7c:	2003d400 	.word	0x2003d400
   d8c80:	000d90b3 	.word	0x000d90b3

000d8c84 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d8c84:	2300      	movs	r3, #0
   d8c86:	4a02      	ldr	r2, [pc, #8]	; (d8c90 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d8c88:	4902      	ldr	r1, [pc, #8]	; (d8c94 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d8c8a:	4803      	ldr	r0, [pc, #12]	; (d8c98 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d8c8c:	f7fe ba16 	b.w	d70bc <log_set_callbacks>
   d8c90:	000d8f95 	.word	0x000d8f95
   d8c94:	000d8f25 	.word	0x000d8f25
   d8c98:	000d8ead 	.word	0x000d8ead

000d8c9c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d8c9c:	2300      	movs	r3, #0
   d8c9e:	461a      	mov	r2, r3
   d8ca0:	4619      	mov	r1, r3
   d8ca2:	4618      	mov	r0, r3
   d8ca4:	f7fe ba0a 	b.w	d70bc <log_set_callbacks>

000d8ca8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d8ca8:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8caa:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d8cac:	688e      	ldr	r6, [r1, #8]
   d8cae:	f851 3b04 	ldr.w	r3, [r1], #4
   d8cb2:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d8cb6:	4605      	mov	r5, r0
   d8cb8:	a801      	add	r0, sp, #4
   d8cba:	f7ff f8f0 	bl	d7e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d8cbe:	4622      	mov	r2, r4
   d8cc0:	4631      	mov	r1, r6
   d8cc2:	4628      	mov	r0, r5
   d8cc4:	f001 fcca 	bl	da65c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8cc8:	a801      	add	r0, sp, #4
   d8cca:	f7fb fcbf 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8cce:	4628      	mov	r0, r5
   d8cd0:	b002      	add	sp, #8
   d8cd2:	bd70      	pop	{r4, r5, r6, pc}

000d8cd4 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d8cd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8cd6:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d8cd8:	690e      	ldr	r6, [r1, #16]
   d8cda:	f851 3b04 	ldr.w	r3, [r1], #4
   d8cde:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d8ce2:	4605      	mov	r5, r0
   d8ce4:	a801      	add	r0, sp, #4
   d8ce6:	f7ff f8da 	bl	d7e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d8cea:	4622      	mov	r2, r4
   d8cec:	4631      	mov	r1, r6
   d8cee:	4628      	mov	r0, r5
   d8cf0:	f001 fccf 	bl	da692 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8cf4:	a801      	add	r0, sp, #4
   d8cf6:	f7fb fca9 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8cfa:	4628      	mov	r0, r5
   d8cfc:	b002      	add	sp, #8
   d8cfe:	bd70      	pop	{r4, r5, r6, pc}

000d8d00 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d8d00:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8d02:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d8d04:	68ce      	ldr	r6, [r1, #12]
   d8d06:	f851 3b04 	ldr.w	r3, [r1], #4
   d8d0a:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d8d0e:	4605      	mov	r5, r0
   d8d10:	a801      	add	r0, sp, #4
   d8d12:	f7ff f8c4 	bl	d7e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d8d16:	4622      	mov	r2, r4
   d8d18:	4631      	mov	r1, r6
   d8d1a:	4628      	mov	r0, r5
   d8d1c:	f001 fc76 	bl	da60c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8d20:	a801      	add	r0, sp, #4
   d8d22:	f7fb fc93 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8d26:	4628      	mov	r0, r5
   d8d28:	b002      	add	sp, #8
   d8d2a:	bd70      	pop	{r4, r5, r6, pc}

000d8d2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d8d2c:	b530      	push	{r4, r5, lr}
   d8d2e:	b08b      	sub	sp, #44	; 0x2c
   d8d30:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d8d32:	4601      	mov	r1, r0
   d8d34:	a804      	add	r0, sp, #16
   d8d36:	f7ff ffb7 	bl	d8ca8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d8d3a:	a804      	add	r0, sp, #16
   d8d3c:	f001 fb99 	bl	da472 <_ZN5spark18JSONObjectIterator4nextEv>
   d8d40:	b1e8      	cbz	r0, d8d7e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d8d42:	a904      	add	r1, sp, #16
   d8d44:	4668      	mov	r0, sp
   d8d46:	f7ff ffdb 	bl	d8d00 <_ZNK5spark18JSONObjectIterator4nameEv>
   d8d4a:	490f      	ldr	r1, [pc, #60]	; (d8d88 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d8d4c:	9802      	ldr	r0, [sp, #8]
   d8d4e:	f7ff fe91 	bl	d8a74 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d8d52:	4604      	mov	r4, r0
   d8d54:	b110      	cbz	r0, d8d5c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d8d56:	1c2c      	adds	r4, r5, #0
   d8d58:	bf18      	it	ne
   d8d5a:	2401      	movne	r4, #1
   d8d5c:	a801      	add	r0, sp, #4
   d8d5e:	f7fb fc75 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8d62:	2c00      	cmp	r4, #0
   d8d64:	d0e9      	beq.n	d8d3a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d8d66:	a904      	add	r1, sp, #16
   d8d68:	4668      	mov	r0, sp
   d8d6a:	f7ff ffb3 	bl	d8cd4 <_ZNK5spark18JSONObjectIterator5valueEv>
   d8d6e:	4668      	mov	r0, sp
   d8d70:	f001 fb5f 	bl	da432 <_ZNK5spark9JSONValue5toIntEv>
   d8d74:	6028      	str	r0, [r5, #0]
   d8d76:	a801      	add	r0, sp, #4
   d8d78:	f7fb fc68 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8d7c:	e7dd      	b.n	d8d3a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d8d7e:	a805      	add	r0, sp, #20
   d8d80:	f7fb fc64 	bl	d464c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d8d84:	b00b      	add	sp, #44	; 0x2c
   d8d86:	bd30      	pop	{r4, r5, pc}
   d8d88:	000dbeec 	.word	0x000dbeec

000d8d8c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8d8e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d8d90:	4620      	mov	r0, r4
   d8d92:	4913      	ldr	r1, [pc, #76]	; (d8de0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8d94:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d8d96:	f002 f82e 	bl	dadf6 <strcmp>
   d8d9a:	b940      	cbnz	r0, d8dae <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d8d9c:	f001 f80e 	bl	d9dbc <_Z16_fetch_usbserialv>
   d8da0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d8da4:	f000 fffa 	bl	d9d9c <_ZN9USBSerial5beginEl>
        return &Serial;
   d8da8:	f001 f808 	bl	d9dbc <_Z16_fetch_usbserialv>
   d8dac:	e015      	b.n	d8dda <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d8dae:	490d      	ldr	r1, [pc, #52]	; (d8de4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d8db0:	4620      	mov	r0, r4
   d8db2:	f002 f820 	bl	dadf6 <strcmp>
   d8db6:	b978      	cbnz	r0, d8dd8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d8db8:	a902      	add	r1, sp, #8
   d8dba:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d8dbe:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d8dc2:	4628      	mov	r0, r5
   d8dc4:	f7ff ffb2 	bl	d8d2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d8dc8:	f001 f8d0 	bl	d9f6c <_Z22__fetch_global_Serial1v>
   d8dcc:	9901      	ldr	r1, [sp, #4]
   d8dce:	f001 f8c3 	bl	d9f58 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d8dd2:	f001 f8cb 	bl	d9f6c <_Z22__fetch_global_Serial1v>
   d8dd6:	e000      	b.n	d8dda <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d8dd8:	2000      	movs	r0, #0
}
   d8dda:	b003      	add	sp, #12
   d8ddc:	bd30      	pop	{r4, r5, pc}
   d8dde:	bf00      	nop
   d8de0:	000dbef1 	.word	0x000dbef1
   d8de4:	000dbef8 	.word	0x000dbef8

000d8de8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8de8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8dea:	6804      	ldr	r4, [r0, #0]
   d8dec:	6843      	ldr	r3, [r0, #4]
   d8dee:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8df0:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d8df2:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8df6:	42a6      	cmp	r6, r4
   d8df8:	d005      	beq.n	d8e06 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d8dfa:	f104 0008 	add.w	r0, r4, #8
   d8dfe:	f7ff fff3 	bl	d8de8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8e02:	3414      	adds	r4, #20
   d8e04:	e7f7      	b.n	d8df6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8e06:	6828      	ldr	r0, [r5, #0]
   d8e08:	f7fe fa26 	bl	d7258 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d8e0c:	4628      	mov	r0, r5
   d8e0e:	bd70      	pop	{r4, r5, r6, pc}

000d8e10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8e10:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8e12:	6804      	ldr	r4, [r0, #0]
   d8e14:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8e16:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d8e18:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8e1c:	42a6      	cmp	r6, r4
   d8e1e:	d004      	beq.n	d8e2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d8e20:	4620      	mov	r0, r4
   d8e22:	f7fe fc69 	bl	d76f8 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8e26:	3410      	adds	r4, #16
   d8e28:	e7f8      	b.n	d8e1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8e2a:	6828      	ldr	r0, [r5, #0]
   d8e2c:	f7fe fa14 	bl	d7258 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d8e30:	4628      	mov	r0, r5
   d8e32:	bd70      	pop	{r4, r5, r6, pc}

000d8e34 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d8e34:	b510      	push	{r4, lr}
   d8e36:	4604      	mov	r4, r0
   d8e38:	300c      	adds	r0, #12
   d8e3a:	f7ff ffd5 	bl	d8de8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8e3e:	4620      	mov	r0, r4
   d8e40:	f7ff ffe6 	bl	d8e10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d8e44:	4620      	mov	r0, r4
   d8e46:	bd10      	pop	{r4, pc}

000d8e48 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d8e48:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d8e4a:	4b04      	ldr	r3, [pc, #16]	; (d8e5c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d8e4c:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d8e4e:	f840 3b04 	str.w	r3, [r0], #4
   d8e52:	f7ff ffef 	bl	d8e34 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d8e56:	4620      	mov	r0, r4
   d8e58:	bd10      	pop	{r4, pc}
   d8e5a:	bf00      	nop
   d8e5c:	000db724 	.word	0x000db724

000d8e60 <_ZN5spark16StreamLogHandlerD0Ev>:
   d8e60:	b510      	push	{r4, lr}
   d8e62:	4604      	mov	r4, r0
   d8e64:	f7ff fff0 	bl	d8e48 <_ZN5spark16StreamLogHandlerD1Ev>
   d8e68:	4620      	mov	r0, r4
   d8e6a:	2124      	movs	r1, #36	; 0x24
   d8e6c:	f001 fcd0 	bl	da810 <_ZdlPvj>
   d8e70:	4620      	mov	r0, r4
   d8e72:	bd10      	pop	{r4, pc}

000d8e74 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d8e74:	b510      	push	{r4, lr}
   d8e76:	4b03      	ldr	r3, [pc, #12]	; (d8e84 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d8e78:	6003      	str	r3, [r0, #0]
   d8e7a:	4604      	mov	r4, r0
   d8e7c:	f7ff ffe4 	bl	d8e48 <_ZN5spark16StreamLogHandlerD1Ev>
   d8e80:	4620      	mov	r0, r4
   d8e82:	bd10      	pop	{r4, pc}
   d8e84:	000dbedc 	.word	0x000dbedc

000d8e88 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d8e88:	b510      	push	{r4, lr}
   d8e8a:	4604      	mov	r4, r0
   d8e8c:	f7ff fff2 	bl	d8e74 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d8e90:	4620      	mov	r0, r4
   d8e92:	2124      	movs	r1, #36	; 0x24
   d8e94:	f001 fcbc 	bl	da810 <_ZdlPvj>
   d8e98:	4620      	mov	r0, r4
   d8e9a:	bd10      	pop	{r4, pc}

000d8e9c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d8e9c:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d8e9e:	6803      	ldr	r3, [r0, #0]
   d8ea0:	4604      	mov	r4, r0
   d8ea2:	6818      	ldr	r0, [r3, #0]
   d8ea4:	f7fd ffda 	bl	d6e5c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d8ea8:	4620      	mov	r0, r4
   d8eaa:	bd10      	pop	{r4, pc}

000d8eac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d8eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8eb0:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d8eb2:	4b1b      	ldr	r3, [pc, #108]	; (d8f20 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d8eb4:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d8eba:	b085      	sub	sp, #20
   d8ebc:	4682      	mov	sl, r0
   d8ebe:	460e      	mov	r6, r1
   d8ec0:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8ec2:	bb53      	cbnz	r3, d8f1a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d8ec4:	f7ff fec0 	bl	d8c48 <_ZN5spark10LogManager8instanceEv>
   d8ec8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d8eca:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8ecc:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d8ece:	f7ff fde5 	bl	d8a9c <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d8ed2:	7b23      	ldrb	r3, [r4, #12]
   d8ed4:	b9f3      	cbnz	r3, d8f14 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d8ed6:	2301      	movs	r3, #1
   d8ed8:	7323      	strb	r3, [r4, #12]
   d8eda:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8edc:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d8ede:	b2f6      	uxtb	r6, r6
   d8ee0:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d8ee4:	454d      	cmp	r5, r9
   d8ee6:	d013      	beq.n	d8f10 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d8ee8:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d8eec:	4641      	mov	r1, r8
   d8eee:	1d38      	adds	r0, r7, #4
   d8ef0:	f7ff fe30 	bl	d8b54 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d8ef4:	4286      	cmp	r6, r0
   d8ef6:	d3f5      	bcc.n	d8ee4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d8ef8:	683b      	ldr	r3, [r7, #0]
   d8efa:	f8cd b000 	str.w	fp, [sp]
   d8efe:	689b      	ldr	r3, [r3, #8]
   d8f00:	469e      	mov	lr, r3
   d8f02:	4638      	mov	r0, r7
   d8f04:	4643      	mov	r3, r8
   d8f06:	4632      	mov	r2, r6
   d8f08:	4651      	mov	r1, sl
   d8f0a:	4677      	mov	r7, lr
   d8f0c:	47b8      	blx	r7
   d8f0e:	e7e9      	b.n	d8ee4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d8f10:	2300      	movs	r3, #0
   d8f12:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d8f14:	a803      	add	r0, sp, #12
   d8f16:	f7ff ffc1 	bl	d8e9c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d8f1a:	b005      	add	sp, #20
   d8f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8f20:	e000ed00 	.word	0xe000ed00

000d8f24 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d8f24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8f28:	4699      	mov	r9, r3
   d8f2a:	4b19      	ldr	r3, [pc, #100]	; (d8f90 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d8f2c:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d8f32:	4607      	mov	r7, r0
   d8f34:	4688      	mov	r8, r1
   d8f36:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8f38:	bb33      	cbnz	r3, d8f88 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d8f3a:	f7ff fe85 	bl	d8c48 <_ZN5spark10LogManager8instanceEv>
   d8f3e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d8f40:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8f42:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d8f44:	f7ff fdaa 	bl	d8a9c <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d8f48:	7b23      	ldrb	r3, [r4, #12]
   d8f4a:	b9d3      	cbnz	r3, d8f82 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d8f4c:	2301      	movs	r3, #1
   d8f4e:	7323      	strb	r3, [r4, #12]
   d8f50:	6825      	ldr	r5, [r4, #0]
   d8f52:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d8f54:	fa5f fb86 	uxtb.w	fp, r6
   d8f58:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d8f5c:	4555      	cmp	r5, sl
   d8f5e:	d00e      	beq.n	d8f7e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d8f60:	f855 6b04 	ldr.w	r6, [r5], #4
   d8f64:	4649      	mov	r1, r9
   d8f66:	1d30      	adds	r0, r6, #4
   d8f68:	f7ff fdf4 	bl	d8b54 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d8f6c:	4583      	cmp	fp, r0
   d8f6e:	d3f5      	bcc.n	d8f5c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d8f70:	6833      	ldr	r3, [r6, #0]
   d8f72:	4642      	mov	r2, r8
   d8f74:	68db      	ldr	r3, [r3, #12]
   d8f76:	4639      	mov	r1, r7
   d8f78:	4630      	mov	r0, r6
   d8f7a:	4798      	blx	r3
   d8f7c:	e7ee      	b.n	d8f5c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d8f7e:	2300      	movs	r3, #0
   d8f80:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d8f82:	a801      	add	r0, sp, #4
   d8f84:	f7ff ff8a 	bl	d8e9c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d8f88:	b003      	add	sp, #12
   d8f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8f8e:	bf00      	nop
   d8f90:	e000ed00 	.word	0xe000ed00

000d8f94 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d8f94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8f98:	4b15      	ldr	r3, [pc, #84]	; (d8ff0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d8f9a:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d8fa0:	4604      	mov	r4, r0
   d8fa2:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8fa4:	b9fb      	cbnz	r3, d8fe6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d8fa6:	f7ff fe4f 	bl	d8c48 <_ZN5spark10LogManager8instanceEv>
   d8faa:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d8fac:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8fae:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d8fb0:	f7ff fd74 	bl	d8a9c <_ZN14RecursiveMutex4lockEv>
   d8fb4:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d8fb8:	2646      	movs	r6, #70	; 0x46
   d8fba:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d8fbe:	42af      	cmp	r7, r5
   d8fc0:	d107      	bne.n	d8fd2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d8fc2:	a801      	add	r0, sp, #4
   d8fc4:	f7ff ff6a 	bl	d8e9c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d8fc8:	42b4      	cmp	r4, r6
   d8fca:	bfb4      	ite	lt
   d8fcc:	2000      	movlt	r0, #0
   d8fce:	2001      	movge	r0, #1
   d8fd0:	e00a      	b.n	d8fe8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d8fd2:	f855 0b04 	ldr.w	r0, [r5], #4
   d8fd6:	4641      	mov	r1, r8
   d8fd8:	3004      	adds	r0, #4
   d8fda:	f7ff fdbb 	bl	d8b54 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d8fde:	4286      	cmp	r6, r0
   d8fe0:	bfa8      	it	ge
   d8fe2:	4606      	movge	r6, r0
   d8fe4:	e7eb      	b.n	d8fbe <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d8fe6:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d8fe8:	b002      	add	sp, #8
   d8fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8fee:	bf00      	nop
   d8ff0:	e000ed00 	.word	0xe000ed00

000d8ff4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8ff4:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d8ff6:	6803      	ldr	r3, [r0, #0]
   d8ff8:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8ffa:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d8ffc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d9000:	429a      	cmp	r2, r3
   d9002:	4618      	mov	r0, r3
   d9004:	d00e      	beq.n	d9024 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d9006:	6806      	ldr	r6, [r0, #0]
   d9008:	680d      	ldr	r5, [r1, #0]
   d900a:	42ae      	cmp	r6, r5
   d900c:	f103 0304 	add.w	r3, r3, #4
   d9010:	d1f6      	bne.n	d9000 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d9012:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9014:	1a52      	subs	r2, r2, r1
   d9016:	f001 fe7b 	bl	dad10 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d901a:	6863      	ldr	r3, [r4, #4]
   d901c:	3b01      	subs	r3, #1
   d901e:	6063      	str	r3, [r4, #4]
    return true;
   d9020:	2001      	movs	r0, #1
}
   d9022:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d9024:	2000      	movs	r0, #0
   d9026:	bd70      	pop	{r4, r5, r6, pc}

000d9028 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d9028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d902a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d902c:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d902e:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9030:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d9032:	f7ff fd33 	bl	d8a9c <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d9036:	a901      	add	r1, sp, #4
   d9038:	4620      	mov	r0, r4
   d903a:	f7ff ffdb 	bl	d8ff4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d903e:	b920      	cbnz	r0, d904a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d9040:	a803      	add	r0, sp, #12
   d9042:	f7ff ff2b 	bl	d8e9c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d9046:	b004      	add	sp, #16
   d9048:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d904a:	6863      	ldr	r3, [r4, #4]
   d904c:	2b00      	cmp	r3, #0
   d904e:	d1f7      	bne.n	d9040 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d9050:	f7ff fe24 	bl	d8c9c <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d9054:	e7f4      	b.n	d9040 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d9056 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d9056:	b570      	push	{r4, r5, r6, lr}
   d9058:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d905a:	6943      	ldr	r3, [r0, #20]
   d905c:	2618      	movs	r6, #24
   d905e:	4604      	mov	r4, r0
   d9060:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d9064:	42ae      	cmp	r6, r5
   d9066:	d015      	beq.n	d9094 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d9068:	f105 0110 	add.w	r1, r5, #16
   d906c:	4620      	mov	r0, r4
   d906e:	f7ff ffc1 	bl	d8ff4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d9072:	6863      	ldr	r3, [r4, #4]
   d9074:	b90b      	cbnz	r3, d907a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d9076:	f7ff fe11 	bl	d8c9c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d907a:	69e0      	ldr	r0, [r4, #28]
   d907c:	6929      	ldr	r1, [r5, #16]
   d907e:	6803      	ldr	r3, [r0, #0]
   d9080:	68db      	ldr	r3, [r3, #12]
   d9082:	4798      	blx	r3
        if (h.stream) {
   d9084:	6969      	ldr	r1, [r5, #20]
   d9086:	b119      	cbz	r1, d9090 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d9088:	6a20      	ldr	r0, [r4, #32]
   d908a:	6803      	ldr	r3, [r0, #0]
   d908c:	68db      	ldr	r3, [r3, #12]
   d908e:	4798      	blx	r3
   d9090:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d9092:	e7e7      	b.n	d9064 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d9094:	6925      	ldr	r5, [r4, #16]
   d9096:	6963      	ldr	r3, [r4, #20]
   d9098:	2618      	movs	r6, #24
   d909a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d909e:	42b5      	cmp	r5, r6
   d90a0:	d004      	beq.n	d90ac <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d90a2:	4628      	mov	r0, r5
   d90a4:	f7fe fb28 	bl	d76f8 <_ZN6StringD1Ev>
   d90a8:	3518      	adds	r5, #24
   d90aa:	e7f8      	b.n	d909e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d90ac:	2300      	movs	r3, #0
   d90ae:	6163      	str	r3, [r4, #20]
   d90b0:	bd70      	pop	{r4, r5, r6, pc}

000d90b2 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d90b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d90b4:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d90b6:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d90b8:	f7ff fdf0 	bl	d8c9c <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d90bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d90c0:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d90c4:	f7ff fcea 	bl	d8a9c <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d90c8:	4620      	mov	r0, r4
   d90ca:	f7ff ffc4 	bl	d9056 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d90ce:	4628      	mov	r0, r5
   d90d0:	f7ff fee4 	bl	d8e9c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d90d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d90d6:	b108      	cbz	r0, d90dc <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d90d8:	f7fd feb0 	bl	d6e3c <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d90dc:	6925      	ldr	r5, [r4, #16]
   d90de:	6963      	ldr	r3, [r4, #20]
   d90e0:	2618      	movs	r6, #24
   d90e2:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d90e6:	42b5      	cmp	r5, r6
   d90e8:	d004      	beq.n	d90f4 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d90ea:	4628      	mov	r0, r5
   d90ec:	f7fe fb04 	bl	d76f8 <_ZN6StringD1Ev>
   d90f0:	3518      	adds	r5, #24
   d90f2:	e7f8      	b.n	d90e6 <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d90f4:	6920      	ldr	r0, [r4, #16]
   d90f6:	f7fe f8af 	bl	d7258 <free>
   d90fa:	6820      	ldr	r0, [r4, #0]
   d90fc:	f7fe f8ac 	bl	d7258 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d9100:	4620      	mov	r0, r4
   d9102:	b002      	add	sp, #8
   d9104:	bd70      	pop	{r4, r5, r6, pc}

000d9106 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9106:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d9108:	680a      	ldr	r2, [r1, #0]
   d910a:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d910c:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d910e:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9110:	684a      	ldr	r2, [r1, #4]
   d9112:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d9114:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9116:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d9118:	688a      	ldr	r2, [r1, #8]
   d911a:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d911c:	608b      	str	r3, [r1, #8]
   d911e:	4770      	bx	lr

000d9120 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d9120:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d9122:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d9124:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d9126:	6003      	str	r3, [r0, #0]
   d9128:	6043      	str	r3, [r0, #4]
   d912a:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d912c:	f7ff ffeb 	bl	d9106 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d9130:	4620      	mov	r0, r4
   d9132:	bd10      	pop	{r4, pc}

000d9134 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d9134:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d9136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9138:	4604      	mov	r4, r0
   d913a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d913c:	d925      	bls.n	d918a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d913e:	4290      	cmp	r0, r2
   d9140:	d224      	bcs.n	d918c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d9142:	1a55      	subs	r5, r2, r1
   d9144:	3d14      	subs	r5, #20
   d9146:	442c      	add	r4, r5
   d9148:	f1a1 0714 	sub.w	r7, r1, #20
   d914c:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d9150:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d9152:	f1a5 0308 	sub.w	r3, r5, #8
   d9156:	429f      	cmp	r7, r3
   d9158:	d037      	beq.n	d91ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d915a:	b184      	cbz	r4, d917e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d915c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d9160:	6023      	str	r3, [r4, #0]
   d9162:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d9166:	80a3      	strh	r3, [r4, #4]
   d9168:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d916c:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d916e:	60a6      	str	r6, [r4, #8]
   d9170:	60e6      	str	r6, [r4, #12]
   d9172:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d9174:	4629      	mov	r1, r5
   d9176:	f104 0008 	add.w	r0, r4, #8
   d917a:	f7ff ffc4 	bl	d9106 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d917e:	4628      	mov	r0, r5
   d9180:	f7ff fe32 	bl	d8de8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d9184:	3c14      	subs	r4, #20
   d9186:	3d14      	subs	r5, #20
   d9188:	e7e3      	b.n	d9152 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d918a:	d01e      	beq.n	d91ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d918c:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d9190:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d9192:	f1a5 0308 	sub.w	r3, r5, #8
   d9196:	429e      	cmp	r6, r3
   d9198:	d017      	beq.n	d91ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d919a:	b184      	cbz	r4, d91be <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d919c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d91a0:	6023      	str	r3, [r4, #0]
   d91a2:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d91a6:	80a3      	strh	r3, [r4, #4]
   d91a8:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d91ac:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d91ae:	60a7      	str	r7, [r4, #8]
   d91b0:	60e7      	str	r7, [r4, #12]
   d91b2:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d91b4:	4629      	mov	r1, r5
   d91b6:	f104 0008 	add.w	r0, r4, #8
   d91ba:	f7ff ffa4 	bl	d9106 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d91be:	4628      	mov	r0, r5
   d91c0:	f7ff fe12 	bl	d8de8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d91c4:	3414      	adds	r4, #20
   d91c6:	3514      	adds	r5, #20
   d91c8:	e7e3      	b.n	d9192 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d91ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d91cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d91cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d91ce:	6845      	ldr	r5, [r0, #4]
   d91d0:	6883      	ldr	r3, [r0, #8]
   d91d2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d91d4:	4604      	mov	r4, r0
   d91d6:	460e      	mov	r6, r1
   d91d8:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d91da:	db0e      	blt.n	d91fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d91dc:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d91de:	2d00      	cmp	r5, #0
   d91e0:	dd05      	ble.n	d91ee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d91e2:	00a9      	lsls	r1, r5, #2
   d91e4:	6800      	ldr	r0, [r0, #0]
   d91e6:	f7fe f83f 	bl	d7268 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d91ea:	b920      	cbnz	r0, d91f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d91ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d91ee:	6800      	ldr	r0, [r0, #0]
   d91f0:	f7fe f832 	bl	d7258 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d91f4:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d91f6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d91f8:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d91fa:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d91fc:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d91fe:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9202:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d9206:	1a52      	subs	r2, r2, r1
   d9208:	1d08      	adds	r0, r1, #4
   d920a:	f001 fd81 	bl	dad10 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d920e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d9212:	6863      	ldr	r3, [r4, #4]
   d9214:	3301      	adds	r3, #1
   d9216:	6063      	str	r3, [r4, #4]
   d9218:	2001      	movs	r0, #1
    return true;
}
   d921a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d921c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d921c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d921e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d9220:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d9222:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9224:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9226:	f7ff fc39 	bl	d8a9c <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d922a:	6823      	ldr	r3, [r4, #0]
   d922c:	6861      	ldr	r1, [r4, #4]
   d922e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d9232:	4283      	cmp	r3, r0
   d9234:	461a      	mov	r2, r3
   d9236:	d009      	beq.n	d924c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d9238:	6812      	ldr	r2, [r2, #0]
   d923a:	42aa      	cmp	r2, r5
   d923c:	f103 0304 	add.w	r3, r3, #4
   d9240:	d1f7      	bne.n	d9232 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d9242:	a801      	add	r0, sp, #4
   d9244:	f7ff fe2a 	bl	d8e9c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d9248:	2500      	movs	r5, #0
   d924a:	e00e      	b.n	d926a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d924c:	462a      	mov	r2, r5
   d924e:	4620      	mov	r0, r4
   d9250:	f7ff ffbc 	bl	d91cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d9254:	4605      	mov	r5, r0
   d9256:	2800      	cmp	r0, #0
   d9258:	d0f3      	beq.n	d9242 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d925a:	6863      	ldr	r3, [r4, #4]
   d925c:	2b01      	cmp	r3, #1
   d925e:	d101      	bne.n	d9264 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d9260:	f7ff fd10 	bl	d8c84 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d9264:	a801      	add	r0, sp, #4
   d9266:	f7ff fe19 	bl	d8e9c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d926a:	4628      	mov	r0, r5
   d926c:	b003      	add	sp, #12
   d926e:	bd30      	pop	{r4, r5, pc}

000d9270 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d9270:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d9272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9274:	4606      	mov	r6, r0
   d9276:	460c      	mov	r4, r1
   d9278:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d927a:	d914      	bls.n	d92a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d927c:	4290      	cmp	r0, r2
   d927e:	d213      	bcs.n	d92a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d9280:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d9284:	1a6c      	subs	r4, r5, r1
   d9286:	f1a1 0710 	sub.w	r7, r1, #16
   d928a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d928c:	42af      	cmp	r7, r5
   d928e:	d018      	beq.n	d92c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d9290:	b11c      	cbz	r4, d929a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d9292:	4629      	mov	r1, r5
   d9294:	4620      	mov	r0, r4
   d9296:	f7fe fa1f 	bl	d76d8 <_ZN6StringC1EOS_>
                end->~T();
   d929a:	4628      	mov	r0, r5
   d929c:	f7fe fa2c 	bl	d76f8 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d92a0:	3d10      	subs	r5, #16
   d92a2:	3c10      	subs	r4, #16
   d92a4:	e7f2      	b.n	d928c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d92a6:	d00c      	beq.n	d92c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d92a8:	42ac      	cmp	r4, r5
   d92aa:	d00a      	beq.n	d92c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d92ac:	b11e      	cbz	r6, d92b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d92ae:	4621      	mov	r1, r4
   d92b0:	4630      	mov	r0, r6
   d92b2:	f7fe fa11 	bl	d76d8 <_ZN6StringC1EOS_>
                p->~T();
   d92b6:	4620      	mov	r0, r4
   d92b8:	f7fe fa1e 	bl	d76f8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d92bc:	3410      	adds	r4, #16
   d92be:	3610      	adds	r6, #16
   d92c0:	e7f2      	b.n	d92a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d92c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d92c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d92c4:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d92c6:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d92c8:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d92ca:	dd0b      	ble.n	d92e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d92cc:	0130      	lsls	r0, r6, #4
   d92ce:	f7fd ffbb 	bl	d7248 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d92d2:	4604      	mov	r4, r0
   d92d4:	b170      	cbz	r0, d92f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d92d6:	e895 0006 	ldmia.w	r5, {r1, r2}
   d92da:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d92de:	f7ff ffc7 	bl	d9270 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d92e2:	e000      	b.n	d92e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d92e4:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d92e6:	6828      	ldr	r0, [r5, #0]
   d92e8:	f7fd ffb6 	bl	d7258 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d92ec:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d92ee:	60ae      	str	r6, [r5, #8]
        return true;
   d92f0:	2001      	movs	r0, #1
   d92f2:	bd70      	pop	{r4, r5, r6, pc}
    }
   d92f4:	bd70      	pop	{r4, r5, r6, pc}

000d92f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d92f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d92fa:	2300      	movs	r3, #0
   d92fc:	b095      	sub	sp, #84	; 0x54
   d92fe:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9300:	2246      	movs	r2, #70	; 0x46
   d9302:	6003      	str	r3, [r0, #0]
   d9304:	6043      	str	r3, [r0, #4]
   d9306:	6083      	str	r3, [r0, #8]
   d9308:	60c3      	str	r3, [r0, #12]
   d930a:	6103      	str	r3, [r0, #16]
   d930c:	6143      	str	r3, [r0, #20]
   d930e:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9310:	9102      	str	r1, [sp, #8]
   d9312:	f8da 1004 	ldr.w	r1, [sl, #4]
   d9316:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d9318:	4299      	cmp	r1, r3
   d931a:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d931c:	9309      	str	r3, [sp, #36]	; 0x24
   d931e:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d9320:	f340 809d 	ble.w	d945e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d9324:	a808      	add	r0, sp, #32
   d9326:	f7ff ffcd 	bl	d92c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d932a:	2800      	cmp	r0, #0
   d932c:	f040 8097 	bne.w	d945e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d9330:	e08e      	b.n	d9450 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d9332:	4621      	mov	r1, r4
   d9334:	a80b      	add	r0, sp, #44	; 0x2c
   d9336:	f7fe f9cf 	bl	d76d8 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d933a:	a90b      	add	r1, sp, #44	; 0x2c
   d933c:	a80f      	add	r0, sp, #60	; 0x3c
   d933e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d9340:	f7fe f9ca 	bl	d76d8 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9344:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9348:	4299      	cmp	r1, r3
   d934a:	f2c0 80ce 	blt.w	d94ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d934e:	3101      	adds	r1, #1
   d9350:	a808      	add	r0, sp, #32
   d9352:	f7ff ffb7 	bl	d92c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9356:	2800      	cmp	r0, #0
   d9358:	f040 80c7 	bne.w	d94ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d935c:	a80f      	add	r0, sp, #60	; 0x3c
   d935e:	f7fe f9cb 	bl	d76f8 <_ZN6StringD1Ev>
   d9362:	a80b      	add	r0, sp, #44	; 0x2c
   d9364:	f7fe f9c8 	bl	d76f8 <_ZN6StringD1Ev>
   d9368:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d936a:	42a7      	cmp	r7, r4
   d936c:	d1e1      	bne.n	d9332 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d936e:	2600      	movs	r6, #0
   d9370:	960b      	str	r6, [sp, #44]	; 0x2c
   d9372:	960c      	str	r6, [sp, #48]	; 0x30
   d9374:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d9376:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d9378:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d937a:	429e      	cmp	r6, r3
   d937c:	f280 80a8 	bge.w	d94d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d9380:	0133      	lsls	r3, r6, #4
   d9382:	9a08      	ldr	r2, [sp, #32]
   d9384:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d9386:	9306      	str	r3, [sp, #24]
        if (!category) {
   d9388:	2b00      	cmp	r3, #0
   d938a:	f000 809f 	beq.w	d94cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d938e:	2314      	movs	r3, #20
   d9390:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d9392:	f8cd 901c 	str.w	r9, [sp, #28]
   d9396:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d9398:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d939a:	a907      	add	r1, sp, #28
   d939c:	a806      	add	r0, sp, #24
   d939e:	f7ff fb2c 	bl	d89fa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d93a2:	4607      	mov	r7, r0
   d93a4:	2800      	cmp	r0, #0
   d93a6:	f000 8091 	beq.w	d94cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d93aa:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d93ac:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d93ae:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d93b2:	9a07      	ldr	r2, [sp, #28]
   d93b4:	4620      	mov	r0, r4
   d93b6:	f7ff fb8d 	bl	d8ad4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d93ba:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d93be:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d93c0:	f1b8 0f00 	cmp.w	r8, #0
   d93c4:	d153      	bne.n	d946e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d93c6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d93ca:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d93ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d93d2:	970f      	str	r7, [sp, #60]	; 0x3c
   d93d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d93d8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d93dc:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d93e0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d93e4:	6867      	ldr	r7, [r4, #4]
   d93e6:	68a3      	ldr	r3, [r4, #8]
   d93e8:	429f      	cmp	r7, r3
   d93ea:	da4f      	bge.n	d948c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d93ec:	9b00      	ldr	r3, [sp, #0]
   d93ee:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d93f2:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d93f4:	2214      	movs	r2, #20
   d93f6:	4353      	muls	r3, r2
   d93f8:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d93fc:	fb02 b201 	mla	r2, r2, r1, fp
   d9400:	f107 0014 	add.w	r0, r7, #20
   d9404:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d9406:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d9408:	f7ff fe94 	bl	d9134 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d940c:	b1a7      	cbz	r7, d9438 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d940e:	9b03      	ldr	r3, [sp, #12]
   d9410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9412:	f84b 2003 	str.w	r2, [fp, r3]
   d9416:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d941a:	80bb      	strh	r3, [r7, #4]
   d941c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d9420:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d9422:	f8c7 9008 	str.w	r9, [r7, #8]
   d9426:	f8c7 900c 	str.w	r9, [r7, #12]
   d942a:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d942e:	a911      	add	r1, sp, #68	; 0x44
   d9430:	f107 0008 	add.w	r0, r7, #8
   d9434:	f7ff fe67 	bl	d9106 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d9438:	6863      	ldr	r3, [r4, #4]
   d943a:	3301      	adds	r3, #1
   d943c:	6063      	str	r3, [r4, #4]
   d943e:	a811      	add	r0, sp, #68	; 0x44
   d9440:	f7ff fcd2 	bl	d8de8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9444:	f1b8 0f00 	cmp.w	r8, #0
   d9448:	d011      	beq.n	d946e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d944a:	a80b      	add	r0, sp, #44	; 0x2c
   d944c:	f7ff fccc 	bl	d8de8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9450:	a808      	add	r0, sp, #32
   d9452:	f7ff fcdd 	bl	d8e10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d9456:	4628      	mov	r0, r5
   d9458:	b015      	add	sp, #84	; 0x54
   d945a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d945e:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d9462:	f8da 3004 	ldr.w	r3, [sl, #4]
   d9466:	2714      	movs	r7, #20
   d9468:	fb07 4703 	mla	r7, r7, r3, r4
   d946c:	e77d      	b.n	d936a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d946e:	6823      	ldr	r3, [r4, #0]
   d9470:	9a00      	ldr	r2, [sp, #0]
   d9472:	2414      	movs	r4, #20
   d9474:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d9478:	9b06      	ldr	r3, [sp, #24]
   d947a:	781b      	ldrb	r3, [r3, #0]
   d947c:	bb23      	cbnz	r3, d94c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d947e:	f8da 3000 	ldr.w	r3, [sl]
   d9482:	9a01      	ldr	r2, [sp, #4]
   d9484:	4413      	add	r3, r2
   d9486:	7c1b      	ldrb	r3, [r3, #16]
   d9488:	80e3      	strh	r3, [r4, #6]
   d948a:	e01d      	b.n	d94c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d948c:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d948e:	2f00      	cmp	r7, #0
   d9490:	dd0f      	ble.n	d94b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d9492:	2314      	movs	r3, #20
   d9494:	fb03 f007 	mul.w	r0, r3, r7
   d9498:	9303      	str	r3, [sp, #12]
   d949a:	f7fd fed5 	bl	d7248 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d949e:	4683      	mov	fp, r0
   d94a0:	b178      	cbz	r0, d94c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d94a2:	e894 0006 	ldmia.w	r4, {r1, r2}
   d94a6:	9b03      	ldr	r3, [sp, #12]
   d94a8:	fb03 1202 	mla	r2, r3, r2, r1
   d94ac:	f7ff fe42 	bl	d9134 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d94b0:	e000      	b.n	d94b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d94b2:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d94b4:	6820      	ldr	r0, [r4, #0]
   d94b6:	f7fd fecf 	bl	d7258 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d94ba:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d94be:	60a7      	str	r7, [r4, #8]
   d94c0:	e794      	b.n	d93ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d94c2:	f04f 0801 	mov.w	r8, #1
   d94c6:	e7ba      	b.n	d943e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d94c8:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d94ca:	e766      	b.n	d939a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d94cc:	3601      	adds	r6, #1
   d94ce:	e753      	b.n	d9378 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d94d0:	a908      	add	r1, sp, #32
   d94d2:	4628      	mov	r0, r5
   d94d4:	f7ff fe17 	bl	d9106 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d94d8:	a90b      	add	r1, sp, #44	; 0x2c
   d94da:	f105 000c 	add.w	r0, r5, #12
   d94de:	f7ff fe12 	bl	d9106 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d94e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d94e6:	762b      	strb	r3, [r5, #24]
   d94e8:	e7af      	b.n	d944a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d94ea:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d94ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d94ee:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d94f2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d94f6:	4631      	mov	r1, r6
   d94f8:	f106 0010 	add.w	r0, r6, #16
   d94fc:	f7ff feb8 	bl	d9270 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d9500:	b11e      	cbz	r6, d950a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d9502:	a90f      	add	r1, sp, #60	; 0x3c
   d9504:	4630      	mov	r0, r6
   d9506:	f7fe f8e7 	bl	d76d8 <_ZN6StringC1EOS_>
    ++size_;
   d950a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d950c:	3301      	adds	r3, #1
   d950e:	9309      	str	r3, [sp, #36]	; 0x24
   d9510:	e724      	b.n	d935c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d9514 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d9514:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d9516:	4604      	mov	r4, r0
   d9518:	4b09      	ldr	r3, [pc, #36]	; (d9540 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d951a:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d951e:	4605      	mov	r5, r0
   d9520:	460e      	mov	r6, r1
        filter_(level, filters) {
   d9522:	a801      	add	r0, sp, #4
   d9524:	4611      	mov	r1, r2
   d9526:	f7fb fd41 	bl	d4fac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d952a:	aa01      	add	r2, sp, #4
   d952c:	4631      	mov	r1, r6
   d952e:	4620      	mov	r0, r4
   d9530:	f7ff fee1 	bl	d92f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9534:	a801      	add	r0, sp, #4
   d9536:	f7fb f89f 	bl	d4678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d953a:	4628      	mov	r0, r5
   d953c:	b004      	add	sp, #16
   d953e:	bd70      	pop	{r4, r5, r6, pc}
   d9540:	000db724 	.word	0x000db724

000d9544 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d9544:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9546:	460f      	mov	r7, r1
   d9548:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d954a:	492b      	ldr	r1, [pc, #172]	; (d95f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d954c:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d954e:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d9550:	4616      	mov	r6, r2
   d9552:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d9554:	f001 fc4f 	bl	dadf6 <strcmp>
   d9558:	bb28      	cbnz	r0, d95a6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d955a:	2c00      	cmp	r4, #0
   d955c:	d049      	beq.n	d95f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d955e:	4629      	mov	r1, r5
   d9560:	a801      	add	r0, sp, #4
   d9562:	f7ff fddd 	bl	d9120 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d9566:	4925      	ldr	r1, [pc, #148]	; (d95fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d9568:	2024      	movs	r0, #36	; 0x24
   d956a:	f001 f955 	bl	da818 <_ZnwjRKSt9nothrow_t>
   d956e:	4605      	mov	r5, r0
   d9570:	b1b8      	cbz	r0, d95a2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d9572:	a901      	add	r1, sp, #4
   d9574:	a804      	add	r0, sp, #16
   d9576:	f7ff fdd3 	bl	d9120 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d957a:	a904      	add	r1, sp, #16
   d957c:	a807      	add	r0, sp, #28
   d957e:	f7fb fd15 	bl	d4fac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9582:	aa07      	add	r2, sp, #28
   d9584:	4631      	mov	r1, r6
   d9586:	4628      	mov	r0, r5
   d9588:	f7ff ffc4 	bl	d9514 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d958c:	a807      	add	r0, sp, #28
   d958e:	f7fb f873 	bl	d4678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9592:	4b1b      	ldr	r3, [pc, #108]	; (d9600 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d9594:	602b      	str	r3, [r5, #0]
   d9596:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d9598:	a804      	add	r0, sp, #16
   d959a:	f7fb f86d 	bl	d4678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d959e:	4b19      	ldr	r3, [pc, #100]	; (d9604 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d95a0:	602b      	str	r3, [r5, #0]
   d95a2:	a801      	add	r0, sp, #4
   d95a4:	e01f      	b.n	d95e6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d95a6:	4918      	ldr	r1, [pc, #96]	; (d9608 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d95a8:	4638      	mov	r0, r7
   d95aa:	f001 fc24 	bl	dadf6 <strcmp>
   d95ae:	b9f0      	cbnz	r0, d95ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d95b0:	b1fc      	cbz	r4, d95f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d95b2:	4629      	mov	r1, r5
   d95b4:	a804      	add	r0, sp, #16
   d95b6:	f7ff fdb3 	bl	d9120 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d95ba:	4910      	ldr	r1, [pc, #64]	; (d95fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d95bc:	2024      	movs	r0, #36	; 0x24
   d95be:	f001 f92b 	bl	da818 <_ZnwjRKSt9nothrow_t>
   d95c2:	4605      	mov	r5, r0
   d95c4:	b170      	cbz	r0, d95e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d95c6:	a904      	add	r1, sp, #16
   d95c8:	a807      	add	r0, sp, #28
   d95ca:	f7fb fcef 	bl	d4fac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d95ce:	aa07      	add	r2, sp, #28
   d95d0:	4631      	mov	r1, r6
   d95d2:	4628      	mov	r0, r5
   d95d4:	f7ff ff9e 	bl	d9514 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d95d8:	a807      	add	r0, sp, #28
   d95da:	f7fb f84d 	bl	d4678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d95de:	4b08      	ldr	r3, [pc, #32]	; (d9600 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d95e0:	602b      	str	r3, [r5, #0]
   d95e2:	622c      	str	r4, [r5, #32]
   d95e4:	a804      	add	r0, sp, #16
   d95e6:	f7fb f847 	bl	d4678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d95ea:	4628      	mov	r0, r5
   d95ec:	e002      	b.n	d95f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d95ee:	2000      	movs	r0, #0
   d95f0:	e000      	b.n	d95f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d95f2:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d95f4:	b00b      	add	sp, #44	; 0x2c
   d95f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d95f8:	000dbf4a 	.word	0x000dbf4a
   d95fc:	000dc196 	.word	0x000dc196
   d9600:	000dbfd0 	.word	0x000dbfd0
   d9604:	000dbedc 	.word	0x000dbedc
   d9608:	000dbf4e 	.word	0x000dbf4e

000d960c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d960c:	4b01      	ldr	r3, [pc, #4]	; (d9614 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d960e:	4a02      	ldr	r2, [pc, #8]	; (d9618 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9610:	601a      	str	r2, [r3, #0]
   d9612:	4770      	bx	lr
   d9614:	2003e374 	.word	0x2003e374
   d9618:	000dbf5f 	.word	0x000dbf5f

000d961c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d961c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9620:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d9622:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9626:	4604      	mov	r4, r0
   d9628:	460e      	mov	r6, r1
   d962a:	4617      	mov	r7, r2
   d962c:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d962e:	f000 fbc5 	bl	d9dbc <_Z16_fetch_usbserialv>
   d9632:	4581      	cmp	r9, r0
   d9634:	d105      	bne.n	d9642 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d9636:	485a      	ldr	r0, [pc, #360]	; (d97a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d9638:	f000 fe01 	bl	da23e <_ZN5spark12NetworkClass9listeningEv>
   d963c:	2800      	cmp	r0, #0
   d963e:	f040 80ac 	bne.w	d979a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d9642:	792b      	ldrb	r3, [r5, #4]
   d9644:	071b      	lsls	r3, r3, #28
   d9646:	d505      	bpl.n	d9654 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d9648:	696b      	ldr	r3, [r5, #20]
   d964a:	4a56      	ldr	r2, [pc, #344]	; (d97a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d964c:	6a20      	ldr	r0, [r4, #32]
   d964e:	2100      	movs	r1, #0
   d9650:	f7ff f985 	bl	d895e <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d9654:	f1b8 0f00 	cmp.w	r8, #0
   d9658:	d00d      	beq.n	d9676 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d965a:	215b      	movs	r1, #91	; 0x5b
   d965c:	4620      	mov	r0, r4
   d965e:	f7ff fa2e 	bl	d8abe <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d9662:	4641      	mov	r1, r8
   d9664:	4620      	mov	r0, r4
   d9666:	f7ff fa1c 	bl	d8aa2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d966a:	6823      	ldr	r3, [r4, #0]
   d966c:	494e      	ldr	r1, [pc, #312]	; (d97a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d966e:	68db      	ldr	r3, [r3, #12]
   d9670:	2202      	movs	r2, #2
   d9672:	4620      	mov	r0, r4
   d9674:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d9676:	792b      	ldrb	r3, [r5, #4]
   d9678:	07d9      	lsls	r1, r3, #31
   d967a:	d525      	bpl.n	d96c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d967c:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d9680:	212f      	movs	r1, #47	; 0x2f
   d9682:	4640      	mov	r0, r8
   d9684:	f001 fbf2 	bl	dae6c <strrchr>
    if (s1) {
   d9688:	b108      	cbz	r0, d968e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d968a:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d968e:	4641      	mov	r1, r8
   d9690:	4620      	mov	r0, r4
   d9692:	f7ff fa06 	bl	d8aa2 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d9696:	792b      	ldrb	r3, [r5, #4]
   d9698:	079a      	lsls	r2, r3, #30
   d969a:	d509      	bpl.n	d96b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d969c:	213a      	movs	r1, #58	; 0x3a
   d969e:	4620      	mov	r0, r4
   d96a0:	f7ff fa0d 	bl	d8abe <_ZN5spark16StreamLogHandler5writeEc>
   d96a4:	68eb      	ldr	r3, [r5, #12]
   d96a6:	4a41      	ldr	r2, [pc, #260]	; (d97ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d96a8:	6a20      	ldr	r0, [r4, #32]
   d96aa:	2100      	movs	r1, #0
   d96ac:	f7ff f957 	bl	d895e <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d96b0:	792b      	ldrb	r3, [r5, #4]
   d96b2:	f013 0f04 	tst.w	r3, #4
   d96b6:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d96b8:	bf18      	it	ne
   d96ba:	493d      	ldrne	r1, [pc, #244]	; (d97b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d96bc:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d96be:	bf08      	it	eq
   d96c0:	493c      	ldreq	r1, [pc, #240]	; (d97b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d96c2:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d96c4:	4620      	mov	r0, r4
   d96c6:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d96c8:	792b      	ldrb	r3, [r5, #4]
   d96ca:	075b      	lsls	r3, r3, #29
   d96cc:	d518      	bpl.n	d9700 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d96ce:	6929      	ldr	r1, [r5, #16]
   d96d0:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d96d2:	4613      	mov	r3, r2
   d96d4:	f813 0b01 	ldrb.w	r0, [r3], #1
   d96d8:	b138      	cbz	r0, d96ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d96da:	2820      	cmp	r0, #32
   d96dc:	d101      	bne.n	d96e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d96de:	4619      	mov	r1, r3
   d96e0:	e001      	b.n	d96e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d96e2:	2828      	cmp	r0, #40	; 0x28
   d96e4:	d001      	beq.n	d96ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d96e6:	461a      	mov	r2, r3
   d96e8:	e7f3      	b.n	d96d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d96ea:	6823      	ldr	r3, [r4, #0]
   d96ec:	1a52      	subs	r2, r2, r1
   d96ee:	68db      	ldr	r3, [r3, #12]
   d96f0:	4620      	mov	r0, r4
   d96f2:	4798      	blx	r3
        write("(): ", 4);
   d96f4:	6823      	ldr	r3, [r4, #0]
   d96f6:	4930      	ldr	r1, [pc, #192]	; (d97b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d96f8:	68db      	ldr	r3, [r3, #12]
   d96fa:	2204      	movs	r2, #4
   d96fc:	4620      	mov	r0, r4
   d96fe:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d9700:	2100      	movs	r1, #0
   d9702:	4638      	mov	r0, r7
   d9704:	f7fd fcd2 	bl	d70ac <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d9708:	4601      	mov	r1, r0
   d970a:	4620      	mov	r0, r4
   d970c:	f7ff f9c9 	bl	d8aa2 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d9710:	6823      	ldr	r3, [r4, #0]
   d9712:	4928      	ldr	r1, [pc, #160]	; (d97b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d9714:	68db      	ldr	r3, [r3, #12]
   d9716:	2202      	movs	r2, #2
   d9718:	4620      	mov	r0, r4
   d971a:	4798      	blx	r3
    // Message
    if (msg) {
   d971c:	b11e      	cbz	r6, d9726 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d971e:	4631      	mov	r1, r6
   d9720:	4620      	mov	r0, r4
   d9722:	f7ff f9be 	bl	d8aa2 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d9726:	792b      	ldrb	r3, [r5, #4]
   d9728:	f013 0f30 	tst.w	r3, #48	; 0x30
   d972c:	d02d      	beq.n	d978a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d972e:	6823      	ldr	r3, [r4, #0]
   d9730:	4922      	ldr	r1, [pc, #136]	; (d97bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d9732:	68db      	ldr	r3, [r3, #12]
   d9734:	4620      	mov	r0, r4
   d9736:	2202      	movs	r2, #2
   d9738:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d973a:	792b      	ldrb	r3, [r5, #4]
   d973c:	06d8      	lsls	r0, r3, #27
   d973e:	d50b      	bpl.n	d9758 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d9740:	6823      	ldr	r3, [r4, #0]
   d9742:	491f      	ldr	r1, [pc, #124]	; (d97c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d9744:	68db      	ldr	r3, [r3, #12]
   d9746:	2207      	movs	r2, #7
   d9748:	4620      	mov	r0, r4
   d974a:	4798      	blx	r3
   d974c:	69ab      	ldr	r3, [r5, #24]
   d974e:	4a1d      	ldr	r2, [pc, #116]	; (d97c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d9750:	6a20      	ldr	r0, [r4, #32]
   d9752:	2100      	movs	r1, #0
   d9754:	f7ff f903 	bl	d895e <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d9758:	792b      	ldrb	r3, [r5, #4]
   d975a:	0699      	lsls	r1, r3, #26
   d975c:	d511      	bpl.n	d9782 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d975e:	06da      	lsls	r2, r3, #27
   d9760:	d505      	bpl.n	d976e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d9762:	6823      	ldr	r3, [r4, #0]
   d9764:	4912      	ldr	r1, [pc, #72]	; (d97b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d9766:	68db      	ldr	r3, [r3, #12]
   d9768:	2202      	movs	r2, #2
   d976a:	4620      	mov	r0, r4
   d976c:	4798      	blx	r3
            }
            write("details = ", 10);
   d976e:	6823      	ldr	r3, [r4, #0]
   d9770:	4915      	ldr	r1, [pc, #84]	; (d97c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d9772:	68db      	ldr	r3, [r3, #12]
   d9774:	4620      	mov	r0, r4
   d9776:	220a      	movs	r2, #10
   d9778:	4798      	blx	r3
            write(attr.details);
   d977a:	69e9      	ldr	r1, [r5, #28]
   d977c:	4620      	mov	r0, r4
   d977e:	f7ff f990 	bl	d8aa2 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d9782:	215d      	movs	r1, #93	; 0x5d
   d9784:	4620      	mov	r0, r4
   d9786:	f7ff f99a 	bl	d8abe <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d978a:	6823      	ldr	r3, [r4, #0]
   d978c:	490f      	ldr	r1, [pc, #60]	; (d97cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d978e:	68db      	ldr	r3, [r3, #12]
   d9790:	4620      	mov	r0, r4
   d9792:	2202      	movs	r2, #2
}
   d9794:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d9798:	4718      	bx	r3
   d979a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d979e:	bf00      	nop
   d97a0:	2003e700 	.word	0x2003e700
   d97a4:	000dbf63 	.word	0x000dbf63
   d97a8:	000dbf6a 	.word	0x000dbf6a
   d97ac:	000db91a 	.word	0x000db91a
   d97b0:	000dbf6d 	.word	0x000dbf6d
   d97b4:	000dbf72 	.word	0x000dbf72
   d97b8:	000dbf70 	.word	0x000dbf70
   d97bc:	000dbf75 	.word	0x000dbf75
   d97c0:	000dbf78 	.word	0x000dbf78
   d97c4:	000dbf80 	.word	0x000dbf80
   d97c8:	000dbf83 	.word	0x000dbf83
   d97cc:	000dbf8e 	.word	0x000dbf8e

000d97d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d97d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d97d4:	b085      	sub	sp, #20
   d97d6:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d97da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d97dc:	4606      	mov	r6, r0
   d97de:	460f      	mov	r7, r1
   d97e0:	4691      	mov	r9, r2
   d97e2:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d97e4:	f000 faea 	bl	d9dbc <_Z16_fetch_usbserialv>
   d97e8:	4580      	cmp	r8, r0
   d97ea:	d105      	bne.n	d97f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d97ec:	484a      	ldr	r0, [pc, #296]	; (d9918 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d97ee:	f000 fd26 	bl	da23e <_ZN5spark12NetworkClass9listeningEv>
   d97f2:	2800      	cmp	r0, #0
   d97f4:	f040 808c 	bne.w	d9910 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d97f8:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d97fa:	4a48      	ldr	r2, [pc, #288]	; (d991c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d97fc:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d97fe:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d9802:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d9804:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d9806:	f88d 8008 	strb.w	r8, [sp, #8]
   d980a:	f000 fe5c 	bl	da4c6 <_ZN5spark10JSONWriter11beginObjectEv>
   d980e:	4641      	mov	r1, r8
   d9810:	4648      	mov	r0, r9
   d9812:	f7fd fc4b 	bl	d70ac <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d9816:	4942      	ldr	r1, [pc, #264]	; (d9920 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d9818:	4680      	mov	r8, r0
   d981a:	2201      	movs	r2, #1
   d981c:	a801      	add	r0, sp, #4
   d981e:	f000 fed7 	bl	da5d0 <_ZN5spark10JSONWriter4nameEPKcj>
   d9822:	4641      	mov	r1, r8
   d9824:	f7ff f92d 	bl	d8a82 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d9828:	b13f      	cbz	r7, d983a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d982a:	493e      	ldr	r1, [pc, #248]	; (d9924 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d982c:	2201      	movs	r2, #1
   d982e:	a801      	add	r0, sp, #4
   d9830:	f000 fece 	bl	da5d0 <_ZN5spark10JSONWriter4nameEPKcj>
   d9834:	4639      	mov	r1, r7
   d9836:	f7ff f924 	bl	d8a82 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d983a:	b13d      	cbz	r5, d984c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d983c:	493a      	ldr	r1, [pc, #232]	; (d9928 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d983e:	2201      	movs	r2, #1
   d9840:	a801      	add	r0, sp, #4
   d9842:	f000 fec5 	bl	da5d0 <_ZN5spark10JSONWriter4nameEPKcj>
   d9846:	4629      	mov	r1, r5
   d9848:	f7ff f91b 	bl	d8a82 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d984c:	7923      	ldrb	r3, [r4, #4]
   d984e:	07df      	lsls	r7, r3, #31
   d9850:	d50e      	bpl.n	d9870 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d9852:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d9854:	212f      	movs	r1, #47	; 0x2f
   d9856:	4628      	mov	r0, r5
   d9858:	f001 fb08 	bl	dae6c <strrchr>
    if (s1) {
   d985c:	b100      	cbz	r0, d9860 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d985e:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d9860:	4932      	ldr	r1, [pc, #200]	; (d992c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d9862:	2201      	movs	r2, #1
   d9864:	a801      	add	r0, sp, #4
   d9866:	f000 feb3 	bl	da5d0 <_ZN5spark10JSONWriter4nameEPKcj>
   d986a:	4629      	mov	r1, r5
   d986c:	f7ff f909 	bl	d8a82 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d9870:	7923      	ldrb	r3, [r4, #4]
   d9872:	079d      	lsls	r5, r3, #30
   d9874:	d507      	bpl.n	d9886 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d9876:	492e      	ldr	r1, [pc, #184]	; (d9930 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d9878:	2202      	movs	r2, #2
   d987a:	a801      	add	r0, sp, #4
   d987c:	f000 fea8 	bl	da5d0 <_ZN5spark10JSONWriter4nameEPKcj>
   d9880:	68e1      	ldr	r1, [r4, #12]
   d9882:	f000 fe2d 	bl	da4e0 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d9886:	7923      	ldrb	r3, [r4, #4]
   d9888:	0758      	lsls	r0, r3, #29
   d988a:	d516      	bpl.n	d98ba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d988c:	6925      	ldr	r5, [r4, #16]
   d988e:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d9890:	463b      	mov	r3, r7
   d9892:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9896:	b13a      	cbz	r2, d98a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d9898:	2a20      	cmp	r2, #32
   d989a:	d101      	bne.n	d98a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d989c:	461d      	mov	r5, r3
   d989e:	e001      	b.n	d98a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d98a0:	2a28      	cmp	r2, #40	; 0x28
   d98a2:	d001      	beq.n	d98a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d98a4:	461f      	mov	r7, r3
   d98a6:	e7f3      	b.n	d9890 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d98a8:	2202      	movs	r2, #2
   d98aa:	4922      	ldr	r1, [pc, #136]	; (d9934 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d98ac:	a801      	add	r0, sp, #4
   d98ae:	f000 fe8f 	bl	da5d0 <_ZN5spark10JSONWriter4nameEPKcj>
   d98b2:	1b7a      	subs	r2, r7, r5
   d98b4:	4629      	mov	r1, r5
   d98b6:	f000 fe9a 	bl	da5ee <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d98ba:	7923      	ldrb	r3, [r4, #4]
   d98bc:	0719      	lsls	r1, r3, #28
   d98be:	d507      	bpl.n	d98d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d98c0:	491d      	ldr	r1, [pc, #116]	; (d9938 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d98c2:	2201      	movs	r2, #1
   d98c4:	a801      	add	r0, sp, #4
   d98c6:	f000 fe83 	bl	da5d0 <_ZN5spark10JSONWriter4nameEPKcj>
   d98ca:	6961      	ldr	r1, [r4, #20]
   d98cc:	f000 fe1a 	bl	da504 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d98d0:	7923      	ldrb	r3, [r4, #4]
   d98d2:	06da      	lsls	r2, r3, #27
   d98d4:	d508      	bpl.n	d98e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d98d6:	2204      	movs	r2, #4
   d98d8:	4918      	ldr	r1, [pc, #96]	; (d993c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d98da:	eb0d 0002 	add.w	r0, sp, r2
   d98de:	f000 fe77 	bl	da5d0 <_ZN5spark10JSONWriter4nameEPKcj>
   d98e2:	69a1      	ldr	r1, [r4, #24]
   d98e4:	f000 fdfc 	bl	da4e0 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d98e8:	7923      	ldrb	r3, [r4, #4]
   d98ea:	069b      	lsls	r3, r3, #26
   d98ec:	d507      	bpl.n	d98fe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d98ee:	4914      	ldr	r1, [pc, #80]	; (d9940 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d98f0:	2206      	movs	r2, #6
   d98f2:	a801      	add	r0, sp, #4
   d98f4:	f000 fe6c 	bl	da5d0 <_ZN5spark10JSONWriter4nameEPKcj>
   d98f8:	69e1      	ldr	r1, [r4, #28]
   d98fa:	f7ff f8c2 	bl	d8a82 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d98fe:	a801      	add	r0, sp, #4
   d9900:	f000 fdcb 	bl	da49a <_ZN5spark10JSONWriter9endObjectEv>
   d9904:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d9906:	490f      	ldr	r1, [pc, #60]	; (d9944 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d9908:	6803      	ldr	r3, [r0, #0]
   d990a:	2202      	movs	r2, #2
   d990c:	68db      	ldr	r3, [r3, #12]
   d990e:	4798      	blx	r3
}
   d9910:	b005      	add	sp, #20
   d9912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9916:	bf00      	nop
   d9918:	2003e700 	.word	0x2003e700
   d991c:	000dbec4 	.word	0x000dbec4
   d9920:	000dbef6 	.word	0x000dbef6
   d9924:	000dbf09 	.word	0x000dbf09
   d9928:	000dbfc2 	.word	0x000dbfc2
   d992c:	000db820 	.word	0x000db820
   d9930:	000dbf91 	.word	0x000dbf91
   d9934:	000dbf94 	.word	0x000dbf94
   d9938:	000db82f 	.word	0x000db82f
   d993c:	000dbf97 	.word	0x000dbf97
   d9940:	000dbf9c 	.word	0x000dbf9c
   d9944:	000dbf8e 	.word	0x000dbf8e

000d9948 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9948:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d994a:	4b14      	ldr	r3, [pc, #80]	; (d999c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d994c:	4f14      	ldr	r7, [pc, #80]	; (d99a0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d994e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d9950:	4b14      	ldr	r3, [pc, #80]	; (d99a4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d9952:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d9954:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d9956:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d9958:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d995a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d995c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d995e:	d01b      	beq.n	d9998 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d9960:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d9962:	ad01      	add	r5, sp, #4
   d9964:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d9968:	f001 f8c0 	bl	daaec <localtime>
	calendar_time->tm_year += 1900;
   d996c:	6943      	ldr	r3, [r0, #20]
   d996e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d9972:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d9974:	4604      	mov	r4, r0
   d9976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d997a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d997c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d997e:	f8d4 e000 	ldr.w	lr, [r4]
   d9982:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9986:	ad01      	add	r5, sp, #4
   d9988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d998a:	4c07      	ldr	r4, [pc, #28]	; (d99a8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d998c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d998e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d9992:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9994:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d9998:	b00b      	add	sp, #44	; 0x2c
   d999a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d999c:	2003e3a8 	.word	0x2003e3a8
   d99a0:	2003e3a4 	.word	0x2003e3a4
   d99a4:	2003e3a0 	.word	0x2003e3a0
   d99a8:	2003e378 	.word	0x2003e378

000d99ac <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d99ac:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d99ae:	2000      	movs	r0, #0
   d99b0:	f7fd fc3a 	bl	d7228 <spark_sync_time_pending>
   d99b4:	b128      	cbz	r0, d99c2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d99b6:	f7fd fc27 	bl	d7208 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d99ba:	f080 0001 	eor.w	r0, r0, #1
   d99be:	b2c0      	uxtb	r0, r0
   d99c0:	bd08      	pop	{r3, pc}
   d99c2:	2001      	movs	r0, #1
    }
   d99c4:	bd08      	pop	{r3, pc}
	...

000d99c8 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d99c8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d99ca:	f7ff ffbd 	bl	d9948 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d99ce:	4b02      	ldr	r3, [pc, #8]	; (d99d8 <_ZN9TimeClass5monthEl+0x10>)
   d99d0:	6918      	ldr	r0, [r3, #16]
}
   d99d2:	3001      	adds	r0, #1
   d99d4:	bd08      	pop	{r3, pc}
   d99d6:	bf00      	nop
   d99d8:	2003e378 	.word	0x2003e378

000d99dc <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d99dc:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d99de:	2000      	movs	r0, #0
   d99e0:	f7fd f98c 	bl	d6cfc <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d99e4:	4604      	mov	r4, r0
   d99e6:	b968      	cbnz	r0, d9a04 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d99e8:	f7fd fb7a 	bl	d70e0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d99ec:	2801      	cmp	r0, #1
   d99ee:	d10b      	bne.n	d9a08 <_ZN9TimeClass7isValidEv+0x2c>
   d99f0:	4620      	mov	r0, r4
   d99f2:	f7fd fb8d 	bl	d7110 <system_thread_get_state>
   d99f6:	b938      	cbnz	r0, d9a08 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d99f8:	f7ff ffd8 	bl	d99ac <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d99fc:	b930      	cbnz	r0, d9a0c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d99fe:	f7fd fbfb 	bl	d71f8 <spark_process>
   d9a02:	e7f9      	b.n	d99f8 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d9a04:	2001      	movs	r0, #1
   d9a06:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d9a08:	2000      	movs	r0, #0
   d9a0a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d9a0c:	f7ff ffce 	bl	d99ac <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d9a10:	2000      	movs	r0, #0
   d9a12:	f7fd f973 	bl	d6cfc <HAL_RTC_Time_Is_Valid>
   d9a16:	3000      	adds	r0, #0
   d9a18:	bf18      	it	ne
   d9a1a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d9a1c:	bd10      	pop	{r4, pc}

000d9a1e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d9a1e:	b508      	push	{r3, lr}
    (void)isValid();
   d9a20:	f7ff ffdc 	bl	d99dc <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d9a24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d9a28:	f7fd b960 	b.w	d6cec <HAL_RTC_Get_UnixTime>

000d9a2c <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d9a2c:	b508      	push	{r3, lr}
	return hour(now());
   d9a2e:	f7ff fff6 	bl	d9a1e <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9a32:	f7ff ff89 	bl	d9948 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d9a36:	4b01      	ldr	r3, [pc, #4]	; (d9a3c <_ZN9TimeClass4hourEv+0x10>)
   d9a38:	6898      	ldr	r0, [r3, #8]
   d9a3a:	bd08      	pop	{r3, pc}
   d9a3c:	2003e378 	.word	0x2003e378

000d9a40 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d9a40:	b508      	push	{r3, lr}
	return minute(now());
   d9a42:	f7ff ffec 	bl	d9a1e <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9a46:	f7ff ff7f 	bl	d9948 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d9a4a:	4b01      	ldr	r3, [pc, #4]	; (d9a50 <_ZN9TimeClass6minuteEv+0x10>)
   d9a4c:	6858      	ldr	r0, [r3, #4]
   d9a4e:	bd08      	pop	{r3, pc}
   d9a50:	2003e378 	.word	0x2003e378

000d9a54 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   d9a54:	b508      	push	{r3, lr}
	return second(now());
   d9a56:	f7ff ffe2 	bl	d9a1e <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9a5a:	f7ff ff75 	bl	d9948 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   d9a5e:	4b01      	ldr	r3, [pc, #4]	; (d9a64 <_ZN9TimeClass6secondEv+0x10>)
   d9a60:	6818      	ldr	r0, [r3, #0]
   d9a62:	bd08      	pop	{r3, pc}
   d9a64:	2003e378 	.word	0x2003e378

000d9a68 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d9a68:	b508      	push	{r3, lr}
	return day(now());
   d9a6a:	f7ff ffd8 	bl	d9a1e <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9a6e:	f7ff ff6b 	bl	d9948 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d9a72:	4b01      	ldr	r3, [pc, #4]	; (d9a78 <_ZN9TimeClass3dayEv+0x10>)
   d9a74:	68d8      	ldr	r0, [r3, #12]
   d9a76:	bd08      	pop	{r3, pc}
   d9a78:	2003e378 	.word	0x2003e378

000d9a7c <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d9a7c:	b508      	push	{r3, lr}
	return month(now());
   d9a7e:	f7ff ffce 	bl	d9a1e <_ZN9TimeClass3nowEv>
}
   d9a82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d9a86:	f7ff bf9f 	b.w	d99c8 <_ZN9TimeClass5monthEl>
	...

000d9a8c <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d9a8c:	b508      	push	{r3, lr}
	return year(now());
   d9a8e:	f7ff ffc6 	bl	d9a1e <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9a92:	f7ff ff59 	bl	d9948 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d9a96:	4b01      	ldr	r3, [pc, #4]	; (d9a9c <_ZN9TimeClass4yearEv+0x10>)
   d9a98:	6958      	ldr	r0, [r3, #20]
   d9a9a:	bd08      	pop	{r3, pc}
   d9a9c:	2003e378 	.word	0x2003e378

000d9aa0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9aa0:	4b02      	ldr	r3, [pc, #8]	; (d9aac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9aa2:	681a      	ldr	r2, [r3, #0]
   d9aa4:	4b02      	ldr	r3, [pc, #8]	; (d9ab0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9aa6:	601a      	str	r2, [r3, #0]
   d9aa8:	4770      	bx	lr
   d9aaa:	bf00      	nop
   d9aac:	2003d348 	.word	0x2003d348
   d9ab0:	2003e39c 	.word	0x2003e39c

000d9ab4 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d9ab4:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d9ab6:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d9ab8:	d007      	beq.n	d9aca <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d9aba:	9d03      	ldr	r5, [sp, #12]
   d9abc:	1a44      	subs	r4, r0, r1
   d9abe:	1aed      	subs	r5, r5, r3
   d9ac0:	436c      	muls	r4, r5
   d9ac2:	1a52      	subs	r2, r2, r1
   d9ac4:	fb94 f4f2 	sdiv	r4, r4, r2
   d9ac8:	18e0      	adds	r0, r4, r3
}
   d9aca:	bd30      	pop	{r4, r5, pc}

000d9acc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d9acc:	2100      	movs	r1, #0
   d9ace:	f7fd bb17 	b.w	d7100 <system_delay_ms>

000d9ad2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d9ad2:	b510      	push	{r4, lr}
   d9ad4:	4604      	mov	r4, r0
   d9ad6:	f7fa fc15 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
   d9ada:	4620      	mov	r0, r4
   d9adc:	bd10      	pop	{r4, pc}
	...

000d9ae0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9ae0:	4803      	ldr	r0, [pc, #12]	; (d9af0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d9ae2:	4a04      	ldr	r2, [pc, #16]	; (d9af4 <_GLOBAL__sub_I_RGB+0x14>)
   d9ae4:	4904      	ldr	r1, [pc, #16]	; (d9af8 <_GLOBAL__sub_I_RGB+0x18>)
   d9ae6:	2300      	movs	r3, #0
   d9ae8:	6083      	str	r3, [r0, #8]
   d9aea:	f000 be83 	b.w	da7f4 <__aeabi_atexit>
   d9aee:	bf00      	nop
   d9af0:	2003e3ac 	.word	0x2003e3ac
   d9af4:	2003d400 	.word	0x2003d400
   d9af8:	000d9ad3 	.word	0x000d9ad3

000d9afc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d9afc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9afe:	4b0c      	ldr	r3, [pc, #48]	; (d9b30 <serialEventRun+0x34>)
   d9b00:	b133      	cbz	r3, d9b10 <serialEventRun+0x14>
   d9b02:	f000 f95b 	bl	d9dbc <_Z16_fetch_usbserialv>
   d9b06:	6803      	ldr	r3, [r0, #0]
   d9b08:	691b      	ldr	r3, [r3, #16]
   d9b0a:	4798      	blx	r3
   d9b0c:	2800      	cmp	r0, #0
   d9b0e:	dc09      	bgt.n	d9b24 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d9b10:	4b08      	ldr	r3, [pc, #32]	; (d9b34 <serialEventRun+0x38>)
   d9b12:	b163      	cbz	r3, d9b2e <serialEventRun+0x32>
   d9b14:	f000 fa2a 	bl	d9f6c <_Z22__fetch_global_Serial1v>
   d9b18:	6803      	ldr	r3, [r0, #0]
   d9b1a:	691b      	ldr	r3, [r3, #16]
   d9b1c:	4798      	blx	r3
   d9b1e:	2800      	cmp	r0, #0
   d9b20:	dc03      	bgt.n	d9b2a <serialEventRun+0x2e>
   d9b22:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d9b24:	f3af 8000 	nop.w
   d9b28:	e7f2      	b.n	d9b10 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d9b2a:	f3af 8000 	nop.w
   d9b2e:	bd08      	pop	{r3, pc}
	...

000d9b38 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d9b38:	b508      	push	{r3, lr}
	serialEventRun();
   d9b3a:	f7ff ffdf 	bl	d9afc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9b3e:	f7fd f8cd 	bl	d6cdc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9b42:	4b01      	ldr	r3, [pc, #4]	; (d9b48 <_post_loop+0x10>)
   d9b44:	6018      	str	r0, [r3, #0]
   d9b46:	bd08      	pop	{r3, pc}
   d9b48:	2003e708 	.word	0x2003e708

000d9b4c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9b4c:	4802      	ldr	r0, [pc, #8]	; (d9b58 <_Z33system_initialize_user_backup_ramv+0xc>)
   d9b4e:	4a03      	ldr	r2, [pc, #12]	; (d9b5c <_Z33system_initialize_user_backup_ramv+0x10>)
   d9b50:	4903      	ldr	r1, [pc, #12]	; (d9b60 <_Z33system_initialize_user_backup_ramv+0x14>)
   d9b52:	1a12      	subs	r2, r2, r0
   d9b54:	f001 b8d1 	b.w	dacfa <memcpy>
   d9b58:	2003f400 	.word	0x2003f400
   d9b5c:	2003f404 	.word	0x2003f404
   d9b60:	000dc420 	.word	0x000dc420

000d9b64 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9b64:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9b66:	2300      	movs	r3, #0
   d9b68:	9300      	str	r3, [sp, #0]
   d9b6a:	461a      	mov	r2, r3
   d9b6c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9b70:	f7fd fae8 	bl	d7144 <system_ctrl_set_result>
}
   d9b74:	b003      	add	sp, #12
   d9b76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9b7c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d9b7c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9b7e:	8843      	ldrh	r3, [r0, #2]
   d9b80:	2b0a      	cmp	r3, #10
   d9b82:	d008      	beq.n	d9b96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9b84:	2b50      	cmp	r3, #80	; 0x50
   d9b86:	d109      	bne.n	d9b9c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d9b88:	4b09      	ldr	r3, [pc, #36]	; (d9bb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9b8a:	681b      	ldr	r3, [r3, #0]
   d9b8c:	b13b      	cbz	r3, d9b9e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d9b8e:	b003      	add	sp, #12
   d9b90:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d9b94:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d9b96:	f7ff ffe5 	bl	d9b64 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d9b9a:	e006      	b.n	d9baa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9b9c:	2300      	movs	r3, #0
   d9b9e:	9300      	str	r3, [sp, #0]
   d9ba0:	461a      	mov	r2, r3
   d9ba2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9ba6:	f7fd facd 	bl	d7144 <system_ctrl_set_result>
        break;
    }
}
   d9baa:	b003      	add	sp, #12
   d9bac:	f85d fb04 	ldr.w	pc, [sp], #4
   d9bb0:	2003e3bc 	.word	0x2003e3bc

000d9bb4 <module_user_init_hook>:

void module_user_init_hook()
{
   d9bb4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9bb6:	4c10      	ldr	r4, [pc, #64]	; (d9bf8 <module_user_init_hook+0x44>)
   d9bb8:	4d10      	ldr	r5, [pc, #64]	; (d9bfc <module_user_init_hook+0x48>)
   d9bba:	6823      	ldr	r3, [r4, #0]
   d9bbc:	42ab      	cmp	r3, r5
   d9bbe:	4b10      	ldr	r3, [pc, #64]	; (d9c00 <module_user_init_hook+0x4c>)
   d9bc0:	bf0c      	ite	eq
   d9bc2:	2201      	moveq	r2, #1
   d9bc4:	2200      	movne	r2, #0
   d9bc6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9bc8:	d002      	beq.n	d9bd0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d9bca:	f7ff ffbf 	bl	d9b4c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d9bce:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9bd0:	f7fd f86c 	bl	d6cac <HAL_RNG_GetRandomNumber>
   d9bd4:	4604      	mov	r4, r0
    srand(seed);
   d9bd6:	f001 f8bf 	bl	dad58 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9bda:	4b0a      	ldr	r3, [pc, #40]	; (d9c04 <module_user_init_hook+0x50>)
   d9bdc:	b113      	cbz	r3, d9be4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d9bde:	4620      	mov	r0, r4
   d9be0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9be4:	2100      	movs	r1, #0
   d9be6:	4807      	ldr	r0, [pc, #28]	; (d9c04 <module_user_init_hook+0x50>)
   d9be8:	f7fd fb26 	bl	d7238 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9bec:	2100      	movs	r1, #0
   d9bee:	4806      	ldr	r0, [pc, #24]	; (d9c08 <module_user_init_hook+0x54>)
}
   d9bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9bf4:	f7fd ba9c 	b.w	d7130 <system_ctrl_set_app_request_handler>
   d9bf8:	2003f400 	.word	0x2003f400
   d9bfc:	9a271c1e 	.word	0x9a271c1e
   d9c00:	2003e3c0 	.word	0x2003e3c0
   d9c04:	00000000 	.word	0x00000000
   d9c08:	000d9b7d 	.word	0x000d9b7d

000d9c0c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9c0c:	4770      	bx	lr

000d9c0e <_ZN9IPAddressD0Ev>:
   d9c0e:	b510      	push	{r4, lr}
   d9c10:	2118      	movs	r1, #24
   d9c12:	4604      	mov	r4, r0
   d9c14:	f000 fdfc 	bl	da810 <_ZdlPvj>
   d9c18:	4620      	mov	r0, r4
   d9c1a:	bd10      	pop	{r4, pc}

000d9c1c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9c1e:	7d03      	ldrb	r3, [r0, #20]
   d9c20:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9c22:	b08d      	sub	sp, #52	; 0x34
   d9c24:	460e      	mov	r6, r1
   d9c26:	f100 0704 	add.w	r7, r0, #4
   d9c2a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9c2e:	d002      	beq.n	d9c36 <_ZNK9IPAddress7printToER5Print+0x1a>
   d9c30:	f100 0508 	add.w	r5, r0, #8
   d9c34:	e018      	b.n	d9c68 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9c36:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9c38:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9c3a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9c3e:	232f      	movs	r3, #47	; 0x2f
   d9c40:	462a      	mov	r2, r5
   d9c42:	200a      	movs	r0, #10
   d9c44:	f7fd f91a 	bl	d6e7c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d9c48:	4628      	mov	r0, r5
   d9c4a:	f001 f8e6 	bl	dae1a <strlen>
   d9c4e:	6833      	ldr	r3, [r6, #0]
   d9c50:	4602      	mov	r2, r0
   d9c52:	68db      	ldr	r3, [r3, #12]
   d9c54:	4629      	mov	r1, r5
   d9c56:	4630      	mov	r0, r6
   d9c58:	4798      	blx	r3
   d9c5a:	e00f      	b.n	d9c7c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d9c5c:	b124      	cbz	r4, d9c68 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d9c5e:	212e      	movs	r1, #46	; 0x2e
   d9c60:	4630      	mov	r0, r6
   d9c62:	f7fe fe43 	bl	d88ec <_ZN5Print5printEc>
   d9c66:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9c68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9c6c:	220a      	movs	r2, #10
   d9c6e:	4630      	mov	r0, r6
   d9c70:	f7fe fe55 	bl	d891e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9c74:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9c76:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9c78:	d1f0      	bne.n	d9c5c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9c7a:	4620      	mov	r0, r4
    }
    return n;
}
   d9c7c:	b00d      	add	sp, #52	; 0x34
   d9c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9c80 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d9c80:	b510      	push	{r4, lr}
   d9c82:	4b05      	ldr	r3, [pc, #20]	; (d9c98 <_ZN9IPAddressC1Ev+0x18>)
   d9c84:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9c86:	2211      	movs	r2, #17
   d9c88:	f840 3b04 	str.w	r3, [r0], #4
   d9c8c:	2100      	movs	r1, #0
   d9c8e:	f001 f85a 	bl	dad46 <memset>
{
    clear();
}
   d9c92:	4620      	mov	r0, r4
   d9c94:	bd10      	pop	{r4, pc}
   d9c96:	bf00      	nop
   d9c98:	000dc040 	.word	0x000dc040

000d9c9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d9c9c:	4603      	mov	r3, r0
   d9c9e:	4a07      	ldr	r2, [pc, #28]	; (d9cbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9ca0:	b510      	push	{r4, lr}
   d9ca2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d9ca6:	f101 0210 	add.w	r2, r1, #16
   d9caa:	f851 4b04 	ldr.w	r4, [r1], #4
   d9cae:	f843 4b04 	str.w	r4, [r3], #4
   d9cb2:	4291      	cmp	r1, r2
   d9cb4:	d1f9      	bne.n	d9caa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9cb6:	780a      	ldrb	r2, [r1, #0]
   d9cb8:	701a      	strb	r2, [r3, #0]
}
   d9cba:	bd10      	pop	{r4, pc}
   d9cbc:	000dc040 	.word	0x000dc040

000d9cc0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d9cc0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9cc2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9cc6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9cca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9cce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d9cd2:	2304      	movs	r3, #4
   d9cd4:	6041      	str	r1, [r0, #4]
   d9cd6:	7503      	strb	r3, [r0, #20]
   d9cd8:	bd10      	pop	{r4, pc}

000d9cda <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d9cda:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9cdc:	780d      	ldrb	r5, [r1, #0]
   d9cde:	788b      	ldrb	r3, [r1, #2]
   d9ce0:	784a      	ldrb	r2, [r1, #1]
   d9ce2:	78c9      	ldrb	r1, [r1, #3]
   d9ce4:	9100      	str	r1, [sp, #0]
   d9ce6:	4629      	mov	r1, r5
   d9ce8:	f7ff ffea 	bl	d9cc0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d9cec:	b003      	add	sp, #12
   d9cee:	bd30      	pop	{r4, r5, pc}

000d9cf0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9cf0:	7441      	strb	r1, [r0, #17]
   d9cf2:	4770      	bx	lr

000d9cf4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9cf4:	4770      	bx	lr

000d9cf6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d9cf6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9cf8:	2100      	movs	r1, #0
   d9cfa:	7c00      	ldrb	r0, [r0, #16]
   d9cfc:	f7fd f9ae 	bl	d705c <HAL_USB_USART_Receive_Data>
}
   d9d00:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9d04:	bf28      	it	cs
   d9d06:	f04f 30ff 	movcs.w	r0, #4294967295
   d9d0a:	bd08      	pop	{r3, pc}

000d9d0c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d9d0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9d0e:	2101      	movs	r1, #1
   d9d10:	7c00      	ldrb	r0, [r0, #16]
   d9d12:	f7fd f9a3 	bl	d705c <HAL_USB_USART_Receive_Data>
}
   d9d16:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9d1a:	bf28      	it	cs
   d9d1c:	f04f 30ff 	movcs.w	r0, #4294967295
   d9d20:	bd08      	pop	{r3, pc}

000d9d22 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d9d22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9d24:	7c00      	ldrb	r0, [r0, #16]
   d9d26:	f7fd f991 	bl	d704c <HAL_USB_USART_Available_Data_For_Write>
}
   d9d2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9d2e:	bd08      	pop	{r3, pc}

000d9d30 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d9d30:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9d32:	7c00      	ldrb	r0, [r0, #16]
   d9d34:	f7fd f982 	bl	d703c <HAL_USB_USART_Available_Data>
}
   d9d38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9d3c:	bd08      	pop	{r3, pc}

000d9d3e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d9d3e:	7c00      	ldrb	r0, [r0, #16]
   d9d40:	f7fd b99c 	b.w	d707c <HAL_USB_USART_Flush_Data>

000d9d44 <_ZN9USBSerialD0Ev>:
   d9d44:	b510      	push	{r4, lr}
   d9d46:	2114      	movs	r1, #20
   d9d48:	4604      	mov	r4, r0
   d9d4a:	f000 fd61 	bl	da810 <_ZdlPvj>
   d9d4e:	4620      	mov	r0, r4
   d9d50:	bd10      	pop	{r4, pc}

000d9d52 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9d52:	b538      	push	{r3, r4, r5, lr}
   d9d54:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9d56:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9d58:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9d5a:	f7fd f977 	bl	d704c <HAL_USB_USART_Available_Data_For_Write>
   d9d5e:	2800      	cmp	r0, #0
   d9d60:	dc01      	bgt.n	d9d66 <_ZN9USBSerial5writeEh+0x14>
   d9d62:	7c60      	ldrb	r0, [r4, #17]
   d9d64:	b128      	cbz	r0, d9d72 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9d66:	4629      	mov	r1, r5
   d9d68:	7c20      	ldrb	r0, [r4, #16]
   d9d6a:	f7fd f97f 	bl	d706c <HAL_USB_USART_Send_Data>
   d9d6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d9d72:	bd38      	pop	{r3, r4, r5, pc}

000d9d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9d74:	b510      	push	{r4, lr}
   d9d76:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9d78:	2300      	movs	r3, #0
   d9d7a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9d80:	60a3      	str	r3, [r4, #8]
   d9d82:	4b05      	ldr	r3, [pc, #20]	; (d9d98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9d84:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d9d86:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9d88:	4608      	mov	r0, r1
{
  _serial = serial;
   d9d8a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d9d8c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d9d8e:	4611      	mov	r1, r2
   d9d90:	f7fd f93c 	bl	d700c <HAL_USB_USART_Init>
}
   d9d94:	4620      	mov	r0, r4
   d9d96:	bd10      	pop	{r4, pc}
   d9d98:	000dc054 	.word	0x000dc054

000d9d9c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9d9c:	2200      	movs	r2, #0
   d9d9e:	7c00      	ldrb	r0, [r0, #16]
   d9da0:	f7fd b93c 	b.w	d701c <HAL_USB_USART_Begin>

000d9da4 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d9da4:	7c00      	ldrb	r0, [r0, #16]
   d9da6:	f7fd b941 	b.w	d702c <HAL_USB_USART_End>

000d9daa <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9daa:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9dac:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9dae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9db0:	2100      	movs	r1, #0
   d9db2:	f000 ffc8 	bl	dad46 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9db6:	4620      	mov	r0, r4
   d9db8:	bd10      	pop	{r4, pc}
	...

000d9dbc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9dbc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9dbe:	4d0e      	ldr	r5, [pc, #56]	; (d9df8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d9dc0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9dc2:	a801      	add	r0, sp, #4
   d9dc4:	f7ff fff1 	bl	d9daa <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9dc8:	6829      	ldr	r1, [r5, #0]
   d9dca:	f011 0401 	ands.w	r4, r1, #1
   d9dce:	d110      	bne.n	d9df2 <_Z16_fetch_usbserialv+0x36>
   d9dd0:	4628      	mov	r0, r5
   d9dd2:	f7fa f971 	bl	d40b8 <__cxa_guard_acquire>
   d9dd6:	b160      	cbz	r0, d9df2 <_Z16_fetch_usbserialv+0x36>
   d9dd8:	aa01      	add	r2, sp, #4
   d9dda:	4621      	mov	r1, r4
   d9ddc:	4807      	ldr	r0, [pc, #28]	; (d9dfc <_Z16_fetch_usbserialv+0x40>)
   d9dde:	f7ff ffc9 	bl	d9d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9de2:	4628      	mov	r0, r5
   d9de4:	f7fa f96d 	bl	d40c2 <__cxa_guard_release>
   d9de8:	4a05      	ldr	r2, [pc, #20]	; (d9e00 <_Z16_fetch_usbserialv+0x44>)
   d9dea:	4906      	ldr	r1, [pc, #24]	; (d9e04 <_Z16_fetch_usbserialv+0x48>)
   d9dec:	4803      	ldr	r0, [pc, #12]	; (d9dfc <_Z16_fetch_usbserialv+0x40>)
   d9dee:	f000 fd01 	bl	da7f4 <__aeabi_atexit>
	return _usbserial;
}
   d9df2:	4802      	ldr	r0, [pc, #8]	; (d9dfc <_Z16_fetch_usbserialv+0x40>)
   d9df4:	b007      	add	sp, #28
   d9df6:	bd30      	pop	{r4, r5, pc}
   d9df8:	2003e3c4 	.word	0x2003e3c4
   d9dfc:	2003e3c8 	.word	0x2003e3c8
   d9e00:	2003d400 	.word	0x2003d400
   d9e04:	000d9cf5 	.word	0x000d9cf5

000d9e08 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9e08:	2200      	movs	r2, #0
   d9e0a:	4611      	mov	r1, r2
   d9e0c:	6840      	ldr	r0, [r0, #4]
   d9e0e:	f7fd b9bb 	b.w	d7188 <network_ready>

000d9e12 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9e12:	2200      	movs	r2, #0
   d9e14:	4611      	mov	r1, r2
   d9e16:	6840      	ldr	r0, [r0, #4]
   d9e18:	f7fd b9d6 	b.w	d71c8 <network_listening>

000d9e1c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9e1c:	2200      	movs	r2, #0
   d9e1e:	4611      	mov	r1, r2
   d9e20:	6840      	ldr	r0, [r0, #4]
   d9e22:	f7fd b9e1 	b.w	d71e8 <network_get_listen_timeout>

000d9e26 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d9e26:	2200      	movs	r2, #0
   d9e28:	6840      	ldr	r0, [r0, #4]
   d9e2a:	f7fd b9d5 	b.w	d71d8 <network_set_listen_timeout>

000d9e2e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9e2e:	2200      	movs	r2, #0
   d9e30:	f081 0101 	eor.w	r1, r1, #1
   d9e34:	6840      	ldr	r0, [r0, #4]
   d9e36:	f7fd b9bf 	b.w	d71b8 <network_listen>

000d9e3a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d9e3a:	2300      	movs	r3, #0
   d9e3c:	461a      	mov	r2, r3
   d9e3e:	4619      	mov	r1, r3
   d9e40:	6840      	ldr	r0, [r0, #4]
   d9e42:	f7fd b9b1 	b.w	d71a8 <network_off>

000d9e46 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d9e46:	2300      	movs	r3, #0
   d9e48:	461a      	mov	r2, r3
   d9e4a:	4619      	mov	r1, r3
   d9e4c:	6840      	ldr	r0, [r0, #4]
   d9e4e:	f7fd b9a3 	b.w	d7198 <network_on>

000d9e52 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9e52:	2200      	movs	r2, #0
   d9e54:	4611      	mov	r1, r2
   d9e56:	6840      	ldr	r0, [r0, #4]
   d9e58:	f7fd b986 	b.w	d7168 <network_connecting>

000d9e5c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9e5c:	2200      	movs	r2, #0
   d9e5e:	2102      	movs	r1, #2
   d9e60:	6840      	ldr	r0, [r0, #4]
   d9e62:	f7fd b989 	b.w	d7178 <network_disconnect>

000d9e66 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9e66:	2300      	movs	r3, #0
   d9e68:	461a      	mov	r2, r3
   d9e6a:	6840      	ldr	r0, [r0, #4]
   d9e6c:	f7fd b974 	b.w	d7158 <network_connect>

000d9e70 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d9e70:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d9e72:	4c08      	ldr	r4, [pc, #32]	; (d9e94 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d9e74:	2528      	movs	r5, #40	; 0x28
   d9e76:	462a      	mov	r2, r5
   d9e78:	2100      	movs	r1, #0
   d9e7a:	4620      	mov	r0, r4
   d9e7c:	f000 ff63 	bl	dad46 <memset>
        cid = -1;
   d9e80:	f04f 33ff 	mov.w	r3, #4294967295
   d9e84:	6063      	str	r3, [r4, #4]
   d9e86:	4b04      	ldr	r3, [pc, #16]	; (d9e98 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d9e88:	8025      	strh	r5, [r4, #0]
   d9e8a:	2204      	movs	r2, #4
   d9e8c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d9e8e:	4a03      	ldr	r2, [pc, #12]	; (d9e9c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d9e90:	601a      	str	r2, [r3, #0]
   d9e92:	bd38      	pop	{r3, r4, r5, pc}
   d9e94:	2003e3e4 	.word	0x2003e3e4
   d9e98:	2003e3dc 	.word	0x2003e3dc
   d9e9c:	000dc084 	.word	0x000dc084

000d9ea0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d9ea0:	4770      	bx	lr

000d9ea2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9ea2:	7441      	strb	r1, [r0, #17]
   d9ea4:	4770      	bx	lr

000d9ea6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d9ea6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d9ea8:	7c00      	ldrb	r0, [r0, #16]
   d9eaa:	f7fd f82f 	bl	d6f0c <HAL_USART_Available_Data_For_Write>
}
   d9eae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9eb2:	bd08      	pop	{r3, pc}

000d9eb4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9eb4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d9eb6:	7c00      	ldrb	r0, [r0, #16]
   d9eb8:	f7fd f800 	bl	d6ebc <HAL_USART_Available_Data>
}
   d9ebc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9ec0:	bd08      	pop	{r3, pc}

000d9ec2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9ec2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d9ec4:	7c00      	ldrb	r0, [r0, #16]
   d9ec6:	f7fd f809 	bl	d6edc <HAL_USART_Peek_Data>
}
   d9eca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9ece:	bf28      	it	cs
   d9ed0:	f04f 30ff 	movcs.w	r0, #4294967295
   d9ed4:	bd08      	pop	{r3, pc}

000d9ed6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9ed6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d9ed8:	7c00      	ldrb	r0, [r0, #16]
   d9eda:	f7fc fff7 	bl	d6ecc <HAL_USART_Read_Data>
}
   d9ede:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9ee2:	bf28      	it	cs
   d9ee4:	f04f 30ff 	movcs.w	r0, #4294967295
   d9ee8:	bd08      	pop	{r3, pc}

000d9eea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d9eea:	7c00      	ldrb	r0, [r0, #16]
   d9eec:	f7fc bffe 	b.w	d6eec <HAL_USART_Flush_Data>

000d9ef0 <_ZN11USARTSerialD0Ev>:
   d9ef0:	b510      	push	{r4, lr}
   d9ef2:	2114      	movs	r1, #20
   d9ef4:	4604      	mov	r4, r0
   d9ef6:	f000 fc8b 	bl	da810 <_ZdlPvj>
   d9efa:	4620      	mov	r0, r4
   d9efc:	bd10      	pop	{r4, pc}

000d9efe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9efe:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9f00:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d9f02:	4604      	mov	r4, r0
   d9f04:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9f06:	b925      	cbnz	r5, d9f12 <_ZN11USARTSerial5writeEh+0x14>
   d9f08:	7c00      	ldrb	r0, [r0, #16]
   d9f0a:	f7fc ffff 	bl	d6f0c <HAL_USART_Available_Data_For_Write>
   d9f0e:	2800      	cmp	r0, #0
   d9f10:	dd05      	ble.n	d9f1e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9f12:	4631      	mov	r1, r6
   d9f14:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9f1a:	f7fc bfc7 	b.w	d6eac <HAL_USART_Write_Data>
  }
  return 0;
}
   d9f1e:	4628      	mov	r0, r5
   d9f20:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9f24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d9f24:	b510      	push	{r4, lr}
   d9f26:	4604      	mov	r4, r0
   d9f28:	4608      	mov	r0, r1
   d9f2a:	4611      	mov	r1, r2
   d9f2c:	2200      	movs	r2, #0
   d9f2e:	6062      	str	r2, [r4, #4]
   d9f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9f34:	60a2      	str	r2, [r4, #8]
   d9f36:	4a05      	ldr	r2, [pc, #20]	; (d9f4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d9f38:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d9f3a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9f3c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9f3e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9f40:	461a      	mov	r2, r3
   d9f42:	f7fc ffa3 	bl	d6e8c <HAL_USART_Init>
}
   d9f46:	4620      	mov	r0, r4
   d9f48:	bd10      	pop	{r4, pc}
   d9f4a:	bf00      	nop
   d9f4c:	000dc0b8 	.word	0x000dc0b8

000d9f50 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d9f50:	2300      	movs	r3, #0
   d9f52:	7c00      	ldrb	r0, [r0, #16]
   d9f54:	f7fc bfe2 	b.w	d6f1c <HAL_USART_BeginConfig>

000d9f58 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d9f58:	2200      	movs	r2, #0
   d9f5a:	f7ff bff9 	b.w	d9f50 <_ZN11USARTSerial5beginEmm>

000d9f5e <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d9f5e:	7c00      	ldrb	r0, [r0, #16]
   d9f60:	f7fc bf9c 	b.w	d6e9c <HAL_USART_End>

000d9f64 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d9f64:	7c00      	ldrb	r0, [r0, #16]
   d9f66:	f7fc bfc9 	b.w	d6efc <HAL_USART_Is_Enabled>
	...

000d9f6c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9f6c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9f6e:	4d0c      	ldr	r5, [pc, #48]	; (d9fa0 <_Z22__fetch_global_Serial1v+0x34>)
   d9f70:	6829      	ldr	r1, [r5, #0]
   d9f72:	f011 0401 	ands.w	r4, r1, #1
   d9f76:	d111      	bne.n	d9f9c <_Z22__fetch_global_Serial1v+0x30>
   d9f78:	4628      	mov	r0, r5
   d9f7a:	f7fa f89d 	bl	d40b8 <__cxa_guard_acquire>
   d9f7e:	b168      	cbz	r0, d9f9c <_Z22__fetch_global_Serial1v+0x30>
   d9f80:	4a08      	ldr	r2, [pc, #32]	; (d9fa4 <_Z22__fetch_global_Serial1v+0x38>)
   d9f82:	4b09      	ldr	r3, [pc, #36]	; (d9fa8 <_Z22__fetch_global_Serial1v+0x3c>)
   d9f84:	4809      	ldr	r0, [pc, #36]	; (d9fac <_Z22__fetch_global_Serial1v+0x40>)
   d9f86:	4621      	mov	r1, r4
   d9f88:	f7ff ffcc 	bl	d9f24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d9f8c:	4628      	mov	r0, r5
   d9f8e:	f7fa f898 	bl	d40c2 <__cxa_guard_release>
   d9f92:	4a07      	ldr	r2, [pc, #28]	; (d9fb0 <_Z22__fetch_global_Serial1v+0x44>)
   d9f94:	4907      	ldr	r1, [pc, #28]	; (d9fb4 <_Z22__fetch_global_Serial1v+0x48>)
   d9f96:	4805      	ldr	r0, [pc, #20]	; (d9fac <_Z22__fetch_global_Serial1v+0x40>)
   d9f98:	f000 fc2c 	bl	da7f4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9f9c:	4803      	ldr	r0, [pc, #12]	; (d9fac <_Z22__fetch_global_Serial1v+0x40>)
   d9f9e:	bd38      	pop	{r3, r4, r5, pc}
   d9fa0:	2003e4a4 	.word	0x2003e4a4
   d9fa4:	2003e4a8 	.word	0x2003e4a8
   d9fa8:	2003e420 	.word	0x2003e420
   d9fac:	2003e40c 	.word	0x2003e40c
   d9fb0:	2003d400 	.word	0x2003d400
   d9fb4:	000d9ea1 	.word	0x000d9ea1

000d9fb8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d9fb8:	4770      	bx	lr

000d9fba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d9fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9fbc:	4606      	mov	r6, r0
   d9fbe:	4615      	mov	r5, r2
   d9fc0:	460c      	mov	r4, r1
   d9fc2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9fc4:	42bc      	cmp	r4, r7
   d9fc6:	d006      	beq.n	d9fd6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9fc8:	6833      	ldr	r3, [r6, #0]
   d9fca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d9fce:	689b      	ldr	r3, [r3, #8]
   d9fd0:	4630      	mov	r0, r6
   d9fd2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9fd4:	e7f6      	b.n	d9fc4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d9fd6:	4628      	mov	r0, r5
   d9fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9fda <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d9fda:	2200      	movs	r2, #0
   d9fdc:	7c00      	ldrb	r0, [r0, #16]
   d9fde:	f7fc bfc5 	b.w	d6f6c <HAL_I2C_Write_Data>

000d9fe2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d9fe2:	2100      	movs	r1, #0
   d9fe4:	7c00      	ldrb	r0, [r0, #16]
   d9fe6:	f7fc bfc9 	b.w	d6f7c <HAL_I2C_Available_Data>

000d9fea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d9fea:	2100      	movs	r1, #0
   d9fec:	7c00      	ldrb	r0, [r0, #16]
   d9fee:	f7fc bfcd 	b.w	d6f8c <HAL_I2C_Read_Data>

000d9ff2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d9ff2:	2100      	movs	r1, #0
   d9ff4:	7c00      	ldrb	r0, [r0, #16]
   d9ff6:	f7fc bfd1 	b.w	d6f9c <HAL_I2C_Peek_Data>

000d9ffa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d9ffa:	2100      	movs	r1, #0
   d9ffc:	7c00      	ldrb	r0, [r0, #16]
   d9ffe:	f7fc bfd5 	b.w	d6fac <HAL_I2C_Flush_Data>

000da002 <_ZN7TwoWireD0Ev>:
   da002:	b510      	push	{r4, lr}
   da004:	2114      	movs	r1, #20
   da006:	4604      	mov	r4, r0
   da008:	f000 fc02 	bl	da810 <_ZdlPvj>
   da00c:	4620      	mov	r0, r4
   da00e:	bd10      	pop	{r4, pc}

000da010 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   da010:	b510      	push	{r4, lr}
   da012:	4604      	mov	r4, r0
   da014:	2300      	movs	r3, #0
   da016:	6063      	str	r3, [r4, #4]
   da018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da01c:	60a3      	str	r3, [r4, #8]
   da01e:	4b04      	ldr	r3, [pc, #16]	; (da030 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   da020:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   da022:	4608      	mov	r0, r1
   da024:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   da026:	4611      	mov	r1, r2
   da028:	f7fc ffd0 	bl	d6fcc <HAL_I2C_Init>
}
   da02c:	4620      	mov	r0, r4
   da02e:	bd10      	pop	{r4, pc}
   da030:	000dc0e8 	.word	0x000dc0e8

000da034 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   da034:	2200      	movs	r2, #0
   da036:	7c00      	ldrb	r0, [r0, #16]
   da038:	f7fc bf78 	b.w	d6f2c <HAL_I2C_Set_Speed>

000da03c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   da03c:	2300      	movs	r3, #0
   da03e:	461a      	mov	r2, r3
   da040:	4619      	mov	r1, r3
   da042:	7c00      	ldrb	r0, [r0, #16]
   da044:	f7fc bf7a 	b.w	d6f3c <HAL_I2C_Begin>

000da048 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   da048:	2200      	movs	r2, #0
   da04a:	7c00      	ldrb	r0, [r0, #16]
   da04c:	f7fc bf7e 	b.w	d6f4c <HAL_I2C_Begin_Transmission>

000da050 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   da050:	2200      	movs	r2, #0
   da052:	7c00      	ldrb	r0, [r0, #16]
   da054:	f7fc bf82 	b.w	d6f5c <HAL_I2C_End_Transmission>

000da058 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   da058:	2101      	movs	r1, #1
   da05a:	f7ff bff9 	b.w	da050 <_ZN7TwoWire15endTransmissionEh>

000da05e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   da05e:	2100      	movs	r1, #0
   da060:	7c00      	ldrb	r0, [r0, #16]
   da062:	f7fc bfab 	b.w	d6fbc <HAL_I2C_Is_Enabled>

000da066 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   da066:	2200      	movs	r2, #0
   da068:	4611      	mov	r1, r2
   da06a:	6840      	ldr	r0, [r0, #4]
   da06c:	f7fd b8ac 	b.w	d71c8 <network_listening>

000da070 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   da070:	2200      	movs	r2, #0
   da072:	4611      	mov	r1, r2
   da074:	6840      	ldr	r0, [r0, #4]
   da076:	f7fd b8b7 	b.w	d71e8 <network_get_listen_timeout>

000da07a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   da07a:	2200      	movs	r2, #0
   da07c:	6840      	ldr	r0, [r0, #4]
   da07e:	f7fd b8ab 	b.w	d71d8 <network_set_listen_timeout>

000da082 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   da082:	2200      	movs	r2, #0
   da084:	f081 0101 	eor.w	r1, r1, #1
   da088:	6840      	ldr	r0, [r0, #4]
   da08a:	f7fd b895 	b.w	d71b8 <network_listen>

000da08e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   da08e:	2300      	movs	r3, #0
   da090:	461a      	mov	r2, r3
   da092:	2101      	movs	r1, #1
   da094:	6840      	ldr	r0, [r0, #4]
   da096:	f7fd b887 	b.w	d71a8 <network_off>

000da09a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   da09a:	2300      	movs	r3, #0
   da09c:	461a      	mov	r2, r3
   da09e:	4619      	mov	r1, r3
   da0a0:	6840      	ldr	r0, [r0, #4]
   da0a2:	f7fd b879 	b.w	d7198 <network_on>

000da0a6 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   da0a6:	2200      	movs	r2, #0
   da0a8:	4611      	mov	r1, r2
   da0aa:	6840      	ldr	r0, [r0, #4]
   da0ac:	f7fd b86c 	b.w	d7188 <network_ready>

000da0b0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   da0b0:	2200      	movs	r2, #0
   da0b2:	4611      	mov	r1, r2
   da0b4:	6840      	ldr	r0, [r0, #4]
   da0b6:	f7fd b857 	b.w	d7168 <network_connecting>

000da0ba <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   da0ba:	2200      	movs	r2, #0
   da0bc:	2102      	movs	r1, #2
   da0be:	6840      	ldr	r0, [r0, #4]
   da0c0:	f7fd b85a 	b.w	d7178 <network_disconnect>

000da0c4 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   da0c4:	2300      	movs	r3, #0
   da0c6:	461a      	mov	r2, r3
   da0c8:	6840      	ldr	r0, [r0, #4]
   da0ca:	f7fd b845 	b.w	d7158 <network_connect>

000da0ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   da0ce:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da0d0:	4605      	mov	r5, r0
   da0d2:	b188      	cbz	r0, da0f8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da0d4:	6804      	ldr	r4, [r0, #0]
   da0d6:	b14c      	cbz	r4, da0ec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   da0d8:	68a3      	ldr	r3, [r4, #8]
   da0da:	b11b      	cbz	r3, da0e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   da0dc:	2203      	movs	r2, #3
   da0de:	4621      	mov	r1, r4
   da0e0:	4620      	mov	r0, r4
   da0e2:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da0e4:	2110      	movs	r1, #16
   da0e6:	4620      	mov	r0, r4
   da0e8:	f000 fb92 	bl	da810 <_ZdlPvj>
   da0ec:	4628      	mov	r0, r5
   da0ee:	2114      	movs	r1, #20
      }
   da0f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da0f4:	f000 bb8c 	b.w	da810 <_ZdlPvj>
   da0f8:	bd38      	pop	{r3, r4, r5, pc}

000da0fa <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   da0fa:	b110      	cbz	r0, da102 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   da0fc:	6803      	ldr	r3, [r0, #0]
   da0fe:	685b      	ldr	r3, [r3, #4]
   da100:	4718      	bx	r3
   da102:	4770      	bx	lr

000da104 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   da104:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   da106:	6803      	ldr	r3, [r0, #0]
   da108:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   da10a:	b1bb      	cbz	r3, da13c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   da10c:	6858      	ldr	r0, [r3, #4]
   da10e:	f7fc fe45 	bl	d6d9c <os_thread_is_current>
   da112:	b978      	cbnz	r0, da134 <_ZN6ThreadD1Ev+0x30>
   da114:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   da116:	7c5a      	ldrb	r2, [r3, #17]
   da118:	b912      	cbnz	r2, da120 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   da11a:	6858      	ldr	r0, [r3, #4]
   da11c:	f7fc fe4e 	bl	d6dbc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   da120:	6823      	ldr	r3, [r4, #0]
   da122:	6858      	ldr	r0, [r3, #4]
   da124:	f7fc fe52 	bl	d6dcc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da128:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   da12a:	2300      	movs	r3, #0
   da12c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   da12e:	b128      	cbz	r0, da13c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   da130:	f7ff ffcd 	bl	da0ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da134:	6820      	ldr	r0, [r4, #0]
   da136:	b108      	cbz	r0, da13c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   da138:	f7ff ffc9 	bl	da0ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   da13c:	4620      	mov	r0, r4
   da13e:	bd10      	pop	{r4, pc}

000da140 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   da140:	b538      	push	{r3, r4, r5, lr}
   da142:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da144:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   da148:	b108      	cbz	r0, da14e <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   da14a:	f7f9 ffa8 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   da14e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   da152:	b108      	cbz	r0, da158 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   da154:	f7fc fe72 	bl	d6e3c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da158:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   da15c:	b135      	cbz	r5, da16c <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da15e:	4628      	mov	r0, r5
   da160:	f7ff ffd0 	bl	da104 <_ZN6ThreadD1Ev>
   da164:	2104      	movs	r1, #4
   da166:	4628      	mov	r0, r5
   da168:	f000 fb52 	bl	da810 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da16c:	6820      	ldr	r0, [r4, #0]
   da16e:	b108      	cbz	r0, da174 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   da170:	f7ff ffc3 	bl	da0fa <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   da174:	4620      	mov	r0, r4
   da176:	bd38      	pop	{r3, r4, r5, pc}

000da178 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   da178:	b510      	push	{r4, lr}
   da17a:	4b04      	ldr	r3, [pc, #16]	; (da18c <_ZN5spark9MeshClassD1Ev+0x14>)
   da17c:	4604      	mov	r4, r0
   da17e:	f840 3b08 	str.w	r3, [r0], #8
   da182:	f7ff ffdd 	bl	da140 <_ZN5spark11MeshPublishD1Ev>
   da186:	4620      	mov	r0, r4
   da188:	bd10      	pop	{r4, pc}
   da18a:	bf00      	nop
   da18c:	000dc110 	.word	0x000dc110

000da190 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   da190:	b538      	push	{r3, r4, r5, lr}
   da192:	4c0e      	ldr	r4, [pc, #56]	; (da1cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   da194:	4b0e      	ldr	r3, [pc, #56]	; (da1d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   da196:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   da198:	2500      	movs	r5, #0
   da19a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   da19c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   da1a0:	6063      	str	r3, [r4, #4]
   da1a2:	60a5      	str	r5, [r4, #8]
   da1a4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da1a8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   da1ac:	f7fc fe3e 	bl	d6e2c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   da1b0:	4b08      	ldr	r3, [pc, #32]	; (da1d4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   da1b2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   da1b6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   da1ba:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   da1bc:	4620      	mov	r0, r4
   da1be:	4a06      	ldr	r2, [pc, #24]	; (da1d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   da1c0:	4906      	ldr	r1, [pc, #24]	; (da1dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   da1c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   da1c6:	f000 bb15 	b.w	da7f4 <__aeabi_atexit>
   da1ca:	bf00      	nop
   da1cc:	2003e52c 	.word	0x2003e52c
   da1d0:	000dc144 	.word	0x000dc144
   da1d4:	000dc110 	.word	0x000dc110
   da1d8:	2003d400 	.word	0x2003d400
   da1dc:	000da179 	.word	0x000da179

000da1e0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   da1e0:	2300      	movs	r3, #0
   da1e2:	461a      	mov	r2, r3
   da1e4:	6840      	ldr	r0, [r0, #4]
   da1e6:	f7fc bfb7 	b.w	d7158 <network_connect>

000da1ea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   da1ea:	2200      	movs	r2, #0
   da1ec:	2102      	movs	r1, #2
   da1ee:	6840      	ldr	r0, [r0, #4]
   da1f0:	f7fc bfc2 	b.w	d7178 <network_disconnect>

000da1f4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   da1f4:	2200      	movs	r2, #0
   da1f6:	4611      	mov	r1, r2
   da1f8:	6840      	ldr	r0, [r0, #4]
   da1fa:	f7fc bfb5 	b.w	d7168 <network_connecting>

000da1fe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   da1fe:	2200      	movs	r2, #0
   da200:	4611      	mov	r1, r2
   da202:	6840      	ldr	r0, [r0, #4]
   da204:	f7fc bfc0 	b.w	d7188 <network_ready>

000da208 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   da208:	2300      	movs	r3, #0
   da20a:	461a      	mov	r2, r3
   da20c:	4619      	mov	r1, r3
   da20e:	6840      	ldr	r0, [r0, #4]
   da210:	f7fc bfc2 	b.w	d7198 <network_on>

000da214 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   da214:	2300      	movs	r3, #0
   da216:	461a      	mov	r2, r3
   da218:	4619      	mov	r1, r3
   da21a:	6840      	ldr	r0, [r0, #4]
   da21c:	f7fc bfc4 	b.w	d71a8 <network_off>

000da220 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   da220:	2200      	movs	r2, #0
   da222:	f081 0101 	eor.w	r1, r1, #1
   da226:	6840      	ldr	r0, [r0, #4]
   da228:	f7fc bfc6 	b.w	d71b8 <network_listen>

000da22c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   da22c:	2200      	movs	r2, #0
   da22e:	6840      	ldr	r0, [r0, #4]
   da230:	f7fc bfd2 	b.w	d71d8 <network_set_listen_timeout>

000da234 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   da234:	2200      	movs	r2, #0
   da236:	4611      	mov	r1, r2
   da238:	6840      	ldr	r0, [r0, #4]
   da23a:	f7fc bfd5 	b.w	d71e8 <network_get_listen_timeout>

000da23e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   da23e:	2200      	movs	r2, #0
   da240:	4611      	mov	r1, r2
   da242:	6840      	ldr	r0, [r0, #4]
   da244:	f7fc bfc0 	b.w	d71c8 <network_listening>

000da248 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   da248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da24c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   da24e:	b095      	sub	sp, #84	; 0x54
   da250:	4616      	mov	r6, r2
   da252:	460d      	mov	r5, r1
   da254:	4607      	mov	r7, r0
    IPAddress addr;
   da256:	f7ff fd13 	bl	d9c80 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   da25a:	4621      	mov	r1, r4
   da25c:	2220      	movs	r2, #32
   da25e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da260:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   da262:	f000 fd70 	bl	dad46 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   da266:	2340      	movs	r3, #64	; 0x40
   da268:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   da26a:	4621      	mov	r1, r4
   da26c:	466b      	mov	r3, sp
   da26e:	aa0c      	add	r2, sp, #48	; 0x30
   da270:	4630      	mov	r0, r6
   da272:	f7fc fc8b 	bl	d6b8c <netdb_getaddrinfo>
    if (!r) {
   da276:	4604      	mov	r4, r0
   da278:	2800      	cmp	r0, #0
   da27a:	d144      	bne.n	da306 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da27c:	4602      	mov	r2, r0
   da27e:	2101      	movs	r1, #1
   da280:	6868      	ldr	r0, [r5, #4]
   da282:	f7fc ff81 	bl	d7188 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da286:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da288:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da28a:	4622      	mov	r2, r4
   da28c:	6868      	ldr	r0, [r5, #4]
   da28e:	f7fc ff7b 	bl	d7188 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da292:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da294:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   da296:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da298:	2e00      	cmp	r6, #0
   da29a:	d034      	beq.n	da306 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   da29c:	2900      	cmp	r1, #0
   da29e:	d132      	bne.n	da306 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   da2a0:	6873      	ldr	r3, [r6, #4]
   da2a2:	2b02      	cmp	r3, #2
   da2a4:	d002      	beq.n	da2ac <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   da2a6:	2b0a      	cmp	r3, #10
   da2a8:	d009      	beq.n	da2be <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   da2aa:	e02a      	b.n	da302 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   da2ac:	f1b8 0f00 	cmp.w	r8, #0
   da2b0:	d027      	beq.n	da302 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   da2b2:	6971      	ldr	r1, [r6, #20]
   da2b4:	4638      	mov	r0, r7
   da2b6:	3104      	adds	r1, #4
   da2b8:	f7ff fd0f 	bl	d9cda <_ZN9IPAddressaSEPKh>
   da2bc:	e020      	b.n	da300 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   da2be:	f1b9 0f00 	cmp.w	r9, #0
   da2c2:	d01e      	beq.n	da302 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   da2c4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   da2c6:	2211      	movs	r2, #17
   da2c8:	a801      	add	r0, sp, #4
   da2ca:	f000 fd3c 	bl	dad46 <memset>
                    a.v = 6;
   da2ce:	2306      	movs	r3, #6
   da2d0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   da2d4:	ad01      	add	r5, sp, #4
   da2d6:	f104 0308 	add.w	r3, r4, #8
   da2da:	3418      	adds	r4, #24
   da2dc:	6818      	ldr	r0, [r3, #0]
   da2de:	6859      	ldr	r1, [r3, #4]
   da2e0:	462a      	mov	r2, r5
   da2e2:	c203      	stmia	r2!, {r0, r1}
   da2e4:	3308      	adds	r3, #8
   da2e6:	42a3      	cmp	r3, r4
   da2e8:	4615      	mov	r5, r2
   da2ea:	d1f7      	bne.n	da2dc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   da2ec:	a901      	add	r1, sp, #4
   da2ee:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da2f0:	ad07      	add	r5, sp, #28
   da2f2:	f7ff fcd3 	bl	d9c9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da2f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da2f8:	1d3c      	adds	r4, r7, #4
   da2fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da2fc:	682b      	ldr	r3, [r5, #0]
   da2fe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   da300:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da302:	69f6      	ldr	r6, [r6, #28]
   da304:	e7c8      	b.n	da298 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   da306:	9800      	ldr	r0, [sp, #0]
   da308:	f7fc fc38 	bl	d6b7c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   da30c:	4638      	mov	r0, r7
   da30e:	b015      	add	sp, #84	; 0x54
   da310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da314 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   da314:	4b02      	ldr	r3, [pc, #8]	; (da320 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   da316:	4a03      	ldr	r2, [pc, #12]	; (da324 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   da318:	601a      	str	r2, [r3, #0]
   da31a:	2200      	movs	r2, #0
   da31c:	605a      	str	r2, [r3, #4]
   da31e:	4770      	bx	lr
   da320:	2003e700 	.word	0x2003e700
   da324:	000dc144 	.word	0x000dc144

000da328 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   da328:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   da32c:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   da32e:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   da332:	2901      	cmp	r1, #1
   da334:	4610      	mov	r0, r2
   da336:	d104      	bne.n	da342 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   da338:	f852 1c04 	ldr.w	r1, [r2, #-4]
   da33c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   da340:	e004      	b.n	da34c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   da342:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   da344:	bf04      	itt	eq
   da346:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   da34a:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   da34c:	3b01      	subs	r3, #1
   da34e:	f102 0210 	add.w	r2, r2, #16
   da352:	d1ec      	bne.n	da32e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   da354:	4770      	bx	lr

000da356 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   da356:	b40e      	push	{r1, r2, r3}
   da358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da35c:	b087      	sub	sp, #28
   da35e:	af00      	add	r7, sp, #0
   da360:	f107 0434 	add.w	r4, r7, #52	; 0x34
   da364:	4605      	mov	r5, r0
   da366:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   da36a:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   da36c:	4623      	mov	r3, r4
   da36e:	4632      	mov	r2, r6
   da370:	2110      	movs	r1, #16
   da372:	f107 0008 	add.w	r0, r7, #8
   da376:	f7fc ff97 	bl	d72a8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   da37a:	280f      	cmp	r0, #15
   da37c:	d916      	bls.n	da3ac <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   da37e:	f100 0308 	add.w	r3, r0, #8
   da382:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   da386:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   da388:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   da38c:	4632      	mov	r2, r6
   da38e:	1c41      	adds	r1, r0, #1
   da390:	4623      	mov	r3, r4
   da392:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   da394:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   da396:	f7fc ff87 	bl	d72a8 <vsnprintf>
        va_end(args);
        if (n > 0) {
   da39a:	1e02      	subs	r2, r0, #0
   da39c:	dd04      	ble.n	da3a8 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   da39e:	682b      	ldr	r3, [r5, #0]
   da3a0:	4669      	mov	r1, sp
   da3a2:	689b      	ldr	r3, [r3, #8]
   da3a4:	4628      	mov	r0, r5
   da3a6:	4798      	blx	r3
   da3a8:	46c5      	mov	sp, r8
   da3aa:	e007      	b.n	da3bc <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   da3ac:	b130      	cbz	r0, da3bc <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   da3ae:	682b      	ldr	r3, [r5, #0]
   da3b0:	4602      	mov	r2, r0
   da3b2:	689b      	ldr	r3, [r3, #8]
   da3b4:	f107 0108 	add.w	r1, r7, #8
   da3b8:	4628      	mov	r0, r5
   da3ba:	4798      	blx	r3
    }
}
   da3bc:	371c      	adds	r7, #28
   da3be:	46bd      	mov	sp, r7
   da3c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   da3c4:	b003      	add	sp, #12
   da3c6:	4770      	bx	lr

000da3c8 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   da3c8:	b513      	push	{r0, r1, r4, lr}
   da3ca:	ab02      	add	r3, sp, #8
    write(&c, 1);
   da3cc:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   da3ce:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   da3d2:	6894      	ldr	r4, [r2, #8]
   da3d4:	4619      	mov	r1, r3
   da3d6:	2201      	movs	r2, #1
   da3d8:	47a0      	blx	r4
}
   da3da:	b002      	add	sp, #8
   da3dc:	bd10      	pop	{r4, pc}

000da3de <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   da3de:	6883      	ldr	r3, [r0, #8]
   da3e0:	b1fb      	cbz	r3, da422 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   da3e2:	781a      	ldrb	r2, [r3, #0]
   da3e4:	2a03      	cmp	r2, #3
   da3e6:	d81a      	bhi.n	da41e <_ZNK5spark9JSONValue4typeEv+0x40>
   da3e8:	e8df f002 	tbb	[pc, r2]
   da3ec:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   da3f0:	2005      	movs	r0, #5
   da3f2:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   da3f4:	6802      	ldr	r2, [r0, #0]
   da3f6:	685b      	ldr	r3, [r3, #4]
   da3f8:	6852      	ldr	r2, [r2, #4]
   da3fa:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   da3fc:	282d      	cmp	r0, #45	; 0x2d
   da3fe:	d014      	beq.n	da42a <_ZNK5spark9JSONValue4typeEv+0x4c>
   da400:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da404:	2b09      	cmp	r3, #9
   da406:	d910      	bls.n	da42a <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   da408:	2874      	cmp	r0, #116	; 0x74
   da40a:	d010      	beq.n	da42e <_ZNK5spark9JSONValue4typeEv+0x50>
   da40c:	2866      	cmp	r0, #102	; 0x66
   da40e:	d00e      	beq.n	da42e <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   da410:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   da414:	4258      	negs	r0, r3
   da416:	4158      	adcs	r0, r3
   da418:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   da41a:	2006      	movs	r0, #6
   da41c:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   da41e:	2000      	movs	r0, #0
   da420:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   da422:	4618      	mov	r0, r3
   da424:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   da426:	2004      	movs	r0, #4
   da428:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   da42a:	2003      	movs	r0, #3
   da42c:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   da42e:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   da430:	4770      	bx	lr

000da432 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   da432:	b510      	push	{r4, lr}
   da434:	4604      	mov	r4, r0
    switch (type()) {
   da436:	f7ff ffd2 	bl	da3de <_ZNK5spark9JSONValue4typeEv>
   da43a:	2802      	cmp	r0, #2
   da43c:	d00d      	beq.n	da45a <_ZNK5spark9JSONValue5toIntEv+0x28>
   da43e:	d316      	bcc.n	da46e <_ZNK5spark9JSONValue5toIntEv+0x3c>
   da440:	2804      	cmp	r0, #4
   da442:	d814      	bhi.n	da46e <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   da444:	6822      	ldr	r2, [r4, #0]
   da446:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   da448:	6850      	ldr	r0, [r2, #4]
   da44a:	685b      	ldr	r3, [r3, #4]
   da44c:	220a      	movs	r2, #10
   da44e:	2100      	movs	r1, #0
   da450:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   da452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   da456:	f000 bda3 	b.w	dafa0 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   da45a:	6822      	ldr	r2, [r4, #0]
   da45c:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   da45e:	6852      	ldr	r2, [r2, #4]
   da460:	685b      	ldr	r3, [r3, #4]
   da462:	5cd0      	ldrb	r0, [r2, r3]
   da464:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   da468:	4258      	negs	r0, r3
   da46a:	4158      	adcs	r0, r3
   da46c:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   da46e:	2000      	movs	r0, #0
    }
}
   da470:	bd10      	pop	{r4, pc}

000da472 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   da472:	b510      	push	{r4, lr}
    if (!n_) {
   da474:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   da476:	4604      	mov	r4, r0
    if (!n_) {
   da478:	b15b      	cbz	r3, da492 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   da47a:	6880      	ldr	r0, [r0, #8]
   da47c:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   da47e:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   da480:	3010      	adds	r0, #16
   da482:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   da484:	6120      	str	r0, [r4, #16]
    --n_;
   da486:	6163      	str	r3, [r4, #20]
    if (n_) {
   da488:	b12b      	cbz	r3, da496 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   da48a:	f7ff ff4d 	bl	da328 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   da48e:	60a0      	str	r0, [r4, #8]
   da490:	e001      	b.n	da496 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   da492:	4618      	mov	r0, r3
   da494:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   da496:	2001      	movs	r0, #1
}
   da498:	bd10      	pop	{r4, pc}

000da49a <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   da49a:	b510      	push	{r4, lr}
    write('}');
   da49c:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   da49e:	4604      	mov	r4, r0
    write('}');
   da4a0:	f7ff ff92 	bl	da3c8 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   da4a4:	2301      	movs	r3, #1
   da4a6:	7123      	strb	r3, [r4, #4]
    return *this;
}
   da4a8:	4620      	mov	r0, r4
   da4aa:	bd10      	pop	{r4, pc}

000da4ac <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   da4ac:	b508      	push	{r3, lr}
    switch (state_) {
   da4ae:	7903      	ldrb	r3, [r0, #4]
   da4b0:	2b01      	cmp	r3, #1
   da4b2:	d002      	beq.n	da4ba <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   da4b4:	2b02      	cmp	r3, #2
   da4b6:	d002      	beq.n	da4be <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   da4b8:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   da4ba:	212c      	movs	r1, #44	; 0x2c
   da4bc:	e000      	b.n	da4c0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   da4be:	213a      	movs	r1, #58	; 0x3a
   da4c0:	f7ff ff82 	bl	da3c8 <_ZN5spark10JSONWriter5writeEc>
   da4c4:	bd08      	pop	{r3, pc}

000da4c6 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   da4c6:	b510      	push	{r4, lr}
   da4c8:	4604      	mov	r4, r0
    writeSeparator();
   da4ca:	f7ff ffef 	bl	da4ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   da4ce:	4620      	mov	r0, r4
   da4d0:	217b      	movs	r1, #123	; 0x7b
   da4d2:	f7ff ff79 	bl	da3c8 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   da4d6:	2300      	movs	r3, #0
   da4d8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   da4da:	4620      	mov	r0, r4
   da4dc:	bd10      	pop	{r4, pc}
	...

000da4e0 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   da4e0:	b538      	push	{r3, r4, r5, lr}
   da4e2:	4604      	mov	r4, r0
   da4e4:	460d      	mov	r5, r1
    writeSeparator();
   da4e6:	f7ff ffe1 	bl	da4ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   da4ea:	6823      	ldr	r3, [r4, #0]
   da4ec:	4904      	ldr	r1, [pc, #16]	; (da500 <_ZN5spark10JSONWriter5valueEi+0x20>)
   da4ee:	68db      	ldr	r3, [r3, #12]
   da4f0:	4620      	mov	r0, r4
   da4f2:	462a      	mov	r2, r5
   da4f4:	4798      	blx	r3
    state_ = NEXT;
   da4f6:	2301      	movs	r3, #1
   da4f8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   da4fa:	4620      	mov	r0, r4
   da4fc:	bd38      	pop	{r3, r4, r5, pc}
   da4fe:	bf00      	nop
   da500:	000db91a 	.word	0x000db91a

000da504 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   da504:	b538      	push	{r3, r4, r5, lr}
   da506:	4604      	mov	r4, r0
   da508:	460d      	mov	r5, r1
    writeSeparator();
   da50a:	f7ff ffcf 	bl	da4ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   da50e:	6823      	ldr	r3, [r4, #0]
   da510:	4904      	ldr	r1, [pc, #16]	; (da524 <_ZN5spark10JSONWriter5valueEj+0x20>)
   da512:	68db      	ldr	r3, [r3, #12]
   da514:	4620      	mov	r0, r4
   da516:	462a      	mov	r2, r5
   da518:	4798      	blx	r3
    state_ = NEXT;
   da51a:	2301      	movs	r3, #1
   da51c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   da51e:	4620      	mov	r0, r4
   da520:	bd38      	pop	{r3, r4, r5, pc}
   da522:	bf00      	nop
   da524:	000dc17f 	.word	0x000dc17f

000da528 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   da528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da52a:	460d      	mov	r5, r1
   da52c:	4617      	mov	r7, r2
    write('"');
   da52e:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   da530:	4604      	mov	r4, r0
   da532:	442f      	add	r7, r5
    write('"');
   da534:	f7ff ff48 	bl	da3c8 <_ZN5spark10JSONWriter5writeEc>
   da538:	462a      	mov	r2, r5
    const char* const end = str + size;
   da53a:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   da53c:	42ba      	cmp	r2, r7
   da53e:	d038      	beq.n	da5b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   da540:	4616      	mov	r6, r2
   da542:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   da546:	2d22      	cmp	r5, #34	; 0x22
   da548:	d003      	beq.n	da552 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   da54a:	2d5c      	cmp	r5, #92	; 0x5c
   da54c:	d001      	beq.n	da552 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   da54e:	2d1f      	cmp	r5, #31
   da550:	d82d      	bhi.n	da5ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   da552:	6823      	ldr	r3, [r4, #0]
   da554:	1a52      	subs	r2, r2, r1
   da556:	689b      	ldr	r3, [r3, #8]
   da558:	4620      	mov	r0, r4
   da55a:	4798      	blx	r3
            write('\\');
   da55c:	215c      	movs	r1, #92	; 0x5c
   da55e:	4620      	mov	r0, r4
   da560:	f7ff ff32 	bl	da3c8 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   da564:	2d0c      	cmp	r5, #12
   da566:	d019      	beq.n	da59c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   da568:	d807      	bhi.n	da57a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   da56a:	2d09      	cmp	r5, #9
   da56c:	d00f      	beq.n	da58e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   da56e:	2d0a      	cmp	r5, #10
   da570:	d012      	beq.n	da598 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   da572:	2d08      	cmp	r5, #8
   da574:	d114      	bne.n	da5a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   da576:	2162      	movs	r1, #98	; 0x62
   da578:	e00a      	b.n	da590 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   da57a:	2d22      	cmp	r5, #34	; 0x22
   da57c:	d005      	beq.n	da58a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   da57e:	2d5c      	cmp	r5, #92	; 0x5c
   da580:	d003      	beq.n	da58a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   da582:	2d0d      	cmp	r5, #13
   da584:	d10c      	bne.n	da5a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   da586:	2172      	movs	r1, #114	; 0x72
   da588:	e002      	b.n	da590 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   da58a:	4629      	mov	r1, r5
   da58c:	e000      	b.n	da590 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   da58e:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   da590:	4620      	mov	r0, r4
   da592:	f7ff ff19 	bl	da3c8 <_ZN5spark10JSONWriter5writeEc>
                break;
   da596:	e009      	b.n	da5ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   da598:	216e      	movs	r1, #110	; 0x6e
   da59a:	e7f9      	b.n	da590 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   da59c:	2166      	movs	r1, #102	; 0x66
   da59e:	e7f7      	b.n	da590 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   da5a0:	6823      	ldr	r3, [r4, #0]
   da5a2:	490a      	ldr	r1, [pc, #40]	; (da5cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   da5a4:	68db      	ldr	r3, [r3, #12]
   da5a6:	462a      	mov	r2, r5
   da5a8:	4620      	mov	r0, r4
   da5aa:	4798      	blx	r3
                break;
            }
            str = s + 1;
   da5ac:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   da5ae:	4632      	mov	r2, r6
   da5b0:	e7c4      	b.n	da53c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   da5b2:	4291      	cmp	r1, r2
   da5b4:	d004      	beq.n	da5c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   da5b6:	6823      	ldr	r3, [r4, #0]
   da5b8:	1a52      	subs	r2, r2, r1
   da5ba:	689d      	ldr	r5, [r3, #8]
   da5bc:	4620      	mov	r0, r4
   da5be:	47a8      	blx	r5
    }
    write('"');
   da5c0:	2122      	movs	r1, #34	; 0x22
   da5c2:	4620      	mov	r0, r4
   da5c4:	f7ff ff00 	bl	da3c8 <_ZN5spark10JSONWriter5writeEc>
   da5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da5ca:	bf00      	nop
   da5cc:	000dc190 	.word	0x000dc190

000da5d0 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   da5d0:	b570      	push	{r4, r5, r6, lr}
   da5d2:	4604      	mov	r4, r0
   da5d4:	460d      	mov	r5, r1
   da5d6:	4616      	mov	r6, r2
    writeSeparator();
   da5d8:	f7ff ff68 	bl	da4ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   da5dc:	4620      	mov	r0, r4
   da5de:	4632      	mov	r2, r6
   da5e0:	4629      	mov	r1, r5
   da5e2:	f7ff ffa1 	bl	da528 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   da5e6:	2302      	movs	r3, #2
   da5e8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   da5ea:	4620      	mov	r0, r4
   da5ec:	bd70      	pop	{r4, r5, r6, pc}

000da5ee <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   da5ee:	b570      	push	{r4, r5, r6, lr}
   da5f0:	4604      	mov	r4, r0
   da5f2:	460d      	mov	r5, r1
   da5f4:	4616      	mov	r6, r2
    writeSeparator();
   da5f6:	f7ff ff59 	bl	da4ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   da5fa:	4620      	mov	r0, r4
   da5fc:	4632      	mov	r2, r6
   da5fe:	4629      	mov	r1, r5
   da600:	f7ff ff92 	bl	da528 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   da604:	2301      	movs	r3, #1
   da606:	7123      	strb	r3, [r4, #4]
    return *this;
}
   da608:	4620      	mov	r0, r4
   da60a:	bd70      	pop	{r4, r5, r6, pc}

000da60c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   da60c:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   da60e:	2300      	movs	r3, #0
   da610:	4604      	mov	r4, r0
   da612:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   da614:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   da616:	4810      	ldr	r0, [pc, #64]	; (da658 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   da618:	60a0      	str	r0, [r4, #8]
   da61a:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   da61c:	b1d1      	cbz	r1, da654 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   da61e:	780b      	ldrb	r3, [r1, #0]
   da620:	2b03      	cmp	r3, #3
   da622:	d006      	beq.n	da632 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   da624:	b9b3      	cbnz	r3, da654 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   da626:	6813      	ldr	r3, [r2, #0]
   da628:	6858      	ldr	r0, [r3, #4]
   da62a:	684b      	ldr	r3, [r1, #4]
   da62c:	5cc3      	ldrb	r3, [r0, r3]
   da62e:	2b6e      	cmp	r3, #110	; 0x6e
   da630:	d008      	beq.n	da644 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   da632:	6813      	ldr	r3, [r2, #0]
   da634:	6858      	ldr	r0, [r3, #4]
   da636:	684b      	ldr	r3, [r1, #4]
   da638:	4403      	add	r3, r0
   da63a:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   da63c:	688b      	ldr	r3, [r1, #8]
   da63e:	6849      	ldr	r1, [r1, #4]
   da640:	1a5b      	subs	r3, r3, r1
   da642:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   da644:	4611      	mov	r1, r2
   da646:	4620      	mov	r0, r4
   da648:	f851 3b04 	ldr.w	r3, [r1], #4
   da64c:	f840 3b04 	str.w	r3, [r0], #4
   da650:	f7fd fcdc 	bl	d800c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   da654:	4620      	mov	r0, r4
   da656:	bd10      	pop	{r4, pc}
   da658:	000dbf90 	.word	0x000dbf90

000da65c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   da65c:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   da65e:	b510      	push	{r4, lr}
   da660:	4604      	mov	r4, r0
   da662:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   da664:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   da666:	6083      	str	r3, [r0, #8]
   da668:	60c3      	str	r3, [r0, #12]
   da66a:	6103      	str	r3, [r0, #16]
   da66c:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   da66e:	b171      	cbz	r1, da68e <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   da670:	780b      	ldrb	r3, [r1, #0]
   da672:	2b01      	cmp	r3, #1
   da674:	d10b      	bne.n	da68e <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   da676:	f101 0310 	add.w	r3, r1, #16
   da67a:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   da67c:	68cb      	ldr	r3, [r1, #12]
   da67e:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   da680:	4611      	mov	r1, r2
   da682:	f851 3b04 	ldr.w	r3, [r1], #4
   da686:	f840 3b04 	str.w	r3, [r0], #4
   da68a:	f7fd fcbf 	bl	d800c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   da68e:	4620      	mov	r0, r4
   da690:	bd10      	pop	{r4, pc}

000da692 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   da692:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   da694:	b510      	push	{r4, lr}
   da696:	4604      	mov	r4, r0
   da698:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   da69a:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   da69c:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   da69e:	b131      	cbz	r1, da6ae <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   da6a0:	4611      	mov	r1, r2
   da6a2:	f851 3b04 	ldr.w	r3, [r1], #4
   da6a6:	f840 3b04 	str.w	r3, [r0], #4
   da6aa:	f7fd fcaf 	bl	d800c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   da6ae:	4620      	mov	r0, r4
   da6b0:	bd10      	pop	{r4, pc}
	...

000da6b4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   da6b4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da6b6:	4e18      	ldr	r6, [pc, #96]	; (da718 <pinAvailable+0x64>)
   da6b8:	6831      	ldr	r1, [r6, #0]
   da6ba:	f011 0501 	ands.w	r5, r1, #1
   da6be:	4604      	mov	r4, r0
   da6c0:	d10a      	bne.n	da6d8 <pinAvailable+0x24>
   da6c2:	4630      	mov	r0, r6
   da6c4:	f7f9 fcf8 	bl	d40b8 <__cxa_guard_acquire>
   da6c8:	b130      	cbz	r0, da6d8 <pinAvailable+0x24>
   da6ca:	4629      	mov	r1, r5
   da6cc:	4813      	ldr	r0, [pc, #76]	; (da71c <pinAvailable+0x68>)
   da6ce:	f7fc fe67 	bl	d73a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   da6d2:	4630      	mov	r0, r6
   da6d4:	f7f9 fcf5 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   da6d8:	4810      	ldr	r0, [pc, #64]	; (da71c <pinAvailable+0x68>)
   da6da:	f7fc ff64 	bl	d75a6 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   da6de:	b128      	cbz	r0, da6ec <pinAvailable+0x38>
   da6e0:	f1a4 030b 	sub.w	r3, r4, #11
   da6e4:	2b02      	cmp	r3, #2
   da6e6:	d801      	bhi.n	da6ec <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   da6e8:	2000      	movs	r0, #0
   da6ea:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   da6ec:	f000 f85c 	bl	da7a8 <_Z19__fetch_global_Wirev>
   da6f0:	f7ff fcb5 	bl	da05e <_ZN7TwoWire9isEnabledEv>
   da6f4:	b108      	cbz	r0, da6fa <pinAvailable+0x46>
   da6f6:	2c01      	cmp	r4, #1
   da6f8:	d9f6      	bls.n	da6e8 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   da6fa:	f7ff fc37 	bl	d9f6c <_Z22__fetch_global_Serial1v>
   da6fe:	f7ff fc31 	bl	d9f64 <_ZN11USARTSerial9isEnabledEv>
   da702:	b118      	cbz	r0, da70c <pinAvailable+0x58>
   da704:	f1a4 0309 	sub.w	r3, r4, #9
   da708:	2b01      	cmp	r3, #1
   da70a:	d9ed      	bls.n	da6e8 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   da70c:	2c25      	cmp	r4, #37	; 0x25
   da70e:	bf8c      	ite	hi
   da710:	2000      	movhi	r0, #0
   da712:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   da714:	bd70      	pop	{r4, r5, r6, pc}
   da716:	bf00      	nop
   da718:	2003d410 	.word	0x2003d410
   da71c:	2003d414 	.word	0x2003d414

000da720 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da720:	2825      	cmp	r0, #37	; 0x25
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   da722:	b538      	push	{r3, r4, r5, lr}
   da724:	4604      	mov	r4, r0
   da726:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da728:	d80a      	bhi.n	da740 <pinMode+0x20>
   da72a:	29ff      	cmp	r1, #255	; 0xff
   da72c:	d008      	beq.n	da740 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   da72e:	f7ff ffc1 	bl	da6b4 <pinAvailable>
   da732:	b128      	cbz	r0, da740 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da734:	4629      	mov	r1, r5
   da736:	4620      	mov	r0, r4
}
   da738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da73c:	f7fc ba3e 	b.w	d6bbc <HAL_Pin_Mode>
   da740:	bd38      	pop	{r3, r4, r5, pc}

000da742 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da742:	b538      	push	{r3, r4, r5, lr}
   da744:	4604      	mov	r4, r0
   da746:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da748:	f7fc fa40 	bl	d6bcc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da74c:	28ff      	cmp	r0, #255	; 0xff
   da74e:	d010      	beq.n	da772 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   da750:	2806      	cmp	r0, #6
   da752:	d804      	bhi.n	da75e <digitalWrite+0x1c>
   da754:	234d      	movs	r3, #77	; 0x4d
   da756:	fa23 f000 	lsr.w	r0, r3, r0
   da75a:	07c3      	lsls	r3, r0, #31
   da75c:	d409      	bmi.n	da772 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da75e:	4620      	mov	r0, r4
   da760:	f7ff ffa8 	bl	da6b4 <pinAvailable>
   da764:	b128      	cbz	r0, da772 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da766:	4629      	mov	r1, r5
   da768:	4620      	mov	r0, r4
}
   da76a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   da76e:	f7fc ba35 	b.w	d6bdc <HAL_GPIO_Write>
   da772:	bd38      	pop	{r3, r4, r5, pc}

000da774 <_Z17acquireWireBufferv>:
   da774:	b570      	push	{r4, r5, r6, lr}
   da776:	4604      	mov	r4, r0
   da778:	2514      	movs	r5, #20
   da77a:	462a      	mov	r2, r5
   da77c:	4e09      	ldr	r6, [pc, #36]	; (da7a4 <_Z17acquireWireBufferv+0x30>)
   da77e:	2100      	movs	r1, #0
   da780:	f000 fae1 	bl	dad46 <memset>
   da784:	8025      	strh	r5, [r4, #0]
   da786:	2520      	movs	r5, #32
   da788:	4631      	mov	r1, r6
   da78a:	60a5      	str	r5, [r4, #8]
   da78c:	6125      	str	r5, [r4, #16]
   da78e:	4628      	mov	r0, r5
   da790:	f000 f840 	bl	da814 <_ZnajRKSt9nothrow_t>
   da794:	4631      	mov	r1, r6
   da796:	6060      	str	r0, [r4, #4]
   da798:	4628      	mov	r0, r5
   da79a:	f000 f83b 	bl	da814 <_ZnajRKSt9nothrow_t>
   da79e:	60e0      	str	r0, [r4, #12]
   da7a0:	4620      	mov	r0, r4
   da7a2:	bd70      	pop	{r4, r5, r6, pc}
   da7a4:	000dc196 	.word	0x000dc196

000da7a8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da7a8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da7aa:	4d0e      	ldr	r5, [pc, #56]	; (da7e4 <_Z19__fetch_global_Wirev+0x3c>)
   da7ac:	6829      	ldr	r1, [r5, #0]
   da7ae:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da7b2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da7b4:	d113      	bne.n	da7de <_Z19__fetch_global_Wirev+0x36>
   da7b6:	4628      	mov	r0, r5
   da7b8:	f7f9 fc7e 	bl	d40b8 <__cxa_guard_acquire>
   da7bc:	b178      	cbz	r0, da7de <_Z19__fetch_global_Wirev+0x36>
   da7be:	a801      	add	r0, sp, #4
   da7c0:	f7ff ffd8 	bl	da774 <_Z17acquireWireBufferv>
   da7c4:	aa01      	add	r2, sp, #4
   da7c6:	4621      	mov	r1, r4
   da7c8:	4807      	ldr	r0, [pc, #28]	; (da7e8 <_Z19__fetch_global_Wirev+0x40>)
   da7ca:	f7ff fc21 	bl	da010 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   da7ce:	4628      	mov	r0, r5
   da7d0:	f7f9 fc77 	bl	d40c2 <__cxa_guard_release>
   da7d4:	4a05      	ldr	r2, [pc, #20]	; (da7ec <_Z19__fetch_global_Wirev+0x44>)
   da7d6:	4906      	ldr	r1, [pc, #24]	; (da7f0 <_Z19__fetch_global_Wirev+0x48>)
   da7d8:	4803      	ldr	r0, [pc, #12]	; (da7e8 <_Z19__fetch_global_Wirev+0x40>)
   da7da:	f000 f80b 	bl	da7f4 <__aeabi_atexit>
	return wire;
}
   da7de:	4802      	ldr	r0, [pc, #8]	; (da7e8 <_Z19__fetch_global_Wirev+0x40>)
   da7e0:	b007      	add	sp, #28
   da7e2:	bd30      	pop	{r4, r5, pc}
   da7e4:	2003e70c 	.word	0x2003e70c
   da7e8:	2003e710 	.word	0x2003e710
   da7ec:	2003d400 	.word	0x2003d400
   da7f0:	000d9fb9 	.word	0x000d9fb9

000da7f4 <__aeabi_atexit>:
   da7f4:	460b      	mov	r3, r1
   da7f6:	4601      	mov	r1, r0
   da7f8:	4618      	mov	r0, r3
   da7fa:	f000 b969 	b.w	daad0 <__cxa_atexit>
	...

000da800 <_ZSt15get_new_handlerv>:
   da800:	4b02      	ldr	r3, [pc, #8]	; (da80c <_ZSt15get_new_handlerv+0xc>)
   da802:	6818      	ldr	r0, [r3, #0]
   da804:	f3bf 8f5f 	dmb	sy
   da808:	4770      	bx	lr
   da80a:	bf00      	nop
   da80c:	2003e724 	.word	0x2003e724

000da810 <_ZdlPvj>:
   da810:	f7f9 bc43 	b.w	d409a <_ZdlPv>

000da814 <_ZnajRKSt9nothrow_t>:
   da814:	f000 b800 	b.w	da818 <_ZnwjRKSt9nothrow_t>

000da818 <_ZnwjRKSt9nothrow_t>:
   da818:	b510      	push	{r4, lr}
   da81a:	2800      	cmp	r0, #0
   da81c:	bf14      	ite	ne
   da81e:	4604      	movne	r4, r0
   da820:	2401      	moveq	r4, #1
   da822:	4620      	mov	r0, r4
   da824:	f7fc fd10 	bl	d7248 <malloc>
   da828:	b920      	cbnz	r0, da834 <_ZnwjRKSt9nothrow_t+0x1c>
   da82a:	f7ff ffe9 	bl	da800 <_ZSt15get_new_handlerv>
   da82e:	b108      	cbz	r0, da834 <_ZnwjRKSt9nothrow_t+0x1c>
   da830:	4780      	blx	r0
   da832:	e7f6      	b.n	da822 <_ZnwjRKSt9nothrow_t+0xa>
   da834:	bd10      	pop	{r4, pc}
	...

000da838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da838:	4b18      	ldr	r3, [pc, #96]	; (da89c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da83a:	681a      	ldr	r2, [r3, #0]
   da83c:	07d1      	lsls	r1, r2, #31
   da83e:	bf5c      	itt	pl
   da840:	2201      	movpl	r2, #1
   da842:	601a      	strpl	r2, [r3, #0]
   da844:	4b16      	ldr	r3, [pc, #88]	; (da8a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da846:	681a      	ldr	r2, [r3, #0]
   da848:	07d2      	lsls	r2, r2, #31
   da84a:	bf5c      	itt	pl
   da84c:	2201      	movpl	r2, #1
   da84e:	601a      	strpl	r2, [r3, #0]
   da850:	4b14      	ldr	r3, [pc, #80]	; (da8a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da852:	681a      	ldr	r2, [r3, #0]
   da854:	07d0      	lsls	r0, r2, #31
   da856:	bf5c      	itt	pl
   da858:	2201      	movpl	r2, #1
   da85a:	601a      	strpl	r2, [r3, #0]
   da85c:	4b12      	ldr	r3, [pc, #72]	; (da8a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da85e:	681a      	ldr	r2, [r3, #0]
   da860:	07d1      	lsls	r1, r2, #31
   da862:	bf5c      	itt	pl
   da864:	2201      	movpl	r2, #1
   da866:	601a      	strpl	r2, [r3, #0]
   da868:	4b10      	ldr	r3, [pc, #64]	; (da8ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da86a:	681a      	ldr	r2, [r3, #0]
   da86c:	07d2      	lsls	r2, r2, #31
   da86e:	bf5c      	itt	pl
   da870:	2201      	movpl	r2, #1
   da872:	601a      	strpl	r2, [r3, #0]
   da874:	4b0e      	ldr	r3, [pc, #56]	; (da8b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da876:	681a      	ldr	r2, [r3, #0]
   da878:	07d0      	lsls	r0, r2, #31
   da87a:	bf5c      	itt	pl
   da87c:	2201      	movpl	r2, #1
   da87e:	601a      	strpl	r2, [r3, #0]
   da880:	4b0c      	ldr	r3, [pc, #48]	; (da8b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da882:	681a      	ldr	r2, [r3, #0]
   da884:	07d1      	lsls	r1, r2, #31
   da886:	bf5c      	itt	pl
   da888:	2201      	movpl	r2, #1
   da88a:	601a      	strpl	r2, [r3, #0]
   da88c:	4b0a      	ldr	r3, [pc, #40]	; (da8b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da88e:	681a      	ldr	r2, [r3, #0]
   da890:	07d2      	lsls	r2, r2, #31
   da892:	bf5c      	itt	pl
   da894:	2201      	movpl	r2, #1
   da896:	601a      	strpl	r2, [r3, #0]
   da898:	4770      	bx	lr
   da89a:	bf00      	nop
   da89c:	2003e744 	.word	0x2003e744
   da8a0:	2003e740 	.word	0x2003e740
   da8a4:	2003e73c 	.word	0x2003e73c
   da8a8:	2003e738 	.word	0x2003e738
   da8ac:	2003e734 	.word	0x2003e734
   da8b0:	2003e730 	.word	0x2003e730
   da8b4:	2003e72c 	.word	0x2003e72c
   da8b8:	2003e728 	.word	0x2003e728

000da8bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   da8bc:	4b24      	ldr	r3, [pc, #144]	; (da950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   da8be:	681a      	ldr	r2, [r3, #0]
   da8c0:	07d0      	lsls	r0, r2, #31
   da8c2:	bf5c      	itt	pl
   da8c4:	2201      	movpl	r2, #1
   da8c6:	601a      	strpl	r2, [r3, #0]
   da8c8:	4b22      	ldr	r3, [pc, #136]	; (da954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   da8ca:	681a      	ldr	r2, [r3, #0]
   da8cc:	07d1      	lsls	r1, r2, #31
   da8ce:	bf5c      	itt	pl
   da8d0:	2201      	movpl	r2, #1
   da8d2:	601a      	strpl	r2, [r3, #0]
   da8d4:	4b20      	ldr	r3, [pc, #128]	; (da958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   da8d6:	681a      	ldr	r2, [r3, #0]
   da8d8:	07d2      	lsls	r2, r2, #31
   da8da:	bf5c      	itt	pl
   da8dc:	2201      	movpl	r2, #1
   da8de:	601a      	strpl	r2, [r3, #0]
   da8e0:	4b1e      	ldr	r3, [pc, #120]	; (da95c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   da8e2:	681a      	ldr	r2, [r3, #0]
   da8e4:	07d0      	lsls	r0, r2, #31
   da8e6:	bf5c      	itt	pl
   da8e8:	2201      	movpl	r2, #1
   da8ea:	601a      	strpl	r2, [r3, #0]
   da8ec:	4b1c      	ldr	r3, [pc, #112]	; (da960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   da8ee:	681a      	ldr	r2, [r3, #0]
   da8f0:	07d1      	lsls	r1, r2, #31
   da8f2:	bf5c      	itt	pl
   da8f4:	2201      	movpl	r2, #1
   da8f6:	601a      	strpl	r2, [r3, #0]
   da8f8:	4b1a      	ldr	r3, [pc, #104]	; (da964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   da8fa:	681a      	ldr	r2, [r3, #0]
   da8fc:	07d2      	lsls	r2, r2, #31
   da8fe:	bf5c      	itt	pl
   da900:	2201      	movpl	r2, #1
   da902:	601a      	strpl	r2, [r3, #0]
   da904:	4b18      	ldr	r3, [pc, #96]	; (da968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   da906:	681a      	ldr	r2, [r3, #0]
   da908:	07d0      	lsls	r0, r2, #31
   da90a:	bf5c      	itt	pl
   da90c:	2201      	movpl	r2, #1
   da90e:	601a      	strpl	r2, [r3, #0]
   da910:	4b16      	ldr	r3, [pc, #88]	; (da96c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   da912:	681a      	ldr	r2, [r3, #0]
   da914:	07d1      	lsls	r1, r2, #31
   da916:	bf5c      	itt	pl
   da918:	2201      	movpl	r2, #1
   da91a:	601a      	strpl	r2, [r3, #0]
   da91c:	4b14      	ldr	r3, [pc, #80]	; (da970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   da91e:	681a      	ldr	r2, [r3, #0]
   da920:	07d2      	lsls	r2, r2, #31
   da922:	bf5c      	itt	pl
   da924:	2201      	movpl	r2, #1
   da926:	601a      	strpl	r2, [r3, #0]
   da928:	4b12      	ldr	r3, [pc, #72]	; (da974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   da92a:	681a      	ldr	r2, [r3, #0]
   da92c:	07d0      	lsls	r0, r2, #31
   da92e:	bf5c      	itt	pl
   da930:	2201      	movpl	r2, #1
   da932:	601a      	strpl	r2, [r3, #0]
   da934:	4b10      	ldr	r3, [pc, #64]	; (da978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   da936:	681a      	ldr	r2, [r3, #0]
   da938:	07d1      	lsls	r1, r2, #31
   da93a:	bf5c      	itt	pl
   da93c:	2201      	movpl	r2, #1
   da93e:	601a      	strpl	r2, [r3, #0]
   da940:	4b0e      	ldr	r3, [pc, #56]	; (da97c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   da942:	681a      	ldr	r2, [r3, #0]
   da944:	07d2      	lsls	r2, r2, #31
   da946:	bf5c      	itt	pl
   da948:	2201      	movpl	r2, #1
   da94a:	601a      	strpl	r2, [r3, #0]
   da94c:	4770      	bx	lr
   da94e:	bf00      	nop
   da950:	2003e774 	.word	0x2003e774
   da954:	2003e770 	.word	0x2003e770
   da958:	2003e76c 	.word	0x2003e76c
   da95c:	2003e768 	.word	0x2003e768
   da960:	2003e764 	.word	0x2003e764
   da964:	2003e760 	.word	0x2003e760
   da968:	2003e75c 	.word	0x2003e75c
   da96c:	2003e758 	.word	0x2003e758
   da970:	2003e754 	.word	0x2003e754
   da974:	2003e750 	.word	0x2003e750
   da978:	2003e74c 	.word	0x2003e74c
   da97c:	2003e748 	.word	0x2003e748

000da980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   da980:	4b24      	ldr	r3, [pc, #144]	; (daa14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   da982:	681a      	ldr	r2, [r3, #0]
   da984:	07d0      	lsls	r0, r2, #31
   da986:	bf5c      	itt	pl
   da988:	2201      	movpl	r2, #1
   da98a:	601a      	strpl	r2, [r3, #0]
   da98c:	4b22      	ldr	r3, [pc, #136]	; (daa18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   da98e:	681a      	ldr	r2, [r3, #0]
   da990:	07d1      	lsls	r1, r2, #31
   da992:	bf5c      	itt	pl
   da994:	2201      	movpl	r2, #1
   da996:	601a      	strpl	r2, [r3, #0]
   da998:	4b20      	ldr	r3, [pc, #128]	; (daa1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   da99a:	681a      	ldr	r2, [r3, #0]
   da99c:	07d2      	lsls	r2, r2, #31
   da99e:	bf5c      	itt	pl
   da9a0:	2201      	movpl	r2, #1
   da9a2:	601a      	strpl	r2, [r3, #0]
   da9a4:	4b1e      	ldr	r3, [pc, #120]	; (daa20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   da9a6:	681a      	ldr	r2, [r3, #0]
   da9a8:	07d0      	lsls	r0, r2, #31
   da9aa:	bf5c      	itt	pl
   da9ac:	2201      	movpl	r2, #1
   da9ae:	601a      	strpl	r2, [r3, #0]
   da9b0:	4b1c      	ldr	r3, [pc, #112]	; (daa24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   da9b2:	681a      	ldr	r2, [r3, #0]
   da9b4:	07d1      	lsls	r1, r2, #31
   da9b6:	bf5c      	itt	pl
   da9b8:	2201      	movpl	r2, #1
   da9ba:	601a      	strpl	r2, [r3, #0]
   da9bc:	4b1a      	ldr	r3, [pc, #104]	; (daa28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   da9be:	681a      	ldr	r2, [r3, #0]
   da9c0:	07d2      	lsls	r2, r2, #31
   da9c2:	bf5c      	itt	pl
   da9c4:	2201      	movpl	r2, #1
   da9c6:	601a      	strpl	r2, [r3, #0]
   da9c8:	4b18      	ldr	r3, [pc, #96]	; (daa2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   da9ca:	681a      	ldr	r2, [r3, #0]
   da9cc:	07d0      	lsls	r0, r2, #31
   da9ce:	bf5c      	itt	pl
   da9d0:	2201      	movpl	r2, #1
   da9d2:	601a      	strpl	r2, [r3, #0]
   da9d4:	4b16      	ldr	r3, [pc, #88]	; (daa30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   da9d6:	681a      	ldr	r2, [r3, #0]
   da9d8:	07d1      	lsls	r1, r2, #31
   da9da:	bf5c      	itt	pl
   da9dc:	2201      	movpl	r2, #1
   da9de:	601a      	strpl	r2, [r3, #0]
   da9e0:	4b14      	ldr	r3, [pc, #80]	; (daa34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   da9e2:	681a      	ldr	r2, [r3, #0]
   da9e4:	07d2      	lsls	r2, r2, #31
   da9e6:	bf5c      	itt	pl
   da9e8:	2201      	movpl	r2, #1
   da9ea:	601a      	strpl	r2, [r3, #0]
   da9ec:	4b12      	ldr	r3, [pc, #72]	; (daa38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   da9ee:	681a      	ldr	r2, [r3, #0]
   da9f0:	07d0      	lsls	r0, r2, #31
   da9f2:	bf5c      	itt	pl
   da9f4:	2201      	movpl	r2, #1
   da9f6:	601a      	strpl	r2, [r3, #0]
   da9f8:	4b10      	ldr	r3, [pc, #64]	; (daa3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   da9fa:	681a      	ldr	r2, [r3, #0]
   da9fc:	07d1      	lsls	r1, r2, #31
   da9fe:	bf5c      	itt	pl
   daa00:	2201      	movpl	r2, #1
   daa02:	601a      	strpl	r2, [r3, #0]
   daa04:	4b0e      	ldr	r3, [pc, #56]	; (daa40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   daa06:	681a      	ldr	r2, [r3, #0]
   daa08:	07d2      	lsls	r2, r2, #31
   daa0a:	bf5c      	itt	pl
   daa0c:	2201      	movpl	r2, #1
   daa0e:	601a      	strpl	r2, [r3, #0]
   daa10:	4770      	bx	lr
   daa12:	bf00      	nop
   daa14:	2003e7a4 	.word	0x2003e7a4
   daa18:	2003e7a0 	.word	0x2003e7a0
   daa1c:	2003e79c 	.word	0x2003e79c
   daa20:	2003e798 	.word	0x2003e798
   daa24:	2003e794 	.word	0x2003e794
   daa28:	2003e790 	.word	0x2003e790
   daa2c:	2003e78c 	.word	0x2003e78c
   daa30:	2003e788 	.word	0x2003e788
   daa34:	2003e784 	.word	0x2003e784
   daa38:	2003e780 	.word	0x2003e780
   daa3c:	2003e77c 	.word	0x2003e77c
   daa40:	2003e778 	.word	0x2003e778

000daa44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   daa44:	4b18      	ldr	r3, [pc, #96]	; (daaa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   daa46:	681a      	ldr	r2, [r3, #0]
   daa48:	07d1      	lsls	r1, r2, #31
   daa4a:	bf5c      	itt	pl
   daa4c:	2201      	movpl	r2, #1
   daa4e:	601a      	strpl	r2, [r3, #0]
   daa50:	4b16      	ldr	r3, [pc, #88]	; (daaac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   daa52:	681a      	ldr	r2, [r3, #0]
   daa54:	07d2      	lsls	r2, r2, #31
   daa56:	bf5c      	itt	pl
   daa58:	2201      	movpl	r2, #1
   daa5a:	601a      	strpl	r2, [r3, #0]
   daa5c:	4b14      	ldr	r3, [pc, #80]	; (daab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   daa5e:	681a      	ldr	r2, [r3, #0]
   daa60:	07d0      	lsls	r0, r2, #31
   daa62:	bf5c      	itt	pl
   daa64:	2201      	movpl	r2, #1
   daa66:	601a      	strpl	r2, [r3, #0]
   daa68:	4b12      	ldr	r3, [pc, #72]	; (daab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   daa6a:	681a      	ldr	r2, [r3, #0]
   daa6c:	07d1      	lsls	r1, r2, #31
   daa6e:	bf5c      	itt	pl
   daa70:	2201      	movpl	r2, #1
   daa72:	601a      	strpl	r2, [r3, #0]
   daa74:	4b10      	ldr	r3, [pc, #64]	; (daab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   daa76:	681a      	ldr	r2, [r3, #0]
   daa78:	07d2      	lsls	r2, r2, #31
   daa7a:	bf5c      	itt	pl
   daa7c:	2201      	movpl	r2, #1
   daa7e:	601a      	strpl	r2, [r3, #0]
   daa80:	4b0e      	ldr	r3, [pc, #56]	; (daabc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   daa82:	681a      	ldr	r2, [r3, #0]
   daa84:	07d0      	lsls	r0, r2, #31
   daa86:	bf5c      	itt	pl
   daa88:	2201      	movpl	r2, #1
   daa8a:	601a      	strpl	r2, [r3, #0]
   daa8c:	4b0c      	ldr	r3, [pc, #48]	; (daac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   daa8e:	681a      	ldr	r2, [r3, #0]
   daa90:	07d1      	lsls	r1, r2, #31
   daa92:	bf5c      	itt	pl
   daa94:	2201      	movpl	r2, #1
   daa96:	601a      	strpl	r2, [r3, #0]
   daa98:	4b0a      	ldr	r3, [pc, #40]	; (daac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   daa9a:	681a      	ldr	r2, [r3, #0]
   daa9c:	07d2      	lsls	r2, r2, #31
   daa9e:	bf5c      	itt	pl
   daaa0:	2201      	movpl	r2, #1
   daaa2:	601a      	strpl	r2, [r3, #0]
   daaa4:	4770      	bx	lr
   daaa6:	bf00      	nop
   daaa8:	2003e7c4 	.word	0x2003e7c4
   daaac:	2003e7c0 	.word	0x2003e7c0
   daab0:	2003e7bc 	.word	0x2003e7bc
   daab4:	2003e7b8 	.word	0x2003e7b8
   daab8:	2003e7b4 	.word	0x2003e7b4
   daabc:	2003e7b0 	.word	0x2003e7b0
   daac0:	2003e7ac 	.word	0x2003e7ac
   daac4:	2003e7a8 	.word	0x2003e7a8

000daac8 <atoi>:
   daac8:	220a      	movs	r2, #10
   daaca:	2100      	movs	r1, #0
   daacc:	f000 ba68 	b.w	dafa0 <strtol>

000daad0 <__cxa_atexit>:
   daad0:	b510      	push	{r4, lr}
   daad2:	4c05      	ldr	r4, [pc, #20]	; (daae8 <__cxa_atexit+0x18>)
   daad4:	4613      	mov	r3, r2
   daad6:	b12c      	cbz	r4, daae4 <__cxa_atexit+0x14>
   daad8:	460a      	mov	r2, r1
   daada:	4601      	mov	r1, r0
   daadc:	2002      	movs	r0, #2
   daade:	f3af 8000 	nop.w
   daae2:	bd10      	pop	{r4, pc}
   daae4:	4620      	mov	r0, r4
   daae6:	bd10      	pop	{r4, pc}
   daae8:	00000000 	.word	0x00000000

000daaec <localtime>:
   daaec:	b538      	push	{r3, r4, r5, lr}
   daaee:	4b07      	ldr	r3, [pc, #28]	; (dab0c <localtime+0x20>)
   daaf0:	681c      	ldr	r4, [r3, #0]
   daaf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   daaf4:	4605      	mov	r5, r0
   daaf6:	b91b      	cbnz	r3, dab00 <localtime+0x14>
   daaf8:	2024      	movs	r0, #36	; 0x24
   daafa:	f7fc fba5 	bl	d7248 <malloc>
   daafe:	63e0      	str	r0, [r4, #60]	; 0x3c
   dab00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dab02:	4628      	mov	r0, r5
   dab04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dab08:	f000 b802 	b.w	dab10 <localtime_r>
   dab0c:	2003d3b0 	.word	0x2003d3b0

000dab10 <localtime_r>:
   dab10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dab14:	460c      	mov	r4, r1
   dab16:	4680      	mov	r8, r0
   dab18:	f000 fd48 	bl	db5ac <__gettzinfo>
   dab1c:	4621      	mov	r1, r4
   dab1e:	4607      	mov	r7, r0
   dab20:	4640      	mov	r0, r8
   dab22:	f000 fd47 	bl	db5b4 <gmtime_r>
   dab26:	6946      	ldr	r6, [r0, #20]
   dab28:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   dab2c:	07b3      	lsls	r3, r6, #30
   dab2e:	4604      	mov	r4, r0
   dab30:	d105      	bne.n	dab3e <localtime_r+0x2e>
   dab32:	2264      	movs	r2, #100	; 0x64
   dab34:	fb96 f3f2 	sdiv	r3, r6, r2
   dab38:	fb02 6313 	mls	r3, r2, r3, r6
   dab3c:	b94b      	cbnz	r3, dab52 <localtime_r+0x42>
   dab3e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   dab42:	fb96 f3f5 	sdiv	r3, r6, r5
   dab46:	fb05 6513 	mls	r5, r5, r3, r6
   dab4a:	fab5 f385 	clz	r3, r5
   dab4e:	095b      	lsrs	r3, r3, #5
   dab50:	e000      	b.n	dab54 <localtime_r+0x44>
   dab52:	2301      	movs	r3, #1
   dab54:	4a5f      	ldr	r2, [pc, #380]	; (dacd4 <localtime_r+0x1c4>)
   dab56:	2530      	movs	r5, #48	; 0x30
   dab58:	fb05 2503 	mla	r5, r5, r3, r2
   dab5c:	f000 fb5a 	bl	db214 <__tz_lock>
   dab60:	f000 fb5a 	bl	db218 <_tzset_unlocked>
   dab64:	4b5c      	ldr	r3, [pc, #368]	; (dacd8 <localtime_r+0x1c8>)
   dab66:	681b      	ldr	r3, [r3, #0]
   dab68:	b1f3      	cbz	r3, daba8 <localtime_r+0x98>
   dab6a:	687b      	ldr	r3, [r7, #4]
   dab6c:	429e      	cmp	r6, r3
   dab6e:	d105      	bne.n	dab7c <localtime_r+0x6c>
   dab70:	6839      	ldr	r1, [r7, #0]
   dab72:	f8d8 3000 	ldr.w	r3, [r8]
   dab76:	69fa      	ldr	r2, [r7, #28]
   dab78:	b941      	cbnz	r1, dab8c <localtime_r+0x7c>
   dab7a:	e00a      	b.n	dab92 <localtime_r+0x82>
   dab7c:	4630      	mov	r0, r6
   dab7e:	f000 faa1 	bl	db0c4 <__tzcalc_limits>
   dab82:	2800      	cmp	r0, #0
   dab84:	d1f4      	bne.n	dab70 <localtime_r+0x60>
   dab86:	f04f 33ff 	mov.w	r3, #4294967295
   dab8a:	e00d      	b.n	daba8 <localtime_r+0x98>
   dab8c:	4293      	cmp	r3, r2
   dab8e:	db08      	blt.n	daba2 <localtime_r+0x92>
   dab90:	e001      	b.n	dab96 <localtime_r+0x86>
   dab92:	4293      	cmp	r3, r2
   dab94:	da07      	bge.n	daba6 <localtime_r+0x96>
   dab96:	6bba      	ldr	r2, [r7, #56]	; 0x38
   dab98:	4293      	cmp	r3, r2
   dab9a:	bfac      	ite	ge
   dab9c:	2300      	movge	r3, #0
   dab9e:	2301      	movlt	r3, #1
   daba0:	e002      	b.n	daba8 <localtime_r+0x98>
   daba2:	2300      	movs	r3, #0
   daba4:	e000      	b.n	daba8 <localtime_r+0x98>
   daba6:	2301      	movs	r3, #1
   daba8:	6223      	str	r3, [r4, #32]
   dabaa:	6a23      	ldr	r3, [r4, #32]
   dabac:	2b01      	cmp	r3, #1
   dabae:	bf0c      	ite	eq
   dabb0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   dabb2:	6a39      	ldrne	r1, [r7, #32]
   dabb4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dabb8:	203c      	movs	r0, #60	; 0x3c
   dabba:	fb91 f6f3 	sdiv	r6, r1, r3
   dabbe:	fb03 1316 	mls	r3, r3, r6, r1
   dabc2:	6861      	ldr	r1, [r4, #4]
   dabc4:	fb93 f2f0 	sdiv	r2, r3, r0
   dabc8:	fb00 3012 	mls	r0, r0, r2, r3
   dabcc:	6823      	ldr	r3, [r4, #0]
   dabce:	1a89      	subs	r1, r1, r2
   dabd0:	68a2      	ldr	r2, [r4, #8]
   dabd2:	6061      	str	r1, [r4, #4]
   dabd4:	1a1b      	subs	r3, r3, r0
   dabd6:	1b92      	subs	r2, r2, r6
   dabd8:	2b3b      	cmp	r3, #59	; 0x3b
   dabda:	6023      	str	r3, [r4, #0]
   dabdc:	60a2      	str	r2, [r4, #8]
   dabde:	dd03      	ble.n	dabe8 <localtime_r+0xd8>
   dabe0:	3101      	adds	r1, #1
   dabe2:	6061      	str	r1, [r4, #4]
   dabe4:	3b3c      	subs	r3, #60	; 0x3c
   dabe6:	e004      	b.n	dabf2 <localtime_r+0xe2>
   dabe8:	2b00      	cmp	r3, #0
   dabea:	da03      	bge.n	dabf4 <localtime_r+0xe4>
   dabec:	3901      	subs	r1, #1
   dabee:	6061      	str	r1, [r4, #4]
   dabf0:	333c      	adds	r3, #60	; 0x3c
   dabf2:	6023      	str	r3, [r4, #0]
   dabf4:	6863      	ldr	r3, [r4, #4]
   dabf6:	2b3b      	cmp	r3, #59	; 0x3b
   dabf8:	dd03      	ble.n	dac02 <localtime_r+0xf2>
   dabfa:	3201      	adds	r2, #1
   dabfc:	60a2      	str	r2, [r4, #8]
   dabfe:	3b3c      	subs	r3, #60	; 0x3c
   dac00:	e004      	b.n	dac0c <localtime_r+0xfc>
   dac02:	2b00      	cmp	r3, #0
   dac04:	da03      	bge.n	dac0e <localtime_r+0xfe>
   dac06:	3a01      	subs	r2, #1
   dac08:	60a2      	str	r2, [r4, #8]
   dac0a:	333c      	adds	r3, #60	; 0x3c
   dac0c:	6063      	str	r3, [r4, #4]
   dac0e:	68a3      	ldr	r3, [r4, #8]
   dac10:	2b17      	cmp	r3, #23
   dac12:	dd22      	ble.n	dac5a <localtime_r+0x14a>
   dac14:	69e2      	ldr	r2, [r4, #28]
   dac16:	3201      	adds	r2, #1
   dac18:	61e2      	str	r2, [r4, #28]
   dac1a:	69a2      	ldr	r2, [r4, #24]
   dac1c:	3201      	adds	r2, #1
   dac1e:	2a06      	cmp	r2, #6
   dac20:	bfc8      	it	gt
   dac22:	2200      	movgt	r2, #0
   dac24:	61a2      	str	r2, [r4, #24]
   dac26:	68e2      	ldr	r2, [r4, #12]
   dac28:	3b18      	subs	r3, #24
   dac2a:	3201      	adds	r2, #1
   dac2c:	60a3      	str	r3, [r4, #8]
   dac2e:	6923      	ldr	r3, [r4, #16]
   dac30:	60e2      	str	r2, [r4, #12]
   dac32:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   dac36:	428a      	cmp	r2, r1
   dac38:	dd46      	ble.n	dacc8 <localtime_r+0x1b8>
   dac3a:	3301      	adds	r3, #1
   dac3c:	2b0c      	cmp	r3, #12
   dac3e:	bf0c      	ite	eq
   dac40:	6963      	ldreq	r3, [r4, #20]
   dac42:	6123      	strne	r3, [r4, #16]
   dac44:	eba2 0201 	sub.w	r2, r2, r1
   dac48:	60e2      	str	r2, [r4, #12]
   dac4a:	bf01      	itttt	eq
   dac4c:	3301      	addeq	r3, #1
   dac4e:	2200      	moveq	r2, #0
   dac50:	6122      	streq	r2, [r4, #16]
   dac52:	6163      	streq	r3, [r4, #20]
   dac54:	bf08      	it	eq
   dac56:	61e2      	streq	r2, [r4, #28]
   dac58:	e036      	b.n	dacc8 <localtime_r+0x1b8>
   dac5a:	2b00      	cmp	r3, #0
   dac5c:	da34      	bge.n	dacc8 <localtime_r+0x1b8>
   dac5e:	69e2      	ldr	r2, [r4, #28]
   dac60:	3a01      	subs	r2, #1
   dac62:	61e2      	str	r2, [r4, #28]
   dac64:	69a2      	ldr	r2, [r4, #24]
   dac66:	3a01      	subs	r2, #1
   dac68:	bf48      	it	mi
   dac6a:	2206      	movmi	r2, #6
   dac6c:	61a2      	str	r2, [r4, #24]
   dac6e:	68e2      	ldr	r2, [r4, #12]
   dac70:	3318      	adds	r3, #24
   dac72:	3a01      	subs	r2, #1
   dac74:	60e2      	str	r2, [r4, #12]
   dac76:	60a3      	str	r3, [r4, #8]
   dac78:	bb32      	cbnz	r2, dacc8 <localtime_r+0x1b8>
   dac7a:	6923      	ldr	r3, [r4, #16]
   dac7c:	3b01      	subs	r3, #1
   dac7e:	d401      	bmi.n	dac84 <localtime_r+0x174>
   dac80:	6123      	str	r3, [r4, #16]
   dac82:	e01d      	b.n	dacc0 <localtime_r+0x1b0>
   dac84:	230b      	movs	r3, #11
   dac86:	6123      	str	r3, [r4, #16]
   dac88:	6963      	ldr	r3, [r4, #20]
   dac8a:	1e5a      	subs	r2, r3, #1
   dac8c:	f012 0f03 	tst.w	r2, #3
   dac90:	6162      	str	r2, [r4, #20]
   dac92:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   dac96:	d105      	bne.n	daca4 <localtime_r+0x194>
   dac98:	2164      	movs	r1, #100	; 0x64
   dac9a:	fb93 f2f1 	sdiv	r2, r3, r1
   dac9e:	fb01 3212 	mls	r2, r1, r2, r3
   daca2:	b94a      	cbnz	r2, dacb8 <localtime_r+0x1a8>
   daca4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   daca8:	fb93 f2f1 	sdiv	r2, r3, r1
   dacac:	fb01 3312 	mls	r3, r1, r2, r3
   dacb0:	fab3 f383 	clz	r3, r3
   dacb4:	095b      	lsrs	r3, r3, #5
   dacb6:	e000      	b.n	dacba <localtime_r+0x1aa>
   dacb8:	2301      	movs	r3, #1
   dacba:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   dacbe:	61e3      	str	r3, [r4, #28]
   dacc0:	6923      	ldr	r3, [r4, #16]
   dacc2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   dacc6:	60e3      	str	r3, [r4, #12]
   dacc8:	f000 faa5 	bl	db216 <__tz_unlock>
   daccc:	4620      	mov	r0, r4
   dacce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dacd2:	bf00      	nop
   dacd4:	000dc2fc 	.word	0x000dc2fc
   dacd8:	2003e7e4 	.word	0x2003e7e4

000dacdc <memcmp>:
   dacdc:	b510      	push	{r4, lr}
   dacde:	3901      	subs	r1, #1
   dace0:	4402      	add	r2, r0
   dace2:	4290      	cmp	r0, r2
   dace4:	d007      	beq.n	dacf6 <memcmp+0x1a>
   dace6:	f810 3b01 	ldrb.w	r3, [r0], #1
   dacea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dacee:	42a3      	cmp	r3, r4
   dacf0:	d0f7      	beq.n	dace2 <memcmp+0x6>
   dacf2:	1b18      	subs	r0, r3, r4
   dacf4:	bd10      	pop	{r4, pc}
   dacf6:	2000      	movs	r0, #0
   dacf8:	bd10      	pop	{r4, pc}

000dacfa <memcpy>:
   dacfa:	b510      	push	{r4, lr}
   dacfc:	1e43      	subs	r3, r0, #1
   dacfe:	440a      	add	r2, r1
   dad00:	4291      	cmp	r1, r2
   dad02:	d004      	beq.n	dad0e <memcpy+0x14>
   dad04:	f811 4b01 	ldrb.w	r4, [r1], #1
   dad08:	f803 4f01 	strb.w	r4, [r3, #1]!
   dad0c:	e7f8      	b.n	dad00 <memcpy+0x6>
   dad0e:	bd10      	pop	{r4, pc}

000dad10 <memmove>:
   dad10:	4288      	cmp	r0, r1
   dad12:	b510      	push	{r4, lr}
   dad14:	eb01 0302 	add.w	r3, r1, r2
   dad18:	d801      	bhi.n	dad1e <memmove+0xe>
   dad1a:	1e42      	subs	r2, r0, #1
   dad1c:	e00b      	b.n	dad36 <memmove+0x26>
   dad1e:	4298      	cmp	r0, r3
   dad20:	d2fb      	bcs.n	dad1a <memmove+0xa>
   dad22:	1881      	adds	r1, r0, r2
   dad24:	1ad2      	subs	r2, r2, r3
   dad26:	42d3      	cmn	r3, r2
   dad28:	d004      	beq.n	dad34 <memmove+0x24>
   dad2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dad2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
   dad32:	e7f8      	b.n	dad26 <memmove+0x16>
   dad34:	bd10      	pop	{r4, pc}
   dad36:	4299      	cmp	r1, r3
   dad38:	d004      	beq.n	dad44 <memmove+0x34>
   dad3a:	f811 4b01 	ldrb.w	r4, [r1], #1
   dad3e:	f802 4f01 	strb.w	r4, [r2, #1]!
   dad42:	e7f8      	b.n	dad36 <memmove+0x26>
   dad44:	bd10      	pop	{r4, pc}

000dad46 <memset>:
   dad46:	4402      	add	r2, r0
   dad48:	4603      	mov	r3, r0
   dad4a:	4293      	cmp	r3, r2
   dad4c:	d002      	beq.n	dad54 <memset+0xe>
   dad4e:	f803 1b01 	strb.w	r1, [r3], #1
   dad52:	e7fa      	b.n	dad4a <memset+0x4>
   dad54:	4770      	bx	lr
	...

000dad58 <srand>:
   dad58:	b538      	push	{r3, r4, r5, lr}
   dad5a:	4b12      	ldr	r3, [pc, #72]	; (dada4 <srand+0x4c>)
   dad5c:	681c      	ldr	r4, [r3, #0]
   dad5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dad60:	4605      	mov	r5, r0
   dad62:	b9d3      	cbnz	r3, dad9a <srand+0x42>
   dad64:	2018      	movs	r0, #24
   dad66:	f7fc fa6f 	bl	d7248 <malloc>
   dad6a:	f243 330e 	movw	r3, #13070	; 0x330e
   dad6e:	63a0      	str	r0, [r4, #56]	; 0x38
   dad70:	8003      	strh	r3, [r0, #0]
   dad72:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dad76:	8043      	strh	r3, [r0, #2]
   dad78:	f241 2334 	movw	r3, #4660	; 0x1234
   dad7c:	8083      	strh	r3, [r0, #4]
   dad7e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dad82:	80c3      	strh	r3, [r0, #6]
   dad84:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dad88:	8103      	strh	r3, [r0, #8]
   dad8a:	2305      	movs	r3, #5
   dad8c:	8143      	strh	r3, [r0, #10]
   dad8e:	230b      	movs	r3, #11
   dad90:	8183      	strh	r3, [r0, #12]
   dad92:	2201      	movs	r2, #1
   dad94:	2300      	movs	r3, #0
   dad96:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dad9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dad9c:	2200      	movs	r2, #0
   dad9e:	611d      	str	r5, [r3, #16]
   dada0:	615a      	str	r2, [r3, #20]
   dada2:	bd38      	pop	{r3, r4, r5, pc}
   dada4:	2003d3b0 	.word	0x2003d3b0

000dada8 <strcat>:
   dada8:	b510      	push	{r4, lr}
   dadaa:	4602      	mov	r2, r0
   dadac:	4613      	mov	r3, r2
   dadae:	3201      	adds	r2, #1
   dadb0:	781c      	ldrb	r4, [r3, #0]
   dadb2:	2c00      	cmp	r4, #0
   dadb4:	d1fa      	bne.n	dadac <strcat+0x4>
   dadb6:	3b01      	subs	r3, #1
   dadb8:	f811 2b01 	ldrb.w	r2, [r1], #1
   dadbc:	f803 2f01 	strb.w	r2, [r3, #1]!
   dadc0:	2a00      	cmp	r2, #0
   dadc2:	d1f9      	bne.n	dadb8 <strcat+0x10>
   dadc4:	bd10      	pop	{r4, pc}

000dadc6 <strchr>:
   dadc6:	b2c9      	uxtb	r1, r1
   dadc8:	4603      	mov	r3, r0
   dadca:	f810 2b01 	ldrb.w	r2, [r0], #1
   dadce:	b11a      	cbz	r2, dadd8 <strchr+0x12>
   dadd0:	4291      	cmp	r1, r2
   dadd2:	d1f9      	bne.n	dadc8 <strchr+0x2>
   dadd4:	4618      	mov	r0, r3
   dadd6:	4770      	bx	lr
   dadd8:	2900      	cmp	r1, #0
   dadda:	bf0c      	ite	eq
   daddc:	4618      	moveq	r0, r3
   dadde:	2000      	movne	r0, #0
   dade0:	4770      	bx	lr

000dade2 <strchrnul>:
   dade2:	b510      	push	{r4, lr}
   dade4:	4604      	mov	r4, r0
   dade6:	f7ff ffee 	bl	dadc6 <strchr>
   dadea:	b918      	cbnz	r0, dadf4 <strchrnul+0x12>
   dadec:	4620      	mov	r0, r4
   dadee:	f000 f814 	bl	dae1a <strlen>
   dadf2:	4420      	add	r0, r4
   dadf4:	bd10      	pop	{r4, pc}

000dadf6 <strcmp>:
   dadf6:	f810 2b01 	ldrb.w	r2, [r0], #1
   dadfa:	f811 3b01 	ldrb.w	r3, [r1], #1
   dadfe:	2a01      	cmp	r2, #1
   dae00:	bf28      	it	cs
   dae02:	429a      	cmpcs	r2, r3
   dae04:	d0f7      	beq.n	dadf6 <strcmp>
   dae06:	1ad0      	subs	r0, r2, r3
   dae08:	4770      	bx	lr

000dae0a <strcpy>:
   dae0a:	4603      	mov	r3, r0
   dae0c:	f811 2b01 	ldrb.w	r2, [r1], #1
   dae10:	f803 2b01 	strb.w	r2, [r3], #1
   dae14:	2a00      	cmp	r2, #0
   dae16:	d1f9      	bne.n	dae0c <strcpy+0x2>
   dae18:	4770      	bx	lr

000dae1a <strlen>:
   dae1a:	4603      	mov	r3, r0
   dae1c:	f813 2b01 	ldrb.w	r2, [r3], #1
   dae20:	2a00      	cmp	r2, #0
   dae22:	d1fb      	bne.n	dae1c <strlen+0x2>
   dae24:	1a18      	subs	r0, r3, r0
   dae26:	3801      	subs	r0, #1
   dae28:	4770      	bx	lr

000dae2a <strncmp>:
   dae2a:	b530      	push	{r4, r5, lr}
   dae2c:	b182      	cbz	r2, dae50 <strncmp+0x26>
   dae2e:	1e45      	subs	r5, r0, #1
   dae30:	3901      	subs	r1, #1
   dae32:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dae36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dae3a:	42a3      	cmp	r3, r4
   dae3c:	d106      	bne.n	dae4c <strncmp+0x22>
   dae3e:	43ec      	mvns	r4, r5
   dae40:	4414      	add	r4, r2
   dae42:	42e0      	cmn	r0, r4
   dae44:	d001      	beq.n	dae4a <strncmp+0x20>
   dae46:	2b00      	cmp	r3, #0
   dae48:	d1f3      	bne.n	dae32 <strncmp+0x8>
   dae4a:	461c      	mov	r4, r3
   dae4c:	1b18      	subs	r0, r3, r4
   dae4e:	bd30      	pop	{r4, r5, pc}
   dae50:	4610      	mov	r0, r2
   dae52:	bd30      	pop	{r4, r5, pc}

000dae54 <strnlen>:
   dae54:	b510      	push	{r4, lr}
   dae56:	4603      	mov	r3, r0
   dae58:	4401      	add	r1, r0
   dae5a:	428b      	cmp	r3, r1
   dae5c:	d004      	beq.n	dae68 <strnlen+0x14>
   dae5e:	781a      	ldrb	r2, [r3, #0]
   dae60:	1c5c      	adds	r4, r3, #1
   dae62:	b10a      	cbz	r2, dae68 <strnlen+0x14>
   dae64:	4623      	mov	r3, r4
   dae66:	e7f8      	b.n	dae5a <strnlen+0x6>
   dae68:	1a18      	subs	r0, r3, r0
   dae6a:	bd10      	pop	{r4, pc}

000dae6c <strrchr>:
   dae6c:	b538      	push	{r3, r4, r5, lr}
   dae6e:	4603      	mov	r3, r0
   dae70:	460d      	mov	r5, r1
   dae72:	b141      	cbz	r1, dae86 <strrchr+0x1a>
   dae74:	2400      	movs	r4, #0
   dae76:	4629      	mov	r1, r5
   dae78:	4618      	mov	r0, r3
   dae7a:	f7ff ffa4 	bl	dadc6 <strchr>
   dae7e:	b130      	cbz	r0, dae8e <strrchr+0x22>
   dae80:	1c43      	adds	r3, r0, #1
   dae82:	4604      	mov	r4, r0
   dae84:	e7f7      	b.n	dae76 <strrchr+0xa>
   dae86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dae8a:	f7ff bf9c 	b.w	dadc6 <strchr>
   dae8e:	4620      	mov	r0, r4
   dae90:	bd38      	pop	{r3, r4, r5, pc}
	...

000dae94 <_strtol_r>:
   dae94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dae98:	4680      	mov	r8, r0
   dae9a:	4840      	ldr	r0, [pc, #256]	; (daf9c <_strtol_r+0x108>)
   dae9c:	f8d0 9000 	ldr.w	r9, [r0]
   daea0:	460f      	mov	r7, r1
   daea2:	463d      	mov	r5, r7
   daea4:	f815 4b01 	ldrb.w	r4, [r5], #1
   daea8:	eb09 0004 	add.w	r0, r9, r4
   daeac:	7840      	ldrb	r0, [r0, #1]
   daeae:	f000 0008 	and.w	r0, r0, #8
   daeb2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   daeb6:	b108      	cbz	r0, daebc <_strtol_r+0x28>
   daeb8:	462f      	mov	r7, r5
   daeba:	e7f2      	b.n	daea2 <_strtol_r+0xe>
   daebc:	2c2d      	cmp	r4, #45	; 0x2d
   daebe:	d103      	bne.n	daec8 <_strtol_r+0x34>
   daec0:	1cbd      	adds	r5, r7, #2
   daec2:	787c      	ldrb	r4, [r7, #1]
   daec4:	2601      	movs	r6, #1
   daec6:	e003      	b.n	daed0 <_strtol_r+0x3c>
   daec8:	2c2b      	cmp	r4, #43	; 0x2b
   daeca:	bf04      	itt	eq
   daecc:	787c      	ldrbeq	r4, [r7, #1]
   daece:	1cbd      	addeq	r5, r7, #2
   daed0:	b113      	cbz	r3, daed8 <_strtol_r+0x44>
   daed2:	2b10      	cmp	r3, #16
   daed4:	d10a      	bne.n	daeec <_strtol_r+0x58>
   daed6:	e05b      	b.n	daf90 <_strtol_r+0xfc>
   daed8:	2c30      	cmp	r4, #48	; 0x30
   daeda:	d157      	bne.n	daf8c <_strtol_r+0xf8>
   daedc:	7828      	ldrb	r0, [r5, #0]
   daede:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   daee2:	2858      	cmp	r0, #88	; 0x58
   daee4:	d14d      	bne.n	daf82 <_strtol_r+0xee>
   daee6:	786c      	ldrb	r4, [r5, #1]
   daee8:	2310      	movs	r3, #16
   daeea:	3502      	adds	r5, #2
   daeec:	2e00      	cmp	r6, #0
   daeee:	bf14      	ite	ne
   daef0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   daef4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   daef8:	2700      	movs	r7, #0
   daefa:	fbbc faf3 	udiv	sl, ip, r3
   daefe:	4638      	mov	r0, r7
   daf00:	fb03 cc1a 	mls	ip, r3, sl, ip
   daf04:	eb09 0e04 	add.w	lr, r9, r4
   daf08:	f89e e001 	ldrb.w	lr, [lr, #1]
   daf0c:	f01e 0f04 	tst.w	lr, #4
   daf10:	d001      	beq.n	daf16 <_strtol_r+0x82>
   daf12:	3c30      	subs	r4, #48	; 0x30
   daf14:	e00b      	b.n	daf2e <_strtol_r+0x9a>
   daf16:	f01e 0e03 	ands.w	lr, lr, #3
   daf1a:	d01b      	beq.n	daf54 <_strtol_r+0xc0>
   daf1c:	f1be 0f01 	cmp.w	lr, #1
   daf20:	bf0c      	ite	eq
   daf22:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   daf26:	f04f 0e57 	movne.w	lr, #87	; 0x57
   daf2a:	ebce 0404 	rsb	r4, lr, r4
   daf2e:	42a3      	cmp	r3, r4
   daf30:	dd10      	ble.n	daf54 <_strtol_r+0xc0>
   daf32:	f1b7 3fff 	cmp.w	r7, #4294967295
   daf36:	d00a      	beq.n	daf4e <_strtol_r+0xba>
   daf38:	4550      	cmp	r0, sl
   daf3a:	d806      	bhi.n	daf4a <_strtol_r+0xb6>
   daf3c:	d101      	bne.n	daf42 <_strtol_r+0xae>
   daf3e:	4564      	cmp	r4, ip
   daf40:	dc03      	bgt.n	daf4a <_strtol_r+0xb6>
   daf42:	fb03 4000 	mla	r0, r3, r0, r4
   daf46:	2701      	movs	r7, #1
   daf48:	e001      	b.n	daf4e <_strtol_r+0xba>
   daf4a:	f04f 37ff 	mov.w	r7, #4294967295
   daf4e:	f815 4b01 	ldrb.w	r4, [r5], #1
   daf52:	e7d7      	b.n	daf04 <_strtol_r+0x70>
   daf54:	1c7b      	adds	r3, r7, #1
   daf56:	d10c      	bne.n	daf72 <_strtol_r+0xde>
   daf58:	2e00      	cmp	r6, #0
   daf5a:	f04f 0322 	mov.w	r3, #34	; 0x22
   daf5e:	bf14      	ite	ne
   daf60:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   daf64:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   daf68:	f8c8 3000 	str.w	r3, [r8]
   daf6c:	b92a      	cbnz	r2, daf7a <_strtol_r+0xe6>
   daf6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daf72:	b106      	cbz	r6, daf76 <_strtol_r+0xe2>
   daf74:	4240      	negs	r0, r0
   daf76:	b172      	cbz	r2, daf96 <_strtol_r+0x102>
   daf78:	b107      	cbz	r7, daf7c <_strtol_r+0xe8>
   daf7a:	1e69      	subs	r1, r5, #1
   daf7c:	6011      	str	r1, [r2, #0]
   daf7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daf82:	2430      	movs	r4, #48	; 0x30
   daf84:	2b00      	cmp	r3, #0
   daf86:	d1b1      	bne.n	daeec <_strtol_r+0x58>
   daf88:	2308      	movs	r3, #8
   daf8a:	e7af      	b.n	daeec <_strtol_r+0x58>
   daf8c:	230a      	movs	r3, #10
   daf8e:	e7ad      	b.n	daeec <_strtol_r+0x58>
   daf90:	2c30      	cmp	r4, #48	; 0x30
   daf92:	d0a3      	beq.n	daedc <_strtol_r+0x48>
   daf94:	e7aa      	b.n	daeec <_strtol_r+0x58>
   daf96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daf9a:	bf00      	nop
   daf9c:	2003d34c 	.word	0x2003d34c

000dafa0 <strtol>:
   dafa0:	4613      	mov	r3, r2
   dafa2:	460a      	mov	r2, r1
   dafa4:	4601      	mov	r1, r0
   dafa6:	4802      	ldr	r0, [pc, #8]	; (dafb0 <strtol+0x10>)
   dafa8:	6800      	ldr	r0, [r0, #0]
   dafaa:	f7ff bf73 	b.w	dae94 <_strtol_r>
   dafae:	bf00      	nop
   dafb0:	2003d3b0 	.word	0x2003d3b0

000dafb4 <_strtoul_r>:
   dafb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dafb8:	4680      	mov	r8, r0
   dafba:	483c      	ldr	r0, [pc, #240]	; (db0ac <_strtoul_r+0xf8>)
   dafbc:	f8d0 9000 	ldr.w	r9, [r0]
   dafc0:	460e      	mov	r6, r1
   dafc2:	4635      	mov	r5, r6
   dafc4:	f815 4b01 	ldrb.w	r4, [r5], #1
   dafc8:	eb09 0004 	add.w	r0, r9, r4
   dafcc:	7840      	ldrb	r0, [r0, #1]
   dafce:	f000 0008 	and.w	r0, r0, #8
   dafd2:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dafd6:	b108      	cbz	r0, dafdc <_strtoul_r+0x28>
   dafd8:	462e      	mov	r6, r5
   dafda:	e7f2      	b.n	dafc2 <_strtoul_r+0xe>
   dafdc:	2c2d      	cmp	r4, #45	; 0x2d
   dafde:	d103      	bne.n	dafe8 <_strtoul_r+0x34>
   dafe0:	1cb5      	adds	r5, r6, #2
   dafe2:	7874      	ldrb	r4, [r6, #1]
   dafe4:	2701      	movs	r7, #1
   dafe6:	e003      	b.n	daff0 <_strtoul_r+0x3c>
   dafe8:	2c2b      	cmp	r4, #43	; 0x2b
   dafea:	bf04      	itt	eq
   dafec:	7874      	ldrbeq	r4, [r6, #1]
   dafee:	1cb5      	addeq	r5, r6, #2
   daff0:	b113      	cbz	r3, daff8 <_strtoul_r+0x44>
   daff2:	2b10      	cmp	r3, #16
   daff4:	d10a      	bne.n	db00c <_strtoul_r+0x58>
   daff6:	e053      	b.n	db0a0 <_strtoul_r+0xec>
   daff8:	2c30      	cmp	r4, #48	; 0x30
   daffa:	d14f      	bne.n	db09c <_strtoul_r+0xe8>
   daffc:	7828      	ldrb	r0, [r5, #0]
   daffe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   db002:	2858      	cmp	r0, #88	; 0x58
   db004:	d145      	bne.n	db092 <_strtoul_r+0xde>
   db006:	786c      	ldrb	r4, [r5, #1]
   db008:	2310      	movs	r3, #16
   db00a:	3502      	adds	r5, #2
   db00c:	f04f 3cff 	mov.w	ip, #4294967295
   db010:	2600      	movs	r6, #0
   db012:	fbbc fcf3 	udiv	ip, ip, r3
   db016:	fb03 fa0c 	mul.w	sl, r3, ip
   db01a:	ea6f 0a0a 	mvn.w	sl, sl
   db01e:	4630      	mov	r0, r6
   db020:	eb09 0e04 	add.w	lr, r9, r4
   db024:	f89e e001 	ldrb.w	lr, [lr, #1]
   db028:	f01e 0f04 	tst.w	lr, #4
   db02c:	d001      	beq.n	db032 <_strtoul_r+0x7e>
   db02e:	3c30      	subs	r4, #48	; 0x30
   db030:	e00b      	b.n	db04a <_strtoul_r+0x96>
   db032:	f01e 0e03 	ands.w	lr, lr, #3
   db036:	d01a      	beq.n	db06e <_strtoul_r+0xba>
   db038:	f1be 0f01 	cmp.w	lr, #1
   db03c:	bf0c      	ite	eq
   db03e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   db042:	f04f 0e57 	movne.w	lr, #87	; 0x57
   db046:	ebce 0404 	rsb	r4, lr, r4
   db04a:	42a3      	cmp	r3, r4
   db04c:	dd0f      	ble.n	db06e <_strtoul_r+0xba>
   db04e:	2e00      	cmp	r6, #0
   db050:	db08      	blt.n	db064 <_strtoul_r+0xb0>
   db052:	4560      	cmp	r0, ip
   db054:	d806      	bhi.n	db064 <_strtoul_r+0xb0>
   db056:	d101      	bne.n	db05c <_strtoul_r+0xa8>
   db058:	4554      	cmp	r4, sl
   db05a:	dc03      	bgt.n	db064 <_strtoul_r+0xb0>
   db05c:	fb03 4000 	mla	r0, r3, r0, r4
   db060:	2601      	movs	r6, #1
   db062:	e001      	b.n	db068 <_strtoul_r+0xb4>
   db064:	f04f 36ff 	mov.w	r6, #4294967295
   db068:	f815 4b01 	ldrb.w	r4, [r5], #1
   db06c:	e7d8      	b.n	db020 <_strtoul_r+0x6c>
   db06e:	2e00      	cmp	r6, #0
   db070:	da07      	bge.n	db082 <_strtoul_r+0xce>
   db072:	2322      	movs	r3, #34	; 0x22
   db074:	f8c8 3000 	str.w	r3, [r8]
   db078:	f04f 30ff 	mov.w	r0, #4294967295
   db07c:	b92a      	cbnz	r2, db08a <_strtoul_r+0xd6>
   db07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db082:	b107      	cbz	r7, db086 <_strtoul_r+0xd2>
   db084:	4240      	negs	r0, r0
   db086:	b172      	cbz	r2, db0a6 <_strtoul_r+0xf2>
   db088:	b106      	cbz	r6, db08c <_strtoul_r+0xd8>
   db08a:	1e69      	subs	r1, r5, #1
   db08c:	6011      	str	r1, [r2, #0]
   db08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db092:	2430      	movs	r4, #48	; 0x30
   db094:	2b00      	cmp	r3, #0
   db096:	d1b9      	bne.n	db00c <_strtoul_r+0x58>
   db098:	2308      	movs	r3, #8
   db09a:	e7b7      	b.n	db00c <_strtoul_r+0x58>
   db09c:	230a      	movs	r3, #10
   db09e:	e7b5      	b.n	db00c <_strtoul_r+0x58>
   db0a0:	2c30      	cmp	r4, #48	; 0x30
   db0a2:	d0ab      	beq.n	daffc <_strtoul_r+0x48>
   db0a4:	e7b2      	b.n	db00c <_strtoul_r+0x58>
   db0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db0aa:	bf00      	nop
   db0ac:	2003d34c 	.word	0x2003d34c

000db0b0 <strtoul>:
   db0b0:	4613      	mov	r3, r2
   db0b2:	460a      	mov	r2, r1
   db0b4:	4601      	mov	r1, r0
   db0b6:	4802      	ldr	r0, [pc, #8]	; (db0c0 <strtoul+0x10>)
   db0b8:	6800      	ldr	r0, [r0, #0]
   db0ba:	f7ff bf7b 	b.w	dafb4 <_strtoul_r>
   db0be:	bf00      	nop
   db0c0:	2003d3b0 	.word	0x2003d3b0

000db0c4 <__tzcalc_limits>:
   db0c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db0c8:	4604      	mov	r4, r0
   db0ca:	f000 fa6f 	bl	db5ac <__gettzinfo>
   db0ce:	f240 73b1 	movw	r3, #1969	; 0x7b1
   db0d2:	429c      	cmp	r4, r3
   db0d4:	f340 8096 	ble.w	db204 <__tzcalc_limits+0x140>
   db0d8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   db0dc:	18e3      	adds	r3, r4, r3
   db0de:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   db0e2:	109b      	asrs	r3, r3, #2
   db0e4:	f240 156d 	movw	r5, #365	; 0x16d
   db0e8:	fb05 3502 	mla	r5, r5, r2, r3
   db0ec:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   db0f0:	f06f 0363 	mvn.w	r3, #99	; 0x63
   db0f4:	fb92 f3f3 	sdiv	r3, r2, r3
   db0f8:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   db0fc:	442b      	add	r3, r5
   db0fe:	18a5      	adds	r5, r4, r2
   db100:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db104:	fb95 f5f2 	sdiv	r5, r5, r2
   db108:	441d      	add	r5, r3
   db10a:	2364      	movs	r3, #100	; 0x64
   db10c:	fb94 f7f2 	sdiv	r7, r4, r2
   db110:	fb94 f6f3 	sdiv	r6, r4, r3
   db114:	fb02 4717 	mls	r7, r2, r7, r4
   db118:	fb03 4616 	mls	r6, r3, r6, r4
   db11c:	f100 0338 	add.w	r3, r0, #56	; 0x38
   db120:	fab7 fe87 	clz	lr, r7
   db124:	9301      	str	r3, [sp, #4]
   db126:	f004 0303 	and.w	r3, r4, #3
   db12a:	6044      	str	r4, [r0, #4]
   db12c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   db130:	4601      	mov	r1, r0
   db132:	9300      	str	r3, [sp, #0]
   db134:	f04f 0c07 	mov.w	ip, #7
   db138:	7a0b      	ldrb	r3, [r1, #8]
   db13a:	2b4a      	cmp	r3, #74	; 0x4a
   db13c:	d10e      	bne.n	db15c <__tzcalc_limits+0x98>
   db13e:	694b      	ldr	r3, [r1, #20]
   db140:	9a00      	ldr	r2, [sp, #0]
   db142:	18ec      	adds	r4, r5, r3
   db144:	b902      	cbnz	r2, db148 <__tzcalc_limits+0x84>
   db146:	b906      	cbnz	r6, db14a <__tzcalc_limits+0x86>
   db148:	b927      	cbnz	r7, db154 <__tzcalc_limits+0x90>
   db14a:	2b3b      	cmp	r3, #59	; 0x3b
   db14c:	bfd4      	ite	le
   db14e:	2300      	movle	r3, #0
   db150:	2301      	movgt	r3, #1
   db152:	e000      	b.n	db156 <__tzcalc_limits+0x92>
   db154:	2300      	movs	r3, #0
   db156:	4423      	add	r3, r4
   db158:	3b01      	subs	r3, #1
   db15a:	e03f      	b.n	db1dc <__tzcalc_limits+0x118>
   db15c:	2b44      	cmp	r3, #68	; 0x44
   db15e:	d102      	bne.n	db166 <__tzcalc_limits+0xa2>
   db160:	694b      	ldr	r3, [r1, #20]
   db162:	442b      	add	r3, r5
   db164:	e03a      	b.n	db1dc <__tzcalc_limits+0x118>
   db166:	9b00      	ldr	r3, [sp, #0]
   db168:	b92b      	cbnz	r3, db176 <__tzcalc_limits+0xb2>
   db16a:	2e00      	cmp	r6, #0
   db16c:	bf0c      	ite	eq
   db16e:	46f0      	moveq	r8, lr
   db170:	f04f 0801 	movne.w	r8, #1
   db174:	e000      	b.n	db178 <__tzcalc_limits+0xb4>
   db176:	46f0      	mov	r8, lr
   db178:	4b24      	ldr	r3, [pc, #144]	; (db20c <__tzcalc_limits+0x148>)
   db17a:	68cc      	ldr	r4, [r1, #12]
   db17c:	2230      	movs	r2, #48	; 0x30
   db17e:	fb02 3808 	mla	r8, r2, r8, r3
   db182:	f1a8 0a04 	sub.w	sl, r8, #4
   db186:	46a9      	mov	r9, r5
   db188:	2301      	movs	r3, #1
   db18a:	42a3      	cmp	r3, r4
   db18c:	da04      	bge.n	db198 <__tzcalc_limits+0xd4>
   db18e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   db192:	3301      	adds	r3, #1
   db194:	44d9      	add	r9, fp
   db196:	e7f8      	b.n	db18a <__tzcalc_limits+0xc6>
   db198:	f109 0304 	add.w	r3, r9, #4
   db19c:	fb93 fbfc 	sdiv	fp, r3, ip
   db1a0:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   db1a4:	2c01      	cmp	r4, #1
   db1a6:	ebca 0a03 	rsb	sl, sl, r3
   db1aa:	694b      	ldr	r3, [r1, #20]
   db1ac:	bfb8      	it	lt
   db1ae:	2401      	movlt	r4, #1
   db1b0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   db1b4:	ebb3 0a0a 	subs.w	sl, r3, sl
   db1b8:	690b      	ldr	r3, [r1, #16]
   db1ba:	f104 34ff 	add.w	r4, r4, #4294967295
   db1be:	f103 33ff 	add.w	r3, r3, #4294967295
   db1c2:	bf48      	it	mi
   db1c4:	f10a 0a07 	addmi.w	sl, sl, #7
   db1c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db1cc:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   db1d0:	4453      	add	r3, sl
   db1d2:	42a3      	cmp	r3, r4
   db1d4:	db01      	blt.n	db1da <__tzcalc_limits+0x116>
   db1d6:	3b07      	subs	r3, #7
   db1d8:	e7fb      	b.n	db1d2 <__tzcalc_limits+0x10e>
   db1da:	444b      	add	r3, r9
   db1dc:	698c      	ldr	r4, [r1, #24]
   db1de:	4a0c      	ldr	r2, [pc, #48]	; (db210 <__tzcalc_limits+0x14c>)
   db1e0:	fb02 4303 	mla	r3, r2, r3, r4
   db1e4:	6a0c      	ldr	r4, [r1, #32]
   db1e6:	4423      	add	r3, r4
   db1e8:	f841 3f1c 	str.w	r3, [r1, #28]!
   db1ec:	9b01      	ldr	r3, [sp, #4]
   db1ee:	4299      	cmp	r1, r3
   db1f0:	d1a2      	bne.n	db138 <__tzcalc_limits+0x74>
   db1f2:	69c3      	ldr	r3, [r0, #28]
   db1f4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   db1f6:	4293      	cmp	r3, r2
   db1f8:	bfac      	ite	ge
   db1fa:	2300      	movge	r3, #0
   db1fc:	2301      	movlt	r3, #1
   db1fe:	6003      	str	r3, [r0, #0]
   db200:	2001      	movs	r0, #1
   db202:	e000      	b.n	db206 <__tzcalc_limits+0x142>
   db204:	2000      	movs	r0, #0
   db206:	b003      	add	sp, #12
   db208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db20c:	000dc2fc 	.word	0x000dc2fc
   db210:	00015180 	.word	0x00015180

000db214 <__tz_lock>:
   db214:	4770      	bx	lr

000db216 <__tz_unlock>:
   db216:	4770      	bx	lr

000db218 <_tzset_unlocked>:
   db218:	4b01      	ldr	r3, [pc, #4]	; (db220 <_tzset_unlocked+0x8>)
   db21a:	6818      	ldr	r0, [r3, #0]
   db21c:	f000 b802 	b.w	db224 <_tzset_unlocked_r>
   db220:	2003d3b0 	.word	0x2003d3b0

000db224 <_tzset_unlocked_r>:
   db224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db228:	b08d      	sub	sp, #52	; 0x34
   db22a:	4607      	mov	r7, r0
   db22c:	f000 f9be 	bl	db5ac <__gettzinfo>
   db230:	49b0      	ldr	r1, [pc, #704]	; (db4f4 <_tzset_unlocked_r+0x2d0>)
   db232:	4eb1      	ldr	r6, [pc, #708]	; (db4f8 <_tzset_unlocked_r+0x2d4>)
   db234:	4604      	mov	r4, r0
   db236:	4638      	mov	r0, r7
   db238:	f000 f9b0 	bl	db59c <_getenv_r>
   db23c:	4605      	mov	r5, r0
   db23e:	b960      	cbnz	r0, db25a <_tzset_unlocked_r+0x36>
   db240:	4bae      	ldr	r3, [pc, #696]	; (db4fc <_tzset_unlocked_r+0x2d8>)
   db242:	4aaf      	ldr	r2, [pc, #700]	; (db500 <_tzset_unlocked_r+0x2dc>)
   db244:	6018      	str	r0, [r3, #0]
   db246:	4baf      	ldr	r3, [pc, #700]	; (db504 <_tzset_unlocked_r+0x2e0>)
   db248:	6018      	str	r0, [r3, #0]
   db24a:	4baf      	ldr	r3, [pc, #700]	; (db508 <_tzset_unlocked_r+0x2e4>)
   db24c:	6830      	ldr	r0, [r6, #0]
   db24e:	601a      	str	r2, [r3, #0]
   db250:	605a      	str	r2, [r3, #4]
   db252:	f7fc f801 	bl	d7258 <free>
   db256:	6035      	str	r5, [r6, #0]
   db258:	e148      	b.n	db4ec <_tzset_unlocked_r+0x2c8>
   db25a:	6831      	ldr	r1, [r6, #0]
   db25c:	b979      	cbnz	r1, db27e <_tzset_unlocked_r+0x5a>
   db25e:	6830      	ldr	r0, [r6, #0]
   db260:	f7fb fffa 	bl	d7258 <free>
   db264:	4628      	mov	r0, r5
   db266:	f7ff fdd8 	bl	dae1a <strlen>
   db26a:	1c41      	adds	r1, r0, #1
   db26c:	4638      	mov	r0, r7
   db26e:	f7fc f823 	bl	d72b8 <_malloc_r>
   db272:	6030      	str	r0, [r6, #0]
   db274:	b148      	cbz	r0, db28a <_tzset_unlocked_r+0x66>
   db276:	4629      	mov	r1, r5
   db278:	f7ff fdc7 	bl	dae0a <strcpy>
   db27c:	e005      	b.n	db28a <_tzset_unlocked_r+0x66>
   db27e:	f7ff fdba 	bl	dadf6 <strcmp>
   db282:	2800      	cmp	r0, #0
   db284:	f000 8132 	beq.w	db4ec <_tzset_unlocked_r+0x2c8>
   db288:	e7e9      	b.n	db25e <_tzset_unlocked_r+0x3a>
   db28a:	782b      	ldrb	r3, [r5, #0]
   db28c:	4a9f      	ldr	r2, [pc, #636]	; (db50c <_tzset_unlocked_r+0x2e8>)
   db28e:	49a0      	ldr	r1, [pc, #640]	; (db510 <_tzset_unlocked_r+0x2ec>)
   db290:	2b3a      	cmp	r3, #58	; 0x3a
   db292:	bf08      	it	eq
   db294:	3501      	addeq	r5, #1
   db296:	ae0a      	add	r6, sp, #40	; 0x28
   db298:	4633      	mov	r3, r6
   db29a:	4628      	mov	r0, r5
   db29c:	f7fb fff4 	bl	d7288 <siscanf>
   db2a0:	2800      	cmp	r0, #0
   db2a2:	f340 8123 	ble.w	db4ec <_tzset_unlocked_r+0x2c8>
   db2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db2a8:	18ef      	adds	r7, r5, r3
   db2aa:	5ceb      	ldrb	r3, [r5, r3]
   db2ac:	2b2d      	cmp	r3, #45	; 0x2d
   db2ae:	d103      	bne.n	db2b8 <_tzset_unlocked_r+0x94>
   db2b0:	3701      	adds	r7, #1
   db2b2:	f04f 35ff 	mov.w	r5, #4294967295
   db2b6:	e003      	b.n	db2c0 <_tzset_unlocked_r+0x9c>
   db2b8:	2b2b      	cmp	r3, #43	; 0x2b
   db2ba:	bf08      	it	eq
   db2bc:	3701      	addeq	r7, #1
   db2be:	2501      	movs	r5, #1
   db2c0:	f10d 0a20 	add.w	sl, sp, #32
   db2c4:	f10d 0b1e 	add.w	fp, sp, #30
   db2c8:	f04f 0800 	mov.w	r8, #0
   db2cc:	9603      	str	r6, [sp, #12]
   db2ce:	f8cd a008 	str.w	sl, [sp, #8]
   db2d2:	9601      	str	r6, [sp, #4]
   db2d4:	f8cd b000 	str.w	fp, [sp]
   db2d8:	4633      	mov	r3, r6
   db2da:	aa07      	add	r2, sp, #28
   db2dc:	498d      	ldr	r1, [pc, #564]	; (db514 <_tzset_unlocked_r+0x2f0>)
   db2de:	f8ad 801e 	strh.w	r8, [sp, #30]
   db2e2:	4638      	mov	r0, r7
   db2e4:	f8ad 8020 	strh.w	r8, [sp, #32]
   db2e8:	f7fb ffce 	bl	d7288 <siscanf>
   db2ec:	4540      	cmp	r0, r8
   db2ee:	f340 80fd 	ble.w	db4ec <_tzset_unlocked_r+0x2c8>
   db2f2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db2f6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db2fa:	f8df 9224 	ldr.w	r9, [pc, #548]	; db520 <_tzset_unlocked_r+0x2fc>
   db2fe:	213c      	movs	r1, #60	; 0x3c
   db300:	fb01 3302 	mla	r3, r1, r2, r3
   db304:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db308:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db30c:	fb01 3302 	mla	r3, r1, r2, r3
   db310:	435d      	muls	r5, r3
   db312:	6225      	str	r5, [r4, #32]
   db314:	4d7c      	ldr	r5, [pc, #496]	; (db508 <_tzset_unlocked_r+0x2e4>)
   db316:	4b7d      	ldr	r3, [pc, #500]	; (db50c <_tzset_unlocked_r+0x2e8>)
   db318:	602b      	str	r3, [r5, #0]
   db31a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db31c:	497c      	ldr	r1, [pc, #496]	; (db510 <_tzset_unlocked_r+0x2ec>)
   db31e:	441f      	add	r7, r3
   db320:	464a      	mov	r2, r9
   db322:	4633      	mov	r3, r6
   db324:	4638      	mov	r0, r7
   db326:	f7fb ffaf 	bl	d7288 <siscanf>
   db32a:	4540      	cmp	r0, r8
   db32c:	dc08      	bgt.n	db340 <_tzset_unlocked_r+0x11c>
   db32e:	682b      	ldr	r3, [r5, #0]
   db330:	606b      	str	r3, [r5, #4]
   db332:	4b72      	ldr	r3, [pc, #456]	; (db4fc <_tzset_unlocked_r+0x2d8>)
   db334:	6a22      	ldr	r2, [r4, #32]
   db336:	601a      	str	r2, [r3, #0]
   db338:	4b72      	ldr	r3, [pc, #456]	; (db504 <_tzset_unlocked_r+0x2e0>)
   db33a:	f8c3 8000 	str.w	r8, [r3]
   db33e:	e0d5      	b.n	db4ec <_tzset_unlocked_r+0x2c8>
   db340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db342:	f8c5 9004 	str.w	r9, [r5, #4]
   db346:	18fd      	adds	r5, r7, r3
   db348:	5cfb      	ldrb	r3, [r7, r3]
   db34a:	2b2d      	cmp	r3, #45	; 0x2d
   db34c:	d103      	bne.n	db356 <_tzset_unlocked_r+0x132>
   db34e:	3501      	adds	r5, #1
   db350:	f04f 37ff 	mov.w	r7, #4294967295
   db354:	e003      	b.n	db35e <_tzset_unlocked_r+0x13a>
   db356:	2b2b      	cmp	r3, #43	; 0x2b
   db358:	bf08      	it	eq
   db35a:	3501      	addeq	r5, #1
   db35c:	2701      	movs	r7, #1
   db35e:	2300      	movs	r3, #0
   db360:	f8ad 301c 	strh.w	r3, [sp, #28]
   db364:	f8ad 301e 	strh.w	r3, [sp, #30]
   db368:	f8ad 3020 	strh.w	r3, [sp, #32]
   db36c:	930a      	str	r3, [sp, #40]	; 0x28
   db36e:	9603      	str	r6, [sp, #12]
   db370:	f8cd a008 	str.w	sl, [sp, #8]
   db374:	9601      	str	r6, [sp, #4]
   db376:	f8cd b000 	str.w	fp, [sp]
   db37a:	4633      	mov	r3, r6
   db37c:	aa07      	add	r2, sp, #28
   db37e:	4965      	ldr	r1, [pc, #404]	; (db514 <_tzset_unlocked_r+0x2f0>)
   db380:	4628      	mov	r0, r5
   db382:	f7fb ff81 	bl	d7288 <siscanf>
   db386:	2800      	cmp	r0, #0
   db388:	dc04      	bgt.n	db394 <_tzset_unlocked_r+0x170>
   db38a:	6a23      	ldr	r3, [r4, #32]
   db38c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   db390:	63e3      	str	r3, [r4, #60]	; 0x3c
   db392:	e00e      	b.n	db3b2 <_tzset_unlocked_r+0x18e>
   db394:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db398:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db39c:	213c      	movs	r1, #60	; 0x3c
   db39e:	fb01 3302 	mla	r3, r1, r2, r3
   db3a2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db3a6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db3aa:	fb01 3302 	mla	r3, r1, r2, r3
   db3ae:	435f      	muls	r7, r3
   db3b0:	63e7      	str	r7, [r4, #60]	; 0x3c
   db3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db3b4:	4627      	mov	r7, r4
   db3b6:	441d      	add	r5, r3
   db3b8:	f04f 0900 	mov.w	r9, #0
   db3bc:	782b      	ldrb	r3, [r5, #0]
   db3be:	2b2c      	cmp	r3, #44	; 0x2c
   db3c0:	bf08      	it	eq
   db3c2:	3501      	addeq	r5, #1
   db3c4:	f895 8000 	ldrb.w	r8, [r5]
   db3c8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   db3cc:	d126      	bne.n	db41c <_tzset_unlocked_r+0x1f8>
   db3ce:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   db3d2:	9302      	str	r3, [sp, #8]
   db3d4:	ab09      	add	r3, sp, #36	; 0x24
   db3d6:	9300      	str	r3, [sp, #0]
   db3d8:	9603      	str	r6, [sp, #12]
   db3da:	9601      	str	r6, [sp, #4]
   db3dc:	4633      	mov	r3, r6
   db3de:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   db3e2:	494d      	ldr	r1, [pc, #308]	; (db518 <_tzset_unlocked_r+0x2f4>)
   db3e4:	4628      	mov	r0, r5
   db3e6:	f7fb ff4f 	bl	d7288 <siscanf>
   db3ea:	2803      	cmp	r0, #3
   db3ec:	d17e      	bne.n	db4ec <_tzset_unlocked_r+0x2c8>
   db3ee:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   db3f2:	1e4b      	subs	r3, r1, #1
   db3f4:	2b0b      	cmp	r3, #11
   db3f6:	d879      	bhi.n	db4ec <_tzset_unlocked_r+0x2c8>
   db3f8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   db3fc:	1e53      	subs	r3, r2, #1
   db3fe:	2b04      	cmp	r3, #4
   db400:	d874      	bhi.n	db4ec <_tzset_unlocked_r+0x2c8>
   db402:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   db406:	2b06      	cmp	r3, #6
   db408:	d870      	bhi.n	db4ec <_tzset_unlocked_r+0x2c8>
   db40a:	f887 8008 	strb.w	r8, [r7, #8]
   db40e:	60f9      	str	r1, [r7, #12]
   db410:	613a      	str	r2, [r7, #16]
   db412:	617b      	str	r3, [r7, #20]
   db414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db416:	eb05 0803 	add.w	r8, r5, r3
   db41a:	e02a      	b.n	db472 <_tzset_unlocked_r+0x24e>
   db41c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   db420:	bf06      	itte	eq
   db422:	3501      	addeq	r5, #1
   db424:	4643      	moveq	r3, r8
   db426:	2344      	movne	r3, #68	; 0x44
   db428:	220a      	movs	r2, #10
   db42a:	a90b      	add	r1, sp, #44	; 0x2c
   db42c:	4628      	mov	r0, r5
   db42e:	9305      	str	r3, [sp, #20]
   db430:	f7ff fe3e 	bl	db0b0 <strtoul>
   db434:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   db438:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   db43c:	4545      	cmp	r5, r8
   db43e:	9b05      	ldr	r3, [sp, #20]
   db440:	d114      	bne.n	db46c <_tzset_unlocked_r+0x248>
   db442:	234d      	movs	r3, #77	; 0x4d
   db444:	f1b9 0f00 	cmp.w	r9, #0
   db448:	d107      	bne.n	db45a <_tzset_unlocked_r+0x236>
   db44a:	7223      	strb	r3, [r4, #8]
   db44c:	2303      	movs	r3, #3
   db44e:	60e3      	str	r3, [r4, #12]
   db450:	2302      	movs	r3, #2
   db452:	6123      	str	r3, [r4, #16]
   db454:	f8c4 9014 	str.w	r9, [r4, #20]
   db458:	e00b      	b.n	db472 <_tzset_unlocked_r+0x24e>
   db45a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   db45e:	230b      	movs	r3, #11
   db460:	62a3      	str	r3, [r4, #40]	; 0x28
   db462:	2301      	movs	r3, #1
   db464:	62e3      	str	r3, [r4, #44]	; 0x2c
   db466:	2300      	movs	r3, #0
   db468:	6323      	str	r3, [r4, #48]	; 0x30
   db46a:	e002      	b.n	db472 <_tzset_unlocked_r+0x24e>
   db46c:	b280      	uxth	r0, r0
   db46e:	723b      	strb	r3, [r7, #8]
   db470:	6178      	str	r0, [r7, #20]
   db472:	2302      	movs	r3, #2
   db474:	f8ad 301c 	strh.w	r3, [sp, #28]
   db478:	2300      	movs	r3, #0
   db47a:	f8ad 301e 	strh.w	r3, [sp, #30]
   db47e:	f8ad 3020 	strh.w	r3, [sp, #32]
   db482:	930a      	str	r3, [sp, #40]	; 0x28
   db484:	f898 3000 	ldrb.w	r3, [r8]
   db488:	2b2f      	cmp	r3, #47	; 0x2f
   db48a:	d10b      	bne.n	db4a4 <_tzset_unlocked_r+0x280>
   db48c:	9603      	str	r6, [sp, #12]
   db48e:	f8cd a008 	str.w	sl, [sp, #8]
   db492:	9601      	str	r6, [sp, #4]
   db494:	f8cd b000 	str.w	fp, [sp]
   db498:	4633      	mov	r3, r6
   db49a:	aa07      	add	r2, sp, #28
   db49c:	491f      	ldr	r1, [pc, #124]	; (db51c <_tzset_unlocked_r+0x2f8>)
   db49e:	4640      	mov	r0, r8
   db4a0:	f7fb fef2 	bl	d7288 <siscanf>
   db4a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db4a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db4ac:	213c      	movs	r1, #60	; 0x3c
   db4ae:	fb01 3302 	mla	r3, r1, r2, r3
   db4b2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db4b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db4ba:	fb01 3302 	mla	r3, r1, r2, r3
   db4be:	61bb      	str	r3, [r7, #24]
   db4c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   db4c2:	f109 0901 	add.w	r9, r9, #1
   db4c6:	f1b9 0f02 	cmp.w	r9, #2
   db4ca:	4445      	add	r5, r8
   db4cc:	f107 071c 	add.w	r7, r7, #28
   db4d0:	f47f af74 	bne.w	db3bc <_tzset_unlocked_r+0x198>
   db4d4:	6860      	ldr	r0, [r4, #4]
   db4d6:	f7ff fdf5 	bl	db0c4 <__tzcalc_limits>
   db4da:	4b08      	ldr	r3, [pc, #32]	; (db4fc <_tzset_unlocked_r+0x2d8>)
   db4dc:	6a22      	ldr	r2, [r4, #32]
   db4de:	601a      	str	r2, [r3, #0]
   db4e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db4e2:	1a9b      	subs	r3, r3, r2
   db4e4:	4a07      	ldr	r2, [pc, #28]	; (db504 <_tzset_unlocked_r+0x2e0>)
   db4e6:	bf18      	it	ne
   db4e8:	2301      	movne	r3, #1
   db4ea:	6013      	str	r3, [r2, #0]
   db4ec:	b00d      	add	sp, #52	; 0x34
   db4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db4f2:	bf00      	nop
   db4f4:	000dc35c 	.word	0x000dc35c
   db4f8:	2003e7e0 	.word	0x2003e7e0
   db4fc:	2003e7e8 	.word	0x2003e7e8
   db500:	000dc35f 	.word	0x000dc35f
   db504:	2003e7e4 	.word	0x2003e7e4
   db508:	2003d3b4 	.word	0x2003d3b4
   db50c:	2003e7d3 	.word	0x2003e7d3
   db510:	000dc363 	.word	0x000dc363
   db514:	000dc386 	.word	0x000dc386
   db518:	000dc372 	.word	0x000dc372
   db51c:	000dc385 	.word	0x000dc385
   db520:	2003e7c8 	.word	0x2003e7c8

000db524 <_findenv_r>:
   db524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db528:	4607      	mov	r7, r0
   db52a:	468b      	mov	fp, r1
   db52c:	4690      	mov	r8, r2
   db52e:	f000 f8d9 	bl	db6e4 <__env_lock>
   db532:	4b19      	ldr	r3, [pc, #100]	; (db598 <_findenv_r+0x74>)
   db534:	681d      	ldr	r5, [r3, #0]
   db536:	469a      	mov	sl, r3
   db538:	b13d      	cbz	r5, db54a <_findenv_r+0x26>
   db53a:	465c      	mov	r4, fp
   db53c:	4623      	mov	r3, r4
   db53e:	f813 2b01 	ldrb.w	r2, [r3], #1
   db542:	b142      	cbz	r2, db556 <_findenv_r+0x32>
   db544:	2a3d      	cmp	r2, #61	; 0x3d
   db546:	461c      	mov	r4, r3
   db548:	d1f8      	bne.n	db53c <_findenv_r+0x18>
   db54a:	4638      	mov	r0, r7
   db54c:	f000 f8cb 	bl	db6e6 <__env_unlock>
   db550:	2000      	movs	r0, #0
   db552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db556:	ebcb 0404 	rsb	r4, fp, r4
   db55a:	46a9      	mov	r9, r5
   db55c:	f859 0b04 	ldr.w	r0, [r9], #4
   db560:	2800      	cmp	r0, #0
   db562:	d0f2      	beq.n	db54a <_findenv_r+0x26>
   db564:	4622      	mov	r2, r4
   db566:	4659      	mov	r1, fp
   db568:	f7ff fc5f 	bl	dae2a <strncmp>
   db56c:	b988      	cbnz	r0, db592 <_findenv_r+0x6e>
   db56e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   db572:	191e      	adds	r6, r3, r4
   db574:	5d1b      	ldrb	r3, [r3, r4]
   db576:	2b3d      	cmp	r3, #61	; 0x3d
   db578:	d10b      	bne.n	db592 <_findenv_r+0x6e>
   db57a:	f8da 3000 	ldr.w	r3, [sl]
   db57e:	1aed      	subs	r5, r5, r3
   db580:	10ad      	asrs	r5, r5, #2
   db582:	4638      	mov	r0, r7
   db584:	f8c8 5000 	str.w	r5, [r8]
   db588:	f000 f8ad 	bl	db6e6 <__env_unlock>
   db58c:	1c70      	adds	r0, r6, #1
   db58e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db592:	464d      	mov	r5, r9
   db594:	e7e1      	b.n	db55a <_findenv_r+0x36>
   db596:	bf00      	nop
   db598:	2003d3fc 	.word	0x2003d3fc

000db59c <_getenv_r>:
   db59c:	b507      	push	{r0, r1, r2, lr}
   db59e:	aa01      	add	r2, sp, #4
   db5a0:	f7ff ffc0 	bl	db524 <_findenv_r>
   db5a4:	b003      	add	sp, #12
   db5a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db5ac <__gettzinfo>:
   db5ac:	4800      	ldr	r0, [pc, #0]	; (db5b0 <__gettzinfo+0x4>)
   db5ae:	4770      	bx	lr
   db5b0:	2003d3bc 	.word	0x2003d3bc

000db5b4 <gmtime_r>:
   db5b4:	6802      	ldr	r2, [r0, #0]
   db5b6:	4b47      	ldr	r3, [pc, #284]	; (db6d4 <gmtime_r+0x120>)
   db5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   db5ba:	fb92 f4f3 	sdiv	r4, r2, r3
   db5be:	fb03 2214 	mls	r2, r3, r4, r2
   db5c2:	2a00      	cmp	r2, #0
   db5c4:	bfbc      	itt	lt
   db5c6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   db5ca:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   db5ce:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   db5d2:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   db5d6:	fb92 f3f0 	sdiv	r3, r2, r0
   db5da:	fb00 2213 	mls	r2, r0, r3, r2
   db5de:	f04f 003c 	mov.w	r0, #60	; 0x3c
   db5e2:	bfac      	ite	ge
   db5e4:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   db5e8:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   db5ec:	608b      	str	r3, [r1, #8]
   db5ee:	fb92 f3f0 	sdiv	r3, r2, r0
   db5f2:	fb00 2213 	mls	r2, r0, r3, r2
   db5f6:	604b      	str	r3, [r1, #4]
   db5f8:	600a      	str	r2, [r1, #0]
   db5fa:	2307      	movs	r3, #7
   db5fc:	1ce2      	adds	r2, r4, #3
   db5fe:	fb92 f3f3 	sdiv	r3, r2, r3
   db602:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db606:	1ad3      	subs	r3, r2, r3
   db608:	618b      	str	r3, [r1, #24]
   db60a:	4b33      	ldr	r3, [pc, #204]	; (db6d8 <gmtime_r+0x124>)
   db60c:	4d33      	ldr	r5, [pc, #204]	; (db6dc <gmtime_r+0x128>)
   db60e:	fb94 f5f5 	sdiv	r5, r4, r5
   db612:	fb03 4405 	mla	r4, r3, r5, r4
   db616:	f648 62ac 	movw	r2, #36524	; 0x8eac
   db61a:	fbb4 f2f2 	udiv	r2, r4, r2
   db61e:	4422      	add	r2, r4
   db620:	f240 57b4 	movw	r7, #1460	; 0x5b4
   db624:	fbb4 f3f7 	udiv	r3, r4, r7
   db628:	1ad2      	subs	r2, r2, r3
   db62a:	482d      	ldr	r0, [pc, #180]	; (db6e0 <gmtime_r+0x12c>)
   db62c:	fbb4 f0f0 	udiv	r0, r4, r0
   db630:	f648 6694 	movw	r6, #36500	; 0x8e94
   db634:	1a13      	subs	r3, r2, r0
   db636:	fbb3 f6f6 	udiv	r6, r3, r6
   db63a:	4434      	add	r4, r6
   db63c:	f240 126d 	movw	r2, #365	; 0x16d
   db640:	fbb3 f0f2 	udiv	r0, r3, r2
   db644:	fbb3 f3f7 	udiv	r3, r3, r7
   db648:	1ae3      	subs	r3, r4, r3
   db64a:	fb02 3310 	mls	r3, r2, r0, r3
   db64e:	2499      	movs	r4, #153	; 0x99
   db650:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   db654:	3202      	adds	r2, #2
   db656:	fbb2 f2f4 	udiv	r2, r2, r4
   db65a:	2a0a      	cmp	r2, #10
   db65c:	fb04 f402 	mul.w	r4, r4, r2
   db660:	f104 0602 	add.w	r6, r4, #2
   db664:	f04f 0405 	mov.w	r4, #5
   db668:	fbb6 f4f4 	udiv	r4, r6, r4
   db66c:	bf34      	ite	cc
   db66e:	2602      	movcc	r6, #2
   db670:	f06f 0609 	mvncs.w	r6, #9
   db674:	4416      	add	r6, r2
   db676:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db67a:	fb02 0505 	mla	r5, r2, r5, r0
   db67e:	1c5f      	adds	r7, r3, #1
   db680:	2e01      	cmp	r6, #1
   db682:	bf98      	it	ls
   db684:	3501      	addls	r5, #1
   db686:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   db68a:	eba7 0704 	sub.w	r7, r7, r4
   db68e:	d302      	bcc.n	db696 <gmtime_r+0xe2>
   db690:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   db694:	e014      	b.n	db6c0 <gmtime_r+0x10c>
   db696:	0782      	lsls	r2, r0, #30
   db698:	d105      	bne.n	db6a6 <gmtime_r+0xf2>
   db69a:	2464      	movs	r4, #100	; 0x64
   db69c:	fbb0 f2f4 	udiv	r2, r0, r4
   db6a0:	fb04 0212 	mls	r2, r4, r2, r0
   db6a4:	b94a      	cbnz	r2, db6ba <gmtime_r+0x106>
   db6a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db6aa:	fbb0 f4f2 	udiv	r4, r0, r2
   db6ae:	fb02 0014 	mls	r0, r2, r4, r0
   db6b2:	fab0 f280 	clz	r2, r0
   db6b6:	0952      	lsrs	r2, r2, #5
   db6b8:	e000      	b.n	db6bc <gmtime_r+0x108>
   db6ba:	2201      	movs	r2, #1
   db6bc:	333b      	adds	r3, #59	; 0x3b
   db6be:	441a      	add	r2, r3
   db6c0:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   db6c4:	2300      	movs	r3, #0
   db6c6:	61ca      	str	r2, [r1, #28]
   db6c8:	614d      	str	r5, [r1, #20]
   db6ca:	610e      	str	r6, [r1, #16]
   db6cc:	60cf      	str	r7, [r1, #12]
   db6ce:	620b      	str	r3, [r1, #32]
   db6d0:	4608      	mov	r0, r1
   db6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db6d4:	00015180 	.word	0x00015180
   db6d8:	fffdc54f 	.word	0xfffdc54f
   db6dc:	00023ab1 	.word	0x00023ab1
   db6e0:	00023ab0 	.word	0x00023ab0

000db6e4 <__env_lock>:
   db6e4:	4770      	bx	lr

000db6e6 <__env_unlock>:
   db6e6:	4770      	bx	lr

000db6e8 <dynalib_user>:
   db6e8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   db6f8:	0000 0000                                   ....

000db6fc <_ZTVN8particle13__SPISettingsE>:
	...
   db704:	4175 000d                                   uA..

000db708 <_ZTV5Timer>:
	...
   db710:	439d 000d 43e5 000d 41f9 000d               .C...C...A..

000db71c <_ZTVN5spark10LogHandlerE>:
	...
   db72c:	40a5 000d 40c9 000d                         .@...@..

000db734 <_ZTVN8particle9LEDStatusE>:
	...
   db73c:	428d 000d 42a9 000d 40d3 000d               .B...B...@..

000db748 <_ZTVN5spark16SerialLogHandlerE>:
	...
   db750:	42bd 000d 42f1 000d 961d 000d 40cb 000d     .B...B.......@..

000db760 <_ZTV4File>:
	...
   db768:	4171 000d 41eb 000d 41d3 000d 41cd 000d     qA...A...A...A..
   db778:	40d5 000d 4211 000d 420b 000d 4205 000d     .@...B...B...B..
   db788:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   db798:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   db7a8:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   db7b8:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   db7c8:	2545 3e64 5300 6174 7574 3a73 2520 0064     E%d>.Status: %d.
   db7d8:	4343 7548 0062 6548 6c6c 206f 7266 6d6f     CCHub.Hello from
   db7e8:	4220 746f 2520 0a64 2500 3230 2564 3230      Bot %d..%02d%02
   db7f8:	2564 3430 2564 3230 2564 3230 2564 3230     d%04d%02d%02d%02
   db808:	0064 7325 252c 2c66 6625 252c 2c66 6625     d.%s,%f,%f,%f,%f
   db818:	252c 2c66 6625 252c 0066 7325 3025 7832     ,%f,%f,%f.%s%02x
   db828:	4200 746f 6431 7461 4200 6425 4241 7573     .Bot1dat.B%dABsu
   db838:	2570 2064 6425 2520 362e 2066 2e25 6636     p%d %d %.6f %.6f
   db848:	4200 4331 7043 7374 6962 6267 746f 4200     .B1CCptsbigbot.B
   db858:	6425 4241 6363 0a73 5700 534e 2f00 6600     %dABccs..WNS./.f
   db868:	6c69 6e65 6d61 0065 6553 646e 6e69 2067     ilename.Sending 
   db878:	6f63 6d6d 6e61 2064 7325 4600 6c69 2065     command %s.File 
   db888:	7325 6920 2073 2061 632e 7673 6f20 2072     %s is a .csv or 
   db898:	742e 7478 7020 6972 746e 6e69 2067 6164     .txt printing da
   db8a8:	6174 6600 6c69 6365 6d6f 0070 6966 656c     ta.filecomp.file
   db8b8:	6f64 656e 4300 6568 6b63 6e69 2067 6669     done.Checking if
   db8c8:	6620 6c69 2065 7325 6920 2073 2061 632e      file %s is a .c
   db8d8:	7673 6f20 2072 742e 7478 2e2e 002e 632e     sv or .txt.....c
   db8e8:	7673 4300 6568 6b63 7573 3a6d 2520 3230     sv.Checksum: %02
   db8f8:	2c78 2520 3330 0064 7453 6972 676e 4c20     x, %03d.String L
   db908:	6e65 203a 6425 202c 6843 6365 736b 6d75     en: %d, Checksum
   db918:	203a 6425 5b00 4157 4e52 205d 654d 7373     : %d.[WARN] Mess
   db928:	6761 2065 6843 6365 736b 6d75 4420 656f     age Checksum Doe
   db938:	2073 6f4e 2074 614d 6374 2168 203a 7325     s Not Match!: %s
   db948:	5700 7261 696e 676e 202c 6863 6365 736b     .Warning, checks
   db958:	6d75 6420 656f 2073 6f6e 2074 616d 6374     um does not matc
   db968:	0068 2542 2564 7332 616e 256b 7333 4200     h.B%d%2snak%3s.B
   db978:	6425 4241 616e 256b 7333 6100 6b63 6d00     %dABnak%3s.ack.m
   db988:	7274 5200 6365 6965 6576 2064 6f4d 6f74     tr.Received Moto
   db998:	2072 6f43 6d6d 6e61 3a64 4c20 7053 6565     r Command: LSpee
   db9a8:	3d64 6425 522c 7053 6565 3d64 6425 7200     d=%d,RSpeed=%d.r
   db9b8:	7165 7000 7374 5b00 5550 5354 205d 6552     eq.pts.[PUTS] Re
   db9c8:	6563 7669 6465 5320 7274 6e69 2067 6f43     ceived String Co
   db9d8:	6d6d 6e61 3a64 2520 0073 7768 0061 7561     mmand: %s.hwa.au
   db9e8:	0074 6d64 0070 495b 464e 5d4f 5220 6365     t.dmp.[INFO] Rec
   db9f8:	6965 6576 2064 544c 2045 654d 7373 6761     eived LTE Messag
   dba08:	3a65 2520 0073 654e 2077 5442 4320 6d6f     e: %s.New BT Com
   dba18:	616d 646e 003a 495b 464e 5d4f 5220 6365     mand:.[INFO] Rec
   dba28:	6965 6576 2064 4c42 2045 654d 7373 6761     eived BLE Messag
   dba38:	3a65 2520 0073 654e 2077 4258 6565 4320     e: %s.New XBee C
   dba48:	6d6f 616d 646e 003a 495b 464e 5d4f 5220     ommand:.[INFO] R
   dba58:	6365 6965 6576 2064 4258 6565 4d20 7365     eceived XBee Mes
   dba68:	6173 6567 203a 7325 5b00 4157 4e52 205d     sage: %s.[WARN] 
   dba78:	4258 6565 4d20 7365 6173 6567 2073 6168     XBee Messages ha
   dba88:	6576 6e20 746f 6220 6565 206e 6572 6563     ve not been rece
   dba98:	7669 6465 6920 206e 6425 2c73 6120 7373     ived in %ds, ass
   dbaa8:	6d75 6e69 2067 4258 6565 6920 2073 6e75     uming XBee is un
   dbab8:	7661 6961 616c 6c62 0065 575b 5241 5d4e     available.[WARN]
   dbac8:	4220 454c 4d20 7365 6173 6567 2073 6168      BLE Messages ha
   dbad8:	6576 6e20 746f 6220 6565 206e 6572 6563     ve not been rece
   dbae8:	7669 6465 6920 206e 6425 2c73 6120 7373     ived in %ds, ass
   dbaf8:	6d75 6e69 2067 4c42 2045 7369 7520 616e     uming BLE is una
   dbb08:	6176 6c69 6261 656c 5700 4e54 3332 425f     vailable.WTN23_B
   dbb18:	746f 5700 7461 7265 6f42 0074 4c5f 474f     ot.WaterBot._LOG
   dbb28:	742e 7478 4500 7272 726f 203a 6f63 6c75     .txt.Error: coul
   dbb38:	2064 6f6e 2074 6f63 6e6e 6365 2074 6f74     d not connect to
   dbb48:	5320 2044 6163 6472 0021 6954 656d 4c2c      SD card!.Time,L
   dbb58:	7461 7469 6475 2c65 6f4c 676e 7469 6475     atitude,Longitud
   dbb68:	2c65 6554 706d 7265 7461 7275 2c65 4870     e,Temperature,pH
   dbb78:	442c 7369 6f73 766c 6465 4f20 2c32 6f43     ,Dissolved O2,Co
   dbb88:	646e 6375 6974 6976 7974 3020 312e 2c4b     nductivity 0.1K,
   dbb98:	6f43 646e 6375 6974 6976 7974 3120 004b     Conductivity 1K.
   dbba8:	495b 464e 5d4f 5720 7461 7265 6f42 2074     [INFO] WaterBot 
   dbbb8:	6425 203a 7453 7261 6574 2064 6f4c 6767     %d: Started Logg
   dbbc8:	6e69 2167 6200 3234 3630 3139 2d30 6364     ing!.b4206910-dc
   dbbd8:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   dbbe8:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   dbbf8:	3231 642d 3463 2d62 3735 3334 632d 6238     12-dc4b-5743-c8b
   dbc08:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   dbc18:	3234 3630 3139 2d33 6364 6234 352d 3437     4206913-dc4b-574
   dbc28:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   dbc38:	6232 0030 7874 7200 0078 666f 0066 3462     2b0.tx.rx.off.b4
   dbc48:	3032 3936 3431 642d 3463 2d62 3735 3334     206914-dc4b-5743
   dbc58:	632d 6238 2d31 3239 3064 3765 3135 3238     -c8b1-92d0e75182
   dbc68:	3062 0000                                   b0..

000dbc6c <_ZTVN5spark13EthernetClassE>:
	...
   dbc74:	7327 000d 731d 000d 7313 000d 7309 000d     's...s...s...s..
   dbc84:	72fd 000d 72f1 000d 72e5 000d 72dd 000d     .r...r...r...r..
   dbc94:	72d3 000d 72c9 000d a249 000d               .r...r..I...

000dbca0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dbca0:	0800 1810 2820 3830                         .... (08

000dbca8 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dbcb0:	780f 000d 7815 000d 8481 000d 783f 000d     .x...x......?x..
   dbcc0:	7811 000d                                   .x..

000dbcc4 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dbccc:	7809 000d 7823 000d 85e1 000d 7843 000d     .x..#x......Cx..
   dbcdc:	780b 000d                                   .x..

000dbce0 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dbce8:	7803 000d 7831 000d 7f41 000d 7847 000d     .x..1x..A...Gx..
   dbcf8:	7805 000d                                   .x..

000dbcfc <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   dbcfc:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   dbd0c:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   dbd1c:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   dbd2c:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   dbd3c:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   dbd4c:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   dbd5c:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   dbd6c:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   dbd7c:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   dbd8c:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   dbd9c:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   dbdac:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   dbdbc:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   dbdcc:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   dbddc:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   dbdec:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   dbdfc:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   dbe0c:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   dbe1c:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   dbe2c:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   dbe3c:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   dbe4c:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   dbe5c:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   dbe6c:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   dbe7c:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   dbe8c:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   dbe9c:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..

000dbeac <_ZN8particle7BleUuid9BASE_UUIDE>:
   dbeac:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000dbebc <_ZTVN5spark16JSONStreamWriterE>:
	...
   dbec4:	89f9 000d 8a1f 000d 89d3 000d a357 000d     ............W...

000dbed4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dbedc:	8e75 000d 8e89 000d 97d1 000d 89db 000d     u...............
   dbeec:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   dbefc:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   dbf0c:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   dbf1c:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   dbf2c:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   dbf3c:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   dbf4c:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   dbf5c:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   dbf6c:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   dbf7c:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   dbf8c:	0020 0a0d 6c00 006e 6e66 6300 646f 0065      ....ln.fn.code.
   dbf9c:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
   dbfac:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
   dbfbc:	0072 6170 696e 0063 6c61 006c               r.panic.all.

000dbfc8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dbfd0:	8e49 000d 8e61 000d 961d 000d 40cb 000d     I...a........@..

000dbfe0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dbfe8:	89f7 000d 8a2d 000d 9545 000d 89dd 000d     ....-...E.......

000dbff8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dc000:	89f5 000d 8a3b 000d 8d8d 000d 8a49 000d     ....;.......I...
   dc010:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
   dc020:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
   dc030:	6373 6974 656d 0000                         sctime..

000dc038 <_ZTV9IPAddress>:
	...
   dc040:	9c1d 000d 9c0d 000d 9c0f 000d               ............

000dc04c <_ZTV9USBSerial>:
	...
   dc054:	9cf5 000d 9d45 000d 9d53 000d 88b9 000d     ....E...S.......
   dc064:	9d31 000d 9cf7 000d 9d0d 000d 9d3f 000d     1...........?...
   dc074:	9d23 000d 9cf1 000d                         #.......

000dc07c <_ZTVN5spark13CellularClassE>:
	...
   dc084:	9e67 000d 9e5d 000d 9e53 000d 9e09 000d     g...]...S.......
   dc094:	9e47 000d 9e3b 000d 9e2f 000d 9e27 000d     G...;.../...'...
   dc0a4:	9e1d 000d 9e13 000d a249 000d               ........I...

000dc0b0 <_ZTV11USARTSerial>:
	...
   dc0b8:	9ea1 000d 9ef1 000d 9eff 000d 88b9 000d     ................
   dc0c8:	9eb5 000d 9ed7 000d 9ec3 000d 9eeb 000d     ................
   dc0d8:	9ea3 000d 9ea7 000d                         ........

000dc0e0 <_ZTV7TwoWire>:
	...
   dc0e8:	9fb9 000d a003 000d 9fdb 000d 9fbb 000d     ................
   dc0f8:	9fe3 000d 9feb 000d 9ff3 000d 9ffb 000d     ................

000dc108 <_ZTVN5spark9MeshClassE>:
	...
   dc110:	a0c5 000d a0bb 000d a0b1 000d a0a7 000d     ................
   dc120:	a09b 000d a08f 000d a083 000d a07b 000d     ............{...
   dc130:	a071 000d a067 000d a249 000d               q...g...I...

000dc13c <_ZTVN5spark12NetworkClassE>:
	...
   dc144:	a1e1 000d a1eb 000d a1f5 000d a1ff 000d     ................
   dc154:	a209 000d a215 000d a221 000d a22d 000d     ........!...-...
   dc164:	a235 000d a23f 000d a249 000d 2e30 0030     5...?...I...0.0.
   dc174:	6166 736c 0065 7274 6575 2500 0075 2e25     false.true.%u.%.
   dc184:	6c2a 0066 6725 6e00 6c75 006c 2575 3430     *lf.%g.null.u%04
   dc194:	0078                                        x.

000dc196 <_ZSt7nothrow>:
	...

000dc197 <_ctype_>:
   dc197:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc1a7:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc1b7:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc1c7:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc1d7:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc1e7:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc1f7:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc207:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc217:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc298 <__sf_fake_stdin>:
	...

000dc2b8 <__sf_fake_stdout>:
	...

000dc2d8 <__sf_fake_stderr>:
	...
   dc2f8:	0043 0000                                   C...

000dc2fc <__month_lengths>:
   dc2fc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dc30c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc31c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc32c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dc33c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc34c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc35c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   dc36c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   dc37c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   dc38c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000dc398 <link_const_variable_data_end>:
   dc398:	000d5015 	.word	0x000d5015
   dc39c:	000d54b1 	.word	0x000d54b1
   dc3a0:	000d54b5 	.word	0x000d54b5
   dc3a4:	000d54b9 	.word	0x000d54b9
   dc3a8:	000d5ae1 	.word	0x000d5ae1
   dc3ac:	000d5ae5 	.word	0x000d5ae5
   dc3b0:	000d5ae9 	.word	0x000d5ae9
   dc3b4:	000d5aed 	.word	0x000d5aed
   dc3b8:	000d61b9 	.word	0x000d61b9
   dc3bc:	000d61dd 	.word	0x000d61dd
   dc3c0:	000d61e1 	.word	0x000d61e1
   dc3c4:	000d6505 	.word	0x000d6505
   dc3c8:	000d6509 	.word	0x000d6509
   dc3cc:	000d650d 	.word	0x000d650d
   dc3d0:	000d6a47 	.word	0x000d6a47
   dc3d4:	000d6a4b 	.word	0x000d6a4b
   dc3d8:	000d6a4f 	.word	0x000d6a4f
   dc3dc:	000d6af5 	.word	0x000d6af5
   dc3e0:	000d6b77 	.word	0x000d6b77
   dc3e4:	000d7331 	.word	0x000d7331
   dc3e8:	000d76a5 	.word	0x000d76a5
   dc3ec:	000d8891 	.word	0x000d8891
   dc3f0:	000d960d 	.word	0x000d960d
   dc3f4:	000d9aa1 	.word	0x000d9aa1
   dc3f8:	000d9ae1 	.word	0x000d9ae1
   dc3fc:	000d9e71 	.word	0x000d9e71
   dc400:	000da191 	.word	0x000da191
   dc404:	000da315 	.word	0x000da315
   dc408:	000da839 	.word	0x000da839
   dc40c:	000da8bd 	.word	0x000da8bd
   dc410:	000da981 	.word	0x000da981
   dc414:	000daa45 	.word	0x000daa45

000dc418 <link_constructors_end>:
	...
