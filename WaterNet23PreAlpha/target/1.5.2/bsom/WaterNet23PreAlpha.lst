
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23PreAlpha/target/1.5.2/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c120  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000e0140  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000108  2003d358  000e0144  0002d358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001390  2003d460  2003d460  0003d460  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000e024c  000e024c  0003024c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000e0274  000e0274  00030274  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001b3600  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00021ed2  00000000  00000000  001e3878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003127c  00000000  00000000  0020574a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003650  00000000  00000000  002369c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000067c8  00000000  00000000  0023a016  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00050a31  00000000  00000000  002407de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005a98a  00000000  00000000  0029120f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001165db  00000000  00000000  002ebb99  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00010a60  00000000  00000000  00402174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f008 fed8 	bl	dcde6 <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f008 fef8 	bl	dce32 <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d358 	.word	0x2003d358
   d404c:	000e0144 	.word	0x000e0144
   d4050:	2003d460 	.word	0x2003d460
   d4054:	2003d460 	.word	0x2003d460
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	f006 fe15 	bl	dac8c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e0134 	.word	0x000e0134
   d4084:	000e00b4 	.word	0x000e00b4

000d4088 <module_user_setup>:
   d4088:	f001 b932 	b.w	d52f0 <setup>

000d408c <module_user_loop>:
   d408c:	b508      	push	{r3, lr}
   d408e:	f001 f8cd 	bl	d522c <loop>
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4096:	f006 bdbb 	b.w	dac10 <_post_loop>

000d409a <_Znwj>:
   d409a:	f004 b8c1 	b.w	d8220 <malloc>

000d409e <_ZdlPv>:
   d409e:	f004 b8c7 	b.w	d8230 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f004 b8c5 	b.w	d8230 <free>
	...

000d40a8 <__cxa_pure_virtual>:
   d40a8:	b508      	push	{r3, lr}
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f003 ffc0 	bl	d8034 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d7c21 	.word	0x000d7c21

000d40bc <__cxa_guard_acquire>:
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3

000d40d6 <_ZN8particle9LEDStatus6updateEm>:

inline bool particle::LEDStatus::isActive() const {
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
   d40d6:	4770      	bx	lr

000d40d8 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40d8:	7c03      	ldrb	r3, [r0, #16]
   d40da:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40de:	4602      	mov	r2, r0
   d40e0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40e4:	b12b      	cbz	r3, d40f2 <_ZN4File9availableEv+0x1a>
   d40e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40e8:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40ea:	1a18      	subs	r0, r3, r0
   d40ec:	bf48      	it	mi
   d40ee:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40f2:	4770      	bx	lr

000d40f4 <_Z13StatusHandlerv>:
}

void StatusHandler(){
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   d40f4:	4b0f      	ldr	r3, [pc, #60]	; (d4134 <_Z13StatusHandlerv+0x40>)
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d40f6:	781a      	ldrb	r2, [r3, #0]

void StatusHandler(){
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
   d40f8:	4b0f      	ldr	r3, [pc, #60]	; (d4138 <_Z13StatusHandlerv+0x44>)
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d40fa:	781b      	ldrb	r3, [r3, #0]
   d40fc:	009b      	lsls	r3, r3, #2
   d40fe:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    }
}

void StatusHandler(){
    statusFlags = 0;
    statusFlags = LTEAvail;
   d4102:	4a0e      	ldr	r2, [pc, #56]	; (d413c <_Z13StatusHandlerv+0x48>)
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d4104:	7812      	ldrb	r2, [r2, #0]
   d4106:	4313      	orrs	r3, r2
void StatusHandler(){
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
   d4108:	4a0d      	ldr	r2, [pc, #52]	; (d4140 <_Z13StatusHandlerv+0x4c>)
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d410a:	7812      	ldrb	r2, [r2, #0]
   d410c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
   d4110:	4a0c      	ldr	r2, [pc, #48]	; (d4144 <_Z13StatusHandlerv+0x50>)
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
   d4112:	7812      	ldrb	r2, [r2, #0]
   d4114:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
    statusFlags |= BLEAvail << 2;
    statusFlags |= offloadMode << 3;
    statusFlags |= manualRC << 4;
    statusFlags |= lowBattery << 5;
   d4118:	4a0b      	ldr	r2, [pc, #44]	; (d4148 <_Z13StatusHandlerv+0x54>)
    statusFlags |= logSensors << 6;
   d411a:	7812      	ldrb	r2, [r2, #0]
   d411c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4120:	4a0a      	ldr	r2, [pc, #40]	; (d414c <_Z13StatusHandlerv+0x58>)
   d4122:	7812      	ldrb	r2, [r2, #0]
   d4124:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   d4128:	4a09      	ldr	r2, [pc, #36]	; (d4150 <_Z13StatusHandlerv+0x5c>)
   d412a:	7013      	strb	r3, [r2, #0]
    statusReady = true;
   d412c:	4b09      	ldr	r3, [pc, #36]	; (d4154 <_Z13StatusHandlerv+0x60>)
   d412e:	2201      	movs	r2, #1
   d4130:	701a      	strb	r2, [r3, #0]
   d4132:	4770      	bx	lr
   d4134:	2003db36 	.word	0x2003db36
   d4138:	2003db35 	.word	0x2003db35
   d413c:	2003da29 	.word	0x2003da29
   d4140:	2003da20 	.word	0x2003da20
   d4144:	2003e20c 	.word	0x2003e20c
   d4148:	2003d4a0 	.word	0x2003d4a0
   d414c:	2003db37 	.word	0x2003db37
   d4150:	2003e2d4 	.word	0x2003e2d4
   d4154:	2003e2bc 	.word	0x2003e2bc

000d4158 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4158:	6803      	ldr	r3, [r0, #0]
   d415a:	4718      	bx	r3

000d415c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d415c:	2a01      	cmp	r2, #1
   d415e:	d002      	beq.n	d4166 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d4160:	2a02      	cmp	r2, #2
   d4162:	d002      	beq.n	d416a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d4164:	e004      	b.n	d4170 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4166:	6001      	str	r1, [r0, #0]
	      break;
   d4168:	e002      	b.n	d4170 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d416a:	680b      	ldr	r3, [r1, #0]
   d416c:	b100      	cbz	r0, d4170 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d416e:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4170:	2000      	movs	r0, #0
   d4172:	4770      	bx	lr

000d4174 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4174:	4770      	bx	lr
	...

000d4178 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4178:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d417a:	4602      	mov	r2, r0
   d417c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d417e:	7913      	ldrb	r3, [r2, #4]
   d4180:	6895      	ldr	r5, [r2, #8]
   d4182:	b133      	cbz	r3, d4192 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4184:	b93d      	cbnz	r5, d4196 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4186:	490c      	ldr	r1, [pc, #48]	; (d41b8 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4188:	b004      	add	sp, #16
   d418a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d418e:	f005 bbc9 	b.w	d9924 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4192:	4b0a      	ldr	r3, [pc, #40]	; (d41bc <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4194:	e000      	b.n	d4198 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4196:	4b0a      	ldr	r3, [pc, #40]	; (d41c0 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4198:	7b16      	ldrb	r6, [r2, #12]
   d419a:	4c0a      	ldr	r4, [pc, #40]	; (d41c4 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d419c:	490a      	ldr	r1, [pc, #40]	; (d41c8 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d419e:	7b52      	ldrb	r2, [r2, #13]
   d41a0:	9202      	str	r2, [sp, #8]
   d41a2:	2e01      	cmp	r6, #1
   d41a4:	bf08      	it	eq
   d41a6:	4621      	moveq	r1, r4
   d41a8:	9101      	str	r1, [sp, #4]
   d41aa:	9500      	str	r5, [sp, #0]
   d41ac:	4a07      	ldr	r2, [pc, #28]	; (d41cc <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d41ae:	2100      	movs	r1, #0
   d41b0:	f005 fbf5 	bl	d999e <_ZN5Print11printf_implEbPKcz>
  }
   d41b4:	b004      	add	sp, #16
   d41b6:	bd70      	pop	{r4, r5, r6, pc}
   d41b8:	000df39d 	.word	0x000df39d
   d41bc:	000df7fc 	.word	0x000df7fc
   d41c0:	000df38c 	.word	0x000df38c
   d41c4:	000df395 	.word	0x000df395
   d41c8:	000df399 	.word	0x000df399
   d41cc:	000df3b3 	.word	0x000df3b3

000d41d0 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d41d0:	3010      	adds	r0, #16
   d41d2:	f002 bdb1 	b.w	d6d38 <_ZN7FatFile5writeEPKvj>

000d41d6 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d41d6:	b507      	push	{r0, r1, r2, lr}
   d41d8:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d41da:	2201      	movs	r2, #1
   d41dc:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d41e0:	3010      	adds	r0, #16
   d41e2:	4619      	mov	r1, r3
   d41e4:	f002 fda8 	bl	d6d38 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d41e8:	b003      	add	sp, #12
   d41ea:	f85d fb04 	ldr.w	pc, [sp], #4

000d41ee <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d41ee:	b510      	push	{r4, lr}
   d41f0:	2134      	movs	r1, #52	; 0x34
   d41f2:	4604      	mov	r4, r0
   d41f4:	f007 fe84 	bl	dbf00 <_ZdlPvj>
   d41f8:	4620      	mov	r0, r4
   d41fa:	bd10      	pop	{r4, pc}

000d41fc <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41fc:	6943      	ldr	r3, [r0, #20]
   d41fe:	b113      	cbz	r3, d4206 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4200:	6983      	ldr	r3, [r0, #24]
   d4202:	300c      	adds	r0, #12
   d4204:	4718      	bx	r3
   d4206:	4770      	bx	lr

000d4208 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4208:	3010      	adds	r0, #16
   d420a:	f002 bd09 	b.w	d6c20 <_ZN7FatFile4syncEv>

000d420e <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d420e:	3010      	adds	r0, #16
   d4210:	f002 bbe0 	b.w	d69d4 <_ZN7FatFile4peekEv>

000d4214 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4214:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4216:	2201      	movs	r2, #1
   d4218:	f10d 0107 	add.w	r1, sp, #7
   d421c:	3010      	adds	r0, #16
   d421e:	f002 fb26 	bl	d686e <_ZN7FatFile4readEPvj>
   d4222:	2801      	cmp	r0, #1
   d4224:	bf0c      	ite	eq
   d4226:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d422a:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d422e:	b003      	add	sp, #12
   d4230:	f85d fb04 	ldr.w	pc, [sp], #4

000d4234 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4234:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4236:	2100      	movs	r1, #0
   d4238:	4604      	mov	r4, r0
   d423a:	4608      	mov	r0, r1
   d423c:	f003 fdb2 	bl	d7da4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4240:	a902      	add	r1, sp, #8
   d4242:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4244:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4246:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d424a:	f003 fdc3 	bl	d7dd4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d424e:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4250:	b10c      	cbz	r4, d4256 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4252:	2301      	movs	r3, #1
   d4254:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4256:	2100      	movs	r1, #0
   d4258:	2001      	movs	r0, #1
   d425a:	f003 fda3 	bl	d7da4 <os_thread_scheduling>
            }
        }
        if (t) {
   d425e:	b12c      	cbz	r4, d426c <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4260:	6823      	ldr	r3, [r4, #0]
   d4262:	4620      	mov	r0, r4
   d4264:	689b      	ldr	r3, [r3, #8]
   d4266:	4798      	blx	r3
            t->running = false;
   d4268:	2300      	movs	r3, #0
   d426a:	7123      	strb	r3, [r4, #4]
        }
    }
   d426c:	b002      	add	sp, #8
   d426e:	bd10      	pop	{r4, pc}

000d4270 <_ZN8particle9LEDStatusD1Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d4270:	b510      	push	{r4, lr}
   d4272:	4b05      	ldr	r3, [pc, #20]	; (d4288 <_ZN8particle9LEDStatusD1Ev+0x18>)
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d4274:	2200      	movs	r2, #0

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d4276:	4604      	mov	r4, r0
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d4278:	4611      	mov	r1, r2

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d427a:	f840 3b04 	str.w	r3, [r0], #4
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d427e:	f003 fef9 	bl	d8074 <led_set_status_active>
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}
   d4282:	4620      	mov	r0, r4
   d4284:	bd10      	pop	{r4, pc}
   d4286:	bf00      	nop
   d4288:	000df340 	.word	0x000df340

000d428c <_ZN8particle9LEDStatusD0Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d428c:	b510      	push	{r4, lr}
   d428e:	4604      	mov	r4, r0
    setActive(false);
}
   d4290:	f7ff ffee 	bl	d4270 <_ZN8particle9LEDStatusD1Ev>
   d4294:	4620      	mov	r0, r4
   d4296:	2120      	movs	r1, #32
   d4298:	f007 fe32 	bl	dbf00 <_ZdlPvj>
   d429c:	4620      	mov	r0, r4
   d429e:	bd10      	pop	{r4, pc}

000d42a0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d42a0:	4b0a      	ldr	r3, [pc, #40]	; (d42cc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d42a2:	b510      	push	{r4, lr}
   d42a4:	4604      	mov	r4, r0
   d42a6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d42a8:	f005 fd36 	bl	d9d18 <_ZN5spark10LogManager8instanceEv>
   d42ac:	4621      	mov	r1, r4
   d42ae:	f005 ff23 	bl	da0f8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d42b2:	f007 f8b3 	bl	db41c <_Z16_fetch_usbserialv>
   d42b6:	f007 f8a5 	bl	db404 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d42ba:	4620      	mov	r0, r4
   d42bc:	4b04      	ldr	r3, [pc, #16]	; (d42d0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d42be:	f840 3b04 	str.w	r3, [r0], #4
   d42c2:	f005 fe1f 	bl	d9f04 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d42c6:	4620      	mov	r0, r4
   d42c8:	bd10      	pop	{r4, pc}
   d42ca:	bf00      	nop
   d42cc:	000df354 	.word	0x000df354
   d42d0:	000df328 	.word	0x000df328

000d42d4 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d42d4:	b510      	push	{r4, lr}
   d42d6:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d42d8:	f7ff ffe2 	bl	d42a0 <_ZN5spark16SerialLogHandlerD1Ev>
   d42dc:	4620      	mov	r0, r4
   d42de:	2124      	movs	r1, #36	; 0x24
   d42e0:	f007 fe0e 	bl	dbf00 <_ZdlPvj>
   d42e4:	4620      	mov	r0, r4
   d42e6:	bd10      	pop	{r4, pc}

000d42e8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42e8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d42ea:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42ec:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d42ee:	b113      	cbz	r3, d42f6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42f0:	2203      	movs	r2, #3
   d42f2:	4601      	mov	r1, r0
   d42f4:	4798      	blx	r3
    }
   d42f6:	4620      	mov	r0, r4
   d42f8:	bd10      	pop	{r4, pc}

000d42fa <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d42fa:	6803      	ldr	r3, [r0, #0]
   d42fc:	b2c9      	uxtb	r1, r1
   d42fe:	689b      	ldr	r3, [r3, #8]
   d4300:	4718      	bx	r3
	...

000d4304 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4304:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4306:	2500      	movs	r5, #0
   d4308:	468e      	mov	lr, r1
   d430a:	4915      	ldr	r1, [pc, #84]	; (d4360 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d430c:	7105      	strb	r5, [r0, #4]
   d430e:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4310:	6145      	str	r5, [r0, #20]
   d4312:	6001      	str	r1, [r0, #0]
   d4314:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4316:	e892 0003 	ldmia.w	r2, {r0, r1}
   d431a:	b085      	sub	sp, #20
   d431c:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d431e:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4322:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4326:	e896 0003 	ldmia.w	r6, {r0, r1}
   d432a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d432e:	e897 0003 	ldmia.w	r7, {r0, r1}
   d4332:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4336:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4338:	6960      	ldr	r0, [r4, #20]
   d433a:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d433c:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d433e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4340:	69a0      	ldr	r0, [r4, #24]
   d4342:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4344:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4346:	e88d 0028 	stmia.w	sp, {r3, r5}
   d434a:	4a06      	ldr	r2, [pc, #24]	; (d4364 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d434c:	4623      	mov	r3, r4
   d434e:	4671      	mov	r1, lr
   d4350:	f104 0008 	add.w	r0, r4, #8
   d4354:	f003 fd2e 	bl	d7db4 <os_timer_create>
    }
   d4358:	4620      	mov	r0, r4
   d435a:	b005      	add	sp, #20
   d435c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d435e:	bf00      	nop
   d4360:	000df314 	.word	0x000df314
   d4364:	000d4235 	.word	0x000d4235

000d4368 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4368:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d436a:	6880      	ldr	r0, [r0, #8]
   d436c:	2300      	movs	r3, #0
   d436e:	b138      	cbz	r0, d4380 <_ZN5Timer5_stopEjb+0x18>
   d4370:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4374:	2102      	movs	r1, #2
   d4376:	f003 fd35 	bl	d7de4 <os_timer_change>
   d437a:	fab0 f080 	clz	r0, r0
   d437e:	0940      	lsrs	r0, r0, #5
    }
   d4380:	b003      	add	sp, #12
   d4382:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4388 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4388:	b538      	push	{r3, r4, r5, lr}
   d438a:	4b10      	ldr	r3, [pc, #64]	; (d43cc <_ZN5TimerD1Ev+0x44>)
   d438c:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d438e:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4390:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d4392:	b1a3      	cbz	r3, d43be <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4394:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4398:	2200      	movs	r2, #0
   d439a:	f7ff ffe5 	bl	d4368 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d439e:	2100      	movs	r1, #0
   d43a0:	68a0      	ldr	r0, [r4, #8]
   d43a2:	f003 fd47 	bl	d7e34 <os_timer_set_id>
            while (running) {
   d43a6:	7923      	ldrb	r3, [r4, #4]
   d43a8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d43ac:	b113      	cbz	r3, d43b4 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d43ae:	f003 fce1 	bl	d7d74 <os_thread_yield>
   d43b2:	e7f8      	b.n	d43a6 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d43b4:	4629      	mov	r1, r5
   d43b6:	68a0      	ldr	r0, [r4, #8]
   d43b8:	f003 fd04 	bl	d7dc4 <os_timer_destroy>
            handle = nullptr;
   d43bc:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d43be:	f104 000c 	add.w	r0, r4, #12
   d43c2:	f7ff ff91 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43c6:	4620      	mov	r0, r4
   d43c8:	bd38      	pop	{r3, r4, r5, pc}
   d43ca:	bf00      	nop
   d43cc:	000df314 	.word	0x000df314

000d43d0 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d43d0:	b510      	push	{r4, lr}
   d43d2:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43d4:	f7ff ffd8 	bl	d4388 <_ZN5TimerD1Ev>
   d43d8:	4620      	mov	r0, r4
   d43da:	211c      	movs	r1, #28
   d43dc:	f007 fd90 	bl	dbf00 <_ZdlPvj>
   d43e0:	4620      	mov	r0, r4
   d43e2:	bd10      	pop	{r4, pc}

000d43e4 <_ZN5Timer5startEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43e6:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43e8:	2200      	movs	r2, #0
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43ea:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43ec:	4611      	mov	r1, r2
   d43ee:	f7ff ffbb 	bl	d4368 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d43f2:	68a8      	ldr	r0, [r5, #8]
   d43f4:	2300      	movs	r3, #0
   d43f6:	b140      	cbz	r0, d440a <_ZN5Timer5startEj+0x26>
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	9400      	str	r4, [sp, #0]
   d43fc:	461a      	mov	r2, r3
   d43fe:	4619      	mov	r1, r3
   d4400:	f003 fcf0 	bl	d7de4 <os_timer_change>
   d4404:	fab0 f080 	clz	r0, r0
   d4408:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d440a:	b003      	add	sp, #12
   d440c:	bd30      	pop	{r4, r5, pc}

000d440e <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:

inline LEDPattern particle::LEDStatus::pattern() const {
    return (LEDPattern)d_.pattern;
}

inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   d440e:	b510      	push	{r4, lr}
   d4410:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   d4412:	2200      	movs	r2, #0
   d4414:	7c40      	ldrb	r0, [r0, #17]
   d4416:	f003 fe67 	bl	d80e8 <led_pattern_period>
}

inline void particle::LEDStatus::setPeriod(uint16_t period) {
    // Pattern period cannot be set for custom pattern type
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   d441a:	7c63      	ldrb	r3, [r4, #17]
   d441c:	2b0f      	cmp	r3, #15
        d_.period = period;
   d441e:	bf18      	it	ne
   d4420:	8320      	strhne	r0, [r4, #24]
   d4422:	bd10      	pop	{r4, pc}

000d4424 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   d4424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(offloadMode){
   d4426:	4b2e      	ldr	r3, [pc, #184]	; (d44e0 <_Z10LEDHandlerv+0xbc>)
   d4428:	4d2e      	ldr	r5, [pc, #184]	; (d44e4 <_Z10LEDHandlerv+0xc0>)
   d442a:	781b      	ldrb	r3, [r3, #0]
   d442c:	b133      	cbz	r3, d443c <_Z10LEDHandlerv+0x18>
    return d_.color;
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   d442e:	7c6b      	ldrb	r3, [r5, #17]
   d4430:	2b0f      	cmp	r3, #15
   d4432:	d14f      	bne.n	d44d4 <_Z10LEDHandlerv+0xb0>
inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}

inline void particle::LEDStatus::setColor(uint32_t color) {
    d_.color = color;
   d4434:	23ff      	movs	r3, #255	; 0xff
   d4436:	616b      	str	r3, [r5, #20]
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
   d4438:	211e      	movs	r1, #30
   d443a:	e047      	b.n	d44cc <_Z10LEDHandlerv+0xa8>
        return;                
    }
    if(lowBattery){
   d443c:	4b2a      	ldr	r3, [pc, #168]	; (d44e8 <_Z10LEDHandlerv+0xc4>)
   d443e:	781b      	ldrb	r3, [r3, #0]
   d4440:	b95b      	cbnz	r3, d445a <_Z10LEDHandlerv+0x36>
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(logSensors){
   d4442:	4b2a      	ldr	r3, [pc, #168]	; (d44ec <_Z10LEDHandlerv+0xc8>)
   d4444:	781b      	ldrb	r3, [r3, #0]
   d4446:	b95b      	cbnz	r3, d4460 <_Z10LEDHandlerv+0x3c>
        SetPattern = LED_PATTERN_SOLID;
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(manualRC){
   d4448:	4b29      	ldr	r3, [pc, #164]	; (d44f0 <_Z10LEDHandlerv+0xcc>)
   d444a:	781b      	ldrb	r3, [r3, #0]
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_SLOW;
    }
    else{
        SetSpeed = LED_SPEED_NORMAL;
   d444c:	2b00      	cmp	r3, #0
   d444e:	bf15      	itete	ne
   d4450:	270a      	movne	r7, #10
   d4452:	2714      	moveq	r7, #20
   d4454:	2602      	movne	r6, #2
   d4456:	2603      	moveq	r6, #3
   d4458:	e004      	b.n	d4464 <_Z10LEDHandlerv+0x40>
        status.setSpeed(LED_SPEED_FAST);
        return;                
    }
    if(lowBattery){
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_NORMAL;
   d445a:	2714      	movs	r7, #20
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
        return;                
    }
    if(lowBattery){
        SetPattern = LED_PATTERN_BLINK;
   d445c:	2602      	movs	r6, #2
   d445e:	e001      	b.n	d4464 <_Z10LEDHandlerv+0x40>
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(logSensors){
        SetPattern = LED_PATTERN_SOLID;
        SetSpeed = LED_SPEED_NORMAL;
   d4460:	2714      	movs	r7, #20
    if(lowBattery){
        SetPattern = LED_PATTERN_BLINK;
        SetSpeed = LED_SPEED_NORMAL;
    }
    else if(logSensors){
        SetPattern = LED_PATTERN_SOLID;
   d4462:	2601      	movs	r6, #1
    }

    statusMode = 0;
    statusMode = LTEAvail;
    statusMode |= XBeeAvail << 1;
    statusMode |= BLEAvail << 2;
   d4464:	4a23      	ldr	r2, [pc, #140]	; (d44f4 <_Z10LEDHandlerv+0xd0>)
        SetPattern = LED_PATTERN_FADE;
    }

    statusMode = 0;
    statusMode = LTEAvail;
    statusMode |= XBeeAvail << 1;
   d4466:	4b24      	ldr	r3, [pc, #144]	; (d44f8 <_Z10LEDHandlerv+0xd4>)
    statusMode |= BLEAvail << 2;
   d4468:	7814      	ldrb	r4, [r2, #0]
   d446a:	781b      	ldrb	r3, [r3, #0]
   d446c:	00a4      	lsls	r4, r4, #2
   d446e:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
        SetSpeed = LED_SPEED_NORMAL;
        SetPattern = LED_PATTERN_FADE;
    }

    statusMode = 0;
    statusMode = LTEAvail;
   d4472:	4b22      	ldr	r3, [pc, #136]	; (d44fc <_Z10LEDHandlerv+0xd8>)
    statusMode |= XBeeAvail << 1;
    statusMode |= BLEAvail << 2;
   d4474:	781b      	ldrb	r3, [r3, #0]
   d4476:	431c      	orrs	r4, r3
   d4478:	b264      	sxtb	r4, r4
    Serial.printlnf("Status: %d",statusMode);
   d447a:	f006 ffcf 	bl	db41c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d447e:	4623      	mov	r3, r4
   d4480:	4a1f      	ldr	r2, [pc, #124]	; (d4500 <_Z10LEDHandlerv+0xdc>)
   d4482:	2101      	movs	r1, #1
    switch (statusMode){
   d4484:	3c01      	subs	r4, #1
   d4486:	f005 fa8a 	bl	d999e <_ZN5Print11printf_implEbPKcz>
   d448a:	2c06      	cmp	r4, #6
   d448c:	d814      	bhi.n	d44b8 <_Z10LEDHandlerv+0x94>
   d448e:	e8df f004 	tbb	[pc, r4]
   d4492:	0e10      	.short	0x0e10
   d4494:	0406090b 	.word	0x0406090b
   d4498:	16          	.byte	0x16
   d4499:	00          	.byte	0x00
    case 7:
        SetColor = RGB_COLOR_CYAN;
        break;
    case 6:
        SetColor = RGB_COLOR_YELLOW;
   d449a:	4b1a      	ldr	r3, [pc, #104]	; (d4504 <_Z10LEDHandlerv+0xe0>)
   d449c:	e011      	b.n	d44c2 <_Z10LEDHandlerv+0x9e>
        break;
    case 5:
        SetColor = RGB_COLOR_WHITE;
   d449e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
        break;
   d44a2:	e00e      	b.n	d44c2 <_Z10LEDHandlerv+0x9e>
    case 4:
        SetColor = RGB_COLOR_BLUE;
   d44a4:	23ff      	movs	r3, #255	; 0xff
        break;
   d44a6:	e00c      	b.n	d44c2 <_Z10LEDHandlerv+0x9e>
    case 3:
        SetColor = RGB_COLOR_GREEN;
   d44a8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
        break;
   d44ac:	e009      	b.n	d44c2 <_Z10LEDHandlerv+0x9e>
    case 2:
        SetColor = RGB_COLOR_ORANGE;
   d44ae:	4b16      	ldr	r3, [pc, #88]	; (d4508 <_Z10LEDHandlerv+0xe4>)
        break;
   d44b0:	e007      	b.n	d44c2 <_Z10LEDHandlerv+0x9e>
    case 1:
        SetColor = RGB_COLOR_MAGENTA;
   d44b2:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
        break;
   d44b6:	e004      	b.n	d44c2 <_Z10LEDHandlerv+0x9e>
    case 0:
        SetColor = RGB_COLOR_RED;
   d44b8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
        break;
   d44bc:	e001      	b.n	d44c2 <_Z10LEDHandlerv+0x9e>
    statusMode |= XBeeAvail << 1;
    statusMode |= BLEAvail << 2;
    Serial.printlnf("Status: %d",statusMode);
    switch (statusMode){
    case 7:
        SetColor = RGB_COLOR_CYAN;
   d44be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return d_.color;
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   d44c2:	7c6a      	ldrb	r2, [r5, #17]
   d44c4:	2a0f      	cmp	r2, #15
   d44c6:	d108      	bne.n	d44da <_Z10LEDHandlerv+0xb6>
inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}

inline void particle::LEDStatus::setColor(uint32_t color) {
    d_.color = color;
   d44c8:	616b      	str	r3, [r5, #20]
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   d44ca:	4639      	mov	r1, r7
   d44cc:	4805      	ldr	r0, [pc, #20]	; (d44e4 <_Z10LEDHandlerv+0xc0>)
   d44ce:	f7ff ff9e 	bl	d440e <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   d44d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
        d_.pattern = pattern;
   d44d4:	2302      	movs	r3, #2
   d44d6:	746b      	strb	r3, [r5, #17]
   d44d8:	e7ac      	b.n	d4434 <_Z10LEDHandlerv+0x10>
   d44da:	4a02      	ldr	r2, [pc, #8]	; (d44e4 <_Z10LEDHandlerv+0xc0>)
   d44dc:	7456      	strb	r6, [r2, #17]
   d44de:	e7f3      	b.n	d44c8 <_Z10LEDHandlerv+0xa4>
   d44e0:	2003da20 	.word	0x2003da20
   d44e4:	2003dac4 	.word	0x2003dac4
   d44e8:	2003d4a0 	.word	0x2003d4a0
   d44ec:	2003db37 	.word	0x2003db37
   d44f0:	2003e20c 	.word	0x2003e20c
   d44f4:	2003db35 	.word	0x2003db35
   d44f8:	2003db36 	.word	0x2003db36
   d44fc:	2003da29 	.word	0x2003da29
   d4500:	000df3d1 	.word	0x000df3d1
   d4504:	00ffff00 	.word	0x00ffff00
   d4508:	00ff6000 	.word	0x00ff6000

000d450c <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d450c:	4613      	mov	r3, r2
   d450e:	460a      	mov	r2, r1
   d4510:	4901      	ldr	r1, [pc, #4]	; (d4518 <_ZN7FatFile4openEPKci+0xc>)
   d4512:	6809      	ldr	r1, [r1, #0]
   d4514:	f002 bbc1 	b.w	d6c9a <_ZN7FatFile4openEPS_PKci>
   d4518:	2003e30c 	.word	0x2003e30c

000d451c <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d451c:	b530      	push	{r4, r5, lr}
   d451e:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4520:	4b1c      	ldr	r3, [pc, #112]	; (d4594 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d4522:	9300      	str	r3, [sp, #0]
   d4524:	7913      	ldrb	r3, [r2, #4]
   d4526:	f88d 3004 	strb.w	r3, [sp, #4]
   d452a:	6893      	ldr	r3, [r2, #8]
   d452c:	9302      	str	r3, [sp, #8]
   d452e:	7b13      	ldrb	r3, [r2, #12]
   d4530:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4534:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d4538:	7b53      	ldrb	r3, [r2, #13]
   d453a:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d453e:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4540:	460a      	mov	r2, r1
   d4542:	466b      	mov	r3, sp
   d4544:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d4548:	4628      	mov	r0, r5
   d454a:	f002 ff3d 	bl	d73c8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d454e:	b1f0      	cbz	r0, d458e <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4550:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d4552:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d4556:	4628      	mov	r0, r5
   d4558:	f002 fb98 	bl	d6c8c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d455c:	2101      	movs	r1, #1
   d455e:	4620      	mov	r0, r4
   d4560:	f002 fddb 	bl	d711a <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4564:	4601      	mov	r1, r0
   d4566:	b168      	cbz	r0, d4584 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d4568:	4621      	mov	r1, r4
   d456a:	4628      	mov	r0, r5
   d456c:	f002 f967 	bl	d683e <_ZN7FatFile8openRootEP9FatVolume>
   d4570:	b168      	cbz	r0, d458e <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d4572:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4576:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d457a:	bf16      	itet	ne
   d457c:	4b06      	ldrne	r3, [pc, #24]	; (d4598 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d457e:	4618      	moveq	r0, r3
   d4580:	601d      	strne	r5, [r3, #0]
   d4582:	e005      	b.n	d4590 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d4584:	4620      	mov	r0, r4
   d4586:	f002 fdc8 	bl	d711a <_ZN9FatVolume4initEh>
   d458a:	2800      	cmp	r0, #0
   d458c:	d1ec      	bne.n	d4568 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d458e:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d4590:	b005      	add	sp, #20
   d4592:	bd30      	pop	{r4, r5, pc}
   d4594:	000df308 	.word	0x000df308
   d4598:	2003e30c 	.word	0x2003e30c

000d459c <_ZN13SFE_UBLOX_GPS11processNMEAEc>:
//Useful for passing to other libraries like tinyGPS, MicroNMEA, or even
//a buffer, radio, etc.
void SFE_UBLOX_GPS::processNMEA(char incoming){
  //Take the incoming char from the Ublox I2C port and pass it on to the MicroNMEA lib
  //for sentence cracking
  nmea.process(incoming);
   d459c:	4801      	ldr	r0, [pc, #4]	; (d45a4 <_ZN13SFE_UBLOX_GPS11processNMEAEc+0x8>)
   d459e:	f001 bc9d 	b.w	d5edc <_ZN9MicroNMEA7processEc>
   d45a2:	bf00      	nop
   d45a4:	2003d4ac 	.word	0x2003d4ac

000d45a8 <_Z8setupLTEv>:
}
//Initialization for LTE events and flags
void setupLTE(){
   d45a8:	b513      	push	{r0, r1, r4, lr}
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d45aa:	2400      	movs	r4, #0
   d45ac:	9401      	str	r4, [sp, #4]
   d45ae:	9400      	str	r4, [sp, #0]
   d45b0:	2301      	movs	r3, #1
   d45b2:	4622      	mov	r2, r4
   d45b4:	4903      	ldr	r1, [pc, #12]	; (d45c4 <_Z8setupLTEv+0x1c>)
   d45b6:	4804      	ldr	r0, [pc, #16]	; (d45c8 <_Z8setupLTEv+0x20>)
   d45b8:	f003 fe1a 	bl	d81f0 <spark_subscribe>
    Particle.subscribe("CCHub", cmdLTEHandler); //Subscribe to LTE data from Central Control Hub
    LTEAvail = false;
   d45bc:	4b03      	ldr	r3, [pc, #12]	; (d45cc <_Z8setupLTEv+0x24>)
   d45be:	701c      	strb	r4, [r3, #0]
}
   d45c0:	b002      	add	sp, #8
   d45c2:	bd10      	pop	{r4, pc}
   d45c4:	000d4bf9 	.word	0x000d4bf9
   d45c8:	000df3dc 	.word	0x000df3dc
   d45cc:	2003da29 	.word	0x2003da29

000d45d0 <_Z9setupXBeev>:
void setupSPI(){
    SPI.begin(SPI_MODE_MASTER);
    SPI.setClockSpeed(1000000);
}
//Code to initially configure XBee module over serial
void setupXBee(){
   d45d0:	b510      	push	{r4, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   d45d2:	f006 fffb 	bl	db5cc <_Z22__fetch_global_Serial1v>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d45d6:	4a0c      	ldr	r2, [pc, #48]	; (d4608 <_Z9setupXBeev+0x38>)
   d45d8:	2100      	movs	r1, #0
   d45da:	f005 f9e0 	bl	d999e <_ZN5Print11printf_implEbPKcz>
    delay(20);              //Wait some time before sending next character
   d45de:	2014      	movs	r0, #20
   d45e0:	f006 fad0 	bl	dab84 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   d45e4:	f006 fff2 	bl	db5cc <_Z22__fetch_global_Serial1v>
   d45e8:	4a08      	ldr	r2, [pc, #32]	; (d460c <_Z9setupXBeev+0x3c>)
   d45ea:	2100      	movs	r1, #0
   d45ec:	f005 f9d7 	bl	d999e <_ZN5Print11printf_implEbPKcz>
    delay(20);
   d45f0:	2014      	movs	r0, #20
   d45f2:	f006 fac7 	bl	dab84 <delay>
    Serial1.printf("Hello from Bot %d\n", BOTNUM);   //Send Hello World message!
   d45f6:	f006 ffe9 	bl	db5cc <_Z22__fetch_global_Serial1v>
   d45fa:	2301      	movs	r3, #1
   d45fc:	4a04      	ldr	r2, [pc, #16]	; (d4610 <_Z9setupXBeev+0x40>)
   d45fe:	2100      	movs	r1, #0
}
   d4600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4604:	f005 b9cb 	b.w	d999e <_ZN5Print11printf_implEbPKcz>
   d4608:	000df7fb 	.word	0x000df7fb
   d460c:	000df39b 	.word	0x000df39b
   d4610:	000df3e2 	.word	0x000df3e2

000d4614 <_Z8setupGPSv>:

//I2C setup for NEO-M8U GPS
void setupGPS(){
   d4614:	b510      	push	{r4, lr}
    myGPS.begin(Wire);
   d4616:	f007 fc3f 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d461a:	4c07      	ldr	r4, [pc, #28]	; (d4638 <_Z8setupGPSv+0x24>)
   d461c:	4601      	mov	r1, r0
   d461e:	4620      	mov	r0, r4
   d4620:	f003 f91d 	bl	d785e <_ZN13SFE_UBLOX_GPS5beginER7TwoWire>
    if (myGPS.isConnected() == false){
   d4624:	4620      	mov	r0, r4
   d4626:	f003 f93b 	bl	d78a0 <_ZN13SFE_UBLOX_GPS11isConnectedEv>
        //Log.warn("Ublox GPS not detected at default I2C address, freezing.");
        //while (1);
    }
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   d462a:	f007 fc35 	bl	dbe98 <_Z19__fetch_global_Wirev>

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d462e:	4903      	ldr	r1, [pc, #12]	; (d463c <_Z8setupGPSv+0x28>)
}
   d4630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4634:	f007 b842 	b.w	db6bc <_ZN7TwoWire8setSpeedEm>
   d4638:	2003e234 	.word	0x2003e234
   d463c:	00061a80 	.word	0x00061a80

000d4640 <_Z12getGPSLatLonv>:

bool getGPSLatLon(){
   d4640:	b508      	push	{r3, lr}
    myGPS.checkUblox(); //See if new data is available. Process bytes as they come in.
   d4642:	4807      	ldr	r0, [pc, #28]	; (d4660 <_Z12getGPSLatLonv+0x20>)
   d4644:	f003 fa4c 	bl	d7ae0 <_ZN13SFE_UBLOX_GPS10checkUbloxEv>
   d4648:	4b06      	ldr	r3, [pc, #24]	; (d4664 <_Z12getGPSLatLonv+0x24>)

  if(nmea.isValid() == true){
   d464a:	7d18      	ldrb	r0, [r3, #20]
   d464c:	b130      	cbz	r0, d465c <_Z12getGPSLatLonv+0x1c>
    latitude_mdeg= nmea.getLatitude();
   d464e:	4a06      	ldr	r2, [pc, #24]	; (d4668 <_Z12getGPSLatLonv+0x28>)
   d4650:	6999      	ldr	r1, [r3, #24]
   d4652:	6011      	str	r1, [r2, #0]
    longitude_mdeg = nmea.getLongitude();
   d4654:	69da      	ldr	r2, [r3, #28]
   d4656:	4b05      	ldr	r3, [pc, #20]	; (d466c <_Z12getGPSLatLonv+0x2c>)
   d4658:	2001      	movs	r0, #1
   d465a:	601a      	str	r2, [r3, #0]
  }
  else{
    //Log.warn("Location not available: %d Sattelites",nmea.getNumSatellites());
  }
  return false;
}
   d465c:	bd08      	pop	{r3, pc}
   d465e:	bf00      	nop
   d4660:	2003e234 	.word	0x2003e234
   d4664:	2003d4ac 	.word	0x2003d4ac
   d4668:	2003dae4 	.word	0x2003dae4
   d466c:	2003db08 	.word	0x2003db08

000d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4670:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4672:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4674:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4676:	b17c      	cbz	r4, d4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4678:	6863      	ldr	r3, [r4, #4]
   d467a:	3b01      	subs	r3, #1
   d467c:	6063      	str	r3, [r4, #4]
   d467e:	b95b      	cbnz	r3, d4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4680:	6823      	ldr	r3, [r4, #0]
   d4682:	4620      	mov	r0, r4
   d4684:	689b      	ldr	r3, [r3, #8]
   d4686:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4688:	68a3      	ldr	r3, [r4, #8]
   d468a:	3b01      	subs	r3, #1
   d468c:	60a3      	str	r3, [r4, #8]
   d468e:	b91b      	cbnz	r3, d4698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4690:	6823      	ldr	r3, [r4, #0]
   d4692:	4620      	mov	r0, r4
   d4694:	68db      	ldr	r3, [r3, #12]
   d4696:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4698:	4628      	mov	r0, r5
   d469a:	bd38      	pop	{r3, r4, r5, pc}

000d469c <_Z8sendDataPKchbbb>:
    if(updateMotorControl){
        updateMotorControl = false;        
    }
}

void sendData(const char *dataOut, uint8_t dataSize, bool sendBLE, bool sendXBee, bool sendLTE){
   d469c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d469e:	b08b      	sub	sp, #44	; 0x2c
   d46a0:	461e      	mov	r6, r3
    if(sendLTE){
   d46a2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    if(updateMotorControl){
        updateMotorControl = false;        
    }
}

void sendData(const char *dataOut, uint8_t dataSize, bool sendBLE, bool sendXBee, bool sendLTE){
   d46a6:	4604      	mov	r4, r0
   d46a8:	460d      	mov	r5, r1
   d46aa:	4617      	mov	r7, r2
    if(sendLTE){
   d46ac:	b163      	cbz	r3, d46c8 <_Z8sendDataPKchbbb+0x2c>
   d46ae:	4b16      	ldr	r3, [pc, #88]	; (d4708 <_Z8sendDataPKchbbb+0x6c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d46b0:	4916      	ldr	r1, [pc, #88]	; (d470c <_Z8sendDataPKchbbb+0x70>)
   d46b2:	781b      	ldrb	r3, [r3, #0]
   d46b4:	f88d 3000 	strb.w	r3, [sp]
   d46b8:	4602      	mov	r2, r0
   d46ba:	233c      	movs	r3, #60	; 0x3c
   d46bc:	a802      	add	r0, sp, #8
   d46be:	f006 fc53 	bl	daf68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d46c2:	a803      	add	r0, sp, #12
   d46c4:	f7ff ffd4 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("Bot1dat", dataOut, PRIVATE);
        sendLTE = false;
    }
    if(sendBLE && BLE.connected()){
   d46c8:	b1af      	cbz	r7, d46f6 <_Z8sendDataPKchbbb+0x5a>
   d46ca:	f004 fb67 	bl	d8d9c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d46ce:	f004 fbfe 	bl	d8ece <_ZNK8particle14BleLocalDevice9connectedEv>
   d46d2:	b180      	cbz	r0, d46f6 <_Z8sendDataPKchbbb+0x5a>
   d46d4:	2300      	movs	r3, #0
        uint8_t txBuf_tmp[UART_TX_BUF_SIZE];
        for(int i = 0; i < dataSize; i++) txBuf_tmp[i] = dataOut[i];
   d46d6:	42ab      	cmp	r3, r5
   d46d8:	a902      	add	r1, sp, #8
   d46da:	da03      	bge.n	d46e4 <_Z8sendDataPKchbbb+0x48>
   d46dc:	5ce2      	ldrb	r2, [r4, r3]
   d46de:	54ca      	strb	r2, [r1, r3]
   d46e0:	3301      	adds	r3, #1
   d46e2:	e7f8      	b.n	d46d6 <_Z8sendDataPKchbbb+0x3a>
        if(dataSize < UART_TX_BUF_SIZE) txCharacteristic.setValue(txBuf_tmp, dataSize);
   d46e4:	2d1d      	cmp	r5, #29
   d46e6:	f04f 0300 	mov.w	r3, #0
   d46ea:	bf94      	ite	ls
   d46ec:	462a      	movls	r2, r5
        else txCharacteristic.setValue(txBuf_tmp, UART_TX_BUF_SIZE);
   d46ee:	221e      	movhi	r2, #30
   d46f0:	4807      	ldr	r0, [pc, #28]	; (d4710 <_Z8sendDataPKchbbb+0x74>)
   d46f2:	f004 faa1 	bl	d8c38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    }
    if(sendXBee){
   d46f6:	b126      	cbz	r6, d4702 <_Z8sendDataPKchbbb+0x66>
        Serial1.println(dataOut);
   d46f8:	f006 ff68 	bl	db5cc <_Z22__fetch_global_Serial1v>
   d46fc:	4621      	mov	r1, r4
   d46fe:	f005 f924 	bl	d994a <_ZN5Print7printlnEPKc>
    }
}
   d4702:	b00b      	add	sp, #44	; 0x2c
   d4704:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4706:	bf00      	nop
   d4708:	2003d4f8 	.word	0x2003d4f8
   d470c:	000df3f5 	.word	0x000df3f5
   d4710:	2003d4f0 	.word	0x2003d4f0

000d4714 <_Z16sendResponseDatav>:
  }
  return false;
}

//Function to check if response data to a request needs to be sent out
void sendResponseData(){
   d4714:	b530      	push	{r4, r5, lr}
    if(requestActive){
   d4716:	4b08      	ldr	r3, [pc, #32]	; (d4738 <_Z16sendResponseDatav+0x24>)
   d4718:	781b      	ldrb	r3, [r3, #0]
  }
  return false;
}

//Function to check if response data to a request needs to be sent out
void sendResponseData(){
   d471a:	b08f      	sub	sp, #60	; 0x3c
    if(requestActive){
   d471c:	b153      	cbz	r3, d4734 <_Z16sendResponseDatav+0x20>
        char responseStr[50];
        memcpy(responseStr,0,50);
   d471e:	2500      	movs	r5, #0
   d4720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4722:	ac01      	add	r4, sp, #4
   d4724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d472a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d472c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d472e:	682b      	ldr	r3, [r5, #0]
   d4730:	8023      	strh	r3, [r4, #0]
   d4732:	deff      	udf	#255	; 0xff
        sprintf(responseStr,"GL%0.6f,GO%0.6f,DO%0.4f,PH%0.4f,CA%0.4f,CB%0.4f,TP%0.4f",latitude,longitude,senseDO,sensePH,senseCond,senseMiniCond,senseTemp);
        sendData(responseStr,strlen(responseStr),requestActive & 1, requestActive & 2, requestActive & 4);
        requestActive = 0;
    }
}
   d4734:	b00f      	add	sp, #60	; 0x3c
   d4736:	bd30      	pop	{r4, r5, pc}
   d4738:	2003db34 	.word	0x2003db34

000d473c <_Z12statusUpdatev>:

void statusUpdate(){
   d473c:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){
   d473e:	4b28      	ldr	r3, [pc, #160]	; (d47e0 <_Z12statusUpdatev+0xa4>)
   d4740:	781a      	ldrb	r2, [r3, #0]
        sendData(responseStr,strlen(responseStr),requestActive & 1, requestActive & 2, requestActive & 4);
        requestActive = 0;
    }
}

void statusUpdate(){
   d4742:	b08e      	sub	sp, #56	; 0x38
   d4744:	461d      	mov	r5, r3
    if(statusReady){
   d4746:	2a00      	cmp	r2, #0
   d4748:	d047      	beq.n	d47da <_Z12statusUpdatev+0x9e>
        char updateStr[28];
        sprintf(updateStr,"B%dABsup%03d%03d%0.6f%0.6f",BOTNUM,battPercent,statusFlags,latitude,longitude);
   d474a:	4b26      	ldr	r3, [pc, #152]	; (d47e4 <_Z12statusUpdatev+0xa8>)
   d474c:	781c      	ldrb	r4, [r3, #0]
   d474e:	4b26      	ldr	r3, [pc, #152]	; (d47e8 <_Z12statusUpdatev+0xac>)
   d4750:	6818      	ldr	r0, [r3, #0]
   d4752:	f007 fe97 	bl	dc484 <__aeabi_f2d>
   d4756:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d475a:	4b24      	ldr	r3, [pc, #144]	; (d47ec <_Z12statusUpdatev+0xb0>)
   d475c:	6818      	ldr	r0, [r3, #0]
   d475e:	f007 fe91 	bl	dc484 <__aeabi_f2d>
   d4762:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4766:	4b22      	ldr	r3, [pc, #136]	; (d47f0 <_Z12statusUpdatev+0xb4>)
   d4768:	4922      	ldr	r1, [pc, #136]	; (d47f4 <_Z12statusUpdatev+0xb8>)
   d476a:	781b      	ldrb	r3, [r3, #0]
   d476c:	9300      	str	r3, [sp, #0]
   d476e:	2201      	movs	r2, #1
   d4770:	4623      	mov	r3, r4
   d4772:	a807      	add	r0, sp, #28
   d4774:	f003 fd6c 	bl	d8250 <sprintf>
        Serial.println(updateStr);
   d4778:	f006 fe50 	bl	db41c <_Z16_fetch_usbserialv>
   d477c:	a907      	add	r1, sp, #28
   d477e:	f005 f8e4 	bl	d994a <_ZN5Print7printlnEPKc>
        Serial.println(LTEStatusCount);
   d4782:	f006 fe4b 	bl	db41c <_Z16_fetch_usbserialv>
   d4786:	4c1c      	ldr	r4, [pc, #112]	; (d47f8 <_Z12statusUpdatev+0xbc>)
   d4788:	4606      	mov	r6, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d478a:	220a      	movs	r2, #10
   d478c:	8821      	ldrh	r1, [r4, #0]
   d478e:	f005 f8e6 	bl	d995e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4792:	4630      	mov	r0, r6
   d4794:	f005 f8cd 	bl	d9932 <_ZN5Print7printlnEv>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   d4798:	4b18      	ldr	r3, [pc, #96]	; (d47fc <_Z12statusUpdatev+0xc0>)
   d479a:	781b      	ldrb	r3, [r3, #0]
   d479c:	b953      	cbnz	r3, d47b4 <_Z12statusUpdatev+0x78>
   d479e:	4b18      	ldr	r3, [pc, #96]	; (d4800 <_Z12statusUpdatev+0xc4>)
   d47a0:	781b      	ldrb	r3, [r3, #0]
   d47a2:	b93b      	cbnz	r3, d47b4 <_Z12statusUpdatev+0x78>
   d47a4:	8823      	ldrh	r3, [r4, #0]
   d47a6:	b12b      	cbz	r3, d47b4 <_Z12statusUpdatev+0x78>
   d47a8:	f013 0303 	ands.w	r3, r3, #3
   d47ac:	d102      	bne.n	d47b4 <_Z12statusUpdatev+0x78>
            sendData(updateStr,28,false,false,true);
   d47ae:	2201      	movs	r2, #1
   d47b0:	9200      	str	r2, [sp, #0]
   d47b2:	e005      	b.n	d47c0 <_Z12statusUpdatev+0x84>
        }
        else{
            LTEStatusCount = LTE_MAX_STATUS;
   d47b4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   d47b8:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,28,true,true,false);
   d47ba:	2300      	movs	r3, #0
   d47bc:	9300      	str	r3, [sp, #0]
   d47be:	2301      	movs	r3, #1
   d47c0:	211c      	movs	r1, #28
   d47c2:	461a      	mov	r2, r3
   d47c4:	eb0d 0001 	add.w	r0, sp, r1
   d47c8:	f7ff ff68 	bl	d469c <_Z8sendDataPKchbbb>
        }
        if(LTEStatusCount) LTEStatusCount--;
   d47cc:	8823      	ldrh	r3, [r4, #0]
   d47ce:	b113      	cbz	r3, d47d6 <_Z12statusUpdatev+0x9a>
   d47d0:	4a09      	ldr	r2, [pc, #36]	; (d47f8 <_Z12statusUpdatev+0xbc>)
   d47d2:	3b01      	subs	r3, #1
   d47d4:	8013      	strh	r3, [r2, #0]
        statusReady = false;
   d47d6:	2300      	movs	r3, #0
   d47d8:	702b      	strb	r3, [r5, #0]
    }
}
   d47da:	b00e      	add	sp, #56	; 0x38
   d47dc:	bd70      	pop	{r4, r5, r6, pc}
   d47de:	bf00      	nop
   d47e0:	2003e2bc 	.word	0x2003e2bc
   d47e4:	2003dae8 	.word	0x2003dae8
   d47e8:	2003db78 	.word	0x2003db78
   d47ec:	2003e210 	.word	0x2003e210
   d47f0:	2003e2d4 	.word	0x2003e2d4
   d47f4:	000df3fd 	.word	0x000df3fd
   d47f8:	2003db28 	.word	0x2003db28
   d47fc:	2003db35 	.word	0x2003db35
   d4800:	2003db36 	.word	0x2003db36

000d4804 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4804:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4806:	6804      	ldr	r4, [r0, #0]
   d4808:	6843      	ldr	r3, [r0, #4]
   d480a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d480c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d480e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4812:	42a6      	cmp	r6, r4
   d4814:	d004      	beq.n	d4820 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d4816:	4620      	mov	r0, r4
   d4818:	f003 fef6 	bl	d8608 <_ZN6StringD1Ev>
   d481c:	3414      	adds	r4, #20
   d481e:	e7f8      	b.n	d4812 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4820:	6828      	ldr	r0, [r5, #0]
   d4822:	f003 fd05 	bl	d8230 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4826:	4628      	mov	r0, r5
   d4828:	bd70      	pop	{r4, r5, r6, pc}

000d482a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d482a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d482c:	460e      	mov	r6, r1
   d482e:	b091      	sub	sp, #68	; 0x44

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4830:	2100      	movs	r1, #0
   d4832:	4604      	mov	r4, r0
   d4834:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4836:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4838:	ad0b      	add	r5, sp, #44	; 0x2c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d483a:	4619      	mov	r1, r3
   d483c:	a806      	add	r0, sp, #24
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d483e:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d4840:	f004 f91e 	bl	d8a80 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d4844:	9916      	ldr	r1, [sp, #88]	; 0x58
   d4846:	4628      	mov	r0, r5
   d4848:	f004 f91a 	bl	d8a80 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d484c:	aa10      	add	r2, sp, #64	; 0x40
   d484e:	783b      	ldrb	r3, [r7, #0]
   d4850:	f802 3d2c 	strb.w	r3, [r2, #-44]!
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4854:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d4856:	9302      	str	r3, [sp, #8]
   d4858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d485a:	9301      	str	r3, [sp, #4]
   d485c:	4620      	mov	r0, r4
   d485e:	9500      	str	r5, [sp, #0]
   d4860:	ab06      	add	r3, sp, #24
   d4862:	4631      	mov	r1, r6
   d4864:	f004 fe7a 	bl	d955c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d4868:	4620      	mov	r0, r4
   d486a:	b011      	add	sp, #68	; 0x44
   d486c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d486e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d486e:	4613      	mov	r3, r2
   d4870:	460a      	mov	r2, r1
   d4872:	2101      	movs	r1, #1
   d4874:	f005 b893 	b.w	d999e <_ZN5Print11printf_implEbPKcz>

000d4878 <_Z13dataOffloaderv>:
        BLEAvail = false;
    }
    else BLEAvail = true;
}

void dataOffloader(){
   d4878:	b510      	push	{r4, lr}
    if (!logDir.open("/")) {
   d487a:	2200      	movs	r2, #0
        BLEAvail = false;
    }
    else BLEAvail = true;
}

void dataOffloader(){
   d487c:	b0ac      	sub	sp, #176	; 0xb0
    if (!logDir.open("/")) {
   d487e:	4953      	ldr	r1, [pc, #332]	; (d49cc <_Z13dataOffloaderv+0x154>)
   d4880:	4853      	ldr	r0, [pc, #332]	; (d49d0 <_Z13dataOffloaderv+0x158>)
   d4882:	f7ff fe43 	bl	d450c <_ZN7FatFile4openEPKci>
   d4886:	b380      	cbz	r0, d48ea <_Z13dataOffloaderv+0x72>
        offloadMode = false;
        return;
    }
    while(!BLE.connected()){
   d4888:	f004 fa88 	bl	d8d9c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d488c:	f004 fb1f 	bl	d8ece <_ZNK8particle14BleLocalDevice9connectedEv>
   d4890:	4604      	mov	r4, r0
   d4892:	b9f0      	cbnz	r0, d48d2 <_Z13dataOffloaderv+0x5a>
        BLE.advertise(&advData);;
   d4894:	f004 fa82 	bl	d8d9c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4898:	4622      	mov	r2, r4
   d489a:	494e      	ldr	r1, [pc, #312]	; (d49d4 <_Z13dataOffloaderv+0x15c>)
   d489c:	f004 fafa 	bl	d8e94 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   d48a0:	200a      	movs	r0, #10
   d48a2:	f006 f96f 	bl	dab84 <delay>
   d48a6:	e7ef      	b.n	d4888 <_Z13dataOffloaderv+0x10>
                offloadCharacteristic.setValue(lineBuffer);
                delayMicroseconds(500);
                //delay(1);
                //Serial.println(lineBuffer);
            }
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   d48a8:	2226      	movs	r2, #38	; 0x26
   d48aa:	4601      	mov	r1, r0
   d48ac:	a809      	add	r0, sp, #36	; 0x24
   d48ae:	f008 fac0 	bl	dce32 <memset>
            strcpy(fileCode,"filecomp");
   d48b2:	4949      	ldr	r1, [pc, #292]	; (d49d8 <_Z13dataOffloaderv+0x160>)
   d48b4:	a809      	add	r0, sp, #36	; 0x24
   d48b6:	f008 fb1e 	bl	dcef6 <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d48ba:	4623      	mov	r3, r4
   d48bc:	2226      	movs	r2, #38	; 0x26
   d48be:	a909      	add	r1, sp, #36	; 0x24
   d48c0:	4846      	ldr	r0, [pc, #280]	; (d49dc <_Z13dataOffloaderv+0x164>)
   d48c2:	f004 f9b9 	bl	d8c38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            //memcpy(codeBuf,fileCode,8+MAX_FILENAME_LEN);
            offloadCharacteristic.setValue(fileCode);
            delay(150);
   d48c6:	2096      	movs	r0, #150	; 0x96
   d48c8:	f006 f95c 	bl	dab84 <delay>
            
            myFile.close();
   d48cc:	4844      	ldr	r0, [pc, #272]	; (d49e0 <_Z13dataOffloaderv+0x168>)
   d48ce:	f002 f9dd 	bl	d6c8c <_ZN7FatFile5closeEv>
        BLE.advertise(&advData);;
        delay(10);
    }
    char fileCode[8 + MAX_FILENAME_LEN];
    uint8_t codeBuf[8 + MAX_FILENAME_LEN];
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   d48d2:	2200      	movs	r2, #0
   d48d4:	493e      	ldr	r1, [pc, #248]	; (d49d0 <_Z13dataOffloaderv+0x158>)
   d48d6:	4842      	ldr	r0, [pc, #264]	; (d49e0 <_Z13dataOffloaderv+0x168>)
   d48d8:	f002 f963 	bl	d6ba2 <_ZN7FatFile8openNextEPS_i>
   d48dc:	b140      	cbz	r0, d48f0 <_Z13dataOffloaderv+0x78>
   d48de:	f004 fa5d 	bl	d8d9c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d48e2:	f004 faf4 	bl	d8ece <_ZNK8particle14BleLocalDevice9connectedEv>
   d48e6:	b9c8      	cbnz	r0, d491c <_Z13dataOffloaderv+0xa4>
   d48e8:	e002      	b.n	d48f0 <_Z13dataOffloaderv+0x78>
    else BLEAvail = true;
}

void dataOffloader(){
    if (!logDir.open("/")) {
        offloadMode = false;
   d48ea:	4b3e      	ldr	r3, [pc, #248]	; (d49e4 <_Z13dataOffloaderv+0x16c>)
   d48ec:	7018      	strb	r0, [r3, #0]
   d48ee:	e06b      	b.n	d49c8 <_Z13dataOffloaderv+0x150>
            delay(150);
            
            myFile.close();
        }
    }
    logDir.close();
   d48f0:	4837      	ldr	r0, [pc, #220]	; (d49d0 <_Z13dataOffloaderv+0x158>)
   d48f2:	f002 f9cb 	bl	d6c8c <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   d48f6:	2226      	movs	r2, #38	; 0x26
   d48f8:	2100      	movs	r1, #0
   d48fa:	a809      	add	r0, sp, #36	; 0x24
   d48fc:	f008 fa99 	bl	dce32 <memset>
    strcpy(fileCode,"filedone");
   d4900:	4939      	ldr	r1, [pc, #228]	; (d49e8 <_Z13dataOffloaderv+0x170>)
   d4902:	a809      	add	r0, sp, #36	; 0x24
   d4904:	f008 faf7 	bl	dcef6 <strcpy>
   d4908:	2300      	movs	r3, #0
   d490a:	2226      	movs	r2, #38	; 0x26
   d490c:	a909      	add	r1, sp, #36	; 0x24
   d490e:	4833      	ldr	r0, [pc, #204]	; (d49dc <_Z13dataOffloaderv+0x164>)
   d4910:	f004 f992 	bl	d8c38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    //memcpy(codeBuf,fileCode,8+MAX_FILENAME_LEN);
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
   d4914:	4b33      	ldr	r3, [pc, #204]	; (d49e4 <_Z13dataOffloaderv+0x16c>)
   d4916:	2200      	movs	r2, #0
   d4918:	701a      	strb	r2, [r3, #0]
   d491a:	e055      	b.n	d49c8 <_Z13dataOffloaderv+0x150>
    }
    char fileCode[8 + MAX_FILENAME_LEN];
    uint8_t codeBuf[8 + MAX_FILENAME_LEN];
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
        char namebuf[MAX_FILENAME_LEN];
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   d491c:	221e      	movs	r2, #30
   d491e:	a901      	add	r1, sp, #4
   d4920:	482f      	ldr	r0, [pc, #188]	; (d49e0 <_Z13dataOffloaderv+0x168>)
   d4922:	f001 fb7a 	bl	d601a <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   d4926:	f006 fd79 	bl	db41c <_Z16_fetch_usbserialv>
   d492a:	4930      	ldr	r1, [pc, #192]	; (d49ec <_Z13dataOffloaderv+0x174>)
   d492c:	aa01      	add	r2, sp, #4
   d492e:	f7ff ff9e 	bl	d486e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   d4932:	a801      	add	r0, sp, #4
   d4934:	f008 fb03 	bl	dcf3e <strlen>
   d4938:	ab01      	add	r3, sp, #4
   d493a:	3804      	subs	r0, #4
   d493c:	4418      	add	r0, r3
   d493e:	f008 fb07 	bl	dcf50 <strlwr>
   d4942:	492b      	ldr	r1, [pc, #172]	; (d49f0 <_Z13dataOffloaderv+0x178>)
   d4944:	f008 fb4c 	bl	dcfe0 <strstr>
   d4948:	2800      	cmp	r0, #0
   d494a:	d0bf      	beq.n	d48cc <_Z13dataOffloaderv+0x54>
            myFile.close();
            continue;
        }
        else{
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   d494c:	2226      	movs	r2, #38	; 0x26
   d494e:	2100      	movs	r1, #0
   d4950:	a809      	add	r0, sp, #36	; 0x24
   d4952:	f008 fa6e 	bl	dce32 <memset>
            strcpy(fileCode,"filename");
   d4956:	4927      	ldr	r1, [pc, #156]	; (d49f4 <_Z13dataOffloaderv+0x17c>)
   d4958:	a809      	add	r0, sp, #36	; 0x24
   d495a:	f008 facc 	bl	dcef6 <strcpy>
            strcat(fileCode,namebuf);
   d495e:	a901      	add	r1, sp, #4
   d4960:	a809      	add	r0, sp, #36	; 0x24
   d4962:	f008 fa97 	bl	dce94 <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   d4966:	f006 fd59 	bl	db41c <_Z16_fetch_usbserialv>
   d496a:	aa09      	add	r2, sp, #36	; 0x24
   d496c:	4922      	ldr	r1, [pc, #136]	; (d49f8 <_Z13dataOffloaderv+0x180>)
   d496e:	f7ff ff7e 	bl	d486e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
   d4972:	2300      	movs	r3, #0
   d4974:	2226      	movs	r2, #38	; 0x26
   d4976:	a909      	add	r1, sp, #36	; 0x24
   d4978:	4818      	ldr	r0, [pc, #96]	; (d49dc <_Z13dataOffloaderv+0x164>)
   d497a:	f004 f95d 	bl	d8c38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            offloadCharacteristic.setValue(fileCode);
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   d497e:	f006 fd4d 	bl	db41c <_Z16_fetch_usbserialv>
   d4982:	aa01      	add	r2, sp, #4
   d4984:	491d      	ldr	r1, [pc, #116]	; (d49fc <_Z13dataOffloaderv+0x184>)
   d4986:	f7ff ff72 	bl	d486e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
            delay(150);
   d498a:	2096      	movs	r0, #150	; 0x96
   d498c:	f006 f8fa 	bl	dab84 <delay>
            while(myFile.available()){
   d4990:	481b      	ldr	r0, [pc, #108]	; (d4a00 <_Z13dataOffloaderv+0x188>)
   d4992:	f7ff fba1 	bl	d40d8 <_ZN4File9availableEv>
   d4996:	4604      	mov	r4, r0
   d4998:	2800      	cmp	r0, #0
   d499a:	d085      	beq.n	d48a8 <_Z13dataOffloaderv+0x30>
                char lineBuffer[BLE_OFFLD_BUF];
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   d499c:	2264      	movs	r2, #100	; 0x64
   d499e:	2100      	movs	r1, #0
   d49a0:	a813      	add	r0, sp, #76	; 0x4c
   d49a2:	f008 fa46 	bl	dce32 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   d49a6:	aa13      	add	r2, sp, #76	; 0x4c
   d49a8:	2364      	movs	r3, #100	; 0x64
   d49aa:	210d      	movs	r1, #13
   d49ac:	4814      	ldr	r0, [pc, #80]	; (d4a00 <_Z13dataOffloaderv+0x188>)
   d49ae:	f005 f845 	bl	d9a3c <_ZN6Stream14readBytesUntilEcPcj>
   d49b2:	2300      	movs	r3, #0
   d49b4:	2264      	movs	r2, #100	; 0x64
   d49b6:	a913      	add	r1, sp, #76	; 0x4c
   d49b8:	4808      	ldr	r0, [pc, #32]	; (d49dc <_Z13dataOffloaderv+0x164>)
   d49ba:	f004 f93d 	bl	d8c38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d49be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d49c2:	f003 f92d 	bl	d7c20 <HAL_Delay_Microseconds>
   d49c6:	e7e3      	b.n	d4990 <_Z13dataOffloaderv+0x118>
    strcpy(fileCode,"filedone");
    //memcpy(codeBuf,fileCode,8+MAX_FILENAME_LEN);
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}
   d49c8:	b02c      	add	sp, #176	; 0xb0
   d49ca:	bd10      	pop	{r4, pc}
   d49cc:	000df426 	.word	0x000df426
   d49d0:	2003d9c0 	.word	0x2003d9c0
   d49d4:	2003d47c 	.word	0x2003d47c
   d49d8:	000df46c 	.word	0x000df46c
   d49dc:	2003d4a4 	.word	0x2003d4a4
   d49e0:	2003da3c 	.word	0x2003da3c
   d49e4:	2003da20 	.word	0x2003da20
   d49e8:	000df475 	.word	0x000df475
   d49ec:	000df47e 	.word	0x000df47e
   d49f0:	000df4a7 	.word	0x000df4a7
   d49f4:	000df428 	.word	0x000df428
   d49f8:	000df431 	.word	0x000df431
   d49fc:	000df444 	.word	0x000df444
   d4a00:	2003da2c 	.word	0x2003da2c

000d4a04 <_Z14processCommandPKchb>:
        uint8_t BLEPeer;    //Identify which peer this bot is connected to

};*/

//Mode 1 - BLE, Mode 2 - XBEE, Mode 4 - LTE
void processCommand(const char *command, uint8_t mode, bool sendAck){
   d4a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4a08:	b084      	sub	sp, #16
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   d4a0a:	7883      	ldrb	r3, [r0, #2]
   d4a0c:	2b41      	cmp	r3, #65	; 0x41
        uint8_t BLEPeer;    //Identify which peer this bot is connected to

};*/

//Mode 1 - BLE, Mode 2 - XBEE, Mode 4 - LTE
void processCommand(const char *command, uint8_t mode, bool sendAck){
   d4a0e:	af00      	add	r7, sp, #0
   d4a10:	4605      	mov	r5, r0
   d4a12:	4689      	mov	r9, r1
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   d4a14:	d102      	bne.n	d4a1c <_Z14processCommandPKchb+0x18>
   d4a16:	78c3      	ldrb	r3, [r0, #3]
   d4a18:	2b42      	cmp	r3, #66	; 0x42
   d4a1a:	e004      	b.n	d4a26 <_Z14processCommandPKchb+0x22>
   d4a1c:	2b42      	cmp	r3, #66	; 0x42
   d4a1e:	f040 80c7 	bne.w	d4bb0 <_Z14processCommandPKchb+0x1ac>
   d4a22:	78c3      	ldrb	r3, [r0, #3]
   d4a24:	2b31      	cmp	r3, #49	; 0x31
   d4a26:	f040 80c3 	bne.w	d4bb0 <_Z14processCommandPKchb+0x1ac>
        uint8_t checksum = (uint8_t)command[strlen(command)-1];
   d4a2a:	4628      	mov	r0, r5
   d4a2c:	f008 fa87 	bl	dcf3e <strlen>
   d4a30:	182b      	adds	r3, r5, r0
        char dataStr[strlen(command)-7];
   d4a32:	f020 0007 	bic.w	r0, r0, #7
            }
        }

        if(sendAck){    //Transmit out acknowledgement if needed

        }
   d4a36:	46e8      	mov	r8, sp

//Mode 1 - BLE, Mode 2 - XBEE, Mode 4 - LTE
void processCommand(const char *command, uint8_t mode, bool sendAck){
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
        uint8_t checksum = (uint8_t)command[strlen(command)-1];
   d4a38:	f813 ac01 	ldrb.w	sl, [r3, #-1]
        char dataStr[strlen(command)-7];
   d4a3c:	ebad 0d00 	sub.w	sp, sp, r0
   d4a40:	466c      	mov	r4, sp
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command)-1;i++){
   d4a42:	2604      	movs	r6, #4
   d4a44:	4628      	mov	r0, r5
   d4a46:	f008 fa7a 	bl	dcf3e <strlen>
   d4a4a:	1e43      	subs	r3, r0, #1
   d4a4c:	429e      	cmp	r6, r3
   d4a4e:	d211      	bcs.n	d4a74 <_Z14processCommandPKchb+0x70>
            if(i < 7) cmdStr[i-4] = command[i];
   d4a50:	2e06      	cmp	r6, #6
   d4a52:	bf9b      	ittet	ls
   d4a54:	f107 0310 	addls.w	r3, r7, #16
   d4a58:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   d4a5a:	19a3      	addhi	r3, r4, r6
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
        uint8_t checksum = (uint8_t)command[strlen(command)-1];
        char dataStr[strlen(command)-7];
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command)-1;i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d4a5c:	5daa      	ldrbls	r2, [r5, r6]
            else dataStr[i-7] = command[i];
   d4a5e:	bf8c      	ite	hi
   d4a60:	5daa      	ldrbhi	r2, [r5, r6]
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
        uint8_t checksum = (uint8_t)command[strlen(command)-1];
        char dataStr[strlen(command)-7];
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command)-1;i++){
            if(i < 7) cmdStr[i-4] = command[i];
   d4a62:	f803 2c10 	strbls.w	r2, [r3, #-16]
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
        uint8_t checksum = (uint8_t)command[strlen(command)-1];
        char dataStr[strlen(command)-7];
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command)-1;i++){
   d4a66:	f106 0601 	add.w	r6, r6, #1
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
   d4a6a:	bf88      	it	hi
   d4a6c:	f803 2c07 	strbhi.w	r2, [r3, #-7]
    //Process if command is addressed to this bot "Bx" or all bots "AB"
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
        uint8_t checksum = (uint8_t)command[strlen(command)-1];
        char dataStr[strlen(command)-7];
        char cmdStr[3];
        for(uint8_t i = 4; i < strlen(command)-1;i++){
   d4a70:	b2f6      	uxtb	r6, r6
   d4a72:	e7e7      	b.n	d4a44 <_Z14processCommandPKchb+0x40>
            if(i < 7) cmdStr[i-4] = command[i];
            else dataStr[i-7] = command[i];
        }
        if(checksum != strlen(command)){
   d4a74:	4550      	cmp	r0, sl
   d4a76:	d02a      	beq.n	d4ace <_Z14processCommandPKchb+0xca>
   d4a78:	4c4f      	ldr	r4, [pc, #316]	; (d4bb8 <_Z14processCommandPKchb+0x1b4>)
            if(!logFile.isOpen()){
   d4a7a:	7c23      	ldrb	r3, [r4, #16]
   d4a7c:	b983      	cbnz	r3, d4aa0 <_Z14processCommandPKchb+0x9c>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4a7e:	f244 2202 	movw	r2, #16898	; 0x4202
   d4a82:	494e      	ldr	r1, [pc, #312]	; (d4bbc <_Z14processCommandPKchb+0x1b8>)
   d4a84:	f104 0010 	add.w	r0, r4, #16
   d4a88:	f7ff fd40 	bl	d450c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   d4a8c:	462a      	mov	r2, r5
   d4a8e:	494c      	ldr	r1, [pc, #304]	; (d4bc0 <_Z14processCommandPKchb+0x1bc>)
   d4a90:	4620      	mov	r0, r4
   d4a92:	f7ff feec 	bl	d486e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
                logFile.close();
   d4a96:	f104 0010 	add.w	r0, r4, #16
   d4a9a:	f002 f8f7 	bl	d6c8c <_ZN7FatFile5closeEv>
   d4a9e:	e004      	b.n	d4aaa <_Z14processCommandPKchb+0xa6>
            }
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   d4aa0:	462a      	mov	r2, r5
   d4aa2:	4947      	ldr	r1, [pc, #284]	; (d4bc0 <_Z14processCommandPKchb+0x1bc>)
   d4aa4:	4620      	mov	r0, r4
   d4aa6:	f7ff fee2 	bl	d486e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
            memcpy(errBuf,0,MAX_ERR_BUF_SIZE);
   d4aaa:	4b46      	ldr	r3, [pc, #280]	; (d4bc4 <_Z14processCommandPKchb+0x1c0>)
   d4aac:	2200      	movs	r2, #0
   d4aae:	4614      	mov	r4, r2
   d4ab0:	cc03      	ldmia	r4!, {r0, r1}
   d4ab2:	2c08      	cmp	r4, #8
   d4ab4:	6018      	str	r0, [r3, #0]
   d4ab6:	6059      	str	r1, [r3, #4]
   d4ab8:	4622      	mov	r2, r4
   d4aba:	f103 0308 	add.w	r3, r3, #8
   d4abe:	d1f6      	bne.n	d4aae <_Z14processCommandPKchb+0xaa>
   d4ac0:	6820      	ldr	r0, [r4, #0]
   d4ac2:	6018      	str	r0, [r3, #0]
   d4ac4:	88a1      	ldrh	r1, [r4, #4]
   d4ac6:	79a2      	ldrb	r2, [r4, #6]
   d4ac8:	719a      	strb	r2, [r3, #6]
   d4aca:	8099      	strh	r1, [r3, #4]
   d4acc:	deff      	udf	#255	; 0xff
            else{
                snprintf("B%dABnak%3s",BOTNUM,cmdStr);
            }
            errModeReply = mode;
        }
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   d4ace:	493e      	ldr	r1, [pc, #248]	; (d4bc8 <_Z14processCommandPKchb+0x1c4>)
   d4ad0:	1d38      	adds	r0, r7, #4
   d4ad2:	f008 fa06 	bl	dcee2 <strcmp>
   d4ad6:	2800      	cmp	r0, #0
   d4ad8:	d065      	beq.n	d4ba6 <_Z14processCommandPKchb+0x1a2>
            else if(mode == 1){ //Acknowledge from BLE
                
            }
            return;
        }
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   d4ada:	493c      	ldr	r1, [pc, #240]	; (d4bcc <_Z14processCommandPKchb+0x1c8>)
   d4adc:	1d38      	adds	r0, r7, #4
   d4ade:	f008 fa00 	bl	dcee2 <strcmp>
   d4ae2:	b9b8      	cbnz	r0, d4b14 <_Z14processCommandPKchb+0x110>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   d4ae4:	7823      	ldrb	r3, [r4, #0]
   d4ae6:	723b      	strb	r3, [r7, #8]
   d4ae8:	7863      	ldrb	r3, [r4, #1]
   d4aea:	727b      	strb	r3, [r7, #9]
   d4aec:	78a3      	ldrb	r3, [r4, #2]
   d4aee:	72bb      	strb	r3, [r7, #10]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   d4af0:	78e3      	ldrb	r3, [r4, #3]
   d4af2:	733b      	strb	r3, [r7, #12]
   d4af4:	7923      	ldrb	r3, [r4, #4]
   d4af6:	737b      	strb	r3, [r7, #13]
            setLSpeed = atoi(lSpd);
   d4af8:	f107 0008 	add.w	r0, r7, #8
            }
            return;
        }
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   d4afc:	7963      	ldrb	r3, [r4, #5]
   d4afe:	73bb      	strb	r3, [r7, #14]
            setLSpeed = atoi(lSpd);
   d4b00:	f008 f849 	bl	dcb96 <atoi>
   d4b04:	4c32      	ldr	r4, [pc, #200]	; (d4bd0 <_Z14processCommandPKchb+0x1cc>)
   d4b06:	7020      	strb	r0, [r4, #0]
            setLSpeed = atoi(rSpd);
   d4b08:	f107 000c 	add.w	r0, r7, #12
   d4b0c:	f008 f843 	bl	dcb96 <atoi>
   d4b10:	7020      	strb	r0, [r4, #0]
   d4b12:	e048      	b.n	d4ba6 <_Z14processCommandPKchb+0x1a2>
        }
        else if(!strcmp(cmdStr,"req")){  //Data Request
   d4b14:	492f      	ldr	r1, [pc, #188]	; (d4bd4 <_Z14processCommandPKchb+0x1d0>)
   d4b16:	1d38      	adds	r0, r7, #4
   d4b18:	f008 f9e3 	bl	dcee2 <strcmp>
   d4b1c:	b918      	cbnz	r0, d4b26 <_Z14processCommandPKchb+0x122>
            requestActive = mode;
   d4b1e:	4b2e      	ldr	r3, [pc, #184]	; (d4bd8 <_Z14processCommandPKchb+0x1d4>)
   d4b20:	f883 9000 	strb.w	r9, [r3]
   d4b24:	e03f      	b.n	d4ba6 <_Z14processCommandPKchb+0x1a2>
        }
        else if(!strcmp(cmdStr,"pts")){
   d4b26:	492d      	ldr	r1, [pc, #180]	; (d4bdc <_Z14processCommandPKchb+0x1d8>)
   d4b28:	1d38      	adds	r0, r7, #4
   d4b2a:	f008 f9da 	bl	dcee2 <strcmp>
   d4b2e:	b9f0      	cbnz	r0, d4b6e <_Z14processCommandPKchb+0x16a>
   d4b30:	4d21      	ldr	r5, [pc, #132]	; (d4bb8 <_Z14processCommandPKchb+0x1b4>)
            Serial.println(dataStr);
   d4b32:	f006 fc73 	bl	db41c <_Z16_fetch_usbserialv>
   d4b36:	4621      	mov	r1, r4
   d4b38:	f004 ff07 	bl	d994a <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   d4b3c:	7c2b      	ldrb	r3, [r5, #16]
   d4b3e:	b983      	cbnz	r3, d4b62 <_Z14processCommandPKchb+0x15e>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4b40:	f244 2202 	movw	r2, #16898	; 0x4202
   d4b44:	491d      	ldr	r1, [pc, #116]	; (d4bbc <_Z14processCommandPKchb+0x1b8>)
   d4b46:	f105 0010 	add.w	r0, r5, #16
   d4b4a:	f7ff fcdf 	bl	d450c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   d4b4e:	4622      	mov	r2, r4
   d4b50:	4923      	ldr	r1, [pc, #140]	; (d4be0 <_Z14processCommandPKchb+0x1dc>)
   d4b52:	4628      	mov	r0, r5
   d4b54:	f7ff fe8b 	bl	d486e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
                logFile.close();
   d4b58:	f105 0010 	add.w	r0, r5, #16
   d4b5c:	f002 f896 	bl	d6c8c <_ZN7FatFile5closeEv>
   d4b60:	e021      	b.n	d4ba6 <_Z14processCommandPKchb+0x1a2>
            }
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   d4b62:	4622      	mov	r2, r4
   d4b64:	491e      	ldr	r1, [pc, #120]	; (d4be0 <_Z14processCommandPKchb+0x1dc>)
   d4b66:	4628      	mov	r0, r5
   d4b68:	f7ff fe81 	bl	d486e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
   d4b6c:	e01b      	b.n	d4ba6 <_Z14processCommandPKchb+0x1a2>
        }
        else if(!strcmp(cmdStr,"ccs")){  //Incoming communication status
   d4b6e:	491d      	ldr	r1, [pc, #116]	; (d4be4 <_Z14processCommandPKchb+0x1e0>)
   d4b70:	1d38      	adds	r0, r7, #4
   d4b72:	f008 f9b6 	bl	dcee2 <strcmp>
   d4b76:	b1b0      	cbz	r0, d4ba6 <_Z14processCommandPKchb+0x1a2>
            
        }
        else if(!strcmp(cmdStr,"aut")){  //Enter autonomous mode
   d4b78:	491b      	ldr	r1, [pc, #108]	; (d4be8 <_Z14processCommandPKchb+0x1e4>)
   d4b7a:	1d38      	adds	r0, r7, #4
   d4b7c:	f008 f9b1 	bl	dcee2 <strcmp>
   d4b80:	b188      	cbz	r0, d4ba6 <_Z14processCommandPKchb+0x1a2>
            
        }
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   d4b82:	491a      	ldr	r1, [pc, #104]	; (d4bec <_Z14processCommandPKchb+0x1e8>)
   d4b84:	1d38      	adds	r0, r7, #4
   d4b86:	f008 f9ac 	bl	dcee2 <strcmp>
   d4b8a:	b960      	cbnz	r0, d4ba6 <_Z14processCommandPKchb+0x1a2>
            offloadMode = true;
   d4b8c:	4b18      	ldr	r3, [pc, #96]	; (d4bf0 <_Z14processCommandPKchb+0x1ec>)
   d4b8e:	2201      	movs	r2, #1
   d4b90:	701a      	strb	r2, [r3, #0]
    return d_.color;
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   d4b92:	4b18      	ldr	r3, [pc, #96]	; (d4bf4 <_Z14processCommandPKchb+0x1f0>)
   d4b94:	7c5a      	ldrb	r2, [r3, #17]
   d4b96:	2a0f      	cmp	r2, #15
   d4b98:	d107      	bne.n	d4baa <_Z14processCommandPKchb+0x1a6>
inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}

inline void particle::LEDStatus::setColor(uint32_t color) {
    d_.color = color;
   d4b9a:	22ff      	movs	r2, #255	; 0xff
            status.setPattern(LED_PATTERN_BLINK);
            status.setColor(RGB_COLOR_BLUE);
            status.setSpeed(LED_SPEED_FAST);
   d4b9c:	211e      	movs	r1, #30
   d4b9e:	4815      	ldr	r0, [pc, #84]	; (d4bf4 <_Z14processCommandPKchb+0x1f0>)
   d4ba0:	615a      	str	r2, [r3, #20]
   d4ba2:	f7ff fc34 	bl	d440e <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>

            }
            else if(mode == 1){ //Acknowledge from BLE
                
            }
            return;
   d4ba6:	46c5      	mov	sp, r8
   d4ba8:	e002      	b.n	d4bb0 <_Z14processCommandPKchb+0x1ac>
}

inline void particle::LEDStatus::setPattern(LEDPattern pattern) {
    // Custom pattern type can be set only at constuction time
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
        d_.pattern = pattern;
   d4baa:	2202      	movs	r2, #2
   d4bac:	745a      	strb	r2, [r3, #17]
   d4bae:	e7f4      	b.n	d4b9a <_Z14processCommandPKchb+0x196>
        if(sendAck){    //Transmit out acknowledgement if needed

        }

    }
}
   d4bb0:	3710      	adds	r7, #16
   d4bb2:	46bd      	mov	sp, r7
   d4bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4bb8:	2003e2d8 	.word	0x2003e2d8
   d4bbc:	2003d990 	.word	0x2003d990
   d4bc0:	000df4ac 	.word	0x000df4ac
   d4bc4:	2003e215 	.word	0x2003e215
   d4bc8:	000df4d8 	.word	0x000df4d8
   d4bcc:	000df4dc 	.word	0x000df4dc
   d4bd0:	2003e2c5 	.word	0x2003e2c5
   d4bd4:	000df4e0 	.word	0x000df4e0
   d4bd8:	2003db34 	.word	0x2003db34
   d4bdc:	000df4e4 	.word	0x000df4e4
   d4be0:	000df4e8 	.word	0x000df4e8
   d4be4:	000df50b 	.word	0x000df50b
   d4be8:	000df50f 	.word	0x000df50f
   d4bec:	000df513 	.word	0x000df513
   d4bf0:	2003da20 	.word	0x2003da20
   d4bf4:	2003dac4 	.word	0x2003dac4

000d4bf8 <_Z13cmdLTEHandlerPKcS0_>:

void cmdLTEHandler(const char *event, const char *data){
   d4bf8:	b510      	push	{r4, lr}
   d4bfa:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   d4bfc:	2200      	movs	r2, #0
   d4bfe:	2104      	movs	r1, #4
   d4c00:	4620      	mov	r0, r4
   d4c02:	f7ff feff 	bl	d4a04 <_Z14processCommandPKchb>
    if(logMessages){
   d4c06:	4b0b      	ldr	r3, [pc, #44]	; (d4c34 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   d4c08:	781b      	ldrb	r3, [r3, #0]
   d4c0a:	b193      	cbz	r3, d4c32 <_Z13cmdLTEHandlerPKcS0_+0x3a>
   d4c0c:	480a      	ldr	r0, [pc, #40]	; (d4c38 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4c0e:	7c03      	ldrb	r3, [r0, #16]
   d4c10:	b92b      	cbnz	r3, d4c1e <_Z13cmdLTEHandlerPKcS0_+0x26>
   d4c12:	f244 2202 	movw	r2, #16898	; 0x4202
   d4c16:	4909      	ldr	r1, [pc, #36]	; (d4c3c <_Z13cmdLTEHandlerPKcS0_+0x44>)
   d4c18:	3010      	adds	r0, #16
   d4c1a:	f7ff fc77 	bl	d450c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   d4c1e:	4622      	mov	r2, r4
   d4c20:	4907      	ldr	r1, [pc, #28]	; (d4c40 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   d4c22:	4805      	ldr	r0, [pc, #20]	; (d4c38 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   d4c24:	f7ff fe23 	bl	d486e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        logFile.close();
   d4c28:	4806      	ldr	r0, [pc, #24]	; (d4c44 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
    }
}
   d4c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void cmdLTEHandler(const char *event, const char *data){
    processCommand(data, 4,false);
    if(logMessages){
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
   d4c2e:	f002 b82d 	b.w	d6c8c <_ZN7FatFile5closeEv>
   d4c32:	bd10      	pop	{r4, pc}
   d4c34:	2003e214 	.word	0x2003e214
   d4c38:	2003e2d8 	.word	0x2003e2d8
   d4c3c:	2003d990 	.word	0x2003d990
   d4c40:	000df517 	.word	0x000df517
   d4c44:	2003e2e8 	.word	0x2003e2e8

000d4c48 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
        char lteBuf[7] = {'B',BOTNUM+48,'A','B','c','c','s'};
        Particle.publish("WNS", lteBuf, PRIVATE);
    }
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4c48:	b598      	push	{r3, r4, r7, lr}
    char btBuf[len];
   d4c4a:	1dcb      	adds	r3, r1, #7
   d4c4c:	f023 0307 	bic.w	r3, r3, #7
        char lteBuf[7] = {'B',BOTNUM+48,'A','B','c','c','s'};
        Particle.publish("WNS", lteBuf, PRIVATE);
    }
}

static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4c50:	af00      	add	r7, sp, #0
    char btBuf[len];
   d4c52:	ebad 0d03 	sub.w	sp, sp, r3
   d4c56:	466c      	mov	r4, sp
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   d4c58:	2300      	movs	r3, #0
   d4c5a:	428b      	cmp	r3, r1
   d4c5c:	d003      	beq.n	d4c66 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
   d4c5e:	5cc2      	ldrb	r2, [r0, r3]
   d4c60:	54e2      	strb	r2, [r4, r3]
   d4c62:	3301      	adds	r3, #1
   d4c64:	e7f9      	b.n	d4c5a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12>
    Serial.println("New BT Command:");
   d4c66:	f006 fbd9 	bl	db41c <_Z16_fetch_usbserialv>
   d4c6a:	4916      	ldr	r1, [pc, #88]	; (d4cc4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   d4c6c:	f004 fe6d 	bl	d994a <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   d4c70:	f006 fbd4 	bl	db41c <_Z16_fetch_usbserialv>
   d4c74:	4621      	mov	r1, r4
   d4c76:	f004 fe68 	bl	d994a <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   d4c7a:	2201      	movs	r2, #1
   d4c7c:	4611      	mov	r1, r2
   d4c7e:	4620      	mov	r0, r4
   d4c80:	f7ff fec0 	bl	d4a04 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   d4c84:	7823      	ldrb	r3, [r4, #0]
   d4c86:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   d4c8a:	2b41      	cmp	r3, #65	; 0x41
   d4c8c:	d103      	bne.n	d4c96 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4c8e:	f002 ffd7 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
   d4c92:	4b0d      	ldr	r3, [pc, #52]	; (d4cc8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   d4c94:	6018      	str	r0, [r3, #0]
    if(logMessages){
   d4c96:	4b0d      	ldr	r3, [pc, #52]	; (d4ccc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   d4c98:	781b      	ldrb	r3, [r3, #0]
   d4c9a:	b183      	cbz	r3, d4cbe <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   d4c9c:	480c      	ldr	r0, [pc, #48]	; (d4cd0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4c9e:	7c03      	ldrb	r3, [r0, #16]
   d4ca0:	b92b      	cbnz	r3, d4cae <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x66>
   d4ca2:	f244 2202 	movw	r2, #16898	; 0x4202
   d4ca6:	490b      	ldr	r1, [pc, #44]	; (d4cd4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   d4ca8:	3010      	adds	r0, #16
   d4caa:	f7ff fc2f 	bl	d450c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   d4cae:	4622      	mov	r2, r4
   d4cb0:	4909      	ldr	r1, [pc, #36]	; (d4cd8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   d4cb2:	4807      	ldr	r0, [pc, #28]	; (d4cd0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   d4cb4:	f7ff fddb 	bl	d486e <_ZN5Print8printlnfIIPcEEEjPKcDpT_>
        logFile.close();
   d4cb8:	4808      	ldr	r0, [pc, #32]	; (d4cdc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   d4cba:	f001 ffe7 	bl	d6c8c <_ZN7FatFile5closeEv>
    }
}
   d4cbe:	46bd      	mov	sp, r7
   d4cc0:	bd98      	pop	{r3, r4, r7, pc}
   d4cc2:	bf00      	nop
   d4cc4:	000df537 	.word	0x000df537
   d4cc8:	2003d9e4 	.word	0x2003d9e4
   d4ccc:	2003e214 	.word	0x2003e214
   d4cd0:	2003e2d8 	.word	0x2003e2d8
   d4cd4:	2003d990 	.word	0x2003d990
   d4cd8:	000df547 	.word	0x000df547
   d4cdc:	2003e2e8 	.word	0x2003e2e8

000d4ce0 <_Z11XBeeHandlerv>:
        Wire.endTransmission();                                                       //end the I2C data transmission.
        dataWait = true;
    }
}

void XBeeHandler(){  
   d4ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char buffer[data.length()];
        for(int i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
        processCommand(buffer,2,true);
        Serial.println("New XBee Command:");
        Serial.println(data); 
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   d4ce4:	4d31      	ldr	r5, [pc, #196]	; (d4dac <_Z11XBeeHandlerv+0xcc>)
        if(logMessages){
   d4ce6:	4e32      	ldr	r6, [pc, #200]	; (d4db0 <_Z11XBeeHandlerv+0xd0>)
        Wire.endTransmission();                                                       //end the I2C data transmission.
        dataWait = true;
    }
}

void XBeeHandler(){  
   d4ce8:	b089      	sub	sp, #36	; 0x24
   d4cea:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   d4cec:	f006 fc6e 	bl	db5cc <_Z22__fetch_global_Serial1v>
   d4cf0:	6803      	ldr	r3, [r0, #0]
   d4cf2:	691b      	ldr	r3, [r3, #16]
   d4cf4:	4798      	blx	r3
   d4cf6:	2800      	cmp	r0, #0
   d4cf8:	d054      	beq.n	d4da4 <_Z11XBeeHandlerv+0xc4>
        String data = Serial1.readStringUntil('\n');
   d4cfa:	f006 fc67 	bl	db5cc <_Z22__fetch_global_Serial1v>
   d4cfe:	220a      	movs	r2, #10
   d4d00:	4601      	mov	r1, r0
   d4d02:	4638      	mov	r0, r7
   d4d04:	f004 feb4 	bl	d9a70 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   d4d08:	68bb      	ldr	r3, [r7, #8]
   d4d0a:	3307      	adds	r3, #7
   d4d0c:	f023 0307 	bic.w	r3, r3, #7
        if(logMessages){
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
            logFile.close();
        }
    }
   d4d10:	466c      	mov	r4, sp
}

void XBeeHandler(){  
    while(Serial1.available()){
        String data = Serial1.readStringUntil('\n');
        char buffer[data.length()];
   d4d12:	ebad 0d03 	sub.w	sp, sp, r3
   d4d16:	46e8      	mov	r8, sp
   d4d18:	46e9      	mov	r9, sp
        for(int i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   d4d1a:	68bb      	ldr	r3, [r7, #8]
   d4d1c:	ebc8 0109 	rsb	r1, r8, r9
   d4d20:	428b      	cmp	r3, r1
   d4d22:	d905      	bls.n	d4d30 <_Z11XBeeHandlerv+0x50>
   d4d24:	4638      	mov	r0, r7
   d4d26:	f003 fd21 	bl	d876c <_ZNK6String6charAtEj>
   d4d2a:	f809 0b01 	strb.w	r0, [r9], #1
   d4d2e:	e7f4      	b.n	d4d1a <_Z11XBeeHandlerv+0x3a>
        processCommand(buffer,2,true);
   d4d30:	2201      	movs	r2, #1
   d4d32:	2102      	movs	r1, #2
   d4d34:	4640      	mov	r0, r8
   d4d36:	f7ff fe65 	bl	d4a04 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   d4d3a:	f006 fb6f 	bl	db41c <_Z16_fetch_usbserialv>
   d4d3e:	491d      	ldr	r1, [pc, #116]	; (d4db4 <_Z11XBeeHandlerv+0xd4>)
   d4d40:	f004 fe03 	bl	d994a <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   d4d44:	f006 fb6a 	bl	db41c <_Z16_fetch_usbserialv>
   d4d48:	6839      	ldr	r1, [r7, #0]
   d4d4a:	f004 fdfe 	bl	d994a <_ZN5Print7printlnEPKc>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   d4d4e:	f898 3000 	ldrb.w	r3, [r8]
   d4d52:	3b42      	subs	r3, #66	; 0x42
   d4d54:	2b01      	cmp	r3, #1
   d4d56:	d802      	bhi.n	d4d5e <_Z11XBeeHandlerv+0x7e>
   d4d58:	f002 ff72 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
   d4d5c:	6028      	str	r0, [r5, #0]
        if(logMessages){
   d4d5e:	7833      	ldrb	r3, [r6, #0]
   d4d60:	b1db      	cbz	r3, d4d9a <_Z11XBeeHandlerv+0xba>
   d4d62:	4815      	ldr	r0, [pc, #84]	; (d4db8 <_Z11XBeeHandlerv+0xd8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4d64:	7c03      	ldrb	r3, [r0, #16]
   d4d66:	b92b      	cbnz	r3, d4d74 <_Z11XBeeHandlerv+0x94>
   d4d68:	f244 2202 	movw	r2, #16898	; 0x4202
   d4d6c:	4913      	ldr	r1, [pc, #76]	; (d4dbc <_Z11XBeeHandlerv+0xdc>)
   d4d6e:	3010      	adds	r0, #16
   d4d70:	f7ff fbcc 	bl	d450c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   d4d74:	4639      	mov	r1, r7
   d4d76:	f107 0010 	add.w	r0, r7, #16
   d4d7a:	f003 fcae 	bl	d86da <_ZN6StringC1ERKS_>
   d4d7e:	f107 0310 	add.w	r3, r7, #16
   d4d82:	4a0f      	ldr	r2, [pc, #60]	; (d4dc0 <_Z11XBeeHandlerv+0xe0>)
   d4d84:	480c      	ldr	r0, [pc, #48]	; (d4db8 <_Z11XBeeHandlerv+0xd8>)
   d4d86:	2101      	movs	r1, #1
   d4d88:	f004 fe09 	bl	d999e <_ZN5Print11printf_implEbPKcz>
   d4d8c:	f107 0010 	add.w	r0, r7, #16
   d4d90:	f003 fc3a 	bl	d8608 <_ZN6StringD1Ev>
            logFile.close();
   d4d94:	480b      	ldr	r0, [pc, #44]	; (d4dc4 <_Z11XBeeHandlerv+0xe4>)
   d4d96:	f001 ff79 	bl	d6c8c <_ZN7FatFile5closeEv>
    }
}

void XBeeHandler(){  
    while(Serial1.available()){
        String data = Serial1.readStringUntil('\n');
   d4d9a:	4638      	mov	r0, r7
   d4d9c:	f003 fc34 	bl	d8608 <_ZN6StringD1Ev>
   d4da0:	46a5      	mov	sp, r4
        dataWait = true;
    }
}

void XBeeHandler(){  
    while(Serial1.available()){
   d4da2:	e7a3      	b.n	d4cec <_Z11XBeeHandlerv+0xc>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
            logFile.close();
        }
    }
}
   d4da4:	3724      	adds	r7, #36	; 0x24
   d4da6:	46bd      	mov	sp, r7
   d4da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4dac:	2003e2c0 	.word	0x2003e2c0
   d4db0:	2003e214 	.word	0x2003e214
   d4db4:	000df567 	.word	0x000df567
   d4db8:	2003e2d8 	.word	0x2003e2d8
   d4dbc:	2003d990 	.word	0x2003d990
   d4dc0:	000df579 	.word	0x000df579
   d4dc4:	2003e2e8 	.word	0x2003e2e8

000d4dc8 <_ZN5Print8printlnfIIiEEEjPKcDpT_>:
   d4dc8:	4613      	mov	r3, r2
   d4dca:	460a      	mov	r2, r1
   d4dcc:	2101      	movs	r1, #1
   d4dce:	f004 bde6 	b.w	d999e <_ZN5Print11printf_implEbPKcz>
	...

000d4dd4 <_Z11wdogHandlerv>:
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
        logFile.close();
    }
}

void wdogHandler(){
   d4dd4:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4dd6:	f003 f9fb 	bl	d81d0 <spark_cloud_flag_connected>
   d4dda:	4c29      	ldr	r4, [pc, #164]	; (d4e80 <_Z11wdogHandlerv+0xac>)
    if(Particle.connected()) LTEAvail = true;
   d4ddc:	b108      	cbz	r0, d4de2 <_Z11wdogHandlerv+0xe>
   d4dde:	2301      	movs	r3, #1
   d4de0:	e010      	b.n	d4e04 <_Z11wdogHandlerv+0x30>
    else if(LTEAvail){
   d4de2:	7823      	ldrb	r3, [r4, #0]
   d4de4:	b17b      	cbz	r3, d4e06 <_Z11wdogHandlerv+0x32>
   d4de6:	4827      	ldr	r0, [pc, #156]	; (d4e84 <_Z11wdogHandlerv+0xb0>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4de8:	7c03      	ldrb	r3, [r0, #16]
   d4dea:	b92b      	cbnz	r3, d4df8 <_Z11wdogHandlerv+0x24>
   d4dec:	f244 2202 	movw	r2, #16898	; 0x4202
   d4df0:	4925      	ldr	r1, [pc, #148]	; (d4e88 <_Z11wdogHandlerv+0xb4>)
   d4df2:	3010      	adds	r0, #16
   d4df4:	f7ff fb8a 	bl	d450c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   d4df8:	221e      	movs	r2, #30
   d4dfa:	4924      	ldr	r1, [pc, #144]	; (d4e8c <_Z11wdogHandlerv+0xb8>)
   d4dfc:	4821      	ldr	r0, [pc, #132]	; (d4e84 <_Z11wdogHandlerv+0xb0>)
   d4dfe:	f7ff ffe3 	bl	d4dc8 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        LTEAvail = false;
   d4e02:	2300      	movs	r3, #0
   d4e04:	7023      	strb	r3, [r4, #0]
   d4e06:	f002 ff1b 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
    }
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL){
   d4e0a:	4b21      	ldr	r3, [pc, #132]	; (d4e90 <_Z11wdogHandlerv+0xbc>)
   d4e0c:	4c21      	ldr	r4, [pc, #132]	; (d4e94 <_Z11wdogHandlerv+0xc0>)
   d4e0e:	681b      	ldr	r3, [r3, #0]
   d4e10:	1ac0      	subs	r0, r0, r3
   d4e12:	f247 5330 	movw	r3, #30000	; 0x7530
   d4e16:	4298      	cmp	r0, r3
   d4e18:	d911      	bls.n	d4e3e <_Z11wdogHandlerv+0x6a>
        if(XBeeAvail){
   d4e1a:	7823      	ldrb	r3, [r4, #0]
   d4e1c:	b16b      	cbz	r3, d4e3a <_Z11wdogHandlerv+0x66>
   d4e1e:	4819      	ldr	r0, [pc, #100]	; (d4e84 <_Z11wdogHandlerv+0xb0>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4e20:	7c03      	ldrb	r3, [r0, #16]
   d4e22:	b92b      	cbnz	r3, d4e30 <_Z11wdogHandlerv+0x5c>
   d4e24:	f244 2202 	movw	r2, #16898	; 0x4202
   d4e28:	4917      	ldr	r1, [pc, #92]	; (d4e88 <_Z11wdogHandlerv+0xb4>)
   d4e2a:	3010      	adds	r0, #16
   d4e2c:	f7ff fb6e 	bl	d450c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   d4e30:	221e      	movs	r2, #30
   d4e32:	4916      	ldr	r1, [pc, #88]	; (d4e8c <_Z11wdogHandlerv+0xb8>)
   d4e34:	4813      	ldr	r0, [pc, #76]	; (d4e84 <_Z11wdogHandlerv+0xb0>)
   d4e36:	f7ff ffc7 	bl	d4dc8 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        }
        XBeeAvail = false;
   d4e3a:	2300      	movs	r3, #0
   d4e3c:	e000      	b.n	d4e40 <_Z11wdogHandlerv+0x6c>
    }
    else XBeeAvail = true;
   d4e3e:	2301      	movs	r3, #1
   d4e40:	7023      	strb	r3, [r4, #0]
   d4e42:	f002 fefd 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL){
   d4e46:	4b14      	ldr	r3, [pc, #80]	; (d4e98 <_Z11wdogHandlerv+0xc4>)
   d4e48:	4c14      	ldr	r4, [pc, #80]	; (d4e9c <_Z11wdogHandlerv+0xc8>)
   d4e4a:	681b      	ldr	r3, [r3, #0]
   d4e4c:	1ac0      	subs	r0, r0, r3
   d4e4e:	f247 5330 	movw	r3, #30000	; 0x7530
   d4e52:	4298      	cmp	r0, r3
   d4e54:	d911      	bls.n	d4e7a <_Z11wdogHandlerv+0xa6>
        if(BLEAvail){
   d4e56:	7823      	ldrb	r3, [r4, #0]
   d4e58:	b16b      	cbz	r3, d4e76 <_Z11wdogHandlerv+0xa2>
   d4e5a:	480a      	ldr	r0, [pc, #40]	; (d4e84 <_Z11wdogHandlerv+0xb0>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d4e5c:	7c03      	ldrb	r3, [r0, #16]
   d4e5e:	b92b      	cbnz	r3, d4e6c <_Z11wdogHandlerv+0x98>
   d4e60:	f244 2202 	movw	r2, #16898	; 0x4202
   d4e64:	4908      	ldr	r1, [pc, #32]	; (d4e88 <_Z11wdogHandlerv+0xb4>)
   d4e66:	3010      	adds	r0, #16
   d4e68:	f7ff fb50 	bl	d450c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   d4e6c:	221e      	movs	r2, #30
   d4e6e:	490c      	ldr	r1, [pc, #48]	; (d4ea0 <_Z11wdogHandlerv+0xcc>)
   d4e70:	4804      	ldr	r0, [pc, #16]	; (d4e84 <_Z11wdogHandlerv+0xb0>)
   d4e72:	f7ff ffa9 	bl	d4dc8 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        }
        BLEAvail = false;
   d4e76:	2300      	movs	r3, #0
   d4e78:	e000      	b.n	d4e7c <_Z11wdogHandlerv+0xa8>
    }
    else BLEAvail = true;
   d4e7a:	2301      	movs	r3, #1
   d4e7c:	7023      	strb	r3, [r4, #0]
   d4e7e:	bd10      	pop	{r4, pc}
   d4e80:	2003da29 	.word	0x2003da29
   d4e84:	2003e2d8 	.word	0x2003e2d8
   d4e88:	2003d990 	.word	0x2003d990
   d4e8c:	000df59a 	.word	0x000df59a
   d4e90:	2003e2c0 	.word	0x2003e2c0
   d4e94:	2003db36 	.word	0x2003db36
   d4e98:	2003d9e4 	.word	0x2003d9e4
   d4e9c:	2003db35 	.word	0x2003db35
   d4ea0:	000df5eb 	.word	0x000df5eb

000d4ea4 <_ZN5Print8printlnfIIfEEEjPKcDpT_>:
    {
        return this->printf_impl(false, format, args...);
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
   d4ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4ea6:	4604      	mov	r4, r0
    {
        return this->printf_impl(true, format, args...);
   d4ea8:	ee10 0a10 	vmov	r0, s0
    {
        return this->printf_impl(false, format, args...);
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
   d4eac:	460d      	mov	r5, r1
    {
        return this->printf_impl(true, format, args...);
   d4eae:	f007 fae9 	bl	dc484 <__aeabi_f2d>
   d4eb2:	462a      	mov	r2, r5
   d4eb4:	e9cd 0100 	strd	r0, r1, [sp]
   d4eb8:	2101      	movs	r1, #1
   d4eba:	4620      	mov	r0, r4
   d4ebc:	f004 fd6f 	bl	d999e <_ZN5Print11printf_implEbPKcz>
    }
   d4ec0:	b003      	add	sp, #12
   d4ec2:	bd30      	pop	{r4, r5, pc}
   d4ec4:	0000      	movs	r0, r0
	...

000d4ec8 <_Z13sensorHandlerv>:
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
    statusReady = true;
}

void sensorHandler(){
   d4ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
    if(dataTimer < millis() && dataWait){
   d4ecc:	4d8a      	ldr	r5, [pc, #552]	; (d50f8 <_Z13sensorHandlerv+0x230>)
    statusFlags |= lowBattery << 5;
    statusFlags |= logSensors << 6;
    statusReady = true;
}

void sensorHandler(){
   d4ece:	b0a9      	sub	sp, #164	; 0xa4
   d4ed0:	f002 feb6 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
    
    if(dataTimer < millis() && dataWait){
   d4ed4:	682b      	ldr	r3, [r5, #0]
   d4ed6:	4283      	cmp	r3, r0
   d4ed8:	d21a      	bcs.n	d4f10 <_Z13sensorHandlerv+0x48>
   d4eda:	4e88      	ldr	r6, [pc, #544]	; (d50fc <_Z13sensorHandlerv+0x234>)
   d4edc:	7833      	ldrb	r3, [r6, #0]
   d4ede:	2b00      	cmp	r3, #0
   d4ee0:	d163      	bne.n	d4faa <_Z13sensorHandlerv+0xe2>
   d4ee2:	e015      	b.n	d4f10 <_Z13sensorHandlerv+0x48>
        c = 0;
        while(Wire.available()){   // slave may send less than requested
            addrSense[c++] = Wire.read();

        }
        float senseTemp = atof(addrSense);
   d4ee4:	a823      	add	r0, sp, #140	; 0x8c
   d4ee6:	f007 fe53 	bl	dcb90 <atof>
   d4eea:	ec51 0b10 	vmov	r0, r1, d0
   d4eee:	f007 fdff 	bl	dcaf0 <__aeabi_d2f>
   d4ef2:	4607      	mov	r7, r0
        Serial.printlnf("Temperature: %f",senseTemp);
   d4ef4:	f006 fa92 	bl	db41c <_Z16_fetch_usbserialv>
   d4ef8:	ee00 7a10 	vmov	s0, r7
   d4efc:	4980      	ldr	r1, [pc, #512]	; (d5100 <_Z13sensorHandlerv+0x238>)
   d4efe:	f7ff ffd1 	bl	d4ea4 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
        dataWait = false;
        if(logSensors){
   d4f02:	4b80      	ldr	r3, [pc, #512]	; (d5104 <_Z13sensorHandlerv+0x23c>)
            addrSense[c++] = Wire.read();

        }
        float senseTemp = atof(addrSense);
        Serial.printlnf("Temperature: %f",senseTemp);
        dataWait = false;
   d4f04:	f886 9000 	strb.w	r9, [r6]
        if(logSensors){
   d4f08:	781b      	ldrb	r3, [r3, #0]
   d4f0a:	2b00      	cmp	r3, #0
   d4f0c:	f040 8106 	bne.w	d511c <_Z13sensorHandlerv+0x254>
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
            myFile.close();
        }
    }
    if(senseTimer < millis()){
   d4f10:	4c7d      	ldr	r4, [pc, #500]	; (d5108 <_Z13sensorHandlerv+0x240>)
   d4f12:	f002 fe95 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
   d4f16:	6823      	ldr	r3, [r4, #0]
   d4f18:	4283      	cmp	r3, r0
   d4f1a:	f080 816b 	bcs.w	d51f4 <_Z13sensorHandlerv+0x32c>
   d4f1e:	f002 fe8f 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   d4f22:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   d4f26:	6020      	str	r0, [r4, #0]
   d4f28:	f002 fe8a 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   d4f2c:	f200 3039 	addw	r0, r0, #825	; 0x339
   d4f30:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   d4f32:	f006 ffb1 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4f36:	2163      	movs	r1, #99	; 0x63
   d4f38:	f006 fbff 	bl	db73a <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   d4f3c:	f006 ffac 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4f40:	2172      	movs	r1, #114	; 0x72
   d4f42:	f7ff f9da 	bl	d42fa <_ZN7TwoWire5writeEi>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   d4f46:	f006 ffa7 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4f4a:	f006 fbfd 	bl	db748 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   d4f4e:	f006 ffa3 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4f52:	2164      	movs	r1, #100	; 0x64
   d4f54:	f006 fbf1 	bl	db73a <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   d4f58:	f006 ff9e 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4f5c:	2172      	movs	r1, #114	; 0x72
   d4f5e:	f7ff f9cc 	bl	d42fa <_ZN7TwoWire5writeEi>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   d4f62:	f006 ff99 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4f66:	f006 fbef 	bl	db748 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   d4f6a:	f006 ff95 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4f6e:	2165      	movs	r1, #101	; 0x65
   d4f70:	f006 fbe3 	bl	db73a <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   d4f74:	f006 ff90 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4f78:	2172      	movs	r1, #114	; 0x72
   d4f7a:	f7ff f9be 	bl	d42fa <_ZN7TwoWire5writeEi>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   d4f7e:	f006 ff8b 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4f82:	f006 fbe1 	bl	db748 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   d4f86:	f006 ff87 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4f8a:	2166      	movs	r1, #102	; 0x66
   d4f8c:	f006 fbd5 	bl	db73a <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   d4f90:	f006 ff82 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4f94:	2172      	movs	r1, #114	; 0x72
   d4f96:	f7ff f9b0 	bl	d42fa <_ZN7TwoWire5writeEi>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   d4f9a:	f006 ff7d 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4f9e:	f006 fbd3 	bl	db748 <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   d4fa2:	4b56      	ldr	r3, [pc, #344]	; (d50fc <_Z13sensorHandlerv+0x234>)
   d4fa4:	2201      	movs	r2, #1
   d4fa6:	701a      	strb	r2, [r3, #0]
    }
}
   d4fa8:	e124      	b.n	d51f4 <_Z13sensorHandlerv+0x32c>
}

void sensorHandler(){
    
    if(dataTimer < millis() && dataWait){
        Wire.requestFrom(PHADDR, 20, 1);
   d4faa:	f006 ff75 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4fae:	2301      	movs	r3, #1
   d4fb0:	2214      	movs	r2, #20
   d4fb2:	2163      	movs	r1, #99	; 0x63
   d4fb4:	f006 fba8 	bl	db708 <_ZN7TwoWire11requestFromEhjh>
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   d4fb8:	f006 ff6e 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4fbc:	6803      	ldr	r3, [r0, #0]
   d4fbe:	695b      	ldr	r3, [r3, #20]
   d4fc0:	4798      	blx	r3
   d4fc2:	f10d 044f 	add.w	r4, sp, #79	; 0x4f
        char tempSense[20];
        int c = 0;
        while(Wire.available()){   // slave may send less than requested
   d4fc6:	f006 ff67 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4fca:	6803      	ldr	r3, [r0, #0]
   d4fcc:	691b      	ldr	r3, [r3, #16]
   d4fce:	4798      	blx	r3
   d4fd0:	b138      	cbz	r0, d4fe2 <_Z13sensorHandlerv+0x11a>
            tempSense[c++] = Wire.read();
   d4fd2:	f006 ff61 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d4fd6:	6803      	ldr	r3, [r0, #0]
   d4fd8:	695b      	ldr	r3, [r3, #20]
   d4fda:	4798      	blx	r3
   d4fdc:	f804 0f01 	strb.w	r0, [r4, #1]!
    if(dataTimer < millis() && dataWait){
        Wire.requestFrom(PHADDR, 20, 1);
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
        char tempSense[20];
        int c = 0;
        while(Wire.available()){   // slave may send less than requested
   d4fe0:	e7f1      	b.n	d4fc6 <_Z13sensorHandlerv+0xfe>
            tempSense[c++] = Wire.read();

        }
        sensePH = atof(tempSense);
   d4fe2:	a814      	add	r0, sp, #80	; 0x50
   d4fe4:	f007 fdd4 	bl	dcb90 <atof>
   d4fe8:	ec51 0b10 	vmov	r0, r1, d0
   d4fec:	f007 fd80 	bl	dcaf0 <__aeabi_d2f>
   d4ff0:	4c46      	ldr	r4, [pc, #280]	; (d510c <_Z13sensorHandlerv+0x244>)
   d4ff2:	6020      	str	r0, [r4, #0]
        Serial.printlnf("pH: %f", sensePH);
   d4ff4:	f006 fa12 	bl	db41c <_Z16_fetch_usbserialv>
   d4ff8:	ed94 0a00 	vldr	s0, [r4]
   d4ffc:	4944      	ldr	r1, [pc, #272]	; (d5110 <_Z13sensorHandlerv+0x248>)
   d4ffe:	f7ff ff51 	bl	d4ea4 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
        Wire.requestFrom(MCOND, 20, 1);
   d5002:	f006 ff49 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d5006:	2301      	movs	r3, #1
   d5008:	2214      	movs	r2, #20
   d500a:	2164      	movs	r1, #100	; 0x64
   d500c:	f006 fb7c 	bl	db708 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   d5010:	f006 ff42 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d5014:	6803      	ldr	r3, [r0, #0]
   d5016:	695b      	ldr	r3, [r3, #20]
   d5018:	4798      	blx	r3
   d501a:	f10d 0763 	add.w	r7, sp, #99	; 0x63
        char mcondSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d501e:	f006 ff3b 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d5022:	6803      	ldr	r3, [r0, #0]
   d5024:	691b      	ldr	r3, [r3, #16]
   d5026:	4798      	blx	r3
   d5028:	b138      	cbz	r0, d503a <_Z13sensorHandlerv+0x172>
            mcondSense[c++] = Wire.read();
   d502a:	f006 ff35 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d502e:	6803      	ldr	r3, [r0, #0]
   d5030:	695b      	ldr	r3, [r3, #20]
   d5032:	4798      	blx	r3
   d5034:	f807 0f01 	strb.w	r0, [r7, #1]!
        Serial.printlnf("pH: %f", sensePH);
        Wire.requestFrom(MCOND, 20, 1);
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
        char mcondSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d5038:	e7f1      	b.n	d501e <_Z13sensorHandlerv+0x156>
            mcondSense[c++] = Wire.read();

        }
        float senseMCond = atof(mcondSense);
   d503a:	a819      	add	r0, sp, #100	; 0x64
   d503c:	f007 fda8 	bl	dcb90 <atof>
   d5040:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
        Serial.printlnf("MiniCond: %f",senseMCond);
   d5044:	f006 f9ea 	bl	db41c <_Z16_fetch_usbserialv>
   d5048:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
   d504c:	4607      	mov	r7, r0
   d504e:	ec51 0b10 	vmov	r0, r1, d0
   d5052:	f007 fd4d 	bl	dcaf0 <__aeabi_d2f>
   d5056:	492f      	ldr	r1, [pc, #188]	; (d5114 <_Z13sensorHandlerv+0x24c>)
   d5058:	ee00 0a10 	vmov	s0, r0
   d505c:	4638      	mov	r0, r7
   d505e:	f7ff ff21 	bl	d4ea4 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
        Wire.requestFrom(COND, 20, 1);
   d5062:	f006 ff19 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d5066:	2301      	movs	r3, #1
   d5068:	2214      	movs	r2, #20
   d506a:	2165      	movs	r1, #101	; 0x65
   d506c:	f006 fb4c 	bl	db708 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   d5070:	f006 ff12 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d5074:	6803      	ldr	r3, [r0, #0]
   d5076:	695b      	ldr	r3, [r3, #20]
   d5078:	4798      	blx	r3
   d507a:	f10d 0777 	add.w	r7, sp, #119	; 0x77
        char condSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d507e:	f006 ff0b 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d5082:	6803      	ldr	r3, [r0, #0]
   d5084:	691b      	ldr	r3, [r3, #16]
   d5086:	4798      	blx	r3
   d5088:	b138      	cbz	r0, d509a <_Z13sensorHandlerv+0x1d2>
            condSense[c++] = Wire.read();
   d508a:	f006 ff05 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d508e:	6803      	ldr	r3, [r0, #0]
   d5090:	695b      	ldr	r3, [r3, #20]
   d5092:	4798      	blx	r3
   d5094:	f807 0f01 	strb.w	r0, [r7, #1]!
        Serial.printlnf("MiniCond: %f",senseMCond);
        Wire.requestFrom(COND, 20, 1);
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
        char condSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d5098:	e7f1      	b.n	d507e <_Z13sensorHandlerv+0x1b6>
            condSense[c++] = Wire.read();

        }
        float senseCond = atof(condSense);
   d509a:	a81e      	add	r0, sp, #120	; 0x78
   d509c:	f007 fd78 	bl	dcb90 <atof>
   d50a0:	ec51 0b10 	vmov	r0, r1, d0
   d50a4:	f007 fd24 	bl	dcaf0 <__aeabi_d2f>
   d50a8:	4680      	mov	r8, r0
        Serial.printlnf("Conductivity: %f",senseCond);
   d50aa:	f006 f9b7 	bl	db41c <_Z16_fetch_usbserialv>
   d50ae:	ee00 8a10 	vmov	s0, r8
   d50b2:	4919      	ldr	r1, [pc, #100]	; (d5118 <_Z13sensorHandlerv+0x250>)
   d50b4:	f7ff fef6 	bl	d4ea4 <_ZN5Print8printlnfIIfEEEjPKcDpT_>
        Wire.requestFrom(TEMPADDR, 20, 1);
   d50b8:	f006 feee 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d50bc:	2301      	movs	r3, #1
   d50be:	2214      	movs	r2, #20
   d50c0:	2166      	movs	r1, #102	; 0x66
   d50c2:	f006 fb21 	bl	db708 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   d50c6:	f006 fee7 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d50ca:	6803      	ldr	r3, [r0, #0]
   d50cc:	695b      	ldr	r3, [r3, #20]
   d50ce:	4798      	blx	r3
   d50d0:	f10d 078b 	add.w	r7, sp, #139	; 0x8b
        char addrSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d50d4:	f006 fee0 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d50d8:	6803      	ldr	r3, [r0, #0]
   d50da:	691b      	ldr	r3, [r3, #16]
   d50dc:	4798      	blx	r3
   d50de:	4681      	mov	r9, r0
   d50e0:	2800      	cmp	r0, #0
   d50e2:	f43f aeff 	beq.w	d4ee4 <_Z13sensorHandlerv+0x1c>
            addrSense[c++] = Wire.read();
   d50e6:	f006 fed7 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d50ea:	6803      	ldr	r3, [r0, #0]
   d50ec:	695b      	ldr	r3, [r3, #20]
   d50ee:	4798      	blx	r3
   d50f0:	f807 0f01 	strb.w	r0, [r7, #1]!
        Serial.printlnf("Conductivity: %f",senseCond);
        Wire.requestFrom(TEMPADDR, 20, 1);
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
        char addrSense[20];
        c = 0;
        while(Wire.available()){   // slave may send less than requested
   d50f4:	e7ee      	b.n	d50d4 <_Z13sensorHandlerv+0x20c>
   d50f6:	bf00      	nop
   d50f8:	2003d988 	.word	0x2003d988
   d50fc:	2003e2c4 	.word	0x2003e2c4
   d5100:	000df65f 	.word	0x000df65f
   d5104:	2003db37 	.word	0x2003db37
   d5108:	2003d98c 	.word	0x2003d98c
   d510c:	2003d9e8 	.word	0x2003d9e8
   d5110:	000df63a 	.word	0x000df63a
   d5114:	000df641 	.word	0x000df641
   d5118:	000df64e 	.word	0x000df64e
        float senseTemp = atof(addrSense);
        Serial.printlnf("Temperature: %f",senseTemp);
        dataWait = false;
        if(logSensors){
            char timestamp[16];
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   d511c:	f005 fd16 	bl	dab4c <_ZN9TimeClass5monthEv>
   d5120:	4606      	mov	r6, r0
   d5122:	f005 fd09 	bl	dab38 <_ZN9TimeClass3dayEv>
   d5126:	4681      	mov	r9, r0
   d5128:	f005 fd18 	bl	dab5c <_ZN9TimeClass4yearEv>
   d512c:	4682      	mov	sl, r0
   d512e:	f005 fce5 	bl	daafc <_ZN9TimeClass4hourEv>
   d5132:	4683      	mov	fp, r0
   d5134:	f005 fcec 	bl	dab10 <_ZN9TimeClass6minuteEv>
   d5138:	900e      	str	r0, [sp, #56]	; 0x38
   d513a:	f005 fcf3 	bl	dab24 <_ZN9TimeClass6secondEv>
   d513e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d5140:	9004      	str	r0, [sp, #16]
   d5142:	9303      	str	r3, [sp, #12]
   d5144:	e88d 0e00 	stmia.w	sp, {r9, sl, fp}
   d5148:	4633      	mov	r3, r6
   d514a:	4a2f      	ldr	r2, [pc, #188]	; (d5208 <_Z13sensorHandlerv+0x340>)
   d514c:	2110      	movs	r1, #16
   d514e:	a810      	add	r0, sp, #64	; 0x40
   d5150:	f003 f88e 	bl	d8270 <snprintf>
   d5154:	482d      	ldr	r0, [pc, #180]	; (d520c <_Z13sensorHandlerv+0x344>)
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   d5156:	7c03      	ldrb	r3, [r0, #16]
   d5158:	b92b      	cbnz	r3, d5166 <_Z13sensorHandlerv+0x29e>
   d515a:	f244 2202 	movw	r2, #16898	; 0x4202
   d515e:	492c      	ldr	r1, [pc, #176]	; (d5210 <_Z13sensorHandlerv+0x348>)
   d5160:	3010      	adds	r0, #16
   d5162:	f7ff f9d3 	bl	d450c <_ZN7FatFile4openEPKci>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d5166:	4640      	mov	r0, r8
   d5168:	f007 f98c 	bl	dc484 <__aeabi_f2d>
   d516c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   d5170:	4b28      	ldr	r3, [pc, #160]	; (d5214 <_Z13sensorHandlerv+0x34c>)
   d5172:	6818      	ldr	r0, [r3, #0]
   d5174:	f007 f986 	bl	dc484 <__aeabi_f2d>
   d5178:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d517c:	4b26      	ldr	r3, [pc, #152]	; (d5218 <_Z13sensorHandlerv+0x350>)
   d517e:	6818      	ldr	r0, [r3, #0]
   d5180:	f007 f980 	bl	dc484 <__aeabi_f2d>
   d5184:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d5188:	6820      	ldr	r0, [r4, #0]
   d518a:	f007 f97b 	bl	dc484 <__aeabi_f2d>
   d518e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5192:	4638      	mov	r0, r7
   d5194:	f007 f976 	bl	dc484 <__aeabi_f2d>
   d5198:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d519c:	4b1f      	ldr	r3, [pc, #124]	; (d521c <_Z13sensorHandlerv+0x354>)
   d519e:	6818      	ldr	r0, [r3, #0]
   d51a0:	ee07 0a90 	vmov	s15, r0
   d51a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d51a8:	ee17 0a90 	vmov	r0, s15
   d51ac:	f007 f96a 	bl	dc484 <__aeabi_f2d>
   d51b0:	a313      	add	r3, pc, #76	; (adr r3, d5200 <_Z13sensorHandlerv+0x338>)
   d51b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d51b6:	f007 fae3 	bl	dc780 <__aeabi_ddiv>
   d51ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d51be:	4b18      	ldr	r3, [pc, #96]	; (d5220 <_Z13sensorHandlerv+0x358>)
   d51c0:	6818      	ldr	r0, [r3, #0]
   d51c2:	ee07 0a90 	vmov	s15, r0
   d51c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d51ca:	ee17 0a90 	vmov	r0, s15
   d51ce:	f007 f959 	bl	dc484 <__aeabi_f2d>
   d51d2:	a30b      	add	r3, pc, #44	; (adr r3, d5200 <_Z13sensorHandlerv+0x338>)
   d51d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d51d8:	f007 fad2 	bl	dc780 <__aeabi_ddiv>
   d51dc:	ab10      	add	r3, sp, #64	; 0x40
   d51de:	e9cd 0100 	strd	r0, r1, [sp]
   d51e2:	4a10      	ldr	r2, [pc, #64]	; (d5224 <_Z13sensorHandlerv+0x35c>)
   d51e4:	4809      	ldr	r0, [pc, #36]	; (d520c <_Z13sensorHandlerv+0x344>)
   d51e6:	2101      	movs	r1, #1
   d51e8:	f004 fbd9 	bl	d999e <_ZN5Print11printf_implEbPKcz>
            myFile.close();
   d51ec:	480e      	ldr	r0, [pc, #56]	; (d5228 <_Z13sensorHandlerv+0x360>)
   d51ee:	f001 fd4d 	bl	d6c8c <_ZN7FatFile5closeEv>
   d51f2:	e68d      	b.n	d4f10 <_Z13sensorHandlerv+0x48>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
        Wire.endTransmission();                                                       //end the I2C data transmission.
        dataWait = true;
    }
}
   d51f4:	b029      	add	sp, #164	; 0xa4
   d51f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d51fa:	bf00      	nop
   d51fc:	f3af 8000 	nop.w
   d5200:	00000000 	.word	0x00000000
   d5204:	412e8480 	.word	0x412e8480
   d5208:	000df66f 	.word	0x000df66f
   d520c:	2003da2c 	.word	0x2003da2c
   d5210:	2003db58 	.word	0x2003db58
   d5214:	2003db54 	.word	0x2003db54
   d5218:	2003e2d0 	.word	0x2003e2d0
   d521c:	2003db08 	.word	0x2003db08
   d5220:	2003dae4 	.word	0x2003dae4
   d5224:	000df688 	.word	0x000df688
   d5228:	2003da3c 	.word	0x2003da3c

000d522c <loop>:
        logFile.close();
    }
    // delete possible existing file
}

void loop(){
   d522c:	b508      	push	{r3, lr}
    if(getGPSLatLon()){
   d522e:	f7ff fa07 	bl	d4640 <_Z12getGPSLatLonv>
   d5232:	b1a8      	cbz	r0, d5260 <loop+0x34>
        char latLonBuf[UART_TX_BUF_SIZE];
        latitude = ((float)latitude_mdeg/1000000.0);
   d5234:	4b13      	ldr	r3, [pc, #76]	; (d5284 <loop+0x58>)
   d5236:	ed9f 7a14 	vldr	s14, [pc, #80]	; d5288 <loop+0x5c>
   d523a:	edd3 7a00 	vldr	s15, [r3]
   d523e:	4b13      	ldr	r3, [pc, #76]	; (d528c <loop+0x60>)
   d5240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5244:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d5248:	edc3 6a00 	vstr	s13, [r3]
        longitude = ((float)longitude_mdeg/1000000.0);
   d524c:	4b10      	ldr	r3, [pc, #64]	; (d5290 <loop+0x64>)
   d524e:	edd3 7a00 	vldr	s15, [r3]
   d5252:	4b10      	ldr	r3, [pc, #64]	; (d5294 <loop+0x68>)
   d5254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5258:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d525c:	edc3 6a00 	vstr	s13, [r3]
        //sprintf(latLonBuf, "GPS Data: Lat:%0.6f Lon:%0.6f\n", latitude, longitude);
        //Serial.println(latLonBuf);
        //sendData(latLonBuf, UART_TX_BUF_SIZE, true, true, false);
    }
    sensorHandler();
   d5260:	f7ff fe32 	bl	d4ec8 <_Z13sensorHandlerv>
    XBeeHandler();
   d5264:	f7ff fd3c 	bl	d4ce0 <_Z11XBeeHandlerv>
    statusUpdate();
   d5268:	f7ff fa68 	bl	d473c <_Z12statusUpdatev>
    if(offloadMode) dataOffloader();
   d526c:	4b0a      	ldr	r3, [pc, #40]	; (d5298 <loop+0x6c>)
   d526e:	781b      	ldrb	r3, [r3, #0]
   d5270:	b10b      	cbz	r3, d5276 <loop+0x4a>
   d5272:	f7ff fb01 	bl	d4878 <_Z13dataOffloaderv>
    sendResponseData();
   d5276:	f7ff fa4d 	bl	d4714 <_Z16sendResponseDatav>
    delay(100);
   d527a:	2064      	movs	r0, #100	; 0x64
}
   d527c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sensorHandler();
    XBeeHandler();
    statusUpdate();
    if(offloadMode) dataOffloader();
    sendResponseData();
    delay(100);
   d5280:	f005 bc80 	b.w	dab84 <delay>
   d5284:	2003dae4 	.word	0x2003dae4
   d5288:	49742400 	.word	0x49742400
   d528c:	2003e210 	.word	0x2003e210
   d5290:	2003db08 	.word	0x2003db08
   d5294:	2003db78 	.word	0x2003db78
   d5298:	2003da20 	.word	0x2003da20

000d529c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d529c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d529e:	4d09      	ldr	r5, [pc, #36]	; (d52c4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d52a0:	6829      	ldr	r1, [r5, #0]
   d52a2:	f011 0401 	ands.w	r4, r1, #1
   d52a6:	d10a      	bne.n	d52be <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d52a8:	4628      	mov	r0, r5
   d52aa:	f7fe ff07 	bl	d40bc <__cxa_guard_acquire>
   d52ae:	b130      	cbz	r0, d52be <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d52b0:	4621      	mov	r1, r4
   d52b2:	4805      	ldr	r0, [pc, #20]	; (d52c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d52b4:	f003 f868 	bl	d8388 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d52b8:	4628      	mov	r0, r5
   d52ba:	f7fe ff04 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d52be:	4802      	ldr	r0, [pc, #8]	; (d52c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d52c0:	bd38      	pop	{r3, r4, r5, pc}
   d52c2:	bf00      	nop
   d52c4:	2003d470 	.word	0x2003d470
   d52c8:	2003d474 	.word	0x2003d474

000d52cc <_Z8setupSPIv>:
void setupLTE(){
    Particle.subscribe("CCHub", cmdLTEHandler); //Subscribe to LTE data from Central Control Hub
    LTEAvail = false;
}

void setupSPI(){
   d52cc:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(SPI_Mode mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   d52ce:	f7ff ffe5 	bl	d529c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d52d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d52d6:	2100      	movs	r1, #0
   d52d8:	f003 f871 	bl	d83be <_ZN8SPIClass5beginE8SPI_Modet>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   d52dc:	f7ff ffde 	bl	d529c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d52e0:	2201      	movs	r2, #1
   d52e2:	4902      	ldr	r1, [pc, #8]	; (d52ec <_Z8setupSPIv+0x20>)
    SPI.begin(SPI_MODE_MASTER);
    SPI.setClockSpeed(1000000);
}
   d52e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d52e8:	f003 b906 	b.w	d84f8 <_ZN8SPIClass13setClockSpeedEjj>
   d52ec:	000f4240 	.word	0x000f4240

000d52f0 <setup>:
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
    }
}

void setup(){
   d52f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
inline uint16_t particle::LEDStatus::period() const {
    return (d_.pattern != LED_PATTERN_CUSTOM ? d_.period : 0);
}

inline void particle::LEDStatus::setPriority(LEDPriority priority) {
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   d52f4:	4894      	ldr	r0, [pc, #592]	; (d5548 <setup+0x258>)
    senseTimer = millis();
    dataTimer = millis();
    XBeeRxTime = 0;
    BLERxTime = 0;
    dataWait = false;
    logSensors = true;
   d52f6:	4e95      	ldr	r6, [pc, #596]	; (d554c <setup+0x25c>)
   d52f8:	7c03      	ldrb	r3, [r0, #16]
    logMessages = true;
   d52fa:	4d95      	ldr	r5, [pc, #596]	; (d5550 <setup+0x260>)
   d52fc:	f003 0303 	and.w	r3, r3, #3
   d5300:	f043 0378 	orr.w	r3, r3, #120	; 0x78
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
        logFile.close();
    }
}

void setup(){
   d5304:	b092      	sub	sp, #72	; 0x48
   d5306:	7403      	strb	r3, [r0, #16]
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d5308:	2200      	movs	r2, #0
   d530a:	2101      	movs	r1, #1
   d530c:	3004      	adds	r0, #4
   d530e:	f002 feb1 	bl	d8074 <led_set_status_active>
    status.setPriority(LED_PRIORITY_IMPORTANT);
    status.setActive(true);

    BLE.on();
   d5312:	f003 fd43 	bl	d8d9c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5316:	f003 fd87 	bl	d8e28 <_ZNK8particle14BleLocalDevice2onEv>
    
    //Log.info("Hello from WaterNet23!");
    Serial.begin();
   d531a:	f006 f87f 	bl	db41c <_Z16_fetch_usbserialv>
   d531e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5322:	f006 f86b 	bl	db3fc <_ZN9USBSerial5beginEl>
    Serial1.begin(9600, SERIAL_PARITY_EVEN);                        //Start serial for XBee module
   d5326:	f006 f951 	bl	db5cc <_Z22__fetch_global_Serial1v>
   d532a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d532e:	2204      	movs	r2, #4
   d5330:	f006 f93e 	bl	db5b0 <_ZN11USARTSerial5beginEmm>
    setupSPI();                                 //Setup SPI for BeagleBone
   d5334:	f7ff ffca 	bl	d52cc <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   d5338:	f7ff f94a 	bl	d45d0 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   d533c:	f7ff f96a 	bl	d4614 <_Z8setupGPSv>
    setupLTE();                                 //Initialize LTE Flags
   d5340:	f7ff f932 	bl	d45a8 <_Z8setupLTEv>

    manualRC = true;
   d5344:	4b83      	ldr	r3, [pc, #524]	; (d5554 <setup+0x264>)
   d5346:	2701      	movs	r7, #1
   d5348:	701f      	strb	r7, [r3, #0]
   d534a:	f002 fc79 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>

    senseTimer = millis();
   d534e:	4b82      	ldr	r3, [pc, #520]	; (d5558 <setup+0x268>)
   d5350:	6018      	str	r0, [r3, #0]
   d5352:	f002 fc75 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
    dataTimer = millis();
   d5356:	4b81      	ldr	r3, [pc, #516]	; (d555c <setup+0x26c>)
    XBeeRxTime = 0;
    BLERxTime = 0;
    dataWait = false;
    logSensors = true;
   d5358:	7037      	strb	r7, [r6, #0]
    setupLTE();                                 //Initialize LTE Flags

    manualRC = true;

    senseTimer = millis();
    dataTimer = millis();
   d535a:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   d535c:	4b80      	ldr	r3, [pc, #512]	; (d5560 <setup+0x270>)
    BLERxTime = 0;
    dataWait = false;
    logSensors = true;
    logMessages = true;
   d535e:	702f      	strb	r7, [r5, #0]

    manualRC = true;

    senseTimer = millis();
    dataTimer = millis();
    XBeeRxTime = 0;
   d5360:	2400      	movs	r4, #0
   d5362:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   d5364:	4b7f      	ldr	r3, [pc, #508]	; (d5564 <setup+0x274>)
   d5366:	601c      	str	r4, [r3, #0]
    dataWait = false;
   d5368:	4b7f      	ldr	r3, [pc, #508]	; (d5568 <setup+0x278>)
   d536a:	701c      	strb	r4, [r3, #0]
    logSensors = true;
    logMessages = true;
    offloadMode = false;
   d536c:	4b7f      	ldr	r3, [pc, #508]	; (d556c <setup+0x27c>)
   d536e:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   d5370:	4b7f      	ldr	r3, [pc, #508]	; (d5570 <setup+0x280>)
   d5372:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   d5374:	4b7f      	ldr	r3, [pc, #508]	; (d5574 <setup+0x284>)
   d5376:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   d537a:	801a      	strh	r2, [r3, #0]

    battPercent = 50;
   d537c:	4b7e      	ldr	r3, [pc, #504]	; (d5578 <setup+0x288>)
   d537e:	2232      	movs	r2, #50	; 0x32
   d5380:	701a      	strb	r2, [r3, #0]

    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   d5382:	f003 fd0b 	bl	d8d9c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5386:	4a7d      	ldr	r2, [pc, #500]	; (d557c <setup+0x28c>)
   d5388:	4601      	mov	r1, r0
   d538a:	a80d      	add	r0, sp, #52	; 0x34
   d538c:	f004 f99a 	bl	d96c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d5390:	a80d      	add	r0, sp, #52	; 0x34
   d5392:	f003 fdc2 	bl	d8f1a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   d5396:	f003 fd01 	bl	d8d9c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d539a:	4a79      	ldr	r2, [pc, #484]	; (d5580 <setup+0x290>)
   d539c:	4601      	mov	r1, r0
   d539e:	a80d      	add	r0, sp, #52	; 0x34
   d53a0:	f004 f990 	bl	d96c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d53a4:	a80d      	add	r0, sp, #52	; 0x34
   d53a6:	f003 fdb8 	bl	d8f1a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   d53aa:	f003 fcf7 	bl	d8d9c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d53ae:	4a75      	ldr	r2, [pc, #468]	; (d5584 <setup+0x294>)
   d53b0:	4601      	mov	r1, r0
   d53b2:	a80d      	add	r0, sp, #52	; 0x34
   d53b4:	f004 f986 	bl	d96c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d53b8:	a80d      	add	r0, sp, #52	; 0x34
   d53ba:	f003 fdae 	bl	d8f1a <_ZN8particle17BleCharacteristicD1Ev>

    char deviceName[10];
    strcpy(deviceName,"WTN23_Bot");
   d53be:	4972      	ldr	r1, [pc, #456]	; (d5588 <setup+0x298>)
   d53c0:	a806      	add	r0, sp, #24
   d53c2:	f007 fd98 	bl	dcef6 <strcpy>
    deviceName[9] = BOTNUM+48;
   d53c6:	2331      	movs	r3, #49	; 0x31
   d53c8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    BLECustomData[0] = BOTNUM;
   d53cc:	4b6f      	ldr	r3, [pc, #444]	; (d558c <setup+0x29c>)
   d53ce:	701f      	strb	r7, [r3, #0]

    advData.appendServiceUUID(WaterNetService); // Add the app service
   d53d0:	4b6f      	ldr	r3, [pc, #444]	; (d5590 <setup+0x2a0>)
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d53d2:	a80d      	add	r0, sp, #52	; 0x34
   d53d4:	6819      	ldr	r1, [r3, #0]
   d53d6:	f003 fb53 	bl	d8a80 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d53da:	a80d      	add	r0, sp, #52	; 0x34
   d53dc:	f003 fa9c 	bl	d8918 <_ZNK8particle7BleUuid4typeEv>
   d53e0:	4607      	mov	r7, r0
            uint16_t uuid16 = tempUUID.shorted();
   d53e2:	a80d      	add	r0, sp, #52	; 0x34
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d53e4:	b947      	cbnz	r7, d53f8 <setup+0x108>
            uint16_t uuid16 = tempUUID.shorted();
   d53e6:	f003 fab5 	bl	d8954 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d53ea:	9700      	str	r7, [sp, #0]

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d53ec:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d53f0:	2302      	movs	r3, #2
   d53f2:	aa09      	add	r2, sp, #36	; 0x24
   d53f4:	2103      	movs	r1, #3
   d53f6:	e005      	b.n	d5404 <setup+0x114>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d53f8:	f003 fab1 	bl	d895e <_ZNK8particle7BleUuid8rawBytesEv>
   d53fc:	9400      	str	r4, [sp, #0]
   d53fe:	2310      	movs	r3, #16
   d5400:	4602      	mov	r2, r0
   d5402:	2107      	movs	r1, #7
   d5404:	4863      	ldr	r0, [pc, #396]	; (d5594 <setup+0x2a4>)
   d5406:	f003 fb5e 	bl	d8ac6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   d540a:	2300      	movs	r3, #0
   d540c:	2208      	movs	r2, #8
   d540e:	495f      	ldr	r1, [pc, #380]	; (d558c <setup+0x29c>)
   d5410:	4860      	ldr	r0, [pc, #384]	; (d5594 <setup+0x2a4>)
   d5412:	f003 fbb9 	bl	d8b88 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    //advData.appendLocalName(deviceName);           //Local advertising name

    BLE.advertise(&advData);                    //Start advertising the characteristics
   d5416:	f003 fcc1 	bl	d8d9c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d541a:	2200      	movs	r2, #0
   d541c:	495d      	ldr	r1, [pc, #372]	; (d5594 <setup+0x2a4>)
   d541e:	f003 fd39 	bl	d8e94 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   d5422:	f006 fd39 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d5426:	f006 f94d 	bl	db6c4 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   d542a:	f006 fd35 	bl	dbe98 <_Z19__fetch_global_Wirev>
   d542e:	495a      	ldr	r1, [pc, #360]	; (d5598 <setup+0x2a8>)
   d5430:	f006 f944 	bl	db6bc <_ZN7TwoWire8setSpeedEm>

    char timestamp[16];
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   d5434:	f005 fb8a 	bl	dab4c <_ZN9TimeClass5monthEv>
   d5438:	4604      	mov	r4, r0
   d543a:	f005 fb7d 	bl	dab38 <_ZN9TimeClass3dayEv>
   d543e:	4607      	mov	r7, r0
   d5440:	f005 fb8c 	bl	dab5c <_ZN9TimeClass4yearEv>
   d5444:	4680      	mov	r8, r0
   d5446:	f005 fb59 	bl	daafc <_ZN9TimeClass4hourEv>
   d544a:	4681      	mov	r9, r0
   d544c:	f005 fb60 	bl	dab10 <_ZN9TimeClass6minuteEv>
   d5450:	4682      	mov	sl, r0
   d5452:	f005 fb67 	bl	dab24 <_ZN9TimeClass6secondEv>
   d5456:	4623      	mov	r3, r4
   d5458:	4a50      	ldr	r2, [pc, #320]	; (d559c <setup+0x2ac>)
   d545a:	9004      	str	r0, [sp, #16]
   d545c:	2110      	movs	r1, #16
   d545e:	e88d 0780 	stmia.w	sp, {r7, r8, r9, sl}
   d5462:	a809      	add	r0, sp, #36	; 0x24
   d5464:	f002 ff04 	bl	d8270 <snprintf>
    strcpy(filename,DEF_FILENAME);
   d5468:	494d      	ldr	r1, [pc, #308]	; (d55a0 <setup+0x2b0>)
   d546a:	484e      	ldr	r0, [pc, #312]	; (d55a4 <setup+0x2b4>)
   d546c:	f007 fd43 	bl	dcef6 <strcpy>
    strcat(filename,timestamp);
   d5470:	a909      	add	r1, sp, #36	; 0x24
   d5472:	484c      	ldr	r0, [pc, #304]	; (d55a4 <setup+0x2b4>)
   d5474:	f007 fd0e 	bl	dce94 <strcat>
    strcpy(filenameMessages,filename);
   d5478:	494a      	ldr	r1, [pc, #296]	; (d55a4 <setup+0x2b4>)
   d547a:	484b      	ldr	r0, [pc, #300]	; (d55a8 <setup+0x2b8>)
   d547c:	f007 fd3b 	bl	dcef6 <strcpy>
    strcat(filename,".csv");
   d5480:	494a      	ldr	r1, [pc, #296]	; (d55ac <setup+0x2bc>)
   d5482:	4848      	ldr	r0, [pc, #288]	; (d55a4 <setup+0x2b4>)
   d5484:	f007 fd06 	bl	dce94 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   d5488:	4949      	ldr	r1, [pc, #292]	; (d55b0 <setup+0x2c0>)
   d548a:	4847      	ldr	r0, [pc, #284]	; (d55a8 <setup+0x2b8>)
   d548c:	f007 fd02 	bl	dce94 <strcat>

    Serial.println(filename);
   d5490:	f005 ffc4 	bl	db41c <_Z16_fetch_usbserialv>
   d5494:	4943      	ldr	r1, [pc, #268]	; (d55a4 <setup+0x2b4>)
   d5496:	f004 fa58 	bl	d994a <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   d549a:	f005 ffbf 	bl	db41c <_Z16_fetch_usbserialv>
   d549e:	4942      	ldr	r1, [pc, #264]	; (d55a8 <setup+0x2b8>)
   d54a0:	f004 fa53 	bl	d994a <_ZN5Print7printlnEPKc>

    watchdog.start();
   d54a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d54a8:	4842      	ldr	r0, [pc, #264]	; (d55b4 <setup+0x2c4>)
   d54aa:	f7fe ff9b 	bl	d43e4 <_ZN5Timer5startEj>
    ledTimer.start();
   d54ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d54b2:	4841      	ldr	r0, [pc, #260]	; (d55b8 <setup+0x2c8>)
   d54b4:	f7fe ff96 	bl	d43e4 <_ZN5Timer5startEj>
    statusPD.start();
   d54b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d54bc:	483f      	ldr	r0, [pc, #252]	; (d55bc <setup+0x2cc>)
   d54be:	f7fe ff91 	bl	d43e4 <_ZN5Timer5startEj>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d54c2:	4a3f      	ldr	r2, [pc, #252]	; (d55c0 <setup+0x2d0>)
   d54c4:	4b3f      	ldr	r3, [pc, #252]	; (d55c4 <setup+0x2d4>)
   d54c6:	920f      	str	r2, [sp, #60]	; 0x3c
   d54c8:	2201      	movs	r2, #1
   d54ca:	930d      	str	r3, [sp, #52]	; 0x34
   d54cc:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
   d54d0:	2300      	movs	r3, #0

    if (!sd.begin(chipSelect, SD_SCK_MHZ(4))) {
   d54d2:	aa0d      	add	r2, sp, #52	; 0x34
   d54d4:	2108      	movs	r1, #8
   d54d6:	483c      	ldr	r0, [pc, #240]	; (d55c8 <setup+0x2d8>)
   d54d8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   d54dc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   d54e0:	f7ff f81c 	bl	d451c <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d54e4:	4604      	mov	r4, r0
   d54e6:	b930      	cbnz	r0, d54f6 <setup+0x206>
        Serial.println("Error: could not connect to SD card!");
   d54e8:	f005 ff98 	bl	db41c <_Z16_fetch_usbserialv>
   d54ec:	4937      	ldr	r1, [pc, #220]	; (d55cc <setup+0x2dc>)
   d54ee:	f004 fa2c 	bl	d994a <_ZN5Print7printlnEPKc>
        logSensors = false;
   d54f2:	7034      	strb	r4, [r6, #0]
        logMessages = false;
   d54f4:	702c      	strb	r4, [r5, #0]
    }
    if(logSensors){
   d54f6:	7833      	ldrb	r3, [r6, #0]
   d54f8:	b17b      	cbz	r3, d551a <setup+0x22a>
   d54fa:	4835      	ldr	r0, [pc, #212]	; (d55d0 <setup+0x2e0>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   d54fc:	7c03      	ldrb	r3, [r0, #16]
   d54fe:	b92b      	cbnz	r3, d550c <setup+0x21c>
   d5500:	f244 2202 	movw	r2, #16898	; 0x4202
   d5504:	4927      	ldr	r1, [pc, #156]	; (d55a4 <setup+0x2b4>)
   d5506:	3010      	adds	r0, #16
   d5508:	f7ff f800 	bl	d450c <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   d550c:	4931      	ldr	r1, [pc, #196]	; (d55d4 <setup+0x2e4>)
   d550e:	4830      	ldr	r0, [pc, #192]	; (d55d0 <setup+0x2e0>)
   d5510:	f004 fa1b 	bl	d994a <_ZN5Print7printlnEPKc>
        myFile.close();
   d5514:	4830      	ldr	r0, [pc, #192]	; (d55d8 <setup+0x2e8>)
   d5516:	f001 fbb9 	bl	d6c8c <_ZN7FatFile5closeEv>
    }
    if(logMessages){
   d551a:	782b      	ldrb	r3, [r5, #0]
   d551c:	b183      	cbz	r3, d5540 <setup+0x250>
   d551e:	482f      	ldr	r0, [pc, #188]	; (d55dc <setup+0x2ec>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   d5520:	7c03      	ldrb	r3, [r0, #16]
   d5522:	b92b      	cbnz	r3, d5530 <setup+0x240>
   d5524:	f244 2202 	movw	r2, #16898	; 0x4202
   d5528:	491f      	ldr	r1, [pc, #124]	; (d55a8 <setup+0x2b8>)
   d552a:	3010      	adds	r0, #16
   d552c:	f7fe ffee 	bl	d450c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   d5530:	2201      	movs	r2, #1
   d5532:	492b      	ldr	r1, [pc, #172]	; (d55e0 <setup+0x2f0>)
   d5534:	4829      	ldr	r0, [pc, #164]	; (d55dc <setup+0x2ec>)
   d5536:	f7ff fc47 	bl	d4dc8 <_ZN5Print8printlnfIIiEEEjPKcDpT_>
        logFile.close();
   d553a:	482a      	ldr	r0, [pc, #168]	; (d55e4 <setup+0x2f4>)
   d553c:	f001 fba6 	bl	d6c8c <_ZN7FatFile5closeEv>
    }
    // delete possible existing file
}
   d5540:	b012      	add	sp, #72	; 0x48
   d5542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5546:	bf00      	nop
   d5548:	2003dac4 	.word	0x2003dac4
   d554c:	2003db37 	.word	0x2003db37
   d5550:	2003e214 	.word	0x2003e214
   d5554:	2003e20c 	.word	0x2003e20c
   d5558:	2003d98c 	.word	0x2003d98c
   d555c:	2003d988 	.word	0x2003d988
   d5560:	2003e2c0 	.word	0x2003e2c0
   d5564:	2003d9e4 	.word	0x2003d9e4
   d5568:	2003e2c4 	.word	0x2003e2c4
   d556c:	2003da20 	.word	0x2003da20
   d5570:	2003db34 	.word	0x2003db34
   d5574:	2003db28 	.word	0x2003db28
   d5578:	2003dae8 	.word	0x2003dae8
   d557c:	2003d4f0 	.word	0x2003d4f0
   d5580:	2003d4fc 	.word	0x2003d4fc
   d5584:	2003d4a4 	.word	0x2003d4a4
   d5588:	000df6a0 	.word	0x000df6a0
   d558c:	2003da21 	.word	0x2003da21
   d5590:	2003d35c 	.word	0x2003d35c
   d5594:	2003d47c 	.word	0x2003d47c
   d5598:	00061a80 	.word	0x00061a80
   d559c:	000df66f 	.word	0x000df66f
   d55a0:	000df6aa 	.word	0x000df6aa
   d55a4:	2003db58 	.word	0x2003db58
   d55a8:	2003d990 	.word	0x2003d990
   d55ac:	000df4a7 	.word	0x000df4a7
   d55b0:	000df6b3 	.word	0x000df6b3
   d55b4:	2003db38 	.word	0x2003db38
   d55b8:	2003daec 	.word	0x2003daec
   d55bc:	2003db0c 	.word	0x2003db0c
   d55c0:	003d0900 	.word	0x003d0900
   d55c4:	000df308 	.word	0x000df308
   d55c8:	2003d504 	.word	0x2003d504
   d55cc:	000df6bc 	.word	0x000df6bc
   d55d0:	2003da2c 	.word	0x2003da2c
   d55d4:	000df6e1 	.word	0x000df6e1
   d55d8:	2003da3c 	.word	0x2003da3c
   d55dc:	2003e2d8 	.word	0x2003e2d8
   d55e0:	000df737 	.word	0x000df737
   d55e4:	2003e2e8 	.word	0x2003e2e8

000d55e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d55e8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d55ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55ec:	4606      	mov	r6, r0
   d55ee:	460c      	mov	r4, r1
   d55f0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d55f2:	d916      	bls.n	d5622 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d55f4:	4290      	cmp	r0, r2
   d55f6:	d215      	bcs.n	d5624 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d55f8:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d55fc:	1a6c      	subs	r4, r5, r1
   d55fe:	f1a1 0714 	sub.w	r7, r1, #20
   d5602:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5604:	42af      	cmp	r7, r5
   d5606:	d01c      	beq.n	d5642 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d5608:	b12c      	cbz	r4, d5616 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d560a:	4629      	mov	r1, r5
   d560c:	4620      	mov	r0, r4
   d560e:	f002 ffeb 	bl	d85e8 <_ZN6StringC1EOS_>
   d5612:	7c2b      	ldrb	r3, [r5, #16]
   d5614:	7423      	strb	r3, [r4, #16]
   d5616:	4628      	mov	r0, r5
   d5618:	f002 fff6 	bl	d8608 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d561c:	3d14      	subs	r5, #20
   d561e:	3c14      	subs	r4, #20
   d5620:	e7f0      	b.n	d5604 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5622:	d00e      	beq.n	d5642 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d5624:	42ac      	cmp	r4, r5
   d5626:	d00c      	beq.n	d5642 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d5628:	b12e      	cbz	r6, d5636 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d562a:	4621      	mov	r1, r4
   d562c:	4630      	mov	r0, r6
   d562e:	f002 ffdb 	bl	d85e8 <_ZN6StringC1EOS_>
   d5632:	7c23      	ldrb	r3, [r4, #16]
   d5634:	7433      	strb	r3, [r6, #16]
   d5636:	4620      	mov	r0, r4
   d5638:	f002 ffe6 	bl	d8608 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d563c:	3414      	adds	r4, #20
   d563e:	3614      	adds	r6, #20
   d5640:	e7f0      	b.n	d5624 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d5642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5644 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5648:	2300      	movs	r3, #0
   d564a:	6003      	str	r3, [r0, #0]
   d564c:	6043      	str	r3, [r0, #4]
   d564e:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5650:	684e      	ldr	r6, [r1, #4]
   d5652:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5654:	4604      	mov	r4, r0
   d5656:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5658:	dd24      	ble.n	d56a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d565a:	f04f 0814 	mov.w	r8, #20
   d565e:	fb08 f006 	mul.w	r0, r8, r6
   d5662:	f002 fddd 	bl	d8220 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5666:	4605      	mov	r5, r0
   d5668:	b1e0      	cbz	r0, d56a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d566a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d566e:	fb08 1202 	mla	r2, r8, r2, r1
   d5672:	f7ff ffb9 	bl	d55e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5676:	6820      	ldr	r0, [r4, #0]
   d5678:	f002 fdda 	bl	d8230 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d567c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d567e:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5680:	683e      	ldr	r6, [r7, #0]
   d5682:	687b      	ldr	r3, [r7, #4]
   d5684:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d5688:	4546      	cmp	r6, r8
   d568a:	d009      	beq.n	d56a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d568c:	b12d      	cbz	r5, d569a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d568e:	4631      	mov	r1, r6
   d5690:	4628      	mov	r0, r5
   d5692:	f003 f822 	bl	d86da <_ZN6StringC1ERKS_>
   d5696:	7c33      	ldrb	r3, [r6, #16]
   d5698:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d569a:	3614      	adds	r6, #20
   d569c:	3514      	adds	r5, #20
   d569e:	e7f3      	b.n	d5688 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d56a0:	687b      	ldr	r3, [r7, #4]
   d56a2:	6063      	str	r3, [r4, #4]
    }
}
   d56a4:	4620      	mov	r0, r4
   d56a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d56ac <_GLOBAL__sub_I_nmeaBuffer>:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
}
   d56ac:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d56ae:	4bae      	ldr	r3, [pc, #696]	; (d5968 <_GLOBAL__sub_I_nmeaBuffer+0x2bc>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d56b0:	4cae      	ldr	r4, [pc, #696]	; (d596c <_GLOBAL__sub_I_nmeaBuffer+0x2c0>)
   d56b2:	b092      	sub	sp, #72	; 0x48
   d56b4:	2501      	movs	r5, #1
   d56b6:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d56b8:	f002 fa2a 	bl	d7b10 <HAL_Pin_Map>

//SYSTEM_MODE(MANUAL);

//GPS Buffers and Objects
char nmeaBuffer[100];
MicroNMEA nmea(nmeaBuffer, sizeof(nmeaBuffer));
   d56bc:	2264      	movs	r2, #100	; 0x64
   d56be:	49ac      	ldr	r1, [pc, #688]	; (d5970 <_GLOBAL__sub_I_nmeaBuffer+0x2c4>)
   d56c0:	48ac      	ldr	r0, [pc, #688]	; (d5974 <_GLOBAL__sub_I_nmeaBuffer+0x2c8>)
   d56c2:	f000 faff 	bl	d5cc4 <_ZN9MicroNMEAC1EPvh>
SFE_UBLOX_GPS myGPS;
   d56c6:	48ac      	ldr	r0, [pc, #688]	; (d5978 <_GLOBAL__sub_I_nmeaBuffer+0x2cc>)
   d56c8:	f002 f8a2 	bl	d7810 <_ZN13SFE_UBLOX_GPSC1Ev>
   d56cc:	6823      	ldr	r3, [r4, #0]
   d56ce:	07db      	lsls	r3, r3, #31
   d56d0:	d40a      	bmi.n	d56e8 <_GLOBAL__sub_I_nmeaBuffer+0x3c>
   d56d2:	4620      	mov	r0, r4
   d56d4:	f7fe fcf2 	bl	d40bc <__cxa_guard_acquire>
   d56d8:	b130      	cbz	r0, d56e8 <_GLOBAL__sub_I_nmeaBuffer+0x3c>
   d56da:	4629      	mov	r1, r5
   d56dc:	48a7      	ldr	r0, [pc, #668]	; (d597c <_GLOBAL__sub_I_nmeaBuffer+0x2d0>)
   d56de:	f002 fe53 	bl	d8388 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d56e2:	4620      	mov	r0, r4
   d56e4:	f7fe fcef 	bl	d40c6 <__cxa_guard_release>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d56e8:	4ba5      	ldr	r3, [pc, #660]	; (d5980 <_GLOBAL__sub_I_nmeaBuffer+0x2d4>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d56ea:	48a6      	ldr	r0, [pc, #664]	; (d5984 <_GLOBAL__sub_I_nmeaBuffer+0x2d8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d56ec:	4da6      	ldr	r5, [pc, #664]	; (d5988 <_GLOBAL__sub_I_nmeaBuffer+0x2dc>)

//SD File system object
SdFat sd((SPIClass*)&SPI1);

File myFile;
   d56ee:	49a7      	ldr	r1, [pc, #668]	; (d598c <_GLOBAL__sub_I_nmeaBuffer+0x2e0>)
   d56f0:	6005      	str	r5, [r0, #0]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d56f2:	2264      	movs	r2, #100	; 0x64
   d56f4:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d56f8:	4aa5      	ldr	r2, [pc, #660]	; (d5990 <_GLOBAL__sub_I_nmeaBuffer+0x2e4>)
   d56fa:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d56fe:	2201      	movs	r2, #1
   d5700:	2400      	movs	r4, #0
   d5702:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5706:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d570a:	4a9c      	ldr	r2, [pc, #624]	; (d597c <_GLOBAL__sub_I_nmeaBuffer+0x2d0>)
   d570c:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   d5710:	71dc      	strb	r4, [r3, #7]
   d5712:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d5716:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d571a:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d571e:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d5722:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d5726:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d572a:	6086      	str	r6, [r0, #8]
   d572c:	4a99      	ldr	r2, [pc, #612]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d572e:	7404      	strb	r4, [r0, #16]
   d5730:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5732:	6044      	str	r4, [r0, #4]
   d5734:	f006 fbd6 	bl	dbee4 <__aeabi_atexit>
   d5738:	4897      	ldr	r0, [pc, #604]	; (d5998 <_GLOBAL__sub_I_nmeaBuffer+0x2ec>)
File logFile;
   d573a:	4a96      	ldr	r2, [pc, #600]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d573c:	6086      	str	r6, [r0, #8]
   d573e:	4993      	ldr	r1, [pc, #588]	; (d598c <_GLOBAL__sub_I_nmeaBuffer+0x2e0>)
   d5740:	7404      	strb	r4, [r0, #16]
   d5742:	7444      	strb	r4, [r0, #17]
   d5744:	6044      	str	r4, [r0, #4]
   d5746:	6005      	str	r5, [r0, #0]
   d5748:	f006 fbcc 	bl	dbee4 <__aeabi_atexit>
   d574c:	4893      	ldr	r0, [pc, #588]	; (d599c <_GLOBAL__sub_I_nmeaBuffer+0x2f0>)
File logDir;
   d574e:	4a91      	ldr	r2, [pc, #580]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d5750:	498e      	ldr	r1, [pc, #568]	; (d598c <_GLOBAL__sub_I_nmeaBuffer+0x2e0>)
   d5752:	6086      	str	r6, [r0, #8]
   d5754:	7404      	strb	r4, [r0, #16]
   d5756:	7444      	strb	r4, [r0, #17]
   d5758:	6044      	str	r4, [r0, #4]
   d575a:	6005      	str	r5, [r0, #0]
   d575c:	f006 fbc2 	bl	dbee4 <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5760:	9405      	str	r4, [sp, #20]
   d5762:	9406      	str	r4, [sp, #24]
   d5764:	9407      	str	r4, [sp, #28]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d5766:	f005 fe59 	bl	db41c <_Z16_fetch_usbserialv>
   d576a:	a905      	add	r1, sp, #20
   d576c:	4606      	mov	r6, r0
   d576e:	a808      	add	r0, sp, #32
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d5770:	4d8b      	ldr	r5, [pc, #556]	; (d59a0 <_GLOBAL__sub_I_nmeaBuffer+0x2f4>)
   d5772:	f7ff ff67 	bl	d5644 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d5776:	a908      	add	r1, sp, #32
   d5778:	a80b      	add	r0, sp, #44	; 0x2c
   d577a:	f7ff ff63 	bl	d5644 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d577e:	4b89      	ldr	r3, [pc, #548]	; (d59a4 <_GLOBAL__sub_I_nmeaBuffer+0x2f8>)
   d5780:	602b      	str	r3, [r5, #0]
   d5782:	a90b      	add	r1, sp, #44	; 0x2c
   d5784:	a80e      	add	r0, sp, #56	; 0x38
   d5786:	f7ff ff5d 	bl	d5644 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d578a:	aa0e      	add	r2, sp, #56	; 0x38
   d578c:	211e      	movs	r1, #30
   d578e:	1d28      	adds	r0, r5, #4
   d5790:	f004 fe19 	bl	da3c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5794:	a80e      	add	r0, sp, #56	; 0x38
   d5796:	f7ff f835 	bl	d4804 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d579a:	a80b      	add	r0, sp, #44	; 0x2c
   d579c:	f7ff f832 	bl	d4804 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d57a0:	4b81      	ldr	r3, [pc, #516]	; (d59a8 <_GLOBAL__sub_I_nmeaBuffer+0x2fc>)
   d57a2:	602b      	str	r3, [r5, #0]
   d57a4:	622e      	str	r6, [r5, #32]
   d57a6:	a808      	add	r0, sp, #32
   d57a8:	f7ff f82c 	bl	d4804 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d57ac:	4b7f      	ldr	r3, [pc, #508]	; (d59ac <_GLOBAL__sub_I_nmeaBuffer+0x300>)
   d57ae:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d57b0:	f005 fe34 	bl	db41c <_Z16_fetch_usbserialv>
   d57b4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d57b8:	f005 fe20 	bl	db3fc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d57bc:	f004 faac 	bl	d9d18 <_ZN5spark10LogManager8instanceEv>
   d57c0:	4629      	mov	r1, r5
   d57c2:	f004 fd93 	bl	da2ec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   d57c6:	a805      	add	r0, sp, #20
   d57c8:	f7ff f81c 	bl	d4804 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d57cc:	4a71      	ldr	r2, [pc, #452]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d57ce:	4978      	ldr	r1, [pc, #480]	; (d59b0 <_GLOBAL__sub_I_nmeaBuffer+0x304>)
   d57d0:	4628      	mov	r0, r5
const char* WaterNetService = "b4206910-dc4b-5743-c8b1-92d0e75182b0"; //Main BLE Service
const char* rxUuid          = "b4206912-dc4b-5743-c8b1-92d0e75182b0"; //GPS Latitude Service
const char* txUuid          = "b4206913-dc4b-5743-c8b1-92d0e75182b0"; //GPS Longitude Service
const char* offldUuid       = "b4206914-dc4b-5743-c8b1-92d0e75182b0"; //GPS Longitude Service

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   d57d2:	4d78      	ldr	r5, [pc, #480]	; (d59b4 <_GLOBAL__sub_I_nmeaBuffer+0x308>)

File myFile;
File logFile;
File logDir;

SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   d57d4:	f006 fb86 	bl	dbee4 <__aeabi_atexit>
const char* WaterNetService = "b4206910-dc4b-5743-c8b1-92d0e75182b0"; //Main BLE Service
const char* rxUuid          = "b4206912-dc4b-5743-c8b1-92d0e75182b0"; //GPS Latitude Service
const char* txUuid          = "b4206913-dc4b-5743-c8b1-92d0e75182b0"; //GPS Longitude Service
const char* offldUuid       = "b4206914-dc4b-5743-c8b1-92d0e75182b0"; //GPS Longitude Service

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   d57d8:	9402      	str	r4, [sp, #8]
   d57da:	9401      	str	r4, [sp, #4]
   d57dc:	682b      	ldr	r3, [r5, #0]
   d57de:	9300      	str	r3, [sp, #0]
   d57e0:	4b75      	ldr	r3, [pc, #468]	; (d59b8 <_GLOBAL__sub_I_nmeaBuffer+0x30c>)
   d57e2:	4976      	ldr	r1, [pc, #472]	; (d59bc <_GLOBAL__sub_I_nmeaBuffer+0x310>)
   d57e4:	681b      	ldr	r3, [r3, #0]
   d57e6:	4876      	ldr	r0, [pc, #472]	; (d59c0 <_GLOBAL__sub_I_nmeaBuffer+0x314>)
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d57e8:	2610      	movs	r6, #16
   d57ea:	aa0e      	add	r2, sp, #56	; 0x38
   d57ec:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
   d57f0:	f7ff f81b 	bl	d482a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d57f4:	4a67      	ldr	r2, [pc, #412]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d57f6:	4973      	ldr	r1, [pc, #460]	; (d59c4 <_GLOBAL__sub_I_nmeaBuffer+0x318>)
   d57f8:	4871      	ldr	r0, [pc, #452]	; (d59c0 <_GLOBAL__sub_I_nmeaBuffer+0x314>)
   d57fa:	f006 fb73 	bl	dbee4 <__aeabi_atexit>
   d57fe:	2304      	movs	r3, #4
   d5800:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   d5804:	4b70      	ldr	r3, [pc, #448]	; (d59c8 <_GLOBAL__sub_I_nmeaBuffer+0x31c>)
   d5806:	9402      	str	r4, [sp, #8]
   d5808:	9301      	str	r3, [sp, #4]
   d580a:	682b      	ldr	r3, [r5, #0]
   d580c:	9300      	str	r3, [sp, #0]
   d580e:	4b6f      	ldr	r3, [pc, #444]	; (d59cc <_GLOBAL__sub_I_nmeaBuffer+0x320>)
   d5810:	496f      	ldr	r1, [pc, #444]	; (d59d0 <_GLOBAL__sub_I_nmeaBuffer+0x324>)
   d5812:	681b      	ldr	r3, [r3, #0]
   d5814:	486f      	ldr	r0, [pc, #444]	; (d59d4 <_GLOBAL__sub_I_nmeaBuffer+0x328>)
   d5816:	aa0e      	add	r2, sp, #56	; 0x38
   d5818:	f7ff f807 	bl	d482a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d581c:	4a5d      	ldr	r2, [pc, #372]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d581e:	4969      	ldr	r1, [pc, #420]	; (d59c4 <_GLOBAL__sub_I_nmeaBuffer+0x318>)
   d5820:	486c      	ldr	r0, [pc, #432]	; (d59d4 <_GLOBAL__sub_I_nmeaBuffer+0x328>)
   d5822:	f006 fb5f 	bl	dbee4 <__aeabi_atexit>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   d5826:	9402      	str	r4, [sp, #8]
   d5828:	9401      	str	r4, [sp, #4]
   d582a:	682b      	ldr	r3, [r5, #0]
   d582c:	9300      	str	r3, [sp, #0]
   d582e:	4b6a      	ldr	r3, [pc, #424]	; (d59d8 <_GLOBAL__sub_I_nmeaBuffer+0x32c>)
   d5830:	496a      	ldr	r1, [pc, #424]	; (d59dc <_GLOBAL__sub_I_nmeaBuffer+0x330>)
   d5832:	681b      	ldr	r3, [r3, #0]
   d5834:	486a      	ldr	r0, [pc, #424]	; (d59e0 <_GLOBAL__sub_I_nmeaBuffer+0x334>)
   d5836:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
   d583a:	aa0e      	add	r2, sp, #56	; 0x38
   d583c:	f7fe fff5 	bl	d482a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d5840:	4a54      	ldr	r2, [pc, #336]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d5842:	4960      	ldr	r1, [pc, #384]	; (d59c4 <_GLOBAL__sub_I_nmeaBuffer+0x318>)
   d5844:	4866      	ldr	r0, [pc, #408]	; (d59e0 <_GLOBAL__sub_I_nmeaBuffer+0x334>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d5846:	4d67      	ldr	r5, [pc, #412]	; (d59e4 <_GLOBAL__sub_I_nmeaBuffer+0x338>)
   d5848:	f006 fb4c 	bl	dbee4 <__aeabi_atexit>
   d584c:	1928      	adds	r0, r5, r4
   d584e:	f003 f805 	bl	d885c <_ZN8particle10BleAddressC1Ev>
   d5852:	f104 0008 	add.w	r0, r4, #8
   d5856:	4428      	add	r0, r5
   d5858:	f003 f97c 	bl	d8b54 <_ZN8particle18BleAdvertisingDataC1Ev>
   d585c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5860:	4428      	add	r0, r5
   d5862:	3454      	adds	r4, #84	; 0x54
   d5864:	f003 f976 	bl	d8b54 <_ZN8particle18BleAdvertisingDataC1Ev>

BleScanResult scanResults[SCAN_RESULT_COUNT];
   d5868:	f5b4 6fd2 	cmp.w	r4, #1680	; 0x690
   d586c:	d1ee      	bne.n	d584c <_GLOBAL__sub_I_nmeaBuffer+0x1a0>

BleCharacteristic peerTxCharacteristic;
   d586e:	485e      	ldr	r0, [pc, #376]	; (d59e8 <_GLOBAL__sub_I_nmeaBuffer+0x33c>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5870:	4d5e      	ldr	r5, [pc, #376]	; (d59ec <_GLOBAL__sub_I_nmeaBuffer+0x340>)
	    _M_manager = &_My_handler::_M_manager;
   d5872:	4c5f      	ldr	r4, [pc, #380]	; (d59f0 <_GLOBAL__sub_I_nmeaBuffer+0x344>)
   d5874:	f003 fe48 	bl	d9508 <_ZN8particle17BleCharacteristicC1Ev>
   d5878:	4a46      	ldr	r2, [pc, #280]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d587a:	4952      	ldr	r1, [pc, #328]	; (d59c4 <_GLOBAL__sub_I_nmeaBuffer+0x318>)
   d587c:	485a      	ldr	r0, [pc, #360]	; (d59e8 <_GLOBAL__sub_I_nmeaBuffer+0x33c>)
   d587e:	f006 fb31 	bl	dbee4 <__aeabi_atexit>
BleCharacteristic peerRxCharacteristic;
   d5882:	485c      	ldr	r0, [pc, #368]	; (d59f4 <_GLOBAL__sub_I_nmeaBuffer+0x348>)
   d5884:	f003 fe40 	bl	d9508 <_ZN8particle17BleCharacteristicC1Ev>
   d5888:	4a42      	ldr	r2, [pc, #264]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d588a:	494e      	ldr	r1, [pc, #312]	; (d59c4 <_GLOBAL__sub_I_nmeaBuffer+0x318>)
   d588c:	4859      	ldr	r0, [pc, #356]	; (d59f4 <_GLOBAL__sub_I_nmeaBuffer+0x348>)
   d588e:	f006 fb29 	bl	dbee4 <__aeabi_atexit>
BleCharacteristic offldCopyCharacteristic;
   d5892:	4859      	ldr	r0, [pc, #356]	; (d59f8 <_GLOBAL__sub_I_nmeaBuffer+0x34c>)
   d5894:	f003 fe38 	bl	d9508 <_ZN8particle17BleCharacteristicC1Ev>
   d5898:	4a3e      	ldr	r2, [pc, #248]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d589a:	494a      	ldr	r1, [pc, #296]	; (d59c4 <_GLOBAL__sub_I_nmeaBuffer+0x318>)
   d589c:	4856      	ldr	r0, [pc, #344]	; (d59f8 <_GLOBAL__sub_I_nmeaBuffer+0x34c>)
   d589e:	f006 fb21 	bl	dbee4 <__aeabi_atexit>
BlePeerDevice peer;
   d58a2:	4856      	ldr	r0, [pc, #344]	; (d59fc <_GLOBAL__sub_I_nmeaBuffer+0x350>)
   d58a4:	f003 fb9a 	bl	d8fdc <_ZN8particle13BlePeerDeviceC1Ev>
   d58a8:	4a3a      	ldr	r2, [pc, #232]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d58aa:	4955      	ldr	r1, [pc, #340]	; (d5a00 <_GLOBAL__sub_I_nmeaBuffer+0x354>)
   d58ac:	4853      	ldr	r0, [pc, #332]	; (d59fc <_GLOBAL__sub_I_nmeaBuffer+0x350>)
   d58ae:	f006 fb19 	bl	dbee4 <__aeabi_atexit>
BleAdvertisingData advData;                 //Advertising data
   d58b2:	4854      	ldr	r0, [pc, #336]	; (d5a04 <_GLOBAL__sub_I_nmeaBuffer+0x358>)
   d58b4:	f003 f94e 	bl	d8b54 <_ZN8particle18BleAdvertisingDataC1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d58b8:	4b53      	ldr	r3, [pc, #332]	; (d5a08 <_GLOBAL__sub_I_nmeaBuffer+0x35c>)
   d58ba:	930e      	str	r3, [sp, #56]	; 0x38
void sensorHandler();
void dataOffloader();
void statusUpdate();

//Tmers
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   d58bc:	aa0e      	add	r2, sp, #56	; 0x38
   d58be:	2300      	movs	r3, #0
   d58c0:	f643 2198 	movw	r1, #15000	; 0x3a98
   d58c4:	4851      	ldr	r0, [pc, #324]	; (d5a0c <_GLOBAL__sub_I_nmeaBuffer+0x360>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d58c6:	9511      	str	r5, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   d58c8:	9410      	str	r4, [sp, #64]	; 0x40
   d58ca:	f7fe fd1b 	bl	d4304 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d58ce:	a80e      	add	r0, sp, #56	; 0x38
   d58d0:	f7fe fd0a 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d58d4:	4a2f      	ldr	r2, [pc, #188]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d58d6:	494e      	ldr	r1, [pc, #312]	; (d5a10 <_GLOBAL__sub_I_nmeaBuffer+0x364>)
   d58d8:	484c      	ldr	r0, [pc, #304]	; (d5a0c <_GLOBAL__sub_I_nmeaBuffer+0x360>)
   d58da:	f006 fb03 	bl	dbee4 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d58de:	4b4d      	ldr	r3, [pc, #308]	; (d5a14 <_GLOBAL__sub_I_nmeaBuffer+0x368>)
   d58e0:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   d58e2:	aa0e      	add	r2, sp, #56	; 0x38
   d58e4:	2300      	movs	r3, #0
   d58e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d58ea:	484b      	ldr	r0, [pc, #300]	; (d5a18 <_GLOBAL__sub_I_nmeaBuffer+0x36c>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d58ec:	9511      	str	r5, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   d58ee:	9410      	str	r4, [sp, #64]	; 0x40
   d58f0:	f7fe fd08 	bl	d4304 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d58f4:	a80e      	add	r0, sp, #56	; 0x38
   d58f6:	f7fe fcf7 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d58fa:	4a26      	ldr	r2, [pc, #152]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d58fc:	4944      	ldr	r1, [pc, #272]	; (d5a10 <_GLOBAL__sub_I_nmeaBuffer+0x364>)
   d58fe:	4846      	ldr	r0, [pc, #280]	; (d5a18 <_GLOBAL__sub_I_nmeaBuffer+0x36c>)
   d5900:	f006 faf0 	bl	dbee4 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5904:	4b45      	ldr	r3, [pc, #276]	; (d5a1c <_GLOBAL__sub_I_nmeaBuffer+0x370>)
   d5906:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   d5908:	aa0e      	add	r2, sp, #56	; 0x38
   d590a:	2300      	movs	r3, #0
   d590c:	f241 3188 	movw	r1, #5000	; 0x1388
   d5910:	4843      	ldr	r0, [pc, #268]	; (d5a20 <_GLOBAL__sub_I_nmeaBuffer+0x374>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5912:	9511      	str	r5, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   d5914:	9410      	str	r4, [sp, #64]	; 0x40
   d5916:	f7fe fcf5 	bl	d4304 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d591a:	a80e      	add	r0, sp, #56	; 0x38
   d591c:	f7fe fce4 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   d5920:	4a1c      	ldr	r2, [pc, #112]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d5922:	493b      	ldr	r1, [pc, #236]	; (d5a10 <_GLOBAL__sub_I_nmeaBuffer+0x364>)
   d5924:	483e      	ldr	r0, [pc, #248]	; (d5a20 <_GLOBAL__sub_I_nmeaBuffer+0x374>)
   d5926:	f006 fadd 	bl	dbee4 <__aeabi_atexit>
inline particle::LEDStatus::LEDStatus(LEDPattern pattern, LEDPriority priority, LEDSource source) :
        LEDStatus(pattern, LED_SPEED_NORMAL, priority, source) { // Use normal speed by default
}

inline particle::LEDStatus::LEDStatus(LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d592a:	2200      	movs	r2, #0
   d592c:	2114      	movs	r1, #20
   d592e:	2001      	movs	r0, #1
   d5930:	f002 fbda 	bl	d80e8 <led_pattern_period>
}

inline particle::LEDStatus::LEDStatus(LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) :
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   d5934:	2201      	movs	r2, #1
   d5936:	2314      	movs	r3, #20
   d5938:	9201      	str	r2, [sp, #4]
   d593a:	9300      	str	r3, [sp, #0]
   d593c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   d5940:	4603      	mov	r3, r0
   d5942:	4838      	ldr	r0, [pc, #224]	; (d5a24 <_GLOBAL__sub_I_nmeaBuffer+0x378>)
   d5944:	f002 fcf8 	bl	d8338 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>

//LED Control
LEDStatus status;
   d5948:	4a12      	ldr	r2, [pc, #72]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d594a:	4937      	ldr	r1, [pc, #220]	; (d5a28 <_GLOBAL__sub_I_nmeaBuffer+0x37c>)
   d594c:	4835      	ldr	r0, [pc, #212]	; (d5a24 <_GLOBAL__sub_I_nmeaBuffer+0x378>)
   d594e:	f006 fac9 	bl	dbee4 <__aeabi_atexit>
uint8_t errModeReply;
size_t txLen = 0;
char filename[MAX_FILENAME_LEN];
char filenameMessages[MAX_FILENAME_LEN];

String xbeeBuf;
   d5952:	4936      	ldr	r1, [pc, #216]	; (d5a2c <_GLOBAL__sub_I_nmeaBuffer+0x380>)
   d5954:	4836      	ldr	r0, [pc, #216]	; (d5a30 <_GLOBAL__sub_I_nmeaBuffer+0x384>)
   d5956:	f002 fe9e 	bl	d8696 <_ZN6StringC1EPK19__FlashStringHelper>
   d595a:	4a0e      	ldr	r2, [pc, #56]	; (d5994 <_GLOBAL__sub_I_nmeaBuffer+0x2e8>)
   d595c:	4935      	ldr	r1, [pc, #212]	; (d5a34 <_GLOBAL__sub_I_nmeaBuffer+0x388>)
   d595e:	4834      	ldr	r0, [pc, #208]	; (d5a30 <_GLOBAL__sub_I_nmeaBuffer+0x384>)
   d5960:	f006 fac0 	bl	dbee4 <__aeabi_atexit>
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
}
   d5964:	b012      	add	sp, #72	; 0x48
   d5966:	e067      	b.n	d5a38 <_GLOBAL__sub_I_nmeaBuffer+0x38c>
   d5968:	2003d4f8 	.word	0x2003d4f8
   d596c:	2003d464 	.word	0x2003d464
   d5970:	2003da60 	.word	0x2003da60
   d5974:	2003d4ac 	.word	0x2003d4ac
   d5978:	2003e234 	.word	0x2003e234
   d597c:	2003d468 	.word	0x2003d468
   d5980:	2003d504 	.word	0x2003d504
   d5984:	2003da2c 	.word	0x2003da2c
   d5988:	000df36c 	.word	0x000df36c
   d598c:	000d4175 	.word	0x000d4175
   d5990:	000df308 	.word	0x000df308
   d5994:	2003d460 	.word	0x2003d460
   d5998:	2003e2d8 	.word	0x2003e2d8
   d599c:	2003d9b0 	.word	0x2003d9b0
   d59a0:	2003d9fc 	.word	0x2003d9fc
   d59a4:	000df328 	.word	0x000df328
   d59a8:	000dfb6c 	.word	0x000dfb6c
   d59ac:	000df354 	.word	0x000df354
   d59b0:	000d42a1 	.word	0x000d42a1
   d59b4:	2003d35c 	.word	0x2003d35c
   d59b8:	2003d364 	.word	0x2003d364
   d59bc:	000df75c 	.word	0x000df75c
   d59c0:	2003d4f0 	.word	0x2003d4f0
   d59c4:	000d8f1b 	.word	0x000d8f1b
   d59c8:	000d4c49 	.word	0x000d4c49
   d59cc:	2003d358 	.word	0x2003d358
   d59d0:	000df75f 	.word	0x000df75f
   d59d4:	2003d4fc 	.word	0x2003d4fc
   d59d8:	2003d360 	.word	0x2003d360
   d59dc:	000df762 	.word	0x000df762
   d59e0:	2003d4a4 	.word	0x2003d4a4
   d59e4:	2003db7c 	.word	0x2003db7c
   d59e8:	2003db2c 	.word	0x2003db2c
   d59ec:	000d4159 	.word	0x000d4159
   d59f0:	000d415d 	.word	0x000d415d
   d59f4:	2003e2c8 	.word	0x2003e2c8
   d59f8:	2003e224 	.word	0x2003e224
   d59fc:	2003e22c 	.word	0x2003e22c
   d5a00:	000d8f29 	.word	0x000d8f29
   d5a04:	2003d47c 	.word	0x2003d47c
   d5a08:	000d4dd5 	.word	0x000d4dd5
   d5a0c:	2003db38 	.word	0x2003db38
   d5a10:	000d4389 	.word	0x000d4389
   d5a14:	000d4425 	.word	0x000d4425
   d5a18:	2003daec 	.word	0x2003daec
   d5a1c:	000d40f5 	.word	0x000d40f5
   d5a20:	2003db0c 	.word	0x2003db0c
   d5a24:	2003dac4 	.word	0x2003dac4
   d5a28:	000d4271 	.word	0x000d4271
   d5a2c:	000df7fc 	.word	0x000df7fc
   d5a30:	2003d9ec 	.word	0x2003d9ec
   d5a34:	000d8609 	.word	0x000d8609
   d5a38:	bd70      	pop	{r4, r5, r6, pc}
   d5a3a:	bf00      	nop

000d5a3c <_ZN9MicroNMEA13isEndOfFieldsEc>:
	}


protected:
	static inline bool isEndOfFields(char c) {
		return c == '*' || c == '\0' || c == '\r' || c == '\n';
   d5a3c:	282a      	cmp	r0, #42	; 0x2a
   d5a3e:	d007      	beq.n	d5a50 <_ZN9MicroNMEA13isEndOfFieldsEc+0x14>
   d5a40:	b130      	cbz	r0, d5a50 <_ZN9MicroNMEA13isEndOfFieldsEc+0x14>
   d5a42:	280d      	cmp	r0, #13
   d5a44:	d004      	beq.n	d5a50 <_ZN9MicroNMEA13isEndOfFieldsEc+0x14>
   d5a46:	f1a0 030a 	sub.w	r3, r0, #10
   d5a4a:	4258      	negs	r0, r3
   d5a4c:	4158      	adcs	r0, r3
   d5a4e:	4770      	bx	lr
   d5a50:	2001      	movs	r0, #1
	}
   d5a52:	4770      	bx	lr

000d5a54 <_ZN9MicroNMEA9skipFieldEPKc>:

}


const char* MicroNMEA::skipField(const char* s)
{
   d5a54:	b570      	push	{r4, r5, r6, lr}
	if (s == nullptr)
   d5a56:	b190      	cbz	r0, d5a7e <_ZN9MicroNMEA9skipFieldEPKc+0x2a>
   d5a58:	4604      	mov	r4, r0
   d5a5a:	4625      	mov	r5, r4
		return nullptr;

	while (!isEndOfFields(*s)) {
   d5a5c:	f814 6b01 	ldrb.w	r6, [r4], #1
   d5a60:	4630      	mov	r0, r6
   d5a62:	f7ff ffeb 	bl	d5a3c <_ZN9MicroNMEA13isEndOfFieldsEc>
   d5a66:	b948      	cbnz	r0, d5a7c <_ZN9MicroNMEA9skipFieldEPKc+0x28>
		if (*s == ',') {
   d5a68:	2e2c      	cmp	r6, #44	; 0x2c
   d5a6a:	d1f6      	bne.n	d5a5a <_ZN9MicroNMEA9skipFieldEPKc+0x6>
			// Check next character
			if (isEndOfFields(*++s))
   d5a6c:	7868      	ldrb	r0, [r5, #1]
   d5a6e:	f7ff ffe5 	bl	d5a3c <_ZN9MicroNMEA13isEndOfFieldsEc>
				break;
			else
				return s;
   d5a72:	2800      	cmp	r0, #0
   d5a74:	bf0c      	ite	eq
   d5a76:	4620      	moveq	r0, r4
   d5a78:	2000      	movne	r0, #0
   d5a7a:	bd70      	pop	{r4, r5, r6, pc}
		}
		++s;
	}
	return nullptr; // End of string or valid sentence
   d5a7c:	2000      	movs	r0, #0
}
   d5a7e:	bd70      	pop	{r4, r5, r6, pc}

000d5a80 <_ZN9MicroNMEA16parseUnsignedIntEPKch>:


unsigned int MicroNMEA::parseUnsignedInt(const char *s, uint8_t len)
{
   d5a80:	b510      	push	{r4, lr}
	int r = 0;
   d5a82:	2300      	movs	r3, #0
	while (len--)
		r = 10 * r + *s++ - '0';
   d5a84:	240a      	movs	r4, #10


unsigned int MicroNMEA::parseUnsignedInt(const char *s, uint8_t len)
{
	int r = 0;
	while (len--)
   d5a86:	3901      	subs	r1, #1
   d5a88:	b2c9      	uxtb	r1, r1
   d5a8a:	29ff      	cmp	r1, #255	; 0xff
   d5a8c:	d005      	beq.n	d5a9a <_ZN9MicroNMEA16parseUnsignedIntEPKch+0x1a>
		r = 10 * r + *s++ - '0';
   d5a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5a92:	fb04 2303 	mla	r3, r4, r3, r2
   d5a96:	3b30      	subs	r3, #48	; 0x30


unsigned int MicroNMEA::parseUnsignedInt(const char *s, uint8_t len)
{
	int r = 0;
	while (len--)
   d5a98:	e7f5      	b.n	d5a86 <_ZN9MicroNMEA16parseUnsignedIntEPKch+0x6>
		r = 10 * r + *s++ - '0';
	return r;
}
   d5a9a:	4618      	mov	r0, r3
   d5a9c:	bd10      	pop	{r4, pc}

000d5a9e <_ZN9MicroNMEA10parseFloatEPKchPS1_>:


long MicroNMEA::parseFloat(const char* s, uint8_t log10Multiplier, const char** eptr)
{
   d5a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5aa2:	460c      	mov	r4, r1
   d5aa4:	4616      	mov	r6, r2
   d5aa6:	4607      	mov	r7, r0
	int8_t neg = 1;
	long r = 0;
	while (isspace(*s))
   d5aa8:	f897 8000 	ldrb.w	r8, [r7]
   d5aac:	4640      	mov	r0, r8
   d5aae:	463d      	mov	r5, r7
   d5ab0:	3701      	adds	r7, #1
   d5ab2:	f007 f883 	bl	dcbbc <isspace>
   d5ab6:	2800      	cmp	r0, #0
   d5ab8:	d1f6      	bne.n	d5aa8 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xa>
		++s;
	if (*s == '-') {
   d5aba:	f1b8 0f2d 	cmp.w	r8, #45	; 0x2d
   d5abe:	d103      	bne.n	d5ac8 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x2a>
		neg = -1;
		++s;
   d5ac0:	463d      	mov	r5, r7
	int8_t neg = 1;
	long r = 0;
	while (isspace(*s))
		++s;
	if (*s == '-') {
		neg = -1;
   d5ac2:	f04f 3eff 	mov.w	lr, #4294967295
   d5ac6:	e005      	b.n	d5ad4 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x36>
		++s;
	}
	else if (*s == '+')
		++s;
   d5ac8:	f1b8 0f2b 	cmp.w	r8, #43	; 0x2b
   d5acc:	bf08      	it	eq
   d5ace:	463d      	moveq	r5, r7
   d5ad0:	f04f 0e01 	mov.w	lr, #1
}


long MicroNMEA::parseFloat(const char* s, uint8_t log10Multiplier, const char** eptr)
{
	int8_t neg = 1;
   d5ad4:	2200      	movs	r2, #0
	}
	else if (*s == '+')
		++s;

	while (isdigit(*s))
		r = 10*r + *s++ - '0';
   d5ad6:	230a      	movs	r3, #10
		++s;
	}
	else if (*s == '+')
		++s;

	while (isdigit(*s))
   d5ad8:	782f      	ldrb	r7, [r5, #0]
   d5ada:	f1a7 0130 	sub.w	r1, r7, #48	; 0x30
   d5ade:	2909      	cmp	r1, #9
   d5ae0:	4628      	mov	r0, r5
   d5ae2:	f105 0501 	add.w	r5, r5, #1
   d5ae6:	d903      	bls.n	d5af0 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x52>
   d5ae8:	4621      	mov	r1, r4
   d5aea:	2301      	movs	r3, #1

static long exp10(uint8_t b)
{
	long r = 1;
	while (b--)
		r *= 10;
   d5aec:	250a      	movs	r5, #10
   d5aee:	e003      	b.n	d5af8 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x5a>
	}
	else if (*s == '+')
		++s;

	while (isdigit(*s))
		r = 10*r + *s++ - '0';
   d5af0:	fb03 7202 	mla	r2, r3, r2, r7
   d5af4:	3a30      	subs	r2, #48	; 0x30
		++s;
	}
	else if (*s == '+')
		++s;

	while (isdigit(*s))
   d5af6:	e7ef      	b.n	d5ad8 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x3a>


static long exp10(uint8_t b)
{
	long r = 1;
	while (b--)
   d5af8:	3901      	subs	r1, #1
   d5afa:	b2c9      	uxtb	r1, r1
   d5afc:	29ff      	cmp	r1, #255	; 0xff
   d5afe:	d001      	beq.n	d5b04 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x66>
		r *= 10;
   d5b00:	436b      	muls	r3, r5
   d5b02:	e7f9      	b.n	d5af8 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x5a>

	while (isdigit(*s))
		r = 10*r + *s++ - '0';
	r *= exp10(log10Multiplier);

	if (*s == '.') {
   d5b04:	2f2e      	cmp	r7, #46	; 0x2e
	else if (*s == '+')
		++s;

	while (isdigit(*s))
		r = 10*r + *s++ - '0';
	r *= exp10(log10Multiplier);
   d5b06:	fb03 f302 	mul.w	r3, r3, r2

	if (*s == '.') {
   d5b0a:	d11e      	bne.n	d5b4a <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xac>
   d5b0c:	1c45      	adds	r5, r0, #1
		++s;
		long frac = 0;
   d5b0e:	2200      	movs	r2, #0
		while (isdigit(*s) && log10Multiplier) {
			frac = 10 * frac + *s++ -'0';
   d5b10:	270a      	movs	r7, #10
	r *= exp10(log10Multiplier);

	if (*s == '.') {
		++s;
		long frac = 0;
		while (isdigit(*s) && log10Multiplier) {
   d5b12:	7829      	ldrb	r1, [r5, #0]
   d5b14:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
   d5b18:	f1bc 0f09 	cmp.w	ip, #9
   d5b1c:	4628      	mov	r0, r5
   d5b1e:	f105 0501 	add.w	r5, r5, #1
   d5b22:	d902      	bls.n	d5b2a <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x8c>
   d5b24:	2501      	movs	r5, #1

static long exp10(uint8_t b)
{
	long r = 1;
	while (b--)
		r *= 10;
   d5b26:	270a      	movs	r7, #10
   d5b28:	e006      	b.n	d5b38 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x9a>
	r *= exp10(log10Multiplier);

	if (*s == '.') {
		++s;
		long frac = 0;
		while (isdigit(*s) && log10Multiplier) {
   d5b2a:	b15c      	cbz	r4, d5b44 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xa6>
			frac = 10 * frac + *s++ -'0';
   d5b2c:	fb07 1202 	mla	r2, r7, r2, r1
			--log10Multiplier;
   d5b30:	3c01      	subs	r4, #1

	if (*s == '.') {
		++s;
		long frac = 0;
		while (isdigit(*s) && log10Multiplier) {
			frac = 10 * frac + *s++ -'0';
   d5b32:	3a30      	subs	r2, #48	; 0x30
			--log10Multiplier;
   d5b34:	b2e4      	uxtb	r4, r4
	r *= exp10(log10Multiplier);

	if (*s == '.') {
		++s;
		long frac = 0;
		while (isdigit(*s) && log10Multiplier) {
   d5b36:	e7ec      	b.n	d5b12 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x74>


static long exp10(uint8_t b)
{
	long r = 1;
	while (b--)
   d5b38:	3c01      	subs	r4, #1
   d5b3a:	b2e4      	uxtb	r4, r4
   d5b3c:	2cff      	cmp	r4, #255	; 0xff
   d5b3e:	d002      	beq.n	d5b46 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xa8>
		r *= 10;
   d5b40:	437d      	muls	r5, r7
   d5b42:	e7f9      	b.n	d5b38 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0x9a>
   d5b44:	2501      	movs	r5, #1
		while (isdigit(*s) && log10Multiplier) {
			frac = 10 * frac + *s++ -'0';
			--log10Multiplier;
		}
		frac *= exp10(log10Multiplier);
		r += frac;
   d5b46:	fb05 3302 	mla	r3, r5, r2, r3
	}
	r *= neg; // Include effect of any minus sign
   d5b4a:	fb03 f40e 	mul.w	r4, r3, lr

	if (eptr)
   d5b4e:	b116      	cbz	r6, d5b56 <_ZN9MicroNMEA10parseFloatEPKchPS1_+0xb8>
		*eptr = skipField(s);
   d5b50:	f7ff ff80 	bl	d5a54 <_ZN9MicroNMEA9skipFieldEPKc>
   d5b54:	6030      	str	r0, [r6, #0]

	return r;
}
   d5b56:	4620      	mov	r0, r4
   d5b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5b5c <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>:


long MicroNMEA::parseDegreeMinute(const char* s, uint8_t degWidth,
								  const char **eptr)
{
   d5b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (*s == ',') {
   d5b5e:	7803      	ldrb	r3, [r0, #0]
   d5b60:	2b2c      	cmp	r3, #44	; 0x2c
}


long MicroNMEA::parseDegreeMinute(const char* s, uint8_t degWidth,
								  const char **eptr)
{
   d5b62:	4606      	mov	r6, r0
   d5b64:	460f      	mov	r7, r1
   d5b66:	4614      	mov	r4, r2
	if (*s == ',') {
   d5b68:	d105      	bne.n	d5b76 <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_+0x1a>
		if (eptr)
   d5b6a:	b112      	cbz	r2, d5b72 <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_+0x16>
			*eptr = skipField(s);
   d5b6c:	f7ff ff72 	bl	d5a54 <_ZN9MicroNMEA9skipFieldEPKc>
   d5b70:	6020      	str	r0, [r4, #0]
   d5b72:	2000      	movs	r0, #0
   d5b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
	}
	long r = parseUnsignedInt(s, degWidth) * 1000000L;
   d5b76:	f7ff ff83 	bl	d5a80 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
   d5b7a:	4d06      	ldr	r5, [pc, #24]	; (d5b94 <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_+0x38>)
	s += degWidth;
	r += parseFloat(s, 6, eptr) / 60;
   d5b7c:	4622      	mov	r2, r4
	if (*s == ',') {
		if (eptr)
			*eptr = skipField(s);
		return 0;
	}
	long r = parseUnsignedInt(s, degWidth) * 1000000L;
   d5b7e:	4345      	muls	r5, r0
	s += degWidth;
	r += parseFloat(s, 6, eptr) / 60;
   d5b80:	2106      	movs	r1, #6
   d5b82:	19f0      	adds	r0, r6, r7
   d5b84:	f7ff ff8b 	bl	d5a9e <_ZN9MicroNMEA10parseFloatEPKchPS1_>
   d5b88:	223c      	movs	r2, #60	; 0x3c
   d5b8a:	fb90 f0f2 	sdiv	r0, r0, r2
   d5b8e:	4428      	add	r0, r5
	return r;
   d5b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5b92:	bf00      	nop
   d5b94:	000f4240 	.word	0x000f4240

000d5b98 <_ZN9MicroNMEA10parseFieldEPKcPci>:
}


const char* MicroNMEA::parseField(const char* s, char *result, int len)
{
   d5b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5b9c:	460c      	mov	r4, r1
   d5b9e:	4691      	mov	r9, r2
	if (s == nullptr)
   d5ba0:	b910      	cbnz	r0, d5ba8 <_ZN9MicroNMEA10parseFieldEPKcPci+0x10>
		return nullptr;
   d5ba2:	2000      	movs	r0, #0
   d5ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5ba8:	4606      	mov	r6, r0
}


const char* MicroNMEA::parseField(const char* s, char *result, int len)
{
	if (s == nullptr)
   d5baa:	2500      	movs	r5, #0
   d5bac:	4637      	mov	r7, r6
		return nullptr;

	int i = 0;
	while (*s != ',' && !isEndOfFields(*s)) {
   d5bae:	f816 8b01 	ldrb.w	r8, [r6], #1
   d5bb2:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   d5bb6:	d011      	beq.n	d5bdc <_ZN9MicroNMEA10parseFieldEPKcPci+0x44>
   d5bb8:	4640      	mov	r0, r8
   d5bba:	f7ff ff3f 	bl	d5a3c <_ZN9MicroNMEA13isEndOfFieldsEc>
   d5bbe:	b9c0      	cbnz	r0, d5bf2 <_ZN9MicroNMEA10parseFieldEPKcPci+0x5a>
		if (result && i++ < len)
   d5bc0:	b154      	cbz	r4, d5bd8 <_ZN9MicroNMEA10parseFieldEPKcPci+0x40>
   d5bc2:	454d      	cmp	r5, r9
   d5bc4:	f105 0301 	add.w	r3, r5, #1
   d5bc8:	db01      	blt.n	d5bce <_ZN9MicroNMEA10parseFieldEPKcPci+0x36>
   d5bca:	461d      	mov	r5, r3
   d5bcc:	e004      	b.n	d5bd8 <_ZN9MicroNMEA10parseFieldEPKcPci+0x40>
			*result++ = *s;
   d5bce:	f884 8000 	strb.w	r8, [r4]
   d5bd2:	3401      	adds	r4, #1
{
	if (s == nullptr)
		return nullptr;

	int i = 0;
	while (*s != ',' && !isEndOfFields(*s)) {
   d5bd4:	461d      	mov	r5, r3
   d5bd6:	e7e9      	b.n	d5bac <_ZN9MicroNMEA10parseFieldEPKcPci+0x14>
   d5bd8:	462b      	mov	r3, r5
   d5bda:	e7fb      	b.n	d5bd4 <_ZN9MicroNMEA10parseFieldEPKcPci+0x3c>
		if (result && i++ < len)
			*result++ = *s;
		++s;
	}
	if (result && i < len)
   d5bdc:	b134      	cbz	r4, d5bec <_ZN9MicroNMEA10parseFieldEPKcPci+0x54>
   d5bde:	454d      	cmp	r5, r9
		*result = '\0'; // Terminate unless too long
   d5be0:	bfbc      	itt	lt
   d5be2:	2300      	movlt	r3, #0
   d5be4:	7023      	strblt	r3, [r4, #0]

	if (*s == ',')
   d5be6:	783b      	ldrb	r3, [r7, #0]
   d5be8:	2b2c      	cmp	r3, #44	; 0x2c
   d5bea:	d1da      	bne.n	d5ba2 <_ZN9MicroNMEA10parseFieldEPKcPci+0xa>
		return ++s; // Location of start of next field
   d5bec:	1c78      	adds	r0, r7, #1
   d5bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	while (*s != ',' && !isEndOfFields(*s)) {
		if (result && i++ < len)
			*result++ = *s;
		++s;
	}
	if (result && i < len)
   d5bf2:	2c00      	cmp	r4, #0
   d5bf4:	d1f3      	bne.n	d5bde <_ZN9MicroNMEA10parseFieldEPKcPci+0x46>
   d5bf6:	e7d4      	b.n	d5ba2 <_ZN9MicroNMEA10parseFieldEPKcPci+0xa>

000d5bf8 <_ZN9MicroNMEA16generateChecksumEPKcPc>:
		return nullptr; // End of string or valid sentence
}


const char* MicroNMEA::generateChecksum(const char* s, char* checksum)
{
   d5bf8:	b510      	push	{r4, lr}
	uint8_t c = 0;
	// Initial $ is omitted from checksum, if present ignore it.
	if (*s == '$')
   d5bfa:	7803      	ldrb	r3, [r0, #0]
   d5bfc:	2b24      	cmp	r3, #36	; 0x24
		++s;
   d5bfe:	bf08      	it	eq
   d5c00:	3001      	addeq	r0, #1
   d5c02:	4602      	mov	r2, r0
		return nullptr; // End of string or valid sentence
}


const char* MicroNMEA::generateChecksum(const char* s, char* checksum)
{
   d5c04:	2300      	movs	r3, #0
   d5c06:	4610      	mov	r0, r2
	uint8_t c = 0;
	// Initial $ is omitted from checksum, if present ignore it.
	if (*s == '$')
		++s;

	while (*s != '\0' && *s != '*')
   d5c08:	f812 4b01 	ldrb.w	r4, [r2], #1
   d5c0c:	b11c      	cbz	r4, d5c16 <_ZN9MicroNMEA16generateChecksumEPKcPc+0x1e>
   d5c0e:	2c2a      	cmp	r4, #42	; 0x2a
   d5c10:	d001      	beq.n	d5c16 <_ZN9MicroNMEA16generateChecksumEPKcPc+0x1e>
		c ^= *s++;
   d5c12:	4063      	eors	r3, r4
	uint8_t c = 0;
	// Initial $ is omitted from checksum, if present ignore it.
	if (*s == '$')
		++s;

	while (*s != '\0' && *s != '*')
   d5c14:	e7f7      	b.n	d5c06 <_ZN9MicroNMEA16generateChecksumEPKcPc+0xe>
		c ^= *s++;

	if (checksum) {
   d5c16:	b169      	cbz	r1, d5c34 <_ZN9MicroNMEA16generateChecksumEPKcPc+0x3c>
		checksum[0] = toHex(c / 16);
   d5c18:	091a      	lsrs	r2, r3, #4
}


static char toHex(uint8_t nibble)
{
	if (nibble >= 10)
   d5c1a:	2a09      	cmp	r2, #9
	while (*s != '\0' && *s != '*')
		c ^= *s++;

	if (checksum) {
		checksum[0] = toHex(c / 16);
		checksum[1] = toHex(c % 16);
   d5c1c:	f003 030f 	and.w	r3, r3, #15


static char toHex(uint8_t nibble)
{
	if (nibble >= 10)
		return nibble + 'A' - 10;
   d5c20:	bf8c      	ite	hi
   d5c22:	3237      	addhi	r2, #55	; 0x37
	else
		return nibble + '0';
   d5c24:	3230      	addls	r2, #48	; 0x30
}


static char toHex(uint8_t nibble)
{
	if (nibble >= 10)
   d5c26:	2b09      	cmp	r3, #9
		return nibble + 'A' - 10;
	else
		return nibble + '0';
   d5c28:	b2d2      	uxtb	r2, r2


static char toHex(uint8_t nibble)
{
	if (nibble >= 10)
		return nibble + 'A' - 10;
   d5c2a:	bf8c      	ite	hi
   d5c2c:	3337      	addhi	r3, #55	; 0x37
	else
		return nibble + '0';
   d5c2e:	3330      	addls	r3, #48	; 0x30

	while (*s != '\0' && *s != '*')
		c ^= *s++;

	if (checksum) {
		checksum[0] = toHex(c / 16);
   d5c30:	700a      	strb	r2, [r1, #0]
		checksum[1] = toHex(c % 16);
   d5c32:	704b      	strb	r3, [r1, #1]
	}
	return s;
}
   d5c34:	bd10      	pop	{r4, pc}

000d5c36 <_ZN9MicroNMEA12testChecksumEPKc>:


bool MicroNMEA::testChecksum(const char* s)
{
   d5c36:	b507      	push	{r0, r1, r2, lr}
	char checksum[2];
	const char* p = generateChecksum(s, checksum);
   d5c38:	a901      	add	r1, sp, #4
   d5c3a:	f7ff ffdd 	bl	d5bf8 <_ZN9MicroNMEA16generateChecksumEPKcPc>
	return *p == '*' && p[1] == checksum[0] && p[2] == checksum[1];
   d5c3e:	7803      	ldrb	r3, [r0, #0]
   d5c40:	2b2a      	cmp	r3, #42	; 0x2a
   d5c42:	d10b      	bne.n	d5c5c <_ZN9MicroNMEA12testChecksumEPKc+0x26>
   d5c44:	7842      	ldrb	r2, [r0, #1]
   d5c46:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5c4a:	429a      	cmp	r2, r3
   d5c4c:	d106      	bne.n	d5c5c <_ZN9MicroNMEA12testChecksumEPKc+0x26>
   d5c4e:	7883      	ldrb	r3, [r0, #2]
   d5c50:	f89d 0005 	ldrb.w	r0, [sp, #5]
   d5c54:	1a1b      	subs	r3, r3, r0
   d5c56:	4258      	negs	r0, r3
   d5c58:	4158      	adcs	r0, r3
   d5c5a:	e000      	b.n	d5c5e <_ZN9MicroNMEA12testChecksumEPKc+0x28>
   d5c5c:	2000      	movs	r0, #0
}
   d5c5e:	b003      	add	sp, #12
   d5c60:	f85d fb04 	ldr.w	pc, [sp], #4

000d5c64 <_ZN9MicroNMEA9setBufferEPvh>:
}


void MicroNMEA::setBuffer(void* buf, uint8_t len)
{
	_bufferLen = len;
   d5c64:	7002      	strb	r2, [r0, #0]
	_buffer = (char*)buf;
   d5c66:	6041      	str	r1, [r0, #4]
	_ptr = _buffer;
   d5c68:	6081      	str	r1, [r0, #8]
	if (_bufferLen) {
   d5c6a:	b132      	cbz	r2, d5c7a <_ZN9MicroNMEA9setBufferEPvh+0x16>
		*_ptr = '\0';
   d5c6c:	2200      	movs	r2, #0
   d5c6e:	700a      	strb	r2, [r1, #0]
		_buffer[_bufferLen - 1] = '\0';
   d5c70:	7803      	ldrb	r3, [r0, #0]
   d5c72:	6841      	ldr	r1, [r0, #4]
   d5c74:	440b      	add	r3, r1
   d5c76:	f803 2c01 	strb.w	r2, [r3, #-1]
   d5c7a:	4770      	bx	lr

000d5c7c <_ZN9MicroNMEA5clearEv>:

void MicroNMEA::clear(void)
{
	_navSystem = '\0';
	_numSat = 0;
	_hdop = 255;
   d5c7c:	22ff      	movs	r2, #255	; 0xff
   d5c7e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
	_isValid = false;
	_latitude = 999000000L;
   d5c82:	4a0f      	ldr	r2, [pc, #60]	; (d5cc0 <_ZN9MicroNMEA5clearEv+0x44>)
   d5c84:	6182      	str	r2, [r0, #24]
	_longitude = 999000000L;
   d5c86:	61c2      	str	r2, [r0, #28]
	_altitude = _speed = _course = LONG_MIN;
   d5c88:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
}


void MicroNMEA::clear(void)
{
	_navSystem = '\0';
   d5c8c:	2300      	movs	r3, #0
	_numSat = 0;
	_hdop = 255;
	_isValid = false;
	_latitude = 999000000L;
	_longitude = 999000000L;
	_altitude = _speed = _course = LONG_MIN;
   d5c8e:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5c90:	6282      	str	r2, [r0, #40]	; 0x28
   d5c92:	6202      	str	r2, [r0, #32]
	_altitudeValid = false;
	_year = _month = _day = 0;
	_hour = _minute = _second = 99;
   d5c94:	2263      	movs	r2, #99	; 0x63
}


void MicroNMEA::clear(void)
{
	_navSystem = '\0';
   d5c96:	74c3      	strb	r3, [r0, #19]
	_numSat = 0;
   d5c98:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	_hdop = 255;
	_isValid = false;
   d5c9c:	7503      	strb	r3, [r0, #20]
	_latitude = 999000000L;
	_longitude = 999000000L;
	_altitude = _speed = _course = LONG_MIN;
	_altitudeValid = false;
   d5c9e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	_year = _month = _day = 0;
   d5ca2:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
   d5ca6:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   d5caa:	8603      	strh	r3, [r0, #48]	; 0x30
	_hour = _minute = _second = 99;
   d5cac:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
   d5cb0:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
   d5cb4:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
	_hundredths = 0;
   d5cb8:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
   d5cbc:	4770      	bx	lr
   d5cbe:	bf00      	nop
   d5cc0:	3b8b87c0 	.word	0x3b8b87c0

000d5cc4 <_ZN9MicroNMEAC1EPvh>:
	setBuffer(nullptr, 0);
	clear();
}


MicroNMEA::MicroNMEA(void* buf, uint8_t len) :
   d5cc4:	b538      	push	{r3, r4, r5, lr}
	_talkerID('\0'),
	_messageID{0},
	_badChecksumHandler(nullptr),
	_unknownSentenceHandler(nullptr)
   d5cc6:	2300      	movs	r3, #0
   d5cc8:	7303      	strb	r3, [r0, #12]
   d5cca:	f8c0 300d 	str.w	r3, [r0, #13]
   d5cce:	f8a0 3011 	strh.w	r3, [r0, #17]
   d5cd2:	63c3      	str	r3, [r0, #60]	; 0x3c
   d5cd4:	6403      	str	r3, [r0, #64]	; 0x40
{
	setBuffer(buf, len);
   d5cd6:	f7ff ffc5 	bl	d5c64 <_ZN9MicroNMEA9setBufferEPvh>
	clear();
   d5cda:	f7ff ffcf 	bl	d5c7c <_ZN9MicroNMEA5clearEv>
}
   d5cde:	bd38      	pop	{r3, r4, r5, pc}

000d5ce0 <_ZN9MicroNMEA9parseTimeEPKc>:
	return false;
}


const char* MicroNMEA::parseTime(const char* s)
{
   d5ce0:	b538      	push	{r3, r4, r5, lr}
	if (*s == ',')
   d5ce2:	780b      	ldrb	r3, [r1, #0]
   d5ce4:	2b2c      	cmp	r3, #44	; 0x2c
	return false;
}


const char* MicroNMEA::parseTime(const char* s)
{
   d5ce6:	4605      	mov	r5, r0
   d5ce8:	460c      	mov	r4, r1
	if (*s == ',')
   d5cea:	d101      	bne.n	d5cf0 <_ZN9MicroNMEA9parseTimeEPKc+0x10>
		return skipField(s);
   d5cec:	4608      	mov	r0, r1
   d5cee:	e019      	b.n	d5d24 <_ZN9MicroNMEA9parseTimeEPKc+0x44>
	_hour = parseUnsignedInt(s, 2);
   d5cf0:	2102      	movs	r1, #2
   d5cf2:	4620      	mov	r0, r4
   d5cf4:	f7ff fec4 	bl	d5a80 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_minute = parseUnsignedInt(s + 2, 2);
   d5cf8:	2102      	movs	r1, #2

const char* MicroNMEA::parseTime(const char* s)
{
	if (*s == ',')
		return skipField(s);
	_hour = parseUnsignedInt(s, 2);
   d5cfa:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
	_minute = parseUnsignedInt(s + 2, 2);
   d5cfe:	1860      	adds	r0, r4, r1
   d5d00:	f7ff febe 	bl	d5a80 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_second = parseUnsignedInt(s + 4, 2);
   d5d04:	2102      	movs	r1, #2
const char* MicroNMEA::parseTime(const char* s)
{
	if (*s == ',')
		return skipField(s);
	_hour = parseUnsignedInt(s, 2);
	_minute = parseUnsignedInt(s + 2, 2);
   d5d06:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
	_second = parseUnsignedInt(s + 4, 2);
   d5d0a:	1d20      	adds	r0, r4, #4
   d5d0c:	f7ff feb8 	bl	d5a80 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_hundredths = parseUnsignedInt(s + 7, 2);
   d5d10:	2102      	movs	r1, #2
{
	if (*s == ',')
		return skipField(s);
	_hour = parseUnsignedInt(s, 2);
	_minute = parseUnsignedInt(s + 2, 2);
	_second = parseUnsignedInt(s + 4, 2);
   d5d12:	f885 0036 	strb.w	r0, [r5, #54]	; 0x36
	_hundredths = parseUnsignedInt(s + 7, 2);
   d5d16:	1de0      	adds	r0, r4, #7
   d5d18:	f7ff feb2 	bl	d5a80 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
   d5d1c:	f885 0037 	strb.w	r0, [r5, #55]	; 0x37
	return skipField(s + 9);
   d5d20:	f104 0009 	add.w	r0, r4, #9
}
   d5d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return skipField(s);
	_hour = parseUnsignedInt(s, 2);
	_minute = parseUnsignedInt(s + 2, 2);
	_second = parseUnsignedInt(s + 4, 2);
	_hundredths = parseUnsignedInt(s + 7, 2);
	return skipField(s + 9);
   d5d28:	f7ff be94 	b.w	d5a54 <_ZN9MicroNMEA9skipFieldEPKc>

000d5d2c <_ZN9MicroNMEA9parseDateEPKc>:
}


const char* MicroNMEA::parseDate(const char* s)
{
   d5d2c:	b538      	push	{r3, r4, r5, lr}
	if (*s == ',')
   d5d2e:	780b      	ldrb	r3, [r1, #0]
   d5d30:	2b2c      	cmp	r3, #44	; 0x2c
	return skipField(s + 9);
}


const char* MicroNMEA::parseDate(const char* s)
{
   d5d32:	4605      	mov	r5, r0
   d5d34:	460c      	mov	r4, r1
	if (*s == ',')
   d5d36:	d101      	bne.n	d5d3c <_ZN9MicroNMEA9parseDateEPKc+0x10>
		return skipField(s);
   d5d38:	4608      	mov	r0, r1
   d5d3a:	e013      	b.n	d5d64 <_ZN9MicroNMEA9parseDateEPKc+0x38>
	_day = parseUnsignedInt(s, 2);
   d5d3c:	2102      	movs	r1, #2
   d5d3e:	4620      	mov	r0, r4
   d5d40:	f7ff fe9e 	bl	d5a80 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_month = parseUnsignedInt(s + 2, 2);
   d5d44:	2102      	movs	r1, #2

const char* MicroNMEA::parseDate(const char* s)
{
	if (*s == ',')
		return skipField(s);
	_day = parseUnsignedInt(s, 2);
   d5d46:	f885 0033 	strb.w	r0, [r5, #51]	; 0x33
	_month = parseUnsignedInt(s + 2, 2);
   d5d4a:	1860      	adds	r0, r4, r1
   d5d4c:	f7ff fe98 	bl	d5a80 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
	_year = parseUnsignedInt(s + 4, 2) + 2000;
   d5d50:	2102      	movs	r1, #2
const char* MicroNMEA::parseDate(const char* s)
{
	if (*s == ',')
		return skipField(s);
	_day = parseUnsignedInt(s, 2);
	_month = parseUnsignedInt(s + 2, 2);
   d5d52:	f885 0032 	strb.w	r0, [r5, #50]	; 0x32
	_year = parseUnsignedInt(s + 4, 2) + 2000;
   d5d56:	1d20      	adds	r0, r4, #4
   d5d58:	f7ff fe92 	bl	d5a80 <_ZN9MicroNMEA16parseUnsignedIntEPKch>
   d5d5c:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5d60:	8628      	strh	r0, [r5, #48]	; 0x30
	return skipField(s + 6);
   d5d62:	1da0      	adds	r0, r4, #6
}
   d5d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (*s == ',')
		return skipField(s);
	_day = parseUnsignedInt(s, 2);
	_month = parseUnsignedInt(s + 2, 2);
	_year = parseUnsignedInt(s + 4, 2) + 2000;
	return skipField(s + 6);
   d5d68:	f7ff be74 	b.w	d5a54 <_ZN9MicroNMEA9skipFieldEPKc>

000d5d6c <_ZN9MicroNMEA10processGGAEPKc>:
}


bool MicroNMEA::processGGA(const char *s)
{
   d5d6c:	b513      	push	{r0, r1, r4, lr}
	// If GxGSV messages are received _talker_ID can be changed after
	// other MicroNMEA sentences. Compatibility modes can set the talker ID
	// to indicate GPS regardless of actual navigation system used.
	_navSystem = _talkerID;
   d5d6e:	7b03      	ldrb	r3, [r0, #12]
   d5d70:	74c3      	strb	r3, [r0, #19]
	return skipField(s + 6);
}


bool MicroNMEA::processGGA(const char *s)
{
   d5d72:	4604      	mov	r4, r0
   d5d74:	9101      	str	r1, [sp, #4]
	// If GxGSV messages are received _talker_ID can be changed after
	// other MicroNMEA sentences. Compatibility modes can set the talker ID
	// to indicate GPS regardless of actual navigation system used.
	_navSystem = _talkerID;

	s = parseTime(s);
   d5d76:	f7ff ffb3 	bl	d5ce0 <_ZN9MicroNMEA9parseTimeEPKc>
   d5d7a:	9001      	str	r0, [sp, #4]
	if (s == nullptr)
   d5d7c:	b908      	cbnz	r0, d5d82 <_ZN9MicroNMEA10processGGAEPKc+0x16>
		return false;
   d5d7e:	2000      	movs	r0, #0
   d5d80:	e056      	b.n	d5e30 <_ZN9MicroNMEA10processGGAEPKc+0xc4>
	// ++s;
	_latitude = parseDegreeMinute(s, 2, &s);
   d5d82:	aa01      	add	r2, sp, #4
   d5d84:	2102      	movs	r1, #2
   d5d86:	f7ff fee9 	bl	d5b5c <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>
	if (s == nullptr)
   d5d8a:	9b01      	ldr	r3, [sp, #4]

	s = parseTime(s);
	if (s == nullptr)
		return false;
	// ++s;
	_latitude = parseDegreeMinute(s, 2, &s);
   d5d8c:	61a0      	str	r0, [r4, #24]
	if (s == nullptr)
   d5d8e:	2b00      	cmp	r3, #0
   d5d90:	d0f5      	beq.n	d5d7e <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	if (*s == ',')
   d5d92:	781a      	ldrb	r2, [r3, #0]
   d5d94:	2a2c      	cmp	r2, #44	; 0x2c
   d5d96:	d101      	bne.n	d5d9c <_ZN9MicroNMEA10processGGAEPKc+0x30>
		++s;
   d5d98:	3301      	adds	r3, #1
   d5d9a:	e004      	b.n	d5da6 <_ZN9MicroNMEA10processGGAEPKc+0x3a>
	else {
		if (*s == 'S')
   d5d9c:	2a53      	cmp	r2, #83	; 0x53
			_latitude *= -1;
   d5d9e:	bf04      	itt	eq
   d5da0:	4240      	negeq	r0, r0
   d5da2:	61a0      	streq	r0, [r4, #24]
		s += 2; // Skip N/S and comma
   d5da4:	3302      	adds	r3, #2
   d5da6:	9301      	str	r3, [sp, #4]
	}
	_longitude = parseDegreeMinute(s, 3, &s);
   d5da8:	aa01      	add	r2, sp, #4
   d5daa:	2103      	movs	r1, #3
   d5dac:	9801      	ldr	r0, [sp, #4]
   d5dae:	f7ff fed5 	bl	d5b5c <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>
	if (s == nullptr)
   d5db2:	9b01      	ldr	r3, [sp, #4]
	else {
		if (*s == 'S')
			_latitude *= -1;
		s += 2; // Skip N/S and comma
	}
	_longitude = parseDegreeMinute(s, 3, &s);
   d5db4:	61e0      	str	r0, [r4, #28]
	if (s == nullptr)
   d5db6:	2b00      	cmp	r3, #0
   d5db8:	d0e1      	beq.n	d5d7e <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	if (*s == ',')
   d5dba:	781a      	ldrb	r2, [r3, #0]
   d5dbc:	2a2c      	cmp	r2, #44	; 0x2c
   d5dbe:	d101      	bne.n	d5dc4 <_ZN9MicroNMEA10processGGAEPKc+0x58>
		++s;
   d5dc0:	3301      	adds	r3, #1
   d5dc2:	e004      	b.n	d5dce <_ZN9MicroNMEA10processGGAEPKc+0x62>
	else {
		if (*s == 'W')
   d5dc4:	2a57      	cmp	r2, #87	; 0x57
			_longitude *= -1;
   d5dc6:	bf04      	itt	eq
   d5dc8:	4240      	negeq	r0, r0
   d5dca:	61e0      	streq	r0, [r4, #28]
		s += 2; // Skip E/W and comma
   d5dcc:	3302      	adds	r3, #2
   d5dce:	9301      	str	r3, [sp, #4]
	}
	_isValid = (*s >= '1' && *s <= '5');
   d5dd0:	9801      	ldr	r0, [sp, #4]
   d5dd2:	f810 3b02 	ldrb.w	r3, [r0], #2
	s += 2; // Skip position fix flag and comma
   d5dd6:	9001      	str	r0, [sp, #4]
	else {
		if (*s == 'W')
			_longitude *= -1;
		s += 2; // Skip E/W and comma
	}
	_isValid = (*s >= '1' && *s <= '5');
   d5dd8:	3b31      	subs	r3, #49	; 0x31
   d5dda:	2b04      	cmp	r3, #4
   d5ddc:	bf8c      	ite	hi
   d5dde:	2300      	movhi	r3, #0
   d5de0:	2301      	movls	r3, #1
   d5de2:	7523      	strb	r3, [r4, #20]
	s += 2; // Skip position fix flag and comma
	long tmp = parseFloat(s, 0, &s);
   d5de4:	aa01      	add	r2, sp, #4
   d5de6:	2100      	movs	r1, #0
   d5de8:	f7ff fe59 	bl	d5a9e <_ZN9MicroNMEA10parseFloatEPKchPS1_>
	_numSat = (tmp > 255 ? 255 : (tmp < 0 ? 0 : tmp));
   d5dec:	28ff      	cmp	r0, #255	; 0xff
   d5dee:	bfda      	itte	le
   d5df0:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
   d5df4:	b2c0      	uxtble	r0, r0
   d5df6:	20ff      	movgt	r0, #255	; 0xff
   d5df8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	if (s == nullptr)
   d5dfc:	9801      	ldr	r0, [sp, #4]
   d5dfe:	2800      	cmp	r0, #0
   d5e00:	d0bd      	beq.n	d5d7e <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	tmp = parseFloat(s, 1, &s);
   d5e02:	aa01      	add	r2, sp, #4
   d5e04:	2101      	movs	r1, #1
   d5e06:	f7ff fe4a 	bl	d5a9e <_ZN9MicroNMEA10parseFloatEPKchPS1_>
	_hdop = (tmp > 255 || tmp < 0 ? 255 : tmp);
   d5e0a:	28ff      	cmp	r0, #255	; 0xff
   d5e0c:	bf28      	it	cs
   d5e0e:	20ff      	movcs	r0, #255	; 0xff
   d5e10:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	if (s == nullptr)
   d5e14:	9801      	ldr	r0, [sp, #4]
   d5e16:	2800      	cmp	r0, #0
   d5e18:	d0b1      	beq.n	d5d7e <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	_altitude = parseFloat(s, 3, &s);
   d5e1a:	aa01      	add	r2, sp, #4
   d5e1c:	2103      	movs	r1, #3
   d5e1e:	f7ff fe3e 	bl	d5a9e <_ZN9MicroNMEA10parseFloatEPKchPS1_>
	if (s == nullptr)
   d5e22:	9b01      	ldr	r3, [sp, #4]
		return false;
	tmp = parseFloat(s, 1, &s);
	_hdop = (tmp > 255 || tmp < 0 ? 255 : tmp);
	if (s == nullptr)
		return false;
	_altitude = parseFloat(s, 3, &s);
   d5e24:	6220      	str	r0, [r4, #32]
	if (s == nullptr)
   d5e26:	2b00      	cmp	r3, #0
   d5e28:	d0a9      	beq.n	d5d7e <_ZN9MicroNMEA10processGGAEPKc+0x12>
		return false;
	_altitudeValid = true;
   d5e2a:	2001      	movs	r0, #1
   d5e2c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	// That's all we care about
	return true;
}
   d5e30:	b002      	add	sp, #8
   d5e32:	bd10      	pop	{r4, pc}

000d5e34 <_ZN9MicroNMEA10processRMCEPKc>:


bool MicroNMEA::processRMC(const char* s)
{
   d5e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// If GxGSV messages are received _talker_ID can be changed after
	// other MicroNMEA sentences. Compatibility modes can set the talker
	// ID to indicate GPS regardless of actual navigation system used.
	_navSystem = _talkerID;
   d5e36:	7b03      	ldrb	r3, [r0, #12]
   d5e38:	74c3      	strb	r3, [r0, #19]
	return true;
}


bool MicroNMEA::processRMC(const char* s)
{
   d5e3a:	4604      	mov	r4, r0
   d5e3c:	9101      	str	r1, [sp, #4]
	// If GxGSV messages are received _talker_ID can be changed after
	// other MicroNMEA sentences. Compatibility modes can set the talker
	// ID to indicate GPS regardless of actual navigation system used.
	_navSystem = _talkerID;

	s = parseTime(s);
   d5e3e:	f7ff ff4f 	bl	d5ce0 <_ZN9MicroNMEA9parseTimeEPKc>
   d5e42:	9001      	str	r0, [sp, #4]
	if (s == nullptr)
   d5e44:	b908      	cbnz	r0, d5e4a <_ZN9MicroNMEA10processRMCEPKc+0x16>
		return false;
   d5e46:	2000      	movs	r0, #0
   d5e48:	e045      	b.n	d5ed6 <_ZN9MicroNMEA10processRMCEPKc+0xa2>
	_isValid = (*s == 'A');
   d5e4a:	f810 3b02 	ldrb.w	r3, [r0], #2
	s += 2; // Skip validity and comma
   d5e4e:	ad02      	add	r5, sp, #8
	_navSystem = _talkerID;

	s = parseTime(s);
	if (s == nullptr)
		return false;
	_isValid = (*s == 'A');
   d5e50:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   d5e54:	4253      	negs	r3, r2
	s += 2; // Skip validity and comma
   d5e56:	f845 0d04 	str.w	r0, [r5, #-4]!
	_navSystem = _talkerID;

	s = parseTime(s);
	if (s == nullptr)
		return false;
	_isValid = (*s == 'A');
   d5e5a:	4153      	adcs	r3, r2
   d5e5c:	7523      	strb	r3, [r4, #20]
	s += 2; // Skip validity and comma
	_latitude = parseDegreeMinute(s, 2, &s);
   d5e5e:	462a      	mov	r2, r5
   d5e60:	2102      	movs	r1, #2
   d5e62:	f7ff fe7b 	bl	d5b5c <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>
	if (s == nullptr)
   d5e66:	9b01      	ldr	r3, [sp, #4]
	s = parseTime(s);
	if (s == nullptr)
		return false;
	_isValid = (*s == 'A');
	s += 2; // Skip validity and comma
	_latitude = parseDegreeMinute(s, 2, &s);
   d5e68:	61a0      	str	r0, [r4, #24]
	if (s == nullptr)
   d5e6a:	2b00      	cmp	r3, #0
   d5e6c:	d0eb      	beq.n	d5e46 <_ZN9MicroNMEA10processRMCEPKc+0x12>
		return false;
	if (*s == ',')
   d5e6e:	781a      	ldrb	r2, [r3, #0]
   d5e70:	2a2c      	cmp	r2, #44	; 0x2c
   d5e72:	d101      	bne.n	d5e78 <_ZN9MicroNMEA10processRMCEPKc+0x44>
		++s;
   d5e74:	3301      	adds	r3, #1
   d5e76:	e004      	b.n	d5e82 <_ZN9MicroNMEA10processRMCEPKc+0x4e>
	else {
		if (*s == 'S')
   d5e78:	2a53      	cmp	r2, #83	; 0x53
			_latitude *= -1;
   d5e7a:	bf04      	itt	eq
   d5e7c:	4240      	negeq	r0, r0
   d5e7e:	61a0      	streq	r0, [r4, #24]
		s += 2; // Skip N/S and comma
   d5e80:	3302      	adds	r3, #2
   d5e82:	9301      	str	r3, [sp, #4]
	}
	_longitude = parseDegreeMinute(s, 3, &s);
   d5e84:	462a      	mov	r2, r5
   d5e86:	2103      	movs	r1, #3
   d5e88:	9801      	ldr	r0, [sp, #4]
   d5e8a:	f7ff fe67 	bl	d5b5c <_ZN9MicroNMEA17parseDegreeMinuteEPKchPS1_>
	if (s == nullptr)
   d5e8e:	9b01      	ldr	r3, [sp, #4]
	else {
		if (*s == 'S')
			_latitude *= -1;
		s += 2; // Skip N/S and comma
	}
	_longitude = parseDegreeMinute(s, 3, &s);
   d5e90:	61e0      	str	r0, [r4, #28]
	if (s == nullptr)
   d5e92:	2b00      	cmp	r3, #0
   d5e94:	d0d7      	beq.n	d5e46 <_ZN9MicroNMEA10processRMCEPKc+0x12>
		return false;
	if (*s == ',')
   d5e96:	781a      	ldrb	r2, [r3, #0]
   d5e98:	2a2c      	cmp	r2, #44	; 0x2c
   d5e9a:	d101      	bne.n	d5ea0 <_ZN9MicroNMEA10processRMCEPKc+0x6c>
		++s;
   d5e9c:	3301      	adds	r3, #1
   d5e9e:	e004      	b.n	d5eaa <_ZN9MicroNMEA10processRMCEPKc+0x76>
	else {
		if (*s == 'W')
   d5ea0:	2a57      	cmp	r2, #87	; 0x57
			_longitude *= -1;
   d5ea2:	bf04      	itt	eq
   d5ea4:	4240      	negeq	r0, r0
   d5ea6:	61e0      	streq	r0, [r4, #28]
		s += 2; // Skip E/W and comma
   d5ea8:	3302      	adds	r3, #2
   d5eaa:	9301      	str	r3, [sp, #4]
	}
	_speed = parseFloat(s, 3, &s);
   d5eac:	462a      	mov	r2, r5
   d5eae:	2103      	movs	r1, #3
   d5eb0:	9801      	ldr	r0, [sp, #4]
   d5eb2:	f7ff fdf4 	bl	d5a9e <_ZN9MicroNMEA10parseFloatEPKchPS1_>
   d5eb6:	62a0      	str	r0, [r4, #40]	; 0x28
	if (s == nullptr)
   d5eb8:	9801      	ldr	r0, [sp, #4]
   d5eba:	2800      	cmp	r0, #0
   d5ebc:	d0c3      	beq.n	d5e46 <_ZN9MicroNMEA10processRMCEPKc+0x12>
		return false;
	_course = parseFloat(s, 3, &s);
   d5ebe:	2103      	movs	r1, #3
   d5ec0:	462a      	mov	r2, r5
   d5ec2:	f7ff fdec 	bl	d5a9e <_ZN9MicroNMEA10parseFloatEPKchPS1_>
	if (s == nullptr)
   d5ec6:	9901      	ldr	r1, [sp, #4]
		s += 2; // Skip E/W and comma
	}
	_speed = parseFloat(s, 3, &s);
	if (s == nullptr)
		return false;
	_course = parseFloat(s, 3, &s);
   d5ec8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (s == nullptr)
   d5eca:	2900      	cmp	r1, #0
   d5ecc:	d0bb      	beq.n	d5e46 <_ZN9MicroNMEA10processRMCEPKc+0x12>
		return false;
	s = parseDate(s);
   d5ece:	4620      	mov	r0, r4
   d5ed0:	f7ff ff2c 	bl	d5d2c <_ZN9MicroNMEA9parseDateEPKc>
	// That's all we care about
	return true;
   d5ed4:	2001      	movs	r0, #1
}
   d5ed6:	b003      	add	sp, #12
   d5ed8:	bd30      	pop	{r4, r5, pc}
	...

000d5edc <_ZN9MicroNMEA7processEc>:
	_hundredths = 0;
}


bool MicroNMEA::process(char c)
{
   d5edc:	b570      	push	{r4, r5, r6, lr}
	if (_buffer == nullptr || _bufferLen == 0)
   d5ede:	6843      	ldr	r3, [r0, #4]
	_hundredths = 0;
}


bool MicroNMEA::process(char c)
{
   d5ee0:	4604      	mov	r4, r0
	if (_buffer == nullptr || _bufferLen == 0)
   d5ee2:	b303      	cbz	r3, d5f26 <_ZN9MicroNMEA7processEc+0x4a>
   d5ee4:	7803      	ldrb	r3, [r0, #0]
   d5ee6:	b1f3      	cbz	r3, d5f26 <_ZN9MicroNMEA7processEc+0x4a>
		return false;
	if (c == '\0' || c == '\n' || c == '\r') {
   d5ee8:	290d      	cmp	r1, #13
   d5eea:	6882      	ldr	r2, [r0, #8]
   d5eec:	d811      	bhi.n	d5f12 <_ZN9MicroNMEA7processEc+0x36>
   d5eee:	f242 4301 	movw	r3, #9217	; 0x2401
   d5ef2:	40cb      	lsrs	r3, r1
   d5ef4:	f003 0301 	and.w	r3, r3, #1
   d5ef8:	f083 0601 	eor.w	r6, r3, #1
   d5efc:	b14b      	cbz	r3, d5f12 <_ZN9MicroNMEA7processEc+0x36>
		// Terminate buffer then reset pointer
		*_ptr = '\0';
   d5efe:	7016      	strb	r6, [r2, #0]
		_ptr = _buffer;
   d5f00:	6840      	ldr	r0, [r0, #4]
   d5f02:	60a0      	str	r0, [r4, #8]

		if (*_buffer == '$' && testChecksum(_buffer)) {
   d5f04:	7803      	ldrb	r3, [r0, #0]
   d5f06:	2b24      	cmp	r3, #36	; 0x24
   d5f08:	d10f      	bne.n	d5f2a <_ZN9MicroNMEA7processEc+0x4e>
   d5f0a:	f7ff fe94 	bl	d5c36 <_ZN9MicroNMEA12testChecksumEPKc>
   d5f0e:	b9c8      	cbnz	r0, d5f44 <_ZN9MicroNMEA7processEc+0x68>
   d5f10:	e00b      	b.n	d5f2a <_ZN9MicroNMEA7processEc+0x4e>
		}
		// Return true for a complete, non-empty, sentence (even if not a valid one).
		return *_buffer != '\0'; //
	}
	else {
		*_ptr = c;
   d5f12:	7011      	strb	r1, [r2, #0]
		if (_ptr < &_buffer[_bufferLen - 1])
   d5f14:	7823      	ldrb	r3, [r4, #0]
   d5f16:	6861      	ldr	r1, [r4, #4]
   d5f18:	68a2      	ldr	r2, [r4, #8]
   d5f1a:	3b01      	subs	r3, #1
   d5f1c:	440b      	add	r3, r1
   d5f1e:	429a      	cmp	r2, r3
			++_ptr;
   d5f20:	bf3c      	itt	cc
   d5f22:	3201      	addcc	r2, #1
   d5f24:	60a2      	strcc	r2, [r4, #8]
	}

	return false;
   d5f26:	2000      	movs	r0, #0
   d5f28:	bd70      	pop	{r4, r5, r6, pc}
				return processRMC(data);
			else if (_unknownSentenceHandler)
				(*_unknownSentenceHandler)(*this);
		}
		else {
			if (_badChecksumHandler && *_buffer != '\0') // don't send empty buffers as bad checksums!
   d5f2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5f2c:	b123      	cbz	r3, d5f38 <_ZN9MicroNMEA7processEc+0x5c>
   d5f2e:	6862      	ldr	r2, [r4, #4]
   d5f30:	7812      	ldrb	r2, [r2, #0]
   d5f32:	b10a      	cbz	r2, d5f38 <_ZN9MicroNMEA7processEc+0x5c>
				(*_badChecksumHandler)(*this);
   d5f34:	4620      	mov	r0, r4
   d5f36:	4798      	blx	r3
		}
		// Return true for a complete, non-empty, sentence (even if not a valid one).
		return *_buffer != '\0'; //
   d5f38:	6863      	ldr	r3, [r4, #4]
   d5f3a:	7818      	ldrb	r0, [r3, #0]
   d5f3c:	3000      	adds	r0, #0
   d5f3e:	bf18      	it	ne
   d5f40:	2001      	movne	r0, #1
   d5f42:	bd70      	pop	{r4, r5, r6, pc}
		_ptr = _buffer;

		if (*_buffer == '$' && testChecksum(_buffer)) {
			// Valid message
			const char* data;
			if (_buffer[1] == 'G') {
   d5f44:	6860      	ldr	r0, [r4, #4]
   d5f46:	7843      	ldrb	r3, [r0, #1]
   d5f48:	2b47      	cmp	r3, #71	; 0x47
   d5f4a:	f104 050d 	add.w	r5, r4, #13
   d5f4e:	d105      	bne.n	d5f5c <_ZN9MicroNMEA7processEc+0x80>
				_talkerID = _buffer[2];
   d5f50:	7883      	ldrb	r3, [r0, #2]
   d5f52:	7323      	strb	r3, [r4, #12]
				data = parseField(&_buffer[3], &_messageID[0], sizeof(_messageID));
   d5f54:	2206      	movs	r2, #6
   d5f56:	4629      	mov	r1, r5
   d5f58:	3003      	adds	r0, #3
   d5f5a:	e003      	b.n	d5f64 <_ZN9MicroNMEA7processEc+0x88>
			}
			else {
				_talkerID = '\0';
   d5f5c:	7326      	strb	r6, [r4, #12]
				data = parseField(&_buffer[1], &_messageID[0], sizeof(_messageID));
   d5f5e:	2206      	movs	r2, #6
   d5f60:	4629      	mov	r1, r5
   d5f62:	3001      	adds	r0, #1
   d5f64:	f7ff fe18 	bl	d5b98 <_ZN9MicroNMEA10parseFieldEPKcPci>
   d5f68:	4606      	mov	r6, r0
			}

			if (data != nullptr && strcmp(&_messageID[0], "GGA") == 0)
   d5f6a:	b1a8      	cbz	r0, d5f98 <_ZN9MicroNMEA7processEc+0xbc>
   d5f6c:	490c      	ldr	r1, [pc, #48]	; (d5fa0 <_ZN9MicroNMEA7processEc+0xc4>)
   d5f6e:	4628      	mov	r0, r5
   d5f70:	f006 ffb7 	bl	dcee2 <strcmp>
   d5f74:	b928      	cbnz	r0, d5f82 <_ZN9MicroNMEA7processEc+0xa6>
				return processGGA(data);
   d5f76:	4631      	mov	r1, r6
   d5f78:	4620      	mov	r0, r4
		if (_ptr < &_buffer[_bufferLen - 1])
			++_ptr;
	}

	return false;
}
   d5f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				_talkerID = '\0';
				data = parseField(&_buffer[1], &_messageID[0], sizeof(_messageID));
			}

			if (data != nullptr && strcmp(&_messageID[0], "GGA") == 0)
				return processGGA(data);
   d5f7e:	f7ff bef5 	b.w	d5d6c <_ZN9MicroNMEA10processGGAEPKc>
			else if (data != nullptr && strcmp(&_messageID[0], "RMC") == 0)
   d5f82:	4908      	ldr	r1, [pc, #32]	; (d5fa4 <_ZN9MicroNMEA7processEc+0xc8>)
   d5f84:	4628      	mov	r0, r5
   d5f86:	f006 ffac 	bl	dcee2 <strcmp>
   d5f8a:	b928      	cbnz	r0, d5f98 <_ZN9MicroNMEA7processEc+0xbc>
				return processRMC(data);
   d5f8c:	4631      	mov	r1, r6
   d5f8e:	4620      	mov	r0, r4
		if (_ptr < &_buffer[_bufferLen - 1])
			++_ptr;
	}

	return false;
}
   d5f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			}

			if (data != nullptr && strcmp(&_messageID[0], "GGA") == 0)
				return processGGA(data);
			else if (data != nullptr && strcmp(&_messageID[0], "RMC") == 0)
				return processRMC(data);
   d5f94:	f7ff bf4e 	b.w	d5e34 <_ZN9MicroNMEA10processRMCEPKc>
			else if (_unknownSentenceHandler)
   d5f98:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d5f9a:	2b00      	cmp	r3, #0
   d5f9c:	d1ca      	bne.n	d5f34 <_ZN9MicroNMEA7processEc+0x58>
   d5f9e:	e7cb      	b.n	d5f38 <_ZN9MicroNMEA7processEc+0x5c>
   d5fa0:	000df7fd 	.word	0x000df7fd
   d5fa4:	000df801 	.word	0x000df801

000d5fa8 <_GLOBAL__sub_I__ZN9MicroNMEA9skipFieldEPKc>:
   d5fa8:	f001 bdb2 	b.w	d7b10 <HAL_Pin_Map>

000d5fac <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d5fac:	f001 bdb0 	b.w	d7b10 <HAL_Pin_Map>

000d5fb0 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d5fb0:	f001 bdae 	b.w	d7b10 <HAL_Pin_Map>

000d5fb4 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5fb4:	b510      	push	{r4, lr}
   d5fb6:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5fb8:	3024      	adds	r0, #36	; 0x24
   d5fba:	f000 ff9f 	bl	d6efc <_ZN8FatCache4syncEv>
   d5fbe:	b128      	cbz	r0, d5fcc <_ZN9FatVolume9cacheSyncEv+0x18>
   d5fc0:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5fc8:	f000 bf98 	b.w	d6efc <_ZN8FatCache4syncEv>
  }
   d5fcc:	bd10      	pop	{r4, pc}

000d5fce <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d5fce:	1e41      	subs	r1, r0, #1
   d5fd0:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d5fd4:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5fd6:	0843      	lsrs	r3, r0, #1
   d5fd8:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d5fdc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d5fe0:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5fe4:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5fe6:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5fe8:	d1f5      	bne.n	d5fd6 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d5fea:	4770      	bx	lr

000d5fec <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d5fec:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d5fee:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d5ff0:	4604      	mov	r4, r0
   d5ff2:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d5ff4:	b923      	cbnz	r3, d6000 <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d5ff6:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d5ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d5ffc:	f000 bc1f 	b.w	d683e <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d6000:	2224      	movs	r2, #36	; 0x24
   d6002:	2100      	movs	r1, #0
   d6004:	f006 ff15 	bl	dce32 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d6008:	2310      	movs	r3, #16
  m_flags = F_READ;
   d600a:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d600c:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d600e:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d6010:	68ab      	ldr	r3, [r5, #8]
   d6012:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d6014:	68eb      	ldr	r3, [r5, #12]
   d6016:	6223      	str	r3, [r4, #32]
  return true;
}
   d6018:	bd38      	pop	{r3, r4, r5, pc}

000d601a <_ZN7FatFile7getNameEPcj>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d601a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d601e:	b08b      	sub	sp, #44	; 0x2c
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d6020:	7803      	ldrb	r3, [r0, #0]
   d6022:	2500      	movs	r5, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d6024:	4680      	mov	r8, r0
   d6026:	460e      	mov	r6, r1
   d6028:	4617      	mov	r7, r2
   d602a:	f88d 5004 	strb.w	r5, [sp, #4]
   d602e:	f88d 5005 	strb.w	r5, [sp, #5]
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d6032:	b163      	cbz	r3, d604e <_ZN7FatFile7getNameEPcj+0x34>
   d6034:	2a0c      	cmp	r2, #12
   d6036:	d90a      	bls.n	d604e <_ZN7FatFile7getNameEPcj+0x34>
   d6038:	e00e      	b.n	d6058 <_ZN7FatFile7getNameEPcj+0x3e>
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
   d603a:	4641      	mov	r1, r8
   d603c:	a801      	add	r0, sp, #4
   d603e:	f7ff ffd5 	bl	d5fec <_ZN7FatFile11openClusterEPS_>
   d6042:	b120      	cbz	r0, d604e <_ZN7FatFile7getNameEPcj+0x34>
   d6044:	2401      	movs	r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d6046:	f898 3003 	ldrb.w	r3, [r8, #3]
   d604a:	42a3      	cmp	r3, r4
   d604c:	d20b      	bcs.n	d6066 <_ZN7FatFile7getNameEPcj+0x4c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
   d604e:	f04f 0900 	mov.w	r9, #0
   d6052:	f886 9000 	strb.w	r9, [r6]
  return false;
   d6056:	e055      	b.n	d6104 <_ZN7FatFile7getNameEPcj+0xea>
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6058:	78c3      	ldrb	r3, [r0, #3]
   d605a:	2b00      	cmp	r3, #0
   d605c:	d1ed      	bne.n	d603a <_ZN7FatFile7getNameEPcj+0x20>
    return getSFN(name);
   d605e:	f000 fb51 	bl	d6704 <_ZN7FatFile6getSFNEPc>
   d6062:	4681      	mov	r9, r0
   d6064:	e04e      	b.n	d6104 <_ZN7FatFile7getNameEPcj+0xea>
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d6066:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   d606a:	1b09      	subs	r1, r1, r4
   d606c:	0149      	lsls	r1, r1, #5
   d606e:	a801      	add	r0, sp, #4
   d6070:	f000 fce0 	bl	d6a34 <_ZN7FatFile7seekSetEm>
   d6074:	4681      	mov	r9, r0
   d6076:	2800      	cmp	r0, #0
   d6078:	d0e9      	beq.n	d604e <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d607a:	2100      	movs	r1, #0
   d607c:	a801      	add	r0, sp, #4
   d607e:	f000 fcbc 	bl	d69fa <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6082:	2800      	cmp	r0, #0
   d6084:	d0e3      	beq.n	d604e <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   d6086:	7ac3      	ldrb	r3, [r0, #11]
   d6088:	2b0f      	cmp	r3, #15
   d608a:	d1e0      	bne.n	d604e <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ord != (ldir->ord & 0X1F)) {
   d608c:	7803      	ldrb	r3, [r0, #0]
   d608e:	f003 031f 	and.w	r3, r3, #31
   d6092:	429c      	cmp	r4, r3
   d6094:	d1db      	bne.n	d604e <_ZN7FatFile7getNameEPcj+0x34>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6096:	1e63      	subs	r3, r4, #1
   d6098:	220d      	movs	r2, #13
   d609a:	435a      	muls	r2, r3
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d609c:	eb06 0e02 	add.w	lr, r6, r2
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d60a0:	2300      	movs	r3, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d60a2:	2b04      	cmp	r3, #4
   d60a4:	b2d9      	uxtb	r1, r3
   d60a6:	d804      	bhi.n	d60b2 <_ZN7FatFile7getNameEPcj+0x98>
    return ldir->name1[i];
   d60a8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
   d60ac:	f8b1 1001 	ldrh.w	r1, [r1, #1]
   d60b0:	e00b      	b.n	d60ca <_ZN7FatFile7getNameEPcj+0xb0>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d60b2:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d60b4:	bf95      	itete	ls
   d60b6:	f103 31ff 	addls.w	r1, r3, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d60ba:	1c59      	addhi	r1, r3, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d60bc:	eb00 0141 	addls.w	r1, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d60c0:	eb00 0141 	addhi.w	r1, r0, r1, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d60c4:	bf94      	ite	ls
   d60c6:	88c9      	ldrhls	r1, [r1, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d60c8:	8889      	ldrhhi	r1, [r1, #4]
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
   d60ca:	b161      	cbz	r1, d60e6 <_ZN7FatFile7getNameEPcj+0xcc>
   d60cc:	4297      	cmp	r7, r2
   d60ce:	d910      	bls.n	d60f2 <_ZN7FatFile7getNameEPcj+0xd8>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d60d0:	297e      	cmp	r1, #126	; 0x7e
   d60d2:	bf94      	ite	ls
   d60d4:	b2c9      	uxtbls	r1, r1
   d60d6:	213f      	movhi	r1, #63	; 0x3f
   d60d8:	f80e 1003 	strb.w	r1, [lr, r3]
   d60dc:	3301      	adds	r3, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d60de:	2b0d      	cmp	r3, #13
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d60e0:	f102 0201 	add.w	r2, r2, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d60e4:	d1dd      	bne.n	d60a2 <_ZN7FatFile7getNameEPcj+0x88>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   d60e6:	4297      	cmp	r7, r2
   d60e8:	d903      	bls.n	d60f2 <_ZN7FatFile7getNameEPcj+0xd8>
   d60ea:	7803      	ldrb	r3, [r0, #0]
   d60ec:	0659      	lsls	r1, r3, #25
    name[k] = 0;
   d60ee:	bf48      	it	mi
   d60f0:	54b5      	strbmi	r5, [r6, r2]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
   d60f2:	19f3      	adds	r3, r6, r7
   d60f4:	f803 5c01 	strb.w	r5, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d60f8:	7803      	ldrb	r3, [r0, #0]
   d60fa:	065b      	lsls	r3, r3, #25
   d60fc:	d402      	bmi.n	d6104 <_ZN7FatFile7getNameEPcj+0xea>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d60fe:	3401      	adds	r4, #1
   d6100:	b2e4      	uxtb	r4, r4
   d6102:	e7a0      	b.n	d6046 <_ZN7FatFile7getNameEPcj+0x2c>
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
   d6104:	4648      	mov	r0, r9
   d6106:	b00b      	add	sp, #44	; 0x2c
   d6108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d610c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d6110:	7803      	ldrb	r3, [r0, #0]
   d6112:	2b20      	cmp	r3, #32
   d6114:	f100 0401 	add.w	r4, r0, #1
   d6118:	d101      	bne.n	d611e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d611a:	4620      	mov	r0, r4
   d611c:	e7f8      	b.n	d6110 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d611e:	4f70      	ldr	r7, [pc, #448]	; (d62e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d6120:	6088      	str	r0, [r1, #8]
   d6122:	4605      	mov	r5, r0
   d6124:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d6126:	462e      	mov	r6, r5
   d6128:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d612c:	b30b      	cbz	r3, d6172 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d612e:	2b2f      	cmp	r3, #47	; 0x2f
   d6130:	d101      	bne.n	d6136 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d6132:	1903      	adds	r3, r0, r4
   d6134:	e017      	b.n	d6166 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6136:	2b5c      	cmp	r3, #92	; 0x5c
   d6138:	d102      	bne.n	d6140 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d613a:	2000      	movs	r0, #0
   d613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6140:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d6144:	b2e4      	uxtb	r4, r4
   d6146:	2c1d      	cmp	r4, #29
   d6148:	d803      	bhi.n	d6152 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d614a:	fa27 f404 	lsr.w	r4, r7, r4
   d614e:	07e4      	lsls	r4, r4, #31
   d6150:	d4f3      	bmi.n	d613a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d6152:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d6156:	2c3c      	cmp	r4, #60	; 0x3c
   d6158:	d0ef      	beq.n	d613a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d615a:	3b20      	subs	r3, #32
   d615c:	2b5e      	cmp	r3, #94	; 0x5e
   d615e:	d9e1      	bls.n	d6124 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d6160:	e7eb      	b.n	d613a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d6162:	2d2f      	cmp	r5, #47	; 0x2f
   d6164:	d105      	bne.n	d6172 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6166:	461e      	mov	r6, r3
   d6168:	f813 5b01 	ldrb.w	r5, [r3], #1
   d616c:	2d20      	cmp	r5, #32
   d616e:	d1f8      	bne.n	d6162 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d6170:	e7f9      	b.n	d6166 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d6172:	6016      	str	r6, [r2, #0]
   d6174:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d6176:	4298      	cmp	r0, r3
   d6178:	ebc0 0803 	rsb	r8, r0, r3
   d617c:	d009      	beq.n	d6192 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d617e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d6182:	2a2e      	cmp	r2, #46	; 0x2e
   d6184:	d0f7      	beq.n	d6176 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d6186:	2a20      	cmp	r2, #32
   d6188:	d0f5      	beq.n	d6176 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d618a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d618e:	dcd4      	bgt.n	d613a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d6190:	e001      	b.n	d6196 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d6192:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d6196:	f8c1 8004 	str.w	r8, [r1, #4]
   d619a:	f101 030c 	add.w	r3, r1, #12
   d619e:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d61a2:	2420      	movs	r4, #32
   d61a4:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d61a8:	4293      	cmp	r3, r2
   d61aa:	d1fb      	bne.n	d61a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d61ac:	4603      	mov	r3, r0
   d61ae:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d61b0:	f813 4b01 	ldrb.w	r4, [r3], #1
   d61b4:	2c2e      	cmp	r4, #46	; 0x2e
   d61b6:	d0fa      	beq.n	d61ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d61b8:	2c20      	cmp	r4, #32
   d61ba:	d0f8      	beq.n	d61ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d61bc:	fab2 f482 	clz	r4, r2
   d61c0:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d61c2:	f108 36ff 	add.w	r6, r8, #4294967295
   d61c6:	1c73      	adds	r3, r6, #1
   d61c8:	d107      	bne.n	d61da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d61ca:	2700      	movs	r7, #0
   d61cc:	f04f 0e07 	mov.w	lr, #7
   d61d0:	463d      	mov	r5, r7
   d61d2:	46ba      	mov	sl, r7
   d61d4:	f04f 0908 	mov.w	r9, #8
   d61d8:	e009      	b.n	d61ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d61da:	5d83      	ldrb	r3, [r0, r6]
   d61dc:	2b2e      	cmp	r3, #46	; 0x2e
   d61de:	d0f4      	beq.n	d61ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d61e0:	3e01      	subs	r6, #1
   d61e2:	e7f0      	b.n	d61c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d61e4:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d61e6:	2b20      	cmp	r3, #32
   d61e8:	d104      	bne.n	d61f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d61ea:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d61ec:	3201      	adds	r2, #1
   d61ee:	4542      	cmp	r2, r8
   d61f0:	dbf8      	blt.n	d61e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d61f2:	e04b      	b.n	d628c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d61f4:	2b2e      	cmp	r3, #46	; 0x2e
   d61f6:	d102      	bne.n	d61fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d61f8:	42b2      	cmp	r2, r6
   d61fa:	d1f6      	bne.n	d61ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d61fc:	e003      	b.n	d6206 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d61fe:	2b22      	cmp	r3, #34	; 0x22
   d6200:	d017      	beq.n	d6232 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d6202:	2b7c      	cmp	r3, #124	; 0x7c
   d6204:	d015      	beq.n	d6232 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d6206:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d620a:	f1bc 0f05 	cmp.w	ip, #5
   d620e:	d801      	bhi.n	d6214 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6210:	2b2d      	cmp	r3, #45	; 0x2d
   d6212:	d10e      	bne.n	d6232 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d6214:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6218:	f1bc 0f05 	cmp.w	ip, #5
   d621c:	d909      	bls.n	d6232 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d621e:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d6222:	f1bc 0f02 	cmp.w	ip, #2
   d6226:	d904      	bls.n	d6232 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d6228:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d622c:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d6230:	d902      	bls.n	d6238 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d6232:	42b2      	cmp	r2, r6
   d6234:	d10e      	bne.n	d6254 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d6236:	e049      	b.n	d62cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6238:	42b2      	cmp	r2, r6
   d623a:	d047      	beq.n	d62cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d623c:	4575      	cmp	r5, lr
   d623e:	d821      	bhi.n	d6284 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d6240:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6244:	f1bc 0f19 	cmp.w	ip, #25
   d6248:	d808      	bhi.n	d625c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d624a:	3b20      	subs	r3, #32
   d624c:	b2db      	uxtb	r3, r3
        lc |= bit;
   d624e:	ea49 0707 	orr.w	r7, r9, r7
   d6252:	e00a      	b.n	d626a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6254:	4575      	cmp	r5, lr
   d6256:	d815      	bhi.n	d6284 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d6258:	2400      	movs	r4, #0
      c = '_';
   d625a:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d625c:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d6260:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6264:	bf98      	it	ls
   d6266:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d626a:	f105 0c01 	add.w	ip, r5, #1
   d626e:	fa5f fc8c 	uxtb.w	ip, ip
   d6272:	440d      	add	r5, r1
      if (i < 7) {
   d6274:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d6278:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d627a:	d801      	bhi.n	d6280 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d627c:	f881 c00c 	strb.w	ip, [r1, #12]
   d6280:	4665      	mov	r5, ip
   d6282:	e7b3      	b.n	d61ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6284:	f1be 0f0a 	cmp.w	lr, #10
   d6288:	d117      	bne.n	d62ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d628a:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d628c:	7b4b      	ldrb	r3, [r1, #13]
   d628e:	2b20      	cmp	r3, #32
   d6290:	f43f af53 	beq.w	d613a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d6294:	b13c      	cbz	r4, d62a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6296:	ea1a 0f07 	tst.w	sl, r7
   d629a:	bf18      	it	ne
   d629c:	2702      	movne	r7, #2
   d629e:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d62a0:	2001      	movs	r0, #1
   d62a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d62a6:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d62a8:	2001      	movs	r0, #1
   d62aa:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d62ac:	4419      	add	r1, r3
   d62ae:	237e      	movs	r3, #126	; 0x7e
   d62b0:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d62b2:	2331      	movs	r3, #49	; 0x31
   d62b4:	738b      	strb	r3, [r1, #14]
   d62b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d62ba:	42b2      	cmp	r2, r6
   d62bc:	dce5      	bgt.n	d628a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d62be:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d62c0:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d62c4:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d62c6:	f04f 0910 	mov.w	r9, #16
   d62ca:	e78e      	b.n	d61ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d62cc:	f1be 0f0a 	cmp.w	lr, #10
   d62d0:	d0db      	beq.n	d628a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d62d2:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d62d4:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d62d8:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d62da:	f04f 0910 	mov.w	r9, #16
   d62de:	e785      	b.n	d61ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d62e0:	31000101 	.word	0x31000101

000d62e4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d62e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d62e8:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d62ec:	4606      	mov	r6, r0
   d62ee:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d62f0:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d62f2:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d62f4:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d62f8:	6869      	ldr	r1, [r5, #4]
   d62fa:	68aa      	ldr	r2, [r5, #8]
   d62fc:	1863      	adds	r3, r4, r1
   d62fe:	b29b      	uxth	r3, r3
   d6300:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d6302:	4291      	cmp	r1, r2
   d6304:	d006      	beq.n	d6314 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d6306:	f812 0b01 	ldrb.w	r0, [r2], #1
   d630a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d630e:	4043      	eors	r3, r0
   d6310:	b29b      	uxth	r3, r3
   d6312:	e7f6      	b.n	d6302 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d6314:	f1b9 0f03 	cmp.w	r9, #3
   d6318:	bf28      	it	cs
   d631a:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d631e:	f109 0204 	add.w	r2, r9, #4
   d6322:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6324:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6328:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d632a:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d632c:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d632e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6330:	bf94      	ite	ls
   d6332:	3130      	addls	r1, #48	; 0x30
   d6334:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6336:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6338:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d633a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d633e:	d3f1      	bcc.n	d6324 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6340:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d6344:	2100      	movs	r1, #0
   d6346:	735f      	strb	r7, [r3, #13]
   d6348:	4630      	mov	r0, r6
   d634a:	f000 fb73 	bl	d6a34 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d634e:	2101      	movs	r1, #1
   d6350:	4630      	mov	r0, r6
   d6352:	f000 fb52 	bl	d69fa <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6356:	4601      	mov	r1, r0
   d6358:	b928      	cbnz	r0, d6366 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d635a:	7870      	ldrb	r0, [r6, #1]
   d635c:	fab0 f080 	clz	r0, r0
   d6360:	0940      	lsrs	r0, r0, #5
   d6362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6366:	7803      	ldrb	r3, [r0, #0]
   d6368:	b14b      	cbz	r3, d637e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d636a:	7ac3      	ldrb	r3, [r0, #11]
   d636c:	071b      	lsls	r3, r3, #28
   d636e:	d4ee      	bmi.n	d634e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6370:	220b      	movs	r2, #11
   d6372:	4640      	mov	r0, r8
   d6374:	f006 fd28 	bl	dcdc8 <memcmp>
   d6378:	2800      	cmp	r0, #0
   d637a:	d1e8      	bne.n	d634e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d637c:	e002      	b.n	d6384 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d637e:	2001      	movs	r0, #1
   d6380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6384:	3401      	adds	r4, #1
   d6386:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d6388:	2c64      	cmp	r4, #100	; 0x64
   d638a:	d1b5      	bne.n	d62f8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d638c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6390 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6394:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6396:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6398:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d639a:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d639e:	9005      	str	r0, [sp, #20]
   d63a0:	460e      	mov	r6, r1
   d63a2:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d63a4:	d101      	bne.n	d63aa <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d63a6:	2000      	movs	r0, #0
   d63a8:	e1a0      	b.n	d66ec <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d63aa:	9b05      	ldr	r3, [sp, #20]
   d63ac:	781b      	ldrb	r3, [r3, #0]
   d63ae:	2b00      	cmp	r3, #0
   d63b0:	d1f9      	bne.n	d63a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d63b2:	6853      	ldr	r3, [r2, #4]
   d63b4:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d63b6:	7813      	ldrb	r3, [r2, #0]
   d63b8:	079b      	lsls	r3, r3, #30
   d63ba:	f000 818d 	beq.w	d66d8 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d63be:	9b02      	ldr	r3, [sp, #8]
   d63c0:	270d      	movs	r7, #13
   d63c2:	330c      	adds	r3, #12
   d63c4:	fbb3 f7f7 	udiv	r7, r3, r7
   d63c8:	3701      	adds	r7, #1
   d63ca:	b2ff      	uxtb	r7, r7
   d63cc:	2100      	movs	r1, #0
   d63ce:	4630      	mov	r0, r6
   d63d0:	f000 fb30 	bl	d6a34 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d63d4:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d63d8:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d63dc:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d63e0:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d63e2:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d63e4:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d63e6:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d63ea:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d63ec:	6972      	ldr	r2, [r6, #20]
   d63ee:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d63f0:	2101      	movs	r1, #1
   d63f2:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d63f4:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d63f8:	f000 faff 	bl	d69fa <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d63fc:	9b07      	ldr	r3, [sp, #28]
   d63fe:	b920      	cbnz	r0, d640a <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d6400:	7873      	ldrb	r3, [r6, #1]
   d6402:	2b00      	cmp	r3, #0
   d6404:	f000 8090 	beq.w	d6528 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d6408:	e7cd      	b.n	d63a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d640a:	7802      	ldrb	r2, [r0, #0]
   d640c:	2ae5      	cmp	r2, #229	; 0xe5
   d640e:	d000      	beq.n	d6412 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d6410:	b942      	cbnz	r2, d6424 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6412:	2c00      	cmp	r4, #0
   d6414:	bf08      	it	eq
   d6416:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d6418:	42bc      	cmp	r4, r7
        freeFound++;
   d641a:	bf3c      	itt	cc
   d641c:	3401      	addcc	r4, #1
   d641e:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6420:	b922      	cbnz	r2, d642c <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d6422:	e081      	b.n	d6528 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d6424:	42bc      	cmp	r4, r7
   d6426:	bf38      	it	cc
   d6428:	2400      	movcc	r4, #0
   d642a:	e003      	b.n	d6434 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d642c:	2ae5      	cmp	r2, #229	; 0xe5
   d642e:	d101      	bne.n	d6434 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d6430:	2500      	movs	r5, #0
   d6432:	e7db      	b.n	d63ec <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6434:	2a2e      	cmp	r2, #46	; 0x2e
   d6436:	d0fb      	beq.n	d6430 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6438:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d643a:	290f      	cmp	r1, #15
   d643c:	d152      	bne.n	d64e4 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d643e:	b93d      	cbnz	r5, d6450 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d6440:	0651      	lsls	r1, r2, #25
   d6442:	d5d3      	bpl.n	d63ec <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d6444:	7b43      	ldrb	r3, [r0, #13]
   d6446:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d6448:	f002 051f 	and.w	r5, r2, #31
   d644c:	462b      	mov	r3, r5
   d644e:	e007      	b.n	d6460 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6450:	3b01      	subs	r3, #1
   d6452:	b2db      	uxtb	r3, r3
   d6454:	429a      	cmp	r2, r3
   d6456:	d1eb      	bne.n	d6430 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6458:	7b42      	ldrb	r2, [r0, #13]
   d645a:	9903      	ldr	r1, [sp, #12]
   d645c:	4291      	cmp	r1, r2
   d645e:	d1e7      	bne.n	d6430 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d6460:	1e5a      	subs	r2, r3, #1
   d6462:	f04f 0c0d 	mov.w	ip, #13
   d6466:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d646a:	9a02      	ldr	r2, [sp, #8]
   d646c:	4562      	cmp	r2, ip
   d646e:	d9df      	bls.n	d6430 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6470:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d6474:	f1be 0f04 	cmp.w	lr, #4
   d6478:	fa5f f28e 	uxtb.w	r2, lr
   d647c:	d804      	bhi.n	d6488 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d647e:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d6482:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d6486:	e00c      	b.n	d64a2 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6488:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d648a:	bf95      	itete	ls
   d648c:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6490:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6494:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6498:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d649c:	bf94      	ite	ls
   d649e:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d64a0:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d64a2:	9902      	ldr	r1, [sp, #8]
   d64a4:	4561      	cmp	r1, ip
   d64a6:	d103      	bne.n	d64b0 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d64a8:	2a00      	cmp	r2, #0
   d64aa:	bf18      	it	ne
   d64ac:	2500      	movne	r5, #0
   d64ae:	e79d      	b.n	d63ec <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d64b0:	2aff      	cmp	r2, #255	; 0xff
   d64b2:	d8bd      	bhi.n	d6430 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d64b4:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d64b6:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d64ba:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d64bc:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d64c0:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d64c4:	bf98      	it	ls
   d64c6:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d64c8:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d64cc:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d64d0:	bf98      	it	ls
   d64d2:	b2d2      	uxtbls	r2, r2
   d64d4:	f1bc 0f19 	cmp.w	ip, #25
   d64d8:	bf9c      	itt	ls
   d64da:	3120      	addls	r1, #32
   d64dc:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d64de:	4291      	cmp	r1, r2
   d64e0:	d1a6      	bne.n	d6430 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d64e2:	e0fb      	b.n	d66dc <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d64e4:	0709      	lsls	r1, r1, #28
   d64e6:	d4a3      	bmi.n	d6430 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d64e8:	b14d      	cbz	r5, d64fe <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d64ea:	2b01      	cmp	r3, #1
   d64ec:	f47f af5b 	bne.w	d63a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d64f0:	f7ff fd6d 	bl	d5fce <_ZN7FatFile11lfnChecksumEPh>
   d64f4:	9b03      	ldr	r3, [sp, #12]
   d64f6:	4283      	cmp	r3, r0
   d64f8:	f47f af55 	bne.w	d63a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d64fc:	e00f      	b.n	d651e <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d64fe:	220b      	movs	r2, #11
   d6500:	9906      	ldr	r1, [sp, #24]
   d6502:	9307      	str	r3, [sp, #28]
   d6504:	f006 fc60 	bl	dcdc8 <memcmp>
   d6508:	9b07      	ldr	r3, [sp, #28]
   d650a:	2800      	cmp	r0, #0
   d650c:	f47f af6e 	bne.w	d63ec <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6510:	f899 2000 	ldrb.w	r2, [r9]
   d6514:	07d2      	lsls	r2, r2, #31
   d6516:	d502      	bpl.n	d651e <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d6518:	2201      	movs	r2, #1
   d651a:	9204      	str	r2, [sp, #16]
   d651c:	e766      	b.n	d63ec <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d651e:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d6522:	f000 80d1 	beq.w	d66c8 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d6526:	e73e      	b.n	d63a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6528:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d652c:	f43f af3b 	beq.w	d63a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6530:	f00b 0303 	and.w	r3, fp, #3
   d6534:	3b01      	subs	r3, #1
   d6536:	2b01      	cmp	r3, #1
   d6538:	f63f af35 	bhi.w	d63a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d653c:	2c00      	cmp	r4, #0
   d653e:	bf08      	it	eq
   d6540:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6542:	42bc      	cmp	r4, r7
   d6544:	d302      	bcc.n	d654c <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d6546:	9b04      	ldr	r3, [sp, #16]
   d6548:	b9cb      	cbnz	r3, d657e <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d654a:	e01f      	b.n	d658c <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d654c:	2100      	movs	r1, #0
   d654e:	4630      	mov	r0, r6
   d6550:	f000 fa53 	bl	d69fa <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6554:	b910      	cbnz	r0, d655c <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d6556:	7873      	ldrb	r3, [r6, #1]
   d6558:	b15b      	cbz	r3, d6572 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d655a:	e724      	b.n	d63a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d655c:	3401      	adds	r4, #1
   d655e:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6560:	e7ef      	b.n	d6542 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d6562:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d6564:	791b      	ldrb	r3, [r3, #4]
   d6566:	2b01      	cmp	r3, #1
   d6568:	d8ed      	bhi.n	d6546 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d656a:	3410      	adds	r4, #16
   d656c:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d656e:	42a7      	cmp	r7, r4
   d6570:	d9e9      	bls.n	d6546 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d6572:	4630      	mov	r0, r6
   d6574:	f000 f8ea 	bl	d674c <_ZN7FatFile13addDirClusterEv>
   d6578:	2800      	cmp	r0, #0
   d657a:	d1f2      	bne.n	d6562 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d657c:	e713      	b.n	d63a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d657e:	4649      	mov	r1, r9
   d6580:	4630      	mov	r0, r6
   d6582:	f7ff feaf 	bl	d62e4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d6586:	2800      	cmp	r0, #0
   d6588:	f43f af0d 	beq.w	d63a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d658c:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d6590:	4630      	mov	r0, r6
   d6592:	f000 fa4f 	bl	d6a34 <_ZN7FatFile7seekSetEm>
   d6596:	2800      	cmp	r0, #0
   d6598:	f43f af05 	beq.w	d63a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d659c:	1e7d      	subs	r5, r7, #1
   d659e:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d65a0:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d65a2:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d65a6:	f04f 080f 	mov.w	r8, #15
   d65aa:	e041      	b.n	d6630 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d65ac:	2100      	movs	r1, #0
   d65ae:	4630      	mov	r0, r6
   d65b0:	f000 fa23 	bl	d69fa <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d65b4:	4607      	mov	r7, r0
   d65b6:	2800      	cmp	r0, #0
   d65b8:	f43f aef5 	beq.w	d63a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d65bc:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d65be:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d65c2:	42ac      	cmp	r4, r5
   d65c4:	f043 0301 	orr.w	r3, r3, #1
   d65c8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d65cc:	bf0c      	ite	eq
   d65ce:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d65d2:	4622      	movne	r2, r4
   d65d4:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d65d6:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d65da:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d65de:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d65e2:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d65e4:	f7ff fcf3 	bl	d5fce <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d65e8:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d65ea:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d65ec:	f887 a01a 	strb.w	sl, [r7, #26]
   d65f0:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d65f4:	f002 021f 	and.w	r2, r2, #31
   d65f8:	230d      	movs	r3, #13
   d65fa:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d65fc:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6600:	435a      	muls	r2, r3
   d6602:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6604:	9902      	ldr	r1, [sp, #8]
   d6606:	4291      	cmp	r1, r2
   d6608:	d915      	bls.n	d6636 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d660a:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d660e:	2b04      	cmp	r3, #4
   d6610:	fa5f fc83 	uxtb.w	ip, r3
   d6614:	f103 0001 	add.w	r0, r3, #1
   d6618:	d813      	bhi.n	d6642 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d661a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d661e:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d6622:	280d      	cmp	r0, #13
   d6624:	f102 0201 	add.w	r2, r2, #1
   d6628:	4603      	mov	r3, r0
   d662a:	d1eb      	bne.n	d6604 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d662c:	3c01      	subs	r4, #1
   d662e:	b2e4      	uxtb	r4, r4
   d6630:	2c00      	cmp	r4, #0
   d6632:	d1bb      	bne.n	d65ac <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d6634:	e00e      	b.n	d6654 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6636:	bf14      	ite	ne
   d6638:	f04f 31ff 	movne.w	r1, #4294967295
   d663c:	2100      	moveq	r1, #0
   d663e:	b289      	uxth	r1, r1
   d6640:	e7e5      	b.n	d660e <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6642:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d6646:	bf94      	ite	ls
   d6648:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d664c:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d6650:	8099      	strh	r1, [r3, #4]
   d6652:	e7e6      	b.n	d6622 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6654:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d6656:	4621      	mov	r1, r4
   d6658:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d665a:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d665e:	f000 f9cc 	bl	d69fa <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d6662:	4607      	mov	r7, r0
   d6664:	2800      	cmp	r0, #0
   d6666:	f43f ae9e 	beq.w	d63a6 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d666a:	2220      	movs	r2, #32
   d666c:	4621      	mov	r1, r4
   d666e:	f006 fbe0 	bl	dce32 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d6672:	464b      	mov	r3, r9
   d6674:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6678:	603a      	str	r2, [r7, #0]
   d667a:	685a      	ldr	r2, [r3, #4]
   d667c:	607a      	str	r2, [r7, #4]
   d667e:	891a      	ldrh	r2, [r3, #8]
   d6680:	813a      	strh	r2, [r7, #8]
   d6682:	7a9b      	ldrb	r3, [r3, #10]
   d6684:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d6686:	f899 3000 	ldrb.w	r3, [r9]
   d668a:	f003 0318 	and.w	r3, r3, #24
   d668e:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d6690:	4b18      	ldr	r3, [pc, #96]	; (d66f4 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d6692:	681b      	ldr	r3, [r3, #0]
   d6694:	b12b      	cbz	r3, d66a2 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d6696:	f107 010e 	add.w	r1, r7, #14
   d669a:	f107 0010 	add.w	r0, r7, #16
   d669e:	4798      	blx	r3
   d66a0:	e006      	b.n	d66b0 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d66a2:	2321      	movs	r3, #33	; 0x21
   d66a4:	743b      	strb	r3, [r7, #16]
   d66a6:	2328      	movs	r3, #40	; 0x28
   d66a8:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d66aa:	2308      	movs	r3, #8
   d66ac:	73bc      	strb	r4, [r7, #14]
   d66ae:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d66b0:	8a3b      	ldrh	r3, [r7, #16]
   d66b2:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d66b4:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d66b6:	89fb      	ldrh	r3, [r7, #14]
   d66b8:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d66ba:	68b2      	ldr	r2, [r6, #8]
   d66bc:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d66c0:	f043 0301 	orr.w	r3, r3, #1
   d66c4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d66c8:	9500      	str	r5, [sp, #0]
   d66ca:	465b      	mov	r3, fp
   d66cc:	4652      	mov	r2, sl
   d66ce:	4631      	mov	r1, r6
   d66d0:	9805      	ldr	r0, [sp, #20]
   d66d2:	f000 f9f8 	bl	d6ac6 <_ZN7FatFile15openCachedEntryEPS_tih>
   d66d6:	e009      	b.n	d66ec <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d66d8:	2701      	movs	r7, #1
   d66da:	e677      	b.n	d63cc <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d66dc:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d66e0:	f1be 0f0d 	cmp.w	lr, #13
   d66e4:	f43f ae82 	beq.w	d63ec <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d66e8:	46d4      	mov	ip, sl
   d66ea:	e6c3      	b.n	d6474 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d66ec:	b009      	add	sp, #36	; 0x24
   d66ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d66f2:	bf00      	nop
   d66f4:	2003e310 	.word	0x2003e310

000d66f8 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d66f8:	f001 ba0a 	b.w	d7b10 <HAL_Pin_Map>

000d66fc <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d66fc:	f001 ba08 	b.w	d7b10 <HAL_Pin_Map>

000d6700 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d6700:	f001 ba06 	b.w	d7b10 <HAL_Pin_Map>

000d6704 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d6704:	b510      	push	{r4, lr}
   d6706:	460c      	mov	r4, r1
   d6708:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d670a:	b909      	cbnz	r1, d6710 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d670c:	2000      	movs	r0, #0
   d670e:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d6710:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d6714:	d004      	beq.n	d6720 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d6716:	232f      	movs	r3, #47	; 0x2f
   d6718:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d671a:	2300      	movs	r3, #0
   d671c:	7063      	strb	r3, [r4, #1]
   d671e:	e006      	b.n	d672e <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d6720:	f000 f854 	bl	d67cc <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6724:	2800      	cmp	r0, #0
   d6726:	d0f1      	beq.n	d670c <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d6728:	4621      	mov	r1, r4
   d672a:	f000 f85e 	bl	d67ea <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d672e:	2001      	movs	r0, #1

fail:
  return false;
}
   d6730:	bd10      	pop	{r4, pc}

000d6732 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d6732:	f001 b9ed 	b.w	d7b10 <HAL_Pin_Map>

000d6736 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6736:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6738:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d673a:	f043 0304 	orr.w	r3, r3, #4
   d673e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6740:	f100 0210 	add.w	r2, r0, #16
   d6744:	6880      	ldr	r0, [r0, #8]
   d6746:	f000 bc8f 	b.w	d7068 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d674c <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d674c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6750:	7803      	ldrb	r3, [r0, #0]
   d6752:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6756:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6758:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d675c:	b10b      	cbz	r3, d6762 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d675e:	2600      	movs	r6, #0
   d6760:	e02e      	b.n	d67c0 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d6762:	6942      	ldr	r2, [r0, #20]
   d6764:	4b18      	ldr	r3, [pc, #96]	; (d67c8 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d6766:	429a      	cmp	r2, r3
   d6768:	d8f9      	bhi.n	d675e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d676a:	f7ff ffe4 	bl	d6736 <_ZN7FatFile10addClusterEv>
   d676e:	4606      	mov	r6, r0
   d6770:	2800      	cmp	r0, #0
   d6772:	d0f4      	beq.n	d675e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d6774:	6921      	ldr	r1, [r4, #16]
   d6776:	68a0      	ldr	r0, [r4, #8]
   d6778:	f000 fc0b 	bl	d6f92 <_ZNK9FatVolume17clusterFirstBlockEm>
   d677c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d677e:	68a0      	ldr	r0, [r4, #8]
   d6780:	2205      	movs	r2, #5
   d6782:	4639      	mov	r1, r7
   d6784:	3024      	adds	r0, #36	; 0x24
   d6786:	f000 fbe0 	bl	d6f4a <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d678a:	4680      	mov	r8, r0
   d678c:	2800      	cmp	r0, #0
   d678e:	d0e6      	beq.n	d675e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d6790:	4629      	mov	r1, r5
   d6792:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6796:	f006 fb4c 	bl	dce32 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d679a:	2501      	movs	r5, #1
   d679c:	68a3      	ldr	r3, [r4, #8]
   d679e:	791a      	ldrb	r2, [r3, #4]
   d67a0:	42aa      	cmp	r2, r5
   d67a2:	d909      	bls.n	d67b8 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d67a4:	4642      	mov	r2, r8
   d67a6:	19e9      	adds	r1, r5, r7
   d67a8:	6818      	ldr	r0, [r3, #0]
   d67aa:	f000 ff4b 	bl	d7644 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d67ae:	2800      	cmp	r0, #0
   d67b0:	d0d5      	beq.n	d675e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d67b2:	3501      	adds	r5, #1
   d67b4:	b2ed      	uxtb	r5, r5
   d67b6:	e7f1      	b.n	d679c <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d67b8:	6963      	ldr	r3, [r4, #20]
   d67ba:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d67be:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d67c0:	4630      	mov	r0, r6
   d67c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d67c6:	bf00      	nop
   d67c8:	001ffdff 	.word	0x001ffdff

000d67cc <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d67cc:	b510      	push	{r4, lr}
   d67ce:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d67d0:	6880      	ldr	r0, [r0, #8]
   d67d2:	460a      	mov	r2, r1
   d67d4:	3024      	adds	r0, #36	; 0x24
   d67d6:	69a1      	ldr	r1, [r4, #24]
   d67d8:	f000 fbb7 	bl	d6f4a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d67dc:	b120      	cbz	r0, d67e8 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d67de:	88a3      	ldrh	r3, [r4, #4]
   d67e0:	f003 030f 	and.w	r3, r3, #15
   d67e4:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d67e8:	bd10      	pop	{r4, pc}

000d67ea <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d67ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   d67ec:	2400      	movs	r4, #0
   d67ee:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d67f0:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d67f2:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d67f4:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d67f6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d67fa:	2a20      	cmp	r2, #32
   d67fc:	d018      	beq.n	d6830 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d67fe:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d6800:	bf02      	ittt	eq
   d6802:	54cf      	strbeq	r7, [r1, r3]
   d6804:	1c5a      	addeq	r2, r3, #1
   d6806:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d6808:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d680a:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d680e:	bf08      	it	eq
   d6810:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d6812:	f1be 0f19 	cmp.w	lr, #25
   d6816:	d806      	bhi.n	d6826 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d6818:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d681c:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d6820:	bf1c      	itt	ne
   d6822:	3220      	addne	r2, #32
   d6824:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d6826:	f103 0e01 	add.w	lr, r3, #1
   d682a:	54ca      	strb	r2, [r1, r3]
   d682c:	fa5f f38e 	uxtb.w	r3, lr
   d6830:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d6832:	2c0b      	cmp	r4, #11
   d6834:	d1df      	bne.n	d67f6 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d6836:	2200      	movs	r2, #0
   d6838:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d683a:	4618      	mov	r0, r3
   d683c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d683e <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d683e:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d6840:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6842:	4605      	mov	r5, r0
   d6844:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d6846:	b984      	cbnz	r4, d686a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d6848:	2224      	movs	r2, #36	; 0x24
   d684a:	4621      	mov	r1, r4
   d684c:	f006 faf1 	bl	dce32 <memset>

  m_vol = vol;
   d6850:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d6852:	79f3      	ldrb	r3, [r6, #7]
   d6854:	2b10      	cmp	r3, #16
   d6856:	d003      	beq.n	d6860 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d6858:	2b20      	cmp	r3, #32
   d685a:	d106      	bne.n	d686a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d685c:	2340      	movs	r3, #64	; 0x40
   d685e:	e000      	b.n	d6862 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d6860:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d6862:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d6864:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d6866:	70a8      	strb	r0, [r5, #2]
   d6868:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d686a:	2000      	movs	r0, #0
   d686c:	bd70      	pop	{r4, r5, r6, pc}

000d686e <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d686e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6872:	7803      	ldrb	r3, [r0, #0]
   d6874:	4604      	mov	r4, r0
   d6876:	4689      	mov	r9, r1
   d6878:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d687a:	b14b      	cbz	r3, d6890 <_ZN7FatFile4readEPvj+0x22>
   d687c:	7882      	ldrb	r2, [r0, #2]
   d687e:	07d1      	lsls	r1, r2, #31
   d6880:	d506      	bpl.n	d6890 <_ZN7FatFile4readEPvj+0x22>
   d6882:	e00c      	b.n	d689e <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6884:	465a      	mov	r2, fp
   d6886:	6921      	ldr	r1, [r4, #16]
   d6888:	f000 fb89 	bl	d6f9e <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d688c:	2800      	cmp	r0, #0
   d688e:	da3d      	bge.n	d690c <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d6890:	7863      	ldrb	r3, [r4, #1]
   d6892:	f043 0302 	orr.w	r3, r3, #2
   d6896:	7063      	strb	r3, [r4, #1]
  return -1;
   d6898:	f04f 30ff 	mov.w	r0, #4294967295
   d689c:	e097      	b.n	d69ce <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d689e:	071a      	lsls	r2, r3, #28
   d68a0:	d503      	bpl.n	d68aa <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d68a2:	69e3      	ldr	r3, [r4, #28]
   d68a4:	6962      	ldr	r2, [r4, #20]
   d68a6:	1a9b      	subs	r3, r3, r2
   d68a8:	e007      	b.n	d68ba <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d68aa:	069a      	lsls	r2, r3, #26
   d68ac:	d508      	bpl.n	d68c0 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d68ae:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d68b0:	891a      	ldrh	r2, [r3, #8]
   d68b2:	6963      	ldr	r3, [r4, #20]
   d68b4:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d68b8:	b29b      	uxth	r3, r3
   d68ba:	429d      	cmp	r5, r3
   d68bc:	bf28      	it	cs
   d68be:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d68c0:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d68c2:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d68c6:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d68ca:	2e00      	cmp	r6, #0
   d68cc:	d035      	beq.n	d693a <_ZN7FatFile4readEPvj+0xcc>
   d68ce:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d68d0:	6963      	ldr	r3, [r4, #20]
   d68d2:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d68d4:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d68d8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d68dc:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d68e0:	d002      	beq.n	d68e8 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d68e2:	6a03      	ldr	r3, [r0, #32]
   d68e4:	4419      	add	r1, r3
   d68e6:	e01d      	b.n	d6924 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d68e8:	f890 8005 	ldrb.w	r8, [r0, #5]
   d68ec:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d68f0:	f1ba 0f00 	cmp.w	sl, #0
   d68f4:	d110      	bne.n	d6918 <_ZN7FatFile4readEPvj+0xaa>
   d68f6:	f1b8 0f00 	cmp.w	r8, #0
   d68fa:	d10d      	bne.n	d6918 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d68fc:	2b00      	cmp	r3, #0
   d68fe:	d1c1      	bne.n	d6884 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6900:	0653      	lsls	r3, r2, #25
   d6902:	bf4c      	ite	mi
   d6904:	6a03      	ldrmi	r3, [r0, #32]
   d6906:	6a23      	ldrpl	r3, [r4, #32]
   d6908:	6123      	str	r3, [r4, #16]
   d690a:	e005      	b.n	d6918 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d690c:	d104      	bne.n	d6918 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d690e:	7823      	ldrb	r3, [r4, #0]
   d6910:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6914:	d111      	bne.n	d693a <_ZN7FatFile4readEPvj+0xcc>
   d6916:	e7bb      	b.n	d6890 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6918:	6921      	ldr	r1, [r4, #16]
   d691a:	68a0      	ldr	r0, [r4, #8]
   d691c:	f000 fb39 	bl	d6f92 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6920:	eb08 0100 	add.w	r1, r8, r0
   d6924:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d6926:	f1ba 0f00 	cmp.w	sl, #0
   d692a:	d135      	bne.n	d6998 <_ZN7FatFile4readEPvj+0x12a>
   d692c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6930:	d332      	bcc.n	d6998 <_ZN7FatFile4readEPvj+0x12a>
   d6932:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6934:	4299      	cmp	r1, r3
   d6936:	d102      	bne.n	d693e <_ZN7FatFile4readEPvj+0xd0>
   d6938:	e02e      	b.n	d6998 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d693a:	1ba8      	subs	r0, r5, r6
   d693c:	e047      	b.n	d69ce <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d693e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6942:	d31b      	bcc.n	d697c <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d6944:	7822      	ldrb	r2, [r4, #0]
   d6946:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d6948:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d694c:	d406      	bmi.n	d695c <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d694e:	7902      	ldrb	r2, [r0, #4]
   d6950:	ebc8 0202 	rsb	r2, r8, r2
   d6954:	b2d2      	uxtb	r2, r2
   d6956:	4592      	cmp	sl, r2
   d6958:	bf28      	it	cs
   d695a:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d695c:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d695e:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6962:	d207      	bcs.n	d6974 <_ZN7FatFile4readEPvj+0x106>
   d6964:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d6966:	4653      	mov	r3, sl
   d6968:	464a      	mov	r2, r9
   d696a:	6800      	ldr	r0, [r0, #0]
   d696c:	f000 fe28 	bl	d75c0 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d6970:	b960      	cbnz	r0, d698c <_ZN7FatFile4readEPvj+0x11e>
   d6972:	e78d      	b.n	d6890 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6974:	4453      	add	r3, sl
   d6976:	4299      	cmp	r1, r3
   d6978:	d321      	bcc.n	d69be <_ZN7FatFile4readEPvj+0x150>
   d697a:	e7f3      	b.n	d6964 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d697c:	464a      	mov	r2, r9
   d697e:	6800      	ldr	r0, [r0, #0]
   d6980:	f000 fdd6 	bl	d7530 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d6984:	2800      	cmp	r0, #0
   d6986:	d083      	beq.n	d6890 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d6988:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d698c:	6963      	ldr	r3, [r4, #20]
   d698e:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d6990:	44b9      	add	r9, r7
    m_curPosition += n;
   d6992:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d6994:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d6996:	e798      	b.n	d68ca <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6998:	2200      	movs	r2, #0
   d699a:	3024      	adds	r0, #36	; 0x24
   d699c:	f000 fad5 	bl	d6f4a <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d69a0:	2800      	cmp	r0, #0
   d69a2:	f43f af75 	beq.w	d6890 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d69a6:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d69aa:	42b7      	cmp	r7, r6
   d69ac:	bf28      	it	cs
   d69ae:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d69b0:	eb00 010a 	add.w	r1, r0, sl
   d69b4:	463a      	mov	r2, r7
   d69b6:	4648      	mov	r0, r9
   d69b8:	f006 fa15 	bl	dcde6 <memcpy>
   d69bc:	e7e6      	b.n	d698c <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d69be:	3024      	adds	r0, #36	; 0x24
   d69c0:	9101      	str	r1, [sp, #4]
   d69c2:	f000 fa9b 	bl	d6efc <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d69c6:	9901      	ldr	r1, [sp, #4]
   d69c8:	2800      	cmp	r0, #0
   d69ca:	d1cb      	bne.n	d6964 <_ZN7FatFile4readEPvj+0xf6>
   d69cc:	e760      	b.n	d6890 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d69ce:	b003      	add	sp, #12
   d69d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d69d4 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d69d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d69d6:	2201      	movs	r2, #1
   d69d8:	f10d 0107 	add.w	r1, sp, #7
   d69dc:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d69de:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d69e0:	6905      	ldr	r5, [r0, #16]
   d69e2:	f7ff ff44 	bl	d686e <_ZN7FatFile4readEPvj>
   d69e6:	2801      	cmp	r0, #1
   d69e8:	bf05      	ittet	eq
   d69ea:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d69ee:	6166      	streq	r6, [r4, #20]
   d69f0:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d69f4:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d69f6:	b002      	add	sp, #8
   d69f8:	bd70      	pop	{r4, r5, r6, pc}

000d69fa <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d69fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d69fc:	6943      	ldr	r3, [r0, #20]
   d69fe:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6a02:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d6a04:	b105      	cbz	r5, d6a08 <_ZN7FatFile12readDirCacheEb+0xe>
   d6a06:	b969      	cbnz	r1, d6a24 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d6a08:	2201      	movs	r2, #1
   d6a0a:	f10d 0107 	add.w	r1, sp, #7
   d6a0e:	4620      	mov	r0, r4
   d6a10:	f7ff ff2d 	bl	d686e <_ZN7FatFile4readEPvj>
   d6a14:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d6a16:	2801      	cmp	r0, #1
   d6a18:	d001      	beq.n	d6a1e <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d6a1a:	2000      	movs	r0, #0
   d6a1c:	e008      	b.n	d6a30 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d6a1e:	6963      	ldr	r3, [r4, #20]
   d6a20:	331f      	adds	r3, #31
   d6a22:	e000      	b.n	d6a26 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d6a24:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6a26:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d6a28:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6a2a:	3030      	adds	r0, #48	; 0x30
   d6a2c:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d6a30:	b003      	add	sp, #12
   d6a32:	bd30      	pop	{r4, r5, pc}

000d6a34 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6a38:	460e      	mov	r6, r1
   d6a3a:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d6a3c:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6a3e:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d6a40:	2900      	cmp	r1, #0
   d6a42:	d039      	beq.n	d6ab8 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d6a44:	6945      	ldr	r5, [r0, #20]
   d6a46:	42b5      	cmp	r5, r6
   d6a48:	d03a      	beq.n	d6ac0 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d6a4a:	b90e      	cbnz	r6, d6a50 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d6a4c:	6106      	str	r6, [r0, #16]
    goto done;
   d6a4e:	e031      	b.n	d6ab4 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d6a50:	070b      	lsls	r3, r1, #28
   d6a52:	d503      	bpl.n	d6a5c <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d6a54:	69c3      	ldr	r3, [r0, #28]
   d6a56:	429e      	cmp	r6, r3
   d6a58:	d82e      	bhi.n	d6ab8 <_ZN7FatFile7seekSetEm+0x84>
   d6a5a:	e007      	b.n	d6a6c <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d6a5c:	0688      	lsls	r0, r1, #26
   d6a5e:	d505      	bpl.n	d6a6c <_ZN7FatFile7seekSetEm+0x38>
   d6a60:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d6a62:	891b      	ldrh	r3, [r3, #8]
   d6a64:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d6a68:	d826      	bhi.n	d6ab8 <_ZN7FatFile7seekSetEm+0x84>
   d6a6a:	e023      	b.n	d6ab4 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6a6c:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d6a70:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d6a74:	1e6a      	subs	r2, r5, #1
   d6a76:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6a7a:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6a7c:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6a7e:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d6a80:	429a      	cmp	r2, r3
   d6a82:	d800      	bhi.n	d6a86 <_ZN7FatFile7seekSetEm+0x52>
   d6a84:	b94d      	cbnz	r5, d6a9a <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6a86:	064a      	lsls	r2, r1, #25
   d6a88:	bf4c      	ite	mi
   d6a8a:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d6a8e:	6a22      	ldrpl	r2, [r4, #32]
   d6a90:	6122      	str	r2, [r4, #16]
   d6a92:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6a94:	f104 0810 	add.w	r8, r4, #16
   d6a98:	e00a      	b.n	d6ab0 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d6a9a:	1a9b      	subs	r3, r3, r2
   d6a9c:	e7f9      	b.n	d6a92 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6a9e:	4642      	mov	r2, r8
   d6aa0:	6921      	ldr	r1, [r4, #16]
   d6aa2:	68a0      	ldr	r0, [r4, #8]
   d6aa4:	f000 fa7b 	bl	d6f9e <_ZN9FatVolume6fatGetEmPm>
   d6aa8:	2800      	cmp	r0, #0
   d6aaa:	f105 35ff 	add.w	r5, r5, #4294967295
   d6aae:	dd03      	ble.n	d6ab8 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d6ab0:	2d00      	cmp	r5, #0
   d6ab2:	d1f4      	bne.n	d6a9e <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d6ab4:	6166      	str	r6, [r4, #20]
   d6ab6:	e003      	b.n	d6ac0 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d6ab8:	6127      	str	r7, [r4, #16]
  return false;
   d6aba:	2000      	movs	r0, #0
   d6abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d6ac0:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d6ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6ac6 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d6ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ac8:	460f      	mov	r7, r1
   d6aca:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d6acc:	2100      	movs	r1, #0
   d6ace:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d6ad0:	4604      	mov	r4, r0
   d6ad2:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d6ad4:	f006 f9ad 	bl	dce32 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d6ad8:	68b8      	ldr	r0, [r7, #8]
   d6ada:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6adc:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d6ae0:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6ae2:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d6ae6:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d6ae8:	6a3b      	ldr	r3, [r7, #32]
   d6aea:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6aec:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6aee:	7acb      	ldrb	r3, [r1, #11]
   d6af0:	071d      	lsls	r5, r3, #28
   d6af2:	d44c      	bmi.n	d6b8e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d6af4:	1883      	adds	r3, r0, r2
   d6af6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d6afa:	f003 0317 	and.w	r3, r3, #23
   d6afe:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d6b00:	7ac9      	ldrb	r1, [r1, #11]
   d6b02:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d6b06:	bf04      	itt	eq
   d6b08:	f043 0308 	orreq.w	r3, r3, #8
   d6b0c:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d6b0e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d6b12:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d6b14:	f006 0303 	and.w	r3, r6, #3
   d6b18:	2b01      	cmp	r3, #1
   d6b1a:	d009      	beq.n	d6b30 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d6b1c:	2b02      	cmp	r3, #2
   d6b1e:	d005      	beq.n	d6b2c <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d6b20:	2b00      	cmp	r3, #0
   d6b22:	d134      	bne.n	d6b8e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d6b24:	0571      	lsls	r1, r6, #21
   d6b26:	d432      	bmi.n	d6b8e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d6b28:	2301      	movs	r3, #1
   d6b2a:	e002      	b.n	d6b32 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d6b2c:	2303      	movs	r3, #3
   d6b2e:	e000      	b.n	d6b32 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d6b30:	2302      	movs	r3, #2
   d6b32:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d6b34:	78a1      	ldrb	r1, [r4, #2]
   d6b36:	078b      	lsls	r3, r1, #30
   d6b38:	d503      	bpl.n	d6b42 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d6b3a:	7823      	ldrb	r3, [r4, #0]
   d6b3c:	f013 0f11 	tst.w	r3, #17
   d6b40:	d125      	bne.n	d6b8e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d6b42:	b24b      	sxtb	r3, r1
   d6b44:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d6b48:	f006 0108 	and.w	r1, r6, #8
   d6b4c:	bf14      	ite	ne
   d6b4e:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d6b52:	2700      	moveq	r7, #0
   d6b54:	4319      	orrs	r1, r3
   d6b56:	4339      	orrs	r1, r7
   d6b58:	70a1      	strb	r1, [r4, #2]
   d6b5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d6b5c:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d6b5e:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d6b60:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d6b62:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d6b66:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d6b6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d6b6e:	d504      	bpl.n	d6b7a <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d6b70:	b181      	cbz	r1, d6b94 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d6b72:	f000 fab4 	bl	d70de <_ZN9FatVolume9freeChainEm>
   d6b76:	b968      	cbnz	r0, d6b94 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d6b78:	e009      	b.n	d6b8e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d6b7a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d6b7c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d6b7e:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d6b80:	0473      	lsls	r3, r6, #17
   d6b82:	d50c      	bpl.n	d6b9e <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d6b84:	69e1      	ldr	r1, [r4, #28]
   d6b86:	4620      	mov	r0, r4
   d6b88:	f7ff ff54 	bl	d6a34 <_ZN7FatFile7seekSetEm>
   d6b8c:	b938      	cbnz	r0, d6b9e <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d6b8e:	2000      	movs	r0, #0
   d6b90:	7020      	strb	r0, [r4, #0]
  return false;
   d6b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d6b94:	78a3      	ldrb	r3, [r4, #2]
   d6b96:	f043 0304 	orr.w	r3, r3, #4
   d6b9a:	70a3      	strb	r3, [r4, #2]
   d6b9c:	e7f0      	b.n	d6b80 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d6b9e:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d6ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ba2 <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6ba2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6ba6:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6ba8:	4606      	mov	r6, r0
   d6baa:	460d      	mov	r5, r1
   d6bac:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6bae:	bb53      	cbnz	r3, d6c06 <_ZN7FatFile8openNextEPS_i+0x64>
   d6bb0:	780b      	ldrb	r3, [r1, #0]
   d6bb2:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6bb6:	d026      	beq.n	d6c06 <_ZN7FatFile8openNextEPS_i+0x64>
   d6bb8:	694c      	ldr	r4, [r1, #20]
   d6bba:	f014 041f 	ands.w	r4, r4, #31
   d6bbe:	d122      	bne.n	d6c06 <_ZN7FatFile8openNextEPS_i+0x64>
   d6bc0:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d6bc2:	2100      	movs	r1, #0
   d6bc4:	4628      	mov	r0, r5
   d6bc6:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d6bca:	f7ff ff16 	bl	d69fa <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6bce:	b1d0      	cbz	r0, d6c06 <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d6bd0:	7803      	ldrb	r3, [r0, #0]
   d6bd2:	b1c3      	cbz	r3, d6c06 <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d6bd4:	2b2e      	cmp	r3, #46	; 0x2e
   d6bd6:	d101      	bne.n	d6bdc <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d6bd8:	2400      	movs	r4, #0
   d6bda:	e7f2      	b.n	d6bc2 <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d6bdc:	2be5      	cmp	r3, #229	; 0xe5
   d6bde:	d0fb      	beq.n	d6bd8 <_ZN7FatFile8openNextEPS_i+0x36>
   d6be0:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6be2:	f011 0f08 	tst.w	r1, #8
   d6be6:	d105      	bne.n	d6bf4 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d6be8:	b17c      	cbz	r4, d6c0a <_ZN7FatFile8openNextEPS_i+0x68>
   d6bea:	f7ff f9f0 	bl	d5fce <_ZN7FatFile11lfnChecksumEPh>
   d6bee:	4580      	cmp	r8, r0
   d6bf0:	d109      	bne.n	d6c06 <_ZN7FatFile8openNextEPS_i+0x64>
   d6bf2:	e00a      	b.n	d6c0a <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6bf4:	290f      	cmp	r1, #15
   d6bf6:	d1ef      	bne.n	d6bd8 <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d6bf8:	0659      	lsls	r1, r3, #25
   d6bfa:	d5e2      	bpl.n	d6bc2 <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d6bfc:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d6c00:	f890 800d 	ldrb.w	r8, [r0, #13]
   d6c04:	e7dd      	b.n	d6bc2 <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d6c06:	2000      	movs	r0, #0
   d6c08:	e007      	b.n	d6c1a <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d6c0a:	9400      	str	r4, [sp, #0]
   d6c0c:	463b      	mov	r3, r7
   d6c0e:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d6c12:	4629      	mov	r1, r5
   d6c14:	4630      	mov	r0, r6
   d6c16:	f7ff ff56 	bl	d6ac6 <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d6c1a:	b003      	add	sp, #12
   d6c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6c20 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6c20:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d6c22:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6c24:	4604      	mov	r4, r0
  if (!isOpen()) {
   d6c26:	b90b      	cbnz	r3, d6c2c <_ZN7FatFile4syncEv+0xc>
    return true;
   d6c28:	2001      	movs	r0, #1
   d6c2a:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d6c2c:	7883      	ldrb	r3, [r0, #2]
   d6c2e:	075a      	lsls	r2, r3, #29
   d6c30:	d523      	bpl.n	d6c7a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6c32:	2101      	movs	r1, #1
   d6c34:	f7ff fdca 	bl	d67cc <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6c38:	4605      	mov	r5, r0
   d6c3a:	b928      	cbnz	r0, d6c48 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d6c3c:	7863      	ldrb	r3, [r4, #1]
   d6c3e:	f043 0301 	orr.w	r3, r3, #1
   d6c42:	7063      	strb	r3, [r4, #1]
  return false;
   d6c44:	2000      	movs	r0, #0
   d6c46:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6c48:	7803      	ldrb	r3, [r0, #0]
   d6c4a:	2be5      	cmp	r3, #229	; 0xe5
   d6c4c:	d0f6      	beq.n	d6c3c <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d6c4e:	7823      	ldrb	r3, [r4, #0]
   d6c50:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d6c52:	bf44      	itt	mi
   d6c54:	69e3      	ldrmi	r3, [r4, #28]
   d6c56:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d6c58:	8c23      	ldrh	r3, [r4, #32]
   d6c5a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d6c5c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d6c5e:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d6c60:	4b09      	ldr	r3, [pc, #36]	; (d6c88 <_ZN7FatFile4syncEv+0x68>)
   d6c62:	681b      	ldr	r3, [r3, #0]
   d6c64:	b12b      	cbz	r3, d6c72 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d6c66:	f100 0116 	add.w	r1, r0, #22
   d6c6a:	3018      	adds	r0, #24
   d6c6c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d6c6e:	8b2b      	ldrh	r3, [r5, #24]
   d6c70:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d6c72:	78a3      	ldrb	r3, [r4, #2]
   d6c74:	f023 0304 	bic.w	r3, r3, #4
   d6c78:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d6c7a:	68a0      	ldr	r0, [r4, #8]
   d6c7c:	f7ff f99a 	bl	d5fb4 <_ZN9FatVolume9cacheSyncEv>
   d6c80:	2800      	cmp	r0, #0
   d6c82:	d0db      	beq.n	d6c3c <_ZN7FatFile4syncEv+0x1c>
   d6c84:	e7d0      	b.n	d6c28 <_ZN7FatFile4syncEv+0x8>
   d6c86:	bf00      	nop
   d6c88:	2003e310 	.word	0x2003e310

000d6c8c <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d6c8c:	b510      	push	{r4, lr}
   d6c8e:	4604      	mov	r4, r0
  bool rtn = sync();
   d6c90:	f7ff ffc6 	bl	d6c20 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d6c94:	2300      	movs	r3, #0
   d6c96:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d6c98:	bd10      	pop	{r4, pc}

000d6c9a <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6c9c:	b093      	sub	sp, #76	; 0x4c
   d6c9e:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6ca0:	2300      	movs	r3, #0
   d6ca2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d6ca6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d6caa:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6cac:	9201      	str	r2, [sp, #4]
   d6cae:	4606      	mov	r6, r0
   d6cb0:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d6cb2:	b10b      	cbz	r3, d6cb8 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d6cb4:	2000      	movs	r0, #0
   d6cb6:	e03d      	b.n	d6d34 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d6cb8:	780b      	ldrb	r3, [r1, #0]
   d6cba:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6cbe:	d0f9      	beq.n	d6cb4 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d6cc0:	7813      	ldrb	r3, [r2, #0]
   d6cc2:	2b2f      	cmp	r3, #47	; 0x2f
   d6cc4:	d112      	bne.n	d6cec <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d6cc6:	9b01      	ldr	r3, [sp, #4]
   d6cc8:	781a      	ldrb	r2, [r3, #0]
   d6cca:	2a2f      	cmp	r2, #47	; 0x2f
   d6ccc:	d102      	bne.n	d6cd4 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d6cce:	3301      	adds	r3, #1
   d6cd0:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d6cd2:	e7f8      	b.n	d6cc6 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d6cd4:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d6cd6:	b91a      	cbnz	r2, d6ce0 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d6cd8:	4630      	mov	r0, r6
   d6cda:	f7ff fdb0 	bl	d683e <_ZN7FatFile8openRootEP9FatVolume>
   d6cde:	e029      	b.n	d6d34 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d6ce0:	a809      	add	r0, sp, #36	; 0x24
   d6ce2:	f7ff fdac 	bl	d683e <_ZN7FatFile8openRootEP9FatVolume>
   d6ce6:	2800      	cmp	r0, #0
   d6ce8:	d0e4      	beq.n	d6cb4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d6cea:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d6cec:	aa01      	add	r2, sp, #4
   d6cee:	a903      	add	r1, sp, #12
   d6cf0:	9801      	ldr	r0, [sp, #4]
   d6cf2:	f7ff fa0b 	bl	d610c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d6cf6:	2800      	cmp	r0, #0
   d6cf8:	d0dc      	beq.n	d6cb4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d6cfa:	9b01      	ldr	r3, [sp, #4]
   d6cfc:	781b      	ldrb	r3, [r3, #0]
   d6cfe:	b19b      	cbz	r3, d6d28 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d6d00:	2300      	movs	r3, #0
   d6d02:	aa03      	add	r2, sp, #12
   d6d04:	4621      	mov	r1, r4
   d6d06:	4630      	mov	r0, r6
   d6d08:	f7ff fb42 	bl	d6390 <_ZN7FatFile4openEPS_P7fname_ti>
   d6d0c:	2800      	cmp	r0, #0
   d6d0e:	d0d1      	beq.n	d6cb4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d6d10:	4635      	mov	r5, r6
   d6d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d14:	ac09      	add	r4, sp, #36	; 0x24
   d6d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d1c:	682b      	ldr	r3, [r5, #0]
   d6d1e:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d6d20:	4630      	mov	r0, r6
   d6d22:	f7ff ffb3 	bl	d6c8c <_ZN7FatFile5closeEv>
   d6d26:	e7e0      	b.n	d6cea <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d6d28:	463b      	mov	r3, r7
   d6d2a:	aa03      	add	r2, sp, #12
   d6d2c:	4621      	mov	r1, r4
   d6d2e:	4630      	mov	r0, r6
   d6d30:	f7ff fb2e 	bl	d6390 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d6d34:	b013      	add	sp, #76	; 0x4c
   d6d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6d38 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6d3c:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6d3e:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6d40:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6d42:	4604      	mov	r4, r0
   d6d44:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6d46:	d508      	bpl.n	d6d5a <_ZN7FatFile5writeEPKvj+0x22>
   d6d48:	7883      	ldrb	r3, [r0, #2]
   d6d4a:	079a      	lsls	r2, r3, #30
   d6d4c:	d505      	bpl.n	d6d5a <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d6d4e:	071b      	lsls	r3, r3, #28
   d6d50:	d50b      	bpl.n	d6d6a <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d6d52:	69e1      	ldr	r1, [r4, #28]
   d6d54:	f7ff fe6e 	bl	d6a34 <_ZN7FatFile7seekSetEm>
   d6d58:	b938      	cbnz	r0, d6d6a <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d6d5a:	7863      	ldrb	r3, [r4, #1]
   d6d5c:	f043 0301 	orr.w	r3, r3, #1
   d6d60:	7063      	strb	r3, [r4, #1]
  return -1;
   d6d62:	f04f 30ff 	mov.w	r0, #4294967295
   d6d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d6d6a:	6963      	ldr	r3, [r4, #20]
   d6d6c:	43db      	mvns	r3, r3
   d6d6e:	4598      	cmp	r8, r3
   d6d70:	d8f3      	bhi.n	d6d5a <_ZN7FatFile5writeEPKvj+0x22>
   d6d72:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6d74:	f04f 0a00 	mov.w	sl, #0
   d6d78:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d6d7a:	2e00      	cmp	r6, #0
   d6d7c:	f000 8081 	beq.w	d6e82 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d6d80:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6d82:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6d84:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d6d88:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6d8c:	d11c      	bne.n	d6dc8 <_ZN7FatFile5writeEPKvj+0x90>
   d6d8e:	b9df      	cbnz	r7, d6dc8 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d6d90:	6921      	ldr	r1, [r4, #16]
   d6d92:	b171      	cbz	r1, d6db2 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6d94:	f104 0210 	add.w	r2, r4, #16
   d6d98:	f000 f901 	bl	d6f9e <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d6d9c:	2800      	cmp	r0, #0
   d6d9e:	dbdc      	blt.n	d6d5a <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d6da0:	f040 808e 	bne.w	d6ec0 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d6da4:	4620      	mov	r0, r4
   d6da6:	f7ff fcc6 	bl	d6736 <_ZN7FatFile10addClusterEv>
   d6daa:	2800      	cmp	r0, #0
   d6dac:	f040 8088 	bne.w	d6ec0 <_ZN7FatFile5writeEPKvj+0x188>
   d6db0:	e7d3      	b.n	d6d5a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d6db2:	6a23      	ldr	r3, [r4, #32]
   d6db4:	b93b      	cbnz	r3, d6dc6 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d6db6:	4620      	mov	r0, r4
   d6db8:	f7ff fcbd 	bl	d6736 <_ZN7FatFile10addClusterEv>
   d6dbc:	2800      	cmp	r0, #0
   d6dbe:	d0cc      	beq.n	d6d5a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d6dc0:	6923      	ldr	r3, [r4, #16]
   d6dc2:	6223      	str	r3, [r4, #32]
   d6dc4:	e000      	b.n	d6dc8 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d6dc6:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6dc8:	6921      	ldr	r1, [r4, #16]
   d6dca:	68a0      	ldr	r0, [r4, #8]
   d6dcc:	f000 f8e1 	bl	d6f92 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6dd0:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d6dd2:	b917      	cbnz	r7, d6dda <_ZN7FatFile5writeEPKvj+0xa2>
   d6dd4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6dd8:	d221      	bcs.n	d6e1e <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d6dda:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d6dde:	42b5      	cmp	r5, r6
   d6de0:	bf28      	it	cs
   d6de2:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d6de4:	b937      	cbnz	r7, d6df4 <_ZN7FatFile5writeEPKvj+0xbc>
   d6de6:	6963      	ldr	r3, [r4, #20]
   d6de8:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d6dea:	4293      	cmp	r3, r2
   d6dec:	bf34      	ite	cc
   d6dee:	2201      	movcc	r2, #1
   d6df0:	2205      	movcs	r2, #5
   d6df2:	e000      	b.n	d6df6 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d6df4:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6df6:	68a0      	ldr	r0, [r4, #8]
   d6df8:	3024      	adds	r0, #36	; 0x24
   d6dfa:	f000 f8a6 	bl	d6f4a <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d6dfe:	2800      	cmp	r0, #0
   d6e00:	d0ab      	beq.n	d6d5a <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d6e02:	4438      	add	r0, r7
   d6e04:	462a      	mov	r2, r5
   d6e06:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d6e08:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d6e0a:	f005 ffec 	bl	dcde6 <memcpy>
      if (512 == (n + blockOffset)) {
   d6e0e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d6e12:	d130      	bne.n	d6e76 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d6e14:	68a0      	ldr	r0, [r4, #8]
   d6e16:	3024      	adds	r0, #36	; 0x24
   d6e18:	f000 f870 	bl	d6efc <_ZN8FatCache4syncEv>
   d6e1c:	e017      	b.n	d6e4e <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d6e1e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6e22:	68a0      	ldr	r0, [r4, #8]
   d6e24:	d315      	bcc.n	d6e52 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d6e26:	7902      	ldrb	r2, [r0, #4]
   d6e28:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d6e2a:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d6e2c:	b2d2      	uxtb	r2, r2
   d6e2e:	4293      	cmp	r3, r2
   d6e30:	bf28      	it	cs
   d6e32:	4613      	movcs	r3, r2
   d6e34:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6e36:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d6e38:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6e3c:	d302      	bcc.n	d6e44 <_ZN7FatFile5writeEPKvj+0x10c>
   d6e3e:	441a      	add	r2, r3
   d6e40:	4291      	cmp	r1, r2
   d6e42:	d337      	bcc.n	d6eb4 <_ZN7FatFile5writeEPKvj+0x17c>
   d6e44:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d6e46:	464a      	mov	r2, r9
   d6e48:	6838      	ldr	r0, [r7, #0]
   d6e4a:	f000 fc6d 	bl	d7728 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d6e4e:	b990      	cbnz	r0, d6e76 <_ZN7FatFile5writeEPKvj+0x13e>
   d6e50:	e783      	b.n	d6d5a <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d6e52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6e54:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6e56:	bf02      	ittt	eq
   d6e58:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6e5c:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6e60:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d6e62:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6e64:	464a      	mov	r2, r9
   d6e66:	6818      	ldr	r0, [r3, #0]
   d6e68:	f000 fbec 	bl	d7644 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d6e6c:	2800      	cmp	r0, #0
   d6e6e:	f43f af74 	beq.w	d6d5a <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d6e72:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d6e76:	6963      	ldr	r3, [r4, #20]
   d6e78:	442b      	add	r3, r5
   d6e7a:	6163      	str	r3, [r4, #20]
    src += n;
   d6e7c:	44a9      	add	r9, r5
    nToWrite -= n;
   d6e7e:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d6e80:	e77a      	b.n	d6d78 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d6e82:	69e2      	ldr	r2, [r4, #28]
   d6e84:	4293      	cmp	r3, r2
   d6e86:	d901      	bls.n	d6e8c <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d6e88:	61e3      	str	r3, [r4, #28]
   d6e8a:	e002      	b.n	d6e92 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d6e8c:	4b0f      	ldr	r3, [pc, #60]	; (d6ecc <_ZN7FatFile5writeEPKvj+0x194>)
   d6e8e:	681b      	ldr	r3, [r3, #0]
   d6e90:	b11b      	cbz	r3, d6e9a <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d6e92:	78a3      	ldrb	r3, [r4, #2]
   d6e94:	f043 0304 	orr.w	r3, r3, #4
   d6e98:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d6e9a:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d6e9e:	2b00      	cmp	r3, #0
   d6ea0:	db02      	blt.n	d6ea8 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d6ea2:	4640      	mov	r0, r8
   d6ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d6ea8:	4620      	mov	r0, r4
   d6eaa:	f7ff feb9 	bl	d6c20 <_ZN7FatFile4syncEv>
   d6eae:	2800      	cmp	r0, #0
   d6eb0:	d1f7      	bne.n	d6ea2 <_ZN7FatFile5writeEPKvj+0x16a>
   d6eb2:	e752      	b.n	d6d5a <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6eb4:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6eb8:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6ebc:	62c2      	str	r2, [r0, #44]	; 0x2c
   d6ebe:	e7c1      	b.n	d6e44 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6ec0:	6921      	ldr	r1, [r4, #16]
   d6ec2:	68a0      	ldr	r0, [r4, #8]
   d6ec4:	f000 f865 	bl	d6f92 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6ec8:	4601      	mov	r1, r0
   d6eca:	e783      	b.n	d6dd4 <_ZN7FatFile5writeEPKvj+0x9c>
   d6ecc:	2003e310 	.word	0x2003e310

000d6ed0 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d6ed0:	f000 be1e 	b.w	d7b10 <HAL_Pin_Map>

000d6ed4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6ed4:	b570      	push	{r4, r5, r6, lr}
   d6ed6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6ed8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6eda:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6edc:	b149      	cbz	r1, d6ef2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6ede:	f006 f82e 	bl	dcf3e <strlen>
   d6ee2:	682b      	ldr	r3, [r5, #0]
   d6ee4:	4602      	mov	r2, r0
   d6ee6:	4621      	mov	r1, r4
   d6ee8:	4628      	mov	r0, r5
   d6eea:	68db      	ldr	r3, [r3, #12]
    }
   d6eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6ef0:	4718      	bx	r3
    }
   d6ef2:	bd70      	pop	{r4, r5, r6, pc}

000d6ef4 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d6ef4:	f000 be0c 	b.w	d7b10 <HAL_Pin_Map>

000d6ef8 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d6ef8:	f000 be0a 	b.w	d7b10 <HAL_Pin_Map>

000d6efc <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d6efc:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d6efe:	7803      	ldrb	r3, [r0, #0]
   d6f00:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d6f02:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d6f04:	d51e      	bpl.n	d6f44 <_ZN8FatCache4syncEv+0x48>
   d6f06:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6f08:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d6f0a:	f100 060c 	add.w	r6, r0, #12
   d6f0e:	4632      	mov	r2, r6
   d6f10:	6818      	ldr	r0, [r3, #0]
   d6f12:	f000 fb97 	bl	d7644 <_ZN9SdSpiCard10writeBlockEmPKh>
   d6f16:	4605      	mov	r5, r0
   d6f18:	b908      	cbnz	r0, d6f1e <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d6f1a:	2500      	movs	r5, #0
   d6f1c:	e013      	b.n	d6f46 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d6f1e:	7823      	ldrb	r3, [r4, #0]
   d6f20:	079b      	lsls	r3, r3, #30
   d6f22:	d404      	bmi.n	d6f2e <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d6f24:	7823      	ldrb	r3, [r4, #0]
   d6f26:	f023 0301 	bic.w	r3, r3, #1
   d6f2a:	7023      	strb	r3, [r4, #0]
   d6f2c:	e00b      	b.n	d6f46 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d6f2e:	6863      	ldr	r3, [r4, #4]
   d6f30:	68a0      	ldr	r0, [r4, #8]
   d6f32:	6919      	ldr	r1, [r3, #16]
   d6f34:	4632      	mov	r2, r6
   d6f36:	4401      	add	r1, r0
   d6f38:	6818      	ldr	r0, [r3, #0]
   d6f3a:	f000 fb83 	bl	d7644 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d6f3e:	2800      	cmp	r0, #0
   d6f40:	d1f0      	bne.n	d6f24 <_ZN8FatCache4syncEv+0x28>
   d6f42:	e7ea      	b.n	d6f1a <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d6f44:	2501      	movs	r5, #1

fail:
  return false;
}
   d6f46:	4628      	mov	r0, r5
   d6f48:	bd70      	pop	{r4, r5, r6, pc}

000d6f4a <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6f4a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d6f4c:	6883      	ldr	r3, [r0, #8]
   d6f4e:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6f50:	4604      	mov	r4, r0
   d6f52:	460e      	mov	r6, r1
   d6f54:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d6f56:	d014      	beq.n	d6f82 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d6f58:	f7ff ffd0 	bl	d6efc <_ZN8FatCache4syncEv>
   d6f5c:	b908      	cbnz	r0, d6f62 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d6f5e:	2000      	movs	r0, #0
   d6f60:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d6f62:	076b      	lsls	r3, r5, #29
   d6f64:	d503      	bpl.n	d6f6e <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d6f66:	2300      	movs	r3, #0
   d6f68:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d6f6a:	60a6      	str	r6, [r4, #8]
   d6f6c:	e009      	b.n	d6f82 <_ZN8FatCache4readEmh+0x38>
   d6f6e:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6f70:	f104 020c 	add.w	r2, r4, #12
   d6f74:	4631      	mov	r1, r6
   d6f76:	6818      	ldr	r0, [r3, #0]
   d6f78:	f000 fada 	bl	d7530 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d6f7c:	2800      	cmp	r0, #0
   d6f7e:	d1f2      	bne.n	d6f66 <_ZN8FatCache4readEmh+0x1c>
   d6f80:	e7ed      	b.n	d6f5e <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d6f82:	7823      	ldrb	r3, [r4, #0]
   d6f84:	4620      	mov	r0, r4
   d6f86:	f005 0503 	and.w	r5, r5, #3
   d6f8a:	431d      	orrs	r5, r3
   d6f8c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d6f90:	bd70      	pop	{r4, r5, r6, pc}

000d6f92 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d6f92:	7983      	ldrb	r3, [r0, #6]
   d6f94:	6940      	ldr	r0, [r0, #20]
   d6f96:	3902      	subs	r1, #2
   d6f98:	4099      	lsls	r1, r3
}
   d6f9a:	4408      	add	r0, r1
   d6f9c:	4770      	bx	lr

000d6f9e <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6f9e:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d6fa0:	b570      	push	{r4, r5, r6, lr}
   d6fa2:	4605      	mov	r5, r0
   d6fa4:	460c      	mov	r4, r1
   d6fa6:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6fa8:	d802      	bhi.n	d6fb0 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d6faa:	f04f 30ff 	mov.w	r0, #4294967295
   d6fae:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6fb0:	69c3      	ldr	r3, [r0, #28]
   d6fb2:	4299      	cmp	r1, r3
   d6fb4:	d8f9      	bhi.n	d6faa <_ZN9FatVolume6fatGetEmPm+0xc>
   d6fb6:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d6fb8:	2b20      	cmp	r3, #32
   d6fba:	d110      	bne.n	d6fde <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d6fbc:	6981      	ldr	r1, [r0, #24]
   d6fbe:	2202      	movs	r2, #2
   d6fc0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6fc4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6fc8:	f7ff ffbf 	bl	d6f4a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6fcc:	2800      	cmp	r0, #0
   d6fce:	d0ec      	beq.n	d6faa <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d6fd0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6fd4:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d6fd8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d6fdc:	e00f      	b.n	d6ffe <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d6fde:	2b10      	cmp	r3, #16
   d6fe0:	d1e3      	bne.n	d6faa <_ZN9FatVolume6fatGetEmPm+0xc>
   d6fe2:	6983      	ldr	r3, [r0, #24]
   d6fe4:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6fe8:	2202      	movs	r2, #2
   d6fea:	4419      	add	r1, r3
   d6fec:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6ff0:	f7ff ffab 	bl	d6f4a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6ff4:	2800      	cmp	r0, #0
   d6ff6:	d0d8      	beq.n	d6faa <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d6ff8:	b2e4      	uxtb	r4, r4
   d6ffa:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d6ffe:	69ea      	ldr	r2, [r5, #28]
   d7000:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d7002:	bf9a      	itte	ls
   d7004:	6033      	strls	r3, [r6, #0]
  return 1;
   d7006:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d7008:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d700a:	bd70      	pop	{r4, r5, r6, pc}

000d700c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d700c:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d700e:	b538      	push	{r3, r4, r5, lr}
   d7010:	460c      	mov	r4, r1
   d7012:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7014:	d801      	bhi.n	d701a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d7016:	2000      	movs	r0, #0
   d7018:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d701a:	69c3      	ldr	r3, [r0, #28]
   d701c:	4299      	cmp	r1, r3
   d701e:	d8fa      	bhi.n	d7016 <_ZN9FatVolume6fatPutEmm+0xa>
   d7020:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d7022:	2b20      	cmp	r3, #32
   d7024:	d10e      	bne.n	d7044 <_ZN9FatVolume6fatPutEmm+0x38>
   d7026:	6981      	ldr	r1, [r0, #24]
   d7028:	2203      	movs	r2, #3
   d702a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d702e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7032:	f7ff ff8a 	bl	d6f4a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d7036:	2800      	cmp	r0, #0
   d7038:	d0ed      	beq.n	d7016 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d703a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d703e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d7042:	e00f      	b.n	d7064 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d7044:	2b10      	cmp	r3, #16
   d7046:	d1e6      	bne.n	d7016 <_ZN9FatVolume6fatPutEmm+0xa>
   d7048:	6983      	ldr	r3, [r0, #24]
   d704a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d704e:	2203      	movs	r2, #3
   d7050:	4419      	add	r1, r3
   d7052:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7056:	f7ff ff78 	bl	d6f4a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d705a:	2800      	cmp	r0, #0
   d705c:	d0db      	beq.n	d7016 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d705e:	b2e4      	uxtb	r4, r4
   d7060:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d7064:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d7066:	bd38      	pop	{r3, r4, r5, pc}

000d7068 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7068:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d706c:	68c4      	ldr	r4, [r0, #12]
   d706e:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7070:	4605      	mov	r5, r0
   d7072:	460e      	mov	r6, r1
   d7074:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d7076:	d207      	bcs.n	d7088 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d7078:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d707a:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d707c:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d707e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d7080:	429c      	cmp	r4, r3
   d7082:	d903      	bls.n	d708c <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d7084:	b9cf      	cbnz	r7, d70ba <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d7086:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d7088:	2701      	movs	r7, #1
   d708a:	e7f7      	b.n	d707c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d708c:	42a6      	cmp	r6, r4
   d708e:	d014      	beq.n	d70ba <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d7090:	aa01      	add	r2, sp, #4
   d7092:	4621      	mov	r1, r4
   d7094:	4628      	mov	r0, r5
   d7096:	f7ff ff82 	bl	d6f9e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d709a:	2800      	cmp	r0, #0
   d709c:	db0d      	blt.n	d70ba <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d709e:	d0ed      	beq.n	d707c <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d70a0:	9b01      	ldr	r3, [sp, #4]
   d70a2:	2b00      	cmp	r3, #0
   d70a4:	d1ea      	bne.n	d707c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d70a6:	b107      	cbz	r7, d70aa <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d70a8:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d70aa:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d70ae:	4621      	mov	r1, r4
   d70b0:	4628      	mov	r0, r5
   d70b2:	f7ff ffab 	bl	d700c <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d70b6:	4607      	mov	r7, r0
   d70b8:	b908      	cbnz	r0, d70be <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d70ba:	2700      	movs	r7, #0
   d70bc:	e00b      	b.n	d70d6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d70be:	b916      	cbnz	r6, d70c6 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d70c0:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d70c4:	e007      	b.n	d70d6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d70c6:	4622      	mov	r2, r4
   d70c8:	4631      	mov	r1, r6
   d70ca:	4628      	mov	r0, r5
   d70cc:	f7ff ff9e 	bl	d700c <_ZN9FatVolume6fatPutEmm>
   d70d0:	2800      	cmp	r0, #0
   d70d2:	d1f5      	bne.n	d70c0 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d70d4:	e7f1      	b.n	d70ba <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d70d6:	4638      	mov	r0, r7
   d70d8:	b002      	add	sp, #8
   d70da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d70de <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d70de:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d70e0:	4605      	mov	r5, r0
   d70e2:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d70e4:	aa01      	add	r2, sp, #4
   d70e6:	4621      	mov	r1, r4
   d70e8:	4628      	mov	r0, r5
   d70ea:	f7ff ff58 	bl	d6f9e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d70ee:	1e06      	subs	r6, r0, #0
   d70f0:	da01      	bge.n	d70f6 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d70f2:	2000      	movs	r0, #0
   d70f4:	e00f      	b.n	d7116 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d70f6:	2200      	movs	r2, #0
   d70f8:	4621      	mov	r1, r4
   d70fa:	4628      	mov	r0, r5
   d70fc:	f7ff ff86 	bl	d700c <_ZN9FatVolume6fatPutEmm>
   d7100:	2800      	cmp	r0, #0
   d7102:	d0f6      	beq.n	d70f2 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d7104:	68eb      	ldr	r3, [r5, #12]
   d7106:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d7108:	bf9c      	itt	ls
   d710a:	f104 34ff 	addls.w	r4, r4, #4294967295
   d710e:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d7110:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d7112:	2e00      	cmp	r6, #0
   d7114:	d1e6      	bne.n	d70e4 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d7116:	b002      	add	sp, #8
   d7118:	bd70      	pop	{r4, r5, r6, pc}

000d711a <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d711a:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d711c:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d711e:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d7120:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d7122:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d7124:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d7128:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d712a:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d712c:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d712e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7132:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d7134:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7138:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d713c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d7140:	b1a1      	cbz	r1, d716c <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d7142:	2904      	cmp	r1, #4
   d7144:	d85d      	bhi.n	d7202 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d7146:	4611      	mov	r1, r2
   d7148:	3024      	adds	r0, #36	; 0x24
   d714a:	f7ff fefe 	bl	d6f4a <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d714e:	2800      	cmp	r0, #0
   d7150:	d057      	beq.n	d7202 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d7152:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d7156:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d715a:	065b      	lsls	r3, r3, #25
   d715c:	d151      	bne.n	d7202 <_ZN9FatVolume4initEh+0xe8>
   d715e:	351b      	adds	r5, #27
   d7160:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d7164:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d7168:	2d00      	cmp	r5, #0
   d716a:	d04a      	beq.n	d7202 <_ZN9FatVolume4initEh+0xe8>
   d716c:	2200      	movs	r2, #0
   d716e:	4629      	mov	r1, r5
   d7170:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7174:	f7ff fee9 	bl	d6f4a <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d7178:	2800      	cmp	r0, #0
   d717a:	d042      	beq.n	d7202 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d717c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d7180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d7184:	d13d      	bne.n	d7202 <_ZN9FatVolume4initEh+0xe8>
   d7186:	7c03      	ldrb	r3, [r0, #16]
   d7188:	2b02      	cmp	r3, #2
   d718a:	d13a      	bne.n	d7202 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d718c:	89c3      	ldrh	r3, [r0, #14]
   d718e:	2b00      	cmp	r3, #0
   d7190:	d037      	beq.n	d7202 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d7192:	7b41      	ldrb	r1, [r0, #13]
   d7194:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d7196:	1e4b      	subs	r3, r1, #1
   d7198:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d719a:	2300      	movs	r3, #0
   d719c:	71a3      	strb	r3, [r4, #6]
   d719e:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d71a0:	2301      	movs	r3, #1
   d71a2:	428b      	cmp	r3, r1
   d71a4:	d007      	beq.n	d71b6 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d71a6:	3e01      	subs	r6, #1
   d71a8:	d02b      	beq.n	d7202 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d71aa:	79a2      	ldrb	r2, [r4, #6]
   d71ac:	005b      	lsls	r3, r3, #1
   d71ae:	3201      	adds	r2, #1
   d71b0:	b2db      	uxtb	r3, r3
   d71b2:	71a2      	strb	r2, [r4, #6]
   d71b4:	e7f5      	b.n	d71a2 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d71b6:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d71b8:	b902      	cbnz	r2, d71bc <_ZN9FatVolume4initEh+0xa2>
   d71ba:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d71bc:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d71be:	89c6      	ldrh	r6, [r0, #14]
   d71c0:	442e      	add	r6, r5
   d71c2:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d71c4:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d71c8:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d71ca:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d71ce:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d71d0:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d71d4:	0152      	lsls	r2, r2, #5
   d71d6:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d71da:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d71de:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d71e0:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d71e4:	b903      	cbnz	r3, d71e8 <_ZN9FatVolume4initEh+0xce>
   d71e6:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d71e8:	1aad      	subs	r5, r5, r2
   d71ea:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d71ec:	79a5      	ldrb	r5, [r4, #6]
   d71ee:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d71f2:	1c6b      	adds	r3, r5, #1
   d71f4:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d71f6:	f640 73f4 	movw	r3, #4084	; 0xff4
   d71fa:	429d      	cmp	r5, r3
   d71fc:	d803      	bhi.n	d7206 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d71fe:	230c      	movs	r3, #12
   d7200:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d7202:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d7204:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d7206:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d720a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d720c:	bf85      	ittet	hi
   d720e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d7210:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d7212:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d7214:	2320      	movhi	r3, #32
   d7216:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d7218:	2001      	movs	r0, #1

fail:
  return false;
}
   d721a:	bd70      	pop	{r4, r5, r6, pc}

000d721c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d721c:	f000 bc78 	b.w	d7b10 <HAL_Pin_Map>

000d7220 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d7220:	f000 bc76 	b.w	d7b10 <HAL_Pin_Map>

000d7224 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d7224:	f000 bc74 	b.w	d7b10 <HAL_Pin_Map>

000d7228 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7228:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d722a:	4c0e      	ldr	r4, [pc, #56]	; (d7264 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d722c:	460e      	mov	r6, r1
   d722e:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d7230:	f000 fcfe 	bl	d7c30 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7234:	6823      	ldr	r3, [r4, #0]
   d7236:	1ac0      	subs	r0, r0, r3
   d7238:	4b0b      	ldr	r3, [pc, #44]	; (d7268 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d723a:	4298      	cmp	r0, r3
   d723c:	d908      	bls.n	d7250 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d723e:	f000 fcff 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7242:	4b0a      	ldr	r3, [pc, #40]	; (d726c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d7244:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d7246:	f000 ffbb 	bl	d81c0 <spark_process>
   d724a:	f000 fcf1 	bl	d7c30 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d724e:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7250:	f000 fcf6 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d7254:	b280      	uxth	r0, r0
   d7256:	1b80      	subs	r0, r0, r6
}
   d7258:	42a8      	cmp	r0, r5
   d725a:	bfd4      	ite	le
   d725c:	2000      	movle	r0, #0
   d725e:	2001      	movgt	r0, #1
   d7260:	bd70      	pop	{r4, r5, r6, pc}
   d7262:	bf00      	nop
   d7264:	2003e314 	.word	0x2003e314
   d7268:	000186a0 	.word	0x000186a0
   d726c:	2003e708 	.word	0x2003e708

000d7270 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7270:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d7272:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7274:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d7276:	b94d      	cbnz	r5, d728c <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d7278:	6840      	ldr	r0, [r0, #4]
   d727a:	f000 fa7d 	bl	d7778 <_ZN14SdSpiAltDriver8activateEv>
   d727e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7280:	4629      	mov	r1, r5
   d7282:	7d18      	ldrb	r0, [r3, #20]
   d7284:	f004 fdd5 	bl	dbe32 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d7288:	2301      	movs	r3, #1
   d728a:	7223      	strb	r3, [r4, #8]
   d728c:	bd38      	pop	{r3, r4, r5, pc}

000d728e <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d728e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d7290:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7292:	4604      	mov	r4, r0
  if (m_spiActive) {
   d7294:	b16b      	cbz	r3, d72b2 <_ZN9SdSpiCard7spiStopEv+0x24>
   d7296:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d7298:	2101      	movs	r1, #1
   d729a:	7d18      	ldrb	r0, [r3, #20]
   d729c:	f004 fdc9 	bl	dbe32 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d72a0:	21ff      	movs	r1, #255	; 0xff
   d72a2:	6860      	ldr	r0, [r4, #4]
   d72a4:	f000 fa9a 	bl	d77dc <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d72a8:	6860      	ldr	r0, [r4, #4]
   d72aa:	f000 fa79 	bl	d77a0 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d72ae:	2300      	movs	r3, #0
   d72b0:	7223      	strb	r3, [r4, #8]
   d72b2:	bd10      	pop	{r4, pc}

000d72b4 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d72b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72b6:	4604      	mov	r4, r0
   d72b8:	460d      	mov	r5, r1
   d72ba:	4616      	mov	r6, r2
   d72bc:	f000 fcc0 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d72c0:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d72c2:	6860      	ldr	r0, [r4, #4]
   d72c4:	f000 fa6f 	bl	d77a6 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d72c8:	28ff      	cmp	r0, #255	; 0xff
   d72ca:	7260      	strb	r0, [r4, #9]
   d72cc:	d109      	bne.n	d72e2 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d72ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d72d2:	4639      	mov	r1, r7
   d72d4:	4620      	mov	r0, r4
   d72d6:	f7ff ffa7 	bl	d7228 <_ZN9SdSpiCard10isTimedOutEtt>
   d72da:	2800      	cmp	r0, #0
   d72dc:	d0f1      	beq.n	d72c2 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d72de:	2355      	movs	r3, #85	; 0x55
   d72e0:	e00b      	b.n	d72fa <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d72e2:	28fe      	cmp	r0, #254	; 0xfe
   d72e4:	d001      	beq.n	d72ea <_ZN9SdSpiCard8readDataEPhj+0x36>
   d72e6:	2350      	movs	r3, #80	; 0x50
   d72e8:	e007      	b.n	d72fa <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d72ea:	4632      	mov	r2, r6
   d72ec:	4629      	mov	r1, r5
   d72ee:	6860      	ldr	r0, [r4, #4]
   d72f0:	f000 fa5e 	bl	d77b0 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d72f4:	7260      	strb	r0, [r4, #9]
   d72f6:	b130      	cbz	r0, d7306 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d72f8:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d72fa:	4620      	mov	r0, r4
   d72fc:	7023      	strb	r3, [r4, #0]
   d72fe:	f7ff ffc6 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7302:	2000      	movs	r0, #0
}
   d7304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7306:	6860      	ldr	r0, [r4, #4]
   d7308:	f000 fa4d 	bl	d77a6 <_ZN14SdSpiAltDriver7receiveEv>
   d730c:	6860      	ldr	r0, [r4, #4]
   d730e:	f000 fa4a 	bl	d77a6 <_ZN14SdSpiAltDriver7receiveEv>
   d7312:	2001      	movs	r0, #1
   d7314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7316 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d7316:	b570      	push	{r4, r5, r6, lr}
   d7318:	4604      	mov	r4, r0
   d731a:	460e      	mov	r6, r1
   d731c:	f000 fc90 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
   d7320:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d7322:	4632      	mov	r2, r6
   d7324:	4629      	mov	r1, r5
   d7326:	4620      	mov	r0, r4
   d7328:	f7ff ff7e 	bl	d7228 <_ZN9SdSpiCard10isTimedOutEtt>
   d732c:	b930      	cbnz	r0, d733c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d732e:	6860      	ldr	r0, [r4, #4]
   d7330:	f000 fa39 	bl	d77a6 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d7334:	28ff      	cmp	r0, #255	; 0xff
   d7336:	d1f4      	bne.n	d7322 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d7338:	2001      	movs	r0, #1
   d733a:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d733c:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d733e:	bd70      	pop	{r4, r5, r6, pc}

000d7340 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d7342:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7344:	9201      	str	r2, [sp, #4]
   d7346:	4604      	mov	r4, r0
   d7348:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d734a:	b90b      	cbnz	r3, d7350 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d734c:	f7ff ff90 	bl	d7270 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d7350:	b125      	cbz	r5, d735c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d7352:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d7356:	4620      	mov	r0, r4
   d7358:	f7ff ffdd 	bl	d7316 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d735c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d7360:	6860      	ldr	r0, [r4, #4]
   d7362:	f000 fa3b 	bl	d77dc <_ZN14SdSpiAltDriver4sendEh>
   d7366:	f10d 0607 	add.w	r6, sp, #7
   d736a:	f10d 0703 	add.w	r7, sp, #3
   d736e:	f816 1901 	ldrb.w	r1, [r6], #-1
   d7372:	6860      	ldr	r0, [r4, #4]
   d7374:	f000 fa32 	bl	d77dc <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d7378:	42be      	cmp	r6, r7
   d737a:	d1f8      	bne.n	d736e <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d737c:	2d00      	cmp	r5, #0
   d737e:	bf0c      	ite	eq
   d7380:	2195      	moveq	r1, #149	; 0x95
   d7382:	2187      	movne	r1, #135	; 0x87
   d7384:	6860      	ldr	r0, [r4, #4]
   d7386:	f000 fa29 	bl	d77dc <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d738a:	6860      	ldr	r0, [r4, #4]
   d738c:	f000 fa0b 	bl	d77a6 <_ZN14SdSpiAltDriver7receiveEv>
   d7390:	250b      	movs	r5, #11
   d7392:	6860      	ldr	r0, [r4, #4]
   d7394:	f000 fa07 	bl	d77a6 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d7398:	0603      	lsls	r3, r0, #24
   d739a:	7260      	strb	r0, [r4, #9]
   d739c:	d503      	bpl.n	d73a6 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d739e:	3d01      	subs	r5, #1
   d73a0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d73a4:	d1f5      	bne.n	d7392 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d73a6:	b003      	add	sp, #12
   d73a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d73aa <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d73aa:	b570      	push	{r4, r5, r6, lr}
   d73ac:	4604      	mov	r4, r0
   d73ae:	460d      	mov	r5, r1
   d73b0:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d73b2:	2137      	movs	r1, #55	; 0x37
   d73b4:	2200      	movs	r2, #0
   d73b6:	f7ff ffc3 	bl	d7340 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d73ba:	4632      	mov	r2, r6
   d73bc:	4629      	mov	r1, r5
   d73be:	4620      	mov	r0, r4
  }
   d73c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d73c4:	f7ff bfbc 	b.w	d7340 <_ZN9SdSpiCard11cardCommandEhm>

000d73c8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d73c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d73cc:	2500      	movs	r5, #0
   d73ce:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d73d0:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d73d2:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d73d4:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d73d6:	4604      	mov	r4, r0
   d73d8:	4690      	mov	r8, r2
   d73da:	461e      	mov	r6, r3
   d73dc:	f000 fc30 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d73e0:	4641      	mov	r1, r8
   d73e2:	4607      	mov	r7, r0
   d73e4:	6860      	ldr	r0, [r4, #4]
   d73e6:	f000 f9cb 	bl	d7780 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d73ea:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d73ec:	4a4f      	ldr	r2, [pc, #316]	; (d752c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d73ee:	721d      	strb	r5, [r3, #8]
   d73f0:	f04f 0801 	mov.w	r8, #1
   d73f4:	60da      	str	r2, [r3, #12]
   d73f6:	745d      	strb	r5, [r3, #17]
   d73f8:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d73fc:	4620      	mov	r0, r4
   d73fe:	f7ff ff37 	bl	d7270 <_ZN9SdSpiCard8spiStartEv>
   d7402:	6863      	ldr	r3, [r4, #4]
   d7404:	4641      	mov	r1, r8
   d7406:	7d18      	ldrb	r0, [r3, #20]
   d7408:	f004 fd13 	bl	dbe32 <digitalWrite>
   d740c:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d740e:	21ff      	movs	r1, #255	; 0xff
   d7410:	6860      	ldr	r0, [r4, #4]
   d7412:	3d01      	subs	r5, #1
   d7414:	f000 f9e2 	bl	d77dc <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d7418:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d741c:	d1f7      	bne.n	d740e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d741e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7420:	4629      	mov	r1, r5
   d7422:	7d18      	ldrb	r0, [r3, #20]
   d7424:	f004 fd05 	bl	dbe32 <digitalWrite>
   d7428:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d742a:	2200      	movs	r2, #0
   d742c:	4611      	mov	r1, r2
   d742e:	4620      	mov	r0, r4
   d7430:	f7ff ff86 	bl	d7340 <_ZN9SdSpiCard11cardCommandEhm>
   d7434:	2801      	cmp	r0, #1
   d7436:	4680      	mov	r8, r0
   d7438:	d012      	beq.n	d7460 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d743a:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d743c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7440:	d101      	bne.n	d7446 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7442:	2320      	movs	r3, #32
   d7444:	e057      	b.n	d74f6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7446:	21fd      	movs	r1, #253	; 0xfd
   d7448:	6860      	ldr	r0, [r4, #4]
   d744a:	f000 f9c7 	bl	d77dc <_ZN14SdSpiAltDriver4sendEh>
   d744e:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7452:	6860      	ldr	r0, [r4, #4]
   d7454:	f000 f9a7 	bl	d77a6 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d7458:	f1b8 0801 	subs.w	r8, r8, #1
   d745c:	d1f9      	bne.n	d7452 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d745e:	e7e4      	b.n	d742a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d7460:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d7464:	2108      	movs	r1, #8
   d7466:	4620      	mov	r0, r4
   d7468:	f7ff ff6a 	bl	d7340 <_ZN9SdSpiCard11cardCommandEhm>
   d746c:	2805      	cmp	r0, #5
   d746e:	d102      	bne.n	d7476 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7470:	f884 800a 	strb.w	r8, [r4, #10]
   d7474:	e00f      	b.n	d7496 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d7476:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7478:	6860      	ldr	r0, [r4, #4]
   d747a:	f000 f994 	bl	d77a6 <_ZN14SdSpiAltDriver7receiveEv>
   d747e:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7480:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d7484:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7486:	d1f7      	bne.n	d7478 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d7488:	28aa      	cmp	r0, #170	; 0xaa
   d748a:	d102      	bne.n	d7492 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d748c:	2302      	movs	r3, #2
   d748e:	72a3      	strb	r3, [r4, #10]
   d7490:	e001      	b.n	d7496 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7492:	2325      	movs	r3, #37	; 0x25
   d7494:	e02f      	b.n	d74f6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d7496:	7aa3      	ldrb	r3, [r4, #10]
   d7498:	2b02      	cmp	r3, #2
   d749a:	bf0c      	ite	eq
   d749c:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d74a0:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d74a2:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d74a4:	462a      	mov	r2, r5
   d74a6:	2129      	movs	r1, #41	; 0x29
   d74a8:	4620      	mov	r0, r4
   d74aa:	f7ff ff7e 	bl	d73aa <_ZN9SdSpiCard8cardAcmdEhm>
   d74ae:	4602      	mov	r2, r0
   d74b0:	b148      	cbz	r0, d74c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d74b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d74b6:	4639      	mov	r1, r7
   d74b8:	4620      	mov	r0, r4
   d74ba:	f7ff feb5 	bl	d7228 <_ZN9SdSpiCard10isTimedOutEtt>
   d74be:	2800      	cmp	r0, #0
   d74c0:	d0f0      	beq.n	d74a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d74c2:	2343      	movs	r3, #67	; 0x43
   d74c4:	e017      	b.n	d74f6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d74c6:	7aa3      	ldrb	r3, [r4, #10]
   d74c8:	2b02      	cmp	r3, #2
   d74ca:	d00e      	beq.n	d74ea <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d74cc:	4620      	mov	r0, r4
   d74ce:	f7ff fede 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d74d2:	6863      	ldr	r3, [r4, #4]
   d74d4:	68b0      	ldr	r0, [r6, #8]
   d74d6:	7934      	ldrb	r4, [r6, #4]
   d74d8:	7b31      	ldrb	r1, [r6, #12]
   d74da:	7b72      	ldrb	r2, [r6, #13]
   d74dc:	745a      	strb	r2, [r3, #17]
   d74de:	60d8      	str	r0, [r3, #12]
   d74e0:	721c      	strb	r4, [r3, #8]
   d74e2:	7419      	strb	r1, [r3, #16]
  return true;
   d74e4:	2001      	movs	r0, #1
   d74e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d74ea:	213a      	movs	r1, #58	; 0x3a
   d74ec:	4620      	mov	r0, r4
   d74ee:	f7ff ff27 	bl	d7340 <_ZN9SdSpiCard11cardCommandEhm>
   d74f2:	b138      	cbz	r0, d7504 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d74f4:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d74f6:	4620      	mov	r0, r4
   d74f8:	7023      	strb	r3, [r4, #0]
   d74fa:	f7ff fec8 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d74fe:	2000      	movs	r0, #0
}
   d7500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7504:	6860      	ldr	r0, [r4, #4]
   d7506:	f000 f94e 	bl	d77a6 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d750a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d750e:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7510:	bf04      	itt	eq
   d7512:	2303      	moveq	r3, #3
   d7514:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7516:	6860      	ldr	r0, [r4, #4]
   d7518:	f000 f945 	bl	d77a6 <_ZN14SdSpiAltDriver7receiveEv>
   d751c:	6860      	ldr	r0, [r4, #4]
   d751e:	f000 f942 	bl	d77a6 <_ZN14SdSpiAltDriver7receiveEv>
   d7522:	6860      	ldr	r0, [r4, #4]
   d7524:	f000 f93f 	bl	d77a6 <_ZN14SdSpiAltDriver7receiveEv>
   d7528:	e7d0      	b.n	d74cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d752a:	bf00      	nop
   d752c:	0003d090 	.word	0x0003d090

000d7530 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7530:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7532:	7a83      	ldrb	r3, [r0, #10]
   d7534:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7536:	bf18      	it	ne
   d7538:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d753a:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d753c:	460a      	mov	r2, r1
   d753e:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7540:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7542:	f7ff fefd 	bl	d7340 <_ZN9SdSpiCard11cardCommandEhm>
   d7546:	b110      	cbz	r0, d754e <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7548:	2330      	movs	r3, #48	; 0x30
   d754a:	7023      	strb	r3, [r4, #0]
   d754c:	e00b      	b.n	d7566 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d754e:	4629      	mov	r1, r5
   d7550:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7554:	4620      	mov	r0, r4
   d7556:	f7ff fead 	bl	d72b4 <_ZN9SdSpiCard8readDataEPhj>
   d755a:	4605      	mov	r5, r0
   d755c:	b118      	cbz	r0, d7566 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d755e:	4620      	mov	r0, r4
   d7560:	f7ff fe95 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7564:	e003      	b.n	d756e <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d7566:	4620      	mov	r0, r4
   d7568:	f7ff fe91 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d756c:	2500      	movs	r5, #0
}
   d756e:	4628      	mov	r0, r5
   d7570:	bd38      	pop	{r3, r4, r5, pc}

000d7572 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7572:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d7574:	7a83      	ldrb	r3, [r0, #10]
   d7576:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7578:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d757a:	bf18      	it	ne
   d757c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d757e:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7580:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7582:	f7ff fedd 	bl	d7340 <_ZN9SdSpiCard11cardCommandEhm>
   d7586:	b130      	cbz	r0, d7596 <_ZN9SdSpiCard9readStartEm+0x24>
   d7588:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d758a:	4620      	mov	r0, r4
   d758c:	7023      	strb	r3, [r4, #0]
   d758e:	f7ff fe7e 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7592:	2000      	movs	r0, #0
   d7594:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d7596:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7598:	bd10      	pop	{r4, pc}

000d759a <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d759a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d759c:	2200      	movs	r2, #0
   d759e:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d75a0:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d75a2:	f7ff fecd 	bl	d7340 <_ZN9SdSpiCard11cardCommandEhm>
   d75a6:	b130      	cbz	r0, d75b6 <_ZN9SdSpiCard8readStopEv+0x1c>
   d75a8:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d75aa:	4620      	mov	r0, r4
   d75ac:	7023      	strb	r3, [r4, #0]
   d75ae:	f7ff fe6e 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d75b2:	2000      	movs	r0, #0
   d75b4:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d75b6:	4620      	mov	r0, r4
   d75b8:	f7ff fe69 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d75bc:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d75be:	bd10      	pop	{r4, pc}

000d75c0 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d75c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d75c2:	4605      	mov	r5, r0
   d75c4:	4616      	mov	r6, r2
   d75c6:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d75c8:	f7ff ffd3 	bl	d7572 <_ZN9SdSpiCard9readStartEm>
   d75cc:	b198      	cbz	r0, d75f6 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d75ce:	2400      	movs	r4, #0
   d75d0:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d75d2:	429f      	cmp	r7, r3
   d75d4:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d75d8:	d908      	bls.n	d75ec <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d75da:	f44f 7200 	mov.w	r2, #512	; 0x200
   d75de:	4628      	mov	r0, r5
   d75e0:	f7ff fe68 	bl	d72b4 <_ZN9SdSpiCard8readDataEPhj>
   d75e4:	3401      	adds	r4, #1
   d75e6:	2800      	cmp	r0, #0
   d75e8:	d1f2      	bne.n	d75d0 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d75ea:	e004      	b.n	d75f6 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d75ec:	4628      	mov	r0, r5
}
   d75ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d75f2:	f7ff bfd2 	b.w	d759a <_ZN9SdSpiCard8readStopEv>
}
   d75f6:	2000      	movs	r0, #0
   d75f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75fa <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d75fa:	b538      	push	{r3, r4, r5, lr}
   d75fc:	4604      	mov	r4, r0
   d75fe:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7600:	6840      	ldr	r0, [r0, #4]
   d7602:	f000 f8eb 	bl	d77dc <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d7606:	f44f 7200 	mov.w	r2, #512	; 0x200
   d760a:	4629      	mov	r1, r5
   d760c:	6860      	ldr	r0, [r4, #4]
   d760e:	f000 f8e9 	bl	d77e4 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7612:	21ff      	movs	r1, #255	; 0xff
   d7614:	6860      	ldr	r0, [r4, #4]
   d7616:	f000 f8e1 	bl	d77dc <_ZN14SdSpiAltDriver4sendEh>
   d761a:	21ff      	movs	r1, #255	; 0xff
   d761c:	6860      	ldr	r0, [r4, #4]
   d761e:	f000 f8dd 	bl	d77dc <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7622:	6860      	ldr	r0, [r4, #4]
   d7624:	f000 f8bf 	bl	d77a6 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d7628:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d762a:	f000 001f 	and.w	r0, r0, #31
   d762e:	2805      	cmp	r0, #5
   d7630:	d006      	beq.n	d7640 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7632:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7634:	4620      	mov	r0, r4
   d7636:	7023      	strb	r3, [r4, #0]
   d7638:	f7ff fe29 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d763c:	2000      	movs	r0, #0
   d763e:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d7640:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7642:	bd38      	pop	{r3, r4, r5, pc}

000d7644 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7644:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7646:	7a83      	ldrb	r3, [r0, #10]
   d7648:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d764a:	bf18      	it	ne
   d764c:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d764e:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7650:	460a      	mov	r2, r1
   d7652:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7654:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7656:	f7ff fe73 	bl	d7340 <_ZN9SdSpiCard11cardCommandEhm>
   d765a:	4606      	mov	r6, r0
   d765c:	b108      	cbz	r0, d7662 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d765e:	2332      	movs	r3, #50	; 0x32
   d7660:	e01d      	b.n	d769e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d7662:	462a      	mov	r2, r5
   d7664:	21fe      	movs	r1, #254	; 0xfe
   d7666:	4620      	mov	r0, r4
   d7668:	f7ff ffc7 	bl	d75fa <_ZN9SdSpiCard9writeDataEhPKh>
   d766c:	b1c0      	cbz	r0, d76a0 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d766e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7672:	4620      	mov	r0, r4
   d7674:	f7ff fe4f 	bl	d7316 <_ZN9SdSpiCard11waitNotBusyEt>
   d7678:	4605      	mov	r5, r0
   d767a:	b908      	cbnz	r0, d7680 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d767c:	235a      	movs	r3, #90	; 0x5a
   d767e:	e00e      	b.n	d769e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d7680:	4632      	mov	r2, r6
   d7682:	210d      	movs	r1, #13
   d7684:	4620      	mov	r0, r4
   d7686:	f7ff fe5b 	bl	d7340 <_ZN9SdSpiCard11cardCommandEhm>
   d768a:	b938      	cbnz	r0, d769c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d768c:	6860      	ldr	r0, [r4, #4]
   d768e:	f000 f88a 	bl	d77a6 <_ZN14SdSpiAltDriver7receiveEv>
   d7692:	b918      	cbnz	r0, d769c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d7694:	4620      	mov	r0, r4
   d7696:	f7ff fdfa 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d769a:	e005      	b.n	d76a8 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d769c:	2329      	movs	r3, #41	; 0x29
   d769e:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d76a0:	4620      	mov	r0, r4
   d76a2:	f7ff fdf4 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d76a6:	2500      	movs	r5, #0
}
   d76a8:	4628      	mov	r0, r5
   d76aa:	bd70      	pop	{r4, r5, r6, pc}

000d76ac <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d76ac:	b538      	push	{r3, r4, r5, lr}
   d76ae:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d76b0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d76b4:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d76b6:	f7ff fe2e 	bl	d7316 <_ZN9SdSpiCard11waitNotBusyEt>
   d76ba:	b910      	cbnz	r0, d76c2 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d76bc:	235b      	movs	r3, #91	; 0x5b
   d76be:	7023      	strb	r3, [r4, #0]
   d76c0:	e005      	b.n	d76ce <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d76c2:	462a      	mov	r2, r5
   d76c4:	21fc      	movs	r1, #252	; 0xfc
   d76c6:	4620      	mov	r0, r4
   d76c8:	f7ff ff97 	bl	d75fa <_ZN9SdSpiCard9writeDataEhPKh>
   d76cc:	b918      	cbnz	r0, d76d6 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d76ce:	4620      	mov	r0, r4
   d76d0:	f7ff fddd 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d76d4:	2000      	movs	r0, #0
}
   d76d6:	bd38      	pop	{r3, r4, r5, pc}

000d76d8 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d76d8:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d76da:	7a83      	ldrb	r3, [r0, #10]
   d76dc:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d76de:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d76e0:	bf18      	it	ne
   d76e2:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d76e4:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d76e6:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d76e8:	f7ff fe2a 	bl	d7340 <_ZN9SdSpiCard11cardCommandEhm>
   d76ec:	b130      	cbz	r0, d76fc <_ZN9SdSpiCard10writeStartEm+0x24>
   d76ee:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d76f0:	4620      	mov	r0, r4
   d76f2:	7023      	strb	r3, [r4, #0]
   d76f4:	f7ff fdcb 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d76f8:	2000      	movs	r0, #0
   d76fa:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d76fc:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d76fe:	bd10      	pop	{r4, pc}

000d7700 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7700:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7702:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7706:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7708:	f7ff fe05 	bl	d7316 <_ZN9SdSpiCard11waitNotBusyEt>
   d770c:	4605      	mov	r5, r0
   d770e:	b120      	cbz	r0, d771a <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7710:	21fd      	movs	r1, #253	; 0xfd
   d7712:	6860      	ldr	r0, [r4, #4]
   d7714:	f000 f862 	bl	d77dc <_ZN14SdSpiAltDriver4sendEh>
   d7718:	e001      	b.n	d771e <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d771a:	2356      	movs	r3, #86	; 0x56
   d771c:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d771e:	4620      	mov	r0, r4
   d7720:	f7ff fdb5 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7724:	4628      	mov	r0, r5
   d7726:	bd38      	pop	{r3, r4, r5, pc}

000d7728 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d772a:	4605      	mov	r5, r0
   d772c:	4616      	mov	r6, r2
   d772e:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d7730:	f7ff ffd2 	bl	d76d8 <_ZN9SdSpiCard10writeStartEm>
   d7734:	b170      	cbz	r0, d7754 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d7736:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7738:	42bc      	cmp	r4, r7
   d773a:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d773e:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7740:	d004      	beq.n	d774c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d7742:	f7ff ffb3 	bl	d76ac <_ZN9SdSpiCard9writeDataEPKh>
   d7746:	b128      	cbz	r0, d7754 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7748:	3401      	adds	r4, #1
   d774a:	e7f5      	b.n	d7738 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d774c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d7750:	f7ff bfd6 	b.w	d7700 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d7754:	4628      	mov	r0, r5
   d7756:	f7ff fd9a 	bl	d728e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d775a:	2000      	movs	r0, #0
   d775c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d775e <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d775e:	f000 b9d7 	b.w	d7b10 <HAL_Pin_Map>

000d7762 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d7762:	f000 b9d5 	b.w	d7b10 <HAL_Pin_Map>

000d7766 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d7766:	f000 b9d3 	b.w	d7b10 <HAL_Pin_Map>
	...

000d776c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d776c:	4b01      	ldr	r3, [pc, #4]	; (d7774 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d776e:	2201      	movs	r2, #1
   d7770:	701a      	strb	r2, [r3, #0]
   d7772:	4770      	bx	lr
   d7774:	2003e318 	.word	0x2003e318

000d7778 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7778:	1d01      	adds	r1, r0, #4
   d777a:	6800      	ldr	r0, [r0, #0]
   d777c:	f000 be4c 	b.w	d8418 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d7780 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d7780:	b510      	push	{r4, lr}
   d7782:	4604      	mov	r4, r0
  m_csPin = csPin;
   d7784:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d7786:	6800      	ldr	r0, [r0, #0]
   d7788:	f000 fe08 	bl	d839c <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d778c:	7d20      	ldrb	r0, [r4, #20]
   d778e:	2101      	movs	r1, #1
   d7790:	f004 fb3e 	bl	dbe10 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d7794:	7d20      	ldrb	r0, [r4, #20]
   d7796:	2101      	movs	r1, #1
}
   d7798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d779c:	f004 bb49 	b.w	dbe32 <digitalWrite>

000d77a0 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d77a0:	6800      	ldr	r0, [r0, #0]
   d77a2:	f000 be20 	b.w	d83e6 <_ZN8SPIClass14endTransactionEv>

000d77a6 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d77a6:	21ff      	movs	r1, #255	; 0xff
   d77a8:	6800      	ldr	r0, [r0, #0]
   d77aa:	f000 bed7 	b.w	d855c <_ZN8SPIClass8transferEh>
	...

000d77b0 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d77b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d77b2:	4b08      	ldr	r3, [pc, #32]	; (d77d4 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d77b4:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d77b6:	2500      	movs	r5, #0
   d77b8:	4c07      	ldr	r4, [pc, #28]	; (d77d8 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d77ba:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d77bc:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d77be:	4613      	mov	r3, r2
   d77c0:	460a      	mov	r2, r1
   d77c2:	4629      	mov	r1, r5
   d77c4:	f000 fed0 	bl	d8568 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d77c8:	7823      	ldrb	r3, [r4, #0]
   d77ca:	2b00      	cmp	r3, #0
   d77cc:	d0fc      	beq.n	d77c8 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d77ce:	2000      	movs	r0, #0
   d77d0:	b003      	add	sp, #12
   d77d2:	bd30      	pop	{r4, r5, pc}
   d77d4:	000d776d 	.word	0x000d776d
   d77d8:	2003e318 	.word	0x2003e318

000d77dc <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d77dc:	6800      	ldr	r0, [r0, #0]
   d77de:	f000 bebd 	b.w	d855c <_ZN8SPIClass8transferEh>
	...

000d77e4 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d77e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d77e6:	4b07      	ldr	r3, [pc, #28]	; (d7804 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d77e8:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d77ea:	2500      	movs	r5, #0
   d77ec:	4c06      	ldr	r4, [pc, #24]	; (d7808 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d77ee:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d77f0:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d77f2:	4613      	mov	r3, r2
   d77f4:	462a      	mov	r2, r5
   d77f6:	f000 feb7 	bl	d8568 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d77fa:	7823      	ldrb	r3, [r4, #0]
   d77fc:	2b00      	cmp	r3, #0
   d77fe:	d0fc      	beq.n	d77fa <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7800:	b003      	add	sp, #12
   d7802:	bd30      	pop	{r4, r5, pc}
   d7804:	000d776d 	.word	0x000d776d
   d7808:	2003e318 	.word	0x2003e318

000d780c <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d780c:	f000 b980 	b.w	d7b10 <HAL_Pin_Map>

000d7810 <_ZN13SFE_UBLOX_GPSC1Ev>:
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "SparkFun_Ublox_Arduino_Library.h"

SFE_UBLOX_GPS::SFE_UBLOX_GPS(void)
   d7810:	b570      	push	{r4, r5, r6, lr}
   d7812:	2342      	movs	r3, #66	; 0x42
   d7814:	2500      	movs	r5, #0
   d7816:	2610      	movs	r6, #16
   d7818:	4604      	mov	r4, r0
   d781a:	8105      	strh	r5, [r0, #8]
   d781c:	7285      	strb	r5, [r0, #10]
   d781e:	72c5      	strb	r5, [r0, #11]
   d7820:	7305      	strb	r5, [r0, #12]
   d7822:	6145      	str	r5, [r0, #20]
   d7824:	7603      	strb	r3, [r0, #24]
   d7826:	4632      	mov	r2, r6
   d7828:	4629      	mov	r1, r5
   d782a:	305c      	adds	r0, #92	; 0x5c
   d782c:	f005 fb01 	bl	dce32 <memset>
   d7830:	f104 0319 	add.w	r3, r4, #25
   d7834:	6663      	str	r3, [r4, #100]	; 0x64
   d7836:	4632      	mov	r2, r6
   d7838:	4629      	mov	r1, r5
   d783a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   d783e:	f005 faf8 	bl	dce32 <memset>
   d7842:	f104 031b 	add.w	r3, r4, #27
   d7846:	6763      	str	r3, [r4, #116]	; 0x74
   d7848:	2319      	movs	r3, #25
   d784a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
   d784e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   d7852:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
   d7856:	f8a4 5086 	strh.w	r5, [r4, #134]	; 0x86
{
  // Constructor
}
   d785a:	4620      	mov	r0, r4
   d785c:	bd70      	pop	{r4, r5, r6, pc}

000d785e <_ZN13SFE_UBLOX_GPS5beginER7TwoWire>:

//Initialize the Serial port
void SFE_UBLOX_GPS::begin(TwoWire &wirePort)
{
   d785e:	b510      	push	{r4, lr}
	commType = COMM_TYPE_I2C;
   d7860:	2300      	movs	r3, #0
   d7862:	7303      	strb	r3, [r0, #12]
  // Constructor
}

//Initialize the Serial port
void SFE_UBLOX_GPS::begin(TwoWire &wirePort)
{
   d7864:	4604      	mov	r4, r0
	commType = COMM_TYPE_I2C;
	_i2cPort = &wirePort; //Grab which port the user wants us to use
   d7866:	6101      	str	r1, [r0, #16]

	//We expect caller to begin their I2C port, with the speed of their choice external to the library
	//But if they forget, we start the hardware here.
	_i2cPort->begin();
   d7868:	4608      	mov	r0, r1
   d786a:	f003 ff2b 	bl	db6c4 <_ZN7TwoWire5beginEv>
//Sets the internal global variable that is the I2C address we read from
//This does not change the I2C address of the module
//0x42 is the default but can be changed via software command
void SFE_UBLOX_GPS::setI2CReadAddress(uint8_t deviceAddress)
{
	_gpsI2Caddress = deviceAddress; //Store the I2C address from user
   d786e:	2342      	movs	r3, #66	; 0x42
   d7870:	7623      	strb	r3, [r4, #24]
   d7872:	bd10      	pop	{r4, pc}

000d7874 <_ZN13SFE_UBLOX_GPS11processRTCMEh>:

//This function is called for each byte of an RTCM frame
//Ths user can overwrite this function and process the RTCM frame as they please
//Bytes can be piped to Serial or other interface. The consumer could be a radio or the internet (Ntrip broadcaster)
void SFE_UBLOX_GPS::processRTCM(uint8_t incoming)
{
   d7874:	4770      	bx	lr

000d7876 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket>:
  incomingUBX->counter++;
}

//Once a packet has been received and validated, identify this packet's class/id and update internal flags
void SFE_UBLOX_GPS::processUBXpacket(ubxPacket *msg)
{
   d7876:	b510      	push	{r4, lr}
  if (msg->cls == UBX_CLASS_ACK)
   d7878:	780b      	ldrb	r3, [r1, #0]
   d787a:	2b05      	cmp	r3, #5
   d787c:	d10f      	bne.n	d789e <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x28>
  {
    //We don't want to store ACK packets, just set commandAck flag
    if (msg->id == UBX_ACK_ACK)
   d787e:	784b      	ldrb	r3, [r1, #1]
   d7880:	2b01      	cmp	r3, #1
   d7882:	d10c      	bne.n	d789e <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x28>
    {
      if (msg->payload[0] == packetCfg.cls && msg->payload[1] == packetCfg.id)
   d7884:	688a      	ldr	r2, [r1, #8]
   d7886:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
   d788a:	7814      	ldrb	r4, [r2, #0]
   d788c:	428c      	cmp	r4, r1
   d788e:	d106      	bne.n	d789e <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket+0x28>
   d7890:	7851      	ldrb	r1, [r2, #1]
   d7892:	f890 206d 	ldrb.w	r2, [r0, #109]	; 0x6d
   d7896:	4291      	cmp	r1, r2
      {
        //The ack we just received matched the CLS/ID of last packetCfg sent
        //Serial.println("Command sent/ack'd successfully");
        commandAck = true;
   d7898:	bf08      	it	eq
   d789a:	f880 3084 	strbeq.w	r3, [r0, #132]	; 0x84
   d789e:	bd10      	pop	{r4, pc}

000d78a0 <_ZN13SFE_UBLOX_GPS11isConnectedEv>:
  return (true);
}

//Returns true if I2C device ack's
boolean SFE_UBLOX_GPS::isConnected()
{
   d78a0:	b510      	push	{r4, lr}
   d78a2:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   d78a4:	7e01      	ldrb	r1, [r0, #24]
   d78a6:	6900      	ldr	r0, [r0, #16]
   d78a8:	f003 ff43 	bl	db732 <_ZN7TwoWire17beginTransmissionEh>
  if (_i2cPort->endTransmission() != 0)
   d78ac:	6920      	ldr	r0, [r4, #16]
   d78ae:	f003 ff4b 	bl	db748 <_ZN7TwoWire15endTransmissionEv>
    return (false); //Sensor did not ACK
  return (true);
}
   d78b2:	fab0 f080 	clz	r0, r0
   d78b6:	0940      	lsrs	r0, r0, #5
   d78b8:	bd10      	pop	{r4, pc}

000d78ba <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket>:
void SFE_UBLOX_GPS::calcChecksum(ubxPacket *msg)
{
  msg->checksumA = 0;
  msg->checksumB = 0;

  msg->checksumA += msg->cls;
   d78ba:	780a      	ldrb	r2, [r1, #0]
  msg->checksumB += msg->checksumA;

  msg->checksumA += msg->id;
   d78bc:	7848      	ldrb	r0, [r1, #1]
  return (true);
}

//Given a message, calc and store the two byte "8-Bit Fletcher" checksum
void SFE_UBLOX_GPS::calcChecksum(ubxPacket *msg)
{
   d78be:	b530      	push	{r4, r5, lr}
  msg->checksumB = 0;

  msg->checksumA += msg->cls;
  msg->checksumB += msg->checksumA;

  msg->checksumA += msg->id;
   d78c0:	4410      	add	r0, r2
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len & 0xFF);
   d78c2:	884d      	ldrh	r5, [r1, #2]
  msg->checksumB = 0;

  msg->checksumA += msg->cls;
  msg->checksumB += msg->checksumA;

  msg->checksumA += msg->id;
   d78c4:	b2c3      	uxtb	r3, r0
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len & 0xFF);
   d78c6:	195c      	adds	r4, r3, r5
   d78c8:	b2e4      	uxtb	r4, r4
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len >> 8);
  msg->checksumB += msg->checksumA;
   d78ca:	441a      	add	r2, r3
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len & 0xFF);
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len >> 8);
   d78cc:	eb04 2015 	add.w	r0, r4, r5, lsr #8
   d78d0:	b2c0      	uxtb	r0, r0
  msg->checksumB += msg->checksumA;
   d78d2:	18a3      	adds	r3, r4, r2
   d78d4:	4403      	add	r3, r0
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len & 0xFF);
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len >> 8);
   d78d6:	7308      	strb	r0, [r1, #12]
  msg->checksumB += msg->checksumA;
   d78d8:	734b      	strb	r3, [r1, #13]
   d78da:	2200      	movs	r2, #0

  for (uint16_t i = 0 ; i < msg->len; i++)
   d78dc:	b293      	uxth	r3, r2
   d78de:	42ab      	cmp	r3, r5
   d78e0:	d20a      	bcs.n	d78f8 <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket+0x3e>
  {
    msg->checksumA += msg->payload[i];
   d78e2:	688b      	ldr	r3, [r1, #8]
   d78e4:	5c98      	ldrb	r0, [r3, r2]
   d78e6:	7b0b      	ldrb	r3, [r1, #12]
   d78e8:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   d78ea:	7b48      	ldrb	r0, [r1, #13]
  msg->checksumA += (msg->len >> 8);
  msg->checksumB += msg->checksumA;

  for (uint16_t i = 0 ; i < msg->len; i++)
  {
    msg->checksumA += msg->payload[i];
   d78ec:	b2db      	uxtb	r3, r3
   d78ee:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   d78f0:	4403      	add	r3, r0
   d78f2:	734b      	strb	r3, [r1, #13]
   d78f4:	3201      	adds	r2, #1
  msg->checksumB += msg->checksumA;

  msg->checksumA += (msg->len >> 8);
  msg->checksumB += msg->checksumA;

  for (uint16_t i = 0 ; i < msg->len; i++)
   d78f6:	e7f1      	b.n	d78dc <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket+0x22>
   d78f8:	bd30      	pop	{r4, r5, pc}

000d78fa <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket>:
}	

//Given a character, file it away into the uxb packet structure
//Set valid = true once sentence is completely received and passes CRC
void SFE_UBLOX_GPS::processUBX(uint8_t incoming, ubxPacket *incomingUBX)
{
   d78fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (incomingUBX->counter == 0)
   d78fc:	7913      	ldrb	r3, [r2, #4]
}	

//Given a character, file it away into the uxb packet structure
//Set valid = true once sentence is completely received and passes CRC
void SFE_UBLOX_GPS::processUBX(uint8_t incoming, ubxPacket *incomingUBX)
{
   d78fe:	4606      	mov	r6, r0
   d7900:	460d      	mov	r5, r1
   d7902:	4614      	mov	r4, r2
  if (incomingUBX->counter == 0)
   d7904:	b90b      	cbnz	r3, d790a <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x10>
  {
    incomingUBX->cls = incoming;
   d7906:	7021      	strb	r1, [r4, #0]
   d7908:	e02c      	b.n	d7964 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
  }
  else if (incomingUBX->counter == 1)
   d790a:	2b01      	cmp	r3, #1
   d790c:	d101      	bne.n	d7912 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x18>
  {
    incomingUBX->id = incoming;
   d790e:	7061      	strb	r1, [r4, #1]
   d7910:	e028      	b.n	d7964 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
  }
  else if (incomingUBX->counter == 2) //Len LSB
   d7912:	2b02      	cmp	r3, #2
   d7914:	d004      	beq.n	d7920 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x26>
  {
    incomingUBX->len = incoming;
  }
  else if (incomingUBX->counter == 3) //Len MSB
   d7916:	2b03      	cmp	r3, #3
   d7918:	d104      	bne.n	d7924 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x2a>
  {
    incomingUBX->len |= incoming << 8;
   d791a:	8853      	ldrh	r3, [r2, #2]
   d791c:	ea43 2501 	orr.w	r5, r3, r1, lsl #8
   d7920:	8065      	strh	r5, [r4, #2]
   d7922:	e01f      	b.n	d7964 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
  }
  else if (incomingUBX->counter == incomingUBX->len + 4) //ChecksumA
   d7924:	8852      	ldrh	r2, [r2, #2]
   d7926:	1d11      	adds	r1, r2, #4
   d7928:	428b      	cmp	r3, r1
   d792a:	d101      	bne.n	d7930 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x36>
  {
    incomingUBX->checksumA = incoming;
   d792c:	7325      	strb	r5, [r4, #12]
   d792e:	e019      	b.n	d7964 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
  }
  else if (incomingUBX->counter == incomingUBX->len + 5) //ChecksumB
   d7930:	3205      	adds	r2, #5
   d7932:	4293      	cmp	r3, r2
   d7934:	d112      	bne.n	d795c <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x62>
    //Validate this sentence

    uint8_t tempA = incomingUBX->checksumA;
    uint8_t tempB = incoming;

    calcChecksum(incomingUBX); //Calc checksum across this message. Results stored in message.
   d7936:	4621      	mov	r1, r4
  }
  else if (incomingUBX->counter == incomingUBX->len + 5) //ChecksumB
  {
    //Validate this sentence

    uint8_t tempA = incomingUBX->checksumA;
   d7938:	7b27      	ldrb	r7, [r4, #12]
    uint8_t tempB = incoming;

    calcChecksum(incomingUBX); //Calc checksum across this message. Results stored in message.
   d793a:	f7ff ffbe 	bl	d78ba <_ZN13SFE_UBLOX_GPS12calcChecksumEP9ubxPacket>

    currentSentence = NONE; //We're done! Reset the sentence to being looking for a new start char
   d793e:	2300      	movs	r3, #0
   d7940:	72b3      	strb	r3, [r6, #10]

    if (incomingUBX->checksumA == tempA && incomingUBX->checksumB == tempB)
   d7942:	7b23      	ldrb	r3, [r4, #12]
   d7944:	42bb      	cmp	r3, r7
   d7946:	d10d      	bne.n	d7964 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
   d7948:	7b63      	ldrb	r3, [r4, #13]
   d794a:	42ab      	cmp	r3, r5
   d794c:	d10a      	bne.n	d7964 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
    {
      //Serial.print("Frame cleared: ");
      //printFrame(incomingUBX);

      incomingUBX->valid = true;
   d794e:	2301      	movs	r3, #1
   d7950:	73a3      	strb	r3, [r4, #14]
      processUBXpacket(incomingUBX); //We've got a valid packet, now do something with it
   d7952:	4621      	mov	r1, r4
   d7954:	4630      	mov	r0, r6
   d7956:	f7ff ff8e 	bl	d7876 <_ZN13SFE_UBLOX_GPS16processUBXpacketEP9ubxPacket>
   d795a:	e003      	b.n	d7964 <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket+0x6a>
    }
  }
  else //Load this byte into the appropriate array
  {
    incomingUBX->payload[incomingUBX->counter - 4] = incoming; //Store this byte into payload array
   d795c:	68a2      	ldr	r2, [r4, #8]
   d795e:	4413      	add	r3, r2
   d7960:	f803 5c04 	strb.w	r5, [r3, #-4]
  }

  incomingUBX->counter++;
   d7964:	7923      	ldrb	r3, [r4, #4]
   d7966:	3301      	adds	r3, #1
   d7968:	7123      	strb	r3, [r4, #4]
   d796a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d796c <_ZN13SFE_UBLOX_GPS7processEh>:

//Processes NMEA and UBX binary sentences one byte at a time
//Take a given byte and file it into the proper array
void SFE_UBLOX_GPS::process(uint8_t incoming)
{
  if (currentSentence == NONE || currentSentence == NMEA)
   d796c:	7a83      	ldrb	r3, [r0, #10]
   d796e:	2b01      	cmp	r3, #1
} //end checkUbloxSerial()

//Processes NMEA and UBX binary sentences one byte at a time
//Take a given byte and file it into the proper array
void SFE_UBLOX_GPS::process(uint8_t incoming)
{
   d7970:	b510      	push	{r4, lr}
  if (currentSentence == NONE || currentSentence == NMEA)
   d7972:	d810      	bhi.n	d7996 <_ZN13SFE_UBLOX_GPS7processEh+0x2a>
  {
    if (incoming == 0xB5) //UBX binary frames start with 0xB5
   d7974:	29b5      	cmp	r1, #181	; 0xb5
   d7976:	d104      	bne.n	d7982 <_ZN13SFE_UBLOX_GPS7processEh+0x16>
    {
      //This is the start of a binary sentence. Reset flags.
      //We still don't know the response class
      ubxFrameCounter = 0;
   d7978:	2300      	movs	r3, #0
   d797a:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
      currentSentence = UBX;
   d797e:	2302      	movs	r3, #2
   d7980:	e008      	b.n	d7994 <_ZN13SFE_UBLOX_GPS7processEh+0x28>
    }
    else if (incoming == '$')
   d7982:	2924      	cmp	r1, #36	; 0x24
   d7984:	d101      	bne.n	d798a <_ZN13SFE_UBLOX_GPS7processEh+0x1e>
    {
      currentSentence = NMEA;
   d7986:	2301      	movs	r3, #1
   d7988:	e004      	b.n	d7994 <_ZN13SFE_UBLOX_GPS7processEh+0x28>
    }
    else if (incoming == 0xD3) //RTCM frames start with 0xD3
   d798a:	29d3      	cmp	r1, #211	; 0xd3
   d798c:	d103      	bne.n	d7996 <_ZN13SFE_UBLOX_GPS7processEh+0x2a>
    {
      rtcmFrameCounter = 0;
   d798e:	2300      	movs	r3, #0
   d7990:	8103      	strh	r3, [r0, #8]
      currentSentence = RTCM;
   d7992:	2303      	movs	r3, #3
   d7994:	7283      	strb	r3, [r0, #10]
      //This character is unknown or we missed the previous start of a sentence
    }
  }

  //Depending on the sentence, pass the character to the individual processor
  if (currentSentence == UBX)
   d7996:	7a83      	ldrb	r3, [r0, #10]
   d7998:	2b02      	cmp	r3, #2
   d799a:	d12e      	bne.n	d79fa <_ZN13SFE_UBLOX_GPS7processEh+0x8e>
  {
    //Decide what type of response this is
    if (ubxFrameCounter == 0 && incoming != 0xB5)
   d799c:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
   d79a0:	b923      	cbnz	r3, d79ac <_ZN13SFE_UBLOX_GPS7processEh+0x40>
   d79a2:	29b5      	cmp	r1, #181	; 0xb5
   d79a4:	d018      	beq.n	d79d8 <_ZN13SFE_UBLOX_GPS7processEh+0x6c>
      currentSentence = NONE; //Something went wrong. Reset.
   d79a6:	2200      	movs	r2, #0
   d79a8:	7282      	strb	r2, [r0, #10]
   d79aa:	e015      	b.n	d79d8 <_ZN13SFE_UBLOX_GPS7processEh+0x6c>
    else if (ubxFrameCounter == 1 && incoming != 0x62)
   d79ac:	2b01      	cmp	r3, #1
   d79ae:	d101      	bne.n	d79b4 <_ZN13SFE_UBLOX_GPS7processEh+0x48>
   d79b0:	2962      	cmp	r1, #98	; 0x62
   d79b2:	e7f7      	b.n	d79a4 <_ZN13SFE_UBLOX_GPS7processEh+0x38>
      currentSentence = NONE; //Something went wrong. Reset.
    else if (ubxFrameCounter == 2) //Class
   d79b4:	2b02      	cmp	r3, #2
   d79b6:	d10f      	bne.n	d79d8 <_ZN13SFE_UBLOX_GPS7processEh+0x6c>
    {
      //We can now identify the type of response
      if (incoming == UBX_CLASS_ACK)
   d79b8:	2905      	cmp	r1, #5
   d79ba:	f04f 0200 	mov.w	r2, #0
      {
        ubxFrameClass = CLASS_ACK;
   d79be:	bf01      	itttt	eq
   d79c0:	2401      	moveq	r4, #1
   d79c2:	72c4      	strbeq	r4, [r0, #11]
        packetAck.counter = 0;
   d79c4:	f880 2060 	strbeq.w	r2, [r0, #96]	; 0x60
        packetAck.valid = false;
   d79c8:	f880 206a 	strbeq.w	r2, [r0, #106]	; 0x6a
      }
      else
      {
        ubxFrameClass = CLASS_NOT_AN_ACK;
   d79cc:	bf1e      	ittt	ne
   d79ce:	72c3      	strbne	r3, [r0, #11]
        packetCfg.counter = 0;
   d79d0:	f880 2070 	strbne.w	r2, [r0, #112]	; 0x70
        packetCfg.valid = false;
   d79d4:	f880 207a 	strbne.w	r2, [r0, #122]	; 0x7a
      }
    }

    ubxFrameCounter++;
   d79d8:	3301      	adds	r3, #1
   d79da:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85

    //Depending on this frame's class, pass different structs and payload arrays
    if (ubxFrameClass == CLASS_ACK)
   d79de:	7ac3      	ldrb	r3, [r0, #11]
   d79e0:	2b01      	cmp	r3, #1
   d79e2:	d102      	bne.n	d79ea <_ZN13SFE_UBLOX_GPS7processEh+0x7e>
      processUBX(incoming, &packetAck);
   d79e4:	f100 025c 	add.w	r2, r0, #92	; 0x5c
   d79e8:	e003      	b.n	d79f2 <_ZN13SFE_UBLOX_GPS7processEh+0x86>
    else if (ubxFrameClass == CLASS_NOT_AN_ACK)
   d79ea:	2b02      	cmp	r3, #2
   d79ec:	d10e      	bne.n	d7a0c <_ZN13SFE_UBLOX_GPS7processEh+0xa0>
      processUBX(incoming, &packetCfg);
   d79ee:	f100 026c 	add.w	r2, r0, #108	; 0x6c
  }
  else if (currentSentence == RTCM)
  {
    processRTCM(incoming); //Deal with RTCM bytes
  }
}
   d79f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    //Depending on this frame's class, pass different structs and payload arrays
    if (ubxFrameClass == CLASS_ACK)
      processUBX(incoming, &packetAck);
    else if (ubxFrameClass == CLASS_NOT_AN_ACK)
      processUBX(incoming, &packetCfg);
   d79f6:	f7ff bf80 	b.w	d78fa <_ZN13SFE_UBLOX_GPS10processUBXEhP9ubxPacket>
    else
      ; //Serial.println("No frame class set");
  }
  else if (currentSentence == NMEA)
   d79fa:	2b01      	cmp	r3, #1
   d79fc:	d102      	bne.n	d7a04 <_ZN13SFE_UBLOX_GPS7processEh+0x98>
  {
	processNMEA(incoming); //Process each NMEA character
   d79fe:	f7fc fdcd 	bl	d459c <_ZN13SFE_UBLOX_GPS11processNMEAEc>
   d7a02:	bd10      	pop	{r4, pc}
  }
  else if (currentSentence == RTCM)
   d7a04:	2b03      	cmp	r3, #3
   d7a06:	d101      	bne.n	d7a0c <_ZN13SFE_UBLOX_GPS7processEh+0xa0>
  {
    processRTCM(incoming); //Deal with RTCM bytes
   d7a08:	f7ff ff34 	bl	d7874 <_ZN13SFE_UBLOX_GPS11processRTCMEh>
   d7a0c:	bd10      	pop	{r4, pc}

000d7a0e <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv>:
}

//Polls I2C for data, passing any new bytes to process()
//Times out after given amount of time
boolean SFE_UBLOX_GPS::checkUbloxI2C()
{
   d7a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a10:	4604      	mov	r4, r0
   d7a12:	f000 f915 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
   d7a16:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   d7a1a:	1ac0      	subs	r0, r0, r3
   d7a1c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   d7a20:	4298      	cmp	r0, r3
   d7a22:	d31c      	bcc.n	d7a5e <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x50>
  {
    //Get the number of bytes available from the module
    uint16_t bytesAvailable = 0;
    _i2cPort->beginTransmission(_gpsI2Caddress);
   d7a24:	7e21      	ldrb	r1, [r4, #24]
   d7a26:	6920      	ldr	r0, [r4, #16]
   d7a28:	f003 fe83 	bl	db732 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD); //0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   d7a2c:	21fd      	movs	r1, #253	; 0xfd
   d7a2e:	6920      	ldr	r0, [r4, #16]
   d7a30:	f7fc fc63 	bl	d42fa <_ZN7TwoWire5writeEi>
    if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   d7a34:	2100      	movs	r1, #0
   d7a36:	6920      	ldr	r0, [r4, #16]
   d7a38:	f003 fe82 	bl	db740 <_ZN7TwoWire15endTransmissionEh>
   d7a3c:	b108      	cbz	r0, d7a42 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x34>
      return (false); //Sensor did not ACK
   d7a3e:	2000      	movs	r0, #0
   d7a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)2);
   d7a42:	2202      	movs	r2, #2
   d7a44:	7e21      	ldrb	r1, [r4, #24]
   d7a46:	6920      	ldr	r0, [r4, #16]
   d7a48:	f003 fe70 	bl	db72c <_ZN7TwoWire11requestFromEhj>
    if (_i2cPort->available())
   d7a4c:	6920      	ldr	r0, [r4, #16]
   d7a4e:	6803      	ldr	r3, [r0, #0]
   d7a50:	691b      	ldr	r3, [r3, #16]
   d7a52:	4798      	blx	r3
   d7a54:	b928      	cbnz	r0, d7a62 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x54>
   d7a56:	f000 f8f3 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
      uint8_t lsb = _i2cPort->read();
      bytesAvailable = (uint16_t)msb << 8 | lsb;
    }

    if (bytesAvailable == 0)
      lastCheck = millis(); //Put off checking to avoid I2C bus traffic
   d7a5a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80

      bytesAvailable -= bytesToRead;
    }
  } //end timed read

  return (true);
   d7a5e:	2001      	movs	r0, #1
   d7a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return (false); //Sensor did not ACK

    _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)2);
    if (_i2cPort->available())
    {
      uint8_t msb = _i2cPort->read();
   d7a62:	6920      	ldr	r0, [r4, #16]
   d7a64:	6803      	ldr	r3, [r0, #0]
   d7a66:	695b      	ldr	r3, [r3, #20]
   d7a68:	4798      	blx	r3
   d7a6a:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   d7a6c:	6920      	ldr	r0, [r4, #16]
   d7a6e:	6803      	ldr	r3, [r0, #0]
   d7a70:	695b      	ldr	r3, [r3, #20]
   d7a72:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   d7a74:	022d      	lsls	r5, r5, #8
   d7a76:	f405 437f 	and.w	r3, r5, #65280	; 0xff00
   d7a7a:	b2c0      	uxtb	r0, r0
    }

    if (bytesAvailable == 0)
   d7a7c:	ea50 0503 	orrs.w	r5, r0, r3
   d7a80:	d0e9      	beq.n	d7a56 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x48>
      lastCheck = millis(); //Put off checking to avoid I2C bus traffic

    while (bytesAvailable)
    {
      _i2cPort->beginTransmission(_gpsI2Caddress);
   d7a82:	7e21      	ldrb	r1, [r4, #24]
   d7a84:	6920      	ldr	r0, [r4, #16]
   d7a86:	f003 fe54 	bl	db732 <_ZN7TwoWire17beginTransmissionEh>
      _i2cPort->write(0xFF); //0xFF is the register to read general NMEA data from
   d7a8a:	21ff      	movs	r1, #255	; 0xff
   d7a8c:	6920      	ldr	r0, [r4, #16]
   d7a8e:	f7fc fc34 	bl	d42fa <_ZN7TwoWire5writeEi>
      if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   d7a92:	2100      	movs	r1, #0
   d7a94:	6920      	ldr	r0, [r4, #16]
   d7a96:	f003 fe53 	bl	db740 <_ZN7TwoWire15endTransmissionEh>
   d7a9a:	4606      	mov	r6, r0
   d7a9c:	2800      	cmp	r0, #0
   d7a9e:	d1ce      	bne.n	d7a3e <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x30>
   d7aa0:	2d20      	cmp	r5, #32
   d7aa2:	462f      	mov	r7, r5
   d7aa4:	bf28      	it	cs
   d7aa6:	2720      	movcs	r7, #32

      //Limit to 32 bytes or whatever the buffer limit is for given platform
      uint16_t bytesToRead = bytesAvailable;
      if (bytesToRead > I2C_BUFFER_LENGTH) bytesToRead = I2C_BUFFER_LENGTH;

      _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   d7aa8:	463a      	mov	r2, r7
   d7aaa:	7e21      	ldrb	r1, [r4, #24]
   d7aac:	6920      	ldr	r0, [r4, #16]
   d7aae:	f003 fe3d 	bl	db72c <_ZN7TwoWire11requestFromEhj>
      if (_i2cPort->available())
   d7ab2:	6920      	ldr	r0, [r4, #16]
   d7ab4:	6803      	ldr	r3, [r0, #0]
   d7ab6:	691b      	ldr	r3, [r3, #16]
   d7ab8:	4798      	blx	r3
   d7aba:	2800      	cmp	r0, #0
   d7abc:	d0bf      	beq.n	d7a3e <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x30>
      {
        for (uint16_t x = 0 ; x < bytesToRead ; x++)
        {
          process(_i2cPort->read()); //Grab the actual character and process it
   d7abe:	6920      	ldr	r0, [r4, #16]
   d7ac0:	6803      	ldr	r3, [r0, #0]
   d7ac2:	695b      	ldr	r3, [r3, #20]
   d7ac4:	4798      	blx	r3
   d7ac6:	3601      	adds	r6, #1
   d7ac8:	b2c1      	uxtb	r1, r0
   d7aca:	4620      	mov	r0, r4
   d7acc:	f7ff ff4e 	bl	d796c <_ZN13SFE_UBLOX_GPS7processEh>
      if (bytesToRead > I2C_BUFFER_LENGTH) bytesToRead = I2C_BUFFER_LENGTH;

      _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
      if (_i2cPort->available())
      {
        for (uint16_t x = 0 ; x < bytesToRead ; x++)
   d7ad0:	b2b3      	uxth	r3, r6
   d7ad2:	429f      	cmp	r7, r3
   d7ad4:	d8f3      	bhi.n	d7abe <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0xb0>
        }
      }
      else
        return (false); //Sensor did not respond

      bytesAvailable -= bytesToRead;
   d7ad6:	1bed      	subs	r5, r5, r7
   d7ad8:	b2ad      	uxth	r5, r5
    }

    if (bytesAvailable == 0)
      lastCheck = millis(); //Put off checking to avoid I2C bus traffic

    while (bytesAvailable)
   d7ada:	2d00      	cmp	r5, #0
   d7adc:	d1d1      	bne.n	d7a82 <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x74>
   d7ade:	e7be      	b.n	d7a5e <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv+0x50>

000d7ae0 <_ZN13SFE_UBLOX_GPS10checkUbloxEv>:
}

//Called regularly to check for available bytes on the user' specified port
boolean SFE_UBLOX_GPS::checkUblox()
{
	if(commType == COMM_TYPE_I2C)
   d7ae0:	7b03      	ldrb	r3, [r0, #12]
   d7ae2:	b90b      	cbnz	r3, d7ae8 <_ZN13SFE_UBLOX_GPS10checkUbloxEv+0x8>
		checkUbloxI2C();
   d7ae4:	f7ff bf93 	b.w	d7a0e <_ZN13SFE_UBLOX_GPS13checkUbloxI2CEv>
	else if(commType == COMM_TYPE_SERIAL)
		checkUbloxSerial();
}
   d7ae8:	4770      	bx	lr

000d7aea <_GLOBAL__sub_I__ZN13SFE_UBLOX_GPSC2Ev>:
   d7aea:	f000 b811 	b.w	d7b10 <HAL_Pin_Map>
	...

000d7af0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7af0:	b508      	push	{r3, lr}
   d7af2:	4b02      	ldr	r3, [pc, #8]	; (d7afc <netdb_freeaddrinfo+0xc>)
   d7af4:	681b      	ldr	r3, [r3, #0]
   d7af6:	689b      	ldr	r3, [r3, #8]
   d7af8:	9301      	str	r3, [sp, #4]
   d7afa:	bd08      	pop	{r3, pc}
   d7afc:	00030268 	.word	0x00030268

000d7b00 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7b00:	b508      	push	{r3, lr}
   d7b02:	4b02      	ldr	r3, [pc, #8]	; (d7b0c <netdb_getaddrinfo+0xc>)
   d7b04:	681b      	ldr	r3, [r3, #0]
   d7b06:	68db      	ldr	r3, [r3, #12]
   d7b08:	9301      	str	r3, [sp, #4]
   d7b0a:	bd08      	pop	{r3, pc}
   d7b0c:	00030268 	.word	0x00030268

000d7b10 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7b10:	b508      	push	{r3, lr}
   d7b12:	4b02      	ldr	r3, [pc, #8]	; (d7b1c <HAL_Pin_Map+0xc>)
   d7b14:	681b      	ldr	r3, [r3, #0]
   d7b16:	681b      	ldr	r3, [r3, #0]
   d7b18:	9301      	str	r3, [sp, #4]
   d7b1a:	bd08      	pop	{r3, pc}
   d7b1c:	0003022c 	.word	0x0003022c

000d7b20 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7b20:	b508      	push	{r3, lr}
   d7b22:	4b02      	ldr	r3, [pc, #8]	; (d7b2c <HAL_Pin_Mode+0xc>)
   d7b24:	681b      	ldr	r3, [r3, #0]
   d7b26:	689b      	ldr	r3, [r3, #8]
   d7b28:	9301      	str	r3, [sp, #4]
   d7b2a:	bd08      	pop	{r3, pc}
   d7b2c:	0003022c 	.word	0x0003022c

000d7b30 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7b30:	b508      	push	{r3, lr}
   d7b32:	4b02      	ldr	r3, [pc, #8]	; (d7b3c <HAL_Get_Pin_Mode+0xc>)
   d7b34:	681b      	ldr	r3, [r3, #0]
   d7b36:	68db      	ldr	r3, [r3, #12]
   d7b38:	9301      	str	r3, [sp, #4]
   d7b3a:	bd08      	pop	{r3, pc}
   d7b3c:	0003022c 	.word	0x0003022c

000d7b40 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7b40:	b508      	push	{r3, lr}
   d7b42:	4b02      	ldr	r3, [pc, #8]	; (d7b4c <HAL_GPIO_Write+0xc>)
   d7b44:	681b      	ldr	r3, [r3, #0]
   d7b46:	691b      	ldr	r3, [r3, #16]
   d7b48:	9301      	str	r3, [sp, #4]
   d7b4a:	bd08      	pop	{r3, pc}
   d7b4c:	0003022c 	.word	0x0003022c

000d7b50 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d7b50:	b508      	push	{r3, lr}
   d7b52:	4b02      	ldr	r3, [pc, #8]	; (d7b5c <HAL_SPI_Begin+0xc>)
   d7b54:	681b      	ldr	r3, [r3, #0]
   d7b56:	681b      	ldr	r3, [r3, #0]
   d7b58:	9301      	str	r3, [sp, #4]
   d7b5a:	bd08      	pop	{r3, pc}
   d7b5c:	00030230 	.word	0x00030230

000d7b60 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d7b60:	b508      	push	{r3, lr}
   d7b62:	4b02      	ldr	r3, [pc, #8]	; (d7b6c <HAL_SPI_Set_Clock_Divider+0xc>)
   d7b64:	681b      	ldr	r3, [r3, #0]
   d7b66:	691b      	ldr	r3, [r3, #16]
   d7b68:	9301      	str	r3, [sp, #4]
   d7b6a:	bd08      	pop	{r3, pc}
   d7b6c:	00030230 	.word	0x00030230

000d7b70 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d7b70:	b508      	push	{r3, lr}
   d7b72:	4b02      	ldr	r3, [pc, #8]	; (d7b7c <HAL_SPI_Send_Receive_Data+0xc>)
   d7b74:	681b      	ldr	r3, [r3, #0]
   d7b76:	695b      	ldr	r3, [r3, #20]
   d7b78:	9301      	str	r3, [sp, #4]
   d7b7a:	bd08      	pop	{r3, pc}
   d7b7c:	00030230 	.word	0x00030230

000d7b80 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d7b80:	b508      	push	{r3, lr}
   d7b82:	4b02      	ldr	r3, [pc, #8]	; (d7b8c <HAL_SPI_Init+0xc>)
   d7b84:	681b      	ldr	r3, [r3, #0]
   d7b86:	69db      	ldr	r3, [r3, #28]
   d7b88:	9301      	str	r3, [sp, #4]
   d7b8a:	bd08      	pop	{r3, pc}
   d7b8c:	00030230 	.word	0x00030230

000d7b90 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d7b90:	b508      	push	{r3, lr}
   d7b92:	4b02      	ldr	r3, [pc, #8]	; (d7b9c <HAL_SPI_Is_Enabled+0xc>)
   d7b94:	681b      	ldr	r3, [r3, #0]
   d7b96:	6a1b      	ldr	r3, [r3, #32]
   d7b98:	9301      	str	r3, [sp, #4]
   d7b9a:	bd08      	pop	{r3, pc}
   d7b9c:	00030230 	.word	0x00030230

000d7ba0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d7ba0:	b508      	push	{r3, lr}
   d7ba2:	4b02      	ldr	r3, [pc, #8]	; (d7bac <HAL_SPI_Info+0xc>)
   d7ba4:	681b      	ldr	r3, [r3, #0]
   d7ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7ba8:	9301      	str	r3, [sp, #4]
   d7baa:	bd08      	pop	{r3, pc}
   d7bac:	00030230 	.word	0x00030230

000d7bb0 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d7bb0:	b508      	push	{r3, lr}
   d7bb2:	4b02      	ldr	r3, [pc, #8]	; (d7bbc <HAL_SPI_DMA_Transfer+0xc>)
   d7bb4:	681b      	ldr	r3, [r3, #0]
   d7bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7bb8:	9301      	str	r3, [sp, #4]
   d7bba:	bd08      	pop	{r3, pc}
   d7bbc:	00030230 	.word	0x00030230

000d7bc0 <HAL_SPI_Begin_Ext>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
   d7bc0:	b508      	push	{r3, lr}
   d7bc2:	4b02      	ldr	r3, [pc, #8]	; (d7bcc <HAL_SPI_Begin_Ext+0xc>)
   d7bc4:	681b      	ldr	r3, [r3, #0]
   d7bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7bc8:	9301      	str	r3, [sp, #4]
   d7bca:	bd08      	pop	{r3, pc}
   d7bcc:	00030230 	.word	0x00030230

000d7bd0 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d7bd0:	b508      	push	{r3, lr}
   d7bd2:	4b02      	ldr	r3, [pc, #8]	; (d7bdc <HAL_SPI_DMA_Transfer_Status+0xc>)
   d7bd4:	681b      	ldr	r3, [r3, #0]
   d7bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7bd8:	9301      	str	r3, [sp, #4]
   d7bda:	bd08      	pop	{r3, pc}
   d7bdc:	00030230 	.word	0x00030230

000d7be0 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7be0:	b508      	push	{r3, lr}
   d7be2:	4b02      	ldr	r3, [pc, #8]	; (d7bec <HAL_SPI_Set_Settings+0xc>)
   d7be4:	681b      	ldr	r3, [r3, #0]
   d7be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7be8:	9301      	str	r3, [sp, #4]
   d7bea:	bd08      	pop	{r3, pc}
   d7bec:	00030230 	.word	0x00030230

000d7bf0 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d7bf0:	b508      	push	{r3, lr}
   d7bf2:	4b02      	ldr	r3, [pc, #8]	; (d7bfc <HAL_SPI_Acquire+0xc>)
   d7bf4:	681b      	ldr	r3, [r3, #0]
   d7bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7bf8:	9301      	str	r3, [sp, #4]
   d7bfa:	bd08      	pop	{r3, pc}
   d7bfc:	00030230 	.word	0x00030230

000d7c00 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d7c00:	b508      	push	{r3, lr}
   d7c02:	4b02      	ldr	r3, [pc, #8]	; (d7c0c <HAL_SPI_Release+0xc>)
   d7c04:	681b      	ldr	r3, [r3, #0]
   d7c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c08:	9301      	str	r3, [sp, #4]
   d7c0a:	bd08      	pop	{r3, pc}
   d7c0c:	00030230 	.word	0x00030230

000d7c10 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7c10:	b508      	push	{r3, lr}
   d7c12:	4b02      	ldr	r3, [pc, #8]	; (d7c1c <HAL_RNG_GetRandomNumber+0xc>)
   d7c14:	681b      	ldr	r3, [r3, #0]
   d7c16:	685b      	ldr	r3, [r3, #4]
   d7c18:	9301      	str	r3, [sp, #4]
   d7c1a:	bd08      	pop	{r3, pc}
   d7c1c:	00030218 	.word	0x00030218

000d7c20 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7c20:	b508      	push	{r3, lr}
   d7c22:	4b02      	ldr	r3, [pc, #8]	; (d7c2c <HAL_Delay_Microseconds+0xc>)
   d7c24:	681b      	ldr	r3, [r3, #0]
   d7c26:	68db      	ldr	r3, [r3, #12]
   d7c28:	9301      	str	r3, [sp, #4]
   d7c2a:	bd08      	pop	{r3, pc}
   d7c2c:	00030218 	.word	0x00030218

000d7c30 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7c30:	b508      	push	{r3, lr}
   d7c32:	4b02      	ldr	r3, [pc, #8]	; (d7c3c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7c34:	681b      	ldr	r3, [r3, #0]
   d7c36:	691b      	ldr	r3, [r3, #16]
   d7c38:	9301      	str	r3, [sp, #4]
   d7c3a:	bd08      	pop	{r3, pc}
   d7c3c:	00030218 	.word	0x00030218

000d7c40 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7c40:	b508      	push	{r3, lr}
   d7c42:	4b02      	ldr	r3, [pc, #8]	; (d7c4c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7c44:	681b      	ldr	r3, [r3, #0]
   d7c46:	695b      	ldr	r3, [r3, #20]
   d7c48:	9301      	str	r3, [sp, #4]
   d7c4a:	bd08      	pop	{r3, pc}
   d7c4c:	00030218 	.word	0x00030218

000d7c50 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d7c50:	b508      	push	{r3, lr}
   d7c52:	4b02      	ldr	r3, [pc, #8]	; (d7c5c <HAL_RTC_Get_UnixTime+0xc>)
   d7c54:	681b      	ldr	r3, [r3, #0]
   d7c56:	69db      	ldr	r3, [r3, #28]
   d7c58:	9301      	str	r3, [sp, #4]
   d7c5a:	bd08      	pop	{r3, pc}
   d7c5c:	00030218 	.word	0x00030218

000d7c60 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d7c60:	b508      	push	{r3, lr}
   d7c62:	4b02      	ldr	r3, [pc, #8]	; (d7c6c <HAL_RTC_Time_Is_Valid+0xc>)
   d7c64:	681b      	ldr	r3, [r3, #0]
   d7c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7c68:	9301      	str	r3, [sp, #4]
   d7c6a:	bd08      	pop	{r3, pc}
   d7c6c:	00030218 	.word	0x00030218

000d7c70 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d7c70:	b508      	push	{r3, lr}
   d7c72:	4b02      	ldr	r3, [pc, #8]	; (d7c7c <hal_ble_stack_init+0xc>)
   d7c74:	681b      	ldr	r3, [r3, #0]
   d7c76:	689b      	ldr	r3, [r3, #8]
   d7c78:	9301      	str	r3, [sp, #4]
   d7c7a:	bd08      	pop	{r3, pc}
   d7c7c:	00030278 	.word	0x00030278

000d7c80 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d7c80:	b508      	push	{r3, lr}
   d7c82:	4b02      	ldr	r3, [pc, #8]	; (d7c8c <hal_ble_gap_set_advertising_data+0xc>)
   d7c84:	681b      	ldr	r3, [r3, #0]
   d7c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7c88:	9301      	str	r3, [sp, #4]
   d7c8a:	bd08      	pop	{r3, pc}
   d7c8c:	00030278 	.word	0x00030278

000d7c90 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d7c90:	b508      	push	{r3, lr}
   d7c92:	4b02      	ldr	r3, [pc, #8]	; (d7c9c <hal_ble_gap_set_scan_response_data+0xc>)
   d7c94:	681b      	ldr	r3, [r3, #0]
   d7c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7c98:	9301      	str	r3, [sp, #4]
   d7c9a:	bd08      	pop	{r3, pc}
   d7c9c:	00030278 	.word	0x00030278

000d7ca0 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d7ca0:	b508      	push	{r3, lr}
   d7ca2:	4b02      	ldr	r3, [pc, #8]	; (d7cac <hal_ble_gap_start_advertising+0xc>)
   d7ca4:	681b      	ldr	r3, [r3, #0]
   d7ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d7ca8:	9301      	str	r3, [sp, #4]
   d7caa:	bd08      	pop	{r3, pc}
   d7cac:	00030278 	.word	0x00030278

000d7cb0 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d7cb0:	b508      	push	{r3, lr}
   d7cb2:	4b03      	ldr	r3, [pc, #12]	; (d7cc0 <hal_ble_gap_disconnect+0x10>)
   d7cb4:	681b      	ldr	r3, [r3, #0]
   d7cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d7cba:	9301      	str	r3, [sp, #4]
   d7cbc:	bd08      	pop	{r3, pc}
   d7cbe:	0000      	.short	0x0000
   d7cc0:	00030278 	.word	0x00030278

000d7cc4 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d7cc4:	b508      	push	{r3, lr}
   d7cc6:	4b03      	ldr	r3, [pc, #12]	; (d7cd4 <hal_ble_gatt_server_add_service+0x10>)
   d7cc8:	681b      	ldr	r3, [r3, #0]
   d7cca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d7cce:	9301      	str	r3, [sp, #4]
   d7cd0:	bd08      	pop	{r3, pc}
   d7cd2:	0000      	.short	0x0000
   d7cd4:	00030278 	.word	0x00030278

000d7cd8 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d7cd8:	b508      	push	{r3, lr}
   d7cda:	4b03      	ldr	r3, [pc, #12]	; (d7ce8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d7cdc:	681b      	ldr	r3, [r3, #0]
   d7cde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d7ce2:	9301      	str	r3, [sp, #4]
   d7ce4:	bd08      	pop	{r3, pc}
   d7ce6:	0000      	.short	0x0000
   d7ce8:	00030278 	.word	0x00030278

000d7cec <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d7cec:	b508      	push	{r3, lr}
   d7cee:	4b03      	ldr	r3, [pc, #12]	; (d7cfc <hal_ble_gatt_client_write_with_response+0x10>)
   d7cf0:	681b      	ldr	r3, [r3, #0]
   d7cf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d7cf6:	9301      	str	r3, [sp, #4]
   d7cf8:	bd08      	pop	{r3, pc}
   d7cfa:	0000      	.short	0x0000
   d7cfc:	00030278 	.word	0x00030278

000d7d00 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d7d00:	b508      	push	{r3, lr}
   d7d02:	4b03      	ldr	r3, [pc, #12]	; (d7d10 <hal_ble_gatt_client_write_without_response+0x10>)
   d7d04:	681b      	ldr	r3, [r3, #0]
   d7d06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d7d0a:	9301      	str	r3, [sp, #4]
   d7d0c:	bd08      	pop	{r3, pc}
   d7d0e:	0000      	.short	0x0000
   d7d10:	00030278 	.word	0x00030278

000d7d14 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d7d14:	b508      	push	{r3, lr}
   d7d16:	4b03      	ldr	r3, [pc, #12]	; (d7d24 <hal_ble_gatt_server_add_characteristic+0x10>)
   d7d18:	681b      	ldr	r3, [r3, #0]
   d7d1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d7d1e:	9301      	str	r3, [sp, #4]
   d7d20:	bd08      	pop	{r3, pc}
   d7d22:	0000      	.short	0x0000
   d7d24:	00030278 	.word	0x00030278

000d7d28 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d7d28:	b508      	push	{r3, lr}
   d7d2a:	4b03      	ldr	r3, [pc, #12]	; (d7d38 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d7d2c:	681b      	ldr	r3, [r3, #0]
   d7d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d7d32:	9301      	str	r3, [sp, #4]
   d7d34:	bd08      	pop	{r3, pc}
   d7d36:	0000      	.short	0x0000
   d7d38:	00030278 	.word	0x00030278

000d7d3c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d7d3c:	b508      	push	{r3, lr}
   d7d3e:	4b03      	ldr	r3, [pc, #12]	; (d7d4c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d7d40:	681b      	ldr	r3, [r3, #0]
   d7d42:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d7d46:	9301      	str	r3, [sp, #4]
   d7d48:	bd08      	pop	{r3, pc}
   d7d4a:	0000      	.short	0x0000
   d7d4c:	00030278 	.word	0x00030278

000d7d50 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d7d50:	b508      	push	{r3, lr}
   d7d52:	4b03      	ldr	r3, [pc, #12]	; (d7d60 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d7d54:	681b      	ldr	r3, [r3, #0]
   d7d56:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d7d5a:	9301      	str	r3, [sp, #4]
   d7d5c:	bd08      	pop	{r3, pc}
   d7d5e:	0000      	.short	0x0000
   d7d60:	00030278 	.word	0x00030278

000d7d64 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d7d64:	b508      	push	{r3, lr}
   d7d66:	4b02      	ldr	r3, [pc, #8]	; (d7d70 <os_thread_is_current+0xc>)
   d7d68:	681b      	ldr	r3, [r3, #0]
   d7d6a:	689b      	ldr	r3, [r3, #8]
   d7d6c:	9301      	str	r3, [sp, #4]
   d7d6e:	bd08      	pop	{r3, pc}
   d7d70:	00030248 	.word	0x00030248

000d7d74 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7d74:	b508      	push	{r3, lr}
   d7d76:	4b02      	ldr	r3, [pc, #8]	; (d7d80 <os_thread_yield+0xc>)
   d7d78:	681b      	ldr	r3, [r3, #0]
   d7d7a:	68db      	ldr	r3, [r3, #12]
   d7d7c:	9301      	str	r3, [sp, #4]
   d7d7e:	bd08      	pop	{r3, pc}
   d7d80:	00030248 	.word	0x00030248

000d7d84 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d7d84:	b508      	push	{r3, lr}
   d7d86:	4b02      	ldr	r3, [pc, #8]	; (d7d90 <os_thread_join+0xc>)
   d7d88:	681b      	ldr	r3, [r3, #0]
   d7d8a:	691b      	ldr	r3, [r3, #16]
   d7d8c:	9301      	str	r3, [sp, #4]
   d7d8e:	bd08      	pop	{r3, pc}
   d7d90:	00030248 	.word	0x00030248

000d7d94 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7d94:	b508      	push	{r3, lr}
   d7d96:	4b02      	ldr	r3, [pc, #8]	; (d7da0 <os_thread_cleanup+0xc>)
   d7d98:	681b      	ldr	r3, [r3, #0]
   d7d9a:	695b      	ldr	r3, [r3, #20]
   d7d9c:	9301      	str	r3, [sp, #4]
   d7d9e:	bd08      	pop	{r3, pc}
   d7da0:	00030248 	.word	0x00030248

000d7da4 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7da4:	b508      	push	{r3, lr}
   d7da6:	4b02      	ldr	r3, [pc, #8]	; (d7db0 <os_thread_scheduling+0xc>)
   d7da8:	681b      	ldr	r3, [r3, #0]
   d7daa:	69db      	ldr	r3, [r3, #28]
   d7dac:	9301      	str	r3, [sp, #4]
   d7dae:	bd08      	pop	{r3, pc}
   d7db0:	00030248 	.word	0x00030248

000d7db4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7db4:	b508      	push	{r3, lr}
   d7db6:	4b02      	ldr	r3, [pc, #8]	; (d7dc0 <os_timer_create+0xc>)
   d7db8:	681b      	ldr	r3, [r3, #0]
   d7dba:	6a1b      	ldr	r3, [r3, #32]
   d7dbc:	9301      	str	r3, [sp, #4]
   d7dbe:	bd08      	pop	{r3, pc}
   d7dc0:	00030248 	.word	0x00030248

000d7dc4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7dc4:	b508      	push	{r3, lr}
   d7dc6:	4b02      	ldr	r3, [pc, #8]	; (d7dd0 <os_timer_destroy+0xc>)
   d7dc8:	681b      	ldr	r3, [r3, #0]
   d7dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7dcc:	9301      	str	r3, [sp, #4]
   d7dce:	bd08      	pop	{r3, pc}
   d7dd0:	00030248 	.word	0x00030248

000d7dd4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7dd4:	b508      	push	{r3, lr}
   d7dd6:	4b02      	ldr	r3, [pc, #8]	; (d7de0 <os_timer_get_id+0xc>)
   d7dd8:	681b      	ldr	r3, [r3, #0]
   d7dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7ddc:	9301      	str	r3, [sp, #4]
   d7dde:	bd08      	pop	{r3, pc}
   d7de0:	00030248 	.word	0x00030248

000d7de4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7de4:	b508      	push	{r3, lr}
   d7de6:	4b02      	ldr	r3, [pc, #8]	; (d7df0 <os_timer_change+0xc>)
   d7de8:	681b      	ldr	r3, [r3, #0]
   d7dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7dec:	9301      	str	r3, [sp, #4]
   d7dee:	bd08      	pop	{r3, pc}
   d7df0:	00030248 	.word	0x00030248

000d7df4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7df4:	b508      	push	{r3, lr}
   d7df6:	4b02      	ldr	r3, [pc, #8]	; (d7e00 <os_mutex_recursive_create+0xc>)
   d7df8:	681b      	ldr	r3, [r3, #0]
   d7dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7dfc:	9301      	str	r3, [sp, #4]
   d7dfe:	bd08      	pop	{r3, pc}
   d7e00:	00030248 	.word	0x00030248

000d7e04 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7e04:	b508      	push	{r3, lr}
   d7e06:	4b02      	ldr	r3, [pc, #8]	; (d7e10 <os_mutex_recursive_destroy+0xc>)
   d7e08:	681b      	ldr	r3, [r3, #0]
   d7e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7e0c:	9301      	str	r3, [sp, #4]
   d7e0e:	bd08      	pop	{r3, pc}
   d7e10:	00030248 	.word	0x00030248

000d7e14 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d7e14:	b508      	push	{r3, lr}
   d7e16:	4b02      	ldr	r3, [pc, #8]	; (d7e20 <os_mutex_recursive_lock+0xc>)
   d7e18:	681b      	ldr	r3, [r3, #0]
   d7e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7e1c:	9301      	str	r3, [sp, #4]
   d7e1e:	bd08      	pop	{r3, pc}
   d7e20:	00030248 	.word	0x00030248

000d7e24 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d7e24:	b508      	push	{r3, lr}
   d7e26:	4b02      	ldr	r3, [pc, #8]	; (d7e30 <os_mutex_recursive_unlock+0xc>)
   d7e28:	681b      	ldr	r3, [r3, #0]
   d7e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7e2c:	9301      	str	r3, [sp, #4]
   d7e2e:	bd08      	pop	{r3, pc}
   d7e30:	00030248 	.word	0x00030248

000d7e34 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7e34:	b508      	push	{r3, lr}
   d7e36:	4b02      	ldr	r3, [pc, #8]	; (d7e40 <os_timer_set_id+0xc>)
   d7e38:	681b      	ldr	r3, [r3, #0]
   d7e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7e3c:	9301      	str	r3, [sp, #4]
   d7e3e:	bd08      	pop	{r3, pc}
   d7e40:	00030248 	.word	0x00030248

000d7e44 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7e44:	b508      	push	{r3, lr}
   d7e46:	4b02      	ldr	r3, [pc, #8]	; (d7e50 <inet_inet_ntop+0xc>)
   d7e48:	681b      	ldr	r3, [r3, #0]
   d7e4a:	695b      	ldr	r3, [r3, #20]
   d7e4c:	9301      	str	r3, [sp, #4]
   d7e4e:	bd08      	pop	{r3, pc}
   d7e50:	00030264 	.word	0x00030264

000d7e54 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d7e54:	b508      	push	{r3, lr}
   d7e56:	4b02      	ldr	r3, [pc, #8]	; (d7e60 <HAL_USART_Init+0xc>)
   d7e58:	681b      	ldr	r3, [r3, #0]
   d7e5a:	681b      	ldr	r3, [r3, #0]
   d7e5c:	9301      	str	r3, [sp, #4]
   d7e5e:	bd08      	pop	{r3, pc}
   d7e60:	0003023c 	.word	0x0003023c

000d7e64 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d7e64:	b508      	push	{r3, lr}
   d7e66:	4b02      	ldr	r3, [pc, #8]	; (d7e70 <HAL_USART_End+0xc>)
   d7e68:	681b      	ldr	r3, [r3, #0]
   d7e6a:	689b      	ldr	r3, [r3, #8]
   d7e6c:	9301      	str	r3, [sp, #4]
   d7e6e:	bd08      	pop	{r3, pc}
   d7e70:	0003023c 	.word	0x0003023c

000d7e74 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d7e74:	b508      	push	{r3, lr}
   d7e76:	4b02      	ldr	r3, [pc, #8]	; (d7e80 <HAL_USART_Write_Data+0xc>)
   d7e78:	681b      	ldr	r3, [r3, #0]
   d7e7a:	68db      	ldr	r3, [r3, #12]
   d7e7c:	9301      	str	r3, [sp, #4]
   d7e7e:	bd08      	pop	{r3, pc}
   d7e80:	0003023c 	.word	0x0003023c

000d7e84 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d7e84:	b508      	push	{r3, lr}
   d7e86:	4b02      	ldr	r3, [pc, #8]	; (d7e90 <HAL_USART_Available_Data+0xc>)
   d7e88:	681b      	ldr	r3, [r3, #0]
   d7e8a:	691b      	ldr	r3, [r3, #16]
   d7e8c:	9301      	str	r3, [sp, #4]
   d7e8e:	bd08      	pop	{r3, pc}
   d7e90:	0003023c 	.word	0x0003023c

000d7e94 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d7e94:	b508      	push	{r3, lr}
   d7e96:	4b02      	ldr	r3, [pc, #8]	; (d7ea0 <HAL_USART_Read_Data+0xc>)
   d7e98:	681b      	ldr	r3, [r3, #0]
   d7e9a:	695b      	ldr	r3, [r3, #20]
   d7e9c:	9301      	str	r3, [sp, #4]
   d7e9e:	bd08      	pop	{r3, pc}
   d7ea0:	0003023c 	.word	0x0003023c

000d7ea4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d7ea4:	b508      	push	{r3, lr}
   d7ea6:	4b02      	ldr	r3, [pc, #8]	; (d7eb0 <HAL_USART_Peek_Data+0xc>)
   d7ea8:	681b      	ldr	r3, [r3, #0]
   d7eaa:	699b      	ldr	r3, [r3, #24]
   d7eac:	9301      	str	r3, [sp, #4]
   d7eae:	bd08      	pop	{r3, pc}
   d7eb0:	0003023c 	.word	0x0003023c

000d7eb4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d7eb4:	b508      	push	{r3, lr}
   d7eb6:	4b02      	ldr	r3, [pc, #8]	; (d7ec0 <HAL_USART_Flush_Data+0xc>)
   d7eb8:	681b      	ldr	r3, [r3, #0]
   d7eba:	69db      	ldr	r3, [r3, #28]
   d7ebc:	9301      	str	r3, [sp, #4]
   d7ebe:	bd08      	pop	{r3, pc}
   d7ec0:	0003023c 	.word	0x0003023c

000d7ec4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d7ec4:	b508      	push	{r3, lr}
   d7ec6:	4b02      	ldr	r3, [pc, #8]	; (d7ed0 <HAL_USART_Is_Enabled+0xc>)
   d7ec8:	681b      	ldr	r3, [r3, #0]
   d7eca:	6a1b      	ldr	r3, [r3, #32]
   d7ecc:	9301      	str	r3, [sp, #4]
   d7ece:	bd08      	pop	{r3, pc}
   d7ed0:	0003023c 	.word	0x0003023c

000d7ed4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d7ed4:	b508      	push	{r3, lr}
   d7ed6:	4b02      	ldr	r3, [pc, #8]	; (d7ee0 <HAL_USART_Available_Data_For_Write+0xc>)
   d7ed8:	681b      	ldr	r3, [r3, #0]
   d7eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7edc:	9301      	str	r3, [sp, #4]
   d7ede:	bd08      	pop	{r3, pc}
   d7ee0:	0003023c 	.word	0x0003023c

000d7ee4 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d7ee4:	b508      	push	{r3, lr}
   d7ee6:	4b02      	ldr	r3, [pc, #8]	; (d7ef0 <HAL_USART_BeginConfig+0xc>)
   d7ee8:	681b      	ldr	r3, [r3, #0]
   d7eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7eec:	9301      	str	r3, [sp, #4]
   d7eee:	bd08      	pop	{r3, pc}
   d7ef0:	0003023c 	.word	0x0003023c

000d7ef4 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d7ef4:	b508      	push	{r3, lr}
   d7ef6:	4b02      	ldr	r3, [pc, #8]	; (d7f00 <HAL_I2C_Set_Speed+0xc>)
   d7ef8:	681b      	ldr	r3, [r3, #0]
   d7efa:	681b      	ldr	r3, [r3, #0]
   d7efc:	9301      	str	r3, [sp, #4]
   d7efe:	bd08      	pop	{r3, pc}
   d7f00:	00030228 	.word	0x00030228

000d7f04 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d7f04:	b508      	push	{r3, lr}
   d7f06:	4b02      	ldr	r3, [pc, #8]	; (d7f10 <HAL_I2C_Begin+0xc>)
   d7f08:	681b      	ldr	r3, [r3, #0]
   d7f0a:	68db      	ldr	r3, [r3, #12]
   d7f0c:	9301      	str	r3, [sp, #4]
   d7f0e:	bd08      	pop	{r3, pc}
   d7f10:	00030228 	.word	0x00030228

000d7f14 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d7f14:	b508      	push	{r3, lr}
   d7f16:	4b02      	ldr	r3, [pc, #8]	; (d7f20 <HAL_I2C_Begin_Transmission+0xc>)
   d7f18:	681b      	ldr	r3, [r3, #0]
   d7f1a:	699b      	ldr	r3, [r3, #24]
   d7f1c:	9301      	str	r3, [sp, #4]
   d7f1e:	bd08      	pop	{r3, pc}
   d7f20:	00030228 	.word	0x00030228

000d7f24 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d7f24:	b508      	push	{r3, lr}
   d7f26:	4b02      	ldr	r3, [pc, #8]	; (d7f30 <HAL_I2C_End_Transmission+0xc>)
   d7f28:	681b      	ldr	r3, [r3, #0]
   d7f2a:	69db      	ldr	r3, [r3, #28]
   d7f2c:	9301      	str	r3, [sp, #4]
   d7f2e:	bd08      	pop	{r3, pc}
   d7f30:	00030228 	.word	0x00030228

000d7f34 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7f34:	b508      	push	{r3, lr}
   d7f36:	4b02      	ldr	r3, [pc, #8]	; (d7f40 <HAL_I2C_Write_Data+0xc>)
   d7f38:	681b      	ldr	r3, [r3, #0]
   d7f3a:	6a1b      	ldr	r3, [r3, #32]
   d7f3c:	9301      	str	r3, [sp, #4]
   d7f3e:	bd08      	pop	{r3, pc}
   d7f40:	00030228 	.word	0x00030228

000d7f44 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d7f44:	b508      	push	{r3, lr}
   d7f46:	4b02      	ldr	r3, [pc, #8]	; (d7f50 <HAL_I2C_Available_Data+0xc>)
   d7f48:	681b      	ldr	r3, [r3, #0]
   d7f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f4c:	9301      	str	r3, [sp, #4]
   d7f4e:	bd08      	pop	{r3, pc}
   d7f50:	00030228 	.word	0x00030228

000d7f54 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d7f54:	b508      	push	{r3, lr}
   d7f56:	4b02      	ldr	r3, [pc, #8]	; (d7f60 <HAL_I2C_Read_Data+0xc>)
   d7f58:	681b      	ldr	r3, [r3, #0]
   d7f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7f5c:	9301      	str	r3, [sp, #4]
   d7f5e:	bd08      	pop	{r3, pc}
   d7f60:	00030228 	.word	0x00030228

000d7f64 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7f64:	b508      	push	{r3, lr}
   d7f66:	4b02      	ldr	r3, [pc, #8]	; (d7f70 <HAL_I2C_Peek_Data+0xc>)
   d7f68:	681b      	ldr	r3, [r3, #0]
   d7f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7f6c:	9301      	str	r3, [sp, #4]
   d7f6e:	bd08      	pop	{r3, pc}
   d7f70:	00030228 	.word	0x00030228

000d7f74 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d7f74:	b508      	push	{r3, lr}
   d7f76:	4b02      	ldr	r3, [pc, #8]	; (d7f80 <HAL_I2C_Flush_Data+0xc>)
   d7f78:	681b      	ldr	r3, [r3, #0]
   d7f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7f7c:	9301      	str	r3, [sp, #4]
   d7f7e:	bd08      	pop	{r3, pc}
   d7f80:	00030228 	.word	0x00030228

000d7f84 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d7f84:	b508      	push	{r3, lr}
   d7f86:	4b02      	ldr	r3, [pc, #8]	; (d7f90 <HAL_I2C_Is_Enabled+0xc>)
   d7f88:	681b      	ldr	r3, [r3, #0]
   d7f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7f8c:	9301      	str	r3, [sp, #4]
   d7f8e:	bd08      	pop	{r3, pc}
   d7f90:	00030228 	.word	0x00030228

000d7f94 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d7f94:	b508      	push	{r3, lr}
   d7f96:	4b02      	ldr	r3, [pc, #8]	; (d7fa0 <HAL_I2C_Init+0xc>)
   d7f98:	681b      	ldr	r3, [r3, #0]
   d7f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7f9c:	9301      	str	r3, [sp, #4]
   d7f9e:	bd08      	pop	{r3, pc}
   d7fa0:	00030228 	.word	0x00030228

000d7fa4 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d7fa4:	b508      	push	{r3, lr}
   d7fa6:	4b02      	ldr	r3, [pc, #8]	; (d7fb0 <HAL_I2C_Request_Data_Ex+0xc>)
   d7fa8:	681b      	ldr	r3, [r3, #0]
   d7faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7fac:	9301      	str	r3, [sp, #4]
   d7fae:	bd08      	pop	{r3, pc}
   d7fb0:	00030228 	.word	0x00030228

000d7fb4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7fb4:	b508      	push	{r3, lr}
   d7fb6:	4b02      	ldr	r3, [pc, #8]	; (d7fc0 <HAL_USB_USART_Init+0xc>)
   d7fb8:	681b      	ldr	r3, [r3, #0]
   d7fba:	681b      	ldr	r3, [r3, #0]
   d7fbc:	9301      	str	r3, [sp, #4]
   d7fbe:	bd08      	pop	{r3, pc}
   d7fc0:	0003024c 	.word	0x0003024c

000d7fc4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7fc4:	b508      	push	{r3, lr}
   d7fc6:	4b02      	ldr	r3, [pc, #8]	; (d7fd0 <HAL_USB_USART_Begin+0xc>)
   d7fc8:	681b      	ldr	r3, [r3, #0]
   d7fca:	685b      	ldr	r3, [r3, #4]
   d7fcc:	9301      	str	r3, [sp, #4]
   d7fce:	bd08      	pop	{r3, pc}
   d7fd0:	0003024c 	.word	0x0003024c

000d7fd4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d7fd4:	b508      	push	{r3, lr}
   d7fd6:	4b02      	ldr	r3, [pc, #8]	; (d7fe0 <HAL_USB_USART_End+0xc>)
   d7fd8:	681b      	ldr	r3, [r3, #0]
   d7fda:	689b      	ldr	r3, [r3, #8]
   d7fdc:	9301      	str	r3, [sp, #4]
   d7fde:	bd08      	pop	{r3, pc}
   d7fe0:	0003024c 	.word	0x0003024c

000d7fe4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7fe4:	b508      	push	{r3, lr}
   d7fe6:	4b02      	ldr	r3, [pc, #8]	; (d7ff0 <HAL_USB_USART_Available_Data+0xc>)
   d7fe8:	681b      	ldr	r3, [r3, #0]
   d7fea:	691b      	ldr	r3, [r3, #16]
   d7fec:	9301      	str	r3, [sp, #4]
   d7fee:	bd08      	pop	{r3, pc}
   d7ff0:	0003024c 	.word	0x0003024c

000d7ff4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7ff4:	b508      	push	{r3, lr}
   d7ff6:	4b02      	ldr	r3, [pc, #8]	; (d8000 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7ff8:	681b      	ldr	r3, [r3, #0]
   d7ffa:	695b      	ldr	r3, [r3, #20]
   d7ffc:	9301      	str	r3, [sp, #4]
   d7ffe:	bd08      	pop	{r3, pc}
   d8000:	0003024c 	.word	0x0003024c

000d8004 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8004:	b508      	push	{r3, lr}
   d8006:	4b02      	ldr	r3, [pc, #8]	; (d8010 <HAL_USB_USART_Receive_Data+0xc>)
   d8008:	681b      	ldr	r3, [r3, #0]
   d800a:	699b      	ldr	r3, [r3, #24]
   d800c:	9301      	str	r3, [sp, #4]
   d800e:	bd08      	pop	{r3, pc}
   d8010:	0003024c 	.word	0x0003024c

000d8014 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8014:	b508      	push	{r3, lr}
   d8016:	4b02      	ldr	r3, [pc, #8]	; (d8020 <HAL_USB_USART_Send_Data+0xc>)
   d8018:	681b      	ldr	r3, [r3, #0]
   d801a:	69db      	ldr	r3, [r3, #28]
   d801c:	9301      	str	r3, [sp, #4]
   d801e:	bd08      	pop	{r3, pc}
   d8020:	0003024c 	.word	0x0003024c

000d8024 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8024:	b508      	push	{r3, lr}
   d8026:	4b02      	ldr	r3, [pc, #8]	; (d8030 <HAL_USB_USART_Flush_Data+0xc>)
   d8028:	681b      	ldr	r3, [r3, #0]
   d802a:	6a1b      	ldr	r3, [r3, #32]
   d802c:	9301      	str	r3, [sp, #4]
   d802e:	bd08      	pop	{r3, pc}
   d8030:	0003024c 	.word	0x0003024c

000d8034 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8034:	b508      	push	{r3, lr}
   d8036:	4b02      	ldr	r3, [pc, #8]	; (d8040 <panic_+0xc>)
   d8038:	681b      	ldr	r3, [r3, #0]
   d803a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d803c:	9301      	str	r3, [sp, #4]
   d803e:	bd08      	pop	{r3, pc}
   d8040:	00030260 	.word	0x00030260

000d8044 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d8044:	b508      	push	{r3, lr}
   d8046:	4b02      	ldr	r3, [pc, #8]	; (d8050 <log_message+0xc>)
   d8048:	681b      	ldr	r3, [r3, #0]
   d804a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d804c:	9301      	str	r3, [sp, #4]
   d804e:	bd08      	pop	{r3, pc}
   d8050:	00030260 	.word	0x00030260

000d8054 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d8054:	b508      	push	{r3, lr}
   d8056:	4b02      	ldr	r3, [pc, #8]	; (d8060 <log_level_name+0xc>)
   d8058:	681b      	ldr	r3, [r3, #0]
   d805a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d805c:	9301      	str	r3, [sp, #4]
   d805e:	bd08      	pop	{r3, pc}
   d8060:	00030260 	.word	0x00030260

000d8064 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d8064:	b508      	push	{r3, lr}
   d8066:	4b02      	ldr	r3, [pc, #8]	; (d8070 <log_set_callbacks+0xc>)
   d8068:	681b      	ldr	r3, [r3, #0]
   d806a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d806c:	9301      	str	r3, [sp, #4]
   d806e:	bd08      	pop	{r3, pc}
   d8070:	00030260 	.word	0x00030260

000d8074 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   d8074:	b508      	push	{r3, lr}
   d8076:	4b03      	ldr	r3, [pc, #12]	; (d8084 <led_set_status_active+0x10>)
   d8078:	681b      	ldr	r3, [r3, #0]
   d807a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d807e:	9301      	str	r3, [sp, #4]
   d8080:	bd08      	pop	{r3, pc}
   d8082:	0000      	.short	0x0000
   d8084:	00030260 	.word	0x00030260

000d8088 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8088:	b508      	push	{r3, lr}
   d808a:	4b02      	ldr	r3, [pc, #8]	; (d8094 <system_mode+0xc>)
   d808c:	681b      	ldr	r3, [r3, #0]
   d808e:	681b      	ldr	r3, [r3, #0]
   d8090:	9301      	str	r3, [sp, #4]
   d8092:	bd08      	pop	{r3, pc}
   d8094:	00030220 	.word	0x00030220

000d8098 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8098:	b508      	push	{r3, lr}
   d809a:	4b02      	ldr	r3, [pc, #8]	; (d80a4 <set_system_mode+0xc>)
   d809c:	681b      	ldr	r3, [r3, #0]
   d809e:	685b      	ldr	r3, [r3, #4]
   d80a0:	9301      	str	r3, [sp, #4]
   d80a2:	bd08      	pop	{r3, pc}
   d80a4:	00030220 	.word	0x00030220

000d80a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d80a8:	b508      	push	{r3, lr}
   d80aa:	4b02      	ldr	r3, [pc, #8]	; (d80b4 <system_delay_ms+0xc>)
   d80ac:	681b      	ldr	r3, [r3, #0]
   d80ae:	695b      	ldr	r3, [r3, #20]
   d80b0:	9301      	str	r3, [sp, #4]
   d80b2:	bd08      	pop	{r3, pc}
   d80b4:	00030220 	.word	0x00030220

000d80b8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d80b8:	b508      	push	{r3, lr}
   d80ba:	4b02      	ldr	r3, [pc, #8]	; (d80c4 <application_thread_current+0xc>)
   d80bc:	681b      	ldr	r3, [r3, #0]
   d80be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d80c0:	9301      	str	r3, [sp, #4]
   d80c2:	bd08      	pop	{r3, pc}
   d80c4:	00030220 	.word	0x00030220

000d80c8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d80c8:	b508      	push	{r3, lr}
   d80ca:	4b02      	ldr	r3, [pc, #8]	; (d80d4 <application_thread_invoke+0xc>)
   d80cc:	681b      	ldr	r3, [r3, #0]
   d80ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d80d0:	9301      	str	r3, [sp, #4]
   d80d2:	bd08      	pop	{r3, pc}
   d80d4:	00030220 	.word	0x00030220

000d80d8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d80d8:	b508      	push	{r3, lr}
   d80da:	4b02      	ldr	r3, [pc, #8]	; (d80e4 <system_thread_get_state+0xc>)
   d80dc:	681b      	ldr	r3, [r3, #0]
   d80de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d80e0:	9301      	str	r3, [sp, #4]
   d80e2:	bd08      	pop	{r3, pc}
   d80e4:	00030220 	.word	0x00030220

000d80e8 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   d80e8:	b508      	push	{r3, lr}
   d80ea:	4b02      	ldr	r3, [pc, #8]	; (d80f4 <led_pattern_period+0xc>)
   d80ec:	681b      	ldr	r3, [r3, #0]
   d80ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d80f0:	9301      	str	r3, [sp, #4]
   d80f2:	bd08      	pop	{r3, pc}
   d80f4:	00030220 	.word	0x00030220

000d80f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d80f8:	b508      	push	{r3, lr}
   d80fa:	4b03      	ldr	r3, [pc, #12]	; (d8108 <system_ctrl_set_app_request_handler+0x10>)
   d80fc:	681b      	ldr	r3, [r3, #0]
   d80fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8102:	9301      	str	r3, [sp, #4]
   d8104:	bd08      	pop	{r3, pc}
   d8106:	0000      	.short	0x0000
   d8108:	00030220 	.word	0x00030220

000d810c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d810c:	b508      	push	{r3, lr}
   d810e:	4b03      	ldr	r3, [pc, #12]	; (d811c <system_ctrl_set_result+0x10>)
   d8110:	681b      	ldr	r3, [r3, #0]
   d8112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8116:	9301      	str	r3, [sp, #4]
   d8118:	bd08      	pop	{r3, pc}
   d811a:	0000      	.short	0x0000
   d811c:	00030220 	.word	0x00030220

000d8120 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8120:	b508      	push	{r3, lr}
   d8122:	4b02      	ldr	r3, [pc, #8]	; (d812c <network_connect+0xc>)
   d8124:	681b      	ldr	r3, [r3, #0]
   d8126:	685b      	ldr	r3, [r3, #4]
   d8128:	9301      	str	r3, [sp, #4]
   d812a:	bd08      	pop	{r3, pc}
   d812c:	00030240 	.word	0x00030240

000d8130 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8130:	b508      	push	{r3, lr}
   d8132:	4b02      	ldr	r3, [pc, #8]	; (d813c <network_connecting+0xc>)
   d8134:	681b      	ldr	r3, [r3, #0]
   d8136:	689b      	ldr	r3, [r3, #8]
   d8138:	9301      	str	r3, [sp, #4]
   d813a:	bd08      	pop	{r3, pc}
   d813c:	00030240 	.word	0x00030240

000d8140 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8140:	b508      	push	{r3, lr}
   d8142:	4b02      	ldr	r3, [pc, #8]	; (d814c <network_disconnect+0xc>)
   d8144:	681b      	ldr	r3, [r3, #0]
   d8146:	68db      	ldr	r3, [r3, #12]
   d8148:	9301      	str	r3, [sp, #4]
   d814a:	bd08      	pop	{r3, pc}
   d814c:	00030240 	.word	0x00030240

000d8150 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8150:	b508      	push	{r3, lr}
   d8152:	4b02      	ldr	r3, [pc, #8]	; (d815c <network_ready+0xc>)
   d8154:	681b      	ldr	r3, [r3, #0]
   d8156:	691b      	ldr	r3, [r3, #16]
   d8158:	9301      	str	r3, [sp, #4]
   d815a:	bd08      	pop	{r3, pc}
   d815c:	00030240 	.word	0x00030240

000d8160 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8160:	b508      	push	{r3, lr}
   d8162:	4b02      	ldr	r3, [pc, #8]	; (d816c <network_on+0xc>)
   d8164:	681b      	ldr	r3, [r3, #0]
   d8166:	695b      	ldr	r3, [r3, #20]
   d8168:	9301      	str	r3, [sp, #4]
   d816a:	bd08      	pop	{r3, pc}
   d816c:	00030240 	.word	0x00030240

000d8170 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8170:	b508      	push	{r3, lr}
   d8172:	4b02      	ldr	r3, [pc, #8]	; (d817c <network_off+0xc>)
   d8174:	681b      	ldr	r3, [r3, #0]
   d8176:	699b      	ldr	r3, [r3, #24]
   d8178:	9301      	str	r3, [sp, #4]
   d817a:	bd08      	pop	{r3, pc}
   d817c:	00030240 	.word	0x00030240

000d8180 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8180:	b508      	push	{r3, lr}
   d8182:	4b02      	ldr	r3, [pc, #8]	; (d818c <network_listen+0xc>)
   d8184:	681b      	ldr	r3, [r3, #0]
   d8186:	69db      	ldr	r3, [r3, #28]
   d8188:	9301      	str	r3, [sp, #4]
   d818a:	bd08      	pop	{r3, pc}
   d818c:	00030240 	.word	0x00030240

000d8190 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8190:	b508      	push	{r3, lr}
   d8192:	4b02      	ldr	r3, [pc, #8]	; (d819c <network_listening+0xc>)
   d8194:	681b      	ldr	r3, [r3, #0]
   d8196:	6a1b      	ldr	r3, [r3, #32]
   d8198:	9301      	str	r3, [sp, #4]
   d819a:	bd08      	pop	{r3, pc}
   d819c:	00030240 	.word	0x00030240

000d81a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d81a0:	b508      	push	{r3, lr}
   d81a2:	4b02      	ldr	r3, [pc, #8]	; (d81ac <network_set_listen_timeout+0xc>)
   d81a4:	681b      	ldr	r3, [r3, #0]
   d81a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d81a8:	9301      	str	r3, [sp, #4]
   d81aa:	bd08      	pop	{r3, pc}
   d81ac:	00030240 	.word	0x00030240

000d81b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d81b0:	b508      	push	{r3, lr}
   d81b2:	4b02      	ldr	r3, [pc, #8]	; (d81bc <network_get_listen_timeout+0xc>)
   d81b4:	681b      	ldr	r3, [r3, #0]
   d81b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d81b8:	9301      	str	r3, [sp, #4]
   d81ba:	bd08      	pop	{r3, pc}
   d81bc:	00030240 	.word	0x00030240

000d81c0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d81c0:	b508      	push	{r3, lr}
   d81c2:	4b02      	ldr	r3, [pc, #8]	; (d81cc <spark_process+0xc>)
   d81c4:	681b      	ldr	r3, [r3, #0]
   d81c6:	689b      	ldr	r3, [r3, #8]
   d81c8:	9301      	str	r3, [sp, #4]
   d81ca:	bd08      	pop	{r3, pc}
   d81cc:	00030244 	.word	0x00030244

000d81d0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d81d0:	b508      	push	{r3, lr}
   d81d2:	4b02      	ldr	r3, [pc, #8]	; (d81dc <spark_cloud_flag_connected+0xc>)
   d81d4:	681b      	ldr	r3, [r3, #0]
   d81d6:	695b      	ldr	r3, [r3, #20]
   d81d8:	9301      	str	r3, [sp, #4]
   d81da:	bd08      	pop	{r3, pc}
   d81dc:	00030244 	.word	0x00030244

000d81e0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d81e0:	b508      	push	{r3, lr}
   d81e2:	4b02      	ldr	r3, [pc, #8]	; (d81ec <spark_send_event+0xc>)
   d81e4:	681b      	ldr	r3, [r3, #0]
   d81e6:	6a1b      	ldr	r3, [r3, #32]
   d81e8:	9301      	str	r3, [sp, #4]
   d81ea:	bd08      	pop	{r3, pc}
   d81ec:	00030244 	.word	0x00030244

000d81f0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d81f0:	b508      	push	{r3, lr}
   d81f2:	4b02      	ldr	r3, [pc, #8]	; (d81fc <spark_subscribe+0xc>)
   d81f4:	681b      	ldr	r3, [r3, #0]
   d81f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d81f8:	9301      	str	r3, [sp, #4]
   d81fa:	bd08      	pop	{r3, pc}
   d81fc:	00030244 	.word	0x00030244

000d8200 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8200:	b508      	push	{r3, lr}
   d8202:	4b02      	ldr	r3, [pc, #8]	; (d820c <spark_sync_time_pending+0xc>)
   d8204:	681b      	ldr	r3, [r3, #0]
   d8206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8208:	9301      	str	r3, [sp, #4]
   d820a:	bd08      	pop	{r3, pc}
   d820c:	00030244 	.word	0x00030244

000d8210 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8210:	b508      	push	{r3, lr}
   d8212:	4b02      	ldr	r3, [pc, #8]	; (d821c <spark_set_random_seed_from_cloud_handler+0xc>)
   d8214:	681b      	ldr	r3, [r3, #0]
   d8216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8218:	9301      	str	r3, [sp, #4]
   d821a:	bd08      	pop	{r3, pc}
   d821c:	00030244 	.word	0x00030244

000d8220 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8220:	b508      	push	{r3, lr}
   d8222:	4b02      	ldr	r3, [pc, #8]	; (d822c <malloc+0xc>)
   d8224:	681b      	ldr	r3, [r3, #0]
   d8226:	681b      	ldr	r3, [r3, #0]
   d8228:	9301      	str	r3, [sp, #4]
   d822a:	bd08      	pop	{r3, pc}
   d822c:	0003021c 	.word	0x0003021c

000d8230 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8230:	b508      	push	{r3, lr}
   d8232:	4b02      	ldr	r3, [pc, #8]	; (d823c <free+0xc>)
   d8234:	681b      	ldr	r3, [r3, #0]
   d8236:	685b      	ldr	r3, [r3, #4]
   d8238:	9301      	str	r3, [sp, #4]
   d823a:	bd08      	pop	{r3, pc}
   d823c:	0003021c 	.word	0x0003021c

000d8240 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8240:	b508      	push	{r3, lr}
   d8242:	4b02      	ldr	r3, [pc, #8]	; (d824c <realloc+0xc>)
   d8244:	681b      	ldr	r3, [r3, #0]
   d8246:	689b      	ldr	r3, [r3, #8]
   d8248:	9301      	str	r3, [sp, #4]
   d824a:	bd08      	pop	{r3, pc}
   d824c:	0003021c 	.word	0x0003021c

000d8250 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d8250:	b508      	push	{r3, lr}
   d8252:	4b02      	ldr	r3, [pc, #8]	; (d825c <sprintf+0xc>)
   d8254:	681b      	ldr	r3, [r3, #0]
   d8256:	68db      	ldr	r3, [r3, #12]
   d8258:	9301      	str	r3, [sp, #4]
   d825a:	bd08      	pop	{r3, pc}
   d825c:	0003021c 	.word	0x0003021c

000d8260 <siscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d8260:	b508      	push	{r3, lr}
   d8262:	4b02      	ldr	r3, [pc, #8]	; (d826c <siscanf+0xc>)
   d8264:	681b      	ldr	r3, [r3, #0]
   d8266:	699b      	ldr	r3, [r3, #24]
   d8268:	9301      	str	r3, [sp, #4]
   d826a:	bd08      	pop	{r3, pc}
   d826c:	0003021c 	.word	0x0003021c

000d8270 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8270:	b508      	push	{r3, lr}
   d8272:	4b02      	ldr	r3, [pc, #8]	; (d827c <snprintf+0xc>)
   d8274:	681b      	ldr	r3, [r3, #0]
   d8276:	69db      	ldr	r3, [r3, #28]
   d8278:	9301      	str	r3, [sp, #4]
   d827a:	bd08      	pop	{r3, pc}
   d827c:	0003021c 	.word	0x0003021c

000d8280 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8280:	b508      	push	{r3, lr}
   d8282:	4b02      	ldr	r3, [pc, #8]	; (d828c <vsnprintf+0xc>)
   d8284:	681b      	ldr	r3, [r3, #0]
   d8286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8288:	9301      	str	r3, [sp, #4]
   d828a:	bd08      	pop	{r3, pc}
   d828c:	0003021c 	.word	0x0003021c

000d8290 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d8290:	b508      	push	{r3, lr}
   d8292:	4b02      	ldr	r3, [pc, #8]	; (d829c <abort+0xc>)
   d8294:	681b      	ldr	r3, [r3, #0]
   d8296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8298:	9301      	str	r3, [sp, #4]
   d829a:	bd08      	pop	{r3, pc}
   d829c:	0003021c 	.word	0x0003021c

000d82a0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d82a0:	b508      	push	{r3, lr}
   d82a2:	4b02      	ldr	r3, [pc, #8]	; (d82ac <_malloc_r+0xc>)
   d82a4:	681b      	ldr	r3, [r3, #0]
   d82a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d82a8:	9301      	str	r3, [sp, #4]
   d82aa:	bd08      	pop	{r3, pc}
   d82ac:	0003021c 	.word	0x0003021c

000d82b0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d82b0:	2200      	movs	r2, #0
   d82b2:	4611      	mov	r1, r2
   d82b4:	6840      	ldr	r0, [r0, #4]
   d82b6:	f7ff bf6b 	b.w	d8190 <network_listening>

000d82ba <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d82ba:	2200      	movs	r2, #0
   d82bc:	4611      	mov	r1, r2
   d82be:	6840      	ldr	r0, [r0, #4]
   d82c0:	f7ff bf76 	b.w	d81b0 <network_get_listen_timeout>

000d82c4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d82c4:	2200      	movs	r2, #0
   d82c6:	6840      	ldr	r0, [r0, #4]
   d82c8:	f7ff bf6a 	b.w	d81a0 <network_set_listen_timeout>

000d82cc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d82cc:	2200      	movs	r2, #0
   d82ce:	f081 0101 	eor.w	r1, r1, #1
   d82d2:	6840      	ldr	r0, [r0, #4]
   d82d4:	f7ff bf54 	b.w	d8180 <network_listen>

000d82d8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d82d8:	2300      	movs	r3, #0
   d82da:	461a      	mov	r2, r3
   d82dc:	4619      	mov	r1, r3
   d82de:	6840      	ldr	r0, [r0, #4]
   d82e0:	f7ff bf46 	b.w	d8170 <network_off>

000d82e4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d82e4:	2300      	movs	r3, #0
   d82e6:	461a      	mov	r2, r3
   d82e8:	4619      	mov	r1, r3
   d82ea:	6840      	ldr	r0, [r0, #4]
   d82ec:	f7ff bf38 	b.w	d8160 <network_on>

000d82f0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d82f0:	2200      	movs	r2, #0
   d82f2:	4611      	mov	r1, r2
   d82f4:	6840      	ldr	r0, [r0, #4]
   d82f6:	f7ff bf2b 	b.w	d8150 <network_ready>

000d82fa <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d82fa:	2200      	movs	r2, #0
   d82fc:	4611      	mov	r1, r2
   d82fe:	6840      	ldr	r0, [r0, #4]
   d8300:	f7ff bf16 	b.w	d8130 <network_connecting>

000d8304 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8304:	2200      	movs	r2, #0
   d8306:	2102      	movs	r1, #2
   d8308:	6840      	ldr	r0, [r0, #4]
   d830a:	f7ff bf19 	b.w	d8140 <network_disconnect>

000d830e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d830e:	2300      	movs	r3, #0
   d8310:	461a      	mov	r2, r3
   d8312:	6840      	ldr	r0, [r0, #4]
   d8314:	f7ff bf04 	b.w	d8120 <network_connect>

000d8318 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8318:	4b02      	ldr	r3, [pc, #8]	; (d8324 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d831a:	2203      	movs	r2, #3
   d831c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d831e:	4a02      	ldr	r2, [pc, #8]	; (d8328 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8320:	601a      	str	r2, [r3, #0]
   d8322:	4770      	bx	lr
   d8324:	2003e31c 	.word	0x2003e31c
   d8328:	000df810 	.word	0x000df810

000d832c <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d832c:	680a      	ldr	r2, [r1, #0]
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   d832e:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d8330:	6892      	ldr	r2, [r2, #8]
   d8332:	4601      	mov	r1, r0
   d8334:	4618      	mov	r0, r3
   d8336:	4710      	bx	r2

000d8338 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
 */

#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   d8338:	b570      	push	{r4, r5, r6, lr}
   d833a:	4c0e      	ldr	r4, [pc, #56]	; (d8374 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   d833c:	6004      	str	r4, [r0, #0]
    d_.size = sizeof(LEDStatusData);
   d833e:	241c      	movs	r4, #28
   d8340:	6044      	str	r4, [r0, #4]
    d_.next = nullptr;
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d8342:	f89d 4014 	ldrb.w	r4, [sp, #20]
   d8346:	f89d 6010 	ldrb.w	r6, [sp, #16]
   d834a:	f004 0403 	and.w	r4, r4, #3
   d834e:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   d8352:	2500      	movs	r5, #0
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d8354:	b2e4      	uxtb	r4, r4
   d8356:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   d8358:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   d835a:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   d835c:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d835e:	7c42      	ldrb	r2, [r0, #17]
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   d8360:	6085      	str	r5, [r0, #8]
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d8362:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   d8364:	bf08      	it	eq
   d8366:	4b04      	ldreq	r3, [pc, #16]	; (d8378 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
    d_.prev = nullptr;
   d8368:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
        d_.callback = updateCallback; // User callback
   d836a:	bf06      	itte	eq
   d836c:	6183      	streq	r3, [r0, #24]
        d_.data = this; // Callback data
   d836e:	61c0      	streq	r0, [r0, #28]
    } else {
        d_.period = period;
   d8370:	8303      	strhne	r3, [r0, #24]
    }
}
   d8372:	bd70      	pop	{r4, r5, r6, pc}
   d8374:	000df340 	.word	0x000df340
   d8378:	000d832d 	.word	0x000d832d

000d837c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d837c:	2100      	movs	r1, #0
   d837e:	f7ff bc37 	b.w	d7bf0 <HAL_SPI_Acquire>

000d8382 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d8382:	2100      	movs	r1, #0
   d8384:	f7ff bc3c 	b.w	d7c00 <HAL_SPI_Release>

000d8388 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d8388:	b510      	push	{r4, lr}
   d838a:	4604      	mov	r4, r0
{
    _spi = spi;
   d838c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d838e:	4608      	mov	r0, r1
   d8390:	f7ff fbf6 	bl	d7b80 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8394:	2300      	movs	r3, #0
   d8396:	6063      	str	r3, [r4, #4]
}
   d8398:	4620      	mov	r0, r4
   d839a:	bd10      	pop	{r4, pc}

000d839c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d839c:	b510      	push	{r4, lr}
   d839e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d83a0:	7800      	ldrb	r0, [r0, #0]
   d83a2:	f7ff ffeb 	bl	d837c <_ZN8SPIClass4lockEv.isra.0>
   d83a6:	b948      	cbnz	r0, d83bc <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d83a8:	7820      	ldrb	r0, [r4, #0]
   d83aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d83ae:	f7ff fbcf 	bl	d7b50 <HAL_SPI_Begin>
        unlock();
   d83b2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d83b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d83b8:	f7ff bfe3 	b.w	d8382 <_ZN8SPIClass6unlockEv.isra.1>
   d83bc:	bd10      	pop	{r4, pc}

000d83be <_ZN8SPIClass5beginE8SPI_Modet>:
        unlock();
    }
}

void SPIClass::begin(SPI_Mode mode, uint16_t ss_pin)
{
   d83be:	b570      	push	{r4, r5, r6, lr}
   d83c0:	4604      	mov	r4, r0
    if (!lock())
   d83c2:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::begin(SPI_Mode mode, uint16_t ss_pin)
{
   d83c4:	460d      	mov	r5, r1
   d83c6:	4616      	mov	r6, r2
    if (!lock())
   d83c8:	f7ff ffd8 	bl	d837c <_ZN8SPIClass4lockEv.isra.0>
   d83cc:	4603      	mov	r3, r0
   d83ce:	b948      	cbnz	r0, d83e4 <_ZN8SPIClass5beginE8SPI_Modet+0x26>
    {
        HAL_SPI_Begin_Ext(_spi, mode, ss_pin, NULL);
   d83d0:	7820      	ldrb	r0, [r4, #0]
   d83d2:	4632      	mov	r2, r6
   d83d4:	4629      	mov	r1, r5
   d83d6:	f7ff fbf3 	bl	d7bc0 <HAL_SPI_Begin_Ext>
        unlock();
   d83da:	7820      	ldrb	r0, [r4, #0]
    }
}
   d83dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void SPIClass::begin(SPI_Mode mode, uint16_t ss_pin)
{
    if (!lock())
    {
        HAL_SPI_Begin_Ext(_spi, mode, ss_pin, NULL);
        unlock();
   d83e0:	f7ff bfcf 	b.w	d8382 <_ZN8SPIClass6unlockEv.isra.1>
   d83e4:	bd70      	pop	{r4, r5, r6, pc}

000d83e6 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d83e6:	7800      	ldrb	r0, [r0, #0]
   d83e8:	f7ff bfcb 	b.w	d8382 <_ZN8SPIClass6unlockEv.isra.1>

000d83ec <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d83ec:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d83ee:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d83f0:	6018      	str	r0, [r3, #0]
   d83f2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d83f4:	6818      	ldr	r0, [r3, #0]
   d83f6:	4288      	cmp	r0, r1
   d83f8:	b2e5      	uxtb	r5, r4
   d83fa:	d906      	bls.n	d840a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d83fc:	3401      	adds	r4, #1
   d83fe:	2c08      	cmp	r4, #8
   d8400:	d002      	beq.n	d8408 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d8402:	0840      	lsrs	r0, r0, #1
   d8404:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d8406:	e7f5      	b.n	d83f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d8408:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d840a:	4b02      	ldr	r3, [pc, #8]	; (d8414 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d840c:	5d5b      	ldrb	r3, [r3, r5]
   d840e:	7013      	strb	r3, [r2, #0]
   d8410:	bd30      	pop	{r4, r5, pc}
   d8412:	bf00      	nop
   d8414:	000df83c 	.word	0x000df83c

000d8418 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d8418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d841c:	4607      	mov	r7, r0
   d841e:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d8420:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d8422:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d8424:	f7ff ffaa 	bl	d837c <_ZN8SPIClass4lockEv.isra.0>
   d8428:	2800      	cmp	r0, #0
   d842a:	db62      	blt.n	d84f2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d842c:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d842e:	2214      	movs	r2, #20
   d8430:	2100      	movs	r1, #0
   d8432:	a809      	add	r0, sp, #36	; 0x24
   d8434:	f004 fcfd 	bl	dce32 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8438:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d843a:	4620      	mov	r0, r4
   d843c:	2200      	movs	r2, #0
   d843e:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d8440:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d8444:	f7ff fbac 	bl	d7ba0 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d8448:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d844c:	b154      	cbz	r4, d8464 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d844e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d8452:	b935      	cbnz	r5, d8462 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d8454:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d8458:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d845c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d8460:	e003      	b.n	d846a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d8462:	2400      	movs	r4, #0
   d8464:	46a1      	mov	r9, r4
   d8466:	46a0      	mov	r8, r4
   d8468:	2501      	movs	r5, #1
   d846a:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d846c:	b105      	cbz	r5, d8470 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d846e:	b9bb      	cbnz	r3, d84a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d8470:	429d      	cmp	r5, r3
   d8472:	d10b      	bne.n	d848c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d8474:	68b2      	ldr	r2, [r6, #8]
   d8476:	4542      	cmp	r2, r8
   d8478:	d108      	bne.n	d848c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d847a:	f88d 9020 	strb.w	r9, [sp, #32]
   d847e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d8482:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d8486:	89b2      	ldrh	r2, [r6, #12]
   d8488:	4291      	cmp	r1, r2
   d848a:	d009      	beq.n	d84a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d848c:	b153      	cbz	r3, d84a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d848e:	2400      	movs	r4, #0
   d8490:	7838      	ldrb	r0, [r7, #0]
   d8492:	9401      	str	r4, [sp, #4]
   d8494:	9400      	str	r4, [sp, #0]
   d8496:	4623      	mov	r3, r4
   d8498:	4622      	mov	r2, r4
   d849a:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d849c:	f7ff fba0 	bl	d7be0 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d84a0:	2000      	movs	r0, #0
   d84a2:	e026      	b.n	d84f2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d84a4:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d84a8:	68b1      	ldr	r1, [r6, #8]
   d84aa:	980a      	ldr	r0, [sp, #40]	; 0x28
   d84ac:	ab04      	add	r3, sp, #16
   d84ae:	f10d 020f 	add.w	r2, sp, #15
   d84b2:	f7ff ff9b 	bl	d83ec <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d84b6:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d84b8:	b105      	cbz	r5, d84bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d84ba:	b9b1      	cbnz	r1, d84ea <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d84bc:	42a9      	cmp	r1, r5
   d84be:	d008      	beq.n	d84d2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d84c0:	2400      	movs	r4, #0
   d84c2:	7838      	ldrb	r0, [r7, #0]
   d84c4:	9401      	str	r4, [sp, #4]
   d84c6:	7b74      	ldrb	r4, [r6, #13]
   d84c8:	7b33      	ldrb	r3, [r6, #12]
   d84ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d84ce:	9400      	str	r4, [sp, #0]
   d84d0:	e7e4      	b.n	d849c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d84d2:	68b3      	ldr	r3, [r6, #8]
   d84d4:	4543      	cmp	r3, r8
   d84d6:	d3f3      	bcc.n	d84c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d84d8:	f88d 9020 	strb.w	r9, [sp, #32]
   d84dc:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d84e0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d84e4:	89b3      	ldrh	r3, [r6, #12]
   d84e6:	429a      	cmp	r2, r3
   d84e8:	d1ea      	bne.n	d84c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d84ea:	9b04      	ldr	r3, [sp, #16]
   d84ec:	4543      	cmp	r3, r8
   d84ee:	d1e7      	bne.n	d84c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d84f0:	e7d6      	b.n	d84a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d84f2:	b00f      	add	sp, #60	; 0x3c
   d84f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d84f8 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d84f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d84fc:	b088      	sub	sp, #32
    unsigned clock = 0;
   d84fe:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d8500:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d8502:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d8504:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d8506:	460e      	mov	r6, r1
   d8508:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d850a:	f7ff ff37 	bl	d837c <_ZN8SPIClass4lockEv.isra.0>
   d850e:	4605      	mov	r5, r0
   d8510:	bb00      	cbnz	r0, d8554 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d8512:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d8516:	4601      	mov	r1, r0
   d8518:	2214      	movs	r2, #20
   d851a:	a803      	add	r0, sp, #12
   d851c:	f004 fc89 	bl	dce32 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8520:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d8522:	462a      	mov	r2, r5
   d8524:	a903      	add	r1, sp, #12
   d8526:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d8528:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d852c:	f7ff fb38 	bl	d7ba0 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d8530:	ab02      	add	r3, sp, #8
   d8532:	f10d 0207 	add.w	r2, sp, #7
   d8536:	fb07 f106 	mul.w	r1, r7, r6
   d853a:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d853c:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d8540:	f7ff ff54 	bl	d83ec <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d8544:	7820      	ldrb	r0, [r4, #0]
   d8546:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d854a:	f7ff fb09 	bl	d7b60 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d854e:	7820      	ldrb	r0, [r4, #0]
   d8550:	f7ff ff17 	bl	d8382 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d8554:	9802      	ldr	r0, [sp, #8]
   d8556:	b008      	add	sp, #32
   d8558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d855c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d855c:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d855e:	7800      	ldrb	r0, [r0, #0]
   d8560:	f7ff fb06 	bl	d7b70 <HAL_SPI_Send_Receive_Data>
}
   d8564:	b2c0      	uxtb	r0, r0
   d8566:	bd08      	pop	{r3, pc}

000d8568 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d8568:	b530      	push	{r4, r5, lr}
   d856a:	b087      	sub	sp, #28
   d856c:	4604      	mov	r4, r0
   d856e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d8570:	7800      	ldrb	r0, [r0, #0]
   d8572:	9500      	str	r5, [sp, #0]
   d8574:	f7ff fb1c 	bl	d7bb0 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d8578:	b93d      	cbnz	r5, d858a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d857a:	a902      	add	r1, sp, #8
   d857c:	7820      	ldrb	r0, [r4, #0]
   d857e:	f7ff fb27 	bl	d7bd0 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d8582:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d8586:	07db      	lsls	r3, r3, #31
   d8588:	d4f7      	bmi.n	d857a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d858a:	b007      	add	sp, #28
   d858c:	bd30      	pop	{r4, r5, pc}

000d858e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d858e:	7800      	ldrb	r0, [r0, #0]
   d8590:	f7ff bafe 	b.w	d7b90 <HAL_SPI_Is_Enabled>

000d8594 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d8594:	b510      	push	{r4, lr}
   d8596:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d8598:	6800      	ldr	r0, [r0, #0]
   d859a:	b118      	cbz	r0, d85a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d859c:	f7ff fe48 	bl	d8230 <free>
            wakeupSource_ = nullptr;
   d85a0:	2300      	movs	r3, #0
   d85a2:	6023      	str	r3, [r4, #0]
   d85a4:	bd10      	pop	{r4, pc}

000d85a6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d85a6:	b510      	push	{r4, lr}
   d85a8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d85aa:	f7ff fff3 	bl	d8594 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d85ae:	4620      	mov	r0, r4
   d85b0:	bd10      	pop	{r4, pc}
	...

000d85b4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d85b4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d85b6:	4c09      	ldr	r4, [pc, #36]	; (d85dc <_GLOBAL__sub_I_System+0x28>)
   d85b8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d85ba:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d85be:	6020      	str	r0, [r4, #0]
   d85c0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d85c2:	71a0      	strb	r0, [r4, #6]
   d85c4:	8120      	strh	r0, [r4, #8]
   d85c6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d85c8:	f7ff fd66 	bl	d8098 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d85cc:	4620      	mov	r0, r4
   d85ce:	4a04      	ldr	r2, [pc, #16]	; (d85e0 <_GLOBAL__sub_I_System+0x2c>)
   d85d0:	4904      	ldr	r1, [pc, #16]	; (d85e4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d85d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d85d6:	f003 bc85 	b.w	dbee4 <__aeabi_atexit>
   d85da:	bf00      	nop
   d85dc:	2003e324 	.word	0x2003e324
   d85e0:	2003d460 	.word	0x2003d460
   d85e4:	000d85a7 	.word	0x000d85a7

000d85e8 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d85e8:	2300      	movs	r3, #0
   d85ea:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d85ec:	6043      	str	r3, [r0, #4]
	len = 0;
   d85ee:	6083      	str	r3, [r0, #8]
	flags = 0;
   d85f0:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d85f2:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d85f4:	680c      	ldr	r4, [r1, #0]
   d85f6:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d85f8:	684c      	ldr	r4, [r1, #4]
   d85fa:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d85fc:	688c      	ldr	r4, [r1, #8]
   d85fe:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d8600:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d8602:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d8604:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d8606:	bd10      	pop	{r4, pc}

000d8608 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8608:	b510      	push	{r4, lr}
   d860a:	4604      	mov	r4, r0
{
	free(buffer);
   d860c:	6800      	ldr	r0, [r0, #0]
   d860e:	f7ff fe0f 	bl	d8230 <free>
}
   d8612:	4620      	mov	r0, r4
   d8614:	bd10      	pop	{r4, pc}

000d8616 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8616:	b510      	push	{r4, lr}
   d8618:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d861a:	6800      	ldr	r0, [r0, #0]
   d861c:	b108      	cbz	r0, d8622 <_ZN6String10invalidateEv+0xc>
   d861e:	f7ff fe07 	bl	d8230 <free>
	buffer = NULL;
   d8622:	2300      	movs	r3, #0
   d8624:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d8626:	60a3      	str	r3, [r4, #8]
   d8628:	6063      	str	r3, [r4, #4]
   d862a:	bd10      	pop	{r4, pc}

000d862c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d862c:	b538      	push	{r3, r4, r5, lr}
   d862e:	4604      	mov	r4, r0
   d8630:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8632:	6800      	ldr	r0, [r0, #0]
   d8634:	3101      	adds	r1, #1
   d8636:	f7ff fe03 	bl	d8240 <realloc>
	if (newbuffer) {
   d863a:	b110      	cbz	r0, d8642 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d863c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d8640:	2001      	movs	r0, #1
	}
	return 0;
}
   d8642:	bd38      	pop	{r3, r4, r5, pc}

000d8644 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8644:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8646:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8648:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d864a:	b113      	cbz	r3, d8652 <_ZN6String7reserveEj+0xe>
   d864c:	6843      	ldr	r3, [r0, #4]
   d864e:	428b      	cmp	r3, r1
   d8650:	d207      	bcs.n	d8662 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d8652:	4620      	mov	r0, r4
   d8654:	f7ff ffea 	bl	d862c <_ZN6String12changeBufferEj>
   d8658:	b120      	cbz	r0, d8664 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d865a:	68a3      	ldr	r3, [r4, #8]
   d865c:	b90b      	cbnz	r3, d8662 <_ZN6String7reserveEj+0x1e>
   d865e:	6822      	ldr	r2, [r4, #0]
   d8660:	7013      	strb	r3, [r2, #0]
   d8662:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d8664:	bd10      	pop	{r4, pc}

000d8666 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8666:	b570      	push	{r4, r5, r6, lr}
   d8668:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d866a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d866c:	4604      	mov	r4, r0
   d866e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d8670:	f7ff ffe8 	bl	d8644 <_ZN6String7reserveEj>
   d8674:	b918      	cbnz	r0, d867e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d8676:	4620      	mov	r0, r4
   d8678:	f7ff ffcd 	bl	d8616 <_ZN6String10invalidateEv>
		return *this;
   d867c:	e009      	b.n	d8692 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d867e:	462a      	mov	r2, r5
   d8680:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d8682:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d8684:	6820      	ldr	r0, [r4, #0]
   d8686:	f004 fbae 	bl	dcde6 <memcpy>
	buffer[len] = 0;
   d868a:	6822      	ldr	r2, [r4, #0]
   d868c:	68a3      	ldr	r3, [r4, #8]
   d868e:	2100      	movs	r1, #0
   d8690:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d8692:	4620      	mov	r0, r4
   d8694:	bd70      	pop	{r4, r5, r6, pc}

000d8696 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8696:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8698:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d869a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d869c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d869e:	6043      	str	r3, [r0, #4]
	len = 0;
   d86a0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d86a2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d86a4:	460d      	mov	r5, r1
   d86a6:	b139      	cbz	r1, d86b8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d86a8:	4608      	mov	r0, r1
   d86aa:	f004 fc48 	bl	dcf3e <strlen>
   d86ae:	4629      	mov	r1, r5
   d86b0:	4602      	mov	r2, r0
   d86b2:	4620      	mov	r0, r4
   d86b4:	f7ff ffd7 	bl	d8666 <_ZN6String4copyEPKcj>
}
   d86b8:	4620      	mov	r0, r4
   d86ba:	bd38      	pop	{r3, r4, r5, pc}

000d86bc <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d86bc:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d86be:	b510      	push	{r4, lr}
   d86c0:	460b      	mov	r3, r1
   d86c2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d86c4:	d007      	beq.n	d86d6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d86c6:	6809      	ldr	r1, [r1, #0]
   d86c8:	b119      	cbz	r1, d86d2 <_ZN6StringaSERKS_+0x16>
   d86ca:	689a      	ldr	r2, [r3, #8]
   d86cc:	f7ff ffcb 	bl	d8666 <_ZN6String4copyEPKcj>
   d86d0:	e001      	b.n	d86d6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d86d2:	f7ff ffa0 	bl	d8616 <_ZN6String10invalidateEv>

	return *this;
}
   d86d6:	4620      	mov	r0, r4
   d86d8:	bd10      	pop	{r4, pc}

000d86da <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d86da:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d86dc:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d86de:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d86e0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d86e2:	6043      	str	r3, [r0, #4]
	len = 0;
   d86e4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d86e6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d86e8:	f7ff ffe8 	bl	d86bc <_ZN6StringaSERKS_>
}
   d86ec:	4620      	mov	r0, r4
   d86ee:	bd10      	pop	{r4, pc}

000d86f0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d86f0:	b538      	push	{r3, r4, r5, lr}
   d86f2:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d86f4:	460c      	mov	r4, r1
   d86f6:	b141      	cbz	r1, d870a <_ZN6StringaSEPKc+0x1a>
   d86f8:	4608      	mov	r0, r1
   d86fa:	f004 fc20 	bl	dcf3e <strlen>
   d86fe:	4621      	mov	r1, r4
   d8700:	4602      	mov	r2, r0
   d8702:	4628      	mov	r0, r5
   d8704:	f7ff ffaf 	bl	d8666 <_ZN6String4copyEPKcj>
   d8708:	e001      	b.n	d870e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d870a:	f7ff ff84 	bl	d8616 <_ZN6String10invalidateEv>

	return *this;
}
   d870e:	4628      	mov	r0, r5
   d8710:	bd38      	pop	{r3, r4, r5, pc}

000d8712 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d8712:	b570      	push	{r4, r5, r6, lr}
   d8714:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d8716:	460e      	mov	r6, r1
   d8718:	b909      	cbnz	r1, d871e <_ZN6String6concatEPKcj+0xc>
   d871a:	2000      	movs	r0, #0
   d871c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d871e:	b16a      	cbz	r2, d873c <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d8720:	6883      	ldr	r3, [r0, #8]
   d8722:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d8724:	4629      	mov	r1, r5
   d8726:	f7ff ff8d 	bl	d8644 <_ZN6String7reserveEj>
   d872a:	2800      	cmp	r0, #0
   d872c:	d0f5      	beq.n	d871a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d872e:	6820      	ldr	r0, [r4, #0]
   d8730:	68a3      	ldr	r3, [r4, #8]
   d8732:	4631      	mov	r1, r6
   d8734:	4418      	add	r0, r3
   d8736:	f004 fbde 	bl	dcef6 <strcpy>
	len = newlen;
   d873a:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d873c:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d873e:	bd70      	pop	{r4, r5, r6, pc}

000d8740 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d8740:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d8742:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d8744:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d8748:	2201      	movs	r2, #1
   d874a:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d874c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d8750:	f7ff ffdf 	bl	d8712 <_ZN6String6concatEPKcj>
}
   d8754:	b003      	add	sp, #12
   d8756:	f85d fb04 	ldr.w	pc, [sp], #4

000d875a <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d875a:	6883      	ldr	r3, [r0, #8]
   d875c:	428b      	cmp	r3, r1
   d875e:	d903      	bls.n	d8768 <_ZNK6StringixEj+0xe>
   d8760:	6800      	ldr	r0, [r0, #0]
   d8762:	b110      	cbz	r0, d876a <_ZNK6StringixEj+0x10>
	return buffer[index];
   d8764:	5c40      	ldrb	r0, [r0, r1]
   d8766:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d8768:	2000      	movs	r0, #0
	return buffer[index];
}
   d876a:	4770      	bx	lr

000d876c <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   d876c:	f7ff bff5 	b.w	d875a <_ZNK6StringixEj>

000d8770 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8770:	4770      	bx	lr

000d8772 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d8772:	2000      	movs	r0, #0
   d8774:	4770      	bx	lr

000d8776 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8776:	4770      	bx	lr

000d8778 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d8778:	2000      	movs	r0, #0
   d877a:	4770      	bx	lr

000d877c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d877c:	4770      	bx	lr

000d877e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d877e:	2000      	movs	r0, #0
   d8780:	4770      	bx	lr

000d8782 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8782:	b510      	push	{r4, lr}
   d8784:	2114      	movs	r1, #20
   d8786:	4604      	mov	r4, r0
   d8788:	f003 fbba 	bl	dbf00 <_ZdlPvj>
   d878c:	4620      	mov	r0, r4
   d878e:	bd10      	pop	{r4, pc}

000d8790 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d8790:	b510      	push	{r4, lr}
   d8792:	2114      	movs	r1, #20
   d8794:	4604      	mov	r4, r0
   d8796:	f003 fbb3 	bl	dbf00 <_ZdlPvj>
   d879a:	4620      	mov	r0, r4
   d879c:	bd10      	pop	{r4, pc}

000d879e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d879e:	b510      	push	{r4, lr}
   d87a0:	2114      	movs	r1, #20
   d87a2:	4604      	mov	r4, r0
   d87a4:	f003 fbac 	bl	dbf00 <_ZdlPvj>
   d87a8:	4620      	mov	r0, r4
   d87aa:	bd10      	pop	{r4, pc}

000d87ac <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d87ac:	f7fb bc77 	b.w	d409e <_ZdlPv>

000d87b0 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d87b0:	f7fb bc75 	b.w	d409e <_ZdlPv>

000d87b4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d87b4:	f7fb bc73 	b.w	d409e <_ZdlPv>

000d87b8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d87b8:	b510      	push	{r4, lr}
   d87ba:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d87bc:	6800      	ldr	r0, [r0, #0]
   d87be:	b108      	cbz	r0, d87c4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d87c0:	f7ff fb20 	bl	d7e04 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d87c4:	4620      	mov	r0, r4
   d87c6:	bd10      	pop	{r4, pc}

000d87c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d87c8:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d87ca:	200a      	movs	r0, #10
   d87cc:	4a02      	ldr	r2, [pc, #8]	; (d87d8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d87ce:	2100      	movs	r1, #0
   d87d0:	f7ff fc30 	bl	d8034 <panic_>
    }
}
   d87d4:	bd08      	pop	{r3, pc}
   d87d6:	bf00      	nop
   d87d8:	000d7c21 	.word	0x000d7c21

000d87dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d87dc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d87de:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d87e0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d87e2:	689b      	ldr	r3, [r3, #8]
   d87e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d87e6:	68a3      	ldr	r3, [r4, #8]
   d87e8:	3b01      	subs	r3, #1
   d87ea:	60a3      	str	r3, [r4, #8]
   d87ec:	b92b      	cbnz	r3, d87fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d87ee:	6823      	ldr	r3, [r4, #0]
   d87f0:	4620      	mov	r0, r4
   d87f2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d87f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d87f8:	4718      	bx	r3
   d87fa:	bd10      	pop	{r4, pc}

000d87fc <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d87fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8800:	b2da      	uxtb	r2, r3
   d8802:	2a09      	cmp	r2, #9
   d8804:	d801      	bhi.n	d880a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d8806:	4618      	mov	r0, r3
   d8808:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d880a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d880e:	2b05      	cmp	r3, #5
   d8810:	d801      	bhi.n	d8816 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d8812:	3857      	subs	r0, #87	; 0x57
   d8814:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d8816:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d881a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d881c:	bf94      	ite	ls
   d881e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d8820:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d8824:	4770      	bx	lr
	...

000d8828 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d8828:	b510      	push	{r4, lr}
            locked_(false) {
   d882a:	2300      	movs	r3, #0
   d882c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d882e:	4b04      	ldr	r3, [pc, #16]	; (d8840 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d8830:	4604      	mov	r4, r0
   d8832:	6818      	ldr	r0, [r3, #0]
   d8834:	f7ff faee 	bl	d7e14 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d8838:	2301      	movs	r3, #1
   d883a:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d883c:	4620      	mov	r0, r4
   d883e:	bd10      	pop	{r4, pc}
   d8840:	2003e33c 	.word	0x2003e33c

000d8844 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d8844:	b510      	push	{r4, lr}
        if (locked_) {
   d8846:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d8848:	4604      	mov	r4, r0
        if (locked_) {
   d884a:	b11b      	cbz	r3, d8854 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d884c:	4b02      	ldr	r3, [pc, #8]	; (d8858 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d884e:	6818      	ldr	r0, [r3, #0]
   d8850:	f7ff fae8 	bl	d7e24 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d8854:	4620      	mov	r0, r4
   d8856:	bd10      	pop	{r4, pc}
   d8858:	2003e33c 	.word	0x2003e33c

000d885c <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d885c:	2200      	movs	r2, #0
   d885e:	6002      	str	r2, [r0, #0]
   d8860:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d8862:	4770      	bx	lr

000d8864 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d8864:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d8866:	7982      	ldrb	r2, [r0, #6]
   d8868:	798b      	ldrb	r3, [r1, #6]
   d886a:	429a      	cmp	r2, r3
   d886c:	d106      	bne.n	d887c <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d886e:	2206      	movs	r2, #6
   d8870:	f004 faaa 	bl	dcdc8 <memcmp>
   d8874:	fab0 f080 	clz	r0, r0
   d8878:	0940      	lsrs	r0, r0, #5
   d887a:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d887c:	2000      	movs	r0, #0
}
   d887e:	bd08      	pop	{r3, pc}

000d8880 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d8880:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d8882:	2301      	movs	r3, #1
   d8884:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d8886:	4b05      	ldr	r3, [pc, #20]	; (d889c <_ZN8particle7BleUuidC1Ev+0x1c>)
   d8888:	4602      	mov	r2, r0
   d888a:	f103 0110 	add.w	r1, r3, #16
   d888e:	f853 4b04 	ldr.w	r4, [r3], #4
   d8892:	f842 4b04 	str.w	r4, [r2], #4
   d8896:	428b      	cmp	r3, r1
   d8898:	d1f9      	bne.n	d888e <_ZN8particle7BleUuidC1Ev+0xe>
}
   d889a:	bd10      	pop	{r4, pc}
   d889c:	000dfa48 	.word	0x000dfa48

000d88a0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d88a0:	b510      	push	{r4, lr}
    if (uuid128) {
   d88a2:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d88a4:	4604      	mov	r4, r0
    if (uuid128) {
   d88a6:	b1b9      	cbz	r1, d88d8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d88a8:	2a01      	cmp	r2, #1
   d88aa:	d109      	bne.n	d88c0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d88ac:	4603      	mov	r3, r0
   d88ae:	f101 0210 	add.w	r2, r1, #16
   d88b2:	f851 0b04 	ldr.w	r0, [r1], #4
   d88b6:	f843 0b04 	str.w	r0, [r3], #4
   d88ba:	4291      	cmp	r1, r2
   d88bc:	d1f9      	bne.n	d88b2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d88be:	e008      	b.n	d88d2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d88c0:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d88c2:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d88c4:	5c98      	ldrb	r0, [r3, r2]
   d88c6:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d88ca:	3a01      	subs	r2, #1
   d88cc:	b2d2      	uxtb	r2, r2
   d88ce:	2aff      	cmp	r2, #255	; 0xff
   d88d0:	d1f8      	bne.n	d88c4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d88d2:	2301      	movs	r3, #1
   d88d4:	6123      	str	r3, [r4, #16]
   d88d6:	e002      	b.n	d88de <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d88d8:	2210      	movs	r2, #16
   d88da:	f004 faaa 	bl	dce32 <memset>
    }
}
   d88de:	4620      	mov	r0, r4
   d88e0:	bd10      	pop	{r4, pc}

000d88e2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
    type_ = BleUuidType::SHORT;
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d88e2:	b538      	push	{r3, r4, r5, lr}
   d88e4:	4605      	mov	r5, r0
   d88e6:	4614      	mov	r4, r2
        : BleUuid(uuid128, order) {
   d88e8:	461a      	mov	r2, r3
   d88ea:	f7ff ffd9 	bl	d88a0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d88ee:	732c      	strb	r4, [r5, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d88f0:	0a24      	lsrs	r4, r4, #8
   d88f2:	736c      	strb	r4, [r5, #13]
}
   d88f4:	4628      	mov	r0, r5
   d88f6:	bd38      	pop	{r3, r4, r5, pc}

000d88f8 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d88f8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d88fa:	6902      	ldr	r2, [r0, #16]
   d88fc:	b90a      	cbnz	r2, d8902 <_ZNK8particle7BleUuid7isValidEv+0xa>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d88fe:	8980      	ldrh	r0, [r0, #12]
   d8900:	e003      	b.n	d890a <_ZNK8particle7BleUuid7isValidEv+0x12>
    } else {
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d8902:	2210      	movs	r2, #16
   d8904:	4903      	ldr	r1, [pc, #12]	; (d8914 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d8906:	f004 fa5f 	bl	dcdc8 <memcmp>
   d890a:	3000      	adds	r0, #0
   d890c:	bf18      	it	ne
   d890e:	2001      	movne	r0, #1
    }
}
   d8910:	bd08      	pop	{r3, pc}
   d8912:	bf00      	nop
   d8914:	000dfa48 	.word	0x000dfa48

000d8918 <_ZNK8particle7BleUuid4typeEv>:

BleUuidType BleUuid::type() const {
    return type_;
}
   d8918:	6900      	ldr	r0, [r0, #16]
   d891a:	4770      	bx	lr

000d891c <_ZN8particle7BleUuid7halUUIDEv>:

hal_ble_uuid_t BleUuid::halUUID() {
   d891c:	b538      	push	{r3, r4, r5, lr}
   d891e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d8920:	2214      	movs	r2, #20
   d8922:	2100      	movs	r1, #0

BleUuidType BleUuid::type() const {
    return type_;
}

hal_ble_uuid_t BleUuid::halUUID() {
   d8924:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d8926:	f004 fa84 	bl	dce32 <memset>
    if (type_ == BleUuidType::SHORT) {
   d892a:	6923      	ldr	r3, [r4, #16]
   d892c:	b92b      	cbnz	r3, d893a <_ZN8particle7BleUuid7halUUIDEv+0x1e>
        uuid.type = BLE_UUID_TYPE_16BIT;
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d892e:	7b62      	ldrb	r2, [r4, #13]
   d8930:	7b23      	ldrb	r3, [r4, #12]
   d8932:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d8936:	802b      	strh	r3, [r5, #0]
   d8938:	e00a      	b.n	d8950 <_ZN8particle7BleUuid7halUUIDEv+0x34>
    } else {
        uuid.type = BLE_UUID_TYPE_128BIT;
   d893a:	2301      	movs	r3, #1
   d893c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d893e:	f104 0210 	add.w	r2, r4, #16
   d8942:	462b      	mov	r3, r5
   d8944:	f854 1b04 	ldr.w	r1, [r4], #4
   d8948:	f843 1b04 	str.w	r1, [r3], #4
   d894c:	4294      	cmp	r4, r2
   d894e:	d1f9      	bne.n	d8944 <_ZN8particle7BleUuid7halUUIDEv+0x28>
    }
    return uuid;
}
   d8950:	4628      	mov	r0, r5
   d8952:	bd38      	pop	{r3, r4, r5, pc}

000d8954 <_ZNK8particle7BleUuid7shortedEv>:

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d8954:	7b42      	ldrb	r2, [r0, #13]
   d8956:	7b00      	ldrb	r0, [r0, #12]
}
   d8958:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d895c:	4770      	bx	lr

000d895e <_ZNK8particle7BleUuid8rawBytesEv>:
    return BLE_SIG_UUID_128BIT_LEN;
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}
   d895e:	4770      	bx	lr

000d8960 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d8960:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d8962:	690b      	ldr	r3, [r1, #16]
   d8964:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d8966:	f101 0210 	add.w	r2, r1, #16
   d896a:	4603      	mov	r3, r0
   d896c:	f851 4b04 	ldr.w	r4, [r1], #4
   d8970:	f843 4b04 	str.w	r4, [r3], #4
   d8974:	4291      	cmp	r1, r2
   d8976:	d1f9      	bne.n	d896c <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d8978:	bd10      	pop	{r4, pc}

000d897a <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d897a:	b510      	push	{r4, lr}
   d897c:	b086      	sub	sp, #24
   d897e:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d8980:	2201      	movs	r2, #1
   d8982:	a801      	add	r0, sp, #4
   d8984:	f7ff ff8c 	bl	d88a0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d8988:	a901      	add	r1, sp, #4
   d898a:	4620      	mov	r0, r4
   d898c:	f7ff ffe8 	bl	d8960 <_ZN8particle7BleUuidaSERKS0_>
}
   d8990:	b006      	add	sp, #24
   d8992:	bd10      	pop	{r4, pc}

000d8994 <_ZNK8particle7BleUuideqERKS0_>:

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    return *this = BleUuid(uuid);
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d8994:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d8996:	6902      	ldr	r2, [r0, #16]
   d8998:	690b      	ldr	r3, [r1, #16]
   d899a:	429a      	cmp	r2, r3
   d899c:	d106      	bne.n	d89ac <_ZNK8particle7BleUuideqERKS0_+0x18>
   d899e:	2210      	movs	r2, #16
   d89a0:	f004 fa12 	bl	dcdc8 <memcmp>
   d89a4:	fab0 f080 	clz	r0, r0
   d89a8:	0940      	lsrs	r0, r0, #5
   d89aa:	bd08      	pop	{r3, pc}
   d89ac:	2000      	movs	r0, #0
}
   d89ae:	bd08      	pop	{r3, pc}

000d89b0 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d89b0:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d89b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d89b4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d89b6:	4b31      	ldr	r3, [pc, #196]	; (d8a7c <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d89b8:	460e      	mov	r6, r1
   d89ba:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d89bc:	4602      	mov	r2, r0
   d89be:	f103 0110 	add.w	r1, r3, #16
   d89c2:	f853 0b04 	ldr.w	r0, [r3], #4
   d89c6:	f842 0b04 	str.w	r0, [r2], #4
   d89ca:	428b      	cmp	r3, r1
   d89cc:	d1f9      	bne.n	d89c2 <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d89ce:	2e00      	cmp	r6, #0
   d89d0:	d051      	beq.n	d8a76 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d89d2:	2124      	movs	r1, #36	; 0x24
   d89d4:	4630      	mov	r0, r6
   d89d6:	f004 fae4 	bl	dcfa2 <strnlen>
   d89da:	2804      	cmp	r0, #4
   d89dc:	d010      	beq.n	d8a00 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d89de:	2700      	movs	r7, #0
   d89e0:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d89e2:	2124      	movs	r1, #36	; 0x24
   d89e4:	4630      	mov	r0, r6
   d89e6:	f004 fadc 	bl	dcfa2 <strnlen>
   d89ea:	42b8      	cmp	r0, r7
   d89ec:	d901      	bls.n	d89f2 <_ZN8particle7BleUuid9constructEPKc+0x42>
   d89ee:	bb44      	cbnz	r4, d8a42 <_ZN8particle7BleUuid9constructEPKc+0x92>
   d89f0:	e041      	b.n	d8a76 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d89f2:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d89f4:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d89f6:	42a5      	cmp	r5, r4
   d89f8:	d03d      	beq.n	d8a76 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d89fa:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d89fe:	e7fa      	b.n	d89f6 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d8a00:	7830      	ldrb	r0, [r6, #0]
   d8a02:	f7ff fefb 	bl	d87fc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d8a06:	1e04      	subs	r4, r0, #0
   d8a08:	db18      	blt.n	d8a3c <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d8a0a:	7870      	ldrb	r0, [r6, #1]
   d8a0c:	f7ff fef6 	bl	d87fc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d8a10:	2800      	cmp	r0, #0
   d8a12:	db13      	blt.n	d8a3c <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d8a14:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d8a18:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d8a1c:	78b0      	ldrb	r0, [r6, #2]
   d8a1e:	f7ff feed 	bl	d87fc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d8a22:	1e04      	subs	r4, r0, #0
   d8a24:	db0a      	blt.n	d8a3c <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d8a26:	78f0      	ldrb	r0, [r6, #3]
   d8a28:	f7ff fee8 	bl	d87fc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d8a2c:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d8a2e:	bfa1      	itttt	ge
   d8a30:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d8a34:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d8a38:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d8a3a:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d8a3c:	2300      	movs	r3, #0
   d8a3e:	612b      	str	r3, [r5, #16]
   d8a40:	e019      	b.n	d8a76 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d8a42:	5df0      	ldrb	r0, [r6, r7]
   d8a44:	f7ff feda 	bl	d87fc <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d8a48:	0603      	lsls	r3, r0, #24
   d8a4a:	d412      	bmi.n	d8a72 <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d8a4c:	3c01      	subs	r4, #1
   d8a4e:	0100      	lsls	r0, r0, #4
   d8a50:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d8a52:	2124      	movs	r1, #36	; 0x24
   d8a54:	4630      	mov	r0, r6
   d8a56:	f004 faa4 	bl	dcfa2 <strnlen>
   d8a5a:	3701      	adds	r7, #1
   d8a5c:	4287      	cmp	r7, r0
   d8a5e:	d208      	bcs.n	d8a72 <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d8a60:	5df0      	ldrb	r0, [r6, r7]
   d8a62:	f7ff fecb 	bl	d87fc <_ZN8particle11hexToNibbleEc>
   d8a66:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d8a68:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d8a6a:	bfa2      	ittt	ge
   d8a6c:	5d2b      	ldrbge	r3, [r5, r4]
   d8a6e:	4318      	orrge	r0, r3
   d8a70:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d8a72:	3701      	adds	r7, #1
   d8a74:	e7b5      	b.n	d89e2 <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d8a76:	b003      	add	sp, #12
   d8a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8a7a:	bf00      	nop
   d8a7c:	000dfa48 	.word	0x000dfa48

000d8a80 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d8a80:	b538      	push	{r3, r4, r5, lr}
   d8a82:	4604      	mov	r4, r0
   d8a84:	460d      	mov	r5, r1
        : BleUuid() {
   d8a86:	f7ff fefb 	bl	d8880 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d8a8a:	4620      	mov	r0, r4
   d8a8c:	4629      	mov	r1, r5
   d8a8e:	f7ff ff8f 	bl	d89b0 <_ZN8particle7BleUuid9constructEPKc>
}
   d8a92:	4620      	mov	r0, r4
   d8a94:	bd38      	pop	{r3, r4, r5, pc}

000d8a96 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d8a96:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d8a98:	b18b      	cbz	r3, d8abe <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d8a9a:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d8a9c:	1ce5      	adds	r5, r4, #3
   d8a9e:	428d      	cmp	r5, r1
   d8aa0:	d80f      	bhi.n	d8ac2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d8aa2:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d8aa4:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d8aa6:	5d87      	ldrb	r7, [r0, r6]
   d8aa8:	4297      	cmp	r7, r2
   d8aaa:	d105      	bne.n	d8ab8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d8aac:	442e      	add	r6, r5
   d8aae:	42b1      	cmp	r1, r6
   d8ab0:	d307      	bcc.n	d8ac2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d8ab2:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d8ab4:	1c68      	adds	r0, r5, #1
                return adsLen;
   d8ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d8ab8:	3501      	adds	r5, #1
   d8aba:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d8abc:	e7ee      	b.n	d8a9c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d8abe:	4618      	mov	r0, r3
   d8ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8ac2:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d8ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8ac6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d8ac6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8aca:	4604      	mov	r4, r0
   d8acc:	460e      	mov	r6, r1
   d8ace:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d8ad0:	4617      	mov	r7, r2
   d8ad2:	2a00      	cmp	r2, #0
   d8ad4:	d03a      	beq.n	d8b4c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d8ad6:	460a      	mov	r2, r1
   d8ad8:	ab01      	add	r3, sp, #4
   d8ada:	6a01      	ldr	r1, [r0, #32]
   d8adc:	f7ff ffdb 	bl	d8a96 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d8ae0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d8ae4:	6a22      	ldr	r2, [r4, #32]
   d8ae6:	bb03      	cbnz	r3, d8b2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d8ae8:	b1f8      	cbz	r0, d8b2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d8aea:	1c96      	adds	r6, r2, #2
   d8aec:	442e      	add	r6, r5
   d8aee:	1a36      	subs	r6, r6, r0
   d8af0:	2e1f      	cmp	r6, #31
   d8af2:	d82b      	bhi.n	d8b4c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d8af4:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d8af8:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d8afc:	ebc8 0202 	rsb	r2, r8, r2
   d8b00:	1a12      	subs	r2, r2, r0
   d8b02:	eb00 0108 	add.w	r1, r0, r8
   d8b06:	eb05 0009 	add.w	r0, r5, r9
   d8b0a:	b292      	uxth	r2, r2
   d8b0c:	4421      	add	r1, r4
   d8b0e:	4420      	add	r0, r4
   d8b10:	f004 f974 	bl	dcdfc <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d8b14:	1c6b      	adds	r3, r5, #1
   d8b16:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d8b1a:	462a      	mov	r2, r5
   d8b1c:	4639      	mov	r1, r7
   d8b1e:	eb04 0009 	add.w	r0, r4, r9
   d8b22:	f004 f960 	bl	dcde6 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d8b26:	6226      	str	r6, [r4, #32]
   d8b28:	e010      	b.n	d8b4c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d8b2a:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d8b2c:	182b      	adds	r3, r5, r0
   d8b2e:	2b1f      	cmp	r3, #31
   d8b30:	d80c      	bhi.n	d8b4c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d8b32:	1c6b      	adds	r3, r5, #1
   d8b34:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d8b36:	4422      	add	r2, r4
   d8b38:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d8b3a:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d8b3c:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d8b3e:	4420      	add	r0, r4
   d8b40:	462a      	mov	r2, r5
   d8b42:	f004 f950 	bl	dcde6 <memcpy>
        selfLen_ += len;
   d8b46:	6a22      	ldr	r2, [r4, #32]
   d8b48:	442a      	add	r2, r5
   d8b4a:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d8b4c:	6a20      	ldr	r0, [r4, #32]
}
   d8b4e:	b003      	add	sp, #12
   d8b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8b54 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d8b54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d8b56:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d8b58:	4603      	mov	r3, r0
   d8b5a:	f100 021f 	add.w	r2, r0, #31
   d8b5e:	2000      	movs	r0, #0
   d8b60:	f803 0b01 	strb.w	r0, [r3], #1
   d8b64:	4293      	cmp	r3, r2
   d8b66:	f04f 0100 	mov.w	r1, #0
   d8b6a:	d1f9      	bne.n	d8b60 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d8b6c:	aa04      	add	r2, sp, #16
   d8b6e:	2306      	movs	r3, #6
   d8b70:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d8b74:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d8b76:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d8b78:	9100      	str	r1, [sp, #0]
   d8b7a:	4620      	mov	r0, r4
   d8b7c:	4619      	mov	r1, r3
   d8b7e:	f7ff ffa2 	bl	d8ac6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d8b82:	4620      	mov	r0, r4
   d8b84:	b004      	add	sp, #16
   d8b86:	bd10      	pop	{r4, pc}

000d8b88 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:

size_t BleAdvertisingData::appendLocalName(const String& name) {
    return appendLocalName(name.c_str());
}

size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   d8b88:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   d8b8a:	9300      	str	r3, [sp, #0]
   d8b8c:	4613      	mov	r3, r2
   d8b8e:	460a      	mov	r2, r1
   d8b90:	21ff      	movs	r1, #255	; 0xff
   d8b92:	f7ff ff98 	bl	d8ac6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d8b96:	b003      	add	sp, #12
   d8b98:	f85d fb04 	ldr.w	pc, [sp], #4

000d8b9c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d8b9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d8b9e:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d8ba0:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d8ba2:	ab01      	add	r3, sp, #4
   d8ba4:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d8ba6:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d8ba8:	f7ff ff75 	bl	d8a96 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d8bac:	4605      	mov	r5, r0
   d8bae:	b178      	cbz	r0, d8bd0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d8bb0:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d8bb2:	6a22      	ldr	r2, [r4, #32]
   d8bb4:	1829      	adds	r1, r5, r0
   d8bb6:	1a12      	subs	r2, r2, r0
   d8bb8:	1b52      	subs	r2, r2, r5
   d8bba:	4421      	add	r1, r4
   d8bbc:	4420      	add	r0, r4
   d8bbe:	f004 f912 	bl	dcde6 <memcpy>
        selfLen_ -= len;
   d8bc2:	6a23      	ldr	r3, [r4, #32]
   d8bc4:	1b5d      	subs	r5, r3, r5
   d8bc6:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d8bc8:	4631      	mov	r1, r6
   d8bca:	4620      	mov	r0, r4
   d8bcc:	f7ff ffe6 	bl	d8b9c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d8bd0:	b002      	add	sp, #8
   d8bd2:	bd70      	pop	{r4, r5, r6, pc}

000d8bd4 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d8bd4:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d8bd6:	2500      	movs	r5, #0
   d8bd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d8bdc:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d8bde:	8043      	strh	r3, [r0, #2]
   d8be0:	220e      	movs	r2, #14
   d8be2:	4629      	mov	r1, r5
   d8be4:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d8be6:	7105      	strb	r5, [r0, #4]
   d8be8:	3006      	adds	r0, #6
   d8bea:	f004 f922 	bl	dce32 <memset>
   d8bee:	f104 0014 	add.w	r0, r4, #20
   d8bf2:	f7ff fe45 	bl	d8880 <_ZN8particle7BleUuidC1Ev>
   d8bf6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d8bfa:	f7ff fe41 	bl	d8880 <_ZN8particle7BleUuidC1Ev>
   d8bfe:	4904      	ldr	r1, [pc, #16]	; (d8c10 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d8c00:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d8c04:	f7ff fd47 	bl	d8696 <_ZN6StringC1EPK19__FlashStringHelper>
   d8c08:	64e5      	str	r5, [r4, #76]	; 0x4c
   d8c0a:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d8c0c:	4620      	mov	r0, r4
   d8c0e:	bd38      	pop	{r3, r4, r5, pc}
   d8c10:	000df7fc 	.word	0x000df7fc

000d8c14 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d8c14:	b510      	push	{r4, lr}
   d8c16:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8c18:	69c2      	ldr	r2, [r0, #28]
   d8c1a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d8c1e:	4293      	cmp	r3, r2
   d8c20:	4618      	mov	r0, r3
   d8c22:	d006      	beq.n	d8c32 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d8c24:	6804      	ldr	r4, [r0, #0]
   d8c26:	8824      	ldrh	r4, [r4, #0]
   d8c28:	428c      	cmp	r4, r1
   d8c2a:	f103 0308 	add.w	r3, r3, #8
   d8c2e:	d1f6      	bne.n	d8c1e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d8c30:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d8c32:	2000      	movs	r0, #0
    }
   d8c34:	bd10      	pop	{r4, pc}
	...

000d8c38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d8c38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8c3c:	4680      	mov	r8, r0
   d8c3e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d8c40:	460e      	mov	r6, r1
   d8c42:	b369      	cbz	r1, d8ca0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d8c44:	b362      	cbz	r2, d8ca0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d8c46:	2af4      	cmp	r2, #244	; 0xf4
   d8c48:	6805      	ldr	r5, [r0, #0]
   d8c4a:	bf28      	it	cs
   d8c4c:	22f4      	movcs	r2, #244	; 0xf4
   d8c4e:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d8c50:	782a      	ldrb	r2, [r5, #0]
   d8c52:	b1a2      	cbz	r2, d8c7e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d8c54:	792b      	ldrb	r3, [r5, #4]
   d8c56:	0798      	lsls	r0, r3, #30
   d8c58:	d507      	bpl.n	d8c6a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d8c5a:	2300      	movs	r3, #0
   d8c5c:	4622      	mov	r2, r4
   d8c5e:	89a8      	ldrh	r0, [r5, #12]
   d8c60:	f7ff f83a 	bl	d7cd8 <hal_ble_gatt_server_set_characteristic_value>
   d8c64:	2800      	cmp	r0, #0
   d8c66:	da02      	bge.n	d8c6e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d8c68:	e043      	b.n	d8cf2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d8c6a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d8c6e:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d8c72:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d8c74:	06da      	lsls	r2, r3, #27
   d8c76:	d518      	bpl.n	d8caa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d8c78:	2f01      	cmp	r7, #1
   d8c7a:	d123      	bne.n	d8cc4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d8c7c:	e015      	b.n	d8caa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d8c7e:	8868      	ldrh	r0, [r5, #2]
   d8c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8c84:	4298      	cmp	r0, r3
   d8c86:	d00d      	beq.n	d8ca4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d8c88:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d8c8a:	0759      	lsls	r1, r3, #29
   d8c8c:	d523      	bpl.n	d8cd6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d8c8e:	2f01      	cmp	r7, #1
   d8c90:	d021      	beq.n	d8cd6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d8c92:	89a9      	ldrh	r1, [r5, #12]
   d8c94:	9200      	str	r2, [sp, #0]
   d8c96:	4623      	mov	r3, r4
   d8c98:	4632      	mov	r2, r6
   d8c9a:	f7ff f831 	bl	d7d00 <hal_ble_gatt_client_write_without_response>
   d8c9e:	e028      	b.n	d8cf2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d8ca0:	4815      	ldr	r0, [pc, #84]	; (d8cf8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d8ca2:	e026      	b.n	d8cf2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d8ca4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d8ca8:	e023      	b.n	d8cf2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d8caa:	069a      	lsls	r2, r3, #26
   d8cac:	d521      	bpl.n	d8cf2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d8cae:	2f02      	cmp	r7, #2
   d8cb0:	d01f      	beq.n	d8cf2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d8cb2:	89a8      	ldrh	r0, [r5, #12]
   d8cb4:	2300      	movs	r3, #0
   d8cb6:	4622      	mov	r2, r4
   d8cb8:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d8cba:	b002      	add	sp, #8
   d8cbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d8cc0:	f7ff b846 	b.w	d7d50 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d8cc4:	89a8      	ldrh	r0, [r5, #12]
   d8cc6:	2300      	movs	r3, #0
   d8cc8:	4622      	mov	r2, r4
   d8cca:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d8ccc:	b002      	add	sp, #8
   d8cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d8cd2:	f7ff b833 	b.w	d7d3c <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d8cd6:	071b      	lsls	r3, r3, #28
   d8cd8:	d501      	bpl.n	d8cde <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d8cda:	2f02      	cmp	r7, #2
   d8cdc:	d102      	bne.n	d8ce4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d8cde:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d8ce2:	e006      	b.n	d8cf2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d8ce4:	2300      	movs	r3, #0
   d8ce6:	89a9      	ldrh	r1, [r5, #12]
   d8ce8:	9300      	str	r3, [sp, #0]
   d8cea:	4632      	mov	r2, r6
   d8cec:	4623      	mov	r3, r4
   d8cee:	f7fe fffd 	bl	d7cec <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d8cf2:	b002      	add	sp, #8
   d8cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8cf8:	fffffef2 	.word	0xfffffef2

000d8cfc <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d8cfc:	b510      	push	{r4, lr}
    return impl()->address();
   d8cfe:	680a      	ldr	r2, [r1, #0]
   d8d00:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d8d04:	6003      	str	r3, [r0, #0]
   d8d06:	6853      	ldr	r3, [r2, #4]
   d8d08:	6043      	str	r3, [r0, #4]
}
   d8d0a:	bd10      	pop	{r4, pc}

000d8d0c <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d8d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d8d0e:	6802      	ldr	r2, [r0, #0]
   d8d10:	680b      	ldr	r3, [r1, #0]
   d8d12:	8812      	ldrh	r2, [r2, #0]
   d8d14:	881b      	ldrh	r3, [r3, #0]
   d8d16:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d8d18:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d8d1a:	d10c      	bne.n	d8d36 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d8d1c:	4601      	mov	r1, r0
   d8d1e:	4668      	mov	r0, sp
   d8d20:	f7ff ffec 	bl	d8cfc <_ZNK8particle13BlePeerDevice7addressEv>
   d8d24:	4621      	mov	r1, r4
   d8d26:	a802      	add	r0, sp, #8
   d8d28:	f7ff ffe8 	bl	d8cfc <_ZNK8particle13BlePeerDevice7addressEv>
   d8d2c:	a902      	add	r1, sp, #8
   d8d2e:	4668      	mov	r0, sp
   d8d30:	f7ff fd98 	bl	d8864 <_ZNK8particle10BleAddresseqERKS0_>
   d8d34:	b900      	cbnz	r0, d8d38 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d8d36:	2000      	movs	r0, #0
}
   d8d38:	b004      	add	sp, #16
   d8d3a:	bd10      	pop	{r4, pc}

000d8d3c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d8d3c:	b510      	push	{r4, lr}
   d8d3e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d8d40:	2034      	movs	r0, #52	; 0x34
   d8d42:	f7fb f9aa 	bl	d409a <_Znwj>
   d8d46:	4601      	mov	r1, r0
   d8d48:	b168      	cbz	r0, d8d66 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8d4a:	2300      	movs	r3, #0
   d8d4c:	6003      	str	r3, [r0, #0]
   d8d4e:	6043      	str	r3, [r0, #4]
   d8d50:	6083      	str	r3, [r0, #8]
   d8d52:	60c3      	str	r3, [r0, #12]
   d8d54:	6103      	str	r3, [r0, #16]
   d8d56:	6143      	str	r3, [r0, #20]
   d8d58:	6183      	str	r3, [r0, #24]
   d8d5a:	61c3      	str	r3, [r0, #28]
   d8d5c:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d8d5e:	6243      	str	r3, [r0, #36]	; 0x24
   d8d60:	6283      	str	r3, [r0, #40]	; 0x28
   d8d62:	62c3      	str	r3, [r0, #44]	; 0x2c
   d8d64:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8d66:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d8d68:	b919      	cbnz	r1, d8d72 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d8d6a:	4a0a      	ldr	r2, [pc, #40]	; (d8d94 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d8d6c:	200a      	movs	r0, #10
   d8d6e:	f7ff f961 	bl	d8034 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d8d72:	2000      	movs	r0, #0
   d8d74:	f7fe ff7c 	bl	d7c70 <hal_ble_stack_init>
   d8d78:	b120      	cbz	r0, d8d84 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d8d7a:	4a06      	ldr	r2, [pc, #24]	; (d8d94 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d8d7c:	2100      	movs	r1, #0
   d8d7e:	200a      	movs	r0, #10
   d8d80:	f7ff f958 	bl	d8034 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d8d84:	2200      	movs	r2, #0
   d8d86:	6821      	ldr	r1, [r4, #0]
   d8d88:	4803      	ldr	r0, [pc, #12]	; (d8d98 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d8d8a:	f7fe ffcd 	bl	d7d28 <hal_ble_set_callback_on_periph_link_events>
}
   d8d8e:	4620      	mov	r0, r4
   d8d90:	bd10      	pop	{r4, pc}
   d8d92:	bf00      	nop
   d8d94:	000d7c21 	.word	0x000d7c21
   d8d98:	000d91b5 	.word	0x000d91b5

000d8d9c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d8d9c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d8d9e:	4c0a      	ldr	r4, [pc, #40]	; (d8dc8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d8da0:	6823      	ldr	r3, [r4, #0]
   d8da2:	07db      	lsls	r3, r3, #31
   d8da4:	d40e      	bmi.n	d8dc4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d8da6:	4620      	mov	r0, r4
   d8da8:	f7fb f988 	bl	d40bc <__cxa_guard_acquire>
   d8dac:	b150      	cbz	r0, d8dc4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d8dae:	4807      	ldr	r0, [pc, #28]	; (d8dcc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d8db0:	f7ff ffc4 	bl	d8d3c <_ZN8particle14BleLocalDeviceC1Ev>
   d8db4:	4620      	mov	r0, r4
   d8db6:	f7fb f986 	bl	d40c6 <__cxa_guard_release>
   d8dba:	4a05      	ldr	r2, [pc, #20]	; (d8dd0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d8dbc:	4905      	ldr	r1, [pc, #20]	; (d8dd4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d8dbe:	4803      	ldr	r0, [pc, #12]	; (d8dcc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d8dc0:	f003 f890 	bl	dbee4 <__aeabi_atexit>
    return instance;
}
   d8dc4:	4801      	ldr	r0, [pc, #4]	; (d8dcc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d8dc6:	bd10      	pop	{r4, pc}
   d8dc8:	2003e334 	.word	0x2003e334
   d8dcc:	2003e330 	.word	0x2003e330
   d8dd0:	2003d460 	.word	0x2003d460
   d8dd4:	000d8f9d 	.word	0x000d8f9d

000d8dd8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d8dd8:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d8dda:	6803      	ldr	r3, [r0, #0]
   d8ddc:	3b09      	subs	r3, #9
   d8dde:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d8de0:	b08a      	sub	sp, #40	; 0x28
   d8de2:	4604      	mov	r4, r0
   d8de4:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d8de6:	d819      	bhi.n	d8e1c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d8de8:	f7ff ffd8 	bl	d8d9c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d8dec:	88a1      	ldrh	r1, [r4, #4]
   d8dee:	6800      	ldr	r0, [r0, #0]
   d8df0:	f7ff ff10 	bl	d8c14 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d8df4:	4602      	mov	r2, r0
   d8df6:	b958      	cbnz	r0, d8e10 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d8df8:	2320      	movs	r3, #32
   d8dfa:	9302      	str	r3, [sp, #8]
   d8dfc:	4b08      	ldr	r3, [pc, #32]	; (d8e20 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d8dfe:	9003      	str	r0, [sp, #12]
   d8e00:	9300      	str	r3, [sp, #0]
   d8e02:	aa02      	add	r2, sp, #8
   d8e04:	4603      	mov	r3, r0
   d8e06:	4907      	ldr	r1, [pc, #28]	; (d8e24 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d8e08:	2032      	movs	r0, #50	; 0x32
   d8e0a:	f7ff f91b 	bl	d8044 <log_message>
   d8e0e:	e005      	b.n	d8e1c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d8e10:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d8e12:	b11d      	cbz	r5, d8e1c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d8e14:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d8e16:	68e1      	ldr	r1, [r4, #12]
   d8e18:	6920      	ldr	r0, [r4, #16]
   d8e1a:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d8e1c:	b00a      	add	sp, #40	; 0x28
   d8e1e:	bd70      	pop	{r4, r5, r6, pc}
   d8e20:	000df8f2 	.word	0x000df8f2
   d8e24:	000df8a8 	.word	0x000df8a8

000d8e28 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d8e28:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d8e2a:	a801      	add	r0, sp, #4
   d8e2c:	f7ff fcfc 	bl	d8828 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d8e30:	2000      	movs	r0, #0
   d8e32:	f7fe ff1d 	bl	d7c70 <hal_ble_stack_init>
   d8e36:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d8e38:	a801      	add	r0, sp, #4
   d8e3a:	f7ff fd03 	bl	d8844 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d8e3e:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d8e42:	b002      	add	sp, #8
   d8e44:	bd10      	pop	{r4, pc}

000d8e46 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d8e46:	4608      	mov	r0, r1
   d8e48:	b909      	cbnz	r1, d8e4e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d8e4a:	460a      	mov	r2, r1
   d8e4c:	e001      	b.n	d8e52 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d8e4e:	6a09      	ldr	r1, [r1, #32]
   d8e50:	2200      	movs	r2, #0
   d8e52:	f7fe bf15 	b.w	d7c80 <hal_ble_gap_set_advertising_data>

000d8e56 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d8e56:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d8e58:	460c      	mov	r4, r1
   d8e5a:	b911      	cbnz	r1, d8e62 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d8e5c:	460a      	mov	r2, r1
   d8e5e:	4608      	mov	r0, r1
   d8e60:	e006      	b.n	d8e70 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d8e62:	2101      	movs	r1, #1
   d8e64:	4620      	mov	r0, r4
   d8e66:	f7ff fe99 	bl	d8b9c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d8e6a:	6a21      	ldr	r1, [r4, #32]
   d8e6c:	2200      	movs	r2, #0
   d8e6e:	4620      	mov	r0, r4
    }
}
   d8e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d8e74:	f7fe bf0c 	b.w	d7c90 <hal_ble_gap_set_scan_response_data>

000d8e78 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d8e78:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d8e7a:	a801      	add	r0, sp, #4
   d8e7c:	f7ff fcd4 	bl	d8828 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d8e80:	2000      	movs	r0, #0
   d8e82:	f7fe ff0d 	bl	d7ca0 <hal_ble_gap_start_advertising>
   d8e86:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d8e88:	a801      	add	r0, sp, #4
   d8e8a:	f7ff fcdb 	bl	d8844 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d8e8e:	4620      	mov	r0, r4
   d8e90:	b002      	add	sp, #8
   d8e92:	bd10      	pop	{r4, pc}

000d8e94 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d8e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8e96:	4605      	mov	r5, r0
   d8e98:	460c      	mov	r4, r1
    WiringBleLock lk;
   d8e9a:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d8e9c:	4616      	mov	r6, r2
    WiringBleLock lk;
   d8e9e:	f7ff fcc3 	bl	d8828 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d8ea2:	4621      	mov	r1, r4
   d8ea4:	4628      	mov	r0, r5
   d8ea6:	f7ff ffce 	bl	d8e46 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d8eaa:	2800      	cmp	r0, #0
   d8eac:	db08      	blt.n	d8ec0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d8eae:	4631      	mov	r1, r6
   d8eb0:	4628      	mov	r0, r5
   d8eb2:	f7ff ffd0 	bl	d8e56 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d8eb6:	2800      	cmp	r0, #0
   d8eb8:	db02      	blt.n	d8ec0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d8eba:	4628      	mov	r0, r5
   d8ebc:	f7ff ffdc 	bl	d8e78 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d8ec0:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d8ec2:	a801      	add	r0, sp, #4
   d8ec4:	f7ff fcbe 	bl	d8844 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d8ec8:	4620      	mov	r0, r4
   d8eca:	b002      	add	sp, #8
   d8ecc:	bd70      	pop	{r4, r5, r6, pc}

000d8ece <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d8ece:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d8ed0:	69d8      	ldr	r0, [r3, #28]
}
   d8ed2:	2800      	cmp	r0, #0
   d8ed4:	bfd4      	ite	le
   d8ed6:	2000      	movle	r0, #0
   d8ed8:	2001      	movgt	r0, #1
   d8eda:	4770      	bx	lr

000d8edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d8edc:	680b      	ldr	r3, [r1, #0]
   d8ede:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d8ee0:	b113      	cbz	r3, d8ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d8ee2:	685a      	ldr	r2, [r3, #4]
   d8ee4:	3201      	adds	r2, #1
   d8ee6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d8ee8:	4770      	bx	lr

000d8eea <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d8eea:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8eec:	f851 3b04 	ldr.w	r3, [r1], #4
   d8ef0:	4604      	mov	r4, r0
   d8ef2:	f840 3b04 	str.w	r3, [r0], #4
   d8ef6:	f7ff fff1 	bl	d8edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d8efa:	6823      	ldr	r3, [r4, #0]
   d8efc:	b90b      	cbnz	r3, d8f02 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d8efe:	f7ff fc63 	bl	d87c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d8f02:	4620      	mov	r0, r4
   d8f04:	bd10      	pop	{r4, pc}

000d8f06 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d8f06:	b510      	push	{r4, lr}
   d8f08:	f851 3b04 	ldr.w	r3, [r1], #4
   d8f0c:	4604      	mov	r4, r0
   d8f0e:	f840 3b04 	str.w	r3, [r0], #4
   d8f12:	f7ff ffe3 	bl	d8edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d8f16:	4620      	mov	r0, r4
   d8f18:	bd10      	pop	{r4, pc}

000d8f1a <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d8f1a:	b510      	push	{r4, lr}
   d8f1c:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8f1e:	3004      	adds	r0, #4
   d8f20:	f7fb fba6 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d8f24:	4620      	mov	r0, r4
   d8f26:	bd10      	pop	{r4, pc}

000d8f28 <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d8f28:	b510      	push	{r4, lr}
   d8f2a:	4604      	mov	r4, r0
   d8f2c:	3004      	adds	r0, #4
   d8f2e:	f7fb fb9f 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d8f32:	4620      	mov	r0, r4
   d8f34:	bd10      	pop	{r4, pc}

000d8f36 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8f36:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8f38:	6804      	ldr	r4, [r0, #0]
   d8f3a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8f3c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d8f3e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8f42:	42a6      	cmp	r6, r4
   d8f44:	d004      	beq.n	d8f50 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d8f46:	1d20      	adds	r0, r4, #4
   d8f48:	f7fb fb92 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8f4c:	3408      	adds	r4, #8
   d8f4e:	e7f8      	b.n	d8f42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8f50:	6828      	ldr	r0, [r5, #0]
   d8f52:	f7ff f96d 	bl	d8230 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d8f56:	4628      	mov	r0, r5
   d8f58:	bd70      	pop	{r4, r5, r6, pc}

000d8f5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8f5a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8f5c:	6804      	ldr	r4, [r0, #0]
   d8f5e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8f60:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d8f62:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8f66:	42a6      	cmp	r6, r4
   d8f68:	d004      	beq.n	d8f74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d8f6a:	1d20      	adds	r0, r4, #4
   d8f6c:	f7fb fb80 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8f70:	3408      	adds	r4, #8
   d8f72:	e7f8      	b.n	d8f66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8f74:	6828      	ldr	r0, [r5, #0]
   d8f76:	f7ff f95b 	bl	d8230 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d8f7a:	4628      	mov	r0, r5
   d8f7c:	bd70      	pop	{r4, r5, r6, pc}

000d8f7e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8f7e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8f80:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d8f82:	f104 0018 	add.w	r0, r4, #24
   d8f86:	f7ff ffe8 	bl	d8f5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d8f8a:	f104 000c 	add.w	r0, r4, #12
   d8f8e:	f7ff ffd2 	bl	d8f36 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d8f92:	4620      	mov	r0, r4
   d8f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8f98:	f7fb b881 	b.w	d409e <_ZdlPv>

000d8f9c <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d8f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8f9e:	6804      	ldr	r4, [r0, #0]
   d8fa0:	4607      	mov	r7, r0
   d8fa2:	b1c4      	cbz	r4, d8fd6 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d8fa4:	69a5      	ldr	r5, [r4, #24]
   d8fa6:	69e3      	ldr	r3, [r4, #28]
   d8fa8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8fac:	42ae      	cmp	r6, r5
   d8fae:	d004      	beq.n	d8fba <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8fb0:	1d28      	adds	r0, r5, #4
   d8fb2:	f7fb fb5d 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8fb6:	3508      	adds	r5, #8
   d8fb8:	e7f8      	b.n	d8fac <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8fba:	69a0      	ldr	r0, [r4, #24]
   d8fbc:	f7ff f938 	bl	d8230 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d8fc0:	f104 000c 	add.w	r0, r4, #12
   d8fc4:	f7ff ffc9 	bl	d8f5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d8fc8:	4620      	mov	r0, r4
   d8fca:	f7ff ffb4 	bl	d8f36 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8fce:	2134      	movs	r1, #52	; 0x34
   d8fd0:	4620      	mov	r0, r4
   d8fd2:	f002 ff95 	bl	dbf00 <_ZdlPvj>
   d8fd6:	4638      	mov	r0, r7
   d8fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d8fdc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d8fdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8fde:	2500      	movs	r5, #0
   d8fe0:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8fe2:	6045      	str	r5, [r0, #4]
   d8fe4:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8fe6:	2024      	movs	r0, #36	; 0x24
   d8fe8:	f7fb f857 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8fec:	4604      	mov	r4, r0
   d8fee:	b178      	cbz	r0, d9010 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d8ff0:	4603      	mov	r3, r0
   d8ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d8ff6:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d8ffa:	f8c0 5002 	str.w	r5, [r0, #2]
   d8ffe:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d9000:	7285      	strb	r5, [r0, #10]
   d9002:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d9004:	60c5      	str	r5, [r0, #12]
   d9006:	6105      	str	r5, [r0, #16]
   d9008:	6145      	str	r5, [r0, #20]
   d900a:	6185      	str	r5, [r0, #24]
   d900c:	61c5      	str	r5, [r0, #28]
   d900e:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d9010:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9012:	2014      	movs	r0, #20
   d9014:	9301      	str	r3, [sp, #4]
   d9016:	f7fb f840 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d901a:	4603      	mov	r3, r0
   d901c:	b128      	cbz	r0, d902a <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d901e:	2201      	movs	r2, #1
   d9020:	6042      	str	r2, [r0, #4]
   d9022:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d9024:	4a08      	ldr	r2, [pc, #32]	; (d9048 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d9026:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d9028:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d902a:	a802      	add	r0, sp, #8
   d902c:	6872      	ldr	r2, [r6, #4]
   d902e:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d9032:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d9034:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d9036:	f7fb fb1b 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d903a:	6833      	ldr	r3, [r6, #0]
   d903c:	b90b      	cbnz	r3, d9042 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d903e:	f7ff fbc3 	bl	d87c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d9042:	4630      	mov	r0, r6
   d9044:	b002      	add	sp, #8
   d9046:	bd70      	pop	{r4, r5, r6, pc}
   d9048:	000df884 	.word	0x000df884

000d904c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d904c:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d904e:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d9050:	6803      	ldr	r3, [r0, #0]
   d9052:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d9054:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d9056:	d00c      	beq.n	d9072 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d9058:	b114      	cbz	r4, d9060 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d905a:	6863      	ldr	r3, [r4, #4]
   d905c:	3301      	adds	r3, #1
   d905e:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d9060:	6828      	ldr	r0, [r5, #0]
   d9062:	b128      	cbz	r0, d9070 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d9064:	6843      	ldr	r3, [r0, #4]
   d9066:	3b01      	subs	r3, #1
   d9068:	6043      	str	r3, [r0, #4]
   d906a:	b90b      	cbnz	r3, d9070 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d906c:	f7ff fbb6 	bl	d87dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d9070:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d9072:	4628      	mov	r0, r5
   d9074:	bd38      	pop	{r3, r4, r5, pc}

000d9076 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d9076:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d9078:	b570      	push	{r4, r5, r6, lr}
   d907a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d907c:	d91a      	bls.n	d90b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d907e:	4290      	cmp	r0, r2
   d9080:	d219      	bcs.n	d90b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d9082:	f1a1 0608 	sub.w	r6, r1, #8
   d9086:	1a51      	subs	r1, r2, r1
   d9088:	3904      	subs	r1, #4
   d908a:	1f15      	subs	r5, r2, #4
   d908c:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d908e:	1f2b      	subs	r3, r5, #4
   d9090:	429e      	cmp	r6, r3
   d9092:	d025      	beq.n	d90e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d9094:	2c04      	cmp	r4, #4
   d9096:	d007      	beq.n	d90a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9098:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d909c:	f844 3c04 	str.w	r3, [r4, #-4]
   d90a0:	4629      	mov	r1, r5
   d90a2:	4620      	mov	r0, r4
   d90a4:	f7ff ff1a 	bl	d8edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d90a8:	4628      	mov	r0, r5
   d90aa:	f7fb fae1 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d90ae:	3d08      	subs	r5, #8
   d90b0:	3c08      	subs	r4, #8
   d90b2:	e7ec      	b.n	d908e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d90b4:	d014      	beq.n	d90e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d90b6:	1d0c      	adds	r4, r1, #4
   d90b8:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d90ba:	1f23      	subs	r3, r4, #4
   d90bc:	429d      	cmp	r5, r3
   d90be:	d00f      	beq.n	d90e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d90c0:	2e04      	cmp	r6, #4
   d90c2:	d007      	beq.n	d90d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d90c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d90c8:	f846 3c04 	str.w	r3, [r6, #-4]
   d90cc:	4621      	mov	r1, r4
   d90ce:	4630      	mov	r0, r6
   d90d0:	f7ff ff04 	bl	d8edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d90d4:	4620      	mov	r0, r4
   d90d6:	f7fb facb 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d90da:	3408      	adds	r4, #8
   d90dc:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d90de:	e7ec      	b.n	d90ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d90e0:	bd70      	pop	{r4, r5, r6, pc}

000d90e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d90e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d90e6:	6804      	ldr	r4, [r0, #0]
   d90e8:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d90ea:	4605      	mov	r5, r0
   d90ec:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d90ee:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d90f2:	42a7      	cmp	r7, r4
   d90f4:	d018      	beq.n	d9128 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d90f6:	4641      	mov	r1, r8
   d90f8:	4620      	mov	r0, r4
   d90fa:	f7ff fe07 	bl	d8d0c <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d90fe:	4606      	mov	r6, r0
   d9100:	b908      	cbnz	r0, d9106 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d9102:	3408      	adds	r4, #8
   d9104:	e7f5      	b.n	d90f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d9106:	b18c      	cbz	r4, d912c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d9108:	1d20      	adds	r0, r4, #4
   d910a:	f7fb fab1 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d910e:	682b      	ldr	r3, [r5, #0]
   d9110:	686a      	ldr	r2, [r5, #4]
   d9112:	f104 0108 	add.w	r1, r4, #8
   d9116:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d911a:	4620      	mov	r0, r4
   d911c:	f7ff ffab 	bl	d9076 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d9120:	686b      	ldr	r3, [r5, #4]
   d9122:	3b01      	subs	r3, #1
   d9124:	606b      	str	r3, [r5, #4]
    return true;
   d9126:	e002      	b.n	d912e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d9128:	2600      	movs	r6, #0
   d912a:	e000      	b.n	d912e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d912c:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d912e:	4630      	mov	r0, r6
   d9130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9134 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d9134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9136:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9138:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d913c:	6847      	ldr	r7, [r0, #4]
   d913e:	9300      	str	r3, [sp, #0]
   d9140:	a801      	add	r0, sp, #4
   d9142:	f7ff fecb 	bl	d8edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9146:	6866      	ldr	r6, [r4, #4]
   d9148:	68a3      	ldr	r3, [r4, #8]
   d914a:	429e      	cmp	r6, r3
   d914c:	db14      	blt.n	d9178 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d914e:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d9150:	2e00      	cmp	r6, #0
   d9152:	dd0b      	ble.n	d916c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d9154:	00f0      	lsls	r0, r6, #3
   d9156:	f7ff f863 	bl	d8220 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d915a:	4605      	mov	r5, r0
   d915c:	b318      	cbz	r0, d91a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d915e:	e894 0006 	ldmia.w	r4, {r1, r2}
   d9162:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d9166:	f7ff ff86 	bl	d9076 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d916a:	e000      	b.n	d916e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d916c:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d916e:	6820      	ldr	r0, [r4, #0]
   d9170:	f7ff f85e 	bl	d8230 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d9174:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d9176:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d9178:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d917a:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d917c:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d9180:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d9184:	4629      	mov	r1, r5
   d9186:	f105 0008 	add.w	r0, r5, #8
   d918a:	f7ff ff74 	bl	d9076 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d918e:	b135      	cbz	r5, d919e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d9190:	9b00      	ldr	r3, [sp, #0]
   d9192:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d9196:	a901      	add	r1, sp, #4
   d9198:	1d28      	adds	r0, r5, #4
   d919a:	f7ff fe9f 	bl	d8edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d919e:	6863      	ldr	r3, [r4, #4]
   d91a0:	3301      	adds	r3, #1
   d91a2:	6063      	str	r3, [r4, #4]
   d91a4:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d91a6:	a801      	add	r0, sp, #4
   d91a8:	f7fb fa62 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d91ac:	4628      	mov	r0, r5
   d91ae:	b003      	add	sp, #12
   d91b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d91b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d91b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d91b8:	4604      	mov	r4, r0
   d91ba:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d91bc:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d91be:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d91c0:	f7ff fb32 	bl	d8828 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d91c4:	6823      	ldr	r3, [r4, #0]
   d91c6:	2b03      	cmp	r3, #3
   d91c8:	d002      	beq.n	d91d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d91ca:	2b04      	cmp	r3, #4
   d91cc:	d042      	beq.n	d9254 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d91ce:	e087      	b.n	d92e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d91d0:	a804      	add	r0, sp, #16
   d91d2:	f7ff ff03 	bl	d8fdc <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d91d6:	9b04      	ldr	r3, [sp, #16]
   d91d8:	8922      	ldrh	r2, [r4, #8]
   d91da:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d91dc:	6862      	ldr	r2, [r4, #4]
   d91de:	9904      	ldr	r1, [sp, #16]
   d91e0:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d91e4:	f8c1 3002 	str.w	r3, [r1, #2]
   d91e8:	6853      	ldr	r3, [r2, #4]
   d91ea:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d91ee:	a807      	add	r0, sp, #28
   d91f0:	9b04      	ldr	r3, [sp, #16]
   d91f2:	9306      	str	r3, [sp, #24]
   d91f4:	a905      	add	r1, sp, #20
   d91f6:	f7ff fe71 	bl	d8edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d91fa:	a906      	add	r1, sp, #24
   d91fc:	f105 0018 	add.w	r0, r5, #24
   d9200:	f7ff ff98 	bl	d9134 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d9204:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9206:	a807      	add	r0, sp, #28
   d9208:	f7fb fa32 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d920c:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d920e:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d9210:	b974      	cbnz	r4, d9230 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d9212:	4b36      	ldr	r3, [pc, #216]	; (d92ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d9214:	9300      	str	r3, [sp, #0]
   d9216:	aa06      	add	r2, sp, #24
   d9218:	4623      	mov	r3, r4
   d921a:	4935      	ldr	r1, [pc, #212]	; (d92f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d921c:	9407      	str	r4, [sp, #28]
   d921e:	2032      	movs	r0, #50	; 0x32
   d9220:	f7fe ff10 	bl	d8044 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d9224:	9b04      	ldr	r3, [sp, #16]
   d9226:	4621      	mov	r1, r4
   d9228:	8818      	ldrh	r0, [r3, #0]
   d922a:	f7fe fd41 	bl	d7cb0 <hal_ble_gap_disconnect>
   d922e:	e00d      	b.n	d924c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d9230:	4a30      	ldr	r2, [pc, #192]	; (d92f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d9232:	9200      	str	r2, [sp, #0]
   d9234:	2300      	movs	r3, #0
   d9236:	aa06      	add	r2, sp, #24
   d9238:	492d      	ldr	r1, [pc, #180]	; (d92f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d923a:	9307      	str	r3, [sp, #28]
   d923c:	2001      	movs	r0, #1
   d923e:	f7fe ff01 	bl	d8044 <log_message>
                if (impl->connectedCb_) {
   d9242:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d9244:	b113      	cbz	r3, d924c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d9246:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d9248:	a804      	add	r0, sp, #16
   d924a:	4798      	blx	r3
   d924c:	a805      	add	r0, sp, #20
   d924e:	f7fb fa0f 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9252:	e045      	b.n	d92e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d9254:	8921      	ldrh	r1, [r4, #8]
   d9256:	4628      	mov	r0, r5
   d9258:	f7ff fcdc 	bl	d8c14 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d925c:	4607      	mov	r7, r0
   d925e:	2800      	cmp	r0, #0
   d9260:	d03e      	beq.n	d92e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d9262:	6804      	ldr	r4, [r0, #0]
   d9264:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d9266:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d9268:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d926c:	8022      	strh	r2, [r4, #0]
   d926e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d9272:	4299      	cmp	r1, r3
   d9274:	d003      	beq.n	d927e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d9276:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d927a:	8042      	strh	r2, [r0, #2]
   d927c:	e7f9      	b.n	d9272 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d927e:	68e6      	ldr	r6, [r4, #12]
   d9280:	6923      	ldr	r3, [r4, #16]
   d9282:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d9286:	45b0      	cmp	r8, r6
   d9288:	d004      	beq.n	d9294 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d928a:	1d30      	adds	r0, r6, #4
   d928c:	f7fb f9f0 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9290:	3608      	adds	r6, #8
   d9292:	e7f8      	b.n	d9286 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d9294:	2300      	movs	r3, #0
   d9296:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d9298:	69a6      	ldr	r6, [r4, #24]
   d929a:	69e3      	ldr	r3, [r4, #28]
   d929c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d92a0:	45b0      	cmp	r8, r6
   d92a2:	d004      	beq.n	d92ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d92a4:	1d30      	adds	r0, r6, #4
   d92a6:	f7fb f9e3 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d92aa:	3608      	adds	r6, #8
   d92ac:	e7f8      	b.n	d92a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d92ae:	2300      	movs	r3, #0
   d92b0:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d92b2:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d92b4:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d92b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d92b8:	b113      	cbz	r3, d92c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d92ba:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d92bc:	4638      	mov	r0, r7
   d92be:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d92c0:	2320      	movs	r3, #32
   d92c2:	4a0d      	ldr	r2, [pc, #52]	; (d92f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d92c4:	9306      	str	r3, [sp, #24]
   d92c6:	9200      	str	r2, [sp, #0]
   d92c8:	2300      	movs	r3, #0
   d92ca:	4909      	ldr	r1, [pc, #36]	; (d92f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d92cc:	9307      	str	r3, [sp, #28]
   d92ce:	2001      	movs	r0, #1
   d92d0:	aa06      	add	r2, sp, #24
   d92d2:	f7fe feb7 	bl	d8044 <log_message>
                    impl->peers_.removeOne(*peer);
   d92d6:	4639      	mov	r1, r7
   d92d8:	f105 0018 	add.w	r0, r5, #24
   d92dc:	f7ff ff01 	bl	d90e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d92e0:	a803      	add	r0, sp, #12
   d92e2:	f7ff faaf 	bl	d8844 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d92e6:	b00e      	add	sp, #56	; 0x38
   d92e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d92ec:	000df90a 	.word	0x000df90a
   d92f0:	000df8a8 	.word	0x000df8a8
   d92f4:	000df930 	.word	0x000df930
   d92f8:	000df94d 	.word	0x000df94d

000d92fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d92fc:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d92fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9300:	4606      	mov	r6, r0
   d9302:	460c      	mov	r4, r1
   d9304:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d9306:	d914      	bls.n	d9332 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d9308:	4290      	cmp	r0, r2
   d930a:	d213      	bcs.n	d9334 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d930c:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d9310:	1a6c      	subs	r4, r5, r1
   d9312:	f1a1 0708 	sub.w	r7, r1, #8
   d9316:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d9318:	42af      	cmp	r7, r5
   d931a:	d018      	beq.n	d934e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d931c:	b11c      	cbz	r4, d9326 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d931e:	4629      	mov	r1, r5
   d9320:	4620      	mov	r0, r4
   d9322:	f7ff fdf0 	bl	d8f06 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d9326:	1d28      	adds	r0, r5, #4
   d9328:	f7fb f9a2 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d932c:	3d08      	subs	r5, #8
   d932e:	3c08      	subs	r4, #8
   d9330:	e7f2      	b.n	d9318 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d9332:	d00c      	beq.n	d934e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d9334:	42ac      	cmp	r4, r5
   d9336:	d00a      	beq.n	d934e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d9338:	b11e      	cbz	r6, d9342 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d933a:	4621      	mov	r1, r4
   d933c:	4630      	mov	r0, r6
   d933e:	f7ff fde2 	bl	d8f06 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d9342:	1d20      	adds	r0, r4, #4
   d9344:	f7fb f994 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d9348:	3408      	adds	r4, #8
   d934a:	3608      	adds	r6, #8
   d934c:	e7f2      	b.n	d9334 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d934e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9350 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d9350:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d9352:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d9354:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d9356:	dd0b      	ble.n	d9370 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d9358:	00f0      	lsls	r0, r6, #3
   d935a:	f7fe ff61 	bl	d8220 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d935e:	4604      	mov	r4, r0
   d9360:	b170      	cbz	r0, d9380 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d9362:	e895 0006 	ldmia.w	r5, {r1, r2}
   d9366:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d936a:	f7ff ffc7 	bl	d92fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d936e:	e000      	b.n	d9372 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d9370:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d9372:	6828      	ldr	r0, [r5, #0]
   d9374:	f7fe ff5c 	bl	d8230 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d9378:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d937a:	60ae      	str	r6, [r5, #8]
        return true;
   d937c:	2001      	movs	r0, #1
   d937e:	bd70      	pop	{r4, r5, r6, pc}
    }
   d9380:	bd70      	pop	{r4, r5, r6, pc}

000d9382 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d9382:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9384:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d9386:	6845      	ldr	r5, [r0, #4]
   d9388:	4668      	mov	r0, sp
   d938a:	f7ff fdbc 	bl	d8f06 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d938e:	6861      	ldr	r1, [r4, #4]
   d9390:	68a3      	ldr	r3, [r4, #8]
   d9392:	4299      	cmp	r1, r3
   d9394:	db05      	blt.n	d93a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d9396:	3101      	adds	r1, #1
   d9398:	4620      	mov	r0, r4
   d939a:	f7ff ffd9 	bl	d9350 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d939e:	4606      	mov	r6, r0
   d93a0:	b198      	cbz	r0, d93ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d93a2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d93a4:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d93a6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d93aa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d93ae:	4629      	mov	r1, r5
   d93b0:	f105 0008 	add.w	r0, r5, #8
   d93b4:	f7ff ffa2 	bl	d92fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d93b8:	b11d      	cbz	r5, d93c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d93ba:	4669      	mov	r1, sp
   d93bc:	4628      	mov	r0, r5
   d93be:	f7ff fda2 	bl	d8f06 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d93c2:	6863      	ldr	r3, [r4, #4]
   d93c4:	3301      	adds	r3, #1
   d93c6:	6063      	str	r3, [r4, #4]
   d93c8:	2601      	movs	r6, #1
   d93ca:	a801      	add	r0, sp, #4
   d93cc:	f7fb f950 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d93d0:	4630      	mov	r0, r6
   d93d2:	b002      	add	sp, #8
   d93d4:	bd70      	pop	{r4, r5, r6, pc}

000d93d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d93d6:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d93d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d93da:	4606      	mov	r6, r0
   d93dc:	460c      	mov	r4, r1
   d93de:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d93e0:	d914      	bls.n	d940c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d93e2:	4290      	cmp	r0, r2
   d93e4:	d213      	bcs.n	d940e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d93e6:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d93ea:	1a6c      	subs	r4, r5, r1
   d93ec:	f1a1 0708 	sub.w	r7, r1, #8
   d93f0:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d93f2:	42af      	cmp	r7, r5
   d93f4:	d018      	beq.n	d9428 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d93f6:	b11c      	cbz	r4, d9400 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d93f8:	4629      	mov	r1, r5
   d93fa:	4620      	mov	r0, r4
   d93fc:	f7ff fd75 	bl	d8eea <_ZN8particle17BleCharacteristicC1ERKS0_>
   d9400:	1d28      	adds	r0, r5, #4
   d9402:	f7fb f935 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d9406:	3d08      	subs	r5, #8
   d9408:	3c08      	subs	r4, #8
   d940a:	e7f2      	b.n	d93f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d940c:	d00c      	beq.n	d9428 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d940e:	42ac      	cmp	r4, r5
   d9410:	d00a      	beq.n	d9428 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d9412:	b11e      	cbz	r6, d941c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d9414:	4621      	mov	r1, r4
   d9416:	4630      	mov	r0, r6
   d9418:	f7ff fd67 	bl	d8eea <_ZN8particle17BleCharacteristicC1ERKS0_>
   d941c:	1d20      	adds	r0, r4, #4
   d941e:	f7fb f927 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d9422:	3408      	adds	r4, #8
   d9424:	3608      	adds	r6, #8
   d9426:	e7f2      	b.n	d940e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d9428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d942a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d942a:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d942c:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d942e:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d9430:	dd0b      	ble.n	d944a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d9432:	00f0      	lsls	r0, r6, #3
   d9434:	f7fe fef4 	bl	d8220 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d9438:	4604      	mov	r4, r0
   d943a:	b170      	cbz	r0, d945a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d943c:	e895 0006 	ldmia.w	r5, {r1, r2}
   d9440:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d9444:	f7ff ffc7 	bl	d93d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d9448:	e000      	b.n	d944c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d944a:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d944c:	6828      	ldr	r0, [r5, #0]
   d944e:	f7fe feef 	bl	d8230 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d9452:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d9454:	60ae      	str	r6, [r5, #8]
        return true;
   d9456:	2001      	movs	r0, #1
   d9458:	bd70      	pop	{r4, r5, r6, pc}
    }
   d945a:	bd70      	pop	{r4, r5, r6, pc}

000d945c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d945c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d945e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d9460:	6845      	ldr	r5, [r0, #4]
   d9462:	4668      	mov	r0, sp
   d9464:	f7ff fd41 	bl	d8eea <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9468:	6861      	ldr	r1, [r4, #4]
   d946a:	68a3      	ldr	r3, [r4, #8]
   d946c:	4299      	cmp	r1, r3
   d946e:	db05      	blt.n	d947c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d9470:	3101      	adds	r1, #1
   d9472:	4620      	mov	r0, r4
   d9474:	f7ff ffd9 	bl	d942a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d9478:	4606      	mov	r6, r0
   d947a:	b198      	cbz	r0, d94a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d947c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d947e:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d9480:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d9484:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d9488:	4629      	mov	r1, r5
   d948a:	f105 0008 	add.w	r0, r5, #8
   d948e:	f7ff ffa2 	bl	d93d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d9492:	b11d      	cbz	r5, d949c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d9494:	4669      	mov	r1, sp
   d9496:	4628      	mov	r0, r5
   d9498:	f7ff fd27 	bl	d8eea <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d949c:	6863      	ldr	r3, [r4, #4]
   d949e:	3301      	adds	r3, #1
   d94a0:	6063      	str	r3, [r4, #4]
   d94a2:	2601      	movs	r6, #1
   d94a4:	a801      	add	r0, sp, #4
   d94a6:	f7fb f8e3 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d94aa:	4630      	mov	r0, r6
   d94ac:	b002      	add	sp, #8
   d94ae:	bd70      	pop	{r4, r5, r6, pc}

000d94b0 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d94b0:	b510      	push	{r4, lr}
   d94b2:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d94b4:	6840      	ldr	r0, [r0, #4]
   d94b6:	b108      	cbz	r0, d94bc <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d94b8:	f7fa fdf1 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d94bc:	4620      	mov	r0, r4
   d94be:	bd10      	pop	{r4, pc}

000d94c0 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d94c0:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d94c2:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d94c4:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d94c6:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d94ca:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d94ce:	f7ff f89b 	bl	d8608 <_ZN6StringD1Ev>
   d94d2:	4668      	mov	r0, sp
   d94d4:	f7ff ffec 	bl	d94b0 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d94d8:	b003      	add	sp, #12
   d94da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d94e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d94e0:	b538      	push	{r3, r4, r5, lr}
   d94e2:	2300      	movs	r3, #0
   d94e4:	4604      	mov	r4, r0
   d94e6:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d94e8:	2014      	movs	r0, #20
   d94ea:	460d      	mov	r5, r1
   d94ec:	f7fa fdd5 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d94f0:	b128      	cbz	r0, d94fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d94f2:	2301      	movs	r3, #1
   d94f4:	6043      	str	r3, [r0, #4]
   d94f6:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d94f8:	4b02      	ldr	r3, [pc, #8]	; (d9504 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d94fa:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d94fc:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d94fe:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d9500:	4620      	mov	r0, r4
   d9502:	bd38      	pop	{r3, r4, r5, pc}
   d9504:	000df84c 	.word	0x000df84c

000d9508 <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d9508:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d950a:	2500      	movs	r5, #0
   d950c:	b086      	sub	sp, #24
   d950e:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d9510:	6045      	str	r5, [r0, #4]
   d9512:	4604      	mov	r4, r0
   d9514:	2054      	movs	r0, #84	; 0x54
   d9516:	f7fa fdc0 	bl	d409a <_Znwj>
   d951a:	f8cd d010 	str.w	sp, [sp, #16]
   d951e:	4606      	mov	r6, r0
   d9520:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9522:	b108      	cbz	r0, d9528 <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d9524:	f7ff fb56 	bl	d8bd4 <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d9528:	4631      	mov	r1, r6
   d952a:	ab01      	add	r3, sp, #4
   d952c:	aa02      	add	r2, sp, #8
   d952e:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d9530:	9505      	str	r5, [sp, #20]
   d9532:	f7ff ffd5 	bl	d94e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d9536:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d9538:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d953a:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d953c:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d953e:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d9540:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d9542:	f7fb f895 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d9546:	a804      	add	r0, sp, #16
   d9548:	f7ff ffb2 	bl	d94b0 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d954c:	6823      	ldr	r3, [r4, #0]
   d954e:	b90b      	cbnz	r3, d9554 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d9550:	f7ff f93a 	bl	d87c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d9554:	4620      	mov	r0, r4
   d9556:	b006      	add	sp, #24
   d9558:	bd70      	pop	{r4, r5, r6, pc}
	...

000d955c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d955c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9560:	b088      	sub	sp, #32
   d9562:	4605      	mov	r5, r0
   d9564:	461e      	mov	r6, r3
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9566:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d9568:	2300      	movs	r3, #0
   d956a:	460f      	mov	r7, r1
   d956c:	4690      	mov	r8, r2
   d956e:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d9570:	9305      	str	r3, [sp, #20]
   d9572:	f7fa fd92 	bl	d409a <_Znwj>
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d9576:	f8cd d018 	str.w	sp, [sp, #24]
   d957a:	4604      	mov	r4, r0
   d957c:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d957e:	b1c0      	cbz	r0, d95b2 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x56>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d9580:	f898 8000 	ldrb.w	r8, [r8]
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d9584:	f7ff fb26 	bl	d8bd4 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d9588:	4639      	mov	r1, r7
   d958a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d958e:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d9592:	f7ff f8ad 	bl	d86f0 <_ZN6StringaSEPKc>
        callback_ = callback;
   d9596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9598:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d959a:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d959c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d959e:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d95a0:	f104 0014 	add.w	r0, r4, #20
   d95a4:	f7ff f9dc 	bl	d8960 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d95a8:	990e      	ldr	r1, [sp, #56]	; 0x38
   d95aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d95ae:	f7ff f9d7 	bl	d8960 <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d95b2:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d95b4:	2600      	movs	r6, #0
   d95b6:	ab01      	add	r3, sp, #4
   d95b8:	aa02      	add	r2, sp, #8
   d95ba:	a803      	add	r0, sp, #12
   d95bc:	9607      	str	r6, [sp, #28]
   d95be:	f7ff ff8f 	bl	d94e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d95c2:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d95c4:	9a05      	ldr	r2, [sp, #20]
   d95c6:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d95c8:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d95ca:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d95cc:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d95ce:	f7fb f84f 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d95d2:	a806      	add	r0, sp, #24
   d95d4:	f7ff ff6c 	bl	d94b0 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d95d8:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d95da:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d95dc:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d95de:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d95e0:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d95e2:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d95e4:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d95e6:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d95e8:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d95ec:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d95ee:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d95f0:	f7fb f83e 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d95f4:	a805      	add	r0, sp, #20
   d95f6:	f7fb f83b 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d95fa:	6829      	ldr	r1, [r5, #0]
   d95fc:	b919      	cbnz	r1, d9606 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xaa>
        SPARK_ASSERT(false);
   d95fe:	4a03      	ldr	r2, [pc, #12]	; (d960c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xb0>)
   d9600:	200a      	movs	r0, #10
   d9602:	f7fe fd17 	bl	d8034 <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d9606:	b008      	add	sp, #32
   d9608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d960c:	000d7c21 	.word	0x000d7c21

000d9610 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d9610:	b510      	push	{r4, lr}
   d9612:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d9614:	6840      	ldr	r0, [r0, #4]
   d9616:	b108      	cbz	r0, d961c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d9618:	f7fa fd41 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d961c:	4620      	mov	r0, r4
   d961e:	bd10      	pop	{r4, pc}

000d9620 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d9620:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d9622:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d9624:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d9626:	e88d 0009 	stmia.w	sp, {r0, r3}
   d962a:	4668      	mov	r0, sp
   d962c:	f7ff fff0 	bl	d9610 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d9630:	b003      	add	sp, #12
   d9632:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d9638:	b538      	push	{r3, r4, r5, lr}
   d963a:	2300      	movs	r3, #0
   d963c:	4604      	mov	r4, r0
   d963e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9640:	2014      	movs	r0, #20
   d9642:	460d      	mov	r5, r1
   d9644:	f7fa fd29 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d9648:	b128      	cbz	r0, d9656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d964a:	2301      	movs	r3, #1
   d964c:	6043      	str	r3, [r0, #4]
   d964e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d9650:	4b02      	ldr	r3, [pc, #8]	; (d965c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d9652:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d9654:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d9656:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d9658:	4620      	mov	r0, r4
   d965a:	bd38      	pop	{r3, r4, r5, pc}
   d965c:	000df868 	.word	0x000df868

000d9660 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d9660:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d9662:	2600      	movs	r6, #0
   d9664:	b087      	sub	sp, #28
   d9666:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d9668:	6046      	str	r6, [r0, #4]
   d966a:	4604      	mov	r4, r0
   d966c:	2018      	movs	r0, #24
   d966e:	460f      	mov	r7, r1
   d9670:	f7fa fd13 	bl	d409a <_Znwj>
   d9674:	f8cd d010 	str.w	sp, [sp, #16]
   d9678:	4605      	mov	r5, r0
   d967a:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d967c:	b138      	cbz	r0, d968e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d967e:	f7ff f8ff 	bl	d8880 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d9682:	4639      	mov	r1, r7
   d9684:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d9686:	82ae      	strh	r6, [r5, #20]
   d9688:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d968a:	f7ff f969 	bl	d8960 <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d968e:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d9690:	4629      	mov	r1, r5
   d9692:	9305      	str	r3, [sp, #20]
   d9694:	aa02      	add	r2, sp, #8
   d9696:	ab01      	add	r3, sp, #4
   d9698:	a803      	add	r0, sp, #12
   d969a:	f7ff ffcd 	bl	d9638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d969e:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d96a0:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d96a2:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d96a4:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d96a6:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d96a8:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d96aa:	f7fa ffe1 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d96ae:	a804      	add	r0, sp, #16
   d96b0:	f7ff ffae 	bl	d9610 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d96b4:	6823      	ldr	r3, [r4, #0]
   d96b6:	b90b      	cbnz	r3, d96bc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d96b8:	f7ff f886 	bl	d87c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d96bc:	4620      	mov	r0, r4
   d96be:	b007      	add	sp, #28
   d96c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d96c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d96c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d96c8:	4617      	mov	r7, r2
   d96ca:	b0a1      	sub	sp, #132	; 0x84
   d96cc:	4680      	mov	r8, r0
    WiringBleLock lk;
   d96ce:	a80a      	add	r0, sp, #40	; 0x28
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d96d0:	460e      	mov	r6, r1
    WiringBleLock lk;
   d96d2:	f7ff f8a9 	bl	d8828 <_ZN8particle3ble13WiringBleLockC1Ev>
   d96d6:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d96d8:	7923      	ldrb	r3, [r4, #4]
   d96da:	2b00      	cmp	r3, #0
   d96dc:	f000 80de 	beq.w	d989c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d96e0:	6833      	ldr	r3, [r6, #0]
   d96e2:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d96e4:	691b      	ldr	r3, [r3, #16]
   d96e6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d96ea:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d96ec:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d96f0:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d96f4:	9b03      	ldr	r3, [sp, #12]
   d96f6:	42ab      	cmp	r3, r5
   d96f8:	d023      	beq.n	d9742 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d96fa:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d96fe:	4650      	mov	r0, sl
   d9700:	f109 0114 	add.w	r1, r9, #20
   d9704:	f7ff f946 	bl	d8994 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d9708:	2800      	cmp	r0, #0
   d970a:	f000 80cc 	beq.w	d98a6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d970e:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d9712:	4658      	mov	r0, fp
   d9714:	f7ff f93e 	bl	d8994 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d9718:	2800      	cmp	r0, #0
   d971a:	f000 80c4 	beq.w	d98a6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d971e:	6823      	ldr	r3, [r4, #0]
   d9720:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d9724:	f8d9 3000 	ldr.w	r3, [r9]
   d9728:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d972c:	4299      	cmp	r1, r3
   d972e:	f040 80ba 	bne.w	d98a6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d9732:	2320      	movs	r3, #32
   d9734:	4a60      	ldr	r2, [pc, #384]	; (d98b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d9736:	9315      	str	r3, [sp, #84]	; 0x54
   d9738:	2300      	movs	r3, #0
   d973a:	9200      	str	r2, [sp, #0]
   d973c:	9316      	str	r3, [sp, #88]	; 0x58
   d973e:	aa15      	add	r2, sp, #84	; 0x54
   d9740:	e0a8      	b.n	d9894 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d9742:	f104 0928 	add.w	r9, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d9746:	4648      	mov	r0, r9
   d9748:	f7ff f8d6 	bl	d88f8 <_ZNK8particle7BleUuid7isValidEv>
   d974c:	b918      	cbnz	r0, d9756 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d974e:	495b      	ldr	r1, [pc, #364]	; (d98bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d9750:	4648      	mov	r0, r9
   d9752:	f7ff f912 	bl	d897a <_ZN8particle7BleUuidaSEPKh>
   d9756:	6833      	ldr	r3, [r6, #0]
   d9758:	681d      	ldr	r5, [r3, #0]
   d975a:	685b      	ldr	r3, [r3, #4]
   d975c:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d9760:	4555      	cmp	r5, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d9762:	4649      	mov	r1, r9
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d9764:	d005      	beq.n	d9772 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d9766:	6828      	ldr	r0, [r5, #0]
   d9768:	f7ff f914 	bl	d8994 <_ZNK8particle7BleUuideqERKS0_>
   d976c:	bb58      	cbnz	r0, d97c6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x102>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d976e:	3508      	adds	r5, #8
   d9770:	e7f6      	b.n	d9760 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d9772:	a80b      	add	r0, sp, #44	; 0x2c
   d9774:	f7ff ff74 	bl	d9660 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d9778:	4649      	mov	r1, r9
   d977a:	a815      	add	r0, sp, #84	; 0x54
   d977c:	f7ff f8ce 	bl	d891c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d9780:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d9782:	2300      	movs	r3, #0
   d9784:	3214      	adds	r2, #20
   d9786:	a915      	add	r1, sp, #84	; 0x54
   d9788:	2001      	movs	r0, #1
   d978a:	f7fe fa9b 	bl	d7cc4 <hal_ble_gatt_server_add_service>
   d978e:	2800      	cmp	r0, #0
   d9790:	d178      	bne.n	d9884 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d9792:	6835      	ldr	r5, [r6, #0]
   d9794:	a90b      	add	r1, sp, #44	; 0x2c
   d9796:	a80d      	add	r0, sp, #52	; 0x34
   d9798:	f7ff fbb5 	bl	d8f06 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d979c:	4628      	mov	r0, r5
   d979e:	a90d      	add	r1, sp, #52	; 0x34
   d97a0:	f7ff fdef 	bl	d9382 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d97a4:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d97a6:	a80e      	add	r0, sp, #56	; 0x38
   d97a8:	f7fa ff62 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d97ac:	2d00      	cmp	r5, #0
   d97ae:	d069      	beq.n	d9884 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
   d97b0:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d97b2:	6855      	ldr	r5, [r2, #4]
   d97b4:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
   d97b8:	6815      	ldr	r5, [r2, #0]
   d97ba:	3b01      	subs	r3, #1
   d97bc:	a80c      	add	r0, sp, #48	; 0x30
   d97be:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d97c2:	f7fa ff55 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d97c6:	f104 0914 	add.w	r9, r4, #20
   d97ca:	4648      	mov	r0, r9
   d97cc:	f7ff f894 	bl	d88f8 <_ZNK8particle7BleUuid7isValidEv>
   d97d0:	b968      	cbnz	r0, d97ee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x12a>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d97d2:	4b3b      	ldr	r3, [pc, #236]	; (d98c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d97d4:	4939      	ldr	r1, [pc, #228]	; (d98bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d97d6:	881a      	ldrh	r2, [r3, #0]
   d97d8:	3201      	adds	r2, #1
   d97da:	b292      	uxth	r2, r2
   d97dc:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d97de:	a815      	add	r0, sp, #84	; 0x54
   d97e0:	2301      	movs	r3, #1
   d97e2:	f7ff f87e 	bl	d88e2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d97e6:	a915      	add	r1, sp, #84	; 0x54
   d97e8:	4648      	mov	r0, r9
   d97ea:	f7ff f8b9 	bl	d8960 <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d97ee:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d97f2:	4652      	mov	r2, sl
   d97f4:	2100      	movs	r1, #0
   d97f6:	a815      	add	r0, sp, #84	; 0x54
   d97f8:	f003 fb1b 	bl	dce32 <memset>
    charInit.version = BLE_API_VERSION;
   d97fc:	2301      	movs	r3, #1
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d97fe:	4649      	mov	r1, r9
   d9800:	a804      	add	r0, sp, #16
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d9802:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    charInit.size = sizeof(hal_ble_char_init_t);
   d9806:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    charInit.uuid = charImpl->charUUID().halUUID();
   d980a:	f7ff f887 	bl	d891c <_ZN8particle7BleUuid7halUUIDEv>
   d980e:	ab04      	add	r3, sp, #16
   d9810:	aa18      	add	r2, sp, #96	; 0x60
   d9812:	f10d 0c20 	add.w	ip, sp, #32
   d9816:	6818      	ldr	r0, [r3, #0]
   d9818:	6859      	ldr	r1, [r3, #4]
   d981a:	4696      	mov	lr, r2
   d981c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d9820:	3308      	adds	r3, #8
   d9822:	4563      	cmp	r3, ip
   d9824:	4672      	mov	r2, lr
   d9826:	d1f6      	bne.n	d9816 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x152>
   d9828:	6818      	ldr	r0, [r3, #0]
   d982a:	f8ce 0000 	str.w	r0, [lr]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   d982e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   d9830:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d9834:	682b      	ldr	r3, [r5, #0]
   d9836:	8a9b      	ldrh	r3, [r3, #20]
   d9838:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d983c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d983e:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d9840:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d9842:	4b20      	ldr	r3, [pc, #128]	; (d98c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
   d9844:	931e      	str	r3, [sp, #120]	; 0x78
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d9846:	1da1      	adds	r1, r4, #6
   d9848:	a815      	add	r0, sp, #84	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d984a:	941f      	str	r4, [sp, #124]	; 0x7c
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d984c:	f7fe fa62 	bl	d7d14 <hal_ble_gatt_server_add_characteristic>
   d9850:	bb20      	cbnz	r0, d989c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        return characteristic;
    }
    charImpl->local() = true;
   d9852:	2301      	movs	r3, #1
   d9854:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d9856:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d9858:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d985a:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d985c:	a80d      	add	r0, sp, #52	; 0x34
   d985e:	f7ff fb44 	bl	d8eea <_ZN8particle17BleCharacteristicC1ERKS0_>
   d9862:	4620      	mov	r0, r4
   d9864:	a90d      	add	r1, sp, #52	; 0x34
   d9866:	f7ff fdf9 	bl	d945c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d986a:	4604      	mov	r4, r0
   d986c:	a80e      	add	r0, sp, #56	; 0x38
   d986e:	f7fa feff 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9872:	b99c      	cbnz	r4, d989c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        LOG(ERROR, "Failed to append local characteristic.");
   d9874:	2320      	movs	r3, #32
   d9876:	930d      	str	r3, [sp, #52]	; 0x34
   d9878:	4b13      	ldr	r3, [pc, #76]	; (d98c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d987a:	9300      	str	r3, [sp, #0]
   d987c:	940e      	str	r4, [sp, #56]	; 0x38
   d987e:	4623      	mov	r3, r4
   d9880:	aa0d      	add	r2, sp, #52	; 0x34
   d9882:	e007      	b.n	d9894 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d9884:	4639      	mov	r1, r7
   d9886:	4640      	mov	r0, r8
   d9888:	f7ff fb2f 	bl	d8eea <_ZN8particle17BleCharacteristicC1ERKS0_>
   d988c:	a80c      	add	r0, sp, #48	; 0x30
   d988e:	f7fa feef 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9892:	e00a      	b.n	d98aa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d9894:	490d      	ldr	r1, [pc, #52]	; (d98cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
   d9896:	2032      	movs	r0, #50	; 0x32
   d9898:	f7fe fbd4 	bl	d8044 <log_message>
            return characteristic;
   d989c:	4639      	mov	r1, r7
   d989e:	4640      	mov	r0, r8
   d98a0:	f7ff fb23 	bl	d8eea <_ZN8particle17BleCharacteristicC1ERKS0_>
   d98a4:	e001      	b.n	d98aa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
   d98a6:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d98a8:	e724      	b.n	d96f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d98aa:	a80a      	add	r0, sp, #40	; 0x28
   d98ac:	f7fe ffca 	bl	d8844 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d98b0:	4640      	mov	r0, r8
   d98b2:	b021      	add	sp, #132	; 0x84
   d98b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d98b8:	000dfa1d 	.word	0x000dfa1d
   d98bc:	000df898 	.word	0x000df898
   d98c0:	2003e338 	.word	0x2003e338
   d98c4:	000d8dd9 	.word	0x000d8dd9
   d98c8:	000df9f6 	.word	0x000df9f6
   d98cc:	000df8a8 	.word	0x000df8a8

000d98d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d98d0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d98d2:	4c06      	ldr	r4, [pc, #24]	; (d98ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d98d4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d98d6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d98d8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d98da:	f7fe fa8b 	bl	d7df4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d98de:	4620      	mov	r0, r4
   d98e0:	4a03      	ldr	r2, [pc, #12]	; (d98f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d98e2:	4904      	ldr	r1, [pc, #16]	; (d98f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d98e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d98e8:	f002 bafc 	b.w	dbee4 <__aeabi_atexit>
   d98ec:	2003e33c 	.word	0x2003e33c
   d98f0:	2003d460 	.word	0x2003d460
   d98f4:	000d87b9 	.word	0x000d87b9

000d98f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d98f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d98fa:	4606      	mov	r6, r0
   d98fc:	460d      	mov	r5, r1
   d98fe:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d9900:	2400      	movs	r4, #0
  while (size--) {
   d9902:	42bd      	cmp	r5, r7
   d9904:	d00c      	beq.n	d9920 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9906:	6833      	ldr	r3, [r6, #0]
   d9908:	f815 1b01 	ldrb.w	r1, [r5], #1
   d990c:	689b      	ldr	r3, [r3, #8]
   d990e:	4630      	mov	r0, r6
   d9910:	4798      	blx	r3
     if (chunk>=0)
   d9912:	2800      	cmp	r0, #0
   d9914:	db01      	blt.n	d991a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9916:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d9918:	e7f3      	b.n	d9902 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d991a:	2c00      	cmp	r4, #0
   d991c:	bf08      	it	eq
   d991e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d9920:	4620      	mov	r0, r4
   d9922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9924 <_ZN5Print5printEPKc>:
   d9924:	b508      	push	{r3, lr}
   d9926:	f7fd fad5 	bl	d6ed4 <_ZN5Print5writeEPKc>
   d992a:	bd08      	pop	{r3, pc}

000d992c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d992c:	6803      	ldr	r3, [r0, #0]
   d992e:	689b      	ldr	r3, [r3, #8]
   d9930:	4718      	bx	r3

000d9932 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9932:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d9934:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9936:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9938:	f7ff fff8 	bl	d992c <_ZN5Print5printEc>
  n += print('\n');
   d993c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d993e:	4604      	mov	r4, r0
  n += print('\n');
   d9940:	4628      	mov	r0, r5
   d9942:	f7ff fff3 	bl	d992c <_ZN5Print5printEc>
  return n;
}
   d9946:	4420      	add	r0, r4
   d9948:	bd38      	pop	{r3, r4, r5, pc}

000d994a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d994a:	b538      	push	{r3, r4, r5, lr}
   d994c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d994e:	f7fd fac1 	bl	d6ed4 <_ZN5Print5writeEPKc>
   d9952:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d9954:	4628      	mov	r0, r5
   d9956:	f7ff ffec 	bl	d9932 <_ZN5Print7printlnEv>
  return n;
}
   d995a:	4420      	add	r0, r4
   d995c:	bd38      	pop	{r3, r4, r5, pc}

000d995e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d995e:	b530      	push	{r4, r5, lr}
   d9960:	b08b      	sub	sp, #44	; 0x2c
   d9962:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9964:	2100      	movs	r1, #0
   d9966:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d996a:	2a01      	cmp	r2, #1
   d996c:	bf98      	it	ls
   d996e:	220a      	movls	r2, #10
   d9970:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d9974:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d9978:	fb05 3312 	mls	r3, r5, r2, r3
   d997c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9980:	2b09      	cmp	r3, #9
   d9982:	bf94      	ite	ls
   d9984:	3330      	addls	r3, #48	; 0x30
   d9986:	3337      	addhi	r3, #55	; 0x37
   d9988:	b2db      	uxtb	r3, r3
   d998a:	4621      	mov	r1, r4
   d998c:	f804 3901 	strb.w	r3, [r4], #-1
   d9990:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d9992:	2d00      	cmp	r5, #0
   d9994:	d1ee      	bne.n	d9974 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d9996:	f7fd fa9d 	bl	d6ed4 <_ZN5Print5writeEPKc>
}
   d999a:	b00b      	add	sp, #44	; 0x2c
   d999c:	bd30      	pop	{r4, r5, pc}

000d999e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d999e:	b40c      	push	{r2, r3}
   d99a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d99a4:	b087      	sub	sp, #28
   d99a6:	af00      	add	r7, sp, #0
   d99a8:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d99ac:	4605      	mov	r5, r0
   d99ae:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d99b2:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d99b4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d99b6:	4623      	mov	r3, r4
   d99b8:	464a      	mov	r2, r9
   d99ba:	2114      	movs	r1, #20
   d99bc:	1d38      	adds	r0, r7, #4
   d99be:	f7fe fc5f 	bl	d8280 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d99c2:	2813      	cmp	r0, #19
   d99c4:	d805      	bhi.n	d99d2 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d99c6:	1d39      	adds	r1, r7, #4
   d99c8:	4628      	mov	r0, r5
   d99ca:	f7fd fa83 	bl	d6ed4 <_ZN5Print5writeEPKc>
   d99ce:	4604      	mov	r4, r0
   d99d0:	e013      	b.n	d99fa <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d99d2:	f100 0308 	add.w	r3, r0, #8
   d99d6:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d99da:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d99dc:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d99e0:	1c41      	adds	r1, r0, #1
   d99e2:	4623      	mov	r3, r4
   d99e4:	464a      	mov	r2, r9
   d99e6:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d99e8:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d99ea:	f7fe fc49 	bl	d8280 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d99ee:	4669      	mov	r1, sp
   d99f0:	4628      	mov	r0, r5
   d99f2:	f7fd fa6f 	bl	d6ed4 <_ZN5Print5writeEPKc>
   d99f6:	4604      	mov	r4, r0
   d99f8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d99fa:	b11e      	cbz	r6, d9a04 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d99fc:	4628      	mov	r0, r5
   d99fe:	f7ff ff98 	bl	d9932 <_ZN5Print7printlnEv>
   d9a02:	4404      	add	r4, r0
    return n;
}
   d9a04:	4620      	mov	r0, r4
   d9a06:	371c      	adds	r7, #28
   d9a08:	46bd      	mov	sp, r7
   d9a0a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9a0e:	b002      	add	sp, #8
   d9a10:	4770      	bx	lr

000d9a12 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d9a12:	b510      	push	{r4, lr}
   d9a14:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d9a16:	f7fe f913 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d9a1a:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d9a1c:	6823      	ldr	r3, [r4, #0]
   d9a1e:	4620      	mov	r0, r4
   d9a20:	695b      	ldr	r3, [r3, #20]
   d9a22:	4798      	blx	r3
    if (c >= 0) return c;
   d9a24:	2800      	cmp	r0, #0
   d9a26:	da08      	bge.n	d9a3a <_ZN6Stream9timedReadEv+0x28>
   d9a28:	f7fe f90a 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d9a2c:	68e3      	ldr	r3, [r4, #12]
   d9a2e:	1ac0      	subs	r0, r0, r3
   d9a30:	68a3      	ldr	r3, [r4, #8]
   d9a32:	4298      	cmp	r0, r3
   d9a34:	d3f2      	bcc.n	d9a1c <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d9a36:	f04f 30ff 	mov.w	r0, #4294967295
}
   d9a3a:	bd10      	pop	{r4, pc}

000d9a3c <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   d9a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9a40:	4680      	mov	r8, r0
   d9a42:	4689      	mov	r9, r1
   d9a44:	4616      	mov	r6, r2
  if (length < 1) return 0;
   d9a46:	b17b      	cbz	r3, d9a68 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
   d9a48:	18d7      	adds	r7, r2, r3
   d9a4a:	4615      	mov	r5, r2
  size_t index = 0;
  while (index < length) {
   d9a4c:	42bd      	cmp	r5, r7
   d9a4e:	eba5 0406 	sub.w	r4, r5, r6
   d9a52:	d00a      	beq.n	d9a6a <_ZN6Stream14readBytesUntilEcPcj+0x2e>
    int c = timedRead();
   d9a54:	4640      	mov	r0, r8
   d9a56:	f7ff ffdc 	bl	d9a12 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   d9a5a:	2800      	cmp	r0, #0
   d9a5c:	db05      	blt.n	d9a6a <_ZN6Stream14readBytesUntilEcPcj+0x2e>
   d9a5e:	4548      	cmp	r0, r9
   d9a60:	d003      	beq.n	d9a6a <_ZN6Stream14readBytesUntilEcPcj+0x2e>
    *buffer++ = (char)c;
   d9a62:	f805 0b01 	strb.w	r0, [r5], #1

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
   d9a66:	e7f1      	b.n	d9a4c <_ZN6Stream14readBytesUntilEcPcj+0x10>
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
   d9a68:	461c      	mov	r4, r3
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
   d9a6a:	4620      	mov	r0, r4
   d9a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9a70 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d9a70:	b570      	push	{r4, r5, r6, lr}
   d9a72:	460d      	mov	r5, r1
  String ret;
   d9a74:	4909      	ldr	r1, [pc, #36]	; (d9a9c <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   d9a76:	4604      	mov	r4, r0
   d9a78:	4616      	mov	r6, r2
  String ret;
   d9a7a:	f7fe fe0c 	bl	d8696 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   d9a7e:	4628      	mov	r0, r5
   d9a80:	f7ff ffc7 	bl	d9a12 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   d9a84:	2800      	cmp	r0, #0
   d9a86:	db06      	blt.n	d9a96 <_ZN6Stream15readStringUntilEc+0x26>
   d9a88:	42b0      	cmp	r0, r6
   d9a8a:	d004      	beq.n	d9a96 <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d9a8c:	b2c1      	uxtb	r1, r0
   d9a8e:	4620      	mov	r0, r4
   d9a90:	f7fe fe56 	bl	d8740 <_ZN6String6concatEc>
   d9a94:	e7f3      	b.n	d9a7e <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
   d9a96:	4620      	mov	r0, r4
   d9a98:	bd70      	pop	{r4, r5, r6, pc}
   d9a9a:	bf00      	nop
   d9a9c:	000df7fc 	.word	0x000df7fc

000d9aa0 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d9aa0:	6880      	ldr	r0, [r0, #8]
   d9aa2:	6803      	ldr	r3, [r0, #0]
   d9aa4:	68db      	ldr	r3, [r3, #12]
   d9aa6:	4718      	bx	r3

000d9aa8 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d9aa8:	4770      	bx	lr

000d9aaa <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d9aaa:	b119      	cbz	r1, d9ab4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d9aac:	680b      	ldr	r3, [r1, #0]
   d9aae:	4608      	mov	r0, r1
   d9ab0:	685b      	ldr	r3, [r3, #4]
   d9ab2:	4718      	bx	r3
   d9ab4:	4770      	bx	lr

000d9ab6 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d9ab6:	b119      	cbz	r1, d9ac0 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d9ab8:	680b      	ldr	r3, [r1, #0]
   d9aba:	4608      	mov	r0, r1
   d9abc:	685b      	ldr	r3, [r3, #4]
   d9abe:	4718      	bx	r3
   d9ac0:	4770      	bx	lr

000d9ac2 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d9ac2:	4770      	bx	lr

000d9ac4 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d9ac4:	4770      	bx	lr

000d9ac6 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d9ac6:	4770      	bx	lr

000d9ac8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d9ac8:	b538      	push	{r3, r4, r5, lr}
   d9aca:	4604      	mov	r4, r0
   d9acc:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d9ace:	6800      	ldr	r0, [r0, #0]
   d9ad0:	212e      	movs	r1, #46	; 0x2e
   d9ad2:	f003 f9fc 	bl	dcece <strchrnul>
    size = s - category;
   d9ad6:	6823      	ldr	r3, [r4, #0]
   d9ad8:	1ac3      	subs	r3, r0, r3
   d9ada:	602b      	str	r3, [r5, #0]
    if (size) {
   d9adc:	b123      	cbz	r3, d9ae8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d9ade:	7803      	ldrb	r3, [r0, #0]
   d9ae0:	b103      	cbz	r3, d9ae4 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d9ae2:	3001      	adds	r0, #1
   d9ae4:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d9ae6:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d9ae8:	4618      	mov	r0, r3
}
   d9aea:	bd38      	pop	{r3, r4, r5, pc}

000d9aec <_ZN5spark16JSONStreamWriterD0Ev>:
   d9aec:	b510      	push	{r4, lr}
   d9aee:	210c      	movs	r1, #12
   d9af0:	4604      	mov	r4, r0
   d9af2:	f002 fa05 	bl	dbf00 <_ZdlPvj>
   d9af6:	4620      	mov	r0, r4
   d9af8:	bd10      	pop	{r4, pc}

000d9afa <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d9afa:	b510      	push	{r4, lr}
   d9afc:	2104      	movs	r1, #4
   d9afe:	4604      	mov	r4, r0
   d9b00:	f002 f9fe 	bl	dbf00 <_ZdlPvj>
   d9b04:	4620      	mov	r0, r4
   d9b06:	bd10      	pop	{r4, pc}

000d9b08 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d9b08:	b510      	push	{r4, lr}
   d9b0a:	2104      	movs	r1, #4
   d9b0c:	4604      	mov	r4, r0
   d9b0e:	f002 f9f7 	bl	dbf00 <_ZdlPvj>
   d9b12:	4620      	mov	r0, r4
   d9b14:	bd10      	pop	{r4, pc}

000d9b16 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d9b16:	b538      	push	{r3, r4, r5, lr}
   d9b18:	460c      	mov	r4, r1
   d9b1a:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d9b1c:	f001 fc7e 	bl	db41c <_Z16_fetch_usbserialv>
   d9b20:	4284      	cmp	r4, r0
   d9b22:	d00d      	beq.n	d9b40 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d9b24:	f001 fd52 	bl	db5cc <_Z22__fetch_global_Serial1v>
   d9b28:	4284      	cmp	r4, r0
   d9b2a:	d105      	bne.n	d9b38 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d9b2c:	f001 fd4e 	bl	db5cc <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d9b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d9b34:	f001 bd43 	b.w	db5be <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d9b38:	4621      	mov	r1, r4
   d9b3a:	4628      	mov	r0, r5
   d9b3c:	f7ff ffbb 	bl	d9ab6 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d9b40:	bd38      	pop	{r3, r4, r5, pc}

000d9b42 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d9b42:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d9b44:	f003 f9cd 	bl	dcee2 <strcmp>
}
   d9b48:	fab0 f080 	clz	r0, r0
   d9b4c:	0940      	lsrs	r0, r0, #5
   d9b4e:	bd08      	pop	{r3, pc}

000d9b50 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d9b50:	b538      	push	{r3, r4, r5, lr}
   d9b52:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d9b54:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d9b56:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d9b58:	f003 f9f1 	bl	dcf3e <strlen>
   d9b5c:	4621      	mov	r1, r4
   d9b5e:	4602      	mov	r2, r0
   d9b60:	4628      	mov	r0, r5
}
   d9b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d9b66:	f002 b8ba 	b.w	dbcde <_ZN5spark10JSONWriter5valueEPKcj>

000d9b6a <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d9b6a:	6800      	ldr	r0, [r0, #0]
   d9b6c:	f7fe b952 	b.w	d7e14 <os_mutex_recursive_lock>

000d9b70 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d9b70:	b570      	push	{r4, r5, r6, lr}
   d9b72:	4604      	mov	r4, r0
    write(str, strlen(str));
   d9b74:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d9b76:	460d      	mov	r5, r1
    write(str, strlen(str));
   d9b78:	f003 f9e1 	bl	dcf3e <strlen>
   d9b7c:	6823      	ldr	r3, [r4, #0]
   d9b7e:	4602      	mov	r2, r0
   d9b80:	4629      	mov	r1, r5
   d9b82:	4620      	mov	r0, r4
   d9b84:	68db      	ldr	r3, [r3, #12]
}
   d9b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d9b8a:	4718      	bx	r3

000d9b8c <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d9b8c:	b513      	push	{r0, r1, r4, lr}
   d9b8e:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d9b90:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d9b92:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d9b96:	68d4      	ldr	r4, [r2, #12]
   d9b98:	4619      	mov	r1, r3
   d9b9a:	2201      	movs	r2, #1
   d9b9c:	47a0      	blx	r4
}
   d9b9e:	b002      	add	sp, #8
   d9ba0:	bd10      	pop	{r4, pc}
	...

000d9ba4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d9ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d9ba8:	6845      	ldr	r5, [r0, #4]
   d9baa:	6807      	ldr	r7, [r0, #0]
   d9bac:	b085      	sub	sp, #20
   d9bae:	4691      	mov	r9, r2
   d9bb0:	2214      	movs	r2, #20
   d9bb2:	4355      	muls	r5, r2
   d9bb4:	9301      	str	r3, [sp, #4]
   d9bb6:	10ab      	asrs	r3, r5, #2
   d9bb8:	4d19      	ldr	r5, [pc, #100]	; (d9c20 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d9bba:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d9bbc:	435d      	muls	r5, r3
   d9bbe:	468b      	mov	fp, r1
   d9bc0:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d9bc2:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d9bc4:	2d00      	cmp	r5, #0
   d9bc6:	9303      	str	r3, [sp, #12]
   d9bc8:	dd23      	ble.n	d9c12 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d9bca:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d9bcc:	106e      	asrs	r6, r5, #1
   d9bce:	fb03 f006 	mul.w	r0, r3, r6
   d9bd2:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d9bd6:	464a      	mov	r2, r9
   d9bd8:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d9bdc:	5820      	ldr	r0, [r4, r0]
   d9bde:	45d1      	cmp	r9, sl
   d9be0:	bf28      	it	cs
   d9be2:	4652      	movcs	r2, sl
   d9be4:	4659      	mov	r1, fp
   d9be6:	f003 f9c7 	bl	dcf78 <strncmp>
                if (cmp == 0) {
   d9bea:	9b03      	ldr	r3, [sp, #12]
   d9bec:	b948      	cbnz	r0, d9c02 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d9bee:	45d1      	cmp	r9, sl
   d9bf0:	d103      	bne.n	d9bfa <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d9bf2:	9a01      	ldr	r2, [sp, #4]
   d9bf4:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d9bf6:	4635      	mov	r5, r6
   d9bf8:	e7e4      	b.n	d9bc4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d9bfa:	bf8c      	ite	hi
   d9bfc:	2001      	movhi	r0, #1
   d9bfe:	2000      	movls	r0, #0
   d9c00:	e000      	b.n	d9c04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d9c02:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d9c04:	2800      	cmp	r0, #0
   d9c06:	d0f6      	beq.n	d9bf6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d9c08:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d9c0a:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d9c0e:	3e01      	subs	r6, #1
   d9c10:	e7f1      	b.n	d9bf6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d9c12:	1be4      	subs	r4, r4, r7
}
   d9c14:	4802      	ldr	r0, [pc, #8]	; (d9c20 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d9c16:	10a4      	asrs	r4, r4, #2
}
   d9c18:	4360      	muls	r0, r4
   d9c1a:	b005      	add	sp, #20
   d9c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9c20:	cccccccd 	.word	0xcccccccd

000d9c24 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d9c24:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9c26:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d9c28:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d9c2a:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d9c2c:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d9c2e:	b313      	cbz	r3, d9c76 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d9c30:	b309      	cbz	r1, d9c76 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d9c32:	af04      	add	r7, sp, #16
   d9c34:	2300      	movs	r3, #0
   d9c36:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d9c3a:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d9c3e:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d9c40:	4639      	mov	r1, r7
   d9c42:	a801      	add	r0, sp, #4
   d9c44:	f7ff ff40 	bl	d9ac8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d9c48:	4601      	mov	r1, r0
   d9c4a:	b1a0      	cbz	r0, d9c76 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d9c4c:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d9c4e:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d9c50:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d9c54:	4620      	mov	r0, r4
   d9c56:	f7ff ffa5 	bl	d9ba4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d9c5a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d9c5e:	b153      	cbz	r3, d9c76 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d9c60:	6823      	ldr	r3, [r4, #0]
   d9c62:	2414      	movs	r4, #20
   d9c64:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d9c68:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d9c6a:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d9c6e:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d9c70:	bfa8      	it	ge
   d9c72:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d9c74:	e7e4      	b.n	d9c40 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d9c76:	4630      	mov	r0, r6
   d9c78:	b005      	add	sp, #20
   d9c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9c7c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d9c7c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d9c7e:	4c09      	ldr	r4, [pc, #36]	; (d9ca4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d9c80:	6823      	ldr	r3, [r4, #0]
   d9c82:	07db      	lsls	r3, r3, #31
   d9c84:	d40b      	bmi.n	d9c9e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d9c86:	4620      	mov	r0, r4
   d9c88:	f7fa fa18 	bl	d40bc <__cxa_guard_acquire>
   d9c8c:	b138      	cbz	r0, d9c9e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d9c8e:	4620      	mov	r0, r4
   d9c90:	f7fa fa19 	bl	d40c6 <__cxa_guard_release>
   d9c94:	4a04      	ldr	r2, [pc, #16]	; (d9ca8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d9c96:	4905      	ldr	r1, [pc, #20]	; (d9cac <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d9c98:	4805      	ldr	r0, [pc, #20]	; (d9cb0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d9c9a:	f002 f923 	bl	dbee4 <__aeabi_atexit>
    return &factory;
}
   d9c9e:	4804      	ldr	r0, [pc, #16]	; (d9cb0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d9ca0:	bd10      	pop	{r4, pc}
   d9ca2:	bf00      	nop
   d9ca4:	2003e340 	.word	0x2003e340
   d9ca8:	2003d460 	.word	0x2003d460
   d9cac:	000d9ac5 	.word	0x000d9ac5
   d9cb0:	2003d36c 	.word	0x2003d36c

000d9cb4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d9cb4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d9cb6:	4c09      	ldr	r4, [pc, #36]	; (d9cdc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d9cb8:	6823      	ldr	r3, [r4, #0]
   d9cba:	07db      	lsls	r3, r3, #31
   d9cbc:	d40b      	bmi.n	d9cd6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d9cbe:	4620      	mov	r0, r4
   d9cc0:	f7fa f9fc 	bl	d40bc <__cxa_guard_acquire>
   d9cc4:	b138      	cbz	r0, d9cd6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d9cc6:	4620      	mov	r0, r4
   d9cc8:	f7fa f9fd 	bl	d40c6 <__cxa_guard_release>
   d9ccc:	4a04      	ldr	r2, [pc, #16]	; (d9ce0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d9cce:	4905      	ldr	r1, [pc, #20]	; (d9ce4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d9cd0:	4805      	ldr	r0, [pc, #20]	; (d9ce8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d9cd2:	f002 f907 	bl	dbee4 <__aeabi_atexit>
    return &factory;
}
   d9cd6:	4804      	ldr	r0, [pc, #16]	; (d9ce8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d9cd8:	bd10      	pop	{r4, pc}
   d9cda:	bf00      	nop
   d9cdc:	2003e370 	.word	0x2003e370
   d9ce0:	2003d460 	.word	0x2003d460
   d9ce4:	000d9ac3 	.word	0x000d9ac3
   d9ce8:	2003d368 	.word	0x2003d368

000d9cec <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d9cec:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d9cee:	2500      	movs	r5, #0
   d9cf0:	4604      	mov	r4, r0
   d9cf2:	6005      	str	r5, [r0, #0]
   d9cf4:	6045      	str	r5, [r0, #4]
   d9cf6:	6085      	str	r5, [r0, #8]
   d9cf8:	6105      	str	r5, [r0, #16]
   d9cfa:	6145      	str	r5, [r0, #20]
   d9cfc:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d9cfe:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d9d02:	f7fe f877 	bl	d7df4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d9d06:	f7ff ffb9 	bl	d9c7c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d9d0a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d9d0c:	f7ff ffd2 	bl	d9cb4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d9d10:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d9d12:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d9d14:	4620      	mov	r0, r4
   d9d16:	bd38      	pop	{r3, r4, r5, pc}

000d9d18 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d9d18:	b510      	push	{r4, lr}
    static LogManager mgr;
   d9d1a:	4c0a      	ldr	r4, [pc, #40]	; (d9d44 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d9d1c:	6823      	ldr	r3, [r4, #0]
   d9d1e:	07db      	lsls	r3, r3, #31
   d9d20:	d40e      	bmi.n	d9d40 <_ZN5spark10LogManager8instanceEv+0x28>
   d9d22:	4620      	mov	r0, r4
   d9d24:	f7fa f9ca 	bl	d40bc <__cxa_guard_acquire>
   d9d28:	b150      	cbz	r0, d9d40 <_ZN5spark10LogManager8instanceEv+0x28>
   d9d2a:	4807      	ldr	r0, [pc, #28]	; (d9d48 <_ZN5spark10LogManager8instanceEv+0x30>)
   d9d2c:	f7ff ffde 	bl	d9cec <_ZN5spark10LogManagerC1Ev>
   d9d30:	4620      	mov	r0, r4
   d9d32:	f7fa f9c8 	bl	d40c6 <__cxa_guard_release>
   d9d36:	4a05      	ldr	r2, [pc, #20]	; (d9d4c <_ZN5spark10LogManager8instanceEv+0x34>)
   d9d38:	4905      	ldr	r1, [pc, #20]	; (d9d50 <_ZN5spark10LogManager8instanceEv+0x38>)
   d9d3a:	4803      	ldr	r0, [pc, #12]	; (d9d48 <_ZN5spark10LogManager8instanceEv+0x30>)
   d9d3c:	f002 f8d2 	bl	dbee4 <__aeabi_atexit>
    return &mgr;
}
   d9d40:	4801      	ldr	r0, [pc, #4]	; (d9d48 <_ZN5spark10LogManager8instanceEv+0x30>)
   d9d42:	bd10      	pop	{r4, pc}
   d9d44:	2003e344 	.word	0x2003e344
   d9d48:	2003e348 	.word	0x2003e348
   d9d4c:	2003d460 	.word	0x2003d460
   d9d50:	000da183 	.word	0x000da183

000d9d54 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d9d54:	2300      	movs	r3, #0
   d9d56:	4a02      	ldr	r2, [pc, #8]	; (d9d60 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d9d58:	4902      	ldr	r1, [pc, #8]	; (d9d64 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d9d5a:	4803      	ldr	r0, [pc, #12]	; (d9d68 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d9d5c:	f7fe b982 	b.w	d8064 <log_set_callbacks>
   d9d60:	000da065 	.word	0x000da065
   d9d64:	000d9ff5 	.word	0x000d9ff5
   d9d68:	000d9f7d 	.word	0x000d9f7d

000d9d6c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d9d6c:	2300      	movs	r3, #0
   d9d6e:	461a      	mov	r2, r3
   d9d70:	4619      	mov	r1, r3
   d9d72:	4618      	mov	r0, r3
   d9d74:	f7fe b976 	b.w	d8064 <log_set_callbacks>

000d9d78 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d9d78:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9d7a:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d9d7c:	688e      	ldr	r6, [r1, #8]
   d9d7e:	f851 3b04 	ldr.w	r3, [r1], #4
   d9d82:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d9d86:	4605      	mov	r5, r0
   d9d88:	a801      	add	r0, sp, #4
   d9d8a:	f7ff f8a7 	bl	d8edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d9d8e:	4622      	mov	r2, r4
   d9d90:	4631      	mov	r1, r6
   d9d92:	4628      	mov	r0, r5
   d9d94:	f001 ffda 	bl	dbd4c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9d98:	a801      	add	r0, sp, #4
   d9d9a:	f7fa fc69 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9d9e:	4628      	mov	r0, r5
   d9da0:	b002      	add	sp, #8
   d9da2:	bd70      	pop	{r4, r5, r6, pc}

000d9da4 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d9da4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9da6:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d9da8:	690e      	ldr	r6, [r1, #16]
   d9daa:	f851 3b04 	ldr.w	r3, [r1], #4
   d9dae:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d9db2:	4605      	mov	r5, r0
   d9db4:	a801      	add	r0, sp, #4
   d9db6:	f7ff f891 	bl	d8edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d9dba:	4622      	mov	r2, r4
   d9dbc:	4631      	mov	r1, r6
   d9dbe:	4628      	mov	r0, r5
   d9dc0:	f001 ffdf 	bl	dbd82 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9dc4:	a801      	add	r0, sp, #4
   d9dc6:	f7fa fc53 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9dca:	4628      	mov	r0, r5
   d9dcc:	b002      	add	sp, #8
   d9dce:	bd70      	pop	{r4, r5, r6, pc}

000d9dd0 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d9dd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9dd2:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d9dd4:	68ce      	ldr	r6, [r1, #12]
   d9dd6:	f851 3b04 	ldr.w	r3, [r1], #4
   d9dda:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d9dde:	4605      	mov	r5, r0
   d9de0:	a801      	add	r0, sp, #4
   d9de2:	f7ff f87b 	bl	d8edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d9de6:	4622      	mov	r2, r4
   d9de8:	4631      	mov	r1, r6
   d9dea:	4628      	mov	r0, r5
   d9dec:	f001 ff86 	bl	dbcfc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9df0:	a801      	add	r0, sp, #4
   d9df2:	f7fa fc3d 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9df6:	4628      	mov	r0, r5
   d9df8:	b002      	add	sp, #8
   d9dfa:	bd70      	pop	{r4, r5, r6, pc}

000d9dfc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d9dfc:	b530      	push	{r4, r5, lr}
   d9dfe:	b08b      	sub	sp, #44	; 0x2c
   d9e00:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d9e02:	4601      	mov	r1, r0
   d9e04:	a804      	add	r0, sp, #16
   d9e06:	f7ff ffb7 	bl	d9d78 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d9e0a:	a804      	add	r0, sp, #16
   d9e0c:	f001 fea9 	bl	dbb62 <_ZN5spark18JSONObjectIterator4nextEv>
   d9e10:	b1e8      	cbz	r0, d9e4e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d9e12:	a904      	add	r1, sp, #16
   d9e14:	4668      	mov	r0, sp
   d9e16:	f7ff ffdb 	bl	d9dd0 <_ZNK5spark18JSONObjectIterator4nameEv>
   d9e1a:	490f      	ldr	r1, [pc, #60]	; (d9e58 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d9e1c:	9802      	ldr	r0, [sp, #8]
   d9e1e:	f7ff fe90 	bl	d9b42 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d9e22:	4604      	mov	r4, r0
   d9e24:	b110      	cbz	r0, d9e2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d9e26:	1c2c      	adds	r4, r5, #0
   d9e28:	bf18      	it	ne
   d9e2a:	2401      	movne	r4, #1
   d9e2c:	a801      	add	r0, sp, #4
   d9e2e:	f7fa fc1f 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9e32:	2c00      	cmp	r4, #0
   d9e34:	d0e9      	beq.n	d9e0a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d9e36:	a904      	add	r1, sp, #16
   d9e38:	4668      	mov	r0, sp
   d9e3a:	f7ff ffb3 	bl	d9da4 <_ZNK5spark18JSONObjectIterator5valueEv>
   d9e3e:	4668      	mov	r0, sp
   d9e40:	f001 fe6f 	bl	dbb22 <_ZNK5spark9JSONValue5toIntEv>
   d9e44:	6028      	str	r0, [r5, #0]
   d9e46:	a801      	add	r0, sp, #4
   d9e48:	f7fa fc12 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9e4c:	e7dd      	b.n	d9e0a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d9e4e:	a805      	add	r0, sp, #20
   d9e50:	f7fa fc0e 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d9e54:	b00b      	add	sp, #44	; 0x2c
   d9e56:	bd30      	pop	{r4, r5, pc}
   d9e58:	000dfa88 	.word	0x000dfa88

000d9e5c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d9e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9e5e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d9e60:	4620      	mov	r0, r4
   d9e62:	4913      	ldr	r1, [pc, #76]	; (d9eb0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d9e64:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d9e66:	f003 f83c 	bl	dcee2 <strcmp>
   d9e6a:	b940      	cbnz	r0, d9e7e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d9e6c:	f001 fad6 	bl	db41c <_Z16_fetch_usbserialv>
   d9e70:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d9e74:	f001 fac2 	bl	db3fc <_ZN9USBSerial5beginEl>
        return &Serial;
   d9e78:	f001 fad0 	bl	db41c <_Z16_fetch_usbserialv>
   d9e7c:	e015      	b.n	d9eaa <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d9e7e:	490d      	ldr	r1, [pc, #52]	; (d9eb4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d9e80:	4620      	mov	r0, r4
   d9e82:	f003 f82e 	bl	dcee2 <strcmp>
   d9e86:	b978      	cbnz	r0, d9ea8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d9e88:	a902      	add	r1, sp, #8
   d9e8a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d9e8e:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d9e92:	4628      	mov	r0, r5
   d9e94:	f7ff ffb2 	bl	d9dfc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d9e98:	f001 fb98 	bl	db5cc <_Z22__fetch_global_Serial1v>
   d9e9c:	9901      	ldr	r1, [sp, #4]
   d9e9e:	f001 fb8b 	bl	db5b8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d9ea2:	f001 fb93 	bl	db5cc <_Z22__fetch_global_Serial1v>
   d9ea6:	e000      	b.n	d9eaa <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d9ea8:	2000      	movs	r0, #0
}
   d9eaa:	b003      	add	sp, #12
   d9eac:	bd30      	pop	{r4, r5, pc}
   d9eae:	bf00      	nop
   d9eb0:	000dfa8d 	.word	0x000dfa8d
   d9eb4:	000dfa94 	.word	0x000dfa94

000d9eb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9eb8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d9eba:	6804      	ldr	r4, [r0, #0]
   d9ebc:	6843      	ldr	r3, [r0, #4]
   d9ebe:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9ec0:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d9ec2:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d9ec6:	42a6      	cmp	r6, r4
   d9ec8:	d005      	beq.n	d9ed6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d9eca:	f104 0008 	add.w	r0, r4, #8
   d9ece:	f7ff fff3 	bl	d9eb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9ed2:	3414      	adds	r4, #20
   d9ed4:	e7f7      	b.n	d9ec6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d9ed6:	6828      	ldr	r0, [r5, #0]
   d9ed8:	f7fe f9aa 	bl	d8230 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d9edc:	4628      	mov	r0, r5
   d9ede:	bd70      	pop	{r4, r5, r6, pc}

000d9ee0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9ee0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d9ee2:	6804      	ldr	r4, [r0, #0]
   d9ee4:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9ee6:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d9ee8:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d9eec:	42a6      	cmp	r6, r4
   d9eee:	d004      	beq.n	d9efa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d9ef0:	4620      	mov	r0, r4
   d9ef2:	f7fe fb89 	bl	d8608 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d9ef6:	3410      	adds	r4, #16
   d9ef8:	e7f8      	b.n	d9eec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d9efa:	6828      	ldr	r0, [r5, #0]
   d9efc:	f7fe f998 	bl	d8230 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d9f00:	4628      	mov	r0, r5
   d9f02:	bd70      	pop	{r4, r5, r6, pc}

000d9f04 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d9f04:	b510      	push	{r4, lr}
   d9f06:	4604      	mov	r4, r0
   d9f08:	300c      	adds	r0, #12
   d9f0a:	f7ff ffd5 	bl	d9eb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9f0e:	4620      	mov	r0, r4
   d9f10:	f7ff ffe6 	bl	d9ee0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d9f14:	4620      	mov	r0, r4
   d9f16:	bd10      	pop	{r4, pc}

000d9f18 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d9f18:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d9f1a:	4b04      	ldr	r3, [pc, #16]	; (d9f2c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d9f1c:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d9f1e:	f840 3b04 	str.w	r3, [r0], #4
   d9f22:	f7ff ffef 	bl	d9f04 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d9f26:	4620      	mov	r0, r4
   d9f28:	bd10      	pop	{r4, pc}
   d9f2a:	bf00      	nop
   d9f2c:	000df328 	.word	0x000df328

000d9f30 <_ZN5spark16StreamLogHandlerD0Ev>:
   d9f30:	b510      	push	{r4, lr}
   d9f32:	4604      	mov	r4, r0
   d9f34:	f7ff fff0 	bl	d9f18 <_ZN5spark16StreamLogHandlerD1Ev>
   d9f38:	4620      	mov	r0, r4
   d9f3a:	2124      	movs	r1, #36	; 0x24
   d9f3c:	f001 ffe0 	bl	dbf00 <_ZdlPvj>
   d9f40:	4620      	mov	r0, r4
   d9f42:	bd10      	pop	{r4, pc}

000d9f44 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d9f44:	b510      	push	{r4, lr}
   d9f46:	4b03      	ldr	r3, [pc, #12]	; (d9f54 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d9f48:	6003      	str	r3, [r0, #0]
   d9f4a:	4604      	mov	r4, r0
   d9f4c:	f7ff ffe4 	bl	d9f18 <_ZN5spark16StreamLogHandlerD1Ev>
   d9f50:	4620      	mov	r0, r4
   d9f52:	bd10      	pop	{r4, pc}
   d9f54:	000dfa78 	.word	0x000dfa78

000d9f58 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d9f58:	b510      	push	{r4, lr}
   d9f5a:	4604      	mov	r4, r0
   d9f5c:	f7ff fff2 	bl	d9f44 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d9f60:	4620      	mov	r0, r4
   d9f62:	2124      	movs	r1, #36	; 0x24
   d9f64:	f001 ffcc 	bl	dbf00 <_ZdlPvj>
   d9f68:	4620      	mov	r0, r4
   d9f6a:	bd10      	pop	{r4, pc}

000d9f6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d9f6c:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d9f6e:	6803      	ldr	r3, [r0, #0]
   d9f70:	4604      	mov	r4, r0
   d9f72:	6818      	ldr	r0, [r3, #0]
   d9f74:	f7fd ff56 	bl	d7e24 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d9f78:	4620      	mov	r0, r4
   d9f7a:	bd10      	pop	{r4, pc}

000d9f7c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d9f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9f80:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d9f82:	4b1b      	ldr	r3, [pc, #108]	; (d9ff0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d9f84:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9f86:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d9f8a:	b085      	sub	sp, #20
   d9f8c:	4682      	mov	sl, r0
   d9f8e:	460e      	mov	r6, r1
   d9f90:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9f92:	bb53      	cbnz	r3, d9fea <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d9f94:	f7ff fec0 	bl	d9d18 <_ZN5spark10LogManager8instanceEv>
   d9f98:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9f9a:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9f9c:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d9f9e:	f7ff fde4 	bl	d9b6a <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d9fa2:	7b23      	ldrb	r3, [r4, #12]
   d9fa4:	b9f3      	cbnz	r3, d9fe4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d9fa6:	2301      	movs	r3, #1
   d9fa8:	7323      	strb	r3, [r4, #12]
   d9faa:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d9fac:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d9fae:	b2f6      	uxtb	r6, r6
   d9fb0:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d9fb4:	454d      	cmp	r5, r9
   d9fb6:	d013      	beq.n	d9fe0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d9fb8:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d9fbc:	4641      	mov	r1, r8
   d9fbe:	1d38      	adds	r0, r7, #4
   d9fc0:	f7ff fe30 	bl	d9c24 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9fc4:	4286      	cmp	r6, r0
   d9fc6:	d3f5      	bcc.n	d9fb4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d9fc8:	683b      	ldr	r3, [r7, #0]
   d9fca:	f8cd b000 	str.w	fp, [sp]
   d9fce:	689b      	ldr	r3, [r3, #8]
   d9fd0:	469e      	mov	lr, r3
   d9fd2:	4638      	mov	r0, r7
   d9fd4:	4643      	mov	r3, r8
   d9fd6:	4632      	mov	r2, r6
   d9fd8:	4651      	mov	r1, sl
   d9fda:	4677      	mov	r7, lr
   d9fdc:	47b8      	blx	r7
   d9fde:	e7e9      	b.n	d9fb4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d9fe0:	2300      	movs	r3, #0
   d9fe2:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d9fe4:	a803      	add	r0, sp, #12
   d9fe6:	f7ff ffc1 	bl	d9f6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d9fea:	b005      	add	sp, #20
   d9fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9ff0:	e000ed00 	.word	0xe000ed00

000d9ff4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d9ff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9ff8:	4699      	mov	r9, r3
   d9ffa:	4b19      	ldr	r3, [pc, #100]	; (da060 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d9ffc:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   da002:	4607      	mov	r7, r0
   da004:	4688      	mov	r8, r1
   da006:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   da008:	bb33      	cbnz	r3, da058 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   da00a:	f7ff fe85 	bl	d9d18 <_ZN5spark10LogManager8instanceEv>
   da00e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   da010:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da012:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da014:	f7ff fda9 	bl	d9b6a <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   da018:	7b23      	ldrb	r3, [r4, #12]
   da01a:	b9d3      	cbnz	r3, da052 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   da01c:	2301      	movs	r3, #1
   da01e:	7323      	strb	r3, [r4, #12]
   da020:	6825      	ldr	r5, [r4, #0]
   da022:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   da024:	fa5f fb86 	uxtb.w	fp, r6
   da028:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   da02c:	4555      	cmp	r5, sl
   da02e:	d00e      	beq.n	da04e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   da030:	f855 6b04 	ldr.w	r6, [r5], #4
   da034:	4649      	mov	r1, r9
   da036:	1d30      	adds	r0, r6, #4
   da038:	f7ff fdf4 	bl	d9c24 <_ZNK5spark6detail9LogFilter5levelEPKc>
   da03c:	4583      	cmp	fp, r0
   da03e:	d3f5      	bcc.n	da02c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   da040:	6833      	ldr	r3, [r6, #0]
   da042:	4642      	mov	r2, r8
   da044:	68db      	ldr	r3, [r3, #12]
   da046:	4639      	mov	r1, r7
   da048:	4630      	mov	r0, r6
   da04a:	4798      	blx	r3
   da04c:	e7ee      	b.n	da02c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   da04e:	2300      	movs	r3, #0
   da050:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   da052:	a801      	add	r0, sp, #4
   da054:	f7ff ff8a 	bl	d9f6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   da058:	b003      	add	sp, #12
   da05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da05e:	bf00      	nop
   da060:	e000ed00 	.word	0xe000ed00

000da064 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   da064:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   da068:	4b15      	ldr	r3, [pc, #84]	; (da0c0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   da06a:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   da06c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   da070:	4604      	mov	r4, r0
   da072:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   da074:	b9fb      	cbnz	r3, da0b6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   da076:	f7ff fe4f 	bl	d9d18 <_ZN5spark10LogManager8instanceEv>
   da07a:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   da07c:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da07e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da080:	f7ff fd73 	bl	d9b6a <_ZN14RecursiveMutex4lockEv>
   da084:	e896 00a0 	ldmia.w	r6, {r5, r7}
   da088:	2646      	movs	r6, #70	; 0x46
   da08a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   da08e:	42af      	cmp	r7, r5
   da090:	d107      	bne.n	da0a2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   da092:	a801      	add	r0, sp, #4
   da094:	f7ff ff6a 	bl	d9f6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   da098:	42b4      	cmp	r4, r6
   da09a:	bfb4      	ite	lt
   da09c:	2000      	movlt	r0, #0
   da09e:	2001      	movge	r0, #1
   da0a0:	e00a      	b.n	da0b8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   da0a2:	f855 0b04 	ldr.w	r0, [r5], #4
   da0a6:	4641      	mov	r1, r8
   da0a8:	3004      	adds	r0, #4
   da0aa:	f7ff fdbb 	bl	d9c24 <_ZNK5spark6detail9LogFilter5levelEPKc>
   da0ae:	4286      	cmp	r6, r0
   da0b0:	bfa8      	it	ge
   da0b2:	4606      	movge	r6, r0
   da0b4:	e7eb      	b.n	da08e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   da0b6:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   da0b8:	b002      	add	sp, #8
   da0ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da0be:	bf00      	nop
   da0c0:	e000ed00 	.word	0xe000ed00

000da0c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   da0c4:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   da0c6:	6803      	ldr	r3, [r0, #0]
   da0c8:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   da0ca:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   da0cc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   da0d0:	429a      	cmp	r2, r3
   da0d2:	4618      	mov	r0, r3
   da0d4:	d00e      	beq.n	da0f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   da0d6:	6806      	ldr	r6, [r0, #0]
   da0d8:	680d      	ldr	r5, [r1, #0]
   da0da:	42ae      	cmp	r6, r5
   da0dc:	f103 0304 	add.w	r3, r3, #4
   da0e0:	d1f6      	bne.n	da0d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   da0e2:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   da0e4:	1a52      	subs	r2, r2, r1
   da0e6:	f002 fe89 	bl	dcdfc <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   da0ea:	6863      	ldr	r3, [r4, #4]
   da0ec:	3b01      	subs	r3, #1
   da0ee:	6063      	str	r3, [r4, #4]
    return true;
   da0f0:	2001      	movs	r0, #1
}
   da0f2:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   da0f4:	2000      	movs	r0, #0
   da0f6:	bd70      	pop	{r4, r5, r6, pc}

000da0f8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   da0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da0fa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   da0fc:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   da0fe:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da100:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   da102:	f7ff fd32 	bl	d9b6a <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   da106:	a901      	add	r1, sp, #4
   da108:	4620      	mov	r0, r4
   da10a:	f7ff ffdb 	bl	da0c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   da10e:	b920      	cbnz	r0, da11a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   da110:	a803      	add	r0, sp, #12
   da112:	f7ff ff2b 	bl	d9f6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   da116:	b004      	add	sp, #16
   da118:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   da11a:	6863      	ldr	r3, [r4, #4]
   da11c:	2b00      	cmp	r3, #0
   da11e:	d1f7      	bne.n	da110 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   da120:	f7ff fe24 	bl	d9d6c <_ZN5spark10LogManager20resetSystemCallbacksEv>
   da124:	e7f4      	b.n	da110 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000da126 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   da126:	b570      	push	{r4, r5, r6, lr}
   da128:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   da12a:	6943      	ldr	r3, [r0, #20]
   da12c:	2618      	movs	r6, #24
   da12e:	4604      	mov	r4, r0
   da130:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   da134:	42ae      	cmp	r6, r5
   da136:	d015      	beq.n	da164 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   da138:	f105 0110 	add.w	r1, r5, #16
   da13c:	4620      	mov	r0, r4
   da13e:	f7ff ffc1 	bl	da0c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   da142:	6863      	ldr	r3, [r4, #4]
   da144:	b90b      	cbnz	r3, da14a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   da146:	f7ff fe11 	bl	d9d6c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   da14a:	69e0      	ldr	r0, [r4, #28]
   da14c:	6929      	ldr	r1, [r5, #16]
   da14e:	6803      	ldr	r3, [r0, #0]
   da150:	68db      	ldr	r3, [r3, #12]
   da152:	4798      	blx	r3
        if (h.stream) {
   da154:	6969      	ldr	r1, [r5, #20]
   da156:	b119      	cbz	r1, da160 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   da158:	6a20      	ldr	r0, [r4, #32]
   da15a:	6803      	ldr	r3, [r0, #0]
   da15c:	68db      	ldr	r3, [r3, #12]
   da15e:	4798      	blx	r3
   da160:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   da162:	e7e7      	b.n	da134 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   da164:	6925      	ldr	r5, [r4, #16]
   da166:	6963      	ldr	r3, [r4, #20]
   da168:	2618      	movs	r6, #24
   da16a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   da16e:	42b5      	cmp	r5, r6
   da170:	d004      	beq.n	da17c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   da172:	4628      	mov	r0, r5
   da174:	f7fe fa48 	bl	d8608 <_ZN6StringD1Ev>
   da178:	3518      	adds	r5, #24
   da17a:	e7f8      	b.n	da16e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   da17c:	2300      	movs	r3, #0
   da17e:	6163      	str	r3, [r4, #20]
   da180:	bd70      	pop	{r4, r5, r6, pc}

000da182 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   da182:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da184:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da186:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   da188:	f7ff fdf0 	bl	d9d6c <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   da18c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   da190:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   da194:	f7ff fce9 	bl	d9b6a <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   da198:	4620      	mov	r0, r4
   da19a:	f7ff ffc4 	bl	da126 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   da19e:	4628      	mov	r0, r5
   da1a0:	f7ff fee4 	bl	d9f6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   da1a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   da1a6:	b108      	cbz	r0, da1ac <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   da1a8:	f7fd fe2c 	bl	d7e04 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   da1ac:	6925      	ldr	r5, [r4, #16]
   da1ae:	6963      	ldr	r3, [r4, #20]
   da1b0:	2618      	movs	r6, #24
   da1b2:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   da1b6:	42b5      	cmp	r5, r6
   da1b8:	d004      	beq.n	da1c4 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   da1ba:	4628      	mov	r0, r5
   da1bc:	f7fe fa24 	bl	d8608 <_ZN6StringD1Ev>
   da1c0:	3518      	adds	r5, #24
   da1c2:	e7f8      	b.n	da1b6 <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   da1c4:	6920      	ldr	r0, [r4, #16]
   da1c6:	f7fe f833 	bl	d8230 <free>
   da1ca:	6820      	ldr	r0, [r4, #0]
   da1cc:	f7fe f830 	bl	d8230 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   da1d0:	4620      	mov	r0, r4
   da1d2:	b002      	add	sp, #8
   da1d4:	bd70      	pop	{r4, r5, r6, pc}

000da1d6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da1d6:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   da1d8:	680a      	ldr	r2, [r1, #0]
   da1da:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   da1dc:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da1de:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   da1e0:	684a      	ldr	r2, [r1, #4]
   da1e2:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   da1e4:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da1e6:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   da1e8:	688a      	ldr	r2, [r1, #8]
   da1ea:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da1ec:	608b      	str	r3, [r1, #8]
   da1ee:	4770      	bx	lr

000da1f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   da1f0:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da1f2:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   da1f4:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da1f6:	6003      	str	r3, [r0, #0]
   da1f8:	6043      	str	r3, [r0, #4]
   da1fa:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   da1fc:	f7ff ffeb 	bl	da1d6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   da200:	4620      	mov	r0, r4
   da202:	bd10      	pop	{r4, pc}

000da204 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   da204:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   da206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da208:	4604      	mov	r4, r0
   da20a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   da20c:	d925      	bls.n	da25a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   da20e:	4290      	cmp	r0, r2
   da210:	d224      	bcs.n	da25c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   da212:	1a55      	subs	r5, r2, r1
   da214:	3d14      	subs	r5, #20
   da216:	442c      	add	r4, r5
   da218:	f1a1 0714 	sub.w	r7, r1, #20
   da21c:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da220:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   da222:	f1a5 0308 	sub.w	r3, r5, #8
   da226:	429f      	cmp	r7, r3
   da228:	d037      	beq.n	da29a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   da22a:	b184      	cbz	r4, da24e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   da22c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   da230:	6023      	str	r3, [r4, #0]
   da232:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   da236:	80a3      	strh	r3, [r4, #4]
   da238:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   da23c:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da23e:	60a6      	str	r6, [r4, #8]
   da240:	60e6      	str	r6, [r4, #12]
   da242:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   da244:	4629      	mov	r1, r5
   da246:	f104 0008 	add.w	r0, r4, #8
   da24a:	f7ff ffc4 	bl	da1d6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   da24e:	4628      	mov	r0, r5
   da250:	f7ff fe32 	bl	d9eb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   da254:	3c14      	subs	r4, #20
   da256:	3d14      	subs	r5, #20
   da258:	e7e3      	b.n	da222 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   da25a:	d01e      	beq.n	da29a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   da25c:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da260:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   da262:	f1a5 0308 	sub.w	r3, r5, #8
   da266:	429e      	cmp	r6, r3
   da268:	d017      	beq.n	da29a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   da26a:	b184      	cbz	r4, da28e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   da26c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   da270:	6023      	str	r3, [r4, #0]
   da272:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   da276:	80a3      	strh	r3, [r4, #4]
   da278:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   da27c:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da27e:	60a7      	str	r7, [r4, #8]
   da280:	60e7      	str	r7, [r4, #12]
   da282:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   da284:	4629      	mov	r1, r5
   da286:	f104 0008 	add.w	r0, r4, #8
   da28a:	f7ff ffa4 	bl	da1d6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   da28e:	4628      	mov	r0, r5
   da290:	f7ff fe12 	bl	d9eb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   da294:	3414      	adds	r4, #20
   da296:	3514      	adds	r5, #20
   da298:	e7e3      	b.n	da262 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   da29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da29c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   da29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da29e:	6845      	ldr	r5, [r0, #4]
   da2a0:	6883      	ldr	r3, [r0, #8]
   da2a2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   da2a4:	4604      	mov	r4, r0
   da2a6:	460e      	mov	r6, r1
   da2a8:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da2aa:	db0e      	blt.n	da2ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   da2ac:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   da2ae:	2d00      	cmp	r5, #0
   da2b0:	dd05      	ble.n	da2be <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   da2b2:	00a9      	lsls	r1, r5, #2
   da2b4:	6800      	ldr	r0, [r0, #0]
   da2b6:	f7fd ffc3 	bl	d8240 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   da2ba:	b920      	cbnz	r0, da2c6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   da2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   da2be:	6800      	ldr	r0, [r0, #0]
   da2c0:	f7fd ffb6 	bl	d8230 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   da2c4:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   da2c6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   da2c8:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   da2ca:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   da2cc:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   da2ce:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   da2d2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   da2d6:	1a52      	subs	r2, r2, r1
   da2d8:	1d08      	adds	r0, r1, #4
   da2da:	f002 fd8f 	bl	dcdfc <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   da2de:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   da2e2:	6863      	ldr	r3, [r4, #4]
   da2e4:	3301      	adds	r3, #1
   da2e6:	6063      	str	r3, [r4, #4]
   da2e8:	2001      	movs	r0, #1
    return true;
}
   da2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da2ec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   da2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da2ee:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   da2f0:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   da2f2:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da2f4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da2f6:	f7ff fc38 	bl	d9b6a <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   da2fa:	6823      	ldr	r3, [r4, #0]
   da2fc:	6861      	ldr	r1, [r4, #4]
   da2fe:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   da302:	4283      	cmp	r3, r0
   da304:	461a      	mov	r2, r3
   da306:	d009      	beq.n	da31c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   da308:	6812      	ldr	r2, [r2, #0]
   da30a:	42aa      	cmp	r2, r5
   da30c:	f103 0304 	add.w	r3, r3, #4
   da310:	d1f7      	bne.n	da302 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   da312:	a801      	add	r0, sp, #4
   da314:	f7ff fe2a 	bl	d9f6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   da318:	2500      	movs	r5, #0
   da31a:	e00e      	b.n	da33a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   da31c:	462a      	mov	r2, r5
   da31e:	4620      	mov	r0, r4
   da320:	f7ff ffbc 	bl	da29c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   da324:	4605      	mov	r5, r0
   da326:	2800      	cmp	r0, #0
   da328:	d0f3      	beq.n	da312 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   da32a:	6863      	ldr	r3, [r4, #4]
   da32c:	2b01      	cmp	r3, #1
   da32e:	d101      	bne.n	da334 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   da330:	f7ff fd10 	bl	d9d54 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   da334:	a801      	add	r0, sp, #4
   da336:	f7ff fe19 	bl	d9f6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   da33a:	4628      	mov	r0, r5
   da33c:	b003      	add	sp, #12
   da33e:	bd30      	pop	{r4, r5, pc}

000da340 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   da340:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   da342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da344:	4606      	mov	r6, r0
   da346:	460c      	mov	r4, r1
   da348:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   da34a:	d914      	bls.n	da376 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   da34c:	4290      	cmp	r0, r2
   da34e:	d213      	bcs.n	da378 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   da350:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   da354:	1a6c      	subs	r4, r5, r1
   da356:	f1a1 0710 	sub.w	r7, r1, #16
   da35a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   da35c:	42af      	cmp	r7, r5
   da35e:	d018      	beq.n	da392 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   da360:	b11c      	cbz	r4, da36a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   da362:	4629      	mov	r1, r5
   da364:	4620      	mov	r0, r4
   da366:	f7fe f93f 	bl	d85e8 <_ZN6StringC1EOS_>
                end->~T();
   da36a:	4628      	mov	r0, r5
   da36c:	f7fe f94c 	bl	d8608 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   da370:	3d10      	subs	r5, #16
   da372:	3c10      	subs	r4, #16
   da374:	e7f2      	b.n	da35c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   da376:	d00c      	beq.n	da392 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   da378:	42ac      	cmp	r4, r5
   da37a:	d00a      	beq.n	da392 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   da37c:	b11e      	cbz	r6, da386 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   da37e:	4621      	mov	r1, r4
   da380:	4630      	mov	r0, r6
   da382:	f7fe f931 	bl	d85e8 <_ZN6StringC1EOS_>
                p->~T();
   da386:	4620      	mov	r0, r4
   da388:	f7fe f93e 	bl	d8608 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   da38c:	3410      	adds	r4, #16
   da38e:	3610      	adds	r6, #16
   da390:	e7f2      	b.n	da378 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   da392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da394 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   da394:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   da396:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   da398:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   da39a:	dd0b      	ble.n	da3b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   da39c:	0130      	lsls	r0, r6, #4
   da39e:	f7fd ff3f 	bl	d8220 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   da3a2:	4604      	mov	r4, r0
   da3a4:	b170      	cbz	r0, da3c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   da3a6:	e895 0006 	ldmia.w	r5, {r1, r2}
   da3aa:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   da3ae:	f7ff ffc7 	bl	da340 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   da3b2:	e000      	b.n	da3b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   da3b4:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   da3b6:	6828      	ldr	r0, [r5, #0]
   da3b8:	f7fd ff3a 	bl	d8230 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   da3bc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   da3be:	60ae      	str	r6, [r5, #8]
        return true;
   da3c0:	2001      	movs	r0, #1
   da3c2:	bd70      	pop	{r4, r5, r6, pc}
    }
   da3c4:	bd70      	pop	{r4, r5, r6, pc}

000da3c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   da3c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da3ca:	2300      	movs	r3, #0
   da3cc:	b095      	sub	sp, #84	; 0x54
   da3ce:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   da3d0:	2246      	movs	r2, #70	; 0x46
   da3d2:	6003      	str	r3, [r0, #0]
   da3d4:	6043      	str	r3, [r0, #4]
   da3d6:	6083      	str	r3, [r0, #8]
   da3d8:	60c3      	str	r3, [r0, #12]
   da3da:	6103      	str	r3, [r0, #16]
   da3dc:	6143      	str	r3, [r0, #20]
   da3de:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   da3e0:	9102      	str	r1, [sp, #8]
   da3e2:	f8da 1004 	ldr.w	r1, [sl, #4]
   da3e6:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   da3e8:	4299      	cmp	r1, r3
   da3ea:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da3ec:	9309      	str	r3, [sp, #36]	; 0x24
   da3ee:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   da3f0:	f340 809d 	ble.w	da52e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   da3f4:	a808      	add	r0, sp, #32
   da3f6:	f7ff ffcd 	bl	da394 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   da3fa:	2800      	cmp	r0, #0
   da3fc:	f040 8097 	bne.w	da52e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   da400:	e08e      	b.n	da520 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   da402:	4621      	mov	r1, r4
   da404:	a80b      	add	r0, sp, #44	; 0x2c
   da406:	f7fe f8ef 	bl	d85e8 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   da40a:	a90b      	add	r1, sp, #44	; 0x2c
   da40c:	a80f      	add	r0, sp, #60	; 0x3c
   da40e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   da410:	f7fe f8ea 	bl	d85e8 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da414:	9909      	ldr	r1, [sp, #36]	; 0x24
   da416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da418:	4299      	cmp	r1, r3
   da41a:	f2c0 80ce 	blt.w	da5ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   da41e:	3101      	adds	r1, #1
   da420:	a808      	add	r0, sp, #32
   da422:	f7ff ffb7 	bl	da394 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   da426:	2800      	cmp	r0, #0
   da428:	f040 80c7 	bne.w	da5ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   da42c:	a80f      	add	r0, sp, #60	; 0x3c
   da42e:	f7fe f8eb 	bl	d8608 <_ZN6StringD1Ev>
   da432:	a80b      	add	r0, sp, #44	; 0x2c
   da434:	f7fe f8e8 	bl	d8608 <_ZN6StringD1Ev>
   da438:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   da43a:	42a7      	cmp	r7, r4
   da43c:	d1e1      	bne.n	da402 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da43e:	2600      	movs	r6, #0
   da440:	960b      	str	r6, [sp, #44]	; 0x2c
   da442:	960c      	str	r6, [sp, #48]	; 0x30
   da444:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   da446:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   da448:	9b09      	ldr	r3, [sp, #36]	; 0x24
   da44a:	429e      	cmp	r6, r3
   da44c:	f280 80a8 	bge.w	da5a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   da450:	0133      	lsls	r3, r6, #4
   da452:	9a08      	ldr	r2, [sp, #32]
   da454:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   da456:	9306      	str	r3, [sp, #24]
        if (!category) {
   da458:	2b00      	cmp	r3, #0
   da45a:	f000 809f 	beq.w	da59c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   da45e:	2314      	movs	r3, #20
   da460:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   da462:	f8cd 901c 	str.w	r9, [sp, #28]
   da466:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   da468:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   da46a:	a907      	add	r1, sp, #28
   da46c:	a806      	add	r0, sp, #24
   da46e:	f7ff fb2b 	bl	d9ac8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   da472:	4607      	mov	r7, r0
   da474:	2800      	cmp	r0, #0
   da476:	f000 8091 	beq.w	da59c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   da47a:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   da47c:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   da47e:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   da482:	9a07      	ldr	r2, [sp, #28]
   da484:	4620      	mov	r0, r4
   da486:	f7ff fb8d 	bl	d9ba4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da48a:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   da48e:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da490:	f1b8 0f00 	cmp.w	r8, #0
   da494:	d153      	bne.n	da53e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   da496:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   da49a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   da49e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da4a2:	970f      	str	r7, [sp, #60]	; 0x3c
   da4a4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   da4a8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   da4ac:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   da4b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da4b4:	6867      	ldr	r7, [r4, #4]
   da4b6:	68a3      	ldr	r3, [r4, #8]
   da4b8:	429f      	cmp	r7, r3
   da4ba:	da4f      	bge.n	da55c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   da4bc:	9b00      	ldr	r3, [sp, #0]
   da4be:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   da4c2:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   da4c4:	2214      	movs	r2, #20
   da4c6:	4353      	muls	r3, r2
   da4c8:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   da4cc:	fb02 b201 	mla	r2, r2, r1, fp
   da4d0:	f107 0014 	add.w	r0, r7, #20
   da4d4:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   da4d6:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   da4d8:	f7ff fe94 	bl	da204 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   da4dc:	b1a7      	cbz	r7, da508 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   da4de:	9b03      	ldr	r3, [sp, #12]
   da4e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   da4e2:	f84b 2003 	str.w	r2, [fp, r3]
   da4e6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   da4ea:	80bb      	strh	r3, [r7, #4]
   da4ec:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   da4f0:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   da4f2:	f8c7 9008 	str.w	r9, [r7, #8]
   da4f6:	f8c7 900c 	str.w	r9, [r7, #12]
   da4fa:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   da4fe:	a911      	add	r1, sp, #68	; 0x44
   da500:	f107 0008 	add.w	r0, r7, #8
   da504:	f7ff fe67 	bl	da1d6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   da508:	6863      	ldr	r3, [r4, #4]
   da50a:	3301      	adds	r3, #1
   da50c:	6063      	str	r3, [r4, #4]
   da50e:	a811      	add	r0, sp, #68	; 0x44
   da510:	f7ff fcd2 	bl	d9eb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da514:	f1b8 0f00 	cmp.w	r8, #0
   da518:	d011      	beq.n	da53e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   da51a:	a80b      	add	r0, sp, #44	; 0x2c
   da51c:	f7ff fccc 	bl	d9eb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   da520:	a808      	add	r0, sp, #32
   da522:	f7ff fcdd 	bl	d9ee0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   da526:	4628      	mov	r0, r5
   da528:	b015      	add	sp, #84	; 0x54
   da52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da52e:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   da532:	f8da 3004 	ldr.w	r3, [sl, #4]
   da536:	2714      	movs	r7, #20
   da538:	fb07 4703 	mla	r7, r7, r3, r4
   da53c:	e77d      	b.n	da43a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   da53e:	6823      	ldr	r3, [r4, #0]
   da540:	9a00      	ldr	r2, [sp, #0]
   da542:	2414      	movs	r4, #20
   da544:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   da548:	9b06      	ldr	r3, [sp, #24]
   da54a:	781b      	ldrb	r3, [r3, #0]
   da54c:	bb23      	cbnz	r3, da598 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   da54e:	f8da 3000 	ldr.w	r3, [sl]
   da552:	9a01      	ldr	r2, [sp, #4]
   da554:	4413      	add	r3, r2
   da556:	7c1b      	ldrb	r3, [r3, #16]
   da558:	80e3      	strh	r3, [r4, #6]
   da55a:	e01d      	b.n	da598 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da55c:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   da55e:	2f00      	cmp	r7, #0
   da560:	dd0f      	ble.n	da582 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   da562:	2314      	movs	r3, #20
   da564:	fb03 f007 	mul.w	r0, r3, r7
   da568:	9303      	str	r3, [sp, #12]
   da56a:	f7fd fe59 	bl	d8220 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   da56e:	4683      	mov	fp, r0
   da570:	b178      	cbz	r0, da592 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   da572:	e894 0006 	ldmia.w	r4, {r1, r2}
   da576:	9b03      	ldr	r3, [sp, #12]
   da578:	fb03 1202 	mla	r2, r3, r2, r1
   da57c:	f7ff fe42 	bl	da204 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   da580:	e000      	b.n	da584 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   da582:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   da584:	6820      	ldr	r0, [r4, #0]
   da586:	f7fd fe53 	bl	d8230 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   da58a:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   da58e:	60a7      	str	r7, [r4, #8]
   da590:	e794      	b.n	da4bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da592:	f04f 0801 	mov.w	r8, #1
   da596:	e7ba      	b.n	da50e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   da598:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   da59a:	e766      	b.n	da46a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   da59c:	3601      	adds	r6, #1
   da59e:	e753      	b.n	da448 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   da5a0:	a908      	add	r1, sp, #32
   da5a2:	4628      	mov	r0, r5
   da5a4:	f7ff fe17 	bl	da1d6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   da5a8:	a90b      	add	r1, sp, #44	; 0x2c
   da5aa:	f105 000c 	add.w	r0, r5, #12
   da5ae:	f7ff fe12 	bl	da1d6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   da5b2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   da5b6:	762b      	strb	r3, [r5, #24]
   da5b8:	e7af      	b.n	da51a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   da5ba:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   da5bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   da5be:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   da5c2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   da5c6:	4631      	mov	r1, r6
   da5c8:	f106 0010 	add.w	r0, r6, #16
   da5cc:	f7ff feb8 	bl	da340 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   da5d0:	b11e      	cbz	r6, da5da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   da5d2:	a90f      	add	r1, sp, #60	; 0x3c
   da5d4:	4630      	mov	r0, r6
   da5d6:	f7fe f807 	bl	d85e8 <_ZN6StringC1EOS_>
    ++size_;
   da5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   da5dc:	3301      	adds	r3, #1
   da5de:	9309      	str	r3, [sp, #36]	; 0x24
   da5e0:	e724      	b.n	da42c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000da5e4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   da5e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   da5e6:	4604      	mov	r4, r0
   da5e8:	4b09      	ldr	r3, [pc, #36]	; (da610 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   da5ea:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   da5ee:	4605      	mov	r5, r0
   da5f0:	460e      	mov	r6, r1
        filter_(level, filters) {
   da5f2:	a801      	add	r0, sp, #4
   da5f4:	4611      	mov	r1, r2
   da5f6:	f7fb f825 	bl	d5644 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da5fa:	aa01      	add	r2, sp, #4
   da5fc:	4631      	mov	r1, r6
   da5fe:	4620      	mov	r0, r4
   da600:	f7ff fee1 	bl	da3c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da604:	a801      	add	r0, sp, #4
   da606:	f7fa f8fd 	bl	d4804 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   da60a:	4628      	mov	r0, r5
   da60c:	b004      	add	sp, #16
   da60e:	bd70      	pop	{r4, r5, r6, pc}
   da610:	000df328 	.word	0x000df328

000da614 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   da614:	b5f0      	push	{r4, r5, r6, r7, lr}
   da616:	460f      	mov	r7, r1
   da618:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da61a:	492b      	ldr	r1, [pc, #172]	; (da6c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   da61c:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da61e:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   da620:	4616      	mov	r6, r2
   da622:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da624:	f002 fc5d 	bl	dcee2 <strcmp>
   da628:	bb28      	cbnz	r0, da676 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   da62a:	2c00      	cmp	r4, #0
   da62c:	d049      	beq.n	da6c2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   da62e:	4629      	mov	r1, r5
   da630:	a801      	add	r0, sp, #4
   da632:	f7ff fddd 	bl	da1f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da636:	4925      	ldr	r1, [pc, #148]	; (da6cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   da638:	2024      	movs	r0, #36	; 0x24
   da63a:	f001 fc65 	bl	dbf08 <_ZnwjRKSt9nothrow_t>
   da63e:	4605      	mov	r5, r0
   da640:	b1b8      	cbz	r0, da672 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   da642:	a901      	add	r1, sp, #4
   da644:	a804      	add	r0, sp, #16
   da646:	f7ff fdd3 	bl	da1f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   da64a:	a904      	add	r1, sp, #16
   da64c:	a807      	add	r0, sp, #28
   da64e:	f7fa fff9 	bl	d5644 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da652:	aa07      	add	r2, sp, #28
   da654:	4631      	mov	r1, r6
   da656:	4628      	mov	r0, r5
   da658:	f7ff ffc4 	bl	da5e4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da65c:	a807      	add	r0, sp, #28
   da65e:	f7fa f8d1 	bl	d4804 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da662:	4b1b      	ldr	r3, [pc, #108]	; (da6d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   da664:	602b      	str	r3, [r5, #0]
   da666:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   da668:	a804      	add	r0, sp, #16
   da66a:	f7fa f8cb 	bl	d4804 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da66e:	4b19      	ldr	r3, [pc, #100]	; (da6d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   da670:	602b      	str	r3, [r5, #0]
   da672:	a801      	add	r0, sp, #4
   da674:	e01f      	b.n	da6b6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   da676:	4918      	ldr	r1, [pc, #96]	; (da6d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   da678:	4638      	mov	r0, r7
   da67a:	f002 fc32 	bl	dcee2 <strcmp>
   da67e:	b9f0      	cbnz	r0, da6be <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   da680:	b1fc      	cbz	r4, da6c2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   da682:	4629      	mov	r1, r5
   da684:	a804      	add	r0, sp, #16
   da686:	f7ff fdb3 	bl	da1f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da68a:	4910      	ldr	r1, [pc, #64]	; (da6cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   da68c:	2024      	movs	r0, #36	; 0x24
   da68e:	f001 fc3b 	bl	dbf08 <_ZnwjRKSt9nothrow_t>
   da692:	4605      	mov	r5, r0
   da694:	b170      	cbz	r0, da6b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   da696:	a904      	add	r1, sp, #16
   da698:	a807      	add	r0, sp, #28
   da69a:	f7fa ffd3 	bl	d5644 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da69e:	aa07      	add	r2, sp, #28
   da6a0:	4631      	mov	r1, r6
   da6a2:	4628      	mov	r0, r5
   da6a4:	f7ff ff9e 	bl	da5e4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da6a8:	a807      	add	r0, sp, #28
   da6aa:	f7fa f8ab 	bl	d4804 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da6ae:	4b08      	ldr	r3, [pc, #32]	; (da6d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   da6b0:	602b      	str	r3, [r5, #0]
   da6b2:	622c      	str	r4, [r5, #32]
   da6b4:	a804      	add	r0, sp, #16
   da6b6:	f7fa f8a5 	bl	d4804 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da6ba:	4628      	mov	r0, r5
   da6bc:	e002      	b.n	da6c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   da6be:	2000      	movs	r0, #0
   da6c0:	e000      	b.n	da6c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   da6c2:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   da6c4:	b00b      	add	sp, #44	; 0x2c
   da6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da6c8:	000dfae6 	.word	0x000dfae6
   da6cc:	000dfd4e 	.word	0x000dfd4e
   da6d0:	000dfb6c 	.word	0x000dfb6c
   da6d4:	000dfa78 	.word	0x000dfa78
   da6d8:	000dfaea 	.word	0x000dfaea

000da6dc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   da6dc:	4b01      	ldr	r3, [pc, #4]	; (da6e4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   da6de:	4a02      	ldr	r2, [pc, #8]	; (da6e8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   da6e0:	601a      	str	r2, [r3, #0]
   da6e2:	4770      	bx	lr
   da6e4:	2003e374 	.word	0x2003e374
   da6e8:	000dfafb 	.word	0x000dfafb

000da6ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da6f0:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   da6f2:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da6f6:	4604      	mov	r4, r0
   da6f8:	460e      	mov	r6, r1
   da6fa:	4617      	mov	r7, r2
   da6fc:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   da6fe:	f000 fe8d 	bl	db41c <_Z16_fetch_usbserialv>
   da702:	4581      	cmp	r9, r0
   da704:	d105      	bne.n	da712 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   da706:	485a      	ldr	r0, [pc, #360]	; (da870 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   da708:	f001 f911 	bl	db92e <_ZN5spark12NetworkClass9listeningEv>
   da70c:	2800      	cmp	r0, #0
   da70e:	f040 80ac 	bne.w	da86a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   da712:	792b      	ldrb	r3, [r5, #4]
   da714:	071b      	lsls	r3, r3, #28
   da716:	d505      	bpl.n	da724 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   da718:	696b      	ldr	r3, [r5, #20]
   da71a:	4a56      	ldr	r2, [pc, #344]	; (da874 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   da71c:	6a20      	ldr	r0, [r4, #32]
   da71e:	2100      	movs	r1, #0
   da720:	f7ff f93d 	bl	d999e <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   da724:	f1b8 0f00 	cmp.w	r8, #0
   da728:	d00d      	beq.n	da746 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   da72a:	215b      	movs	r1, #91	; 0x5b
   da72c:	4620      	mov	r0, r4
   da72e:	f7ff fa2d 	bl	d9b8c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   da732:	4641      	mov	r1, r8
   da734:	4620      	mov	r0, r4
   da736:	f7ff fa1b 	bl	d9b70 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   da73a:	6823      	ldr	r3, [r4, #0]
   da73c:	494e      	ldr	r1, [pc, #312]	; (da878 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   da73e:	68db      	ldr	r3, [r3, #12]
   da740:	2202      	movs	r2, #2
   da742:	4620      	mov	r0, r4
   da744:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   da746:	792b      	ldrb	r3, [r5, #4]
   da748:	07d9      	lsls	r1, r3, #31
   da74a:	d525      	bpl.n	da798 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   da74c:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   da750:	212f      	movs	r1, #47	; 0x2f
   da752:	4640      	mov	r0, r8
   da754:	f002 fc31 	bl	dcfba <strrchr>
    if (s1) {
   da758:	b108      	cbz	r0, da75e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   da75a:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   da75e:	4641      	mov	r1, r8
   da760:	4620      	mov	r0, r4
   da762:	f7ff fa05 	bl	d9b70 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   da766:	792b      	ldrb	r3, [r5, #4]
   da768:	079a      	lsls	r2, r3, #30
   da76a:	d509      	bpl.n	da780 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   da76c:	213a      	movs	r1, #58	; 0x3a
   da76e:	4620      	mov	r0, r4
   da770:	f7ff fa0c 	bl	d9b8c <_ZN5spark16StreamLogHandler5writeEc>
   da774:	68eb      	ldr	r3, [r5, #12]
   da776:	4a41      	ldr	r2, [pc, #260]	; (da87c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   da778:	6a20      	ldr	r0, [r4, #32]
   da77a:	2100      	movs	r1, #0
   da77c:	f7ff f90f 	bl	d999e <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   da780:	792b      	ldrb	r3, [r5, #4]
   da782:	f013 0f04 	tst.w	r3, #4
   da786:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   da788:	bf18      	it	ne
   da78a:	493d      	ldrne	r1, [pc, #244]	; (da880 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   da78c:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   da78e:	bf08      	it	eq
   da790:	493c      	ldreq	r1, [pc, #240]	; (da884 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   da792:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   da794:	4620      	mov	r0, r4
   da796:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   da798:	792b      	ldrb	r3, [r5, #4]
   da79a:	075b      	lsls	r3, r3, #29
   da79c:	d518      	bpl.n	da7d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da79e:	6929      	ldr	r1, [r5, #16]
   da7a0:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   da7a2:	4613      	mov	r3, r2
   da7a4:	f813 0b01 	ldrb.w	r0, [r3], #1
   da7a8:	b138      	cbz	r0, da7ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   da7aa:	2820      	cmp	r0, #32
   da7ac:	d101      	bne.n	da7b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   da7ae:	4619      	mov	r1, r3
   da7b0:	e001      	b.n	da7b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   da7b2:	2828      	cmp	r0, #40	; 0x28
   da7b4:	d001      	beq.n	da7ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da7b6:	461a      	mov	r2, r3
   da7b8:	e7f3      	b.n	da7a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   da7ba:	6823      	ldr	r3, [r4, #0]
   da7bc:	1a52      	subs	r2, r2, r1
   da7be:	68db      	ldr	r3, [r3, #12]
   da7c0:	4620      	mov	r0, r4
   da7c2:	4798      	blx	r3
        write("(): ", 4);
   da7c4:	6823      	ldr	r3, [r4, #0]
   da7c6:	4930      	ldr	r1, [pc, #192]	; (da888 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   da7c8:	68db      	ldr	r3, [r3, #12]
   da7ca:	2204      	movs	r2, #4
   da7cc:	4620      	mov	r0, r4
   da7ce:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   da7d0:	2100      	movs	r1, #0
   da7d2:	4638      	mov	r0, r7
   da7d4:	f7fd fc3e 	bl	d8054 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   da7d8:	4601      	mov	r1, r0
   da7da:	4620      	mov	r0, r4
   da7dc:	f7ff f9c8 	bl	d9b70 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   da7e0:	6823      	ldr	r3, [r4, #0]
   da7e2:	4928      	ldr	r1, [pc, #160]	; (da884 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   da7e4:	68db      	ldr	r3, [r3, #12]
   da7e6:	2202      	movs	r2, #2
   da7e8:	4620      	mov	r0, r4
   da7ea:	4798      	blx	r3
    // Message
    if (msg) {
   da7ec:	b11e      	cbz	r6, da7f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   da7ee:	4631      	mov	r1, r6
   da7f0:	4620      	mov	r0, r4
   da7f2:	f7ff f9bd 	bl	d9b70 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   da7f6:	792b      	ldrb	r3, [r5, #4]
   da7f8:	f013 0f30 	tst.w	r3, #48	; 0x30
   da7fc:	d02d      	beq.n	da85a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   da7fe:	6823      	ldr	r3, [r4, #0]
   da800:	4922      	ldr	r1, [pc, #136]	; (da88c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   da802:	68db      	ldr	r3, [r3, #12]
   da804:	4620      	mov	r0, r4
   da806:	2202      	movs	r2, #2
   da808:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   da80a:	792b      	ldrb	r3, [r5, #4]
   da80c:	06d8      	lsls	r0, r3, #27
   da80e:	d50b      	bpl.n	da828 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   da810:	6823      	ldr	r3, [r4, #0]
   da812:	491f      	ldr	r1, [pc, #124]	; (da890 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   da814:	68db      	ldr	r3, [r3, #12]
   da816:	2207      	movs	r2, #7
   da818:	4620      	mov	r0, r4
   da81a:	4798      	blx	r3
   da81c:	69ab      	ldr	r3, [r5, #24]
   da81e:	4a1d      	ldr	r2, [pc, #116]	; (da894 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   da820:	6a20      	ldr	r0, [r4, #32]
   da822:	2100      	movs	r1, #0
   da824:	f7ff f8bb 	bl	d999e <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   da828:	792b      	ldrb	r3, [r5, #4]
   da82a:	0699      	lsls	r1, r3, #26
   da82c:	d511      	bpl.n	da852 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   da82e:	06da      	lsls	r2, r3, #27
   da830:	d505      	bpl.n	da83e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   da832:	6823      	ldr	r3, [r4, #0]
   da834:	4912      	ldr	r1, [pc, #72]	; (da880 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   da836:	68db      	ldr	r3, [r3, #12]
   da838:	2202      	movs	r2, #2
   da83a:	4620      	mov	r0, r4
   da83c:	4798      	blx	r3
            }
            write("details = ", 10);
   da83e:	6823      	ldr	r3, [r4, #0]
   da840:	4915      	ldr	r1, [pc, #84]	; (da898 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   da842:	68db      	ldr	r3, [r3, #12]
   da844:	4620      	mov	r0, r4
   da846:	220a      	movs	r2, #10
   da848:	4798      	blx	r3
            write(attr.details);
   da84a:	69e9      	ldr	r1, [r5, #28]
   da84c:	4620      	mov	r0, r4
   da84e:	f7ff f98f 	bl	d9b70 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   da852:	215d      	movs	r1, #93	; 0x5d
   da854:	4620      	mov	r0, r4
   da856:	f7ff f999 	bl	d9b8c <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   da85a:	6823      	ldr	r3, [r4, #0]
   da85c:	490f      	ldr	r1, [pc, #60]	; (da89c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   da85e:	68db      	ldr	r3, [r3, #12]
   da860:	4620      	mov	r0, r4
   da862:	2202      	movs	r2, #2
}
   da864:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   da868:	4718      	bx	r3
   da86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da86e:	bf00      	nop
   da870:	2003e700 	.word	0x2003e700
   da874:	000dfaff 	.word	0x000dfaff
   da878:	000dfb06 	.word	0x000dfb06
   da87c:	000df3d9 	.word	0x000df3d9
   da880:	000dfb09 	.word	0x000dfb09
   da884:	000dfb0e 	.word	0x000dfb0e
   da888:	000dfb0c 	.word	0x000dfb0c
   da88c:	000dfb11 	.word	0x000dfb11
   da890:	000dfb14 	.word	0x000dfb14
   da894:	000dfb1c 	.word	0x000dfb1c
   da898:	000dfb1f 	.word	0x000dfb1f
   da89c:	000df7fa 	.word	0x000df7fa

000da8a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da8a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da8a4:	b085      	sub	sp, #20
   da8a6:	f8d0 8020 	ldr.w	r8, [r0, #32]
   da8aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   da8ac:	4606      	mov	r6, r0
   da8ae:	460f      	mov	r7, r1
   da8b0:	4691      	mov	r9, r2
   da8b2:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   da8b4:	f000 fdb2 	bl	db41c <_Z16_fetch_usbserialv>
   da8b8:	4580      	cmp	r8, r0
   da8ba:	d105      	bne.n	da8c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   da8bc:	484a      	ldr	r0, [pc, #296]	; (da9e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   da8be:	f001 f836 	bl	db92e <_ZN5spark12NetworkClass9listeningEv>
   da8c2:	2800      	cmp	r0, #0
   da8c4:	f040 808c 	bne.w	da9e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   da8c8:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   da8ca:	4a48      	ldr	r2, [pc, #288]	; (da9ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   da8cc:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   da8ce:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   da8d2:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   da8d4:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   da8d6:	f88d 8008 	strb.w	r8, [sp, #8]
   da8da:	f001 f96c 	bl	dbbb6 <_ZN5spark10JSONWriter11beginObjectEv>
   da8de:	4641      	mov	r1, r8
   da8e0:	4648      	mov	r0, r9
   da8e2:	f7fd fbb7 	bl	d8054 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   da8e6:	4942      	ldr	r1, [pc, #264]	; (da9f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   da8e8:	4680      	mov	r8, r0
   da8ea:	2201      	movs	r2, #1
   da8ec:	a801      	add	r0, sp, #4
   da8ee:	f001 f9e7 	bl	dbcc0 <_ZN5spark10JSONWriter4nameEPKcj>
   da8f2:	4641      	mov	r1, r8
   da8f4:	f7ff f92c 	bl	d9b50 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   da8f8:	b13f      	cbz	r7, da90a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   da8fa:	493e      	ldr	r1, [pc, #248]	; (da9f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   da8fc:	2201      	movs	r2, #1
   da8fe:	a801      	add	r0, sp, #4
   da900:	f001 f9de 	bl	dbcc0 <_ZN5spark10JSONWriter4nameEPKcj>
   da904:	4639      	mov	r1, r7
   da906:	f7ff f923 	bl	d9b50 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   da90a:	b13d      	cbz	r5, da91c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   da90c:	493a      	ldr	r1, [pc, #232]	; (da9f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   da90e:	2201      	movs	r2, #1
   da910:	a801      	add	r0, sp, #4
   da912:	f001 f9d5 	bl	dbcc0 <_ZN5spark10JSONWriter4nameEPKcj>
   da916:	4629      	mov	r1, r5
   da918:	f7ff f91a 	bl	d9b50 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   da91c:	7923      	ldrb	r3, [r4, #4]
   da91e:	07df      	lsls	r7, r3, #31
   da920:	d50e      	bpl.n	da940 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   da922:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   da924:	212f      	movs	r1, #47	; 0x2f
   da926:	4628      	mov	r0, r5
   da928:	f002 fb47 	bl	dcfba <strrchr>
    if (s1) {
   da92c:	b100      	cbz	r0, da930 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   da92e:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   da930:	4932      	ldr	r1, [pc, #200]	; (da9fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   da932:	2201      	movs	r2, #1
   da934:	a801      	add	r0, sp, #4
   da936:	f001 f9c3 	bl	dbcc0 <_ZN5spark10JSONWriter4nameEPKcj>
   da93a:	4629      	mov	r1, r5
   da93c:	f7ff f908 	bl	d9b50 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   da940:	7923      	ldrb	r3, [r4, #4]
   da942:	079d      	lsls	r5, r3, #30
   da944:	d507      	bpl.n	da956 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   da946:	492e      	ldr	r1, [pc, #184]	; (daa00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   da948:	2202      	movs	r2, #2
   da94a:	a801      	add	r0, sp, #4
   da94c:	f001 f9b8 	bl	dbcc0 <_ZN5spark10JSONWriter4nameEPKcj>
   da950:	68e1      	ldr	r1, [r4, #12]
   da952:	f001 f93d 	bl	dbbd0 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   da956:	7923      	ldrb	r3, [r4, #4]
   da958:	0758      	lsls	r0, r3, #29
   da95a:	d516      	bpl.n	da98a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da95c:	6925      	ldr	r5, [r4, #16]
   da95e:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   da960:	463b      	mov	r3, r7
   da962:	f813 2b01 	ldrb.w	r2, [r3], #1
   da966:	b13a      	cbz	r2, da978 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   da968:	2a20      	cmp	r2, #32
   da96a:	d101      	bne.n	da970 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   da96c:	461d      	mov	r5, r3
   da96e:	e001      	b.n	da974 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   da970:	2a28      	cmp	r2, #40	; 0x28
   da972:	d001      	beq.n	da978 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da974:	461f      	mov	r7, r3
   da976:	e7f3      	b.n	da960 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   da978:	2202      	movs	r2, #2
   da97a:	4922      	ldr	r1, [pc, #136]	; (daa04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   da97c:	a801      	add	r0, sp, #4
   da97e:	f001 f99f 	bl	dbcc0 <_ZN5spark10JSONWriter4nameEPKcj>
   da982:	1b7a      	subs	r2, r7, r5
   da984:	4629      	mov	r1, r5
   da986:	f001 f9aa 	bl	dbcde <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   da98a:	7923      	ldrb	r3, [r4, #4]
   da98c:	0719      	lsls	r1, r3, #28
   da98e:	d507      	bpl.n	da9a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   da990:	491d      	ldr	r1, [pc, #116]	; (daa08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   da992:	2201      	movs	r2, #1
   da994:	a801      	add	r0, sp, #4
   da996:	f001 f993 	bl	dbcc0 <_ZN5spark10JSONWriter4nameEPKcj>
   da99a:	6961      	ldr	r1, [r4, #20]
   da99c:	f001 f92a 	bl	dbbf4 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   da9a0:	7923      	ldrb	r3, [r4, #4]
   da9a2:	06da      	lsls	r2, r3, #27
   da9a4:	d508      	bpl.n	da9b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   da9a6:	2204      	movs	r2, #4
   da9a8:	4918      	ldr	r1, [pc, #96]	; (daa0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   da9aa:	eb0d 0002 	add.w	r0, sp, r2
   da9ae:	f001 f987 	bl	dbcc0 <_ZN5spark10JSONWriter4nameEPKcj>
   da9b2:	69a1      	ldr	r1, [r4, #24]
   da9b4:	f001 f90c 	bl	dbbd0 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   da9b8:	7923      	ldrb	r3, [r4, #4]
   da9ba:	069b      	lsls	r3, r3, #26
   da9bc:	d507      	bpl.n	da9ce <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   da9be:	4914      	ldr	r1, [pc, #80]	; (daa10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   da9c0:	2206      	movs	r2, #6
   da9c2:	a801      	add	r0, sp, #4
   da9c4:	f001 f97c 	bl	dbcc0 <_ZN5spark10JSONWriter4nameEPKcj>
   da9c8:	69e1      	ldr	r1, [r4, #28]
   da9ca:	f7ff f8c1 	bl	d9b50 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   da9ce:	a801      	add	r0, sp, #4
   da9d0:	f001 f8db 	bl	dbb8a <_ZN5spark10JSONWriter9endObjectEv>
   da9d4:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   da9d6:	490f      	ldr	r1, [pc, #60]	; (daa14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   da9d8:	6803      	ldr	r3, [r0, #0]
   da9da:	2202      	movs	r2, #2
   da9dc:	68db      	ldr	r3, [r3, #12]
   da9de:	4798      	blx	r3
}
   da9e0:	b005      	add	sp, #20
   da9e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da9e6:	bf00      	nop
   da9e8:	2003e700 	.word	0x2003e700
   da9ec:	000dfa60 	.word	0x000dfa60
   da9f0:	000dfa92 	.word	0x000dfa92
   da9f4:	000dfaa5 	.word	0x000dfaa5
   da9f8:	000dfb5b 	.word	0x000dfb5b
   da9fc:	000df63f 	.word	0x000df63f
   daa00:	000dfb2a 	.word	0x000dfb2a
   daa04:	000dfb2d 	.word	0x000dfb2d
   daa08:	000df3fb 	.word	0x000df3fb
   daa0c:	000dfb30 	.word	0x000dfb30
   daa10:	000dfb35 	.word	0x000dfb35
   daa14:	000df7fa 	.word	0x000df7fa

000daa18 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   daa18:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   daa1a:	4b14      	ldr	r3, [pc, #80]	; (daa6c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   daa1c:	4f14      	ldr	r7, [pc, #80]	; (daa70 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   daa1e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   daa20:	4b14      	ldr	r3, [pc, #80]	; (daa74 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   daa22:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   daa24:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   daa26:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   daa28:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   daa2a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   daa2c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   daa2e:	d01b      	beq.n	daa68 <_ZL22Refresh_UnixTime_Cachel+0x50>
   daa30:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   daa32:	ad01      	add	r5, sp, #4
   daa34:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   daa38:	f002 f8ca 	bl	dcbd0 <localtime>
	calendar_time->tm_year += 1900;
   daa3c:	6943      	ldr	r3, [r0, #20]
   daa3e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   daa42:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   daa44:	4604      	mov	r4, r0
   daa46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   daa48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   daa4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   daa4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   daa4e:	f8d4 e000 	ldr.w	lr, [r4]
   daa52:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   daa56:	ad01      	add	r5, sp, #4
   daa58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   daa5a:	4c07      	ldr	r4, [pc, #28]	; (daa78 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   daa5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   daa5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   daa60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   daa62:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   daa64:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   daa68:	b00b      	add	sp, #44	; 0x2c
   daa6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   daa6c:	2003e3a8 	.word	0x2003e3a8
   daa70:	2003e3a4 	.word	0x2003e3a4
   daa74:	2003e3a0 	.word	0x2003e3a0
   daa78:	2003e378 	.word	0x2003e378

000daa7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   daa7c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   daa7e:	2000      	movs	r0, #0
   daa80:	f7fd fbbe 	bl	d8200 <spark_sync_time_pending>
   daa84:	b128      	cbz	r0, daa92 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   daa86:	f7fd fba3 	bl	d81d0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   daa8a:	f080 0001 	eor.w	r0, r0, #1
   daa8e:	b2c0      	uxtb	r0, r0
   daa90:	bd08      	pop	{r3, pc}
   daa92:	2001      	movs	r0, #1
    }
   daa94:	bd08      	pop	{r3, pc}
	...

000daa98 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   daa98:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   daa9a:	f7ff ffbd 	bl	daa18 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   daa9e:	4b02      	ldr	r3, [pc, #8]	; (daaa8 <_ZN9TimeClass5monthEl+0x10>)
   daaa0:	6918      	ldr	r0, [r3, #16]
}
   daaa2:	3001      	adds	r0, #1
   daaa4:	bd08      	pop	{r3, pc}
   daaa6:	bf00      	nop
   daaa8:	2003e378 	.word	0x2003e378

000daaac <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   daaac:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   daaae:	2000      	movs	r0, #0
   daab0:	f7fd f8d6 	bl	d7c60 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   daab4:	4604      	mov	r4, r0
   daab6:	b968      	cbnz	r0, daad4 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   daab8:	f7fd fae6 	bl	d8088 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   daabc:	2801      	cmp	r0, #1
   daabe:	d10b      	bne.n	daad8 <_ZN9TimeClass7isValidEv+0x2c>
   daac0:	4620      	mov	r0, r4
   daac2:	f7fd fb09 	bl	d80d8 <system_thread_get_state>
   daac6:	b938      	cbnz	r0, daad8 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   daac8:	f7ff ffd8 	bl	daa7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   daacc:	b930      	cbnz	r0, daadc <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   daace:	f7fd fb77 	bl	d81c0 <spark_process>
   daad2:	e7f9      	b.n	daac8 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   daad4:	2001      	movs	r0, #1
   daad6:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   daad8:	2000      	movs	r0, #0
   daada:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   daadc:	f7ff ffce 	bl	daa7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   daae0:	2000      	movs	r0, #0
   daae2:	f7fd f8bd 	bl	d7c60 <HAL_RTC_Time_Is_Valid>
   daae6:	3000      	adds	r0, #0
   daae8:	bf18      	it	ne
   daaea:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   daaec:	bd10      	pop	{r4, pc}

000daaee <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   daaee:	b508      	push	{r3, lr}
    (void)isValid();
   daaf0:	f7ff ffdc 	bl	daaac <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   daaf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   daaf8:	f7fd b8aa 	b.w	d7c50 <HAL_RTC_Get_UnixTime>

000daafc <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   daafc:	b508      	push	{r3, lr}
	return hour(now());
   daafe:	f7ff fff6 	bl	daaee <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dab02:	f7ff ff89 	bl	daa18 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   dab06:	4b01      	ldr	r3, [pc, #4]	; (dab0c <_ZN9TimeClass4hourEv+0x10>)
   dab08:	6898      	ldr	r0, [r3, #8]
   dab0a:	bd08      	pop	{r3, pc}
   dab0c:	2003e378 	.word	0x2003e378

000dab10 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   dab10:	b508      	push	{r3, lr}
	return minute(now());
   dab12:	f7ff ffec 	bl	daaee <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dab16:	f7ff ff7f 	bl	daa18 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   dab1a:	4b01      	ldr	r3, [pc, #4]	; (dab20 <_ZN9TimeClass6minuteEv+0x10>)
   dab1c:	6858      	ldr	r0, [r3, #4]
   dab1e:	bd08      	pop	{r3, pc}
   dab20:	2003e378 	.word	0x2003e378

000dab24 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   dab24:	b508      	push	{r3, lr}
	return second(now());
   dab26:	f7ff ffe2 	bl	daaee <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dab2a:	f7ff ff75 	bl	daa18 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   dab2e:	4b01      	ldr	r3, [pc, #4]	; (dab34 <_ZN9TimeClass6secondEv+0x10>)
   dab30:	6818      	ldr	r0, [r3, #0]
   dab32:	bd08      	pop	{r3, pc}
   dab34:	2003e378 	.word	0x2003e378

000dab38 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   dab38:	b508      	push	{r3, lr}
	return day(now());
   dab3a:	f7ff ffd8 	bl	daaee <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dab3e:	f7ff ff6b 	bl	daa18 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   dab42:	4b01      	ldr	r3, [pc, #4]	; (dab48 <_ZN9TimeClass3dayEv+0x10>)
   dab44:	68d8      	ldr	r0, [r3, #12]
   dab46:	bd08      	pop	{r3, pc}
   dab48:	2003e378 	.word	0x2003e378

000dab4c <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   dab4c:	b508      	push	{r3, lr}
	return month(now());
   dab4e:	f7ff ffce 	bl	daaee <_ZN9TimeClass3nowEv>
}
   dab52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   dab56:	f7ff bf9f 	b.w	daa98 <_ZN9TimeClass5monthEl>
	...

000dab5c <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   dab5c:	b508      	push	{r3, lr}
	return year(now());
   dab5e:	f7ff ffc6 	bl	daaee <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dab62:	f7ff ff59 	bl	daa18 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   dab66:	4b01      	ldr	r3, [pc, #4]	; (dab6c <_ZN9TimeClass4yearEv+0x10>)
   dab68:	6958      	ldr	r0, [r3, #20]
   dab6a:	bd08      	pop	{r3, pc}
   dab6c:	2003e378 	.word	0x2003e378

000dab70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   dab70:	4b02      	ldr	r3, [pc, #8]	; (dab7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   dab72:	681a      	ldr	r2, [r3, #0]
   dab74:	4b02      	ldr	r3, [pc, #8]	; (dab80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dab76:	601a      	str	r2, [r3, #0]
   dab78:	4770      	bx	lr
   dab7a:	bf00      	nop
   dab7c:	2003d370 	.word	0x2003d370
   dab80:	2003e39c 	.word	0x2003e39c

000dab84 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   dab84:	2100      	movs	r1, #0
   dab86:	f7fd ba8f 	b.w	d80a8 <system_delay_ms>

000dab8a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   dab8a:	b510      	push	{r4, lr}
   dab8c:	4604      	mov	r4, r0
   dab8e:	f7f9 fbab 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   dab92:	4620      	mov	r0, r4
   dab94:	bd10      	pop	{r4, pc}

000dab96 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   dab96:	b513      	push	{r0, r1, r4, lr}
   dab98:	460b      	mov	r3, r1
   dab9a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dab9c:	c803      	ldmia	r0, {r0, r1}
   dab9e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   daba2:	e893 0003 	ldmia.w	r3, {r0, r1}
   daba6:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   dabaa:	e89d 0003 	ldmia.w	sp, {r0, r1}
   dabae:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   dabb2:	b002      	add	sp, #8
   dabb4:	bd10      	pop	{r4, pc}
	...

000dabb8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dabb8:	4803      	ldr	r0, [pc, #12]	; (dabc8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   dabba:	4a04      	ldr	r2, [pc, #16]	; (dabcc <_GLOBAL__sub_I_RGB+0x14>)
   dabbc:	4904      	ldr	r1, [pc, #16]	; (dabd0 <_GLOBAL__sub_I_RGB+0x18>)
   dabbe:	2300      	movs	r3, #0
   dabc0:	6083      	str	r3, [r0, #8]
   dabc2:	f001 b98f 	b.w	dbee4 <__aeabi_atexit>
   dabc6:	bf00      	nop
   dabc8:	2003e3ac 	.word	0x2003e3ac
   dabcc:	2003d460 	.word	0x2003d460
   dabd0:	000dab8b 	.word	0x000dab8b

000dabd4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   dabd4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dabd6:	4b0c      	ldr	r3, [pc, #48]	; (dac08 <serialEventRun+0x34>)
   dabd8:	b133      	cbz	r3, dabe8 <serialEventRun+0x14>
   dabda:	f000 fc1f 	bl	db41c <_Z16_fetch_usbserialv>
   dabde:	6803      	ldr	r3, [r0, #0]
   dabe0:	691b      	ldr	r3, [r3, #16]
   dabe2:	4798      	blx	r3
   dabe4:	2800      	cmp	r0, #0
   dabe6:	dc09      	bgt.n	dabfc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   dabe8:	4b08      	ldr	r3, [pc, #32]	; (dac0c <serialEventRun+0x38>)
   dabea:	b163      	cbz	r3, dac06 <serialEventRun+0x32>
   dabec:	f000 fcee 	bl	db5cc <_Z22__fetch_global_Serial1v>
   dabf0:	6803      	ldr	r3, [r0, #0]
   dabf2:	691b      	ldr	r3, [r3, #16]
   dabf4:	4798      	blx	r3
   dabf6:	2800      	cmp	r0, #0
   dabf8:	dc03      	bgt.n	dac02 <serialEventRun+0x2e>
   dabfa:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   dabfc:	f3af 8000 	nop.w
   dac00:	e7f2      	b.n	dabe8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   dac02:	f3af 8000 	nop.w
   dac06:	bd08      	pop	{r3, pc}
	...

000dac10 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   dac10:	b508      	push	{r3, lr}
	serialEventRun();
   dac12:	f7ff ffdf 	bl	dabd4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dac16:	f7fd f813 	bl	d7c40 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dac1a:	4b01      	ldr	r3, [pc, #4]	; (dac20 <_post_loop+0x10>)
   dac1c:	6018      	str	r0, [r3, #0]
   dac1e:	bd08      	pop	{r3, pc}
   dac20:	2003e708 	.word	0x2003e708

000dac24 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dac24:	4802      	ldr	r0, [pc, #8]	; (dac30 <_Z33system_initialize_user_backup_ramv+0xc>)
   dac26:	4a03      	ldr	r2, [pc, #12]	; (dac34 <_Z33system_initialize_user_backup_ramv+0x10>)
   dac28:	4903      	ldr	r1, [pc, #12]	; (dac38 <_Z33system_initialize_user_backup_ramv+0x14>)
   dac2a:	1a12      	subs	r2, r2, r0
   dac2c:	f002 b8db 	b.w	dcde6 <memcpy>
   dac30:	2003f400 	.word	0x2003f400
   dac34:	2003f404 	.word	0x2003f404
   dac38:	000e0140 	.word	0x000e0140

000dac3c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dac3c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dac3e:	2300      	movs	r3, #0
   dac40:	9300      	str	r3, [sp, #0]
   dac42:	461a      	mov	r2, r3
   dac44:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dac48:	f7fd fa60 	bl	d810c <system_ctrl_set_result>
}
   dac4c:	b003      	add	sp, #12
   dac4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dac54 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   dac54:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dac56:	8843      	ldrh	r3, [r0, #2]
   dac58:	2b0a      	cmp	r3, #10
   dac5a:	d008      	beq.n	dac6e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dac5c:	2b50      	cmp	r3, #80	; 0x50
   dac5e:	d109      	bne.n	dac74 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   dac60:	4b09      	ldr	r3, [pc, #36]	; (dac88 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dac62:	681b      	ldr	r3, [r3, #0]
   dac64:	b13b      	cbz	r3, dac76 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   dac66:	b003      	add	sp, #12
   dac68:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   dac6c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   dac6e:	f7ff ffe5 	bl	dac3c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   dac72:	e006      	b.n	dac82 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dac74:	2300      	movs	r3, #0
   dac76:	9300      	str	r3, [sp, #0]
   dac78:	461a      	mov	r2, r3
   dac7a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dac7e:	f7fd fa45 	bl	d810c <system_ctrl_set_result>
        break;
    }
}
   dac82:	b003      	add	sp, #12
   dac84:	f85d fb04 	ldr.w	pc, [sp], #4
   dac88:	2003e3bc 	.word	0x2003e3bc

000dac8c <module_user_init_hook>:

void module_user_init_hook()
{
   dac8c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   dac8e:	4c10      	ldr	r4, [pc, #64]	; (dacd0 <module_user_init_hook+0x44>)
   dac90:	4d10      	ldr	r5, [pc, #64]	; (dacd4 <module_user_init_hook+0x48>)
   dac92:	6823      	ldr	r3, [r4, #0]
   dac94:	42ab      	cmp	r3, r5
   dac96:	4b10      	ldr	r3, [pc, #64]	; (dacd8 <module_user_init_hook+0x4c>)
   dac98:	bf0c      	ite	eq
   dac9a:	2201      	moveq	r2, #1
   dac9c:	2200      	movne	r2, #0
   dac9e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   daca0:	d002      	beq.n	daca8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   daca2:	f7ff ffbf 	bl	dac24 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   daca6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   daca8:	f7fc ffb2 	bl	d7c10 <HAL_RNG_GetRandomNumber>
   dacac:	4604      	mov	r4, r0
    srand(seed);
   dacae:	f002 f8c9 	bl	dce44 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dacb2:	4b0a      	ldr	r3, [pc, #40]	; (dacdc <module_user_init_hook+0x50>)
   dacb4:	b113      	cbz	r3, dacbc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   dacb6:	4620      	mov	r0, r4
   dacb8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dacbc:	2100      	movs	r1, #0
   dacbe:	4807      	ldr	r0, [pc, #28]	; (dacdc <module_user_init_hook+0x50>)
   dacc0:	f7fd faa6 	bl	d8210 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dacc4:	2100      	movs	r1, #0
   dacc6:	4806      	ldr	r0, [pc, #24]	; (dace0 <module_user_init_hook+0x54>)
}
   dacc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   daccc:	f7fd ba14 	b.w	d80f8 <system_ctrl_set_app_request_handler>
   dacd0:	2003f400 	.word	0x2003f400
   dacd4:	9a271c1e 	.word	0x9a271c1e
   dacd8:	2003e3c0 	.word	0x2003e3c0
   dacdc:	00000000 	.word	0x00000000
   dace0:	000dac55 	.word	0x000dac55

000dace4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dace4:	4770      	bx	lr

000dace6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   dace6:	2000      	movs	r0, #0
   dace8:	4770      	bx	lr

000dacea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dacea:	b510      	push	{r4, lr}
   dacec:	2110      	movs	r1, #16
   dacee:	4604      	mov	r4, r0
   dacf0:	f001 f906 	bl	dbf00 <_ZdlPvj>
   dacf4:	4620      	mov	r0, r4
   dacf6:	bd10      	pop	{r4, pc}

000dacf8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   dacf8:	b508      	push	{r3, lr}
      { delete this; }
   dacfa:	b108      	cbz	r0, dad00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   dacfc:	f7ff fff5 	bl	dacea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dad00:	bd08      	pop	{r3, pc}

000dad02 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dad02:	2200      	movs	r2, #0
   dad04:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   dad06:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dad08:	f64f 729c 	movw	r2, #65436	; 0xff9c
   dad0c:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dad0e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   dad12:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   dad14:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dad16:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   dad18:	680c      	ldr	r4, [r1, #0]
   dad1a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dad1c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   dad1e:	bd10      	pop	{r4, pc}

000dad20 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   dad20:	b510      	push	{r4, lr}
   dad22:	4604      	mov	r4, r0
    free((void*)msg_);
   dad24:	6800      	ldr	r0, [r0, #0]
   dad26:	f7fd fa83 	bl	d8230 <free>
}
   dad2a:	4620      	mov	r0, r4
   dad2c:	bd10      	pop	{r4, pc}

000dad2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   dad2e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   dad30:	68c4      	ldr	r4, [r0, #12]
   dad32:	b1f4      	cbz	r4, dad72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   dad34:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   dad36:	2b02      	cmp	r3, #2
   dad38:	d103      	bne.n	dad42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   dad3a:	f104 000c 	add.w	r0, r4, #12
   dad3e:	f7ff ffef 	bl	dad20 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   dad42:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   dad44:	b135      	cbz	r5, dad54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dad46:	4628      	mov	r0, r5
   dad48:	f7f9 face 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   dad4c:	2110      	movs	r1, #16
   dad4e:	4628      	mov	r0, r5
   dad50:	f001 f8d6 	bl	dbf00 <_ZdlPvj>
   dad54:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   dad56:	b135      	cbz	r5, dad66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   dad58:	4628      	mov	r0, r5
   dad5a:	f7f9 fac5 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
   dad5e:	2110      	movs	r1, #16
   dad60:	4628      	mov	r0, r5
   dad62:	f001 f8cd 	bl	dbf00 <_ZdlPvj>
   dad66:	4620      	mov	r0, r4
   dad68:	2114      	movs	r1, #20
   dad6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dad6e:	f001 b8c7 	b.w	dbf00 <_ZdlPvj>
   dad72:	bd38      	pop	{r3, r4, r5, pc}

000dad74 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   dad74:	b513      	push	{r0, r1, r4, lr}
   dad76:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dad78:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   dad7c:	2300      	movs	r3, #0
   dad7e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dad80:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   dad82:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   dad84:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dad86:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   dad88:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dad8a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dad8c:	f7f9 fc70 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dad90:	4620      	mov	r0, r4
   dad92:	b002      	add	sp, #8
   dad94:	bd10      	pop	{r4, pc}

000dad96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   dad96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dad98:	460c      	mov	r4, r1
   dad9a:	ad02      	add	r5, sp, #8
   dad9c:	f854 3b04 	ldr.w	r3, [r4], #4
   dada0:	f845 3d08 	str.w	r3, [r5, #-8]!
   dada4:	4606      	mov	r6, r0
   dada6:	460f      	mov	r7, r1
   dada8:	a801      	add	r0, sp, #4
   dadaa:	4621      	mov	r1, r4
   dadac:	f7fe f896 	bl	d8edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   dadb0:	4629      	mov	r1, r5
   dadb2:	4630      	mov	r0, r6
   dadb4:	f7ff ffde 	bl	dad74 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dadb8:	a801      	add	r0, sp, #4
   dadba:	f7f9 fc59 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dadbe:	4620      	mov	r0, r4
   dadc0:	f7f9 fc56 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   dadc4:	4638      	mov	r0, r7
   dadc6:	2108      	movs	r1, #8
   dadc8:	f001 f89a 	bl	dbf00 <_ZdlPvj>
        return p;
    }
   dadcc:	4630      	mov	r0, r6
   dadce:	b003      	add	sp, #12
   dadd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000dadd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dadd4:	b538      	push	{r3, r4, r5, lr}
   dadd6:	2300      	movs	r3, #0
   dadd8:	4604      	mov	r4, r0
   dadda:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   daddc:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dadde:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dade0:	f7f9 f95b 	bl	d409a <_Znwj>
   dade4:	b128      	cbz	r0, dadf2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dade6:	2301      	movs	r3, #1
   dade8:	6043      	str	r3, [r0, #4]
   dadea:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   dadec:	4b02      	ldr	r3, [pc, #8]	; (dadf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   dadee:	6003      	str	r3, [r0, #0]
   dadf0:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dadf2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   dadf4:	4620      	mov	r0, r4
   dadf6:	bd38      	pop	{r3, r4, r5, pc}
   dadf8:	000dfbdc 	.word	0x000dfbdc

000dadfc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dadfc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dadfe:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dae00:	b90a      	cbnz	r2, dae06 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   dae02:	f001 f890 	bl	dbf26 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dae06:	68c3      	ldr	r3, [r0, #12]
    }
   dae08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dae0c:	4718      	bx	r3

000dae0e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dae0e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dae10:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dae12:	f100 0110 	add.w	r1, r0, #16
   dae16:	f7ff fff1 	bl	dadfc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dae1a:	bd08      	pop	{r3, pc}

000dae1c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dae1c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dae1e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dae20:	b90a      	cbnz	r2, dae26 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   dae22:	f001 f880 	bl	dbf26 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dae26:	68c3      	ldr	r3, [r0, #12]
    }
   dae28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dae2c:	4718      	bx	r3

000dae2e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dae2e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dae30:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dae32:	f100 0110 	add.w	r1, r0, #16
   dae36:	f7ff fff1 	bl	dae1c <_ZNKSt8functionIFvRKbEEclES1_>
   dae3a:	bd08      	pop	{r3, pc}

000dae3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dae3c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dae3e:	2300      	movs	r3, #0
   dae40:	6083      	str	r3, [r0, #8]
   dae42:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dae44:	4604      	mov	r4, r0
   dae46:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dae48:	b12b      	cbz	r3, dae56 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dae4a:	2202      	movs	r2, #2
   dae4c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dae4e:	68eb      	ldr	r3, [r5, #12]
   dae50:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dae52:	68ab      	ldr	r3, [r5, #8]
   dae54:	60a3      	str	r3, [r4, #8]
	}
    }
   dae56:	4620      	mov	r0, r4
   dae58:	bd38      	pop	{r3, r4, r5, pc}
	...

000dae5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   dae5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dae5e:	b089      	sub	sp, #36	; 0x24
   dae60:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   dae62:	4668      	mov	r0, sp
   dae64:	f7ff ff4d 	bl	dad02 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dae68:	2300      	movs	r3, #0
   dae6a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dae6e:	f04f 0202 	mov.w	r2, #2
   dae72:	e8d4 3f4f 	ldrexb	r3, [r4]
   dae76:	2b00      	cmp	r3, #0
   dae78:	d103      	bne.n	dae82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   dae7a:	e8c4 2f41 	strexb	r1, r2, [r4]
   dae7e:	2900      	cmp	r1, #0
   dae80:	d1f7      	bne.n	dae72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   dae82:	d002      	beq.n	dae8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   dae84:	f88d 3008 	strb.w	r3, [sp, #8]
   dae88:	e063      	b.n	daf52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   dae8a:	f114 050c 	adds.w	r5, r4, #12
   dae8e:	d003      	beq.n	dae98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   dae90:	4669      	mov	r1, sp
   dae92:	4628      	mov	r0, r5
   dae94:	f7ff ff35 	bl	dad02 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dae98:	f3bf 8f5f 	dmb	sy
   dae9c:	2301      	movs	r3, #1
   dae9e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   daea0:	2000      	movs	r0, #0
   daea2:	f104 0308 	add.w	r3, r4, #8
   daea6:	f3bf 8f5f 	dmb	sy
   daeaa:	e853 6f00 	ldrex	r6, [r3]
   daeae:	e843 0200 	strex	r2, r0, [r3]
   daeb2:	2a00      	cmp	r2, #0
   daeb4:	d1f9      	bne.n	daeaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   daeb6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   daeba:	2e00      	cmp	r6, #0
   daebc:	d049      	beq.n	daf52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   daebe:	f7fd f8fb 	bl	d80b8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   daec2:	b120      	cbz	r0, daece <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   daec4:	4629      	mov	r1, r5
   daec6:	4630      	mov	r0, r6
   daec8:	f7ff ff98 	bl	dadfc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   daecc:	e03a      	b.n	daf44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   daece:	4631      	mov	r1, r6
   daed0:	a802      	add	r0, sp, #8
   daed2:	f7ff ffb3 	bl	dae3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   daed6:	68e0      	ldr	r0, [r4, #12]
   daed8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   daedc:	b108      	cbz	r0, daee2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   daede:	f002 f813 	bl	dcf08 <strdup>
   daee2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   daee4:	2010      	movs	r0, #16
   daee6:	f8ad 501c 	strh.w	r5, [sp, #28]
   daeea:	f7f9 f8d6 	bl	d409a <_Znwj>
   daeee:	4605      	mov	r5, r0
   daef0:	b1e8      	cbz	r0, daf2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   daef2:	2700      	movs	r7, #0
   daef4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daef6:	2018      	movs	r0, #24
   daef8:	f7f9 f8cf 	bl	d409a <_Znwj>
   daefc:	4604      	mov	r4, r0
   daefe:	b188      	cbz	r0, daf24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   daf00:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   daf02:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   daf04:	a802      	add	r0, sp, #8
   daf06:	f7ff fe46 	bl	dab96 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daf0a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   daf0c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   daf0e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daf10:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   daf12:	9204      	str	r2, [sp, #16]
   daf14:	a906      	add	r1, sp, #24
   daf16:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   daf18:	60e3      	str	r3, [r4, #12]
   daf1a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   daf1e:	9205      	str	r2, [sp, #20]
   daf20:	f7ff feef 	bl	dad02 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   daf24:	4b0d      	ldr	r3, [pc, #52]	; (daf5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   daf26:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   daf28:	4b0d      	ldr	r3, [pc, #52]	; (daf60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daf2a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   daf2c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   daf2e:	a806      	add	r0, sp, #24
   daf30:	f7ff fef6 	bl	dad20 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   daf34:	a802      	add	r0, sp, #8
   daf36:	f7f9 f9d7 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   daf3a:	2200      	movs	r2, #0
   daf3c:	4629      	mov	r1, r5
   daf3e:	4809      	ldr	r0, [pc, #36]	; (daf64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   daf40:	f7fd f8c2 	bl	d80c8 <application_thread_invoke>
   daf44:	4630      	mov	r0, r6
   daf46:	f7f9 f9cf 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   daf4a:	2110      	movs	r1, #16
   daf4c:	4630      	mov	r0, r6
   daf4e:	f000 ffd7 	bl	dbf00 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   daf52:	4668      	mov	r0, sp
   daf54:	f7ff fee4 	bl	dad20 <_ZN8particle5ErrorD1Ev>
    }
   daf58:	b009      	add	sp, #36	; 0x24
   daf5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   daf5c:	000dae0f 	.word	0x000dae0f
   daf60:	000db085 	.word	0x000db085
   daf64:	000db619 	.word	0x000db619

000daf68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   daf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daf6c:	b08b      	sub	sp, #44	; 0x2c
   daf6e:	4606      	mov	r6, r0
   daf70:	460f      	mov	r7, r1
   daf72:	4690      	mov	r8, r2
   daf74:	4699      	mov	r9, r3
   daf76:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   daf7a:	f7fd f929 	bl	d81d0 <spark_cloud_flag_connected>
   daf7e:	ad07      	add	r5, sp, #28
    if (!connected()) {
   daf80:	4683      	mov	fp, r0
   daf82:	bb30      	cbnz	r0, dafd2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   daf84:	f64f 732e 	movw	r3, #65326	; 0xff2e
   daf88:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   daf8a:	a905      	add	r1, sp, #20
   daf8c:	4628      	mov	r0, r5
   daf8e:	f8ad 3018 	strh.w	r3, [sp, #24]
   daf92:	f7ff feb6 	bl	dad02 <_ZN8particle5ErrorC1EOS0_>
   daf96:	2014      	movs	r0, #20
   daf98:	f7f9 f87f 	bl	d409a <_Znwj>
   daf9c:	4604      	mov	r4, r0
   daf9e:	b158      	cbz	r0, dafb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dafa0:	2302      	movs	r3, #2
   dafa2:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dafa4:	2301      	movs	r3, #1
   dafa6:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dafa8:	f8c0 b004 	str.w	fp, [r0, #4]
   dafac:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   dafb0:	4629      	mov	r1, r5
   dafb2:	300c      	adds	r0, #12
   dafb4:	f7ff fea5 	bl	dad02 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   dafb8:	4630      	mov	r0, r6
   dafba:	4621      	mov	r1, r4
   dafbc:	f840 4b04 	str.w	r4, [r0], #4
   dafc0:	f7ff ff08 	bl	dadd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dafc4:	4628      	mov	r0, r5
   dafc6:	f7ff feab 	bl	dad20 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dafca:	a805      	add	r0, sp, #20
   dafcc:	f7ff fea8 	bl	dad20 <_ZN8particle5ErrorD1Ev>
   dafd0:	e052      	b.n	db078 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dafd2:	2400      	movs	r4, #0
   dafd4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dafd6:	2014      	movs	r0, #20
   dafd8:	606c      	str	r4, [r5, #4]
   dafda:	60ac      	str	r4, [r5, #8]
   dafdc:	9307      	str	r3, [sp, #28]
   dafde:	f7f9 f85c 	bl	d409a <_Znwj>
   dafe2:	4601      	mov	r1, r0
   dafe4:	b118      	cbz	r0, dafee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   dafe6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dafe8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dafea:	6044      	str	r4, [r0, #4]
   dafec:	6084      	str	r4, [r0, #8]
   dafee:	a804      	add	r0, sp, #16
   daff0:	9103      	str	r1, [sp, #12]
   daff2:	f7ff feef 	bl	dadd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   daff6:	4b22      	ldr	r3, [pc, #136]	; (db080 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   daff8:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   daffa:	2008      	movs	r0, #8
   daffc:	f7f9 f84d 	bl	d409a <_Znwj>
   db000:	4604      	mov	r4, r0
   db002:	b128      	cbz	r0, db010 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   db004:	9b03      	ldr	r3, [sp, #12]
   db006:	f840 3b04 	str.w	r3, [r0], #4
   db00a:	a904      	add	r1, sp, #16
   db00c:	f7fd ff66 	bl	d8edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   db010:	9500      	str	r5, [sp, #0]
   db012:	fa5f f38a 	uxtb.w	r3, sl
   db016:	464a      	mov	r2, r9
   db018:	4641      	mov	r1, r8
   db01a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   db01c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   db01e:	f7fd f8df 	bl	d81e0 <spark_send_event>
   db022:	b920      	cbnz	r0, db02e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   db024:	9b03      	ldr	r3, [sp, #12]
   db026:	785b      	ldrb	r3, [r3, #1]
   db028:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   db02c:	b183      	cbz	r3, db050 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   db02e:	9b03      	ldr	r3, [sp, #12]
   db030:	9305      	str	r3, [sp, #20]
   db032:	a904      	add	r1, sp, #16
   db034:	a806      	add	r0, sp, #24
   db036:	f7fd ff51 	bl	d8edc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   db03a:	a905      	add	r1, sp, #20
   db03c:	4630      	mov	r0, r6
   db03e:	f7ff fe99 	bl	dad74 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   db042:	a806      	add	r0, sp, #24
   db044:	f7f9 fb14 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db048:	a804      	add	r0, sp, #16
   db04a:	f7f9 fb11 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db04e:	e013      	b.n	db078 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   db050:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   db054:	a905      	add	r1, sp, #20
   db056:	a803      	add	r0, sp, #12
   db058:	9205      	str	r2, [sp, #20]
   db05a:	f8ad 3018 	strh.w	r3, [sp, #24]
   db05e:	f7ff fefd 	bl	dae5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   db062:	a805      	add	r0, sp, #20
   db064:	f7ff fe5c 	bl	dad20 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   db068:	a805      	add	r0, sp, #20
   db06a:	9909      	ldr	r1, [sp, #36]	; 0x24
   db06c:	f7ff fe93 	bl	dad96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   db070:	a806      	add	r0, sp, #24
   db072:	f7f9 fafd 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   db076:	e7da      	b.n	db02e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   db078:	4630      	mov	r0, r6
   db07a:	b00b      	add	sp, #44	; 0x2c
   db07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db080:	000db1f5 	.word	0x000db1f5

000db084 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   db084:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   db086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db088:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   db08a:	d006      	beq.n	db09a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   db08c:	2a03      	cmp	r2, #3
   db08e:	d017      	beq.n	db0c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   db090:	2a01      	cmp	r2, #1
   db092:	d122      	bne.n	db0da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   db094:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db096:	6003      	str	r3, [r0, #0]
	      break;
   db098:	e01f      	b.n	db0da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   db09a:	2018      	movs	r0, #24
   db09c:	680e      	ldr	r6, [r1, #0]
   db09e:	f7f8 fffc 	bl	d409a <_Znwj>
   db0a2:	4605      	mov	r5, r0
   db0a4:	b150      	cbz	r0, db0bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   db0a6:	4631      	mov	r1, r6
   db0a8:	f7ff fec8 	bl	dae3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   db0ac:	6930      	ldr	r0, [r6, #16]
   db0ae:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   db0b2:	b108      	cbz	r0, db0b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   db0b4:	f001 ff28 	bl	dcf08 <strdup>
   db0b8:	6128      	str	r0, [r5, #16]
   db0ba:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   db0bc:	6025      	str	r5, [r4, #0]
   db0be:	e00c      	b.n	db0da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   db0c0:	6804      	ldr	r4, [r0, #0]
   db0c2:	b154      	cbz	r4, db0da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   db0c4:	f104 0010 	add.w	r0, r4, #16
   db0c8:	f7ff fe2a 	bl	dad20 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   db0cc:	4620      	mov	r0, r4
   db0ce:	f7f9 f90b 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   db0d2:	2118      	movs	r1, #24
   db0d4:	4620      	mov	r0, r4
   db0d6:	f000 ff13 	bl	dbf00 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   db0da:	2000      	movs	r0, #0
   db0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db0de <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   db0de:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   db0e0:	2300      	movs	r3, #0
   db0e2:	6083      	str	r3, [r0, #8]
   db0e4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   db0e6:	4604      	mov	r4, r0
   db0e8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   db0ea:	b12b      	cbz	r3, db0f8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db0ec:	2202      	movs	r2, #2
   db0ee:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db0f0:	68eb      	ldr	r3, [r5, #12]
   db0f2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db0f4:	68ab      	ldr	r3, [r5, #8]
   db0f6:	60a3      	str	r3, [r4, #8]
	}
    }
   db0f8:	4620      	mov	r0, r4
   db0fa:	bd38      	pop	{r3, r4, r5, pc}

000db0fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   db0fc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   db0fe:	b570      	push	{r4, r5, r6, lr}
   db100:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   db102:	d006      	beq.n	db112 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   db104:	2a03      	cmp	r2, #3
   db106:	d011      	beq.n	db12c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   db108:	2a01      	cmp	r2, #1
   db10a:	d118      	bne.n	db13e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   db10c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   db10e:	6003      	str	r3, [r0, #0]
	      break;
   db110:	e015      	b.n	db13e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   db112:	2014      	movs	r0, #20
   db114:	680e      	ldr	r6, [r1, #0]
   db116:	f7f8 ffc0 	bl	d409a <_Znwj>
   db11a:	4605      	mov	r5, r0
   db11c:	b120      	cbz	r0, db128 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   db11e:	4631      	mov	r1, r6
   db120:	f7ff ffdd 	bl	db0de <_ZNSt8functionIFvRKbEEC1ERKS3_>
   db124:	7c33      	ldrb	r3, [r6, #16]
   db126:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   db128:	6025      	str	r5, [r4, #0]
   db12a:	e008      	b.n	db13e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   db12c:	6804      	ldr	r4, [r0, #0]
   db12e:	b134      	cbz	r4, db13e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   db130:	4620      	mov	r0, r4
   db132:	f7f9 f8d9 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   db136:	2114      	movs	r1, #20
   db138:	4620      	mov	r0, r4
   db13a:	f000 fee1 	bl	dbf00 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   db13e:	2000      	movs	r0, #0
   db140:	bd70      	pop	{r4, r5, r6, pc}
	...

000db144 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   db144:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   db146:	2300      	movs	r3, #0
   db148:	b087      	sub	sp, #28
   db14a:	460c      	mov	r4, r1
   db14c:	f3bf 8f5f 	dmb	sy
   db150:	e850 6f00 	ldrex	r6, [r0]
   db154:	e840 3200 	strex	r2, r3, [r0]
   db158:	2a00      	cmp	r2, #0
   db15a:	d1f9      	bne.n	db150 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   db15c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   db160:	2e00      	cmp	r6, #0
   db162:	d03f      	beq.n	db1e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   db164:	4618      	mov	r0, r3
   db166:	f7fc ffa7 	bl	d80b8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   db16a:	4607      	mov	r7, r0
   db16c:	b120      	cbz	r0, db178 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   db16e:	4621      	mov	r1, r4
   db170:	4630      	mov	r0, r6
   db172:	f7ff fe53 	bl	dae1c <_ZNKSt8functionIFvRKbEEclES1_>
   db176:	e02e      	b.n	db1d6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   db178:	4631      	mov	r1, r6
   db17a:	a801      	add	r0, sp, #4
   db17c:	f7ff ffaf 	bl	db0de <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   db180:	7823      	ldrb	r3, [r4, #0]
   db182:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   db186:	2010      	movs	r0, #16
   db188:	f7f8 ff87 	bl	d409a <_Znwj>
   db18c:	4605      	mov	r5, r0
   db18e:	b1d0      	cbz	r0, db1c6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   db190:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db192:	2014      	movs	r0, #20
   db194:	f7f8 ff81 	bl	d409a <_Znwj>
   db198:	4604      	mov	r4, r0
   db19a:	b178      	cbz	r0, db1bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   db19c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   db19e:	4601      	mov	r1, r0
   db1a0:	a801      	add	r0, sp, #4
   db1a2:	f7ff fcf8 	bl	dab96 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db1a6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   db1a8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   db1aa:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db1ac:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   db1ae:	9203      	str	r2, [sp, #12]
   db1b0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   db1b2:	60e3      	str	r3, [r4, #12]
   db1b4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   db1b8:	9204      	str	r2, [sp, #16]
   db1ba:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   db1bc:	4b0a      	ldr	r3, [pc, #40]	; (db1e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   db1be:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   db1c0:	4b0a      	ldr	r3, [pc, #40]	; (db1ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   db1c2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   db1c4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   db1c6:	a801      	add	r0, sp, #4
   db1c8:	f7f9 f88e 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   db1cc:	2200      	movs	r2, #0
   db1ce:	4629      	mov	r1, r5
   db1d0:	4807      	ldr	r0, [pc, #28]	; (db1f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   db1d2:	f7fc ff79 	bl	d80c8 <application_thread_invoke>
   db1d6:	4630      	mov	r0, r6
   db1d8:	f7f9 f886 	bl	d42e8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   db1dc:	2110      	movs	r1, #16
   db1de:	4630      	mov	r0, r6
   db1e0:	f000 fe8e 	bl	dbf00 <_ZdlPvj>
        }
    }
   db1e4:	b007      	add	sp, #28
   db1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db1e8:	000dae2f 	.word	0x000dae2f
   db1ec:	000db0fd 	.word	0x000db0fd
   db1f0:	000db619 	.word	0x000db619

000db1f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   db1f4:	b530      	push	{r4, r5, lr}
   db1f6:	b085      	sub	sp, #20
   db1f8:	4604      	mov	r4, r0
   db1fa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   db1fc:	4668      	mov	r0, sp
   db1fe:	4611      	mov	r1, r2
   db200:	f7ff fdc9 	bl	dad96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   db204:	b17c      	cbz	r4, db226 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   db206:	b224      	sxth	r4, r4
   db208:	4628      	mov	r0, r5
   db20a:	b10d      	cbz	r5, db210 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   db20c:	f001 fe7c 	bl	dcf08 <strdup>
   db210:	9002      	str	r0, [sp, #8]
   db212:	a902      	add	r1, sp, #8
   db214:	4668      	mov	r0, sp
   db216:	f8ad 400c 	strh.w	r4, [sp, #12]
   db21a:	f7ff fe1f 	bl	dae5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   db21e:	a802      	add	r0, sp, #8
   db220:	f7ff fd7e 	bl	dad20 <_ZN8particle5ErrorD1Ev>
   db224:	e01d      	b.n	db262 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   db226:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   db228:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   db22c:	f04f 0201 	mov.w	r2, #1
   db230:	e8d0 3f4f 	ldrexb	r3, [r0]
   db234:	42a3      	cmp	r3, r4
   db236:	d103      	bne.n	db240 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   db238:	e8c0 2f41 	strexb	r1, r2, [r0]
   db23c:	2900      	cmp	r1, #0
   db23e:	d1f7      	bne.n	db230 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   db240:	d002      	beq.n	db248 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   db242:	f88d 3008 	strb.w	r3, [sp, #8]
   db246:	e00c      	b.n	db262 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   db248:	f110 010c 	adds.w	r1, r0, #12
   db24c:	f04f 0301 	mov.w	r3, #1
   db250:	bf18      	it	ne
   db252:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   db254:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   db258:	3004      	adds	r0, #4
   db25a:	f800 3c03 	strb.w	r3, [r0, #-3]
   db25e:	f7ff ff71 	bl	db144 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   db262:	a801      	add	r0, sp, #4
   db264:	f7f9 fa04 	bl	d4670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   db268:	b005      	add	sp, #20
   db26a:	bd30      	pop	{r4, r5, pc}

000db26c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   db26c:	4770      	bx	lr

000db26e <_ZN9IPAddressD0Ev>:
   db26e:	b510      	push	{r4, lr}
   db270:	2118      	movs	r1, #24
   db272:	4604      	mov	r4, r0
   db274:	f000 fe44 	bl	dbf00 <_ZdlPvj>
   db278:	4620      	mov	r0, r4
   db27a:	bd10      	pop	{r4, pc}

000db27c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   db27c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   db27e:	7d03      	ldrb	r3, [r0, #20]
   db280:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   db282:	b08d      	sub	sp, #52	; 0x34
   db284:	460e      	mov	r6, r1
   db286:	f100 0704 	add.w	r7, r0, #4
   db28a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   db28e:	d002      	beq.n	db296 <_ZNK9IPAddress7printToER5Print+0x1a>
   db290:	f100 0508 	add.w	r5, r0, #8
   db294:	e018      	b.n	db2c8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   db296:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   db298:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   db29a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   db29e:	232f      	movs	r3, #47	; 0x2f
   db2a0:	462a      	mov	r2, r5
   db2a2:	200a      	movs	r0, #10
   db2a4:	f7fc fdce 	bl	d7e44 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   db2a8:	4628      	mov	r0, r5
   db2aa:	f001 fe48 	bl	dcf3e <strlen>
   db2ae:	6833      	ldr	r3, [r6, #0]
   db2b0:	4602      	mov	r2, r0
   db2b2:	68db      	ldr	r3, [r3, #12]
   db2b4:	4629      	mov	r1, r5
   db2b6:	4630      	mov	r0, r6
   db2b8:	4798      	blx	r3
   db2ba:	e00f      	b.n	db2dc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   db2bc:	b124      	cbz	r4, db2c8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   db2be:	212e      	movs	r1, #46	; 0x2e
   db2c0:	4630      	mov	r0, r6
   db2c2:	f7fe fb33 	bl	d992c <_ZN5Print5printEc>
   db2c6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   db2c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   db2cc:	220a      	movs	r2, #10
   db2ce:	4630      	mov	r0, r6
   db2d0:	f7fe fb45 	bl	d995e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   db2d4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   db2d6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   db2d8:	d1f0      	bne.n	db2bc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   db2da:	4620      	mov	r0, r4
    }
    return n;
}
   db2dc:	b00d      	add	sp, #52	; 0x34
   db2de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000db2e0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   db2e0:	b510      	push	{r4, lr}
   db2e2:	4b05      	ldr	r3, [pc, #20]	; (db2f8 <_ZN9IPAddressC1Ev+0x18>)
   db2e4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   db2e6:	2211      	movs	r2, #17
   db2e8:	f840 3b04 	str.w	r3, [r0], #4
   db2ec:	2100      	movs	r1, #0
   db2ee:	f001 fda0 	bl	dce32 <memset>
{
    clear();
}
   db2f2:	4620      	mov	r0, r4
   db2f4:	bd10      	pop	{r4, pc}
   db2f6:	bf00      	nop
   db2f8:	000dfbf8 	.word	0x000dfbf8

000db2fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   db2fc:	4603      	mov	r3, r0
   db2fe:	4a07      	ldr	r2, [pc, #28]	; (db31c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   db300:	b510      	push	{r4, lr}
   db302:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   db306:	f101 0210 	add.w	r2, r1, #16
   db30a:	f851 4b04 	ldr.w	r4, [r1], #4
   db30e:	f843 4b04 	str.w	r4, [r3], #4
   db312:	4291      	cmp	r1, r2
   db314:	d1f9      	bne.n	db30a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   db316:	780a      	ldrb	r2, [r1, #0]
   db318:	701a      	strb	r2, [r3, #0]
}
   db31a:	bd10      	pop	{r4, pc}
   db31c:	000dfbf8 	.word	0x000dfbf8

000db320 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   db320:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   db322:	f89d 4008 	ldrb.w	r4, [sp, #8]
   db326:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   db32a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   db32e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   db332:	2304      	movs	r3, #4
   db334:	6041      	str	r1, [r0, #4]
   db336:	7503      	strb	r3, [r0, #20]
   db338:	bd10      	pop	{r4, pc}

000db33a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   db33a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   db33c:	780d      	ldrb	r5, [r1, #0]
   db33e:	788b      	ldrb	r3, [r1, #2]
   db340:	784a      	ldrb	r2, [r1, #1]
   db342:	78c9      	ldrb	r1, [r1, #3]
   db344:	9100      	str	r1, [sp, #0]
   db346:	4629      	mov	r1, r5
   db348:	f7ff ffea 	bl	db320 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   db34c:	b003      	add	sp, #12
   db34e:	bd30      	pop	{r4, r5, pc}

000db350 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db350:	7441      	strb	r1, [r0, #17]
   db352:	4770      	bx	lr

000db354 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   db354:	4770      	bx	lr

000db356 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   db356:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   db358:	2100      	movs	r1, #0
   db35a:	7c00      	ldrb	r0, [r0, #16]
   db35c:	f7fc fe52 	bl	d8004 <HAL_USB_USART_Receive_Data>
}
   db360:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db364:	bf28      	it	cs
   db366:	f04f 30ff 	movcs.w	r0, #4294967295
   db36a:	bd08      	pop	{r3, pc}

000db36c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   db36c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   db36e:	2101      	movs	r1, #1
   db370:	7c00      	ldrb	r0, [r0, #16]
   db372:	f7fc fe47 	bl	d8004 <HAL_USB_USART_Receive_Data>
}
   db376:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db37a:	bf28      	it	cs
   db37c:	f04f 30ff 	movcs.w	r0, #4294967295
   db380:	bd08      	pop	{r3, pc}

000db382 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   db382:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   db384:	7c00      	ldrb	r0, [r0, #16]
   db386:	f7fc fe35 	bl	d7ff4 <HAL_USB_USART_Available_Data_For_Write>
}
   db38a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db38e:	bd08      	pop	{r3, pc}

000db390 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   db390:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   db392:	7c00      	ldrb	r0, [r0, #16]
   db394:	f7fc fe26 	bl	d7fe4 <HAL_USB_USART_Available_Data>
}
   db398:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db39c:	bd08      	pop	{r3, pc}

000db39e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   db39e:	7c00      	ldrb	r0, [r0, #16]
   db3a0:	f7fc be40 	b.w	d8024 <HAL_USB_USART_Flush_Data>

000db3a4 <_ZN9USBSerialD0Ev>:
   db3a4:	b510      	push	{r4, lr}
   db3a6:	2114      	movs	r1, #20
   db3a8:	4604      	mov	r4, r0
   db3aa:	f000 fda9 	bl	dbf00 <_ZdlPvj>
   db3ae:	4620      	mov	r0, r4
   db3b0:	bd10      	pop	{r4, pc}

000db3b2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   db3b2:	b538      	push	{r3, r4, r5, lr}
   db3b4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db3b6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   db3b8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db3ba:	f7fc fe1b 	bl	d7ff4 <HAL_USB_USART_Available_Data_For_Write>
   db3be:	2800      	cmp	r0, #0
   db3c0:	dc01      	bgt.n	db3c6 <_ZN9USBSerial5writeEh+0x14>
   db3c2:	7c60      	ldrb	r0, [r4, #17]
   db3c4:	b128      	cbz	r0, db3d2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   db3c6:	4629      	mov	r1, r5
   db3c8:	7c20      	ldrb	r0, [r4, #16]
   db3ca:	f7fc fe23 	bl	d8014 <HAL_USB_USART_Send_Data>
   db3ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   db3d2:	bd38      	pop	{r3, r4, r5, pc}

000db3d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db3d4:	b510      	push	{r4, lr}
   db3d6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   db3d8:	2300      	movs	r3, #0
   db3da:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   db3dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db3e0:	60a3      	str	r3, [r4, #8]
   db3e2:	4b05      	ldr	r3, [pc, #20]	; (db3f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db3e4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   db3e6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db3e8:	4608      	mov	r0, r1
{
  _serial = serial;
   db3ea:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   db3ec:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   db3ee:	4611      	mov	r1, r2
   db3f0:	f7fc fde0 	bl	d7fb4 <HAL_USB_USART_Init>
}
   db3f4:	4620      	mov	r0, r4
   db3f6:	bd10      	pop	{r4, pc}
   db3f8:	000dfc0c 	.word	0x000dfc0c

000db3fc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db3fc:	2200      	movs	r2, #0
   db3fe:	7c00      	ldrb	r0, [r0, #16]
   db400:	f7fc bde0 	b.w	d7fc4 <HAL_USB_USART_Begin>

000db404 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   db404:	7c00      	ldrb	r0, [r0, #16]
   db406:	f7fc bde5 	b.w	d7fd4 <HAL_USB_USART_End>

000db40a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db40a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db40c:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db40e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db410:	2100      	movs	r1, #0
   db412:	f001 fd0e 	bl	dce32 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   db416:	4620      	mov	r0, r4
   db418:	bd10      	pop	{r4, pc}
	...

000db41c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   db41c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db41e:	4d0e      	ldr	r5, [pc, #56]	; (db458 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   db420:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db422:	a801      	add	r0, sp, #4
   db424:	f7ff fff1 	bl	db40a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db428:	6829      	ldr	r1, [r5, #0]
   db42a:	f011 0401 	ands.w	r4, r1, #1
   db42e:	d110      	bne.n	db452 <_Z16_fetch_usbserialv+0x36>
   db430:	4628      	mov	r0, r5
   db432:	f7f8 fe43 	bl	d40bc <__cxa_guard_acquire>
   db436:	b160      	cbz	r0, db452 <_Z16_fetch_usbserialv+0x36>
   db438:	aa01      	add	r2, sp, #4
   db43a:	4621      	mov	r1, r4
   db43c:	4807      	ldr	r0, [pc, #28]	; (db45c <_Z16_fetch_usbserialv+0x40>)
   db43e:	f7ff ffc9 	bl	db3d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db442:	4628      	mov	r0, r5
   db444:	f7f8 fe3f 	bl	d40c6 <__cxa_guard_release>
   db448:	4a05      	ldr	r2, [pc, #20]	; (db460 <_Z16_fetch_usbserialv+0x44>)
   db44a:	4906      	ldr	r1, [pc, #24]	; (db464 <_Z16_fetch_usbserialv+0x48>)
   db44c:	4803      	ldr	r0, [pc, #12]	; (db45c <_Z16_fetch_usbserialv+0x40>)
   db44e:	f000 fd49 	bl	dbee4 <__aeabi_atexit>
	return _usbserial;
}
   db452:	4802      	ldr	r0, [pc, #8]	; (db45c <_Z16_fetch_usbserialv+0x40>)
   db454:	b007      	add	sp, #28
   db456:	bd30      	pop	{r4, r5, pc}
   db458:	2003e3c4 	.word	0x2003e3c4
   db45c:	2003e3c8 	.word	0x2003e3c8
   db460:	2003d460 	.word	0x2003d460
   db464:	000db355 	.word	0x000db355

000db468 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   db468:	2200      	movs	r2, #0
   db46a:	4611      	mov	r1, r2
   db46c:	6840      	ldr	r0, [r0, #4]
   db46e:	f7fc be6f 	b.w	d8150 <network_ready>

000db472 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db472:	2200      	movs	r2, #0
   db474:	4611      	mov	r1, r2
   db476:	6840      	ldr	r0, [r0, #4]
   db478:	f7fc be8a 	b.w	d8190 <network_listening>

000db47c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   db47c:	2200      	movs	r2, #0
   db47e:	4611      	mov	r1, r2
   db480:	6840      	ldr	r0, [r0, #4]
   db482:	f7fc be95 	b.w	d81b0 <network_get_listen_timeout>

000db486 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   db486:	2200      	movs	r2, #0
   db488:	6840      	ldr	r0, [r0, #4]
   db48a:	f7fc be89 	b.w	d81a0 <network_set_listen_timeout>

000db48e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   db48e:	2200      	movs	r2, #0
   db490:	f081 0101 	eor.w	r1, r1, #1
   db494:	6840      	ldr	r0, [r0, #4]
   db496:	f7fc be73 	b.w	d8180 <network_listen>

000db49a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   db49a:	2300      	movs	r3, #0
   db49c:	461a      	mov	r2, r3
   db49e:	4619      	mov	r1, r3
   db4a0:	6840      	ldr	r0, [r0, #4]
   db4a2:	f7fc be65 	b.w	d8170 <network_off>

000db4a6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   db4a6:	2300      	movs	r3, #0
   db4a8:	461a      	mov	r2, r3
   db4aa:	4619      	mov	r1, r3
   db4ac:	6840      	ldr	r0, [r0, #4]
   db4ae:	f7fc be57 	b.w	d8160 <network_on>

000db4b2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   db4b2:	2200      	movs	r2, #0
   db4b4:	4611      	mov	r1, r2
   db4b6:	6840      	ldr	r0, [r0, #4]
   db4b8:	f7fc be3a 	b.w	d8130 <network_connecting>

000db4bc <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db4bc:	2200      	movs	r2, #0
   db4be:	2102      	movs	r1, #2
   db4c0:	6840      	ldr	r0, [r0, #4]
   db4c2:	f7fc be3d 	b.w	d8140 <network_disconnect>

000db4c6 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   db4c6:	2300      	movs	r3, #0
   db4c8:	461a      	mov	r2, r3
   db4ca:	6840      	ldr	r0, [r0, #4]
   db4cc:	f7fc be28 	b.w	d8120 <network_connect>

000db4d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   db4d0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   db4d2:	4c08      	ldr	r4, [pc, #32]	; (db4f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   db4d4:	2528      	movs	r5, #40	; 0x28
   db4d6:	462a      	mov	r2, r5
   db4d8:	2100      	movs	r1, #0
   db4da:	4620      	mov	r0, r4
   db4dc:	f001 fca9 	bl	dce32 <memset>
        cid = -1;
   db4e0:	f04f 33ff 	mov.w	r3, #4294967295
   db4e4:	6063      	str	r3, [r4, #4]
   db4e6:	4b04      	ldr	r3, [pc, #16]	; (db4f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   db4e8:	8025      	strh	r5, [r4, #0]
   db4ea:	2204      	movs	r2, #4
   db4ec:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   db4ee:	4a03      	ldr	r2, [pc, #12]	; (db4fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   db4f0:	601a      	str	r2, [r3, #0]
   db4f2:	bd38      	pop	{r3, r4, r5, pc}
   db4f4:	2003e3e4 	.word	0x2003e3e4
   db4f8:	2003e3dc 	.word	0x2003e3dc
   db4fc:	000dfc3c 	.word	0x000dfc3c

000db500 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   db500:	4770      	bx	lr

000db502 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db502:	7441      	strb	r1, [r0, #17]
   db504:	4770      	bx	lr

000db506 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   db506:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   db508:	7c00      	ldrb	r0, [r0, #16]
   db50a:	f7fc fce3 	bl	d7ed4 <HAL_USART_Available_Data_For_Write>
}
   db50e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db512:	bd08      	pop	{r3, pc}

000db514 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   db514:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   db516:	7c00      	ldrb	r0, [r0, #16]
   db518:	f7fc fcb4 	bl	d7e84 <HAL_USART_Available_Data>
}
   db51c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db520:	bd08      	pop	{r3, pc}

000db522 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   db522:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   db524:	7c00      	ldrb	r0, [r0, #16]
   db526:	f7fc fcbd 	bl	d7ea4 <HAL_USART_Peek_Data>
}
   db52a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db52e:	bf28      	it	cs
   db530:	f04f 30ff 	movcs.w	r0, #4294967295
   db534:	bd08      	pop	{r3, pc}

000db536 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   db536:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   db538:	7c00      	ldrb	r0, [r0, #16]
   db53a:	f7fc fcab 	bl	d7e94 <HAL_USART_Read_Data>
}
   db53e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db542:	bf28      	it	cs
   db544:	f04f 30ff 	movcs.w	r0, #4294967295
   db548:	bd08      	pop	{r3, pc}

000db54a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   db54a:	7c00      	ldrb	r0, [r0, #16]
   db54c:	f7fc bcb2 	b.w	d7eb4 <HAL_USART_Flush_Data>

000db550 <_ZN11USARTSerialD0Ev>:
   db550:	b510      	push	{r4, lr}
   db552:	2114      	movs	r1, #20
   db554:	4604      	mov	r4, r0
   db556:	f000 fcd3 	bl	dbf00 <_ZdlPvj>
   db55a:	4620      	mov	r0, r4
   db55c:	bd10      	pop	{r4, pc}

000db55e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   db55e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   db560:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   db562:	4604      	mov	r4, r0
   db564:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   db566:	b925      	cbnz	r5, db572 <_ZN11USARTSerial5writeEh+0x14>
   db568:	7c00      	ldrb	r0, [r0, #16]
   db56a:	f7fc fcb3 	bl	d7ed4 <HAL_USART_Available_Data_For_Write>
   db56e:	2800      	cmp	r0, #0
   db570:	dd05      	ble.n	db57e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   db572:	4631      	mov	r1, r6
   db574:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   db576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   db57a:	f7fc bc7b 	b.w	d7e74 <HAL_USART_Write_Data>
  }
  return 0;
}
   db57e:	4628      	mov	r0, r5
   db580:	bd70      	pop	{r4, r5, r6, pc}
	...

000db584 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   db584:	b510      	push	{r4, lr}
   db586:	4604      	mov	r4, r0
   db588:	4608      	mov	r0, r1
   db58a:	4611      	mov	r1, r2
   db58c:	2200      	movs	r2, #0
   db58e:	6062      	str	r2, [r4, #4]
   db590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db594:	60a2      	str	r2, [r4, #8]
   db596:	4a05      	ldr	r2, [pc, #20]	; (db5ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   db598:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   db59a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   db59c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   db59e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   db5a0:	461a      	mov	r2, r3
   db5a2:	f7fc fc57 	bl	d7e54 <HAL_USART_Init>
}
   db5a6:	4620      	mov	r0, r4
   db5a8:	bd10      	pop	{r4, pc}
   db5aa:	bf00      	nop
   db5ac:	000dfc70 	.word	0x000dfc70

000db5b0 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   db5b0:	2300      	movs	r3, #0
   db5b2:	7c00      	ldrb	r0, [r0, #16]
   db5b4:	f7fc bc96 	b.w	d7ee4 <HAL_USART_BeginConfig>

000db5b8 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   db5b8:	2200      	movs	r2, #0
   db5ba:	f7ff bff9 	b.w	db5b0 <_ZN11USARTSerial5beginEmm>

000db5be <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   db5be:	7c00      	ldrb	r0, [r0, #16]
   db5c0:	f7fc bc50 	b.w	d7e64 <HAL_USART_End>

000db5c4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   db5c4:	7c00      	ldrb	r0, [r0, #16]
   db5c6:	f7fc bc7d 	b.w	d7ec4 <HAL_USART_Is_Enabled>
	...

000db5cc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   db5cc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db5ce:	4d0c      	ldr	r5, [pc, #48]	; (db600 <_Z22__fetch_global_Serial1v+0x34>)
   db5d0:	6829      	ldr	r1, [r5, #0]
   db5d2:	f011 0401 	ands.w	r4, r1, #1
   db5d6:	d111      	bne.n	db5fc <_Z22__fetch_global_Serial1v+0x30>
   db5d8:	4628      	mov	r0, r5
   db5da:	f7f8 fd6f 	bl	d40bc <__cxa_guard_acquire>
   db5de:	b168      	cbz	r0, db5fc <_Z22__fetch_global_Serial1v+0x30>
   db5e0:	4a08      	ldr	r2, [pc, #32]	; (db604 <_Z22__fetch_global_Serial1v+0x38>)
   db5e2:	4b09      	ldr	r3, [pc, #36]	; (db608 <_Z22__fetch_global_Serial1v+0x3c>)
   db5e4:	4809      	ldr	r0, [pc, #36]	; (db60c <_Z22__fetch_global_Serial1v+0x40>)
   db5e6:	4621      	mov	r1, r4
   db5e8:	f7ff ffcc 	bl	db584 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   db5ec:	4628      	mov	r0, r5
   db5ee:	f7f8 fd6a 	bl	d40c6 <__cxa_guard_release>
   db5f2:	4a07      	ldr	r2, [pc, #28]	; (db610 <_Z22__fetch_global_Serial1v+0x44>)
   db5f4:	4907      	ldr	r1, [pc, #28]	; (db614 <_Z22__fetch_global_Serial1v+0x48>)
   db5f6:	4805      	ldr	r0, [pc, #20]	; (db60c <_Z22__fetch_global_Serial1v+0x40>)
   db5f8:	f000 fc74 	bl	dbee4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db5fc:	4803      	ldr	r0, [pc, #12]	; (db60c <_Z22__fetch_global_Serial1v+0x40>)
   db5fe:	bd38      	pop	{r3, r4, r5, pc}
   db600:	2003e4a4 	.word	0x2003e4a4
   db604:	2003e4a8 	.word	0x2003e4a8
   db608:	2003e420 	.word	0x2003e420
   db60c:	2003e40c 	.word	0x2003e40c
   db610:	2003d460 	.word	0x2003d460
   db614:	000db501 	.word	0x000db501

000db618 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   db618:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   db61a:	6883      	ldr	r3, [r0, #8]
   db61c:	4604      	mov	r4, r0
   db61e:	b90b      	cbnz	r3, db624 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   db620:	f000 fc81 	bl	dbf26 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db624:	68c3      	ldr	r3, [r0, #12]
   db626:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   db628:	68a3      	ldr	r3, [r4, #8]
   db62a:	b11b      	cbz	r3, db634 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db62c:	2203      	movs	r2, #3
   db62e:	4621      	mov	r1, r4
   db630:	4620      	mov	r0, r4
   db632:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   db634:	4620      	mov	r0, r4
   db636:	2110      	movs	r1, #16
}
   db638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   db63c:	f000 bc60 	b.w	dbf00 <_ZdlPvj>

000db640 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   db640:	4770      	bx	lr

000db642 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   db642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db644:	4606      	mov	r6, r0
   db646:	4615      	mov	r5, r2
   db648:	460c      	mov	r4, r1
   db64a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db64c:	42bc      	cmp	r4, r7
   db64e:	d006      	beq.n	db65e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   db650:	6833      	ldr	r3, [r6, #0]
   db652:	f814 1b01 	ldrb.w	r1, [r4], #1
   db656:	689b      	ldr	r3, [r3, #8]
   db658:	4630      	mov	r0, r6
   db65a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db65c:	e7f6      	b.n	db64c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   db65e:	4628      	mov	r0, r5
   db660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db662 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   db662:	2200      	movs	r2, #0
   db664:	7c00      	ldrb	r0, [r0, #16]
   db666:	f7fc bc65 	b.w	d7f34 <HAL_I2C_Write_Data>

000db66a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   db66a:	2100      	movs	r1, #0
   db66c:	7c00      	ldrb	r0, [r0, #16]
   db66e:	f7fc bc69 	b.w	d7f44 <HAL_I2C_Available_Data>

000db672 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   db672:	2100      	movs	r1, #0
   db674:	7c00      	ldrb	r0, [r0, #16]
   db676:	f7fc bc6d 	b.w	d7f54 <HAL_I2C_Read_Data>

000db67a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   db67a:	2100      	movs	r1, #0
   db67c:	7c00      	ldrb	r0, [r0, #16]
   db67e:	f7fc bc71 	b.w	d7f64 <HAL_I2C_Peek_Data>

000db682 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   db682:	2100      	movs	r1, #0
   db684:	7c00      	ldrb	r0, [r0, #16]
   db686:	f7fc bc75 	b.w	d7f74 <HAL_I2C_Flush_Data>

000db68a <_ZN7TwoWireD0Ev>:
   db68a:	b510      	push	{r4, lr}
   db68c:	2114      	movs	r1, #20
   db68e:	4604      	mov	r4, r0
   db690:	f000 fc36 	bl	dbf00 <_ZdlPvj>
   db694:	4620      	mov	r0, r4
   db696:	bd10      	pop	{r4, pc}

000db698 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   db698:	b510      	push	{r4, lr}
   db69a:	4604      	mov	r4, r0
   db69c:	2300      	movs	r3, #0
   db69e:	6063      	str	r3, [r4, #4]
   db6a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db6a4:	60a3      	str	r3, [r4, #8]
   db6a6:	4b04      	ldr	r3, [pc, #16]	; (db6b8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   db6a8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   db6aa:	4608      	mov	r0, r1
   db6ac:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   db6ae:	4611      	mov	r1, r2
   db6b0:	f7fc fc70 	bl	d7f94 <HAL_I2C_Init>
}
   db6b4:	4620      	mov	r0, r4
   db6b6:	bd10      	pop	{r4, pc}
   db6b8:	000dfca0 	.word	0x000dfca0

000db6bc <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   db6bc:	2200      	movs	r2, #0
   db6be:	7c00      	ldrb	r0, [r0, #16]
   db6c0:	f7fc bc18 	b.w	d7ef4 <HAL_I2C_Set_Speed>

000db6c4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   db6c4:	2300      	movs	r3, #0
   db6c6:	461a      	mov	r2, r3
   db6c8:	4619      	mov	r1, r3
   db6ca:	7c00      	ldrb	r0, [r0, #16]
   db6cc:	f7fc bc1a 	b.w	d7f04 <HAL_I2C_Begin>

000db6d0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   db6d0:	b570      	push	{r4, r5, r6, lr}
   db6d2:	460c      	mov	r4, r1
   db6d4:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   db6d6:	2514      	movs	r5, #20
   db6d8:	4606      	mov	r6, r0
   db6da:	462a      	mov	r2, r5
   db6dc:	2100      	movs	r1, #0
   db6de:	a801      	add	r0, sp, #4
   db6e0:	f001 fba7 	bl	dce32 <memset>
   db6e4:	7823      	ldrb	r3, [r4, #0]
   db6e6:	f88d 3008 	strb.w	r3, [sp, #8]
   db6ea:	6863      	ldr	r3, [r4, #4]
   db6ec:	9303      	str	r3, [sp, #12]
   db6ee:	68e3      	ldr	r3, [r4, #12]
   db6f0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   db6f2:	2200      	movs	r2, #0
   db6f4:	7a23      	ldrb	r3, [r4, #8]
   db6f6:	7c30      	ldrb	r0, [r6, #16]
   db6f8:	f8ad 5004 	strh.w	r5, [sp, #4]
   db6fc:	a901      	add	r1, sp, #4
   db6fe:	9305      	str	r3, [sp, #20]
   db700:	f7fc fc50 	bl	d7fa4 <HAL_I2C_Request_Data_Ex>
}
   db704:	b006      	add	sp, #24
   db706:	bd70      	pop	{r4, r5, r6, pc}

000db708 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   db708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   db70a:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db70c:	f88d 1000 	strb.w	r1, [sp]
   db710:	f04f 0164 	mov.w	r1, #100	; 0x64
   db714:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   db716:	bf18      	it	ne
   db718:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   db71a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   db71c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   db71e:	f88d 3008 	strb.w	r3, [sp, #8]
   db722:	f7ff ffd5 	bl	db6d0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   db726:	b005      	add	sp, #20
   db728:	f85d fb04 	ldr.w	pc, [sp], #4

000db72c <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   db72c:	2301      	movs	r3, #1
   db72e:	f7ff bfeb 	b.w	db708 <_ZN7TwoWire11requestFromEhjh>

000db732 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   db732:	2200      	movs	r2, #0
   db734:	7c00      	ldrb	r0, [r0, #16]
   db736:	f7fc bbed 	b.w	d7f14 <HAL_I2C_Begin_Transmission>

000db73a <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   db73a:	b2c9      	uxtb	r1, r1
   db73c:	f7ff bff9 	b.w	db732 <_ZN7TwoWire17beginTransmissionEh>

000db740 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   db740:	2200      	movs	r2, #0
   db742:	7c00      	ldrb	r0, [r0, #16]
   db744:	f7fc bbee 	b.w	d7f24 <HAL_I2C_End_Transmission>

000db748 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   db748:	2101      	movs	r1, #1
   db74a:	f7ff bff9 	b.w	db740 <_ZN7TwoWire15endTransmissionEh>

000db74e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   db74e:	2100      	movs	r1, #0
   db750:	7c00      	ldrb	r0, [r0, #16]
   db752:	f7fc bc17 	b.w	d7f84 <HAL_I2C_Is_Enabled>

000db756 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db756:	2200      	movs	r2, #0
   db758:	4611      	mov	r1, r2
   db75a:	6840      	ldr	r0, [r0, #4]
   db75c:	f7fc bd18 	b.w	d8190 <network_listening>

000db760 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   db760:	2200      	movs	r2, #0
   db762:	4611      	mov	r1, r2
   db764:	6840      	ldr	r0, [r0, #4]
   db766:	f7fc bd23 	b.w	d81b0 <network_get_listen_timeout>

000db76a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   db76a:	2200      	movs	r2, #0
   db76c:	6840      	ldr	r0, [r0, #4]
   db76e:	f7fc bd17 	b.w	d81a0 <network_set_listen_timeout>

000db772 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   db772:	2200      	movs	r2, #0
   db774:	f081 0101 	eor.w	r1, r1, #1
   db778:	6840      	ldr	r0, [r0, #4]
   db77a:	f7fc bd01 	b.w	d8180 <network_listen>

000db77e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   db77e:	2300      	movs	r3, #0
   db780:	461a      	mov	r2, r3
   db782:	2101      	movs	r1, #1
   db784:	6840      	ldr	r0, [r0, #4]
   db786:	f7fc bcf3 	b.w	d8170 <network_off>

000db78a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   db78a:	2300      	movs	r3, #0
   db78c:	461a      	mov	r2, r3
   db78e:	4619      	mov	r1, r3
   db790:	6840      	ldr	r0, [r0, #4]
   db792:	f7fc bce5 	b.w	d8160 <network_on>

000db796 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   db796:	2200      	movs	r2, #0
   db798:	4611      	mov	r1, r2
   db79a:	6840      	ldr	r0, [r0, #4]
   db79c:	f7fc bcd8 	b.w	d8150 <network_ready>

000db7a0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   db7a0:	2200      	movs	r2, #0
   db7a2:	4611      	mov	r1, r2
   db7a4:	6840      	ldr	r0, [r0, #4]
   db7a6:	f7fc bcc3 	b.w	d8130 <network_connecting>

000db7aa <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db7aa:	2200      	movs	r2, #0
   db7ac:	2102      	movs	r1, #2
   db7ae:	6840      	ldr	r0, [r0, #4]
   db7b0:	f7fc bcc6 	b.w	d8140 <network_disconnect>

000db7b4 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   db7b4:	2300      	movs	r3, #0
   db7b6:	461a      	mov	r2, r3
   db7b8:	6840      	ldr	r0, [r0, #4]
   db7ba:	f7fc bcb1 	b.w	d8120 <network_connect>

000db7be <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   db7be:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db7c0:	4605      	mov	r5, r0
   db7c2:	b188      	cbz	r0, db7e8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db7c4:	6804      	ldr	r4, [r0, #0]
   db7c6:	b14c      	cbz	r4, db7dc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   db7c8:	68a3      	ldr	r3, [r4, #8]
   db7ca:	b11b      	cbz	r3, db7d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db7cc:	2203      	movs	r2, #3
   db7ce:	4621      	mov	r1, r4
   db7d0:	4620      	mov	r0, r4
   db7d2:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db7d4:	2110      	movs	r1, #16
   db7d6:	4620      	mov	r0, r4
   db7d8:	f000 fb92 	bl	dbf00 <_ZdlPvj>
   db7dc:	4628      	mov	r0, r5
   db7de:	2114      	movs	r1, #20
      }
   db7e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db7e4:	f000 bb8c 	b.w	dbf00 <_ZdlPvj>
   db7e8:	bd38      	pop	{r3, r4, r5, pc}

000db7ea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   db7ea:	b110      	cbz	r0, db7f2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   db7ec:	6803      	ldr	r3, [r0, #0]
   db7ee:	685b      	ldr	r3, [r3, #4]
   db7f0:	4718      	bx	r3
   db7f2:	4770      	bx	lr

000db7f4 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   db7f4:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   db7f6:	6803      	ldr	r3, [r0, #0]
   db7f8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   db7fa:	b1bb      	cbz	r3, db82c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   db7fc:	6858      	ldr	r0, [r3, #4]
   db7fe:	f7fc fab1 	bl	d7d64 <os_thread_is_current>
   db802:	b978      	cbnz	r0, db824 <_ZN6ThreadD1Ev+0x30>
   db804:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   db806:	7c5a      	ldrb	r2, [r3, #17]
   db808:	b912      	cbnz	r2, db810 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   db80a:	6858      	ldr	r0, [r3, #4]
   db80c:	f7fc faba 	bl	d7d84 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   db810:	6823      	ldr	r3, [r4, #0]
   db812:	6858      	ldr	r0, [r3, #4]
   db814:	f7fc fabe 	bl	d7d94 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db818:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   db81a:	2300      	movs	r3, #0
   db81c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   db81e:	b128      	cbz	r0, db82c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   db820:	f7ff ffcd 	bl	db7be <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db824:	6820      	ldr	r0, [r4, #0]
   db826:	b108      	cbz	r0, db82c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   db828:	f7ff ffc9 	bl	db7be <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   db82c:	4620      	mov	r0, r4
   db82e:	bd10      	pop	{r4, pc}

000db830 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   db830:	b538      	push	{r3, r4, r5, lr}
   db832:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db834:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   db838:	b108      	cbz	r0, db83e <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   db83a:	f7f8 fc32 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   db83e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   db842:	b108      	cbz	r0, db848 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   db844:	f7fc fade 	bl	d7e04 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db848:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   db84c:	b135      	cbz	r5, db85c <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db84e:	4628      	mov	r0, r5
   db850:	f7ff ffd0 	bl	db7f4 <_ZN6ThreadD1Ev>
   db854:	2104      	movs	r1, #4
   db856:	4628      	mov	r0, r5
   db858:	f000 fb52 	bl	dbf00 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db85c:	6820      	ldr	r0, [r4, #0]
   db85e:	b108      	cbz	r0, db864 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   db860:	f7ff ffc3 	bl	db7ea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   db864:	4620      	mov	r0, r4
   db866:	bd38      	pop	{r3, r4, r5, pc}

000db868 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   db868:	b510      	push	{r4, lr}
   db86a:	4b04      	ldr	r3, [pc, #16]	; (db87c <_ZN5spark9MeshClassD1Ev+0x14>)
   db86c:	4604      	mov	r4, r0
   db86e:	f840 3b08 	str.w	r3, [r0], #8
   db872:	f7ff ffdd 	bl	db830 <_ZN5spark11MeshPublishD1Ev>
   db876:	4620      	mov	r0, r4
   db878:	bd10      	pop	{r4, pc}
   db87a:	bf00      	nop
   db87c:	000dfcc8 	.word	0x000dfcc8

000db880 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   db880:	b538      	push	{r3, r4, r5, lr}
   db882:	4c0e      	ldr	r4, [pc, #56]	; (db8bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   db884:	4b0e      	ldr	r3, [pc, #56]	; (db8c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   db886:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   db888:	2500      	movs	r5, #0
   db88a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   db88c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   db890:	6063      	str	r3, [r4, #4]
   db892:	60a5      	str	r5, [r4, #8]
   db894:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   db898:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   db89c:	f7fc faaa 	bl	d7df4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   db8a0:	4b08      	ldr	r3, [pc, #32]	; (db8c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   db8a2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db8a6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   db8aa:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   db8ac:	4620      	mov	r0, r4
   db8ae:	4a06      	ldr	r2, [pc, #24]	; (db8c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   db8b0:	4906      	ldr	r1, [pc, #24]	; (db8cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   db8b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   db8b6:	f000 bb15 	b.w	dbee4 <__aeabi_atexit>
   db8ba:	bf00      	nop
   db8bc:	2003e52c 	.word	0x2003e52c
   db8c0:	000dfcfc 	.word	0x000dfcfc
   db8c4:	000dfcc8 	.word	0x000dfcc8
   db8c8:	2003d460 	.word	0x2003d460
   db8cc:	000db869 	.word	0x000db869

000db8d0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   db8d0:	2300      	movs	r3, #0
   db8d2:	461a      	mov	r2, r3
   db8d4:	6840      	ldr	r0, [r0, #4]
   db8d6:	f7fc bc23 	b.w	d8120 <network_connect>

000db8da <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   db8da:	2200      	movs	r2, #0
   db8dc:	2102      	movs	r1, #2
   db8de:	6840      	ldr	r0, [r0, #4]
   db8e0:	f7fc bc2e 	b.w	d8140 <network_disconnect>

000db8e4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   db8e4:	2200      	movs	r2, #0
   db8e6:	4611      	mov	r1, r2
   db8e8:	6840      	ldr	r0, [r0, #4]
   db8ea:	f7fc bc21 	b.w	d8130 <network_connecting>

000db8ee <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   db8ee:	2200      	movs	r2, #0
   db8f0:	4611      	mov	r1, r2
   db8f2:	6840      	ldr	r0, [r0, #4]
   db8f4:	f7fc bc2c 	b.w	d8150 <network_ready>

000db8f8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   db8f8:	2300      	movs	r3, #0
   db8fa:	461a      	mov	r2, r3
   db8fc:	4619      	mov	r1, r3
   db8fe:	6840      	ldr	r0, [r0, #4]
   db900:	f7fc bc2e 	b.w	d8160 <network_on>

000db904 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   db904:	2300      	movs	r3, #0
   db906:	461a      	mov	r2, r3
   db908:	4619      	mov	r1, r3
   db90a:	6840      	ldr	r0, [r0, #4]
   db90c:	f7fc bc30 	b.w	d8170 <network_off>

000db910 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   db910:	2200      	movs	r2, #0
   db912:	f081 0101 	eor.w	r1, r1, #1
   db916:	6840      	ldr	r0, [r0, #4]
   db918:	f7fc bc32 	b.w	d8180 <network_listen>

000db91c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   db91c:	2200      	movs	r2, #0
   db91e:	6840      	ldr	r0, [r0, #4]
   db920:	f7fc bc3e 	b.w	d81a0 <network_set_listen_timeout>

000db924 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   db924:	2200      	movs	r2, #0
   db926:	4611      	mov	r1, r2
   db928:	6840      	ldr	r0, [r0, #4]
   db92a:	f7fc bc41 	b.w	d81b0 <network_get_listen_timeout>

000db92e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   db92e:	2200      	movs	r2, #0
   db930:	4611      	mov	r1, r2
   db932:	6840      	ldr	r0, [r0, #4]
   db934:	f7fc bc2c 	b.w	d8190 <network_listening>

000db938 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   db938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   db93c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   db93e:	b095      	sub	sp, #84	; 0x54
   db940:	4616      	mov	r6, r2
   db942:	460d      	mov	r5, r1
   db944:	4607      	mov	r7, r0
    IPAddress addr;
   db946:	f7ff fccb 	bl	db2e0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   db94a:	4621      	mov	r1, r4
   db94c:	2220      	movs	r2, #32
   db94e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   db950:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   db952:	f001 fa6e 	bl	dce32 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   db956:	2340      	movs	r3, #64	; 0x40
   db958:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   db95a:	4621      	mov	r1, r4
   db95c:	466b      	mov	r3, sp
   db95e:	aa0c      	add	r2, sp, #48	; 0x30
   db960:	4630      	mov	r0, r6
   db962:	f7fc f8cd 	bl	d7b00 <netdb_getaddrinfo>
    if (!r) {
   db966:	4604      	mov	r4, r0
   db968:	2800      	cmp	r0, #0
   db96a:	d144      	bne.n	db9f6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db96c:	4602      	mov	r2, r0
   db96e:	2101      	movs	r1, #1
   db970:	6868      	ldr	r0, [r5, #4]
   db972:	f7fc fbed 	bl	d8150 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db976:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db978:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db97a:	4622      	mov	r2, r4
   db97c:	6868      	ldr	r0, [r5, #4]
   db97e:	f7fc fbe7 	bl	d8150 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db982:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db984:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   db986:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db988:	2e00      	cmp	r6, #0
   db98a:	d034      	beq.n	db9f6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   db98c:	2900      	cmp	r1, #0
   db98e:	d132      	bne.n	db9f6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   db990:	6873      	ldr	r3, [r6, #4]
   db992:	2b02      	cmp	r3, #2
   db994:	d002      	beq.n	db99c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   db996:	2b0a      	cmp	r3, #10
   db998:	d009      	beq.n	db9ae <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   db99a:	e02a      	b.n	db9f2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   db99c:	f1b8 0f00 	cmp.w	r8, #0
   db9a0:	d027      	beq.n	db9f2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   db9a2:	6971      	ldr	r1, [r6, #20]
   db9a4:	4638      	mov	r0, r7
   db9a6:	3104      	adds	r1, #4
   db9a8:	f7ff fcc7 	bl	db33a <_ZN9IPAddressaSEPKh>
   db9ac:	e020      	b.n	db9f0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   db9ae:	f1b9 0f00 	cmp.w	r9, #0
   db9b2:	d01e      	beq.n	db9f2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   db9b4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   db9b6:	2211      	movs	r2, #17
   db9b8:	a801      	add	r0, sp, #4
   db9ba:	f001 fa3a 	bl	dce32 <memset>
                    a.v = 6;
   db9be:	2306      	movs	r3, #6
   db9c0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   db9c4:	ad01      	add	r5, sp, #4
   db9c6:	f104 0308 	add.w	r3, r4, #8
   db9ca:	3418      	adds	r4, #24
   db9cc:	6818      	ldr	r0, [r3, #0]
   db9ce:	6859      	ldr	r1, [r3, #4]
   db9d0:	462a      	mov	r2, r5
   db9d2:	c203      	stmia	r2!, {r0, r1}
   db9d4:	3308      	adds	r3, #8
   db9d6:	42a3      	cmp	r3, r4
   db9d8:	4615      	mov	r5, r2
   db9da:	d1f7      	bne.n	db9cc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   db9dc:	a901      	add	r1, sp, #4
   db9de:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   db9e0:	ad07      	add	r5, sp, #28
   db9e2:	f7ff fc8b 	bl	db2fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   db9e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db9e8:	1d3c      	adds	r4, r7, #4
   db9ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db9ec:	682b      	ldr	r3, [r5, #0]
   db9ee:	7023      	strb	r3, [r4, #0]
                    ok = true;
   db9f0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db9f2:	69f6      	ldr	r6, [r6, #28]
   db9f4:	e7c8      	b.n	db988 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   db9f6:	9800      	ldr	r0, [sp, #0]
   db9f8:	f7fc f87a 	bl	d7af0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   db9fc:	4638      	mov	r0, r7
   db9fe:	b015      	add	sp, #84	; 0x54
   dba00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dba04 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   dba04:	4b02      	ldr	r3, [pc, #8]	; (dba10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   dba06:	4a03      	ldr	r2, [pc, #12]	; (dba14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   dba08:	601a      	str	r2, [r3, #0]
   dba0a:	2200      	movs	r2, #0
   dba0c:	605a      	str	r2, [r3, #4]
   dba0e:	4770      	bx	lr
   dba10:	2003e700 	.word	0x2003e700
   dba14:	000dfcfc 	.word	0x000dfcfc

000dba18 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   dba18:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   dba1c:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   dba1e:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   dba22:	2901      	cmp	r1, #1
   dba24:	4610      	mov	r0, r2
   dba26:	d104      	bne.n	dba32 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   dba28:	f852 1c04 	ldr.w	r1, [r2, #-4]
   dba2c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   dba30:	e004      	b.n	dba3c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   dba32:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   dba34:	bf04      	itt	eq
   dba36:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   dba3a:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   dba3c:	3b01      	subs	r3, #1
   dba3e:	f102 0210 	add.w	r2, r2, #16
   dba42:	d1ec      	bne.n	dba1e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   dba44:	4770      	bx	lr

000dba46 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   dba46:	b40e      	push	{r1, r2, r3}
   dba48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dba4c:	b087      	sub	sp, #28
   dba4e:	af00      	add	r7, sp, #0
   dba50:	f107 0434 	add.w	r4, r7, #52	; 0x34
   dba54:	4605      	mov	r5, r0
   dba56:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   dba5a:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   dba5c:	4623      	mov	r3, r4
   dba5e:	4632      	mov	r2, r6
   dba60:	2110      	movs	r1, #16
   dba62:	f107 0008 	add.w	r0, r7, #8
   dba66:	f7fc fc0b 	bl	d8280 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   dba6a:	280f      	cmp	r0, #15
   dba6c:	d916      	bls.n	dba9c <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   dba6e:	f100 0308 	add.w	r3, r0, #8
   dba72:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   dba76:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   dba78:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   dba7c:	4632      	mov	r2, r6
   dba7e:	1c41      	adds	r1, r0, #1
   dba80:	4623      	mov	r3, r4
   dba82:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   dba84:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   dba86:	f7fc fbfb 	bl	d8280 <vsnprintf>
        va_end(args);
        if (n > 0) {
   dba8a:	1e02      	subs	r2, r0, #0
   dba8c:	dd04      	ble.n	dba98 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   dba8e:	682b      	ldr	r3, [r5, #0]
   dba90:	4669      	mov	r1, sp
   dba92:	689b      	ldr	r3, [r3, #8]
   dba94:	4628      	mov	r0, r5
   dba96:	4798      	blx	r3
   dba98:	46c5      	mov	sp, r8
   dba9a:	e007      	b.n	dbaac <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   dba9c:	b130      	cbz	r0, dbaac <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   dba9e:	682b      	ldr	r3, [r5, #0]
   dbaa0:	4602      	mov	r2, r0
   dbaa2:	689b      	ldr	r3, [r3, #8]
   dbaa4:	f107 0108 	add.w	r1, r7, #8
   dbaa8:	4628      	mov	r0, r5
   dbaaa:	4798      	blx	r3
    }
}
   dbaac:	371c      	adds	r7, #28
   dbaae:	46bd      	mov	sp, r7
   dbab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   dbab4:	b003      	add	sp, #12
   dbab6:	4770      	bx	lr

000dbab8 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   dbab8:	b513      	push	{r0, r1, r4, lr}
   dbaba:	ab02      	add	r3, sp, #8
    write(&c, 1);
   dbabc:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   dbabe:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   dbac2:	6894      	ldr	r4, [r2, #8]
   dbac4:	4619      	mov	r1, r3
   dbac6:	2201      	movs	r2, #1
   dbac8:	47a0      	blx	r4
}
   dbaca:	b002      	add	sp, #8
   dbacc:	bd10      	pop	{r4, pc}

000dbace <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   dbace:	6883      	ldr	r3, [r0, #8]
   dbad0:	b1fb      	cbz	r3, dbb12 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   dbad2:	781a      	ldrb	r2, [r3, #0]
   dbad4:	2a03      	cmp	r2, #3
   dbad6:	d81a      	bhi.n	dbb0e <_ZNK5spark9JSONValue4typeEv+0x40>
   dbad8:	e8df f002 	tbb	[pc, r2]
   dbadc:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   dbae0:	2005      	movs	r0, #5
   dbae2:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   dbae4:	6802      	ldr	r2, [r0, #0]
   dbae6:	685b      	ldr	r3, [r3, #4]
   dbae8:	6852      	ldr	r2, [r2, #4]
   dbaea:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   dbaec:	282d      	cmp	r0, #45	; 0x2d
   dbaee:	d014      	beq.n	dbb1a <_ZNK5spark9JSONValue4typeEv+0x4c>
   dbaf0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dbaf4:	2b09      	cmp	r3, #9
   dbaf6:	d910      	bls.n	dbb1a <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   dbaf8:	2874      	cmp	r0, #116	; 0x74
   dbafa:	d010      	beq.n	dbb1e <_ZNK5spark9JSONValue4typeEv+0x50>
   dbafc:	2866      	cmp	r0, #102	; 0x66
   dbafe:	d00e      	beq.n	dbb1e <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   dbb00:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   dbb04:	4258      	negs	r0, r3
   dbb06:	4158      	adcs	r0, r3
   dbb08:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   dbb0a:	2006      	movs	r0, #6
   dbb0c:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   dbb0e:	2000      	movs	r0, #0
   dbb10:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   dbb12:	4618      	mov	r0, r3
   dbb14:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   dbb16:	2004      	movs	r0, #4
   dbb18:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   dbb1a:	2003      	movs	r0, #3
   dbb1c:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   dbb1e:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   dbb20:	4770      	bx	lr

000dbb22 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   dbb22:	b510      	push	{r4, lr}
   dbb24:	4604      	mov	r4, r0
    switch (type()) {
   dbb26:	f7ff ffd2 	bl	dbace <_ZNK5spark9JSONValue4typeEv>
   dbb2a:	2802      	cmp	r0, #2
   dbb2c:	d00d      	beq.n	dbb4a <_ZNK5spark9JSONValue5toIntEv+0x28>
   dbb2e:	d316      	bcc.n	dbb5e <_ZNK5spark9JSONValue5toIntEv+0x3c>
   dbb30:	2804      	cmp	r0, #4
   dbb32:	d814      	bhi.n	dbb5e <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   dbb34:	6822      	ldr	r2, [r4, #0]
   dbb36:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   dbb38:	6850      	ldr	r0, [r2, #4]
   dbb3a:	685b      	ldr	r3, [r3, #4]
   dbb3c:	220a      	movs	r2, #10
   dbb3e:	2100      	movs	r1, #0
   dbb40:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   dbb42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   dbb46:	f002 b911 	b.w	ddd6c <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   dbb4a:	6822      	ldr	r2, [r4, #0]
   dbb4c:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   dbb4e:	6852      	ldr	r2, [r2, #4]
   dbb50:	685b      	ldr	r3, [r3, #4]
   dbb52:	5cd0      	ldrb	r0, [r2, r3]
   dbb54:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   dbb58:	4258      	negs	r0, r3
   dbb5a:	4158      	adcs	r0, r3
   dbb5c:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   dbb5e:	2000      	movs	r0, #0
    }
}
   dbb60:	bd10      	pop	{r4, pc}

000dbb62 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   dbb62:	b510      	push	{r4, lr}
    if (!n_) {
   dbb64:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   dbb66:	4604      	mov	r4, r0
    if (!n_) {
   dbb68:	b15b      	cbz	r3, dbb82 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   dbb6a:	6880      	ldr	r0, [r0, #8]
   dbb6c:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   dbb6e:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   dbb70:	3010      	adds	r0, #16
   dbb72:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   dbb74:	6120      	str	r0, [r4, #16]
    --n_;
   dbb76:	6163      	str	r3, [r4, #20]
    if (n_) {
   dbb78:	b12b      	cbz	r3, dbb86 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   dbb7a:	f7ff ff4d 	bl	dba18 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   dbb7e:	60a0      	str	r0, [r4, #8]
   dbb80:	e001      	b.n	dbb86 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   dbb82:	4618      	mov	r0, r3
   dbb84:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   dbb86:	2001      	movs	r0, #1
}
   dbb88:	bd10      	pop	{r4, pc}

000dbb8a <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   dbb8a:	b510      	push	{r4, lr}
    write('}');
   dbb8c:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   dbb8e:	4604      	mov	r4, r0
    write('}');
   dbb90:	f7ff ff92 	bl	dbab8 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   dbb94:	2301      	movs	r3, #1
   dbb96:	7123      	strb	r3, [r4, #4]
    return *this;
}
   dbb98:	4620      	mov	r0, r4
   dbb9a:	bd10      	pop	{r4, pc}

000dbb9c <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   dbb9c:	b508      	push	{r3, lr}
    switch (state_) {
   dbb9e:	7903      	ldrb	r3, [r0, #4]
   dbba0:	2b01      	cmp	r3, #1
   dbba2:	d002      	beq.n	dbbaa <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   dbba4:	2b02      	cmp	r3, #2
   dbba6:	d002      	beq.n	dbbae <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   dbba8:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   dbbaa:	212c      	movs	r1, #44	; 0x2c
   dbbac:	e000      	b.n	dbbb0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   dbbae:	213a      	movs	r1, #58	; 0x3a
   dbbb0:	f7ff ff82 	bl	dbab8 <_ZN5spark10JSONWriter5writeEc>
   dbbb4:	bd08      	pop	{r3, pc}

000dbbb6 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   dbbb6:	b510      	push	{r4, lr}
   dbbb8:	4604      	mov	r4, r0
    writeSeparator();
   dbbba:	f7ff ffef 	bl	dbb9c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   dbbbe:	4620      	mov	r0, r4
   dbbc0:	217b      	movs	r1, #123	; 0x7b
   dbbc2:	f7ff ff79 	bl	dbab8 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   dbbc6:	2300      	movs	r3, #0
   dbbc8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   dbbca:	4620      	mov	r0, r4
   dbbcc:	bd10      	pop	{r4, pc}
	...

000dbbd0 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   dbbd0:	b538      	push	{r3, r4, r5, lr}
   dbbd2:	4604      	mov	r4, r0
   dbbd4:	460d      	mov	r5, r1
    writeSeparator();
   dbbd6:	f7ff ffe1 	bl	dbb9c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   dbbda:	6823      	ldr	r3, [r4, #0]
   dbbdc:	4904      	ldr	r1, [pc, #16]	; (dbbf0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   dbbde:	68db      	ldr	r3, [r3, #12]
   dbbe0:	4620      	mov	r0, r4
   dbbe2:	462a      	mov	r2, r5
   dbbe4:	4798      	blx	r3
    state_ = NEXT;
   dbbe6:	2301      	movs	r3, #1
   dbbe8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   dbbea:	4620      	mov	r0, r4
   dbbec:	bd38      	pop	{r3, r4, r5, pc}
   dbbee:	bf00      	nop
   dbbf0:	000df3d9 	.word	0x000df3d9

000dbbf4 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   dbbf4:	b538      	push	{r3, r4, r5, lr}
   dbbf6:	4604      	mov	r4, r0
   dbbf8:	460d      	mov	r5, r1
    writeSeparator();
   dbbfa:	f7ff ffcf 	bl	dbb9c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   dbbfe:	6823      	ldr	r3, [r4, #0]
   dbc00:	4904      	ldr	r1, [pc, #16]	; (dbc14 <_ZN5spark10JSONWriter5valueEj+0x20>)
   dbc02:	68db      	ldr	r3, [r3, #12]
   dbc04:	4620      	mov	r0, r4
   dbc06:	462a      	mov	r2, r5
   dbc08:	4798      	blx	r3
    state_ = NEXT;
   dbc0a:	2301      	movs	r3, #1
   dbc0c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   dbc0e:	4620      	mov	r0, r4
   dbc10:	bd38      	pop	{r3, r4, r5, pc}
   dbc12:	bf00      	nop
   dbc14:	000dfd37 	.word	0x000dfd37

000dbc18 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   dbc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dbc1a:	460d      	mov	r5, r1
   dbc1c:	4617      	mov	r7, r2
    write('"');
   dbc1e:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   dbc20:	4604      	mov	r4, r0
   dbc22:	442f      	add	r7, r5
    write('"');
   dbc24:	f7ff ff48 	bl	dbab8 <_ZN5spark10JSONWriter5writeEc>
   dbc28:	462a      	mov	r2, r5
    const char* const end = str + size;
   dbc2a:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   dbc2c:	42ba      	cmp	r2, r7
   dbc2e:	d038      	beq.n	dbca2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   dbc30:	4616      	mov	r6, r2
   dbc32:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   dbc36:	2d22      	cmp	r5, #34	; 0x22
   dbc38:	d003      	beq.n	dbc42 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   dbc3a:	2d5c      	cmp	r5, #92	; 0x5c
   dbc3c:	d001      	beq.n	dbc42 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   dbc3e:	2d1f      	cmp	r5, #31
   dbc40:	d82d      	bhi.n	dbc9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   dbc42:	6823      	ldr	r3, [r4, #0]
   dbc44:	1a52      	subs	r2, r2, r1
   dbc46:	689b      	ldr	r3, [r3, #8]
   dbc48:	4620      	mov	r0, r4
   dbc4a:	4798      	blx	r3
            write('\\');
   dbc4c:	215c      	movs	r1, #92	; 0x5c
   dbc4e:	4620      	mov	r0, r4
   dbc50:	f7ff ff32 	bl	dbab8 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   dbc54:	2d0c      	cmp	r5, #12
   dbc56:	d019      	beq.n	dbc8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   dbc58:	d807      	bhi.n	dbc6a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   dbc5a:	2d09      	cmp	r5, #9
   dbc5c:	d00f      	beq.n	dbc7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   dbc5e:	2d0a      	cmp	r5, #10
   dbc60:	d012      	beq.n	dbc88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   dbc62:	2d08      	cmp	r5, #8
   dbc64:	d114      	bne.n	dbc90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   dbc66:	2162      	movs	r1, #98	; 0x62
   dbc68:	e00a      	b.n	dbc80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   dbc6a:	2d22      	cmp	r5, #34	; 0x22
   dbc6c:	d005      	beq.n	dbc7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   dbc6e:	2d5c      	cmp	r5, #92	; 0x5c
   dbc70:	d003      	beq.n	dbc7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   dbc72:	2d0d      	cmp	r5, #13
   dbc74:	d10c      	bne.n	dbc90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   dbc76:	2172      	movs	r1, #114	; 0x72
   dbc78:	e002      	b.n	dbc80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   dbc7a:	4629      	mov	r1, r5
   dbc7c:	e000      	b.n	dbc80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   dbc7e:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   dbc80:	4620      	mov	r0, r4
   dbc82:	f7ff ff19 	bl	dbab8 <_ZN5spark10JSONWriter5writeEc>
                break;
   dbc86:	e009      	b.n	dbc9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   dbc88:	216e      	movs	r1, #110	; 0x6e
   dbc8a:	e7f9      	b.n	dbc80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   dbc8c:	2166      	movs	r1, #102	; 0x66
   dbc8e:	e7f7      	b.n	dbc80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   dbc90:	6823      	ldr	r3, [r4, #0]
   dbc92:	490a      	ldr	r1, [pc, #40]	; (dbcbc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   dbc94:	68db      	ldr	r3, [r3, #12]
   dbc96:	462a      	mov	r2, r5
   dbc98:	4620      	mov	r0, r4
   dbc9a:	4798      	blx	r3
                break;
            }
            str = s + 1;
   dbc9c:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   dbc9e:	4632      	mov	r2, r6
   dbca0:	e7c4      	b.n	dbc2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   dbca2:	4291      	cmp	r1, r2
   dbca4:	d004      	beq.n	dbcb0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   dbca6:	6823      	ldr	r3, [r4, #0]
   dbca8:	1a52      	subs	r2, r2, r1
   dbcaa:	689d      	ldr	r5, [r3, #8]
   dbcac:	4620      	mov	r0, r4
   dbcae:	47a8      	blx	r5
    }
    write('"');
   dbcb0:	2122      	movs	r1, #34	; 0x22
   dbcb2:	4620      	mov	r0, r4
   dbcb4:	f7ff ff00 	bl	dbab8 <_ZN5spark10JSONWriter5writeEc>
   dbcb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dbcba:	bf00      	nop
   dbcbc:	000dfd48 	.word	0x000dfd48

000dbcc0 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   dbcc0:	b570      	push	{r4, r5, r6, lr}
   dbcc2:	4604      	mov	r4, r0
   dbcc4:	460d      	mov	r5, r1
   dbcc6:	4616      	mov	r6, r2
    writeSeparator();
   dbcc8:	f7ff ff68 	bl	dbb9c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   dbccc:	4620      	mov	r0, r4
   dbcce:	4632      	mov	r2, r6
   dbcd0:	4629      	mov	r1, r5
   dbcd2:	f7ff ffa1 	bl	dbc18 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   dbcd6:	2302      	movs	r3, #2
   dbcd8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   dbcda:	4620      	mov	r0, r4
   dbcdc:	bd70      	pop	{r4, r5, r6, pc}

000dbcde <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   dbcde:	b570      	push	{r4, r5, r6, lr}
   dbce0:	4604      	mov	r4, r0
   dbce2:	460d      	mov	r5, r1
   dbce4:	4616      	mov	r6, r2
    writeSeparator();
   dbce6:	f7ff ff59 	bl	dbb9c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   dbcea:	4620      	mov	r0, r4
   dbcec:	4632      	mov	r2, r6
   dbcee:	4629      	mov	r1, r5
   dbcf0:	f7ff ff92 	bl	dbc18 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   dbcf4:	2301      	movs	r3, #1
   dbcf6:	7123      	strb	r3, [r4, #4]
    return *this;
}
   dbcf8:	4620      	mov	r0, r4
   dbcfa:	bd70      	pop	{r4, r5, r6, pc}

000dbcfc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   dbcfc:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   dbcfe:	2300      	movs	r3, #0
   dbd00:	4604      	mov	r4, r0
   dbd02:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dbd04:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   dbd06:	4810      	ldr	r0, [pc, #64]	; (dbd48 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   dbd08:	60a0      	str	r0, [r4, #8]
   dbd0a:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   dbd0c:	b1d1      	cbz	r1, dbd44 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   dbd0e:	780b      	ldrb	r3, [r1, #0]
   dbd10:	2b03      	cmp	r3, #3
   dbd12:	d006      	beq.n	dbd22 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   dbd14:	b9b3      	cbnz	r3, dbd44 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   dbd16:	6813      	ldr	r3, [r2, #0]
   dbd18:	6858      	ldr	r0, [r3, #4]
   dbd1a:	684b      	ldr	r3, [r1, #4]
   dbd1c:	5cc3      	ldrb	r3, [r0, r3]
   dbd1e:	2b6e      	cmp	r3, #110	; 0x6e
   dbd20:	d008      	beq.n	dbd34 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   dbd22:	6813      	ldr	r3, [r2, #0]
   dbd24:	6858      	ldr	r0, [r3, #4]
   dbd26:	684b      	ldr	r3, [r1, #4]
   dbd28:	4403      	add	r3, r0
   dbd2a:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   dbd2c:	688b      	ldr	r3, [r1, #8]
   dbd2e:	6849      	ldr	r1, [r1, #4]
   dbd30:	1a5b      	subs	r3, r3, r1
   dbd32:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   dbd34:	4611      	mov	r1, r2
   dbd36:	4620      	mov	r0, r4
   dbd38:	f851 3b04 	ldr.w	r3, [r1], #4
   dbd3c:	f840 3b04 	str.w	r3, [r0], #4
   dbd40:	f7fd f984 	bl	d904c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   dbd44:	4620      	mov	r0, r4
   dbd46:	bd10      	pop	{r4, pc}
   dbd48:	000df7fc 	.word	0x000df7fc

000dbd4c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   dbd4c:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   dbd4e:	b510      	push	{r4, lr}
   dbd50:	4604      	mov	r4, r0
   dbd52:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dbd54:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   dbd56:	6083      	str	r3, [r0, #8]
   dbd58:	60c3      	str	r3, [r0, #12]
   dbd5a:	6103      	str	r3, [r0, #16]
   dbd5c:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   dbd5e:	b171      	cbz	r1, dbd7e <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   dbd60:	780b      	ldrb	r3, [r1, #0]
   dbd62:	2b01      	cmp	r3, #1
   dbd64:	d10b      	bne.n	dbd7e <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   dbd66:	f101 0310 	add.w	r3, r1, #16
   dbd6a:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   dbd6c:	68cb      	ldr	r3, [r1, #12]
   dbd6e:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   dbd70:	4611      	mov	r1, r2
   dbd72:	f851 3b04 	ldr.w	r3, [r1], #4
   dbd76:	f840 3b04 	str.w	r3, [r0], #4
   dbd7a:	f7fd f967 	bl	d904c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   dbd7e:	4620      	mov	r0, r4
   dbd80:	bd10      	pop	{r4, pc}

000dbd82 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   dbd82:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   dbd84:	b510      	push	{r4, lr}
   dbd86:	4604      	mov	r4, r0
   dbd88:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dbd8a:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   dbd8c:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   dbd8e:	b131      	cbz	r1, dbd9e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   dbd90:	4611      	mov	r1, r2
   dbd92:	f851 3b04 	ldr.w	r3, [r1], #4
   dbd96:	f840 3b04 	str.w	r3, [r0], #4
   dbd9a:	f7fd f957 	bl	d904c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   dbd9e:	4620      	mov	r0, r4
   dbda0:	bd10      	pop	{r4, pc}
	...

000dbda4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   dbda4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   dbda6:	4e18      	ldr	r6, [pc, #96]	; (dbe08 <pinAvailable+0x64>)
   dbda8:	6831      	ldr	r1, [r6, #0]
   dbdaa:	f011 0501 	ands.w	r5, r1, #1
   dbdae:	4604      	mov	r4, r0
   dbdb0:	d10a      	bne.n	dbdc8 <pinAvailable+0x24>
   dbdb2:	4630      	mov	r0, r6
   dbdb4:	f7f8 f982 	bl	d40bc <__cxa_guard_acquire>
   dbdb8:	b130      	cbz	r0, dbdc8 <pinAvailable+0x24>
   dbdba:	4629      	mov	r1, r5
   dbdbc:	4813      	ldr	r0, [pc, #76]	; (dbe0c <pinAvailable+0x68>)
   dbdbe:	f7fc fae3 	bl	d8388 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   dbdc2:	4630      	mov	r0, r6
   dbdc4:	f7f8 f97f 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   dbdc8:	4810      	ldr	r0, [pc, #64]	; (dbe0c <pinAvailable+0x68>)
   dbdca:	f7fc fbe0 	bl	d858e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   dbdce:	b128      	cbz	r0, dbddc <pinAvailable+0x38>
   dbdd0:	f1a4 030b 	sub.w	r3, r4, #11
   dbdd4:	2b02      	cmp	r3, #2
   dbdd6:	d801      	bhi.n	dbddc <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   dbdd8:	2000      	movs	r0, #0
   dbdda:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   dbddc:	f000 f85c 	bl	dbe98 <_Z19__fetch_global_Wirev>
   dbde0:	f7ff fcb5 	bl	db74e <_ZN7TwoWire9isEnabledEv>
   dbde4:	b108      	cbz	r0, dbdea <pinAvailable+0x46>
   dbde6:	2c01      	cmp	r4, #1
   dbde8:	d9f6      	bls.n	dbdd8 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   dbdea:	f7ff fbef 	bl	db5cc <_Z22__fetch_global_Serial1v>
   dbdee:	f7ff fbe9 	bl	db5c4 <_ZN11USARTSerial9isEnabledEv>
   dbdf2:	b118      	cbz	r0, dbdfc <pinAvailable+0x58>
   dbdf4:	f1a4 0309 	sub.w	r3, r4, #9
   dbdf8:	2b01      	cmp	r3, #1
   dbdfa:	d9ed      	bls.n	dbdd8 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   dbdfc:	2c25      	cmp	r4, #37	; 0x25
   dbdfe:	bf8c      	ite	hi
   dbe00:	2000      	movhi	r0, #0
   dbe02:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   dbe04:	bd70      	pop	{r4, r5, r6, pc}
   dbe06:	bf00      	nop
   dbe08:	2003d470 	.word	0x2003d470
   dbe0c:	2003d474 	.word	0x2003d474

000dbe10 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dbe10:	2825      	cmp	r0, #37	; 0x25
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   dbe12:	b538      	push	{r3, r4, r5, lr}
   dbe14:	4604      	mov	r4, r0
   dbe16:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dbe18:	d80a      	bhi.n	dbe30 <pinMode+0x20>
   dbe1a:	29ff      	cmp	r1, #255	; 0xff
   dbe1c:	d008      	beq.n	dbe30 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dbe1e:	f7ff ffc1 	bl	dbda4 <pinAvailable>
   dbe22:	b128      	cbz	r0, dbe30 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dbe24:	4629      	mov	r1, r5
   dbe26:	4620      	mov	r0, r4
}
   dbe28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dbe2c:	f7fb be78 	b.w	d7b20 <HAL_Pin_Mode>
   dbe30:	bd38      	pop	{r3, r4, r5, pc}

000dbe32 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dbe32:	b538      	push	{r3, r4, r5, lr}
   dbe34:	4604      	mov	r4, r0
   dbe36:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dbe38:	f7fb fe7a 	bl	d7b30 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dbe3c:	28ff      	cmp	r0, #255	; 0xff
   dbe3e:	d010      	beq.n	dbe62 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   dbe40:	2806      	cmp	r0, #6
   dbe42:	d804      	bhi.n	dbe4e <digitalWrite+0x1c>
   dbe44:	234d      	movs	r3, #77	; 0x4d
   dbe46:	fa23 f000 	lsr.w	r0, r3, r0
   dbe4a:	07c3      	lsls	r3, r0, #31
   dbe4c:	d409      	bmi.n	dbe62 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dbe4e:	4620      	mov	r0, r4
   dbe50:	f7ff ffa8 	bl	dbda4 <pinAvailable>
   dbe54:	b128      	cbz	r0, dbe62 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dbe56:	4629      	mov	r1, r5
   dbe58:	4620      	mov	r0, r4
}
   dbe5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   dbe5e:	f7fb be6f 	b.w	d7b40 <HAL_GPIO_Write>
   dbe62:	bd38      	pop	{r3, r4, r5, pc}

000dbe64 <_Z17acquireWireBufferv>:
   dbe64:	b570      	push	{r4, r5, r6, lr}
   dbe66:	4604      	mov	r4, r0
   dbe68:	2514      	movs	r5, #20
   dbe6a:	462a      	mov	r2, r5
   dbe6c:	4e09      	ldr	r6, [pc, #36]	; (dbe94 <_Z17acquireWireBufferv+0x30>)
   dbe6e:	2100      	movs	r1, #0
   dbe70:	f000 ffdf 	bl	dce32 <memset>
   dbe74:	8025      	strh	r5, [r4, #0]
   dbe76:	2520      	movs	r5, #32
   dbe78:	4631      	mov	r1, r6
   dbe7a:	60a5      	str	r5, [r4, #8]
   dbe7c:	6125      	str	r5, [r4, #16]
   dbe7e:	4628      	mov	r0, r5
   dbe80:	f000 f840 	bl	dbf04 <_ZnajRKSt9nothrow_t>
   dbe84:	4631      	mov	r1, r6
   dbe86:	6060      	str	r0, [r4, #4]
   dbe88:	4628      	mov	r0, r5
   dbe8a:	f000 f83b 	bl	dbf04 <_ZnajRKSt9nothrow_t>
   dbe8e:	60e0      	str	r0, [r4, #12]
   dbe90:	4620      	mov	r0, r4
   dbe92:	bd70      	pop	{r4, r5, r6, pc}
   dbe94:	000dfd4e 	.word	0x000dfd4e

000dbe98 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   dbe98:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dbe9a:	4d0e      	ldr	r5, [pc, #56]	; (dbed4 <_Z19__fetch_global_Wirev+0x3c>)
   dbe9c:	6829      	ldr	r1, [r5, #0]
   dbe9e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   dbea2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dbea4:	d113      	bne.n	dbece <_Z19__fetch_global_Wirev+0x36>
   dbea6:	4628      	mov	r0, r5
   dbea8:	f7f8 f908 	bl	d40bc <__cxa_guard_acquire>
   dbeac:	b178      	cbz	r0, dbece <_Z19__fetch_global_Wirev+0x36>
   dbeae:	a801      	add	r0, sp, #4
   dbeb0:	f7ff ffd8 	bl	dbe64 <_Z17acquireWireBufferv>
   dbeb4:	aa01      	add	r2, sp, #4
   dbeb6:	4621      	mov	r1, r4
   dbeb8:	4807      	ldr	r0, [pc, #28]	; (dbed8 <_Z19__fetch_global_Wirev+0x40>)
   dbeba:	f7ff fbed 	bl	db698 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   dbebe:	4628      	mov	r0, r5
   dbec0:	f7f8 f901 	bl	d40c6 <__cxa_guard_release>
   dbec4:	4a05      	ldr	r2, [pc, #20]	; (dbedc <_Z19__fetch_global_Wirev+0x44>)
   dbec6:	4906      	ldr	r1, [pc, #24]	; (dbee0 <_Z19__fetch_global_Wirev+0x48>)
   dbec8:	4803      	ldr	r0, [pc, #12]	; (dbed8 <_Z19__fetch_global_Wirev+0x40>)
   dbeca:	f000 f80b 	bl	dbee4 <__aeabi_atexit>
	return wire;
}
   dbece:	4802      	ldr	r0, [pc, #8]	; (dbed8 <_Z19__fetch_global_Wirev+0x40>)
   dbed0:	b007      	add	sp, #28
   dbed2:	bd30      	pop	{r4, r5, pc}
   dbed4:	2003e70c 	.word	0x2003e70c
   dbed8:	2003e710 	.word	0x2003e710
   dbedc:	2003d460 	.word	0x2003d460
   dbee0:	000db641 	.word	0x000db641

000dbee4 <__aeabi_atexit>:
   dbee4:	460b      	mov	r3, r1
   dbee6:	4601      	mov	r1, r0
   dbee8:	4618      	mov	r0, r3
   dbeea:	f000 be59 	b.w	dcba0 <__cxa_atexit>
	...

000dbef0 <_ZSt15get_new_handlerv>:
   dbef0:	4b02      	ldr	r3, [pc, #8]	; (dbefc <_ZSt15get_new_handlerv+0xc>)
   dbef2:	6818      	ldr	r0, [r3, #0]
   dbef4:	f3bf 8f5f 	dmb	sy
   dbef8:	4770      	bx	lr
   dbefa:	bf00      	nop
   dbefc:	2003e724 	.word	0x2003e724

000dbf00 <_ZdlPvj>:
   dbf00:	f7f8 b8cd 	b.w	d409e <_ZdlPv>

000dbf04 <_ZnajRKSt9nothrow_t>:
   dbf04:	f000 b800 	b.w	dbf08 <_ZnwjRKSt9nothrow_t>

000dbf08 <_ZnwjRKSt9nothrow_t>:
   dbf08:	b510      	push	{r4, lr}
   dbf0a:	2800      	cmp	r0, #0
   dbf0c:	bf14      	ite	ne
   dbf0e:	4604      	movne	r4, r0
   dbf10:	2401      	moveq	r4, #1
   dbf12:	4620      	mov	r0, r4
   dbf14:	f7fc f984 	bl	d8220 <malloc>
   dbf18:	b920      	cbnz	r0, dbf24 <_ZnwjRKSt9nothrow_t+0x1c>
   dbf1a:	f7ff ffe9 	bl	dbef0 <_ZSt15get_new_handlerv>
   dbf1e:	b108      	cbz	r0, dbf24 <_ZnwjRKSt9nothrow_t+0x1c>
   dbf20:	4780      	blx	r0
   dbf22:	e7f6      	b.n	dbf12 <_ZnwjRKSt9nothrow_t+0xa>
   dbf24:	bd10      	pop	{r4, pc}

000dbf26 <_ZSt25__throw_bad_function_callv>:
   dbf26:	b508      	push	{r3, lr}
   dbf28:	f7fc f9b2 	bl	d8290 <abort>

000dbf2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dbf2c:	4b18      	ldr	r3, [pc, #96]	; (dbf90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dbf2e:	681a      	ldr	r2, [r3, #0]
   dbf30:	07d1      	lsls	r1, r2, #31
   dbf32:	bf5c      	itt	pl
   dbf34:	2201      	movpl	r2, #1
   dbf36:	601a      	strpl	r2, [r3, #0]
   dbf38:	4b16      	ldr	r3, [pc, #88]	; (dbf94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dbf3a:	681a      	ldr	r2, [r3, #0]
   dbf3c:	07d2      	lsls	r2, r2, #31
   dbf3e:	bf5c      	itt	pl
   dbf40:	2201      	movpl	r2, #1
   dbf42:	601a      	strpl	r2, [r3, #0]
   dbf44:	4b14      	ldr	r3, [pc, #80]	; (dbf98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dbf46:	681a      	ldr	r2, [r3, #0]
   dbf48:	07d0      	lsls	r0, r2, #31
   dbf4a:	bf5c      	itt	pl
   dbf4c:	2201      	movpl	r2, #1
   dbf4e:	601a      	strpl	r2, [r3, #0]
   dbf50:	4b12      	ldr	r3, [pc, #72]	; (dbf9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dbf52:	681a      	ldr	r2, [r3, #0]
   dbf54:	07d1      	lsls	r1, r2, #31
   dbf56:	bf5c      	itt	pl
   dbf58:	2201      	movpl	r2, #1
   dbf5a:	601a      	strpl	r2, [r3, #0]
   dbf5c:	4b10      	ldr	r3, [pc, #64]	; (dbfa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dbf5e:	681a      	ldr	r2, [r3, #0]
   dbf60:	07d2      	lsls	r2, r2, #31
   dbf62:	bf5c      	itt	pl
   dbf64:	2201      	movpl	r2, #1
   dbf66:	601a      	strpl	r2, [r3, #0]
   dbf68:	4b0e      	ldr	r3, [pc, #56]	; (dbfa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dbf6a:	681a      	ldr	r2, [r3, #0]
   dbf6c:	07d0      	lsls	r0, r2, #31
   dbf6e:	bf5c      	itt	pl
   dbf70:	2201      	movpl	r2, #1
   dbf72:	601a      	strpl	r2, [r3, #0]
   dbf74:	4b0c      	ldr	r3, [pc, #48]	; (dbfa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dbf76:	681a      	ldr	r2, [r3, #0]
   dbf78:	07d1      	lsls	r1, r2, #31
   dbf7a:	bf5c      	itt	pl
   dbf7c:	2201      	movpl	r2, #1
   dbf7e:	601a      	strpl	r2, [r3, #0]
   dbf80:	4b0a      	ldr	r3, [pc, #40]	; (dbfac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dbf82:	681a      	ldr	r2, [r3, #0]
   dbf84:	07d2      	lsls	r2, r2, #31
   dbf86:	bf5c      	itt	pl
   dbf88:	2201      	movpl	r2, #1
   dbf8a:	601a      	strpl	r2, [r3, #0]
   dbf8c:	4770      	bx	lr
   dbf8e:	bf00      	nop
   dbf90:	2003e744 	.word	0x2003e744
   dbf94:	2003e740 	.word	0x2003e740
   dbf98:	2003e73c 	.word	0x2003e73c
   dbf9c:	2003e738 	.word	0x2003e738
   dbfa0:	2003e734 	.word	0x2003e734
   dbfa4:	2003e730 	.word	0x2003e730
   dbfa8:	2003e72c 	.word	0x2003e72c
   dbfac:	2003e728 	.word	0x2003e728

000dbfb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dbfb0:	4b24      	ldr	r3, [pc, #144]	; (dc044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dbfb2:	681a      	ldr	r2, [r3, #0]
   dbfb4:	07d0      	lsls	r0, r2, #31
   dbfb6:	bf5c      	itt	pl
   dbfb8:	2201      	movpl	r2, #1
   dbfba:	601a      	strpl	r2, [r3, #0]
   dbfbc:	4b22      	ldr	r3, [pc, #136]	; (dc048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dbfbe:	681a      	ldr	r2, [r3, #0]
   dbfc0:	07d1      	lsls	r1, r2, #31
   dbfc2:	bf5c      	itt	pl
   dbfc4:	2201      	movpl	r2, #1
   dbfc6:	601a      	strpl	r2, [r3, #0]
   dbfc8:	4b20      	ldr	r3, [pc, #128]	; (dc04c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dbfca:	681a      	ldr	r2, [r3, #0]
   dbfcc:	07d2      	lsls	r2, r2, #31
   dbfce:	bf5c      	itt	pl
   dbfd0:	2201      	movpl	r2, #1
   dbfd2:	601a      	strpl	r2, [r3, #0]
   dbfd4:	4b1e      	ldr	r3, [pc, #120]	; (dc050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dbfd6:	681a      	ldr	r2, [r3, #0]
   dbfd8:	07d0      	lsls	r0, r2, #31
   dbfda:	bf5c      	itt	pl
   dbfdc:	2201      	movpl	r2, #1
   dbfde:	601a      	strpl	r2, [r3, #0]
   dbfe0:	4b1c      	ldr	r3, [pc, #112]	; (dc054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   dbfe2:	681a      	ldr	r2, [r3, #0]
   dbfe4:	07d1      	lsls	r1, r2, #31
   dbfe6:	bf5c      	itt	pl
   dbfe8:	2201      	movpl	r2, #1
   dbfea:	601a      	strpl	r2, [r3, #0]
   dbfec:	4b1a      	ldr	r3, [pc, #104]	; (dc058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dbfee:	681a      	ldr	r2, [r3, #0]
   dbff0:	07d2      	lsls	r2, r2, #31
   dbff2:	bf5c      	itt	pl
   dbff4:	2201      	movpl	r2, #1
   dbff6:	601a      	strpl	r2, [r3, #0]
   dbff8:	4b18      	ldr	r3, [pc, #96]	; (dc05c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dbffa:	681a      	ldr	r2, [r3, #0]
   dbffc:	07d0      	lsls	r0, r2, #31
   dbffe:	bf5c      	itt	pl
   dc000:	2201      	movpl	r2, #1
   dc002:	601a      	strpl	r2, [r3, #0]
   dc004:	4b16      	ldr	r3, [pc, #88]	; (dc060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dc006:	681a      	ldr	r2, [r3, #0]
   dc008:	07d1      	lsls	r1, r2, #31
   dc00a:	bf5c      	itt	pl
   dc00c:	2201      	movpl	r2, #1
   dc00e:	601a      	strpl	r2, [r3, #0]
   dc010:	4b14      	ldr	r3, [pc, #80]	; (dc064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dc012:	681a      	ldr	r2, [r3, #0]
   dc014:	07d2      	lsls	r2, r2, #31
   dc016:	bf5c      	itt	pl
   dc018:	2201      	movpl	r2, #1
   dc01a:	601a      	strpl	r2, [r3, #0]
   dc01c:	4b12      	ldr	r3, [pc, #72]	; (dc068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dc01e:	681a      	ldr	r2, [r3, #0]
   dc020:	07d0      	lsls	r0, r2, #31
   dc022:	bf5c      	itt	pl
   dc024:	2201      	movpl	r2, #1
   dc026:	601a      	strpl	r2, [r3, #0]
   dc028:	4b10      	ldr	r3, [pc, #64]	; (dc06c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dc02a:	681a      	ldr	r2, [r3, #0]
   dc02c:	07d1      	lsls	r1, r2, #31
   dc02e:	bf5c      	itt	pl
   dc030:	2201      	movpl	r2, #1
   dc032:	601a      	strpl	r2, [r3, #0]
   dc034:	4b0e      	ldr	r3, [pc, #56]	; (dc070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dc036:	681a      	ldr	r2, [r3, #0]
   dc038:	07d2      	lsls	r2, r2, #31
   dc03a:	bf5c      	itt	pl
   dc03c:	2201      	movpl	r2, #1
   dc03e:	601a      	strpl	r2, [r3, #0]
   dc040:	4770      	bx	lr
   dc042:	bf00      	nop
   dc044:	2003e774 	.word	0x2003e774
   dc048:	2003e770 	.word	0x2003e770
   dc04c:	2003e76c 	.word	0x2003e76c
   dc050:	2003e768 	.word	0x2003e768
   dc054:	2003e764 	.word	0x2003e764
   dc058:	2003e760 	.word	0x2003e760
   dc05c:	2003e75c 	.word	0x2003e75c
   dc060:	2003e758 	.word	0x2003e758
   dc064:	2003e754 	.word	0x2003e754
   dc068:	2003e750 	.word	0x2003e750
   dc06c:	2003e74c 	.word	0x2003e74c
   dc070:	2003e748 	.word	0x2003e748

000dc074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dc074:	4b24      	ldr	r3, [pc, #144]	; (dc108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dc076:	681a      	ldr	r2, [r3, #0]
   dc078:	07d0      	lsls	r0, r2, #31
   dc07a:	bf5c      	itt	pl
   dc07c:	2201      	movpl	r2, #1
   dc07e:	601a      	strpl	r2, [r3, #0]
   dc080:	4b22      	ldr	r3, [pc, #136]	; (dc10c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   dc082:	681a      	ldr	r2, [r3, #0]
   dc084:	07d1      	lsls	r1, r2, #31
   dc086:	bf5c      	itt	pl
   dc088:	2201      	movpl	r2, #1
   dc08a:	601a      	strpl	r2, [r3, #0]
   dc08c:	4b20      	ldr	r3, [pc, #128]	; (dc110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   dc08e:	681a      	ldr	r2, [r3, #0]
   dc090:	07d2      	lsls	r2, r2, #31
   dc092:	bf5c      	itt	pl
   dc094:	2201      	movpl	r2, #1
   dc096:	601a      	strpl	r2, [r3, #0]
   dc098:	4b1e      	ldr	r3, [pc, #120]	; (dc114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   dc09a:	681a      	ldr	r2, [r3, #0]
   dc09c:	07d0      	lsls	r0, r2, #31
   dc09e:	bf5c      	itt	pl
   dc0a0:	2201      	movpl	r2, #1
   dc0a2:	601a      	strpl	r2, [r3, #0]
   dc0a4:	4b1c      	ldr	r3, [pc, #112]	; (dc118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   dc0a6:	681a      	ldr	r2, [r3, #0]
   dc0a8:	07d1      	lsls	r1, r2, #31
   dc0aa:	bf5c      	itt	pl
   dc0ac:	2201      	movpl	r2, #1
   dc0ae:	601a      	strpl	r2, [r3, #0]
   dc0b0:	4b1a      	ldr	r3, [pc, #104]	; (dc11c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   dc0b2:	681a      	ldr	r2, [r3, #0]
   dc0b4:	07d2      	lsls	r2, r2, #31
   dc0b6:	bf5c      	itt	pl
   dc0b8:	2201      	movpl	r2, #1
   dc0ba:	601a      	strpl	r2, [r3, #0]
   dc0bc:	4b18      	ldr	r3, [pc, #96]	; (dc120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   dc0be:	681a      	ldr	r2, [r3, #0]
   dc0c0:	07d0      	lsls	r0, r2, #31
   dc0c2:	bf5c      	itt	pl
   dc0c4:	2201      	movpl	r2, #1
   dc0c6:	601a      	strpl	r2, [r3, #0]
   dc0c8:	4b16      	ldr	r3, [pc, #88]	; (dc124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   dc0ca:	681a      	ldr	r2, [r3, #0]
   dc0cc:	07d1      	lsls	r1, r2, #31
   dc0ce:	bf5c      	itt	pl
   dc0d0:	2201      	movpl	r2, #1
   dc0d2:	601a      	strpl	r2, [r3, #0]
   dc0d4:	4b14      	ldr	r3, [pc, #80]	; (dc128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   dc0d6:	681a      	ldr	r2, [r3, #0]
   dc0d8:	07d2      	lsls	r2, r2, #31
   dc0da:	bf5c      	itt	pl
   dc0dc:	2201      	movpl	r2, #1
   dc0de:	601a      	strpl	r2, [r3, #0]
   dc0e0:	4b12      	ldr	r3, [pc, #72]	; (dc12c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   dc0e2:	681a      	ldr	r2, [r3, #0]
   dc0e4:	07d0      	lsls	r0, r2, #31
   dc0e6:	bf5c      	itt	pl
   dc0e8:	2201      	movpl	r2, #1
   dc0ea:	601a      	strpl	r2, [r3, #0]
   dc0ec:	4b10      	ldr	r3, [pc, #64]	; (dc130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   dc0ee:	681a      	ldr	r2, [r3, #0]
   dc0f0:	07d1      	lsls	r1, r2, #31
   dc0f2:	bf5c      	itt	pl
   dc0f4:	2201      	movpl	r2, #1
   dc0f6:	601a      	strpl	r2, [r3, #0]
   dc0f8:	4b0e      	ldr	r3, [pc, #56]	; (dc134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   dc0fa:	681a      	ldr	r2, [r3, #0]
   dc0fc:	07d2      	lsls	r2, r2, #31
   dc0fe:	bf5c      	itt	pl
   dc100:	2201      	movpl	r2, #1
   dc102:	601a      	strpl	r2, [r3, #0]
   dc104:	4770      	bx	lr
   dc106:	bf00      	nop
   dc108:	2003e7a4 	.word	0x2003e7a4
   dc10c:	2003e7a0 	.word	0x2003e7a0
   dc110:	2003e79c 	.word	0x2003e79c
   dc114:	2003e798 	.word	0x2003e798
   dc118:	2003e794 	.word	0x2003e794
   dc11c:	2003e790 	.word	0x2003e790
   dc120:	2003e78c 	.word	0x2003e78c
   dc124:	2003e788 	.word	0x2003e788
   dc128:	2003e784 	.word	0x2003e784
   dc12c:	2003e780 	.word	0x2003e780
   dc130:	2003e77c 	.word	0x2003e77c
   dc134:	2003e778 	.word	0x2003e778

000dc138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dc138:	4b18      	ldr	r3, [pc, #96]	; (dc19c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dc13a:	681a      	ldr	r2, [r3, #0]
   dc13c:	07d1      	lsls	r1, r2, #31
   dc13e:	bf5c      	itt	pl
   dc140:	2201      	movpl	r2, #1
   dc142:	601a      	strpl	r2, [r3, #0]
   dc144:	4b16      	ldr	r3, [pc, #88]	; (dc1a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dc146:	681a      	ldr	r2, [r3, #0]
   dc148:	07d2      	lsls	r2, r2, #31
   dc14a:	bf5c      	itt	pl
   dc14c:	2201      	movpl	r2, #1
   dc14e:	601a      	strpl	r2, [r3, #0]
   dc150:	4b14      	ldr	r3, [pc, #80]	; (dc1a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dc152:	681a      	ldr	r2, [r3, #0]
   dc154:	07d0      	lsls	r0, r2, #31
   dc156:	bf5c      	itt	pl
   dc158:	2201      	movpl	r2, #1
   dc15a:	601a      	strpl	r2, [r3, #0]
   dc15c:	4b12      	ldr	r3, [pc, #72]	; (dc1a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dc15e:	681a      	ldr	r2, [r3, #0]
   dc160:	07d1      	lsls	r1, r2, #31
   dc162:	bf5c      	itt	pl
   dc164:	2201      	movpl	r2, #1
   dc166:	601a      	strpl	r2, [r3, #0]
   dc168:	4b10      	ldr	r3, [pc, #64]	; (dc1ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dc16a:	681a      	ldr	r2, [r3, #0]
   dc16c:	07d2      	lsls	r2, r2, #31
   dc16e:	bf5c      	itt	pl
   dc170:	2201      	movpl	r2, #1
   dc172:	601a      	strpl	r2, [r3, #0]
   dc174:	4b0e      	ldr	r3, [pc, #56]	; (dc1b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dc176:	681a      	ldr	r2, [r3, #0]
   dc178:	07d0      	lsls	r0, r2, #31
   dc17a:	bf5c      	itt	pl
   dc17c:	2201      	movpl	r2, #1
   dc17e:	601a      	strpl	r2, [r3, #0]
   dc180:	4b0c      	ldr	r3, [pc, #48]	; (dc1b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dc182:	681a      	ldr	r2, [r3, #0]
   dc184:	07d1      	lsls	r1, r2, #31
   dc186:	bf5c      	itt	pl
   dc188:	2201      	movpl	r2, #1
   dc18a:	601a      	strpl	r2, [r3, #0]
   dc18c:	4b0a      	ldr	r3, [pc, #40]	; (dc1b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dc18e:	681a      	ldr	r2, [r3, #0]
   dc190:	07d2      	lsls	r2, r2, #31
   dc192:	bf5c      	itt	pl
   dc194:	2201      	movpl	r2, #1
   dc196:	601a      	strpl	r2, [r3, #0]
   dc198:	4770      	bx	lr
   dc19a:	bf00      	nop
   dc19c:	2003e7c4 	.word	0x2003e7c4
   dc1a0:	2003e7c0 	.word	0x2003e7c0
   dc1a4:	2003e7bc 	.word	0x2003e7bc
   dc1a8:	2003e7b8 	.word	0x2003e7b8
   dc1ac:	2003e7b4 	.word	0x2003e7b4
   dc1b0:	2003e7b0 	.word	0x2003e7b0
   dc1b4:	2003e7ac 	.word	0x2003e7ac
   dc1b8:	2003e7a8 	.word	0x2003e7a8

000dc1bc <__aeabi_drsub>:
   dc1bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dc1c0:	e002      	b.n	dc1c8 <__adddf3>
   dc1c2:	bf00      	nop

000dc1c4 <__aeabi_dsub>:
   dc1c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dc1c8 <__adddf3>:
   dc1c8:	b530      	push	{r4, r5, lr}
   dc1ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dc1ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dc1d2:	ea94 0f05 	teq	r4, r5
   dc1d6:	bf08      	it	eq
   dc1d8:	ea90 0f02 	teqeq	r0, r2
   dc1dc:	bf1f      	itttt	ne
   dc1de:	ea54 0c00 	orrsne.w	ip, r4, r0
   dc1e2:	ea55 0c02 	orrsne.w	ip, r5, r2
   dc1e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dc1ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc1ee:	f000 80e2 	beq.w	dc3b6 <__adddf3+0x1ee>
   dc1f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dc1f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dc1fa:	bfb8      	it	lt
   dc1fc:	426d      	neglt	r5, r5
   dc1fe:	dd0c      	ble.n	dc21a <__adddf3+0x52>
   dc200:	442c      	add	r4, r5
   dc202:	ea80 0202 	eor.w	r2, r0, r2
   dc206:	ea81 0303 	eor.w	r3, r1, r3
   dc20a:	ea82 0000 	eor.w	r0, r2, r0
   dc20e:	ea83 0101 	eor.w	r1, r3, r1
   dc212:	ea80 0202 	eor.w	r2, r0, r2
   dc216:	ea81 0303 	eor.w	r3, r1, r3
   dc21a:	2d36      	cmp	r5, #54	; 0x36
   dc21c:	bf88      	it	hi
   dc21e:	bd30      	pophi	{r4, r5, pc}
   dc220:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc224:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc228:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dc22c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dc230:	d002      	beq.n	dc238 <__adddf3+0x70>
   dc232:	4240      	negs	r0, r0
   dc234:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc238:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dc23c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc240:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dc244:	d002      	beq.n	dc24c <__adddf3+0x84>
   dc246:	4252      	negs	r2, r2
   dc248:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc24c:	ea94 0f05 	teq	r4, r5
   dc250:	f000 80a7 	beq.w	dc3a2 <__adddf3+0x1da>
   dc254:	f1a4 0401 	sub.w	r4, r4, #1
   dc258:	f1d5 0e20 	rsbs	lr, r5, #32
   dc25c:	db0d      	blt.n	dc27a <__adddf3+0xb2>
   dc25e:	fa02 fc0e 	lsl.w	ip, r2, lr
   dc262:	fa22 f205 	lsr.w	r2, r2, r5
   dc266:	1880      	adds	r0, r0, r2
   dc268:	f141 0100 	adc.w	r1, r1, #0
   dc26c:	fa03 f20e 	lsl.w	r2, r3, lr
   dc270:	1880      	adds	r0, r0, r2
   dc272:	fa43 f305 	asr.w	r3, r3, r5
   dc276:	4159      	adcs	r1, r3
   dc278:	e00e      	b.n	dc298 <__adddf3+0xd0>
   dc27a:	f1a5 0520 	sub.w	r5, r5, #32
   dc27e:	f10e 0e20 	add.w	lr, lr, #32
   dc282:	2a01      	cmp	r2, #1
   dc284:	fa03 fc0e 	lsl.w	ip, r3, lr
   dc288:	bf28      	it	cs
   dc28a:	f04c 0c02 	orrcs.w	ip, ip, #2
   dc28e:	fa43 f305 	asr.w	r3, r3, r5
   dc292:	18c0      	adds	r0, r0, r3
   dc294:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dc298:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc29c:	d507      	bpl.n	dc2ae <__adddf3+0xe6>
   dc29e:	f04f 0e00 	mov.w	lr, #0
   dc2a2:	f1dc 0c00 	rsbs	ip, ip, #0
   dc2a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   dc2aa:	eb6e 0101 	sbc.w	r1, lr, r1
   dc2ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dc2b2:	d31b      	bcc.n	dc2ec <__adddf3+0x124>
   dc2b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dc2b8:	d30c      	bcc.n	dc2d4 <__adddf3+0x10c>
   dc2ba:	0849      	lsrs	r1, r1, #1
   dc2bc:	ea5f 0030 	movs.w	r0, r0, rrx
   dc2c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dc2c4:	f104 0401 	add.w	r4, r4, #1
   dc2c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dc2cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dc2d0:	f080 809a 	bcs.w	dc408 <__adddf3+0x240>
   dc2d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dc2d8:	bf08      	it	eq
   dc2da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc2de:	f150 0000 	adcs.w	r0, r0, #0
   dc2e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc2e6:	ea41 0105 	orr.w	r1, r1, r5
   dc2ea:	bd30      	pop	{r4, r5, pc}
   dc2ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dc2f0:	4140      	adcs	r0, r0
   dc2f2:	eb41 0101 	adc.w	r1, r1, r1
   dc2f6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc2fa:	f1a4 0401 	sub.w	r4, r4, #1
   dc2fe:	d1e9      	bne.n	dc2d4 <__adddf3+0x10c>
   dc300:	f091 0f00 	teq	r1, #0
   dc304:	bf04      	itt	eq
   dc306:	4601      	moveq	r1, r0
   dc308:	2000      	moveq	r0, #0
   dc30a:	fab1 f381 	clz	r3, r1
   dc30e:	bf08      	it	eq
   dc310:	3320      	addeq	r3, #32
   dc312:	f1a3 030b 	sub.w	r3, r3, #11
   dc316:	f1b3 0220 	subs.w	r2, r3, #32
   dc31a:	da0c      	bge.n	dc336 <__adddf3+0x16e>
   dc31c:	320c      	adds	r2, #12
   dc31e:	dd08      	ble.n	dc332 <__adddf3+0x16a>
   dc320:	f102 0c14 	add.w	ip, r2, #20
   dc324:	f1c2 020c 	rsb	r2, r2, #12
   dc328:	fa01 f00c 	lsl.w	r0, r1, ip
   dc32c:	fa21 f102 	lsr.w	r1, r1, r2
   dc330:	e00c      	b.n	dc34c <__adddf3+0x184>
   dc332:	f102 0214 	add.w	r2, r2, #20
   dc336:	bfd8      	it	le
   dc338:	f1c2 0c20 	rsble	ip, r2, #32
   dc33c:	fa01 f102 	lsl.w	r1, r1, r2
   dc340:	fa20 fc0c 	lsr.w	ip, r0, ip
   dc344:	bfdc      	itt	le
   dc346:	ea41 010c 	orrle.w	r1, r1, ip
   dc34a:	4090      	lslle	r0, r2
   dc34c:	1ae4      	subs	r4, r4, r3
   dc34e:	bfa2      	ittt	ge
   dc350:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dc354:	4329      	orrge	r1, r5
   dc356:	bd30      	popge	{r4, r5, pc}
   dc358:	ea6f 0404 	mvn.w	r4, r4
   dc35c:	3c1f      	subs	r4, #31
   dc35e:	da1c      	bge.n	dc39a <__adddf3+0x1d2>
   dc360:	340c      	adds	r4, #12
   dc362:	dc0e      	bgt.n	dc382 <__adddf3+0x1ba>
   dc364:	f104 0414 	add.w	r4, r4, #20
   dc368:	f1c4 0220 	rsb	r2, r4, #32
   dc36c:	fa20 f004 	lsr.w	r0, r0, r4
   dc370:	fa01 f302 	lsl.w	r3, r1, r2
   dc374:	ea40 0003 	orr.w	r0, r0, r3
   dc378:	fa21 f304 	lsr.w	r3, r1, r4
   dc37c:	ea45 0103 	orr.w	r1, r5, r3
   dc380:	bd30      	pop	{r4, r5, pc}
   dc382:	f1c4 040c 	rsb	r4, r4, #12
   dc386:	f1c4 0220 	rsb	r2, r4, #32
   dc38a:	fa20 f002 	lsr.w	r0, r0, r2
   dc38e:	fa01 f304 	lsl.w	r3, r1, r4
   dc392:	ea40 0003 	orr.w	r0, r0, r3
   dc396:	4629      	mov	r1, r5
   dc398:	bd30      	pop	{r4, r5, pc}
   dc39a:	fa21 f004 	lsr.w	r0, r1, r4
   dc39e:	4629      	mov	r1, r5
   dc3a0:	bd30      	pop	{r4, r5, pc}
   dc3a2:	f094 0f00 	teq	r4, #0
   dc3a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dc3aa:	bf06      	itte	eq
   dc3ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dc3b0:	3401      	addeq	r4, #1
   dc3b2:	3d01      	subne	r5, #1
   dc3b4:	e74e      	b.n	dc254 <__adddf3+0x8c>
   dc3b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc3ba:	bf18      	it	ne
   dc3bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc3c0:	d029      	beq.n	dc416 <__adddf3+0x24e>
   dc3c2:	ea94 0f05 	teq	r4, r5
   dc3c6:	bf08      	it	eq
   dc3c8:	ea90 0f02 	teqeq	r0, r2
   dc3cc:	d005      	beq.n	dc3da <__adddf3+0x212>
   dc3ce:	ea54 0c00 	orrs.w	ip, r4, r0
   dc3d2:	bf04      	itt	eq
   dc3d4:	4619      	moveq	r1, r3
   dc3d6:	4610      	moveq	r0, r2
   dc3d8:	bd30      	pop	{r4, r5, pc}
   dc3da:	ea91 0f03 	teq	r1, r3
   dc3de:	bf1e      	ittt	ne
   dc3e0:	2100      	movne	r1, #0
   dc3e2:	2000      	movne	r0, #0
   dc3e4:	bd30      	popne	{r4, r5, pc}
   dc3e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dc3ea:	d105      	bne.n	dc3f8 <__adddf3+0x230>
   dc3ec:	0040      	lsls	r0, r0, #1
   dc3ee:	4149      	adcs	r1, r1
   dc3f0:	bf28      	it	cs
   dc3f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dc3f6:	bd30      	pop	{r4, r5, pc}
   dc3f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dc3fc:	bf3c      	itt	cc
   dc3fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dc402:	bd30      	popcc	{r4, r5, pc}
   dc404:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc408:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dc40c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc410:	f04f 0000 	mov.w	r0, #0
   dc414:	bd30      	pop	{r4, r5, pc}
   dc416:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc41a:	bf1a      	itte	ne
   dc41c:	4619      	movne	r1, r3
   dc41e:	4610      	movne	r0, r2
   dc420:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dc424:	bf1c      	itt	ne
   dc426:	460b      	movne	r3, r1
   dc428:	4602      	movne	r2, r0
   dc42a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc42e:	bf06      	itte	eq
   dc430:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dc434:	ea91 0f03 	teqeq	r1, r3
   dc438:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dc43c:	bd30      	pop	{r4, r5, pc}
   dc43e:	bf00      	nop

000dc440 <__aeabi_ui2d>:
   dc440:	f090 0f00 	teq	r0, #0
   dc444:	bf04      	itt	eq
   dc446:	2100      	moveq	r1, #0
   dc448:	4770      	bxeq	lr
   dc44a:	b530      	push	{r4, r5, lr}
   dc44c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc450:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc454:	f04f 0500 	mov.w	r5, #0
   dc458:	f04f 0100 	mov.w	r1, #0
   dc45c:	e750      	b.n	dc300 <__adddf3+0x138>
   dc45e:	bf00      	nop

000dc460 <__aeabi_i2d>:
   dc460:	f090 0f00 	teq	r0, #0
   dc464:	bf04      	itt	eq
   dc466:	2100      	moveq	r1, #0
   dc468:	4770      	bxeq	lr
   dc46a:	b530      	push	{r4, r5, lr}
   dc46c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc470:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc474:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dc478:	bf48      	it	mi
   dc47a:	4240      	negmi	r0, r0
   dc47c:	f04f 0100 	mov.w	r1, #0
   dc480:	e73e      	b.n	dc300 <__adddf3+0x138>
   dc482:	bf00      	nop

000dc484 <__aeabi_f2d>:
   dc484:	0042      	lsls	r2, r0, #1
   dc486:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dc48a:	ea4f 0131 	mov.w	r1, r1, rrx
   dc48e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dc492:	bf1f      	itttt	ne
   dc494:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dc498:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dc49c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dc4a0:	4770      	bxne	lr
   dc4a2:	f092 0f00 	teq	r2, #0
   dc4a6:	bf14      	ite	ne
   dc4a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dc4ac:	4770      	bxeq	lr
   dc4ae:	b530      	push	{r4, r5, lr}
   dc4b0:	f44f 7460 	mov.w	r4, #896	; 0x380
   dc4b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc4b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc4bc:	e720      	b.n	dc300 <__adddf3+0x138>
   dc4be:	bf00      	nop

000dc4c0 <__aeabi_ul2d>:
   dc4c0:	ea50 0201 	orrs.w	r2, r0, r1
   dc4c4:	bf08      	it	eq
   dc4c6:	4770      	bxeq	lr
   dc4c8:	b530      	push	{r4, r5, lr}
   dc4ca:	f04f 0500 	mov.w	r5, #0
   dc4ce:	e00a      	b.n	dc4e6 <__aeabi_l2d+0x16>

000dc4d0 <__aeabi_l2d>:
   dc4d0:	ea50 0201 	orrs.w	r2, r0, r1
   dc4d4:	bf08      	it	eq
   dc4d6:	4770      	bxeq	lr
   dc4d8:	b530      	push	{r4, r5, lr}
   dc4da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dc4de:	d502      	bpl.n	dc4e6 <__aeabi_l2d+0x16>
   dc4e0:	4240      	negs	r0, r0
   dc4e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc4e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc4ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc4ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dc4f2:	f43f aedc 	beq.w	dc2ae <__adddf3+0xe6>
   dc4f6:	f04f 0203 	mov.w	r2, #3
   dc4fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc4fe:	bf18      	it	ne
   dc500:	3203      	addne	r2, #3
   dc502:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc506:	bf18      	it	ne
   dc508:	3203      	addne	r2, #3
   dc50a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dc50e:	f1c2 0320 	rsb	r3, r2, #32
   dc512:	fa00 fc03 	lsl.w	ip, r0, r3
   dc516:	fa20 f002 	lsr.w	r0, r0, r2
   dc51a:	fa01 fe03 	lsl.w	lr, r1, r3
   dc51e:	ea40 000e 	orr.w	r0, r0, lr
   dc522:	fa21 f102 	lsr.w	r1, r1, r2
   dc526:	4414      	add	r4, r2
   dc528:	e6c1      	b.n	dc2ae <__adddf3+0xe6>
   dc52a:	bf00      	nop

000dc52c <__aeabi_dmul>:
   dc52c:	b570      	push	{r4, r5, r6, lr}
   dc52e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc532:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc536:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc53a:	bf1d      	ittte	ne
   dc53c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc540:	ea94 0f0c 	teqne	r4, ip
   dc544:	ea95 0f0c 	teqne	r5, ip
   dc548:	f000 f8de 	bleq	dc708 <__aeabi_dmul+0x1dc>
   dc54c:	442c      	add	r4, r5
   dc54e:	ea81 0603 	eor.w	r6, r1, r3
   dc552:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dc556:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dc55a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dc55e:	bf18      	it	ne
   dc560:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dc564:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc56c:	d038      	beq.n	dc5e0 <__aeabi_dmul+0xb4>
   dc56e:	fba0 ce02 	umull	ip, lr, r0, r2
   dc572:	f04f 0500 	mov.w	r5, #0
   dc576:	fbe1 e502 	umlal	lr, r5, r1, r2
   dc57a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dc57e:	fbe0 e503 	umlal	lr, r5, r0, r3
   dc582:	f04f 0600 	mov.w	r6, #0
   dc586:	fbe1 5603 	umlal	r5, r6, r1, r3
   dc58a:	f09c 0f00 	teq	ip, #0
   dc58e:	bf18      	it	ne
   dc590:	f04e 0e01 	orrne.w	lr, lr, #1
   dc594:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dc598:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dc59c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dc5a0:	d204      	bcs.n	dc5ac <__aeabi_dmul+0x80>
   dc5a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dc5a6:	416d      	adcs	r5, r5
   dc5a8:	eb46 0606 	adc.w	r6, r6, r6
   dc5ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dc5b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dc5b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dc5b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dc5bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dc5c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc5c4:	bf88      	it	hi
   dc5c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc5ca:	d81e      	bhi.n	dc60a <__aeabi_dmul+0xde>
   dc5cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dc5d0:	bf08      	it	eq
   dc5d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dc5d6:	f150 0000 	adcs.w	r0, r0, #0
   dc5da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc5de:	bd70      	pop	{r4, r5, r6, pc}
   dc5e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dc5e4:	ea46 0101 	orr.w	r1, r6, r1
   dc5e8:	ea40 0002 	orr.w	r0, r0, r2
   dc5ec:	ea81 0103 	eor.w	r1, r1, r3
   dc5f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dc5f4:	bfc2      	ittt	gt
   dc5f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc5fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc5fe:	bd70      	popgt	{r4, r5, r6, pc}
   dc600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc604:	f04f 0e00 	mov.w	lr, #0
   dc608:	3c01      	subs	r4, #1
   dc60a:	f300 80ab 	bgt.w	dc764 <__aeabi_dmul+0x238>
   dc60e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dc612:	bfde      	ittt	le
   dc614:	2000      	movle	r0, #0
   dc616:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dc61a:	bd70      	pople	{r4, r5, r6, pc}
   dc61c:	f1c4 0400 	rsb	r4, r4, #0
   dc620:	3c20      	subs	r4, #32
   dc622:	da35      	bge.n	dc690 <__aeabi_dmul+0x164>
   dc624:	340c      	adds	r4, #12
   dc626:	dc1b      	bgt.n	dc660 <__aeabi_dmul+0x134>
   dc628:	f104 0414 	add.w	r4, r4, #20
   dc62c:	f1c4 0520 	rsb	r5, r4, #32
   dc630:	fa00 f305 	lsl.w	r3, r0, r5
   dc634:	fa20 f004 	lsr.w	r0, r0, r4
   dc638:	fa01 f205 	lsl.w	r2, r1, r5
   dc63c:	ea40 0002 	orr.w	r0, r0, r2
   dc640:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dc644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc64c:	fa21 f604 	lsr.w	r6, r1, r4
   dc650:	eb42 0106 	adc.w	r1, r2, r6
   dc654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc658:	bf08      	it	eq
   dc65a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc65e:	bd70      	pop	{r4, r5, r6, pc}
   dc660:	f1c4 040c 	rsb	r4, r4, #12
   dc664:	f1c4 0520 	rsb	r5, r4, #32
   dc668:	fa00 f304 	lsl.w	r3, r0, r4
   dc66c:	fa20 f005 	lsr.w	r0, r0, r5
   dc670:	fa01 f204 	lsl.w	r2, r1, r4
   dc674:	ea40 0002 	orr.w	r0, r0, r2
   dc678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc67c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc680:	f141 0100 	adc.w	r1, r1, #0
   dc684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc688:	bf08      	it	eq
   dc68a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc68e:	bd70      	pop	{r4, r5, r6, pc}
   dc690:	f1c4 0520 	rsb	r5, r4, #32
   dc694:	fa00 f205 	lsl.w	r2, r0, r5
   dc698:	ea4e 0e02 	orr.w	lr, lr, r2
   dc69c:	fa20 f304 	lsr.w	r3, r0, r4
   dc6a0:	fa01 f205 	lsl.w	r2, r1, r5
   dc6a4:	ea43 0302 	orr.w	r3, r3, r2
   dc6a8:	fa21 f004 	lsr.w	r0, r1, r4
   dc6ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc6b0:	fa21 f204 	lsr.w	r2, r1, r4
   dc6b4:	ea20 0002 	bic.w	r0, r0, r2
   dc6b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dc6bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc6c0:	bf08      	it	eq
   dc6c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc6c6:	bd70      	pop	{r4, r5, r6, pc}
   dc6c8:	f094 0f00 	teq	r4, #0
   dc6cc:	d10f      	bne.n	dc6ee <__aeabi_dmul+0x1c2>
   dc6ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dc6d2:	0040      	lsls	r0, r0, #1
   dc6d4:	eb41 0101 	adc.w	r1, r1, r1
   dc6d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc6dc:	bf08      	it	eq
   dc6de:	3c01      	subeq	r4, #1
   dc6e0:	d0f7      	beq.n	dc6d2 <__aeabi_dmul+0x1a6>
   dc6e2:	ea41 0106 	orr.w	r1, r1, r6
   dc6e6:	f095 0f00 	teq	r5, #0
   dc6ea:	bf18      	it	ne
   dc6ec:	4770      	bxne	lr
   dc6ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dc6f2:	0052      	lsls	r2, r2, #1
   dc6f4:	eb43 0303 	adc.w	r3, r3, r3
   dc6f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dc6fc:	bf08      	it	eq
   dc6fe:	3d01      	subeq	r5, #1
   dc700:	d0f7      	beq.n	dc6f2 <__aeabi_dmul+0x1c6>
   dc702:	ea43 0306 	orr.w	r3, r3, r6
   dc706:	4770      	bx	lr
   dc708:	ea94 0f0c 	teq	r4, ip
   dc70c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc710:	bf18      	it	ne
   dc712:	ea95 0f0c 	teqne	r5, ip
   dc716:	d00c      	beq.n	dc732 <__aeabi_dmul+0x206>
   dc718:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc71c:	bf18      	it	ne
   dc71e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc722:	d1d1      	bne.n	dc6c8 <__aeabi_dmul+0x19c>
   dc724:	ea81 0103 	eor.w	r1, r1, r3
   dc728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc72c:	f04f 0000 	mov.w	r0, #0
   dc730:	bd70      	pop	{r4, r5, r6, pc}
   dc732:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc736:	bf06      	itte	eq
   dc738:	4610      	moveq	r0, r2
   dc73a:	4619      	moveq	r1, r3
   dc73c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc740:	d019      	beq.n	dc776 <__aeabi_dmul+0x24a>
   dc742:	ea94 0f0c 	teq	r4, ip
   dc746:	d102      	bne.n	dc74e <__aeabi_dmul+0x222>
   dc748:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dc74c:	d113      	bne.n	dc776 <__aeabi_dmul+0x24a>
   dc74e:	ea95 0f0c 	teq	r5, ip
   dc752:	d105      	bne.n	dc760 <__aeabi_dmul+0x234>
   dc754:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dc758:	bf1c      	itt	ne
   dc75a:	4610      	movne	r0, r2
   dc75c:	4619      	movne	r1, r3
   dc75e:	d10a      	bne.n	dc776 <__aeabi_dmul+0x24a>
   dc760:	ea81 0103 	eor.w	r1, r1, r3
   dc764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc768:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc76c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc770:	f04f 0000 	mov.w	r0, #0
   dc774:	bd70      	pop	{r4, r5, r6, pc}
   dc776:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc77a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dc77e:	bd70      	pop	{r4, r5, r6, pc}

000dc780 <__aeabi_ddiv>:
   dc780:	b570      	push	{r4, r5, r6, lr}
   dc782:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc786:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc78a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc78e:	bf1d      	ittte	ne
   dc790:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc794:	ea94 0f0c 	teqne	r4, ip
   dc798:	ea95 0f0c 	teqne	r5, ip
   dc79c:	f000 f8a7 	bleq	dc8ee <__aeabi_ddiv+0x16e>
   dc7a0:	eba4 0405 	sub.w	r4, r4, r5
   dc7a4:	ea81 0e03 	eor.w	lr, r1, r3
   dc7a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc7ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc7b0:	f000 8088 	beq.w	dc8c4 <__aeabi_ddiv+0x144>
   dc7b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc7b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dc7bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dc7c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dc7c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dc7c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dc7cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dc7d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dc7d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dc7d8:	429d      	cmp	r5, r3
   dc7da:	bf08      	it	eq
   dc7dc:	4296      	cmpeq	r6, r2
   dc7de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dc7e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dc7e6:	d202      	bcs.n	dc7ee <__aeabi_ddiv+0x6e>
   dc7e8:	085b      	lsrs	r3, r3, #1
   dc7ea:	ea4f 0232 	mov.w	r2, r2, rrx
   dc7ee:	1ab6      	subs	r6, r6, r2
   dc7f0:	eb65 0503 	sbc.w	r5, r5, r3
   dc7f4:	085b      	lsrs	r3, r3, #1
   dc7f6:	ea4f 0232 	mov.w	r2, r2, rrx
   dc7fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dc7fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dc802:	ebb6 0e02 	subs.w	lr, r6, r2
   dc806:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc80a:	bf22      	ittt	cs
   dc80c:	1ab6      	subcs	r6, r6, r2
   dc80e:	4675      	movcs	r5, lr
   dc810:	ea40 000c 	orrcs.w	r0, r0, ip
   dc814:	085b      	lsrs	r3, r3, #1
   dc816:	ea4f 0232 	mov.w	r2, r2, rrx
   dc81a:	ebb6 0e02 	subs.w	lr, r6, r2
   dc81e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc822:	bf22      	ittt	cs
   dc824:	1ab6      	subcs	r6, r6, r2
   dc826:	4675      	movcs	r5, lr
   dc828:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dc82c:	085b      	lsrs	r3, r3, #1
   dc82e:	ea4f 0232 	mov.w	r2, r2, rrx
   dc832:	ebb6 0e02 	subs.w	lr, r6, r2
   dc836:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc83a:	bf22      	ittt	cs
   dc83c:	1ab6      	subcs	r6, r6, r2
   dc83e:	4675      	movcs	r5, lr
   dc840:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dc844:	085b      	lsrs	r3, r3, #1
   dc846:	ea4f 0232 	mov.w	r2, r2, rrx
   dc84a:	ebb6 0e02 	subs.w	lr, r6, r2
   dc84e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc852:	bf22      	ittt	cs
   dc854:	1ab6      	subcs	r6, r6, r2
   dc856:	4675      	movcs	r5, lr
   dc858:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dc85c:	ea55 0e06 	orrs.w	lr, r5, r6
   dc860:	d018      	beq.n	dc894 <__aeabi_ddiv+0x114>
   dc862:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dc866:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dc86a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dc86e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dc872:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dc876:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dc87a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dc87e:	d1c0      	bne.n	dc802 <__aeabi_ddiv+0x82>
   dc880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc884:	d10b      	bne.n	dc89e <__aeabi_ddiv+0x11e>
   dc886:	ea41 0100 	orr.w	r1, r1, r0
   dc88a:	f04f 0000 	mov.w	r0, #0
   dc88e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dc892:	e7b6      	b.n	dc802 <__aeabi_ddiv+0x82>
   dc894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc898:	bf04      	itt	eq
   dc89a:	4301      	orreq	r1, r0
   dc89c:	2000      	moveq	r0, #0
   dc89e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc8a2:	bf88      	it	hi
   dc8a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc8a8:	f63f aeaf 	bhi.w	dc60a <__aeabi_dmul+0xde>
   dc8ac:	ebb5 0c03 	subs.w	ip, r5, r3
   dc8b0:	bf04      	itt	eq
   dc8b2:	ebb6 0c02 	subseq.w	ip, r6, r2
   dc8b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc8ba:	f150 0000 	adcs.w	r0, r0, #0
   dc8be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc8c2:	bd70      	pop	{r4, r5, r6, pc}
   dc8c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dc8c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dc8cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dc8d0:	bfc2      	ittt	gt
   dc8d2:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc8d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc8da:	bd70      	popgt	{r4, r5, r6, pc}
   dc8dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc8e0:	f04f 0e00 	mov.w	lr, #0
   dc8e4:	3c01      	subs	r4, #1
   dc8e6:	e690      	b.n	dc60a <__aeabi_dmul+0xde>
   dc8e8:	ea45 0e06 	orr.w	lr, r5, r6
   dc8ec:	e68d      	b.n	dc60a <__aeabi_dmul+0xde>
   dc8ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc8f2:	ea94 0f0c 	teq	r4, ip
   dc8f6:	bf08      	it	eq
   dc8f8:	ea95 0f0c 	teqeq	r5, ip
   dc8fc:	f43f af3b 	beq.w	dc776 <__aeabi_dmul+0x24a>
   dc900:	ea94 0f0c 	teq	r4, ip
   dc904:	d10a      	bne.n	dc91c <__aeabi_ddiv+0x19c>
   dc906:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc90a:	f47f af34 	bne.w	dc776 <__aeabi_dmul+0x24a>
   dc90e:	ea95 0f0c 	teq	r5, ip
   dc912:	f47f af25 	bne.w	dc760 <__aeabi_dmul+0x234>
   dc916:	4610      	mov	r0, r2
   dc918:	4619      	mov	r1, r3
   dc91a:	e72c      	b.n	dc776 <__aeabi_dmul+0x24a>
   dc91c:	ea95 0f0c 	teq	r5, ip
   dc920:	d106      	bne.n	dc930 <__aeabi_ddiv+0x1b0>
   dc922:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc926:	f43f aefd 	beq.w	dc724 <__aeabi_dmul+0x1f8>
   dc92a:	4610      	mov	r0, r2
   dc92c:	4619      	mov	r1, r3
   dc92e:	e722      	b.n	dc776 <__aeabi_dmul+0x24a>
   dc930:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc934:	bf18      	it	ne
   dc936:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc93a:	f47f aec5 	bne.w	dc6c8 <__aeabi_dmul+0x19c>
   dc93e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dc942:	f47f af0d 	bne.w	dc760 <__aeabi_dmul+0x234>
   dc946:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dc94a:	f47f aeeb 	bne.w	dc724 <__aeabi_dmul+0x1f8>
   dc94e:	e712      	b.n	dc776 <__aeabi_dmul+0x24a>

000dc950 <__gedf2>:
   dc950:	f04f 3cff 	mov.w	ip, #4294967295
   dc954:	e006      	b.n	dc964 <__cmpdf2+0x4>
   dc956:	bf00      	nop

000dc958 <__ledf2>:
   dc958:	f04f 0c01 	mov.w	ip, #1
   dc95c:	e002      	b.n	dc964 <__cmpdf2+0x4>
   dc95e:	bf00      	nop

000dc960 <__cmpdf2>:
   dc960:	f04f 0c01 	mov.w	ip, #1
   dc964:	f84d cd04 	str.w	ip, [sp, #-4]!
   dc968:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc96c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc974:	bf18      	it	ne
   dc976:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dc97a:	d01b      	beq.n	dc9b4 <__cmpdf2+0x54>
   dc97c:	b001      	add	sp, #4
   dc97e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dc982:	bf0c      	ite	eq
   dc984:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dc988:	ea91 0f03 	teqne	r1, r3
   dc98c:	bf02      	ittt	eq
   dc98e:	ea90 0f02 	teqeq	r0, r2
   dc992:	2000      	moveq	r0, #0
   dc994:	4770      	bxeq	lr
   dc996:	f110 0f00 	cmn.w	r0, #0
   dc99a:	ea91 0f03 	teq	r1, r3
   dc99e:	bf58      	it	pl
   dc9a0:	4299      	cmppl	r1, r3
   dc9a2:	bf08      	it	eq
   dc9a4:	4290      	cmpeq	r0, r2
   dc9a6:	bf2c      	ite	cs
   dc9a8:	17d8      	asrcs	r0, r3, #31
   dc9aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dc9ae:	f040 0001 	orr.w	r0, r0, #1
   dc9b2:	4770      	bx	lr
   dc9b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc9b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc9bc:	d102      	bne.n	dc9c4 <__cmpdf2+0x64>
   dc9be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dc9c2:	d107      	bne.n	dc9d4 <__cmpdf2+0x74>
   dc9c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc9c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc9cc:	d1d6      	bne.n	dc97c <__cmpdf2+0x1c>
   dc9ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dc9d2:	d0d3      	beq.n	dc97c <__cmpdf2+0x1c>
   dc9d4:	f85d 0b04 	ldr.w	r0, [sp], #4
   dc9d8:	4770      	bx	lr
   dc9da:	bf00      	nop

000dc9dc <__aeabi_cdrcmple>:
   dc9dc:	4684      	mov	ip, r0
   dc9de:	4610      	mov	r0, r2
   dc9e0:	4662      	mov	r2, ip
   dc9e2:	468c      	mov	ip, r1
   dc9e4:	4619      	mov	r1, r3
   dc9e6:	4663      	mov	r3, ip
   dc9e8:	e000      	b.n	dc9ec <__aeabi_cdcmpeq>
   dc9ea:	bf00      	nop

000dc9ec <__aeabi_cdcmpeq>:
   dc9ec:	b501      	push	{r0, lr}
   dc9ee:	f7ff ffb7 	bl	dc960 <__cmpdf2>
   dc9f2:	2800      	cmp	r0, #0
   dc9f4:	bf48      	it	mi
   dc9f6:	f110 0f00 	cmnmi.w	r0, #0
   dc9fa:	bd01      	pop	{r0, pc}

000dc9fc <__aeabi_dcmpeq>:
   dc9fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   dca00:	f7ff fff4 	bl	dc9ec <__aeabi_cdcmpeq>
   dca04:	bf0c      	ite	eq
   dca06:	2001      	moveq	r0, #1
   dca08:	2000      	movne	r0, #0
   dca0a:	f85d fb08 	ldr.w	pc, [sp], #8
   dca0e:	bf00      	nop

000dca10 <__aeabi_dcmplt>:
   dca10:	f84d ed08 	str.w	lr, [sp, #-8]!
   dca14:	f7ff ffea 	bl	dc9ec <__aeabi_cdcmpeq>
   dca18:	bf34      	ite	cc
   dca1a:	2001      	movcc	r0, #1
   dca1c:	2000      	movcs	r0, #0
   dca1e:	f85d fb08 	ldr.w	pc, [sp], #8
   dca22:	bf00      	nop

000dca24 <__aeabi_dcmple>:
   dca24:	f84d ed08 	str.w	lr, [sp, #-8]!
   dca28:	f7ff ffe0 	bl	dc9ec <__aeabi_cdcmpeq>
   dca2c:	bf94      	ite	ls
   dca2e:	2001      	movls	r0, #1
   dca30:	2000      	movhi	r0, #0
   dca32:	f85d fb08 	ldr.w	pc, [sp], #8
   dca36:	bf00      	nop

000dca38 <__aeabi_dcmpge>:
   dca38:	f84d ed08 	str.w	lr, [sp, #-8]!
   dca3c:	f7ff ffce 	bl	dc9dc <__aeabi_cdrcmple>
   dca40:	bf94      	ite	ls
   dca42:	2001      	movls	r0, #1
   dca44:	2000      	movhi	r0, #0
   dca46:	f85d fb08 	ldr.w	pc, [sp], #8
   dca4a:	bf00      	nop

000dca4c <__aeabi_dcmpgt>:
   dca4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dca50:	f7ff ffc4 	bl	dc9dc <__aeabi_cdrcmple>
   dca54:	bf34      	ite	cc
   dca56:	2001      	movcc	r0, #1
   dca58:	2000      	movcs	r0, #0
   dca5a:	f85d fb08 	ldr.w	pc, [sp], #8
   dca5e:	bf00      	nop

000dca60 <__aeabi_d2iz>:
   dca60:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dca64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dca68:	d215      	bcs.n	dca96 <__aeabi_d2iz+0x36>
   dca6a:	d511      	bpl.n	dca90 <__aeabi_d2iz+0x30>
   dca6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dca70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dca74:	d912      	bls.n	dca9c <__aeabi_d2iz+0x3c>
   dca76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dca7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dca7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dca82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dca86:	fa23 f002 	lsr.w	r0, r3, r2
   dca8a:	bf18      	it	ne
   dca8c:	4240      	negne	r0, r0
   dca8e:	4770      	bx	lr
   dca90:	f04f 0000 	mov.w	r0, #0
   dca94:	4770      	bx	lr
   dca96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dca9a:	d105      	bne.n	dcaa8 <__aeabi_d2iz+0x48>
   dca9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dcaa0:	bf08      	it	eq
   dcaa2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dcaa6:	4770      	bx	lr
   dcaa8:	f04f 0000 	mov.w	r0, #0
   dcaac:	4770      	bx	lr
   dcaae:	bf00      	nop

000dcab0 <__aeabi_d2uiz>:
   dcab0:	004a      	lsls	r2, r1, #1
   dcab2:	d211      	bcs.n	dcad8 <__aeabi_d2uiz+0x28>
   dcab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dcab8:	d211      	bcs.n	dcade <__aeabi_d2uiz+0x2e>
   dcaba:	d50d      	bpl.n	dcad8 <__aeabi_d2uiz+0x28>
   dcabc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dcac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dcac4:	d40e      	bmi.n	dcae4 <__aeabi_d2uiz+0x34>
   dcac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dcaca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dcace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dcad2:	fa23 f002 	lsr.w	r0, r3, r2
   dcad6:	4770      	bx	lr
   dcad8:	f04f 0000 	mov.w	r0, #0
   dcadc:	4770      	bx	lr
   dcade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dcae2:	d102      	bne.n	dcaea <__aeabi_d2uiz+0x3a>
   dcae4:	f04f 30ff 	mov.w	r0, #4294967295
   dcae8:	4770      	bx	lr
   dcaea:	f04f 0000 	mov.w	r0, #0
   dcaee:	4770      	bx	lr

000dcaf0 <__aeabi_d2f>:
   dcaf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dcaf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dcaf8:	bf24      	itt	cs
   dcafa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dcafe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dcb02:	d90d      	bls.n	dcb20 <__aeabi_d2f+0x30>
   dcb04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dcb08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dcb0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dcb10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dcb14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dcb18:	bf08      	it	eq
   dcb1a:	f020 0001 	biceq.w	r0, r0, #1
   dcb1e:	4770      	bx	lr
   dcb20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dcb24:	d121      	bne.n	dcb6a <__aeabi_d2f+0x7a>
   dcb26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dcb2a:	bfbc      	itt	lt
   dcb2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dcb30:	4770      	bxlt	lr
   dcb32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dcb36:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dcb3a:	f1c2 0218 	rsb	r2, r2, #24
   dcb3e:	f1c2 0c20 	rsb	ip, r2, #32
   dcb42:	fa10 f30c 	lsls.w	r3, r0, ip
   dcb46:	fa20 f002 	lsr.w	r0, r0, r2
   dcb4a:	bf18      	it	ne
   dcb4c:	f040 0001 	orrne.w	r0, r0, #1
   dcb50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dcb54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dcb58:	fa03 fc0c 	lsl.w	ip, r3, ip
   dcb5c:	ea40 000c 	orr.w	r0, r0, ip
   dcb60:	fa23 f302 	lsr.w	r3, r3, r2
   dcb64:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dcb68:	e7cc      	b.n	dcb04 <__aeabi_d2f+0x14>
   dcb6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dcb6e:	d107      	bne.n	dcb80 <__aeabi_d2f+0x90>
   dcb70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dcb74:	bf1e      	ittt	ne
   dcb76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dcb7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dcb7e:	4770      	bxne	lr
   dcb80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dcb84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dcb88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dcb8c:	4770      	bx	lr
   dcb8e:	bf00      	nop

000dcb90 <atof>:
   dcb90:	2100      	movs	r1, #0
   dcb92:	f001 b85d 	b.w	ddc50 <strtod>

000dcb96 <atoi>:
   dcb96:	220a      	movs	r2, #10
   dcb98:	2100      	movs	r1, #0
   dcb9a:	f001 b8e7 	b.w	ddd6c <strtol>
	...

000dcba0 <__cxa_atexit>:
   dcba0:	b510      	push	{r4, lr}
   dcba2:	4c05      	ldr	r4, [pc, #20]	; (dcbb8 <__cxa_atexit+0x18>)
   dcba4:	4613      	mov	r3, r2
   dcba6:	b12c      	cbz	r4, dcbb4 <__cxa_atexit+0x14>
   dcba8:	460a      	mov	r2, r1
   dcbaa:	4601      	mov	r1, r0
   dcbac:	2002      	movs	r0, #2
   dcbae:	f3af 8000 	nop.w
   dcbb2:	bd10      	pop	{r4, pc}
   dcbb4:	4620      	mov	r0, r4
   dcbb6:	bd10      	pop	{r4, pc}
   dcbb8:	00000000 	.word	0x00000000

000dcbbc <isspace>:
   dcbbc:	4b03      	ldr	r3, [pc, #12]	; (dcbcc <isspace+0x10>)
   dcbbe:	681b      	ldr	r3, [r3, #0]
   dcbc0:	4418      	add	r0, r3
   dcbc2:	7840      	ldrb	r0, [r0, #1]
   dcbc4:	f000 0008 	and.w	r0, r0, #8
   dcbc8:	4770      	bx	lr
   dcbca:	bf00      	nop
   dcbcc:	2003d374 	.word	0x2003d374

000dcbd0 <localtime>:
   dcbd0:	b538      	push	{r3, r4, r5, lr}
   dcbd2:	4b07      	ldr	r3, [pc, #28]	; (dcbf0 <localtime+0x20>)
   dcbd4:	681c      	ldr	r4, [r3, #0]
   dcbd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dcbd8:	4605      	mov	r5, r0
   dcbda:	b91b      	cbnz	r3, dcbe4 <localtime+0x14>
   dcbdc:	2024      	movs	r0, #36	; 0x24
   dcbde:	f7fb fb1f 	bl	d8220 <malloc>
   dcbe2:	63e0      	str	r0, [r4, #60]	; 0x3c
   dcbe4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dcbe6:	4628      	mov	r0, r5
   dcbe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dcbec:	f000 b802 	b.w	dcbf4 <localtime_r>
   dcbf0:	2003d3d8 	.word	0x2003d3d8

000dcbf4 <localtime_r>:
   dcbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dcbf8:	460c      	mov	r4, r1
   dcbfa:	4680      	mov	r8, r0
   dcbfc:	f001 feda 	bl	de9b4 <__gettzinfo>
   dcc00:	4621      	mov	r1, r4
   dcc02:	4607      	mov	r7, r0
   dcc04:	4640      	mov	r0, r8
   dcc06:	f001 fed9 	bl	de9bc <gmtime_r>
   dcc0a:	6946      	ldr	r6, [r0, #20]
   dcc0c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   dcc10:	07b3      	lsls	r3, r6, #30
   dcc12:	4604      	mov	r4, r0
   dcc14:	d105      	bne.n	dcc22 <localtime_r+0x2e>
   dcc16:	2264      	movs	r2, #100	; 0x64
   dcc18:	fb96 f3f2 	sdiv	r3, r6, r2
   dcc1c:	fb02 6313 	mls	r3, r2, r3, r6
   dcc20:	b94b      	cbnz	r3, dcc36 <localtime_r+0x42>
   dcc22:	f44f 75c8 	mov.w	r5, #400	; 0x190
   dcc26:	fb96 f3f5 	sdiv	r3, r6, r5
   dcc2a:	fb05 6513 	mls	r5, r5, r3, r6
   dcc2e:	fab5 f385 	clz	r3, r5
   dcc32:	095b      	lsrs	r3, r3, #5
   dcc34:	e000      	b.n	dcc38 <localtime_r+0x44>
   dcc36:	2301      	movs	r3, #1
   dcc38:	4a5f      	ldr	r2, [pc, #380]	; (dcdb8 <localtime_r+0x1c4>)
   dcc3a:	2530      	movs	r5, #48	; 0x30
   dcc3c:	fb05 2503 	mla	r5, r5, r3, r2
   dcc40:	f001 f9ce 	bl	ddfe0 <__tz_lock>
   dcc44:	f001 f9ce 	bl	ddfe4 <_tzset_unlocked>
   dcc48:	4b5c      	ldr	r3, [pc, #368]	; (dcdbc <localtime_r+0x1c8>)
   dcc4a:	681b      	ldr	r3, [r3, #0]
   dcc4c:	b1f3      	cbz	r3, dcc8c <localtime_r+0x98>
   dcc4e:	687b      	ldr	r3, [r7, #4]
   dcc50:	429e      	cmp	r6, r3
   dcc52:	d105      	bne.n	dcc60 <localtime_r+0x6c>
   dcc54:	6839      	ldr	r1, [r7, #0]
   dcc56:	f8d8 3000 	ldr.w	r3, [r8]
   dcc5a:	69fa      	ldr	r2, [r7, #28]
   dcc5c:	b941      	cbnz	r1, dcc70 <localtime_r+0x7c>
   dcc5e:	e00a      	b.n	dcc76 <localtime_r+0x82>
   dcc60:	4630      	mov	r0, r6
   dcc62:	f001 f915 	bl	dde90 <__tzcalc_limits>
   dcc66:	2800      	cmp	r0, #0
   dcc68:	d1f4      	bne.n	dcc54 <localtime_r+0x60>
   dcc6a:	f04f 33ff 	mov.w	r3, #4294967295
   dcc6e:	e00d      	b.n	dcc8c <localtime_r+0x98>
   dcc70:	4293      	cmp	r3, r2
   dcc72:	db08      	blt.n	dcc86 <localtime_r+0x92>
   dcc74:	e001      	b.n	dcc7a <localtime_r+0x86>
   dcc76:	4293      	cmp	r3, r2
   dcc78:	da07      	bge.n	dcc8a <localtime_r+0x96>
   dcc7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   dcc7c:	4293      	cmp	r3, r2
   dcc7e:	bfac      	ite	ge
   dcc80:	2300      	movge	r3, #0
   dcc82:	2301      	movlt	r3, #1
   dcc84:	e002      	b.n	dcc8c <localtime_r+0x98>
   dcc86:	2300      	movs	r3, #0
   dcc88:	e000      	b.n	dcc8c <localtime_r+0x98>
   dcc8a:	2301      	movs	r3, #1
   dcc8c:	6223      	str	r3, [r4, #32]
   dcc8e:	6a23      	ldr	r3, [r4, #32]
   dcc90:	2b01      	cmp	r3, #1
   dcc92:	bf0c      	ite	eq
   dcc94:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   dcc96:	6a39      	ldrne	r1, [r7, #32]
   dcc98:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dcc9c:	203c      	movs	r0, #60	; 0x3c
   dcc9e:	fb91 f6f3 	sdiv	r6, r1, r3
   dcca2:	fb03 1316 	mls	r3, r3, r6, r1
   dcca6:	6861      	ldr	r1, [r4, #4]
   dcca8:	fb93 f2f0 	sdiv	r2, r3, r0
   dccac:	fb00 3012 	mls	r0, r0, r2, r3
   dccb0:	6823      	ldr	r3, [r4, #0]
   dccb2:	1a89      	subs	r1, r1, r2
   dccb4:	68a2      	ldr	r2, [r4, #8]
   dccb6:	6061      	str	r1, [r4, #4]
   dccb8:	1a1b      	subs	r3, r3, r0
   dccba:	1b92      	subs	r2, r2, r6
   dccbc:	2b3b      	cmp	r3, #59	; 0x3b
   dccbe:	6023      	str	r3, [r4, #0]
   dccc0:	60a2      	str	r2, [r4, #8]
   dccc2:	dd03      	ble.n	dcccc <localtime_r+0xd8>
   dccc4:	3101      	adds	r1, #1
   dccc6:	6061      	str	r1, [r4, #4]
   dccc8:	3b3c      	subs	r3, #60	; 0x3c
   dccca:	e004      	b.n	dccd6 <localtime_r+0xe2>
   dcccc:	2b00      	cmp	r3, #0
   dccce:	da03      	bge.n	dccd8 <localtime_r+0xe4>
   dccd0:	3901      	subs	r1, #1
   dccd2:	6061      	str	r1, [r4, #4]
   dccd4:	333c      	adds	r3, #60	; 0x3c
   dccd6:	6023      	str	r3, [r4, #0]
   dccd8:	6863      	ldr	r3, [r4, #4]
   dccda:	2b3b      	cmp	r3, #59	; 0x3b
   dccdc:	dd03      	ble.n	dcce6 <localtime_r+0xf2>
   dccde:	3201      	adds	r2, #1
   dcce0:	60a2      	str	r2, [r4, #8]
   dcce2:	3b3c      	subs	r3, #60	; 0x3c
   dcce4:	e004      	b.n	dccf0 <localtime_r+0xfc>
   dcce6:	2b00      	cmp	r3, #0
   dcce8:	da03      	bge.n	dccf2 <localtime_r+0xfe>
   dccea:	3a01      	subs	r2, #1
   dccec:	60a2      	str	r2, [r4, #8]
   dccee:	333c      	adds	r3, #60	; 0x3c
   dccf0:	6063      	str	r3, [r4, #4]
   dccf2:	68a3      	ldr	r3, [r4, #8]
   dccf4:	2b17      	cmp	r3, #23
   dccf6:	dd22      	ble.n	dcd3e <localtime_r+0x14a>
   dccf8:	69e2      	ldr	r2, [r4, #28]
   dccfa:	3201      	adds	r2, #1
   dccfc:	61e2      	str	r2, [r4, #28]
   dccfe:	69a2      	ldr	r2, [r4, #24]
   dcd00:	3201      	adds	r2, #1
   dcd02:	2a06      	cmp	r2, #6
   dcd04:	bfc8      	it	gt
   dcd06:	2200      	movgt	r2, #0
   dcd08:	61a2      	str	r2, [r4, #24]
   dcd0a:	68e2      	ldr	r2, [r4, #12]
   dcd0c:	3b18      	subs	r3, #24
   dcd0e:	3201      	adds	r2, #1
   dcd10:	60a3      	str	r3, [r4, #8]
   dcd12:	6923      	ldr	r3, [r4, #16]
   dcd14:	60e2      	str	r2, [r4, #12]
   dcd16:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   dcd1a:	428a      	cmp	r2, r1
   dcd1c:	dd46      	ble.n	dcdac <localtime_r+0x1b8>
   dcd1e:	3301      	adds	r3, #1
   dcd20:	2b0c      	cmp	r3, #12
   dcd22:	bf0c      	ite	eq
   dcd24:	6963      	ldreq	r3, [r4, #20]
   dcd26:	6123      	strne	r3, [r4, #16]
   dcd28:	eba2 0201 	sub.w	r2, r2, r1
   dcd2c:	60e2      	str	r2, [r4, #12]
   dcd2e:	bf01      	itttt	eq
   dcd30:	3301      	addeq	r3, #1
   dcd32:	2200      	moveq	r2, #0
   dcd34:	6122      	streq	r2, [r4, #16]
   dcd36:	6163      	streq	r3, [r4, #20]
   dcd38:	bf08      	it	eq
   dcd3a:	61e2      	streq	r2, [r4, #28]
   dcd3c:	e036      	b.n	dcdac <localtime_r+0x1b8>
   dcd3e:	2b00      	cmp	r3, #0
   dcd40:	da34      	bge.n	dcdac <localtime_r+0x1b8>
   dcd42:	69e2      	ldr	r2, [r4, #28]
   dcd44:	3a01      	subs	r2, #1
   dcd46:	61e2      	str	r2, [r4, #28]
   dcd48:	69a2      	ldr	r2, [r4, #24]
   dcd4a:	3a01      	subs	r2, #1
   dcd4c:	bf48      	it	mi
   dcd4e:	2206      	movmi	r2, #6
   dcd50:	61a2      	str	r2, [r4, #24]
   dcd52:	68e2      	ldr	r2, [r4, #12]
   dcd54:	3318      	adds	r3, #24
   dcd56:	3a01      	subs	r2, #1
   dcd58:	60e2      	str	r2, [r4, #12]
   dcd5a:	60a3      	str	r3, [r4, #8]
   dcd5c:	bb32      	cbnz	r2, dcdac <localtime_r+0x1b8>
   dcd5e:	6923      	ldr	r3, [r4, #16]
   dcd60:	3b01      	subs	r3, #1
   dcd62:	d401      	bmi.n	dcd68 <localtime_r+0x174>
   dcd64:	6123      	str	r3, [r4, #16]
   dcd66:	e01d      	b.n	dcda4 <localtime_r+0x1b0>
   dcd68:	230b      	movs	r3, #11
   dcd6a:	6123      	str	r3, [r4, #16]
   dcd6c:	6963      	ldr	r3, [r4, #20]
   dcd6e:	1e5a      	subs	r2, r3, #1
   dcd70:	f012 0f03 	tst.w	r2, #3
   dcd74:	6162      	str	r2, [r4, #20]
   dcd76:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   dcd7a:	d105      	bne.n	dcd88 <localtime_r+0x194>
   dcd7c:	2164      	movs	r1, #100	; 0x64
   dcd7e:	fb93 f2f1 	sdiv	r2, r3, r1
   dcd82:	fb01 3212 	mls	r2, r1, r2, r3
   dcd86:	b94a      	cbnz	r2, dcd9c <localtime_r+0x1a8>
   dcd88:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dcd8c:	fb93 f2f1 	sdiv	r2, r3, r1
   dcd90:	fb01 3312 	mls	r3, r1, r2, r3
   dcd94:	fab3 f383 	clz	r3, r3
   dcd98:	095b      	lsrs	r3, r3, #5
   dcd9a:	e000      	b.n	dcd9e <localtime_r+0x1aa>
   dcd9c:	2301      	movs	r3, #1
   dcd9e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   dcda2:	61e3      	str	r3, [r4, #28]
   dcda4:	6923      	ldr	r3, [r4, #16]
   dcda6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   dcdaa:	60e3      	str	r3, [r4, #12]
   dcdac:	f001 f919 	bl	ddfe2 <__tz_unlock>
   dcdb0:	4620      	mov	r0, r4
   dcdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dcdb6:	bf00      	nop
   dcdb8:	000dfeb8 	.word	0x000dfeb8
   dcdbc:	2003e7e4 	.word	0x2003e7e4

000dcdc0 <_localeconv_r>:
   dcdc0:	4800      	ldr	r0, [pc, #0]	; (dcdc4 <_localeconv_r+0x4>)
   dcdc2:	4770      	bx	lr
   dcdc4:	2003d3dc 	.word	0x2003d3dc

000dcdc8 <memcmp>:
   dcdc8:	b510      	push	{r4, lr}
   dcdca:	3901      	subs	r1, #1
   dcdcc:	4402      	add	r2, r0
   dcdce:	4290      	cmp	r0, r2
   dcdd0:	d007      	beq.n	dcde2 <memcmp+0x1a>
   dcdd2:	f810 3b01 	ldrb.w	r3, [r0], #1
   dcdd6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dcdda:	42a3      	cmp	r3, r4
   dcddc:	d0f7      	beq.n	dcdce <memcmp+0x6>
   dcdde:	1b18      	subs	r0, r3, r4
   dcde0:	bd10      	pop	{r4, pc}
   dcde2:	2000      	movs	r0, #0
   dcde4:	bd10      	pop	{r4, pc}

000dcde6 <memcpy>:
   dcde6:	b510      	push	{r4, lr}
   dcde8:	1e43      	subs	r3, r0, #1
   dcdea:	440a      	add	r2, r1
   dcdec:	4291      	cmp	r1, r2
   dcdee:	d004      	beq.n	dcdfa <memcpy+0x14>
   dcdf0:	f811 4b01 	ldrb.w	r4, [r1], #1
   dcdf4:	f803 4f01 	strb.w	r4, [r3, #1]!
   dcdf8:	e7f8      	b.n	dcdec <memcpy+0x6>
   dcdfa:	bd10      	pop	{r4, pc}

000dcdfc <memmove>:
   dcdfc:	4288      	cmp	r0, r1
   dcdfe:	b510      	push	{r4, lr}
   dce00:	eb01 0302 	add.w	r3, r1, r2
   dce04:	d801      	bhi.n	dce0a <memmove+0xe>
   dce06:	1e42      	subs	r2, r0, #1
   dce08:	e00b      	b.n	dce22 <memmove+0x26>
   dce0a:	4298      	cmp	r0, r3
   dce0c:	d2fb      	bcs.n	dce06 <memmove+0xa>
   dce0e:	1881      	adds	r1, r0, r2
   dce10:	1ad2      	subs	r2, r2, r3
   dce12:	42d3      	cmn	r3, r2
   dce14:	d004      	beq.n	dce20 <memmove+0x24>
   dce16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dce1a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   dce1e:	e7f8      	b.n	dce12 <memmove+0x16>
   dce20:	bd10      	pop	{r4, pc}
   dce22:	4299      	cmp	r1, r3
   dce24:	d004      	beq.n	dce30 <memmove+0x34>
   dce26:	f811 4b01 	ldrb.w	r4, [r1], #1
   dce2a:	f802 4f01 	strb.w	r4, [r2, #1]!
   dce2e:	e7f8      	b.n	dce22 <memmove+0x26>
   dce30:	bd10      	pop	{r4, pc}

000dce32 <memset>:
   dce32:	4402      	add	r2, r0
   dce34:	4603      	mov	r3, r0
   dce36:	4293      	cmp	r3, r2
   dce38:	d002      	beq.n	dce40 <memset+0xe>
   dce3a:	f803 1b01 	strb.w	r1, [r3], #1
   dce3e:	e7fa      	b.n	dce36 <memset+0x4>
   dce40:	4770      	bx	lr
	...

000dce44 <srand>:
   dce44:	b538      	push	{r3, r4, r5, lr}
   dce46:	4b12      	ldr	r3, [pc, #72]	; (dce90 <srand+0x4c>)
   dce48:	681c      	ldr	r4, [r3, #0]
   dce4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dce4c:	4605      	mov	r5, r0
   dce4e:	b9d3      	cbnz	r3, dce86 <srand+0x42>
   dce50:	2018      	movs	r0, #24
   dce52:	f7fb f9e5 	bl	d8220 <malloc>
   dce56:	f243 330e 	movw	r3, #13070	; 0x330e
   dce5a:	63a0      	str	r0, [r4, #56]	; 0x38
   dce5c:	8003      	strh	r3, [r0, #0]
   dce5e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dce62:	8043      	strh	r3, [r0, #2]
   dce64:	f241 2334 	movw	r3, #4660	; 0x1234
   dce68:	8083      	strh	r3, [r0, #4]
   dce6a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dce6e:	80c3      	strh	r3, [r0, #6]
   dce70:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dce74:	8103      	strh	r3, [r0, #8]
   dce76:	2305      	movs	r3, #5
   dce78:	8143      	strh	r3, [r0, #10]
   dce7a:	230b      	movs	r3, #11
   dce7c:	8183      	strh	r3, [r0, #12]
   dce7e:	2201      	movs	r2, #1
   dce80:	2300      	movs	r3, #0
   dce82:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dce86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dce88:	2200      	movs	r2, #0
   dce8a:	611d      	str	r5, [r3, #16]
   dce8c:	615a      	str	r2, [r3, #20]
   dce8e:	bd38      	pop	{r3, r4, r5, pc}
   dce90:	2003d3d8 	.word	0x2003d3d8

000dce94 <strcat>:
   dce94:	b510      	push	{r4, lr}
   dce96:	4602      	mov	r2, r0
   dce98:	4613      	mov	r3, r2
   dce9a:	3201      	adds	r2, #1
   dce9c:	781c      	ldrb	r4, [r3, #0]
   dce9e:	2c00      	cmp	r4, #0
   dcea0:	d1fa      	bne.n	dce98 <strcat+0x4>
   dcea2:	3b01      	subs	r3, #1
   dcea4:	f811 2b01 	ldrb.w	r2, [r1], #1
   dcea8:	f803 2f01 	strb.w	r2, [r3, #1]!
   dceac:	2a00      	cmp	r2, #0
   dceae:	d1f9      	bne.n	dcea4 <strcat+0x10>
   dceb0:	bd10      	pop	{r4, pc}

000dceb2 <strchr>:
   dceb2:	b2c9      	uxtb	r1, r1
   dceb4:	4603      	mov	r3, r0
   dceb6:	f810 2b01 	ldrb.w	r2, [r0], #1
   dceba:	b11a      	cbz	r2, dcec4 <strchr+0x12>
   dcebc:	4291      	cmp	r1, r2
   dcebe:	d1f9      	bne.n	dceb4 <strchr+0x2>
   dcec0:	4618      	mov	r0, r3
   dcec2:	4770      	bx	lr
   dcec4:	2900      	cmp	r1, #0
   dcec6:	bf0c      	ite	eq
   dcec8:	4618      	moveq	r0, r3
   dceca:	2000      	movne	r0, #0
   dcecc:	4770      	bx	lr

000dcece <strchrnul>:
   dcece:	b510      	push	{r4, lr}
   dced0:	4604      	mov	r4, r0
   dced2:	f7ff ffee 	bl	dceb2 <strchr>
   dced6:	b918      	cbnz	r0, dcee0 <strchrnul+0x12>
   dced8:	4620      	mov	r0, r4
   dceda:	f000 f830 	bl	dcf3e <strlen>
   dcede:	4420      	add	r0, r4
   dcee0:	bd10      	pop	{r4, pc}

000dcee2 <strcmp>:
   dcee2:	f810 2b01 	ldrb.w	r2, [r0], #1
   dcee6:	f811 3b01 	ldrb.w	r3, [r1], #1
   dceea:	2a01      	cmp	r2, #1
   dceec:	bf28      	it	cs
   dceee:	429a      	cmpcs	r2, r3
   dcef0:	d0f7      	beq.n	dcee2 <strcmp>
   dcef2:	1ad0      	subs	r0, r2, r3
   dcef4:	4770      	bx	lr

000dcef6 <strcpy>:
   dcef6:	4603      	mov	r3, r0
   dcef8:	f811 2b01 	ldrb.w	r2, [r1], #1
   dcefc:	f803 2b01 	strb.w	r2, [r3], #1
   dcf00:	2a00      	cmp	r2, #0
   dcf02:	d1f9      	bne.n	dcef8 <strcpy+0x2>
   dcf04:	4770      	bx	lr
	...

000dcf08 <strdup>:
   dcf08:	4b02      	ldr	r3, [pc, #8]	; (dcf14 <strdup+0xc>)
   dcf0a:	4601      	mov	r1, r0
   dcf0c:	6818      	ldr	r0, [r3, #0]
   dcf0e:	f000 b803 	b.w	dcf18 <_strdup_r>
   dcf12:	bf00      	nop
   dcf14:	2003d3d8 	.word	0x2003d3d8

000dcf18 <_strdup_r>:
   dcf18:	b570      	push	{r4, r5, r6, lr}
   dcf1a:	4606      	mov	r6, r0
   dcf1c:	4608      	mov	r0, r1
   dcf1e:	460c      	mov	r4, r1
   dcf20:	f000 f80d 	bl	dcf3e <strlen>
   dcf24:	1c45      	adds	r5, r0, #1
   dcf26:	4629      	mov	r1, r5
   dcf28:	4630      	mov	r0, r6
   dcf2a:	f7fb f9b9 	bl	d82a0 <_malloc_r>
   dcf2e:	4606      	mov	r6, r0
   dcf30:	b118      	cbz	r0, dcf3a <_strdup_r+0x22>
   dcf32:	462a      	mov	r2, r5
   dcf34:	4621      	mov	r1, r4
   dcf36:	f7ff ff56 	bl	dcde6 <memcpy>
   dcf3a:	4630      	mov	r0, r6
   dcf3c:	bd70      	pop	{r4, r5, r6, pc}

000dcf3e <strlen>:
   dcf3e:	4603      	mov	r3, r0
   dcf40:	f813 2b01 	ldrb.w	r2, [r3], #1
   dcf44:	2a00      	cmp	r2, #0
   dcf46:	d1fb      	bne.n	dcf40 <strlen+0x2>
   dcf48:	1a18      	subs	r0, r3, r0
   dcf4a:	3801      	subs	r0, #1
   dcf4c:	4770      	bx	lr
	...

000dcf50 <strlwr>:
   dcf50:	b510      	push	{r4, lr}
   dcf52:	4c08      	ldr	r4, [pc, #32]	; (dcf74 <strlwr+0x24>)
   dcf54:	4602      	mov	r2, r0
   dcf56:	7813      	ldrb	r3, [r2, #0]
   dcf58:	b153      	cbz	r3, dcf70 <strlwr+0x20>
   dcf5a:	6821      	ldr	r1, [r4, #0]
   dcf5c:	4419      	add	r1, r3
   dcf5e:	7849      	ldrb	r1, [r1, #1]
   dcf60:	f001 0103 	and.w	r1, r1, #3
   dcf64:	2901      	cmp	r1, #1
   dcf66:	bf08      	it	eq
   dcf68:	3320      	addeq	r3, #32
   dcf6a:	f802 3b01 	strb.w	r3, [r2], #1
   dcf6e:	e7f2      	b.n	dcf56 <strlwr+0x6>
   dcf70:	bd10      	pop	{r4, pc}
   dcf72:	bf00      	nop
   dcf74:	2003d374 	.word	0x2003d374

000dcf78 <strncmp>:
   dcf78:	b530      	push	{r4, r5, lr}
   dcf7a:	b182      	cbz	r2, dcf9e <strncmp+0x26>
   dcf7c:	1e45      	subs	r5, r0, #1
   dcf7e:	3901      	subs	r1, #1
   dcf80:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dcf84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dcf88:	42a3      	cmp	r3, r4
   dcf8a:	d106      	bne.n	dcf9a <strncmp+0x22>
   dcf8c:	43ec      	mvns	r4, r5
   dcf8e:	4414      	add	r4, r2
   dcf90:	42e0      	cmn	r0, r4
   dcf92:	d001      	beq.n	dcf98 <strncmp+0x20>
   dcf94:	2b00      	cmp	r3, #0
   dcf96:	d1f3      	bne.n	dcf80 <strncmp+0x8>
   dcf98:	461c      	mov	r4, r3
   dcf9a:	1b18      	subs	r0, r3, r4
   dcf9c:	bd30      	pop	{r4, r5, pc}
   dcf9e:	4610      	mov	r0, r2
   dcfa0:	bd30      	pop	{r4, r5, pc}

000dcfa2 <strnlen>:
   dcfa2:	b510      	push	{r4, lr}
   dcfa4:	4603      	mov	r3, r0
   dcfa6:	4401      	add	r1, r0
   dcfa8:	428b      	cmp	r3, r1
   dcfaa:	d004      	beq.n	dcfb6 <strnlen+0x14>
   dcfac:	781a      	ldrb	r2, [r3, #0]
   dcfae:	1c5c      	adds	r4, r3, #1
   dcfb0:	b10a      	cbz	r2, dcfb6 <strnlen+0x14>
   dcfb2:	4623      	mov	r3, r4
   dcfb4:	e7f8      	b.n	dcfa8 <strnlen+0x6>
   dcfb6:	1a18      	subs	r0, r3, r0
   dcfb8:	bd10      	pop	{r4, pc}

000dcfba <strrchr>:
   dcfba:	b538      	push	{r3, r4, r5, lr}
   dcfbc:	4603      	mov	r3, r0
   dcfbe:	460d      	mov	r5, r1
   dcfc0:	b141      	cbz	r1, dcfd4 <strrchr+0x1a>
   dcfc2:	2400      	movs	r4, #0
   dcfc4:	4629      	mov	r1, r5
   dcfc6:	4618      	mov	r0, r3
   dcfc8:	f7ff ff73 	bl	dceb2 <strchr>
   dcfcc:	b130      	cbz	r0, dcfdc <strrchr+0x22>
   dcfce:	1c43      	adds	r3, r0, #1
   dcfd0:	4604      	mov	r4, r0
   dcfd2:	e7f7      	b.n	dcfc4 <strrchr+0xa>
   dcfd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dcfd8:	f7ff bf6b 	b.w	dceb2 <strchr>
   dcfdc:	4620      	mov	r0, r4
   dcfde:	bd38      	pop	{r3, r4, r5, pc}

000dcfe0 <strstr>:
   dcfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcfe2:	7803      	ldrb	r3, [r0, #0]
   dcfe4:	b963      	cbnz	r3, dd000 <strstr+0x20>
   dcfe6:	780b      	ldrb	r3, [r1, #0]
   dcfe8:	2b00      	cmp	r3, #0
   dcfea:	bf18      	it	ne
   dcfec:	2000      	movne	r0, #0
   dcfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcff0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   dcff4:	b162      	cbz	r2, dd010 <strstr+0x30>
   dcff6:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   dcffa:	4297      	cmp	r7, r2
   dcffc:	4630      	mov	r0, r6
   dcffe:	d0f7      	beq.n	dcff0 <strstr+0x10>
   dd000:	4603      	mov	r3, r0
   dd002:	1c46      	adds	r6, r0, #1
   dd004:	7800      	ldrb	r0, [r0, #0]
   dd006:	b110      	cbz	r0, dd00e <strstr+0x2e>
   dd008:	1e4d      	subs	r5, r1, #1
   dd00a:	1e5c      	subs	r4, r3, #1
   dd00c:	e7f0      	b.n	dcff0 <strstr+0x10>
   dd00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd010:	4618      	mov	r0, r3
   dd012:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dd014 <sulp>:
   dd014:	b570      	push	{r4, r5, r6, lr}
   dd016:	4604      	mov	r4, r0
   dd018:	460d      	mov	r5, r1
   dd01a:	ec45 4b10 	vmov	d0, r4, r5
   dd01e:	4616      	mov	r6, r2
   dd020:	f002 f82a 	bl	df078 <__ulp>
   dd024:	ec51 0b10 	vmov	r0, r1, d0
   dd028:	b17e      	cbz	r6, dd04a <sulp+0x36>
   dd02a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dd02e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dd032:	2b00      	cmp	r3, #0
   dd034:	dd09      	ble.n	dd04a <sulp+0x36>
   dd036:	051b      	lsls	r3, r3, #20
   dd038:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dd03c:	2400      	movs	r4, #0
   dd03e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dd042:	4622      	mov	r2, r4
   dd044:	462b      	mov	r3, r5
   dd046:	f7ff fa71 	bl	dc52c <__aeabi_dmul>
   dd04a:	bd70      	pop	{r4, r5, r6, pc}
   dd04c:	0000      	movs	r0, r0
	...

000dd050 <_strtod_r>:
   dd050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd054:	b09d      	sub	sp, #116	; 0x74
   dd056:	2300      	movs	r3, #0
   dd058:	9002      	str	r0, [sp, #8]
   dd05a:	460c      	mov	r4, r1
   dd05c:	9213      	str	r2, [sp, #76]	; 0x4c
   dd05e:	9318      	str	r3, [sp, #96]	; 0x60
   dd060:	f04f 0a00 	mov.w	sl, #0
   dd064:	f04f 0b00 	mov.w	fp, #0
   dd068:	9117      	str	r1, [sp, #92]	; 0x5c
   dd06a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd06c:	781a      	ldrb	r2, [r3, #0]
   dd06e:	2a0d      	cmp	r2, #13
   dd070:	d805      	bhi.n	dd07e <_strtod_r+0x2e>
   dd072:	2a09      	cmp	r2, #9
   dd074:	d213      	bcs.n	dd09e <_strtod_r+0x4e>
   dd076:	2a00      	cmp	r2, #0
   dd078:	f000 81ac 	beq.w	dd3d4 <_strtod_r+0x384>
   dd07c:	e012      	b.n	dd0a4 <_strtod_r+0x54>
   dd07e:	2a2b      	cmp	r2, #43	; 0x2b
   dd080:	d004      	beq.n	dd08c <_strtod_r+0x3c>
   dd082:	2a2d      	cmp	r2, #45	; 0x2d
   dd084:	d004      	beq.n	dd090 <_strtod_r+0x40>
   dd086:	2a20      	cmp	r2, #32
   dd088:	d10c      	bne.n	dd0a4 <_strtod_r+0x54>
   dd08a:	e008      	b.n	dd09e <_strtod_r+0x4e>
   dd08c:	2200      	movs	r2, #0
   dd08e:	e000      	b.n	dd092 <_strtod_r+0x42>
   dd090:	2201      	movs	r2, #1
   dd092:	920c      	str	r2, [sp, #48]	; 0x30
   dd094:	1c5a      	adds	r2, r3, #1
   dd096:	9217      	str	r2, [sp, #92]	; 0x5c
   dd098:	785b      	ldrb	r3, [r3, #1]
   dd09a:	b92b      	cbnz	r3, dd0a8 <_strtod_r+0x58>
   dd09c:	e19a      	b.n	dd3d4 <_strtod_r+0x384>
   dd09e:	3301      	adds	r3, #1
   dd0a0:	9317      	str	r3, [sp, #92]	; 0x5c
   dd0a2:	e7e2      	b.n	dd06a <_strtod_r+0x1a>
   dd0a4:	2300      	movs	r3, #0
   dd0a6:	930c      	str	r3, [sp, #48]	; 0x30
   dd0a8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   dd0aa:	782b      	ldrb	r3, [r5, #0]
   dd0ac:	2b30      	cmp	r3, #48	; 0x30
   dd0ae:	d15c      	bne.n	dd16a <_strtod_r+0x11a>
   dd0b0:	786b      	ldrb	r3, [r5, #1]
   dd0b2:	2b58      	cmp	r3, #88	; 0x58
   dd0b4:	d001      	beq.n	dd0ba <_strtod_r+0x6a>
   dd0b6:	2b78      	cmp	r3, #120	; 0x78
   dd0b8:	d14c      	bne.n	dd154 <_strtod_r+0x104>
   dd0ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dd0bc:	9301      	str	r3, [sp, #4]
   dd0be:	ab18      	add	r3, sp, #96	; 0x60
   dd0c0:	9300      	str	r3, [sp, #0]
   dd0c2:	4aa9      	ldr	r2, [pc, #676]	; (dd368 <_strtod_r+0x318>)
   dd0c4:	9802      	ldr	r0, [sp, #8]
   dd0c6:	ab19      	add	r3, sp, #100	; 0x64
   dd0c8:	a917      	add	r1, sp, #92	; 0x5c
   dd0ca:	f001 f95c 	bl	de386 <__gethex>
   dd0ce:	f010 0607 	ands.w	r6, r0, #7
   dd0d2:	4604      	mov	r4, r0
   dd0d4:	f000 8587 	beq.w	ddbe6 <_strtod_r+0xb96>
   dd0d8:	2e06      	cmp	r6, #6
   dd0da:	d105      	bne.n	dd0e8 <_strtod_r+0x98>
   dd0dc:	3501      	adds	r5, #1
   dd0de:	2300      	movs	r3, #0
   dd0e0:	9517      	str	r5, [sp, #92]	; 0x5c
   dd0e2:	930c      	str	r3, [sp, #48]	; 0x30
   dd0e4:	f000 bd7f 	b.w	ddbe6 <_strtod_r+0xb96>
   dd0e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dd0ea:	b13a      	cbz	r2, dd0fc <_strtod_r+0xac>
   dd0ec:	2135      	movs	r1, #53	; 0x35
   dd0ee:	a81a      	add	r0, sp, #104	; 0x68
   dd0f0:	f002 f8af 	bl	df252 <__copybits>
   dd0f4:	9918      	ldr	r1, [sp, #96]	; 0x60
   dd0f6:	9802      	ldr	r0, [sp, #8]
   dd0f8:	f001 fd2d 	bl	deb56 <_Bfree>
   dd0fc:	2e06      	cmp	r6, #6
   dd0fe:	d822      	bhi.n	dd146 <_strtod_r+0xf6>
   dd100:	e8df f006 	tbb	[pc, r6]
   dd104:	18080d04 	.word	0x18080d04
   dd108:	0d1d      	.short	0x0d1d
   dd10a:	04          	.byte	0x04
   dd10b:	00          	.byte	0x00
   dd10c:	f04f 0b00 	mov.w	fp, #0
   dd110:	46da      	mov	sl, fp
   dd112:	e018      	b.n	dd146 <_strtod_r+0xf6>
   dd114:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dd118:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   dd11c:	e013      	b.n	dd146 <_strtod_r+0xf6>
   dd11e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   dd120:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dd122:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dd126:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dd12a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dd12e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dd132:	e008      	b.n	dd146 <_strtod_r+0xf6>
   dd134:	f8df b234 	ldr.w	fp, [pc, #564]	; dd36c <_strtod_r+0x31c>
   dd138:	f04f 0a00 	mov.w	sl, #0
   dd13c:	e003      	b.n	dd146 <_strtod_r+0xf6>
   dd13e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dd142:	f04f 3aff 	mov.w	sl, #4294967295
   dd146:	0721      	lsls	r1, r4, #28
   dd148:	f140 854d 	bpl.w	ddbe6 <_strtod_r+0xb96>
   dd14c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dd150:	f000 bd49 	b.w	ddbe6 <_strtod_r+0xb96>
   dd154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd156:	1c5a      	adds	r2, r3, #1
   dd158:	9217      	str	r2, [sp, #92]	; 0x5c
   dd15a:	785b      	ldrb	r3, [r3, #1]
   dd15c:	2b30      	cmp	r3, #48	; 0x30
   dd15e:	d0f9      	beq.n	dd154 <_strtod_r+0x104>
   dd160:	2b00      	cmp	r3, #0
   dd162:	f000 8540 	beq.w	ddbe6 <_strtod_r+0xb96>
   dd166:	2301      	movs	r3, #1
   dd168:	e000      	b.n	dd16c <_strtod_r+0x11c>
   dd16a:	2300      	movs	r3, #0
   dd16c:	f04f 0800 	mov.w	r8, #0
   dd170:	9306      	str	r3, [sp, #24]
   dd172:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd174:	9307      	str	r3, [sp, #28]
   dd176:	f8cd 8014 	str.w	r8, [sp, #20]
   dd17a:	f8cd 8010 	str.w	r8, [sp, #16]
   dd17e:	220a      	movs	r2, #10
   dd180:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   dd182:	782e      	ldrb	r6, [r5, #0]
   dd184:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dd188:	b2d9      	uxtb	r1, r3
   dd18a:	2909      	cmp	r1, #9
   dd18c:	d80e      	bhi.n	dd1ac <_strtod_r+0x15c>
   dd18e:	9904      	ldr	r1, [sp, #16]
   dd190:	2908      	cmp	r1, #8
   dd192:	bfdd      	ittte	le
   dd194:	9905      	ldrle	r1, [sp, #20]
   dd196:	fb02 3301 	mlale	r3, r2, r1, r3
   dd19a:	9305      	strle	r3, [sp, #20]
   dd19c:	fb02 3808 	mlagt	r8, r2, r8, r3
   dd1a0:	9b04      	ldr	r3, [sp, #16]
   dd1a2:	3501      	adds	r5, #1
   dd1a4:	3301      	adds	r3, #1
   dd1a6:	9304      	str	r3, [sp, #16]
   dd1a8:	9517      	str	r5, [sp, #92]	; 0x5c
   dd1aa:	e7e9      	b.n	dd180 <_strtod_r+0x130>
   dd1ac:	9802      	ldr	r0, [sp, #8]
   dd1ae:	f7ff fe07 	bl	dcdc0 <_localeconv_r>
   dd1b2:	6807      	ldr	r7, [r0, #0]
   dd1b4:	9802      	ldr	r0, [sp, #8]
   dd1b6:	f7ff fe03 	bl	dcdc0 <_localeconv_r>
   dd1ba:	6800      	ldr	r0, [r0, #0]
   dd1bc:	f7ff febf 	bl	dcf3e <strlen>
   dd1c0:	4639      	mov	r1, r7
   dd1c2:	4602      	mov	r2, r0
   dd1c4:	4628      	mov	r0, r5
   dd1c6:	f7ff fed7 	bl	dcf78 <strncmp>
   dd1ca:	4607      	mov	r7, r0
   dd1cc:	b128      	cbz	r0, dd1da <_strtod_r+0x18a>
   dd1ce:	2000      	movs	r0, #0
   dd1d0:	4633      	mov	r3, r6
   dd1d2:	9d04      	ldr	r5, [sp, #16]
   dd1d4:	4602      	mov	r2, r0
   dd1d6:	4601      	mov	r1, r0
   dd1d8:	e057      	b.n	dd28a <_strtod_r+0x23a>
   dd1da:	9802      	ldr	r0, [sp, #8]
   dd1dc:	f7ff fdf0 	bl	dcdc0 <_localeconv_r>
   dd1e0:	6800      	ldr	r0, [r0, #0]
   dd1e2:	f7ff feac 	bl	dcf3e <strlen>
   dd1e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd1e8:	181a      	adds	r2, r3, r0
   dd1ea:	9217      	str	r2, [sp, #92]	; 0x5c
   dd1ec:	9a04      	ldr	r2, [sp, #16]
   dd1ee:	5c1b      	ldrb	r3, [r3, r0]
   dd1f0:	2a00      	cmp	r2, #0
   dd1f2:	d142      	bne.n	dd27a <_strtod_r+0x22a>
   dd1f4:	4610      	mov	r0, r2
   dd1f6:	2b30      	cmp	r3, #48	; 0x30
   dd1f8:	d105      	bne.n	dd206 <_strtod_r+0x1b6>
   dd1fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd1fc:	1c5a      	adds	r2, r3, #1
   dd1fe:	9217      	str	r2, [sp, #92]	; 0x5c
   dd200:	3001      	adds	r0, #1
   dd202:	785b      	ldrb	r3, [r3, #1]
   dd204:	e7f7      	b.n	dd1f6 <_strtod_r+0x1a6>
   dd206:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dd20a:	2a08      	cmp	r2, #8
   dd20c:	d843      	bhi.n	dd296 <_strtod_r+0x246>
   dd20e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   dd210:	9207      	str	r2, [sp, #28]
   dd212:	4602      	mov	r2, r0
   dd214:	2000      	movs	r0, #0
   dd216:	4605      	mov	r5, r0
   dd218:	3b30      	subs	r3, #48	; 0x30
   dd21a:	f100 0101 	add.w	r1, r0, #1
   dd21e:	d026      	beq.n	dd26e <_strtod_r+0x21e>
   dd220:	440a      	add	r2, r1
   dd222:	eb05 0c00 	add.w	ip, r5, r0
   dd226:	4629      	mov	r1, r5
   dd228:	260a      	movs	r6, #10
   dd22a:	4561      	cmp	r1, ip
   dd22c:	d00e      	beq.n	dd24c <_strtod_r+0x1fc>
   dd22e:	3101      	adds	r1, #1
   dd230:	f101 3eff 	add.w	lr, r1, #4294967295
   dd234:	f1be 0f08 	cmp.w	lr, #8
   dd238:	dc03      	bgt.n	dd242 <_strtod_r+0x1f2>
   dd23a:	9f05      	ldr	r7, [sp, #20]
   dd23c:	4377      	muls	r7, r6
   dd23e:	9705      	str	r7, [sp, #20]
   dd240:	e7f3      	b.n	dd22a <_strtod_r+0x1da>
   dd242:	2910      	cmp	r1, #16
   dd244:	bfd8      	it	le
   dd246:	fb06 f808 	mulle.w	r8, r6, r8
   dd24a:	e7ee      	b.n	dd22a <_strtod_r+0x1da>
   dd24c:	4428      	add	r0, r5
   dd24e:	2808      	cmp	r0, #8
   dd250:	f100 0501 	add.w	r5, r0, #1
   dd254:	dc05      	bgt.n	dd262 <_strtod_r+0x212>
   dd256:	9805      	ldr	r0, [sp, #20]
   dd258:	210a      	movs	r1, #10
   dd25a:	fb01 3300 	mla	r3, r1, r0, r3
   dd25e:	9305      	str	r3, [sp, #20]
   dd260:	e004      	b.n	dd26c <_strtod_r+0x21c>
   dd262:	2d10      	cmp	r5, #16
   dd264:	bfdc      	itt	le
   dd266:	210a      	movle	r1, #10
   dd268:	fb01 3808 	mlale	r8, r1, r8, r3
   dd26c:	2100      	movs	r1, #0
   dd26e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd270:	1c58      	adds	r0, r3, #1
   dd272:	9017      	str	r0, [sp, #92]	; 0x5c
   dd274:	785b      	ldrb	r3, [r3, #1]
   dd276:	4608      	mov	r0, r1
   dd278:	e002      	b.n	dd280 <_strtod_r+0x230>
   dd27a:	9d04      	ldr	r5, [sp, #16]
   dd27c:	4638      	mov	r0, r7
   dd27e:	463a      	mov	r2, r7
   dd280:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dd284:	2909      	cmp	r1, #9
   dd286:	d9c7      	bls.n	dd218 <_strtod_r+0x1c8>
   dd288:	2101      	movs	r1, #1
   dd28a:	2b65      	cmp	r3, #101	; 0x65
   dd28c:	d001      	beq.n	dd292 <_strtod_r+0x242>
   dd28e:	2b45      	cmp	r3, #69	; 0x45
   dd290:	d151      	bne.n	dd336 <_strtod_r+0x2e6>
   dd292:	b96d      	cbnz	r5, dd2b0 <_strtod_r+0x260>
   dd294:	e004      	b.n	dd2a0 <_strtod_r+0x250>
   dd296:	2b65      	cmp	r3, #101	; 0x65
   dd298:	f040 84b3 	bne.w	ddc02 <_strtod_r+0xbb2>
   dd29c:	2200      	movs	r2, #0
   dd29e:	2101      	movs	r1, #1
   dd2a0:	b928      	cbnz	r0, dd2ae <_strtod_r+0x25e>
   dd2a2:	9b06      	ldr	r3, [sp, #24]
   dd2a4:	2b00      	cmp	r3, #0
   dd2a6:	f000 8095 	beq.w	dd3d4 <_strtod_r+0x384>
   dd2aa:	4605      	mov	r5, r0
   dd2ac:	e000      	b.n	dd2b0 <_strtod_r+0x260>
   dd2ae:	2500      	movs	r5, #0
   dd2b0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   dd2b2:	1c63      	adds	r3, r4, #1
   dd2b4:	9317      	str	r3, [sp, #92]	; 0x5c
   dd2b6:	7863      	ldrb	r3, [r4, #1]
   dd2b8:	2b2b      	cmp	r3, #43	; 0x2b
   dd2ba:	d006      	beq.n	dd2ca <_strtod_r+0x27a>
   dd2bc:	2b2d      	cmp	r3, #45	; 0x2d
   dd2be:	d002      	beq.n	dd2c6 <_strtod_r+0x276>
   dd2c0:	2600      	movs	r6, #0
   dd2c2:	9603      	str	r6, [sp, #12]
   dd2c4:	e006      	b.n	dd2d4 <_strtod_r+0x284>
   dd2c6:	2301      	movs	r3, #1
   dd2c8:	e000      	b.n	dd2cc <_strtod_r+0x27c>
   dd2ca:	2300      	movs	r3, #0
   dd2cc:	9303      	str	r3, [sp, #12]
   dd2ce:	1ca3      	adds	r3, r4, #2
   dd2d0:	9317      	str	r3, [sp, #92]	; 0x5c
   dd2d2:	78a3      	ldrb	r3, [r4, #2]
   dd2d4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dd2d8:	2e09      	cmp	r6, #9
   dd2da:	d82b      	bhi.n	dd334 <_strtod_r+0x2e4>
   dd2dc:	2b30      	cmp	r3, #48	; 0x30
   dd2de:	d104      	bne.n	dd2ea <_strtod_r+0x29a>
   dd2e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd2e2:	1c5e      	adds	r6, r3, #1
   dd2e4:	9617      	str	r6, [sp, #92]	; 0x5c
   dd2e6:	785b      	ldrb	r3, [r3, #1]
   dd2e8:	e7f8      	b.n	dd2dc <_strtod_r+0x28c>
   dd2ea:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   dd2ee:	2e08      	cmp	r6, #8
   dd2f0:	d821      	bhi.n	dd336 <_strtod_r+0x2e6>
   dd2f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dd2f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd2f8:	f04f 0c0a 	mov.w	ip, #10
   dd2fc:	461f      	mov	r7, r3
   dd2fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd300:	1c5e      	adds	r6, r3, #1
   dd302:	9617      	str	r6, [sp, #92]	; 0x5c
   dd304:	785b      	ldrb	r3, [r3, #1]
   dd306:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   dd30a:	f1b9 0f09 	cmp.w	r9, #9
   dd30e:	d804      	bhi.n	dd31a <_strtod_r+0x2ca>
   dd310:	fb0c 3e0e 	mla	lr, ip, lr, r3
   dd314:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dd318:	e7f1      	b.n	dd2fe <_strtod_r+0x2ae>
   dd31a:	1bf6      	subs	r6, r6, r7
   dd31c:	2e08      	cmp	r6, #8
   dd31e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   dd322:	dc02      	bgt.n	dd32a <_strtod_r+0x2da>
   dd324:	45f1      	cmp	r9, lr
   dd326:	bfa8      	it	ge
   dd328:	46f1      	movge	r9, lr
   dd32a:	9e03      	ldr	r6, [sp, #12]
   dd32c:	b12e      	cbz	r6, dd33a <_strtod_r+0x2ea>
   dd32e:	f1c9 0900 	rsb	r9, r9, #0
   dd332:	e002      	b.n	dd33a <_strtod_r+0x2ea>
   dd334:	9417      	str	r4, [sp, #92]	; 0x5c
   dd336:	f04f 0900 	mov.w	r9, #0
   dd33a:	2d00      	cmp	r5, #0
   dd33c:	d153      	bne.n	dd3e6 <_strtod_r+0x396>
   dd33e:	2800      	cmp	r0, #0
   dd340:	f040 8451 	bne.w	ddbe6 <_strtod_r+0xb96>
   dd344:	9a06      	ldr	r2, [sp, #24]
   dd346:	2a00      	cmp	r2, #0
   dd348:	f040 844d 	bne.w	ddbe6 <_strtod_r+0xb96>
   dd34c:	2900      	cmp	r1, #0
   dd34e:	d141      	bne.n	dd3d4 <_strtod_r+0x384>
   dd350:	2b4e      	cmp	r3, #78	; 0x4e
   dd352:	d020      	beq.n	dd396 <_strtod_r+0x346>
   dd354:	dc02      	bgt.n	dd35c <_strtod_r+0x30c>
   dd356:	2b49      	cmp	r3, #73	; 0x49
   dd358:	d00a      	beq.n	dd370 <_strtod_r+0x320>
   dd35a:	e03b      	b.n	dd3d4 <_strtod_r+0x384>
   dd35c:	2b69      	cmp	r3, #105	; 0x69
   dd35e:	d007      	beq.n	dd370 <_strtod_r+0x320>
   dd360:	2b6e      	cmp	r3, #110	; 0x6e
   dd362:	d018      	beq.n	dd396 <_strtod_r+0x346>
   dd364:	e036      	b.n	dd3d4 <_strtod_r+0x384>
   dd366:	bf00      	nop
   dd368:	000dff18 	.word	0x000dff18
   dd36c:	7ff00000 	.word	0x7ff00000
   dd370:	49a8      	ldr	r1, [pc, #672]	; (dd614 <_strtod_r+0x5c4>)
   dd372:	a817      	add	r0, sp, #92	; 0x5c
   dd374:	f001 fa38 	bl	de7e8 <__match>
   dd378:	b360      	cbz	r0, dd3d4 <_strtod_r+0x384>
   dd37a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd37c:	49a6      	ldr	r1, [pc, #664]	; (dd618 <_strtod_r+0x5c8>)
   dd37e:	3b01      	subs	r3, #1
   dd380:	a817      	add	r0, sp, #92	; 0x5c
   dd382:	9317      	str	r3, [sp, #92]	; 0x5c
   dd384:	f001 fa30 	bl	de7e8 <__match>
   dd388:	b910      	cbnz	r0, dd390 <_strtod_r+0x340>
   dd38a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd38c:	3301      	adds	r3, #1
   dd38e:	9317      	str	r3, [sp, #92]	; 0x5c
   dd390:	f8df b2a0 	ldr.w	fp, [pc, #672]	; dd634 <_strtod_r+0x5e4>
   dd394:	e01a      	b.n	dd3cc <_strtod_r+0x37c>
   dd396:	49a1      	ldr	r1, [pc, #644]	; (dd61c <_strtod_r+0x5cc>)
   dd398:	a817      	add	r0, sp, #92	; 0x5c
   dd39a:	f001 fa25 	bl	de7e8 <__match>
   dd39e:	b1c8      	cbz	r0, dd3d4 <_strtod_r+0x384>
   dd3a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd3a2:	781b      	ldrb	r3, [r3, #0]
   dd3a4:	2b28      	cmp	r3, #40	; 0x28
   dd3a6:	d10f      	bne.n	dd3c8 <_strtod_r+0x378>
   dd3a8:	aa1a      	add	r2, sp, #104	; 0x68
   dd3aa:	499d      	ldr	r1, [pc, #628]	; (dd620 <_strtod_r+0x5d0>)
   dd3ac:	a817      	add	r0, sp, #92	; 0x5c
   dd3ae:	f001 fa2e 	bl	de80e <__hexnan>
   dd3b2:	2805      	cmp	r0, #5
   dd3b4:	d108      	bne.n	dd3c8 <_strtod_r+0x378>
   dd3b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   dd3b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dd3bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dd3c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dd3c4:	f000 bc0f 	b.w	ddbe6 <_strtod_r+0xb96>
   dd3c8:	f8df b26c 	ldr.w	fp, [pc, #620]	; dd638 <_strtod_r+0x5e8>
   dd3cc:	f04f 0a00 	mov.w	sl, #0
   dd3d0:	f000 bc09 	b.w	ddbe6 <_strtod_r+0xb96>
   dd3d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dd3d6:	9417      	str	r4, [sp, #92]	; 0x5c
   dd3d8:	2b00      	cmp	r3, #0
   dd3da:	f000 840f 	beq.w	ddbfc <_strtod_r+0xbac>
   dd3de:	2300      	movs	r3, #0
   dd3e0:	930c      	str	r3, [sp, #48]	; 0x30
   dd3e2:	f000 bc02 	b.w	ddbea <_strtod_r+0xb9a>
   dd3e6:	9b04      	ldr	r3, [sp, #16]
   dd3e8:	9805      	ldr	r0, [sp, #20]
   dd3ea:	2b00      	cmp	r3, #0
   dd3ec:	bf08      	it	eq
   dd3ee:	462b      	moveq	r3, r5
   dd3f0:	2d10      	cmp	r5, #16
   dd3f2:	462c      	mov	r4, r5
   dd3f4:	ebc2 0909 	rsb	r9, r2, r9
   dd3f8:	bfa8      	it	ge
   dd3fa:	2410      	movge	r4, #16
   dd3fc:	9304      	str	r3, [sp, #16]
   dd3fe:	f7ff f81f 	bl	dc440 <__aeabi_ui2d>
   dd402:	2c09      	cmp	r4, #9
   dd404:	4682      	mov	sl, r0
   dd406:	468b      	mov	fp, r1
   dd408:	dd13      	ble.n	dd432 <_strtod_r+0x3e2>
   dd40a:	4b86      	ldr	r3, [pc, #536]	; (dd624 <_strtod_r+0x5d4>)
   dd40c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   dd410:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dd414:	f7ff f88a 	bl	dc52c <__aeabi_dmul>
   dd418:	4606      	mov	r6, r0
   dd41a:	4640      	mov	r0, r8
   dd41c:	460f      	mov	r7, r1
   dd41e:	f7ff f80f 	bl	dc440 <__aeabi_ui2d>
   dd422:	4602      	mov	r2, r0
   dd424:	460b      	mov	r3, r1
   dd426:	4630      	mov	r0, r6
   dd428:	4639      	mov	r1, r7
   dd42a:	f7fe fecd 	bl	dc1c8 <__adddf3>
   dd42e:	4682      	mov	sl, r0
   dd430:	468b      	mov	fp, r1
   dd432:	2d0f      	cmp	r5, #15
   dd434:	dc36      	bgt.n	dd4a4 <_strtod_r+0x454>
   dd436:	f1b9 0f00 	cmp.w	r9, #0
   dd43a:	f000 83d4 	beq.w	ddbe6 <_strtod_r+0xb96>
   dd43e:	dd24      	ble.n	dd48a <_strtod_r+0x43a>
   dd440:	f1b9 0f16 	cmp.w	r9, #22
   dd444:	dc07      	bgt.n	dd456 <_strtod_r+0x406>
   dd446:	4d77      	ldr	r5, [pc, #476]	; (dd624 <_strtod_r+0x5d4>)
   dd448:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   dd44c:	4652      	mov	r2, sl
   dd44e:	465b      	mov	r3, fp
   dd450:	e9d9 0100 	ldrd	r0, r1, [r9]
   dd454:	e014      	b.n	dd480 <_strtod_r+0x430>
   dd456:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dd45a:	4599      	cmp	r9, r3
   dd45c:	dc22      	bgt.n	dd4a4 <_strtod_r+0x454>
   dd45e:	4c71      	ldr	r4, [pc, #452]	; (dd624 <_strtod_r+0x5d4>)
   dd460:	f1c5 050f 	rsb	r5, r5, #15
   dd464:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dd468:	ebc5 0509 	rsb	r5, r5, r9
   dd46c:	4652      	mov	r2, sl
   dd46e:	465b      	mov	r3, fp
   dd470:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd474:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dd478:	f7ff f858 	bl	dc52c <__aeabi_dmul>
   dd47c:	e9d4 2300 	ldrd	r2, r3, [r4]
   dd480:	f7ff f854 	bl	dc52c <__aeabi_dmul>
   dd484:	4682      	mov	sl, r0
   dd486:	468b      	mov	fp, r1
   dd488:	e3ad      	b.n	ddbe6 <_strtod_r+0xb96>
   dd48a:	f119 0f16 	cmn.w	r9, #22
   dd48e:	db09      	blt.n	dd4a4 <_strtod_r+0x454>
   dd490:	4d64      	ldr	r5, [pc, #400]	; (dd624 <_strtod_r+0x5d4>)
   dd492:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   dd496:	e9d9 2300 	ldrd	r2, r3, [r9]
   dd49a:	4650      	mov	r0, sl
   dd49c:	4659      	mov	r1, fp
   dd49e:	f7ff f96f 	bl	dc780 <__aeabi_ddiv>
   dd4a2:	e7ef      	b.n	dd484 <_strtod_r+0x434>
   dd4a4:	1b2c      	subs	r4, r5, r4
   dd4a6:	444c      	add	r4, r9
   dd4a8:	2c00      	cmp	r4, #0
   dd4aa:	dd57      	ble.n	dd55c <_strtod_r+0x50c>
   dd4ac:	f014 010f 	ands.w	r1, r4, #15
   dd4b0:	d00a      	beq.n	dd4c8 <_strtod_r+0x478>
   dd4b2:	4b5c      	ldr	r3, [pc, #368]	; (dd624 <_strtod_r+0x5d4>)
   dd4b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   dd4b8:	4652      	mov	r2, sl
   dd4ba:	465b      	mov	r3, fp
   dd4bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd4c0:	f7ff f834 	bl	dc52c <__aeabi_dmul>
   dd4c4:	4682      	mov	sl, r0
   dd4c6:	468b      	mov	fp, r1
   dd4c8:	f034 040f 	bics.w	r4, r4, #15
   dd4cc:	f000 80b8 	beq.w	dd640 <_strtod_r+0x5f0>
   dd4d0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   dd4d4:	dd0b      	ble.n	dd4ee <_strtod_r+0x49e>
   dd4d6:	2400      	movs	r4, #0
   dd4d8:	4625      	mov	r5, r4
   dd4da:	9405      	str	r4, [sp, #20]
   dd4dc:	9404      	str	r4, [sp, #16]
   dd4de:	9a02      	ldr	r2, [sp, #8]
   dd4e0:	f8df b150 	ldr.w	fp, [pc, #336]	; dd634 <_strtod_r+0x5e4>
   dd4e4:	2322      	movs	r3, #34	; 0x22
   dd4e6:	6013      	str	r3, [r2, #0]
   dd4e8:	f04f 0a00 	mov.w	sl, #0
   dd4ec:	e187      	b.n	dd7fe <_strtod_r+0x7ae>
   dd4ee:	4e4e      	ldr	r6, [pc, #312]	; (dd628 <_strtod_r+0x5d8>)
   dd4f0:	2300      	movs	r3, #0
   dd4f2:	1124      	asrs	r4, r4, #4
   dd4f4:	4650      	mov	r0, sl
   dd4f6:	4659      	mov	r1, fp
   dd4f8:	4698      	mov	r8, r3
   dd4fa:	4637      	mov	r7, r6
   dd4fc:	2c01      	cmp	r4, #1
   dd4fe:	dd0b      	ble.n	dd518 <_strtod_r+0x4c8>
   dd500:	07e2      	lsls	r2, r4, #31
   dd502:	d504      	bpl.n	dd50e <_strtod_r+0x4be>
   dd504:	e9d6 2300 	ldrd	r2, r3, [r6]
   dd508:	f7ff f810 	bl	dc52c <__aeabi_dmul>
   dd50c:	2301      	movs	r3, #1
   dd50e:	f108 0801 	add.w	r8, r8, #1
   dd512:	1064      	asrs	r4, r4, #1
   dd514:	3608      	adds	r6, #8
   dd516:	e7f1      	b.n	dd4fc <_strtod_r+0x4ac>
   dd518:	b10b      	cbz	r3, dd51e <_strtod_r+0x4ce>
   dd51a:	4682      	mov	sl, r0
   dd51c:	468b      	mov	fp, r1
   dd51e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dd522:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   dd526:	4652      	mov	r2, sl
   dd528:	465b      	mov	r3, fp
   dd52a:	e9d7 0100 	ldrd	r0, r1, [r7]
   dd52e:	f7fe fffd 	bl	dc52c <__aeabi_dmul>
   dd532:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dd536:	468b      	mov	fp, r1
   dd538:	460a      	mov	r2, r1
   dd53a:	0d1b      	lsrs	r3, r3, #20
   dd53c:	493b      	ldr	r1, [pc, #236]	; (dd62c <_strtod_r+0x5dc>)
   dd53e:	051b      	lsls	r3, r3, #20
   dd540:	428b      	cmp	r3, r1
   dd542:	4682      	mov	sl, r0
   dd544:	d8c7      	bhi.n	dd4d6 <_strtod_r+0x486>
   dd546:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dd54a:	428b      	cmp	r3, r1
   dd54c:	bf86      	itte	hi
   dd54e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; dd63c <_strtod_r+0x5ec>
   dd552:	f04f 3aff 	movhi.w	sl, #4294967295
   dd556:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dd55a:	e071      	b.n	dd640 <_strtod_r+0x5f0>
   dd55c:	d070      	beq.n	dd640 <_strtod_r+0x5f0>
   dd55e:	4264      	negs	r4, r4
   dd560:	f014 020f 	ands.w	r2, r4, #15
   dd564:	d00a      	beq.n	dd57c <_strtod_r+0x52c>
   dd566:	4b2f      	ldr	r3, [pc, #188]	; (dd624 <_strtod_r+0x5d4>)
   dd568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dd56c:	4650      	mov	r0, sl
   dd56e:	4659      	mov	r1, fp
   dd570:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd574:	f7ff f904 	bl	dc780 <__aeabi_ddiv>
   dd578:	4682      	mov	sl, r0
   dd57a:	468b      	mov	fp, r1
   dd57c:	1124      	asrs	r4, r4, #4
   dd57e:	d05f      	beq.n	dd640 <_strtod_r+0x5f0>
   dd580:	2c1f      	cmp	r4, #31
   dd582:	dd04      	ble.n	dd58e <_strtod_r+0x53e>
   dd584:	2400      	movs	r4, #0
   dd586:	4625      	mov	r5, r4
   dd588:	9405      	str	r4, [sp, #20]
   dd58a:	9404      	str	r4, [sp, #16]
   dd58c:	e130      	b.n	dd7f0 <_strtod_r+0x7a0>
   dd58e:	f014 0f10 	tst.w	r4, #16
   dd592:	bf0c      	ite	eq
   dd594:	2300      	moveq	r3, #0
   dd596:	236a      	movne	r3, #106	; 0x6a
   dd598:	4e25      	ldr	r6, [pc, #148]	; (dd630 <_strtod_r+0x5e0>)
   dd59a:	9303      	str	r3, [sp, #12]
   dd59c:	4650      	mov	r0, sl
   dd59e:	4659      	mov	r1, fp
   dd5a0:	2300      	movs	r3, #0
   dd5a2:	2c00      	cmp	r4, #0
   dd5a4:	dd09      	ble.n	dd5ba <_strtod_r+0x56a>
   dd5a6:	07e2      	lsls	r2, r4, #31
   dd5a8:	d504      	bpl.n	dd5b4 <_strtod_r+0x564>
   dd5aa:	e9d6 2300 	ldrd	r2, r3, [r6]
   dd5ae:	f7fe ffbd 	bl	dc52c <__aeabi_dmul>
   dd5b2:	2301      	movs	r3, #1
   dd5b4:	1064      	asrs	r4, r4, #1
   dd5b6:	3608      	adds	r6, #8
   dd5b8:	e7f3      	b.n	dd5a2 <_strtod_r+0x552>
   dd5ba:	b10b      	cbz	r3, dd5c0 <_strtod_r+0x570>
   dd5bc:	4682      	mov	sl, r0
   dd5be:	468b      	mov	fp, r1
   dd5c0:	9b03      	ldr	r3, [sp, #12]
   dd5c2:	b1eb      	cbz	r3, dd600 <_strtod_r+0x5b0>
   dd5c4:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dd5c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dd5cc:	2b00      	cmp	r3, #0
   dd5ce:	4659      	mov	r1, fp
   dd5d0:	dd16      	ble.n	dd600 <_strtod_r+0x5b0>
   dd5d2:	2b1f      	cmp	r3, #31
   dd5d4:	dd0e      	ble.n	dd5f4 <_strtod_r+0x5a4>
   dd5d6:	2b34      	cmp	r3, #52	; 0x34
   dd5d8:	bfde      	ittt	le
   dd5da:	3b20      	suble	r3, #32
   dd5dc:	f04f 32ff 	movle.w	r2, #4294967295
   dd5e0:	fa02 f303 	lslle.w	r3, r2, r3
   dd5e4:	f04f 0a00 	mov.w	sl, #0
   dd5e8:	bfcc      	ite	gt
   dd5ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dd5ee:	ea03 0b01 	andle.w	fp, r3, r1
   dd5f2:	e005      	b.n	dd600 <_strtod_r+0x5b0>
   dd5f4:	f04f 32ff 	mov.w	r2, #4294967295
   dd5f8:	fa02 f303 	lsl.w	r3, r2, r3
   dd5fc:	ea03 0a0a 	and.w	sl, r3, sl
   dd600:	2200      	movs	r2, #0
   dd602:	2300      	movs	r3, #0
   dd604:	4650      	mov	r0, sl
   dd606:	4659      	mov	r1, fp
   dd608:	f7ff f9f8 	bl	dc9fc <__aeabi_dcmpeq>
   dd60c:	2800      	cmp	r0, #0
   dd60e:	d1b9      	bne.n	dd584 <_strtod_r+0x534>
   dd610:	e018      	b.n	dd644 <_strtod_r+0x5f4>
   dd612:	bf00      	nop
   dd614:	000dff40 	.word	0x000dff40
   dd618:	000dff43 	.word	0x000dff43
   dd61c:	000dff49 	.word	0x000dff49
   dd620:	000dff2c 	.word	0x000dff2c
   dd624:	000dffb8 	.word	0x000dffb8
   dd628:	000e0080 	.word	0x000e0080
   dd62c:	7ca00000 	.word	0x7ca00000
   dd630:	000dff50 	.word	0x000dff50
   dd634:	7ff00000 	.word	0x7ff00000
   dd638:	fff80000 	.word	0xfff80000
   dd63c:	7fefffff 	.word	0x7fefffff
   dd640:	2300      	movs	r3, #0
   dd642:	9303      	str	r3, [sp, #12]
   dd644:	9b05      	ldr	r3, [sp, #20]
   dd646:	9300      	str	r3, [sp, #0]
   dd648:	9a04      	ldr	r2, [sp, #16]
   dd64a:	9907      	ldr	r1, [sp, #28]
   dd64c:	9802      	ldr	r0, [sp, #8]
   dd64e:	462b      	mov	r3, r5
   dd650:	f001 fad3 	bl	debfa <__s2b>
   dd654:	9005      	str	r0, [sp, #20]
   dd656:	2800      	cmp	r0, #0
   dd658:	f43f af3d 	beq.w	dd4d6 <_strtod_r+0x486>
   dd65c:	f1b9 0f00 	cmp.w	r9, #0
   dd660:	f1c9 0300 	rsb	r3, r9, #0
   dd664:	bfa8      	it	ge
   dd666:	2300      	movge	r3, #0
   dd668:	930d      	str	r3, [sp, #52]	; 0x34
   dd66a:	2400      	movs	r4, #0
   dd66c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   dd670:	9312      	str	r3, [sp, #72]	; 0x48
   dd672:	4625      	mov	r5, r4
   dd674:	9b05      	ldr	r3, [sp, #20]
   dd676:	9802      	ldr	r0, [sp, #8]
   dd678:	6859      	ldr	r1, [r3, #4]
   dd67a:	f001 fa37 	bl	deaec <_Balloc>
   dd67e:	9004      	str	r0, [sp, #16]
   dd680:	2800      	cmp	r0, #0
   dd682:	f43f af2c 	beq.w	dd4de <_strtod_r+0x48e>
   dd686:	9b05      	ldr	r3, [sp, #20]
   dd688:	691a      	ldr	r2, [r3, #16]
   dd68a:	3202      	adds	r2, #2
   dd68c:	f103 010c 	add.w	r1, r3, #12
   dd690:	0092      	lsls	r2, r2, #2
   dd692:	300c      	adds	r0, #12
   dd694:	f7ff fba7 	bl	dcde6 <memcpy>
   dd698:	aa1a      	add	r2, sp, #104	; 0x68
   dd69a:	a919      	add	r1, sp, #100	; 0x64
   dd69c:	ec4b ab10 	vmov	d0, sl, fp
   dd6a0:	9802      	ldr	r0, [sp, #8]
   dd6a2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   dd6a6:	f001 fd5c 	bl	df162 <__d2b>
   dd6aa:	9018      	str	r0, [sp, #96]	; 0x60
   dd6ac:	2800      	cmp	r0, #0
   dd6ae:	f43f af16 	beq.w	dd4de <_strtod_r+0x48e>
   dd6b2:	2101      	movs	r1, #1
   dd6b4:	9802      	ldr	r0, [sp, #8]
   dd6b6:	f001 fb2b 	bl	ded10 <__i2b>
   dd6ba:	4605      	mov	r5, r0
   dd6bc:	2800      	cmp	r0, #0
   dd6be:	f43f af0e 	beq.w	dd4de <_strtod_r+0x48e>
   dd6c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dd6c4:	9903      	ldr	r1, [sp, #12]
   dd6c6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   dd6c8:	2b00      	cmp	r3, #0
   dd6ca:	bfad      	iteet	ge
   dd6cc:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   dd6ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   dd6d0:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   dd6d4:	eb02 0803 	addge.w	r8, r2, r3
   dd6d8:	bfb8      	it	lt
   dd6da:	1ad2      	sublt	r2, r2, r3
   dd6dc:	eba3 0301 	sub.w	r3, r3, r1
   dd6e0:	4433      	add	r3, r6
   dd6e2:	49b5      	ldr	r1, [pc, #724]	; (dd9b8 <_strtod_r+0x968>)
   dd6e4:	bfa8      	it	ge
   dd6e6:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   dd6e8:	3b01      	subs	r3, #1
   dd6ea:	428b      	cmp	r3, r1
   dd6ec:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   dd6f0:	f280 808a 	bge.w	dd808 <_strtod_r+0x7b8>
   dd6f4:	1ac9      	subs	r1, r1, r3
   dd6f6:	291f      	cmp	r1, #31
   dd6f8:	bfc8      	it	gt
   dd6fa:	4fb0      	ldrgt	r7, [pc, #704]	; (dd9bc <_strtod_r+0x96c>)
   dd6fc:	f04f 0901 	mov.w	r9, #1
   dd700:	bfd4      	ite	le
   dd702:	fa09 f301 	lslle.w	r3, r9, r1
   dd706:	1aff      	subgt	r7, r7, r3
   dd708:	eba6 0601 	sub.w	r6, r6, r1
   dd70c:	bfd9      	ittee	le
   dd70e:	9306      	strle	r3, [sp, #24]
   dd710:	2700      	movle	r7, #0
   dd712:	fa09 f707 	lslgt.w	r7, r9, r7
   dd716:	f8cd 9018 	strgt.w	r9, [sp, #24]
   dd71a:	eb08 0906 	add.w	r9, r8, r6
   dd71e:	9b03      	ldr	r3, [sp, #12]
   dd720:	45c8      	cmp	r8, r9
   dd722:	4416      	add	r6, r2
   dd724:	441e      	add	r6, r3
   dd726:	4643      	mov	r3, r8
   dd728:	bfa8      	it	ge
   dd72a:	464b      	movge	r3, r9
   dd72c:	42b3      	cmp	r3, r6
   dd72e:	bfa8      	it	ge
   dd730:	4633      	movge	r3, r6
   dd732:	2b00      	cmp	r3, #0
   dd734:	bfc2      	ittt	gt
   dd736:	ebc3 0909 	rsbgt	r9, r3, r9
   dd73a:	1af6      	subgt	r6, r6, r3
   dd73c:	ebc3 0808 	rsbgt	r8, r3, r8
   dd740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dd742:	2b00      	cmp	r3, #0
   dd744:	d164      	bne.n	dd810 <_strtod_r+0x7c0>
   dd746:	f1b9 0f00 	cmp.w	r9, #0
   dd74a:	dc7a      	bgt.n	dd842 <_strtod_r+0x7f2>
   dd74c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   dd74e:	2b00      	cmp	r3, #0
   dd750:	f040 8081 	bne.w	dd856 <_strtod_r+0x806>
   dd754:	2e00      	cmp	r6, #0
   dd756:	f300 8088 	bgt.w	dd86a <_strtod_r+0x81a>
   dd75a:	f1b8 0f00 	cmp.w	r8, #0
   dd75e:	f300 808e 	bgt.w	dd87e <_strtod_r+0x82e>
   dd762:	9a04      	ldr	r2, [sp, #16]
   dd764:	9918      	ldr	r1, [sp, #96]	; 0x60
   dd766:	9802      	ldr	r0, [sp, #8]
   dd768:	f001 fc27 	bl	defba <__mdiff>
   dd76c:	4604      	mov	r4, r0
   dd76e:	2800      	cmp	r0, #0
   dd770:	f43f aeb5 	beq.w	dd4de <_strtod_r+0x48e>
   dd774:	68c3      	ldr	r3, [r0, #12]
   dd776:	9307      	str	r3, [sp, #28]
   dd778:	2300      	movs	r3, #0
   dd77a:	60c3      	str	r3, [r0, #12]
   dd77c:	4629      	mov	r1, r5
   dd77e:	f001 fc00 	bl	def82 <__mcmp>
   dd782:	2800      	cmp	r0, #0
   dd784:	f280 8089 	bge.w	dd89a <_strtod_r+0x84a>
   dd788:	9b07      	ldr	r3, [sp, #28]
   dd78a:	2b00      	cmp	r3, #0
   dd78c:	f040 8204 	bne.w	ddb98 <_strtod_r+0xb48>
   dd790:	f1ba 0f00 	cmp.w	sl, #0
   dd794:	f040 8200 	bne.w	ddb98 <_strtod_r+0xb48>
   dd798:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd79c:	2b00      	cmp	r3, #0
   dd79e:	f040 81fb 	bne.w	ddb98 <_strtod_r+0xb48>
   dd7a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dd7a6:	0d1b      	lsrs	r3, r3, #20
   dd7a8:	051b      	lsls	r3, r3, #20
   dd7aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dd7ae:	f240 81f3 	bls.w	ddb98 <_strtod_r+0xb48>
   dd7b2:	6963      	ldr	r3, [r4, #20]
   dd7b4:	2b00      	cmp	r3, #0
   dd7b6:	d06c      	beq.n	dd892 <_strtod_r+0x842>
   dd7b8:	4621      	mov	r1, r4
   dd7ba:	2201      	movs	r2, #1
   dd7bc:	9802      	ldr	r0, [sp, #8]
   dd7be:	f001 fb8f 	bl	deee0 <__lshift>
   dd7c2:	4629      	mov	r1, r5
   dd7c4:	4604      	mov	r4, r0
   dd7c6:	f001 fbdc 	bl	def82 <__mcmp>
   dd7ca:	2800      	cmp	r0, #0
   dd7cc:	f340 81e4 	ble.w	ddb98 <_strtod_r+0xb48>
   dd7d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dd7d4:	9a03      	ldr	r2, [sp, #12]
   dd7d6:	0d1b      	lsrs	r3, r3, #20
   dd7d8:	051b      	lsls	r3, r3, #20
   dd7da:	2a00      	cmp	r2, #0
   dd7dc:	f000 808c 	beq.w	dd8f8 <_strtod_r+0x8a8>
   dd7e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dd7e4:	f300 8088 	bgt.w	dd8f8 <_strtod_r+0x8a8>
   dd7e8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   dd7ec:	f300 81d6 	bgt.w	ddb9c <_strtod_r+0xb4c>
   dd7f0:	9a02      	ldr	r2, [sp, #8]
   dd7f2:	2322      	movs	r3, #34	; 0x22
   dd7f4:	f04f 0a00 	mov.w	sl, #0
   dd7f8:	f04f 0b00 	mov.w	fp, #0
   dd7fc:	6013      	str	r3, [r2, #0]
   dd7fe:	9b05      	ldr	r3, [sp, #20]
   dd800:	2b00      	cmp	r3, #0
   dd802:	f040 81dc 	bne.w	ddbbe <_strtod_r+0xb6e>
   dd806:	e1ee      	b.n	ddbe6 <_strtod_r+0xb96>
   dd808:	2301      	movs	r3, #1
   dd80a:	2700      	movs	r7, #0
   dd80c:	9306      	str	r3, [sp, #24]
   dd80e:	e784      	b.n	dd71a <_strtod_r+0x6ca>
   dd810:	4629      	mov	r1, r5
   dd812:	461a      	mov	r2, r3
   dd814:	9802      	ldr	r0, [sp, #8]
   dd816:	f001 fb15 	bl	dee44 <__pow5mult>
   dd81a:	4605      	mov	r5, r0
   dd81c:	2800      	cmp	r0, #0
   dd81e:	f43f ae5e 	beq.w	dd4de <_strtod_r+0x48e>
   dd822:	4601      	mov	r1, r0
   dd824:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dd826:	9802      	ldr	r0, [sp, #8]
   dd828:	f001 fa7b 	bl	ded22 <__multiply>
   dd82c:	9007      	str	r0, [sp, #28]
   dd82e:	2800      	cmp	r0, #0
   dd830:	f43f ae55 	beq.w	dd4de <_strtod_r+0x48e>
   dd834:	9918      	ldr	r1, [sp, #96]	; 0x60
   dd836:	9802      	ldr	r0, [sp, #8]
   dd838:	f001 f98d 	bl	deb56 <_Bfree>
   dd83c:	9b07      	ldr	r3, [sp, #28]
   dd83e:	9318      	str	r3, [sp, #96]	; 0x60
   dd840:	e781      	b.n	dd746 <_strtod_r+0x6f6>
   dd842:	464a      	mov	r2, r9
   dd844:	9918      	ldr	r1, [sp, #96]	; 0x60
   dd846:	9802      	ldr	r0, [sp, #8]
   dd848:	f001 fb4a 	bl	deee0 <__lshift>
   dd84c:	9018      	str	r0, [sp, #96]	; 0x60
   dd84e:	2800      	cmp	r0, #0
   dd850:	f47f af7c 	bne.w	dd74c <_strtod_r+0x6fc>
   dd854:	e643      	b.n	dd4de <_strtod_r+0x48e>
   dd856:	9a12      	ldr	r2, [sp, #72]	; 0x48
   dd858:	9904      	ldr	r1, [sp, #16]
   dd85a:	9802      	ldr	r0, [sp, #8]
   dd85c:	f001 faf2 	bl	dee44 <__pow5mult>
   dd860:	9004      	str	r0, [sp, #16]
   dd862:	2800      	cmp	r0, #0
   dd864:	f47f af76 	bne.w	dd754 <_strtod_r+0x704>
   dd868:	e639      	b.n	dd4de <_strtod_r+0x48e>
   dd86a:	4632      	mov	r2, r6
   dd86c:	9904      	ldr	r1, [sp, #16]
   dd86e:	9802      	ldr	r0, [sp, #8]
   dd870:	f001 fb36 	bl	deee0 <__lshift>
   dd874:	9004      	str	r0, [sp, #16]
   dd876:	2800      	cmp	r0, #0
   dd878:	f47f af6f 	bne.w	dd75a <_strtod_r+0x70a>
   dd87c:	e62f      	b.n	dd4de <_strtod_r+0x48e>
   dd87e:	4629      	mov	r1, r5
   dd880:	4642      	mov	r2, r8
   dd882:	9802      	ldr	r0, [sp, #8]
   dd884:	f001 fb2c 	bl	deee0 <__lshift>
   dd888:	4605      	mov	r5, r0
   dd88a:	2800      	cmp	r0, #0
   dd88c:	f47f af69 	bne.w	dd762 <_strtod_r+0x712>
   dd890:	e625      	b.n	dd4de <_strtod_r+0x48e>
   dd892:	6923      	ldr	r3, [r4, #16]
   dd894:	2b01      	cmp	r3, #1
   dd896:	dc8f      	bgt.n	dd7b8 <_strtod_r+0x768>
   dd898:	e17e      	b.n	ddb98 <_strtod_r+0xb48>
   dd89a:	d161      	bne.n	dd960 <_strtod_r+0x910>
   dd89c:	9a07      	ldr	r2, [sp, #28]
   dd89e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd8a2:	b322      	cbz	r2, dd8ee <_strtod_r+0x89e>
   dd8a4:	4946      	ldr	r1, [pc, #280]	; (dd9c0 <_strtod_r+0x970>)
   dd8a6:	428b      	cmp	r3, r1
   dd8a8:	465a      	mov	r2, fp
   dd8aa:	d12e      	bne.n	dd90a <_strtod_r+0x8ba>
   dd8ac:	9b03      	ldr	r3, [sp, #12]
   dd8ae:	4651      	mov	r1, sl
   dd8b0:	b163      	cbz	r3, dd8cc <_strtod_r+0x87c>
   dd8b2:	4b44      	ldr	r3, [pc, #272]	; (dd9c4 <_strtod_r+0x974>)
   dd8b4:	4013      	ands	r3, r2
   dd8b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dd8ba:	d807      	bhi.n	dd8cc <_strtod_r+0x87c>
   dd8bc:	0d1b      	lsrs	r3, r3, #20
   dd8be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dd8c2:	f04f 30ff 	mov.w	r0, #4294967295
   dd8c6:	fa00 f303 	lsl.w	r3, r0, r3
   dd8ca:	e001      	b.n	dd8d0 <_strtod_r+0x880>
   dd8cc:	f04f 33ff 	mov.w	r3, #4294967295
   dd8d0:	428b      	cmp	r3, r1
   dd8d2:	d11a      	bne.n	dd90a <_strtod_r+0x8ba>
   dd8d4:	493c      	ldr	r1, [pc, #240]	; (dd9c8 <_strtod_r+0x978>)
   dd8d6:	428a      	cmp	r2, r1
   dd8d8:	d102      	bne.n	dd8e0 <_strtod_r+0x890>
   dd8da:	3301      	adds	r3, #1
   dd8dc:	f43f adff 	beq.w	dd4de <_strtod_r+0x48e>
   dd8e0:	4b38      	ldr	r3, [pc, #224]	; (dd9c4 <_strtod_r+0x974>)
   dd8e2:	4013      	ands	r3, r2
   dd8e4:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dd8e8:	f04f 0a00 	mov.w	sl, #0
   dd8ec:	e154      	b.n	ddb98 <_strtod_r+0xb48>
   dd8ee:	b963      	cbnz	r3, dd90a <_strtod_r+0x8ba>
   dd8f0:	f1ba 0f00 	cmp.w	sl, #0
   dd8f4:	d109      	bne.n	dd90a <_strtod_r+0x8ba>
   dd8f6:	e76b      	b.n	dd7d0 <_strtod_r+0x780>
   dd8f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dd8fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dd900:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dd904:	f04f 3aff 	mov.w	sl, #4294967295
   dd908:	e146      	b.n	ddb98 <_strtod_r+0xb48>
   dd90a:	b117      	cbz	r7, dd912 <_strtod_r+0x8c2>
   dd90c:	ea17 0f0b 	tst.w	r7, fp
   dd910:	e002      	b.n	dd918 <_strtod_r+0x8c8>
   dd912:	9b06      	ldr	r3, [sp, #24]
   dd914:	ea13 0f0a 	tst.w	r3, sl
   dd918:	f000 813e 	beq.w	ddb98 <_strtod_r+0xb48>
   dd91c:	9b07      	ldr	r3, [sp, #28]
   dd91e:	9a03      	ldr	r2, [sp, #12]
   dd920:	4650      	mov	r0, sl
   dd922:	4659      	mov	r1, fp
   dd924:	b153      	cbz	r3, dd93c <_strtod_r+0x8ec>
   dd926:	f7ff fb75 	bl	dd014 <sulp>
   dd92a:	4602      	mov	r2, r0
   dd92c:	460b      	mov	r3, r1
   dd92e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   dd932:	f7fe fc49 	bl	dc1c8 <__adddf3>
   dd936:	4682      	mov	sl, r0
   dd938:	468b      	mov	fp, r1
   dd93a:	e12d      	b.n	ddb98 <_strtod_r+0xb48>
   dd93c:	f7ff fb6a 	bl	dd014 <sulp>
   dd940:	4602      	mov	r2, r0
   dd942:	460b      	mov	r3, r1
   dd944:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   dd948:	f7fe fc3c 	bl	dc1c4 <__aeabi_dsub>
   dd94c:	2200      	movs	r2, #0
   dd94e:	2300      	movs	r3, #0
   dd950:	4682      	mov	sl, r0
   dd952:	468b      	mov	fp, r1
   dd954:	f7ff f852 	bl	dc9fc <__aeabi_dcmpeq>
   dd958:	2800      	cmp	r0, #0
   dd95a:	f47f af49 	bne.w	dd7f0 <_strtod_r+0x7a0>
   dd95e:	e11b      	b.n	ddb98 <_strtod_r+0xb48>
   dd960:	4629      	mov	r1, r5
   dd962:	4620      	mov	r0, r4
   dd964:	f001 fc4b 	bl	df1fe <__ratio>
   dd968:	ec57 6b10 	vmov	r6, r7, d0
   dd96c:	2200      	movs	r2, #0
   dd96e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dd972:	ee10 0a10 	vmov	r0, s0
   dd976:	4639      	mov	r1, r7
   dd978:	f7ff f854 	bl	dca24 <__aeabi_dcmple>
   dd97c:	2800      	cmp	r0, #0
   dd97e:	d042      	beq.n	dda06 <_strtod_r+0x9b6>
   dd980:	9b07      	ldr	r3, [sp, #28]
   dd982:	b123      	cbz	r3, dd98e <_strtod_r+0x93e>
   dd984:	f04f 0800 	mov.w	r8, #0
   dd988:	f8df 9040 	ldr.w	r9, [pc, #64]	; dd9cc <_strtod_r+0x97c>
   dd98c:	e011      	b.n	dd9b2 <_strtod_r+0x962>
   dd98e:	f1ba 0f00 	cmp.w	sl, #0
   dd992:	d103      	bne.n	dd99c <_strtod_r+0x94c>
   dd994:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd998:	b93b      	cbnz	r3, dd9aa <_strtod_r+0x95a>
   dd99a:	e01b      	b.n	dd9d4 <_strtod_r+0x984>
   dd99c:	f1ba 0f01 	cmp.w	sl, #1
   dd9a0:	d103      	bne.n	dd9aa <_strtod_r+0x95a>
   dd9a2:	f1bb 0f00 	cmp.w	fp, #0
   dd9a6:	f43f af23 	beq.w	dd7f0 <_strtod_r+0x7a0>
   dd9aa:	f8df 9024 	ldr.w	r9, [pc, #36]	; dd9d0 <_strtod_r+0x980>
   dd9ae:	f04f 0800 	mov.w	r8, #0
   dd9b2:	2600      	movs	r6, #0
   dd9b4:	4f05      	ldr	r7, [pc, #20]	; (dd9cc <_strtod_r+0x97c>)
   dd9b6:	e039      	b.n	dda2c <_strtod_r+0x9dc>
   dd9b8:	fffffc02 	.word	0xfffffc02
   dd9bc:	fffffbe2 	.word	0xfffffbe2
   dd9c0:	000fffff 	.word	0x000fffff
   dd9c4:	7ff00000 	.word	0x7ff00000
   dd9c8:	7fefffff 	.word	0x7fefffff
   dd9cc:	3ff00000 	.word	0x3ff00000
   dd9d0:	bff00000 	.word	0xbff00000
   dd9d4:	2200      	movs	r2, #0
   dd9d6:	4b98      	ldr	r3, [pc, #608]	; (ddc38 <_strtod_r+0xbe8>)
   dd9d8:	4630      	mov	r0, r6
   dd9da:	4639      	mov	r1, r7
   dd9dc:	f7ff f818 	bl	dca10 <__aeabi_dcmplt>
   dd9e0:	b940      	cbnz	r0, dd9f4 <_strtod_r+0x9a4>
   dd9e2:	4630      	mov	r0, r6
   dd9e4:	4639      	mov	r1, r7
   dd9e6:	2200      	movs	r2, #0
   dd9e8:	4b94      	ldr	r3, [pc, #592]	; (ddc3c <_strtod_r+0xbec>)
   dd9ea:	f7fe fd9f 	bl	dc52c <__aeabi_dmul>
   dd9ee:	4606      	mov	r6, r0
   dd9f0:	460f      	mov	r7, r1
   dd9f2:	e001      	b.n	dd9f8 <_strtod_r+0x9a8>
   dd9f4:	4f91      	ldr	r7, [pc, #580]	; (ddc3c <_strtod_r+0xbec>)
   dd9f6:	2600      	movs	r6, #0
   dd9f8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   dd9fc:	9614      	str	r6, [sp, #80]	; 0x50
   dd9fe:	9315      	str	r3, [sp, #84]	; 0x54
   dda00:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   dda04:	e012      	b.n	dda2c <_strtod_r+0x9dc>
   dda06:	4b8d      	ldr	r3, [pc, #564]	; (ddc3c <_strtod_r+0xbec>)
   dda08:	4630      	mov	r0, r6
   dda0a:	4639      	mov	r1, r7
   dda0c:	2200      	movs	r2, #0
   dda0e:	f7fe fd8d 	bl	dc52c <__aeabi_dmul>
   dda12:	9b07      	ldr	r3, [sp, #28]
   dda14:	4606      	mov	r6, r0
   dda16:	460f      	mov	r7, r1
   dda18:	b923      	cbnz	r3, dda24 <_strtod_r+0x9d4>
   dda1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dda1e:	900e      	str	r0, [sp, #56]	; 0x38
   dda20:	930f      	str	r3, [sp, #60]	; 0x3c
   dda22:	e001      	b.n	dda28 <_strtod_r+0x9d8>
   dda24:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   dda28:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   dda2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dda30:	0d1b      	lsrs	r3, r3, #20
   dda32:	051b      	lsls	r3, r3, #20
   dda34:	9306      	str	r3, [sp, #24]
   dda36:	9a06      	ldr	r2, [sp, #24]
   dda38:	4b81      	ldr	r3, [pc, #516]	; (ddc40 <_strtod_r+0xbf0>)
   dda3a:	429a      	cmp	r2, r3
   dda3c:	d12b      	bne.n	dda96 <_strtod_r+0xa46>
   dda3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   dda42:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dda46:	ec4b ab10 	vmov	d0, sl, fp
   dda4a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   dda4e:	f001 fb13 	bl	df078 <__ulp>
   dda52:	4640      	mov	r0, r8
   dda54:	ec53 2b10 	vmov	r2, r3, d0
   dda58:	4649      	mov	r1, r9
   dda5a:	f7fe fd67 	bl	dc52c <__aeabi_dmul>
   dda5e:	4652      	mov	r2, sl
   dda60:	465b      	mov	r3, fp
   dda62:	f7fe fbb1 	bl	dc1c8 <__adddf3>
   dda66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dda6a:	0d1b      	lsrs	r3, r3, #20
   dda6c:	4a75      	ldr	r2, [pc, #468]	; (ddc44 <_strtod_r+0xbf4>)
   dda6e:	051b      	lsls	r3, r3, #20
   dda70:	4293      	cmp	r3, r2
   dda72:	4682      	mov	sl, r0
   dda74:	d90c      	bls.n	dda90 <_strtod_r+0xa40>
   dda76:	4b74      	ldr	r3, [pc, #464]	; (ddc48 <_strtod_r+0xbf8>)
   dda78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dda7a:	429a      	cmp	r2, r3
   dda7c:	d103      	bne.n	dda86 <_strtod_r+0xa36>
   dda7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dda80:	3301      	adds	r3, #1
   dda82:	f43f ad2c 	beq.w	dd4de <_strtod_r+0x48e>
   dda86:	f8df b1c0 	ldr.w	fp, [pc, #448]	; ddc48 <_strtod_r+0xbf8>
   dda8a:	f04f 3aff 	mov.w	sl, #4294967295
   dda8e:	e072      	b.n	ddb76 <_strtod_r+0xb26>
   dda90:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   dda94:	e038      	b.n	ddb08 <_strtod_r+0xab8>
   dda96:	9b03      	ldr	r3, [sp, #12]
   dda98:	b333      	cbz	r3, ddae8 <_strtod_r+0xa98>
   dda9a:	9b06      	ldr	r3, [sp, #24]
   dda9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ddaa0:	d822      	bhi.n	ddae8 <_strtod_r+0xa98>
   ddaa2:	a35d      	add	r3, pc, #372	; (adr r3, ddc18 <_strtod_r+0xbc8>)
   ddaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddaa8:	4630      	mov	r0, r6
   ddaaa:	4639      	mov	r1, r7
   ddaac:	f7fe ffba 	bl	dca24 <__aeabi_dcmple>
   ddab0:	b1a8      	cbz	r0, ddade <_strtod_r+0xa8e>
   ddab2:	4639      	mov	r1, r7
   ddab4:	4630      	mov	r0, r6
   ddab6:	f7fe fffb 	bl	dcab0 <__aeabi_d2uiz>
   ddaba:	2800      	cmp	r0, #0
   ddabc:	bf08      	it	eq
   ddabe:	2001      	moveq	r0, #1
   ddac0:	f7fe fcbe 	bl	dc440 <__aeabi_ui2d>
   ddac4:	9b07      	ldr	r3, [sp, #28]
   ddac6:	4606      	mov	r6, r0
   ddac8:	460f      	mov	r7, r1
   ddaca:	b923      	cbnz	r3, ddad6 <_strtod_r+0xa86>
   ddacc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ddad0:	9010      	str	r0, [sp, #64]	; 0x40
   ddad2:	9311      	str	r3, [sp, #68]	; 0x44
   ddad4:	e001      	b.n	ddada <_strtod_r+0xa8a>
   ddad6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   ddada:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   ddade:	9a06      	ldr	r2, [sp, #24]
   ddae0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   ddae4:	ebc2 0903 	rsb	r9, r2, r3
   ddae8:	ed9d 0b08 	vldr	d0, [sp, #32]
   ddaec:	f001 fac4 	bl	df078 <__ulp>
   ddaf0:	4640      	mov	r0, r8
   ddaf2:	ec53 2b10 	vmov	r2, r3, d0
   ddaf6:	4649      	mov	r1, r9
   ddaf8:	f7fe fd18 	bl	dc52c <__aeabi_dmul>
   ddafc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   ddb00:	f7fe fb62 	bl	dc1c8 <__adddf3>
   ddb04:	4682      	mov	sl, r0
   ddb06:	468b      	mov	fp, r1
   ddb08:	9b03      	ldr	r3, [sp, #12]
   ddb0a:	bba3      	cbnz	r3, ddb76 <_strtod_r+0xb26>
   ddb0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ddb10:	0d1b      	lsrs	r3, r3, #20
   ddb12:	9a06      	ldr	r2, [sp, #24]
   ddb14:	051b      	lsls	r3, r3, #20
   ddb16:	429a      	cmp	r2, r3
   ddb18:	46d8      	mov	r8, fp
   ddb1a:	d12c      	bne.n	ddb76 <_strtod_r+0xb26>
   ddb1c:	4639      	mov	r1, r7
   ddb1e:	4630      	mov	r0, r6
   ddb20:	f7fe ff9e 	bl	dca60 <__aeabi_d2iz>
   ddb24:	f7fe fc9c 	bl	dc460 <__aeabi_i2d>
   ddb28:	460b      	mov	r3, r1
   ddb2a:	4602      	mov	r2, r0
   ddb2c:	4639      	mov	r1, r7
   ddb2e:	4630      	mov	r0, r6
   ddb30:	f7fe fb48 	bl	dc1c4 <__aeabi_dsub>
   ddb34:	9b07      	ldr	r3, [sp, #28]
   ddb36:	4606      	mov	r6, r0
   ddb38:	460f      	mov	r7, r1
   ddb3a:	b92b      	cbnz	r3, ddb48 <_strtod_r+0xaf8>
   ddb3c:	f1ba 0f00 	cmp.w	sl, #0
   ddb40:	d102      	bne.n	ddb48 <_strtod_r+0xaf8>
   ddb42:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ddb46:	b183      	cbz	r3, ddb6a <_strtod_r+0xb1a>
   ddb48:	a335      	add	r3, pc, #212	; (adr r3, ddc20 <_strtod_r+0xbd0>)
   ddb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb4e:	4630      	mov	r0, r6
   ddb50:	4639      	mov	r1, r7
   ddb52:	f7fe ff5d 	bl	dca10 <__aeabi_dcmplt>
   ddb56:	2800      	cmp	r0, #0
   ddb58:	d131      	bne.n	ddbbe <_strtod_r+0xb6e>
   ddb5a:	a333      	add	r3, pc, #204	; (adr r3, ddc28 <_strtod_r+0xbd8>)
   ddb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb60:	4630      	mov	r0, r6
   ddb62:	4639      	mov	r1, r7
   ddb64:	f7fe ff72 	bl	dca4c <__aeabi_dcmpgt>
   ddb68:	e004      	b.n	ddb74 <_strtod_r+0xb24>
   ddb6a:	a331      	add	r3, pc, #196	; (adr r3, ddc30 <_strtod_r+0xbe0>)
   ddb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb70:	f7fe ff4e 	bl	dca10 <__aeabi_dcmplt>
   ddb74:	bb18      	cbnz	r0, ddbbe <_strtod_r+0xb6e>
   ddb76:	9918      	ldr	r1, [sp, #96]	; 0x60
   ddb78:	9802      	ldr	r0, [sp, #8]
   ddb7a:	f000 ffec 	bl	deb56 <_Bfree>
   ddb7e:	9904      	ldr	r1, [sp, #16]
   ddb80:	9802      	ldr	r0, [sp, #8]
   ddb82:	f000 ffe8 	bl	deb56 <_Bfree>
   ddb86:	4629      	mov	r1, r5
   ddb88:	9802      	ldr	r0, [sp, #8]
   ddb8a:	f000 ffe4 	bl	deb56 <_Bfree>
   ddb8e:	4621      	mov	r1, r4
   ddb90:	9802      	ldr	r0, [sp, #8]
   ddb92:	f000 ffe0 	bl	deb56 <_Bfree>
   ddb96:	e56d      	b.n	dd674 <_strtod_r+0x624>
   ddb98:	9b03      	ldr	r3, [sp, #12]
   ddb9a:	b183      	cbz	r3, ddbbe <_strtod_r+0xb6e>
   ddb9c:	4b2b      	ldr	r3, [pc, #172]	; (ddc4c <_strtod_r+0xbfc>)
   ddb9e:	930b      	str	r3, [sp, #44]	; 0x2c
   ddba0:	2300      	movs	r3, #0
   ddba2:	930a      	str	r3, [sp, #40]	; 0x28
   ddba4:	4650      	mov	r0, sl
   ddba6:	4659      	mov	r1, fp
   ddba8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   ddbac:	f7fe fcbe 	bl	dc52c <__aeabi_dmul>
   ddbb0:	4682      	mov	sl, r0
   ddbb2:	468b      	mov	fp, r1
   ddbb4:	b919      	cbnz	r1, ddbbe <_strtod_r+0xb6e>
   ddbb6:	b910      	cbnz	r0, ddbbe <_strtod_r+0xb6e>
   ddbb8:	9a02      	ldr	r2, [sp, #8]
   ddbba:	2322      	movs	r3, #34	; 0x22
   ddbbc:	6013      	str	r3, [r2, #0]
   ddbbe:	9918      	ldr	r1, [sp, #96]	; 0x60
   ddbc0:	9802      	ldr	r0, [sp, #8]
   ddbc2:	f000 ffc8 	bl	deb56 <_Bfree>
   ddbc6:	9904      	ldr	r1, [sp, #16]
   ddbc8:	9802      	ldr	r0, [sp, #8]
   ddbca:	f000 ffc4 	bl	deb56 <_Bfree>
   ddbce:	4629      	mov	r1, r5
   ddbd0:	9802      	ldr	r0, [sp, #8]
   ddbd2:	f000 ffc0 	bl	deb56 <_Bfree>
   ddbd6:	9905      	ldr	r1, [sp, #20]
   ddbd8:	9802      	ldr	r0, [sp, #8]
   ddbda:	f000 ffbc 	bl	deb56 <_Bfree>
   ddbde:	4621      	mov	r1, r4
   ddbe0:	9802      	ldr	r0, [sp, #8]
   ddbe2:	f000 ffb8 	bl	deb56 <_Bfree>
   ddbe6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ddbe8:	b113      	cbz	r3, ddbf0 <_strtod_r+0xba0>
   ddbea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   ddbec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ddbee:	6013      	str	r3, [r2, #0]
   ddbf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ddbf2:	b11b      	cbz	r3, ddbfc <_strtod_r+0xbac>
   ddbf4:	4652      	mov	r2, sl
   ddbf6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ddbfa:	e007      	b.n	ddc0c <_strtod_r+0xbbc>
   ddbfc:	4652      	mov	r2, sl
   ddbfe:	465b      	mov	r3, fp
   ddc00:	e004      	b.n	ddc0c <_strtod_r+0xbbc>
   ddc02:	2500      	movs	r5, #0
   ddc04:	462a      	mov	r2, r5
   ddc06:	2101      	movs	r1, #1
   ddc08:	f7ff bb41 	b.w	dd28e <_strtod_r+0x23e>
   ddc0c:	ec43 2b10 	vmov	d0, r2, r3
   ddc10:	b01d      	add	sp, #116	; 0x74
   ddc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddc16:	bf00      	nop
   ddc18:	ffc00000 	.word	0xffc00000
   ddc1c:	41dfffff 	.word	0x41dfffff
   ddc20:	94a03595 	.word	0x94a03595
   ddc24:	3fdfffff 	.word	0x3fdfffff
   ddc28:	35afe535 	.word	0x35afe535
   ddc2c:	3fe00000 	.word	0x3fe00000
   ddc30:	94a03595 	.word	0x94a03595
   ddc34:	3fcfffff 	.word	0x3fcfffff
   ddc38:	3ff00000 	.word	0x3ff00000
   ddc3c:	3fe00000 	.word	0x3fe00000
   ddc40:	7fe00000 	.word	0x7fe00000
   ddc44:	7c9fffff 	.word	0x7c9fffff
   ddc48:	7fefffff 	.word	0x7fefffff
   ddc4c:	39500000 	.word	0x39500000

000ddc50 <strtod>:
   ddc50:	4b02      	ldr	r3, [pc, #8]	; (ddc5c <strtod+0xc>)
   ddc52:	460a      	mov	r2, r1
   ddc54:	4601      	mov	r1, r0
   ddc56:	6818      	ldr	r0, [r3, #0]
   ddc58:	f7ff b9fa 	b.w	dd050 <_strtod_r>
   ddc5c:	2003d3d8 	.word	0x2003d3d8

000ddc60 <_strtol_r>:
   ddc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ddc64:	4680      	mov	r8, r0
   ddc66:	4840      	ldr	r0, [pc, #256]	; (ddd68 <_strtol_r+0x108>)
   ddc68:	f8d0 9000 	ldr.w	r9, [r0]
   ddc6c:	460f      	mov	r7, r1
   ddc6e:	463d      	mov	r5, r7
   ddc70:	f815 4b01 	ldrb.w	r4, [r5], #1
   ddc74:	eb09 0004 	add.w	r0, r9, r4
   ddc78:	7840      	ldrb	r0, [r0, #1]
   ddc7a:	f000 0008 	and.w	r0, r0, #8
   ddc7e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   ddc82:	b108      	cbz	r0, ddc88 <_strtol_r+0x28>
   ddc84:	462f      	mov	r7, r5
   ddc86:	e7f2      	b.n	ddc6e <_strtol_r+0xe>
   ddc88:	2c2d      	cmp	r4, #45	; 0x2d
   ddc8a:	d103      	bne.n	ddc94 <_strtol_r+0x34>
   ddc8c:	1cbd      	adds	r5, r7, #2
   ddc8e:	787c      	ldrb	r4, [r7, #1]
   ddc90:	2601      	movs	r6, #1
   ddc92:	e003      	b.n	ddc9c <_strtol_r+0x3c>
   ddc94:	2c2b      	cmp	r4, #43	; 0x2b
   ddc96:	bf04      	itt	eq
   ddc98:	787c      	ldrbeq	r4, [r7, #1]
   ddc9a:	1cbd      	addeq	r5, r7, #2
   ddc9c:	b113      	cbz	r3, ddca4 <_strtol_r+0x44>
   ddc9e:	2b10      	cmp	r3, #16
   ddca0:	d10a      	bne.n	ddcb8 <_strtol_r+0x58>
   ddca2:	e05b      	b.n	ddd5c <_strtol_r+0xfc>
   ddca4:	2c30      	cmp	r4, #48	; 0x30
   ddca6:	d157      	bne.n	ddd58 <_strtol_r+0xf8>
   ddca8:	7828      	ldrb	r0, [r5, #0]
   ddcaa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   ddcae:	2858      	cmp	r0, #88	; 0x58
   ddcb0:	d14d      	bne.n	ddd4e <_strtol_r+0xee>
   ddcb2:	786c      	ldrb	r4, [r5, #1]
   ddcb4:	2310      	movs	r3, #16
   ddcb6:	3502      	adds	r5, #2
   ddcb8:	2e00      	cmp	r6, #0
   ddcba:	bf14      	ite	ne
   ddcbc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   ddcc0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   ddcc4:	2700      	movs	r7, #0
   ddcc6:	fbbc faf3 	udiv	sl, ip, r3
   ddcca:	4638      	mov	r0, r7
   ddccc:	fb03 cc1a 	mls	ip, r3, sl, ip
   ddcd0:	eb09 0e04 	add.w	lr, r9, r4
   ddcd4:	f89e e001 	ldrb.w	lr, [lr, #1]
   ddcd8:	f01e 0f04 	tst.w	lr, #4
   ddcdc:	d001      	beq.n	ddce2 <_strtol_r+0x82>
   ddcde:	3c30      	subs	r4, #48	; 0x30
   ddce0:	e00b      	b.n	ddcfa <_strtol_r+0x9a>
   ddce2:	f01e 0e03 	ands.w	lr, lr, #3
   ddce6:	d01b      	beq.n	ddd20 <_strtol_r+0xc0>
   ddce8:	f1be 0f01 	cmp.w	lr, #1
   ddcec:	bf0c      	ite	eq
   ddcee:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   ddcf2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   ddcf6:	ebce 0404 	rsb	r4, lr, r4
   ddcfa:	42a3      	cmp	r3, r4
   ddcfc:	dd10      	ble.n	ddd20 <_strtol_r+0xc0>
   ddcfe:	f1b7 3fff 	cmp.w	r7, #4294967295
   ddd02:	d00a      	beq.n	ddd1a <_strtol_r+0xba>
   ddd04:	4550      	cmp	r0, sl
   ddd06:	d806      	bhi.n	ddd16 <_strtol_r+0xb6>
   ddd08:	d101      	bne.n	ddd0e <_strtol_r+0xae>
   ddd0a:	4564      	cmp	r4, ip
   ddd0c:	dc03      	bgt.n	ddd16 <_strtol_r+0xb6>
   ddd0e:	fb03 4000 	mla	r0, r3, r0, r4
   ddd12:	2701      	movs	r7, #1
   ddd14:	e001      	b.n	ddd1a <_strtol_r+0xba>
   ddd16:	f04f 37ff 	mov.w	r7, #4294967295
   ddd1a:	f815 4b01 	ldrb.w	r4, [r5], #1
   ddd1e:	e7d7      	b.n	ddcd0 <_strtol_r+0x70>
   ddd20:	1c7b      	adds	r3, r7, #1
   ddd22:	d10c      	bne.n	ddd3e <_strtol_r+0xde>
   ddd24:	2e00      	cmp	r6, #0
   ddd26:	f04f 0322 	mov.w	r3, #34	; 0x22
   ddd2a:	bf14      	ite	ne
   ddd2c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   ddd30:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   ddd34:	f8c8 3000 	str.w	r3, [r8]
   ddd38:	b92a      	cbnz	r2, ddd46 <_strtol_r+0xe6>
   ddd3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddd3e:	b106      	cbz	r6, ddd42 <_strtol_r+0xe2>
   ddd40:	4240      	negs	r0, r0
   ddd42:	b172      	cbz	r2, ddd62 <_strtol_r+0x102>
   ddd44:	b107      	cbz	r7, ddd48 <_strtol_r+0xe8>
   ddd46:	1e69      	subs	r1, r5, #1
   ddd48:	6011      	str	r1, [r2, #0]
   ddd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddd4e:	2430      	movs	r4, #48	; 0x30
   ddd50:	2b00      	cmp	r3, #0
   ddd52:	d1b1      	bne.n	ddcb8 <_strtol_r+0x58>
   ddd54:	2308      	movs	r3, #8
   ddd56:	e7af      	b.n	ddcb8 <_strtol_r+0x58>
   ddd58:	230a      	movs	r3, #10
   ddd5a:	e7ad      	b.n	ddcb8 <_strtol_r+0x58>
   ddd5c:	2c30      	cmp	r4, #48	; 0x30
   ddd5e:	d0a3      	beq.n	ddca8 <_strtol_r+0x48>
   ddd60:	e7aa      	b.n	ddcb8 <_strtol_r+0x58>
   ddd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddd66:	bf00      	nop
   ddd68:	2003d374 	.word	0x2003d374

000ddd6c <strtol>:
   ddd6c:	4613      	mov	r3, r2
   ddd6e:	460a      	mov	r2, r1
   ddd70:	4601      	mov	r1, r0
   ddd72:	4802      	ldr	r0, [pc, #8]	; (ddd7c <strtol+0x10>)
   ddd74:	6800      	ldr	r0, [r0, #0]
   ddd76:	f7ff bf73 	b.w	ddc60 <_strtol_r>
   ddd7a:	bf00      	nop
   ddd7c:	2003d3d8 	.word	0x2003d3d8

000ddd80 <_strtoul_r>:
   ddd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ddd84:	4680      	mov	r8, r0
   ddd86:	483c      	ldr	r0, [pc, #240]	; (dde78 <_strtoul_r+0xf8>)
   ddd88:	f8d0 9000 	ldr.w	r9, [r0]
   ddd8c:	460e      	mov	r6, r1
   ddd8e:	4635      	mov	r5, r6
   ddd90:	f815 4b01 	ldrb.w	r4, [r5], #1
   ddd94:	eb09 0004 	add.w	r0, r9, r4
   ddd98:	7840      	ldrb	r0, [r0, #1]
   ddd9a:	f000 0008 	and.w	r0, r0, #8
   ddd9e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   ddda2:	b108      	cbz	r0, ddda8 <_strtoul_r+0x28>
   ddda4:	462e      	mov	r6, r5
   ddda6:	e7f2      	b.n	ddd8e <_strtoul_r+0xe>
   ddda8:	2c2d      	cmp	r4, #45	; 0x2d
   dddaa:	d103      	bne.n	dddb4 <_strtoul_r+0x34>
   dddac:	1cb5      	adds	r5, r6, #2
   dddae:	7874      	ldrb	r4, [r6, #1]
   dddb0:	2701      	movs	r7, #1
   dddb2:	e003      	b.n	dddbc <_strtoul_r+0x3c>
   dddb4:	2c2b      	cmp	r4, #43	; 0x2b
   dddb6:	bf04      	itt	eq
   dddb8:	7874      	ldrbeq	r4, [r6, #1]
   dddba:	1cb5      	addeq	r5, r6, #2
   dddbc:	b113      	cbz	r3, dddc4 <_strtoul_r+0x44>
   dddbe:	2b10      	cmp	r3, #16
   dddc0:	d10a      	bne.n	dddd8 <_strtoul_r+0x58>
   dddc2:	e053      	b.n	dde6c <_strtoul_r+0xec>
   dddc4:	2c30      	cmp	r4, #48	; 0x30
   dddc6:	d14f      	bne.n	dde68 <_strtoul_r+0xe8>
   dddc8:	7828      	ldrb	r0, [r5, #0]
   dddca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dddce:	2858      	cmp	r0, #88	; 0x58
   dddd0:	d145      	bne.n	dde5e <_strtoul_r+0xde>
   dddd2:	786c      	ldrb	r4, [r5, #1]
   dddd4:	2310      	movs	r3, #16
   dddd6:	3502      	adds	r5, #2
   dddd8:	f04f 3cff 	mov.w	ip, #4294967295
   ddddc:	2600      	movs	r6, #0
   dddde:	fbbc fcf3 	udiv	ip, ip, r3
   ddde2:	fb03 fa0c 	mul.w	sl, r3, ip
   ddde6:	ea6f 0a0a 	mvn.w	sl, sl
   dddea:	4630      	mov	r0, r6
   dddec:	eb09 0e04 	add.w	lr, r9, r4
   dddf0:	f89e e001 	ldrb.w	lr, [lr, #1]
   dddf4:	f01e 0f04 	tst.w	lr, #4
   dddf8:	d001      	beq.n	dddfe <_strtoul_r+0x7e>
   dddfa:	3c30      	subs	r4, #48	; 0x30
   dddfc:	e00b      	b.n	dde16 <_strtoul_r+0x96>
   dddfe:	f01e 0e03 	ands.w	lr, lr, #3
   dde02:	d01a      	beq.n	dde3a <_strtoul_r+0xba>
   dde04:	f1be 0f01 	cmp.w	lr, #1
   dde08:	bf0c      	ite	eq
   dde0a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dde0e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dde12:	ebce 0404 	rsb	r4, lr, r4
   dde16:	42a3      	cmp	r3, r4
   dde18:	dd0f      	ble.n	dde3a <_strtoul_r+0xba>
   dde1a:	2e00      	cmp	r6, #0
   dde1c:	db08      	blt.n	dde30 <_strtoul_r+0xb0>
   dde1e:	4560      	cmp	r0, ip
   dde20:	d806      	bhi.n	dde30 <_strtoul_r+0xb0>
   dde22:	d101      	bne.n	dde28 <_strtoul_r+0xa8>
   dde24:	4554      	cmp	r4, sl
   dde26:	dc03      	bgt.n	dde30 <_strtoul_r+0xb0>
   dde28:	fb03 4000 	mla	r0, r3, r0, r4
   dde2c:	2601      	movs	r6, #1
   dde2e:	e001      	b.n	dde34 <_strtoul_r+0xb4>
   dde30:	f04f 36ff 	mov.w	r6, #4294967295
   dde34:	f815 4b01 	ldrb.w	r4, [r5], #1
   dde38:	e7d8      	b.n	dddec <_strtoul_r+0x6c>
   dde3a:	2e00      	cmp	r6, #0
   dde3c:	da07      	bge.n	dde4e <_strtoul_r+0xce>
   dde3e:	2322      	movs	r3, #34	; 0x22
   dde40:	f8c8 3000 	str.w	r3, [r8]
   dde44:	f04f 30ff 	mov.w	r0, #4294967295
   dde48:	b92a      	cbnz	r2, dde56 <_strtoul_r+0xd6>
   dde4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dde4e:	b107      	cbz	r7, dde52 <_strtoul_r+0xd2>
   dde50:	4240      	negs	r0, r0
   dde52:	b172      	cbz	r2, dde72 <_strtoul_r+0xf2>
   dde54:	b106      	cbz	r6, dde58 <_strtoul_r+0xd8>
   dde56:	1e69      	subs	r1, r5, #1
   dde58:	6011      	str	r1, [r2, #0]
   dde5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dde5e:	2430      	movs	r4, #48	; 0x30
   dde60:	2b00      	cmp	r3, #0
   dde62:	d1b9      	bne.n	dddd8 <_strtoul_r+0x58>
   dde64:	2308      	movs	r3, #8
   dde66:	e7b7      	b.n	dddd8 <_strtoul_r+0x58>
   dde68:	230a      	movs	r3, #10
   dde6a:	e7b5      	b.n	dddd8 <_strtoul_r+0x58>
   dde6c:	2c30      	cmp	r4, #48	; 0x30
   dde6e:	d0ab      	beq.n	dddc8 <_strtoul_r+0x48>
   dde70:	e7b2      	b.n	dddd8 <_strtoul_r+0x58>
   dde72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dde76:	bf00      	nop
   dde78:	2003d374 	.word	0x2003d374

000dde7c <strtoul>:
   dde7c:	4613      	mov	r3, r2
   dde7e:	460a      	mov	r2, r1
   dde80:	4601      	mov	r1, r0
   dde82:	4802      	ldr	r0, [pc, #8]	; (dde8c <strtoul+0x10>)
   dde84:	6800      	ldr	r0, [r0, #0]
   dde86:	f7ff bf7b 	b.w	ddd80 <_strtoul_r>
   dde8a:	bf00      	nop
   dde8c:	2003d3d8 	.word	0x2003d3d8

000dde90 <__tzcalc_limits>:
   dde90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dde94:	4604      	mov	r4, r0
   dde96:	f000 fd8d 	bl	de9b4 <__gettzinfo>
   dde9a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dde9e:	429c      	cmp	r4, r3
   ddea0:	f340 8096 	ble.w	ddfd0 <__tzcalc_limits+0x140>
   ddea4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   ddea8:	18e3      	adds	r3, r4, r3
   ddeaa:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   ddeae:	109b      	asrs	r3, r3, #2
   ddeb0:	f240 156d 	movw	r5, #365	; 0x16d
   ddeb4:	fb05 3502 	mla	r5, r5, r2, r3
   ddeb8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   ddebc:	f06f 0363 	mvn.w	r3, #99	; 0x63
   ddec0:	fb92 f3f3 	sdiv	r3, r2, r3
   ddec4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   ddec8:	442b      	add	r3, r5
   ddeca:	18a5      	adds	r5, r4, r2
   ddecc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dded0:	fb95 f5f2 	sdiv	r5, r5, r2
   dded4:	441d      	add	r5, r3
   dded6:	2364      	movs	r3, #100	; 0x64
   dded8:	fb94 f7f2 	sdiv	r7, r4, r2
   ddedc:	fb94 f6f3 	sdiv	r6, r4, r3
   ddee0:	fb02 4717 	mls	r7, r2, r7, r4
   ddee4:	fb03 4616 	mls	r6, r3, r6, r4
   ddee8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   ddeec:	fab7 fe87 	clz	lr, r7
   ddef0:	9301      	str	r3, [sp, #4]
   ddef2:	f004 0303 	and.w	r3, r4, #3
   ddef6:	6044      	str	r4, [r0, #4]
   ddef8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   ddefc:	4601      	mov	r1, r0
   ddefe:	9300      	str	r3, [sp, #0]
   ddf00:	f04f 0c07 	mov.w	ip, #7
   ddf04:	7a0b      	ldrb	r3, [r1, #8]
   ddf06:	2b4a      	cmp	r3, #74	; 0x4a
   ddf08:	d10e      	bne.n	ddf28 <__tzcalc_limits+0x98>
   ddf0a:	694b      	ldr	r3, [r1, #20]
   ddf0c:	9a00      	ldr	r2, [sp, #0]
   ddf0e:	18ec      	adds	r4, r5, r3
   ddf10:	b902      	cbnz	r2, ddf14 <__tzcalc_limits+0x84>
   ddf12:	b906      	cbnz	r6, ddf16 <__tzcalc_limits+0x86>
   ddf14:	b927      	cbnz	r7, ddf20 <__tzcalc_limits+0x90>
   ddf16:	2b3b      	cmp	r3, #59	; 0x3b
   ddf18:	bfd4      	ite	le
   ddf1a:	2300      	movle	r3, #0
   ddf1c:	2301      	movgt	r3, #1
   ddf1e:	e000      	b.n	ddf22 <__tzcalc_limits+0x92>
   ddf20:	2300      	movs	r3, #0
   ddf22:	4423      	add	r3, r4
   ddf24:	3b01      	subs	r3, #1
   ddf26:	e03f      	b.n	ddfa8 <__tzcalc_limits+0x118>
   ddf28:	2b44      	cmp	r3, #68	; 0x44
   ddf2a:	d102      	bne.n	ddf32 <__tzcalc_limits+0xa2>
   ddf2c:	694b      	ldr	r3, [r1, #20]
   ddf2e:	442b      	add	r3, r5
   ddf30:	e03a      	b.n	ddfa8 <__tzcalc_limits+0x118>
   ddf32:	9b00      	ldr	r3, [sp, #0]
   ddf34:	b92b      	cbnz	r3, ddf42 <__tzcalc_limits+0xb2>
   ddf36:	2e00      	cmp	r6, #0
   ddf38:	bf0c      	ite	eq
   ddf3a:	46f0      	moveq	r8, lr
   ddf3c:	f04f 0801 	movne.w	r8, #1
   ddf40:	e000      	b.n	ddf44 <__tzcalc_limits+0xb4>
   ddf42:	46f0      	mov	r8, lr
   ddf44:	4b24      	ldr	r3, [pc, #144]	; (ddfd8 <__tzcalc_limits+0x148>)
   ddf46:	68cc      	ldr	r4, [r1, #12]
   ddf48:	2230      	movs	r2, #48	; 0x30
   ddf4a:	fb02 3808 	mla	r8, r2, r8, r3
   ddf4e:	f1a8 0a04 	sub.w	sl, r8, #4
   ddf52:	46a9      	mov	r9, r5
   ddf54:	2301      	movs	r3, #1
   ddf56:	42a3      	cmp	r3, r4
   ddf58:	da04      	bge.n	ddf64 <__tzcalc_limits+0xd4>
   ddf5a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   ddf5e:	3301      	adds	r3, #1
   ddf60:	44d9      	add	r9, fp
   ddf62:	e7f8      	b.n	ddf56 <__tzcalc_limits+0xc6>
   ddf64:	f109 0304 	add.w	r3, r9, #4
   ddf68:	fb93 fbfc 	sdiv	fp, r3, ip
   ddf6c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   ddf70:	2c01      	cmp	r4, #1
   ddf72:	ebca 0a03 	rsb	sl, sl, r3
   ddf76:	694b      	ldr	r3, [r1, #20]
   ddf78:	bfb8      	it	lt
   ddf7a:	2401      	movlt	r4, #1
   ddf7c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   ddf80:	ebb3 0a0a 	subs.w	sl, r3, sl
   ddf84:	690b      	ldr	r3, [r1, #16]
   ddf86:	f104 34ff 	add.w	r4, r4, #4294967295
   ddf8a:	f103 33ff 	add.w	r3, r3, #4294967295
   ddf8e:	bf48      	it	mi
   ddf90:	f10a 0a07 	addmi.w	sl, sl, #7
   ddf94:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   ddf98:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   ddf9c:	4453      	add	r3, sl
   ddf9e:	42a3      	cmp	r3, r4
   ddfa0:	db01      	blt.n	ddfa6 <__tzcalc_limits+0x116>
   ddfa2:	3b07      	subs	r3, #7
   ddfa4:	e7fb      	b.n	ddf9e <__tzcalc_limits+0x10e>
   ddfa6:	444b      	add	r3, r9
   ddfa8:	698c      	ldr	r4, [r1, #24]
   ddfaa:	4a0c      	ldr	r2, [pc, #48]	; (ddfdc <__tzcalc_limits+0x14c>)
   ddfac:	fb02 4303 	mla	r3, r2, r3, r4
   ddfb0:	6a0c      	ldr	r4, [r1, #32]
   ddfb2:	4423      	add	r3, r4
   ddfb4:	f841 3f1c 	str.w	r3, [r1, #28]!
   ddfb8:	9b01      	ldr	r3, [sp, #4]
   ddfba:	4299      	cmp	r1, r3
   ddfbc:	d1a2      	bne.n	ddf04 <__tzcalc_limits+0x74>
   ddfbe:	69c3      	ldr	r3, [r0, #28]
   ddfc0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   ddfc2:	4293      	cmp	r3, r2
   ddfc4:	bfac      	ite	ge
   ddfc6:	2300      	movge	r3, #0
   ddfc8:	2301      	movlt	r3, #1
   ddfca:	6003      	str	r3, [r0, #0]
   ddfcc:	2001      	movs	r0, #1
   ddfce:	e000      	b.n	ddfd2 <__tzcalc_limits+0x142>
   ddfd0:	2000      	movs	r0, #0
   ddfd2:	b003      	add	sp, #12
   ddfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddfd8:	000dfeb8 	.word	0x000dfeb8
   ddfdc:	00015180 	.word	0x00015180

000ddfe0 <__tz_lock>:
   ddfe0:	4770      	bx	lr

000ddfe2 <__tz_unlock>:
   ddfe2:	4770      	bx	lr

000ddfe4 <_tzset_unlocked>:
   ddfe4:	4b01      	ldr	r3, [pc, #4]	; (ddfec <_tzset_unlocked+0x8>)
   ddfe6:	6818      	ldr	r0, [r3, #0]
   ddfe8:	f000 b802 	b.w	ddff0 <_tzset_unlocked_r>
   ddfec:	2003d3d8 	.word	0x2003d3d8

000ddff0 <_tzset_unlocked_r>:
   ddff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddff4:	b08d      	sub	sp, #52	; 0x34
   ddff6:	4607      	mov	r7, r0
   ddff8:	f000 fcdc 	bl	de9b4 <__gettzinfo>
   ddffc:	49b0      	ldr	r1, [pc, #704]	; (de2c0 <_tzset_unlocked_r+0x2d0>)
   ddffe:	4eb1      	ldr	r6, [pc, #708]	; (de2c4 <_tzset_unlocked_r+0x2d4>)
   de000:	4604      	mov	r4, r0
   de002:	4638      	mov	r0, r7
   de004:	f000 fcce 	bl	de9a4 <_getenv_r>
   de008:	4605      	mov	r5, r0
   de00a:	b960      	cbnz	r0, de026 <_tzset_unlocked_r+0x36>
   de00c:	4bae      	ldr	r3, [pc, #696]	; (de2c8 <_tzset_unlocked_r+0x2d8>)
   de00e:	4aaf      	ldr	r2, [pc, #700]	; (de2cc <_tzset_unlocked_r+0x2dc>)
   de010:	6018      	str	r0, [r3, #0]
   de012:	4baf      	ldr	r3, [pc, #700]	; (de2d0 <_tzset_unlocked_r+0x2e0>)
   de014:	6018      	str	r0, [r3, #0]
   de016:	4baf      	ldr	r3, [pc, #700]	; (de2d4 <_tzset_unlocked_r+0x2e4>)
   de018:	6830      	ldr	r0, [r6, #0]
   de01a:	601a      	str	r2, [r3, #0]
   de01c:	605a      	str	r2, [r3, #4]
   de01e:	f7fa f907 	bl	d8230 <free>
   de022:	6035      	str	r5, [r6, #0]
   de024:	e148      	b.n	de2b8 <_tzset_unlocked_r+0x2c8>
   de026:	6831      	ldr	r1, [r6, #0]
   de028:	b979      	cbnz	r1, de04a <_tzset_unlocked_r+0x5a>
   de02a:	6830      	ldr	r0, [r6, #0]
   de02c:	f7fa f900 	bl	d8230 <free>
   de030:	4628      	mov	r0, r5
   de032:	f7fe ff84 	bl	dcf3e <strlen>
   de036:	1c41      	adds	r1, r0, #1
   de038:	4638      	mov	r0, r7
   de03a:	f7fa f931 	bl	d82a0 <_malloc_r>
   de03e:	6030      	str	r0, [r6, #0]
   de040:	b148      	cbz	r0, de056 <_tzset_unlocked_r+0x66>
   de042:	4629      	mov	r1, r5
   de044:	f7fe ff57 	bl	dcef6 <strcpy>
   de048:	e005      	b.n	de056 <_tzset_unlocked_r+0x66>
   de04a:	f7fe ff4a 	bl	dcee2 <strcmp>
   de04e:	2800      	cmp	r0, #0
   de050:	f000 8132 	beq.w	de2b8 <_tzset_unlocked_r+0x2c8>
   de054:	e7e9      	b.n	de02a <_tzset_unlocked_r+0x3a>
   de056:	782b      	ldrb	r3, [r5, #0]
   de058:	4a9f      	ldr	r2, [pc, #636]	; (de2d8 <_tzset_unlocked_r+0x2e8>)
   de05a:	49a0      	ldr	r1, [pc, #640]	; (de2dc <_tzset_unlocked_r+0x2ec>)
   de05c:	2b3a      	cmp	r3, #58	; 0x3a
   de05e:	bf08      	it	eq
   de060:	3501      	addeq	r5, #1
   de062:	ae0a      	add	r6, sp, #40	; 0x28
   de064:	4633      	mov	r3, r6
   de066:	4628      	mov	r0, r5
   de068:	f7fa f8fa 	bl	d8260 <siscanf>
   de06c:	2800      	cmp	r0, #0
   de06e:	f340 8123 	ble.w	de2b8 <_tzset_unlocked_r+0x2c8>
   de072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   de074:	18ef      	adds	r7, r5, r3
   de076:	5ceb      	ldrb	r3, [r5, r3]
   de078:	2b2d      	cmp	r3, #45	; 0x2d
   de07a:	d103      	bne.n	de084 <_tzset_unlocked_r+0x94>
   de07c:	3701      	adds	r7, #1
   de07e:	f04f 35ff 	mov.w	r5, #4294967295
   de082:	e003      	b.n	de08c <_tzset_unlocked_r+0x9c>
   de084:	2b2b      	cmp	r3, #43	; 0x2b
   de086:	bf08      	it	eq
   de088:	3701      	addeq	r7, #1
   de08a:	2501      	movs	r5, #1
   de08c:	f10d 0a20 	add.w	sl, sp, #32
   de090:	f10d 0b1e 	add.w	fp, sp, #30
   de094:	f04f 0800 	mov.w	r8, #0
   de098:	9603      	str	r6, [sp, #12]
   de09a:	f8cd a008 	str.w	sl, [sp, #8]
   de09e:	9601      	str	r6, [sp, #4]
   de0a0:	f8cd b000 	str.w	fp, [sp]
   de0a4:	4633      	mov	r3, r6
   de0a6:	aa07      	add	r2, sp, #28
   de0a8:	498d      	ldr	r1, [pc, #564]	; (de2e0 <_tzset_unlocked_r+0x2f0>)
   de0aa:	f8ad 801e 	strh.w	r8, [sp, #30]
   de0ae:	4638      	mov	r0, r7
   de0b0:	f8ad 8020 	strh.w	r8, [sp, #32]
   de0b4:	f7fa f8d4 	bl	d8260 <siscanf>
   de0b8:	4540      	cmp	r0, r8
   de0ba:	f340 80fd 	ble.w	de2b8 <_tzset_unlocked_r+0x2c8>
   de0be:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   de0c2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   de0c6:	f8df 9224 	ldr.w	r9, [pc, #548]	; de2ec <_tzset_unlocked_r+0x2fc>
   de0ca:	213c      	movs	r1, #60	; 0x3c
   de0cc:	fb01 3302 	mla	r3, r1, r2, r3
   de0d0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   de0d4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   de0d8:	fb01 3302 	mla	r3, r1, r2, r3
   de0dc:	435d      	muls	r5, r3
   de0de:	6225      	str	r5, [r4, #32]
   de0e0:	4d7c      	ldr	r5, [pc, #496]	; (de2d4 <_tzset_unlocked_r+0x2e4>)
   de0e2:	4b7d      	ldr	r3, [pc, #500]	; (de2d8 <_tzset_unlocked_r+0x2e8>)
   de0e4:	602b      	str	r3, [r5, #0]
   de0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   de0e8:	497c      	ldr	r1, [pc, #496]	; (de2dc <_tzset_unlocked_r+0x2ec>)
   de0ea:	441f      	add	r7, r3
   de0ec:	464a      	mov	r2, r9
   de0ee:	4633      	mov	r3, r6
   de0f0:	4638      	mov	r0, r7
   de0f2:	f7fa f8b5 	bl	d8260 <siscanf>
   de0f6:	4540      	cmp	r0, r8
   de0f8:	dc08      	bgt.n	de10c <_tzset_unlocked_r+0x11c>
   de0fa:	682b      	ldr	r3, [r5, #0]
   de0fc:	606b      	str	r3, [r5, #4]
   de0fe:	4b72      	ldr	r3, [pc, #456]	; (de2c8 <_tzset_unlocked_r+0x2d8>)
   de100:	6a22      	ldr	r2, [r4, #32]
   de102:	601a      	str	r2, [r3, #0]
   de104:	4b72      	ldr	r3, [pc, #456]	; (de2d0 <_tzset_unlocked_r+0x2e0>)
   de106:	f8c3 8000 	str.w	r8, [r3]
   de10a:	e0d5      	b.n	de2b8 <_tzset_unlocked_r+0x2c8>
   de10c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   de10e:	f8c5 9004 	str.w	r9, [r5, #4]
   de112:	18fd      	adds	r5, r7, r3
   de114:	5cfb      	ldrb	r3, [r7, r3]
   de116:	2b2d      	cmp	r3, #45	; 0x2d
   de118:	d103      	bne.n	de122 <_tzset_unlocked_r+0x132>
   de11a:	3501      	adds	r5, #1
   de11c:	f04f 37ff 	mov.w	r7, #4294967295
   de120:	e003      	b.n	de12a <_tzset_unlocked_r+0x13a>
   de122:	2b2b      	cmp	r3, #43	; 0x2b
   de124:	bf08      	it	eq
   de126:	3501      	addeq	r5, #1
   de128:	2701      	movs	r7, #1
   de12a:	2300      	movs	r3, #0
   de12c:	f8ad 301c 	strh.w	r3, [sp, #28]
   de130:	f8ad 301e 	strh.w	r3, [sp, #30]
   de134:	f8ad 3020 	strh.w	r3, [sp, #32]
   de138:	930a      	str	r3, [sp, #40]	; 0x28
   de13a:	9603      	str	r6, [sp, #12]
   de13c:	f8cd a008 	str.w	sl, [sp, #8]
   de140:	9601      	str	r6, [sp, #4]
   de142:	f8cd b000 	str.w	fp, [sp]
   de146:	4633      	mov	r3, r6
   de148:	aa07      	add	r2, sp, #28
   de14a:	4965      	ldr	r1, [pc, #404]	; (de2e0 <_tzset_unlocked_r+0x2f0>)
   de14c:	4628      	mov	r0, r5
   de14e:	f7fa f887 	bl	d8260 <siscanf>
   de152:	2800      	cmp	r0, #0
   de154:	dc04      	bgt.n	de160 <_tzset_unlocked_r+0x170>
   de156:	6a23      	ldr	r3, [r4, #32]
   de158:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   de15c:	63e3      	str	r3, [r4, #60]	; 0x3c
   de15e:	e00e      	b.n	de17e <_tzset_unlocked_r+0x18e>
   de160:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   de164:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   de168:	213c      	movs	r1, #60	; 0x3c
   de16a:	fb01 3302 	mla	r3, r1, r2, r3
   de16e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   de172:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   de176:	fb01 3302 	mla	r3, r1, r2, r3
   de17a:	435f      	muls	r7, r3
   de17c:	63e7      	str	r7, [r4, #60]	; 0x3c
   de17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   de180:	4627      	mov	r7, r4
   de182:	441d      	add	r5, r3
   de184:	f04f 0900 	mov.w	r9, #0
   de188:	782b      	ldrb	r3, [r5, #0]
   de18a:	2b2c      	cmp	r3, #44	; 0x2c
   de18c:	bf08      	it	eq
   de18e:	3501      	addeq	r5, #1
   de190:	f895 8000 	ldrb.w	r8, [r5]
   de194:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   de198:	d126      	bne.n	de1e8 <_tzset_unlocked_r+0x1f8>
   de19a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   de19e:	9302      	str	r3, [sp, #8]
   de1a0:	ab09      	add	r3, sp, #36	; 0x24
   de1a2:	9300      	str	r3, [sp, #0]
   de1a4:	9603      	str	r6, [sp, #12]
   de1a6:	9601      	str	r6, [sp, #4]
   de1a8:	4633      	mov	r3, r6
   de1aa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   de1ae:	494d      	ldr	r1, [pc, #308]	; (de2e4 <_tzset_unlocked_r+0x2f4>)
   de1b0:	4628      	mov	r0, r5
   de1b2:	f7fa f855 	bl	d8260 <siscanf>
   de1b6:	2803      	cmp	r0, #3
   de1b8:	d17e      	bne.n	de2b8 <_tzset_unlocked_r+0x2c8>
   de1ba:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   de1be:	1e4b      	subs	r3, r1, #1
   de1c0:	2b0b      	cmp	r3, #11
   de1c2:	d879      	bhi.n	de2b8 <_tzset_unlocked_r+0x2c8>
   de1c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   de1c8:	1e53      	subs	r3, r2, #1
   de1ca:	2b04      	cmp	r3, #4
   de1cc:	d874      	bhi.n	de2b8 <_tzset_unlocked_r+0x2c8>
   de1ce:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   de1d2:	2b06      	cmp	r3, #6
   de1d4:	d870      	bhi.n	de2b8 <_tzset_unlocked_r+0x2c8>
   de1d6:	f887 8008 	strb.w	r8, [r7, #8]
   de1da:	60f9      	str	r1, [r7, #12]
   de1dc:	613a      	str	r2, [r7, #16]
   de1de:	617b      	str	r3, [r7, #20]
   de1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   de1e2:	eb05 0803 	add.w	r8, r5, r3
   de1e6:	e02a      	b.n	de23e <_tzset_unlocked_r+0x24e>
   de1e8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   de1ec:	bf06      	itte	eq
   de1ee:	3501      	addeq	r5, #1
   de1f0:	4643      	moveq	r3, r8
   de1f2:	2344      	movne	r3, #68	; 0x44
   de1f4:	220a      	movs	r2, #10
   de1f6:	a90b      	add	r1, sp, #44	; 0x2c
   de1f8:	4628      	mov	r0, r5
   de1fa:	9305      	str	r3, [sp, #20]
   de1fc:	f7ff fe3e 	bl	dde7c <strtoul>
   de200:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   de204:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   de208:	4545      	cmp	r5, r8
   de20a:	9b05      	ldr	r3, [sp, #20]
   de20c:	d114      	bne.n	de238 <_tzset_unlocked_r+0x248>
   de20e:	234d      	movs	r3, #77	; 0x4d
   de210:	f1b9 0f00 	cmp.w	r9, #0
   de214:	d107      	bne.n	de226 <_tzset_unlocked_r+0x236>
   de216:	7223      	strb	r3, [r4, #8]
   de218:	2303      	movs	r3, #3
   de21a:	60e3      	str	r3, [r4, #12]
   de21c:	2302      	movs	r3, #2
   de21e:	6123      	str	r3, [r4, #16]
   de220:	f8c4 9014 	str.w	r9, [r4, #20]
   de224:	e00b      	b.n	de23e <_tzset_unlocked_r+0x24e>
   de226:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   de22a:	230b      	movs	r3, #11
   de22c:	62a3      	str	r3, [r4, #40]	; 0x28
   de22e:	2301      	movs	r3, #1
   de230:	62e3      	str	r3, [r4, #44]	; 0x2c
   de232:	2300      	movs	r3, #0
   de234:	6323      	str	r3, [r4, #48]	; 0x30
   de236:	e002      	b.n	de23e <_tzset_unlocked_r+0x24e>
   de238:	b280      	uxth	r0, r0
   de23a:	723b      	strb	r3, [r7, #8]
   de23c:	6178      	str	r0, [r7, #20]
   de23e:	2302      	movs	r3, #2
   de240:	f8ad 301c 	strh.w	r3, [sp, #28]
   de244:	2300      	movs	r3, #0
   de246:	f8ad 301e 	strh.w	r3, [sp, #30]
   de24a:	f8ad 3020 	strh.w	r3, [sp, #32]
   de24e:	930a      	str	r3, [sp, #40]	; 0x28
   de250:	f898 3000 	ldrb.w	r3, [r8]
   de254:	2b2f      	cmp	r3, #47	; 0x2f
   de256:	d10b      	bne.n	de270 <_tzset_unlocked_r+0x280>
   de258:	9603      	str	r6, [sp, #12]
   de25a:	f8cd a008 	str.w	sl, [sp, #8]
   de25e:	9601      	str	r6, [sp, #4]
   de260:	f8cd b000 	str.w	fp, [sp]
   de264:	4633      	mov	r3, r6
   de266:	aa07      	add	r2, sp, #28
   de268:	491f      	ldr	r1, [pc, #124]	; (de2e8 <_tzset_unlocked_r+0x2f8>)
   de26a:	4640      	mov	r0, r8
   de26c:	f7f9 fff8 	bl	d8260 <siscanf>
   de270:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   de274:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   de278:	213c      	movs	r1, #60	; 0x3c
   de27a:	fb01 3302 	mla	r3, r1, r2, r3
   de27e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   de282:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   de286:	fb01 3302 	mla	r3, r1, r2, r3
   de28a:	61bb      	str	r3, [r7, #24]
   de28c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   de28e:	f109 0901 	add.w	r9, r9, #1
   de292:	f1b9 0f02 	cmp.w	r9, #2
   de296:	4445      	add	r5, r8
   de298:	f107 071c 	add.w	r7, r7, #28
   de29c:	f47f af74 	bne.w	de188 <_tzset_unlocked_r+0x198>
   de2a0:	6860      	ldr	r0, [r4, #4]
   de2a2:	f7ff fdf5 	bl	dde90 <__tzcalc_limits>
   de2a6:	4b08      	ldr	r3, [pc, #32]	; (de2c8 <_tzset_unlocked_r+0x2d8>)
   de2a8:	6a22      	ldr	r2, [r4, #32]
   de2aa:	601a      	str	r2, [r3, #0]
   de2ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   de2ae:	1a9b      	subs	r3, r3, r2
   de2b0:	4a07      	ldr	r2, [pc, #28]	; (de2d0 <_tzset_unlocked_r+0x2e0>)
   de2b2:	bf18      	it	ne
   de2b4:	2301      	movne	r3, #1
   de2b6:	6013      	str	r3, [r2, #0]
   de2b8:	b00d      	add	sp, #52	; 0x34
   de2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de2be:	bf00      	nop
   de2c0:	000dff78 	.word	0x000dff78
   de2c4:	2003e7e0 	.word	0x2003e7e0
   de2c8:	2003e7e8 	.word	0x2003e7e8
   de2cc:	000dff7b 	.word	0x000dff7b
   de2d0:	2003e7e4 	.word	0x2003e7e4
   de2d4:	2003d414 	.word	0x2003d414
   de2d8:	2003e7d3 	.word	0x2003e7d3
   de2dc:	000dff7f 	.word	0x000dff7f
   de2e0:	000dffa2 	.word	0x000dffa2
   de2e4:	000dff8e 	.word	0x000dff8e
   de2e8:	000dffa1 	.word	0x000dffa1
   de2ec:	2003e7c8 	.word	0x2003e7c8

000de2f0 <rshift>:
   de2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   de2f2:	6906      	ldr	r6, [r0, #16]
   de2f4:	114b      	asrs	r3, r1, #5
   de2f6:	42b3      	cmp	r3, r6
   de2f8:	f100 0514 	add.w	r5, r0, #20
   de2fc:	da27      	bge.n	de34e <rshift+0x5e>
   de2fe:	f011 011f 	ands.w	r1, r1, #31
   de302:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   de306:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   de30a:	d101      	bne.n	de310 <rshift+0x20>
   de30c:	4629      	mov	r1, r5
   de30e:	e016      	b.n	de33e <rshift+0x4e>
   de310:	1d14      	adds	r4, r2, #4
   de312:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   de316:	f1c1 0e20 	rsb	lr, r1, #32
   de31a:	40ca      	lsrs	r2, r1
   de31c:	462b      	mov	r3, r5
   de31e:	42b4      	cmp	r4, r6
   de320:	d209      	bcs.n	de336 <rshift+0x46>
   de322:	6827      	ldr	r7, [r4, #0]
   de324:	fa07 f70e 	lsl.w	r7, r7, lr
   de328:	433a      	orrs	r2, r7
   de32a:	f843 2b04 	str.w	r2, [r3], #4
   de32e:	f854 2b04 	ldr.w	r2, [r4], #4
   de332:	40ca      	lsrs	r2, r1
   de334:	e7f3      	b.n	de31e <rshift+0x2e>
   de336:	601a      	str	r2, [r3, #0]
   de338:	b152      	cbz	r2, de350 <rshift+0x60>
   de33a:	3304      	adds	r3, #4
   de33c:	e008      	b.n	de350 <rshift+0x60>
   de33e:	42b2      	cmp	r2, r6
   de340:	460b      	mov	r3, r1
   de342:	d205      	bcs.n	de350 <rshift+0x60>
   de344:	f852 3b04 	ldr.w	r3, [r2], #4
   de348:	f841 3b04 	str.w	r3, [r1], #4
   de34c:	e7f7      	b.n	de33e <rshift+0x4e>
   de34e:	462b      	mov	r3, r5
   de350:	1b5b      	subs	r3, r3, r5
   de352:	109b      	asrs	r3, r3, #2
   de354:	6103      	str	r3, [r0, #16]
   de356:	b903      	cbnz	r3, de35a <rshift+0x6a>
   de358:	6143      	str	r3, [r0, #20]
   de35a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000de35c <__hexdig_fun>:
   de35c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   de360:	2b09      	cmp	r3, #9
   de362:	d801      	bhi.n	de368 <__hexdig_fun+0xc>
   de364:	3820      	subs	r0, #32
   de366:	e00a      	b.n	de37e <__hexdig_fun+0x22>
   de368:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   de36c:	2b05      	cmp	r3, #5
   de36e:	d801      	bhi.n	de374 <__hexdig_fun+0x18>
   de370:	3847      	subs	r0, #71	; 0x47
   de372:	e004      	b.n	de37e <__hexdig_fun+0x22>
   de374:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   de378:	2b05      	cmp	r3, #5
   de37a:	d802      	bhi.n	de382 <__hexdig_fun+0x26>
   de37c:	3827      	subs	r0, #39	; 0x27
   de37e:	b2c0      	uxtb	r0, r0
   de380:	4770      	bx	lr
   de382:	2000      	movs	r0, #0
   de384:	4770      	bx	lr

000de386 <__gethex>:
   de386:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de38a:	b08b      	sub	sp, #44	; 0x2c
   de38c:	468a      	mov	sl, r1
   de38e:	4690      	mov	r8, r2
   de390:	9306      	str	r3, [sp, #24]
   de392:	9002      	str	r0, [sp, #8]
   de394:	f7fe fd14 	bl	dcdc0 <_localeconv_r>
   de398:	6803      	ldr	r3, [r0, #0]
   de39a:	9303      	str	r3, [sp, #12]
   de39c:	4618      	mov	r0, r3
   de39e:	f7fe fdce 	bl	dcf3e <strlen>
   de3a2:	9b03      	ldr	r3, [sp, #12]
   de3a4:	9001      	str	r0, [sp, #4]
   de3a6:	4403      	add	r3, r0
   de3a8:	f04f 0b00 	mov.w	fp, #0
   de3ac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   de3b0:	9307      	str	r3, [sp, #28]
   de3b2:	f8da 3000 	ldr.w	r3, [sl]
   de3b6:	3302      	adds	r3, #2
   de3b8:	461f      	mov	r7, r3
   de3ba:	f813 0b01 	ldrb.w	r0, [r3], #1
   de3be:	2830      	cmp	r0, #48	; 0x30
   de3c0:	d102      	bne.n	de3c8 <__gethex+0x42>
   de3c2:	f10b 0b01 	add.w	fp, fp, #1
   de3c6:	e7f7      	b.n	de3b8 <__gethex+0x32>
   de3c8:	f7ff ffc8 	bl	de35c <__hexdig_fun>
   de3cc:	4604      	mov	r4, r0
   de3ce:	b9e0      	cbnz	r0, de40a <__gethex+0x84>
   de3d0:	9a01      	ldr	r2, [sp, #4]
   de3d2:	9903      	ldr	r1, [sp, #12]
   de3d4:	4638      	mov	r0, r7
   de3d6:	f7fe fdcf 	bl	dcf78 <strncmp>
   de3da:	2800      	cmp	r0, #0
   de3dc:	d134      	bne.n	de448 <__gethex+0xc2>
   de3de:	9b01      	ldr	r3, [sp, #4]
   de3e0:	5cf8      	ldrb	r0, [r7, r3]
   de3e2:	18fe      	adds	r6, r7, r3
   de3e4:	f7ff ffba 	bl	de35c <__hexdig_fun>
   de3e8:	b380      	cbz	r0, de44c <__gethex+0xc6>
   de3ea:	4633      	mov	r3, r6
   de3ec:	7818      	ldrb	r0, [r3, #0]
   de3ee:	2830      	cmp	r0, #48	; 0x30
   de3f0:	461f      	mov	r7, r3
   de3f2:	f103 0301 	add.w	r3, r3, #1
   de3f6:	d0f9      	beq.n	de3ec <__gethex+0x66>
   de3f8:	f7ff ffb0 	bl	de35c <__hexdig_fun>
   de3fc:	fab0 f580 	clz	r5, r0
   de400:	096d      	lsrs	r5, r5, #5
   de402:	4634      	mov	r4, r6
   de404:	f04f 0b01 	mov.w	fp, #1
   de408:	e001      	b.n	de40e <__gethex+0x88>
   de40a:	2500      	movs	r5, #0
   de40c:	462c      	mov	r4, r5
   de40e:	463a      	mov	r2, r7
   de410:	4616      	mov	r6, r2
   de412:	3201      	adds	r2, #1
   de414:	7830      	ldrb	r0, [r6, #0]
   de416:	f7ff ffa1 	bl	de35c <__hexdig_fun>
   de41a:	2800      	cmp	r0, #0
   de41c:	d1f8      	bne.n	de410 <__gethex+0x8a>
   de41e:	9a01      	ldr	r2, [sp, #4]
   de420:	9903      	ldr	r1, [sp, #12]
   de422:	4630      	mov	r0, r6
   de424:	f7fe fda8 	bl	dcf78 <strncmp>
   de428:	b950      	cbnz	r0, de440 <__gethex+0xba>
   de42a:	b954      	cbnz	r4, de442 <__gethex+0xbc>
   de42c:	9b01      	ldr	r3, [sp, #4]
   de42e:	18f4      	adds	r4, r6, r3
   de430:	4622      	mov	r2, r4
   de432:	4616      	mov	r6, r2
   de434:	3201      	adds	r2, #1
   de436:	7830      	ldrb	r0, [r6, #0]
   de438:	f7ff ff90 	bl	de35c <__hexdig_fun>
   de43c:	2800      	cmp	r0, #0
   de43e:	d1f8      	bne.n	de432 <__gethex+0xac>
   de440:	b134      	cbz	r4, de450 <__gethex+0xca>
   de442:	1ba4      	subs	r4, r4, r6
   de444:	00a4      	lsls	r4, r4, #2
   de446:	e003      	b.n	de450 <__gethex+0xca>
   de448:	463e      	mov	r6, r7
   de44a:	e000      	b.n	de44e <__gethex+0xc8>
   de44c:	4604      	mov	r4, r0
   de44e:	2501      	movs	r5, #1
   de450:	7833      	ldrb	r3, [r6, #0]
   de452:	2b50      	cmp	r3, #80	; 0x50
   de454:	d001      	beq.n	de45a <__gethex+0xd4>
   de456:	2b70      	cmp	r3, #112	; 0x70
   de458:	d12a      	bne.n	de4b0 <__gethex+0x12a>
   de45a:	7873      	ldrb	r3, [r6, #1]
   de45c:	2b2b      	cmp	r3, #43	; 0x2b
   de45e:	d008      	beq.n	de472 <__gethex+0xec>
   de460:	2b2d      	cmp	r3, #45	; 0x2d
   de462:	d003      	beq.n	de46c <__gethex+0xe6>
   de464:	1c71      	adds	r1, r6, #1
   de466:	f04f 0900 	mov.w	r9, #0
   de46a:	e005      	b.n	de478 <__gethex+0xf2>
   de46c:	f04f 0901 	mov.w	r9, #1
   de470:	e001      	b.n	de476 <__gethex+0xf0>
   de472:	f04f 0900 	mov.w	r9, #0
   de476:	1cb1      	adds	r1, r6, #2
   de478:	7808      	ldrb	r0, [r1, #0]
   de47a:	f7ff ff6f 	bl	de35c <__hexdig_fun>
   de47e:	1e43      	subs	r3, r0, #1
   de480:	b2db      	uxtb	r3, r3
   de482:	2b18      	cmp	r3, #24
   de484:	d814      	bhi.n	de4b0 <__gethex+0x12a>
   de486:	f1a0 0210 	sub.w	r2, r0, #16
   de48a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   de48e:	f7ff ff65 	bl	de35c <__hexdig_fun>
   de492:	1e43      	subs	r3, r0, #1
   de494:	b2db      	uxtb	r3, r3
   de496:	2b18      	cmp	r3, #24
   de498:	d804      	bhi.n	de4a4 <__gethex+0x11e>
   de49a:	230a      	movs	r3, #10
   de49c:	fb03 0202 	mla	r2, r3, r2, r0
   de4a0:	3a10      	subs	r2, #16
   de4a2:	e7f2      	b.n	de48a <__gethex+0x104>
   de4a4:	f1b9 0f00 	cmp.w	r9, #0
   de4a8:	d000      	beq.n	de4ac <__gethex+0x126>
   de4aa:	4252      	negs	r2, r2
   de4ac:	4414      	add	r4, r2
   de4ae:	e000      	b.n	de4b2 <__gethex+0x12c>
   de4b0:	4631      	mov	r1, r6
   de4b2:	f8ca 1000 	str.w	r1, [sl]
   de4b6:	b12d      	cbz	r5, de4c4 <__gethex+0x13e>
   de4b8:	f1bb 0f00 	cmp.w	fp, #0
   de4bc:	bf14      	ite	ne
   de4be:	2000      	movne	r0, #0
   de4c0:	2006      	moveq	r0, #6
   de4c2:	e17c      	b.n	de7be <__gethex+0x438>
   de4c4:	1bf3      	subs	r3, r6, r7
   de4c6:	3b01      	subs	r3, #1
   de4c8:	4629      	mov	r1, r5
   de4ca:	2b07      	cmp	r3, #7
   de4cc:	dd02      	ble.n	de4d4 <__gethex+0x14e>
   de4ce:	3101      	adds	r1, #1
   de4d0:	105b      	asrs	r3, r3, #1
   de4d2:	e7fa      	b.n	de4ca <__gethex+0x144>
   de4d4:	9802      	ldr	r0, [sp, #8]
   de4d6:	f000 fb09 	bl	deaec <_Balloc>
   de4da:	9b01      	ldr	r3, [sp, #4]
   de4dc:	f100 0a14 	add.w	sl, r0, #20
   de4e0:	f04f 0900 	mov.w	r9, #0
   de4e4:	f1c3 0301 	rsb	r3, r3, #1
   de4e8:	4605      	mov	r5, r0
   de4ea:	f8cd a010 	str.w	sl, [sp, #16]
   de4ee:	46cb      	mov	fp, r9
   de4f0:	9308      	str	r3, [sp, #32]
   de4f2:	42b7      	cmp	r7, r6
   de4f4:	d22f      	bcs.n	de556 <__gethex+0x1d0>
   de4f6:	1e73      	subs	r3, r6, #1
   de4f8:	9305      	str	r3, [sp, #20]
   de4fa:	9a07      	ldr	r2, [sp, #28]
   de4fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   de500:	4293      	cmp	r3, r2
   de502:	d00b      	beq.n	de51c <__gethex+0x196>
   de504:	f1bb 0f20 	cmp.w	fp, #32
   de508:	d116      	bne.n	de538 <__gethex+0x1b2>
   de50a:	9b04      	ldr	r3, [sp, #16]
   de50c:	f8c3 9000 	str.w	r9, [r3]
   de510:	3304      	adds	r3, #4
   de512:	f04f 0900 	mov.w	r9, #0
   de516:	9304      	str	r3, [sp, #16]
   de518:	46cb      	mov	fp, r9
   de51a:	e00d      	b.n	de538 <__gethex+0x1b2>
   de51c:	9b05      	ldr	r3, [sp, #20]
   de51e:	9a08      	ldr	r2, [sp, #32]
   de520:	4413      	add	r3, r2
   de522:	429f      	cmp	r7, r3
   de524:	d8ee      	bhi.n	de504 <__gethex+0x17e>
   de526:	4618      	mov	r0, r3
   de528:	9a01      	ldr	r2, [sp, #4]
   de52a:	9903      	ldr	r1, [sp, #12]
   de52c:	9309      	str	r3, [sp, #36]	; 0x24
   de52e:	f7fe fd23 	bl	dcf78 <strncmp>
   de532:	9b09      	ldr	r3, [sp, #36]	; 0x24
   de534:	b168      	cbz	r0, de552 <__gethex+0x1cc>
   de536:	e7e5      	b.n	de504 <__gethex+0x17e>
   de538:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   de53c:	f7ff ff0e 	bl	de35c <__hexdig_fun>
   de540:	f000 000f 	and.w	r0, r0, #15
   de544:	fa00 f00b 	lsl.w	r0, r0, fp
   de548:	9b05      	ldr	r3, [sp, #20]
   de54a:	ea49 0900 	orr.w	r9, r9, r0
   de54e:	f10b 0b04 	add.w	fp, fp, #4
   de552:	461e      	mov	r6, r3
   de554:	e7cd      	b.n	de4f2 <__gethex+0x16c>
   de556:	9804      	ldr	r0, [sp, #16]
   de558:	f840 9b04 	str.w	r9, [r0], #4
   de55c:	ebca 0000 	rsb	r0, sl, r0
   de560:	1080      	asrs	r0, r0, #2
   de562:	6128      	str	r0, [r5, #16]
   de564:	0147      	lsls	r7, r0, #5
   de566:	4648      	mov	r0, r9
   de568:	f000 fb85 	bl	dec76 <__hi0bits>
   de56c:	f8d8 6000 	ldr.w	r6, [r8]
   de570:	1a38      	subs	r0, r7, r0
   de572:	42b0      	cmp	r0, r6
   de574:	dd26      	ble.n	de5c4 <__gethex+0x23e>
   de576:	1b87      	subs	r7, r0, r6
   de578:	4639      	mov	r1, r7
   de57a:	4628      	mov	r0, r5
   de57c:	f000 fe83 	bl	df286 <__any_on>
   de580:	b1c8      	cbz	r0, de5b6 <__gethex+0x230>
   de582:	1e7b      	subs	r3, r7, #1
   de584:	1159      	asrs	r1, r3, #5
   de586:	f003 021f 	and.w	r2, r3, #31
   de58a:	f04f 0901 	mov.w	r9, #1
   de58e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   de592:	fa09 f202 	lsl.w	r2, r9, r2
   de596:	420a      	tst	r2, r1
   de598:	d00e      	beq.n	de5b8 <__gethex+0x232>
   de59a:	454b      	cmp	r3, r9
   de59c:	dc02      	bgt.n	de5a4 <__gethex+0x21e>
   de59e:	f04f 0902 	mov.w	r9, #2
   de5a2:	e009      	b.n	de5b8 <__gethex+0x232>
   de5a4:	1eb9      	subs	r1, r7, #2
   de5a6:	4628      	mov	r0, r5
   de5a8:	f000 fe6d 	bl	df286 <__any_on>
   de5ac:	2800      	cmp	r0, #0
   de5ae:	d0f6      	beq.n	de59e <__gethex+0x218>
   de5b0:	f04f 0903 	mov.w	r9, #3
   de5b4:	e000      	b.n	de5b8 <__gethex+0x232>
   de5b6:	4681      	mov	r9, r0
   de5b8:	4639      	mov	r1, r7
   de5ba:	4628      	mov	r0, r5
   de5bc:	f7ff fe98 	bl	de2f0 <rshift>
   de5c0:	443c      	add	r4, r7
   de5c2:	e00c      	b.n	de5de <__gethex+0x258>
   de5c4:	da09      	bge.n	de5da <__gethex+0x254>
   de5c6:	1a37      	subs	r7, r6, r0
   de5c8:	4629      	mov	r1, r5
   de5ca:	463a      	mov	r2, r7
   de5cc:	9802      	ldr	r0, [sp, #8]
   de5ce:	f000 fc87 	bl	deee0 <__lshift>
   de5d2:	1be4      	subs	r4, r4, r7
   de5d4:	4605      	mov	r5, r0
   de5d6:	f100 0a14 	add.w	sl, r0, #20
   de5da:	f04f 0900 	mov.w	r9, #0
   de5de:	f8d8 3008 	ldr.w	r3, [r8, #8]
   de5e2:	429c      	cmp	r4, r3
   de5e4:	dd08      	ble.n	de5f8 <__gethex+0x272>
   de5e6:	9802      	ldr	r0, [sp, #8]
   de5e8:	4629      	mov	r1, r5
   de5ea:	f000 fab4 	bl	deb56 <_Bfree>
   de5ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   de5f0:	2300      	movs	r3, #0
   de5f2:	6013      	str	r3, [r2, #0]
   de5f4:	20a3      	movs	r0, #163	; 0xa3
   de5f6:	e0e2      	b.n	de7be <__gethex+0x438>
   de5f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   de5fc:	4284      	cmp	r4, r0
   de5fe:	da53      	bge.n	de6a8 <__gethex+0x322>
   de600:	1b04      	subs	r4, r0, r4
   de602:	42a6      	cmp	r6, r4
   de604:	dc2e      	bgt.n	de664 <__gethex+0x2de>
   de606:	f8d8 300c 	ldr.w	r3, [r8, #12]
   de60a:	2b02      	cmp	r3, #2
   de60c:	d01a      	beq.n	de644 <__gethex+0x2be>
   de60e:	2b03      	cmp	r3, #3
   de610:	d01c      	beq.n	de64c <__gethex+0x2c6>
   de612:	2b01      	cmp	r3, #1
   de614:	d11d      	bne.n	de652 <__gethex+0x2cc>
   de616:	42a6      	cmp	r6, r4
   de618:	d11b      	bne.n	de652 <__gethex+0x2cc>
   de61a:	2e01      	cmp	r6, #1
   de61c:	dc0b      	bgt.n	de636 <__gethex+0x2b0>
   de61e:	9a06      	ldr	r2, [sp, #24]
   de620:	f8d8 3004 	ldr.w	r3, [r8, #4]
   de624:	6013      	str	r3, [r2, #0]
   de626:	2301      	movs	r3, #1
   de628:	612b      	str	r3, [r5, #16]
   de62a:	f8ca 3000 	str.w	r3, [sl]
   de62e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   de630:	2062      	movs	r0, #98	; 0x62
   de632:	601d      	str	r5, [r3, #0]
   de634:	e0c3      	b.n	de7be <__gethex+0x438>
   de636:	1e71      	subs	r1, r6, #1
   de638:	4628      	mov	r0, r5
   de63a:	f000 fe24 	bl	df286 <__any_on>
   de63e:	2800      	cmp	r0, #0
   de640:	d1ed      	bne.n	de61e <__gethex+0x298>
   de642:	e006      	b.n	de652 <__gethex+0x2cc>
   de644:	9b15      	ldr	r3, [sp, #84]	; 0x54
   de646:	2b00      	cmp	r3, #0
   de648:	d0e9      	beq.n	de61e <__gethex+0x298>
   de64a:	e002      	b.n	de652 <__gethex+0x2cc>
   de64c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   de64e:	2b00      	cmp	r3, #0
   de650:	d1e5      	bne.n	de61e <__gethex+0x298>
   de652:	9802      	ldr	r0, [sp, #8]
   de654:	4629      	mov	r1, r5
   de656:	f000 fa7e 	bl	deb56 <_Bfree>
   de65a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   de65c:	2300      	movs	r3, #0
   de65e:	6013      	str	r3, [r2, #0]
   de660:	2050      	movs	r0, #80	; 0x50
   de662:	e0ac      	b.n	de7be <__gethex+0x438>
   de664:	1e67      	subs	r7, r4, #1
   de666:	f1b9 0f00 	cmp.w	r9, #0
   de66a:	d106      	bne.n	de67a <__gethex+0x2f4>
   de66c:	b13f      	cbz	r7, de67e <__gethex+0x2f8>
   de66e:	4639      	mov	r1, r7
   de670:	4628      	mov	r0, r5
   de672:	f000 fe08 	bl	df286 <__any_on>
   de676:	4681      	mov	r9, r0
   de678:	e001      	b.n	de67e <__gethex+0x2f8>
   de67a:	f04f 0901 	mov.w	r9, #1
   de67e:	117a      	asrs	r2, r7, #5
   de680:	2301      	movs	r3, #1
   de682:	f007 071f 	and.w	r7, r7, #31
   de686:	fa03 f707 	lsl.w	r7, r3, r7
   de68a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   de68e:	4621      	mov	r1, r4
   de690:	421f      	tst	r7, r3
   de692:	4628      	mov	r0, r5
   de694:	bf18      	it	ne
   de696:	f049 0902 	orrne.w	r9, r9, #2
   de69a:	1b36      	subs	r6, r6, r4
   de69c:	f7ff fe28 	bl	de2f0 <rshift>
   de6a0:	2702      	movs	r7, #2
   de6a2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   de6a6:	e000      	b.n	de6aa <__gethex+0x324>
   de6a8:	2701      	movs	r7, #1
   de6aa:	f1b9 0f00 	cmp.w	r9, #0
   de6ae:	f000 8081 	beq.w	de7b4 <__gethex+0x42e>
   de6b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   de6b6:	2b02      	cmp	r3, #2
   de6b8:	d00e      	beq.n	de6d8 <__gethex+0x352>
   de6ba:	2b03      	cmp	r3, #3
   de6bc:	d010      	beq.n	de6e0 <__gethex+0x35a>
   de6be:	2b01      	cmp	r3, #1
   de6c0:	d176      	bne.n	de7b0 <__gethex+0x42a>
   de6c2:	f019 0f02 	tst.w	r9, #2
   de6c6:	d073      	beq.n	de7b0 <__gethex+0x42a>
   de6c8:	f8da 0000 	ldr.w	r0, [sl]
   de6cc:	ea49 0900 	orr.w	r9, r9, r0
   de6d0:	f019 0f01 	tst.w	r9, #1
   de6d4:	d107      	bne.n	de6e6 <__gethex+0x360>
   de6d6:	e06b      	b.n	de7b0 <__gethex+0x42a>
   de6d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   de6da:	f1c3 0301 	rsb	r3, r3, #1
   de6de:	9315      	str	r3, [sp, #84]	; 0x54
   de6e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   de6e2:	2b00      	cmp	r3, #0
   de6e4:	d064      	beq.n	de7b0 <__gethex+0x42a>
   de6e6:	f8d5 a010 	ldr.w	sl, [r5, #16]
   de6ea:	f105 0314 	add.w	r3, r5, #20
   de6ee:	ea4f 098a 	mov.w	r9, sl, lsl #2
   de6f2:	eb03 0109 	add.w	r1, r3, r9
   de6f6:	2000      	movs	r0, #0
   de6f8:	681a      	ldr	r2, [r3, #0]
   de6fa:	f1b2 3fff 	cmp.w	r2, #4294967295
   de6fe:	d002      	beq.n	de706 <__gethex+0x380>
   de700:	3201      	adds	r2, #1
   de702:	601a      	str	r2, [r3, #0]
   de704:	e020      	b.n	de748 <__gethex+0x3c2>
   de706:	f843 0b04 	str.w	r0, [r3], #4
   de70a:	4299      	cmp	r1, r3
   de70c:	d8f4      	bhi.n	de6f8 <__gethex+0x372>
   de70e:	68ab      	ldr	r3, [r5, #8]
   de710:	459a      	cmp	sl, r3
   de712:	db12      	blt.n	de73a <__gethex+0x3b4>
   de714:	6869      	ldr	r1, [r5, #4]
   de716:	9802      	ldr	r0, [sp, #8]
   de718:	3101      	adds	r1, #1
   de71a:	f000 f9e7 	bl	deaec <_Balloc>
   de71e:	692a      	ldr	r2, [r5, #16]
   de720:	3202      	adds	r2, #2
   de722:	f105 010c 	add.w	r1, r5, #12
   de726:	4683      	mov	fp, r0
   de728:	0092      	lsls	r2, r2, #2
   de72a:	300c      	adds	r0, #12
   de72c:	f7fe fb5b 	bl	dcde6 <memcpy>
   de730:	4629      	mov	r1, r5
   de732:	9802      	ldr	r0, [sp, #8]
   de734:	f000 fa0f 	bl	deb56 <_Bfree>
   de738:	465d      	mov	r5, fp
   de73a:	692b      	ldr	r3, [r5, #16]
   de73c:	1c5a      	adds	r2, r3, #1
   de73e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   de742:	612a      	str	r2, [r5, #16]
   de744:	2201      	movs	r2, #1
   de746:	615a      	str	r2, [r3, #20]
   de748:	2f02      	cmp	r7, #2
   de74a:	f105 0214 	add.w	r2, r5, #20
   de74e:	d111      	bne.n	de774 <__gethex+0x3ee>
   de750:	f8d8 3000 	ldr.w	r3, [r8]
   de754:	3b01      	subs	r3, #1
   de756:	429e      	cmp	r6, r3
   de758:	d127      	bne.n	de7aa <__gethex+0x424>
   de75a:	1171      	asrs	r1, r6, #5
   de75c:	2301      	movs	r3, #1
   de75e:	f006 061f 	and.w	r6, r6, #31
   de762:	fa03 f606 	lsl.w	r6, r3, r6
   de766:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   de76a:	421e      	tst	r6, r3
   de76c:	bf0c      	ite	eq
   de76e:	2702      	moveq	r7, #2
   de770:	2701      	movne	r7, #1
   de772:	e01a      	b.n	de7aa <__gethex+0x424>
   de774:	692b      	ldr	r3, [r5, #16]
   de776:	459a      	cmp	sl, r3
   de778:	da0a      	bge.n	de790 <__gethex+0x40a>
   de77a:	2101      	movs	r1, #1
   de77c:	4628      	mov	r0, r5
   de77e:	f7ff fdb7 	bl	de2f0 <rshift>
   de782:	f8d8 3008 	ldr.w	r3, [r8, #8]
   de786:	3401      	adds	r4, #1
   de788:	429c      	cmp	r4, r3
   de78a:	f73f af2c 	bgt.w	de5e6 <__gethex+0x260>
   de78e:	e00b      	b.n	de7a8 <__gethex+0x422>
   de790:	f016 061f 	ands.w	r6, r6, #31
   de794:	d008      	beq.n	de7a8 <__gethex+0x422>
   de796:	4491      	add	r9, r2
   de798:	f1c6 0620 	rsb	r6, r6, #32
   de79c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   de7a0:	f000 fa69 	bl	dec76 <__hi0bits>
   de7a4:	42b0      	cmp	r0, r6
   de7a6:	dbe8      	blt.n	de77a <__gethex+0x3f4>
   de7a8:	2701      	movs	r7, #1
   de7aa:	f047 0720 	orr.w	r7, r7, #32
   de7ae:	e001      	b.n	de7b4 <__gethex+0x42e>
   de7b0:	f047 0710 	orr.w	r7, r7, #16
   de7b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   de7b6:	601d      	str	r5, [r3, #0]
   de7b8:	9b06      	ldr	r3, [sp, #24]
   de7ba:	4638      	mov	r0, r7
   de7bc:	601c      	str	r4, [r3, #0]
   de7be:	b00b      	add	sp, #44	; 0x2c
   de7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000de7c4 <L_shift>:
   de7c4:	f1c2 0208 	rsb	r2, r2, #8
   de7c8:	0092      	lsls	r2, r2, #2
   de7ca:	b570      	push	{r4, r5, r6, lr}
   de7cc:	f1c2 0620 	rsb	r6, r2, #32
   de7d0:	6843      	ldr	r3, [r0, #4]
   de7d2:	6805      	ldr	r5, [r0, #0]
   de7d4:	fa03 f406 	lsl.w	r4, r3, r6
   de7d8:	432c      	orrs	r4, r5
   de7da:	40d3      	lsrs	r3, r2
   de7dc:	6004      	str	r4, [r0, #0]
   de7de:	f840 3f04 	str.w	r3, [r0, #4]!
   de7e2:	4288      	cmp	r0, r1
   de7e4:	d3f4      	bcc.n	de7d0 <L_shift+0xc>
   de7e6:	bd70      	pop	{r4, r5, r6, pc}

000de7e8 <__match>:
   de7e8:	b530      	push	{r4, r5, lr}
   de7ea:	6803      	ldr	r3, [r0, #0]
   de7ec:	f811 4b01 	ldrb.w	r4, [r1], #1
   de7f0:	3301      	adds	r3, #1
   de7f2:	b14c      	cbz	r4, de808 <__match+0x20>
   de7f4:	781a      	ldrb	r2, [r3, #0]
   de7f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   de7fa:	2d19      	cmp	r5, #25
   de7fc:	bf98      	it	ls
   de7fe:	3220      	addls	r2, #32
   de800:	42a2      	cmp	r2, r4
   de802:	d0f3      	beq.n	de7ec <__match+0x4>
   de804:	2000      	movs	r0, #0
   de806:	bd30      	pop	{r4, r5, pc}
   de808:	6003      	str	r3, [r0, #0]
   de80a:	2001      	movs	r0, #1
   de80c:	bd30      	pop	{r4, r5, pc}

000de80e <__hexnan>:
   de80e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de812:	680b      	ldr	r3, [r1, #0]
   de814:	f8d0 b000 	ldr.w	fp, [r0]
   de818:	115e      	asrs	r6, r3, #5
   de81a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   de81e:	f013 031f 	ands.w	r3, r3, #31
   de822:	b085      	sub	sp, #20
   de824:	bf18      	it	ne
   de826:	3604      	addne	r6, #4
   de828:	1f35      	subs	r5, r6, #4
   de82a:	4617      	mov	r7, r2
   de82c:	2200      	movs	r2, #0
   de82e:	4682      	mov	sl, r0
   de830:	9301      	str	r3, [sp, #4]
   de832:	f846 2c04 	str.w	r2, [r6, #-4]
   de836:	46a8      	mov	r8, r5
   de838:	462c      	mov	r4, r5
   de83a:	9200      	str	r2, [sp, #0]
   de83c:	4691      	mov	r9, r2
   de83e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   de842:	2900      	cmp	r1, #0
   de844:	d03c      	beq.n	de8c0 <__hexnan+0xb2>
   de846:	4608      	mov	r0, r1
   de848:	9203      	str	r2, [sp, #12]
   de84a:	9102      	str	r1, [sp, #8]
   de84c:	f7ff fd86 	bl	de35c <__hexdig_fun>
   de850:	9a03      	ldr	r2, [sp, #12]
   de852:	bb00      	cbnz	r0, de896 <__hexnan+0x88>
   de854:	9902      	ldr	r1, [sp, #8]
   de856:	2920      	cmp	r1, #32
   de858:	d816      	bhi.n	de888 <__hexnan+0x7a>
   de85a:	9b00      	ldr	r3, [sp, #0]
   de85c:	4599      	cmp	r9, r3
   de85e:	ddee      	ble.n	de83e <__hexnan+0x30>
   de860:	4544      	cmp	r4, r8
   de862:	d205      	bcs.n	de870 <__hexnan+0x62>
   de864:	2a07      	cmp	r2, #7
   de866:	dc03      	bgt.n	de870 <__hexnan+0x62>
   de868:	4641      	mov	r1, r8
   de86a:	4620      	mov	r0, r4
   de86c:	f7ff ffaa 	bl	de7c4 <L_shift>
   de870:	42bc      	cmp	r4, r7
   de872:	d923      	bls.n	de8bc <__hexnan+0xae>
   de874:	2300      	movs	r3, #0
   de876:	f1a4 0804 	sub.w	r8, r4, #4
   de87a:	f844 3c04 	str.w	r3, [r4, #-4]
   de87e:	f8cd 9000 	str.w	r9, [sp]
   de882:	4644      	mov	r4, r8
   de884:	461a      	mov	r2, r3
   de886:	e7da      	b.n	de83e <__hexnan+0x30>
   de888:	2929      	cmp	r1, #41	; 0x29
   de88a:	d148      	bne.n	de91e <__hexnan+0x110>
   de88c:	f10b 0301 	add.w	r3, fp, #1
   de890:	f8ca 3000 	str.w	r3, [sl]
   de894:	e014      	b.n	de8c0 <__hexnan+0xb2>
   de896:	3201      	adds	r2, #1
   de898:	2a08      	cmp	r2, #8
   de89a:	f109 0901 	add.w	r9, r9, #1
   de89e:	dd06      	ble.n	de8ae <__hexnan+0xa0>
   de8a0:	42bc      	cmp	r4, r7
   de8a2:	d9cc      	bls.n	de83e <__hexnan+0x30>
   de8a4:	2300      	movs	r3, #0
   de8a6:	f844 3c04 	str.w	r3, [r4, #-4]
   de8aa:	2201      	movs	r2, #1
   de8ac:	3c04      	subs	r4, #4
   de8ae:	6821      	ldr	r1, [r4, #0]
   de8b0:	f000 000f 	and.w	r0, r0, #15
   de8b4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   de8b8:	6020      	str	r0, [r4, #0]
   de8ba:	e7c0      	b.n	de83e <__hexnan+0x30>
   de8bc:	2208      	movs	r2, #8
   de8be:	e7be      	b.n	de83e <__hexnan+0x30>
   de8c0:	f1b9 0f00 	cmp.w	r9, #0
   de8c4:	d02b      	beq.n	de91e <__hexnan+0x110>
   de8c6:	4544      	cmp	r4, r8
   de8c8:	d205      	bcs.n	de8d6 <__hexnan+0xc8>
   de8ca:	2a07      	cmp	r2, #7
   de8cc:	dc03      	bgt.n	de8d6 <__hexnan+0xc8>
   de8ce:	4641      	mov	r1, r8
   de8d0:	4620      	mov	r0, r4
   de8d2:	f7ff ff77 	bl	de7c4 <L_shift>
   de8d6:	42bc      	cmp	r4, r7
   de8d8:	d90c      	bls.n	de8f4 <__hexnan+0xe6>
   de8da:	463b      	mov	r3, r7
   de8dc:	f854 2b04 	ldr.w	r2, [r4], #4
   de8e0:	f843 2b04 	str.w	r2, [r3], #4
   de8e4:	42a5      	cmp	r5, r4
   de8e6:	d2f9      	bcs.n	de8dc <__hexnan+0xce>
   de8e8:	2200      	movs	r2, #0
   de8ea:	f843 2b04 	str.w	r2, [r3], #4
   de8ee:	429d      	cmp	r5, r3
   de8f0:	d2fb      	bcs.n	de8ea <__hexnan+0xdc>
   de8f2:	e00b      	b.n	de90c <__hexnan+0xfe>
   de8f4:	9b01      	ldr	r3, [sp, #4]
   de8f6:	b14b      	cbz	r3, de90c <__hexnan+0xfe>
   de8f8:	f1c3 0220 	rsb	r2, r3, #32
   de8fc:	f04f 33ff 	mov.w	r3, #4294967295
   de900:	40d3      	lsrs	r3, r2
   de902:	f856 2c04 	ldr.w	r2, [r6, #-4]
   de906:	4013      	ands	r3, r2
   de908:	f846 3c04 	str.w	r3, [r6, #-4]
   de90c:	682b      	ldr	r3, [r5, #0]
   de90e:	b943      	cbnz	r3, de922 <__hexnan+0x114>
   de910:	42bd      	cmp	r5, r7
   de912:	d102      	bne.n	de91a <__hexnan+0x10c>
   de914:	2301      	movs	r3, #1
   de916:	602b      	str	r3, [r5, #0]
   de918:	e003      	b.n	de922 <__hexnan+0x114>
   de91a:	3d04      	subs	r5, #4
   de91c:	e7f6      	b.n	de90c <__hexnan+0xfe>
   de91e:	2004      	movs	r0, #4
   de920:	e000      	b.n	de924 <__hexnan+0x116>
   de922:	2005      	movs	r0, #5
   de924:	b005      	add	sp, #20
   de926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000de92c <_findenv_r>:
   de92c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de930:	4607      	mov	r7, r0
   de932:	468b      	mov	fp, r1
   de934:	4690      	mov	r8, r2
   de936:	f000 fcd6 	bl	df2e6 <__env_lock>
   de93a:	4b19      	ldr	r3, [pc, #100]	; (de9a0 <_findenv_r+0x74>)
   de93c:	681d      	ldr	r5, [r3, #0]
   de93e:	469a      	mov	sl, r3
   de940:	b13d      	cbz	r5, de952 <_findenv_r+0x26>
   de942:	465c      	mov	r4, fp
   de944:	4623      	mov	r3, r4
   de946:	f813 2b01 	ldrb.w	r2, [r3], #1
   de94a:	b142      	cbz	r2, de95e <_findenv_r+0x32>
   de94c:	2a3d      	cmp	r2, #61	; 0x3d
   de94e:	461c      	mov	r4, r3
   de950:	d1f8      	bne.n	de944 <_findenv_r+0x18>
   de952:	4638      	mov	r0, r7
   de954:	f000 fcc8 	bl	df2e8 <__env_unlock>
   de958:	2000      	movs	r0, #0
   de95a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de95e:	ebcb 0404 	rsb	r4, fp, r4
   de962:	46a9      	mov	r9, r5
   de964:	f859 0b04 	ldr.w	r0, [r9], #4
   de968:	2800      	cmp	r0, #0
   de96a:	d0f2      	beq.n	de952 <_findenv_r+0x26>
   de96c:	4622      	mov	r2, r4
   de96e:	4659      	mov	r1, fp
   de970:	f7fe fb02 	bl	dcf78 <strncmp>
   de974:	b988      	cbnz	r0, de99a <_findenv_r+0x6e>
   de976:	f859 3c04 	ldr.w	r3, [r9, #-4]
   de97a:	191e      	adds	r6, r3, r4
   de97c:	5d1b      	ldrb	r3, [r3, r4]
   de97e:	2b3d      	cmp	r3, #61	; 0x3d
   de980:	d10b      	bne.n	de99a <_findenv_r+0x6e>
   de982:	f8da 3000 	ldr.w	r3, [sl]
   de986:	1aed      	subs	r5, r5, r3
   de988:	10ad      	asrs	r5, r5, #2
   de98a:	4638      	mov	r0, r7
   de98c:	f8c8 5000 	str.w	r5, [r8]
   de990:	f000 fcaa 	bl	df2e8 <__env_unlock>
   de994:	1c70      	adds	r0, r6, #1
   de996:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de99a:	464d      	mov	r5, r9
   de99c:	e7e1      	b.n	de962 <_findenv_r+0x36>
   de99e:	bf00      	nop
   de9a0:	2003d45c 	.word	0x2003d45c

000de9a4 <_getenv_r>:
   de9a4:	b507      	push	{r0, r1, r2, lr}
   de9a6:	aa01      	add	r2, sp, #4
   de9a8:	f7ff ffc0 	bl	de92c <_findenv_r>
   de9ac:	b003      	add	sp, #12
   de9ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000de9b4 <__gettzinfo>:
   de9b4:	4800      	ldr	r0, [pc, #0]	; (de9b8 <__gettzinfo+0x4>)
   de9b6:	4770      	bx	lr
   de9b8:	2003d41c 	.word	0x2003d41c

000de9bc <gmtime_r>:
   de9bc:	6802      	ldr	r2, [r0, #0]
   de9be:	4b47      	ldr	r3, [pc, #284]	; (deadc <gmtime_r+0x120>)
   de9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   de9c2:	fb92 f4f3 	sdiv	r4, r2, r3
   de9c6:	fb03 2214 	mls	r2, r3, r4, r2
   de9ca:	2a00      	cmp	r2, #0
   de9cc:	bfbc      	itt	lt
   de9ce:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   de9d2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   de9d6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   de9da:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   de9de:	fb92 f3f0 	sdiv	r3, r2, r0
   de9e2:	fb00 2213 	mls	r2, r0, r3, r2
   de9e6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   de9ea:	bfac      	ite	ge
   de9ec:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   de9f0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   de9f4:	608b      	str	r3, [r1, #8]
   de9f6:	fb92 f3f0 	sdiv	r3, r2, r0
   de9fa:	fb00 2213 	mls	r2, r0, r3, r2
   de9fe:	604b      	str	r3, [r1, #4]
   dea00:	600a      	str	r2, [r1, #0]
   dea02:	2307      	movs	r3, #7
   dea04:	1ce2      	adds	r2, r4, #3
   dea06:	fb92 f3f3 	sdiv	r3, r2, r3
   dea0a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dea0e:	1ad3      	subs	r3, r2, r3
   dea10:	618b      	str	r3, [r1, #24]
   dea12:	4b33      	ldr	r3, [pc, #204]	; (deae0 <gmtime_r+0x124>)
   dea14:	4d33      	ldr	r5, [pc, #204]	; (deae4 <gmtime_r+0x128>)
   dea16:	fb94 f5f5 	sdiv	r5, r4, r5
   dea1a:	fb03 4405 	mla	r4, r3, r5, r4
   dea1e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dea22:	fbb4 f2f2 	udiv	r2, r4, r2
   dea26:	4422      	add	r2, r4
   dea28:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dea2c:	fbb4 f3f7 	udiv	r3, r4, r7
   dea30:	1ad2      	subs	r2, r2, r3
   dea32:	482d      	ldr	r0, [pc, #180]	; (deae8 <gmtime_r+0x12c>)
   dea34:	fbb4 f0f0 	udiv	r0, r4, r0
   dea38:	f648 6694 	movw	r6, #36500	; 0x8e94
   dea3c:	1a13      	subs	r3, r2, r0
   dea3e:	fbb3 f6f6 	udiv	r6, r3, r6
   dea42:	4434      	add	r4, r6
   dea44:	f240 126d 	movw	r2, #365	; 0x16d
   dea48:	fbb3 f0f2 	udiv	r0, r3, r2
   dea4c:	fbb3 f3f7 	udiv	r3, r3, r7
   dea50:	1ae3      	subs	r3, r4, r3
   dea52:	fb02 3310 	mls	r3, r2, r0, r3
   dea56:	2499      	movs	r4, #153	; 0x99
   dea58:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dea5c:	3202      	adds	r2, #2
   dea5e:	fbb2 f2f4 	udiv	r2, r2, r4
   dea62:	2a0a      	cmp	r2, #10
   dea64:	fb04 f402 	mul.w	r4, r4, r2
   dea68:	f104 0602 	add.w	r6, r4, #2
   dea6c:	f04f 0405 	mov.w	r4, #5
   dea70:	fbb6 f4f4 	udiv	r4, r6, r4
   dea74:	bf34      	ite	cc
   dea76:	2602      	movcc	r6, #2
   dea78:	f06f 0609 	mvncs.w	r6, #9
   dea7c:	4416      	add	r6, r2
   dea7e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dea82:	fb02 0505 	mla	r5, r2, r5, r0
   dea86:	1c5f      	adds	r7, r3, #1
   dea88:	2e01      	cmp	r6, #1
   dea8a:	bf98      	it	ls
   dea8c:	3501      	addls	r5, #1
   dea8e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dea92:	eba7 0704 	sub.w	r7, r7, r4
   dea96:	d302      	bcc.n	dea9e <gmtime_r+0xe2>
   dea98:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dea9c:	e014      	b.n	deac8 <gmtime_r+0x10c>
   dea9e:	0782      	lsls	r2, r0, #30
   deaa0:	d105      	bne.n	deaae <gmtime_r+0xf2>
   deaa2:	2464      	movs	r4, #100	; 0x64
   deaa4:	fbb0 f2f4 	udiv	r2, r0, r4
   deaa8:	fb04 0212 	mls	r2, r4, r2, r0
   deaac:	b94a      	cbnz	r2, deac2 <gmtime_r+0x106>
   deaae:	f44f 72c8 	mov.w	r2, #400	; 0x190
   deab2:	fbb0 f4f2 	udiv	r4, r0, r2
   deab6:	fb02 0014 	mls	r0, r2, r4, r0
   deaba:	fab0 f280 	clz	r2, r0
   deabe:	0952      	lsrs	r2, r2, #5
   deac0:	e000      	b.n	deac4 <gmtime_r+0x108>
   deac2:	2201      	movs	r2, #1
   deac4:	333b      	adds	r3, #59	; 0x3b
   deac6:	441a      	add	r2, r3
   deac8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   deacc:	2300      	movs	r3, #0
   deace:	61ca      	str	r2, [r1, #28]
   dead0:	614d      	str	r5, [r1, #20]
   dead2:	610e      	str	r6, [r1, #16]
   dead4:	60cf      	str	r7, [r1, #12]
   dead6:	620b      	str	r3, [r1, #32]
   dead8:	4608      	mov	r0, r1
   deada:	bdf0      	pop	{r4, r5, r6, r7, pc}
   deadc:	00015180 	.word	0x00015180
   deae0:	fffdc54f 	.word	0xfffdc54f
   deae4:	00023ab1 	.word	0x00023ab1
   deae8:	00023ab0 	.word	0x00023ab0

000deaec <_Balloc>:
   deaec:	b570      	push	{r4, r5, r6, lr}
   deaee:	6a45      	ldr	r5, [r0, #36]	; 0x24
   deaf0:	4604      	mov	r4, r0
   deaf2:	460e      	mov	r6, r1
   deaf4:	b93d      	cbnz	r5, deb06 <_Balloc+0x1a>
   deaf6:	2010      	movs	r0, #16
   deaf8:	f7f9 fb92 	bl	d8220 <malloc>
   deafc:	6260      	str	r0, [r4, #36]	; 0x24
   deafe:	6045      	str	r5, [r0, #4]
   deb00:	6085      	str	r5, [r0, #8]
   deb02:	6005      	str	r5, [r0, #0]
   deb04:	60c5      	str	r5, [r0, #12]
   deb06:	6a65      	ldr	r5, [r4, #36]	; 0x24
   deb08:	68eb      	ldr	r3, [r5, #12]
   deb0a:	b143      	cbz	r3, deb1e <_Balloc+0x32>
   deb0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   deb0e:	68db      	ldr	r3, [r3, #12]
   deb10:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   deb14:	b178      	cbz	r0, deb36 <_Balloc+0x4a>
   deb16:	6802      	ldr	r2, [r0, #0]
   deb18:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   deb1c:	e017      	b.n	deb4e <_Balloc+0x62>
   deb1e:	2221      	movs	r2, #33	; 0x21
   deb20:	2104      	movs	r1, #4
   deb22:	4620      	mov	r0, r4
   deb24:	f000 fbd1 	bl	df2ca <_calloc_r>
   deb28:	6a63      	ldr	r3, [r4, #36]	; 0x24
   deb2a:	60e8      	str	r0, [r5, #12]
   deb2c:	68db      	ldr	r3, [r3, #12]
   deb2e:	2b00      	cmp	r3, #0
   deb30:	d1ec      	bne.n	deb0c <_Balloc+0x20>
   deb32:	2000      	movs	r0, #0
   deb34:	bd70      	pop	{r4, r5, r6, pc}
   deb36:	2101      	movs	r1, #1
   deb38:	fa01 f506 	lsl.w	r5, r1, r6
   deb3c:	1d6a      	adds	r2, r5, #5
   deb3e:	0092      	lsls	r2, r2, #2
   deb40:	4620      	mov	r0, r4
   deb42:	f000 fbc2 	bl	df2ca <_calloc_r>
   deb46:	2800      	cmp	r0, #0
   deb48:	d0f3      	beq.n	deb32 <_Balloc+0x46>
   deb4a:	6046      	str	r6, [r0, #4]
   deb4c:	6085      	str	r5, [r0, #8]
   deb4e:	2300      	movs	r3, #0
   deb50:	6103      	str	r3, [r0, #16]
   deb52:	60c3      	str	r3, [r0, #12]
   deb54:	bd70      	pop	{r4, r5, r6, pc}

000deb56 <_Bfree>:
   deb56:	b570      	push	{r4, r5, r6, lr}
   deb58:	6a44      	ldr	r4, [r0, #36]	; 0x24
   deb5a:	4606      	mov	r6, r0
   deb5c:	460d      	mov	r5, r1
   deb5e:	b93c      	cbnz	r4, deb70 <_Bfree+0x1a>
   deb60:	2010      	movs	r0, #16
   deb62:	f7f9 fb5d 	bl	d8220 <malloc>
   deb66:	6270      	str	r0, [r6, #36]	; 0x24
   deb68:	6044      	str	r4, [r0, #4]
   deb6a:	6084      	str	r4, [r0, #8]
   deb6c:	6004      	str	r4, [r0, #0]
   deb6e:	60c4      	str	r4, [r0, #12]
   deb70:	b13d      	cbz	r5, deb82 <_Bfree+0x2c>
   deb72:	6a73      	ldr	r3, [r6, #36]	; 0x24
   deb74:	686a      	ldr	r2, [r5, #4]
   deb76:	68db      	ldr	r3, [r3, #12]
   deb78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   deb7c:	6029      	str	r1, [r5, #0]
   deb7e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   deb82:	bd70      	pop	{r4, r5, r6, pc}

000deb84 <__multadd>:
   deb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   deb88:	690d      	ldr	r5, [r1, #16]
   deb8a:	461f      	mov	r7, r3
   deb8c:	4606      	mov	r6, r0
   deb8e:	460c      	mov	r4, r1
   deb90:	f101 0e14 	add.w	lr, r1, #20
   deb94:	2300      	movs	r3, #0
   deb96:	f8de 0000 	ldr.w	r0, [lr]
   deb9a:	b281      	uxth	r1, r0
   deb9c:	fb02 7101 	mla	r1, r2, r1, r7
   deba0:	0c0f      	lsrs	r7, r1, #16
   deba2:	0c00      	lsrs	r0, r0, #16
   deba4:	fb02 7000 	mla	r0, r2, r0, r7
   deba8:	b289      	uxth	r1, r1
   debaa:	3301      	adds	r3, #1
   debac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   debb0:	429d      	cmp	r5, r3
   debb2:	ea4f 4710 	mov.w	r7, r0, lsr #16
   debb6:	f84e 1b04 	str.w	r1, [lr], #4
   debba:	dcec      	bgt.n	deb96 <__multadd+0x12>
   debbc:	b1d7      	cbz	r7, debf4 <__multadd+0x70>
   debbe:	68a3      	ldr	r3, [r4, #8]
   debc0:	429d      	cmp	r5, r3
   debc2:	db12      	blt.n	debea <__multadd+0x66>
   debc4:	6861      	ldr	r1, [r4, #4]
   debc6:	4630      	mov	r0, r6
   debc8:	3101      	adds	r1, #1
   debca:	f7ff ff8f 	bl	deaec <_Balloc>
   debce:	6922      	ldr	r2, [r4, #16]
   debd0:	3202      	adds	r2, #2
   debd2:	f104 010c 	add.w	r1, r4, #12
   debd6:	4680      	mov	r8, r0
   debd8:	0092      	lsls	r2, r2, #2
   debda:	300c      	adds	r0, #12
   debdc:	f7fe f903 	bl	dcde6 <memcpy>
   debe0:	4621      	mov	r1, r4
   debe2:	4630      	mov	r0, r6
   debe4:	f7ff ffb7 	bl	deb56 <_Bfree>
   debe8:	4644      	mov	r4, r8
   debea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   debee:	3501      	adds	r5, #1
   debf0:	615f      	str	r7, [r3, #20]
   debf2:	6125      	str	r5, [r4, #16]
   debf4:	4620      	mov	r0, r4
   debf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000debfa <__s2b>:
   debfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   debfe:	460c      	mov	r4, r1
   dec00:	4615      	mov	r5, r2
   dec02:	461f      	mov	r7, r3
   dec04:	2209      	movs	r2, #9
   dec06:	3308      	adds	r3, #8
   dec08:	4606      	mov	r6, r0
   dec0a:	fb93 f3f2 	sdiv	r3, r3, r2
   dec0e:	2100      	movs	r1, #0
   dec10:	2201      	movs	r2, #1
   dec12:	429a      	cmp	r2, r3
   dec14:	da02      	bge.n	dec1c <__s2b+0x22>
   dec16:	0052      	lsls	r2, r2, #1
   dec18:	3101      	adds	r1, #1
   dec1a:	e7fa      	b.n	dec12 <__s2b+0x18>
   dec1c:	4630      	mov	r0, r6
   dec1e:	f7ff ff65 	bl	deaec <_Balloc>
   dec22:	9b08      	ldr	r3, [sp, #32]
   dec24:	6143      	str	r3, [r0, #20]
   dec26:	2d09      	cmp	r5, #9
   dec28:	f04f 0301 	mov.w	r3, #1
   dec2c:	6103      	str	r3, [r0, #16]
   dec2e:	dd11      	ble.n	dec54 <__s2b+0x5a>
   dec30:	f104 0809 	add.w	r8, r4, #9
   dec34:	46c1      	mov	r9, r8
   dec36:	442c      	add	r4, r5
   dec38:	f819 3b01 	ldrb.w	r3, [r9], #1
   dec3c:	4601      	mov	r1, r0
   dec3e:	3b30      	subs	r3, #48	; 0x30
   dec40:	220a      	movs	r2, #10
   dec42:	4630      	mov	r0, r6
   dec44:	f7ff ff9e 	bl	deb84 <__multadd>
   dec48:	45a1      	cmp	r9, r4
   dec4a:	d1f5      	bne.n	dec38 <__s2b+0x3e>
   dec4c:	eb08 0405 	add.w	r4, r8, r5
   dec50:	3c08      	subs	r4, #8
   dec52:	e001      	b.n	dec58 <__s2b+0x5e>
   dec54:	340a      	adds	r4, #10
   dec56:	2509      	movs	r5, #9
   dec58:	1b2d      	subs	r5, r5, r4
   dec5a:	1963      	adds	r3, r4, r5
   dec5c:	429f      	cmp	r7, r3
   dec5e:	dd08      	ble.n	dec72 <__s2b+0x78>
   dec60:	f814 3b01 	ldrb.w	r3, [r4], #1
   dec64:	4601      	mov	r1, r0
   dec66:	3b30      	subs	r3, #48	; 0x30
   dec68:	220a      	movs	r2, #10
   dec6a:	4630      	mov	r0, r6
   dec6c:	f7ff ff8a 	bl	deb84 <__multadd>
   dec70:	e7f3      	b.n	dec5a <__s2b+0x60>
   dec72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dec76 <__hi0bits>:
   dec76:	0c03      	lsrs	r3, r0, #16
   dec78:	041b      	lsls	r3, r3, #16
   dec7a:	b913      	cbnz	r3, dec82 <__hi0bits+0xc>
   dec7c:	0400      	lsls	r0, r0, #16
   dec7e:	2310      	movs	r3, #16
   dec80:	e000      	b.n	dec84 <__hi0bits+0xe>
   dec82:	2300      	movs	r3, #0
   dec84:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dec88:	bf04      	itt	eq
   dec8a:	0200      	lsleq	r0, r0, #8
   dec8c:	3308      	addeq	r3, #8
   dec8e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dec92:	bf04      	itt	eq
   dec94:	0100      	lsleq	r0, r0, #4
   dec96:	3304      	addeq	r3, #4
   dec98:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dec9c:	bf04      	itt	eq
   dec9e:	0080      	lsleq	r0, r0, #2
   deca0:	3302      	addeq	r3, #2
   deca2:	2800      	cmp	r0, #0
   deca4:	db03      	blt.n	decae <__hi0bits+0x38>
   deca6:	0042      	lsls	r2, r0, #1
   deca8:	d503      	bpl.n	decb2 <__hi0bits+0x3c>
   decaa:	1c58      	adds	r0, r3, #1
   decac:	4770      	bx	lr
   decae:	4618      	mov	r0, r3
   decb0:	4770      	bx	lr
   decb2:	2020      	movs	r0, #32
   decb4:	4770      	bx	lr

000decb6 <__lo0bits>:
   decb6:	6803      	ldr	r3, [r0, #0]
   decb8:	f013 0207 	ands.w	r2, r3, #7
   decbc:	d00b      	beq.n	decd6 <__lo0bits+0x20>
   decbe:	07d9      	lsls	r1, r3, #31
   decc0:	d422      	bmi.n	ded08 <__lo0bits+0x52>
   decc2:	079a      	lsls	r2, r3, #30
   decc4:	bf4b      	itete	mi
   decc6:	085b      	lsrmi	r3, r3, #1
   decc8:	089b      	lsrpl	r3, r3, #2
   decca:	6003      	strmi	r3, [r0, #0]
   deccc:	6003      	strpl	r3, [r0, #0]
   decce:	bf4c      	ite	mi
   decd0:	2001      	movmi	r0, #1
   decd2:	2002      	movpl	r0, #2
   decd4:	4770      	bx	lr
   decd6:	b299      	uxth	r1, r3
   decd8:	b909      	cbnz	r1, decde <__lo0bits+0x28>
   decda:	0c1b      	lsrs	r3, r3, #16
   decdc:	2210      	movs	r2, #16
   decde:	f013 0fff 	tst.w	r3, #255	; 0xff
   dece2:	bf04      	itt	eq
   dece4:	0a1b      	lsreq	r3, r3, #8
   dece6:	3208      	addeq	r2, #8
   dece8:	0719      	lsls	r1, r3, #28
   decea:	bf04      	itt	eq
   decec:	091b      	lsreq	r3, r3, #4
   decee:	3204      	addeq	r2, #4
   decf0:	0799      	lsls	r1, r3, #30
   decf2:	bf04      	itt	eq
   decf4:	089b      	lsreq	r3, r3, #2
   decf6:	3202      	addeq	r2, #2
   decf8:	07d9      	lsls	r1, r3, #31
   decfa:	d402      	bmi.n	ded02 <__lo0bits+0x4c>
   decfc:	085b      	lsrs	r3, r3, #1
   decfe:	d005      	beq.n	ded0c <__lo0bits+0x56>
   ded00:	3201      	adds	r2, #1
   ded02:	6003      	str	r3, [r0, #0]
   ded04:	4610      	mov	r0, r2
   ded06:	4770      	bx	lr
   ded08:	2000      	movs	r0, #0
   ded0a:	4770      	bx	lr
   ded0c:	2020      	movs	r0, #32
   ded0e:	4770      	bx	lr

000ded10 <__i2b>:
   ded10:	b510      	push	{r4, lr}
   ded12:	460c      	mov	r4, r1
   ded14:	2101      	movs	r1, #1
   ded16:	f7ff fee9 	bl	deaec <_Balloc>
   ded1a:	2201      	movs	r2, #1
   ded1c:	6144      	str	r4, [r0, #20]
   ded1e:	6102      	str	r2, [r0, #16]
   ded20:	bd10      	pop	{r4, pc}

000ded22 <__multiply>:
   ded22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ded26:	4614      	mov	r4, r2
   ded28:	690a      	ldr	r2, [r1, #16]
   ded2a:	6923      	ldr	r3, [r4, #16]
   ded2c:	429a      	cmp	r2, r3
   ded2e:	bfb8      	it	lt
   ded30:	460b      	movlt	r3, r1
   ded32:	4688      	mov	r8, r1
   ded34:	bfbc      	itt	lt
   ded36:	46a0      	movlt	r8, r4
   ded38:	461c      	movlt	r4, r3
   ded3a:	f8d8 7010 	ldr.w	r7, [r8, #16]
   ded3e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   ded42:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ded46:	f8d8 1004 	ldr.w	r1, [r8, #4]
   ded4a:	eb07 0609 	add.w	r6, r7, r9
   ded4e:	429e      	cmp	r6, r3
   ded50:	bfc8      	it	gt
   ded52:	3101      	addgt	r1, #1
   ded54:	f7ff feca 	bl	deaec <_Balloc>
   ded58:	f100 0514 	add.w	r5, r0, #20
   ded5c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   ded60:	462b      	mov	r3, r5
   ded62:	2200      	movs	r2, #0
   ded64:	4563      	cmp	r3, ip
   ded66:	d202      	bcs.n	ded6e <__multiply+0x4c>
   ded68:	f843 2b04 	str.w	r2, [r3], #4
   ded6c:	e7fa      	b.n	ded64 <__multiply+0x42>
   ded6e:	f104 0214 	add.w	r2, r4, #20
   ded72:	f108 0114 	add.w	r1, r8, #20
   ded76:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   ded7a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   ded7e:	9300      	str	r3, [sp, #0]
   ded80:	9b00      	ldr	r3, [sp, #0]
   ded82:	9201      	str	r2, [sp, #4]
   ded84:	4293      	cmp	r3, r2
   ded86:	d957      	bls.n	dee38 <__multiply+0x116>
   ded88:	f8b2 b000 	ldrh.w	fp, [r2]
   ded8c:	f1bb 0f00 	cmp.w	fp, #0
   ded90:	d023      	beq.n	dedda <__multiply+0xb8>
   ded92:	4689      	mov	r9, r1
   ded94:	46ae      	mov	lr, r5
   ded96:	f04f 0800 	mov.w	r8, #0
   ded9a:	f859 4b04 	ldr.w	r4, [r9], #4
   ded9e:	f8be a000 	ldrh.w	sl, [lr]
   deda2:	b2a3      	uxth	r3, r4
   deda4:	fb0b a303 	mla	r3, fp, r3, sl
   deda8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   dedac:	f8de 4000 	ldr.w	r4, [lr]
   dedb0:	4443      	add	r3, r8
   dedb2:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dedb6:	fb0b 840a 	mla	r4, fp, sl, r8
   dedba:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   dedbe:	46f2      	mov	sl, lr
   dedc0:	b29b      	uxth	r3, r3
   dedc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   dedc6:	454f      	cmp	r7, r9
   dedc8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dedcc:	f84a 3b04 	str.w	r3, [sl], #4
   dedd0:	d901      	bls.n	dedd6 <__multiply+0xb4>
   dedd2:	46d6      	mov	lr, sl
   dedd4:	e7e1      	b.n	ded9a <__multiply+0x78>
   dedd6:	f8ce 8004 	str.w	r8, [lr, #4]
   dedda:	9b01      	ldr	r3, [sp, #4]
   deddc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   dede0:	3204      	adds	r2, #4
   dede2:	f1ba 0f00 	cmp.w	sl, #0
   dede6:	d021      	beq.n	dee2c <__multiply+0x10a>
   dede8:	682b      	ldr	r3, [r5, #0]
   dedea:	462c      	mov	r4, r5
   dedec:	4689      	mov	r9, r1
   dedee:	f04f 0800 	mov.w	r8, #0
   dedf2:	f8b9 e000 	ldrh.w	lr, [r9]
   dedf6:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   dedfa:	fb0a be0e 	mla	lr, sl, lr, fp
   dedfe:	44f0      	add	r8, lr
   dee00:	46a3      	mov	fp, r4
   dee02:	b29b      	uxth	r3, r3
   dee04:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   dee08:	f84b 3b04 	str.w	r3, [fp], #4
   dee0c:	f859 3b04 	ldr.w	r3, [r9], #4
   dee10:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   dee14:	0c1b      	lsrs	r3, r3, #16
   dee16:	fb0a e303 	mla	r3, sl, r3, lr
   dee1a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   dee1e:	454f      	cmp	r7, r9
   dee20:	ea4f 4813 	mov.w	r8, r3, lsr #16
   dee24:	d901      	bls.n	dee2a <__multiply+0x108>
   dee26:	465c      	mov	r4, fp
   dee28:	e7e3      	b.n	dedf2 <__multiply+0xd0>
   dee2a:	6063      	str	r3, [r4, #4]
   dee2c:	3504      	adds	r5, #4
   dee2e:	e7a7      	b.n	ded80 <__multiply+0x5e>
   dee30:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   dee34:	b913      	cbnz	r3, dee3c <__multiply+0x11a>
   dee36:	3e01      	subs	r6, #1
   dee38:	2e00      	cmp	r6, #0
   dee3a:	dcf9      	bgt.n	dee30 <__multiply+0x10e>
   dee3c:	6106      	str	r6, [r0, #16]
   dee3e:	b003      	add	sp, #12
   dee40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dee44 <__pow5mult>:
   dee44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dee48:	4615      	mov	r5, r2
   dee4a:	f012 0203 	ands.w	r2, r2, #3
   dee4e:	4606      	mov	r6, r0
   dee50:	460f      	mov	r7, r1
   dee52:	d007      	beq.n	dee64 <__pow5mult+0x20>
   dee54:	3a01      	subs	r2, #1
   dee56:	4c21      	ldr	r4, [pc, #132]	; (deedc <__pow5mult+0x98>)
   dee58:	2300      	movs	r3, #0
   dee5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dee5e:	f7ff fe91 	bl	deb84 <__multadd>
   dee62:	4607      	mov	r7, r0
   dee64:	10ad      	asrs	r5, r5, #2
   dee66:	d036      	beq.n	deed6 <__pow5mult+0x92>
   dee68:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dee6a:	b93c      	cbnz	r4, dee7c <__pow5mult+0x38>
   dee6c:	2010      	movs	r0, #16
   dee6e:	f7f9 f9d7 	bl	d8220 <malloc>
   dee72:	6270      	str	r0, [r6, #36]	; 0x24
   dee74:	6044      	str	r4, [r0, #4]
   dee76:	6084      	str	r4, [r0, #8]
   dee78:	6004      	str	r4, [r0, #0]
   dee7a:	60c4      	str	r4, [r0, #12]
   dee7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dee80:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dee84:	b94c      	cbnz	r4, dee9a <__pow5mult+0x56>
   dee86:	f240 2171 	movw	r1, #625	; 0x271
   dee8a:	4630      	mov	r0, r6
   dee8c:	f7ff ff40 	bl	ded10 <__i2b>
   dee90:	2300      	movs	r3, #0
   dee92:	f8c8 0008 	str.w	r0, [r8, #8]
   dee96:	4604      	mov	r4, r0
   dee98:	6003      	str	r3, [r0, #0]
   dee9a:	f04f 0800 	mov.w	r8, #0
   dee9e:	07eb      	lsls	r3, r5, #31
   deea0:	d50a      	bpl.n	deeb8 <__pow5mult+0x74>
   deea2:	4639      	mov	r1, r7
   deea4:	4622      	mov	r2, r4
   deea6:	4630      	mov	r0, r6
   deea8:	f7ff ff3b 	bl	ded22 <__multiply>
   deeac:	4639      	mov	r1, r7
   deeae:	4681      	mov	r9, r0
   deeb0:	4630      	mov	r0, r6
   deeb2:	f7ff fe50 	bl	deb56 <_Bfree>
   deeb6:	464f      	mov	r7, r9
   deeb8:	106d      	asrs	r5, r5, #1
   deeba:	d00c      	beq.n	deed6 <__pow5mult+0x92>
   deebc:	6820      	ldr	r0, [r4, #0]
   deebe:	b108      	cbz	r0, deec4 <__pow5mult+0x80>
   deec0:	4604      	mov	r4, r0
   deec2:	e7ec      	b.n	dee9e <__pow5mult+0x5a>
   deec4:	4622      	mov	r2, r4
   deec6:	4621      	mov	r1, r4
   deec8:	4630      	mov	r0, r6
   deeca:	f7ff ff2a 	bl	ded22 <__multiply>
   deece:	6020      	str	r0, [r4, #0]
   deed0:	f8c0 8000 	str.w	r8, [r0]
   deed4:	e7f4      	b.n	deec0 <__pow5mult+0x7c>
   deed6:	4638      	mov	r0, r7
   deed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   deedc:	000e00a8 	.word	0x000e00a8

000deee0 <__lshift>:
   deee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   deee4:	460c      	mov	r4, r1
   deee6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   deeea:	6926      	ldr	r6, [r4, #16]
   deeec:	6849      	ldr	r1, [r1, #4]
   deeee:	68a3      	ldr	r3, [r4, #8]
   deef0:	4456      	add	r6, sl
   deef2:	4607      	mov	r7, r0
   deef4:	4691      	mov	r9, r2
   deef6:	1c75      	adds	r5, r6, #1
   deef8:	42ab      	cmp	r3, r5
   deefa:	da02      	bge.n	def02 <__lshift+0x22>
   deefc:	3101      	adds	r1, #1
   deefe:	005b      	lsls	r3, r3, #1
   def00:	e7fa      	b.n	deef8 <__lshift+0x18>
   def02:	4638      	mov	r0, r7
   def04:	f7ff fdf2 	bl	deaec <_Balloc>
   def08:	2300      	movs	r3, #0
   def0a:	4680      	mov	r8, r0
   def0c:	f100 0114 	add.w	r1, r0, #20
   def10:	461a      	mov	r2, r3
   def12:	4553      	cmp	r3, sl
   def14:	da03      	bge.n	def1e <__lshift+0x3e>
   def16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   def1a:	3301      	adds	r3, #1
   def1c:	e7f9      	b.n	def12 <__lshift+0x32>
   def1e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   def22:	6920      	ldr	r0, [r4, #16]
   def24:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   def28:	f019 091f 	ands.w	r9, r9, #31
   def2c:	f104 0114 	add.w	r1, r4, #20
   def30:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   def34:	d014      	beq.n	def60 <__lshift+0x80>
   def36:	f1c9 0c20 	rsb	ip, r9, #32
   def3a:	2200      	movs	r2, #0
   def3c:	6808      	ldr	r0, [r1, #0]
   def3e:	fa00 f009 	lsl.w	r0, r0, r9
   def42:	4302      	orrs	r2, r0
   def44:	469a      	mov	sl, r3
   def46:	f843 2b04 	str.w	r2, [r3], #4
   def4a:	f851 2b04 	ldr.w	r2, [r1], #4
   def4e:	458e      	cmp	lr, r1
   def50:	fa22 f20c 	lsr.w	r2, r2, ip
   def54:	d8f2      	bhi.n	def3c <__lshift+0x5c>
   def56:	f8ca 2004 	str.w	r2, [sl, #4]
   def5a:	b142      	cbz	r2, def6e <__lshift+0x8e>
   def5c:	1cb5      	adds	r5, r6, #2
   def5e:	e006      	b.n	def6e <__lshift+0x8e>
   def60:	3b04      	subs	r3, #4
   def62:	f851 2b04 	ldr.w	r2, [r1], #4
   def66:	f843 2f04 	str.w	r2, [r3, #4]!
   def6a:	458e      	cmp	lr, r1
   def6c:	d8f9      	bhi.n	def62 <__lshift+0x82>
   def6e:	3d01      	subs	r5, #1
   def70:	4638      	mov	r0, r7
   def72:	f8c8 5010 	str.w	r5, [r8, #16]
   def76:	4621      	mov	r1, r4
   def78:	f7ff fded 	bl	deb56 <_Bfree>
   def7c:	4640      	mov	r0, r8
   def7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000def82 <__mcmp>:
   def82:	6903      	ldr	r3, [r0, #16]
   def84:	690a      	ldr	r2, [r1, #16]
   def86:	1a9b      	subs	r3, r3, r2
   def88:	b510      	push	{r4, lr}
   def8a:	d111      	bne.n	defb0 <__mcmp+0x2e>
   def8c:	0092      	lsls	r2, r2, #2
   def8e:	3014      	adds	r0, #20
   def90:	3114      	adds	r1, #20
   def92:	1883      	adds	r3, r0, r2
   def94:	440a      	add	r2, r1
   def96:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   def9a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   def9e:	428c      	cmp	r4, r1
   defa0:	d002      	beq.n	defa8 <__mcmp+0x26>
   defa2:	d307      	bcc.n	defb4 <__mcmp+0x32>
   defa4:	2001      	movs	r0, #1
   defa6:	bd10      	pop	{r4, pc}
   defa8:	4298      	cmp	r0, r3
   defaa:	d3f4      	bcc.n	def96 <__mcmp+0x14>
   defac:	2000      	movs	r0, #0
   defae:	bd10      	pop	{r4, pc}
   defb0:	4618      	mov	r0, r3
   defb2:	bd10      	pop	{r4, pc}
   defb4:	f04f 30ff 	mov.w	r0, #4294967295
   defb8:	bd10      	pop	{r4, pc}

000defba <__mdiff>:
   defba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   defbe:	460c      	mov	r4, r1
   defc0:	4607      	mov	r7, r0
   defc2:	4611      	mov	r1, r2
   defc4:	4620      	mov	r0, r4
   defc6:	4615      	mov	r5, r2
   defc8:	f7ff ffdb 	bl	def82 <__mcmp>
   defcc:	1e06      	subs	r6, r0, #0
   defce:	d108      	bne.n	defe2 <__mdiff+0x28>
   defd0:	4631      	mov	r1, r6
   defd2:	4638      	mov	r0, r7
   defd4:	f7ff fd8a 	bl	deaec <_Balloc>
   defd8:	2301      	movs	r3, #1
   defda:	6103      	str	r3, [r0, #16]
   defdc:	6146      	str	r6, [r0, #20]
   defde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   defe2:	bfbc      	itt	lt
   defe4:	4623      	movlt	r3, r4
   defe6:	462c      	movlt	r4, r5
   defe8:	4638      	mov	r0, r7
   defea:	6861      	ldr	r1, [r4, #4]
   defec:	bfba      	itte	lt
   defee:	461d      	movlt	r5, r3
   deff0:	2601      	movlt	r6, #1
   deff2:	2600      	movge	r6, #0
   deff4:	f7ff fd7a 	bl	deaec <_Balloc>
   deff8:	692b      	ldr	r3, [r5, #16]
   deffa:	60c6      	str	r6, [r0, #12]
   deffc:	6926      	ldr	r6, [r4, #16]
   deffe:	f105 0914 	add.w	r9, r5, #20
   df002:	3414      	adds	r4, #20
   df004:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   df008:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   df00c:	f100 0514 	add.w	r5, r0, #20
   df010:	f04f 0c00 	mov.w	ip, #0
   df014:	f854 3b04 	ldr.w	r3, [r4], #4
   df018:	f859 2b04 	ldr.w	r2, [r9], #4
   df01c:	fa1c f183 	uxtah	r1, ip, r3
   df020:	fa1f fe82 	uxth.w	lr, r2
   df024:	0c12      	lsrs	r2, r2, #16
   df026:	ebce 0101 	rsb	r1, lr, r1
   df02a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   df02e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   df032:	b289      	uxth	r1, r1
   df034:	ea4f 4c23 	mov.w	ip, r3, asr #16
   df038:	45c8      	cmp	r8, r9
   df03a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   df03e:	46a6      	mov	lr, r4
   df040:	f845 3b04 	str.w	r3, [r5], #4
   df044:	d8e6      	bhi.n	df014 <__mdiff+0x5a>
   df046:	45be      	cmp	lr, r7
   df048:	d20e      	bcs.n	df068 <__mdiff+0xae>
   df04a:	f85e 1b04 	ldr.w	r1, [lr], #4
   df04e:	fa1c f281 	uxtah	r2, ip, r1
   df052:	1413      	asrs	r3, r2, #16
   df054:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   df058:	b292      	uxth	r2, r2
   df05a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   df05e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   df062:	f845 2b04 	str.w	r2, [r5], #4
   df066:	e7ee      	b.n	df046 <__mdiff+0x8c>
   df068:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   df06c:	b90b      	cbnz	r3, df072 <__mdiff+0xb8>
   df06e:	3e01      	subs	r6, #1
   df070:	e7fa      	b.n	df068 <__mdiff+0xae>
   df072:	6106      	str	r6, [r0, #16]
   df074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000df078 <__ulp>:
   df078:	4b12      	ldr	r3, [pc, #72]	; (df0c4 <__ulp+0x4c>)
   df07a:	ee10 2a90 	vmov	r2, s1
   df07e:	401a      	ands	r2, r3
   df080:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   df084:	2b00      	cmp	r3, #0
   df086:	dd02      	ble.n	df08e <__ulp+0x16>
   df088:	2000      	movs	r0, #0
   df08a:	4619      	mov	r1, r3
   df08c:	e017      	b.n	df0be <__ulp+0x46>
   df08e:	425b      	negs	r3, r3
   df090:	151b      	asrs	r3, r3, #20
   df092:	2b13      	cmp	r3, #19
   df094:	f04f 0000 	mov.w	r0, #0
   df098:	f04f 0100 	mov.w	r1, #0
   df09c:	dc04      	bgt.n	df0a8 <__ulp+0x30>
   df09e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   df0a2:	fa42 f103 	asr.w	r1, r2, r3
   df0a6:	e00a      	b.n	df0be <__ulp+0x46>
   df0a8:	3b14      	subs	r3, #20
   df0aa:	2b1e      	cmp	r3, #30
   df0ac:	f04f 0201 	mov.w	r2, #1
   df0b0:	bfda      	itte	le
   df0b2:	f1c3 031f 	rsble	r3, r3, #31
   df0b6:	fa02 f303 	lslle.w	r3, r2, r3
   df0ba:	4613      	movgt	r3, r2
   df0bc:	4618      	mov	r0, r3
   df0be:	ec41 0b10 	vmov	d0, r0, r1
   df0c2:	4770      	bx	lr
   df0c4:	7ff00000 	.word	0x7ff00000

000df0c8 <__b2d>:
   df0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   df0ca:	6905      	ldr	r5, [r0, #16]
   df0cc:	f100 0614 	add.w	r6, r0, #20
   df0d0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   df0d4:	1f2f      	subs	r7, r5, #4
   df0d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   df0da:	4620      	mov	r0, r4
   df0dc:	f7ff fdcb 	bl	dec76 <__hi0bits>
   df0e0:	f1c0 0320 	rsb	r3, r0, #32
   df0e4:	280a      	cmp	r0, #10
   df0e6:	600b      	str	r3, [r1, #0]
   df0e8:	dc14      	bgt.n	df114 <__b2d+0x4c>
   df0ea:	f1c0 0e0b 	rsb	lr, r0, #11
   df0ee:	fa24 f10e 	lsr.w	r1, r4, lr
   df0f2:	42be      	cmp	r6, r7
   df0f4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   df0f8:	bf34      	ite	cc
   df0fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   df0fe:	2100      	movcs	r1, #0
   df100:	3015      	adds	r0, #21
   df102:	fa04 f000 	lsl.w	r0, r4, r0
   df106:	fa21 f10e 	lsr.w	r1, r1, lr
   df10a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   df10e:	ea40 0201 	orr.w	r2, r0, r1
   df112:	e023      	b.n	df15c <__b2d+0x94>
   df114:	42be      	cmp	r6, r7
   df116:	bf3a      	itte	cc
   df118:	f1a5 0708 	subcc.w	r7, r5, #8
   df11c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   df120:	2100      	movcs	r1, #0
   df122:	380b      	subs	r0, #11
   df124:	d015      	beq.n	df152 <__b2d+0x8a>
   df126:	4084      	lsls	r4, r0
   df128:	f1c0 0520 	rsb	r5, r0, #32
   df12c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   df130:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   df134:	42b7      	cmp	r7, r6
   df136:	fa21 fe05 	lsr.w	lr, r1, r5
   df13a:	ea44 030e 	orr.w	r3, r4, lr
   df13e:	bf8c      	ite	hi
   df140:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   df144:	2400      	movls	r4, #0
   df146:	fa01 f000 	lsl.w	r0, r1, r0
   df14a:	40ec      	lsrs	r4, r5
   df14c:	ea40 0204 	orr.w	r2, r0, r4
   df150:	e004      	b.n	df15c <__b2d+0x94>
   df152:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   df156:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   df15a:	460a      	mov	r2, r1
   df15c:	ec43 2b10 	vmov	d0, r2, r3
   df160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000df162 <__d2b>:
   df162:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   df166:	460e      	mov	r6, r1
   df168:	2101      	movs	r1, #1
   df16a:	ec59 8b10 	vmov	r8, r9, d0
   df16e:	4615      	mov	r5, r2
   df170:	f7ff fcbc 	bl	deaec <_Balloc>
   df174:	f3c9 540a 	ubfx	r4, r9, #20, #11
   df178:	4607      	mov	r7, r0
   df17a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   df17e:	b10c      	cbz	r4, df184 <__d2b+0x22>
   df180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   df184:	9301      	str	r3, [sp, #4]
   df186:	f1b8 0f00 	cmp.w	r8, #0
   df18a:	d019      	beq.n	df1c0 <__d2b+0x5e>
   df18c:	a802      	add	r0, sp, #8
   df18e:	f840 8d08 	str.w	r8, [r0, #-8]!
   df192:	f7ff fd90 	bl	decb6 <__lo0bits>
   df196:	9b00      	ldr	r3, [sp, #0]
   df198:	b148      	cbz	r0, df1ae <__d2b+0x4c>
   df19a:	9a01      	ldr	r2, [sp, #4]
   df19c:	f1c0 0120 	rsb	r1, r0, #32
   df1a0:	fa02 f101 	lsl.w	r1, r2, r1
   df1a4:	430b      	orrs	r3, r1
   df1a6:	40c2      	lsrs	r2, r0
   df1a8:	617b      	str	r3, [r7, #20]
   df1aa:	9201      	str	r2, [sp, #4]
   df1ac:	e000      	b.n	df1b0 <__d2b+0x4e>
   df1ae:	617b      	str	r3, [r7, #20]
   df1b0:	9b01      	ldr	r3, [sp, #4]
   df1b2:	61bb      	str	r3, [r7, #24]
   df1b4:	2b00      	cmp	r3, #0
   df1b6:	bf14      	ite	ne
   df1b8:	2102      	movne	r1, #2
   df1ba:	2101      	moveq	r1, #1
   df1bc:	6139      	str	r1, [r7, #16]
   df1be:	e007      	b.n	df1d0 <__d2b+0x6e>
   df1c0:	a801      	add	r0, sp, #4
   df1c2:	f7ff fd78 	bl	decb6 <__lo0bits>
   df1c6:	9b01      	ldr	r3, [sp, #4]
   df1c8:	617b      	str	r3, [r7, #20]
   df1ca:	2101      	movs	r1, #1
   df1cc:	6139      	str	r1, [r7, #16]
   df1ce:	3020      	adds	r0, #32
   df1d0:	b134      	cbz	r4, df1e0 <__d2b+0x7e>
   df1d2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   df1d6:	4404      	add	r4, r0
   df1d8:	6034      	str	r4, [r6, #0]
   df1da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   df1de:	e009      	b.n	df1f4 <__d2b+0x92>
   df1e0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   df1e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   df1e8:	6030      	str	r0, [r6, #0]
   df1ea:	6918      	ldr	r0, [r3, #16]
   df1ec:	f7ff fd43 	bl	dec76 <__hi0bits>
   df1f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   df1f4:	6028      	str	r0, [r5, #0]
   df1f6:	4638      	mov	r0, r7
   df1f8:	b003      	add	sp, #12
   df1fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000df1fe <__ratio>:
   df1fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   df202:	4688      	mov	r8, r1
   df204:	4669      	mov	r1, sp
   df206:	4681      	mov	r9, r0
   df208:	f7ff ff5e 	bl	df0c8 <__b2d>
   df20c:	a901      	add	r1, sp, #4
   df20e:	4640      	mov	r0, r8
   df210:	ec55 4b10 	vmov	r4, r5, d0
   df214:	f7ff ff58 	bl	df0c8 <__b2d>
   df218:	f8d9 3010 	ldr.w	r3, [r9, #16]
   df21c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   df220:	1a9a      	subs	r2, r3, r2
   df222:	e89d 000a 	ldmia.w	sp, {r1, r3}
   df226:	1ac9      	subs	r1, r1, r3
   df228:	ec57 6b10 	vmov	r6, r7, d0
   df22c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   df230:	2b00      	cmp	r3, #0
   df232:	bfcc      	ite	gt
   df234:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   df238:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   df23c:	4632      	mov	r2, r6
   df23e:	463b      	mov	r3, r7
   df240:	4620      	mov	r0, r4
   df242:	4629      	mov	r1, r5
   df244:	f7fd fa9c 	bl	dc780 <__aeabi_ddiv>
   df248:	ec41 0b10 	vmov	d0, r0, r1
   df24c:	b003      	add	sp, #12
   df24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000df252 <__copybits>:
   df252:	3901      	subs	r1, #1
   df254:	b510      	push	{r4, lr}
   df256:	1149      	asrs	r1, r1, #5
   df258:	6914      	ldr	r4, [r2, #16]
   df25a:	3101      	adds	r1, #1
   df25c:	f102 0314 	add.w	r3, r2, #20
   df260:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   df264:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   df268:	42a3      	cmp	r3, r4
   df26a:	4602      	mov	r2, r0
   df26c:	d204      	bcs.n	df278 <__copybits+0x26>
   df26e:	f853 2b04 	ldr.w	r2, [r3], #4
   df272:	f840 2b04 	str.w	r2, [r0], #4
   df276:	e7f7      	b.n	df268 <__copybits+0x16>
   df278:	2300      	movs	r3, #0
   df27a:	428a      	cmp	r2, r1
   df27c:	d202      	bcs.n	df284 <__copybits+0x32>
   df27e:	f842 3b04 	str.w	r3, [r2], #4
   df282:	e7fa      	b.n	df27a <__copybits+0x28>
   df284:	bd10      	pop	{r4, pc}

000df286 <__any_on>:
   df286:	f100 0214 	add.w	r2, r0, #20
   df28a:	6900      	ldr	r0, [r0, #16]
   df28c:	114b      	asrs	r3, r1, #5
   df28e:	4298      	cmp	r0, r3
   df290:	b510      	push	{r4, lr}
   df292:	db0c      	blt.n	df2ae <__any_on+0x28>
   df294:	dd0c      	ble.n	df2b0 <__any_on+0x2a>
   df296:	f011 011f 	ands.w	r1, r1, #31
   df29a:	d009      	beq.n	df2b0 <__any_on+0x2a>
   df29c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   df2a0:	fa24 f001 	lsr.w	r0, r4, r1
   df2a4:	fa00 f101 	lsl.w	r1, r0, r1
   df2a8:	428c      	cmp	r4, r1
   df2aa:	d10c      	bne.n	df2c6 <__any_on+0x40>
   df2ac:	e000      	b.n	df2b0 <__any_on+0x2a>
   df2ae:	4603      	mov	r3, r0
   df2b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   df2b4:	4293      	cmp	r3, r2
   df2b6:	d904      	bls.n	df2c2 <__any_on+0x3c>
   df2b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   df2bc:	2900      	cmp	r1, #0
   df2be:	d0f9      	beq.n	df2b4 <__any_on+0x2e>
   df2c0:	e001      	b.n	df2c6 <__any_on+0x40>
   df2c2:	2000      	movs	r0, #0
   df2c4:	bd10      	pop	{r4, pc}
   df2c6:	2001      	movs	r0, #1
   df2c8:	bd10      	pop	{r4, pc}

000df2ca <_calloc_r>:
   df2ca:	b538      	push	{r3, r4, r5, lr}
   df2cc:	fb02 f401 	mul.w	r4, r2, r1
   df2d0:	4621      	mov	r1, r4
   df2d2:	f7f8 ffe5 	bl	d82a0 <_malloc_r>
   df2d6:	4605      	mov	r5, r0
   df2d8:	b118      	cbz	r0, df2e2 <_calloc_r+0x18>
   df2da:	4622      	mov	r2, r4
   df2dc:	2100      	movs	r1, #0
   df2de:	f7fd fda8 	bl	dce32 <memset>
   df2e2:	4628      	mov	r0, r5
   df2e4:	bd38      	pop	{r3, r4, r5, pc}

000df2e6 <__env_lock>:
   df2e6:	4770      	bx	lr

000df2e8 <__env_unlock>:
   df2e8:	4770      	bx	lr

000df2ea <link_code_end>:
	...

000df2ec <dynalib_user>:
   df2ec:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   df2fc:	0000 0000                                   ....

000df300 <_ZTVN8particle13__SPISettingsE>:
	...
   df308:	4179 000d                                   yA..

000df30c <_ZTV5Timer>:
	...
   df314:	4389 000d 43d1 000d 41fd 000d               .C...C...A..

000df320 <_ZTVN5spark10LogHandlerE>:
	...
   df330:	40a9 000d 40cd 000d                         .@...@..

000df338 <_ZTVN8particle9LEDStatusE>:
	...
   df340:	4271 000d 428d 000d 40d7 000d               qB...B...@..

000df34c <_ZTVN5spark16SerialLogHandlerE>:
	...
   df354:	42a1 000d 42d5 000d a6ed 000d 40cf 000d     .B...B.......@..

000df364 <_ZTV4File>:
	...
   df36c:	4175 000d 41ef 000d 41d7 000d 41d1 000d     uA...A...A...A..
   df37c:	40d9 000d 4215 000d 420f 000d 4209 000d     .@...B...B...B..
   df38c:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   df39c:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   df3ac:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   df3bc:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   df3cc:	2545 3e64 5300 6174 7574 3a73 2520 0064     E%d>.Status: %d.
   df3dc:	4343 7548 0062 6548 6c6c 206f 7266 6d6f     CCHub.Hello from
   df3ec:	4220 746f 2520 0a64 4200 746f 6431 7461      Bot %d..Bot1dat
   df3fc:	4200 6425 4241 7573 2570 3330 2564 3330     .B%dABsup%03d%03
   df40c:	2564 2e30 6636 3025 362e 0066 2542 4164     d%0.6f%0.6f.B%dA
   df41c:	6342 7363 000a 4e57 0053 002f 6966 656c     Bccs..WNS./.file
   df42c:	616e 656d 5300 6e65 6964 676e 6320 6d6f     name.Sending com
   df43c:	616d 646e 2520 0073 6946 656c 2520 2073     mand %s.File %s 
   df44c:	7369 6120 2e20 7363 2076 726f 2e20 7874     is a .csv or .tx
   df45c:	2074 7270 6e69 6974 676e 6420 7461 0061     t printing data.
   df46c:	6966 656c 6f63 706d 6600 6c69 6465 6e6f     filecomp.filedon
   df47c:	0065 6843 6365 696b 676e 6920 2066 6966     e.Checking if fi
   df48c:	656c 2520 2073 7369 6120 2e20 7363 2076     le %s is a .csv 
   df49c:	726f 2e20 7874 2e74 2e2e 2e00 7363 0076     or .txt.....csv.
   df4ac:	575b 5241 5d4e 4d20 7365 6173 6567 4320     [WARN] Message C
   df4bc:	6568 6b63 7573 206d 6f44 7365 4e20 746f     hecksum Does Not
   df4cc:	4d20 7461 6863 3a21 2520 0073 6361 006b      Match!: %s.ack.
   df4dc:	746d 0072 6572 0071 7470 0073 505b 5455     mtr.req.pts.[PUT
   df4ec:	5d53 5220 6365 6965 6576 2064 7453 6972     S] Received Stri
   df4fc:	676e 4320 6d6f 616d 646e 203a 7325 6300     ng Command: %s.c
   df50c:	7363 6100 7475 6400 706d 5b00 4e49 4f46     cs.aut.dmp.[INFO
   df51c:	205d 6552 6563 7669 6465 4c20 4554 4d20     ] Received LTE M
   df52c:	7365 6173 6567 203a 7325 4e00 7765 4220     essage: %s.New B
   df53c:	2054 6f43 6d6d 6e61 3a64 5b00 4e49 4f46     T Command:.[INFO
   df54c:	205d 6552 6563 7669 6465 4220 454c 4d20     ] Received BLE M
   df55c:	7365 6173 6567 203a 7325 4e00 7765 5820     essage: %s.New X
   df56c:	6542 2065 6f43 6d6d 6e61 3a64 5b00 4e49     Bee Command:.[IN
   df57c:	4f46 205d 6552 6563 7669 6465 5820 6542     FO] Received XBe
   df58c:	2065 654d 7373 6761 3a65 2520 0073 575b     e Message: %s.[W
   df59c:	5241 5d4e 5820 6542 2065 654d 7373 6761     ARN] XBee Messag
   df5ac:	7365 6820 7661 2065 6f6e 2074 6562 6e65     es have not been
   df5bc:	7220 6365 6965 6576 2064 6e69 2520 7364      received in %ds
   df5cc:	202c 7361 7573 696d 676e 5820 6542 2065     , assuming XBee 
   df5dc:	7369 7520 616e 6176 6c69 6261 656c 5b00     is unavailable.[
   df5ec:	4157 4e52 205d 4c42 2045 654d 7373 6761     WARN] BLE Messag
   df5fc:	7365 6820 7661 2065 6f6e 2074 6562 6e65     es have not been
   df60c:	7220 6365 6965 6576 2064 6e69 2520 7364      received in %ds
   df61c:	202c 7361 7573 696d 676e 4220 454c 6920     , assuming BLE i
   df62c:	2073 6e75 7661 6961 616c 6c62 0065 4870     s unavailable.pH
   df63c:	203a 6625 4d00 6e69 4369 6e6f 3a64 2520     : %f.MiniCond: %
   df64c:	0066 6f43 646e 6375 6974 6976 7974 203a     f.Conductivity: 
   df65c:	6625 5400 6d65 6570 6172 7574 6572 203a     %f.Temperature: 
   df66c:	6625 2500 3230 2564 3230 2564 3430 2564     %f.%02d%02d%04d%
   df67c:	3230 2564 3230 2564 3230 0064 7325 252c     02d%02d%02d.%s,%
   df68c:	2c66 6625 252c 2c66 6625 252c 2c66 6625     f,%f,%f,%f,%f,%f
   df69c:	252c 0066 5457 324e 5f33 6f42 0074 6157     ,%f.WTN23_Bot.Wa
   df6ac:	6574 4272 746f 5f00 4f4c 2e47 7874 0074     terBot._LOG.txt.
   df6bc:	7245 6f72 3a72 6320 756f 646c 6e20 746f     Error: could not
   df6cc:	6320 6e6f 656e 7463 7420 206f 4453 6320      connect to SD c
   df6dc:	7261 2164 5400 6d69 2c65 614c 6974 7574     ard!.Time,Latitu
   df6ec:	6564 4c2c 6e6f 6967 7574 6564 542c 6d65     de,Longitude,Tem
   df6fc:	6570 6172 7574 6572 702c 2c48 6944 7373     perature,pH,Diss
   df70c:	6c6f 6576 2064 324f 432c 6e6f 7564 7463     olved O2,Conduct
   df71c:	7669 7469 2079 2e30 4b31 432c 6e6f 7564     ivity 0.1K,Condu
   df72c:	7463 7669 7469 2079 4b31 5b00 4e49 4f46     ctivity 1K.[INFO
   df73c:	205d 6157 6574 4272 746f 2520 3a64 5320     ] WaterBot %d: S
   df74c:	6174 7472 6465 4c20 676f 6967 676e 0021     tarted Logging!.
   df75c:	7874 7200 0078 666f 0066 3462 3032 3936     tx.rx.off.b42069
   df76c:	3431 642d 3463 2d62 3735 3334 632d 6238     14-dc4b-5743-c8b
   df77c:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   df78c:	3234 3630 3139 2d33 6364 6234 352d 3437     4206913-dc4b-574
   df79c:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   df7ac:	6232 0030 3462 3032 3936 3231 642d 3463     2b0.b4206912-dc4
   df7bc:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   df7cc:	3765 3135 3238 3062 6200 3234 3630 3139     e75182b0.b420691
   df7dc:	2d30 6364 6234 352d 3437 2d33 3863 3162     0-dc4b-5743-c8b1
   df7ec:	392d 6432 6530 3537 3831 6232 0030 0a0d     -92d0e75182b0...
   df7fc:	4700 4147 5200 434d 0000 0000               .GGA.RMC....

000df808 <_ZTVN5spark13EthernetClassE>:
	...
   df810:	830f 000d 8305 000d 82fb 000d 82f1 000d     ................
   df820:	82e5 000d 82d9 000d 82cd 000d 82c5 000d     ................
   df830:	82bb 000d 82b1 000d b939 000d               ........9...

000df83c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   df83c:	0800 1810 2820 3830                         .... (08

000df844 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   df84c:	877d 000d 8783 000d 94c1 000d 87ad 000d     }...............
   df85c:	877f 000d                                   ....

000df860 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   df868:	8777 000d 8791 000d 9621 000d 87b1 000d     w.......!.......
   df878:	8779 000d                                   y...

000df87c <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   df884:	8771 000d 879f 000d 8f7f 000d 87b5 000d     q...............
   df894:	8773 000d                                   s...

000df898 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   df898:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   df8a8:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   df8b8:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   df8c8:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   df8d8:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   df8e8:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   df8f8:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   df908:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   df918:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   df928:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   df938:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   df948:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   df958:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   df968:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   df978:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   df988:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   df998:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   df9a8:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   df9b8:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   df9c8:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   df9d8:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   df9e8:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   df9f8:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   dfa08:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   dfa18:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   dfa28:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   dfa38:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..

000dfa48 <_ZN8particle7BleUuid9BASE_UUIDE>:
   dfa48:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000dfa58 <_ZTVN5spark16JSONStreamWriterE>:
	...
   dfa60:	9ac7 000d 9aed 000d 9aa1 000d ba47 000d     ............G...

000dfa70 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dfa78:	9f45 000d 9f59 000d a8a1 000d 9aa9 000d     E...Y...........
   dfa88:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   dfa98:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   dfaa8:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   dfab8:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   dfac8:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   dfad8:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   dfae8:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   dfaf8:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   dfb08:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   dfb18:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   dfb28:	0020 6e6c 6600 006e 6f63 6564 6400 7465      .ln.fn.code.det
   dfb38:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   dfb48:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   dfb58:	6e61 6369 6100 6c6c 0000 0000               anic.all....

000dfb64 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dfb6c:	9f19 000d 9f31 000d a6ed 000d 40cf 000d     ....1........@..

000dfb7c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dfb84:	9ac5 000d 9afb 000d a615 000d 9aab 000d     ................

000dfb94 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dfb9c:	9ac3 000d 9b09 000d 9e5d 000d 9b17 000d     ........].......
   dfbac:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
   dfbbc:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
   dfbcc:	6373 6974 656d 0000                         sctime..

000dfbd4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dfbdc:	ace5 000d aceb 000d ad2f 000d acf9 000d     ......../.......
   dfbec:	ace7 000d                                   ....

000dfbf0 <_ZTV9IPAddress>:
	...
   dfbf8:	b27d 000d b26d 000d b26f 000d               }...m...o...

000dfc04 <_ZTV9USBSerial>:
	...
   dfc0c:	b355 000d b3a5 000d b3b3 000d 98f9 000d     U...............
   dfc1c:	b391 000d b357 000d b36d 000d b39f 000d     ....W...m.......
   dfc2c:	b383 000d b351 000d                         ....Q...

000dfc34 <_ZTVN5spark13CellularClassE>:
	...
   dfc3c:	b4c7 000d b4bd 000d b4b3 000d b469 000d     ............i...
   dfc4c:	b4a7 000d b49b 000d b48f 000d b487 000d     ................
   dfc5c:	b47d 000d b473 000d b939 000d               }...s...9...

000dfc68 <_ZTV11USARTSerial>:
	...
   dfc70:	b501 000d b551 000d b55f 000d 98f9 000d     ....Q..._.......
   dfc80:	b515 000d b537 000d b523 000d b54b 000d     ....7...#...K...
   dfc90:	b503 000d b507 000d                         ........

000dfc98 <_ZTV7TwoWire>:
	...
   dfca0:	b641 000d b68b 000d b663 000d b643 000d     A.......c...C...
   dfcb0:	b66b 000d b673 000d b67b 000d b683 000d     k...s...{.......

000dfcc0 <_ZTVN5spark9MeshClassE>:
	...
   dfcc8:	b7b5 000d b7ab 000d b7a1 000d b797 000d     ................
   dfcd8:	b78b 000d b77f 000d b773 000d b76b 000d     ........s...k...
   dfce8:	b761 000d b757 000d b939 000d               a...W...9...

000dfcf4 <_ZTVN5spark12NetworkClassE>:
	...
   dfcfc:	b8d1 000d b8db 000d b8e5 000d b8ef 000d     ................
   dfd0c:	b8f9 000d b905 000d b911 000d b91d 000d     ................
   dfd1c:	b925 000d b92f 000d b939 000d 2e30 0030     %.../...9...0.0.
   dfd2c:	6166 736c 0065 7274 6575 2500 0075 2e25     false.true.%u.%.
   dfd3c:	6c2a 0066 6725 6e00 6c75 006c 2575 3430     *lf.%g.null.u%04
   dfd4c:	0078                                        x.

000dfd4e <_ZSt7nothrow>:
	...

000dfd4f <_ctype_>:
   dfd4f:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dfd5f:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dfd6f:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dfd7f:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dfd8f:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dfd9f:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dfdaf:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dfdbf:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dfdcf:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dfe50 <__sf_fake_stdin>:
	...

000dfe70 <__sf_fake_stdout>:
	...

000dfe90 <__sf_fake_stderr>:
	...
   dfeb0:	4f50 4953 0058 0000                         POSIX...

000dfeb8 <__month_lengths>:
   dfeb8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dfec8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dfed8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dfee8:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dfef8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dff08:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000dff18 <fpi.5344>:
   dff18:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dff28:	0000 0000                                   ....

000dff2c <fpinan.5380>:
   dff2c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dff3c:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   dff4c:	0000 0000                                   ....

000dff50 <tinytens>:
   dff50:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dff60:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dff70:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   dff80:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   dff90:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   dffa0:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   dffb0:	2575 006e 0000 0000                         u%n.....

000dffb8 <__mprec_tens>:
   dffb8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dffc8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dffd8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dffe8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dfff8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e0008:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e0018:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e0028:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e0038:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e0048:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e0058:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e0068:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e0078:	9db4 79d9 7843 44ea                         ...yCx.D

000e0080 <__mprec_bigtens>:
   e0080:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e0090:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e00a0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e00a8 <p05.5387>:
   e00a8:	0005 0000 0019 0000 007d 0000               ........}...

000e00b4 <link_const_variable_data_end>:
   e00b4:	000d56ad 	.word	0x000d56ad
   e00b8:	000d5fa9 	.word	0x000d5fa9
   e00bc:	000d5fad 	.word	0x000d5fad
   e00c0:	000d5fb1 	.word	0x000d5fb1
   e00c4:	000d66f9 	.word	0x000d66f9
   e00c8:	000d66fd 	.word	0x000d66fd
   e00cc:	000d6701 	.word	0x000d6701
   e00d0:	000d6733 	.word	0x000d6733
   e00d4:	000d6ed1 	.word	0x000d6ed1
   e00d8:	000d6ef5 	.word	0x000d6ef5
   e00dc:	000d6ef9 	.word	0x000d6ef9
   e00e0:	000d721d 	.word	0x000d721d
   e00e4:	000d7221 	.word	0x000d7221
   e00e8:	000d7225 	.word	0x000d7225
   e00ec:	000d775f 	.word	0x000d775f
   e00f0:	000d7763 	.word	0x000d7763
   e00f4:	000d7767 	.word	0x000d7767
   e00f8:	000d780d 	.word	0x000d780d
   e00fc:	000d7aeb 	.word	0x000d7aeb
   e0100:	000d8319 	.word	0x000d8319
   e0104:	000d85b5 	.word	0x000d85b5
   e0108:	000d98d1 	.word	0x000d98d1
   e010c:	000da6dd 	.word	0x000da6dd
   e0110:	000dab71 	.word	0x000dab71
   e0114:	000dabb9 	.word	0x000dabb9
   e0118:	000db4d1 	.word	0x000db4d1
   e011c:	000db881 	.word	0x000db881
   e0120:	000dba05 	.word	0x000dba05
   e0124:	000dbf2d 	.word	0x000dbf2d
   e0128:	000dbfb1 	.word	0x000dbfb1
   e012c:	000dc075 	.word	0x000dc075
   e0130:	000dc139 	.word	0x000dc139

000e0134 <link_constructors_end>:
	...
