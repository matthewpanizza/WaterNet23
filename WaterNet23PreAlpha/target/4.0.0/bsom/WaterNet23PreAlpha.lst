
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23PreAlpha/target/4.0.0/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000141a0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c81c0  000c81c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c81e4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001fc  2003db6c  000c81e8  0002db6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a88  2003dd68  2003dd68  0003dd68  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c83e4  000c83e4  000383e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c840c  000c840c  0003840c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022d8a4  00000000  00000000  00038410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f3f  00000000  00000000  00265cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00070e7c  00000000  00000000  00286bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f78  00000000  00000000  002f7a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000114e8  00000000  00000000  002fc9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004f62a  00000000  00000000  0030decf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000866db  00000000  00000000  0035d4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015bff1  00000000  00000000  003e3bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000fd28  00000000  00000000  0053fbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00f fea5 	bl	c3d80 <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00f fec7 	bl	c3dd0 <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db6c 	.word	0x2003db6c
   b404c:	000c81e8 	.word	0x000c81e8
   b4050:	2003dd68 	.word	0x2003dd68
   b4054:	2003dd68 	.word	0x2003dd68
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f00c fbfb 	bl	c085c <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c8194 	.word	0x000c8194
   b4080:	000c81b8 	.word	0x000c81b8

000b4084 <module_user_setup>:
   b4084:	f001 be4e 	b.w	b5d24 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f001 fdcf 	bl	b5c2c <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f00c bb9b 	b.w	c07cc <_post_loop>

000b4096 <_Znwj>:
   b4096:	f009 bd5f 	b.w	bdb58 <malloc>

000b409a <_Znaj>:
   b409a:	f009 bd5d 	b.w	bdb58 <malloc>

000b409e <_ZdaPv>:
   b409e:	f009 bd63 	b.w	bdb68 <free>

000b40a2 <_ZdlPvj>:
   b40a2:	f009 bd61 	b.w	bdb68 <free>
	...

000b40a8 <__cxa_pure_virtual>:
   b40a8:	b508      	push	{r3, lr}
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f009 fc4c 	bl	bd94c <panic_>
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bd469 	.word	0x000bd469
   b40bc:	000c5f30 	.word	0x000c5f30

000b40c0 <__cxa_guard_acquire>:
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f8:	4770      	bx	lr
	...

000b40fc <_Z13StatusHandlerv>:
        memcpy(txBuf_tmp,dataOut,strlen(dataOut));
        bledbgCharacteristic.setValue(txBuf_tmp, strlen(dataOut));
    #endif
}

void StatusHandler(){
   b40fc:	b508      	push	{r3, lr}
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   b40fe:	4b13      	ldr	r3, [pc, #76]	; (b414c <_Z13StatusHandlerv+0x50>)
   b4100:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b4102:	4b13      	ldr	r3, [pc, #76]	; (b4150 <_Z13StatusHandlerv+0x54>)
   b4104:	781b      	ldrb	r3, [r3, #0]
   b4106:	009b      	lsls	r3, r3, #2
   b4108:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    statusFlags = LTEAvail;
   b410c:	4a11      	ldr	r2, [pc, #68]	; (b4154 <_Z13StatusHandlerv+0x58>)
    statusFlags |= BLEAvail << 2;
   b410e:	7812      	ldrb	r2, [r2, #0]
   b4110:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;
   b4112:	4a11      	ldr	r2, [pc, #68]	; (b4158 <_Z13StatusHandlerv+0x5c>)
   b4114:	7812      	ldrb	r2, [r2, #0]
   b4116:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;
   b411a:	4a10      	ldr	r2, [pc, #64]	; (b415c <_Z13StatusHandlerv+0x60>)
   b411c:	7812      	ldrb	r2, [r2, #0]
   b411e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;
   b4122:	4a0f      	ldr	r2, [pc, #60]	; (b4160 <_Z13StatusHandlerv+0x64>)
   b4124:	7812      	ldrb	r2, [r2, #0]
   b4126:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;
   b412a:	4a0e      	ldr	r2, [pc, #56]	; (b4164 <_Z13StatusHandlerv+0x68>)
   b412c:	7812      	ldrb	r2, [r2, #0]
   b412e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   b4132:	4a0d      	ldr	r2, [pc, #52]	; (b4168 <_Z13StatusHandlerv+0x6c>)
   b4134:	7013      	strb	r3, [r2, #0]
    statusReady = true;
   b4136:	4b0d      	ldr	r3, [pc, #52]	; (b416c <_Z13StatusHandlerv+0x70>)
   b4138:	2201      	movs	r2, #1
   b413a:	701a      	strb	r2, [r3, #0]
    Serial.println("Sending a status update!");
   b413c:	f00c ff32 	bl	c0fa4 <_Z16_fetch_usbserialv>
}
   b4140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Sending a status update!");
   b4144:	490a      	ldr	r1, [pc, #40]	; (b4170 <_Z13StatusHandlerv+0x74>)
   b4146:	f00b ba2a 	b.w	bf59e <_ZN5Print7printlnEPKc>
   b414a:	bf00      	nop
   b414c:	2003ddb4 	.word	0x2003ddb4
   b4150:	2003dd74 	.word	0x2003dd74
   b4154:	2003dda4 	.word	0x2003dda4
   b4158:	2003e0e0 	.word	0x2003e0e0
   b415c:	2003dde9 	.word	0x2003dde9
   b4160:	2003df0c 	.word	0x2003df0c
   b4164:	2003df05 	.word	0x2003df05
   b4168:	2003e5ac 	.word	0x2003e5ac
   b416c:	2003e5cc 	.word	0x2003e5cc
   b4170:	000c5f45 	.word	0x000c5f45

000b4174 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4174:	b510      	push	{r4, lr}
  }
   b4176:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4178:	4604      	mov	r4, r0
  }
   b417a:	f7ff ff92 	bl	b40a2 <_ZdlPvj>
   b417e:	4620      	mov	r0, r4
   b4180:	bd10      	pop	{r4, pc}

000b4182 <_ZN4FileD0Ev>:
   b4182:	b510      	push	{r4, lr}
   b4184:	2134      	movs	r1, #52	; 0x34
   b4186:	4604      	mov	r4, r0
   b4188:	f7ff ff8b 	bl	b40a2 <_ZdlPvj>
   b418c:	4620      	mov	r0, r4
   b418e:	bd10      	pop	{r4, pc}

000b4190 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4190:	3010      	adds	r0, #16
   b4192:	f003 b835 	b.w	b7200 <_ZN7FatFile5writeEPKvj>

000b4196 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4196:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4198:	2201      	movs	r2, #1
   b419a:	f88d 1007 	strb.w	r1, [sp, #7]
   b419e:	3010      	adds	r0, #16
   b41a0:	f10d 0107 	add.w	r1, sp, #7
   b41a4:	f003 f82c 	bl	b7200 <_ZN7FatFile5writeEPKvj>
  }
   b41a8:	b003      	add	sp, #12
   b41aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b41ae <_ZN4File5flushEv>:
    FatFile::sync();
   b41ae:	3010      	adds	r0, #16
   b41b0:	f002 bf9c 	b.w	b70ec <_ZN7FatFile4syncEv>

000b41b4 <_ZN4File4peekEv>:
    return FatFile::peek();
   b41b4:	3010      	adds	r0, #16
   b41b6:	f002 be7d 	b.w	b6eb4 <_ZN7FatFile4peekEv>

000b41ba <_ZN4File4readEv>:
  int read() {
   b41ba:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b41bc:	2201      	movs	r2, #1
   b41be:	f10d 0107 	add.w	r1, sp, #7
   b41c2:	3010      	adds	r0, #16
   b41c4:	f002 fdc8 	bl	b6d58 <_ZN7FatFile4readEPvj>
   b41c8:	2801      	cmp	r0, #1
   b41ca:	bf0c      	ite	eq
   b41cc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b41d0:	f04f 30ff 	movne.w	r0, #4294967295
  }
   b41d4:	b003      	add	sp, #12
   b41d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b41da <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b41da:	6943      	ldr	r3, [r0, #20]
   b41dc:	b113      	cbz	r3, b41e4 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41de:	6983      	ldr	r3, [r0, #24]
   b41e0:	300c      	adds	r0, #12
   b41e2:	4718      	bx	r3
            callback();
        }
    }
   b41e4:	4770      	bx	lr

000b41e6 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41e6:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41e8:	2100      	movs	r1, #0
   b41ea:	4604      	mov	r4, r0
   b41ec:	4608      	mov	r0, r1
   b41ee:	f009 f9ed 	bl	bd5cc <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41f2:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b41f4:	4620      	mov	r0, r4
   b41f6:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b41f8:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b41fa:	f009 f9ff 	bl	bd5fc <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41fe:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4200:	b10c      	cbz	r4, b4206 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4202:	2301      	movs	r3, #1
   b4204:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4206:	2100      	movs	r1, #0
   b4208:	2001      	movs	r0, #1
   b420a:	f009 f9df 	bl	bd5cc <os_thread_scheduling>
            }
        }
        if (t) {
   b420e:	b12c      	cbz	r4, b421c <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4210:	6823      	ldr	r3, [r4, #0]
   b4212:	4620      	mov	r0, r4
   b4214:	689b      	ldr	r3, [r3, #8]
   b4216:	4798      	blx	r3
            t->running = false;
   b4218:	2300      	movs	r3, #0
   b421a:	7123      	strb	r3, [r4, #4]
        }
    }
   b421c:	b002      	add	sp, #8
   b421e:	bd10      	pop	{r4, pc}

000b4220 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4220:	2a01      	cmp	r2, #1
   b4222:	d102      	bne.n	b422a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4224:	6001      	str	r1, [r0, #0]
      }
   b4226:	2000      	movs	r0, #0
   b4228:	4770      	bx	lr
	  switch (__op)
   b422a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b422c:	bf04      	itt	eq
   b422e:	680b      	ldreq	r3, [r1, #0]
   b4230:	6003      	streq	r3, [r0, #0]
	      break;
   b4232:	e7f8      	b.n	b4226 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4234 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4234:	6803      	ldr	r3, [r0, #0]
   b4236:	4718      	bx	r3

000b4238 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4238:	6803      	ldr	r3, [r0, #0]
   b423a:	b2c9      	uxtb	r1, r1
   b423c:	689b      	ldr	r3, [r3, #8]
   b423e:	4718      	bx	r3

000b4240 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4240:	b510      	push	{r4, lr}
   b4242:	4b05      	ldr	r3, [pc, #20]	; (b4258 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b4244:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b4246:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4248:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b424a:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b424e:	f009 fb9d 	bl	bd98c <led_set_status_active>
}
   b4252:	4620      	mov	r0, r4
   b4254:	bd10      	pop	{r4, pc}
   b4256:	bf00      	nop
   b4258:	000c6538 	.word	0x000c6538

000b425c <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b425c:	b510      	push	{r4, lr}
   b425e:	4604      	mov	r4, r0
}
   b4260:	f7ff ffee 	bl	b4240 <_ZN8particle9LEDStatusD1Ev>
   b4264:	4620      	mov	r0, r4
   b4266:	2120      	movs	r1, #32
   b4268:	f7ff ff1b 	bl	b40a2 <_ZdlPvj>
   b426c:	4620      	mov	r0, r4
   b426e:	bd10      	pop	{r4, pc}

000b4270 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4270:	4b0a      	ldr	r3, [pc, #40]	; (b429c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4272:	b510      	push	{r4, lr}
   b4274:	4604      	mov	r4, r0
   b4276:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4278:	f00b fb8e 	bl	bf998 <_ZN5spark10LogManager8instanceEv>
   b427c:	4621      	mov	r1, r4
   b427e:	f00b fdc6 	bl	bfe0e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4282:	f00c fe8f 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b4286:	f00c fe81 	bl	c0f8c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b428a:	4620      	mov	r0, r4
   b428c:	4b04      	ldr	r3, [pc, #16]	; (b42a0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b428e:	f840 3b04 	str.w	r3, [r0], #4
   b4292:	f00b fc57 	bl	bfb44 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4296:	4620      	mov	r0, r4
   b4298:	bd10      	pop	{r4, pc}
   b429a:	bf00      	nop
   b429c:	000c654c 	.word	0x000c654c
   b42a0:	000c6520 	.word	0x000c6520

000b42a4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42a4:	b510      	push	{r4, lr}
   b42a6:	4604      	mov	r4, r0
    }
   b42a8:	f7ff ffe2 	bl	b4270 <_ZN5spark16SerialLogHandlerD1Ev>
   b42ac:	4620      	mov	r0, r4
   b42ae:	2124      	movs	r1, #36	; 0x24
   b42b0:	f7ff fef7 	bl	b40a2 <_ZdlPvj>
   b42b4:	4620      	mov	r0, r4
   b42b6:	bd10      	pop	{r4, pc}

000b42b8 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42ba:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42bc:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42be:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42c0:	b130      	cbz	r0, b42d0 <_ZN5Timer5startEj.isra.0+0x18>
   b42c2:	2300      	movs	r3, #0
   b42c4:	e9cd 3300 	strd	r3, r3, [sp]
   b42c8:	461a      	mov	r2, r3
   b42ca:	2102      	movs	r1, #2
   b42cc:	f009 f99e 	bl	bd60c <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42d0:	68a0      	ldr	r0, [r4, #8]
   b42d2:	b130      	cbz	r0, b42e2 <_ZN5Timer5startEj.isra.0+0x2a>
   b42d4:	2300      	movs	r3, #0
   b42d6:	e9cd 5300 	strd	r5, r3, [sp]
   b42da:	461a      	mov	r2, r3
   b42dc:	4619      	mov	r1, r3
   b42de:	f009 f995 	bl	bd60c <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42e2:	b003      	add	sp, #12
   b42e4:	bd30      	pop	{r4, r5, pc}

000b42e6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42e6:	b40e      	push	{r1, r2, r3}
   b42e8:	b503      	push	{r0, r1, lr}
   b42ea:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42ec:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42ee:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42f2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42f4:	f00b f97d 	bl	bf5f2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42f8:	b002      	add	sp, #8
   b42fa:	f85d eb04 	ldr.w	lr, [sp], #4
   b42fe:	b003      	add	sp, #12
   b4300:	4770      	bx	lr
	...

000b4304 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4304:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4306:	4604      	mov	r4, r0
   b4308:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b430a:	7922      	ldrb	r2, [r4, #4]
   b430c:	68a3      	ldr	r3, [r4, #8]
   b430e:	b132      	cbz	r2, b431e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4310:	b9a3      	cbnz	r3, b433c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4312:	490b      	ldr	r1, [pc, #44]	; (b4340 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4314:	b002      	add	sp, #8
   b4316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b431a:	f00b b929 	b.w	bf570 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b431e:	4a09      	ldr	r2, [pc, #36]	; (b4344 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4320:	7b26      	ldrb	r6, [r4, #12]
   b4322:	4d09      	ldr	r5, [pc, #36]	; (b4348 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4324:	4909      	ldr	r1, [pc, #36]	; (b434c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4326:	7b64      	ldrb	r4, [r4, #13]
   b4328:	2e01      	cmp	r6, #1
   b432a:	bf18      	it	ne
   b432c:	4629      	movne	r1, r5
   b432e:	e9cd 1400 	strd	r1, r4, [sp]
   b4332:	4907      	ldr	r1, [pc, #28]	; (b4350 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4334:	f7ff ffd7 	bl	b42e6 <_ZN5Print6printfEPKcz>
  }
   b4338:	b002      	add	sp, #8
   b433a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b433c:	4a05      	ldr	r2, [pc, #20]	; (b4354 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b433e:	e7ef      	b.n	b4320 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4340:	000c5f6f 	.word	0x000c5f6f
   b4344:	000c7628 	.word	0x000c7628
   b4348:	000c5f6b 	.word	0x000c5f6b
   b434c:	000c5f67 	.word	0x000c5f67
   b4350:	000c5f85 	.word	0x000c5f85
   b4354:	000c5f5e 	.word	0x000c5f5e

000b4358 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4358:	b40e      	push	{r1, r2, r3}
   b435a:	b503      	push	{r0, r1, lr}
   b435c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b435e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4360:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4364:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4366:	f00b f944 	bl	bf5f2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b436a:	b002      	add	sp, #8
   b436c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4370:	b003      	add	sp, #12
   b4372:	4770      	bx	lr

000b4374 <_Z13motionHandlerv>:
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
        logFile.close();
    }
}

void motionHandler(){
   b4374:	b510      	push	{r4, lr}
    if(driveMode == 0 && millis() - lastMtrTime > MTR_TIMEOUT){
   b4376:	4b11      	ldr	r3, [pc, #68]	; (b43bc <_Z13motionHandlerv+0x48>)
   b4378:	781b      	ldrb	r3, [r3, #0]
   b437a:	b9eb      	cbnz	r3, b43b8 <_Z13motionHandlerv+0x44>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b437c:	f009 f884 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   b4380:	4b0f      	ldr	r3, [pc, #60]	; (b43c0 <_Z13motionHandlerv+0x4c>)
   b4382:	681b      	ldr	r3, [r3, #0]
   b4384:	1ac0      	subs	r0, r0, r3
   b4386:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b438a:	d915      	bls.n	b43b8 <_Z13motionHandlerv+0x44>
        setLSpeed = 90;
   b438c:	4b0d      	ldr	r3, [pc, #52]	; (b43c4 <_Z13motionHandlerv+0x50>)
        setRSpeed = 90;
   b438e:	4c0e      	ldr	r4, [pc, #56]	; (b43c8 <_Z13motionHandlerv+0x54>)
        updateMotorControl = true;
        ESCL.write(setLSpeed);
   b4390:	480e      	ldr	r0, [pc, #56]	; (b43cc <_Z13motionHandlerv+0x58>)
        setLSpeed = 90;
   b4392:	215a      	movs	r1, #90	; 0x5a
   b4394:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4396:	4b0e      	ldr	r3, [pc, #56]	; (b43d0 <_Z13motionHandlerv+0x5c>)
        setRSpeed = 90;
   b4398:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b439a:	2201      	movs	r2, #1
   b439c:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b439e:	f009 fdc7 	bl	bdf30 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b43a2:	7821      	ldrb	r1, [r4, #0]
   b43a4:	480b      	ldr	r0, [pc, #44]	; (b43d4 <_Z13motionHandlerv+0x60>)
   b43a6:	f009 fdc3 	bl	bdf30 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, motor command has not been received in over %dms, cutting motors", MTR_TIMEOUT);
   b43aa:	f00c fdfb 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b43ae:	490a      	ldr	r1, [pc, #40]	; (b43d8 <_Z13motionHandlerv+0x64>)
   b43b0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b43b4:	f7ff ffd0 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    }
}
   b43b8:	bd10      	pop	{r4, pc}
   b43ba:	bf00      	nop
   b43bc:	2003dde9 	.word	0x2003dde9
   b43c0:	2003de28 	.word	0x2003de28
   b43c4:	2003e584 	.word	0x2003e584
   b43c8:	2003e585 	.word	0x2003e585
   b43cc:	2003dd84 	.word	0x2003dd84
   b43d0:	2003e5ec 	.word	0x2003e5ec
   b43d4:	2003dd94 	.word	0x2003dd94
   b43d8:	000c5fa2 	.word	0x000c5fa2

000b43dc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b43dc:	b510      	push	{r4, lr}
      if (_M_manager)
   b43de:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b43e0:	4604      	mov	r4, r0
      if (_M_manager)
   b43e2:	b113      	cbz	r3, b43ea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b43e4:	2203      	movs	r2, #3
   b43e6:	4601      	mov	r1, r0
   b43e8:	4798      	blx	r3
    }
   b43ea:	4620      	mov	r0, r4
   b43ec:	bd10      	pop	{r4, pc}
	...

000b43f0 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b43f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b43f2:	4b13      	ldr	r3, [pc, #76]	; (b4440 <_ZN5TimerD1Ev+0x50>)
   b43f4:	6003      	str	r3, [r0, #0]
   b43f6:	4604      	mov	r4, r0
        if (handle) {
   b43f8:	6880      	ldr	r0, [r0, #8]
   b43fa:	b1c8      	cbz	r0, b4430 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b43fc:	2500      	movs	r5, #0
   b43fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4402:	e9cd 3500 	strd	r3, r5, [sp]
   b4406:	2102      	movs	r1, #2
   b4408:	462b      	mov	r3, r5
   b440a:	462a      	mov	r2, r5
   b440c:	f009 f8fe 	bl	bd60c <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4410:	68a0      	ldr	r0, [r4, #8]
   b4412:	4629      	mov	r1, r5
   b4414:	f009 f922 	bl	bd65c <os_timer_set_id>
            while (running) {
   b4418:	7923      	ldrb	r3, [r4, #4]
   b441a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b441e:	b113      	cbz	r3, b4426 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4420:	f009 f8cc 	bl	bd5bc <os_thread_yield>
            while (running) {
   b4424:	e7f8      	b.n	b4418 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4426:	68a0      	ldr	r0, [r4, #8]
   b4428:	4629      	mov	r1, r5
   b442a:	f009 f8df 	bl	bd5ec <os_timer_destroy>
            handle = nullptr;
   b442e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4430:	f104 000c 	add.w	r0, r4, #12
   b4434:	f7ff ffd2 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    }
   b4438:	4620      	mov	r0, r4
   b443a:	b003      	add	sp, #12
   b443c:	bd30      	pop	{r4, r5, pc}
   b443e:	bf00      	nop
   b4440:	000c650c 	.word	0x000c650c

000b4444 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4444:	b510      	push	{r4, lr}
   b4446:	4604      	mov	r4, r0
    }
   b4448:	f7ff ffd2 	bl	b43f0 <_ZN5TimerD1Ev>
   b444c:	4620      	mov	r0, r4
   b444e:	211c      	movs	r1, #28
   b4450:	f7ff fe27 	bl	b40a2 <_ZdlPvj>
   b4454:	4620      	mov	r0, r4
   b4456:	bd10      	pop	{r4, pc}

000b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4458:	b5f0      	push	{r4, r5, r6, r7, lr}
   b445a:	468c      	mov	ip, r1
   b445c:	2500      	movs	r5, #0
   b445e:	4914      	ldr	r1, [pc, #80]	; (b44b0 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4460:	7105      	strb	r5, [r0, #4]
   b4462:	4604      	mov	r4, r0
   b4464:	6085      	str	r5, [r0, #8]
   b4466:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4468:	e892 0003 	ldmia.w	r2, {r0, r1}
   b446c:	b085      	sub	sp, #20
   b446e:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4470:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4474:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4478:	e896 0003 	ldmia.w	r6, {r0, r1}
   b447c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4480:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4484:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4488:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b448a:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b448c:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b448e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4490:	6095      	str	r5, [r2, #8]
   b4492:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4494:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4496:	e9cd 3500 	strd	r3, r5, [sp]
   b449a:	4a06      	ldr	r2, [pc, #24]	; (b44b4 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b449c:	4623      	mov	r3, r4
   b449e:	4661      	mov	r1, ip
   b44a0:	f104 0008 	add.w	r0, r4, #8
   b44a4:	f009 f89a 	bl	bd5dc <os_timer_create>
    }
   b44a8:	4620      	mov	r0, r4
   b44aa:	b005      	add	sp, #20
   b44ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b44ae:	bf00      	nop
   b44b0:	000c650c 	.word	0x000c650c
   b44b4:	000b41e7 	.word	0x000b41e7

000b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b44b8:	b510      	push	{r4, lr}
   b44ba:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b44bc:	2200      	movs	r2, #0
   b44be:	7c40      	ldrb	r0, [r0, #17]
   b44c0:	f009 fa9e 	bl	bda00 <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b44c4:	7c63      	ldrb	r3, [r4, #17]
   b44c6:	2b0f      	cmp	r3, #15
        d_.period = period;
   b44c8:	bf18      	it	ne
   b44ca:	8320      	strhne	r0, [r4, #24]
}
   b44cc:	bd10      	pop	{r4, pc}
	...

000b44d0 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   b44d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(signalLED){
   b44d2:	4b29      	ldr	r3, [pc, #164]	; (b4578 <_Z10LEDHandlerv+0xa8>)
   b44d4:	4d29      	ldr	r5, [pc, #164]	; (b457c <_Z10LEDHandlerv+0xac>)
   b44d6:	781b      	ldrb	r3, [r3, #0]
   b44d8:	b15b      	cbz	r3, b44f2 <_Z10LEDHandlerv+0x22>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44da:	7c6b      	ldrb	r3, [r5, #17]
   b44dc:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b44de:	bf1c      	itt	ne
   b44e0:	2302      	movne	r3, #2
   b44e2:	746b      	strbne	r3, [r5, #17]
    d_.color = color;
   b44e4:	4b26      	ldr	r3, [pc, #152]	; (b4580 <_Z10LEDHandlerv+0xb0>)
   b44e6:	616b      	str	r3, [r5, #20]
        return;
    }
    if(offloadMode){
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
   b44e8:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b44ea:	4824      	ldr	r0, [pc, #144]	; (b457c <_Z10LEDHandlerv+0xac>)
   b44ec:	f7ff ffe4 	bl	b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b44f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(offloadMode){
   b44f2:	4b24      	ldr	r3, [pc, #144]	; (b4584 <_Z10LEDHandlerv+0xb4>)
   b44f4:	781b      	ldrb	r3, [r3, #0]
   b44f6:	b133      	cbz	r3, b4506 <_Z10LEDHandlerv+0x36>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44f8:	7c6b      	ldrb	r3, [r5, #17]
   b44fa:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b44fc:	bf1c      	itt	ne
   b44fe:	2302      	movne	r3, #2
   b4500:	746b      	strbne	r3, [r5, #17]
    d_.color = color;
   b4502:	23ff      	movs	r3, #255	; 0xff
   b4504:	e7ef      	b.n	b44e6 <_Z10LEDHandlerv+0x16>
    if(lowBattery){
   b4506:	4b20      	ldr	r3, [pc, #128]	; (b4588 <_Z10LEDHandlerv+0xb8>)
   b4508:	781b      	ldrb	r3, [r3, #0]
   b450a:	2b00      	cmp	r3, #0
   b450c:	d12d      	bne.n	b456a <_Z10LEDHandlerv+0x9a>
    else if(logSensors){
   b450e:	4b1f      	ldr	r3, [pc, #124]	; (b458c <_Z10LEDHandlerv+0xbc>)
   b4510:	781b      	ldrb	r3, [r3, #0]
   b4512:	2b00      	cmp	r3, #0
   b4514:	d12c      	bne.n	b4570 <_Z10LEDHandlerv+0xa0>
    else if(driveMode == 0){
   b4516:	4b1e      	ldr	r3, [pc, #120]	; (b4590 <_Z10LEDHandlerv+0xc0>)
   b4518:	781b      	ldrb	r3, [r3, #0]
        SetSpeed = LED_SPEED_NORMAL;
   b451a:	2b00      	cmp	r3, #0
   b451c:	bf0b      	itete	eq
   b451e:	260a      	moveq	r6, #10
   b4520:	2614      	movne	r6, #20
   b4522:	2702      	moveq	r7, #2
   b4524:	2703      	movne	r7, #3
    statusMode |= XBeeAvail << 1;
   b4526:	4b1b      	ldr	r3, [pc, #108]	; (b4594 <_Z10LEDHandlerv+0xc4>)
   b4528:	781a      	ldrb	r2, [r3, #0]
    statusMode |= BLEAvail << 2;
   b452a:	4b1b      	ldr	r3, [pc, #108]	; (b4598 <_Z10LEDHandlerv+0xc8>)
   b452c:	781c      	ldrb	r4, [r3, #0]
    statusMode = LTEAvail;
   b452e:	4b1b      	ldr	r3, [pc, #108]	; (b459c <_Z10LEDHandlerv+0xcc>)
    statusMode |= BLEAvail << 2;
   b4530:	00a4      	lsls	r4, r4, #2
   b4532:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
   b4536:	781a      	ldrb	r2, [r3, #0]
   b4538:	4314      	orrs	r4, r2
   b453a:	b264      	sxtb	r4, r4
    Serial.printlnf("Status: %d",statusMode);
   b453c:	f00c fd32 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b4540:	4622      	mov	r2, r4
   b4542:	3c01      	subs	r4, #1
   b4544:	4916      	ldr	r1, [pc, #88]	; (b45a0 <_Z10LEDHandlerv+0xd0>)
   b4546:	b2e4      	uxtb	r4, r4
   b4548:	f7ff ff06 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    switch (statusMode){
   b454c:	2c06      	cmp	r4, #6
   b454e:	bf98      	it	ls
   b4550:	4b14      	ldrls	r3, [pc, #80]	; (b45a4 <_Z10LEDHandlerv+0xd4>)
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4552:	7c6a      	ldrb	r2, [r5, #17]
   b4554:	bf94      	ite	ls
   b4556:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   b455a:	f44f 037f 	movhi.w	r3, #16711680	; 0xff0000
   b455e:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4560:	bf18      	it	ne
   b4562:	746f      	strbne	r7, [r5, #17]
    status.setSpeed(SetSpeed);    
   b4564:	4631      	mov	r1, r6
    d_.color = color;
   b4566:	616b      	str	r3, [r5, #20]
   b4568:	e7bf      	b.n	b44ea <_Z10LEDHandlerv+0x1a>
        SetSpeed = LED_SPEED_NORMAL;
   b456a:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_BLINK;
   b456c:	2702      	movs	r7, #2
   b456e:	e7da      	b.n	b4526 <_Z10LEDHandlerv+0x56>
        SetSpeed = LED_SPEED_NORMAL;
   b4570:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_SOLID;
   b4572:	2701      	movs	r7, #1
   b4574:	e7d7      	b.n	b4526 <_Z10LEDHandlerv+0x56>
   b4576:	bf00      	nop
   b4578:	2003e586 	.word	0x2003e586
   b457c:	2003e58c 	.word	0x2003e58c
   b4580:	00ff6000 	.word	0x00ff6000
   b4584:	2003e0e0 	.word	0x2003e0e0
   b4588:	2003df0c 	.word	0x2003df0c
   b458c:	2003df05 	.word	0x2003df05
   b4590:	2003dde9 	.word	0x2003dde9
   b4594:	2003ddb4 	.word	0x2003ddb4
   b4598:	2003dd74 	.word	0x2003dd74
   b459c:	2003dda4 	.word	0x2003dda4
   b45a0:	000c5fec 	.word	0x000c5fec
   b45a4:	000c6640 	.word	0x000c6640

000b45a8 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b45a8:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b45aa:	460a      	mov	r2, r1
   b45ac:	4901      	ldr	r1, [pc, #4]	; (b45b4 <_ZN7FatFile4openEPKci+0xc>)
   b45ae:	6809      	ldr	r1, [r1, #0]
   b45b0:	f002 bdd9 	b.w	b7166 <_ZN7FatFile4openEPS_PKci>
   b45b4:	2003e610 	.word	0x2003e610

000b45b8 <_Z11wdogHandlerv>:
void wdogHandler(){
   b45b8:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b45ba:	f009 faa5 	bl	bdb08 <spark_cloud_flag_connected>
   b45be:	4c2b      	ldr	r4, [pc, #172]	; (b466c <_Z11wdogHandlerv+0xb4>)
    if(Particle.connected()) LTEAvail = true;
   b45c0:	b1e0      	cbz	r0, b45fc <_Z11wdogHandlerv+0x44>
   b45c2:	2301      	movs	r3, #1
        LTEAvail = false;
   b45c4:	7023      	strb	r3, [r4, #0]
   b45c6:	f008 ff5f 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){
   b45ca:	4b29      	ldr	r3, [pc, #164]	; (b4670 <_Z11wdogHandlerv+0xb8>)
   b45cc:	4c29      	ldr	r4, [pc, #164]	; (b4674 <_Z11wdogHandlerv+0xbc>)
   b45ce:	681b      	ldr	r3, [r3, #0]
   b45d0:	f247 5230 	movw	r2, #30000	; 0x7530
   b45d4:	1ac0      	subs	r0, r0, r3
   b45d6:	4290      	cmp	r0, r2
   b45d8:	d823      	bhi.n	b4622 <_Z11wdogHandlerv+0x6a>
   b45da:	b313      	cbz	r3, b4622 <_Z11wdogHandlerv+0x6a>
    else XBeeAvail = true;
   b45dc:	2301      	movs	r3, #1
        XBeeAvail = false;
   b45de:	7023      	strb	r3, [r4, #0]
   b45e0:	f008 ff52 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){
   b45e4:	4b24      	ldr	r3, [pc, #144]	; (b4678 <_Z11wdogHandlerv+0xc0>)
   b45e6:	4c25      	ldr	r4, [pc, #148]	; (b467c <_Z11wdogHandlerv+0xc4>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	f247 5230 	movw	r2, #30000	; 0x7530
   b45ee:	1ac0      	subs	r0, r0, r3
   b45f0:	4290      	cmp	r0, r2
   b45f2:	d828      	bhi.n	b4646 <_Z11wdogHandlerv+0x8e>
   b45f4:	b33b      	cbz	r3, b4646 <_Z11wdogHandlerv+0x8e>
    else BLEAvail = true;
   b45f6:	2301      	movs	r3, #1
        BLEAvail = false;
   b45f8:	7023      	strb	r3, [r4, #0]
}
   b45fa:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b45fc:	7823      	ldrb	r3, [r4, #0]
   b45fe:	2b00      	cmp	r3, #0
   b4600:	d0e1      	beq.n	b45c6 <_Z11wdogHandlerv+0xe>
    return m_attr;
   b4602:	481f      	ldr	r0, [pc, #124]	; (b4680 <_Z11wdogHandlerv+0xc8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4604:	7c03      	ldrb	r3, [r0, #16]
   b4606:	b92b      	cbnz	r3, b4614 <_Z11wdogHandlerv+0x5c>
   b4608:	491e      	ldr	r1, [pc, #120]	; (b4684 <_Z11wdogHandlerv+0xcc>)
   b460a:	f244 2202 	movw	r2, #16898	; 0x4202
   b460e:	3010      	adds	r0, #16
   b4610:	f7ff ffca 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4614:	491c      	ldr	r1, [pc, #112]	; (b4688 <_Z11wdogHandlerv+0xd0>)
   b4616:	481a      	ldr	r0, [pc, #104]	; (b4680 <_Z11wdogHandlerv+0xc8>)
   b4618:	221e      	movs	r2, #30
   b461a:	f7ff fe9d 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b461e:	2300      	movs	r3, #0
   b4620:	e7d0      	b.n	b45c4 <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b4622:	7823      	ldrb	r3, [r4, #0]
   b4624:	b16b      	cbz	r3, b4642 <_Z11wdogHandlerv+0x8a>
   b4626:	4816      	ldr	r0, [pc, #88]	; (b4680 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4628:	7c03      	ldrb	r3, [r0, #16]
   b462a:	b92b      	cbnz	r3, b4638 <_Z11wdogHandlerv+0x80>
   b462c:	4915      	ldr	r1, [pc, #84]	; (b4684 <_Z11wdogHandlerv+0xcc>)
   b462e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4632:	3010      	adds	r0, #16
   b4634:	f7ff ffb8 	bl	b45a8 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4638:	4913      	ldr	r1, [pc, #76]	; (b4688 <_Z11wdogHandlerv+0xd0>)
   b463a:	4811      	ldr	r0, [pc, #68]	; (b4680 <_Z11wdogHandlerv+0xc8>)
   b463c:	221e      	movs	r2, #30
   b463e:	f7ff fe8b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b4642:	2300      	movs	r3, #0
   b4644:	e7cb      	b.n	b45de <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b4646:	7822      	ldrb	r2, [r4, #0]
   b4648:	b172      	cbz	r2, b4668 <_Z11wdogHandlerv+0xb0>
   b464a:	b16b      	cbz	r3, b4668 <_Z11wdogHandlerv+0xb0>
   b464c:	480c      	ldr	r0, [pc, #48]	; (b4680 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b464e:	7c03      	ldrb	r3, [r0, #16]
   b4650:	b92b      	cbnz	r3, b465e <_Z11wdogHandlerv+0xa6>
   b4652:	490c      	ldr	r1, [pc, #48]	; (b4684 <_Z11wdogHandlerv+0xcc>)
   b4654:	f244 2202 	movw	r2, #16898	; 0x4202
   b4658:	3010      	adds	r0, #16
   b465a:	f7ff ffa5 	bl	b45a8 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b465e:	490b      	ldr	r1, [pc, #44]	; (b468c <_Z11wdogHandlerv+0xd4>)
   b4660:	4807      	ldr	r0, [pc, #28]	; (b4680 <_Z11wdogHandlerv+0xc8>)
   b4662:	221e      	movs	r2, #30
   b4664:	f7ff fe78 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b4668:	2300      	movs	r3, #0
   b466a:	e7c5      	b.n	b45f8 <_Z11wdogHandlerv+0x40>
   b466c:	2003dda4 	.word	0x2003dda4
   b4670:	2003ddb8 	.word	0x2003ddb8
   b4674:	2003ddb4 	.word	0x2003ddb4
   b4678:	2003dd80 	.word	0x2003dd80
   b467c:	2003dd74 	.word	0x2003dd74
   b4680:	2003deac 	.word	0x2003deac
   b4684:	2003de08 	.word	0x2003de08
   b4688:	000c5ff7 	.word	0x000c5ff7
   b468c:	000c6048 	.word	0x000c6048

000b4690 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4690:	b530      	push	{r4, r5, lr}
   b4692:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b4694:	4b1b      	ldr	r3, [pc, #108]	; (b4704 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b4696:	9300      	str	r3, [sp, #0]
   b4698:	7913      	ldrb	r3, [r2, #4]
   b469a:	f88d 3004 	strb.w	r3, [sp, #4]
   b469e:	6893      	ldr	r3, [r2, #8]
   b46a0:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b46a2:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b46a6:	8993      	ldrh	r3, [r2, #12]
   b46a8:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b46ac:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b46ae:	460a      	mov	r2, r1
   b46b0:	466b      	mov	r3, sp
   b46b2:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b46b6:	4628      	mov	r0, r5
   b46b8:	f003 f8de 	bl	b7878 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b46bc:	b910      	cbnz	r0, b46c4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b46be:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b46c0:	b005      	add	sp, #20
   b46c2:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b46c4:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b46c6:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b46ca:	4628      	mov	r0, r5
   b46cc:	f002 fd44 	bl	b7158 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b46d0:	2101      	movs	r1, #1
   b46d2:	4620      	mov	r0, r4
   b46d4:	f002 ff7a 	bl	b75cc <_ZN9FatVolume4initEh>
   b46d8:	4601      	mov	r1, r0
   b46da:	b168      	cbz	r0, b46f8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b46dc:	4621      	mov	r1, r4
   b46de:	4628      	mov	r0, r5
   b46e0:	f002 fb34 	bl	b6d4c <_ZN7FatFile8openRootEP9FatVolume>
   b46e4:	2800      	cmp	r0, #0
   b46e6:	d0ea      	beq.n	b46be <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b46e8:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b46ec:	f013 0f70 	tst.w	r3, #112	; 0x70
   b46f0:	d0e5      	beq.n	b46be <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b46f2:	4b05      	ldr	r3, [pc, #20]	; (b4708 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b46f4:	601d      	str	r5, [r3, #0]
    return true;
   b46f6:	e7e3      	b.n	b46c0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b46f8:	4620      	mov	r0, r4
   b46fa:	f002 ff67 	bl	b75cc <_ZN9FatVolume4initEh>
   b46fe:	2800      	cmp	r0, #0
   b4700:	d1ec      	bne.n	b46dc <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4702:	e7dc      	b.n	b46be <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4704:	000c64f8 	.word	0x000c64f8
   b4708:	2003e610 	.word	0x2003e610

000b470c <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4710:	b08a      	sub	sp, #40	; 0x28
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4712:	7883      	ldrb	r3, [r0, #2]
   b4714:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4716:	af04      	add	r7, sp, #16
   b4718:	4604      	mov	r4, r0
   b471a:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b471c:	d14c      	bne.n	b47b8 <_Z14processCommandPKchb+0xac>
   b471e:	78c3      	ldrb	r3, [r0, #3]
   b4720:	2b42      	cmp	r3, #66	; 0x42
   b4722:	d175      	bne.n	b4810 <_Z14processCommandPKchb+0x104>
        char dataStr[strlen(command)-8];
   b4724:	4620      	mov	r0, r4
   b4726:	f00f fbde 	bl	c3ee6 <strlen>
   b472a:	3801      	subs	r0, #1
   b472c:	f020 0007 	bic.w	r0, r0, #7
        }
   b4730:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];
   b4732:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4736:	4620      	mov	r0, r4
   b4738:	f00f fbd5 	bl	c3ee6 <strlen>
        char dataStr[strlen(command)-8];
   b473c:	ad04      	add	r5, sp, #16
        dataStr[strlen(command)-9] = '\0';
   b473e:	4428      	add	r0, r5
   b4740:	2600      	movs	r6, #0
   b4742:	f800 6c09 	strb.w	r6, [r0, #-9]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b4746:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b4748:	71fe      	strb	r6, [r7, #7]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b474a:	803e      	strh	r6, [r7, #0]
   b474c:	70be      	strb	r6, [r7, #2]
   b474e:	f00f fbca 	bl	c3ee6 <strlen>
   b4752:	4420      	add	r0, r4
   b4754:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4758:	703b      	strb	r3, [r7, #0]
   b475a:	4620      	mov	r0, r4
   b475c:	f00f fbc3 	bl	c3ee6 <strlen>
   b4760:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4762:	4631      	mov	r1, r6
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b4764:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4768:	707b      	strb	r3, [r7, #1]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b476a:	2210      	movs	r2, #16
   b476c:	4638      	mov	r0, r7
   b476e:	f010 fae3 	bl	c4d38 <strtol>
   b4772:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b4774:	fa5f f888 	uxtb.w	r8, r8
   b4778:	f00c fc14 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b477c:	4986      	ldr	r1, [pc, #536]	; (b4998 <_Z14processCommandPKchb+0x28c>)
   b477e:	4643      	mov	r3, r8
   b4780:	4642      	mov	r2, r8
   b4782:	f7ff fde9 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4786:	2604      	movs	r6, #4
   b4788:	4620      	mov	r0, r4
   b478a:	f00f fbac 	bl	c3ee6 <strlen>
   b478e:	3802      	subs	r0, #2
   b4790:	4286      	cmp	r6, r0
   b4792:	d216      	bcs.n	b47c2 <_Z14processCommandPKchb+0xb6>
            if(i < 7) cmdStr[i-4] = command[i];
   b4794:	2e06      	cmp	r6, #6
   b4796:	bf9b      	ittet	ls
   b4798:	f107 0318 	addls.w	r3, r7, #24
   b479c:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b479e:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b47a0:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b47a2:	bf8c      	ite	hi
   b47a4:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b47a6:	f803 2c18 	strbls.w	r2, [r3, #-24]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b47aa:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b47ae:	bf88      	it	hi
   b47b0:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b47b4:	b2f6      	uxtb	r6, r6
   b47b6:	e7e7      	b.n	b4788 <_Z14processCommandPKchb+0x7c>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b47b8:	2b42      	cmp	r3, #66	; 0x42
   b47ba:	d129      	bne.n	b4810 <_Z14processCommandPKchb+0x104>
   b47bc:	78c3      	ldrb	r3, [r0, #3]
   b47be:	2b31      	cmp	r3, #49	; 0x31
   b47c0:	e7af      	b.n	b4722 <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b47c2:	4540      	cmp	r0, r8
   b47c4:	d02e      	beq.n	b4824 <_Z14processCommandPKchb+0x118>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b47c6:	f00c fbed 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b47ca:	4605      	mov	r5, r0
   b47cc:	4620      	mov	r0, r4
   b47ce:	f00f fb8a 	bl	c3ee6 <strlen>
   b47d2:	1e82      	subs	r2, r0, #2
   b47d4:	4628      	mov	r0, r5
    return m_attr;
   b47d6:	4d71      	ldr	r5, [pc, #452]	; (b499c <_Z14processCommandPKchb+0x290>)
   b47d8:	4971      	ldr	r1, [pc, #452]	; (b49a0 <_Z14processCommandPKchb+0x294>)
   b47da:	4643      	mov	r3, r8
   b47dc:	f7ff fdbc 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b47e0:	7c2b      	ldrb	r3, [r5, #16]
   b47e2:	b9cb      	cbnz	r3, b4818 <_Z14processCommandPKchb+0x10c>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b47e4:	496f      	ldr	r1, [pc, #444]	; (b49a4 <_Z14processCommandPKchb+0x298>)
   b47e6:	f244 2202 	movw	r2, #16898	; 0x4202
   b47ea:	f105 0010 	add.w	r0, r5, #16
   b47ee:	f7ff fedb 	bl	b45a8 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b47f2:	496d      	ldr	r1, [pc, #436]	; (b49a8 <_Z14processCommandPKchb+0x29c>)
   b47f4:	4622      	mov	r2, r4
   b47f6:	4628      	mov	r0, r5
   b47f8:	f7ff fdae 	bl	b4358 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b47fc:	f105 0010 	add.w	r0, r5, #16
   b4800:	f002 fcaa 	bl	b7158 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b4804:	f00c fbce 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b4808:	4968      	ldr	r1, [pc, #416]	; (b49ac <_Z14processCommandPKchb+0x2a0>)
   b480a:	f00a fec8 	bl	bf59e <_ZN5Print7printlnEPKc>
            return;
   b480e:	46cd      	mov	sp, r9
}
   b4810:	3718      	adds	r7, #24
   b4812:	46bd      	mov	sp, r7
   b4814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4818:	4963      	ldr	r1, [pc, #396]	; (b49a8 <_Z14processCommandPKchb+0x29c>)
   b481a:	4622      	mov	r2, r4
   b481c:	4628      	mov	r0, r5
   b481e:	f7ff fd9b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b4822:	e7ef      	b.n	b4804 <_Z14processCommandPKchb+0xf8>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b4824:	4962      	ldr	r1, [pc, #392]	; (b49b0 <_Z14processCommandPKchb+0x2a4>)
   b4826:	1d38      	adds	r0, r7, #4
   b4828:	f00f fb2e 	bl	c3e88 <strcmp>
   b482c:	2800      	cmp	r0, #0
   b482e:	d0ee      	beq.n	b480e <_Z14processCommandPKchb+0x102>
        if(!strcmp(cmdStr,"ctl")){
   b4830:	4960      	ldr	r1, [pc, #384]	; (b49b4 <_Z14processCommandPKchb+0x2a8>)
   b4832:	1d38      	adds	r0, r7, #4
   b4834:	f00f fb28 	bl	c3e88 <strcmp>
   b4838:	b968      	cbnz	r0, b4856 <_Z14processCommandPKchb+0x14a>
            sscanf(dataStr,"%s %s %d %d %d",tLat,tLon,&driveMode,&logSensors,&signalLED);    //Target lat, target lon, drive mode, dataRecord, signal 
   b483a:	4b5f      	ldr	r3, [pc, #380]	; (b49b8 <_Z14processCommandPKchb+0x2ac>)
   b483c:	9302      	str	r3, [sp, #8]
   b483e:	4b5f      	ldr	r3, [pc, #380]	; (b49bc <_Z14processCommandPKchb+0x2b0>)
   b4840:	9301      	str	r3, [sp, #4]
   b4842:	4b5f      	ldr	r3, [pc, #380]	; (b49c0 <_Z14processCommandPKchb+0x2b4>)
   b4844:	9300      	str	r3, [sp, #0]
   b4846:	495f      	ldr	r1, [pc, #380]	; (b49c4 <_Z14processCommandPKchb+0x2b8>)
   b4848:	f107 0310 	add.w	r3, r7, #16
   b484c:	f107 0208 	add.w	r2, r7, #8
   b4850:	4628      	mov	r0, r5
   b4852:	f009 f9a1 	bl	bdb98 <sscanf>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b4856:	495c      	ldr	r1, [pc, #368]	; (b49c8 <_Z14processCommandPKchb+0x2bc>)
   b4858:	1d38      	adds	r0, r7, #4
   b485a:	f00f fb15 	bl	c3e88 <strcmp>
   b485e:	2800      	cmp	r0, #0
   b4860:	d13d      	bne.n	b48de <_Z14processCommandPKchb+0x1d2>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   b4862:	782b      	ldrb	r3, [r5, #0]
   b4864:	723b      	strb	r3, [r7, #8]
   b4866:	786b      	ldrb	r3, [r5, #1]
   b4868:	727b      	strb	r3, [r7, #9]
   b486a:	78ab      	ldrb	r3, [r5, #2]
   b486c:	72bb      	strb	r3, [r7, #10]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b486e:	78eb      	ldrb	r3, [r5, #3]
   b4870:	743b      	strb	r3, [r7, #16]
   b4872:	792b      	ldrb	r3, [r5, #4]
   b4874:	747b      	strb	r3, [r7, #17]
            setLSpeed = atoi(lSpd);
   b4876:	f107 0008 	add.w	r0, r7, #8
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b487a:	796b      	ldrb	r3, [r5, #5]
   b487c:	74bb      	strb	r3, [r7, #18]
            setLSpeed = atoi(lSpd);
   b487e:	f00f fa62 	bl	c3d46 <atoi>
   b4882:	4d52      	ldr	r5, [pc, #328]	; (b49cc <_Z14processCommandPKchb+0x2c0>)
            setRSpeed = atoi(rSpd);
   b4884:	4c52      	ldr	r4, [pc, #328]	; (b49d0 <_Z14processCommandPKchb+0x2c4>)
            setLSpeed = atoi(lSpd);
   b4886:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);
   b4888:	f107 0010 	add.w	r0, r7, #16
   b488c:	f00f fa5b 	bl	c3d46 <atoi>
   b4890:	7020      	strb	r0, [r4, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b4892:	f00c fb87 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b4896:	782a      	ldrb	r2, [r5, #0]
   b4898:	7823      	ldrb	r3, [r4, #0]
   b489a:	494e      	ldr	r1, [pc, #312]	; (b49d4 <_Z14processCommandPKchb+0x2c8>)
   b489c:	f7ff fd5c 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b48a0:	782b      	ldrb	r3, [r5, #0]
            ESCL.write(setLSpeed);
   b48a2:	484d      	ldr	r0, [pc, #308]	; (b49d8 <_Z14processCommandPKchb+0x2cc>)
            if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b48a4:	3b5b      	subs	r3, #91	; 0x5b
   b48a6:	2b20      	cmp	r3, #32
   b48a8:	bf9c      	itt	ls
   b48aa:	237b      	movls	r3, #123	; 0x7b
   b48ac:	702b      	strbls	r3, [r5, #0]
            if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b48ae:	7823      	ldrb	r3, [r4, #0]
            ESCL.write(setLSpeed);
   b48b0:	7829      	ldrb	r1, [r5, #0]
            if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b48b2:	3b5b      	subs	r3, #91	; 0x5b
   b48b4:	2b20      	cmp	r3, #32
   b48b6:	bf9c      	itt	ls
   b48b8:	237b      	movls	r3, #123	; 0x7b
   b48ba:	7023      	strbls	r3, [r4, #0]
            ESCL.write(setLSpeed);
   b48bc:	f009 fb38 	bl	bdf30 <_ZN5Servo5writeEi>
            ESCR.write(setRSpeed);
   b48c0:	7821      	ldrb	r1, [r4, #0]
   b48c2:	4846      	ldr	r0, [pc, #280]	; (b49dc <_Z14processCommandPKchb+0x2d0>)
   b48c4:	f009 fb34 	bl	bdf30 <_ZN5Servo5writeEi>
            updateMotorControl = true;
   b48c8:	4b45      	ldr	r3, [pc, #276]	; (b49e0 <_Z14processCommandPKchb+0x2d4>)
   b48ca:	2201      	movs	r2, #1
   b48cc:	701a      	strb	r2, [r3, #0]
   b48ce:	f008 fddb 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
            lastMtrTime = millis();
   b48d2:	4b44      	ldr	r3, [pc, #272]	; (b49e4 <_Z14processCommandPKchb+0x2d8>)
   b48d4:	6018      	str	r0, [r3, #0]
            driveMode = 0;
   b48d6:	4b3a      	ldr	r3, [pc, #232]	; (b49c0 <_Z14processCommandPKchb+0x2b4>)
   b48d8:	2200      	movs	r2, #0
   b48da:	701a      	strb	r2, [r3, #0]
   b48dc:	e797      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"req")){  //Data Request
   b48de:	4942      	ldr	r1, [pc, #264]	; (b49e8 <_Z14processCommandPKchb+0x2dc>)
   b48e0:	1d38      	adds	r0, r7, #4
   b48e2:	f00f fad1 	bl	c3e88 <strcmp>
   b48e6:	b918      	cbnz	r0, b48f0 <_Z14processCommandPKchb+0x1e4>
            requestActive = mode;
   b48e8:	4b40      	ldr	r3, [pc, #256]	; (b49ec <_Z14processCommandPKchb+0x2e0>)
   b48ea:	f883 a000 	strb.w	sl, [r3]
   b48ee:	e78e      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"pts")){
   b48f0:	493f      	ldr	r1, [pc, #252]	; (b49f0 <_Z14processCommandPKchb+0x2e4>)
   b48f2:	1d38      	adds	r0, r7, #4
   b48f4:	f00f fac8 	bl	c3e88 <strcmp>
   b48f8:	b9f0      	cbnz	r0, b4938 <_Z14processCommandPKchb+0x22c>
   b48fa:	4c28      	ldr	r4, [pc, #160]	; (b499c <_Z14processCommandPKchb+0x290>)
            Serial.println(dataStr);
   b48fc:	f00c fb52 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b4900:	4629      	mov	r1, r5
   b4902:	f00a fe4c 	bl	bf59e <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   b4906:	7c23      	ldrb	r3, [r4, #16]
   b4908:	b983      	cbnz	r3, b492c <_Z14processCommandPKchb+0x220>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b490a:	4926      	ldr	r1, [pc, #152]	; (b49a4 <_Z14processCommandPKchb+0x298>)
   b490c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4910:	f104 0010 	add.w	r0, r4, #16
   b4914:	f7ff fe48 	bl	b45a8 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4918:	4936      	ldr	r1, [pc, #216]	; (b49f4 <_Z14processCommandPKchb+0x2e8>)
   b491a:	462a      	mov	r2, r5
   b491c:	4620      	mov	r0, r4
   b491e:	f7ff fd1b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4922:	f104 0010 	add.w	r0, r4, #16
   b4926:	f002 fc17 	bl	b7158 <_ZN7FatFile5closeEv>
   b492a:	e770      	b.n	b480e <_Z14processCommandPKchb+0x102>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b492c:	4931      	ldr	r1, [pc, #196]	; (b49f4 <_Z14processCommandPKchb+0x2e8>)
   b492e:	462a      	mov	r2, r5
   b4930:	4620      	mov	r0, r4
   b4932:	f7ff fd11 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b4936:	e76a      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"spc")){  //Incoming communication status
   b4938:	492f      	ldr	r1, [pc, #188]	; (b49f8 <_Z14processCommandPKchb+0x2ec>)
   b493a:	1d38      	adds	r0, r7, #4
   b493c:	f00f faa4 	bl	c3e88 <strcmp>
   b4940:	b920      	cbnz	r0, b494c <_Z14processCommandPKchb+0x240>
   b4942:	f008 fda1 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();
   b4946:	4b2d      	ldr	r3, [pc, #180]	; (b49fc <_Z14processCommandPKchb+0x2f0>)
   b4948:	6018      	str	r0, [r3, #0]
   b494a:	e760      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"hwa")){
   b494c:	492c      	ldr	r1, [pc, #176]	; (b4a00 <_Z14processCommandPKchb+0x2f4>)
   b494e:	1d38      	adds	r0, r7, #4
   b4950:	f00f fa9a 	bl	c3e88 <strcmp>
   b4954:	b910      	cbnz	r0, b495c <_Z14processCommandPKchb+0x250>
            waitForConnection = false;
   b4956:	4b2b      	ldr	r3, [pc, #172]	; (b4a04 <_Z14processCommandPKchb+0x2f8>)
   b4958:	7018      	strb	r0, [r3, #0]
   b495a:	e758      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"aut")){  //Enter autonomous mode
   b495c:	492a      	ldr	r1, [pc, #168]	; (b4a08 <_Z14processCommandPKchb+0x2fc>)
   b495e:	1d38      	adds	r0, r7, #4
   b4960:	f00f fa92 	bl	c3e88 <strcmp>
   b4964:	2800      	cmp	r0, #0
   b4966:	f43f af52 	beq.w	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   b496a:	4928      	ldr	r1, [pc, #160]	; (b4a0c <_Z14processCommandPKchb+0x300>)
   b496c:	1d38      	adds	r0, r7, #4
   b496e:	f00f fa8b 	bl	c3e88 <strcmp>
   b4972:	2800      	cmp	r0, #0
   b4974:	f47f af4b 	bne.w	b480e <_Z14processCommandPKchb+0x102>
            offloadMode = true;
   b4978:	4b25      	ldr	r3, [pc, #148]	; (b4a10 <_Z14processCommandPKchb+0x304>)
            status.setSpeed(LED_SPEED_FAST);
   b497a:	4826      	ldr	r0, [pc, #152]	; (b4a14 <_Z14processCommandPKchb+0x308>)
            offloadMode = true;
   b497c:	2201      	movs	r2, #1
   b497e:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4980:	4b24      	ldr	r3, [pc, #144]	; (b4a14 <_Z14processCommandPKchb+0x308>)
   b4982:	7c5a      	ldrb	r2, [r3, #17]
   b4984:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4986:	bf1c      	itt	ne
   b4988:	2202      	movne	r2, #2
   b498a:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b498c:	211e      	movs	r1, #30
    d_.color = color;
   b498e:	22ff      	movs	r2, #255	; 0xff
   b4990:	615a      	str	r2, [r3, #20]
   b4992:	f7ff fd91 	bl	b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4996:	e73a      	b.n	b480e <_Z14processCommandPKchb+0x102>
   b4998:	000c6097 	.word	0x000c6097
   b499c:	2003deac 	.word	0x2003deac
   b49a0:	000c60ac 	.word	0x000c60ac
   b49a4:	2003de08 	.word	0x2003de08
   b49a8:	000c60c9 	.word	0x000c60c9
   b49ac:	000c60f5 	.word	0x000c60f5
   b49b0:	000c6116 	.word	0x000c6116
   b49b4:	000c611a 	.word	0x000c611a
   b49b8:	2003e586 	.word	0x2003e586
   b49bc:	2003df05 	.word	0x2003df05
   b49c0:	2003dde9 	.word	0x2003dde9
   b49c4:	000c611e 	.word	0x000c611e
   b49c8:	000c612d 	.word	0x000c612d
   b49cc:	2003e584 	.word	0x2003e584
   b49d0:	2003e585 	.word	0x2003e585
   b49d4:	000c6131 	.word	0x000c6131
   b49d8:	2003dd84 	.word	0x2003dd84
   b49dc:	2003dd94 	.word	0x2003dd94
   b49e0:	2003e5ec 	.word	0x2003e5ec
   b49e4:	2003de28 	.word	0x2003de28
   b49e8:	000c615d 	.word	0x000c615d
   b49ec:	2003e0e1 	.word	0x2003e0e1
   b49f0:	000c6161 	.word	0x000c6161
   b49f4:	000c6165 	.word	0x000c6165
   b49f8:	000c6188 	.word	0x000c6188
   b49fc:	2003de2c 	.word	0x2003de2c
   b4a00:	000c618c 	.word	0x000c618c
   b4a04:	2003e5ed 	.word	0x2003e5ed
   b4a08:	000c6190 	.word	0x000c6190
   b4a0c:	000c6194 	.word	0x000c6194
   b4a10:	2003e0e0 	.word	0x2003e0e0
   b4a14:	2003e58c 	.word	0x2003e58c

000b4a18 <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4a18:	b510      	push	{r4, lr}
   b4a1a:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4a1c:	2200      	movs	r2, #0
   b4a1e:	2104      	movs	r1, #4
   b4a20:	4620      	mov	r0, r4
   b4a22:	f7ff fe73 	bl	b470c <_Z14processCommandPKchb>
    if(logMessages){
   b4a26:	4b0b      	ldr	r3, [pc, #44]	; (b4a54 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4a28:	781b      	ldrb	r3, [r3, #0]
   b4a2a:	b193      	cbz	r3, b4a52 <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4a2c:	480a      	ldr	r0, [pc, #40]	; (b4a58 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4a2e:	7c03      	ldrb	r3, [r0, #16]
   b4a30:	b92b      	cbnz	r3, b4a3e <_Z13cmdLTEHandlerPKcS0_+0x26>
   b4a32:	490a      	ldr	r1, [pc, #40]	; (b4a5c <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b4a34:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a38:	3010      	adds	r0, #16
   b4a3a:	f7ff fdb5 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4a3e:	4622      	mov	r2, r4
   b4a40:	4907      	ldr	r1, [pc, #28]	; (b4a60 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b4a42:	4805      	ldr	r0, [pc, #20]	; (b4a58 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b4a44:	f7ff fc88 	bl	b4358 <_ZN5Print8printlnfEPKcz>
}
   b4a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4a4c:	4805      	ldr	r0, [pc, #20]	; (b4a64 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b4a4e:	f002 bb83 	b.w	b7158 <_ZN7FatFile5closeEv>
}
   b4a52:	bd10      	pop	{r4, pc}
   b4a54:	2003df04 	.word	0x2003df04
   b4a58:	2003deac 	.word	0x2003deac
   b4a5c:	2003de08 	.word	0x2003de08
   b4a60:	000c6198 	.word	0x000c6198
   b4a64:	2003debc 	.word	0x2003debc

000b4a68 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a68:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4a6a:	f101 0308 	add.w	r3, r1, #8
   b4a6e:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a72:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b4a74:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a78:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b4a7a:	460a      	mov	r2, r1
   b4a7c:	4601      	mov	r1, r0
   b4a7e:	4668      	mov	r0, sp
   b4a80:	f00f f97e 	bl	c3d80 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4a84:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b4a88:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4a8a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4a8e:	b113      	cbz	r3, b4a96 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4a90:	2300      	movs	r3, #0
   b4a92:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b4a96:	f00c fa85 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b4a9a:	4916      	ldr	r1, [pc, #88]	; (b4af4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4a9c:	f00a fd7f 	bl	bf59e <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   b4aa0:	f00c fa80 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b4aa4:	4629      	mov	r1, r5
   b4aa6:	f00a fd7a 	bl	bf59e <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b4aaa:	2201      	movs	r2, #1
   b4aac:	4611      	mov	r1, r2
   b4aae:	4628      	mov	r0, r5
   b4ab0:	f7ff fe2c 	bl	b470c <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   b4ab4:	782b      	ldrb	r3, [r5, #0]
   b4ab6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4aba:	2b41      	cmp	r3, #65	; 0x41
   b4abc:	d103      	bne.n	b4ac6 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b4abe:	f008 fce3 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   b4ac2:	4b0d      	ldr	r3, [pc, #52]	; (b4af8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b4ac4:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b4ac6:	4b0d      	ldr	r3, [pc, #52]	; (b4afc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b4ac8:	781b      	ldrb	r3, [r3, #0]
   b4aca:	b183      	cbz	r3, b4aee <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b4acc:	480c      	ldr	r0, [pc, #48]	; (b4b00 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4ace:	7c03      	ldrb	r3, [r0, #16]
   b4ad0:	b92b      	cbnz	r3, b4ade <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b4ad2:	490c      	ldr	r1, [pc, #48]	; (b4b04 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4ad4:	f244 2202 	movw	r2, #16898	; 0x4202
   b4ad8:	3010      	adds	r0, #16
   b4ada:	f7ff fd65 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4ade:	490a      	ldr	r1, [pc, #40]	; (b4b08 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4ae0:	4807      	ldr	r0, [pc, #28]	; (b4b00 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4ae2:	462a      	mov	r2, r5
   b4ae4:	f7ff fc38 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4ae8:	4808      	ldr	r0, [pc, #32]	; (b4b0c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4aea:	f002 fb35 	bl	b7158 <_ZN7FatFile5closeEv>
}
   b4aee:	46bd      	mov	sp, r7
   b4af0:	bdb0      	pop	{r4, r5, r7, pc}
   b4af2:	bf00      	nop
   b4af4:	000c61b8 	.word	0x000c61b8
   b4af8:	2003dd80 	.word	0x2003dd80
   b4afc:	2003df04 	.word	0x2003df04
   b4b00:	2003deac 	.word	0x2003deac
   b4b04:	2003de08 	.word	0x2003de08
   b4b08:	000c61c8 	.word	0x000c61c8
   b4b0c:	2003debc 	.word	0x2003debc

000b4b10 <_Z8setupLTEv>:
void setupLTE(){
   b4b10:	b513      	push	{r0, r1, r4, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4b12:	2400      	movs	r4, #0
   b4b14:	e9cd 4400 	strd	r4, r4, [sp]
   b4b18:	4904      	ldr	r1, [pc, #16]	; (b4b2c <_Z8setupLTEv+0x1c>)
   b4b1a:	4805      	ldr	r0, [pc, #20]	; (b4b30 <_Z8setupLTEv+0x20>)
   b4b1c:	2301      	movs	r3, #1
   b4b1e:	4622      	mov	r2, r4
   b4b20:	f009 f802 	bl	bdb28 <spark_subscribe>
    LTEAvail = false;
   b4b24:	4b03      	ldr	r3, [pc, #12]	; (b4b34 <_Z8setupLTEv+0x24>)
   b4b26:	701c      	strb	r4, [r3, #0]
}
   b4b28:	b002      	add	sp, #8
   b4b2a:	bd10      	pop	{r4, pc}
   b4b2c:	000b4a19 	.word	0x000b4a19
   b4b30:	000c61e8 	.word	0x000c61e8
   b4b34:	2003dda4 	.word	0x2003dda4

000b4b38 <_Z9setupXBeev>:
void setupXBee(){
   b4b38:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4b3a:	f00c febf 	bl	c18bc <_Z22__fetch_global_Serial1v>
   b4b3e:	4908      	ldr	r1, [pc, #32]	; (b4b60 <_Z9setupXBeev+0x28>)
   b4b40:	f7ff fbd1 	bl	b42e6 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4b44:	2014      	movs	r0, #20
   b4b46:	f00b fe15 	bl	c0774 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4b4a:	f00c feb7 	bl	c18bc <_Z22__fetch_global_Serial1v>
   b4b4e:	4905      	ldr	r1, [pc, #20]	; (b4b64 <_Z9setupXBeev+0x2c>)
   b4b50:	f7ff fbc9 	bl	b42e6 <_ZN5Print6printfEPKcz>
}
   b4b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4b58:	2014      	movs	r0, #20
   b4b5a:	f00b be0b 	b.w	c0774 <delay>
   b4b5e:	bf00      	nop
   b4b60:	000c7627 	.word	0x000c7627
   b4b64:	000c5f6d 	.word	0x000c5f6d

000b4b68 <_Z8setupGPSv>:
void setupGPS(){
   b4b68:	b507      	push	{r0, r1, r2, lr}
    if(myGPS.begin() == false){
   b4b6a:	f00c fee3 	bl	c1934 <_Z19__fetch_global_Wirev>
   b4b6e:	2300      	movs	r3, #0
   b4b70:	4601      	mov	r1, r0
   b4b72:	9300      	str	r3, [sp, #0]
   b4b74:	4812      	ldr	r0, [pc, #72]	; (b4bc0 <_Z8setupGPSv+0x58>)
   b4b76:	f240 434c 	movw	r3, #1100	; 0x44c
   b4b7a:	2242      	movs	r2, #66	; 0x42
   b4b7c:	f007 fee6 	bl	bc94c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4b80:	b940      	cbnz	r0, b4b94 <_Z8setupGPSv+0x2c>
        delay(1000);
   b4b82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4b86:	f00b fdf5 	bl	c0774 <delay>
        Serial.println("Error, Could not initialize GPS");
   b4b8a:	f00c fa0b 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b4b8e:	490d      	ldr	r1, [pc, #52]	; (b4bc4 <_Z8setupGPSv+0x5c>)
   b4b90:	f00a fd05 	bl	bf59e <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4b94:	f240 424c 	movw	r2, #1100	; 0x44c
   b4b98:	2101      	movs	r1, #1
   b4b9a:	4809      	ldr	r0, [pc, #36]	; (b4bc0 <_Z8setupGPSv+0x58>)
   b4b9c:	f007 fe62 	bl	bc864 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4ba0:	f240 434c 	movw	r3, #1100	; 0x44c
   b4ba4:	2201      	movs	r2, #1
   b4ba6:	2100      	movs	r1, #0
   b4ba8:	4805      	ldr	r0, [pc, #20]	; (b4bc0 <_Z8setupGPSv+0x58>)
   b4baa:	f007 fe3b 	bl	bc824 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4bae:	f00c fec1 	bl	c1934 <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4bb2:	4905      	ldr	r1, [pc, #20]	; (b4bc8 <_Z8setupGPSv+0x60>)
}
   b4bb4:	b003      	add	sp, #12
   b4bb6:	f85d eb04 	ldr.w	lr, [sp], #4
   b4bba:	f00c bb17 	b.w	c11ec <_ZN7TwoWire8setSpeedEm>
   b4bbe:	bf00      	nop
   b4bc0:	2003df60 	.word	0x2003df60
   b4bc4:	000c61ee 	.word	0x000c61ee
   b4bc8:	00061a80 	.word	0x00061a80
   b4bcc:	00000000 	.word	0x00000000

000b4bd0 <_Z12readPowerSysv>:
uint8_t readPowerSys(){
   b4bd0:	b510      	push	{r4, lr}
    battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4bd2:	2015      	movs	r0, #21
   b4bd4:	f00c fe40 	bl	c1858 <analogRead>
   b4bd8:	ee07 0a90 	vmov	s15, r0
   b4bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    battPercent = (uint8_t) rawPCT;
   b4be0:	4c37      	ldr	r4, [pc, #220]	; (b4cc0 <_Z12readPowerSysv+0xf0>)
    battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4be2:	ee17 0a90 	vmov	r0, s15
   b4be6:	f00e fce7 	bl	c35b8 <__aeabi_f2d>
   b4bea:	a32d      	add	r3, pc, #180	; (adr r3, b4ca0 <_Z12readPowerSysv+0xd0>)
   b4bec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4bf0:	f00e fd3a 	bl	c3668 <__aeabi_dmul>
   b4bf4:	f00f f830 	bl	c3c58 <__aeabi_d2f>
   b4bf8:	4b32      	ldr	r3, [pc, #200]	; (b4cc4 <_Z12readPowerSysv+0xf4>)
   b4bfa:	6018      	str	r0, [r3, #0]
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));
   b4bfc:	f00e fcdc 	bl	c35b8 <__aeabi_f2d>
   b4c00:	a329      	add	r3, pc, #164	; (adr r3, b4ca8 <_Z12readPowerSysv+0xd8>)
   b4c02:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c06:	f00e fb77 	bl	c32f8 <__aeabi_dsub>
   b4c0a:	4b2f      	ldr	r3, [pc, #188]	; (b4cc8 <_Z12readPowerSysv+0xf8>)
   b4c0c:	2200      	movs	r2, #0
   b4c0e:	f00e fd2b 	bl	c3668 <__aeabi_dmul>
   b4c12:	a327      	add	r3, pc, #156	; (adr r3, b4cb0 <_Z12readPowerSysv+0xe0>)
   b4c14:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c18:	f00e fe50 	bl	c38bc <__aeabi_ddiv>
   b4c1c:	f00e ffd4 	bl	c3bc8 <__aeabi_d2iz>
    if(rawPCT < 0) rawPCT = 0;
   b4c20:	2864      	cmp	r0, #100	; 0x64
   b4c22:	4603      	mov	r3, r0
   b4c24:	bfa8      	it	ge
   b4c26:	2364      	movge	r3, #100	; 0x64
    battPercent = (uint8_t) rawPCT;
   b4c28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b4c2c:	2814      	cmp	r0, #20
   b4c2e:	7023      	strb	r3, [r4, #0]
    if(battPercent <= LOW_BATT_PCT) lowBattery = true;
   b4c30:	4b26      	ldr	r3, [pc, #152]	; (b4ccc <_Z12readPowerSysv+0xfc>)
   b4c32:	bfcc      	ite	gt
   b4c34:	2000      	movgt	r0, #0
   b4c36:	2001      	movle	r0, #1
   b4c38:	7018      	strb	r0, [r3, #0]
    battCurrent = (float) analogRead(BATT_ISENSE) * BAT_ISENSE_MULT / 4095;
   b4c3a:	2010      	movs	r0, #16
   b4c3c:	f00c fe0c 	bl	c1858 <analogRead>
   b4c40:	ee07 0a90 	vmov	s15, r0
   b4c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4c48:	ee17 0a90 	vmov	r0, s15
   b4c4c:	f00e fcb4 	bl	c35b8 <__aeabi_f2d>
   b4c50:	4b1f      	ldr	r3, [pc, #124]	; (b4cd0 <_Z12readPowerSysv+0x100>)
   b4c52:	2200      	movs	r2, #0
   b4c54:	f00e fd08 	bl	c3668 <__aeabi_dmul>
   b4c58:	a317      	add	r3, pc, #92	; (adr r3, b4cb8 <_Z12readPowerSysv+0xe8>)
   b4c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c5e:	f00e fe2d 	bl	c38bc <__aeabi_ddiv>
   b4c62:	f00e fff9 	bl	c3c58 <__aeabi_d2f>
   b4c66:	4b1b      	ldr	r3, [pc, #108]	; (b4cd4 <_Z12readPowerSysv+0x104>)
   b4c68:	6018      	str	r0, [r3, #0]
    solarCurrent = (float) analogRead(SOL_ISENSE) * SLR_ISENSE_MULT / 4095;
   b4c6a:	2011      	movs	r0, #17
   b4c6c:	f00c fdf4 	bl	c1858 <analogRead>
   b4c70:	ee07 0a90 	vmov	s15, r0
   b4c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4c78:	ee17 0a90 	vmov	r0, s15
   b4c7c:	f00e fc9c 	bl	c35b8 <__aeabi_f2d>
   b4c80:	4b15      	ldr	r3, [pc, #84]	; (b4cd8 <_Z12readPowerSysv+0x108>)
   b4c82:	2200      	movs	r2, #0
   b4c84:	f00e fcf0 	bl	c3668 <__aeabi_dmul>
   b4c88:	a30b      	add	r3, pc, #44	; (adr r3, b4cb8 <_Z12readPowerSysv+0xe8>)
   b4c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c8e:	f00e fe15 	bl	c38bc <__aeabi_ddiv>
   b4c92:	f00e ffe1 	bl	c3c58 <__aeabi_d2f>
   b4c96:	4b11      	ldr	r3, [pc, #68]	; (b4cdc <_Z12readPowerSysv+0x10c>)
   b4c98:	6018      	str	r0, [r3, #0]
}
   b4c9a:	7820      	ldrb	r0, [r4, #0]
   b4c9c:	bd10      	pop	{r4, pc}
   b4c9e:	bf00      	nop
   b4ca0:	6e04c059 	.word	0x6e04c059
   b4ca4:	3f73cddd 	.word	0x3f73cddd
   b4ca8:	66666666 	.word	0x66666666
   b4cac:	402a6666 	.word	0x402a6666
   b4cb0:	99999998 	.word	0x99999998
   b4cb4:	40099999 	.word	0x40099999
   b4cb8:	00000000 	.word	0x00000000
   b4cbc:	40affe00 	.word	0x40affe00
   b4cc0:	2003ddd0 	.word	0x2003ddd0
   b4cc4:	2003ddd4 	.word	0x2003ddd4
   b4cc8:	40590000 	.word	0x40590000
   b4ccc:	2003df0c 	.word	0x2003df0c
   b4cd0:	40408000 	.word	0x40408000
   b4cd4:	2003ddcc 	.word	0x2003ddcc
   b4cd8:	40308000 	.word	0x40308000
   b4cdc:	2003e588 	.word	0x2003e588

000b4ce0 <_Z18readCompassHeadingff>:
float readCompassHeading(float x_accel, float y_accel){
   b4ce0:	b538      	push	{r3, r4, r5, lr}
   b4ce2:	eef0 7a60 	vmov.f32	s15, s1
   b4ce6:	ed2d 8b04 	vpush	{d8-d9}
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
   b4cea:	eef0 0a40 	vmov.f32	s1, s0
   b4cee:	eeb0 0a67 	vmov.f32	s0, s15
   b4cf2:	f00d f80b 	bl	c1d0c <atan2f>
   b4cf6:	ee10 0a10 	vmov	r0, s0
    float rawHeading = atan2(y_accel, x_accel) * 180.0 / M_PI;
   b4cfa:	f00e fc5d 	bl	c35b8 <__aeabi_f2d>
   b4cfe:	4b8e      	ldr	r3, [pc, #568]	; (b4f38 <_Z18readCompassHeadingff+0x258>)
   b4d00:	2200      	movs	r2, #0
   b4d02:	f00e fcb1 	bl	c3668 <__aeabi_dmul>
   b4d06:	a384      	add	r3, pc, #528	; (adr r3, b4f18 <_Z18readCompassHeadingff+0x238>)
   b4d08:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d0c:	f00e fdd6 	bl	c38bc <__aeabi_ddiv>
   b4d10:	f00e ffa2 	bl	c3c58 <__aeabi_d2f>
   b4d14:	ee08 0a10 	vmov	s16, r0
    if(rawHeading >= N_BEARING && rawHeading < NE_BEARING){
   b4d18:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
   b4d1c:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b4d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d24:	eeb3 9a0f 	vmov.f32	s18, #63	; 0x41f80000  31.0
   b4d28:	db13      	blt.n	b4d52 <_Z18readCompassHeadingff+0x72>
   b4d2a:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b4d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d32:	d50e      	bpl.n	b4d52 <_Z18readCompassHeadingff+0x72>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4d34:	f00e fc40 	bl	c35b8 <__aeabi_f2d>
   b4d38:	4b80      	ldr	r3, [pc, #512]	; (b4f3c <_Z18readCompassHeadingff+0x25c>)
   b4d3a:	2200      	movs	r2, #0
   b4d3c:	f00e fadc 	bl	c32f8 <__aeabi_dsub>
   b4d40:	4b7f      	ldr	r3, [pc, #508]	; (b4f40 <_Z18readCompassHeadingff+0x260>)
   b4d42:	2200      	movs	r2, #0
   b4d44:	f00e fc90 	bl	c3668 <__aeabi_dmul>
   b4d48:	4b7e      	ldr	r3, [pc, #504]	; (b4f44 <_Z18readCompassHeadingff+0x264>)
   b4d4a:	2200      	movs	r2, #0
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b4d4c:	f00e fdb6 	bl	c38bc <__aeabi_ddiv>
   b4d50:	e021      	b.n	b4d96 <_Z18readCompassHeadingff+0xb6>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4d52:	ee18 0a10 	vmov	r0, s16
   b4d56:	f00e fc2f 	bl	c35b8 <__aeabi_f2d>
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b4d5a:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b4d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d62:	eddf 7a79 	vldr	s15, [pc, #484]	; b4f48 <_Z18readCompassHeadingff+0x268>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4d66:	4604      	mov	r4, r0
   b4d68:	460d      	mov	r5, r1
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b4d6a:	db1b      	blt.n	b4da4 <_Z18readCompassHeadingff+0xc4>
   b4d6c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d74:	d516      	bpl.n	b4da4 <_Z18readCompassHeadingff+0xc4>
        return (45.0 * (rawHeading-NE_BEARING)/diff) + 45.0;
   b4d76:	4b75      	ldr	r3, [pc, #468]	; (b4f4c <_Z18readCompassHeadingff+0x26c>)
   b4d78:	2200      	movs	r2, #0
   b4d7a:	f00e fabd 	bl	c32f8 <__aeabi_dsub>
   b4d7e:	4b70      	ldr	r3, [pc, #448]	; (b4f40 <_Z18readCompassHeadingff+0x260>)
   b4d80:	2200      	movs	r2, #0
   b4d82:	f00e fc71 	bl	c3668 <__aeabi_dmul>
   b4d86:	4b72      	ldr	r3, [pc, #456]	; (b4f50 <_Z18readCompassHeadingff+0x270>)
   b4d88:	2200      	movs	r2, #0
   b4d8a:	f00e fd97 	bl	c38bc <__aeabi_ddiv>
   b4d8e:	4b6c      	ldr	r3, [pc, #432]	; (b4f40 <_Z18readCompassHeadingff+0x260>)
   b4d90:	2200      	movs	r2, #0
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b4d92:	f00e fab3 	bl	c32fc <__adddf3>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4d96:	f00e ff5f 	bl	c3c58 <__aeabi_d2f>
}
   b4d9a:	ecbd 8b04 	vpop	{d8-d9}
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4d9e:	ee00 0a10 	vmov	s0, r0
}
   b4da2:	bd38      	pop	{r3, r4, r5, pc}
    else if(rawHeading >= E_BEARING && rawHeading < SE_BEARING){
   b4da4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4dac:	eddf 7a69 	vldr	s15, [pc, #420]	; b4f54 <_Z18readCompassHeadingff+0x274>
   b4db0:	db15      	blt.n	b4dde <_Z18readCompassHeadingff+0xfe>
   b4db2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4dba:	d510      	bpl.n	b4dde <_Z18readCompassHeadingff+0xfe>
        return (45.0 * (rawHeading-E_BEARING)/diff) + 90.0;
   b4dbc:	4b66      	ldr	r3, [pc, #408]	; (b4f58 <_Z18readCompassHeadingff+0x278>)
   b4dbe:	2200      	movs	r2, #0
   b4dc0:	4620      	mov	r0, r4
   b4dc2:	4629      	mov	r1, r5
   b4dc4:	f00e fa98 	bl	c32f8 <__aeabi_dsub>
   b4dc8:	4b5d      	ldr	r3, [pc, #372]	; (b4f40 <_Z18readCompassHeadingff+0x260>)
   b4dca:	2200      	movs	r2, #0
   b4dcc:	f00e fc4c 	bl	c3668 <__aeabi_dmul>
   b4dd0:	4b62      	ldr	r3, [pc, #392]	; (b4f5c <_Z18readCompassHeadingff+0x27c>)
   b4dd2:	2200      	movs	r2, #0
   b4dd4:	f00e fd72 	bl	c38bc <__aeabi_ddiv>
   b4dd8:	4b61      	ldr	r3, [pc, #388]	; (b4f60 <_Z18readCompassHeadingff+0x280>)
   b4dda:	2200      	movs	r2, #0
   b4ddc:	e7d9      	b.n	b4d92 <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= SE_BEARING && rawHeading < S_BEARING){
   b4dde:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4de6:	db18      	blt.n	b4e1a <_Z18readCompassHeadingff+0x13a>
   b4de8:	eddf 7a5e 	vldr	s15, [pc, #376]	; b4f64 <_Z18readCompassHeadingff+0x284>
   b4dec:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4df4:	d511      	bpl.n	b4e1a <_Z18readCompassHeadingff+0x13a>
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b4df6:	4b5c      	ldr	r3, [pc, #368]	; (b4f68 <_Z18readCompassHeadingff+0x288>)
   b4df8:	2200      	movs	r2, #0
   b4dfa:	4620      	mov	r0, r4
   b4dfc:	4629      	mov	r1, r5
   b4dfe:	f00e fa7b 	bl	c32f8 <__aeabi_dsub>
   b4e02:	4b4f      	ldr	r3, [pc, #316]	; (b4f40 <_Z18readCompassHeadingff+0x260>)
   b4e04:	2200      	movs	r2, #0
   b4e06:	f00e fc2f 	bl	c3668 <__aeabi_dmul>
   b4e0a:	4b58      	ldr	r3, [pc, #352]	; (b4f6c <_Z18readCompassHeadingff+0x28c>)
   b4e0c:	2200      	movs	r2, #0
   b4e0e:	f00e fd55 	bl	c38bc <__aeabi_ddiv>
   b4e12:	a343      	add	r3, pc, #268	; (adr r3, b4f20 <_Z18readCompassHeadingff+0x240>)
   b4e14:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e18:	e7bb      	b.n	b4d92 <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= NW_BEARING && rawHeading < N_BEARING){
   b4e1a:	eebb 7a02 	vmov.f32	s14, #178	; 0xc1900000 -18.0
   b4e1e:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b4e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e26:	db11      	blt.n	b4e4c <_Z18readCompassHeadingff+0x16c>
   b4e28:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b4e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e30:	d50c      	bpl.n	b4e4c <_Z18readCompassHeadingff+0x16c>
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b4e32:	4b42      	ldr	r3, [pc, #264]	; (b4f3c <_Z18readCompassHeadingff+0x25c>)
   b4e34:	2200      	movs	r2, #0
   b4e36:	4620      	mov	r0, r4
   b4e38:	4629      	mov	r1, r5
   b4e3a:	f00e fa5d 	bl	c32f8 <__aeabi_dsub>
   b4e3e:	4b4c      	ldr	r3, [pc, #304]	; (b4f70 <_Z18readCompassHeadingff+0x290>)
   b4e40:	2200      	movs	r2, #0
   b4e42:	f00e fc11 	bl	c3668 <__aeabi_dmul>
   b4e46:	4b4b      	ldr	r3, [pc, #300]	; (b4f74 <_Z18readCompassHeadingff+0x294>)
   b4e48:	2200      	movs	r2, #0
   b4e4a:	e77f      	b.n	b4d4c <_Z18readCompassHeadingff+0x6c>
    else if(rawHeading >= W_BEARING && rawHeading < NW_BEARING){
   b4e4c:	eddf 7a4a 	vldr	s15, [pc, #296]	; b4f78 <_Z18readCompassHeadingff+0x298>
   b4e50:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e58:	db17      	blt.n	b4e8a <_Z18readCompassHeadingff+0x1aa>
   b4e5a:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b4e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e62:	d512      	bpl.n	b4e8a <_Z18readCompassHeadingff+0x1aa>
        return (-45.0 * (rawHeading-NW_BEARING)/diff) - 45.0;
   b4e64:	4b45      	ldr	r3, [pc, #276]	; (b4f7c <_Z18readCompassHeadingff+0x29c>)
   b4e66:	2200      	movs	r2, #0
   b4e68:	4620      	mov	r0, r4
   b4e6a:	4629      	mov	r1, r5
   b4e6c:	f00e fa46 	bl	c32fc <__adddf3>
   b4e70:	4b3f      	ldr	r3, [pc, #252]	; (b4f70 <_Z18readCompassHeadingff+0x290>)
   b4e72:	2200      	movs	r2, #0
   b4e74:	f00e fbf8 	bl	c3668 <__aeabi_dmul>
   b4e78:	4b41      	ldr	r3, [pc, #260]	; (b4f80 <_Z18readCompassHeadingff+0x2a0>)
   b4e7a:	2200      	movs	r2, #0
   b4e7c:	f00e fd1e 	bl	c38bc <__aeabi_ddiv>
   b4e80:	4b2f      	ldr	r3, [pc, #188]	; (b4f40 <_Z18readCompassHeadingff+0x260>)
   b4e82:	2200      	movs	r2, #0
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4e84:	f00e fa38 	bl	c32f8 <__aeabi_dsub>
   b4e88:	e785      	b.n	b4d96 <_Z18readCompassHeadingff+0xb6>
    else if(rawHeading >=SW_BEARING && rawHeading < W_BEARING){
   b4e8a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; b4f84 <_Z18readCompassHeadingff+0x2a4>
   b4e8e:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b4e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e96:	db15      	blt.n	b4ec4 <_Z18readCompassHeadingff+0x1e4>
   b4e98:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ea0:	d510      	bpl.n	b4ec4 <_Z18readCompassHeadingff+0x1e4>
        return (-45.0 * (rawHeading-W_BEARING)/diff) - 90.0;
   b4ea2:	4b39      	ldr	r3, [pc, #228]	; (b4f88 <_Z18readCompassHeadingff+0x2a8>)
   b4ea4:	2200      	movs	r2, #0
   b4ea6:	4620      	mov	r0, r4
   b4ea8:	4629      	mov	r1, r5
   b4eaa:	f00e fa27 	bl	c32fc <__adddf3>
   b4eae:	4b30      	ldr	r3, [pc, #192]	; (b4f70 <_Z18readCompassHeadingff+0x290>)
   b4eb0:	2200      	movs	r2, #0
   b4eb2:	f00e fbd9 	bl	c3668 <__aeabi_dmul>
   b4eb6:	4b35      	ldr	r3, [pc, #212]	; (b4f8c <_Z18readCompassHeadingff+0x2ac>)
   b4eb8:	2200      	movs	r2, #0
   b4eba:	f00e fcff 	bl	c38bc <__aeabi_ddiv>
   b4ebe:	4b28      	ldr	r3, [pc, #160]	; (b4f60 <_Z18readCompassHeadingff+0x280>)
   b4ec0:	2200      	movs	r2, #0
   b4ec2:	e7df      	b.n	b4e84 <_Z18readCompassHeadingff+0x1a4>
        if(rawHeading > 0){
   b4ec4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b4ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b4ecc:	f04f 0200 	mov.w	r2, #0
        if(rawHeading > 0){
   b4ed0:	dd10      	ble.n	b4ef4 <_Z18readCompassHeadingff+0x214>
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b4ed2:	4b2f      	ldr	r3, [pc, #188]	; (b4f90 <_Z18readCompassHeadingff+0x2b0>)
   b4ed4:	4620      	mov	r0, r4
   b4ed6:	4629      	mov	r1, r5
   b4ed8:	f00e fa0e 	bl	c32f8 <__aeabi_dsub>
   b4edc:	4b18      	ldr	r3, [pc, #96]	; (b4f40 <_Z18readCompassHeadingff+0x260>)
   b4ede:	2200      	movs	r2, #0
   b4ee0:	f00e fbc2 	bl	c3668 <__aeabi_dmul>
   b4ee4:	a310      	add	r3, pc, #64	; (adr r3, b4f28 <_Z18readCompassHeadingff+0x248>)
   b4ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4eea:	f00e fce7 	bl	c38bc <__aeabi_ddiv>
   b4eee:	4b12      	ldr	r3, [pc, #72]	; (b4f38 <_Z18readCompassHeadingff+0x258>)
   b4ef0:	2200      	movs	r2, #0
   b4ef2:	e7c7      	b.n	b4e84 <_Z18readCompassHeadingff+0x1a4>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4ef4:	4b27      	ldr	r3, [pc, #156]	; (b4f94 <_Z18readCompassHeadingff+0x2b4>)
   b4ef6:	4620      	mov	r0, r4
   b4ef8:	4629      	mov	r1, r5
   b4efa:	f00e f9ff 	bl	c32fc <__adddf3>
   b4efe:	a30c      	add	r3, pc, #48	; (adr r3, b4f30 <_Z18readCompassHeadingff+0x250>)
   b4f00:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f04:	f00e fbb0 	bl	c3668 <__aeabi_dmul>
   b4f08:	4b23      	ldr	r3, [pc, #140]	; (b4f98 <_Z18readCompassHeadingff+0x2b8>)
   b4f0a:	2200      	movs	r2, #0
   b4f0c:	f00e fcd6 	bl	c38bc <__aeabi_ddiv>
   b4f10:	a303      	add	r3, pc, #12	; (adr r3, b4f20 <_Z18readCompassHeadingff+0x240>)
   b4f12:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f16:	e7b5      	b.n	b4e84 <_Z18readCompassHeadingff+0x1a4>
   b4f18:	54442d18 	.word	0x54442d18
   b4f1c:	400921fb 	.word	0x400921fb
   b4f20:	00000000 	.word	0x00000000
   b4f24:	4060e000 	.word	0x4060e000
   b4f28:	00000000 	.word	0x00000000
   b4f2c:	4063a000 	.word	0x4063a000
   b4f30:	bb000000 	.word	0xbb000000
   b4f34:	403d3c54 	.word	0x403d3c54
   b4f38:	40668000 	.word	0x40668000
   b4f3c:	40180000 	.word	0x40180000
   b4f40:	40468000 	.word	0x40468000
   b4f44:	40390000 	.word	0x40390000
   b4f48:	42680000 	.word	0x42680000
   b4f4c:	403f0000 	.word	0x403f0000
   b4f50:	403b0000 	.word	0x403b0000
   b4f54:	42ac0000 	.word	0x42ac0000
   b4f58:	404d0000 	.word	0x404d0000
   b4f5c:	403c0000 	.word	0x403c0000
   b4f60:	40568000 	.word	0x40568000
   b4f64:	42fa0000 	.word	0x42fa0000
   b4f68:	40558000 	.word	0x40558000
   b4f6c:	40438000 	.word	0x40438000
   b4f70:	c0468000 	.word	0xc0468000
   b4f74:	c0380000 	.word	0xc0380000
   b4f78:	c2200000 	.word	0xc2200000
   b4f7c:	40320000 	.word	0x40320000
   b4f80:	c0360000 	.word	0xc0360000
   b4f84:	c29c0000 	.word	0xc29c0000
   b4f88:	40440000 	.word	0x40440000
   b4f8c:	c0430000 	.word	0xc0430000
   b4f90:	405f4000 	.word	0x405f4000
   b4f94:	40538000 	.word	0x40538000
   b4f98:	40598000 	.word	0x40598000
   b4f9c:	00000000 	.word	0x00000000

000b4fa0 <_Z12calcDistanceffff>:
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b4fa0:	b510      	push	{r4, lr}
   b4fa2:	ed2d 8b08 	vpush	{d8-d11}
  return deg * (3.14159/180);
   b4fa6:	ee70 7a60 	vsub.f32	s15, s0, s1
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b4faa:	b082      	sub	sp, #8
  return deg * (3.14159/180);
   b4fac:	ee17 0a90 	vmov	r0, s15
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b4fb0:	eef0 aa41 	vmov.f32	s21, s2
   b4fb4:	eeb0 aa61 	vmov.f32	s20, s3
   b4fb8:	eef0 8a60 	vmov.f32	s17, s1
   b4fbc:	eeb0 8a40 	vmov.f32	s16, s0
  return deg * (3.14159/180);
   b4fc0:	f00e fafa 	bl	c35b8 <__aeabi_f2d>
   b4fc4:	a342      	add	r3, pc, #264	; (adr r3, b50d0 <_Z12calcDistanceffff+0x130>)
   b4fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4fca:	f00e fb4d 	bl	c3668 <__aeabi_dmul>
   b4fce:	f00e fe43 	bl	c3c58 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b4fd2:	ee07 0a90 	vmov	s15, r0
   b4fd6:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
   b4fda:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b4fde:	f00c fe1f 	bl	c1c20 <sinf>
  return deg * (3.14159/180);
   b4fe2:	ee18 0a90 	vmov	r0, s17
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b4fe6:	eeb0 9a40 	vmov.f32	s18, s0
  return deg * (3.14159/180);
   b4fea:	f00e fae5 	bl	c35b8 <__aeabi_f2d>
   b4fee:	a338      	add	r3, pc, #224	; (adr r3, b50d0 <_Z12calcDistanceffff+0x130>)
   b4ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ff4:	f00e fb38 	bl	c3668 <__aeabi_dmul>
   b4ff8:	f00e fe2e 	bl	c3c58 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b4ffc:	ee00 0a10 	vmov	s0, r0
   b5000:	f00c fdd6 	bl	c1bb0 <cosf>
  return deg * (3.14159/180);
   b5004:	ee18 0a10 	vmov	r0, s16
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5008:	eef0 8a40 	vmov.f32	s17, s0
  return deg * (3.14159/180);
   b500c:	f00e fad4 	bl	c35b8 <__aeabi_f2d>
   b5010:	a32f      	add	r3, pc, #188	; (adr r3, b50d0 <_Z12calcDistanceffff+0x130>)
   b5012:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5016:	f00e fb27 	bl	c3668 <__aeabi_dmul>
   b501a:	f00e fe1d 	bl	c3c58 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b501e:	ee00 0a10 	vmov	s0, r0
   b5022:	f00c fdc5 	bl	c1bb0 <cosf>
  return deg * (3.14159/180);
   b5026:	ee7a 7aca 	vsub.f32	s15, s21, s20
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b502a:	eef0 9a40 	vmov.f32	s19, s0
  return deg * (3.14159/180);
   b502e:	ee17 0a90 	vmov	r0, s15
   b5032:	f00e fac1 	bl	c35b8 <__aeabi_f2d>
   b5036:	a326      	add	r3, pc, #152	; (adr r3, b50d0 <_Z12calcDistanceffff+0x130>)
   b5038:	e9d3 2300 	ldrd	r2, r3, [r3]
   b503c:	f00e fb14 	bl	c3668 <__aeabi_dmul>
   b5040:	f00e fe0a 	bl	c3c58 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5044:	ee07 0a90 	vmov	s15, r0
   b5048:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b504c:	f00c fde8 	bl	c1c20 <sinf>
   b5050:	ee68 8aa9 	vmul.f32	s17, s17, s19
   b5054:	ee68 8a80 	vmul.f32	s17, s17, s0
   b5058:	ee28 8a80 	vmul.f32	s16, s17, s0
   b505c:	eea9 8a09 	vfma.f32	s16, s18, s18
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   b5060:	eeb0 0a48 	vmov.f32	s0, s16
   b5064:	f00c fe54 	bl	c1d10 <sqrtf>
    float c = 2 * atan2(sqrt(a), sqrt(1.0-a)); 
   b5068:	ee18 0a10 	vmov	r0, s16
   b506c:	ee10 4a10 	vmov	r4, s0
   b5070:	f00e faa2 	bl	c35b8 <__aeabi_f2d>
   b5074:	4602      	mov	r2, r0
   b5076:	460b      	mov	r3, r1
   b5078:	2000      	movs	r0, #0
   b507a:	4913      	ldr	r1, [pc, #76]	; (b50c8 <_Z12calcDistanceffff+0x128>)
   b507c:	f00e f93c 	bl	c32f8 <__aeabi_dsub>
   b5080:	ec41 0b10 	vmov	d0, r0, r1
   b5084:	f00c fe08 	bl	c1c98 <sqrt>
      return atan2(__type(__y), __type(__x));
   b5088:	4620      	mov	r0, r4
   b508a:	ed8d 0b00 	vstr	d0, [sp]
   b508e:	f00e fa93 	bl	c35b8 <__aeabi_f2d>
   b5092:	ed9d 1b00 	vldr	d1, [sp]
   b5096:	ec41 0b10 	vmov	d0, r0, r1
   b509a:	f00c fdfb 	bl	c1c94 <atan2>
   b509e:	ec53 2b10 	vmov	r2, r3, d0
   b50a2:	ee10 0a10 	vmov	r0, s0
   b50a6:	4619      	mov	r1, r3
   b50a8:	f00e f928 	bl	c32fc <__adddf3>
   b50ac:	f00e fdd4 	bl	c3c58 <__aeabi_d2f>
}
   b50b0:	ed9f 0a06 	vldr	s0, [pc, #24]	; b50cc <_Z12calcDistanceffff+0x12c>
   b50b4:	ee07 0a90 	vmov	s15, r0
   b50b8:	ee27 0a80 	vmul.f32	s0, s15, s0
   b50bc:	b002      	add	sp, #8
   b50be:	ecbd 8b08 	vpop	{d8-d11}
   b50c2:	bd10      	pop	{r4, pc}
   b50c4:	f3af 8000 	nop.w
   b50c8:	3ff00000 	.word	0x3ff00000
   b50cc:	45c71800 	.word	0x45c71800
   b50d0:	a50de270 	.word	0xa50de270
   b50d4:	3f91df45 	.word	0x3f91df45

000b50d8 <_Z12updateMotorsv>:
void updateMotors(){
   b50d8:	b538      	push	{r3, r4, r5, lr}
    if(updateMotorControl){
   b50da:	4d0e      	ldr	r5, [pc, #56]	; (b5114 <_Z12updateMotorsv+0x3c>)
   b50dc:	782b      	ldrb	r3, [r5, #0]
   b50de:	b1bb      	cbz	r3, b5110 <_Z12updateMotorsv+0x38>
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b50e0:	4b0d      	ldr	r3, [pc, #52]	; (b5118 <_Z12updateMotorsv+0x40>)
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b50e2:	4c0e      	ldr	r4, [pc, #56]	; (b511c <_Z12updateMotorsv+0x44>)
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b50e4:	781a      	ldrb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b50e6:	480e      	ldr	r0, [pc, #56]	; (b5120 <_Z12updateMotorsv+0x48>)
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b50e8:	3a5b      	subs	r2, #91	; 0x5b
   b50ea:	2a20      	cmp	r2, #32
   b50ec:	bf9c      	itt	ls
   b50ee:	227b      	movls	r2, #123	; 0x7b
   b50f0:	701a      	strbls	r2, [r3, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b50f2:	7822      	ldrb	r2, [r4, #0]
        ESCL.write(setLSpeed);
   b50f4:	7819      	ldrb	r1, [r3, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b50f6:	3a5b      	subs	r2, #91	; 0x5b
   b50f8:	2a20      	cmp	r2, #32
   b50fa:	bf9c      	itt	ls
   b50fc:	227b      	movls	r2, #123	; 0x7b
   b50fe:	7022      	strbls	r2, [r4, #0]
        ESCL.write(setLSpeed);
   b5100:	f008 ff16 	bl	bdf30 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b5104:	7821      	ldrb	r1, [r4, #0]
   b5106:	4807      	ldr	r0, [pc, #28]	; (b5124 <_Z12updateMotorsv+0x4c>)
   b5108:	f008 ff12 	bl	bdf30 <_ZN5Servo5writeEi>
        updateMotorControl = false;        
   b510c:	2300      	movs	r3, #0
   b510e:	702b      	strb	r3, [r5, #0]
}
   b5110:	bd38      	pop	{r3, r4, r5, pc}
   b5112:	bf00      	nop
   b5114:	2003e5ec 	.word	0x2003e5ec
   b5118:	2003e584 	.word	0x2003e584
   b511c:	2003e585 	.word	0x2003e585
   b5120:	2003dd84 	.word	0x2003dd84
   b5124:	2003dd94 	.word	0x2003dd94

000b5128 <_Z8printBLEPKc>:
void printBLE(const char *dataOut){
   b5128:	b598      	push	{r3, r4, r7, lr}
   b512a:	af00      	add	r7, sp, #0
   b512c:	4604      	mov	r4, r0
        uint8_t txBuf_tmp[strlen(dataOut)];
   b512e:	f00e feda 	bl	c3ee6 <strlen>
   b5132:	3007      	adds	r0, #7
   b5134:	f020 0007 	bic.w	r0, r0, #7
   b5138:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,dataOut,strlen(dataOut));
   b513c:	4620      	mov	r0, r4
   b513e:	f00e fed2 	bl	c3ee6 <strlen>
   b5142:	4621      	mov	r1, r4
   b5144:	4602      	mov	r2, r0
   b5146:	4668      	mov	r0, sp
   b5148:	f00e fe1a 	bl	c3d80 <memcpy>
        bledbgCharacteristic.setValue(txBuf_tmp, strlen(dataOut));
   b514c:	4620      	mov	r0, r4
   b514e:	f00e feca 	bl	c3ee6 <strlen>
   b5152:	2300      	movs	r3, #0
   b5154:	4602      	mov	r2, r0
   b5156:	4669      	mov	r1, sp
   b5158:	4802      	ldr	r0, [pc, #8]	; (b5164 <_Z8printBLEPKc+0x3c>)
   b515a:	f009 fa81 	bl	be660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
}
   b515e:	46bd      	mov	sp, r7
   b5160:	bd98      	pop	{r3, r4, r7, pc}
   b5162:	bf00      	nop
   b5164:	2003ddd8 	.word	0x2003ddd8

000b5168 <_Z15getPositionDatav>:
bool getPositionData(){
   b5168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        targetLat = 35.769889;
   b516c:	4c86      	ldr	r4, [pc, #536]	; (b5388 <_Z15getPositionDatav+0x220>)
   b516e:	4b87      	ldr	r3, [pc, #540]	; (b538c <_Z15getPositionDatav+0x224>)
        targetLon = -78.673824;
   b5170:	f8df 8254 	ldr.w	r8, [pc, #596]	; b53c8 <_Z15getPositionDatav+0x260>
        latitude = 35.771801;
   b5174:	4f86      	ldr	r7, [pc, #536]	; (b5390 <_Z15getPositionDatav+0x228>)
        longitude = -78.674378;
   b5176:	f8df 9254 	ldr.w	r9, [pc, #596]	; b53cc <_Z15getPositionDatav+0x264>
        lis3mdl.read();      // get X Y and Z data at once
   b517a:	4886      	ldr	r0, [pc, #536]	; (b5394 <_Z15getPositionDatav+0x22c>)
        compassHeading = readCompassHeading(event.magnetic.x,event.magnetic.y);
   b517c:	4d86      	ldr	r5, [pc, #536]	; (b5398 <_Z15getPositionDatav+0x230>)
bool getPositionData(){
   b517e:	ed2d 8b02 	vpush	{d8}
        targetLat = 35.769889;
   b5182:	6023      	str	r3, [r4, #0]
        targetLon = -78.673824;
   b5184:	4b85      	ldr	r3, [pc, #532]	; (b539c <_Z15getPositionDatav+0x234>)
   b5186:	f8c8 3000 	str.w	r3, [r8]
        latitude = 35.771801;
   b518a:	4b85      	ldr	r3, [pc, #532]	; (b53a0 <_Z15getPositionDatav+0x238>)
   b518c:	603b      	str	r3, [r7, #0]
bool getPositionData(){
   b518e:	b0ab      	sub	sp, #172	; 0xac
        longitude = -78.674378;
   b5190:	4b84      	ldr	r3, [pc, #528]	; (b53a4 <_Z15getPositionDatav+0x23c>)
   b5192:	f8c9 3000 	str.w	r3, [r9]
        lis3mdl.read();      // get X Y and Z data at once
   b5196:	f007 fc6d 	bl	bca74 <_ZN16Adafruit_LIS3MDL4readEv>
        lis3mdl.getEvent(&event);
   b519a:	a908      	add	r1, sp, #32
   b519c:	487d      	ldr	r0, [pc, #500]	; (b5394 <_Z15getPositionDatav+0x22c>)
   b519e:	f007 fcaf 	bl	bcb00 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>
        compassHeading = readCompassHeading(event.magnetic.x,event.magnetic.y);
   b51a2:	eddd 0a0e 	vldr	s1, [sp, #56]	; 0x38
   b51a6:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
   b51aa:	f7ff fd99 	bl	b4ce0 <_Z18readCompassHeadingff>
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b51ae:	ed94 7a00 	vldr	s14, [r4]
   b51b2:	ed9f 6a7d 	vldr	s12, [pc, #500]	; b53a8 <_Z15getPositionDatav+0x240>
        compassHeading = readCompassHeading(event.magnetic.x,event.magnetic.y);
   b51b6:	ed85 0a00 	vstr	s0, [r5]
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b51ba:	eeb4 7ac6 	vcmpe.f32	s14, s12
   b51be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b51c2:	f2c0 80b2 	blt.w	b532a <_Z15getPositionDatav+0x1c2>
   b51c6:	eddf 6a79 	vldr	s13, [pc, #484]	; b53ac <_Z15getPositionDatav+0x244>
   b51ca:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b51ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b51d2:	f200 80aa 	bhi.w	b532a <_Z15getPositionDatav+0x1c2>
   b51d6:	edd8 7a00 	vldr	s15, [r8]
   b51da:	eef4 7ac6 	vcmpe.f32	s15, s12
   b51de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b51e2:	f2c0 80a2 	blt.w	b532a <_Z15getPositionDatav+0x1c2>
   b51e6:	eef4 7ae6 	vcmpe.f32	s15, s13
   b51ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b51ee:	f200 809c 	bhi.w	b532a <_Z15getPositionDatav+0x1c2>
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b51f2:	edd7 0a00 	vldr	s1, [r7]
   b51f6:	ed99 0a00 	vldr	s0, [r9]
   b51fa:	eddf 8a6d 	vldr	s17, [pc, #436]	; b53b0 <_Z15getPositionDatav+0x248>
   b51fe:	4e6d      	ldr	r6, [pc, #436]	; (b53b4 <_Z15getPositionDatav+0x24c>)
  { return __builtin_atan2f(__y, __x); }
   b5200:	ee77 0a60 	vsub.f32	s1, s14, s1
   b5204:	ee37 0ac0 	vsub.f32	s0, s15, s0
   b5208:	f00c fd80 	bl	c1d0c <atan2f>
   b520c:	ee60 7a28 	vmul.f32	s15, s0, s17
   b5210:	ee17 0a90 	vmov	r0, s15
   b5214:	f00e f9d0 	bl	c35b8 <__aeabi_f2d>
   b5218:	a359      	add	r3, pc, #356	; (adr r3, b5380 <_Z15getPositionDatav+0x218>)
   b521a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b521e:	f00e fb4d 	bl	c38bc <__aeabi_ddiv>
   b5222:	f00e fd19 	bl	c3c58 <__aeabi_d2f>
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b5226:	ed94 0a00 	vldr	s0, [r4]
   b522a:	edd9 1a00 	vldr	s3, [r9]
   b522e:	ed98 1a00 	vldr	s2, [r8]
   b5232:	edd7 0a00 	vldr	s1, [r7]
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b5236:	6030      	str	r0, [r6, #0]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b5238:	f7ff feb2 	bl	b4fa0 <_Z12calcDistanceffff>
            if(travelHeading > 0){
   b523c:	ed96 8a00 	vldr	s16, [r6]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b5240:	4b5d      	ldr	r3, [pc, #372]	; (b53b8 <_Z15getPositionDatav+0x250>)
                if(compassHeading > 0){
   b5242:	edd5 7a00 	vldr	s15, [r5]
   b5246:	4c5d      	ldr	r4, [pc, #372]	; (b53bc <_Z15getPositionDatav+0x254>)
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b5248:	ed83 0a00 	vstr	s0, [r3]
            if(travelHeading > 0){
   b524c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b5250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                if(compassHeading > 0){
   b5254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
            if(travelHeading > 0){
   b5258:	dd6d      	ble.n	b5336 <_Z15getPositionDatav+0x1ce>
                if(compassHeading > 0){
   b525a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b525e:	dd04      	ble.n	b526a <_Z15getPositionDatav+0x102>
                    targetDelta = travelHeading - compassHeading;
   b5260:	ee38 8a67 	vsub.f32	s16, s16, s15
   b5264:	ed84 8a00 	vstr	s16, [r4]
   b5268:	e02b      	b.n	b52c2 <_Z15getPositionDatav+0x15a>
                    float diff = -(180.0 - travelHeading);
   b526a:	ee78 8ac8 	vsub.f32	s17, s17, s16
   b526e:	eef1 8a68 	vneg.f32	s17, s17
                    if(diff < compassHeading) targetDelta = travelHeading - compassHeading;
   b5272:	eef4 7ae8 	vcmpe.f32	s15, s17
   b5276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b527a:	dcf1      	bgt.n	b5260 <_Z15getPositionDatav+0xf8>
                    else targetDelta = 0 - (180.0 + compassHeading) - (180.0 - travelHeading);
   b527c:	ee17 0a90 	vmov	r0, s15
   b5280:	f00e f99a 	bl	c35b8 <__aeabi_f2d>
   b5284:	4b4e      	ldr	r3, [pc, #312]	; (b53c0 <_Z15getPositionDatav+0x258>)
   b5286:	2200      	movs	r2, #0
   b5288:	f00e f838 	bl	c32fc <__adddf3>
   b528c:	4602      	mov	r2, r0
   b528e:	460b      	mov	r3, r1
   b5290:	2000      	movs	r0, #0
   b5292:	2100      	movs	r1, #0
   b5294:	f00e f830 	bl	c32f8 <__aeabi_dsub>
   b5298:	4680      	mov	r8, r0
   b529a:	ee18 0a10 	vmov	r0, s16
   b529e:	4689      	mov	r9, r1
   b52a0:	f00e f98a 	bl	c35b8 <__aeabi_f2d>
   b52a4:	4602      	mov	r2, r0
   b52a6:	460b      	mov	r3, r1
   b52a8:	2000      	movs	r0, #0
   b52aa:	4945      	ldr	r1, [pc, #276]	; (b53c0 <_Z15getPositionDatav+0x258>)
   b52ac:	f00e f824 	bl	c32f8 <__aeabi_dsub>
   b52b0:	4602      	mov	r2, r0
   b52b2:	460b      	mov	r3, r1
   b52b4:	4640      	mov	r0, r8
   b52b6:	4649      	mov	r1, r9
   b52b8:	f00e f81e 	bl	c32f8 <__aeabi_dsub>
                    else targetDelta = (180.0 - compassHeading) + (180.0 + travelHeading);
   b52bc:	f00e fccc 	bl	c3c58 <__aeabi_d2f>
   b52c0:	6020      	str	r0, [r4, #0]
   b52c2:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
   b52c6:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
   b52ca:	f00c fd1f 	bl	c1d0c <atan2f>
   b52ce:	ee10 0a10 	vmov	r0, s0
            sprintf(tempbuf,"Raw : %f, Compass : %f, Travel hd: %f, T Delta: %f", atan2(event.magnetic.y, event.magnetic.x) * 180.0 / M_PI, compassHeading, travelHeading, targetDelta);
   b52d2:	f00e f971 	bl	c35b8 <__aeabi_f2d>
   b52d6:	4b3a      	ldr	r3, [pc, #232]	; (b53c0 <_Z15getPositionDatav+0x258>)
   b52d8:	2200      	movs	r2, #0
   b52da:	f00e f9c5 	bl	c3668 <__aeabi_dmul>
   b52de:	a328      	add	r3, pc, #160	; (adr r3, b5380 <_Z15getPositionDatav+0x218>)
   b52e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b52e4:	f00e faea 	bl	c38bc <__aeabi_ddiv>
   b52e8:	4602      	mov	r2, r0
   b52ea:	460b      	mov	r3, r1
   b52ec:	6820      	ldr	r0, [r4, #0]
   b52ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b52f2:	f00e f961 	bl	c35b8 <__aeabi_f2d>
   b52f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b52fa:	6830      	ldr	r0, [r6, #0]
   b52fc:	f00e f95c 	bl	c35b8 <__aeabi_f2d>
   b5300:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5304:	6828      	ldr	r0, [r5, #0]
   b5306:	f00e f957 	bl	c35b8 <__aeabi_f2d>
   b530a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b530e:	e9cd 0100 	strd	r0, r1, [sp]
   b5312:	492c      	ldr	r1, [pc, #176]	; (b53c4 <_Z15getPositionDatav+0x25c>)
   b5314:	a811      	add	r0, sp, #68	; 0x44
   b5316:	f008 fc37 	bl	bdb88 <sprintf>
            printBLE(tempbuf);
   b531a:	a811      	add	r0, sp, #68	; 0x44
   b531c:	f7ff ff04 	bl	b5128 <_Z8printBLEPKc>
            Serial.println(tempbuf);
   b5320:	f00b fe40 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b5324:	a911      	add	r1, sp, #68	; 0x44
   b5326:	f00a f93a 	bl	bf59e <_ZN5Print7printlnEPKc>
}
   b532a:	2001      	movs	r0, #1
   b532c:	b02b      	add	sp, #172	; 0xac
   b532e:	ecbd 8b02 	vpop	{d8}
   b5332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if(compassHeading > 0){
   b5336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b533a:	dd91      	ble.n	b5260 <_Z15getPositionDatav+0xf8>
                    float diff = 180.0 + travelHeading;
   b533c:	ee78 8a28 	vadd.f32	s17, s16, s17
                    if(diff > compassHeading) targetDelta = travelHeading - compassHeading;
   b5340:	eef4 7ae8 	vcmpe.f32	s15, s17
   b5344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5348:	d48a      	bmi.n	b5260 <_Z15getPositionDatav+0xf8>
                    else targetDelta = (180.0 - compassHeading) + (180.0 + travelHeading);
   b534a:	ee17 0a90 	vmov	r0, s15
   b534e:	f00e f933 	bl	c35b8 <__aeabi_f2d>
   b5352:	4602      	mov	r2, r0
   b5354:	460b      	mov	r3, r1
   b5356:	2000      	movs	r0, #0
   b5358:	4919      	ldr	r1, [pc, #100]	; (b53c0 <_Z15getPositionDatav+0x258>)
   b535a:	f00d ffcd 	bl	c32f8 <__aeabi_dsub>
   b535e:	4680      	mov	r8, r0
   b5360:	ee18 0a10 	vmov	r0, s16
   b5364:	4689      	mov	r9, r1
   b5366:	f00e f927 	bl	c35b8 <__aeabi_f2d>
   b536a:	4b15      	ldr	r3, [pc, #84]	; (b53c0 <_Z15getPositionDatav+0x258>)
   b536c:	2200      	movs	r2, #0
   b536e:	f00d ffc5 	bl	c32fc <__adddf3>
   b5372:	4602      	mov	r2, r0
   b5374:	460b      	mov	r3, r1
   b5376:	4640      	mov	r0, r8
   b5378:	4649      	mov	r1, r9
   b537a:	f00d ffbf 	bl	c32fc <__adddf3>
   b537e:	e79d      	b.n	b52bc <_Z15getPositionDatav+0x154>
   b5380:	54442d18 	.word	0x54442d18
   b5384:	400921fb 	.word	0x400921fb
   b5388:	2003e5d4 	.word	0x2003e5d4
   b538c:	420f145e 	.word	0x420f145e
   b5390:	2003de30 	.word	0x2003de30
   b5394:	2003de50 	.word	0x2003de50
   b5398:	2003dde0 	.word	0x2003dde0
   b539c:	c29d58ff 	.word	0xc29d58ff
   b53a0:	420f1653 	.word	0x420f1653
   b53a4:	c29d5948 	.word	0xc29d5948
   b53a8:	c2b40000 	.word	0xc2b40000
   b53ac:	42b40000 	.word	0x42b40000
   b53b0:	43340000 	.word	0x43340000
   b53b4:	2003e5e0 	.word	0x2003e5e0
   b53b8:	2003e5dc 	.word	0x2003e5dc
   b53bc:	2003e5d0 	.word	0x2003e5d0
   b53c0:	40668000 	.word	0x40668000
   b53c4:	000c620e 	.word	0x000c620e
   b53c8:	2003e5d8 	.word	0x2003e5d8
   b53cc:	2003df08 	.word	0x2003df08

000b53d0 <_Z13sensorHandlerv>:
void sensorHandler(){
   b53d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){
   b53d4:	4da4      	ldr	r5, [pc, #656]	; (b5668 <_Z13sensorHandlerv+0x298>)
void sensorHandler(){
   b53d6:	b0ab      	sub	sp, #172	; 0xac
   b53d8:	f008 f856 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){
   b53dc:	682b      	ldr	r3, [r5, #0]
   b53de:	4283      	cmp	r3, r0
   b53e0:	f080 80f3 	bcs.w	b55ca <_Z13sensorHandlerv+0x1fa>
   b53e4:	f8df b2b0 	ldr.w	fp, [pc, #688]	; b5698 <_Z13sensorHandlerv+0x2c8>
   b53e8:	f89b 3000 	ldrb.w	r3, [fp]
   b53ec:	2b00      	cmp	r3, #0
   b53ee:	f000 80ec 	beq.w	b55ca <_Z13sensorHandlerv+0x1fa>
        Wire.requestFrom(PHADDR, 20, 1);
   b53f2:	f00c fa9f 	bl	c1934 <_Z19__fetch_global_Wirev>
   b53f6:	2301      	movs	r3, #1
   b53f8:	2214      	movs	r2, #20
   b53fa:	2163      	movs	r1, #99	; 0x63
   b53fc:	f00b ff17 	bl	c122e <_ZN7TwoWire11requestFromEhjh>
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b5400:	f00c fa98 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5404:	6803      	ldr	r3, [r0, #0]
   b5406:	695b      	ldr	r3, [r3, #20]
   b5408:	4798      	blx	r3
        int c = 0;
   b540a:	ac16      	add	r4, sp, #88	; 0x58
   b540c:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b540e:	f00c fa91 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5412:	6803      	ldr	r3, [r0, #0]
   b5414:	691b      	ldr	r3, [r3, #16]
   b5416:	4798      	blx	r3
   b5418:	b138      	cbz	r0, b542a <_Z13sensorHandlerv+0x5a>
            tempSense[c++] = Wire.read();
   b541a:	f00c fa8b 	bl	c1934 <_Z19__fetch_global_Wirev>
   b541e:	6803      	ldr	r3, [r0, #0]
   b5420:	695b      	ldr	r3, [r3, #20]
   b5422:	4798      	blx	r3
   b5424:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b5428:	e7f1      	b.n	b540e <_Z13sensorHandlerv+0x3e>
        sensePH = atof(tempSense);
   b542a:	4630      	mov	r0, r6
   b542c:	f00e fc88 	bl	c3d40 <atof>
   b5430:	ec51 0b10 	vmov	r0, r1, d0
   b5434:	f00e fc10 	bl	c3c58 <__aeabi_d2f>
   b5438:	f8df a260 	ldr.w	sl, [pc, #608]	; b569c <_Z13sensorHandlerv+0x2cc>
   b543c:	f8ca 0000 	str.w	r0, [sl]
        Wire.requestFrom(MCOND, 20, 1);
   b5440:	f00c fa78 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5444:	2301      	movs	r3, #1
   b5446:	2214      	movs	r2, #20
   b5448:	2164      	movs	r1, #100	; 0x64
   b544a:	f00b fef0 	bl	c122e <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b544e:	f00c fa71 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5452:	6803      	ldr	r3, [r0, #0]
   b5454:	695b      	ldr	r3, [r3, #20]
   b5456:	4798      	blx	r3
        c = 0;
   b5458:	ac1b      	add	r4, sp, #108	; 0x6c
   b545a:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b545c:	f00c fa6a 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5460:	6803      	ldr	r3, [r0, #0]
   b5462:	691b      	ldr	r3, [r3, #16]
   b5464:	4798      	blx	r3
   b5466:	b138      	cbz	r0, b5478 <_Z13sensorHandlerv+0xa8>
            mcondSense[c++] = Wire.read();
   b5468:	f00c fa64 	bl	c1934 <_Z19__fetch_global_Wirev>
   b546c:	6803      	ldr	r3, [r0, #0]
   b546e:	695b      	ldr	r3, [r3, #20]
   b5470:	4798      	blx	r3
   b5472:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b5476:	e7f1      	b.n	b545c <_Z13sensorHandlerv+0x8c>
        float senseMCond = atof(mcondSense);
   b5478:	4630      	mov	r0, r6
   b547a:	f00e fc61 	bl	c3d40 <atof>
        Wire.requestFrom(COND, 20, 1);
   b547e:	f00c fa59 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5482:	2301      	movs	r3, #1
   b5484:	2214      	movs	r2, #20
   b5486:	2165      	movs	r1, #101	; 0x65
   b5488:	f00b fed1 	bl	c122e <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b548c:	f00c fa52 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5490:	6803      	ldr	r3, [r0, #0]
   b5492:	695b      	ldr	r3, [r3, #20]
   b5494:	4798      	blx	r3
        c = 0;
   b5496:	ac20      	add	r4, sp, #128	; 0x80
   b5498:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b549a:	f00c fa4b 	bl	c1934 <_Z19__fetch_global_Wirev>
   b549e:	6803      	ldr	r3, [r0, #0]
   b54a0:	691b      	ldr	r3, [r3, #16]
   b54a2:	4798      	blx	r3
   b54a4:	b138      	cbz	r0, b54b6 <_Z13sensorHandlerv+0xe6>
            condSense[c++] = Wire.read();
   b54a6:	f00c fa45 	bl	c1934 <_Z19__fetch_global_Wirev>
   b54aa:	6803      	ldr	r3, [r0, #0]
   b54ac:	695b      	ldr	r3, [r3, #20]
   b54ae:	4798      	blx	r3
   b54b0:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b54b4:	e7f1      	b.n	b549a <_Z13sensorHandlerv+0xca>
        float senseCond = atof(condSense);
   b54b6:	4630      	mov	r0, r6
   b54b8:	f00e fc42 	bl	c3d40 <atof>
   b54bc:	ec59 8b10 	vmov	r8, r9, d0
        Wire.requestFrom(TEMPADDR, 20, 1);
   b54c0:	f00c fa38 	bl	c1934 <_Z19__fetch_global_Wirev>
   b54c4:	2301      	movs	r3, #1
   b54c6:	2214      	movs	r2, #20
   b54c8:	2166      	movs	r1, #102	; 0x66
   b54ca:	f00b feb0 	bl	c122e <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b54ce:	f00c fa31 	bl	c1934 <_Z19__fetch_global_Wirev>
   b54d2:	6803      	ldr	r3, [r0, #0]
   b54d4:	695b      	ldr	r3, [r3, #20]
   b54d6:	4798      	blx	r3
        c = 0;
   b54d8:	af25      	add	r7, sp, #148	; 0x94
   b54da:	463e      	mov	r6, r7
        while(Wire.available()){   // slave may send less than requested
   b54dc:	f00c fa2a 	bl	c1934 <_Z19__fetch_global_Wirev>
   b54e0:	6803      	ldr	r3, [r0, #0]
   b54e2:	691b      	ldr	r3, [r3, #16]
   b54e4:	4798      	blx	r3
   b54e6:	4604      	mov	r4, r0
   b54e8:	b138      	cbz	r0, b54fa <_Z13sensorHandlerv+0x12a>
            addrSense[c++] = Wire.read();
   b54ea:	f00c fa23 	bl	c1934 <_Z19__fetch_global_Wirev>
   b54ee:	6803      	ldr	r3, [r0, #0]
   b54f0:	695b      	ldr	r3, [r3, #20]
   b54f2:	4798      	blx	r3
   b54f4:	f807 0b01 	strb.w	r0, [r7], #1
        while(Wire.available()){   // slave may send less than requested
   b54f8:	e7f0      	b.n	b54dc <_Z13sensorHandlerv+0x10c>
        float senseTemp = atof(addrSense);
   b54fa:	4630      	mov	r0, r6
   b54fc:	f00e fc20 	bl	c3d40 <atof>
        if(logSensors){
   b5500:	4b5a      	ldr	r3, [pc, #360]	; (b566c <_Z13sensorHandlerv+0x29c>)
        dataWait = false;
   b5502:	f88b 4000 	strb.w	r4, [fp]
        if(logSensors){
   b5506:	781b      	ldrb	r3, [r3, #0]
        float senseTemp = atof(addrSense);
   b5508:	ec57 6b10 	vmov	r6, r7, d0
        if(logSensors){
   b550c:	2b00      	cmp	r3, #0
   b550e:	d05c      	beq.n	b55ca <_Z13sensorHandlerv+0x1fa>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5510:	f00b f906 	bl	c0720 <_ZN9TimeClass5monthEv>
   b5514:	9011      	str	r0, [sp, #68]	; 0x44
   b5516:	f00b f8f7 	bl	c0708 <_ZN9TimeClass3dayEv>
   b551a:	4604      	mov	r4, r0
   b551c:	f00b f908 	bl	c0730 <_ZN9TimeClass4yearEv>
   b5520:	4683      	mov	fp, r0
   b5522:	f00b f8cd 	bl	c06c0 <_ZN9TimeClass4hourEv>
   b5526:	9010      	str	r0, [sp, #64]	; 0x40
   b5528:	f00b f8d6 	bl	c06d8 <_ZN9TimeClass6minuteEv>
   b552c:	900f      	str	r0, [sp, #60]	; 0x3c
   b552e:	f00b f8df 	bl	c06f0 <_ZN9TimeClass6secondEv>
   b5532:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b5534:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b5536:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b5538:	9004      	str	r0, [sp, #16]
   b553a:	e9cd b201 	strd	fp, r2, [sp, #4]
   b553e:	9103      	str	r1, [sp, #12]
   b5540:	4a4b      	ldr	r2, [pc, #300]	; (b5670 <_Z13sensorHandlerv+0x2a0>)
   b5542:	9400      	str	r4, [sp, #0]
   b5544:	2110      	movs	r1, #16
   b5546:	a812      	add	r0, sp, #72	; 0x48
   b5548:	f008 fb2e 	bl	bdba8 <snprintf>
   b554c:	4849      	ldr	r0, [pc, #292]	; (b5674 <_Z13sensorHandlerv+0x2a4>)
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b554e:	7c03      	ldrb	r3, [r0, #16]
   b5550:	b92b      	cbnz	r3, b555e <_Z13sensorHandlerv+0x18e>
   b5552:	4949      	ldr	r1, [pc, #292]	; (b5678 <_Z13sensorHandlerv+0x2a8>)
   b5554:	f244 2202 	movw	r2, #16898	; 0x4202
   b5558:	3010      	adds	r0, #16
   b555a:	f7ff f825 	bl	b45a8 <_ZN7FatFile4openEPKci>
        float senseCond = atof(condSense);
   b555e:	4649      	mov	r1, r9
   b5560:	4640      	mov	r0, r8
   b5562:	f00e fb79 	bl	c3c58 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b5566:	f00e f827 	bl	c35b8 <__aeabi_f2d>
   b556a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b556e:	4b43      	ldr	r3, [pc, #268]	; (b567c <_Z13sensorHandlerv+0x2ac>)
   b5570:	6818      	ldr	r0, [r3, #0]
   b5572:	f00e f821 	bl	c35b8 <__aeabi_f2d>
   b5576:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b557a:	4b41      	ldr	r3, [pc, #260]	; (b5680 <_Z13sensorHandlerv+0x2b0>)
   b557c:	6818      	ldr	r0, [r3, #0]
   b557e:	f00e f81b 	bl	c35b8 <__aeabi_f2d>
   b5582:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b5586:	f8da 0000 	ldr.w	r0, [sl]
   b558a:	f00e f815 	bl	c35b8 <__aeabi_f2d>
   b558e:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float senseTemp = atof(addrSense);
   b5592:	4639      	mov	r1, r7
   b5594:	4630      	mov	r0, r6
   b5596:	f00e fb5f 	bl	c3c58 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b559a:	f00e f80d 	bl	c35b8 <__aeabi_f2d>
   b559e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b55a2:	4b38      	ldr	r3, [pc, #224]	; (b5684 <_Z13sensorHandlerv+0x2b4>)
   b55a4:	6818      	ldr	r0, [r3, #0]
   b55a6:	f00e f807 	bl	c35b8 <__aeabi_f2d>
   b55aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b55ae:	4b36      	ldr	r3, [pc, #216]	; (b5688 <_Z13sensorHandlerv+0x2b8>)
   b55b0:	6818      	ldr	r0, [r3, #0]
   b55b2:	f00e f801 	bl	c35b8 <__aeabi_f2d>
   b55b6:	aa12      	add	r2, sp, #72	; 0x48
   b55b8:	e9cd 0100 	strd	r0, r1, [sp]
   b55bc:	4933      	ldr	r1, [pc, #204]	; (b568c <_Z13sensorHandlerv+0x2bc>)
   b55be:	482d      	ldr	r0, [pc, #180]	; (b5674 <_Z13sensorHandlerv+0x2a4>)
   b55c0:	f7fe feca 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            myFile.close();
   b55c4:	4832      	ldr	r0, [pc, #200]	; (b5690 <_Z13sensorHandlerv+0x2c0>)
   b55c6:	f001 fdc7 	bl	b7158 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){
   b55ca:	4c32      	ldr	r4, [pc, #200]	; (b5694 <_Z13sensorHandlerv+0x2c4>)
   b55cc:	f007 ff5c 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   b55d0:	6823      	ldr	r3, [r4, #0]
   b55d2:	4283      	cmp	r3, r0
   b55d4:	d244      	bcs.n	b5660 <_Z13sensorHandlerv+0x290>
   b55d6:	f007 ff57 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   b55da:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b55de:	6020      	str	r0, [r4, #0]
   b55e0:	f007 ff52 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   b55e4:	f200 3039 	addw	r0, r0, #825	; 0x339
   b55e8:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   b55ea:	f00c f9a3 	bl	c1934 <_Z19__fetch_global_Wirev>
   b55ee:	2163      	movs	r1, #99	; 0x63
   b55f0:	f00b fe36 	bl	c1260 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b55f4:	f00c f99e 	bl	c1934 <_Z19__fetch_global_Wirev>
   b55f8:	2172      	movs	r1, #114	; 0x72
   b55fa:	f7fe fe1d 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b55fe:	f00c f999 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5602:	f00b fe34 	bl	c126e <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   b5606:	f00c f995 	bl	c1934 <_Z19__fetch_global_Wirev>
   b560a:	2164      	movs	r1, #100	; 0x64
   b560c:	f00b fe28 	bl	c1260 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5610:	f00c f990 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5614:	2172      	movs	r1, #114	; 0x72
   b5616:	f7fe fe0f 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b561a:	f00c f98b 	bl	c1934 <_Z19__fetch_global_Wirev>
   b561e:	f00b fe26 	bl	c126e <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   b5622:	f00c f987 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5626:	2165      	movs	r1, #101	; 0x65
   b5628:	f00b fe1a 	bl	c1260 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b562c:	f00c f982 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5630:	2172      	movs	r1, #114	; 0x72
   b5632:	f7fe fe01 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b5636:	f00c f97d 	bl	c1934 <_Z19__fetch_global_Wirev>
   b563a:	f00b fe18 	bl	c126e <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   b563e:	f00c f979 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5642:	2166      	movs	r1, #102	; 0x66
   b5644:	f00b fe0c 	bl	c1260 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5648:	f00c f974 	bl	c1934 <_Z19__fetch_global_Wirev>
   b564c:	2172      	movs	r1, #114	; 0x72
   b564e:	f7fe fdf3 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b5652:	f00c f96f 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5656:	f00b fe0a 	bl	c126e <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b565a:	4b0f      	ldr	r3, [pc, #60]	; (b5698 <_Z13sensorHandlerv+0x2c8>)
   b565c:	2201      	movs	r2, #1
   b565e:	701a      	strb	r2, [r3, #0]
}
   b5660:	b02b      	add	sp, #172	; 0xac
   b5662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5666:	bf00      	nop
   b5668:	2003dde4 	.word	0x2003dde4
   b566c:	2003df05 	.word	0x2003df05
   b5670:	000c6241 	.word	0x000c6241
   b5674:	2003df2c 	.word	0x2003df2c
   b5678:	2003ddea 	.word	0x2003ddea
   b567c:	2003e578 	.word	0x2003e578
   b5680:	2003e574 	.word	0x2003e574
   b5684:	2003df08 	.word	0x2003df08
   b5688:	2003de30 	.word	0x2003de30
   b568c:	000c625a 	.word	0x000c625a
   b5690:	2003df3c 	.word	0x2003df3c
   b5694:	2003e580 	.word	0x2003e580
   b5698:	2003dde8 	.word	0x2003dde8
   b569c:	2003e57c 	.word	0x2003e57c

000b56a0 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b56a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b56a4:	4e3c      	ldr	r6, [pc, #240]	; (b5798 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b56a6:	f8df 8104 	ldr.w	r8, [pc, #260]	; b57ac <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b56aa:	f8df 9104 	ldr.w	r9, [pc, #260]	; b57b0 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b56ae:	b089      	sub	sp, #36	; 0x24
   b56b0:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b56b2:	f00c f903 	bl	c18bc <_Z22__fetch_global_Serial1v>
   b56b6:	6803      	ldr	r3, [r0, #0]
   b56b8:	691b      	ldr	r3, [r3, #16]
   b56ba:	4798      	blx	r3
   b56bc:	2800      	cmp	r0, #0
   b56be:	d066      	beq.n	b578e <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');
   b56c0:	f00c f8fc 	bl	c18bc <_Z22__fetch_global_Serial1v>
   b56c4:	220a      	movs	r2, #10
   b56c6:	4601      	mov	r1, r0
   b56c8:	4638      	mov	r0, r7
   b56ca:	f009 fff1 	bl	bf6b0 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b56ce:	68bb      	ldr	r3, [r7, #8]
   b56d0:	3307      	adds	r3, #7
   b56d2:	f023 0307 	bic.w	r3, r3, #7
    }
   b56d6:	466d      	mov	r5, sp
        char buffer[data.length()];
   b56d8:	ebad 0d03 	sub.w	sp, sp, r3
   b56dc:	46ea      	mov	sl, sp
   b56de:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b56e0:	68b9      	ldr	r1, [r7, #8]
   b56e2:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b56e6:	458b      	cmp	fp, r1
   b56e8:	f103 0401 	add.w	r4, r3, #1
   b56ec:	d207      	bcs.n	b56fe <_Z11XBeeHandlerv+0x5e>
   b56ee:	4659      	mov	r1, fp
   b56f0:	4638      	mov	r0, r7
   b56f2:	f008 fd77 	bl	be1e4 <_ZNK6String6charAtEj>
   b56f6:	4623      	mov	r3, r4
   b56f8:	f80a 000b 	strb.w	r0, [sl, fp]
   b56fc:	e7f0      	b.n	b56e0 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b56fe:	2901      	cmp	r1, #1
   b5700:	d90a      	bls.n	b5718 <_Z11XBeeHandlerv+0x78>
   b5702:	3901      	subs	r1, #1
   b5704:	4638      	mov	r0, r7
   b5706:	f008 fd6d 	bl	be1e4 <_ZNK6String6charAtEj>
   b570a:	280d      	cmp	r0, #13
   b570c:	bf01      	itttt	eq
   b570e:	68bb      	ldreq	r3, [r7, #8]
   b5710:	4453      	addeq	r3, sl
   b5712:	2200      	moveq	r2, #0
   b5714:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b5718:	2201      	movs	r2, #1
   b571a:	2102      	movs	r1, #2
   b571c:	4650      	mov	r0, sl
   b571e:	f7fe fff5 	bl	b470c <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b5722:	f00b fc3f 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b5726:	4631      	mov	r1, r6
   b5728:	f009 ff39 	bl	bf59e <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b572c:	f00b fc3a 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b5730:	6839      	ldr	r1, [r7, #0]
   b5732:	f009 ff34 	bl	bf59e <_ZN5Print7printlnEPKc>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b5736:	f89a 3000 	ldrb.w	r3, [sl]
   b573a:	3b42      	subs	r3, #66	; 0x42
   b573c:	2b01      	cmp	r3, #1
   b573e:	d803      	bhi.n	b5748 <_Z11XBeeHandlerv+0xa8>
   b5740:	f007 fea2 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   b5744:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b5748:	f899 3000 	ldrb.w	r3, [r9]
   b574c:	b1d3      	cbz	r3, b5784 <_Z11XBeeHandlerv+0xe4>
   b574e:	4813      	ldr	r0, [pc, #76]	; (b579c <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5750:	7c03      	ldrb	r3, [r0, #16]
   b5752:	b92b      	cbnz	r3, b5760 <_Z11XBeeHandlerv+0xc0>
   b5754:	4912      	ldr	r1, [pc, #72]	; (b57a0 <_Z11XBeeHandlerv+0x100>)
   b5756:	f244 2202 	movw	r2, #16898	; 0x4202
   b575a:	3010      	adds	r0, #16
   b575c:	f7fe ff24 	bl	b45a8 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5760:	4639      	mov	r1, r7
   b5762:	f107 0010 	add.w	r0, r7, #16
   b5766:	f008 fcf3 	bl	be150 <_ZN6StringC1ERKS_>
   b576a:	490e      	ldr	r1, [pc, #56]	; (b57a4 <_Z11XBeeHandlerv+0x104>)
   b576c:	480b      	ldr	r0, [pc, #44]	; (b579c <_Z11XBeeHandlerv+0xfc>)
   b576e:	f107 0210 	add.w	r2, r7, #16
   b5772:	f7fe fdf1 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b5776:	f107 0010 	add.w	r0, r7, #16
   b577a:	f008 fc53 	bl	be024 <_ZN6StringD1Ev>
            logFile.close();
   b577e:	480a      	ldr	r0, [pc, #40]	; (b57a8 <_Z11XBeeHandlerv+0x108>)
   b5780:	f001 fcea 	bl	b7158 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5784:	4638      	mov	r0, r7
   b5786:	f008 fc4d 	bl	be024 <_ZN6StringD1Ev>
   b578a:	46ad      	mov	sp, r5
    while(Serial1.available()){
   b578c:	e791      	b.n	b56b2 <_Z11XBeeHandlerv+0x12>
}
   b578e:	3724      	adds	r7, #36	; 0x24
   b5790:	46bd      	mov	sp, r7
   b5792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5796:	bf00      	nop
   b5798:	000c6272 	.word	0x000c6272
   b579c:	2003deac 	.word	0x2003deac
   b57a0:	2003de08 	.word	0x2003de08
   b57a4:	000c6284 	.word	0x000c6284
   b57a8:	2003debc 	.word	0x2003debc
   b57ac:	2003ddb8 	.word	0x2003ddb8
   b57b0:	2003df04 	.word	0x2003df04

000b57b4 <_Z13dataOffloaderv>:
void dataOffloader(){
   b57b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b57b8:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b57ba:	f00b fbf3 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b57be:	4961      	ldr	r1, [pc, #388]	; (b5944 <_Z13dataOffloaderv+0x190>)
   b57c0:	f009 feed 	bl	bf59e <_ZN5Print7printlnEPKc>
    if (!logDir.open("/")) {
   b57c4:	4960      	ldr	r1, [pc, #384]	; (b5948 <_Z13dataOffloaderv+0x194>)
   b57c6:	4861      	ldr	r0, [pc, #388]	; (b594c <_Z13dataOffloaderv+0x198>)
   b57c8:	2200      	movs	r2, #0
   b57ca:	f7fe feed 	bl	b45a8 <_ZN7FatFile4openEPKci>
   b57ce:	b948      	cbnz	r0, b57e4 <_Z13dataOffloaderv+0x30>
        offloadMode = false;
   b57d0:	4b5f      	ldr	r3, [pc, #380]	; (b5950 <_Z13dataOffloaderv+0x19c>)
   b57d2:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b57d4:	f00b fbe6 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b57d8:	495e      	ldr	r1, [pc, #376]	; (b5954 <_Z13dataOffloaderv+0x1a0>)
}
   b57da:	b02d      	add	sp, #180	; 0xb4
   b57dc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b57e0:	f009 bedd 	b.w	bf59e <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b57e4:	f00b fbde 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b57e8:	495b      	ldr	r1, [pc, #364]	; (b5958 <_Z13dataOffloaderv+0x1a4>)
        BLE.advertise(&advData);;
   b57ea:	4d5c      	ldr	r5, [pc, #368]	; (b595c <_Z13dataOffloaderv+0x1a8>)
    Serial.println("Waiting for CCHub connection...");
   b57ec:	f009 fed7 	bl	bf59e <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b57f0:	f009 f846 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b57f4:	f009 f8a2 	bl	be93c <_ZNK8particle14BleLocalDevice9connectedEv>
   b57f8:	4604      	mov	r4, r0
   b57fa:	b948      	cbnz	r0, b5810 <_Z13dataOffloaderv+0x5c>
        BLE.advertise(&advData);;
   b57fc:	f009 f840 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5800:	4622      	mov	r2, r4
   b5802:	4629      	mov	r1, r5
   b5804:	f009 f8ed 	bl	be9e2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b5808:	200a      	movs	r0, #10
   b580a:	f00a ffb3 	bl	c0774 <delay>
    while(!BLE.connected()){
   b580e:	e7ef      	b.n	b57f0 <_Z13dataOffloaderv+0x3c>
    Serial.println("Starting transfer...");
   b5810:	f00b fbc8 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b5814:	4952      	ldr	r1, [pc, #328]	; (b5960 <_Z13dataOffloaderv+0x1ac>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5816:	4f4d      	ldr	r7, [pc, #308]	; (b594c <_Z13dataOffloaderv+0x198>)
   b5818:	4d52      	ldr	r5, [pc, #328]	; (b5964 <_Z13dataOffloaderv+0x1b0>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b581a:	f8df 816c 	ldr.w	r8, [pc, #364]	; b5988 <_Z13dataOffloaderv+0x1d4>
    Serial.println("Starting transfer...");
   b581e:	f009 febe 	bl	bf59e <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5822:	2200      	movs	r2, #0
   b5824:	4639      	mov	r1, r7
   b5826:	4628      	mov	r0, r5
   b5828:	f001 fc23 	bl	b7072 <_ZN7FatFile8openNextEPS_i>
   b582c:	b1f8      	cbz	r0, b586e <_Z13dataOffloaderv+0xba>
   b582e:	f009 f827 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5832:	f009 f883 	bl	be93c <_ZNK8particle14BleLocalDevice9connectedEv>
   b5836:	b1d0      	cbz	r0, b586e <_Z13dataOffloaderv+0xba>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b5838:	221e      	movs	r2, #30
   b583a:	a901      	add	r1, sp, #4
   b583c:	4628      	mov	r0, r5
   b583e:	f000 fe7c 	bl	b653a <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5842:	f00b fbaf 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b5846:	4641      	mov	r1, r8
   b5848:	aa01      	add	r2, sp, #4
   b584a:	f7fe fd85 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b584e:	a801      	add	r0, sp, #4
   b5850:	f00e fb49 	bl	c3ee6 <strlen>
   b5854:	ab01      	add	r3, sp, #4
   b5856:	3804      	subs	r0, #4
   b5858:	4418      	add	r0, r3
   b585a:	f00e fb4d 	bl	c3ef8 <strlwr>
   b585e:	4942      	ldr	r1, [pc, #264]	; (b5968 <_Z13dataOffloaderv+0x1b4>)
   b5860:	f00e fba3 	bl	c3faa <strstr>
   b5864:	b9d8      	cbnz	r0, b589e <_Z13dataOffloaderv+0xea>
            myFile.close();
   b5866:	4628      	mov	r0, r5
   b5868:	f001 fc76 	bl	b7158 <_ZN7FatFile5closeEv>
   b586c:	e7d9      	b.n	b5822 <_Z13dataOffloaderv+0x6e>
    logDir.close();
   b586e:	4837      	ldr	r0, [pc, #220]	; (b594c <_Z13dataOffloaderv+0x198>)
   b5870:	f001 fc72 	bl	b7158 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5874:	2226      	movs	r2, #38	; 0x26
   b5876:	2100      	movs	r1, #0
   b5878:	a809      	add	r0, sp, #36	; 0x24
   b587a:	f00e faa9 	bl	c3dd0 <memset>
    strcpy(fileCode,"filedone");
   b587e:	493b      	ldr	r1, [pc, #236]	; (b596c <_Z13dataOffloaderv+0x1b8>)
   b5880:	a809      	add	r0, sp, #36	; 0x24
   b5882:	f00e fb0b 	bl	c3e9c <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b5886:	2300      	movs	r3, #0
   b5888:	2226      	movs	r2, #38	; 0x26
   b588a:	a909      	add	r1, sp, #36	; 0x24
   b588c:	4838      	ldr	r0, [pc, #224]	; (b5970 <_Z13dataOffloaderv+0x1bc>)
   b588e:	f008 fee7 	bl	be660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b5892:	4b2f      	ldr	r3, [pc, #188]	; (b5950 <_Z13dataOffloaderv+0x19c>)
   b5894:	2200      	movs	r2, #0
   b5896:	701a      	strb	r2, [r3, #0]
}
   b5898:	b02d      	add	sp, #180	; 0xb4
   b589a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b589e:	2226      	movs	r2, #38	; 0x26
   b58a0:	2100      	movs	r1, #0
   b58a2:	a809      	add	r0, sp, #36	; 0x24
   b58a4:	f00e fa94 	bl	c3dd0 <memset>
            strcpy(fileCode,"filename");
   b58a8:	4932      	ldr	r1, [pc, #200]	; (b5974 <_Z13dataOffloaderv+0x1c0>)
            while(myFile.available()){
   b58aa:	4e33      	ldr	r6, [pc, #204]	; (b5978 <_Z13dataOffloaderv+0x1c4>)
   b58ac:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b5970 <_Z13dataOffloaderv+0x1bc>
            strcpy(fileCode,"filename");
   b58b0:	a809      	add	r0, sp, #36	; 0x24
   b58b2:	f00e faf3 	bl	c3e9c <strcpy>
            strcat(fileCode,namebuf);
   b58b6:	a901      	add	r1, sp, #4
   b58b8:	a809      	add	r0, sp, #36	; 0x24
   b58ba:	f00e fabf 	bl	c3e3c <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b58be:	f00b fb71 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b58c2:	492e      	ldr	r1, [pc, #184]	; (b597c <_Z13dataOffloaderv+0x1c8>)
   b58c4:	aa09      	add	r2, sp, #36	; 0x24
   b58c6:	f7fe fd47 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b58ca:	2300      	movs	r3, #0
   b58cc:	2226      	movs	r2, #38	; 0x26
   b58ce:	a909      	add	r1, sp, #36	; 0x24
   b58d0:	4827      	ldr	r0, [pc, #156]	; (b5970 <_Z13dataOffloaderv+0x1bc>)
   b58d2:	f008 fec5 	bl	be660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b58d6:	f00b fb65 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b58da:	4929      	ldr	r1, [pc, #164]	; (b5980 <_Z13dataOffloaderv+0x1cc>)
   b58dc:	aa01      	add	r2, sp, #4
   b58de:	f7fe fd3b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b58e2:	2096      	movs	r0, #150	; 0x96
   b58e4:	f00a ff46 	bl	c0774 <delay>
            noInterrupts();
   b58e8:	f00b fb82 	bl	c0ff0 <_Z12noInterruptsv>
            while(myFile.available()){
   b58ec:	4630      	mov	r0, r6
   b58ee:	f7fe fbf6 	bl	b40de <_ZN4File9availableEv>
   b58f2:	4604      	mov	r4, r0
   b58f4:	b188      	cbz	r0, b591a <_Z13dataOffloaderv+0x166>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b58f6:	2264      	movs	r2, #100	; 0x64
   b58f8:	2100      	movs	r1, #0
   b58fa:	a813      	add	r0, sp, #76	; 0x4c
   b58fc:	f00e fa68 	bl	c3dd0 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b5900:	aa13      	add	r2, sp, #76	; 0x4c
   b5902:	2364      	movs	r3, #100	; 0x64
   b5904:	210d      	movs	r1, #13
   b5906:	4630      	mov	r0, r6
   b5908:	f009 feb9 	bl	bf67e <_ZN6Stream14readBytesUntilEcPcj>
   b590c:	2300      	movs	r3, #0
   b590e:	2264      	movs	r2, #100	; 0x64
   b5910:	a913      	add	r1, sp, #76	; 0x4c
   b5912:	4648      	mov	r0, r9
   b5914:	f008 fea4 	bl	be660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b5918:	e7e8      	b.n	b58ec <_Z13dataOffloaderv+0x138>
            interrupts();
   b591a:	f00b fb6b 	bl	c0ff4 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b591e:	2226      	movs	r2, #38	; 0x26
   b5920:	4621      	mov	r1, r4
   b5922:	a809      	add	r0, sp, #36	; 0x24
   b5924:	f00e fa54 	bl	c3dd0 <memset>
            strcpy(fileCode,"filecomp");
   b5928:	4916      	ldr	r1, [pc, #88]	; (b5984 <_Z13dataOffloaderv+0x1d0>)
   b592a:	a809      	add	r0, sp, #36	; 0x24
   b592c:	f00e fab6 	bl	c3e9c <strcpy>
   b5930:	4623      	mov	r3, r4
   b5932:	2226      	movs	r2, #38	; 0x26
   b5934:	a909      	add	r1, sp, #36	; 0x24
   b5936:	480e      	ldr	r0, [pc, #56]	; (b5970 <_Z13dataOffloaderv+0x1bc>)
   b5938:	f008 fe92 	bl	be660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b593c:	2096      	movs	r0, #150	; 0x96
   b593e:	f00a ff19 	bl	c0774 <delay>
   b5942:	e790      	b.n	b5866 <_Z13dataOffloaderv+0xb2>
   b5944:	000c62a5 	.word	0x000c62a5
   b5948:	000c62c2 	.word	0x000c62c2
   b594c:	2003de88 	.word	0x2003de88
   b5950:	2003e0e0 	.word	0x2003e0e0
   b5954:	000c62c4 	.word	0x000c62c4
   b5958:	000c62f1 	.word	0x000c62f1
   b595c:	2003ddc0 	.word	0x2003ddc0
   b5960:	000c6311 	.word	0x000c6311
   b5964:	2003df3c 	.word	0x2003df3c
   b5968:	000c634f 	.word	0x000c634f
   b596c:	000c6354 	.word	0x000c6354
   b5970:	2003e0d8 	.word	0x2003e0d8
   b5974:	000c635d 	.word	0x000c635d
   b5978:	2003df2c 	.word	0x2003df2c
   b597c:	000c6366 	.word	0x000c6366
   b5980:	000c6379 	.word	0x000c6379
   b5984:	000c63a1 	.word	0x000c63a1
   b5988:	000c6326 	.word	0x000c6326

000b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b598c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b598e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5990:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5992:	b17c      	cbz	r4, b59b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5994:	6863      	ldr	r3, [r4, #4]
   b5996:	3b01      	subs	r3, #1
   b5998:	6063      	str	r3, [r4, #4]
   b599a:	b95b      	cbnz	r3, b59b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b599c:	6823      	ldr	r3, [r4, #0]
   b599e:	4620      	mov	r0, r4
   b59a0:	689b      	ldr	r3, [r3, #8]
   b59a2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b59a4:	68a3      	ldr	r3, [r4, #8]
   b59a6:	3b01      	subs	r3, #1
   b59a8:	60a3      	str	r3, [r4, #8]
   b59aa:	b91b      	cbnz	r3, b59b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b59ac:	6823      	ldr	r3, [r4, #0]
   b59ae:	4620      	mov	r0, r4
   b59b0:	68db      	ldr	r3, [r3, #12]
   b59b2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b59b4:	4628      	mov	r0, r5
   b59b6:	bd38      	pop	{r3, r4, r5, pc}

000b59b8 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b59b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b59bc:	b084      	sub	sp, #16
   b59be:	af02      	add	r7, sp, #8
   b59c0:	4680      	mov	r8, r0
   b59c2:	4691      	mov	r9, r2
   b59c4:	461e      	mov	r6, r3
   b59c6:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b59c8:	f00e fa8d 	bl	c3ee6 <strlen>
   b59cc:	3009      	adds	r0, #9
   b59ce:	f020 0107 	bic.w	r1, r0, #7
   b59d2:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b59d6:	4640      	mov	r0, r8
   b59d8:	f00e fa85 	bl	c3ee6 <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b59dc:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b59e0:	4925      	ldr	r1, [pc, #148]	; (b5a78 <_Z8sendDataPKchbbb+0xc0>)
    char outStr[strlen(dataOut)+2];
   b59e2:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b59e4:	4603      	mov	r3, r0
   b59e6:	4642      	mov	r2, r8
   b59e8:	4620      	mov	r0, r4
   b59ea:	f008 f8cd 	bl	bdb88 <sprintf>
    if(sendLTE || sendMode == 4){
   b59ee:	f1ba 0f00 	cmp.w	sl, #0
   b59f2:	d101      	bne.n	b59f8 <_Z8sendDataPKchbbb+0x40>
   b59f4:	2d04      	cmp	r5, #4
   b59f6:	d10c      	bne.n	b5a12 <_Z8sendDataPKchbbb+0x5a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b59f8:	4b20      	ldr	r3, [pc, #128]	; (b5a7c <_Z8sendDataPKchbbb+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b59fa:	4921      	ldr	r1, [pc, #132]	; (b5a80 <_Z8sendDataPKchbbb+0xc8>)
   b59fc:	781b      	ldrb	r3, [r3, #0]
   b59fe:	f88d 3000 	strb.w	r3, [sp]
   b5a02:	4638      	mov	r0, r7
   b5a04:	233c      	movs	r3, #60	; 0x3c
   b5a06:	4622      	mov	r2, r4
   b5a08:	f00b f886 	bl	c0b18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5a0c:	1d38      	adds	r0, r7, #4
   b5a0e:	f7ff ffbd 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b5a12:	f1b9 0f00 	cmp.w	r9, #0
   b5a16:	d101      	bne.n	b5a1c <_Z8sendDataPKchbbb+0x64>
   b5a18:	2d01      	cmp	r5, #1
   b5a1a:	d121      	bne.n	b5a60 <_Z8sendDataPKchbbb+0xa8>
   b5a1c:	f008 ff30 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5a20:	f008 ff8c 	bl	be93c <_ZNK8particle14BleLocalDevice9connectedEv>
   b5a24:	b1e0      	cbz	r0, b5a60 <_Z8sendDataPKchbbb+0xa8>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5a26:	4620      	mov	r0, r4
   b5a28:	f00e fa5d 	bl	c3ee6 <strlen>
   b5a2c:	3007      	adds	r0, #7
   b5a2e:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5a32:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b5a34:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5a38:	4620      	mov	r0, r4
   b5a3a:	f00e fa54 	bl	c3ee6 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5a3e:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5a42:	4602      	mov	r2, r0
   b5a44:	4621      	mov	r1, r4
   b5a46:	4648      	mov	r0, r9
   b5a48:	f00e f99a 	bl	c3d80 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5a4c:	4620      	mov	r0, r4
   b5a4e:	f00e fa4a 	bl	c3ee6 <strlen>
   b5a52:	2300      	movs	r3, #0
   b5a54:	4602      	mov	r2, r0
   b5a56:	4649      	mov	r1, r9
   b5a58:	480a      	ldr	r0, [pc, #40]	; (b5a84 <_Z8sendDataPKchbbb+0xcc>)
   b5a5a:	f008 fe01 	bl	be660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5a5e:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b5a60:	b90e      	cbnz	r6, b5a66 <_Z8sendDataPKchbbb+0xae>
   b5a62:	2d02      	cmp	r5, #2
   b5a64:	d104      	bne.n	b5a70 <_Z8sendDataPKchbbb+0xb8>
        Serial1.println(outStr);
   b5a66:	f00b ff29 	bl	c18bc <_Z22__fetch_global_Serial1v>
   b5a6a:	4621      	mov	r1, r4
   b5a6c:	f009 fd97 	bl	bf59e <_ZN5Print7printlnEPKc>
}
   b5a70:	3708      	adds	r7, #8
   b5a72:	46bd      	mov	sp, r7
   b5a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5a78:	000c63aa 	.word	0x000c63aa
   b5a7c:	2003ddbc 	.word	0x2003ddbc
   b5a80:	000c63b1 	.word	0x000c63b1
   b5a84:	2003e5e4 	.word	0x2003e5e4

000b5a88 <_Z16sendResponseDatav>:
void sendResponseData(){
   b5a88:	b530      	push	{r4, r5, lr}
    if(requestActive){
   b5a8a:	4d27      	ldr	r5, [pc, #156]	; (b5b28 <_Z16sendResponseDatav+0xa0>)
   b5a8c:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b5a8e:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){
   b5a90:	2b00      	cmp	r3, #0
   b5a92:	d046      	beq.n	b5b22 <_Z16sendResponseDatav+0x9a>
        memset(responseStr,0,65);
   b5a94:	2241      	movs	r2, #65	; 0x41
   b5a96:	2100      	movs	r1, #0
   b5a98:	a80b      	add	r0, sp, #44	; 0x2c
   b5a9a:	f00e f999 	bl	c3dd0 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b5a9e:	4b23      	ldr	r3, [pc, #140]	; (b5b2c <_Z16sendResponseDatav+0xa4>)
   b5aa0:	9308      	str	r3, [sp, #32]
   b5aa2:	4b23      	ldr	r3, [pc, #140]	; (b5b30 <_Z16sendResponseDatav+0xa8>)
   b5aa4:	eddf 6a23 	vldr	s13, [pc, #140]	; b5b34 <_Z16sendResponseDatav+0xac>
   b5aa8:	ed93 7a00 	vldr	s14, [r3]
   b5aac:	4b22      	ldr	r3, [pc, #136]	; (b5b38 <_Z16sendResponseDatav+0xb0>)
   b5aae:	ee27 7a26 	vmul.f32	s14, s14, s13
        sendData(responseStr,requestActive,false,false,false);
   b5ab2:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b5ab4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b5ab8:	ed8d 7a07 	vstr	s14, [sp, #28]
   b5abc:	ed93 7a00 	vldr	s14, [r3]
   b5ac0:	4b1e      	ldr	r3, [pc, #120]	; (b5b3c <_Z16sendResponseDatav+0xb4>)
   b5ac2:	ee27 7a26 	vmul.f32	s14, s14, s13
   b5ac6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b5aca:	ed8d 7a06 	vstr	s14, [sp, #24]
   b5ace:	ed93 7a00 	vldr	s14, [r3]
   b5ad2:	4b1b      	ldr	r3, [pc, #108]	; (b5b40 <_Z16sendResponseDatav+0xb8>)
   b5ad4:	ee27 7a26 	vmul.f32	s14, s14, s13
   b5ad8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b5adc:	ed8d 7a05 	vstr	s14, [sp, #20]
   b5ae0:	edd3 7a00 	vldr	s15, [r3]
   b5ae4:	4b17      	ldr	r3, [pc, #92]	; (b5b44 <_Z16sendResponseDatav+0xbc>)
   b5ae6:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b5aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5aee:	edcd 7a04 	vstr	s15, [sp, #16]
   b5af2:	6818      	ldr	r0, [r3, #0]
   b5af4:	f00d fd60 	bl	c35b8 <__aeabi_f2d>
   b5af8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5afc:	4b12      	ldr	r3, [pc, #72]	; (b5b48 <_Z16sendResponseDatav+0xc0>)
   b5afe:	6818      	ldr	r0, [r3, #0]
   b5b00:	f00d fd5a 	bl	c35b8 <__aeabi_f2d>
   b5b04:	2201      	movs	r2, #1
   b5b06:	e9cd 0100 	strd	r0, r1, [sp]
   b5b0a:	4910      	ldr	r1, [pc, #64]	; (b5b4c <_Z16sendResponseDatav+0xc4>)
   b5b0c:	a80b      	add	r0, sp, #44	; 0x2c
   b5b0e:	f008 f83b 	bl	bdb88 <sprintf>
        sendData(responseStr,requestActive,false,false,false);
   b5b12:	7829      	ldrb	r1, [r5, #0]
   b5b14:	9400      	str	r4, [sp, #0]
   b5b16:	4623      	mov	r3, r4
   b5b18:	4622      	mov	r2, r4
   b5b1a:	a80b      	add	r0, sp, #44	; 0x2c
   b5b1c:	f7ff ff4c 	bl	b59b8 <_Z8sendDataPKchbbb>
        requestActive = 0;
   b5b20:	702c      	strb	r4, [r5, #0]
}
   b5b22:	b01d      	add	sp, #116	; 0x74
   b5b24:	bd30      	pop	{r4, r5, pc}
   b5b26:	bf00      	nop
   b5b28:	2003e0e1 	.word	0x2003e0e1
   b5b2c:	00010d88 	.word	0x00010d88
   b5b30:	2003e578 	.word	0x2003e578
   b5b34:	447a0000 	.word	0x447a0000
   b5b38:	2003e570 	.word	0x2003e570
   b5b3c:	2003e57c 	.word	0x2003e57c
   b5b40:	2003e574 	.word	0x2003e574
   b5b44:	2003df08 	.word	0x2003df08
   b5b48:	2003de30 	.word	0x2003de30
   b5b4c:	000c63b9 	.word	0x000c63b9

000b5b50 <_Z12statusUpdatev>:
void statusUpdate(){
   b5b50:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){
   b5b52:	4e2c      	ldr	r6, [pc, #176]	; (b5c04 <_Z12statusUpdatev+0xb4>)
   b5b54:	7833      	ldrb	r3, [r6, #0]
void statusUpdate(){
   b5b56:	b090      	sub	sp, #64	; 0x40
    if(statusReady){
   b5b58:	2b00      	cmp	r3, #0
   b5b5a:	d049      	beq.n	b5bf0 <_Z12statusUpdatev+0xa0>
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b5b5c:	4a2a      	ldr	r2, [pc, #168]	; (b5c08 <_Z12statusUpdatev+0xb8>)
   b5b5e:	4b2b      	ldr	r3, [pc, #172]	; (b5c0c <_Z12statusUpdatev+0xbc>)
   b5b60:	6810      	ldr	r0, [r2, #0]
   b5b62:	781b      	ldrb	r3, [r3, #0]
   b5b64:	9307      	str	r3, [sp, #28]
   b5b66:	f00d fd27 	bl	c35b8 <__aeabi_f2d>
   b5b6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5b6e:	4a28      	ldr	r2, [pc, #160]	; (b5c10 <_Z12statusUpdatev+0xc0>)
        Serial.println(LTEStatusCount);
   b5b70:	4c28      	ldr	r4, [pc, #160]	; (b5c14 <_Z12statusUpdatev+0xc4>)
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b5b72:	6810      	ldr	r0, [r2, #0]
   b5b74:	f00d fd20 	bl	c35b8 <__aeabi_f2d>
   b5b78:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5b7c:	4a26      	ldr	r2, [pc, #152]	; (b5c18 <_Z12statusUpdatev+0xc8>)
   b5b7e:	9b07      	ldr	r3, [sp, #28]
   b5b80:	7812      	ldrb	r2, [r2, #0]
   b5b82:	4926      	ldr	r1, [pc, #152]	; (b5c1c <_Z12statusUpdatev+0xcc>)
   b5b84:	9200      	str	r2, [sp, #0]
   b5b86:	a809      	add	r0, sp, #36	; 0x24
   b5b88:	2201      	movs	r2, #1
   b5b8a:	f007 fffd 	bl	bdb88 <sprintf>
        Serial.println(updateStr);
   b5b8e:	f00b fa09 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b5b92:	a909      	add	r1, sp, #36	; 0x24
   b5b94:	f009 fd03 	bl	bf59e <_ZN5Print7printlnEPKc>
        Serial.println(LTEStatusCount);
   b5b98:	f00b fa04 	bl	c0fa4 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5b9c:	8821      	ldrh	r1, [r4, #0]
   b5b9e:	4605      	mov	r5, r0
   b5ba0:	220a      	movs	r2, #10
   b5ba2:	f009 fd08 	bl	bf5b6 <_ZN5Print11printNumberEmh>
        n += println();
   b5ba6:	4628      	mov	r0, r5
   b5ba8:	f009 fced 	bl	bf586 <_ZN5Print7printlnEv>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   b5bac:	4b1c      	ldr	r3, [pc, #112]	; (b5c20 <_Z12statusUpdatev+0xd0>)
   b5bae:	781b      	ldrb	r3, [r3, #0]
   b5bb0:	bb03      	cbnz	r3, b5bf4 <_Z12statusUpdatev+0xa4>
   b5bb2:	4b1c      	ldr	r3, [pc, #112]	; (b5c24 <_Z12statusUpdatev+0xd4>)
   b5bb4:	781b      	ldrb	r3, [r3, #0]
   b5bb6:	b9eb      	cbnz	r3, b5bf4 <_Z12statusUpdatev+0xa4>
   b5bb8:	8823      	ldrh	r3, [r4, #0]
   b5bba:	b1f3      	cbz	r3, b5bfa <_Z12statusUpdatev+0xaa>
   b5bbc:	f013 0303 	ands.w	r3, r3, #3
   b5bc0:	d11b      	bne.n	b5bfa <_Z12statusUpdatev+0xaa>
            sendData(updateStr,0,false,false,true);
   b5bc2:	2201      	movs	r2, #1
   b5bc4:	9200      	str	r2, [sp, #0]
   b5bc6:	4619      	mov	r1, r3
   b5bc8:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b5bca:	a809      	add	r0, sp, #36	; 0x24
   b5bcc:	f7ff fef4 	bl	b59b8 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;
   b5bd0:	8823      	ldrh	r3, [r4, #0]
   b5bd2:	b10b      	cbz	r3, b5bd8 <_Z12statusUpdatev+0x88>
   b5bd4:	3b01      	subs	r3, #1
   b5bd6:	8023      	strh	r3, [r4, #0]
        statusReady = false;
   b5bd8:	2400      	movs	r4, #0
        delay(100);
   b5bda:	2064      	movs	r0, #100	; 0x64
        statusReady = false;
   b5bdc:	7034      	strb	r4, [r6, #0]
        delay(100);
   b5bde:	f00a fdc9 	bl	c0774 <delay>
        sendData("B1CCptsbigbot",0,true,false,false);
   b5be2:	4811      	ldr	r0, [pc, #68]	; (b5c28 <_Z12statusUpdatev+0xd8>)
   b5be4:	9400      	str	r4, [sp, #0]
   b5be6:	4623      	mov	r3, r4
   b5be8:	2201      	movs	r2, #1
   b5bea:	4621      	mov	r1, r4
   b5bec:	f7ff fee4 	bl	b59b8 <_Z8sendDataPKchbbb>
}
   b5bf0:	b010      	add	sp, #64	; 0x40
   b5bf2:	bd70      	pop	{r4, r5, r6, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;
   b5bf4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b5bf8:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b5bfa:	2100      	movs	r1, #0
   b5bfc:	2301      	movs	r3, #1
   b5bfe:	9100      	str	r1, [sp, #0]
   b5c00:	461a      	mov	r2, r3
   b5c02:	e7e2      	b.n	b5bca <_Z12statusUpdatev+0x7a>
   b5c04:	2003e5cc 	.word	0x2003e5cc
   b5c08:	2003df08 	.word	0x2003df08
   b5c0c:	2003ddd0 	.word	0x2003ddd0
   b5c10:	2003de30 	.word	0x2003de30
   b5c14:	2003dda6 	.word	0x2003dda6
   b5c18:	2003e5ac 	.word	0x2003e5ac
   b5c1c:	000c63dd 	.word	0x000c63dd
   b5c20:	2003dd74 	.word	0x2003dd74
   b5c24:	2003ddb4 	.word	0x2003ddb4
   b5c28:	000c63f6 	.word	0x000c63f6

000b5c2c <loop>:
void loop(){
   b5c2c:	b508      	push	{r3, lr}
    if(getPositionData()){
   b5c2e:	f7ff fa9b 	bl	b5168 <_Z15getPositionDatav>
    readPowerSys();
   b5c32:	f7fe ffcd 	bl	b4bd0 <_Z12readPowerSysv>
    sensorHandler();
   b5c36:	f7ff fbcb 	bl	b53d0 <_Z13sensorHandlerv>
    XBeeHandler();
   b5c3a:	f7ff fd31 	bl	b56a0 <_Z11XBeeHandlerv>
    statusUpdate();
   b5c3e:	f7ff ff87 	bl	b5b50 <_Z12statusUpdatev>
    updateMotors();
   b5c42:	f7ff fa49 	bl	b50d8 <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();
   b5c46:	4b06      	ldr	r3, [pc, #24]	; (b5c60 <loop+0x34>)
   b5c48:	781b      	ldrb	r3, [r3, #0]
   b5c4a:	b10b      	cbz	r3, b5c50 <loop+0x24>
   b5c4c:	f7ff fdb2 	bl	b57b4 <_Z13dataOffloaderv>
    sendResponseData();
   b5c50:	f7ff ff1a 	bl	b5a88 <_Z16sendResponseDatav>
}
   b5c54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(500);
   b5c58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5c5c:	f00a bd8a 	b.w	c0774 <delay>
   b5c60:	2003e0e0 	.word	0x2003e0e0

000b5c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5c64:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5c66:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5c6a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5c6c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5c6e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5c72:	42ae      	cmp	r6, r5
   b5c74:	d004      	beq.n	b5c80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5c76:	4628      	mov	r0, r5
   b5c78:	f008 f9d4 	bl	be024 <_ZN6StringD1Ev>
   b5c7c:	3514      	adds	r5, #20
   b5c7e:	e7f8      	b.n	b5c72 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5c80:	6820      	ldr	r0, [r4, #0]
   b5c82:	f007 ff71 	bl	bdb68 <free>
    AllocatorT::free(data_);
}
   b5c86:	4620      	mov	r0, r4
   b5c88:	bd70      	pop	{r4, r5, r6, pc}

000b5c8a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b5c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5c8c:	4616      	mov	r6, r2
   b5c8e:	b08f      	sub	sp, #60	; 0x3c
      : _M_ptr(0), _M_refcount()
   b5c90:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5c92:	e9c0 2200 	strd	r2, r2, [r0]
   b5c96:	4604      	mov	r4, r0
   b5c98:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b5c9a:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b5c9c:	4619      	mov	r1, r3
   b5c9e:	a804      	add	r0, sp, #16
   b5ca0:	f008 fca0 	bl	be5e4 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b5ca4:	9914      	ldr	r1, [sp, #80]	; 0x50
   b5ca6:	4638      	mov	r0, r7
   b5ca8:	f008 fc9c 	bl	be5e4 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5cac:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5cae:	9302      	str	r3, [sp, #8]
   b5cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b5cb2:	4620      	mov	r0, r4
   b5cb4:	e9cd 7300 	strd	r7, r3, [sp]
   b5cb8:	4632      	mov	r2, r6
   b5cba:	ab04      	add	r3, sp, #16
   b5cbc:	4629      	mov	r1, r5
   b5cbe:	f009 fa07 	bl	bf0d0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b5cc2:	4620      	mov	r0, r4
   b5cc4:	b00f      	add	sp, #60	; 0x3c
   b5cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5cc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5cc8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5cca:	4c0b      	ldr	r4, [pc, #44]	; (b5cf8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5ccc:	7821      	ldrb	r1, [r4, #0]
   b5cce:	f3bf 8f5b 	dmb	ish
   b5cd2:	f011 0101 	ands.w	r1, r1, #1
   b5cd6:	d10b      	bne.n	b5cf0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5cd8:	4620      	mov	r0, r4
   b5cda:	9101      	str	r1, [sp, #4]
   b5cdc:	f7fe f9f0 	bl	b40c0 <__cxa_guard_acquire>
   b5ce0:	9901      	ldr	r1, [sp, #4]
   b5ce2:	b128      	cbz	r0, b5cf0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5ce4:	4805      	ldr	r0, [pc, #20]	; (b5cfc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5ce6:	f008 f80b 	bl	bdd00 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5cea:	4620      	mov	r0, r4
   b5cec:	f7fe f9ed 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b5cf0:	4802      	ldr	r0, [pc, #8]	; (b5cfc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5cf2:	b002      	add	sp, #8
   b5cf4:	bd10      	pop	{r4, pc}
   b5cf6:	bf00      	nop
   b5cf8:	2003dd68 	.word	0x2003dd68
   b5cfc:	2003dd6c 	.word	0x2003dd6c

000b5d00 <_Z8setupSPIv>:
void setupSPI(){
   b5d00:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   b5d02:	f7ff ffe1 	bl	b5cc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5d0a:	2100      	movs	r1, #0
   b5d0c:	f008 f816 	bl	bdd3c <_ZN8SPIClass5beginE14hal_spi_mode_tt>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b5d10:	f7ff ffda 	bl	b5cc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b5d14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5d18:	4901      	ldr	r1, [pc, #4]	; (b5d20 <_Z8setupSPIv+0x20>)
   b5d1a:	2201      	movs	r2, #1
   b5d1c:	f008 b8ac 	b.w	bde78 <_ZN8SPIClass13setClockSpeedEjj>
   b5d20:	000f4240 	.word	0x000f4240

000b5d24 <setup>:
void setup(){
   b5d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b5d28:	48c1      	ldr	r0, [pc, #772]	; (b6030 <setup+0x30c>)
    setLSpeed = 90;
   b5d2a:	4ec2      	ldr	r6, [pc, #776]	; (b6034 <setup+0x310>)
   b5d2c:	7c03      	ldrb	r3, [r0, #16]
    setRSpeed = 90;
   b5d2e:	4dc2      	ldr	r5, [pc, #776]	; (b6038 <setup+0x314>)
   b5d30:	f003 0303 	and.w	r3, r3, #3
   b5d34:	f043 0378 	orr.w	r3, r3, #120	; 0x78
void setup(){
   b5d38:	b093      	sub	sp, #76	; 0x4c
   b5d3a:	7403      	strb	r3, [r0, #16]
    led_set_status_active(&d_, active, nullptr);
   b5d3c:	2200      	movs	r2, #0
   b5d3e:	2101      	movs	r1, #1
   b5d40:	3004      	adds	r0, #4
   b5d42:	f007 fe23 	bl	bd98c <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);
   b5d46:	2101      	movs	r1, #1
   b5d48:	2002      	movs	r0, #2
   b5d4a:	f00b fd5b 	bl	c1804 <pinMode>
    pinMode(PWR_EN, OUTPUT);
   b5d4e:	2101      	movs	r1, #1
   b5d50:	201c      	movs	r0, #28
   b5d52:	f00b fd57 	bl	c1804 <pinMode>
    pinMode(LEAK_DET, INPUT);
   b5d56:	2100      	movs	r1, #0
   b5d58:	201d      	movs	r0, #29
   b5d5a:	f00b fd53 	bl	c1804 <pinMode>
    digitalWrite(SENSE_EN,LOW);
   b5d5e:	2100      	movs	r1, #0
   b5d60:	2002      	movs	r0, #2
   b5d62:	f00b fd60 	bl	c1826 <digitalWrite>
    digitalWrite(PWR_EN,LOW);
   b5d66:	2100      	movs	r1, #0
   b5d68:	201c      	movs	r0, #28
    ESCL.attach(ESC_PWM_L,1000,2000);
   b5d6a:	2400      	movs	r4, #0
    digitalWrite(PWR_EN,LOW);
   b5d6c:	f00b fd5b 	bl	c1826 <digitalWrite>
    ESCL.attach(ESC_PWM_L,1000,2000);
   b5d70:	27b4      	movs	r7, #180	; 0xb4
   b5d72:	f007 fb89 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
    setLSpeed = 90;
   b5d76:	235a      	movs	r3, #90	; 0x5a
   b5d78:	7033      	strb	r3, [r6, #0]
    setRSpeed = 90;
   b5d7a:	702b      	strb	r3, [r5, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b5d7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5d80:	e9cd 4700 	strd	r4, r7, [sp]
   b5d84:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b5d88:	2106      	movs	r1, #6
   b5d8a:	48ac      	ldr	r0, [pc, #688]	; (b603c <setup+0x318>)
   b5d8c:	f008 f90c 	bl	bdfa8 <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b5d90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5d94:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b5d98:	e9cd 4700 	strd	r4, r7, [sp]
   b5d9c:	2105      	movs	r1, #5
   b5d9e:	48a8      	ldr	r0, [pc, #672]	; (b6040 <setup+0x31c>)
    logSensors = true;
   b5da0:	4fa8      	ldr	r7, [pc, #672]	; (b6044 <setup+0x320>)
    ESCR.attach(ESC_PWM_R,1000,2000);
   b5da2:	f008 f901 	bl	bdfa8 <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);
   b5da6:	7831      	ldrb	r1, [r6, #0]
   b5da8:	48a4      	ldr	r0, [pc, #656]	; (b603c <setup+0x318>)
    logMessages = true;
   b5daa:	4ea7      	ldr	r6, [pc, #668]	; (b6048 <setup+0x324>)
    ESCL.write(setLSpeed);
   b5dac:	f008 f8c0 	bl	bdf30 <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);
   b5db0:	7829      	ldrb	r1, [r5, #0]
   b5db2:	48a3      	ldr	r0, [pc, #652]	; (b6040 <setup+0x31c>)
   b5db4:	f008 f8bc 	bl	bdf30 <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b5db8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5dbc:	f00a fcda 	bl	c0774 <delay>
    BLE.on();
   b5dc0:	f008 fd5e 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5dc4:	f008 fda6 	bl	be914 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);          //Max transmitting power
   b5dc8:	f008 fd5a 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5dcc:	2108      	movs	r1, #8
   b5dce:	f008 fda8 	bl	be922 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin();
   b5dd2:	f00b f8e7 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b5dd6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5dda:	f00b f8d3 	bl	c0f84 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b5dde:	f00b fd6d 	bl	c18bc <_Z22__fetch_global_Serial1v>
   b5de2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5de6:	f00b f9a9 	bl	c113c <_ZN11USARTSerial5beginEm>
    setupSPI();                                 //Setup SPI for BeagleBone
   b5dea:	f7ff ff89 	bl	b5d00 <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   b5dee:	f7fe fea3 	bl	b4b38 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b5df2:	f7fe feb9 	bl	b4b68 <_Z8setupGPSv>
    setupLTE();                                 //Initialize LTE Flags
   b5df6:	f7fe fe8b 	bl	b4b10 <_Z8setupLTEv>
   b5dfa:	f007 fb45 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
    senseTimer = millis();
   b5dfe:	4b93      	ldr	r3, [pc, #588]	; (b604c <setup+0x328>)
   b5e00:	6018      	str	r0, [r3, #0]
   b5e02:	f007 fb41 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
    dataTimer = millis();
   b5e06:	4b92      	ldr	r3, [pc, #584]	; (b6050 <setup+0x32c>)
   b5e08:	6018      	str	r0, [r3, #0]
   b5e0a:	f007 fb3d 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
    lastStatusTime = millis();
   b5e0e:	4b91      	ldr	r3, [pc, #580]	; (b6054 <setup+0x330>)
   b5e10:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   b5e12:	4b91      	ldr	r3, [pc, #580]	; (b6058 <setup+0x334>)
   b5e14:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   b5e16:	4b91      	ldr	r3, [pc, #580]	; (b605c <setup+0x338>)
   b5e18:	601c      	str	r4, [r3, #0]
    dataWait = false;
   b5e1a:	4b91      	ldr	r3, [pc, #580]	; (b6060 <setup+0x33c>)
   b5e1c:	701c      	strb	r4, [r3, #0]
    offloadMode = false;
   b5e1e:	4b91      	ldr	r3, [pc, #580]	; (b6064 <setup+0x340>)
   b5e20:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   b5e22:	4b91      	ldr	r3, [pc, #580]	; (b6068 <setup+0x344>)
   b5e24:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   b5e26:	4b91      	ldr	r3, [pc, #580]	; (b606c <setup+0x348>)
   b5e28:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b5e2c:	801a      	strh	r2, [r3, #0]
    battPercent = 50;
   b5e2e:	4b90      	ldr	r3, [pc, #576]	; (b6070 <setup+0x34c>)
    logSensors = true;
   b5e30:	2501      	movs	r5, #1
    battPercent = 50;
   b5e32:	2232      	movs	r2, #50	; 0x32
   b5e34:	701a      	strb	r2, [r3, #0]
    logSensors = true;
   b5e36:	703d      	strb	r5, [r7, #0]
    logMessages = true;
   b5e38:	7035      	strb	r5, [r6, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   b5e3a:	f008 fd21 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e3e:	4a8d      	ldr	r2, [pc, #564]	; (b6074 <setup+0x350>)
   b5e40:	4601      	mov	r1, r0
   b5e42:	a80d      	add	r0, sp, #52	; 0x34
   b5e44:	f009 fa6e 	bl	bf324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5e48:	a80d      	add	r0, sp, #52	; 0x34
   b5e4a:	f008 fe1e 	bl	bea8a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b5e4e:	f008 fd17 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e52:	4a89      	ldr	r2, [pc, #548]	; (b6078 <setup+0x354>)
   b5e54:	4601      	mov	r1, r0
   b5e56:	a80d      	add	r0, sp, #52	; 0x34
   b5e58:	f009 fa64 	bl	bf324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5e5c:	a80d      	add	r0, sp, #52	; 0x34
   b5e5e:	f008 fe14 	bl	bea8a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   b5e62:	f008 fd0d 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e66:	4a85      	ldr	r2, [pc, #532]	; (b607c <setup+0x358>)
   b5e68:	4601      	mov	r1, r0
   b5e6a:	a80d      	add	r0, sp, #52	; 0x34
   b5e6c:	f009 fa5a 	bl	bf324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5e70:	a80d      	add	r0, sp, #52	; 0x34
   b5e72:	f008 fe0a 	bl	bea8a <_ZN8particle17BleCharacteristicD1Ev>
        BLE.addCharacteristic(bledbgCharacteristic);
   b5e76:	f008 fd03 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e7a:	4a81      	ldr	r2, [pc, #516]	; (b6080 <setup+0x35c>)
   b5e7c:	4601      	mov	r1, r0
   b5e7e:	a80d      	add	r0, sp, #52	; 0x34
   b5e80:	f009 fa50 	bl	bf324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5e84:	a80d      	add	r0, sp, #52	; 0x34
   b5e86:	f008 fe00 	bl	bea8a <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;
   b5e8a:	4b7e      	ldr	r3, [pc, #504]	; (b6084 <setup+0x360>)
   b5e8c:	701d      	strb	r5, [r3, #0]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b5e8e:	4b7e      	ldr	r3, [pc, #504]	; (b6088 <setup+0x364>)
        BleUuid tempUUID(uuid);
   b5e90:	a80d      	add	r0, sp, #52	; 0x34
   b5e92:	6819      	ldr	r1, [r3, #0]
   b5e94:	f008 fba6 	bl	be5e4 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5e98:	a80d      	add	r0, sp, #52	; 0x34
   b5e9a:	f008 fb05 	bl	be4a8 <_ZNK8particle7BleUuid4typeEv>
   b5e9e:	4605      	mov	r5, r0
            uint16_t uuid16 = tempUUID.shorted();
   b5ea0:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5ea2:	2d00      	cmp	r5, #0
   b5ea4:	f040 80b8 	bne.w	b6018 <setup+0x2f4>
            uint16_t uuid16 = tempUUID.shorted();
   b5ea8:	f008 fb1a 	bl	be4e0 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5eac:	9500      	str	r5, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b5eae:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5eb2:	2302      	movs	r3, #2
   b5eb4:	aa09      	add	r2, sp, #36	; 0x24
   b5eb6:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5eb8:	4874      	ldr	r0, [pc, #464]	; (b608c <setup+0x368>)
   b5eba:	f008 ff11 	bl	bece0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b5ebe:	2300      	movs	r3, #0
   b5ec0:	4970      	ldr	r1, [pc, #448]	; (b6084 <setup+0x360>)
   b5ec2:	4872      	ldr	r0, [pc, #456]	; (b608c <setup+0x368>)
   b5ec4:	2208      	movs	r2, #8
   b5ec6:	f008 ff29 	bl	bed1c <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b5eca:	f008 fcd9 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5ece:	2200      	movs	r2, #0
   b5ed0:	496e      	ldr	r1, [pc, #440]	; (b608c <setup+0x368>)
   b5ed2:	f008 fd86 	bl	be9e2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b5ed6:	f00b fd2d 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5eda:	f00b f98b 	bl	c11f4 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b5ede:	f00b fd29 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5ee2:	496b      	ldr	r1, [pc, #428]	; (b6090 <setup+0x36c>)
   b5ee4:	f00b f982 	bl	c11ec <_ZN7TwoWire8setSpeedEm>
    if (! lis3mdl.begin_I2C()) {          // hardware I2C mode, can pass in address & alt Wire
   b5ee8:	f00b fd24 	bl	c1934 <_Z19__fetch_global_Wirev>
   b5eec:	211c      	movs	r1, #28
   b5eee:	4602      	mov	r2, r0
   b5ef0:	4868      	ldr	r0, [pc, #416]	; (b6094 <setup+0x370>)
   b5ef2:	f006 ff38 	bl	bcd66 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   b5ef6:	2800      	cmp	r0, #0
   b5ef8:	f040 8095 	bne.w	b6026 <setup+0x302>
        Serial.println("Failed to find LIS3MDL chip");
   b5efc:	f00b f852 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b5f00:	4965      	ldr	r1, [pc, #404]	; (b6098 <setup+0x374>)
    else Serial.println("LIS3MDL Found!");
   b5f02:	f009 fb4c 	bl	bf59e <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_HIGHMODE);
   b5f06:	4863      	ldr	r0, [pc, #396]	; (b6094 <setup+0x370>)
   b5f08:	2102      	movs	r1, #2
   b5f0a:	f006 fe25 	bl	bcb58 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b5f0e:	4861      	ldr	r0, [pc, #388]	; (b6094 <setup+0x370>)
   b5f10:	2100      	movs	r1, #0
   b5f12:	f006 fe85 	bl	bcc20 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   b5f16:	485f      	ldr	r0, [pc, #380]	; (b6094 <setup+0x370>)
   b5f18:	2101      	movs	r1, #1
   b5f1a:	f006 fe4f 	bl	bcbbc <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   b5f1e:	485d      	ldr	r0, [pc, #372]	; (b6094 <setup+0x370>)
   b5f20:	2101      	movs	r1, #1
   b5f22:	f006 fe98 	bl	bcc56 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5f26:	2401      	movs	r4, #1
   b5f28:	2500      	movs	r5, #0
    lis3mdl.setIntThreshold(500);
   b5f2a:	485a      	ldr	r0, [pc, #360]	; (b6094 <setup+0x370>)
   b5f2c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b5f30:	f006 ff38 	bl	bcda4 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5f34:	4623      	mov	r3, r4
   b5f36:	462a      	mov	r2, r5
   b5f38:	4629      	mov	r1, r5
   b5f3a:	e9cd 5401 	strd	r5, r4, [sp, #4]
   b5f3e:	4855      	ldr	r0, [pc, #340]	; (b6094 <setup+0x370>)
   b5f40:	9400      	str	r4, [sp, #0]
   b5f42:	f006 ff47 	bl	bcdd4 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5f46:	f00a fbeb 	bl	c0720 <_ZN9TimeClass5monthEv>
   b5f4a:	9007      	str	r0, [sp, #28]
   b5f4c:	f00a fbdc 	bl	c0708 <_ZN9TimeClass3dayEv>
   b5f50:	4680      	mov	r8, r0
   b5f52:	f00a fbed 	bl	c0730 <_ZN9TimeClass4yearEv>
   b5f56:	4681      	mov	r9, r0
   b5f58:	f00a fbb2 	bl	c06c0 <_ZN9TimeClass4hourEv>
   b5f5c:	4682      	mov	sl, r0
   b5f5e:	f00a fbbb 	bl	c06d8 <_ZN9TimeClass6minuteEv>
   b5f62:	4683      	mov	fp, r0
   b5f64:	f00a fbc4 	bl	c06f0 <_ZN9TimeClass6secondEv>
   b5f68:	9b07      	ldr	r3, [sp, #28]
   b5f6a:	4a4c      	ldr	r2, [pc, #304]	; (b609c <setup+0x378>)
   b5f6c:	f8cd 8000 	str.w	r8, [sp]
   b5f70:	e9cd b003 	strd	fp, r0, [sp, #12]
   b5f74:	2110      	movs	r1, #16
   b5f76:	e9cd 9a01 	strd	r9, sl, [sp, #4]
   b5f7a:	a809      	add	r0, sp, #36	; 0x24
   b5f7c:	f007 fe14 	bl	bdba8 <snprintf>
    strcpy(filename,DEF_FILENAME);
   b5f80:	4947      	ldr	r1, [pc, #284]	; (b60a0 <setup+0x37c>)
   b5f82:	4848      	ldr	r0, [pc, #288]	; (b60a4 <setup+0x380>)
   b5f84:	f00d ff8a 	bl	c3e9c <strcpy>
    strcat(filename,timestamp);
   b5f88:	a909      	add	r1, sp, #36	; 0x24
   b5f8a:	4846      	ldr	r0, [pc, #280]	; (b60a4 <setup+0x380>)
   b5f8c:	f00d ff56 	bl	c3e3c <strcat>
    strcpy(filenameMessages,filename);
   b5f90:	4944      	ldr	r1, [pc, #272]	; (b60a4 <setup+0x380>)
   b5f92:	4845      	ldr	r0, [pc, #276]	; (b60a8 <setup+0x384>)
   b5f94:	f00d ff82 	bl	c3e9c <strcpy>
    strcat(filename,".csv");
   b5f98:	4944      	ldr	r1, [pc, #272]	; (b60ac <setup+0x388>)
   b5f9a:	4842      	ldr	r0, [pc, #264]	; (b60a4 <setup+0x380>)
   b5f9c:	f00d ff4e 	bl	c3e3c <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b5fa0:	4943      	ldr	r1, [pc, #268]	; (b60b0 <setup+0x38c>)
   b5fa2:	4841      	ldr	r0, [pc, #260]	; (b60a8 <setup+0x384>)
   b5fa4:	f00d ff4a 	bl	c3e3c <strcat>
    Serial.println(filename);
   b5fa8:	f00a fffc 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b5fac:	493d      	ldr	r1, [pc, #244]	; (b60a4 <setup+0x380>)
   b5fae:	f009 faf6 	bl	bf59e <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b5fb2:	f00a fff7 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b5fb6:	493c      	ldr	r1, [pc, #240]	; (b60a8 <setup+0x384>)
   b5fb8:	f009 faf1 	bl	bf59e <_ZN5Print7printlnEPKc>
    watchdog.start();
   b5fbc:	483d      	ldr	r0, [pc, #244]	; (b60b4 <setup+0x390>)
   b5fbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5fc2:	f7fe f979 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    motionTimer.start();
   b5fc6:	483c      	ldr	r0, [pc, #240]	; (b60b8 <setup+0x394>)
   b5fc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5fcc:	f7fe f974 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    ledTimer.start();
   b5fd0:	483a      	ldr	r0, [pc, #232]	; (b60bc <setup+0x398>)
   b5fd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5fd6:	f7fe f96f 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    statusPD.start();
   b5fda:	4839      	ldr	r0, [pc, #228]	; (b60c0 <setup+0x39c>)
   b5fdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5fe0:	f7fe f96a 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
      dataMode_{dataMode}
   b5fe4:	4b37      	ldr	r3, [pc, #220]	; (b60c4 <setup+0x3a0>)
   b5fe6:	930d      	str	r3, [sp, #52]	; 0x34
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b5fe8:	4837      	ldr	r0, [pc, #220]	; (b60c8 <setup+0x3a4>)
   b5fea:	4b38      	ldr	r3, [pc, #224]	; (b60cc <setup+0x3a8>)
   b5fec:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
   b5ff0:	aa0d      	add	r2, sp, #52	; 0x34
   b5ff2:	2108      	movs	r1, #8
   b5ff4:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
   b5ff8:	930f      	str	r3, [sp, #60]	; 0x3c
   b5ffa:	f7fe fb49 	bl	b4690 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b5ffe:	4604      	mov	r4, r0
   b6000:	2800      	cmp	r0, #0
   b6002:	d169      	bne.n	b60d8 <setup+0x3b4>
        Serial.println("Error: could not connect to SD card!");
   b6004:	f00a ffce 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b6008:	4931      	ldr	r1, [pc, #196]	; (b60d0 <setup+0x3ac>)
   b600a:	f009 fac8 	bl	bf59e <_ZN5Print7printlnEPKc>
        logSensors = false;
   b600e:	703c      	strb	r4, [r7, #0]
        logMessages = false;
   b6010:	7034      	strb	r4, [r6, #0]
}
   b6012:	b013      	add	sp, #76	; 0x4c
   b6014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6018:	f008 fa64 	bl	be4e4 <_ZNK8particle7BleUuid8rawBytesEv>
   b601c:	9400      	str	r4, [sp, #0]
   b601e:	4602      	mov	r2, r0
   b6020:	2310      	movs	r3, #16
   b6022:	2107      	movs	r1, #7
   b6024:	e748      	b.n	b5eb8 <setup+0x194>
    else Serial.println("LIS3MDL Found!");
   b6026:	f00a ffbd 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b602a:	492a      	ldr	r1, [pc, #168]	; (b60d4 <setup+0x3b0>)
   b602c:	e769      	b.n	b5f02 <setup+0x1de>
   b602e:	bf00      	nop
   b6030:	2003e58c 	.word	0x2003e58c
   b6034:	2003e584 	.word	0x2003e584
   b6038:	2003e585 	.word	0x2003e585
   b603c:	2003dd84 	.word	0x2003dd84
   b6040:	2003dd94 	.word	0x2003dd94
   b6044:	2003df05 	.word	0x2003df05
   b6048:	2003df04 	.word	0x2003df04
   b604c:	2003e580 	.word	0x2003e580
   b6050:	2003dde4 	.word	0x2003dde4
   b6054:	2003de2c 	.word	0x2003de2c
   b6058:	2003ddb8 	.word	0x2003ddb8
   b605c:	2003dd80 	.word	0x2003dd80
   b6060:	2003dde8 	.word	0x2003dde8
   b6064:	2003e0e0 	.word	0x2003e0e0
   b6068:	2003e0e1 	.word	0x2003e0e1
   b606c:	2003dda6 	.word	0x2003dda6
   b6070:	2003ddd0 	.word	0x2003ddd0
   b6074:	2003e5e4 	.word	0x2003e5e4
   b6078:	2003e0e4 	.word	0x2003e0e4
   b607c:	2003e0d8 	.word	0x2003e0d8
   b6080:	2003ddd8 	.word	0x2003ddd8
   b6084:	2003dd75 	.word	0x2003dd75
   b6088:	2003db6c 	.word	0x2003db6c
   b608c:	2003ddc0 	.word	0x2003ddc0
   b6090:	00061a80 	.word	0x00061a80
   b6094:	2003de50 	.word	0x2003de50
   b6098:	000c6404 	.word	0x000c6404
   b609c:	000c6241 	.word	0x000c6241
   b60a0:	000c642f 	.word	0x000c642f
   b60a4:	2003ddea 	.word	0x2003ddea
   b60a8:	2003de08 	.word	0x2003de08
   b60ac:	000c634f 	.word	0x000c634f
   b60b0:	000c6438 	.word	0x000c6438
   b60b4:	2003e5f0 	.word	0x2003e5f0
   b60b8:	2003df10 	.word	0x2003df10
   b60bc:	2003de34 	.word	0x2003de34
   b60c0:	2003e5b0 	.word	0x2003e5b0
   b60c4:	000c64f8 	.word	0x000c64f8
   b60c8:	2003e0ec 	.word	0x2003e0ec
   b60cc:	007a1200 	.word	0x007a1200
   b60d0:	000c6441 	.word	0x000c6441
   b60d4:	000c6420 	.word	0x000c6420
    if(logSensors){
   b60d8:	783b      	ldrb	r3, [r7, #0]
   b60da:	b17b      	cbz	r3, b60fc <setup+0x3d8>
   b60dc:	4812      	ldr	r0, [pc, #72]	; (b6128 <setup+0x404>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b60de:	7c03      	ldrb	r3, [r0, #16]
   b60e0:	b92b      	cbnz	r3, b60ee <setup+0x3ca>
   b60e2:	4912      	ldr	r1, [pc, #72]	; (b612c <setup+0x408>)
   b60e4:	f244 2202 	movw	r2, #16898	; 0x4202
   b60e8:	3010      	adds	r0, #16
   b60ea:	f7fe fa5d 	bl	b45a8 <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b60ee:	4910      	ldr	r1, [pc, #64]	; (b6130 <setup+0x40c>)
   b60f0:	480d      	ldr	r0, [pc, #52]	; (b6128 <setup+0x404>)
   b60f2:	f009 fa54 	bl	bf59e <_ZN5Print7printlnEPKc>
        myFile.close();
   b60f6:	480f      	ldr	r0, [pc, #60]	; (b6134 <setup+0x410>)
   b60f8:	f001 f82e 	bl	b7158 <_ZN7FatFile5closeEv>
    if(logMessages){
   b60fc:	7833      	ldrb	r3, [r6, #0]
   b60fe:	2b00      	cmp	r3, #0
   b6100:	d087      	beq.n	b6012 <setup+0x2ee>
   b6102:	480d      	ldr	r0, [pc, #52]	; (b6138 <setup+0x414>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b6104:	7c03      	ldrb	r3, [r0, #16]
   b6106:	b92b      	cbnz	r3, b6114 <setup+0x3f0>
   b6108:	490c      	ldr	r1, [pc, #48]	; (b613c <setup+0x418>)
   b610a:	f244 2202 	movw	r2, #16898	; 0x4202
   b610e:	3010      	adds	r0, #16
   b6110:	f7fe fa4a 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b6114:	490a      	ldr	r1, [pc, #40]	; (b6140 <setup+0x41c>)
   b6116:	4808      	ldr	r0, [pc, #32]	; (b6138 <setup+0x414>)
   b6118:	2201      	movs	r2, #1
   b611a:	f7fe f91d 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b611e:	4809      	ldr	r0, [pc, #36]	; (b6144 <setup+0x420>)
   b6120:	f001 f81a 	bl	b7158 <_ZN7FatFile5closeEv>
}
   b6124:	e775      	b.n	b6012 <setup+0x2ee>
   b6126:	bf00      	nop
   b6128:	2003df2c 	.word	0x2003df2c
   b612c:	2003ddea 	.word	0x2003ddea
   b6130:	000c6466 	.word	0x000c6466
   b6134:	2003df3c 	.word	0x2003df3c
   b6138:	2003deac 	.word	0x2003deac
   b613c:	2003de08 	.word	0x2003de08
   b6140:	000c64bc 	.word	0x000c64bc
   b6144:	2003debc 	.word	0x2003debc

000b6148 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6148:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b614a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b614c:	4604      	mov	r4, r0
   b614e:	460d      	mov	r5, r1
   b6150:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6152:	d916      	bls.n	b6182 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b6154:	4290      	cmp	r0, r2
   b6156:	d215      	bcs.n	b6184 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b6158:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b615c:	1a75      	subs	r5, r6, r1
   b615e:	f1a1 0714 	sub.w	r7, r1, #20
   b6162:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6164:	42b7      	cmp	r7, r6
   b6166:	d01c      	beq.n	b61a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b6168:	b12c      	cbz	r4, b6176 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b616a:	4631      	mov	r1, r6
   b616c:	4620      	mov	r0, r4
   b616e:	f007 ffd5 	bl	be11c <_ZN6StringC1EOS_>
   b6172:	7c33      	ldrb	r3, [r6, #16]
   b6174:	7423      	strb	r3, [r4, #16]
   b6176:	4630      	mov	r0, r6
   b6178:	f007 ff54 	bl	be024 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b617c:	3e14      	subs	r6, #20
   b617e:	3c14      	subs	r4, #20
   b6180:	e7f0      	b.n	b6164 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6182:	d00e      	beq.n	b61a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b6184:	42b5      	cmp	r5, r6
   b6186:	d00c      	beq.n	b61a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b6188:	b12c      	cbz	r4, b6196 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b618a:	4629      	mov	r1, r5
   b618c:	4620      	mov	r0, r4
   b618e:	f007 ffc5 	bl	be11c <_ZN6StringC1EOS_>
   b6192:	7c2b      	ldrb	r3, [r5, #16]
   b6194:	7423      	strb	r3, [r4, #16]
   b6196:	4628      	mov	r0, r5
   b6198:	f007 ff44 	bl	be024 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b619c:	3514      	adds	r5, #20
   b619e:	3414      	adds	r4, #20
   b61a0:	e7f0      	b.n	b6184 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b61a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b61a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b61a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b61a8:	2300      	movs	r3, #0
   b61aa:	e9c0 3300 	strd	r3, r3, [r0]
   b61ae:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b61b0:	684f      	ldr	r7, [r1, #4]
   b61b2:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b61b4:	4604      	mov	r4, r0
   b61b6:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b61b8:	dd23      	ble.n	b6202 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b61ba:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b61be:	fb08 f007 	mul.w	r0, r8, r7
   b61c2:	f007 fcc9 	bl	bdb58 <malloc>
            if (!d) {
   b61c6:	4605      	mov	r5, r0
   b61c8:	b1d8      	cbz	r0, b6202 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b61ca:	e9d4 1200 	ldrd	r1, r2, [r4]
   b61ce:	fb08 1202 	mla	r2, r8, r2, r1
   b61d2:	f7ff ffb9 	bl	b6148 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b61d6:	6820      	ldr	r0, [r4, #0]
   b61d8:	f007 fcc6 	bl	bdb68 <free>
        data_ = d;
   b61dc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b61de:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b61e0:	e9d6 7300 	ldrd	r7, r3, [r6]
   b61e4:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b61e8:	45b8      	cmp	r8, r7
   b61ea:	d008      	beq.n	b61fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b61ec:	4639      	mov	r1, r7
   b61ee:	4628      	mov	r0, r5
   b61f0:	f007 ffae 	bl	be150 <_ZN6StringC1ERKS_>
   b61f4:	7c3b      	ldrb	r3, [r7, #16]
   b61f6:	742b      	strb	r3, [r5, #16]
   b61f8:	3714      	adds	r7, #20
   b61fa:	3514      	adds	r5, #20
   b61fc:	e7f4      	b.n	b61e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b61fe:	6873      	ldr	r3, [r6, #4]
   b6200:	6063      	str	r3, [r4, #4]
}
   b6202:	4620      	mov	r0, r4
   b6204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6208 <_GLOBAL__sub_I_SystemMode>:
   b6208:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b620a:	4b7d      	ldr	r3, [pc, #500]	; (b6400 <_GLOBAL__sub_I_SystemMode+0x1f8>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b620c:	4a7d      	ldr	r2, [pc, #500]	; (b6404 <_GLOBAL__sub_I_SystemMode+0x1fc>)
  explicit SdFat(SPIClass* spiPort) {
   b620e:	4c7e      	ldr	r4, [pc, #504]	; (b6408 <_GLOBAL__sub_I_SystemMode+0x200>)
   b6210:	2601      	movs	r6, #1
   b6212:	701e      	strb	r6, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6214:	4b7d      	ldr	r3, [pc, #500]	; (b640c <_GLOBAL__sub_I_SystemMode+0x204>)
   b6216:	2500      	movs	r5, #0
   b6218:	e9c3 5500 	strd	r5, r5, [r3]
    SleepResult() {}
   b621c:	609a      	str	r2, [r3, #8]
   b621e:	b093      	sub	sp, #76	; 0x4c

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6220:	2003      	movs	r0, #3
   b6222:	f007 fbc5 	bl	bd9b0 <set_system_mode>
SFE_UBLOX_GNSS myGPS;
   b6226:	487a      	ldr	r0, [pc, #488]	; (b6410 <_GLOBAL__sub_I_SystemMode+0x208>)
   b6228:	f001 fd6c 	bl	b7d04 <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;
   b622c:	4879      	ldr	r0, [pc, #484]	; (b6414 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b622e:	f006 fc17 	bl	bca60 <_ZN16Adafruit_LIS3MDLC1Ev>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   b6232:	f7ff fd49 	bl	b5cc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6236:	2364      	movs	r3, #100	; 0x64
   b6238:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
  {
   b623c:	4b76      	ldr	r3, [pc, #472]	; (b6418 <_GLOBAL__sub_I_SystemMode+0x210>)
   b623e:	6065      	str	r5, [r4, #4]
   b6240:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
   b6244:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
   b6248:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
   b624c:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
   b6250:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
   b6254:	f8a4 547c 	strh.w	r5, [r4, #1148]	; 0x47c
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b6258:	b908      	cbnz	r0, b625e <_GLOBAL__sub_I_SystemMode+0x56>
   b625a:	f7ff fd35 	bl	b5cc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    Print() : write_error(0) {}
   b625e:	4b6f      	ldr	r3, [pc, #444]	; (b641c <_GLOBAL__sub_I_SystemMode+0x214>)
  File() {}
   b6260:	4a6f      	ldr	r2, [pc, #444]	; (b6420 <_GLOBAL__sub_I_SystemMode+0x218>)
   b6262:	f8c4 046c 	str.w	r0, [r4, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6266:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   b626a:	2400      	movs	r4, #0
   b626c:	601a      	str	r2, [r3, #0]
   b626e:	e9c3 4701 	strd	r4, r7, [r3, #4]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6272:	611c      	str	r4, [r3, #16]
   b6274:	4b6b      	ldr	r3, [pc, #428]	; (b6424 <_GLOBAL__sub_I_SystemMode+0x21c>)
        capacity_(0) {
   b6276:	9407      	str	r4, [sp, #28]
   b6278:	601a      	str	r2, [r3, #0]
   b627a:	e9c3 4701 	strd	r4, r7, [r3, #4]
   b627e:	611c      	str	r4, [r3, #16]
   b6280:	4b69      	ldr	r3, [pc, #420]	; (b6428 <_GLOBAL__sub_I_SystemMode+0x220>)
        filter_(level, filters) {
   b6282:	4d6a      	ldr	r5, [pc, #424]	; (b642c <_GLOBAL__sub_I_SystemMode+0x224>)
   b6284:	601a      	str	r2, [r3, #0]
   b6286:	e9c3 4701 	strd	r4, r7, [r3, #4]
   b628a:	611c      	str	r4, [r3, #16]
   b628c:	e9cd 4405 	strd	r4, r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b6290:	f00a fe88 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b6294:	a905      	add	r1, sp, #20
   b6296:	4606      	mov	r6, r0
   b6298:	a808      	add	r0, sp, #32
   b629a:	f7ff ff83 	bl	b61a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b629e:	a908      	add	r1, sp, #32
   b62a0:	a80b      	add	r0, sp, #44	; 0x2c
   b62a2:	f7ff ff7f 	bl	b61a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b62a6:	4b62      	ldr	r3, [pc, #392]	; (b6430 <_GLOBAL__sub_I_SystemMode+0x228>)
   b62a8:	602b      	str	r3, [r5, #0]
   b62aa:	a90b      	add	r1, sp, #44	; 0x2c
   b62ac:	a80e      	add	r0, sp, #56	; 0x38
   b62ae:	f7ff ff79 	bl	b61a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b62b2:	aa0e      	add	r2, sp, #56	; 0x38
   b62b4:	211e      	movs	r1, #30
   b62b6:	1d28      	adds	r0, r5, #4
   b62b8:	f009 fe8c 	bl	bffd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b62bc:	a80e      	add	r0, sp, #56	; 0x38
   b62be:	f7ff fcd1 	bl	b5c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b62c2:	a80b      	add	r0, sp, #44	; 0x2c
   b62c4:	f7ff fcce 	bl	b5c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b62c8:	4b5a      	ldr	r3, [pc, #360]	; (b6434 <_GLOBAL__sub_I_SystemMode+0x22c>)
   b62ca:	602b      	str	r3, [r5, #0]
   b62cc:	622e      	str	r6, [r5, #32]
   b62ce:	a808      	add	r0, sp, #32
   b62d0:	f7ff fcc8 	bl	b5c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b62d4:	4b58      	ldr	r3, [pc, #352]	; (b6438 <_GLOBAL__sub_I_SystemMode+0x230>)
   b62d6:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b62d8:	f00a fe64 	bl	c0fa4 <_Z16_fetch_usbserialv>
   b62dc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b62e0:	f00a fe50 	bl	c0f84 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b62e4:	f009 fb58 	bl	bf998 <_ZN5spark10LogManager8instanceEv>
   b62e8:	4629      	mov	r1, r5
   b62ea:	f009 fd49 	bl	bfd80 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   b62ee:	a805      	add	r0, sp, #20
   b62f0:	f7ff fcb8 	bl	b5c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL; 
   b62f4:	4851      	ldr	r0, [pc, #324]	; (b643c <_GLOBAL__sub_I_SystemMode+0x234>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b62f6:	4d52      	ldr	r5, [pc, #328]	; (b6440 <_GLOBAL__sub_I_SystemMode+0x238>)
	    _M_invoker = &_My_handler::_M_invoke;
   b62f8:	4e52      	ldr	r6, [pc, #328]	; (b6444 <_GLOBAL__sub_I_SystemMode+0x23c>)
Servo ESCL; 
   b62fa:	f007 fe41 	bl	bdf80 <_ZN5ServoC1Ev>
Servo ESCR;
   b62fe:	4852      	ldr	r0, [pc, #328]	; (b6448 <_GLOBAL__sub_I_SystemMode+0x240>)
   b6300:	f007 fe3e 	bl	bdf80 <_ZN5ServoC1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b6304:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6308:	682b      	ldr	r3, [r5, #0]
   b630a:	9300      	str	r3, [sp, #0]
   b630c:	4b4f      	ldr	r3, [pc, #316]	; (b644c <_GLOBAL__sub_I_SystemMode+0x244>)
   b630e:	4950      	ldr	r1, [pc, #320]	; (b6450 <_GLOBAL__sub_I_SystemMode+0x248>)
   b6310:	681b      	ldr	r3, [r3, #0]
   b6312:	4850      	ldr	r0, [pc, #320]	; (b6454 <_GLOBAL__sub_I_SystemMode+0x24c>)
   b6314:	f04f 0210 	mov.w	r2, #16
   b6318:	f7ff fcb7 	bl	b5c8a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b631c:	4b4e      	ldr	r3, [pc, #312]	; (b6458 <_GLOBAL__sub_I_SystemMode+0x250>)
   b631e:	9402      	str	r4, [sp, #8]
   b6320:	9301      	str	r3, [sp, #4]
   b6322:	682b      	ldr	r3, [r5, #0]
   b6324:	9300      	str	r3, [sp, #0]
   b6326:	4b4d      	ldr	r3, [pc, #308]	; (b645c <_GLOBAL__sub_I_SystemMode+0x254>)
   b6328:	494d      	ldr	r1, [pc, #308]	; (b6460 <_GLOBAL__sub_I_SystemMode+0x258>)
   b632a:	681b      	ldr	r3, [r3, #0]
   b632c:	484d      	ldr	r0, [pc, #308]	; (b6464 <_GLOBAL__sub_I_SystemMode+0x25c>)
   b632e:	f04f 0204 	mov.w	r2, #4
   b6332:	f7ff fcaa 	bl	b5c8a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b6336:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b633a:	682b      	ldr	r3, [r5, #0]
   b633c:	9300      	str	r3, [sp, #0]
   b633e:	4b4a      	ldr	r3, [pc, #296]	; (b6468 <_GLOBAL__sub_I_SystemMode+0x260>)
   b6340:	494a      	ldr	r1, [pc, #296]	; (b646c <_GLOBAL__sub_I_SystemMode+0x264>)
   b6342:	681b      	ldr	r3, [r3, #0]
   b6344:	484a      	ldr	r0, [pc, #296]	; (b6470 <_GLOBAL__sub_I_SystemMode+0x268>)
   b6346:	f04f 0210 	mov.w	r2, #16
   b634a:	f7ff fc9e 	bl	b5c8a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
    BleCharacteristic bledbgCharacteristic("dbg", BleCharacteristicProperty::NOTIFY, bledbgUuid, WaterNetService);
   b634e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6352:	682b      	ldr	r3, [r5, #0]
   b6354:	9300      	str	r3, [sp, #0]
   b6356:	4b47      	ldr	r3, [pc, #284]	; (b6474 <_GLOBAL__sub_I_SystemMode+0x26c>)
   b6358:	4947      	ldr	r1, [pc, #284]	; (b6478 <_GLOBAL__sub_I_SystemMode+0x270>)
   b635a:	681b      	ldr	r3, [r3, #0]
   b635c:	4847      	ldr	r0, [pc, #284]	; (b647c <_GLOBAL__sub_I_SystemMode+0x274>)
	    _M_manager = &_My_handler::_M_manager;
   b635e:	4d48      	ldr	r5, [pc, #288]	; (b6480 <_GLOBAL__sub_I_SystemMode+0x278>)
   b6360:	f04f 0210 	mov.w	r2, #16
   b6364:	f7ff fc91 	bl	b5c8a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                 //Advertising data
   b6368:	4846      	ldr	r0, [pc, #280]	; (b6484 <_GLOBAL__sub_I_SystemMode+0x27c>)
   b636a:	f008 fcc4 	bl	becf6 <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b636e:	4b46      	ldr	r3, [pc, #280]	; (b6488 <_GLOBAL__sub_I_SystemMode+0x280>)
   b6370:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   b6372:	aa0e      	add	r2, sp, #56	; 0x38
   b6374:	4623      	mov	r3, r4
   b6376:	f643 2198 	movw	r1, #15000	; 0x3a98
   b637a:	4844      	ldr	r0, [pc, #272]	; (b648c <_GLOBAL__sub_I_SystemMode+0x284>)
	    _M_invoker = &_My_handler::_M_invoke;
   b637c:	9611      	str	r6, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   b637e:	9510      	str	r5, [sp, #64]	; 0x40
   b6380:	f7fe f86a 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6384:	a80e      	add	r0, sp, #56	; 0x38
   b6386:	f7fe f829 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b638a:	4b41      	ldr	r3, [pc, #260]	; (b6490 <_GLOBAL__sub_I_SystemMode+0x288>)
   b638c:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   b638e:	aa0e      	add	r2, sp, #56	; 0x38
   b6390:	4623      	mov	r3, r4
   b6392:	4639      	mov	r1, r7
   b6394:	483f      	ldr	r0, [pc, #252]	; (b6494 <_GLOBAL__sub_I_SystemMode+0x28c>)
	    _M_manager = &_My_handler::_M_manager;
   b6396:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b639a:	f7fe f85d 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b639e:	a80e      	add	r0, sp, #56	; 0x38
   b63a0:	f7fe f81c 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b63a4:	4b3c      	ldr	r3, [pc, #240]	; (b6498 <_GLOBAL__sub_I_SystemMode+0x290>)
   b63a6:	930e      	str	r3, [sp, #56]	; 0x38
Timer motionTimer(2500, motionHandler);
   b63a8:	aa0e      	add	r2, sp, #56	; 0x38
   b63aa:	4623      	mov	r3, r4
   b63ac:	f640 11c4 	movw	r1, #2500	; 0x9c4
   b63b0:	483a      	ldr	r0, [pc, #232]	; (b649c <_GLOBAL__sub_I_SystemMode+0x294>)
	    _M_manager = &_My_handler::_M_manager;
   b63b2:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b63b6:	f7fe f84f 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b63ba:	a80e      	add	r0, sp, #56	; 0x38
   b63bc:	f7fe f80e 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b63c0:	4b37      	ldr	r3, [pc, #220]	; (b64a0 <_GLOBAL__sub_I_SystemMode+0x298>)
   b63c2:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   b63c4:	aa0e      	add	r2, sp, #56	; 0x38
   b63c6:	4623      	mov	r3, r4
   b63c8:	f643 2198 	movw	r1, #15000	; 0x3a98
   b63cc:	4835      	ldr	r0, [pc, #212]	; (b64a4 <_GLOBAL__sub_I_SystemMode+0x29c>)
	    _M_manager = &_My_handler::_M_manager;
   b63ce:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b63d2:	f7fe f841 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b63d6:	a80e      	add	r0, sp, #56	; 0x38
   b63d8:	f7fe f800 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b63dc:	4622      	mov	r2, r4
   b63de:	2114      	movs	r1, #20
   b63e0:	2001      	movs	r0, #1
   b63e2:	f007 fb0d 	bl	bda00 <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b63e6:	2201      	movs	r2, #1
   b63e8:	2114      	movs	r1, #20
   b63ea:	e9cd 1200 	strd	r1, r2, [sp]
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b63ee:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b63f0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b63f4:	482c      	ldr	r0, [pc, #176]	; (b64a8 <_GLOBAL__sub_I_SystemMode+0x2a0>)
   b63f6:	f007 fc5b 	bl	bdcb0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b63fa:	b013      	add	sp, #76	; 0x4c
   b63fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b63fe:	bf00      	nop
   b6400:	2003ddbc 	.word	0x2003ddbc
   b6404:	ffff0000 	.word	0xffff0000
   b6408:	2003e0ec 	.word	0x2003e0ec
   b640c:	2003dda8 	.word	0x2003dda8
   b6410:	2003df60 	.word	0x2003df60
   b6414:	2003de50 	.word	0x2003de50
   b6418:	000c64f8 	.word	0x000c64f8
   b641c:	2003df2c 	.word	0x2003df2c
   b6420:	000c6564 	.word	0x000c6564
   b6424:	2003deac 	.word	0x2003deac
   b6428:	2003de78 	.word	0x2003de78
   b642c:	2003dee0 	.word	0x2003dee0
   b6430:	000c6520 	.word	0x000c6520
   b6434:	000c7660 	.word	0x000c7660
   b6438:	000c654c 	.word	0x000c654c
   b643c:	2003dd84 	.word	0x2003dd84
   b6440:	2003db6c 	.word	0x2003db6c
   b6444:	000b4235 	.word	0x000b4235
   b6448:	2003dd94 	.word	0x2003dd94
   b644c:	2003db7c 	.word	0x2003db7c
   b6450:	000c64e1 	.word	0x000c64e1
   b6454:	2003e5e4 	.word	0x2003e5e4
   b6458:	000b4a69 	.word	0x000b4a69
   b645c:	2003db78 	.word	0x2003db78
   b6460:	000c64e4 	.word	0x000c64e4
   b6464:	2003e0e4 	.word	0x2003e0e4
   b6468:	2003db74 	.word	0x2003db74
   b646c:	000c64e7 	.word	0x000c64e7
   b6470:	2003e0d8 	.word	0x2003e0d8
   b6474:	2003db70 	.word	0x2003db70
   b6478:	000c64eb 	.word	0x000c64eb
   b647c:	2003ddd8 	.word	0x2003ddd8
   b6480:	000b4221 	.word	0x000b4221
   b6484:	2003ddc0 	.word	0x2003ddc0
   b6488:	000b45b9 	.word	0x000b45b9
   b648c:	2003e5f0 	.word	0x2003e5f0
   b6490:	000b44d1 	.word	0x000b44d1
   b6494:	2003de34 	.word	0x2003de34
   b6498:	000b4375 	.word	0x000b4375
   b649c:	2003df10 	.word	0x2003df10
   b64a0:	000b40fd 	.word	0x000b40fd
   b64a4:	2003e5b0 	.word	0x2003e5b0
   b64a8:	2003e58c 	.word	0x2003e58c

000b64ac <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b64ac:	2904      	cmp	r1, #4
   b64ae:	d804      	bhi.n	b64ba <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b64b0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b64b4:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b64b8:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b64ba:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b64bc:	bf9b      	ittet	ls
   b64be:	f101 31ff 	addls.w	r1, r1, #4294967295
   b64c2:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b64c6:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b64c8:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b64ca:	bf84      	itt	hi
   b64cc:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b64d0:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b64d2:	4770      	bx	lr

000b64d4 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b64d4:	b510      	push	{r4, lr}
   b64d6:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b64d8:	3024      	adds	r0, #36	; 0x24
   b64da:	f000 ff69 	bl	b73b0 <_ZN8FatCache4syncEv>
   b64de:	b128      	cbz	r0, b64ec <_ZN9FatVolume9cacheSyncEv+0x18>
   b64e0:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b64e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b64e8:	f000 bf62 	b.w	b73b0 <_ZN8FatCache4syncEv>
  }
   b64ec:	bd10      	pop	{r4, pc}

000b64ee <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b64ee:	1e41      	subs	r1, r0, #1
   b64f0:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b64f4:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b64f6:	0842      	lsrs	r2, r0, #1
   b64f8:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b64fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6500:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6504:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6506:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6508:	d1f5      	bne.n	b64f6 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b650a:	4770      	bx	lr

000b650c <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b650c:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b650e:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6510:	4604      	mov	r4, r0
   b6512:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b6514:	b923      	cbnz	r3, b6520 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b6516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b651a:	6889      	ldr	r1, [r1, #8]
   b651c:	f000 bc16 	b.w	b6d4c <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6520:	2224      	movs	r2, #36	; 0x24
   b6522:	2100      	movs	r1, #0
   b6524:	f00d fc54 	bl	c3dd0 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b6528:	2310      	movs	r3, #16
  m_flags = F_READ;
   b652a:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b652c:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b652e:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6530:	68ab      	ldr	r3, [r5, #8]
   b6532:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b6534:	68eb      	ldr	r3, [r5, #12]
   b6536:	6223      	str	r3, [r4, #32]
}
   b6538:	bd38      	pop	{r3, r4, r5, pc}

000b653a <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b653a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b653e:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b6540:	7803      	ldrb	r3, [r0, #0]
   b6542:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b6546:	4606      	mov	r6, r0
   b6548:	460f      	mov	r7, r1
   b654a:	4690      	mov	r8, r2
   b654c:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b6550:	2b00      	cmp	r3, #0
   b6552:	d05d      	beq.n	b6610 <_ZN7FatFile7getNameEPcj+0xd6>
   b6554:	2a0c      	cmp	r2, #12
   b6556:	d95b      	bls.n	b6610 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b6558:	78c3      	ldrb	r3, [r0, #3]
   b655a:	b933      	cbnz	r3, b656a <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b655c:	f000 fb46 	bl	b6bec <_ZN7FatFile6getSFNEPc>
   b6560:	4604      	mov	r4, r0
}
   b6562:	4620      	mov	r0, r4
   b6564:	b00d      	add	sp, #52	; 0x34
   b6566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b656a:	4601      	mov	r1, r0
   b656c:	a803      	add	r0, sp, #12
   b656e:	f7ff ffcd 	bl	b650c <_ZN7FatFile11openClusterEPS_>
   b6572:	2800      	cmp	r0, #0
   b6574:	d04c      	beq.n	b6610 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b6576:	eb07 0308 	add.w	r3, r7, r8
   b657a:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b657e:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b6582:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b6584:	78f3      	ldrb	r3, [r6, #3]
   b6586:	fa5f f58b 	uxtb.w	r5, fp
   b658a:	42ab      	cmp	r3, r5
   b658c:	d340      	bcc.n	b6610 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b658e:	88b1      	ldrh	r1, [r6, #4]
   b6590:	eba1 010b 	sub.w	r1, r1, fp
   b6594:	0149      	lsls	r1, r1, #5
   b6596:	a803      	add	r0, sp, #12
   b6598:	f000 fcbe 	bl	b6f18 <_ZN7FatFile7seekSetEm>
   b659c:	4604      	mov	r4, r0
   b659e:	2800      	cmp	r0, #0
   b65a0:	d036      	beq.n	b6610 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b65a2:	2100      	movs	r1, #0
   b65a4:	a803      	add	r0, sp, #12
   b65a6:	f000 fc98 	bl	b6eda <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b65aa:	4603      	mov	r3, r0
   b65ac:	b380      	cbz	r0, b6610 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b65ae:	7ac2      	ldrb	r2, [r0, #11]
   b65b0:	2a0f      	cmp	r2, #15
   b65b2:	d12d      	bne.n	b6610 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b65b4:	7802      	ldrb	r2, [r0, #0]
   b65b6:	f002 021f 	and.w	r2, r2, #31
   b65ba:	42aa      	cmp	r2, r5
   b65bc:	d128      	bne.n	b6610 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b65be:	f10b 35ff 	add.w	r5, fp, #4294967295
   b65c2:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b65c6:	197a      	adds	r2, r7, r5
   b65c8:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b65ca:	4618      	mov	r0, r3
   b65cc:	9101      	str	r1, [sp, #4]
   b65ce:	f7ff ff6d 	bl	b64ac <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b65d2:	b168      	cbz	r0, b65f0 <_ZN7FatFile7getNameEPcj+0xb6>
   b65d4:	45a8      	cmp	r8, r5
   b65d6:	d912      	bls.n	b65fe <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b65d8:	9901      	ldr	r1, [sp, #4]
   b65da:	3101      	adds	r1, #1
   b65dc:	287f      	cmp	r0, #127	; 0x7f
   b65de:	b2c9      	uxtb	r1, r1
   b65e0:	bf28      	it	cs
   b65e2:	203f      	movcs	r0, #63	; 0x3f
   b65e4:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b65e6:	f802 0b01 	strb.w	r0, [r2], #1
   b65ea:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b65ee:	d1ec      	bne.n	b65ca <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b65f0:	45a8      	cmp	r8, r5
   b65f2:	d904      	bls.n	b65fe <_ZN7FatFile7getNameEPcj+0xc4>
   b65f4:	781a      	ldrb	r2, [r3, #0]
   b65f6:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b65f8:	bf48      	it	mi
   b65fa:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b65fe:	9a00      	ldr	r2, [sp, #0]
   b6600:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b6604:	781b      	ldrb	r3, [r3, #0]
   b6606:	065b      	lsls	r3, r3, #25
   b6608:	f10b 0b01 	add.w	fp, fp, #1
   b660c:	d5ba      	bpl.n	b6584 <_ZN7FatFile7getNameEPcj+0x4a>
   b660e:	e7a8      	b.n	b6562 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b6610:	2400      	movs	r4, #0
   b6612:	703c      	strb	r4, [r7, #0]
  return false;
   b6614:	e7a5      	b.n	b6562 <_ZN7FatFile7getNameEPcj+0x28>
	...

000b6618 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b6618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b661c:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b661e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6622:	2b20      	cmp	r3, #32
   b6624:	d0fa      	beq.n	b661c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6626:	4d6a      	ldr	r5, [pc, #424]	; (b67d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b6628:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b662a:	2400      	movs	r4, #0
    c = path[len];
   b662c:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b662e:	b1c3      	cbz	r3, b6662 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6630:	2b2f      	cmp	r3, #47	; 0x2f
   b6632:	d016      	beq.n	b6662 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6634:	2b5c      	cmp	r3, #92	; 0x5c
   b6636:	d102      	bne.n	b663e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b6638:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b663a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b663e:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b6642:	b2c0      	uxtb	r0, r0
   b6644:	281d      	cmp	r0, #29
   b6646:	d803      	bhi.n	b6650 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b6648:	fa25 f000 	lsr.w	r0, r5, r0
   b664c:	07c0      	lsls	r0, r0, #31
   b664e:	d4f3      	bmi.n	b6638 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b6650:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b6654:	283c      	cmp	r0, #60	; 0x3c
   b6656:	d0ef      	beq.n	b6638 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b6658:	3b20      	subs	r3, #32
   b665a:	2b5e      	cmp	r3, #94	; 0x5e
   b665c:	d8ec      	bhi.n	b6638 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b665e:	3401      	adds	r4, #1
    c = path[len];
   b6660:	e7e4      	b.n	b662c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b6662:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b6664:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b6666:	4607      	mov	r7, r0
   b6668:	f810 5b01 	ldrb.w	r5, [r0], #1
   b666c:	2d20      	cmp	r5, #32
   b666e:	d0fa      	beq.n	b6666 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b6670:	2d2f      	cmp	r5, #47	; 0x2f
   b6672:	d0f8      	beq.n	b6666 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b6674:	6017      	str	r7, [r2, #0]
  while (len) {
   b6676:	b14c      	cbz	r4, b668c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b6678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b667c:	2a2e      	cmp	r2, #46	; 0x2e
   b667e:	d001      	beq.n	b6684 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b6680:	2a20      	cmp	r2, #32
   b6682:	d101      	bne.n	b6688 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b6684:	3c01      	subs	r4, #1
  while (len) {
   b6686:	e7f6      	b.n	b6676 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b6688:	2cff      	cmp	r4, #255	; 0xff
   b668a:	dcd5      	bgt.n	b6638 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b668c:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b6690:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b6694:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b6696:	f8c1 300d 	str.w	r3, [r1, #13]
   b669a:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b669c:	f04f 0800 	mov.w	r8, #0
   b66a0:	f816 3008 	ldrb.w	r3, [r6, r8]
   b66a4:	2b2e      	cmp	r3, #46	; 0x2e
   b66a6:	d001      	beq.n	b66ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b66a8:	2b20      	cmp	r3, #32
   b66aa:	d102      	bne.n	b66b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b66ac:	f108 0801 	add.w	r8, r8, #1
   b66b0:	e7f6      	b.n	b66a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b66b2:	fab8 f088 	clz	r0, r8
   b66b6:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b66b8:	1e65      	subs	r5, r4, #1
   b66ba:	1c6b      	adds	r3, r5, #1
   b66bc:	d002      	beq.n	b66c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b66be:	5d73      	ldrb	r3, [r6, r5]
   b66c0:	2b2e      	cmp	r3, #46	; 0x2e
   b66c2:	d114      	bne.n	b66ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b66c4:	f04f 0900 	mov.w	r9, #0
   b66c8:	2707      	movs	r7, #7
   b66ca:	464a      	mov	r2, r9
   b66cc:	46ca      	mov	sl, r9
   b66ce:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b66d2:	45a0      	cmp	r8, r4
   b66d4:	da68      	bge.n	b67a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b66d6:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b66da:	2b20      	cmp	r3, #32
   b66dc:	d003      	beq.n	b66e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b66de:	2b2e      	cmp	r3, #46	; 0x2e
   b66e0:	d107      	bne.n	b66f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b66e2:	45a8      	cmp	r8, r5
   b66e4:	d012      	beq.n	b670c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b66e6:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b66e8:	f108 0801 	add.w	r8, r8, #1
   b66ec:	e7f1      	b.n	b66d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b66ee:	3d01      	subs	r5, #1
   b66f0:	e7e3      	b.n	b66ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b66f2:	2b22      	cmp	r3, #34	; 0x22
   b66f4:	d008      	beq.n	b6708 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b66f6:	2b7c      	cmp	r3, #124	; 0x7c
   b66f8:	d006      	beq.n	b6708 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b66fa:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b66fe:	f1bc 0f05 	cmp.w	ip, #5
   b6702:	d80a      	bhi.n	b671a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6704:	2b2d      	cmp	r3, #45	; 0x2d
   b6706:	d012      	beq.n	b672e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b6708:	45a8      	cmp	r8, r5
   b670a:	d15b      	bne.n	b67c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b670c:	2f0a      	cmp	r7, #10
   b670e:	d04a      	beq.n	b67a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6710:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6712:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6714:	f04f 0e10 	mov.w	lr, #16
   b6718:	e7e6      	b.n	b66e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b671a:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b671e:	f1bc 0f05 	cmp.w	ip, #5
   b6722:	d9f1      	bls.n	b6708 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6724:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b6728:	f1bc 0f02 	cmp.w	ip, #2
   b672c:	d9ec      	bls.n	b6708 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b672e:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6732:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b6736:	d8e7      	bhi.n	b6708 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b6738:	45a8      	cmp	r8, r5
   b673a:	d0e7      	beq.n	b670c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b673c:	42ba      	cmp	r2, r7
   b673e:	d830      	bhi.n	b67a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6740:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6744:	f1bc 0f19 	cmp.w	ip, #25
   b6748:	d81a      	bhi.n	b6780 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b674a:	3b20      	subs	r3, #32
        lc |= bit;
   b674c:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b6750:	b2db      	uxtb	r3, r3
        lc |= bit;
   b6752:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b6756:	f102 0c01 	add.w	ip, r2, #1
   b675a:	fa5f fc8c 	uxtb.w	ip, ip
   b675e:	440a      	add	r2, r1
      if (i < 7) {
   b6760:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b6764:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b6766:	d801      	bhi.n	b676c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b6768:	f881 c00c 	strb.w	ip, [r1, #12]
   b676c:	4662      	mov	r2, ip
   b676e:	e7bb      	b.n	b66e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b6770:	45a8      	cmp	r8, r5
   b6772:	dc18      	bgt.n	b67a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b6774:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b6776:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6778:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b677a:	f04f 0e10 	mov.w	lr, #16
   b677e:	e7b2      	b.n	b66e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b6780:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b6784:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b6788:	bf98      	it	ls
   b678a:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b678e:	e7e2      	b.n	b6756 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b6790:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b6792:	2001      	movs	r0, #1
   b6794:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b6796:	4419      	add	r1, r3
   b6798:	237e      	movs	r3, #126	; 0x7e
   b679a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b679c:	2331      	movs	r3, #49	; 0x31
   b679e:	738b      	strb	r3, [r1, #14]
   b67a0:	e74b      	b.n	b663a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b67a2:	2f0a      	cmp	r7, #10
   b67a4:	d1e4      	bne.n	b6770 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b67a6:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b67a8:	7b4b      	ldrb	r3, [r1, #13]
   b67aa:	2b20      	cmp	r3, #32
   b67ac:	f43f af44 	beq.w	b6638 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b67b0:	2800      	cmp	r0, #0
   b67b2:	d0ed      	beq.n	b6790 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b67b4:	ea1a 0f09 	tst.w	sl, r9
   b67b8:	bf18      	it	ne
   b67ba:	f04f 0902 	movne.w	r9, #2
   b67be:	f881 9000 	strb.w	r9, [r1]
   b67c2:	e73a      	b.n	b663a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b67c4:	42ba      	cmp	r2, r7
   b67c6:	d8ec      	bhi.n	b67a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b67c8:	2000      	movs	r0, #0
      c = '_';
   b67ca:	235f      	movs	r3, #95	; 0x5f
   b67cc:	e7c3      	b.n	b6756 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b67ce:	bf00      	nop
   b67d0:	31000101 	.word	0x31000101

000b67d4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b67d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b67d8:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b67dc:	4606      	mov	r6, r0
   b67de:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b67e0:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b67e2:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b67e4:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b67e8:	6861      	ldr	r1, [r4, #4]
   b67ea:	68a2      	ldr	r2, [r4, #8]
   b67ec:	186b      	adds	r3, r5, r1
   b67ee:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b67f0:	4411      	add	r1, r2
   b67f2:	4291      	cmp	r1, r2
   b67f4:	d006      	beq.n	b6804 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b67f6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b67fa:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b67fe:	4043      	eors	r3, r0
   b6800:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6802:	e7f6      	b.n	b67f2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6804:	f1b9 0f03 	cmp.w	r9, #3
   b6808:	bf28      	it	cs
   b680a:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b680e:	f109 0204 	add.w	r2, r9, #4
   b6812:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6814:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6818:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b681a:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b681c:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b681e:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6820:	bf94      	ite	ls
   b6822:	3130      	addls	r1, #48	; 0x30
   b6824:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6826:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6828:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b682a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b682e:	d1f1      	bne.n	b6814 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6830:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6834:	2100      	movs	r1, #0
   b6836:	735f      	strb	r7, [r3, #13]
   b6838:	4630      	mov	r0, r6
   b683a:	f000 fb6d 	bl	b6f18 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b683e:	2101      	movs	r1, #1
   b6840:	4630      	mov	r0, r6
   b6842:	f000 fb4a 	bl	b6eda <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b6846:	4601      	mov	r1, r0
   b6848:	b928      	cbnz	r0, b6856 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b684a:	7870      	ldrb	r0, [r6, #1]
   b684c:	fab0 f080 	clz	r0, r0
   b6850:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b6852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b6856:	7803      	ldrb	r3, [r0, #0]
   b6858:	b16b      	cbz	r3, b6876 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b685a:	7ac3      	ldrb	r3, [r0, #11]
   b685c:	071b      	lsls	r3, r3, #28
   b685e:	d4ee      	bmi.n	b683e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b6860:	220b      	movs	r2, #11
   b6862:	4640      	mov	r0, r8
   b6864:	f00d fa7c 	bl	c3d60 <memcmp>
   b6868:	2800      	cmp	r0, #0
   b686a:	d1e8      	bne.n	b683e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b686c:	3501      	adds	r5, #1
   b686e:	b2ad      	uxth	r5, r5
   b6870:	2d64      	cmp	r5, #100	; 0x64
   b6872:	d1b9      	bne.n	b67e8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b6874:	e7ed      	b.n	b6852 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b6876:	2001      	movs	r0, #1
   b6878:	e7eb      	b.n	b6852 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b687c <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b687c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6880:	ed2d 8b02 	vpush	{d8}
   b6884:	b08b      	sub	sp, #44	; 0x2c
   b6886:	460d      	mov	r5, r1
   b6888:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b688a:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b688c:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b688e:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6892:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b6894:	d105      	bne.n	b68a2 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b6896:	2000      	movs	r0, #0
}
   b6898:	b00b      	add	sp, #44	; 0x2c
   b689a:	ecbd 8b02 	vpop	{d8}
   b689e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b68a2:	9b07      	ldr	r3, [sp, #28]
   b68a4:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b68a6:	2b00      	cmp	r3, #0
   b68a8:	d1f5      	bne.n	b6896 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b68aa:	6853      	ldr	r3, [r2, #4]
   b68ac:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b68ae:	7813      	ldrb	r3, [r2, #0]
   b68b0:	079c      	lsls	r4, r3, #30
   b68b2:	bf1f      	itttt	ne
   b68b4:	9b05      	ldrne	r3, [sp, #20]
   b68b6:	330c      	addne	r3, #12
   b68b8:	220d      	movne	r2, #13
   b68ba:	fbb3 f3f2 	udivne	r3, r3, r2
   b68be:	bf1a      	itte	ne
   b68c0:	3301      	addne	r3, #1
   b68c2:	b2db      	uxtbne	r3, r3
   b68c4:	2301      	moveq	r3, #1
    seekSet(0);
   b68c6:	2100      	movs	r1, #0
   b68c8:	4628      	mov	r0, r5
   b68ca:	9303      	str	r3, [sp, #12]
   b68cc:	f000 fb24 	bl	b6f18 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b68d0:	f107 030d 	add.w	r3, r7, #13
  }
   b68d4:	f04f 0b00 	mov.w	fp, #0
   b68d8:	ee08 3a10 	vmov	s16, r3
   b68dc:	46da      	mov	sl, fp
   b68de:	465c      	mov	r4, fp
   b68e0:	465e      	mov	r6, fp
   b68e2:	f8cd b010 	str.w	fp, [sp, #16]
   b68e6:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b68e8:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b68ea:	2101      	movs	r1, #1
   b68ec:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b68ee:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b68f2:	f000 faf2 	bl	b6eda <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b68f6:	4603      	mov	r3, r0
   b68f8:	2800      	cmp	r0, #0
   b68fa:	d171      	bne.n	b69e0 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b68fc:	786b      	ldrb	r3, [r5, #1]
   b68fe:	2b00      	cmp	r3, #0
   b6900:	d1c9      	bne.n	b6896 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b6902:	9b06      	ldr	r3, [sp, #24]
   b6904:	059a      	lsls	r2, r3, #22
   b6906:	d5c6      	bpl.n	b6896 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b6908:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b690c:	3b01      	subs	r3, #1
   b690e:	2b01      	cmp	r3, #1
   b6910:	d8c1      	bhi.n	b6896 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b6912:	9b04      	ldr	r3, [sp, #16]
   b6914:	2c00      	cmp	r4, #0
   b6916:	bf08      	it	eq
   b6918:	4643      	moveq	r3, r8
   b691a:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b691c:	9b03      	ldr	r3, [sp, #12]
   b691e:	429c      	cmp	r4, r3
   b6920:	f0c0 80f1 	bcc.w	b6b06 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b6924:	f1b9 0f00 	cmp.w	r9, #0
   b6928:	f040 810a 	bne.w	b6b40 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b692c:	9b04      	ldr	r3, [sp, #16]
   b692e:	4628      	mov	r0, r5
   b6930:	0159      	lsls	r1, r3, #5
   b6932:	f000 faf1 	bl	b6f18 <_ZN7FatFile7seekSetEm>
   b6936:	2800      	cmp	r0, #0
   b6938:	d0ad      	beq.n	b6896 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b693a:	9b03      	ldr	r3, [sp, #12]
   b693c:	f103 39ff 	add.w	r9, r3, #4294967295
   b6940:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6944:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6946:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b694a:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b694e:	2e00      	cmp	r6, #0
   b6950:	f000 810d 	beq.w	b6b6e <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6954:	2100      	movs	r1, #0
   b6956:	4628      	mov	r0, r5
   b6958:	f000 fabf 	bl	b6eda <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b695c:	4604      	mov	r4, r0
   b695e:	2800      	cmp	r0, #0
   b6960:	d099      	beq.n	b6896 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b6962:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6964:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b6968:	454e      	cmp	r6, r9
   b696a:	f043 0301 	orr.w	r3, r3, #1
   b696e:	bf0c      	ite	eq
   b6970:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b6974:	46b3      	movne	fp, r6
   b6976:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b697a:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b697e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b6982:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6986:	f107 000d 	add.w	r0, r7, #13
   b698a:	f7ff fdb0 	bl	b64ee <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b698e:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6992:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b6994:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6998:	f00b 031f 	and.w	r3, fp, #31
   b699c:	220d      	movs	r2, #13
   b699e:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b69a0:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b69a4:	4353      	muls	r3, r2
   b69a6:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b69a8:	9905      	ldr	r1, [sp, #20]
   b69aa:	4299      	cmp	r1, r3
   b69ac:	f240 80d0 	bls.w	b6b50 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b69b0:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b69b4:	2a04      	cmp	r2, #4
   b69b6:	fa5f fe82 	uxtb.w	lr, r2
   b69ba:	f102 0001 	add.w	r0, r2, #1
   b69be:	f200 80cd 	bhi.w	b6b5c <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b69c2:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b69c6:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b69ca:	280d      	cmp	r0, #13
   b69cc:	f103 0301 	add.w	r3, r3, #1
   b69d0:	4602      	mov	r2, r0
   b69d2:	d1e9      	bne.n	b69a8 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b69d4:	3e01      	subs	r6, #1
   b69d6:	b2f6      	uxtb	r6, r6
   b69d8:	e7b9      	b.n	b694e <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b69da:	f04f 0901 	mov.w	r9, #1
   b69de:	e783      	b.n	b68e8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b69e0:	7802      	ldrb	r2, [r0, #0]
   b69e2:	2ae5      	cmp	r2, #229	; 0xe5
   b69e4:	d000      	beq.n	b69e8 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b69e6:	b97a      	cbnz	r2, b6a08 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b69e8:	9904      	ldr	r1, [sp, #16]
   b69ea:	2c00      	cmp	r4, #0
   b69ec:	bf08      	it	eq
   b69ee:	4641      	moveq	r1, r8
   b69f0:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b69f2:	9903      	ldr	r1, [sp, #12]
   b69f4:	428c      	cmp	r4, r1
        freeFound++;
   b69f6:	bf3c      	itt	cc
   b69f8:	3401      	addcc	r4, #1
   b69fa:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b69fc:	2a00      	cmp	r2, #0
   b69fe:	d080      	beq.n	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6a00:	2ae5      	cmp	r2, #229	; 0xe5
   b6a02:	d105      	bne.n	b6a10 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b6a04:	2600      	movs	r6, #0
   b6a06:	e76f      	b.n	b68e8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b6a08:	9903      	ldr	r1, [sp, #12]
   b6a0a:	428c      	cmp	r4, r1
   b6a0c:	bf38      	it	cc
   b6a0e:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6a10:	2a2e      	cmp	r2, #46	; 0x2e
   b6a12:	d0f7      	beq.n	b6a04 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b6a14:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6a16:	290f      	cmp	r1, #15
   b6a18:	d14a      	bne.n	b6ab0 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b6a1a:	bb16      	cbnz	r6, b6a62 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b6a1c:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b6a20:	f43f af62 	beq.w	b68e8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b6a24:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b6a28:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6a2c:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6a2e:	220d      	movs	r2, #13
   b6a30:	f10a 38ff 	add.w	r8, sl, #4294967295
   b6a34:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b6a38:	9a05      	ldr	r2, [sp, #20]
   b6a3a:	4542      	cmp	r2, r8
   b6a3c:	d9e2      	bls.n	b6a04 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6a3e:	eba2 0208 	sub.w	r2, r2, r8
   b6a42:	9208      	str	r2, [sp, #32]
   b6a44:	2200      	movs	r2, #0
   b6a46:	eb02 0108 	add.w	r1, r2, r8
   b6a4a:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b6a4c:	4618      	mov	r0, r3
   b6a4e:	b2d1      	uxtb	r1, r2
   b6a50:	f7ff fd2c 	bl	b64ac <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b6a54:	9908      	ldr	r1, [sp, #32]
   b6a56:	428a      	cmp	r2, r1
   b6a58:	d10d      	bne.n	b6a76 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b6a5a:	2800      	cmp	r0, #0
   b6a5c:	bf18      	it	ne
   b6a5e:	2600      	movne	r6, #0
   b6a60:	e742      	b.n	b68e8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b6a62:	f10a 3aff 	add.w	sl, sl, #4294967295
   b6a66:	fa5f fa8a 	uxtb.w	sl, sl
   b6a6a:	4552      	cmp	r2, sl
   b6a6c:	d1ca      	bne.n	b6a04 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6a6e:	7b5a      	ldrb	r2, [r3, #13]
   b6a70:	455a      	cmp	r2, fp
   b6a72:	d0dc      	beq.n	b6a2e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b6a74:	e7c6      	b.n	b6a04 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6a76:	28ff      	cmp	r0, #255	; 0xff
   b6a78:	d8c4      	bhi.n	b6a04 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6a7a:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6a7e:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b6a82:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6a84:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6a86:	bf9c      	itt	ls
   b6a88:	f10e 0020 	addls.w	r0, lr, #32
   b6a8c:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6a90:	4608      	mov	r0, r1
   b6a92:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6a94:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6a96:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b6a9a:	f1bc 0f19 	cmp.w	ip, #25
   b6a9e:	bf9c      	itt	ls
   b6aa0:	3120      	addls	r1, #32
   b6aa2:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6aa4:	4571      	cmp	r1, lr
   b6aa6:	d1ad      	bne.n	b6a04 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b6aa8:	3201      	adds	r2, #1
   b6aaa:	2a0d      	cmp	r2, #13
   b6aac:	d1cb      	bne.n	b6a46 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b6aae:	e71b      	b.n	b68e8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6ab0:	0708      	lsls	r0, r1, #28
   b6ab2:	d4a7      	bmi.n	b6a04 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b6ab4:	b15e      	cbz	r6, b6ace <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b6ab6:	f1ba 0f01 	cmp.w	sl, #1
   b6aba:	f47f aeec 	bne.w	b6896 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6abe:	4618      	mov	r0, r3
   b6ac0:	f7ff fd15 	bl	b64ee <_ZN7FatFile11lfnChecksumEPh>
   b6ac4:	4558      	cmp	r0, fp
   b6ac6:	f47f aee6 	bne.w	b6896 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6aca:	46b1      	mov	r9, r6
   b6acc:	e00e      	b.n	b6aec <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6ace:	ee18 1a10 	vmov	r1, s16
   b6ad2:	220b      	movs	r2, #11
   b6ad4:	4618      	mov	r0, r3
   b6ad6:	f00d f943 	bl	c3d60 <memcmp>
   b6ada:	2800      	cmp	r0, #0
   b6adc:	f47f af04 	bne.w	b68e8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b6ae0:	f897 9000 	ldrb.w	r9, [r7]
   b6ae4:	f019 0901 	ands.w	r9, r9, #1
   b6ae8:	f47f af77 	bne.w	b69da <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b6aec:	9b06      	ldr	r3, [sp, #24]
   b6aee:	0519      	lsls	r1, r3, #20
   b6af0:	f53f aed1 	bmi.w	b6896 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b6af4:	9b06      	ldr	r3, [sp, #24]
   b6af6:	9807      	ldr	r0, [sp, #28]
   b6af8:	f8cd 9000 	str.w	r9, [sp]
   b6afc:	4642      	mov	r2, r8
   b6afe:	4629      	mov	r1, r5
   b6b00:	f000 fa4d 	bl	b6f9e <_ZN7FatFile15openCachedEntryEPS_tih>
   b6b04:	e6c8      	b.n	b6898 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b6b06:	2100      	movs	r1, #0
   b6b08:	4628      	mov	r0, r5
   b6b0a:	f000 f9e6 	bl	b6eda <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6b0e:	b9a0      	cbnz	r0, b6b3a <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b6b10:	786b      	ldrb	r3, [r5, #1]
   b6b12:	2b00      	cmp	r3, #0
   b6b14:	f47f aebf 	bne.w	b6896 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b6b18:	4628      	mov	r0, r5
   b6b1a:	f000 f89f 	bl	b6c5c <_ZN7FatFile13addDirClusterEv>
   b6b1e:	2800      	cmp	r0, #0
   b6b20:	f43f aeb9 	beq.w	b6896 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b6b24:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b6b26:	791b      	ldrb	r3, [r3, #4]
   b6b28:	2b01      	cmp	r3, #1
   b6b2a:	f63f aefb 	bhi.w	b6924 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b6b2e:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b6b30:	3410      	adds	r4, #16
   b6b32:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6b34:	42a3      	cmp	r3, r4
   b6b36:	d8ef      	bhi.n	b6b18 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b6b38:	e6f4      	b.n	b6924 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b6b3a:	3401      	adds	r4, #1
   b6b3c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6b3e:	e6ed      	b.n	b691c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b6b40:	4639      	mov	r1, r7
   b6b42:	4628      	mov	r0, r5
   b6b44:	f7ff fe46 	bl	b67d4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b6b48:	2800      	cmp	r0, #0
   b6b4a:	f47f aeef 	bne.w	b692c <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b6b4e:	e6a2      	b.n	b6896 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6b50:	bf14      	ite	ne
   b6b52:	f04f 31ff 	movne.w	r1, #4294967295
   b6b56:	2100      	moveq	r1, #0
   b6b58:	b289      	uxth	r1, r1
   b6b5a:	e72b      	b.n	b69b4 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6b5c:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b6b60:	bf94      	ite	ls
   b6b62:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b6b66:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b6b6a:	8091      	strh	r1, [r2, #4]
   b6b6c:	e72d      	b.n	b69ca <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b6b6e:	4631      	mov	r1, r6
   b6b70:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b6b72:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b6b76:	f000 f9b0 	bl	b6eda <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b6b7a:	4604      	mov	r4, r0
   b6b7c:	2800      	cmp	r0, #0
   b6b7e:	f43f ae8a 	beq.w	b6896 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b6b82:	2220      	movs	r2, #32
   b6b84:	4631      	mov	r1, r6
   b6b86:	f00d f923 	bl	c3dd0 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b6b8a:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b6b8e:	6023      	str	r3, [r4, #0]
   b6b90:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b6b94:	6063      	str	r3, [r4, #4]
   b6b96:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b6b9a:	8123      	strh	r3, [r4, #8]
   b6b9c:	7dfb      	ldrb	r3, [r7, #23]
   b6b9e:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b6ba0:	783b      	ldrb	r3, [r7, #0]
   b6ba2:	f003 0318 	and.w	r3, r3, #24
   b6ba6:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b6ba8:	4b0f      	ldr	r3, [pc, #60]	; (b6be8 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b6baa:	681b      	ldr	r3, [r3, #0]
   b6bac:	b19b      	cbz	r3, b6bd6 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b6bae:	f104 010e 	add.w	r1, r4, #14
   b6bb2:	f104 0010 	add.w	r0, r4, #16
   b6bb6:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b6bb8:	8a23      	ldrh	r3, [r4, #16]
   b6bba:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b6bbc:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b6bbe:	89e3      	ldrh	r3, [r4, #14]
   b6bc0:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b6bc2:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6bc4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b6bc8:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b6bcc:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b6bd0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b6bd4:	e78e      	b.n	b6af4 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b6bd6:	2321      	movs	r3, #33	; 0x21
   b6bd8:	7423      	strb	r3, [r4, #16]
   b6bda:	2328      	movs	r3, #40	; 0x28
   b6bdc:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b6bde:	2308      	movs	r3, #8
   b6be0:	73a6      	strb	r6, [r4, #14]
   b6be2:	73e3      	strb	r3, [r4, #15]
   b6be4:	e7e8      	b.n	b6bb8 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b6be6:	bf00      	nop
   b6be8:	2003e60c 	.word	0x2003e60c

000b6bec <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b6bec:	b510      	push	{r4, lr}
   b6bee:	460c      	mov	r4, r1
    return m_attr;
   b6bf0:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b6bf2:	b909      	cbnz	r1, b6bf8 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b6bf4:	2000      	movs	r0, #0
}
   b6bf6:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b6bf8:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b6bfc:	d005      	beq.n	b6c0a <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b6bfe:	232f      	movs	r3, #47	; 0x2f
   b6c00:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b6c02:	2300      	movs	r3, #0
   b6c04:	7063      	strb	r3, [r4, #1]
  return true;
   b6c06:	2001      	movs	r0, #1
   b6c08:	e7f5      	b.n	b6bf6 <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b6c0a:	f000 f865 	bl	b6cd8 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b6c0e:	2800      	cmp	r0, #0
   b6c10:	d0f0      	beq.n	b6bf4 <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b6c12:	4621      	mov	r1, r4
   b6c14:	f000 f86f 	bl	b6cf6 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b6c18:	e7f5      	b.n	b6c06 <_ZN7FatFile6getSFNEPc+0x1a>

000b6c1a <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b6c1a:	b538      	push	{r3, r4, r5, lr}
   b6c1c:	4604      	mov	r4, r0
   b6c1e:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6c20:	2224      	movs	r2, #36	; 0x24
   b6c22:	2100      	movs	r1, #0
   b6c24:	f00d f8d4 	bl	c3dd0 <memset>

  m_vol = vol;
   b6c28:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b6c2a:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b6c2c:	2b10      	cmp	r3, #16
   b6c2e:	d003      	beq.n	b6c38 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6c30:	2b20      	cmp	r3, #32
   b6c32:	d006      	beq.n	b6c42 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b6c34:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b6c36:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b6c38:	2320      	movs	r3, #32
  m_flags = F_READ;
   b6c3a:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b6c3c:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6c3e:	70a0      	strb	r0, [r4, #2]
  return true;
   b6c40:	e7f9      	b.n	b6c36 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6c42:	2340      	movs	r3, #64	; 0x40
   b6c44:	e7f9      	b.n	b6c3a <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b6c46 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b6c46:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6c48:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b6c4a:	f043 0304 	orr.w	r3, r3, #4
   b6c4e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6c50:	f100 0210 	add.w	r2, r0, #16
   b6c54:	6880      	ldr	r0, [r0, #8]
   b6c56:	f000 bc61 	b.w	b751c <_ZN9FatVolume15allocateClusterEmPm>
	...

000b6c5c <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b6c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b6c60:	7801      	ldrb	r1, [r0, #0]
   b6c62:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b6c66:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b6c68:	d003      	beq.n	b6c72 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b6c6a:	2600      	movs	r6, #0
}
   b6c6c:	4630      	mov	r0, r6
   b6c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b6c72:	6942      	ldr	r2, [r0, #20]
   b6c74:	4b17      	ldr	r3, [pc, #92]	; (b6cd4 <_ZN7FatFile13addDirClusterEv+0x78>)
   b6c76:	429a      	cmp	r2, r3
   b6c78:	d2f7      	bcs.n	b6c6a <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b6c7a:	f7ff ffe4 	bl	b6c46 <_ZN7FatFile10addClusterEv>
   b6c7e:	4606      	mov	r6, r0
   b6c80:	2800      	cmp	r0, #0
   b6c82:	d0f2      	beq.n	b6c6a <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b6c84:	6921      	ldr	r1, [r4, #16]
   b6c86:	68a0      	ldr	r0, [r4, #8]
   b6c88:	f000 fbdd 	bl	b7446 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6c8c:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b6c8e:	68a0      	ldr	r0, [r4, #8]
   b6c90:	2205      	movs	r2, #5
   b6c92:	4639      	mov	r1, r7
   b6c94:	3024      	adds	r0, #36	; 0x24
   b6c96:	f000 fbb3 	bl	b7400 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6c9a:	4680      	mov	r8, r0
   b6c9c:	2800      	cmp	r0, #0
   b6c9e:	d0e4      	beq.n	b6c6a <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b6ca0:	4629      	mov	r1, r5
   b6ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6ca6:	f00d f893 	bl	c3dd0 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6caa:	2501      	movs	r5, #1
   b6cac:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b6cae:	791a      	ldrb	r2, [r3, #4]
   b6cb0:	42aa      	cmp	r2, r5
   b6cb2:	d909      	bls.n	b6cc8 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6cb4:	6818      	ldr	r0, [r3, #0]
   b6cb6:	4642      	mov	r2, r8
   b6cb8:	19e9      	adds	r1, r5, r7
   b6cba:	f000 ff0e 	bl	b7ada <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b6cbe:	2800      	cmp	r0, #0
   b6cc0:	d0d3      	beq.n	b6c6a <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6cc2:	3501      	adds	r5, #1
   b6cc4:	b2ed      	uxtb	r5, r5
   b6cc6:	e7f1      	b.n	b6cac <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b6cc8:	6963      	ldr	r3, [r4, #20]
   b6cca:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b6cce:	6163      	str	r3, [r4, #20]
  return true;
   b6cd0:	e7cc      	b.n	b6c6c <_ZN7FatFile13addDirClusterEv+0x10>
   b6cd2:	bf00      	nop
   b6cd4:	001ffe00 	.word	0x001ffe00

000b6cd8 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b6cd8:	b510      	push	{r4, lr}
   b6cda:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b6cdc:	6880      	ldr	r0, [r0, #8]
   b6cde:	460a      	mov	r2, r1
   b6ce0:	3024      	adds	r0, #36	; 0x24
   b6ce2:	69a1      	ldr	r1, [r4, #24]
   b6ce4:	f000 fb8c 	bl	b7400 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6ce8:	b120      	cbz	r0, b6cf4 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b6cea:	88a3      	ldrh	r3, [r4, #4]
   b6cec:	f003 030f 	and.w	r3, r3, #15
   b6cf0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6cf4:	bd10      	pop	{r4, pc}

000b6cf6 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b6cf6:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b6cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6cfa:	4604      	mov	r4, r0
   b6cfc:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b6cfe:	2608      	movs	r6, #8
  uint8_t j = 0;
   b6d00:	4618      	mov	r0, r3
      name[j++] = '.';
   b6d02:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b6d04:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b6d08:	2a20      	cmp	r2, #32
   b6d0a:	d018      	beq.n	b6d3e <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b6d0c:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b6d0e:	bf02      	ittt	eq
   b6d10:	540f      	strbeq	r7, [r1, r0]
   b6d12:	1c42      	addeq	r2, r0, #1
   b6d14:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b6d16:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b6d18:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b6d1c:	bf08      	it	eq
   b6d1e:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b6d20:	f1bc 0f19 	cmp.w	ip, #25
   b6d24:	d806      	bhi.n	b6d34 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b6d26:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b6d2a:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b6d2e:	bf1c      	itt	ne
   b6d30:	3220      	addne	r2, #32
   b6d32:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b6d34:	f100 0c01 	add.w	ip, r0, #1
   b6d38:	540a      	strb	r2, [r1, r0]
   b6d3a:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b6d3e:	3301      	adds	r3, #1
   b6d40:	b2db      	uxtb	r3, r3
   b6d42:	2b0b      	cmp	r3, #11
   b6d44:	d1de      	bne.n	b6d04 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b6d46:	2300      	movs	r3, #0
   b6d48:	540b      	strb	r3, [r1, r0]
}
   b6d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6d4c <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b6d4c:	7803      	ldrb	r3, [r0, #0]
   b6d4e:	b90b      	cbnz	r3, b6d54 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b6d50:	f7ff bf63 	b.w	b6c1a <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b6d54:	2000      	movs	r0, #0
   b6d56:	4770      	bx	lr

000b6d58 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b6d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d5c:	7803      	ldrb	r3, [r0, #0]
   b6d5e:	4604      	mov	r4, r0
   b6d60:	4688      	mov	r8, r1
   b6d62:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b6d64:	2b00      	cmp	r3, #0
   b6d66:	d05d      	beq.n	b6e24 <_ZN7FatFile4readEPvj+0xcc>
   b6d68:	7882      	ldrb	r2, [r0, #2]
   b6d6a:	07d1      	lsls	r1, r2, #31
   b6d6c:	d55a      	bpl.n	b6e24 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b6d6e:	071a      	lsls	r2, r3, #28
   b6d70:	d52d      	bpl.n	b6dce <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b6d72:	69c3      	ldr	r3, [r0, #28]
   b6d74:	6942      	ldr	r2, [r0, #20]
   b6d76:	1a9b      	subs	r3, r3, r2
   b6d78:	429d      	cmp	r5, r3
   b6d7a:	bf28      	it	cs
   b6d7c:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b6d7e:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b6d80:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6d84:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b6d88:	2e00      	cmp	r6, #0
   b6d8a:	f000 808f 	beq.w	b6eac <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b6d8e:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6d90:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6d92:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b6d94:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b6d96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6d9a:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b6d9e:	d51f      	bpl.n	b6de0 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6da0:	6a00      	ldr	r0, [r0, #32]
   b6da2:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b6da4:	68a0      	ldr	r0, [r4, #8]
   b6da6:	f1ba 0f00 	cmp.w	sl, #0
   b6daa:	d142      	bne.n	b6e32 <_ZN7FatFile4readEPvj+0xda>
   b6dac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6db0:	d33f      	bcc.n	b6e32 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b6db2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6db4:	4299      	cmp	r1, r3
   b6db6:	d03c      	beq.n	b6e32 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6db8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6dbc:	d252      	bcs.n	b6e64 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b6dbe:	6800      	ldr	r0, [r0, #0]
   b6dc0:	4642      	mov	r2, r8
   b6dc2:	f000 fe01 	bl	b79c8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6dc6:	b368      	cbz	r0, b6e24 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6dc8:	f44f 7700 	mov.w	r7, #512	; 0x200
   b6dcc:	e044      	b.n	b6e58 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b6dce:	069b      	lsls	r3, r3, #26
   b6dd0:	d5d5      	bpl.n	b6d7e <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6dd2:	6883      	ldr	r3, [r0, #8]
   b6dd4:	891a      	ldrh	r2, [r3, #8]
   b6dd6:	6943      	ldr	r3, [r0, #20]
   b6dd8:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b6ddc:	b29b      	uxth	r3, r3
   b6dde:	e7cb      	b.n	b6d78 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b6de0:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6de4:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6de8:	f1ba 0f00 	cmp.w	sl, #0
   b6dec:	d108      	bne.n	b6e00 <_ZN7FatFile4readEPvj+0xa8>
   b6dee:	f1b9 0f00 	cmp.w	r9, #0
   b6df2:	d105      	bne.n	b6e00 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6df4:	b95b      	cbnz	r3, b6e0e <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6df6:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6df8:	bf4c      	ite	mi
   b6dfa:	6a03      	ldrmi	r3, [r0, #32]
   b6dfc:	6a23      	ldrpl	r3, [r4, #32]
   b6dfe:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6e00:	6921      	ldr	r1, [r4, #16]
   b6e02:	68a0      	ldr	r0, [r4, #8]
   b6e04:	f000 fb1f 	bl	b7446 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6e08:	eb09 0100 	add.w	r1, r9, r0
   b6e0c:	e7ca      	b.n	b6da4 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6e0e:	6921      	ldr	r1, [r4, #16]
   b6e10:	465a      	mov	r2, fp
   b6e12:	f000 fb1e 	bl	b7452 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6e16:	2800      	cmp	r0, #0
   b6e18:	db04      	blt.n	b6e24 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b6e1a:	d1f1      	bne.n	b6e00 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b6e1c:	7823      	ldrb	r3, [r4, #0]
   b6e1e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6e22:	d143      	bne.n	b6eac <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b6e24:	7863      	ldrb	r3, [r4, #1]
   b6e26:	f043 0302 	orr.w	r3, r3, #2
   b6e2a:	7063      	strb	r3, [r4, #1]
  return -1;
   b6e2c:	f04f 30ff 	mov.w	r0, #4294967295
   b6e30:	e03d      	b.n	b6eae <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b6e32:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b6e36:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6e38:	f04f 0200 	mov.w	r2, #0
   b6e3c:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b6e40:	bf28      	it	cs
   b6e42:	4637      	movcs	r7, r6
   b6e44:	f000 fadc 	bl	b7400 <_ZN8FatCache4readEmh>
      if (!pc) {
   b6e48:	2800      	cmp	r0, #0
   b6e4a:	d0eb      	beq.n	b6e24 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b6e4c:	eb00 010a 	add.w	r1, r0, sl
   b6e50:	463a      	mov	r2, r7
   b6e52:	4640      	mov	r0, r8
   b6e54:	f00c ff94 	bl	c3d80 <memcpy>
    m_curPosition += n;
   b6e58:	6963      	ldr	r3, [r4, #20]
   b6e5a:	443b      	add	r3, r7
    dst += n;
   b6e5c:	44b8      	add	r8, r7
    m_curPosition += n;
   b6e5e:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b6e60:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b6e62:	e791      	b.n	b6d88 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b6e64:	7822      	ldrb	r2, [r4, #0]
   b6e66:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b6e68:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b6e6c:	d406      	bmi.n	b6e7c <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b6e6e:	7902      	ldrb	r2, [r0, #4]
   b6e70:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b6e74:	b2d2      	uxtb	r2, r2
   b6e76:	4592      	cmp	sl, r2
   b6e78:	bf28      	it	cs
   b6e7a:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6e7c:	4299      	cmp	r1, r3
      n = 512*nb;
   b6e7e:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6e82:	d208      	bcs.n	b6e96 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b6e84:	68a0      	ldr	r0, [r4, #8]
   b6e86:	4653      	mov	r3, sl
   b6e88:	6800      	ldr	r0, [r0, #0]
   b6e8a:	4642      	mov	r2, r8
   b6e8c:	f000 fde4 	bl	b7a58 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b6e90:	2800      	cmp	r0, #0
   b6e92:	d1e1      	bne.n	b6e58 <_ZN7FatFile4readEPvj+0x100>
   b6e94:	e7c6      	b.n	b6e24 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6e96:	4453      	add	r3, sl
   b6e98:	428b      	cmp	r3, r1
   b6e9a:	d9f3      	bls.n	b6e84 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b6e9c:	3024      	adds	r0, #36	; 0x24
   b6e9e:	9101      	str	r1, [sp, #4]
   b6ea0:	f000 fa86 	bl	b73b0 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b6ea4:	9901      	ldr	r1, [sp, #4]
   b6ea6:	2800      	cmp	r0, #0
   b6ea8:	d1ec      	bne.n	b6e84 <_ZN7FatFile4readEPvj+0x12c>
   b6eaa:	e7bb      	b.n	b6e24 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6eac:	1ba8      	subs	r0, r5, r6
}
   b6eae:	b003      	add	sp, #12
   b6eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6eb4 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b6eb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b6eb6:	2201      	movs	r2, #1
   b6eb8:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b6ebc:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b6ec0:	4604      	mov	r4, r0
   b6ec2:	f7ff ff49 	bl	b6d58 <_ZN7FatFile4readEPvj>
   b6ec6:	2801      	cmp	r0, #1
   b6ec8:	bf0a      	itet	eq
   b6eca:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b6ece:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6ed2:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6ed6:	b002      	add	sp, #8
   b6ed8:	bd70      	pop	{r4, r5, r6, pc}

000b6eda <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6eda:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6edc:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b6ede:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6ee2:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6ee4:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b6ee8:	d000      	beq.n	b6eec <_ZN7FatFile12readDirCacheEb+0x12>
   b6eea:	b999      	cbnz	r1, b6f14 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b6eec:	2201      	movs	r2, #1
   b6eee:	f10d 0107 	add.w	r1, sp, #7
   b6ef2:	4620      	mov	r0, r4
   b6ef4:	f7ff ff30 	bl	b6d58 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b6ef8:	b240      	sxtb	r0, r0
   b6efa:	2801      	cmp	r0, #1
   b6efc:	d002      	beq.n	b6f04 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b6efe:	2000      	movs	r0, #0
}
   b6f00:	b003      	add	sp, #12
   b6f02:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6f04:	6963      	ldr	r3, [r4, #20]
   b6f06:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b6f08:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b6f0a:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b6f0c:	3030      	adds	r0, #48	; 0x30
   b6f0e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b6f12:	e7f5      	b.n	b6f00 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6f14:	3320      	adds	r3, #32
   b6f16:	e7f7      	b.n	b6f08 <_ZN7FatFile12readDirCacheEb+0x2e>

000b6f18 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b6f1c:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b6f1e:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b6f20:	4604      	mov	r4, r0
   b6f22:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6f24:	b162      	cbz	r2, b6f40 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6f26:	6940      	ldr	r0, [r0, #20]
   b6f28:	4288      	cmp	r0, r1
   b6f2a:	d002      	beq.n	b6f32 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b6f2c:	b919      	cbnz	r1, b6f36 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b6f2e:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b6f30:	6165      	str	r5, [r4, #20]
    return true;
   b6f32:	2001      	movs	r0, #1
   b6f34:	e006      	b.n	b6f44 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b6f36:	0716      	lsls	r6, r2, #28
   b6f38:	d506      	bpl.n	b6f48 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b6f3a:	69e3      	ldr	r3, [r4, #28]
   b6f3c:	428b      	cmp	r3, r1
   b6f3e:	d20b      	bcs.n	b6f58 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b6f40:	6127      	str	r7, [r4, #16]
  return false;
   b6f42:	2000      	movs	r0, #0
}
   b6f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b6f48:	0691      	lsls	r1, r2, #26
   b6f4a:	d505      	bpl.n	b6f58 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b6f4c:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b6f4e:	891b      	ldrh	r3, [r3, #8]
   b6f50:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b6f54:	d9ec      	bls.n	b6f30 <_ZN7FatFile7seekSetEm+0x18>
   b6f56:	e7f3      	b.n	b6f40 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6f58:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b6f5c:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b6f60:	1e43      	subs	r3, r0, #1
   b6f62:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6f66:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6f68:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6f6a:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b6f6c:	42b3      	cmp	r3, r6
   b6f6e:	d800      	bhi.n	b6f72 <_ZN7FatFile7seekSetEm+0x5a>
   b6f70:	b998      	cbnz	r0, b6f9a <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6f72:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b6f74:	bf4c      	ite	mi
   b6f76:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b6f7a:	6a23      	ldrpl	r3, [r4, #32]
   b6f7c:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6f7e:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b6f82:	2e00      	cmp	r6, #0
   b6f84:	d0d4      	beq.n	b6f30 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6f86:	6921      	ldr	r1, [r4, #16]
   b6f88:	68a0      	ldr	r0, [r4, #8]
   b6f8a:	4642      	mov	r2, r8
   b6f8c:	f000 fa61 	bl	b7452 <_ZN9FatVolume6fatGetEmPm>
   b6f90:	2800      	cmp	r0, #0
   b6f92:	f106 36ff 	add.w	r6, r6, #4294967295
   b6f96:	dcf4      	bgt.n	b6f82 <_ZN7FatFile7seekSetEm+0x6a>
   b6f98:	e7d2      	b.n	b6f40 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b6f9a:	1af6      	subs	r6, r6, r3
   b6f9c:	e7ef      	b.n	b6f7e <_ZN7FatFile7seekSetEm+0x66>

000b6f9e <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b6f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6fa0:	460f      	mov	r7, r1
   b6fa2:	4604      	mov	r4, r0
   b6fa4:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b6fa6:	2100      	movs	r1, #0
   b6fa8:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b6faa:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6fac:	f00c ff10 	bl	c3dd0 <memset>
  m_vol = dirFile->m_vol;
   b6fb0:	68b8      	ldr	r0, [r7, #8]
   b6fb2:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6fb4:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b6fb6:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b6fba:	6a3b      	ldr	r3, [r7, #32]
   b6fbc:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b6fbe:	016a      	lsls	r2, r5, #5
   b6fc0:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6fc4:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6fc8:	071f      	lsls	r7, r3, #28
   b6fca:	d444      	bmi.n	b7056 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b6fcc:	f003 0317 	and.w	r3, r3, #23
   b6fd0:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6fd2:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6fd6:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b6fda:	bf04      	itt	eq
   b6fdc:	f043 0308 	orreq.w	r3, r3, #8
   b6fe0:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6fe2:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6fe6:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6fe8:	f006 0303 	and.w	r3, r6, #3
   b6fec:	2b01      	cmp	r3, #1
   b6fee:	d02c      	beq.n	b704a <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b6ff0:	2b02      	cmp	r3, #2
   b6ff2:	d028      	beq.n	b7046 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6ff4:	bb7b      	cbnz	r3, b7056 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6ff6:	0571      	lsls	r1, r6, #21
   b6ff8:	d42d      	bmi.n	b7056 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b6ffa:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b6ffc:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b6ffe:	78a1      	ldrb	r1, [r4, #2]
   b7000:	078b      	lsls	r3, r1, #30
   b7002:	d504      	bpl.n	b700e <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b7004:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b7006:	06df      	lsls	r7, r3, #27
   b7008:	d425      	bmi.n	b7056 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b700a:	07dd      	lsls	r5, r3, #31
   b700c:	d423      	bmi.n	b7056 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b700e:	11b3      	asrs	r3, r6, #6
   b7010:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b7014:	f006 0508 	and.w	r5, r6, #8
   b7018:	432b      	orrs	r3, r5
   b701a:	430b      	orrs	r3, r1
   b701c:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b701e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b7020:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b7022:	1883      	adds	r3, r0, r2
   b7024:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b7028:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b702c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b7030:	0572      	lsls	r2, r6, #21
   b7032:	d513      	bpl.n	b705c <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b7034:	b959      	cbnz	r1, b704e <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b7036:	78a3      	ldrb	r3, [r4, #2]
   b7038:	f043 0304 	orr.w	r3, r3, #4
   b703c:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b703e:	0473      	lsls	r3, r6, #17
   b7040:	d410      	bmi.n	b7064 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b7042:	2001      	movs	r0, #1
}
   b7044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b7046:	2303      	movs	r3, #3
   b7048:	e7d8      	b.n	b6ffc <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b704a:	2302      	movs	r3, #2
   b704c:	e7d6      	b.n	b6ffc <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b704e:	f000 faa0 	bl	b7592 <_ZN9FatVolume9freeChainEm>
   b7052:	2800      	cmp	r0, #0
   b7054:	d1ef      	bne.n	b7036 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b7056:	2000      	movs	r0, #0
   b7058:	7020      	strb	r0, [r4, #0]
  return false;
   b705a:	e7f3      	b.n	b7044 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b705c:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b705e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7060:	61e3      	str	r3, [r4, #28]
   b7062:	e7ec      	b.n	b703e <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b7064:	69e1      	ldr	r1, [r4, #28]
   b7066:	4620      	mov	r0, r4
   b7068:	f7ff ff56 	bl	b6f18 <_ZN7FatFile7seekSetEm>
   b706c:	2800      	cmp	r0, #0
   b706e:	d1e8      	bne.n	b7042 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b7070:	e7f1      	b.n	b7056 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b7072 <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b7072:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b7076:	7803      	ldrb	r3, [r0, #0]
   b7078:	4607      	mov	r7, r0
   b707a:	460d      	mov	r5, r1
   b707c:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b707e:	bb53      	cbnz	r3, b70d6 <_ZN7FatFile8openNextEPS_i+0x64>
   b7080:	780b      	ldrb	r3, [r1, #0]
   b7082:	f013 0f70 	tst.w	r3, #112	; 0x70
   b7086:	d026      	beq.n	b70d6 <_ZN7FatFile8openNextEPS_i+0x64>
   b7088:	694c      	ldr	r4, [r1, #20]
   b708a:	f014 041f 	ands.w	r4, r4, #31
   b708e:	d122      	bne.n	b70d6 <_ZN7FatFile8openNextEPS_i+0x64>
   b7090:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b7092:	2100      	movs	r1, #0
   b7094:	4628      	mov	r0, r5
    return m_curPosition;
   b7096:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b709a:	f7ff ff1e 	bl	b6eda <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b709e:	b1d0      	cbz	r0, b70d6 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b70a0:	7806      	ldrb	r6, [r0, #0]
   b70a2:	b1c6      	cbz	r6, b70d6 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b70a4:	2e2e      	cmp	r6, #46	; 0x2e
   b70a6:	d010      	beq.n	b70ca <_ZN7FatFile8openNextEPS_i+0x58>
   b70a8:	2ee5      	cmp	r6, #229	; 0xe5
   b70aa:	d00e      	beq.n	b70ca <_ZN7FatFile8openNextEPS_i+0x58>
   b70ac:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b70ae:	071a      	lsls	r2, r3, #28
   b70b0:	d413      	bmi.n	b70da <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b70b2:	b964      	cbnz	r4, b70ce <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b70b4:	9400      	str	r4, [sp, #0]
   b70b6:	4653      	mov	r3, sl
   b70b8:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b70bc:	4629      	mov	r1, r5
   b70be:	4638      	mov	r0, r7
   b70c0:	f7ff ff6d 	bl	b6f9e <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b70c4:	b002      	add	sp, #8
   b70c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b70ca:	2400      	movs	r4, #0
   b70cc:	e7e1      	b.n	b7092 <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b70ce:	f7ff fa0e 	bl	b64ee <_ZN7FatFile11lfnChecksumEPh>
   b70d2:	4540      	cmp	r0, r8
   b70d4:	d0ee      	beq.n	b70b4 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b70d6:	2000      	movs	r0, #0
   b70d8:	e7f4      	b.n	b70c4 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b70da:	2b0f      	cmp	r3, #15
   b70dc:	d1f5      	bne.n	b70ca <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b70de:	0673      	lsls	r3, r6, #25
   b70e0:	d5d7      	bpl.n	b7092 <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b70e2:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b70e6:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b70ea:	e7d2      	b.n	b7092 <_ZN7FatFile8openNextEPS_i+0x20>

000b70ec <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b70ec:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b70ee:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b70f0:	4604      	mov	r4, r0
  if (!isOpen()) {
   b70f2:	b90b      	cbnz	r3, b70f8 <_ZN7FatFile4syncEv+0xc>
    return true;
   b70f4:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b70f6:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b70f8:	7883      	ldrb	r3, [r0, #2]
   b70fa:	075a      	lsls	r2, r3, #29
   b70fc:	d523      	bpl.n	b7146 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b70fe:	2101      	movs	r1, #1
   b7100:	f7ff fdea 	bl	b6cd8 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b7104:	4605      	mov	r5, r0
   b7106:	b928      	cbnz	r0, b7114 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b7108:	7863      	ldrb	r3, [r4, #1]
   b710a:	f043 0301 	orr.w	r3, r3, #1
   b710e:	7063      	strb	r3, [r4, #1]
  return false;
   b7110:	2000      	movs	r0, #0
   b7112:	e7f0      	b.n	b70f6 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b7114:	7803      	ldrb	r3, [r0, #0]
   b7116:	2be5      	cmp	r3, #229	; 0xe5
   b7118:	d0f6      	beq.n	b7108 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b711a:	7823      	ldrb	r3, [r4, #0]
   b711c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b711e:	bf44      	itt	mi
   b7120:	69e3      	ldrmi	r3, [r4, #28]
   b7122:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b7124:	6a23      	ldr	r3, [r4, #32]
   b7126:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b7128:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b712a:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b712c:	4b09      	ldr	r3, [pc, #36]	; (b7154 <_ZN7FatFile4syncEv+0x68>)
   b712e:	681b      	ldr	r3, [r3, #0]
   b7130:	b12b      	cbz	r3, b713e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b7132:	f100 0116 	add.w	r1, r0, #22
   b7136:	3018      	adds	r0, #24
   b7138:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b713a:	8b2b      	ldrh	r3, [r5, #24]
   b713c:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b713e:	78a3      	ldrb	r3, [r4, #2]
   b7140:	f023 0304 	bic.w	r3, r3, #4
   b7144:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b7146:	68a0      	ldr	r0, [r4, #8]
   b7148:	f7ff f9c4 	bl	b64d4 <_ZN9FatVolume9cacheSyncEv>
   b714c:	2800      	cmp	r0, #0
   b714e:	d0db      	beq.n	b7108 <_ZN7FatFile4syncEv+0x1c>
   b7150:	e7d0      	b.n	b70f4 <_ZN7FatFile4syncEv+0x8>
   b7152:	bf00      	nop
   b7154:	2003e60c 	.word	0x2003e60c

000b7158 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b7158:	b510      	push	{r4, lr}
   b715a:	4604      	mov	r4, r0
  bool rtn = sync();
   b715c:	f7ff ffc6 	bl	b70ec <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b7160:	2300      	movs	r3, #0
   b7162:	7023      	strb	r3, [r4, #0]
}
   b7164:	bd10      	pop	{r4, pc}

000b7166 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b7166:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7168:	b093      	sub	sp, #76	; 0x4c
   b716a:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b716c:	2300      	movs	r3, #0
   b716e:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b7170:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b7172:	9201      	str	r2, [sp, #4]
   b7174:	4606      	mov	r6, r0
   b7176:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b7178:	b113      	cbz	r3, b7180 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b717a:	2000      	movs	r0, #0
}
   b717c:	b013      	add	sp, #76	; 0x4c
   b717e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b7180:	780b      	ldrb	r3, [r1, #0]
   b7182:	f013 0f70 	tst.w	r3, #112	; 0x70
   b7186:	d0f8      	beq.n	b717a <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b7188:	7813      	ldrb	r3, [r2, #0]
   b718a:	2b2f      	cmp	r3, #47	; 0x2f
   b718c:	d112      	bne.n	b71b4 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b718e:	9a01      	ldr	r2, [sp, #4]
   b7190:	7813      	ldrb	r3, [r2, #0]
   b7192:	2b2f      	cmp	r3, #47	; 0x2f
   b7194:	d102      	bne.n	b719c <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b7196:	3201      	adds	r2, #1
   b7198:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b719a:	e7f8      	b.n	b718e <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b719c:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b719e:	b91b      	cbnz	r3, b71a8 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b71a0:	4630      	mov	r0, r6
   b71a2:	f7ff fdd3 	bl	b6d4c <_ZN7FatFile8openRootEP9FatVolume>
   b71a6:	e7e9      	b.n	b717c <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b71a8:	a809      	add	r0, sp, #36	; 0x24
   b71aa:	f7ff fd36 	bl	b6c1a <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b71ae:	2800      	cmp	r0, #0
   b71b0:	d0e3      	beq.n	b717a <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b71b2:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b71b4:	9801      	ldr	r0, [sp, #4]
   b71b6:	aa01      	add	r2, sp, #4
   b71b8:	a903      	add	r1, sp, #12
   b71ba:	f7ff fa2d 	bl	b6618 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b71be:	2800      	cmp	r0, #0
   b71c0:	d0db      	beq.n	b717a <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b71c2:	9b01      	ldr	r3, [sp, #4]
   b71c4:	781b      	ldrb	r3, [r3, #0]
   b71c6:	b19b      	cbz	r3, b71f0 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b71c8:	2300      	movs	r3, #0
   b71ca:	aa03      	add	r2, sp, #12
   b71cc:	4621      	mov	r1, r4
   b71ce:	4630      	mov	r0, r6
   b71d0:	f7ff fb54 	bl	b687c <_ZN7FatFile4openEPS_P7fname_ti>
   b71d4:	2800      	cmp	r0, #0
   b71d6:	d0d0      	beq.n	b717a <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b71d8:	4635      	mov	r5, r6
   b71da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b71dc:	ac09      	add	r4, sp, #36	; 0x24
   b71de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b71e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b71e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b71e4:	682b      	ldr	r3, [r5, #0]
   b71e6:	6023      	str	r3, [r4, #0]
    close();
   b71e8:	4630      	mov	r0, r6
   b71ea:	f7ff ffb5 	bl	b7158 <_ZN7FatFile5closeEv>
  while (1) {
   b71ee:	e7e0      	b.n	b71b2 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b71f0:	463b      	mov	r3, r7
   b71f2:	aa03      	add	r2, sp, #12
   b71f4:	4621      	mov	r1, r4
   b71f6:	4630      	mov	r0, r6
   b71f8:	f7ff fb40 	bl	b687c <_ZN7FatFile4openEPS_P7fname_ti>
   b71fc:	e7be      	b.n	b717c <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b7200 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b7200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7204:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b7206:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7208:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b720a:	4604      	mov	r4, r0
   b720c:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b720e:	d55b      	bpl.n	b72c8 <_ZN7FatFile5writeEPKvj+0xc8>
   b7210:	7883      	ldrb	r3, [r0, #2]
   b7212:	079a      	lsls	r2, r3, #30
   b7214:	d558      	bpl.n	b72c8 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b7216:	071b      	lsls	r3, r3, #28
   b7218:	d451      	bmi.n	b72be <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b721a:	6963      	ldr	r3, [r4, #20]
   b721c:	43db      	mvns	r3, r3
   b721e:	42bb      	cmp	r3, r7
   b7220:	d352      	bcc.n	b72c8 <_ZN7FatFile5writeEPKvj+0xc8>
   b7222:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7224:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b7228:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b722a:	f1b8 0f00 	cmp.w	r8, #0
   b722e:	f000 8091 	beq.w	b7354 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b7232:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b7234:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b7236:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b723a:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b723e:	d10e      	bne.n	b725e <_ZN7FatFile5writeEPKvj+0x5e>
   b7240:	b96d      	cbnz	r5, b725e <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b7242:	6921      	ldr	r1, [r4, #16]
   b7244:	2900      	cmp	r1, #0
   b7246:	d046      	beq.n	b72d6 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7248:	4652      	mov	r2, sl
   b724a:	f000 f902 	bl	b7452 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b724e:	2800      	cmp	r0, #0
   b7250:	db3a      	blt.n	b72c8 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b7252:	d104      	bne.n	b725e <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b7254:	4620      	mov	r0, r4
   b7256:	f7ff fcf6 	bl	b6c46 <_ZN7FatFile10addClusterEv>
   b725a:	2800      	cmp	r0, #0
   b725c:	d034      	beq.n	b72c8 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b725e:	6921      	ldr	r1, [r4, #16]
   b7260:	68a0      	ldr	r0, [r4, #8]
   b7262:	f000 f8f0 	bl	b7446 <_ZNK9FatVolume17clusterFirstBlockEm>
   b7266:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b7268:	68a0      	ldr	r0, [r4, #8]
   b726a:	b915      	cbnz	r5, b7272 <_ZN7FatFile5writeEPKvj+0x72>
   b726c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b7270:	d23f      	bcs.n	b72f2 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b7272:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b7276:	4546      	cmp	r6, r8
   b7278:	bf28      	it	cs
   b727a:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b727c:	2d00      	cmp	r5, #0
   b727e:	d136      	bne.n	b72ee <_ZN7FatFile5writeEPKvj+0xee>
   b7280:	6962      	ldr	r2, [r4, #20]
   b7282:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b7284:	429a      	cmp	r2, r3
   b7286:	bf34      	ite	cc
   b7288:	2201      	movcc	r2, #1
   b728a:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b728c:	3024      	adds	r0, #36	; 0x24
   b728e:	f000 f8b7 	bl	b7400 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b7292:	b1c8      	cbz	r0, b72c8 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b7294:	4428      	add	r0, r5
   b7296:	4632      	mov	r2, r6
   b7298:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b729a:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b729c:	f00c fd70 	bl	c3d80 <memcpy>
      if (512 == (n + blockOffset)) {
   b72a0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b72a4:	d104      	bne.n	b72b0 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b72a6:	68a0      	ldr	r0, [r4, #8]
   b72a8:	3024      	adds	r0, #36	; 0x24
   b72aa:	f000 f881 	bl	b73b0 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b72ae:	b158      	cbz	r0, b72c8 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b72b0:	6963      	ldr	r3, [r4, #20]
   b72b2:	4433      	add	r3, r6
   b72b4:	6163      	str	r3, [r4, #20]
    src += n;
   b72b6:	44b1      	add	r9, r6
    nToWrite -= n;
   b72b8:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b72bc:	e7b4      	b.n	b7228 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b72be:	69c1      	ldr	r1, [r0, #28]
   b72c0:	f7ff fe2a 	bl	b6f18 <_ZN7FatFile7seekSetEm>
   b72c4:	2800      	cmp	r0, #0
   b72c6:	d1a8      	bne.n	b721a <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b72c8:	7863      	ldrb	r3, [r4, #1]
   b72ca:	f043 0301 	orr.w	r3, r3, #1
   b72ce:	7063      	strb	r3, [r4, #1]
  return -1;
   b72d0:	f04f 30ff 	mov.w	r0, #4294967295
   b72d4:	e050      	b.n	b7378 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b72d6:	6a23      	ldr	r3, [r4, #32]
   b72d8:	b93b      	cbnz	r3, b72ea <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b72da:	4620      	mov	r0, r4
   b72dc:	f7ff fcb3 	bl	b6c46 <_ZN7FatFile10addClusterEv>
   b72e0:	2800      	cmp	r0, #0
   b72e2:	d0f1      	beq.n	b72c8 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b72e4:	6923      	ldr	r3, [r4, #16]
   b72e6:	6223      	str	r3, [r4, #32]
   b72e8:	e7b9      	b.n	b725e <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b72ea:	6123      	str	r3, [r4, #16]
   b72ec:	e7b7      	b.n	b725e <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b72ee:	2201      	movs	r2, #1
   b72f0:	e7cc      	b.n	b728c <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b72f2:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b72f6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b72f8:	d31b      	bcc.n	b7332 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b72fa:	f890 c004 	ldrb.w	ip, [r0, #4]
   b72fe:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b7302:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b7304:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b7308:	4573      	cmp	r3, lr
   b730a:	bf28      	it	cs
   b730c:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b730e:	4291      	cmp	r1, r2
      n = 512*nb;
   b7310:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7314:	d307      	bcc.n	b7326 <_ZN7FatFile5writeEPKvj+0x126>
   b7316:	441a      	add	r2, r3
   b7318:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b731a:	bf82      	ittt	hi
   b731c:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b7320:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7324:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b7326:	68a5      	ldr	r5, [r4, #8]
   b7328:	464a      	mov	r2, r9
   b732a:	6828      	ldr	r0, [r5, #0]
   b732c:	f000 fc4b 	bl	b7bc6 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b7330:	e7bd      	b.n	b72ae <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b7332:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b7334:	bf02      	ittt	eq
   b7336:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b733a:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b733e:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b7340:	68a3      	ldr	r3, [r4, #8]
   b7342:	464a      	mov	r2, r9
   b7344:	6818      	ldr	r0, [r3, #0]
   b7346:	f000 fbc8 	bl	b7ada <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b734a:	2800      	cmp	r0, #0
   b734c:	d0bc      	beq.n	b72c8 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b734e:	f44f 7600 	mov.w	r6, #512	; 0x200
   b7352:	e7ad      	b.n	b72b0 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b7354:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b7356:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b7358:	42b2      	cmp	r2, r6
   b735a:	d204      	bcs.n	b7366 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b735c:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b735e:	f043 0304 	orr.w	r3, r3, #4
   b7362:	70a3      	strb	r3, [r4, #2]
   b7364:	e003      	b.n	b736e <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b7366:	4a08      	ldr	r2, [pc, #32]	; (b7388 <_ZN7FatFile5writeEPKvj+0x188>)
   b7368:	6812      	ldr	r2, [r2, #0]
   b736a:	2a00      	cmp	r2, #0
   b736c:	d1f7      	bne.n	b735e <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b736e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b7372:	2b00      	cmp	r3, #0
   b7374:	db02      	blt.n	b737c <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b7376:	4638      	mov	r0, r7
}
   b7378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b737c:	4620      	mov	r0, r4
   b737e:	f7ff feb5 	bl	b70ec <_ZN7FatFile4syncEv>
   b7382:	2800      	cmp	r0, #0
   b7384:	d1f7      	bne.n	b7376 <_ZN7FatFile5writeEPKvj+0x176>
   b7386:	e79f      	b.n	b72c8 <_ZN7FatFile5writeEPKvj+0xc8>
   b7388:	2003e60c 	.word	0x2003e60c

000b738c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b738c:	b513      	push	{r0, r1, r4, lr}
   b738e:	4604      	mov	r4, r0
    }
   b7390:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7392:	b159      	cbz	r1, b73ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7394:	9101      	str	r1, [sp, #4]
   b7396:	f00c fda6 	bl	c3ee6 <strlen>
   b739a:	6823      	ldr	r3, [r4, #0]
   b739c:	9901      	ldr	r1, [sp, #4]
   b739e:	68db      	ldr	r3, [r3, #12]
   b73a0:	4602      	mov	r2, r0
   b73a2:	4620      	mov	r0, r4
    }
   b73a4:	b002      	add	sp, #8
   b73a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b73aa:	4718      	bx	r3
    }
   b73ac:	b002      	add	sp, #8
   b73ae:	bd10      	pop	{r4, pc}

000b73b0 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b73b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b73b2:	7803      	ldrb	r3, [r0, #0]
   b73b4:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b73b6:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b73b8:	d520      	bpl.n	b73fc <_ZN8FatCache4syncEv+0x4c>
   b73ba:	6843      	ldr	r3, [r0, #4]
   b73bc:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b73be:	f100 020c 	add.w	r2, r0, #12
   b73c2:	6818      	ldr	r0, [r3, #0]
   b73c4:	9201      	str	r2, [sp, #4]
   b73c6:	f000 fb88 	bl	b7ada <_ZN9SdSpiCard10writeBlockEmPKh>
   b73ca:	9a01      	ldr	r2, [sp, #4]
   b73cc:	4605      	mov	r5, r0
   b73ce:	b918      	cbnz	r0, b73d8 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b73d0:	2500      	movs	r5, #0
}
   b73d2:	4628      	mov	r0, r5
   b73d4:	b003      	add	sp, #12
   b73d6:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b73d8:	7823      	ldrb	r3, [r4, #0]
   b73da:	079b      	lsls	r3, r3, #30
   b73dc:	d404      	bmi.n	b73e8 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b73de:	7823      	ldrb	r3, [r4, #0]
   b73e0:	f023 0301 	bic.w	r3, r3, #1
   b73e4:	7023      	strb	r3, [r4, #0]
   b73e6:	e7f4      	b.n	b73d2 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b73e8:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b73ec:	6919      	ldr	r1, [r3, #16]
   b73ee:	4401      	add	r1, r0
   b73f0:	6818      	ldr	r0, [r3, #0]
   b73f2:	f000 fb72 	bl	b7ada <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b73f6:	2800      	cmp	r0, #0
   b73f8:	d1f1      	bne.n	b73de <_ZN8FatCache4syncEv+0x2e>
   b73fa:	e7e9      	b.n	b73d0 <_ZN8FatCache4syncEv+0x20>
  return true;
   b73fc:	2501      	movs	r5, #1
   b73fe:	e7e8      	b.n	b73d2 <_ZN8FatCache4syncEv+0x22>

000b7400 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7400:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b7402:	6883      	ldr	r3, [r0, #8]
   b7404:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7406:	4604      	mov	r4, r0
   b7408:	460e      	mov	r6, r1
   b740a:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b740c:	d009      	beq.n	b7422 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b740e:	f7ff ffcf 	bl	b73b0 <_ZN8FatCache4syncEv>
   b7412:	b908      	cbnz	r0, b7418 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b7414:	2000      	movs	r0, #0
}
   b7416:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b7418:	076b      	lsls	r3, r5, #29
   b741a:	d50a      	bpl.n	b7432 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b741c:	2300      	movs	r3, #0
   b741e:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b7420:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b7422:	7822      	ldrb	r2, [r4, #0]
   b7424:	f005 0503 	and.w	r5, r5, #3
   b7428:	4620      	mov	r0, r4
   b742a:	4315      	orrs	r5, r2
   b742c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b7430:	e7f1      	b.n	b7416 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b7432:	6863      	ldr	r3, [r4, #4]
   b7434:	f104 020c 	add.w	r2, r4, #12
   b7438:	6818      	ldr	r0, [r3, #0]
   b743a:	4631      	mov	r1, r6
   b743c:	f000 fac4 	bl	b79c8 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b7440:	2800      	cmp	r0, #0
   b7442:	d1eb      	bne.n	b741c <_ZN8FatCache4readEmh+0x1c>
   b7444:	e7e6      	b.n	b7414 <_ZN8FatCache4readEmh+0x14>

000b7446 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b7446:	7983      	ldrb	r3, [r0, #6]
   b7448:	6940      	ldr	r0, [r0, #20]
   b744a:	3902      	subs	r1, #2
   b744c:	4099      	lsls	r1, r3
}
   b744e:	4408      	add	r0, r1
   b7450:	4770      	bx	lr

000b7452 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7452:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7454:	b570      	push	{r4, r5, r6, lr}
   b7456:	4605      	mov	r5, r0
   b7458:	460c      	mov	r4, r1
   b745a:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b745c:	d802      	bhi.n	b7464 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b745e:	f04f 30ff 	mov.w	r0, #4294967295
}
   b7462:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7464:	69c3      	ldr	r3, [r0, #28]
   b7466:	428b      	cmp	r3, r1
   b7468:	d3f9      	bcc.n	b745e <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b746a:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b746c:	2b20      	cmp	r3, #32
   b746e:	d116      	bne.n	b749e <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7470:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7472:	2202      	movs	r2, #2
   b7474:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7478:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b747c:	f7ff ffc0 	bl	b7400 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7480:	2800      	cmp	r0, #0
   b7482:	d0ec      	beq.n	b745e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7484:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7488:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b748c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7490:	69ea      	ldr	r2, [r5, #28]
   b7492:	429a      	cmp	r2, r3
  *value = next;
   b7494:	bf26      	itte	cs
   b7496:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7498:	2001      	movcs	r0, #1
    return 0;
   b749a:	2000      	movcc	r0, #0
   b749c:	e7e1      	b.n	b7462 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b749e:	2b10      	cmp	r3, #16
   b74a0:	d1dd      	bne.n	b745e <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b74a2:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b74a6:	6981      	ldr	r1, [r0, #24]
   b74a8:	2202      	movs	r2, #2
   b74aa:	4419      	add	r1, r3
   b74ac:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b74b0:	f7ff ffa6 	bl	b7400 <_ZN8FatCache4readEmh>
    if (!pc) {
   b74b4:	2800      	cmp	r0, #0
   b74b6:	d0d2      	beq.n	b745e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b74b8:	b2e4      	uxtb	r4, r4
   b74ba:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b74be:	e7e7      	b.n	b7490 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b74c0 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b74c0:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b74c2:	b538      	push	{r3, r4, r5, lr}
   b74c4:	460c      	mov	r4, r1
   b74c6:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b74c8:	d801      	bhi.n	b74ce <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b74ca:	2000      	movs	r0, #0
}
   b74cc:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b74ce:	69c3      	ldr	r3, [r0, #28]
   b74d0:	428b      	cmp	r3, r1
   b74d2:	d3fa      	bcc.n	b74ca <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b74d4:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b74d6:	2b20      	cmp	r3, #32
   b74d8:	d10f      	bne.n	b74fa <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b74da:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b74dc:	2203      	movs	r2, #3
   b74de:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b74e2:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b74e6:	f7ff ff8b 	bl	b7400 <_ZN8FatCache4readEmh>
    if (!pc) {
   b74ea:	2800      	cmp	r0, #0
   b74ec:	d0ed      	beq.n	b74ca <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b74ee:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b74f2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b74f6:	2001      	movs	r0, #1
   b74f8:	e7e8      	b.n	b74cc <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b74fa:	2b10      	cmp	r3, #16
   b74fc:	d1e5      	bne.n	b74ca <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b74fe:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7502:	6981      	ldr	r1, [r0, #24]
   b7504:	2203      	movs	r2, #3
   b7506:	4419      	add	r1, r3
   b7508:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b750c:	f7ff ff78 	bl	b7400 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7510:	2800      	cmp	r0, #0
   b7512:	d0da      	beq.n	b74ca <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b7514:	b2e4      	uxtb	r4, r4
   b7516:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b751a:	e7ec      	b.n	b74f6 <_ZN9FatVolume6fatPutEmm+0x36>

000b751c <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b751c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b7520:	68c4      	ldr	r4, [r0, #12]
   b7522:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7524:	4605      	mov	r5, r0
   b7526:	460e      	mov	r6, r1
   b7528:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b752a:	d301      	bcc.n	b7530 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b752c:	2701      	movs	r7, #1
   b752e:	e001      	b.n	b7534 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7530:	460c      	mov	r4, r1
    setStart = false;
   b7532:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b7534:	69eb      	ldr	r3, [r5, #28]
    find++;
   b7536:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b7538:	42a3      	cmp	r3, r4
   b753a:	d202      	bcs.n	b7542 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b753c:	b9c7      	cbnz	r7, b7570 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b753e:	68ec      	ldr	r4, [r5, #12]
   b7540:	e7f4      	b.n	b752c <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b7542:	42a6      	cmp	r6, r4
   b7544:	d014      	beq.n	b7570 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b7546:	aa01      	add	r2, sp, #4
   b7548:	4621      	mov	r1, r4
   b754a:	4628      	mov	r0, r5
   b754c:	f7ff ff81 	bl	b7452 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7550:	2800      	cmp	r0, #0
   b7552:	db0d      	blt.n	b7570 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7554:	d0ee      	beq.n	b7534 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7556:	9b01      	ldr	r3, [sp, #4]
   b7558:	2b00      	cmp	r3, #0
   b755a:	d1eb      	bne.n	b7534 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b755c:	b107      	cbz	r7, b7560 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b755e:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b7560:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7564:	4621      	mov	r1, r4
   b7566:	4628      	mov	r0, r5
   b7568:	f7ff ffaa 	bl	b74c0 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b756c:	4607      	mov	r7, r0
   b756e:	b920      	cbnz	r0, b757a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7570:	2700      	movs	r7, #0
}
   b7572:	4638      	mov	r0, r7
   b7574:	b002      	add	sp, #8
   b7576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b757a:	b916      	cbnz	r6, b7582 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b757c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7580:	e7f7      	b.n	b7572 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b7582:	4622      	mov	r2, r4
   b7584:	4631      	mov	r1, r6
   b7586:	4628      	mov	r0, r5
   b7588:	f7ff ff9a 	bl	b74c0 <_ZN9FatVolume6fatPutEmm>
   b758c:	2800      	cmp	r0, #0
   b758e:	d1f5      	bne.n	b757c <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7590:	e7ee      	b.n	b7570 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b7592 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b7592:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7594:	4605      	mov	r5, r0
   b7596:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7598:	aa01      	add	r2, sp, #4
   b759a:	4621      	mov	r1, r4
   b759c:	4628      	mov	r0, r5
   b759e:	f7ff ff58 	bl	b7452 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b75a2:	1e06      	subs	r6, r0, #0
   b75a4:	db10      	blt.n	b75c8 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b75a6:	2200      	movs	r2, #0
   b75a8:	4621      	mov	r1, r4
   b75aa:	4628      	mov	r0, r5
   b75ac:	f7ff ff88 	bl	b74c0 <_ZN9FatVolume6fatPutEmm>
   b75b0:	b150      	cbz	r0, b75c8 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b75b2:	68eb      	ldr	r3, [r5, #12]
   b75b4:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b75b6:	bf24      	itt	cs
   b75b8:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b75bc:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b75be:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b75c0:	2e00      	cmp	r6, #0
   b75c2:	d1e9      	bne.n	b7598 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b75c4:	b002      	add	sp, #8
   b75c6:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b75c8:	2000      	movs	r0, #0
   b75ca:	e7fb      	b.n	b75c4 <_ZN9FatVolume9freeChainEm+0x32>

000b75cc <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b75cc:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b75ce:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b75d0:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b75d2:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b75d4:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b75d8:	4604      	mov	r4, r0
  m_fatType = 0;
   b75da:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b75dc:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b75e0:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b75e2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b75e6:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b75e8:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b75ec:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b75f0:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b75f4:	460d      	mov	r5, r1
   b75f6:	b1b9      	cbz	r1, b7628 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b75f8:	2904      	cmp	r1, #4
   b75fa:	d901      	bls.n	b7600 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b75fc:	2000      	movs	r0, #0
}
   b75fe:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b7600:	4611      	mov	r1, r2
   b7602:	4630      	mov	r0, r6
   b7604:	f7ff fefc 	bl	b7400 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7608:	2800      	cmp	r0, #0
   b760a:	d0f7      	beq.n	b75fc <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b760c:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b7610:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b7614:	065b      	lsls	r3, r3, #25
   b7616:	d1f1      	bne.n	b75fc <_ZN9FatVolume4initEh+0x30>
   b7618:	f105 011b 	add.w	r1, r5, #27
   b761c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b7620:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b7624:	2d00      	cmp	r5, #0
   b7626:	d0e9      	beq.n	b75fc <_ZN9FatVolume4initEh+0x30>
   b7628:	2200      	movs	r2, #0
   b762a:	4629      	mov	r1, r5
   b762c:	4630      	mov	r0, r6
   b762e:	f7ff fee7 	bl	b7400 <_ZN8FatCache4readEmh>
  if (!pc) {
   b7632:	2800      	cmp	r0, #0
   b7634:	d0e2      	beq.n	b75fc <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b7636:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b763a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b763e:	d1dd      	bne.n	b75fc <_ZN9FatVolume4initEh+0x30>
   b7640:	7c03      	ldrb	r3, [r0, #16]
   b7642:	2b02      	cmp	r3, #2
   b7644:	d1da      	bne.n	b75fc <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b7646:	89c3      	ldrh	r3, [r0, #14]
   b7648:	2b00      	cmp	r3, #0
   b764a:	d0d7      	beq.n	b75fc <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b764c:	7b41      	ldrb	r1, [r0, #13]
   b764e:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b7650:	1e4b      	subs	r3, r1, #1
   b7652:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7654:	2300      	movs	r3, #0
   b7656:	71a3      	strb	r3, [r4, #6]
   b7658:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b765a:	2301      	movs	r3, #1
   b765c:	4299      	cmp	r1, r3
   b765e:	d007      	beq.n	b7670 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b7660:	3e01      	subs	r6, #1
   b7662:	d0cb      	beq.n	b75fc <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7664:	79a2      	ldrb	r2, [r4, #6]
   b7666:	005b      	lsls	r3, r3, #1
   b7668:	3201      	adds	r2, #1
   b766a:	b2db      	uxtb	r3, r3
   b766c:	71a2      	strb	r2, [r4, #6]
   b766e:	e7f5      	b.n	b765c <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7670:	8ac1      	ldrh	r1, [r0, #22]
   b7672:	b901      	cbnz	r1, b7676 <_ZN9FatVolume4initEh+0xaa>
   b7674:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7676:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7678:	89c3      	ldrh	r3, [r0, #14]
   b767a:	442b      	add	r3, r5
   b767c:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b767e:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7682:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7684:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7688:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b768a:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b768e:	0149      	lsls	r1, r1, #5
   b7690:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7694:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7698:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b769a:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b769e:	b902      	cbnz	r2, b76a2 <_ZN9FatVolume4initEh+0xd6>
   b76a0:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b76a2:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b76a4:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b76a6:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b76a8:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b76aa:	1c4b      	adds	r3, r1, #1
   b76ac:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b76ae:	f640 73f4 	movw	r3, #4084	; 0xff4
   b76b2:	4299      	cmp	r1, r3
   b76b4:	d802      	bhi.n	b76bc <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b76b6:	230c      	movs	r3, #12
   b76b8:	71e3      	strb	r3, [r4, #7]
   b76ba:	e79f      	b.n	b75fc <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b76bc:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b76c0:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b76c2:	bf85      	ittet	hi
   b76c4:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b76c6:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b76c8:	2310      	movls	r3, #16
    m_fatType = 32;
   b76ca:	2320      	movhi	r3, #32
   b76cc:	71e3      	strb	r3, [r4, #7]
  return true;
   b76ce:	2001      	movs	r0, #1
   b76d0:	e795      	b.n	b75fe <_ZN9FatVolume4initEh+0x32>

000b76d2 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b76d2:	f000 bacb 	b.w	b7c6c <_ZN14SdSpiAltDriver4sendEh>

000b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b76d6:	f000 baae 	b.w	b7c36 <_ZN14SdSpiAltDriver7receiveEv>
	...

000b76dc <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b76dc:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b76de:	4e0e      	ldr	r6, [pc, #56]	; (b7718 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b76e0:	460d      	mov	r5, r1
   b76e2:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b76e4:	f005 fec8 	bl	bd478 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b76e8:	6833      	ldr	r3, [r6, #0]
   b76ea:	1ac0      	subs	r0, r0, r3
   b76ec:	4b0b      	ldr	r3, [pc, #44]	; (b771c <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b76ee:	4298      	cmp	r0, r3
   b76f0:	d908      	bls.n	b7704 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b76f2:	f005 fec9 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b76f6:	4b0a      	ldr	r3, [pc, #40]	; (b7720 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b76f8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b76fa:	f006 f9fd 	bl	bdaf8 <spark_process>
   b76fe:	f005 febb 	bl	bd478 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b7702:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7704:	f005 fec0 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7708:	b280      	uxth	r0, r0
   b770a:	1b40      	subs	r0, r0, r5
}
   b770c:	42a0      	cmp	r0, r4
   b770e:	bfd4      	ite	le
   b7710:	2000      	movle	r0, #0
   b7712:	2001      	movgt	r0, #1
   b7714:	bd70      	pop	{r4, r5, r6, pc}
   b7716:	bf00      	nop
   b7718:	2003e614 	.word	0x2003e614
   b771c:	000186a0 	.word	0x000186a0
   b7720:	2003e740 	.word	0x2003e740

000b7724 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b7724:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b7726:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7728:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b772a:	b94d      	cbnz	r5, b7740 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b772c:	6840      	ldr	r0, [r0, #4]
   b772e:	f000 fa6b 	bl	b7c08 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b7732:	6863      	ldr	r3, [r4, #4]
   b7734:	4629      	mov	r1, r5
   b7736:	7d18      	ldrb	r0, [r3, #20]
   b7738:	f00a f875 	bl	c1826 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b773c:	2301      	movs	r3, #1
   b773e:	7223      	strb	r3, [r4, #8]
  }
}
   b7740:	bd38      	pop	{r3, r4, r5, pc}

000b7742 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b7742:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b7744:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b7746:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7748:	b16b      	cbz	r3, b7766 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b774a:	6843      	ldr	r3, [r0, #4]
   b774c:	2101      	movs	r1, #1
   b774e:	7d18      	ldrb	r0, [r3, #20]
   b7750:	f00a f869 	bl	c1826 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7754:	6860      	ldr	r0, [r4, #4]
   b7756:	21ff      	movs	r1, #255	; 0xff
   b7758:	f7ff ffbb 	bl	b76d2 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b775c:	6860      	ldr	r0, [r4, #4]
   b775e:	f000 fa67 	bl	b7c30 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b7762:	2300      	movs	r3, #0
   b7764:	7223      	strb	r3, [r4, #8]
  }
}
   b7766:	bd10      	pop	{r4, pc}

000b7768 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b776a:	4604      	mov	r4, r0
   b776c:	460d      	mov	r5, r1
   b776e:	4616      	mov	r6, r2
   b7770:	f005 fe8a 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7774:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7776:	6860      	ldr	r0, [r4, #4]
   b7778:	f7ff ffad 	bl	b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b777c:	28ff      	cmp	r0, #255	; 0xff
   b777e:	7260      	strb	r0, [r4, #9]
   b7780:	d10e      	bne.n	b77a0 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b7782:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7786:	4639      	mov	r1, r7
   b7788:	4620      	mov	r0, r4
   b778a:	f7ff ffa7 	bl	b76dc <_ZN9SdSpiCard10isTimedOutEtt>
   b778e:	2800      	cmp	r0, #0
   b7790:	d0f1      	beq.n	b7776 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b7792:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7794:	4620      	mov	r0, r4
   b7796:	7023      	strb	r3, [r4, #0]
   b7798:	f7ff ffd3 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b779c:	2000      	movs	r0, #0
}
   b779e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b77a0:	28fe      	cmp	r0, #254	; 0xfe
   b77a2:	d001      	beq.n	b77a8 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b77a4:	2350      	movs	r3, #80	; 0x50
   b77a6:	e7f5      	b.n	b7794 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b77a8:	6860      	ldr	r0, [r4, #4]
   b77aa:	4632      	mov	r2, r6
   b77ac:	4629      	mov	r1, r5
   b77ae:	f000 fa47 	bl	b7c40 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b77b2:	7260      	strb	r0, [r4, #9]
   b77b4:	b108      	cbz	r0, b77ba <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b77b6:	2360      	movs	r3, #96	; 0x60
   b77b8:	e7ec      	b.n	b7794 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b77ba:	6860      	ldr	r0, [r4, #4]
   b77bc:	f7ff ff8b 	bl	b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b77c0:	6860      	ldr	r0, [r4, #4]
   b77c2:	f7ff ff88 	bl	b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b77c6:	2001      	movs	r0, #1
   b77c8:	e7e9      	b.n	b779e <_ZN9SdSpiCard8readDataEPhj+0x36>

000b77ca <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b77ca:	b570      	push	{r4, r5, r6, lr}
   b77cc:	4604      	mov	r4, r0
   b77ce:	460e      	mov	r6, r1
   b77d0:	f005 fe5a 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   b77d4:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b77d6:	4632      	mov	r2, r6
   b77d8:	4629      	mov	r1, r5
   b77da:	4620      	mov	r0, r4
   b77dc:	f7ff ff7e 	bl	b76dc <_ZN9SdSpiCard10isTimedOutEtt>
   b77e0:	b930      	cbnz	r0, b77f0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b77e2:	6860      	ldr	r0, [r4, #4]
   b77e4:	f7ff ff77 	bl	b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b77e8:	28ff      	cmp	r0, #255	; 0xff
   b77ea:	d1f4      	bne.n	b77d6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b77ec:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b77ee:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b77f0:	2000      	movs	r0, #0
   b77f2:	e7fc      	b.n	b77ee <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b77f4 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b77f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b77f6:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b77f8:	9201      	str	r2, [sp, #4]
   b77fa:	4604      	mov	r4, r0
   b77fc:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b77fe:	b90b      	cbnz	r3, b7804 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b7800:	f7ff ff90 	bl	b7724 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b7804:	b125      	cbz	r5, b7810 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b7806:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b780a:	4620      	mov	r0, r4
   b780c:	f7ff ffdd 	bl	b77ca <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b7810:	6860      	ldr	r0, [r4, #4]
   b7812:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b7816:	f7ff ff5c 	bl	b76d2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b781a:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b781c:	af01      	add	r7, sp, #4
   b781e:	5db9      	ldrb	r1, [r7, r6]
   b7820:	6860      	ldr	r0, [r4, #4]
   b7822:	f7ff ff56 	bl	b76d2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b7826:	3e01      	subs	r6, #1
   b7828:	d2f9      	bcs.n	b781e <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b782a:	2d00      	cmp	r5, #0
   b782c:	6860      	ldr	r0, [r4, #4]
   b782e:	bf0c      	ite	eq
   b7830:	2195      	moveq	r1, #149	; 0x95
   b7832:	2187      	movne	r1, #135	; 0x87
   b7834:	f7ff ff4d 	bl	b76d2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b7838:	6860      	ldr	r0, [r4, #4]
   b783a:	f7ff ff4c 	bl	b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b783e:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b7840:	6860      	ldr	r0, [r4, #4]
   b7842:	f7ff ff48 	bl	b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7846:	0603      	lsls	r3, r0, #24
   b7848:	7260      	strb	r0, [r4, #9]
   b784a:	d503      	bpl.n	b7854 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b784c:	3d01      	subs	r5, #1
   b784e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7852:	d1f5      	bne.n	b7840 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7854:	b003      	add	sp, #12
   b7856:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7858 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7858:	b570      	push	{r4, r5, r6, lr}
   b785a:	4604      	mov	r4, r0
   b785c:	460d      	mov	r5, r1
   b785e:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7860:	2137      	movs	r1, #55	; 0x37
   b7862:	2200      	movs	r2, #0
   b7864:	f7ff ffc6 	bl	b77f4 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7868:	4632      	mov	r2, r6
   b786a:	4629      	mov	r1, r5
   b786c:	4620      	mov	r0, r4
  }
   b786e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7872:	f7ff bfbf 	b.w	b77f4 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7878 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b787c:	2500      	movs	r5, #0
   b787e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7880:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7882:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7884:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7886:	4604      	mov	r4, r0
   b7888:	4690      	mov	r8, r2
   b788a:	461e      	mov	r6, r3
   b788c:	f005 fdfc 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7890:	4641      	mov	r1, r8
   b7892:	4607      	mov	r7, r0
   b7894:	6860      	ldr	r0, [r4, #4]
   b7896:	f000 f9bb 	bl	b7c10 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b789a:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b789c:	4a49      	ldr	r2, [pc, #292]	; (b79c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b789e:	721d      	strb	r5, [r3, #8]
   b78a0:	2501      	movs	r5, #1
   b78a2:	60da      	str	r2, [r3, #12]
   b78a4:	821d      	strh	r5, [r3, #16]
  spiStart();
   b78a6:	4620      	mov	r0, r4
   b78a8:	f7ff ff3c 	bl	b7724 <_ZN9SdSpiCard8spiStartEv>
   b78ac:	6863      	ldr	r3, [r4, #4]
   b78ae:	4629      	mov	r1, r5
   b78b0:	7d18      	ldrb	r0, [r3, #20]
   b78b2:	f009 ffb8 	bl	c1826 <digitalWrite>
   b78b6:	250a      	movs	r5, #10
    spiSend(0XFF);
   b78b8:	6860      	ldr	r0, [r4, #4]
   b78ba:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b78bc:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b78be:	f7ff ff08 	bl	b76d2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b78c2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b78c6:	d1f7      	bne.n	b78b8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b78c8:	6863      	ldr	r3, [r4, #4]
   b78ca:	4629      	mov	r1, r5
   b78cc:	7d18      	ldrb	r0, [r3, #20]
   b78ce:	f009 ffaa 	bl	c1826 <digitalWrite>
  }
   b78d2:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b78d4:	2200      	movs	r2, #0
   b78d6:	4611      	mov	r1, r2
   b78d8:	4620      	mov	r0, r4
   b78da:	f7ff ff8b 	bl	b77f4 <_ZN9SdSpiCard11cardCommandEhm>
   b78de:	2801      	cmp	r0, #1
   b78e0:	4680      	mov	r8, r0
   b78e2:	d018      	beq.n	b7916 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b78e4:	3d01      	subs	r5, #1
   b78e6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b78ea:	d107      	bne.n	b78fc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b78ec:	2320      	movs	r3, #32
  spiStop();
   b78ee:	4620      	mov	r0, r4
   b78f0:	7023      	strb	r3, [r4, #0]
   b78f2:	f7ff ff26 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b78f6:	2000      	movs	r0, #0
}
   b78f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b78fc:	6860      	ldr	r0, [r4, #4]
   b78fe:	21fd      	movs	r1, #253	; 0xfd
   b7900:	f7ff fee7 	bl	b76d2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7904:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7908:	6860      	ldr	r0, [r4, #4]
   b790a:	f7ff fee4 	bl	b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b790e:	f1b8 0801 	subs.w	r8, r8, #1
   b7912:	d1f9      	bne.n	b7908 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7914:	e7de      	b.n	b78d4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b7916:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b791a:	2108      	movs	r1, #8
   b791c:	4620      	mov	r0, r4
   b791e:	f7ff ff69 	bl	b77f4 <_ZN9SdSpiCard11cardCommandEhm>
   b7922:	2805      	cmp	r0, #5
   b7924:	d114      	bne.n	b7950 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b7926:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b792a:	2500      	movs	r5, #0
   b792c:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b792e:	462a      	mov	r2, r5
   b7930:	2129      	movs	r1, #41	; 0x29
   b7932:	4620      	mov	r0, r4
   b7934:	f7ff ff90 	bl	b7858 <_ZN9SdSpiCard8cardAcmdEhm>
   b7938:	4602      	mov	r2, r0
   b793a:	b1d8      	cbz	r0, b7974 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b793c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7940:	4639      	mov	r1, r7
   b7942:	4620      	mov	r0, r4
   b7944:	f7ff feca 	bl	b76dc <_ZN9SdSpiCard10isTimedOutEtt>
   b7948:	2800      	cmp	r0, #0
   b794a:	d0f0      	beq.n	b792e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b794c:	2343      	movs	r3, #67	; 0x43
   b794e:	e7ce      	b.n	b78ee <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7950:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7952:	6860      	ldr	r0, [r4, #4]
   b7954:	f7ff febf 	bl	b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7958:	3d01      	subs	r5, #1
   b795a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b795e:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7960:	d1f7      	bne.n	b7952 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7962:	28aa      	cmp	r0, #170	; 0xaa
   b7964:	d104      	bne.n	b7970 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7966:	2302      	movs	r3, #2
   b7968:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b796a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b796e:	e7dd      	b.n	b792c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7970:	2325      	movs	r3, #37	; 0x25
   b7972:	e7bc      	b.n	b78ee <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7974:	7aa3      	ldrb	r3, [r4, #10]
   b7976:	2b02      	cmp	r3, #2
   b7978:	d118      	bne.n	b79ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b797a:	213a      	movs	r1, #58	; 0x3a
   b797c:	4620      	mov	r0, r4
   b797e:	f7ff ff39 	bl	b77f4 <_ZN9SdSpiCard11cardCommandEhm>
   b7982:	b108      	cbz	r0, b7988 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7984:	2337      	movs	r3, #55	; 0x37
   b7986:	e7b2      	b.n	b78ee <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7988:	6860      	ldr	r0, [r4, #4]
   b798a:	f7ff fea4 	bl	b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b798e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7992:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7994:	bf04      	itt	eq
   b7996:	2303      	moveq	r3, #3
   b7998:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b799a:	6860      	ldr	r0, [r4, #4]
   b799c:	f7ff fe9b 	bl	b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79a0:	6860      	ldr	r0, [r4, #4]
   b79a2:	f7ff fe98 	bl	b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79a6:	6860      	ldr	r0, [r4, #4]
   b79a8:	f7ff fe95 	bl	b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b79ac:	4620      	mov	r0, r4
   b79ae:	f7ff fec8 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b79b2:	6863      	ldr	r3, [r4, #4]
   b79b4:	7930      	ldrb	r0, [r6, #4]
   b79b6:	68b1      	ldr	r1, [r6, #8]
   b79b8:	89b2      	ldrh	r2, [r6, #12]
   b79ba:	821a      	strh	r2, [r3, #16]
   b79bc:	7218      	strb	r0, [r3, #8]
   b79be:	60d9      	str	r1, [r3, #12]
  return true;
   b79c0:	2001      	movs	r0, #1
   b79c2:	e799      	b.n	b78f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b79c4:	0003d090 	.word	0x0003d090

000b79c8 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b79c8:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b79ca:	7a83      	ldrb	r3, [r0, #10]
   b79cc:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b79ce:	bf18      	it	ne
   b79d0:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b79d2:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b79d4:	460a      	mov	r2, r1
   b79d6:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b79d8:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b79da:	f7ff ff0b 	bl	b77f4 <_ZN9SdSpiCard11cardCommandEhm>
   b79de:	b130      	cbz	r0, b79ee <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b79e0:	2330      	movs	r3, #48	; 0x30
   b79e2:	7023      	strb	r3, [r4, #0]
  spiStop();
   b79e4:	4620      	mov	r0, r4
   b79e6:	f7ff feac 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b79ea:	2500      	movs	r5, #0
   b79ec:	e00b      	b.n	b7a06 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b79ee:	4629      	mov	r1, r5
   b79f0:	f44f 7200 	mov.w	r2, #512	; 0x200
   b79f4:	4620      	mov	r0, r4
   b79f6:	f7ff feb7 	bl	b7768 <_ZN9SdSpiCard8readDataEPhj>
   b79fa:	4605      	mov	r5, r0
   b79fc:	2800      	cmp	r0, #0
   b79fe:	d0f1      	beq.n	b79e4 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b7a00:	4620      	mov	r0, r4
   b7a02:	f7ff fe9e 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>
}
   b7a06:	4628      	mov	r0, r5
   b7a08:	bd38      	pop	{r3, r4, r5, pc}

000b7a0a <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7a0a:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7a0c:	7a83      	ldrb	r3, [r0, #10]
   b7a0e:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7a10:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7a12:	bf18      	it	ne
   b7a14:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b7a16:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7a18:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b7a1a:	f7ff feeb 	bl	b77f4 <_ZN9SdSpiCard11cardCommandEhm>
   b7a1e:	b130      	cbz	r0, b7a2e <_ZN9SdSpiCard9readStartEm+0x24>
   b7a20:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b7a22:	4620      	mov	r0, r4
   b7a24:	7023      	strb	r3, [r4, #0]
   b7a26:	f7ff fe8c 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a2a:	2000      	movs	r0, #0
}
   b7a2c:	bd10      	pop	{r4, pc}
  return true;
   b7a2e:	2001      	movs	r0, #1
   b7a30:	e7fc      	b.n	b7a2c <_ZN9SdSpiCard9readStartEm+0x22>

000b7a32 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b7a32:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b7a34:	2200      	movs	r2, #0
   b7a36:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b7a38:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b7a3a:	f7ff fedb 	bl	b77f4 <_ZN9SdSpiCard11cardCommandEhm>
   b7a3e:	b130      	cbz	r0, b7a4e <_ZN9SdSpiCard8readStopEv+0x1c>
   b7a40:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b7a42:	4620      	mov	r0, r4
   b7a44:	7023      	strb	r3, [r4, #0]
   b7a46:	f7ff fe7c 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a4a:	2000      	movs	r0, #0
}
   b7a4c:	bd10      	pop	{r4, pc}
  spiStop();
   b7a4e:	4620      	mov	r0, r4
   b7a50:	f7ff fe77 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7a54:	2001      	movs	r0, #1
   b7a56:	e7f9      	b.n	b7a4c <_ZN9SdSpiCard8readStopEv+0x1a>

000b7a58 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a5a:	4604      	mov	r4, r0
   b7a5c:	4616      	mov	r6, r2
   b7a5e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7a60:	f7ff ffd3 	bl	b7a0a <_ZN9SdSpiCard9readStartEm>
   b7a64:	b168      	cbz	r0, b7a82 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7a66:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7a68:	b2ab      	uxth	r3, r5
   b7a6a:	429f      	cmp	r7, r3
   b7a6c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7a70:	d909      	bls.n	b7a86 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7a72:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7a76:	4620      	mov	r0, r4
   b7a78:	f7ff fe76 	bl	b7768 <_ZN9SdSpiCard8readDataEPhj>
   b7a7c:	3501      	adds	r5, #1
   b7a7e:	2800      	cmp	r0, #0
   b7a80:	d1f2      	bne.n	b7a68 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7a82:	2000      	movs	r0, #0
   b7a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7a86:	4620      	mov	r0, r4
}
   b7a88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7a8c:	f7ff bfd1 	b.w	b7a32 <_ZN9SdSpiCard8readStopEv>

000b7a90 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7a90:	b538      	push	{r3, r4, r5, lr}
   b7a92:	4604      	mov	r4, r0
   b7a94:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7a96:	6840      	ldr	r0, [r0, #4]
   b7a98:	f7ff fe1b 	bl	b76d2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7aa0:	6860      	ldr	r0, [r4, #4]
   b7aa2:	4629      	mov	r1, r5
   b7aa4:	f000 f8e6 	bl	b7c74 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7aa8:	6860      	ldr	r0, [r4, #4]
   b7aaa:	21ff      	movs	r1, #255	; 0xff
   b7aac:	f7ff fe11 	bl	b76d2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7ab0:	6860      	ldr	r0, [r4, #4]
   b7ab2:	21ff      	movs	r1, #255	; 0xff
   b7ab4:	f7ff fe0d 	bl	b76d2 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7ab8:	6860      	ldr	r0, [r4, #4]
   b7aba:	f7ff fe0c 	bl	b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7abe:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7ac0:	f000 001f 	and.w	r0, r0, #31
   b7ac4:	2805      	cmp	r0, #5
   b7ac6:	d006      	beq.n	b7ad6 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7ac8:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7aca:	4620      	mov	r0, r4
   b7acc:	7023      	strb	r3, [r4, #0]
   b7ace:	f7ff fe38 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7ad2:	2000      	movs	r0, #0
}
   b7ad4:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7ad6:	2001      	movs	r0, #1
   b7ad8:	e7fc      	b.n	b7ad4 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b7ada <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7ada:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7adc:	7a83      	ldrb	r3, [r0, #10]
   b7ade:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7ae0:	bf18      	it	ne
   b7ae2:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7ae4:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b7ae6:	460a      	mov	r2, r1
   b7ae8:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7aea:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b7aec:	f7ff fe82 	bl	b77f4 <_ZN9SdSpiCard11cardCommandEhm>
   b7af0:	4606      	mov	r6, r0
   b7af2:	b130      	cbz	r0, b7b02 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b7af4:	2332      	movs	r3, #50	; 0x32
   b7af6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7af8:	4620      	mov	r0, r4
   b7afa:	f7ff fe22 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7afe:	2500      	movs	r5, #0
   b7b00:	e01f      	b.n	b7b42 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b7b02:	462a      	mov	r2, r5
   b7b04:	21fe      	movs	r1, #254	; 0xfe
   b7b06:	4620      	mov	r0, r4
   b7b08:	f7ff ffc2 	bl	b7a90 <_ZN9SdSpiCard9writeDataEhPKh>
   b7b0c:	2800      	cmp	r0, #0
   b7b0e:	d0f3      	beq.n	b7af8 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7b10:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7b14:	4620      	mov	r0, r4
   b7b16:	f7ff fe58 	bl	b77ca <_ZN9SdSpiCard11waitNotBusyEt>
   b7b1a:	4605      	mov	r5, r0
   b7b1c:	b908      	cbnz	r0, b7b22 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b7b1e:	235a      	movs	r3, #90	; 0x5a
   b7b20:	e7e9      	b.n	b7af6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b7b22:	4632      	mov	r2, r6
   b7b24:	210d      	movs	r1, #13
   b7b26:	4620      	mov	r0, r4
   b7b28:	f7ff fe64 	bl	b77f4 <_ZN9SdSpiCard11cardCommandEhm>
   b7b2c:	b108      	cbz	r0, b7b32 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b7b2e:	2329      	movs	r3, #41	; 0x29
   b7b30:	e7e1      	b.n	b7af6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b7b32:	6860      	ldr	r0, [r4, #4]
   b7b34:	f7ff fdcf 	bl	b76d6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7b38:	2800      	cmp	r0, #0
   b7b3a:	d1f8      	bne.n	b7b2e <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7b3c:	4620      	mov	r0, r4
   b7b3e:	f7ff fe00 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>
}
   b7b42:	4628      	mov	r0, r5
   b7b44:	bd70      	pop	{r4, r5, r6, pc}

000b7b46 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b7b46:	b513      	push	{r0, r1, r4, lr}
   b7b48:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7b4a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b7b4e:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7b50:	f7ff fe3b 	bl	b77ca <_ZN9SdSpiCard11waitNotBusyEt>
   b7b54:	9a01      	ldr	r2, [sp, #4]
   b7b56:	b930      	cbnz	r0, b7b66 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7b58:	235b      	movs	r3, #91	; 0x5b
   b7b5a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7b5c:	4620      	mov	r0, r4
   b7b5e:	f7ff fdf0 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7b62:	2000      	movs	r0, #0
   b7b64:	e005      	b.n	b7b72 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7b66:	21fc      	movs	r1, #252	; 0xfc
   b7b68:	4620      	mov	r0, r4
   b7b6a:	f7ff ff91 	bl	b7a90 <_ZN9SdSpiCard9writeDataEhPKh>
   b7b6e:	2800      	cmp	r0, #0
   b7b70:	d0f4      	beq.n	b7b5c <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7b72:	b002      	add	sp, #8
   b7b74:	bd10      	pop	{r4, pc}

000b7b76 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7b76:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7b78:	7a83      	ldrb	r3, [r0, #10]
   b7b7a:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7b7c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7b7e:	bf18      	it	ne
   b7b80:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7b82:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7b84:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7b86:	f7ff fe35 	bl	b77f4 <_ZN9SdSpiCard11cardCommandEhm>
   b7b8a:	b130      	cbz	r0, b7b9a <_ZN9SdSpiCard10writeStartEm+0x24>
   b7b8c:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7b8e:	4620      	mov	r0, r4
   b7b90:	7023      	strb	r3, [r4, #0]
   b7b92:	f7ff fdd6 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7b96:	2000      	movs	r0, #0
}
   b7b98:	bd10      	pop	{r4, pc}
  return true;
   b7b9a:	2001      	movs	r0, #1
   b7b9c:	e7fc      	b.n	b7b98 <_ZN9SdSpiCard10writeStartEm+0x22>

000b7b9e <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b7b9e:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7ba0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7ba4:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7ba6:	f7ff fe10 	bl	b77ca <_ZN9SdSpiCard11waitNotBusyEt>
   b7baa:	4605      	mov	r5, r0
   b7bac:	b930      	cbnz	r0, b7bbc <_ZN9SdSpiCard9writeStopEv+0x1e>
   b7bae:	2356      	movs	r3, #86	; 0x56
   b7bb0:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7bb2:	4620      	mov	r0, r4
   b7bb4:	f7ff fdc5 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7bb8:	4628      	mov	r0, r5
   b7bba:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7bbc:	6860      	ldr	r0, [r4, #4]
   b7bbe:	21fd      	movs	r1, #253	; 0xfd
   b7bc0:	f7ff fd87 	bl	b76d2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7bc4:	e7f5      	b.n	b7bb2 <_ZN9SdSpiCard9writeStopEv+0x14>

000b7bc6 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b7bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7bc8:	4604      	mov	r4, r0
   b7bca:	4616      	mov	r6, r2
   b7bcc:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b7bce:	f7ff ffd2 	bl	b7b76 <_ZN9SdSpiCard10writeStartEm>
   b7bd2:	b170      	cbz	r0, b7bf2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7bd4:	2500      	movs	r5, #0
   b7bd6:	42bd      	cmp	r5, r7
   b7bd8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b7bdc:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b7bde:	d004      	beq.n	b7bea <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b7be0:	f7ff ffb1 	bl	b7b46 <_ZN9SdSpiCard9writeDataEPKh>
   b7be4:	b128      	cbz	r0, b7bf2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7be6:	3501      	adds	r5, #1
   b7be8:	e7f5      	b.n	b7bd6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b7bea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b7bee:	f7ff bfd6 	b.w	b7b9e <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b7bf2:	4620      	mov	r0, r4
   b7bf4:	f7ff fda5 	bl	b7742 <_ZN9SdSpiCard7spiStopEv>
}
   b7bf8:	2000      	movs	r0, #0
   b7bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7bfc <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b7bfc:	4b01      	ldr	r3, [pc, #4]	; (b7c04 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b7bfe:	2201      	movs	r2, #1
   b7c00:	701a      	strb	r2, [r3, #0]
}
   b7c02:	4770      	bx	lr
   b7c04:	2003e618 	.word	0x2003e618

000b7c08 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b7c08:	1d01      	adds	r1, r0, #4
   b7c0a:	6800      	ldr	r0, [r0, #0]
   b7c0c:	f006 b8c6 	b.w	bdd9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b7c10 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b7c10:	b510      	push	{r4, lr}
   b7c12:	4604      	mov	r4, r0
  m_csPin = csPin;
   b7c14:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b7c16:	6800      	ldr	r0, [r0, #0]
   b7c18:	f006 f87c 	bl	bdd14 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b7c1c:	7d20      	ldrb	r0, [r4, #20]
   b7c1e:	2101      	movs	r1, #1
   b7c20:	f009 fdf0 	bl	c1804 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b7c24:	7d20      	ldrb	r0, [r4, #20]
   b7c26:	2101      	movs	r1, #1
}
   b7c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b7c2c:	f009 bdfb 	b.w	c1826 <digitalWrite>

000b7c30 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b7c30:	6800      	ldr	r0, [r0, #0]
   b7c32:	f006 b89a 	b.w	bdd6a <_ZN8SPIClass14endTransactionEv>

000b7c36 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b7c36:	6800      	ldr	r0, [r0, #0]
   b7c38:	21ff      	movs	r1, #255	; 0xff
   b7c3a:	f006 b94f 	b.w	bdedc <_ZN8SPIClass8transferEh>
	...

000b7c40 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b7c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7c42:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7c44:	4a07      	ldr	r2, [pc, #28]	; (b7c64 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b7c46:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7c48:	2500      	movs	r5, #0
   b7c4a:	4c07      	ldr	r4, [pc, #28]	; (b7c68 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7c4c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7c4e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7c50:	460a      	mov	r2, r1
   b7c52:	4629      	mov	r1, r5
   b7c54:	f006 f948 	bl	bdee8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7c58:	7823      	ldrb	r3, [r4, #0]
   b7c5a:	2b00      	cmp	r3, #0
   b7c5c:	d0fc      	beq.n	b7c58 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b7c5e:	2000      	movs	r0, #0
   b7c60:	b003      	add	sp, #12
   b7c62:	bd30      	pop	{r4, r5, pc}
   b7c64:	000b7bfd 	.word	0x000b7bfd
   b7c68:	2003e618 	.word	0x2003e618

000b7c6c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7c6c:	6800      	ldr	r0, [r0, #0]
   b7c6e:	f006 b935 	b.w	bdedc <_ZN8SPIClass8transferEh>
	...

000b7c74 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7c76:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7c78:	4a06      	ldr	r2, [pc, #24]	; (b7c94 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b7c7a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7c7c:	2500      	movs	r5, #0
   b7c7e:	4c06      	ldr	r4, [pc, #24]	; (b7c98 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7c80:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7c82:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7c84:	462a      	mov	r2, r5
   b7c86:	f006 f92f 	bl	bdee8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b7c8a:	7823      	ldrb	r3, [r4, #0]
   b7c8c:	2b00      	cmp	r3, #0
   b7c8e:	d0fc      	beq.n	b7c8a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7c90:	b003      	add	sp, #12
   b7c92:	bd30      	pop	{r4, r5, pc}
   b7c94:	000b7bfd 	.word	0x000b7bfd
   b7c98:	2003e618 	.word	0x2003e618

000b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b7c9c:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7c9e:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b7ca0:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b7ca2:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7ca4:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b7ca6:	041b      	lsls	r3, r3, #16
   b7ca8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b7cac:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b7cae:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b7cb0:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b7cb4:	bd10      	pop	{r4, pc}

000b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7cb6:	1843      	adds	r3, r0, r1
   b7cb8:	5c40      	ldrb	r0, [r0, r1]
   b7cba:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b7cbc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b7cc0:	4770      	bx	lr

000b7cc2 <_ZN5Print5printImLi0EEEjT_i.isra.0>:
size_t Print::print(T n, int base)
   b7cc2:	b410      	push	{r4}
    if (base == 0) {
   b7cc4:	b92a      	cbnz	r2, b7cd2 <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b7cc6:	6802      	ldr	r2, [r0, #0]
    }
}
   b7cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b7ccc:	6892      	ldr	r2, [r2, #8]
   b7cce:	b2c9      	uxtb	r1, r1
   b7cd0:	4710      	bx	r2
}
   b7cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b7cd6:	b2d2      	uxtb	r2, r2
   b7cd8:	f007 bc6d 	b.w	bf5b6 <_ZN5Print11printNumberEmh>

000b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b7cdc:	b912      	cbnz	r2, b7ce4 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b7cde:	6803      	ldr	r3, [r0, #0]
   b7ce0:	689b      	ldr	r3, [r3, #8]
   b7ce2:	4718      	bx	r3
        return printNumber(val, base) + t;
   b7ce4:	b2d2      	uxtb	r2, r2
   b7ce6:	f007 bc66 	b.w	bf5b6 <_ZN5Print11printNumberEmh>

000b7cea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b7cea:	b510      	push	{r4, lr}
   b7cec:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b7cee:	f7ff fff5 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b7cf2:	4620      	mov	r0, r4
    }
   b7cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b7cf8:	f007 bc45 	b.w	bf586 <_ZN5Print7printlnEv>

000b7cfc <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b7cfc:	6803      	ldr	r3, [r0, #0]
   b7cfe:	b2c9      	uxtb	r1, r1
   b7d00:	689b      	ldr	r3, [r3, #8]
   b7d02:	4718      	bx	r3

000b7d04 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7d04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b7d08:	8002      	strh	r2, [r0, #0]
   b7d0a:	2142      	movs	r1, #66	; 0x42
   b7d0c:	2200      	movs	r2, #0
   b7d0e:	b510      	push	{r4, lr}
   b7d10:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b7d14:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b7d18:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b7d1c:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b7d20:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b7d24:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b7d28:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b7d2c:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b7d30:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b7d34:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b7d38:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b7d3c:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b7d40:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b7d44:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b7d48:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b7d4c:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b7d50:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b7d54:	2180      	movs	r1, #128	; 0x80
   b7d56:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b7d5a:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b7d5e:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b7d62:	4925      	ldr	r1, [pc, #148]	; (b7df8 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b7d64:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b7d68:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b7d6c:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b7d70:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b7d74:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b7d78:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b7d7c:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b7d80:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b7d84:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b7d88:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b7d8c:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b7d90:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b7d94:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b7d98:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b7d9c:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b7da0:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b7da4:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b7da8:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b7dac:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b7db0:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b7db4:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b7db8:	4910      	ldr	r1, [pc, #64]	; (b7dfc <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b7dba:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b7dbe:	f640 1164 	movw	r1, #2404	; 0x964
   b7dc2:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b7dc6:	2158      	movs	r1, #88	; 0x58
   b7dc8:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b7dcc:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7dce:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b7dd2:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b7dd6:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b7dda:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b7dde:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b7de2:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b7de6:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b7dea:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7dee:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b7df2:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b7df6:	bd10      	pop	{r4, pc}
   b7df8:	02020000 	.word	0x02020000
   b7dfc:	64640200 	.word	0x64640200

000b7e00 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b7e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e02:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b7e04:	460d      	mov	r5, r1
   b7e06:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b7e0a:	b9a9      	cbnz	r1, b7e38 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b7e0c:	b1a8      	cbz	r0, b7e3a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b7e0e:	f7fc f946 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e12:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b7e16:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b7e1a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b7e1e:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e22:	b913      	cbnz	r3, b7e2a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b7e24:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7e28:	b123      	cbz	r3, b7e34 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b7e2a:	4920      	ldr	r1, [pc, #128]	; (b7eac <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b7e2c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7e30:	f007 fbbf 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b7e34:	2001      	movs	r0, #1
   b7e36:	e011      	b.n	b7e5c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b7e38:	b9b8      	cbnz	r0, b7e6a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b7e3a:	4628      	mov	r0, r5
   b7e3c:	f7fc f92d 	bl	b409a <_Znaj>
   b7e40:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b7e44:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b7e48:	bb60      	cbnz	r0, b7ea4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e4a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b7e4e:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e52:	b923      	cbnz	r3, b7e5e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b7e54:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7e58:	b90b      	cbnz	r3, b7e5e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b7e5a:	2000      	movs	r0, #0
}
   b7e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b7e5e:	4914      	ldr	r1, [pc, #80]	; (b7eb0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b7e60:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7e64:	f007 fba5 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b7e68:	e7f7      	b.n	b7e5a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b7e6a:	4608      	mov	r0, r1
   b7e6c:	f7fc f915 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b7e70:	4606      	mov	r6, r0
   b7e72:	b940      	cbnz	r0, b7e86 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e74:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b7e78:	b91b      	cbnz	r3, b7e82 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b7e7a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7e7e:	2b00      	cmp	r3, #0
   b7e80:	d0eb      	beq.n	b7e5a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b7e82:	490c      	ldr	r1, [pc, #48]	; (b7eb4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b7e84:	e7ec      	b.n	b7e60 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b7e86:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b7e8a:	42aa      	cmp	r2, r5
   b7e8c:	bf28      	it	cs
   b7e8e:	462a      	movcs	r2, r5
   b7e90:	4639      	mov	r1, r7
   b7e92:	f00b ff75 	bl	c3d80 <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b7e96:	4638      	mov	r0, r7
   b7e98:	f7fc f901 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b7e9c:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b7ea0:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b7ea4:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b7ea8:	e7c4      	b.n	b7e34 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b7eaa:	bf00      	nop
   b7eac:	000c665c 	.word	0x000c665c
   b7eb0:	000c6687 	.word	0x000c6687
   b7eb4:	000c66b2 	.word	0x000c66b2

000b7eb8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b7eb8:	290d      	cmp	r1, #13
   b7eba:	f000 80cd 	beq.w	b8058 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b7ebe:	d809      	bhi.n	b7ed4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b7ec0:	2902      	cmp	r1, #2
   b7ec2:	f000 80a7 	beq.w	b8014 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b7ec6:	2906      	cmp	r1, #6
   b7ec8:	f000 80be 	beq.w	b8048 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b7ecc:	2901      	cmp	r1, #1
   b7ece:	d016      	beq.n	b7efe <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b7ed0:	2000      	movs	r0, #0
}
   b7ed2:	4770      	bx	lr
  switch (Class)
   b7ed4:	2913      	cmp	r1, #19
   b7ed6:	f000 80d4 	beq.w	b8082 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b7eda:	2928      	cmp	r1, #40	; 0x28
   b7edc:	f000 80dc 	beq.w	b8098 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b7ee0:	2910      	cmp	r1, #16
   b7ee2:	d1f5      	bne.n	b7ed0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b7ee4:	2a10      	cmp	r2, #16
   b7ee6:	f000 80c9 	beq.w	b807c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b7eea:	f200 80ba 	bhi.w	b8062 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b7eee:	2a02      	cmp	r2, #2
   b7ef0:	f000 80c1 	beq.w	b8076 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b7ef4:	2a03      	cmp	r2, #3
   b7ef6:	d1eb      	bne.n	b7ed0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b7ef8:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b7efc:	e066      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7efe:	2a26      	cmp	r2, #38	; 0x26
   b7f00:	d854      	bhi.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b7f02:	2a00      	cmp	r2, #0
   b7f04:	d0e4      	beq.n	b7ed0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b7f06:	3a01      	subs	r2, #1
   b7f08:	2a25      	cmp	r2, #37	; 0x25
   b7f0a:	d8e1      	bhi.n	b7ed0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b7f0c:	a301      	add	r3, pc, #4	; (adr r3, b7f14 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b7f0e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b7f12:	bf00      	nop
   b7f14:	000b7fcb 	.word	0x000b7fcb
   b7f18:	000b7ed1 	.word	0x000b7ed1
   b7f1c:	000b7fd5 	.word	0x000b7fd5
   b7f20:	000b7fd9 	.word	0x000b7fd9
   b7f24:	000b7fdd 	.word	0x000b7fdd
   b7f28:	000b7ed1 	.word	0x000b7ed1
   b7f2c:	000b7fe1 	.word	0x000b7fe1
   b7f30:	000b7ed1 	.word	0x000b7ed1
   b7f34:	000b7fe5 	.word	0x000b7fe5
   b7f38:	000b7ed1 	.word	0x000b7ed1
   b7f3c:	000b7ed1 	.word	0x000b7ed1
   b7f40:	000b7ed1 	.word	0x000b7ed1
   b7f44:	000b7ed1 	.word	0x000b7ed1
   b7f48:	000b7ed1 	.word	0x000b7ed1
   b7f4c:	000b7ed1 	.word	0x000b7ed1
   b7f50:	000b7ed1 	.word	0x000b7ed1
   b7f54:	000b7fe9 	.word	0x000b7fe9
   b7f58:	000b7fed 	.word	0x000b7fed
   b7f5c:	000b7ff1 	.word	0x000b7ff1
   b7f60:	000b7ff5 	.word	0x000b7ff5
   b7f64:	000b7ed1 	.word	0x000b7ed1
   b7f68:	000b7ed1 	.word	0x000b7ed1
   b7f6c:	000b7ff9 	.word	0x000b7ff9
   b7f70:	000b7ed1 	.word	0x000b7ed1
   b7f74:	000b7ed1 	.word	0x000b7ed1
   b7f78:	000b7ed1 	.word	0x000b7ed1
   b7f7c:	000b7ed1 	.word	0x000b7ed1
   b7f80:	000b7ed1 	.word	0x000b7ed1
   b7f84:	000b7ed1 	.word	0x000b7ed1
   b7f88:	000b7ed1 	.word	0x000b7ed1
   b7f8c:	000b7ed1 	.word	0x000b7ed1
   b7f90:	000b7ed1 	.word	0x000b7ed1
   b7f94:	000b7ffd 	.word	0x000b7ffd
   b7f98:	000b8001 	.word	0x000b8001
   b7f9c:	000b7ed1 	.word	0x000b7ed1
   b7fa0:	000b7ed1 	.word	0x000b7ed1
   b7fa4:	000b7ed1 	.word	0x000b7ed1
   b7fa8:	000b8005 	.word	0x000b8005
   b7fac:	2a3c      	cmp	r2, #60	; 0x3c
   b7fae:	d02d      	beq.n	b800c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b7fb0:	d805      	bhi.n	b7fbe <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b7fb2:	2a35      	cmp	r2, #53	; 0x35
   b7fb4:	d028      	beq.n	b8008 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b7fb6:	2a3b      	cmp	r2, #59	; 0x3b
   b7fb8:	d18a      	bne.n	b7ed0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b7fba:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b7fbc:	e006      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b7fbe:	2a60      	cmp	r2, #96	; 0x60
   b7fc0:	d026      	beq.n	b8010 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b7fc2:	2a61      	cmp	r2, #97	; 0x61
   b7fc4:	d184      	bne.n	b7ed0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b7fc6:	6980      	ldr	r0, [r0, #24]
   b7fc8:	e000      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b7fca:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b7fcc:	3800      	subs	r0, #0
   b7fce:	bf18      	it	ne
   b7fd0:	2001      	movne	r0, #1
   b7fd2:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b7fd4:	6900      	ldr	r0, [r0, #16]
   b7fd6:	e7f9      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b7fd8:	6940      	ldr	r0, [r0, #20]
   b7fda:	e7f7      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b7fdc:	69c0      	ldr	r0, [r0, #28]
   b7fde:	e7f5      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b7fe0:	6a00      	ldr	r0, [r0, #32]
   b7fe2:	e7f3      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b7fe4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7fe6:	e7f1      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b7fe8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7fea:	e7ef      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b7fec:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b7fee:	e7ed      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b7ff0:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b7ff2:	e7eb      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b7ff4:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b7ff6:	e7e9      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b7ff8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b7ffa:	e7e7      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b7ffc:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b7ffe:	e7e5      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b8000:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b8002:	e7e3      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b8004:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b8006:	e7e1      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b8008:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b800a:	e7df      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b800c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b800e:	e7dd      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b8010:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b8012:	e7db      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8014:	2a34      	cmp	r2, #52	; 0x34
   b8016:	d015      	beq.n	b8044 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b8018:	d806      	bhi.n	b8028 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b801a:	2a13      	cmp	r2, #19
   b801c:	d00b      	beq.n	b8036 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b801e:	2a15      	cmp	r2, #21
   b8020:	f47f af56 	bne.w	b7ed0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b8024:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b8026:	e7d1      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8028:	2a72      	cmp	r2, #114	; 0x72
   b802a:	d006      	beq.n	b803a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b802c:	2a73      	cmp	r2, #115	; 0x73
   b802e:	f47f af4f 	bne.w	b7ed0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b8032:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b8034:	e7ca      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b8036:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b8038:	e7c8      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b803a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b803c:	2b00      	cmp	r3, #0
   b803e:	d13b      	bne.n	b80b8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b8040:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b8042:	e7c3      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b8044:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b8046:	e7c1      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8048:	b122      	cbz	r2, b8054 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b804a:	2a08      	cmp	r2, #8
   b804c:	f47f af40 	bne.w	b7ed0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b8050:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b8052:	e7bb      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b8054:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b8056:	e7b9      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8058:	2a03      	cmp	r2, #3
   b805a:	f47f af39 	bne.w	b7ed0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b805e:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b8060:	e7b4      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8062:	2a14      	cmp	r2, #20
   b8064:	d005      	beq.n	b8072 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b8066:	2a15      	cmp	r2, #21
   b8068:	f47f af32 	bne.w	b7ed0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b806c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b8070:	e7ac      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b8072:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b8074:	e7aa      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b8076:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b807a:	e7a7      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b807c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b8080:	e7a4      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8082:	2a60      	cmp	r2, #96	; 0x60
   b8084:	d005      	beq.n	b8092 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b8086:	2a80      	cmp	r2, #128	; 0x80
   b8088:	f47f af22 	bne.w	b7ed0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b808c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b8090:	e79c      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b8092:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b8096:	e799      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8098:	2a01      	cmp	r2, #1
   b809a:	d007      	beq.n	b80ac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b809c:	2a02      	cmp	r2, #2
   b809e:	d008      	beq.n	b80b2 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b80a0:	2a00      	cmp	r2, #0
   b80a2:	f47f af15 	bne.w	b7ed0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b80a6:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b80aa:	e78f      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b80ac:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b80b0:	e78c      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b80b2:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b80b6:	e789      	b.n	b7fcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b80b8:	2001      	movs	r0, #1
   b80ba:	4770      	bx	lr

000b80bc <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b80bc:	290d      	cmp	r1, #13
   b80be:	d035      	beq.n	b812c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b80c0:	d807      	bhi.n	b80d2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b80c2:	2902      	cmp	r1, #2
   b80c4:	d019      	beq.n	b80fa <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b80c6:	2906      	cmp	r1, #6
   b80c8:	d02a      	beq.n	b8120 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b80ca:	2901      	cmp	r1, #1
   b80cc:	d00d      	beq.n	b80ea <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b80ce:	2000      	movs	r0, #0
}
   b80d0:	4770      	bx	lr
  switch (Class)
   b80d2:	2913      	cmp	r1, #19
   b80d4:	d02f      	beq.n	b8136 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b80d6:	2928      	cmp	r1, #40	; 0x28
   b80d8:	d034      	beq.n	b8144 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b80da:	2910      	cmp	r1, #16
   b80dc:	d1f7      	bne.n	b80ce <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b80de:	3a02      	subs	r2, #2
   b80e0:	b2d2      	uxtb	r2, r2
   b80e2:	2a13      	cmp	r2, #19
   b80e4:	d8f3      	bhi.n	b80ce <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b80e6:	4b1f      	ldr	r3, [pc, #124]	; (b8164 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b80e8:	e004      	b.n	b80f4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b80ea:	3a01      	subs	r2, #1
   b80ec:	b2d2      	uxtb	r2, r2
   b80ee:	2a60      	cmp	r2, #96	; 0x60
   b80f0:	d8ed      	bhi.n	b80ce <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b80f2:	4b1d      	ldr	r3, [pc, #116]	; (b8168 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b80f4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b80f8:	4770      	bx	lr
    switch (ID)
   b80fa:	2a34      	cmp	r2, #52	; 0x34
   b80fc:	d027      	beq.n	b814e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b80fe:	d807      	bhi.n	b8110 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b8100:	2a13      	cmp	r2, #19
   b8102:	d026      	beq.n	b8152 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b8104:	2a15      	cmp	r2, #21
   b8106:	bf14      	ite	ne
   b8108:	2000      	movne	r0, #0
   b810a:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b810e:	4770      	bx	lr
   b8110:	2a72      	cmp	r2, #114	; 0x72
   b8112:	d020      	beq.n	b8156 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b8114:	2a73      	cmp	r2, #115	; 0x73
   b8116:	bf14      	ite	ne
   b8118:	2000      	movne	r0, #0
   b811a:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b811e:	4770      	bx	lr
    switch (ID)
   b8120:	b1e2      	cbz	r2, b815c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b8122:	2a08      	cmp	r2, #8
   b8124:	bf14      	ite	ne
   b8126:	2000      	movne	r0, #0
   b8128:	2006      	moveq	r0, #6
   b812a:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b812c:	2a03      	cmp	r2, #3
   b812e:	bf14      	ite	ne
   b8130:	2000      	movne	r0, #0
   b8132:	201c      	moveq	r0, #28
   b8134:	4770      	bx	lr
    switch (ID)
   b8136:	2a60      	cmp	r2, #96	; 0x60
   b8138:	d012      	beq.n	b8160 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b813a:	2a80      	cmp	r2, #128	; 0x80
   b813c:	bf14      	ite	ne
   b813e:	2000      	movne	r0, #0
   b8140:	20a4      	moveq	r0, #164	; 0xa4
   b8142:	4770      	bx	lr
    switch (ID)
   b8144:	2a02      	cmp	r2, #2
   b8146:	d8c2      	bhi.n	b80ce <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8148:	4b08      	ldr	r3, [pc, #32]	; (b816c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b814a:	5c98      	ldrb	r0, [r3, r2]
   b814c:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b814e:	200c      	movs	r0, #12
   b8150:	4770      	bx	lr
   b8152:	2048      	movs	r0, #72	; 0x48
   b8154:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b8156:	f44f 7004 	mov.w	r0, #528	; 0x210
   b815a:	4770      	bx	lr
   b815c:	2014      	movs	r0, #20
   b815e:	4770      	bx	lr
   b8160:	2008      	movs	r0, #8
   b8162:	4770      	bx	lr
   b8164:	000c734a 	.word	0x000c734a
   b8168:	000c7288 	.word	0x000c7288
   b816c:	000c7372 	.word	0x000c7372

000b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b8170:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b8172:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b8176:	07ca      	lsls	r2, r1, #31
   b8178:	d415      	bmi.n	b81a6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b817a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b817e:	4b59      	ldr	r3, [pc, #356]	; (b82e4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b8180:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8184:	429a      	cmp	r2, r3
   b8186:	d101      	bne.n	b818c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b8188:	078b      	lsls	r3, r1, #30
   b818a:	d40c      	bmi.n	b81a6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b818c:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8190:	2b47      	cmp	r3, #71	; 0x47
   b8192:	d174      	bne.n	b827e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b8194:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8198:	f245 1441 	movw	r4, #20801	; 0x5141
   b819c:	42a3      	cmp	r3, r4
   b819e:	d104      	bne.n	b81aa <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b81a0:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b81a4:	d06b      	beq.n	b827e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b81a6:	2001      	movs	r0, #1
   b81a8:	e070      	b.n	b828c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b81aa:	f245 1442 	movw	r4, #20802	; 0x5142
   b81ae:	42a3      	cmp	r3, r4
   b81b0:	d102      	bne.n	b81b8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b81b2:	f011 0f08 	tst.w	r1, #8
   b81b6:	e7f5      	b.n	b81a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b81b8:	f245 3442 	movw	r4, #21314	; 0x5342
   b81bc:	42a3      	cmp	r3, r4
   b81be:	d102      	bne.n	b81c6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b81c0:	f011 0f10 	tst.w	r1, #16
   b81c4:	e7ee      	b.n	b81a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b81c6:	f244 1447 	movw	r4, #16711	; 0x4147
   b81ca:	42a3      	cmp	r3, r4
   b81cc:	d102      	bne.n	b81d4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b81ce:	f011 0f20 	tst.w	r1, #32
   b81d2:	e7e7      	b.n	b81a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b81d4:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b81d8:	42a3      	cmp	r3, r4
   b81da:	d102      	bne.n	b81e2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b81dc:	f011 0f40 	tst.w	r1, #64	; 0x40
   b81e0:	e7e0      	b.n	b81a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b81e2:	f245 144c 	movw	r4, #20812	; 0x514c
   b81e6:	42a3      	cmp	r3, r4
   b81e8:	d102      	bne.n	b81f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b81ea:	f011 0f80 	tst.w	r1, #128	; 0x80
   b81ee:	e7d9      	b.n	b81a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b81f0:	f245 114e 	movw	r1, #20814	; 0x514e
   b81f4:	428b      	cmp	r3, r1
   b81f6:	d104      	bne.n	b8202 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b81f8:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b81fc:	f013 0f01 	tst.w	r3, #1
   b8200:	e7d0      	b.n	b81a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b8202:	f245 314e 	movw	r1, #21326	; 0x534e
   b8206:	428b      	cmp	r3, r1
   b8208:	d104      	bne.n	b8214 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b820a:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b820e:	f013 0f02 	tst.w	r3, #2
   b8212:	e7c7      	b.n	b81a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b8214:	f245 1150 	movw	r1, #20816	; 0x5150
   b8218:	428b      	cmp	r3, r1
   b821a:	d104      	bne.n	b8226 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b821c:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8220:	f013 0f04 	tst.w	r3, #4
   b8224:	e7be      	b.n	b81a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b8226:	f245 1151 	movw	r1, #20817	; 0x5151
   b822a:	428b      	cmp	r3, r1
   b822c:	d104      	bne.n	b8238 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b822e:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8232:	f013 0f08 	tst.w	r3, #8
   b8236:	e7b5      	b.n	b81a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b8238:	f245 3152 	movw	r1, #21330	; 0x5352
   b823c:	428b      	cmp	r3, r1
   b823e:	d104      	bne.n	b824a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b8240:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8244:	f013 0f10 	tst.w	r3, #16
   b8248:	e7ac      	b.n	b81a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b824a:	f244 1153 	movw	r1, #16723	; 0x4153
   b824e:	428b      	cmp	r3, r1
   b8250:	d104      	bne.n	b825c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b8252:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8256:	f013 0f20 	tst.w	r3, #32
   b825a:	e7a3      	b.n	b81a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b825c:	f245 4153 	movw	r1, #21587	; 0x5453
   b8260:	428b      	cmp	r3, r1
   b8262:	d104      	bne.n	b826e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b8264:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8268:	f013 0f40 	tst.w	r3, #64	; 0x40
   b826c:	e79a      	b.n	b81a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b826e:	f245 6153 	movw	r1, #22099	; 0x5653
   b8272:	428b      	cmp	r3, r1
   b8274:	d103      	bne.n	b827e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b8276:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b827a:	2b00      	cmp	r3, #0
   b827c:	db93      	blt.n	b81a6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b827e:	4b1a      	ldr	r3, [pc, #104]	; (b82e8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b8280:	429a      	cmp	r2, r3
   b8282:	d104      	bne.n	b828e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b8284:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8288:	f000 0001 	and.w	r0, r0, #1
}
   b828c:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b828e:	4b17      	ldr	r3, [pc, #92]	; (b82ec <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b8290:	429a      	cmp	r2, r3
   b8292:	d104      	bne.n	b829e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b8294:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8298:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b829c:	e7f6      	b.n	b828c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b829e:	4b14      	ldr	r3, [pc, #80]	; (b82f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b82a0:	429a      	cmp	r2, r3
   b82a2:	d104      	bne.n	b82ae <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b82a4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b82a8:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b82ac:	e7ee      	b.n	b828c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b82ae:	4b11      	ldr	r3, [pc, #68]	; (b82f4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b82b0:	429a      	cmp	r2, r3
   b82b2:	d104      	bne.n	b82be <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b82b4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b82b8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b82bc:	e7e6      	b.n	b828c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b82be:	4b0e      	ldr	r3, [pc, #56]	; (b82f8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b82c0:	429a      	cmp	r2, r3
   b82c2:	d104      	bne.n	b82ce <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b82c4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b82c8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b82cc:	e7de      	b.n	b828c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b82ce:	4b0b      	ldr	r3, [pc, #44]	; (b82fc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b82d0:	429a      	cmp	r2, r3
   b82d2:	d104      	bne.n	b82de <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b82d4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b82d8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b82dc:	e7d6      	b.n	b828c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b82de:	2000      	movs	r0, #0
   b82e0:	e7d4      	b.n	b828c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b82e2:	bf00      	nop
   b82e4:	4d544400 	.word	0x4d544400
   b82e8:	4d4c5200 	.word	0x4d4c5200
   b82ec:	434d5200 	.word	0x434d5200
   b82f0:	54585400 	.word	0x54585400
   b82f4:	574c5600 	.word	0x574c5600
   b82f8:	47545600 	.word	0x47545600
   b82fc:	41445a00 	.word	0x41445a00

000b8300 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b8300:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b8304:	2b2a      	cmp	r3, #42	; 0x2a
   b8306:	d157      	bne.n	b83b8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b8308:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b830c:	2b47      	cmp	r3, #71	; 0x47
   b830e:	d153      	bne.n	b83b8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b8310:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b8314:	4a29      	ldr	r2, [pc, #164]	; (b83bc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b8316:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b831a:	4293      	cmp	r3, r2
   b831c:	d011      	beq.n	b8342 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b831e:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b8322:	2a47      	cmp	r2, #71	; 0x47
   b8324:	d11a      	bne.n	b835c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8326:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b832a:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b832e:	3941      	subs	r1, #65	; 0x41
   b8330:	b289      	uxth	r1, r1
   b8332:	2910      	cmp	r1, #16
   b8334:	d907      	bls.n	b8346 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b8336:	f022 0110 	bic.w	r1, r2, #16
   b833a:	f245 3042 	movw	r0, #21314	; 0x5342
   b833e:	4281      	cmp	r1, r0
   b8340:	d129      	bne.n	b8396 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b8342:	2001      	movs	r0, #1
}
   b8344:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8346:	481e      	ldr	r0, [pc, #120]	; (b83c0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b8348:	fa20 f101 	lsr.w	r1, r0, r1
   b834c:	07c9      	lsls	r1, r1, #31
   b834e:	d4f8      	bmi.n	b8342 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b8350:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b8354:	f245 4153 	movw	r1, #21587	; 0x5453
   b8358:	428a      	cmp	r2, r1
   b835a:	d0f2      	beq.n	b8342 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b835c:	4a19      	ldr	r2, [pc, #100]	; (b83c4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b835e:	4293      	cmp	r3, r2
   b8360:	d0ef      	beq.n	b8342 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b8362:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b8366:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b836a:	4293      	cmp	r3, r2
   b836c:	d0e9      	beq.n	b8342 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b836e:	4a16      	ldr	r2, [pc, #88]	; (b83c8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b8370:	4293      	cmp	r3, r2
   b8372:	d0e6      	beq.n	b8342 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b8374:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b8378:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b837c:	4293      	cmp	r3, r2
   b837e:	d0e0      	beq.n	b8342 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b8380:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b8384:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b8388:	4293      	cmp	r3, r2
   b838a:	d0da      	beq.n	b8342 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b838c:	480f      	ldr	r0, [pc, #60]	; (b83cc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b838e:	1a1b      	subs	r3, r3, r0
   b8390:	4258      	negs	r0, r3
   b8392:	4158      	adcs	r0, r3
   b8394:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b8396:	f244 1147 	movw	r1, #16711	; 0x4147
   b839a:	428a      	cmp	r2, r1
   b839c:	d0d1      	beq.n	b8342 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b839e:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b83a2:	428a      	cmp	r2, r1
   b83a4:	d0cd      	beq.n	b8342 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b83a6:	f245 314e 	movw	r1, #21326	; 0x534e
   b83aa:	428a      	cmp	r2, r1
   b83ac:	d0c9      	beq.n	b8342 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b83ae:	f244 1153 	movw	r1, #16723	; 0x4153
   b83b2:	428a      	cmp	r2, r1
   b83b4:	d0c5      	beq.n	b8342 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b83b6:	e7cb      	b.n	b8350 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b83b8:	2000      	movs	r0, #0
   b83ba:	4770      	bx	lr
   b83bc:	4d544400 	.word	0x4d544400
   b83c0:	0001a803 	.word	0x0001a803
   b83c4:	4d4c5200 	.word	0x4d4c5200
   b83c8:	54585400 	.word	0x54585400
   b83cc:	41445a00 	.word	0x41445a00

000b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b83d0:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b83d2:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b83d6:	07ca      	lsls	r2, r1, #31
   b83d8:	d415      	bmi.n	b8406 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b83da:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b83de:	4b59      	ldr	r3, [pc, #356]	; (b8544 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b83e0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b83e4:	429a      	cmp	r2, r3
   b83e6:	d101      	bne.n	b83ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b83e8:	078b      	lsls	r3, r1, #30
   b83ea:	d40c      	bmi.n	b8406 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b83ec:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b83f0:	2b47      	cmp	r3, #71	; 0x47
   b83f2:	d174      	bne.n	b84de <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b83f4:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b83f8:	f245 1441 	movw	r4, #20801	; 0x5141
   b83fc:	42a3      	cmp	r3, r4
   b83fe:	d104      	bne.n	b840a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b8400:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8404:	d06b      	beq.n	b84de <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b8406:	2001      	movs	r0, #1
   b8408:	e070      	b.n	b84ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b840a:	f245 1442 	movw	r4, #20802	; 0x5142
   b840e:	42a3      	cmp	r3, r4
   b8410:	d102      	bne.n	b8418 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b8412:	f011 0f08 	tst.w	r1, #8
   b8416:	e7f5      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b8418:	f245 3442 	movw	r4, #21314	; 0x5342
   b841c:	42a3      	cmp	r3, r4
   b841e:	d102      	bne.n	b8426 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b8420:	f011 0f10 	tst.w	r1, #16
   b8424:	e7ee      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b8426:	f244 1447 	movw	r4, #16711	; 0x4147
   b842a:	42a3      	cmp	r3, r4
   b842c:	d102      	bne.n	b8434 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b842e:	f011 0f20 	tst.w	r1, #32
   b8432:	e7e7      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b8434:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8438:	42a3      	cmp	r3, r4
   b843a:	d102      	bne.n	b8442 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b843c:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8440:	e7e0      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b8442:	f245 144c 	movw	r4, #20812	; 0x514c
   b8446:	42a3      	cmp	r3, r4
   b8448:	d102      	bne.n	b8450 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b844a:	f011 0f80 	tst.w	r1, #128	; 0x80
   b844e:	e7d9      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b8450:	f245 114e 	movw	r1, #20814	; 0x514e
   b8454:	428b      	cmp	r3, r1
   b8456:	d104      	bne.n	b8462 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b8458:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b845c:	f013 0f01 	tst.w	r3, #1
   b8460:	e7d0      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b8462:	f245 314e 	movw	r1, #21326	; 0x534e
   b8466:	428b      	cmp	r3, r1
   b8468:	d104      	bne.n	b8474 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b846a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b846e:	f013 0f02 	tst.w	r3, #2
   b8472:	e7c7      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b8474:	f245 1150 	movw	r1, #20816	; 0x5150
   b8478:	428b      	cmp	r3, r1
   b847a:	d104      	bne.n	b8486 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b847c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8480:	f013 0f04 	tst.w	r3, #4
   b8484:	e7be      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b8486:	f245 1151 	movw	r1, #20817	; 0x5151
   b848a:	428b      	cmp	r3, r1
   b848c:	d104      	bne.n	b8498 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b848e:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8492:	f013 0f08 	tst.w	r3, #8
   b8496:	e7b5      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b8498:	f245 3152 	movw	r1, #21330	; 0x5352
   b849c:	428b      	cmp	r3, r1
   b849e:	d104      	bne.n	b84aa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b84a0:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b84a4:	f013 0f10 	tst.w	r3, #16
   b84a8:	e7ac      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b84aa:	f244 1153 	movw	r1, #16723	; 0x4153
   b84ae:	428b      	cmp	r3, r1
   b84b0:	d104      	bne.n	b84bc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b84b2:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b84b6:	f013 0f20 	tst.w	r3, #32
   b84ba:	e7a3      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b84bc:	f245 4153 	movw	r1, #21587	; 0x5453
   b84c0:	428b      	cmp	r3, r1
   b84c2:	d104      	bne.n	b84ce <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b84c4:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b84c8:	f013 0f40 	tst.w	r3, #64	; 0x40
   b84cc:	e79a      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b84ce:	f245 6153 	movw	r1, #22099	; 0x5653
   b84d2:	428b      	cmp	r3, r1
   b84d4:	d103      	bne.n	b84de <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b84d6:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b84da:	2b00      	cmp	r3, #0
   b84dc:	db93      	blt.n	b8406 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b84de:	4b1a      	ldr	r3, [pc, #104]	; (b8548 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b84e0:	429a      	cmp	r2, r3
   b84e2:	d104      	bne.n	b84ee <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b84e4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84e8:	f000 0001 	and.w	r0, r0, #1
}
   b84ec:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b84ee:	4b17      	ldr	r3, [pc, #92]	; (b854c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b84f0:	429a      	cmp	r2, r3
   b84f2:	d104      	bne.n	b84fe <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b84f4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84f8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b84fc:	e7f6      	b.n	b84ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b84fe:	4b14      	ldr	r3, [pc, #80]	; (b8550 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b8500:	429a      	cmp	r2, r3
   b8502:	d104      	bne.n	b850e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b8504:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8508:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b850c:	e7ee      	b.n	b84ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b850e:	4b11      	ldr	r3, [pc, #68]	; (b8554 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b8510:	429a      	cmp	r2, r3
   b8512:	d104      	bne.n	b851e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b8514:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8518:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b851c:	e7e6      	b.n	b84ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b851e:	4b0e      	ldr	r3, [pc, #56]	; (b8558 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b8520:	429a      	cmp	r2, r3
   b8522:	d104      	bne.n	b852e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b8524:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8528:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b852c:	e7de      	b.n	b84ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b852e:	4b0b      	ldr	r3, [pc, #44]	; (b855c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b8530:	429a      	cmp	r2, r3
   b8532:	d104      	bne.n	b853e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b8534:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8538:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b853c:	e7d6      	b.n	b84ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b853e:	2000      	movs	r0, #0
   b8540:	e7d4      	b.n	b84ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b8542:	bf00      	nop
   b8544:	4d544400 	.word	0x4d544400
   b8548:	4d4c5200 	.word	0x4d4c5200
   b854c:	434d5200 	.word	0x434d5200
   b8550:	54585400 	.word	0x54585400
   b8554:	574c5600 	.word	0x574c5600
   b8558:	47545600 	.word	0x47545600
   b855c:	41445a00 	.word	0x41445a00

000b8560 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b8560:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b8564:	b110      	cbz	r0, b856c <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b8566:	6803      	ldr	r3, [r0, #0]
   b8568:	689b      	ldr	r3, [r3, #8]
   b856a:	4718      	bx	r3
}
   b856c:	4770      	bx	lr
	...

000b8570 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b8570:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8572:	4b3d      	ldr	r3, [pc, #244]	; (b8668 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b8574:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8576:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b857a:	6818      	ldr	r0, [r3, #0]
   b857c:	9000      	str	r0, [sp, #0]
   b857e:	889b      	ldrh	r3, [r3, #4]
   b8580:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8584:	2205      	movs	r2, #5
   b8586:	4629      	mov	r1, r5
   b8588:	4668      	mov	r0, sp
   b858a:	f00b fbe9 	bl	c3d60 <memcmp>
   b858e:	b928      	cbnz	r0, b859c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b8590:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8594:	b113      	cbz	r3, b859c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b8596:	2001      	movs	r0, #1
}
   b8598:	b003      	add	sp, #12
   b859a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b859c:	4933      	ldr	r1, [pc, #204]	; (b866c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b859e:	4668      	mov	r0, sp
   b85a0:	f00b fc7c 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85a4:	2205      	movs	r2, #5
   b85a6:	4629      	mov	r1, r5
   b85a8:	4668      	mov	r0, sp
   b85aa:	f00b fbd9 	bl	c3d60 <memcmp>
   b85ae:	b918      	cbnz	r0, b85b8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b85b0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b85b4:	2b00      	cmp	r3, #0
   b85b6:	d1ee      	bne.n	b8596 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b85b8:	492d      	ldr	r1, [pc, #180]	; (b8670 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b85ba:	4668      	mov	r0, sp
   b85bc:	f00b fc6e 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85c0:	2205      	movs	r2, #5
   b85c2:	4629      	mov	r1, r5
   b85c4:	4668      	mov	r0, sp
   b85c6:	f00b fbcb 	bl	c3d60 <memcmp>
   b85ca:	b918      	cbnz	r0, b85d4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b85cc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b85d0:	2b00      	cmp	r3, #0
   b85d2:	d1e0      	bne.n	b8596 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b85d4:	4927      	ldr	r1, [pc, #156]	; (b8674 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b85d6:	4668      	mov	r0, sp
   b85d8:	f00b fc60 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85dc:	2205      	movs	r2, #5
   b85de:	4629      	mov	r1, r5
   b85e0:	4668      	mov	r0, sp
   b85e2:	f00b fbbd 	bl	c3d60 <memcmp>
   b85e6:	b918      	cbnz	r0, b85f0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b85e8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b85ec:	2b00      	cmp	r3, #0
   b85ee:	d1d2      	bne.n	b8596 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b85f0:	4921      	ldr	r1, [pc, #132]	; (b8678 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b85f2:	4668      	mov	r0, sp
   b85f4:	f00b fc52 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85f8:	2205      	movs	r2, #5
   b85fa:	4629      	mov	r1, r5
   b85fc:	4668      	mov	r0, sp
   b85fe:	f00b fbaf 	bl	c3d60 <memcmp>
   b8602:	b918      	cbnz	r0, b860c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b8604:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8608:	2b00      	cmp	r3, #0
   b860a:	d1c4      	bne.n	b8596 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b860c:	491b      	ldr	r1, [pc, #108]	; (b867c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b860e:	4668      	mov	r0, sp
   b8610:	f00b fc44 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8614:	2205      	movs	r2, #5
   b8616:	4629      	mov	r1, r5
   b8618:	4668      	mov	r0, sp
   b861a:	f00b fba1 	bl	c3d60 <memcmp>
   b861e:	b918      	cbnz	r0, b8628 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b8620:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8624:	2b00      	cmp	r3, #0
   b8626:	d1b6      	bne.n	b8596 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b8628:	4915      	ldr	r1, [pc, #84]	; (b8680 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b862a:	4668      	mov	r0, sp
   b862c:	f00b fc36 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8630:	2205      	movs	r2, #5
   b8632:	4629      	mov	r1, r5
   b8634:	4668      	mov	r0, sp
   b8636:	f00b fb93 	bl	c3d60 <memcmp>
   b863a:	b918      	cbnz	r0, b8644 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b863c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8640:	2b00      	cmp	r3, #0
   b8642:	d1a8      	bne.n	b8596 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8644:	490f      	ldr	r1, [pc, #60]	; (b8684 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b8646:	4668      	mov	r0, sp
   b8648:	f00b fc28 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b864c:	2205      	movs	r2, #5
   b864e:	4629      	mov	r1, r5
   b8650:	4668      	mov	r0, sp
   b8652:	f00b fb85 	bl	c3d60 <memcmp>
   b8656:	b928      	cbnz	r0, b8664 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b8658:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b865c:	3800      	subs	r0, #0
   b865e:	bf18      	it	ne
   b8660:	2001      	movne	r0, #1
   b8662:	e799      	b.n	b8598 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b8664:	2000      	movs	r0, #0
   b8666:	e797      	b.n	b8598 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b8668:	000c6708 	.word	0x000c6708
   b866c:	000c66de 	.word	0x000c66de
   b8670:	000c66e4 	.word	0x000c66e4
   b8674:	000c66ea 	.word	0x000c66ea
   b8678:	000c66f0 	.word	0x000c66f0
   b867c:	000c66f6 	.word	0x000c66f6
   b8680:	000c66fc 	.word	0x000c66fc
   b8684:	000c6702 	.word	0x000c6702

000b8688 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b8688:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b868a:	4b62      	ldr	r3, [pc, #392]	; (b8814 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b868c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b868e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8692:	6818      	ldr	r0, [r3, #0]
   b8694:	9000      	str	r0, [sp, #0]
   b8696:	889b      	ldrh	r3, [r3, #4]
   b8698:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b869c:	2205      	movs	r2, #5
   b869e:	4629      	mov	r1, r5
   b86a0:	4668      	mov	r0, sp
   b86a2:	f00b fb5d 	bl	c3d60 <memcmp>
   b86a6:	b978      	cbnz	r0, b86c8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b86a8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b86ac:	b163      	cbz	r3, b86c8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b86ae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b86b2:	b14a      	cbz	r2, b86c8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b86b4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b86b8:	2a00      	cmp	r2, #0
   b86ba:	f040 80a3 	bne.w	b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b86be:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b86c2:	2b00      	cmp	r3, #0
   b86c4:	f040 809e 	bne.w	b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b86c8:	4953      	ldr	r1, [pc, #332]	; (b8818 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b86ca:	4668      	mov	r0, sp
   b86cc:	f00b fbe6 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86d0:	2205      	movs	r2, #5
   b86d2:	4629      	mov	r1, r5
   b86d4:	4668      	mov	r0, sp
   b86d6:	f00b fb43 	bl	c3d60 <memcmp>
   b86da:	b978      	cbnz	r0, b86fc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b86dc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b86e0:	b163      	cbz	r3, b86fc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b86e2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b86e6:	b14a      	cbz	r2, b86fc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b86e8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b86ec:	2a00      	cmp	r2, #0
   b86ee:	f040 8089 	bne.w	b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b86f2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b86f6:	2b00      	cmp	r3, #0
   b86f8:	f040 8084 	bne.w	b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b86fc:	4947      	ldr	r1, [pc, #284]	; (b881c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b86fe:	4668      	mov	r0, sp
   b8700:	f00b fbcc 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8704:	2205      	movs	r2, #5
   b8706:	4629      	mov	r1, r5
   b8708:	4668      	mov	r0, sp
   b870a:	f00b fb29 	bl	c3d60 <memcmp>
   b870e:	b968      	cbnz	r0, b872c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b8710:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8714:	b153      	cbz	r3, b872c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b8716:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b871a:	b13a      	cbz	r2, b872c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b871c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8720:	2a00      	cmp	r2, #0
   b8722:	d16f      	bne.n	b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8724:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8728:	2b00      	cmp	r3, #0
   b872a:	d16b      	bne.n	b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b872c:	493c      	ldr	r1, [pc, #240]	; (b8820 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b872e:	4668      	mov	r0, sp
   b8730:	f00b fbb4 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8734:	2205      	movs	r2, #5
   b8736:	4629      	mov	r1, r5
   b8738:	4668      	mov	r0, sp
   b873a:	f00b fb11 	bl	c3d60 <memcmp>
   b873e:	b968      	cbnz	r0, b875c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b8740:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8744:	b153      	cbz	r3, b875c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b8746:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b874a:	b13a      	cbz	r2, b875c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b874c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8750:	2a00      	cmp	r2, #0
   b8752:	d157      	bne.n	b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8754:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8758:	2b00      	cmp	r3, #0
   b875a:	d153      	bne.n	b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b875c:	4931      	ldr	r1, [pc, #196]	; (b8824 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b875e:	4668      	mov	r0, sp
   b8760:	f00b fb9c 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8764:	2205      	movs	r2, #5
   b8766:	4629      	mov	r1, r5
   b8768:	4668      	mov	r0, sp
   b876a:	f00b faf9 	bl	c3d60 <memcmp>
   b876e:	b968      	cbnz	r0, b878c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b8770:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8774:	b153      	cbz	r3, b878c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b8776:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b877a:	b13a      	cbz	r2, b878c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b877c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8780:	2a00      	cmp	r2, #0
   b8782:	d13f      	bne.n	b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8784:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8788:	2b00      	cmp	r3, #0
   b878a:	d13b      	bne.n	b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b878c:	4926      	ldr	r1, [pc, #152]	; (b8828 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b878e:	4668      	mov	r0, sp
   b8790:	f00b fb84 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8794:	2205      	movs	r2, #5
   b8796:	4629      	mov	r1, r5
   b8798:	4668      	mov	r0, sp
   b879a:	f00b fae1 	bl	c3d60 <memcmp>
   b879e:	b958      	cbnz	r0, b87b8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b87a0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b87a4:	b143      	cbz	r3, b87b8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b87a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b87aa:	b12a      	cbz	r2, b87b8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b87ac:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b87b0:	bb42      	cbnz	r2, b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b87b2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b87b6:	bb2b      	cbnz	r3, b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b87b8:	491c      	ldr	r1, [pc, #112]	; (b882c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b87ba:	4668      	mov	r0, sp
   b87bc:	f00b fb6e 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87c0:	2205      	movs	r2, #5
   b87c2:	4629      	mov	r1, r5
   b87c4:	4668      	mov	r0, sp
   b87c6:	f00b facb 	bl	c3d60 <memcmp>
   b87ca:	b940      	cbnz	r0, b87de <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b87cc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b87d0:	b12b      	cbz	r3, b87de <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b87d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b87d4:	b11a      	cbz	r2, b87de <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b87d6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b87d8:	b9a2      	cbnz	r2, b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b87da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b87dc:	b993      	cbnz	r3, b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b87de:	4914      	ldr	r1, [pc, #80]	; (b8830 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b87e0:	4668      	mov	r0, sp
   b87e2:	f00b fb5b 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87e6:	2205      	movs	r2, #5
   b87e8:	4629      	mov	r1, r5
   b87ea:	4668      	mov	r0, sp
   b87ec:	f00b fab8 	bl	c3d60 <memcmp>
   b87f0:	b958      	cbnz	r0, b880a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b87f2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b87f6:	b153      	cbz	r3, b880e <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b87f8:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b87fa:	b120      	cbz	r0, b8806 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b87fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b87fe:	b90a      	cbnz	r2, b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8800:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b8802:	b100      	cbz	r0, b8806 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b8804:	2001      	movs	r0, #1
}
   b8806:	b003      	add	sp, #12
   b8808:	bd30      	pop	{r4, r5, pc}
  return false;
   b880a:	2000      	movs	r0, #0
   b880c:	e7fb      	b.n	b8806 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b880e:	4618      	mov	r0, r3
   b8810:	e7f9      	b.n	b8806 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b8812:	bf00      	nop
   b8814:	000c6708 	.word	0x000c6708
   b8818:	000c66de 	.word	0x000c66de
   b881c:	000c66e4 	.word	0x000c66e4
   b8820:	000c66ea 	.word	0x000c66ea
   b8824:	000c66f0 	.word	0x000c66f0
   b8828:	000c66f6 	.word	0x000c66f6
   b882c:	000c66fc 	.word	0x000c66fc
   b8830:	000c6702 	.word	0x000c6702

000b8834 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b8834:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8836:	4b38      	ldr	r3, [pc, #224]	; (b8918 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b8838:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b883a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b883e:	6818      	ldr	r0, [r3, #0]
   b8840:	9000      	str	r0, [sp, #0]
   b8842:	889b      	ldrh	r3, [r3, #4]
   b8844:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8848:	2205      	movs	r2, #5
   b884a:	4629      	mov	r1, r5
   b884c:	4668      	mov	r0, sp
   b884e:	f00b fa87 	bl	c3d60 <memcmp>
   b8852:	b920      	cbnz	r0, b885e <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b8854:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b8858:	3001      	adds	r0, #1
}
   b885a:	b003      	add	sp, #12
   b885c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b885e:	492f      	ldr	r1, [pc, #188]	; (b891c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b8860:	4668      	mov	r0, sp
   b8862:	f00b fb1b 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8866:	2205      	movs	r2, #5
   b8868:	4629      	mov	r1, r5
   b886a:	4668      	mov	r0, sp
   b886c:	f00b fa78 	bl	c3d60 <memcmp>
   b8870:	b910      	cbnz	r0, b8878 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b8872:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8876:	e7ef      	b.n	b8858 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8878:	4929      	ldr	r1, [pc, #164]	; (b8920 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b887a:	4668      	mov	r0, sp
   b887c:	f00b fb0e 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8880:	2205      	movs	r2, #5
   b8882:	4629      	mov	r1, r5
   b8884:	4668      	mov	r0, sp
   b8886:	f00b fa6b 	bl	c3d60 <memcmp>
   b888a:	b910      	cbnz	r0, b8892 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b888c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8890:	e7e2      	b.n	b8858 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8892:	4924      	ldr	r1, [pc, #144]	; (b8924 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b8894:	4668      	mov	r0, sp
   b8896:	f00b fb01 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b889a:	2205      	movs	r2, #5
   b889c:	4629      	mov	r1, r5
   b889e:	4668      	mov	r0, sp
   b88a0:	f00b fa5e 	bl	c3d60 <memcmp>
   b88a4:	b910      	cbnz	r0, b88ac <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b88a6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b88aa:	e7d5      	b.n	b8858 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b88ac:	491e      	ldr	r1, [pc, #120]	; (b8928 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b88ae:	4668      	mov	r0, sp
   b88b0:	f00b faf4 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88b4:	2205      	movs	r2, #5
   b88b6:	4629      	mov	r1, r5
   b88b8:	4668      	mov	r0, sp
   b88ba:	f00b fa51 	bl	c3d60 <memcmp>
   b88be:	b910      	cbnz	r0, b88c6 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b88c0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b88c4:	e7c8      	b.n	b8858 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b88c6:	4919      	ldr	r1, [pc, #100]	; (b892c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b88c8:	4668      	mov	r0, sp
   b88ca:	f00b fae7 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88ce:	2205      	movs	r2, #5
   b88d0:	4629      	mov	r1, r5
   b88d2:	4668      	mov	r0, sp
   b88d4:	f00b fa44 	bl	c3d60 <memcmp>
   b88d8:	b910      	cbnz	r0, b88e0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b88da:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b88de:	e7bb      	b.n	b8858 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b88e0:	4913      	ldr	r1, [pc, #76]	; (b8930 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b88e2:	4668      	mov	r0, sp
   b88e4:	f00b fada 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88e8:	2205      	movs	r2, #5
   b88ea:	4629      	mov	r1, r5
   b88ec:	4668      	mov	r0, sp
   b88ee:	f00b fa37 	bl	c3d60 <memcmp>
   b88f2:	b910      	cbnz	r0, b88fa <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b88f4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b88f8:	e7ae      	b.n	b8858 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b88fa:	490e      	ldr	r1, [pc, #56]	; (b8934 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b88fc:	4668      	mov	r0, sp
   b88fe:	f00b facd 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8902:	2205      	movs	r2, #5
   b8904:	4629      	mov	r1, r5
   b8906:	4668      	mov	r0, sp
   b8908:	f00b fa2a 	bl	c3d60 <memcmp>
   b890c:	b910      	cbnz	r0, b8914 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b890e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8912:	e7a1      	b.n	b8858 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b8914:	2000      	movs	r0, #0
   b8916:	e7a0      	b.n	b885a <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b8918:	000c6708 	.word	0x000c6708
   b891c:	000c66de 	.word	0x000c66de
   b8920:	000c66e4 	.word	0x000c66e4
   b8924:	000c66ea 	.word	0x000c66ea
   b8928:	000c66f0 	.word	0x000c66f0
   b892c:	000c66f6 	.word	0x000c66f6
   b8930:	000c66fc 	.word	0x000c66fc
   b8934:	000c6702 	.word	0x000c6702

000b8938 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b8938:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b893a:	4b38      	ldr	r3, [pc, #224]	; (b8a1c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b893c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b893e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8942:	6818      	ldr	r0, [r3, #0]
   b8944:	9000      	str	r0, [sp, #0]
   b8946:	889b      	ldrh	r3, [r3, #4]
   b8948:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b894c:	2205      	movs	r2, #5
   b894e:	4629      	mov	r1, r5
   b8950:	4668      	mov	r0, sp
   b8952:	f00b fa05 	bl	c3d60 <memcmp>
   b8956:	b920      	cbnz	r0, b8962 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b8958:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b895c:	3002      	adds	r0, #2
}
   b895e:	b003      	add	sp, #12
   b8960:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8962:	492f      	ldr	r1, [pc, #188]	; (b8a20 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b8964:	4668      	mov	r0, sp
   b8966:	f00b fa99 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b896a:	2205      	movs	r2, #5
   b896c:	4629      	mov	r1, r5
   b896e:	4668      	mov	r0, sp
   b8970:	f00b f9f6 	bl	c3d60 <memcmp>
   b8974:	b910      	cbnz	r0, b897c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b8976:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b897a:	e7ef      	b.n	b895c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b897c:	4929      	ldr	r1, [pc, #164]	; (b8a24 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b897e:	4668      	mov	r0, sp
   b8980:	f00b fa8c 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8984:	2205      	movs	r2, #5
   b8986:	4629      	mov	r1, r5
   b8988:	4668      	mov	r0, sp
   b898a:	f00b f9e9 	bl	c3d60 <memcmp>
   b898e:	b910      	cbnz	r0, b8996 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b8990:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8994:	e7e2      	b.n	b895c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8996:	4924      	ldr	r1, [pc, #144]	; (b8a28 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b8998:	4668      	mov	r0, sp
   b899a:	f00b fa7f 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b899e:	2205      	movs	r2, #5
   b89a0:	4629      	mov	r1, r5
   b89a2:	4668      	mov	r0, sp
   b89a4:	f00b f9dc 	bl	c3d60 <memcmp>
   b89a8:	b910      	cbnz	r0, b89b0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b89aa:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b89ae:	e7d5      	b.n	b895c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b89b0:	491e      	ldr	r1, [pc, #120]	; (b8a2c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b89b2:	4668      	mov	r0, sp
   b89b4:	f00b fa72 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89b8:	2205      	movs	r2, #5
   b89ba:	4629      	mov	r1, r5
   b89bc:	4668      	mov	r0, sp
   b89be:	f00b f9cf 	bl	c3d60 <memcmp>
   b89c2:	b910      	cbnz	r0, b89ca <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b89c4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b89c8:	e7c8      	b.n	b895c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b89ca:	4919      	ldr	r1, [pc, #100]	; (b8a30 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b89cc:	4668      	mov	r0, sp
   b89ce:	f00b fa65 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89d2:	2205      	movs	r2, #5
   b89d4:	4629      	mov	r1, r5
   b89d6:	4668      	mov	r0, sp
   b89d8:	f00b f9c2 	bl	c3d60 <memcmp>
   b89dc:	b910      	cbnz	r0, b89e4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b89de:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b89e2:	e7bb      	b.n	b895c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b89e4:	4913      	ldr	r1, [pc, #76]	; (b8a34 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b89e6:	4668      	mov	r0, sp
   b89e8:	f00b fa58 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89ec:	2205      	movs	r2, #5
   b89ee:	4629      	mov	r1, r5
   b89f0:	4668      	mov	r0, sp
   b89f2:	f00b f9b5 	bl	c3d60 <memcmp>
   b89f6:	b910      	cbnz	r0, b89fe <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b89f8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b89fc:	e7ae      	b.n	b895c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b89fe:	490e      	ldr	r1, [pc, #56]	; (b8a38 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b8a00:	4668      	mov	r0, sp
   b8a02:	f00b fa4b 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a06:	2205      	movs	r2, #5
   b8a08:	4629      	mov	r1, r5
   b8a0a:	4668      	mov	r0, sp
   b8a0c:	f00b f9a8 	bl	c3d60 <memcmp>
   b8a10:	b910      	cbnz	r0, b8a18 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b8a12:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8a16:	e7a1      	b.n	b895c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b8a18:	2000      	movs	r0, #0
   b8a1a:	e7a0      	b.n	b895e <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b8a1c:	000c6708 	.word	0x000c6708
   b8a20:	000c66de 	.word	0x000c66de
   b8a24:	000c66e4 	.word	0x000c66e4
   b8a28:	000c66ea 	.word	0x000c66ea
   b8a2c:	000c66f0 	.word	0x000c66f0
   b8a30:	000c66f6 	.word	0x000c66f6
   b8a34:	000c66fc 	.word	0x000c66fc
   b8a38:	000c6702 	.word	0x000c6702

000b8a3c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b8a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8a3e:	4b39      	ldr	r3, [pc, #228]	; (b8b24 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b8a40:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a42:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8a46:	6818      	ldr	r0, [r3, #0]
   b8a48:	9000      	str	r0, [sp, #0]
   b8a4a:	889b      	ldrh	r3, [r3, #4]
   b8a4c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a50:	2205      	movs	r2, #5
   b8a52:	4629      	mov	r1, r5
   b8a54:	4668      	mov	r0, sp
   b8a56:	f00b f983 	bl	c3d60 <memcmp>
   b8a5a:	b920      	cbnz	r0, b8a66 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b8a5c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b8a60:	3066      	adds	r0, #102	; 0x66
}
   b8a62:	b003      	add	sp, #12
   b8a64:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8a66:	4930      	ldr	r1, [pc, #192]	; (b8b28 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b8a68:	4668      	mov	r0, sp
   b8a6a:	f00b fa17 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a6e:	2205      	movs	r2, #5
   b8a70:	4629      	mov	r1, r5
   b8a72:	4668      	mov	r0, sp
   b8a74:	f00b f974 	bl	c3d60 <memcmp>
   b8a78:	b910      	cbnz	r0, b8a80 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b8a7a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8a7e:	e7ef      	b.n	b8a60 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8a80:	492a      	ldr	r1, [pc, #168]	; (b8b2c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b8a82:	4668      	mov	r0, sp
   b8a84:	f00b fa0a 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a88:	2205      	movs	r2, #5
   b8a8a:	4629      	mov	r1, r5
   b8a8c:	4668      	mov	r0, sp
   b8a8e:	f00b f967 	bl	c3d60 <memcmp>
   b8a92:	b910      	cbnz	r0, b8a9a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b8a94:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8a98:	e7e2      	b.n	b8a60 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8a9a:	4925      	ldr	r1, [pc, #148]	; (b8b30 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b8a9c:	4668      	mov	r0, sp
   b8a9e:	f00b f9fd 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8aa2:	2205      	movs	r2, #5
   b8aa4:	4629      	mov	r1, r5
   b8aa6:	4668      	mov	r0, sp
   b8aa8:	f00b f95a 	bl	c3d60 <memcmp>
   b8aac:	b910      	cbnz	r0, b8ab4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b8aae:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8ab2:	e7d5      	b.n	b8a60 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8ab4:	491f      	ldr	r1, [pc, #124]	; (b8b34 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b8ab6:	4668      	mov	r0, sp
   b8ab8:	f00b f9f0 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8abc:	2205      	movs	r2, #5
   b8abe:	4629      	mov	r1, r5
   b8ac0:	4668      	mov	r0, sp
   b8ac2:	f00b f94d 	bl	c3d60 <memcmp>
   b8ac6:	b910      	cbnz	r0, b8ace <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b8ac8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8acc:	e7c8      	b.n	b8a60 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8ace:	491a      	ldr	r1, [pc, #104]	; (b8b38 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b8ad0:	4668      	mov	r0, sp
   b8ad2:	f00b f9e3 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ad6:	2205      	movs	r2, #5
   b8ad8:	4629      	mov	r1, r5
   b8ada:	4668      	mov	r0, sp
   b8adc:	f00b f940 	bl	c3d60 <memcmp>
   b8ae0:	b910      	cbnz	r0, b8ae8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b8ae2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8ae6:	e7bb      	b.n	b8a60 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8ae8:	4914      	ldr	r1, [pc, #80]	; (b8b3c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b8aea:	4668      	mov	r0, sp
   b8aec:	f00b f9d6 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8af0:	2205      	movs	r2, #5
   b8af2:	4629      	mov	r1, r5
   b8af4:	4668      	mov	r0, sp
   b8af6:	f00b f933 	bl	c3d60 <memcmp>
   b8afa:	b918      	cbnz	r0, b8b04 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b8afc:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b8b00:	3034      	adds	r0, #52	; 0x34
   b8b02:	e7ae      	b.n	b8a62 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8b04:	490e      	ldr	r1, [pc, #56]	; (b8b40 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b8b06:	4668      	mov	r0, sp
   b8b08:	f00b f9c8 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b0c:	2205      	movs	r2, #5
   b8b0e:	4629      	mov	r1, r5
   b8b10:	4668      	mov	r0, sp
   b8b12:	f00b f925 	bl	c3d60 <memcmp>
   b8b16:	b910      	cbnz	r0, b8b1e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b8b18:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8b1c:	e7f0      	b.n	b8b00 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b8b1e:	2000      	movs	r0, #0
   b8b20:	e79f      	b.n	b8a62 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b8b22:	bf00      	nop
   b8b24:	000c6708 	.word	0x000c6708
   b8b28:	000c66de 	.word	0x000c66de
   b8b2c:	000c66e4 	.word	0x000c66e4
   b8b30:	000c66ea 	.word	0x000c66ea
   b8b34:	000c66f0 	.word	0x000c66f0
   b8b38:	000c66f6 	.word	0x000c66f6
   b8b3c:	000c66fc 	.word	0x000c66fc
   b8b40:	000c6702 	.word	0x000c6702

000b8b44 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b8b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8b46:	4b39      	ldr	r3, [pc, #228]	; (b8c2c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b8b48:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b4a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8b4e:	6818      	ldr	r0, [r3, #0]
   b8b50:	9000      	str	r0, [sp, #0]
   b8b52:	889b      	ldrh	r3, [r3, #4]
   b8b54:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b58:	2205      	movs	r2, #5
   b8b5a:	4629      	mov	r1, r5
   b8b5c:	4668      	mov	r0, sp
   b8b5e:	f00b f8ff 	bl	c3d60 <memcmp>
   b8b62:	b920      	cbnz	r0, b8b6e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b8b64:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b8b68:	3067      	adds	r0, #103	; 0x67
}
   b8b6a:	b003      	add	sp, #12
   b8b6c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8b6e:	4930      	ldr	r1, [pc, #192]	; (b8c30 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b8b70:	4668      	mov	r0, sp
   b8b72:	f00b f993 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b76:	2205      	movs	r2, #5
   b8b78:	4629      	mov	r1, r5
   b8b7a:	4668      	mov	r0, sp
   b8b7c:	f00b f8f0 	bl	c3d60 <memcmp>
   b8b80:	b910      	cbnz	r0, b8b88 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b8b82:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8b86:	e7ef      	b.n	b8b68 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8b88:	492a      	ldr	r1, [pc, #168]	; (b8c34 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b8b8a:	4668      	mov	r0, sp
   b8b8c:	f00b f986 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b90:	2205      	movs	r2, #5
   b8b92:	4629      	mov	r1, r5
   b8b94:	4668      	mov	r0, sp
   b8b96:	f00b f8e3 	bl	c3d60 <memcmp>
   b8b9a:	b910      	cbnz	r0, b8ba2 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b8b9c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8ba0:	e7e2      	b.n	b8b68 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8ba2:	4925      	ldr	r1, [pc, #148]	; (b8c38 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b8ba4:	4668      	mov	r0, sp
   b8ba6:	f00b f979 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8baa:	2205      	movs	r2, #5
   b8bac:	4629      	mov	r1, r5
   b8bae:	4668      	mov	r0, sp
   b8bb0:	f00b f8d6 	bl	c3d60 <memcmp>
   b8bb4:	b910      	cbnz	r0, b8bbc <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b8bb6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8bba:	e7d5      	b.n	b8b68 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8bbc:	491f      	ldr	r1, [pc, #124]	; (b8c3c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b8bbe:	4668      	mov	r0, sp
   b8bc0:	f00b f96c 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bc4:	2205      	movs	r2, #5
   b8bc6:	4629      	mov	r1, r5
   b8bc8:	4668      	mov	r0, sp
   b8bca:	f00b f8c9 	bl	c3d60 <memcmp>
   b8bce:	b910      	cbnz	r0, b8bd6 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b8bd0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8bd4:	e7c8      	b.n	b8b68 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8bd6:	491a      	ldr	r1, [pc, #104]	; (b8c40 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b8bd8:	4668      	mov	r0, sp
   b8bda:	f00b f95f 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bde:	2205      	movs	r2, #5
   b8be0:	4629      	mov	r1, r5
   b8be2:	4668      	mov	r0, sp
   b8be4:	f00b f8bc 	bl	c3d60 <memcmp>
   b8be8:	b910      	cbnz	r0, b8bf0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b8bea:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8bee:	e7bb      	b.n	b8b68 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8bf0:	4914      	ldr	r1, [pc, #80]	; (b8c44 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b8bf2:	4668      	mov	r0, sp
   b8bf4:	f00b f952 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bf8:	2205      	movs	r2, #5
   b8bfa:	4629      	mov	r1, r5
   b8bfc:	4668      	mov	r0, sp
   b8bfe:	f00b f8af 	bl	c3d60 <memcmp>
   b8c02:	b918      	cbnz	r0, b8c0c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b8c04:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b8c08:	3035      	adds	r0, #53	; 0x35
   b8c0a:	e7ae      	b.n	b8b6a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8c0c:	490e      	ldr	r1, [pc, #56]	; (b8c48 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b8c0e:	4668      	mov	r0, sp
   b8c10:	f00b f944 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c14:	2205      	movs	r2, #5
   b8c16:	4629      	mov	r1, r5
   b8c18:	4668      	mov	r0, sp
   b8c1a:	f00b f8a1 	bl	c3d60 <memcmp>
   b8c1e:	b910      	cbnz	r0, b8c26 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b8c20:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8c24:	e7f0      	b.n	b8c08 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b8c26:	2000      	movs	r0, #0
   b8c28:	e79f      	b.n	b8b6a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b8c2a:	bf00      	nop
   b8c2c:	000c6708 	.word	0x000c6708
   b8c30:	000c66de 	.word	0x000c66de
   b8c34:	000c66e4 	.word	0x000c66e4
   b8c38:	000c66ea 	.word	0x000c66ea
   b8c3c:	000c66f0 	.word	0x000c66f0
   b8c40:	000c66f6 	.word	0x000c66f6
   b8c44:	000c66fc 	.word	0x000c66fc
   b8c48:	000c6702 	.word	0x000c6702

000b8c4c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b8c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8c4e:	4b39      	ldr	r3, [pc, #228]	; (b8d34 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b8c50:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c52:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8c56:	6818      	ldr	r0, [r3, #0]
   b8c58:	9000      	str	r0, [sp, #0]
   b8c5a:	889b      	ldrh	r3, [r3, #4]
   b8c5c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c60:	2205      	movs	r2, #5
   b8c62:	4629      	mov	r1, r5
   b8c64:	4668      	mov	r0, sp
   b8c66:	f00b f87b 	bl	c3d60 <memcmp>
   b8c6a:	b928      	cbnz	r0, b8c78 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b8c6c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b8c70:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b8c74:	b003      	add	sp, #12
   b8c76:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8c78:	492f      	ldr	r1, [pc, #188]	; (b8d38 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b8c7a:	4668      	mov	r0, sp
   b8c7c:	f00b f90e 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c80:	2205      	movs	r2, #5
   b8c82:	4629      	mov	r1, r5
   b8c84:	4668      	mov	r0, sp
   b8c86:	f00b f86b 	bl	c3d60 <memcmp>
   b8c8a:	b910      	cbnz	r0, b8c92 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b8c8c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8c90:	e7ee      	b.n	b8c70 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8c92:	492a      	ldr	r1, [pc, #168]	; (b8d3c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b8c94:	4668      	mov	r0, sp
   b8c96:	f00b f901 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c9a:	2205      	movs	r2, #5
   b8c9c:	4629      	mov	r1, r5
   b8c9e:	4668      	mov	r0, sp
   b8ca0:	f00b f85e 	bl	c3d60 <memcmp>
   b8ca4:	b910      	cbnz	r0, b8cac <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b8ca6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8caa:	e7e1      	b.n	b8c70 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8cac:	4924      	ldr	r1, [pc, #144]	; (b8d40 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b8cae:	4668      	mov	r0, sp
   b8cb0:	f00b f8f4 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cb4:	2205      	movs	r2, #5
   b8cb6:	4629      	mov	r1, r5
   b8cb8:	4668      	mov	r0, sp
   b8cba:	f00b f851 	bl	c3d60 <memcmp>
   b8cbe:	b910      	cbnz	r0, b8cc6 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b8cc0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8cc4:	e7d4      	b.n	b8c70 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8cc6:	491f      	ldr	r1, [pc, #124]	; (b8d44 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b8cc8:	4668      	mov	r0, sp
   b8cca:	f00b f8e7 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cce:	2205      	movs	r2, #5
   b8cd0:	4629      	mov	r1, r5
   b8cd2:	4668      	mov	r0, sp
   b8cd4:	f00b f844 	bl	c3d60 <memcmp>
   b8cd8:	b910      	cbnz	r0, b8ce0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b8cda:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8cde:	e7c7      	b.n	b8c70 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8ce0:	4919      	ldr	r1, [pc, #100]	; (b8d48 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b8ce2:	4668      	mov	r0, sp
   b8ce4:	f00b f8da 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ce8:	2205      	movs	r2, #5
   b8cea:	4629      	mov	r1, r5
   b8cec:	4668      	mov	r0, sp
   b8cee:	f00b f837 	bl	c3d60 <memcmp>
   b8cf2:	b910      	cbnz	r0, b8cfa <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b8cf4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8cf8:	e7ba      	b.n	b8c70 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8cfa:	4914      	ldr	r1, [pc, #80]	; (b8d4c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b8cfc:	4668      	mov	r0, sp
   b8cfe:	f00b f8cd 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d02:	2205      	movs	r2, #5
   b8d04:	4629      	mov	r1, r5
   b8d06:	4668      	mov	r0, sp
   b8d08:	f00b f82a 	bl	c3d60 <memcmp>
   b8d0c:	b918      	cbnz	r0, b8d16 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b8d0e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b8d12:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8d14:	e7ae      	b.n	b8c74 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b8d16:	490e      	ldr	r1, [pc, #56]	; (b8d50 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b8d18:	4668      	mov	r0, sp
   b8d1a:	f00b f8bf 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d1e:	2205      	movs	r2, #5
   b8d20:	4629      	mov	r1, r5
   b8d22:	4668      	mov	r0, sp
   b8d24:	f00b f81c 	bl	c3d60 <memcmp>
   b8d28:	b910      	cbnz	r0, b8d30 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b8d2a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8d2e:	e7f0      	b.n	b8d12 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b8d30:	2000      	movs	r0, #0
   b8d32:	e79f      	b.n	b8c74 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b8d34:	000c6708 	.word	0x000c6708
   b8d38:	000c66de 	.word	0x000c66de
   b8d3c:	000c66e4 	.word	0x000c66e4
   b8d40:	000c66ea 	.word	0x000c66ea
   b8d44:	000c66f0 	.word	0x000c66f0
   b8d48:	000c66f6 	.word	0x000c66f6
   b8d4c:	000c66fc 	.word	0x000c66fc
   b8d50:	000c6702 	.word	0x000c6702

000b8d54 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b8d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8d56:	4b3a      	ldr	r3, [pc, #232]	; (b8e40 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b8d58:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d5a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8d5e:	6818      	ldr	r0, [r3, #0]
   b8d60:	9000      	str	r0, [sp, #0]
   b8d62:	889b      	ldrh	r3, [r3, #4]
   b8d64:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d68:	2205      	movs	r2, #5
   b8d6a:	4629      	mov	r1, r5
   b8d6c:	4668      	mov	r0, sp
   b8d6e:	f00a fff7 	bl	c3d60 <memcmp>
   b8d72:	b930      	cbnz	r0, b8d82 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b8d74:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b8d78:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8d7c:	3001      	adds	r0, #1
}
   b8d7e:	b003      	add	sp, #12
   b8d80:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8d82:	4930      	ldr	r1, [pc, #192]	; (b8e44 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b8d84:	4668      	mov	r0, sp
   b8d86:	f00b f889 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d8a:	2205      	movs	r2, #5
   b8d8c:	4629      	mov	r1, r5
   b8d8e:	4668      	mov	r0, sp
   b8d90:	f00a ffe6 	bl	c3d60 <memcmp>
   b8d94:	b910      	cbnz	r0, b8d9c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b8d96:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8d9a:	e7ed      	b.n	b8d78 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8d9c:	492a      	ldr	r1, [pc, #168]	; (b8e48 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b8d9e:	4668      	mov	r0, sp
   b8da0:	f00b f87c 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8da4:	2205      	movs	r2, #5
   b8da6:	4629      	mov	r1, r5
   b8da8:	4668      	mov	r0, sp
   b8daa:	f00a ffd9 	bl	c3d60 <memcmp>
   b8dae:	b910      	cbnz	r0, b8db6 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b8db0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8db4:	e7e0      	b.n	b8d78 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8db6:	4925      	ldr	r1, [pc, #148]	; (b8e4c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b8db8:	4668      	mov	r0, sp
   b8dba:	f00b f86f 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dbe:	2205      	movs	r2, #5
   b8dc0:	4629      	mov	r1, r5
   b8dc2:	4668      	mov	r0, sp
   b8dc4:	f00a ffcc 	bl	c3d60 <memcmp>
   b8dc8:	b910      	cbnz	r0, b8dd0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b8dca:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8dce:	e7d3      	b.n	b8d78 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8dd0:	491f      	ldr	r1, [pc, #124]	; (b8e50 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b8dd2:	4668      	mov	r0, sp
   b8dd4:	f00b f862 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dd8:	2205      	movs	r2, #5
   b8dda:	4629      	mov	r1, r5
   b8ddc:	4668      	mov	r0, sp
   b8dde:	f00a ffbf 	bl	c3d60 <memcmp>
   b8de2:	b910      	cbnz	r0, b8dea <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b8de4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8de8:	e7c6      	b.n	b8d78 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8dea:	491a      	ldr	r1, [pc, #104]	; (b8e54 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b8dec:	4668      	mov	r0, sp
   b8dee:	f00b f855 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8df2:	2205      	movs	r2, #5
   b8df4:	4629      	mov	r1, r5
   b8df6:	4668      	mov	r0, sp
   b8df8:	f00a ffb2 	bl	c3d60 <memcmp>
   b8dfc:	b910      	cbnz	r0, b8e04 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b8dfe:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8e02:	e7b9      	b.n	b8d78 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8e04:	4914      	ldr	r1, [pc, #80]	; (b8e58 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b8e06:	4668      	mov	r0, sp
   b8e08:	f00b f848 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e0c:	2205      	movs	r2, #5
   b8e0e:	4629      	mov	r1, r5
   b8e10:	4668      	mov	r0, sp
   b8e12:	f00a ffa5 	bl	c3d60 <memcmp>
   b8e16:	b918      	cbnz	r0, b8e20 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b8e18:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8e1c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8e1e:	e7ad      	b.n	b8d7c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b8e20:	490e      	ldr	r1, [pc, #56]	; (b8e5c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b8e22:	4668      	mov	r0, sp
   b8e24:	f00b f83a 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e28:	2205      	movs	r2, #5
   b8e2a:	4629      	mov	r1, r5
   b8e2c:	4668      	mov	r0, sp
   b8e2e:	f00a ff97 	bl	c3d60 <memcmp>
   b8e32:	b910      	cbnz	r0, b8e3a <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8e34:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8e38:	e7f0      	b.n	b8e1c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b8e3a:	2000      	movs	r0, #0
   b8e3c:	e79f      	b.n	b8d7e <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b8e3e:	bf00      	nop
   b8e40:	000c6708 	.word	0x000c6708
   b8e44:	000c66de 	.word	0x000c66de
   b8e48:	000c66e4 	.word	0x000c66e4
   b8e4c:	000c66ea 	.word	0x000c66ea
   b8e50:	000c66f0 	.word	0x000c66f0
   b8e54:	000c66f6 	.word	0x000c66f6
   b8e58:	000c66fc 	.word	0x000c66fc
   b8e5c:	000c6702 	.word	0x000c6702

000b8e60 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b8e60:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b8e62:	4b30      	ldr	r3, [pc, #192]	; (b8f24 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b8e64:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e66:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8e6a:	6818      	ldr	r0, [r3, #0]
   b8e6c:	9000      	str	r0, [sp, #0]
   b8e6e:	889b      	ldrh	r3, [r3, #4]
   b8e70:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e74:	2205      	movs	r2, #5
   b8e76:	4621      	mov	r1, r4
   b8e78:	4668      	mov	r0, sp
   b8e7a:	f00a ff71 	bl	c3d60 <memcmp>
   b8e7e:	b910      	cbnz	r0, b8e86 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b8e80:	2064      	movs	r0, #100	; 0x64
}
   b8e82:	b002      	add	sp, #8
   b8e84:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b8e86:	4928      	ldr	r1, [pc, #160]	; (b8f28 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b8e88:	4668      	mov	r0, sp
   b8e8a:	f00b f807 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e8e:	2205      	movs	r2, #5
   b8e90:	4621      	mov	r1, r4
   b8e92:	4668      	mov	r0, sp
   b8e94:	f00a ff64 	bl	c3d60 <memcmp>
   b8e98:	2800      	cmp	r0, #0
   b8e9a:	d0f1      	beq.n	b8e80 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b8e9c:	4923      	ldr	r1, [pc, #140]	; (b8f2c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b8e9e:	4668      	mov	r0, sp
   b8ea0:	f00a fffc 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ea4:	2205      	movs	r2, #5
   b8ea6:	4621      	mov	r1, r4
   b8ea8:	4668      	mov	r0, sp
   b8eaa:	f00a ff59 	bl	c3d60 <memcmp>
   b8eae:	2800      	cmp	r0, #0
   b8eb0:	d0e6      	beq.n	b8e80 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b8eb2:	491f      	ldr	r1, [pc, #124]	; (b8f30 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b8eb4:	4668      	mov	r0, sp
   b8eb6:	f00a fff1 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8eba:	2205      	movs	r2, #5
   b8ebc:	4621      	mov	r1, r4
   b8ebe:	4668      	mov	r0, sp
   b8ec0:	f00a ff4e 	bl	c3d60 <memcmp>
   b8ec4:	2800      	cmp	r0, #0
   b8ec6:	d0db      	beq.n	b8e80 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b8ec8:	491a      	ldr	r1, [pc, #104]	; (b8f34 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b8eca:	4668      	mov	r0, sp
   b8ecc:	f00a ffe6 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ed0:	2205      	movs	r2, #5
   b8ed2:	4621      	mov	r1, r4
   b8ed4:	4668      	mov	r0, sp
   b8ed6:	f00a ff43 	bl	c3d60 <memcmp>
   b8eda:	2800      	cmp	r0, #0
   b8edc:	d0d0      	beq.n	b8e80 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b8ede:	4916      	ldr	r1, [pc, #88]	; (b8f38 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b8ee0:	4668      	mov	r0, sp
   b8ee2:	f00a ffdb 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ee6:	2205      	movs	r2, #5
   b8ee8:	4621      	mov	r1, r4
   b8eea:	4668      	mov	r0, sp
   b8eec:	f00a ff38 	bl	c3d60 <memcmp>
   b8ef0:	2800      	cmp	r0, #0
   b8ef2:	d0c5      	beq.n	b8e80 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b8ef4:	4911      	ldr	r1, [pc, #68]	; (b8f3c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b8ef6:	4668      	mov	r0, sp
   b8ef8:	f00a ffd0 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8efc:	2205      	movs	r2, #5
   b8efe:	4621      	mov	r1, r4
   b8f00:	4668      	mov	r0, sp
   b8f02:	f00a ff2d 	bl	c3d60 <memcmp>
   b8f06:	b148      	cbz	r0, b8f1c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b8f08:	490d      	ldr	r1, [pc, #52]	; (b8f40 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b8f0a:	4668      	mov	r0, sp
   b8f0c:	f00a ffc6 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f10:	2205      	movs	r2, #5
   b8f12:	4621      	mov	r1, r4
   b8f14:	4668      	mov	r0, sp
   b8f16:	f00a ff23 	bl	c3d60 <memcmp>
   b8f1a:	b908      	cbnz	r0, b8f20 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b8f1c:	2032      	movs	r0, #50	; 0x32
   b8f1e:	e7b0      	b.n	b8e82 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b8f20:	2000      	movs	r0, #0
   b8f22:	e7ae      	b.n	b8e82 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b8f24:	000c6708 	.word	0x000c6708
   b8f28:	000c66de 	.word	0x000c66de
   b8f2c:	000c66e4 	.word	0x000c66e4
   b8f30:	000c66ea 	.word	0x000c66ea
   b8f34:	000c66f0 	.word	0x000c66f0
   b8f38:	000c66f6 	.word	0x000c66f6
   b8f3c:	000c66fc 	.word	0x000c66fc
   b8f40:	000c6702 	.word	0x000c6702

000b8f44 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b8f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8f46:	4b38      	ldr	r3, [pc, #224]	; (b9028 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b8f48:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f4a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8f4e:	6818      	ldr	r0, [r3, #0]
   b8f50:	9000      	str	r0, [sp, #0]
   b8f52:	889b      	ldrh	r3, [r3, #4]
   b8f54:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f58:	2205      	movs	r2, #5
   b8f5a:	4629      	mov	r1, r5
   b8f5c:	4668      	mov	r0, sp
   b8f5e:	f00a feff 	bl	c3d60 <memcmp>
   b8f62:	b918      	cbnz	r0, b8f6c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b8f64:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b8f68:	b003      	add	sp, #12
   b8f6a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8f6c:	492f      	ldr	r1, [pc, #188]	; (b902c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b8f6e:	4668      	mov	r0, sp
   b8f70:	f00a ff94 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f74:	2205      	movs	r2, #5
   b8f76:	4629      	mov	r1, r5
   b8f78:	4668      	mov	r0, sp
   b8f7a:	f00a fef1 	bl	c3d60 <memcmp>
   b8f7e:	b910      	cbnz	r0, b8f86 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b8f80:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8f84:	e7f0      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8f86:	492a      	ldr	r1, [pc, #168]	; (b9030 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b8f88:	4668      	mov	r0, sp
   b8f8a:	f00a ff87 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f8e:	2205      	movs	r2, #5
   b8f90:	4629      	mov	r1, r5
   b8f92:	4668      	mov	r0, sp
   b8f94:	f00a fee4 	bl	c3d60 <memcmp>
   b8f98:	b910      	cbnz	r0, b8fa0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b8f9a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8f9e:	e7e3      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8fa0:	4924      	ldr	r1, [pc, #144]	; (b9034 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b8fa2:	4668      	mov	r0, sp
   b8fa4:	f00a ff7a 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fa8:	2205      	movs	r2, #5
   b8faa:	4629      	mov	r1, r5
   b8fac:	4668      	mov	r0, sp
   b8fae:	f00a fed7 	bl	c3d60 <memcmp>
   b8fb2:	b910      	cbnz	r0, b8fba <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b8fb4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8fb8:	e7d6      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8fba:	491f      	ldr	r1, [pc, #124]	; (b9038 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b8fbc:	4668      	mov	r0, sp
   b8fbe:	f00a ff6d 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fc2:	2205      	movs	r2, #5
   b8fc4:	4629      	mov	r1, r5
   b8fc6:	4668      	mov	r0, sp
   b8fc8:	f00a feca 	bl	c3d60 <memcmp>
   b8fcc:	b910      	cbnz	r0, b8fd4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b8fce:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8fd2:	e7c9      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8fd4:	4919      	ldr	r1, [pc, #100]	; (b903c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b8fd6:	4668      	mov	r0, sp
   b8fd8:	f00a ff60 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fdc:	2205      	movs	r2, #5
   b8fde:	4629      	mov	r1, r5
   b8fe0:	4668      	mov	r0, sp
   b8fe2:	f00a febd 	bl	c3d60 <memcmp>
   b8fe6:	b910      	cbnz	r0, b8fee <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b8fe8:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8fec:	e7bc      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8fee:	4914      	ldr	r1, [pc, #80]	; (b9040 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b8ff0:	4668      	mov	r0, sp
   b8ff2:	f00a ff53 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ff6:	2205      	movs	r2, #5
   b8ff8:	4629      	mov	r1, r5
   b8ffa:	4668      	mov	r0, sp
   b8ffc:	f00a feb0 	bl	c3d60 <memcmp>
   b9000:	b910      	cbnz	r0, b9008 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b9002:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b9006:	e7af      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b9008:	490e      	ldr	r1, [pc, #56]	; (b9044 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b900a:	4668      	mov	r0, sp
   b900c:	f00a ff46 	bl	c3e9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9010:	2205      	movs	r2, #5
   b9012:	4629      	mov	r1, r5
   b9014:	4668      	mov	r0, sp
   b9016:	f00a fea3 	bl	c3d60 <memcmp>
   b901a:	b910      	cbnz	r0, b9022 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b901c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9020:	e7a2      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b9022:	2000      	movs	r0, #0
   b9024:	e7a0      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b9026:	bf00      	nop
   b9028:	000c6708 	.word	0x000c6708
   b902c:	000c66de 	.word	0x000c66de
   b9030:	000c66e4 	.word	0x000c66e4
   b9034:	000c66ea 	.word	0x000c66ea
   b9038:	000c66f0 	.word	0x000c66f0
   b903c:	000c66f6 	.word	0x000c66f6
   b9040:	000c66fc 	.word	0x000c66fc
   b9044:	000c6702 	.word	0x000c6702

000b9048 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b9048:	4770      	bx	lr
	...

000b904c <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b904c:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b904e:	8813      	ldrh	r3, [r2, #0]
   b9050:	4d0c      	ldr	r5, [pc, #48]	; (b9084 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b9052:	2b01      	cmp	r3, #1
{
   b9054:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b9056:	d10e      	bne.n	b9076 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b9058:	020a      	lsls	r2, r1, #8
   b905a:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b905e:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b9060:	3301      	adds	r3, #1
   b9062:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b9064:	f7ff fff0 	bl	b9048 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b9068:	8820      	ldrh	r0, [r4, #0]
   b906a:	882b      	ldrh	r3, [r5, #0]
}
   b906c:	4298      	cmp	r0, r3
   b906e:	bf14      	ite	ne
   b9070:	2003      	movne	r0, #3
   b9072:	2000      	moveq	r0, #0
   b9074:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b9076:	2b02      	cmp	r3, #2
   b9078:	d1f2      	bne.n	b9060 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b907a:	882a      	ldrh	r2, [r5, #0]
   b907c:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b907e:	3206      	adds	r2, #6
   b9080:	e7ed      	b.n	b905e <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b9082:	bf00      	nop
   b9084:	2003e61a 	.word	0x2003e61a

000b9088 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b9088:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b908a:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b908c:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b908e:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b9090:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b9092:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b9096:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b909a:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b909e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b90a2:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b90a6:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b90a8:	4413      	add	r3, r2
   b90aa:	734b      	strb	r3, [r1, #13]
   b90ac:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b90ae:	b293      	uxth	r3, r2
   b90b0:	429c      	cmp	r4, r3
   b90b2:	d90a      	bls.n	b90ca <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b90b4:	688b      	ldr	r3, [r1, #8]
   b90b6:	7b08      	ldrb	r0, [r1, #12]
   b90b8:	5c9b      	ldrb	r3, [r3, r2]
   b90ba:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b90bc:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b90be:	b2db      	uxtb	r3, r3
   b90c0:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b90c2:	4403      	add	r3, r0
   b90c4:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b90c6:	3201      	adds	r2, #1
   b90c8:	e7f1      	b.n	b90ae <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b90ca:	bd30      	pop	{r4, r5, pc}

000b90cc <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b90cc:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b90d0:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b90d2:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b90d6:	b2c9      	uxtb	r1, r1
   b90d8:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b90dc:	4419      	add	r1, r3
   b90de:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b90e2:	4770      	bx	lr

000b90e4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b90e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b90e8:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b90ec:	f10b 0b08 	add.w	fp, fp, #8
   b90f0:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b90f4:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b90f8:	f1ab 0302 	sub.w	r3, fp, #2
{
   b90fc:	4604      	mov	r4, r0
   b90fe:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b9100:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b9102:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9104:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b9106:	f1ba 0f00 	cmp.w	sl, #0
   b910a:	f000 80a6 	beq.w	b925a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b910e:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b9110:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b9114:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9118:	4556      	cmp	r6, sl
   b911a:	bf28      	it	cs
   b911c:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b911e:	ebaa 0a06 	sub.w	sl, sl, r6
   b9122:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b9126:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b912a:	bf02      	ittt	eq
   b912c:	f106 36ff 	addeq.w	r6, r6, #4294967295
   b9130:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b9132:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b9136:	f008 f88f 	bl	c1258 <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b913a:	f1b9 0f00 	cmp.w	r9, #0
   b913e:	d15c      	bne.n	b91fa <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9140:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9144:	6803      	ldr	r3, [r0, #0]
   b9146:	21b5      	movs	r1, #181	; 0xb5
   b9148:	689b      	ldr	r3, [r3, #8]
   b914a:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b914c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9150:	6803      	ldr	r3, [r0, #0]
   b9152:	2162      	movs	r1, #98	; 0x62
   b9154:	689b      	ldr	r3, [r3, #8]
   b9156:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b9158:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b915c:	7829      	ldrb	r1, [r5, #0]
   b915e:	6803      	ldr	r3, [r0, #0]
   b9160:	689b      	ldr	r3, [r3, #8]
   b9162:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b9164:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9168:	7869      	ldrb	r1, [r5, #1]
   b916a:	6803      	ldr	r3, [r0, #0]
   b916c:	689b      	ldr	r3, [r3, #8]
   b916e:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b9170:	78a9      	ldrb	r1, [r5, #2]
   b9172:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9176:	f7fe fdc1 	bl	b7cfc <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b917a:	8869      	ldrh	r1, [r5, #2]
   b917c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9180:	0a09      	lsrs	r1, r1, #8
   b9182:	f7fe fdbb 	bl	b7cfc <_ZN7TwoWire5writeEi.isra.0>
   b9186:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9188:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b918a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b918e:	fa1f f983 	uxth.w	r9, r3
   b9192:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9196:	454a      	cmp	r2, r9
   b9198:	b2bf      	uxth	r7, r7
   b919a:	d90d      	bls.n	b91b8 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b919c:	42be      	cmp	r6, r7
   b919e:	d90b      	bls.n	b91b8 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b91a0:	68aa      	ldr	r2, [r5, #8]
   b91a2:	6801      	ldr	r1, [r0, #0]
   b91a4:	9301      	str	r3, [sp, #4]
   b91a6:	4442      	add	r2, r8
   b91a8:	688f      	ldr	r7, [r1, #8]
   b91aa:	5cd1      	ldrb	r1, [r2, r3]
   b91ac:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b91ae:	9b01      	ldr	r3, [sp, #4]
   b91b0:	3301      	adds	r3, #1
   b91b2:	e7e9      	b.n	b9188 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b91b4:	46b9      	mov	r9, r7
   b91b6:	e7a6      	b.n	b9106 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b91b8:	3e02      	subs	r6, #2
      startSpot += x;
   b91ba:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b91bc:	42b7      	cmp	r7, r6
      startSpot += x;
   b91be:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b91c2:	d10c      	bne.n	b91de <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b91c4:	6803      	ldr	r3, [r0, #0]
   b91c6:	7b29      	ldrb	r1, [r5, #12]
   b91c8:	689b      	ldr	r3, [r3, #8]
   b91ca:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b91cc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b91d0:	7b69      	ldrb	r1, [r5, #13]
   b91d2:	6803      	ldr	r3, [r0, #0]
   b91d4:	689b      	ldr	r3, [r3, #8]
   b91d6:	4798      	blx	r3
        bytesSent += 2;
   b91d8:	f109 0708 	add.w	r7, r9, #8
   b91dc:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b91de:	455f      	cmp	r7, fp
   b91e0:	d2e8      	bcs.n	b91b4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b91e2:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b91e6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b91ea:	f008 f83c 	bl	c1266 <_ZN7TwoWire15endTransmissionEh>
   b91ee:	2800      	cmp	r0, #0
   b91f0:	d0e0      	beq.n	b91b4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b91f2:	200c      	movs	r0, #12
}
   b91f4:	b003      	add	sp, #12
   b91f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b91fa:	2200      	movs	r2, #0
   b91fc:	b291      	uxth	r1, r2
   b91fe:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9202:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9204:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9208:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b920a:	d910      	bls.n	b922e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b920c:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b9210:	eb08 0c02 	add.w	ip, r8, r2
   b9214:	1c53      	adds	r3, r2, #1
   b9216:	45f4      	cmp	ip, lr
   b9218:	9301      	str	r3, [sp, #4]
   b921a:	da08      	bge.n	b922e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b921c:	68a9      	ldr	r1, [r5, #8]
   b921e:	6802      	ldr	r2, [r0, #0]
   b9220:	f811 100c 	ldrb.w	r1, [r1, ip]
   b9224:	6892      	ldr	r2, [r2, #8]
   b9226:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9228:	9b01      	ldr	r3, [sp, #4]
   b922a:	461a      	mov	r2, r3
   b922c:	e7e6      	b.n	b91fc <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b922e:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b9230:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9232:	429f      	cmp	r7, r3
      startSpot += x;
   b9234:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9238:	d1d1      	bne.n	b91de <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b923a:	3e02      	subs	r6, #2
   b923c:	42b2      	cmp	r2, r6
   b923e:	d1ce      	bne.n	b91de <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9240:	6803      	ldr	r3, [r0, #0]
   b9242:	7b29      	ldrb	r1, [r5, #12]
   b9244:	689b      	ldr	r3, [r3, #8]
   b9246:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9248:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b924c:	7b69      	ldrb	r1, [r5, #13]
   b924e:	6803      	ldr	r3, [r0, #0]
   b9250:	689b      	ldr	r3, [r3, #8]
   b9252:	4798      	blx	r3
        bytesSent += 2;
   b9254:	fa1f f78b 	uxth.w	r7, fp
   b9258:	e7c1      	b.n	b91de <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b925a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b925e:	f008 f806 	bl	c126e <_ZN7TwoWire15endTransmissionEv>
   b9262:	2800      	cmp	r0, #0
   b9264:	d0c6      	beq.n	b91f4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b9266:	e7c4      	b.n	b91f2 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b9268 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b9268:	b570      	push	{r4, r5, r6, lr}
   b926a:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b926c:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b9270:	6803      	ldr	r3, [r0, #0]
{
   b9272:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9274:	689b      	ldr	r3, [r3, #8]
   b9276:	21b5      	movs	r1, #181	; 0xb5
   b9278:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b927a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b927e:	6803      	ldr	r3, [r0, #0]
   b9280:	2162      	movs	r1, #98	; 0x62
   b9282:	689b      	ldr	r3, [r3, #8]
   b9284:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b9286:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b928a:	7821      	ldrb	r1, [r4, #0]
   b928c:	6803      	ldr	r3, [r0, #0]
   b928e:	689b      	ldr	r3, [r3, #8]
   b9290:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b9292:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9296:	7861      	ldrb	r1, [r4, #1]
   b9298:	6803      	ldr	r3, [r0, #0]
   b929a:	689b      	ldr	r3, [r3, #8]
   b929c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b929e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b92a2:	78a1      	ldrb	r1, [r4, #2]
   b92a4:	6803      	ldr	r3, [r0, #0]
   b92a6:	689b      	ldr	r3, [r3, #8]
   b92a8:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b92aa:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b92ae:	8861      	ldrh	r1, [r4, #2]
   b92b0:	6803      	ldr	r3, [r0, #0]
   b92b2:	0a09      	lsrs	r1, r1, #8
   b92b4:	689b      	ldr	r3, [r3, #8]
   b92b6:	4798      	blx	r3
   b92b8:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b92ba:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b92be:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b92c0:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b92c2:	b2b2      	uxth	r2, r6
   b92c4:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b92c6:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b92c8:	d904      	bls.n	b92d4 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b92ca:	68a1      	ldr	r1, [r4, #8]
   b92cc:	5c89      	ldrb	r1, [r1, r2]
   b92ce:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b92d0:	3601      	adds	r6, #1
   b92d2:	e7f2      	b.n	b92ba <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b92d4:	7b21      	ldrb	r1, [r4, #12]
   b92d6:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b92d8:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b92dc:	7b61      	ldrb	r1, [r4, #13]
   b92de:	6803      	ldr	r3, [r0, #0]
}
   b92e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b92e4:	689b      	ldr	r3, [r3, #8]
   b92e6:	4718      	bx	r3

000b92e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b92e8:	b510      	push	{r4, lr}
   b92ea:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b92ec:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b92f0:	f004 fdf4 	bl	bdedc <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b92f4:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b92f8:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b92fc:	429a      	cmp	r2, r3
   b92fe:	d90b      	bls.n	b9318 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b9300:	28ff      	cmp	r0, #255	; 0xff
   b9302:	d101      	bne.n	b9308 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b9304:	7822      	ldrb	r2, [r4, #0]
   b9306:	b13a      	cbz	r2, b9318 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b9308:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b930c:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b930e:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b9312:	3301      	adds	r3, #1
   b9314:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b9318:	bd10      	pop	{r4, pc}
	...

000b931c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b931c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b9320:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b9324:	4604      	mov	r4, r0
   b9326:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b9328:	b97b      	cbnz	r3, b934a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b932a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b932e:	b923      	cbnz	r3, b933a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b9330:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b9334:	2b00      	cmp	r3, #0
   b9336:	f000 80ca 	beq.w	b94ce <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b933a:	4966      	ldr	r1, [pc, #408]	; (b94d4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b933c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9340:	b004      	add	sp, #16
   b9342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9346:	f006 b91a 	b.w	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b934a:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b934e:	4a62      	ldr	r2, [pc, #392]	; (b94d8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b9350:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b9352:	2600      	movs	r6, #0
   b9354:	2301      	movs	r3, #1
   b9356:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b935a:	4669      	mov	r1, sp
   b935c:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9360:	f8ad 300c 	strh.w	r3, [sp, #12]
   b9364:	9200      	str	r2, [sp, #0]
   b9366:	f88d 6004 	strb.w	r6, [sp, #4]
   b936a:	f004 fd17 	bl	bdd9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b936e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9372:	4631      	mov	r1, r6
   b9374:	f008 fa57 	bl	c1826 <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9378:	21b5      	movs	r1, #181	; 0xb5
   b937a:	4620      	mov	r0, r4
   b937c:	f7ff ffb4 	bl	b92e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b9380:	2162      	movs	r1, #98	; 0x62
   b9382:	4620      	mov	r0, r4
   b9384:	f7ff ffb0 	bl	b92e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b9388:	7829      	ldrb	r1, [r5, #0]
   b938a:	4620      	mov	r0, r4
   b938c:	f7ff ffac 	bl	b92e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b9390:	7869      	ldrb	r1, [r5, #1]
   b9392:	4620      	mov	r0, r4
   b9394:	f7ff ffa8 	bl	b92e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b9398:	78a9      	ldrb	r1, [r5, #2]
   b939a:	4620      	mov	r0, r4
   b939c:	f7ff ffa4 	bl	b92e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b93a0:	8869      	ldrh	r1, [r5, #2]
   b93a2:	4620      	mov	r0, r4
   b93a4:	0a09      	lsrs	r1, r1, #8
   b93a6:	f7ff ff9f 	bl	b92e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b93aa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b93ae:	2b00      	cmp	r3, #0
   b93b0:	d042      	beq.n	b9438 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b93b2:	494a      	ldr	r1, [pc, #296]	; (b94dc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b93b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93b8:	f006 f8e1 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b93bc:	2210      	movs	r2, #16
   b93be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93c2:	21b5      	movs	r1, #181	; 0xb5
   b93c4:	f7fe fc8a 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b93c8:	4945      	ldr	r1, [pc, #276]	; (b94e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b93ca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93ce:	f006 f8d6 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b93d2:	2210      	movs	r2, #16
   b93d4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93d8:	2162      	movs	r1, #98	; 0x62
   b93da:	f7fe fc7f 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b93de:	4940      	ldr	r1, [pc, #256]	; (b94e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b93e0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93e4:	f006 f8cb 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b93e8:	2210      	movs	r2, #16
   b93ea:	7829      	ldrb	r1, [r5, #0]
   b93ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93f0:	f7fe fc74 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b93f4:	493a      	ldr	r1, [pc, #232]	; (b94e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b93f6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93fa:	f006 f8c0 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b93fe:	2210      	movs	r2, #16
   b9400:	7869      	ldrb	r1, [r5, #1]
   b9402:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9406:	f7fe fc69 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b940a:	4935      	ldr	r1, [pc, #212]	; (b94e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b940c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9410:	f006 f8b5 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b9414:	2210      	movs	r2, #16
   b9416:	78a9      	ldrb	r1, [r5, #2]
   b9418:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b941c:	f006 f8cb 	bl	bf5b6 <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b9420:	492f      	ldr	r1, [pc, #188]	; (b94e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9422:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9426:	f006 f8aa 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b942a:	8869      	ldrh	r1, [r5, #2]
   b942c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9430:	2210      	movs	r2, #16
   b9432:	0a09      	lsrs	r1, r1, #8
   b9434:	f006 f8bf 	bl	bf5b6 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b9438:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b94e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b943c:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b943e:	886a      	ldrh	r2, [r5, #2]
   b9440:	b2b3      	uxth	r3, r6
   b9442:	429a      	cmp	r2, r3
   b9444:	d916      	bls.n	b9474 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b9446:	461f      	mov	r7, r3
   b9448:	68ab      	ldr	r3, [r5, #8]
   b944a:	4620      	mov	r0, r4
   b944c:	5dd9      	ldrb	r1, [r3, r7]
   b944e:	f7ff ff4b 	bl	b92e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b9452:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9456:	b15b      	cbz	r3, b9470 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b9458:	4641      	mov	r1, r8
   b945a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b945e:	f006 f88e 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b9462:	68ab      	ldr	r3, [r5, #8]
   b9464:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9468:	5dd9      	ldrb	r1, [r3, r7]
   b946a:	2210      	movs	r2, #16
   b946c:	f7fe fc36 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9470:	3601      	adds	r6, #1
   b9472:	e7e4      	b.n	b943e <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b9474:	7b29      	ldrb	r1, [r5, #12]
   b9476:	4620      	mov	r0, r4
   b9478:	f7ff ff36 	bl	b92e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b947c:	7b69      	ldrb	r1, [r5, #13]
   b947e:	4620      	mov	r0, r4
   b9480:	f7ff ff32 	bl	b92e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b9484:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9488:	2101      	movs	r1, #1
   b948a:	f008 f9cc 	bl	c1826 <digitalWrite>
  _spiPort->endTransaction();
   b948e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b9492:	f004 fc6a 	bl	bdd6a <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b9496:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b949a:	b1c3      	cbz	r3, b94ce <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b949c:	4910      	ldr	r1, [pc, #64]	; (b94e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b949e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b94a2:	f006 f86c 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b94a6:	7b29      	ldrb	r1, [r5, #12]
   b94a8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b94ac:	2210      	movs	r2, #16
   b94ae:	f7fe fc15 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b94b2:	490b      	ldr	r1, [pc, #44]	; (b94e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b94b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b94b8:	f006 f861 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b94bc:	7b69      	ldrb	r1, [r5, #13]
   b94be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b94c2:	2210      	movs	r2, #16
}
   b94c4:	b004      	add	sp, #16
   b94c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b94ca:	f7fe bc0e 	b.w	b7cea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b94ce:	b004      	add	sp, #16
   b94d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b94d4:	000c670e 	.word	0x000c670e
   b94d8:	000c64f8 	.word	0x000c64f8
   b94dc:	000c6743 	.word	0x000c6743
   b94e0:	000c7606 	.word	0x000c7606

000b94e4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b94e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b94e6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b94ea:	4604      	mov	r4, r0
   b94ec:	460d      	mov	r5, r1
   b94ee:	4616      	mov	r6, r2
  if (_printDebug == true)
   b94f0:	2b00      	cmp	r3, #0
   b94f2:	f000 8082 	beq.w	b95fa <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b94f6:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b94fa:	4940      	ldr	r1, [pc, #256]	; (b95fc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b94fc:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b9500:	f006 f83d 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b9504:	782b      	ldrb	r3, [r5, #0]
   b9506:	2b01      	cmp	r3, #1
   b9508:	d13c      	bne.n	b9584 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b950a:	493d      	ldr	r1, [pc, #244]	; (b9600 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b950c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b9510:	f006 f835 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b9514:	493b      	ldr	r1, [pc, #236]	; (b9604 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b9516:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b951a:	f006 f830 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b951e:	882b      	ldrh	r3, [r5, #0]
   b9520:	f240 7201 	movw	r2, #1793	; 0x701
   b9524:	4293      	cmp	r3, r2
   b9526:	d145      	bne.n	b95b4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b9528:	4937      	ldr	r1, [pc, #220]	; (b9608 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b952a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b952e:	f006 f826 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b9532:	4936      	ldr	r1, [pc, #216]	; (b960c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b9534:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9538:	f006 f821 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
   b953c:	8869      	ldrh	r1, [r5, #2]
   b953e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9542:	2210      	movs	r2, #16
   b9544:	f006 f837 	bl	bf5b6 <_ZN5Print11printNumberEmh>
    if (printPayload)
   b9548:	2f01      	cmp	r7, #1
   b954a:	d101      	bne.n	b9550 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b954c:	2e00      	cmp	r6, #0
   b954e:	d049      	beq.n	b95e4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b9550:	492f      	ldr	r1, [pc, #188]	; (b9610 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b9552:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b9556:	4f2f      	ldr	r7, [pc, #188]	; (b9614 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b9558:	f006 f811 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
   b955c:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b955e:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b9560:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b9564:	b2b3      	uxth	r3, r6
   b9566:	429a      	cmp	r2, r3
   b9568:	d941      	bls.n	b95ee <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b956a:	4639      	mov	r1, r7
   b956c:	f006 f807 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b9570:	b2b3      	uxth	r3, r6
   b9572:	68a9      	ldr	r1, [r5, #8]
   b9574:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9578:	5cc9      	ldrb	r1, [r1, r3]
   b957a:	2210      	movs	r2, #16
   b957c:	f7fe fbae 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b9580:	3601      	adds	r6, #1
   b9582:	e7ec      	b.n	b955e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9584:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   b9586:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b958a:	d101      	bne.n	b9590 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   b958c:	4922      	ldr	r1, [pc, #136]	; (b9618 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   b958e:	e7bf      	b.n	b9510 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   b9590:	2b06      	cmp	r3, #6
   b9592:	d101      	bne.n	b9598 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   b9594:	4921      	ldr	r1, [pc, #132]	; (b961c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   b9596:	e7bb      	b.n	b9510 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   b9598:	2b0a      	cmp	r3, #10
   b959a:	d101      	bne.n	b95a0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   b959c:	4920      	ldr	r1, [pc, #128]	; (b9620 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   b959e:	e7b7      	b.n	b9510 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   b95a0:	4920      	ldr	r1, [pc, #128]	; (b9624 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b95a2:	f005 ffec 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   b95a6:	7829      	ldrb	r1, [r5, #0]
   b95a8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b95ac:	2210      	movs	r2, #16
   b95ae:	f7fe fb95 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b95b2:	e7af      	b.n	b9514 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b95b4:	f640 0206 	movw	r2, #2054	; 0x806
   b95b8:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   b95ba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b95be:	d101      	bne.n	b95c4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   b95c0:	4919      	ldr	r1, [pc, #100]	; (b9628 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   b95c2:	e7b4      	b.n	b952e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   b95c4:	f640 1206 	movw	r2, #2310	; 0x906
   b95c8:	4293      	cmp	r3, r2
   b95ca:	d101      	bne.n	b95d0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   b95cc:	4917      	ldr	r1, [pc, #92]	; (b962c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   b95ce:	e7ae      	b.n	b952e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   b95d0:	4914      	ldr	r1, [pc, #80]	; (b9624 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b95d2:	f005 ffd4 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   b95d6:	7869      	ldrb	r1, [r5, #1]
   b95d8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b95dc:	2210      	movs	r2, #16
   b95de:	f7fe fb7d 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b95e2:	e7a6      	b.n	b9532 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   b95e4:	4912      	ldr	r1, [pc, #72]	; (b9630 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   b95e6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b95ea:	f005 ffc8 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   b95ee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b95f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   b95f6:	f005 bfc6 	b.w	bf586 <_ZN5Print7printlnEv>
}
   b95fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b95fc:	000c6754 	.word	0x000c6754
   b9600:	000c6759 	.word	0x000c6759
   b9604:	000c6769 	.word	0x000c6769
   b9608:	000c676e 	.word	0x000c676e
   b960c:	000c677c 	.word	0x000c677c
   b9610:	000c6785 	.word	0x000c6785
   b9614:	000c7606 	.word	0x000c7606
   b9618:	000c675d 	.word	0x000c675d
   b961c:	000c6761 	.word	0x000c6761
   b9620:	000c6765 	.word	0x000c6765
   b9624:	000c69da 	.word	0x000c69da
   b9628:	000c6772 	.word	0x000c6772
   b962c:	000c6777 	.word	0x000c6777
   b9630:	000c678f 	.word	0x000c678f

000b9634 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   b9634:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9636:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   b963a:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b963c:	b955      	cbnz	r5, b9654 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   b963e:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9642:	b90b      	cbnz	r3, b9648 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   b9644:	2000      	movs	r0, #0
}
   b9646:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   b9648:	491a      	ldr	r1, [pc, #104]	; (b96b4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b964a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b964e:	f005 ffb0 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b9652:	e7f7      	b.n	b9644 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   b9654:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   b9658:	b12b      	cbz	r3, b9666 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   b965a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b965e:	2b00      	cmp	r3, #0
   b9660:	d0f0      	beq.n	b9644 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   b9662:	4915      	ldr	r1, [pc, #84]	; (b96b8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   b9664:	e7f1      	b.n	b964a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   b9666:	4628      	mov	r0, r5
   b9668:	f7fa fd17 	bl	b409a <_Znaj>
   b966c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9670:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   b9674:	b930      	cbnz	r0, b9684 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9676:	b91b      	cbnz	r3, b9680 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   b9678:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b967c:	2b00      	cmp	r3, #0
   b967e:	d0e1      	beq.n	b9644 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9680:	490e      	ldr	r1, [pc, #56]	; (b96bc <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   b9682:	e7e2      	b.n	b964a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   b9684:	b17b      	cbz	r3, b96a6 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   b9686:	490e      	ldr	r1, [pc, #56]	; (b96c0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   b9688:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b968c:	f005 ff77 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   b9690:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b9694:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   b9698:	220a      	movs	r2, #10
   b969a:	4628      	mov	r0, r5
   b969c:	f005 ff8b 	bl	bf5b6 <_ZN5Print11printNumberEmh>
        n += println();
   b96a0:	4628      	mov	r0, r5
   b96a2:	f005 ff70 	bl	bf586 <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   b96a6:	2300      	movs	r3, #0
   b96a8:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   b96ac:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   b96b0:	2001      	movs	r0, #1
   b96b2:	e7c8      	b.n	b9646 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   b96b4:	000c67a1 	.word	0x000c67a1
   b96b8:	000c67f2 	.word	0x000c67f2
   b96bc:	000c6835 	.word	0x000c6835
   b96c0:	000c6859 	.word	0x000c6859

000b96c4 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   b96c4:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b96c8:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   b96cc:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b96ce:	bf3b      	ittet	cc
   b96d0:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   b96d4:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   b96d6:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b96d8:	1a80      	subcc	r0, r0, r2
   b96da:	b280      	uxth	r0, r0
}
   b96dc:	4770      	bx	lr

000b96de <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   b96de:	b508      	push	{r3, lr}
   b96e0:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   b96e2:	f7ff ffef 	bl	b96c4 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   b96e6:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   b96ea:	1a18      	subs	r0, r3, r0
}
   b96ec:	b280      	uxth	r0, r0
   b96ee:	bd08      	pop	{r3, pc}

000b96f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   b96f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   b96f4:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b96f8:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   b96fc:	1aed      	subs	r5, r5, r3
   b96fe:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   b9700:	4295      	cmp	r5, r2
   b9702:	bf28      	it	cs
   b9704:	4615      	movcs	r5, r2
{
   b9706:	4616      	mov	r6, r2
   b9708:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b970a:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b970e:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9710:	462a      	mov	r2, r5
   b9712:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b9714:	b2bf      	uxth	r7, r7
{
   b9716:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9718:	f00a fb32 	bl	c3d80 <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   b971c:	b19f      	cbz	r7, b9746 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   b971e:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   b9722:	463a      	mov	r2, r7
   b9724:	eb08 0105 	add.w	r1, r8, r5
   b9728:	f00a fb2a 	bl	c3d80 <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   b972c:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   b9730:	4620      	mov	r0, r4
   b9732:	f7ff ffc7 	bl	b96c4 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   b9736:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   b973a:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   b973c:	bf38      	it	cc
   b973e:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   b9742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   b9746:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   b974a:	4416      	add	r6, r2
   b974c:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   b9750:	e7ee      	b.n	b9730 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000b9754 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   b9754:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9756:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   b975a:	4604      	mov	r4, r0
   b975c:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b975e:	b113      	cbz	r3, b9766 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   b9760:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   b9764:	b953      	cbnz	r3, b977c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   b9766:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   b976a:	b128      	cbz	r0, b9778 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   b976c:	4924      	ldr	r1, [pc, #144]	; (b9800 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b976e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9772:	f005 ff1e 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   b9776:	2000      	movs	r0, #0
}
   b9778:	b003      	add	sp, #12
   b977a:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   b977c:	f7ff ffaf 	bl	b96de <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   b9780:	886b      	ldrh	r3, [r5, #2]
   b9782:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   b9784:	b29b      	uxth	r3, r3
   b9786:	4283      	cmp	r3, r0
   b9788:	d908      	bls.n	b979c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b978a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b978e:	b91b      	cbnz	r3, b9798 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   b9790:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b9794:	2800      	cmp	r0, #0
   b9796:	d0ef      	beq.n	b9778 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9798:	491a      	ldr	r1, [pc, #104]	; (b9804 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   b979a:	e7e8      	b.n	b976e <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b979c:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   b97a0:	2202      	movs	r2, #2
   b97a2:	4669      	mov	r1, sp
   b97a4:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b97a6:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   b97aa:	f7ff ffa1 	bl	b96f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   b97ae:	2201      	movs	r2, #1
   b97b0:	4629      	mov	r1, r5
   b97b2:	4620      	mov	r0, r4
   b97b4:	f7ff ff9c 	bl	b96f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   b97b8:	2201      	movs	r2, #1
   b97ba:	18a9      	adds	r1, r5, r2
   b97bc:	4620      	mov	r0, r4
   b97be:	f7ff ff97 	bl	b96f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   b97c2:	886b      	ldrh	r3, [r5, #2]
   b97c4:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   b97c8:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   b97ca:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   b97cc:	a901      	add	r1, sp, #4
   b97ce:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   b97d0:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   b97d4:	f7ff ff8c 	bl	b96f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   b97d8:	886a      	ldrh	r2, [r5, #2]
   b97da:	68a9      	ldr	r1, [r5, #8]
   b97dc:	4620      	mov	r0, r4
   b97de:	f7ff ff87 	bl	b96f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   b97e2:	2201      	movs	r2, #1
   b97e4:	f105 010c 	add.w	r1, r5, #12
   b97e8:	4620      	mov	r0, r4
   b97ea:	f7ff ff81 	bl	b96f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   b97ee:	4620      	mov	r0, r4
   b97f0:	2201      	movs	r2, #1
   b97f2:	f105 010d 	add.w	r1, r5, #13
   b97f6:	f7ff ff7b 	bl	b96f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   b97fa:	2001      	movs	r0, #1
   b97fc:	e7bc      	b.n	b9778 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   b97fe:	bf00      	nop
   b9800:	000c687f 	.word	0x000c687f
   b9804:	000c68a7 	.word	0x000c68a7

000b9808 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   b9808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   b980c:	780e      	ldrb	r6, [r1, #0]
   b980e:	2e0d      	cmp	r6, #13
{
   b9810:	4604      	mov	r4, r0
   b9812:	460d      	mov	r5, r1
  switch (msg->cls)
   b9814:	f001 8228 	beq.w	bac68 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   b9818:	d809      	bhi.n	b982e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   b981a:	2e02      	cmp	r6, #2
   b981c:	f000 879a 	beq.w	ba754 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   b9820:	2e06      	cmp	r6, #6
   b9822:	f001 81cc 	beq.w	babbe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   b9826:	2e01      	cmp	r6, #1
   b9828:	d04f      	beq.n	b98ca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   b982a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   b982e:	2e13      	cmp	r6, #19
   b9830:	f001 83eb 	beq.w	bb00a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   b9834:	2e28      	cmp	r6, #40	; 0x28
   b9836:	f001 84ca 	beq.w	bb1ce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   b983a:	2e10      	cmp	r6, #16
   b983c:	d1f5      	bne.n	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   b983e:	680b      	ldr	r3, [r1, #0]
   b9840:	4a8e      	ldr	r2, [pc, #568]	; (b9a7c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   b9842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9846:	4293      	cmp	r3, r2
   b9848:	f041 826a 	bne.w	bad20 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   b984c:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   b984e:	2e00      	cmp	r6, #0
   b9850:	d0eb      	beq.n	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   b9852:	68a8      	ldr	r0, [r5, #8]
   b9854:	2100      	movs	r1, #0
   b9856:	f7fe fa21 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b985a:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   b985c:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b985e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9860:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b9862:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9864:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9866:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9868:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b986a:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b986c:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b986e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9870:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b9872:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   b9874:	68a8      	ldr	r0, [r5, #8]
   b9876:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   b9878:	2108      	movs	r1, #8
   b987a:	f7fe fa0f 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b987e:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9880:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9882:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9884:	210c      	movs	r1, #12
   b9886:	f7fe fa16 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b988a:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b988c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b988e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9890:	210e      	movs	r1, #14
   b9892:	f7fe fa10 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b9896:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9898:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b989a:	f04f 32ff 	mov.w	r2, #4294967295
   b989e:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b98a0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b98a2:	6a1a      	ldr	r2, [r3, #32]
   b98a4:	b17a      	cbz	r2, b98c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b98a6:	7819      	ldrb	r1, [r3, #0]
   b98a8:	0708      	lsls	r0, r1, #28
   b98aa:	d40c      	bmi.n	b98c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   b98ac:	1d19      	adds	r1, r3, #4
   b98ae:	3314      	adds	r3, #20
   b98b0:	f851 0b04 	ldr.w	r0, [r1], #4
   b98b4:	f842 0b04 	str.w	r0, [r2], #4
   b98b8:	4299      	cmp	r1, r3
   b98ba:	d1f9      	bne.n	b98b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   b98bc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   b98be:	7813      	ldrb	r3, [r2, #0]
   b98c0:	f043 0308 	orr.w	r3, r3, #8
   b98c4:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   b98c6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b98c8:	e03d      	b.n	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   b98ca:	680b      	ldr	r3, [r1, #0]
   b98cc:	4a6c      	ldr	r2, [pc, #432]	; (b9a80 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   b98ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b98d2:	4293      	cmp	r3, r2
   b98d4:	d141      	bne.n	b995a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   b98d6:	68c6      	ldr	r6, [r0, #12]
   b98d8:	2e00      	cmp	r6, #0
   b98da:	d0a6      	beq.n	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   b98dc:	68a8      	ldr	r0, [r5, #8]
   b98de:	2100      	movs	r1, #0
   b98e0:	f7fe f9dc 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b98e4:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98e6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b98e8:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98ea:	2104      	movs	r1, #4
   b98ec:	f7fe f9d6 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b98f0:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98f2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b98f4:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98f6:	2108      	movs	r1, #8
   b98f8:	f7fe f9d0 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b98fc:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98fe:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b9900:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9902:	210c      	movs	r1, #12
   b9904:	f7fe f9ca 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b9908:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   b990a:	68a8      	ldr	r0, [r5, #8]
   b990c:	68e6      	ldr	r6, [r4, #12]
   b990e:	2110      	movs	r1, #16
   b9910:	f7fe f9c4 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9914:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9916:	68e3      	ldr	r3, [r4, #12]
   b9918:	f04f 32ff 	mov.w	r2, #4294967295
   b991c:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b991e:	68e3      	ldr	r3, [r4, #12]
   b9920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9922:	b17a      	cbz	r2, b9944 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9924:	7819      	ldrb	r1, [r3, #0]
   b9926:	0709      	lsls	r1, r1, #28
   b9928:	d40c      	bmi.n	b9944 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   b992a:	1d19      	adds	r1, r3, #4
   b992c:	3318      	adds	r3, #24
   b992e:	f851 0b04 	ldr.w	r0, [r1], #4
   b9932:	f842 0b04 	str.w	r0, [r2], #4
   b9936:	4299      	cmp	r1, r3
   b9938:	d1f9      	bne.n	b992e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b993a:	68e2      	ldr	r2, [r4, #12]
   b993c:	7813      	ldrb	r3, [r2, #0]
   b993e:	f043 0308 	orr.w	r3, r3, #8
   b9942:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9944:	68e3      	ldr	r3, [r4, #12]
   b9946:	781b      	ldrb	r3, [r3, #0]
   b9948:	075f      	lsls	r7, r3, #29
   b994a:	f57f af6e 	bpl.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   b994e:	4629      	mov	r1, r5
   b9950:	4620      	mov	r0, r4
}
   b9952:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   b9956:	f7ff befd 	b.w	b9754 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   b995a:	4a4a      	ldr	r2, [pc, #296]	; (b9a84 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   b995c:	4293      	cmp	r3, r2
   b995e:	d13d      	bne.n	b99dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   b9960:	6906      	ldr	r6, [r0, #16]
   b9962:	2e00      	cmp	r6, #0
   b9964:	f43f af61 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   b9968:	68a8      	ldr	r0, [r5, #8]
   b996a:	2100      	movs	r1, #0
   b996c:	f7fe f996 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9970:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9972:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9974:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9976:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9978:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b997a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b997c:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b997e:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b9980:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9982:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9984:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9986:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9988:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b998a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b998c:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b998e:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b9990:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   b9992:	68a8      	ldr	r0, [r5, #8]
   b9994:	6926      	ldr	r6, [r4, #16]
   b9996:	2108      	movs	r1, #8
   b9998:	f7fe f980 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b999c:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   b999e:	68a8      	ldr	r0, [r5, #8]
   b99a0:	6926      	ldr	r6, [r4, #16]
   b99a2:	210c      	movs	r1, #12
   b99a4:	f7fe f97a 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b99a8:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b99aa:	6923      	ldr	r3, [r4, #16]
   b99ac:	f04f 32ff 	mov.w	r2, #4294967295
   b99b0:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b99b2:	6923      	ldr	r3, [r4, #16]
   b99b4:	6a1a      	ldr	r2, [r3, #32]
   b99b6:	b17a      	cbz	r2, b99d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b99b8:	7819      	ldrb	r1, [r3, #0]
   b99ba:	070e      	lsls	r6, r1, #28
   b99bc:	d40c      	bmi.n	b99d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   b99be:	1d19      	adds	r1, r3, #4
   b99c0:	3314      	adds	r3, #20
   b99c2:	f851 0b04 	ldr.w	r0, [r1], #4
   b99c6:	f842 0b04 	str.w	r0, [r2], #4
   b99ca:	4299      	cmp	r1, r3
   b99cc:	d1f9      	bne.n	b99c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   b99ce:	6922      	ldr	r2, [r4, #16]
   b99d0:	7813      	ldrb	r3, [r2, #0]
   b99d2:	f043 0308 	orr.w	r3, r3, #8
   b99d6:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   b99d8:	6923      	ldr	r3, [r4, #16]
   b99da:	e7b4      	b.n	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   b99dc:	4a2a      	ldr	r2, [pc, #168]	; (b9a88 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   b99de:	4293      	cmp	r3, r2
   b99e0:	d154      	bne.n	b9a8c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   b99e2:	6946      	ldr	r6, [r0, #20]
   b99e4:	2e00      	cmp	r6, #0
   b99e6:	f43f af20 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   b99ea:	68a8      	ldr	r0, [r5, #8]
   b99ec:	2100      	movs	r1, #0
   b99ee:	f7fe f955 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b99f2:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   b99f4:	68a8      	ldr	r0, [r5, #8]
   b99f6:	6966      	ldr	r6, [r4, #20]
   b99f8:	2104      	movs	r1, #4
   b99fa:	f7fe f95c 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99fe:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   b9a00:	68a8      	ldr	r0, [r5, #8]
   b9a02:	6966      	ldr	r6, [r4, #20]
   b9a04:	2106      	movs	r1, #6
   b9a06:	f7fe f956 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9a0a:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   b9a0c:	68a8      	ldr	r0, [r5, #8]
   b9a0e:	6966      	ldr	r6, [r4, #20]
   b9a10:	2108      	movs	r1, #8
   b9a12:	f7fe f950 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9a16:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   b9a18:	68a8      	ldr	r0, [r5, #8]
   b9a1a:	6966      	ldr	r6, [r4, #20]
   b9a1c:	210a      	movs	r1, #10
   b9a1e:	f7fe f94a 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9a22:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   b9a24:	68a8      	ldr	r0, [r5, #8]
   b9a26:	6966      	ldr	r6, [r4, #20]
   b9a28:	210c      	movs	r1, #12
   b9a2a:	f7fe f944 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9a2e:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   b9a30:	68a8      	ldr	r0, [r5, #8]
   b9a32:	6966      	ldr	r6, [r4, #20]
   b9a34:	210e      	movs	r1, #14
   b9a36:	f7fe f93e 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9a3a:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   b9a3c:	68a8      	ldr	r0, [r5, #8]
   b9a3e:	6966      	ldr	r6, [r4, #20]
   b9a40:	2110      	movs	r1, #16
   b9a42:	f7fe f938 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9a46:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9a48:	6963      	ldr	r3, [r4, #20]
   b9a4a:	f04f 32ff 	mov.w	r2, #4294967295
   b9a4e:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9a50:	6963      	ldr	r3, [r4, #20]
   b9a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9a54:	b17a      	cbz	r2, b9a76 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9a56:	7819      	ldrb	r1, [r3, #0]
   b9a58:	0708      	lsls	r0, r1, #28
   b9a5a:	d40c      	bmi.n	b9a76 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   b9a5c:	1d19      	adds	r1, r3, #4
   b9a5e:	3318      	adds	r3, #24
   b9a60:	f851 0b04 	ldr.w	r0, [r1], #4
   b9a64:	f842 0b04 	str.w	r0, [r2], #4
   b9a68:	4299      	cmp	r1, r3
   b9a6a:	d1f9      	bne.n	b9a60 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   b9a6c:	6962      	ldr	r2, [r4, #20]
   b9a6e:	7813      	ldrb	r3, [r2, #0]
   b9a70:	f043 0308 	orr.w	r3, r3, #8
   b9a74:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   b9a76:	6963      	ldr	r3, [r4, #20]
   b9a78:	e765      	b.n	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9a7a:	bf00      	nop
   b9a7c:	00101400 	.word	0x00101400
   b9a80:	00140100 	.word	0x00140100
   b9a84:	00100300 	.word	0x00100300
   b9a88:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   b9a8c:	4a8c      	ldr	r2, [pc, #560]	; (b9cc0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   b9a8e:	4293      	cmp	r3, r2
   b9a90:	d149      	bne.n	b9b26 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   b9a92:	69c6      	ldr	r6, [r0, #28]
   b9a94:	2e00      	cmp	r6, #0
   b9a96:	f43f aec8 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   b9a9a:	68a8      	ldr	r0, [r5, #8]
   b9a9c:	2100      	movs	r1, #0
   b9a9e:	f7fe f8fd 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9aa2:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9aa4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b9aa6:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   b9aa8:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b9aaa:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9aac:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b9aae:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ab0:	2108      	movs	r1, #8
   b9ab2:	f7fe f8f3 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b9ab6:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ab8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b9aba:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9abc:	210c      	movs	r1, #12
   b9abe:	f7fe f8ed 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b9ac2:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ac4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b9ac6:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ac8:	2110      	movs	r1, #16
   b9aca:	f7fe f8e7 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b9ace:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   b9ad0:	68a8      	ldr	r0, [r5, #8]
   b9ad2:	69e6      	ldr	r6, [r4, #28]
   b9ad4:	2114      	movs	r1, #20
   b9ad6:	f7fe f8e1 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ada:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   b9adc:	68a8      	ldr	r0, [r5, #8]
   b9ade:	69e6      	ldr	r6, [r4, #28]
   b9ae0:	2118      	movs	r1, #24
   b9ae2:	f7fe f8db 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ae6:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   b9ae8:	68a8      	ldr	r0, [r5, #8]
   b9aea:	69e6      	ldr	r6, [r4, #28]
   b9aec:	211c      	movs	r1, #28
   b9aee:	f7fe f8d5 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9af2:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9af4:	69e3      	ldr	r3, [r4, #28]
   b9af6:	f04f 32ff 	mov.w	r2, #4294967295
   b9afa:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9afc:	69e3      	ldr	r3, [r4, #28]
   b9afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   b9b00:	b17a      	cbz	r2, b9b22 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9b02:	7819      	ldrb	r1, [r3, #0]
   b9b04:	0709      	lsls	r1, r1, #28
   b9b06:	d40c      	bmi.n	b9b22 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   b9b08:	1d19      	adds	r1, r3, #4
   b9b0a:	3324      	adds	r3, #36	; 0x24
   b9b0c:	f851 0b04 	ldr.w	r0, [r1], #4
   b9b10:	f842 0b04 	str.w	r0, [r2], #4
   b9b14:	4299      	cmp	r1, r3
   b9b16:	d1f9      	bne.n	b9b0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9b18:	69e2      	ldr	r2, [r4, #28]
   b9b1a:	7813      	ldrb	r3, [r2, #0]
   b9b1c:	f043 0308 	orr.w	r3, r3, #8
   b9b20:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   b9b22:	69e3      	ldr	r3, [r4, #28]
   b9b24:	e70f      	b.n	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   b9b26:	4a67      	ldr	r2, [pc, #412]	; (b9cc4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   b9b28:	4293      	cmp	r3, r2
   b9b2a:	f040 80cd 	bne.w	b9cc8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   b9b2e:	6a06      	ldr	r6, [r0, #32]
   b9b30:	2e00      	cmp	r6, #0
   b9b32:	f43f ae7a 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   b9b36:	68a8      	ldr	r0, [r5, #8]
   b9b38:	2100      	movs	r1, #0
   b9b3a:	f7fe f8af 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b3e:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   b9b40:	68a8      	ldr	r0, [r5, #8]
   b9b42:	6a26      	ldr	r6, [r4, #32]
   b9b44:	2104      	movs	r1, #4
   b9b46:	f7fe f8b6 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9b4a:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   b9b4c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b9b4e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b50:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b9b52:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b9b54:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b9b56:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b58:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b9b5a:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   b9b5c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b9b5e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b60:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b9b62:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9b64:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b9b66:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b68:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b9b6a:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b9b6c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b9b6e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b70:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b9b72:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b9b74:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b9b76:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b78:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b9b7a:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   b9b7c:	210c      	movs	r1, #12
   b9b7e:	68a8      	ldr	r0, [r5, #8]
   b9b80:	6a26      	ldr	r6, [r4, #32]
   b9b82:	f7fe f88b 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b86:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b88:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b9b8a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b8c:	2110      	movs	r1, #16
   b9b8e:	f7fe f885 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b9b92:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b9b94:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b9b96:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b98:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b9b9a:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b9b9c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b9b9e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9ba0:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b9ba2:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b9ba4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b9ba6:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9ba8:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b9baa:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b9bac:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b9bae:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9bb0:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b9bb2:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bb4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b9bb6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bb8:	2118      	movs	r1, #24
   b9bba:	f7fe f86f 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b9bbe:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bc0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b9bc2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bc4:	211c      	movs	r1, #28
   b9bc6:	f7fe f869 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b9bca:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bcc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b9bce:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bd0:	2120      	movs	r1, #32
   b9bd2:	f7fe f863 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b9bd6:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bd8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b9bda:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bdc:	2124      	movs	r1, #36	; 0x24
   b9bde:	f7fe f85d 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b9be2:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   b9be4:	68a8      	ldr	r0, [r5, #8]
   b9be6:	6a26      	ldr	r6, [r4, #32]
   b9be8:	2128      	movs	r1, #40	; 0x28
   b9bea:	f7fe f857 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9bee:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   b9bf0:	6a26      	ldr	r6, [r4, #32]
   b9bf2:	68a8      	ldr	r0, [r5, #8]
   b9bf4:	212c      	movs	r1, #44	; 0x2c
   b9bf6:	f7fe f851 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9bfa:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bfc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b9bfe:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c00:	2130      	movs	r1, #48	; 0x30
   b9c02:	f7fe f84b 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b9c06:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c08:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b9c0a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c0c:	2134      	movs	r1, #52	; 0x34
   b9c0e:	f7fe f845 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b9c12:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c14:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b9c16:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c18:	2138      	movs	r1, #56	; 0x38
   b9c1a:	f7fe f83f 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b9c1e:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c20:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b9c22:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c24:	213c      	movs	r1, #60	; 0x3c
   b9c26:	f7fe f839 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b9c2a:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c2c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b9c2e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c30:	2140      	movs	r1, #64	; 0x40
   b9c32:	f7fe f833 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b9c36:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   b9c38:	68a8      	ldr	r0, [r5, #8]
   b9c3a:	6a26      	ldr	r6, [r4, #32]
   b9c3c:	2144      	movs	r1, #68	; 0x44
   b9c3e:	f7fe f82d 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9c42:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   b9c44:	68a8      	ldr	r0, [r5, #8]
   b9c46:	6a26      	ldr	r6, [r4, #32]
   b9c48:	2148      	movs	r1, #72	; 0x48
   b9c4a:	f7fe f827 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9c4e:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   b9c50:	68a8      	ldr	r0, [r5, #8]
   b9c52:	6a26      	ldr	r6, [r4, #32]
   b9c54:	214c      	movs	r1, #76	; 0x4c
   b9c56:	f7fe f82e 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9c5a:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   b9c5e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b9c60:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9c62:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b9c66:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b9c6a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c6c:	68a8      	ldr	r0, [r5, #8]
   b9c6e:	2154      	movs	r1, #84	; 0x54
   b9c70:	f7fe f814 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b9c74:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9c76:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b9c78:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9c7a:	2158      	movs	r1, #88	; 0x58
   b9c7c:	f7fe f81b 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b9c80:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   b9c84:	68a8      	ldr	r0, [r5, #8]
   b9c86:	6a26      	ldr	r6, [r4, #32]
   b9c88:	215a      	movs	r1, #90	; 0x5a
   b9c8a:	f7fe f814 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9c8e:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   b9c92:	6a22      	ldr	r2, [r4, #32]
   b9c94:	f04f 33ff 	mov.w	r3, #4294967295
   b9c98:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   b9c9a:	6a22      	ldr	r2, [r4, #32]
   b9c9c:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9c9e:	6a21      	ldr	r1, [r4, #32]
   b9ca0:	6f08      	ldr	r0, [r1, #112]	; 0x70
   b9ca2:	b158      	cbz	r0, b9cbc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9ca4:	780b      	ldrb	r3, [r1, #0]
   b9ca6:	071b      	lsls	r3, r3, #28
   b9ca8:	d408      	bmi.n	b9cbc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   b9caa:	225c      	movs	r2, #92	; 0x5c
   b9cac:	3104      	adds	r1, #4
   b9cae:	f00a f867 	bl	c3d80 <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9cb2:	6a22      	ldr	r2, [r4, #32]
   b9cb4:	7813      	ldrb	r3, [r2, #0]
   b9cb6:	f043 0308 	orr.w	r3, r3, #8
   b9cba:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   b9cbc:	6a23      	ldr	r3, [r4, #32]
   b9cbe:	e642      	b.n	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9cc0:	00200500 	.word	0x00200500
   b9cc4:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   b9cc8:	4a8e      	ldr	r2, [pc, #568]	; (b9f04 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   b9cca:	4293      	cmp	r3, r2
   b9ccc:	d137      	bne.n	b9d3e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   b9cce:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b9cd0:	2b00      	cmp	r3, #0
   b9cd2:	f43f adaa 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9cd6:	688a      	ldr	r2, [r1, #8]
   b9cd8:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   b9cda:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   b9cdc:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9cde:	68a8      	ldr	r0, [r5, #8]
   b9ce0:	2104      	movs	r1, #4
   b9ce2:	f7fd ffdb 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ce6:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   b9ce8:	68a8      	ldr	r0, [r5, #8]
   b9cea:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9cec:	2108      	movs	r1, #8
   b9cee:	f7fd ffd5 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cf2:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   b9cf4:	68a8      	ldr	r0, [r5, #8]
   b9cf6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9cf8:	210c      	movs	r1, #12
   b9cfa:	f7fd ffcf 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cfe:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   b9d00:	68a8      	ldr	r0, [r5, #8]
   b9d02:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9d04:	2110      	movs	r1, #16
   b9d06:	f7fd ffc9 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d0a:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9d0e:	f04f 32ff 	mov.w	r2, #4294967295
   b9d12:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9d18:	b17a      	cbz	r2, b9d3a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9d1a:	7819      	ldrb	r1, [r3, #0]
   b9d1c:	070f      	lsls	r7, r1, #28
   b9d1e:	d40c      	bmi.n	b9d3a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   b9d20:	1d19      	adds	r1, r3, #4
   b9d22:	3318      	adds	r3, #24
   b9d24:	f851 0b04 	ldr.w	r0, [r1], #4
   b9d28:	f842 0b04 	str.w	r0, [r2], #4
   b9d2c:	4299      	cmp	r1, r3
   b9d2e:	d1f9      	bne.n	b9d24 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   b9d30:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b9d32:	7813      	ldrb	r3, [r2, #0]
   b9d34:	f043 0308 	orr.w	r3, r3, #8
   b9d38:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   b9d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9d3c:	e603      	b.n	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   b9d3e:	4a72      	ldr	r2, [pc, #456]	; (b9f08 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   b9d40:	4293      	cmp	r3, r2
   b9d42:	d139      	bne.n	b9db8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   b9d44:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   b9d46:	2e00      	cmp	r6, #0
   b9d48:	f43f ad6f 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   b9d4c:	68a8      	ldr	r0, [r5, #8]
   b9d4e:	2100      	movs	r1, #0
   b9d50:	f7fd ffa4 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d54:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d56:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b9d58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d5a:	2104      	movs	r1, #4
   b9d5c:	f7fd ff9e 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b9d60:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d62:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b9d64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d66:	2108      	movs	r1, #8
   b9d68:	f7fd ff98 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b9d6c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d6e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b9d70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d72:	210c      	movs	r1, #12
   b9d74:	f7fd ff92 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b9d78:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   b9d7a:	68a8      	ldr	r0, [r5, #8]
   b9d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   b9d7e:	2110      	movs	r1, #16
   b9d80:	f7fd ff8c 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d84:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9d86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9d88:	f04f 32ff 	mov.w	r2, #4294967295
   b9d8c:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9d8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9d92:	b17a      	cbz	r2, b9db4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9d94:	7819      	ldrb	r1, [r3, #0]
   b9d96:	070e      	lsls	r6, r1, #28
   b9d98:	d40c      	bmi.n	b9db4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   b9d9a:	1d19      	adds	r1, r3, #4
   b9d9c:	3318      	adds	r3, #24
   b9d9e:	f851 0b04 	ldr.w	r0, [r1], #4
   b9da2:	f842 0b04 	str.w	r0, [r2], #4
   b9da6:	4299      	cmp	r1, r3
   b9da8:	d1f9      	bne.n	b9d9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9daa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   b9dac:	7813      	ldrb	r3, [r2, #0]
   b9dae:	f043 0308 	orr.w	r3, r3, #8
   b9db2:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9db4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9db6:	e5c6      	b.n	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   b9db8:	4a54      	ldr	r2, [pc, #336]	; (b9f0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   b9dba:	4293      	cmp	r3, r2
   b9dbc:	d151      	bne.n	b9e62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   b9dbe:	6b06      	ldr	r6, [r0, #48]	; 0x30
   b9dc0:	2e00      	cmp	r6, #0
   b9dc2:	f43f ad32 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   b9dc6:	68a8      	ldr	r0, [r5, #8]
   b9dc8:	2100      	movs	r1, #0
   b9dca:	f7fd ff67 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dce:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dd0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b9dd2:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dd4:	2104      	movs	r1, #4
   b9dd6:	f7fd ff61 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b9dda:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ddc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b9dde:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9de0:	2108      	movs	r1, #8
   b9de2:	f7fd ff5b 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b9de6:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9de8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b9dea:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dec:	210c      	movs	r1, #12
   b9dee:	f7fd ff55 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b9df2:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   b9df4:	68a8      	ldr	r0, [r5, #8]
   b9df6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9df8:	2110      	movs	r1, #16
   b9dfa:	f7fd ff4f 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dfe:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   b9e00:	68a8      	ldr	r0, [r5, #8]
   b9e02:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9e04:	2114      	movs	r1, #20
   b9e06:	f7fd ff49 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e0a:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e0c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b9e0e:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e10:	2118      	movs	r1, #24
   b9e12:	f7fd ff43 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b9e16:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   b9e18:	68a8      	ldr	r0, [r5, #8]
   b9e1a:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9e1c:	211c      	movs	r1, #28
   b9e1e:	f7fd ff3d 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e22:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   b9e24:	68a8      	ldr	r0, [r5, #8]
   b9e26:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9e28:	2120      	movs	r1, #32
   b9e2a:	f7fd ff37 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e2e:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9e30:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9e32:	f04f 32ff 	mov.w	r2, #4294967295
   b9e36:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9e38:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b9e3c:	b17a      	cbz	r2, b9e5e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9e3e:	7819      	ldrb	r1, [r3, #0]
   b9e40:	0708      	lsls	r0, r1, #28
   b9e42:	d40c      	bmi.n	b9e5e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   b9e44:	1d19      	adds	r1, r3, #4
   b9e46:	3328      	adds	r3, #40	; 0x28
   b9e48:	f851 0b04 	ldr.w	r0, [r1], #4
   b9e4c:	f842 0b04 	str.w	r0, [r2], #4
   b9e50:	4299      	cmp	r1, r3
   b9e52:	d1f9      	bne.n	b9e48 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   b9e54:	6b22      	ldr	r2, [r4, #48]	; 0x30
   b9e56:	7813      	ldrb	r3, [r2, #0]
   b9e58:	f043 0308 	orr.w	r3, r3, #8
   b9e5c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   b9e5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9e60:	e571      	b.n	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   b9e62:	4a2b      	ldr	r2, [pc, #172]	; (b9f10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   b9e64:	4293      	cmp	r3, r2
   b9e66:	d155      	bne.n	b9f14 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   b9e68:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b9e6a:	2b00      	cmp	r3, #0
   b9e6c:	f43f acdd 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9e70:	688a      	ldr	r2, [r1, #8]
   b9e72:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   b9e74:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   b9e76:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b9e78:	68a8      	ldr	r0, [r5, #8]
   b9e7a:	2104      	movs	r1, #4
   b9e7c:	f7fd ff0e 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e80:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e82:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b9e84:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e86:	2108      	movs	r1, #8
   b9e88:	f7fd ff08 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b9e8c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e8e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b9e90:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e92:	210c      	movs	r1, #12
   b9e94:	f7fd ff02 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b9e98:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e9a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b9e9c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e9e:	2110      	movs	r1, #16
   b9ea0:	f7fd fefc 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b9ea4:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b9ea6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   b9ea8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9eaa:	7d12      	ldrb	r2, [r2, #20]
   b9eac:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b9eae:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   b9eb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9eb2:	7d52      	ldrb	r2, [r2, #21]
   b9eb4:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b9eb6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   b9eb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9eba:	7d92      	ldrb	r2, [r2, #22]
   b9ebc:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b9ebe:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b9ec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   b9ec2:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b9ec4:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   b9ec6:	6b66      	ldr	r6, [r4, #52]	; 0x34
   b9ec8:	68a8      	ldr	r0, [r5, #8]
   b9eca:	2118      	movs	r1, #24
   b9ecc:	f7fd fee6 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ed0:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9ed2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9ed4:	f04f 32ff 	mov.w	r2, #4294967295
   b9ed8:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9eda:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   b9ede:	b17a      	cbz	r2, b9f00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9ee0:	7819      	ldrb	r1, [r3, #0]
   b9ee2:	0709      	lsls	r1, r1, #28
   b9ee4:	d40c      	bmi.n	b9f00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   b9ee6:	1d19      	adds	r1, r3, #4
   b9ee8:	3320      	adds	r3, #32
   b9eea:	f851 0b04 	ldr.w	r0, [r1], #4
   b9eee:	f842 0b04 	str.w	r0, [r2], #4
   b9ef2:	4299      	cmp	r1, r3
   b9ef4:	d1f9      	bne.n	b9eea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9ef6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b9ef8:	7813      	ldrb	r3, [r2, #0]
   b9efa:	f043 0308 	orr.w	r3, r3, #8
   b9efe:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9f00:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9f02:	e520      	b.n	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9f04:	00140900 	.word	0x00140900
   b9f08:	00141100 	.word	0x00141100
   b9f0c:	00241200 	.word	0x00241200
   b9f10:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   b9f14:	4a30      	ldr	r2, [pc, #192]	; (b9fd8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   b9f16:	4293      	cmp	r3, r2
   b9f18:	d160      	bne.n	b9fdc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   b9f1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   b9f1c:	2b00      	cmp	r3, #0
   b9f1e:	f43f ac84 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9f22:	688a      	ldr	r2, [r1, #8]
   b9f24:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   b9f26:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   b9f28:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b9f2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   b9f2c:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b9f2e:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   b9f30:	6b86      	ldr	r6, [r0, #56]	; 0x38
   b9f32:	68a8      	ldr	r0, [r5, #8]
   b9f34:	2104      	movs	r1, #4
   b9f36:	f7fd feb1 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f3a:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f3c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b9f3e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f40:	2108      	movs	r1, #8
   b9f42:	f7fd feab 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b9f46:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f48:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b9f4a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f4c:	210c      	movs	r1, #12
   b9f4e:	f7fd fea5 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b9f52:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f54:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b9f56:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f58:	2110      	movs	r1, #16
   b9f5a:	f7fd fe9f 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b9f5e:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f60:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b9f62:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f64:	2114      	movs	r1, #20
   b9f66:	f7fd fe99 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b9f6a:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   b9f6c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   b9f6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f70:	7e12      	ldrb	r2, [r2, #24]
   b9f72:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   b9f74:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   b9f76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f78:	7e52      	ldrb	r2, [r2, #25]
   b9f7a:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   b9f7c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   b9f7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f80:	7e92      	ldrb	r2, [r2, #26]
   b9f82:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   b9f84:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   b9f86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f88:	7ed2      	ldrb	r2, [r2, #27]
   b9f8a:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   b9f8c:	68a8      	ldr	r0, [r5, #8]
   b9f8e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b9f90:	211c      	movs	r1, #28
   b9f92:	f7fd fe83 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f96:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   b9f98:	68a8      	ldr	r0, [r5, #8]
   b9f9a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b9f9c:	2120      	movs	r1, #32
   b9f9e:	f7fd fe7d 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9fa2:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9fa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9fa6:	f04f 32ff 	mov.w	r2, #4294967295
   b9faa:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9fac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b9fb0:	b17a      	cbz	r2, b9fd2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9fb2:	7819      	ldrb	r1, [r3, #0]
   b9fb4:	070f      	lsls	r7, r1, #28
   b9fb6:	d40c      	bmi.n	b9fd2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   b9fb8:	1d19      	adds	r1, r3, #4
   b9fba:	3328      	adds	r3, #40	; 0x28
   b9fbc:	f851 0b04 	ldr.w	r0, [r1], #4
   b9fc0:	f842 0b04 	str.w	r0, [r2], #4
   b9fc4:	4299      	cmp	r1, r3
   b9fc6:	d1f9      	bne.n	b9fbc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   b9fc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   b9fca:	7813      	ldrb	r3, [r2, #0]
   b9fcc:	f043 0308 	orr.w	r3, r3, #8
   b9fd0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   b9fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9fd4:	e4b7      	b.n	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9fd6:	bf00      	nop
   b9fd8:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   b9fdc:	4aa1      	ldr	r2, [pc, #644]	; (ba264 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   b9fde:	4293      	cmp	r3, r2
   b9fe0:	f040 80f0 	bne.w	ba1c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   b9fe4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   b9fe6:	2e00      	cmp	r6, #0
   b9fe8:	f43f ac1f 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   b9fec:	68a8      	ldr	r0, [r5, #8]
   b9fee:	2100      	movs	r1, #0
   b9ff0:	f7fd fe54 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ff4:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9ff6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b9ff8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9ffa:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b9ffc:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9ffe:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   ba000:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba002:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   ba004:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   ba006:	68a8      	ldr	r0, [r5, #8]
   ba008:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba00a:	2106      	movs	r1, #6
   ba00c:	f7fd fe53 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba010:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   ba012:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   ba014:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba016:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   ba018:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba01a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   ba01c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba01e:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   ba020:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba022:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   ba024:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba026:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   ba028:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba02a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   ba02c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba02e:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   ba030:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   ba032:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba034:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba036:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba038:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   ba03a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba03c:	68a8      	ldr	r0, [r5, #8]
   ba03e:	2110      	movs	r1, #16
   ba040:	f7fd fe2c 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba044:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba046:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba048:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba04a:	2114      	movs	r1, #20
   ba04c:	f7fd fe26 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba050:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba052:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba054:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba056:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba058:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba05a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba05c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba05e:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba060:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba062:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba064:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba066:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba068:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba06a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba06c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba06e:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba070:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba072:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba074:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba076:	211c      	movs	r1, #28
   ba078:	f7fd fe10 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba07c:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba07e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba080:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba082:	2120      	movs	r1, #32
   ba084:	f7fd fe0a 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba088:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba08a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba08c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba08e:	2124      	movs	r1, #36	; 0x24
   ba090:	f7fd fe04 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba094:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba096:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba098:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba09a:	2128      	movs	r1, #40	; 0x28
   ba09c:	f7fd fdfe 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba0a0:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   ba0a2:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba0a4:	68a8      	ldr	r0, [r5, #8]
   ba0a6:	212c      	movs	r1, #44	; 0x2c
   ba0a8:	f7fd fdf8 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0ac:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   ba0ae:	68a8      	ldr	r0, [r5, #8]
   ba0b0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba0b2:	2130      	movs	r1, #48	; 0x30
   ba0b4:	f7fd fdf2 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0b8:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0ba:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba0bc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0be:	2134      	movs	r1, #52	; 0x34
   ba0c0:	f7fd fdec 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba0c4:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0c6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba0c8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0ca:	2138      	movs	r1, #56	; 0x38
   ba0cc:	f7fd fde6 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba0d0:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0d2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba0d4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0d6:	213c      	movs	r1, #60	; 0x3c
   ba0d8:	f7fd fde0 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba0dc:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0de:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba0e0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0e2:	2140      	movs	r1, #64	; 0x40
   ba0e4:	f7fd fdda 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba0e8:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   ba0ea:	68a8      	ldr	r0, [r5, #8]
   ba0ec:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba0ee:	2144      	movs	r1, #68	; 0x44
   ba0f0:	f7fd fdd4 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0f4:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0f6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba0f8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0fa:	2148      	movs	r1, #72	; 0x48
   ba0fc:	f7fd fdce 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba100:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba102:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba104:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba106:	214c      	movs	r1, #76	; 0x4c
   ba108:	f7fd fdc8 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba10c:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba10e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba110:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba112:	2150      	movs	r1, #80	; 0x50
   ba114:	f7fd fdc2 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba118:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba11a:	2154      	movs	r1, #84	; 0x54
   ba11c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba11e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba120:	f7fd fdbc 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba124:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   ba126:	68a8      	ldr	r0, [r5, #8]
   ba128:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba12a:	2158      	movs	r1, #88	; 0x58
   ba12c:	f7fd fdc3 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba130:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   ba134:	68a8      	ldr	r0, [r5, #8]
   ba136:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba138:	215a      	movs	r1, #90	; 0x5a
   ba13a:	f7fd fdbc 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba13e:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   ba142:	68a8      	ldr	r0, [r5, #8]
   ba144:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba146:	215c      	movs	r1, #92	; 0x5c
   ba148:	f7fd fdb5 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba14c:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba150:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba152:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba154:	215e      	movs	r1, #94	; 0x5e
   ba156:	f7fd fdae 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba15a:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   ba15e:	68a8      	ldr	r0, [r5, #8]
   ba160:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba162:	2160      	movs	r1, #96	; 0x60
   ba164:	f7fd fda7 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba168:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   ba16c:	68a8      	ldr	r0, [r5, #8]
   ba16e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba170:	2162      	movs	r1, #98	; 0x62
   ba172:	f7fd fda0 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba176:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   ba17a:	68a8      	ldr	r0, [r5, #8]
   ba17c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba17e:	2164      	movs	r1, #100	; 0x64
   ba180:	f7fd fd8c 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba184:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   ba186:	68a8      	ldr	r0, [r5, #8]
   ba188:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba18a:	2168      	movs	r1, #104	; 0x68
   ba18c:	f7fd fd86 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba190:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba192:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba194:	f04f 33ff 	mov.w	r3, #4294967295
   ba198:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba19a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba19c:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba19e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   ba1a0:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   ba1a4:	b158      	cbz	r0, ba1be <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba1a6:	780b      	ldrb	r3, [r1, #0]
   ba1a8:	071e      	lsls	r6, r3, #28
   ba1aa:	d408      	bmi.n	ba1be <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   ba1ac:	2274      	movs	r2, #116	; 0x74
   ba1ae:	3104      	adds	r1, #4
   ba1b0:	f009 fde6 	bl	c3d80 <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba1b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba1b6:	7813      	ldrb	r3, [r2, #0]
   ba1b8:	f043 0308 	orr.w	r3, r3, #8
   ba1bc:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   ba1be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba1c0:	f7ff bbc1 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   ba1c4:	4a28      	ldr	r2, [pc, #160]	; (ba268 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   ba1c6:	4293      	cmp	r3, r2
   ba1c8:	d150      	bne.n	ba26c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   ba1ca:	6a86      	ldr	r6, [r0, #40]	; 0x28
   ba1cc:	2e00      	cmp	r6, #0
   ba1ce:	f43f ab2c 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   ba1d2:	68a8      	ldr	r0, [r5, #8]
   ba1d4:	2100      	movs	r1, #0
   ba1d6:	f7fd fd61 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1da:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   ba1dc:	68a8      	ldr	r0, [r5, #8]
   ba1de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba1e0:	2104      	movs	r1, #4
   ba1e2:	f7fd fd5b 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1e6:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba1e8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba1ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba1ec:	2108      	movs	r1, #8
   ba1ee:	f7fd fd55 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba1f2:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   ba1f4:	68a8      	ldr	r0, [r5, #8]
   ba1f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba1f8:	210c      	movs	r1, #12
   ba1fa:	f7fd fd5c 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba1fe:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   ba200:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba202:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba204:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba206:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   ba208:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba20a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba20c:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba20e:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   ba210:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba212:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba214:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba216:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   ba218:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba21a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba21c:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba21e:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   ba220:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba222:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba224:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba226:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba22a:	68aa      	ldr	r2, [r5, #8]
   ba22c:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba22e:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba230:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba232:	f04f 32ff 	mov.w	r2, #4294967295
   ba236:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba238:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba23a:	6a1a      	ldr	r2, [r3, #32]
   ba23c:	b17a      	cbz	r2, ba25e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba23e:	7819      	ldrb	r1, [r3, #0]
   ba240:	0708      	lsls	r0, r1, #28
   ba242:	d40c      	bmi.n	ba25e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   ba244:	1d19      	adds	r1, r3, #4
   ba246:	3318      	adds	r3, #24
   ba248:	f851 0b04 	ldr.w	r0, [r1], #4
   ba24c:	f842 0b04 	str.w	r0, [r2], #4
   ba250:	4299      	cmp	r1, r3
   ba252:	d1f9      	bne.n	ba248 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   ba254:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   ba256:	7813      	ldrb	r3, [r2, #0]
   ba258:	f043 0308 	orr.w	r3, r3, #8
   ba25c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   ba25e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba260:	f7ff bb71 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba264:	00741700 	.word	0x00741700
   ba268:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   ba26c:	4a84      	ldr	r2, [pc, #528]	; (ba480 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   ba26e:	4293      	cmp	r3, r2
   ba270:	d13a      	bne.n	ba2e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   ba272:	6c06      	ldr	r6, [r0, #64]	; 0x40
   ba274:	2e00      	cmp	r6, #0
   ba276:	f43f aad8 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   ba27a:	68a8      	ldr	r0, [r5, #8]
   ba27c:	2100      	movs	r1, #0
   ba27e:	f7fd fd0d 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba282:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba284:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba286:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba288:	2104      	movs	r1, #4
   ba28a:	f7fd fd07 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba28e:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba290:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba292:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba294:	2108      	movs	r1, #8
   ba296:	f7fd fd01 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba29a:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   ba29c:	68a8      	ldr	r0, [r5, #8]
   ba29e:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba2a0:	210c      	movs	r1, #12
   ba2a2:	f7fd fcfb 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2a6:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   ba2a8:	68a8      	ldr	r0, [r5, #8]
   ba2aa:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba2ac:	2110      	movs	r1, #16
   ba2ae:	f7fd fcf5 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2b2:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba2b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba2b6:	f04f 32ff 	mov.w	r2, #4294967295
   ba2ba:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba2bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba2be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba2c0:	b17a      	cbz	r2, ba2e2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba2c2:	7819      	ldrb	r1, [r3, #0]
   ba2c4:	0709      	lsls	r1, r1, #28
   ba2c6:	d40c      	bmi.n	ba2e2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   ba2c8:	1d19      	adds	r1, r3, #4
   ba2ca:	3318      	adds	r3, #24
   ba2cc:	f851 0b04 	ldr.w	r0, [r1], #4
   ba2d0:	f842 0b04 	str.w	r0, [r2], #4
   ba2d4:	4299      	cmp	r1, r3
   ba2d6:	d1f9      	bne.n	ba2cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   ba2d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   ba2da:	7813      	ldrb	r3, [r2, #0]
   ba2dc:	f043 0308 	orr.w	r3, r3, #8
   ba2e0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   ba2e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba2e4:	f7ff bb2f 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   ba2e8:	4a66      	ldr	r2, [pc, #408]	; (ba484 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   ba2ea:	4293      	cmp	r3, r2
   ba2ec:	d138      	bne.n	ba360 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   ba2ee:	6c46      	ldr	r6, [r0, #68]	; 0x44
   ba2f0:	2e00      	cmp	r6, #0
   ba2f2:	f43f aa9a 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   ba2f6:	68a8      	ldr	r0, [r5, #8]
   ba2f8:	2100      	movs	r1, #0
   ba2fa:	f7fd fccf 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2fe:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba300:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba302:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba304:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba306:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba308:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba30a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba30c:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba30e:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba310:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   ba312:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba314:	7a52      	ldrb	r2, [r2, #9]
   ba316:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba318:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba31a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba31c:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba31e:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba320:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   ba322:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba324:	7ad2      	ldrb	r2, [r2, #11]
   ba326:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba328:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba32a:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba32c:	210c      	movs	r1, #12
   ba32e:	f7fd fcb5 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba332:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   ba334:	68a8      	ldr	r0, [r5, #8]
   ba336:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba338:	2110      	movs	r1, #16
   ba33a:	f7fd fcbc 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba33e:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   ba340:	68a8      	ldr	r0, [r5, #8]
   ba342:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba344:	2112      	movs	r1, #18
   ba346:	f7fd fcb6 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba34a:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   ba34c:	68ab      	ldr	r3, [r5, #8]
   ba34e:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   ba350:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba352:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba354:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba356:	f04f 32ff 	mov.w	r2, #4294967295
   ba35a:	61da      	str	r2, [r3, #28]
   ba35c:	f7ff ba65 	b.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   ba360:	4a49      	ldr	r2, [pc, #292]	; (ba488 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   ba362:	4293      	cmp	r3, r2
   ba364:	d162      	bne.n	ba42c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   ba366:	6c83      	ldr	r3, [r0, #72]	; 0x48
   ba368:	2b00      	cmp	r3, #0
   ba36a:	f43f aa5e 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba36e:	688a      	ldr	r2, [r1, #8]
   ba370:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   ba372:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   ba374:	6c86      	ldr	r6, [r0, #72]	; 0x48
   ba376:	68a8      	ldr	r0, [r5, #8]
   ba378:	2104      	movs	r1, #4
   ba37a:	f7fd fc8f 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba37e:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   ba380:	68a8      	ldr	r0, [r5, #8]
   ba382:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba384:	2108      	movs	r1, #8
   ba386:	f7fd fc89 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba38a:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba38c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba38e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba390:	210c      	movs	r1, #12
   ba392:	f7fd fc83 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba396:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba398:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba39a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba39c:	2110      	movs	r1, #16
   ba39e:	f7fd fc7d 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba3a2:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3a4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba3a6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3a8:	2114      	movs	r1, #20
   ba3aa:	f7fd fc77 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba3ae:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba3b0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   ba3b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3b4:	7e12      	ldrb	r2, [r2, #24]
   ba3b6:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba3b8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   ba3ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3bc:	7e52      	ldrb	r2, [r2, #25]
   ba3be:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba3c0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   ba3c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3c4:	7e92      	ldrb	r2, [r2, #26]
   ba3c6:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   ba3c8:	211c      	movs	r1, #28
   ba3ca:	68a8      	ldr	r0, [r5, #8]
   ba3cc:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba3ce:	f7fd fc65 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3d2:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   ba3d4:	68a8      	ldr	r0, [r5, #8]
   ba3d6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba3d8:	2120      	movs	r1, #32
   ba3da:	f7fd fc5f 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3de:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba3e0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   ba3e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3e4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   ba3e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba3ec:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   ba3ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3f0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   ba3f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba3f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3fa:	f04f 32ff 	mov.w	r2, #4294967295
   ba3fe:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba400:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba404:	b17a      	cbz	r2, ba426 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba406:	7819      	ldrb	r1, [r3, #0]
   ba408:	070f      	lsls	r7, r1, #28
   ba40a:	d40c      	bmi.n	ba426 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   ba40c:	1d19      	adds	r1, r3, #4
   ba40e:	332c      	adds	r3, #44	; 0x2c
   ba410:	f851 0b04 	ldr.w	r0, [r1], #4
   ba414:	f842 0b04 	str.w	r0, [r2], #4
   ba418:	4299      	cmp	r1, r3
   ba41a:	d1f9      	bne.n	ba410 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   ba41c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   ba41e:	7813      	ldrb	r3, [r2, #0]
   ba420:	f043 0308 	orr.w	r3, r3, #8
   ba424:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   ba426:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba428:	f7ff ba8d 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   ba42c:	784a      	ldrb	r2, [r1, #1]
   ba42e:	2a35      	cmp	r2, #53	; 0x35
   ba430:	d17f      	bne.n	ba532 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   ba432:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   ba434:	2e00      	cmp	r6, #0
   ba436:	f43f a9f8 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   ba43a:	68a8      	ldr	r0, [r5, #8]
   ba43c:	2100      	movs	r1, #0
   ba43e:	f7fd fc2d 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba442:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba444:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba446:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba448:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba44a:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba44c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba44e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba450:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba452:	725a      	strb	r2, [r3, #9]
   ba454:	f04f 0808 	mov.w	r8, #8
   ba458:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba45a:	f04f 0a0c 	mov.w	sl, #12
   ba45e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba460:	7a59      	ldrb	r1, [r3, #9]
   ba462:	b2ba      	uxth	r2, r7
   ba464:	4291      	cmp	r1, r2
   ba466:	d811      	bhi.n	ba48c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   ba468:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba46a:	2201      	movs	r2, #1
   ba46c:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba470:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   ba472:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   ba476:	2800      	cmp	r0, #0
   ba478:	d14d      	bne.n	ba516 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   ba47a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba47c:	f7ff ba63 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba480:	00142200 	.word	0x00142200
   ba484:	00182600 	.word	0x00182600
   ba488:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba48c:	886a      	ldrh	r2, [r5, #2]
   ba48e:	fb0a f607 	mul.w	r6, sl, r7
   ba492:	3a08      	subs	r2, #8
   ba494:	42b2      	cmp	r2, r6
   ba496:	dde7      	ble.n	ba468 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   ba498:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba49a:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba49c:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba4a0:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba4a2:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba4a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba4a6:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba4a8:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba4aa:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba4ac:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba4ae:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba4b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba4b2:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba4b4:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba4b6:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba4b8:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba4ba:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba4bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba4be:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba4c0:	4433      	add	r3, r6
   ba4c2:	78d2      	ldrb	r2, [r2, #3]
   ba4c4:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba4c6:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba4ca:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba4ce:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba4d2:	68a8      	ldr	r0, [r5, #8]
   ba4d4:	b289      	uxth	r1, r1
   ba4d6:	f7fd fbee 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba4da:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba4dc:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba4e0:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba4e4:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba4e8:	68a8      	ldr	r0, [r5, #8]
   ba4ea:	b289      	uxth	r1, r1
   ba4ec:	f7fd fbe3 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba4f0:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba4f2:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba4f6:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba4fa:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   ba4fe:	68a8      	ldr	r0, [r5, #8]
   ba500:	b289      	uxth	r1, r1
   ba502:	f7fd fbcb 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba506:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba508:	3701      	adds	r7, #1
   ba50a:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba50c:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba50e:	f108 080c 	add.w	r8, r8, #12
   ba512:	d1a4      	bne.n	ba45e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   ba514:	e7a8      	b.n	ba468 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba516:	780b      	ldrb	r3, [r1, #0]
   ba518:	071e      	lsls	r6, r3, #28
   ba51a:	d4ae      	bmi.n	ba47a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   ba51c:	f640 32fc 	movw	r2, #3068	; 0xbfc
   ba520:	3104      	adds	r1, #4
   ba522:	f009 fc2d 	bl	c3d80 <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba526:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   ba528:	7813      	ldrb	r3, [r2, #0]
   ba52a:	f043 0308 	orr.w	r3, r3, #8
   ba52e:	7013      	strb	r3, [r2, #0]
   ba530:	e7a3      	b.n	ba47a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   ba532:	2a3c      	cmp	r2, #60	; 0x3c
   ba534:	f040 80bf 	bne.w	ba6b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   ba538:	884a      	ldrh	r2, [r1, #2]
   ba53a:	2a28      	cmp	r2, #40	; 0x28
   ba53c:	d002      	beq.n	ba544 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   ba53e:	2a40      	cmp	r2, #64	; 0x40
   ba540:	f040 80b9 	bne.w	ba6b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   ba544:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba546:	2b00      	cmp	r3, #0
   ba548:	f43f a96f 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba54c:	68aa      	ldr	r2, [r5, #8]
   ba54e:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   ba550:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   ba552:	68a8      	ldr	r0, [r5, #8]
   ba554:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba556:	2102      	movs	r1, #2
   ba558:	f7fd fbad 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba55c:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   ba55e:	68a8      	ldr	r0, [r5, #8]
   ba560:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba562:	2104      	movs	r1, #4
   ba564:	f7fd fb9a 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba568:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba56a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   ba56c:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba56e:	2108      	movs	r1, #8
   ba570:	f7fd fb94 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   ba574:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba576:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   ba578:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba57a:	210c      	movs	r1, #12
   ba57c:	f7fd fb8e 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   ba580:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba582:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   ba584:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba586:	2110      	movs	r1, #16
   ba588:	f7fd fb88 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   ba58c:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   ba58e:	886b      	ldrh	r3, [r5, #2]
   ba590:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba592:	2b28      	cmp	r3, #40	; 0x28
   ba594:	d14b      	bne.n	ba62e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   ba596:	2600      	movs	r6, #0
   ba598:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   ba59a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba59c:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   ba59e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   ba5a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5a2:	7d12      	ldrb	r2, [r2, #20]
   ba5a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba5a8:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   ba5aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5ac:	7d52      	ldrb	r2, [r2, #21]
   ba5ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   ba5b2:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   ba5b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5b6:	7d92      	ldrb	r2, [r2, #22]
   ba5b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   ba5bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5be:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   ba5c2:	68a8      	ldr	r0, [r5, #8]
   ba5c4:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba5c6:	2118      	movs	r1, #24
   ba5c8:	f7fd fb68 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5cc:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   ba5ce:	68a8      	ldr	r0, [r5, #8]
   ba5d0:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba5d2:	211c      	movs	r1, #28
   ba5d4:	f7fd fb62 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5d8:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   ba5da:	68a8      	ldr	r0, [r5, #8]
   ba5dc:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba5de:	2120      	movs	r1, #32
   ba5e0:	f7fd fb5c 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5e4:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   ba5e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5e8:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   ba5ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5ec:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   ba5ee:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba5f0:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   ba5f2:	68a8      	ldr	r0, [r5, #8]
   ba5f4:	f7fd fb52 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5f8:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba5fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5fc:	f04f 32ff 	mov.w	r2, #4294967295
   ba600:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba602:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   ba606:	b17a      	cbz	r2, ba628 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba608:	7819      	ldrb	r1, [r3, #0]
   ba60a:	0708      	lsls	r0, r1, #28
   ba60c:	d40c      	bmi.n	ba628 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   ba60e:	1d19      	adds	r1, r3, #4
   ba610:	3344      	adds	r3, #68	; 0x44
   ba612:	f851 0b04 	ldr.w	r0, [r1], #4
   ba616:	f842 0b04 	str.w	r0, [r2], #4
   ba61a:	4299      	cmp	r1, r3
   ba61c:	d1f9      	bne.n	ba612 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   ba61e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   ba620:	7813      	ldrb	r3, [r2, #0]
   ba622:	f043 0308 	orr.w	r3, r3, #8
   ba626:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   ba628:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba62a:	f7ff b98c 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba62e:	68a8      	ldr	r0, [r5, #8]
   ba630:	2114      	movs	r1, #20
   ba632:	f7fd fb33 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   ba636:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba638:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   ba63a:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba63c:	2118      	movs	r1, #24
   ba63e:	f7fd fb2d 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   ba642:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   ba644:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   ba646:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba648:	f892 2020 	ldrb.w	r2, [r2, #32]
   ba64c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba650:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   ba652:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba654:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   ba658:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   ba65c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   ba65e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba660:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   ba664:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   ba668:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   ba66a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba66c:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   ba670:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   ba674:	68a8      	ldr	r0, [r5, #8]
   ba676:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba678:	2124      	movs	r1, #36	; 0x24
   ba67a:	f7fd fb0f 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba67e:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   ba680:	68a8      	ldr	r0, [r5, #8]
   ba682:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba684:	2128      	movs	r1, #40	; 0x28
   ba686:	f7fd fb09 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba68a:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   ba68c:	68a8      	ldr	r0, [r5, #8]
   ba68e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba690:	212c      	movs	r1, #44	; 0x2c
   ba692:	f7fd fb03 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba696:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   ba698:	68a8      	ldr	r0, [r5, #8]
   ba69a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba69c:	2130      	movs	r1, #48	; 0x30
   ba69e:	f7fd fafd 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6a2:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   ba6a4:	2134      	movs	r1, #52	; 0x34
   ba6a6:	68a8      	ldr	r0, [r5, #8]
   ba6a8:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba6aa:	f7fd faf7 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6ae:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   ba6b0:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba6b2:	213c      	movs	r1, #60	; 0x3c
   ba6b4:	e79d      	b.n	ba5f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   ba6b6:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   ba6ba:	d12a      	bne.n	ba712 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   ba6bc:	6d66      	ldr	r6, [r4, #84]	; 0x54
   ba6be:	2e00      	cmp	r6, #0
   ba6c0:	f43f a8b3 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   ba6c4:	68a8      	ldr	r0, [r5, #8]
   ba6c6:	2100      	movs	r1, #0
   ba6c8:	f7fd fae8 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6cc:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba6ce:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   ba6d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   ba6d2:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   ba6d4:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba6d6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   ba6d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   ba6da:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   ba6dc:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba6de:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba6e0:	f04f 32ff 	mov.w	r2, #4294967295
   ba6e4:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba6e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba6e8:	6a1a      	ldr	r2, [r3, #32]
   ba6ea:	b17a      	cbz	r2, ba70c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba6ec:	7819      	ldrb	r1, [r3, #0]
   ba6ee:	0709      	lsls	r1, r1, #28
   ba6f0:	d40c      	bmi.n	ba70c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   ba6f2:	1d19      	adds	r1, r3, #4
   ba6f4:	3314      	adds	r3, #20
   ba6f6:	f851 0b04 	ldr.w	r0, [r1], #4
   ba6fa:	f842 0b04 	str.w	r0, [r2], #4
   ba6fe:	4299      	cmp	r1, r3
   ba700:	d1f9      	bne.n	ba6f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba702:	6d62      	ldr	r2, [r4, #84]	; 0x54
   ba704:	7813      	ldrb	r3, [r2, #0]
   ba706:	f043 0308 	orr.w	r3, r3, #8
   ba70a:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   ba70c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba70e:	f7ff b91a 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   ba712:	4aa1      	ldr	r2, [pc, #644]	; (ba998 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   ba714:	4293      	cmp	r3, r2
   ba716:	f47f a888 	bne.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   ba71a:	69a6      	ldr	r6, [r4, #24]
   ba71c:	2e00      	cmp	r6, #0
   ba71e:	f43f a884 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   ba722:	68a8      	ldr	r0, [r5, #8]
   ba724:	2100      	movs	r1, #0
   ba726:	f7fd fab9 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba72a:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba72c:	69a3      	ldr	r3, [r4, #24]
   ba72e:	f04f 32ff 	mov.w	r2, #4294967295
   ba732:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba734:	69a3      	ldr	r3, [r4, #24]
   ba736:	691a      	ldr	r2, [r3, #16]
   ba738:	b14a      	cbz	r2, ba74e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba73a:	7819      	ldrb	r1, [r3, #0]
   ba73c:	070f      	lsls	r7, r1, #28
   ba73e:	d406      	bmi.n	ba74e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   ba740:	685b      	ldr	r3, [r3, #4]
   ba742:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   ba744:	69a2      	ldr	r2, [r4, #24]
   ba746:	7813      	ldrb	r3, [r2, #0]
   ba748:	f043 0308 	orr.w	r3, r3, #8
   ba74c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   ba74e:	69a3      	ldr	r3, [r4, #24]
   ba750:	f7ff b8f9 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   ba754:	784b      	ldrb	r3, [r1, #1]
   ba756:	2b72      	cmp	r3, #114	; 0x72
   ba758:	f040 80a4 	bne.w	ba8a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   ba75c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   ba75e:	2b00      	cmp	r3, #0
   ba760:	d069      	beq.n	ba836 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   ba762:	689b      	ldr	r3, [r3, #8]
   ba764:	2b00      	cmp	r3, #0
   ba766:	d066      	beq.n	ba836 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   ba768:	688a      	ldr	r2, [r1, #8]
   ba76a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   ba76c:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   ba76e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   ba770:	68a8      	ldr	r0, [r5, #8]
   ba772:	689f      	ldr	r7, [r3, #8]
   ba774:	4631      	mov	r1, r6
   ba776:	f7fd fa9e 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba77a:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   ba77c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba77e:	68a8      	ldr	r0, [r5, #8]
   ba780:	689e      	ldr	r6, [r3, #8]
   ba782:	2104      	movs	r1, #4
   ba784:	f7fd fa8a 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba788:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   ba78a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba78c:	68a8      	ldr	r0, [r5, #8]
   ba78e:	689e      	ldr	r6, [r3, #8]
   ba790:	2108      	movs	r1, #8
   ba792:	f7fd fa83 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba796:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   ba798:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba79a:	68a8      	ldr	r0, [r5, #8]
   ba79c:	689e      	ldr	r6, [r3, #8]
   ba79e:	210c      	movs	r1, #12
   ba7a0:	f7fd fa7c 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7a4:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   ba7a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba7a8:	68a8      	ldr	r0, [r5, #8]
   ba7aa:	689e      	ldr	r6, [r3, #8]
   ba7ac:	2110      	movs	r1, #16
   ba7ae:	f7fd fa82 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba7b2:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba7b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba7b6:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba7b8:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba7ba:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba7bc:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba7be:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba7c0:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba7c2:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba7c4:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba7c6:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   ba7c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba7ca:	689e      	ldr	r6, [r3, #8]
   ba7cc:	7833      	ldrb	r3, [r6, #0]
   ba7ce:	bb23      	cbnz	r3, ba81a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   ba7d0:	68a8      	ldr	r0, [r5, #8]
   ba7d2:	f44f 7103 	mov.w	r1, #524	; 0x20c
   ba7d6:	f7fd fa6e 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba7da:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   ba7dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba7de:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   ba7e0:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba7e2:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba7e6:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   ba7e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba7ea:	689b      	ldr	r3, [r3, #8]
   ba7ec:	781a      	ldrb	r2, [r3, #0]
   ba7ee:	2a00      	cmp	r2, #0
   ba7f0:	f040 865d 	bne.w	bb4ae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   ba7f4:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   ba7f6:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   ba7fa:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba7fc:	b299      	uxth	r1, r3
   ba7fe:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba800:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba802:	d914      	bls.n	ba82e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   ba804:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   ba808:	d011      	beq.n	ba82e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   ba80a:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba80c:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   ba80e:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba810:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   ba812:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba814:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba816:	3301      	adds	r3, #1
   ba818:	e7f0      	b.n	ba7fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   ba81a:	68a8      	ldr	r0, [r5, #8]
   ba81c:	2114      	movs	r1, #20
   ba81e:	f7fd fa4a 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba822:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba824:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba826:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba828:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba82a:	7d92      	ldrb	r2, [r2, #22]
   ba82c:	e7db      	b.n	ba7e6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba82e:	7813      	ldrb	r3, [r2, #0]
   ba830:	f043 0308 	orr.w	r3, r3, #8
   ba834:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   ba836:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba838:	2b00      	cmp	r3, #0
   ba83a:	f43e aff6 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba83e:	689b      	ldr	r3, [r3, #8]
   ba840:	2b00      	cmp	r3, #0
   ba842:	f43e aff2 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   ba846:	22b5      	movs	r2, #181	; 0xb5
   ba848:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   ba84a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba84c:	689b      	ldr	r3, [r3, #8]
   ba84e:	2262      	movs	r2, #98	; 0x62
   ba850:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   ba852:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba854:	689b      	ldr	r3, [r3, #8]
   ba856:	2202      	movs	r2, #2
   ba858:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   ba85a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba85c:	689b      	ldr	r3, [r3, #8]
   ba85e:	2272      	movs	r2, #114	; 0x72
   ba860:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   ba862:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba864:	886a      	ldrh	r2, [r5, #2]
   ba866:	689b      	ldr	r3, [r3, #8]
   ba868:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   ba86a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba86c:	689a      	ldr	r2, [r3, #8]
   ba86e:	886b      	ldrh	r3, [r5, #2]
   ba870:	0a1b      	lsrs	r3, r3, #8
   ba872:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   ba874:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba876:	886a      	ldrh	r2, [r5, #2]
   ba878:	6898      	ldr	r0, [r3, #8]
   ba87a:	68a9      	ldr	r1, [r5, #8]
   ba87c:	3006      	adds	r0, #6
   ba87e:	f009 fa7f 	bl	c3d80 <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   ba882:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba884:	7b2a      	ldrb	r2, [r5, #12]
   ba886:	689b      	ldr	r3, [r3, #8]
   ba888:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   ba88c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba88e:	7b6a      	ldrb	r2, [r5, #13]
   ba890:	689b      	ldr	r3, [r3, #8]
   ba892:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba896:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba898:	7813      	ldrb	r3, [r2, #0]
   ba89a:	f043 0308 	orr.w	r3, r3, #8
   ba89e:	7013      	strb	r3, [r2, #0]
   ba8a0:	f7fe bfc3 	b.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   ba8a4:	2b73      	cmp	r3, #115	; 0x73
   ba8a6:	d14d      	bne.n	ba944 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   ba8a8:	6e01      	ldr	r1, [r0, #96]	; 0x60
   ba8aa:	780b      	ldrb	r3, [r1, #0]
   ba8ac:	071e      	lsls	r6, r3, #28
   ba8ae:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   ba8b2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   ba8b6:	d543      	bpl.n	ba940 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   ba8b8:	0843      	lsrs	r3, r0, #1
   ba8ba:	f47e afb6 	bne.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   ba8be:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   ba8c0:	f44f 7688 	mov.w	r6, #272	; 0x110
   ba8c4:	688b      	ldr	r3, [r1, #8]
   ba8c6:	437e      	muls	r6, r7
   ba8c8:	22b5      	movs	r2, #181	; 0xb5
   ba8ca:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   ba8cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8ce:	689b      	ldr	r3, [r3, #8]
   ba8d0:	4433      	add	r3, r6
   ba8d2:	2262      	movs	r2, #98	; 0x62
   ba8d4:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   ba8d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8d8:	689b      	ldr	r3, [r3, #8]
   ba8da:	4433      	add	r3, r6
   ba8dc:	2202      	movs	r2, #2
   ba8de:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   ba8e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8e2:	689b      	ldr	r3, [r3, #8]
   ba8e4:	4433      	add	r3, r6
   ba8e6:	2273      	movs	r2, #115	; 0x73
   ba8e8:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   ba8ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8ec:	886a      	ldrh	r2, [r5, #2]
   ba8ee:	689b      	ldr	r3, [r3, #8]
   ba8f0:	4433      	add	r3, r6
   ba8f2:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   ba8f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8f6:	886a      	ldrh	r2, [r5, #2]
   ba8f8:	689b      	ldr	r3, [r3, #8]
   ba8fa:	4433      	add	r3, r6
   ba8fc:	0a12      	lsrs	r2, r2, #8
   ba8fe:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   ba900:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba902:	886a      	ldrh	r2, [r5, #2]
   ba904:	6898      	ldr	r0, [r3, #8]
   ba906:	68a9      	ldr	r1, [r5, #8]
   ba908:	4430      	add	r0, r6
   ba90a:	3006      	adds	r0, #6
   ba90c:	f009 fa38 	bl	c3d80 <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   ba910:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba912:	7b2a      	ldrb	r2, [r5, #12]
   ba914:	689b      	ldr	r3, [r3, #8]
   ba916:	4433      	add	r3, r6
   ba918:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   ba91c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba91e:	7b6a      	ldrb	r2, [r5, #13]
   ba920:	689b      	ldr	r3, [r3, #8]
   ba922:	441e      	add	r6, r3
   ba924:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   ba928:	6e21      	ldr	r1, [r4, #96]	; 0x60
   ba92a:	780b      	ldrb	r3, [r1, #0]
   ba92c:	2201      	movs	r2, #1
   ba92e:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   ba932:	40ba      	lsls	r2, r7
   ba934:	4302      	orrs	r2, r0
   ba936:	f362 03c4 	bfi	r3, r2, #3, #2
   ba93a:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   ba93c:	f7fe bf75 	b.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   ba940:	4617      	mov	r7, r2
   ba942:	e7bd      	b.n	ba8c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   ba944:	2b34      	cmp	r3, #52	; 0x34
   ba946:	d129      	bne.n	ba99c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   ba948:	6e43      	ldr	r3, [r0, #100]	; 0x64
   ba94a:	2b00      	cmp	r3, #0
   ba94c:	f43e af6d 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba950:	689b      	ldr	r3, [r3, #8]
   ba952:	2b00      	cmp	r3, #0
   ba954:	f43e af69 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba958:	688a      	ldr	r2, [r1, #8]
   ba95a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   ba95c:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba95e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   ba960:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba962:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba964:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba966:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   ba968:	6e43      	ldr	r3, [r0, #100]	; 0x64
   ba96a:	68a8      	ldr	r0, [r5, #8]
   ba96c:	689e      	ldr	r6, [r3, #8]
   ba96e:	2104      	movs	r1, #4
   ba970:	f7fd f994 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba974:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   ba976:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ba978:	68a8      	ldr	r0, [r5, #8]
   ba97a:	689e      	ldr	r6, [r3, #8]
   ba97c:	2108      	movs	r1, #8
   ba97e:	f7fd f99a 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba982:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   ba984:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ba986:	68a8      	ldr	r0, [r5, #8]
   ba988:	689e      	ldr	r6, [r3, #8]
   ba98a:	210a      	movs	r1, #10
   ba98c:	f7fd f993 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba990:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba992:	6e62      	ldr	r2, [r4, #100]	; 0x64
   ba994:	e780      	b.n	ba898 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   ba996:	bf00      	nop
   ba998:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   ba99c:	2b13      	cmp	r3, #19
   ba99e:	d14a      	bne.n	baa36 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   ba9a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
   ba9a2:	2b00      	cmp	r3, #0
   ba9a4:	f43e af41 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba9a8:	688a      	ldr	r2, [r1, #8]
   ba9aa:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   ba9ac:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba9ae:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   ba9b0:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba9b2:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   ba9b4:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   ba9b6:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   ba9b8:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba9ba:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   ba9bc:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   ba9be:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   ba9c0:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba9c2:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   ba9c4:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba9c6:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   ba9c8:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba9ca:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   ba9cc:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba9ce:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   ba9d0:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba9d2:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   ba9d4:	729a      	strb	r2, [r3, #10]
   ba9d6:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba9d8:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   ba9da:	7a3a      	ldrb	r2, [r7, #8]
   ba9dc:	b2f3      	uxtb	r3, r6
   ba9de:	429a      	cmp	r2, r3
   ba9e0:	d809      	bhi.n	ba9f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   ba9e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   ba9e4:	2201      	movs	r2, #1
   ba9e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba9ea:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   ba9ec:	6d88      	ldr	r0, [r1, #88]	; 0x58
   ba9ee:	b9a8      	cbnz	r0, baa1c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   ba9f0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   ba9f2:	f7fe bfa8 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba9f6:	886b      	ldrh	r3, [r5, #2]
   ba9f8:	3b08      	subs	r3, #8
   ba9fa:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   ba9fe:	ea4f 0186 	mov.w	r1, r6, lsl #2
   baa02:	ddee      	ble.n	ba9e2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   baa04:	3108      	adds	r1, #8
   baa06:	68a8      	ldr	r0, [r5, #8]
   baa08:	b289      	uxth	r1, r1
   baa0a:	f7fd f947 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa0e:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   baa12:	3601      	adds	r6, #1
   baa14:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   baa16:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   baa18:	d1de      	bne.n	ba9d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   baa1a:	e7e2      	b.n	ba9e2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baa1c:	780b      	ldrb	r3, [r1, #0]
   baa1e:	071b      	lsls	r3, r3, #28
   baa20:	d4e6      	bmi.n	ba9f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   baa22:	2248      	movs	r2, #72	; 0x48
   baa24:	3104      	adds	r1, #4
   baa26:	f009 f9ab 	bl	c3d80 <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   baa2a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   baa2c:	7813      	ldrb	r3, [r2, #0]
   baa2e:	f043 0308 	orr.w	r3, r3, #8
   baa32:	7013      	strb	r3, [r2, #0]
   baa34:	e7dc      	b.n	ba9f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   baa36:	2b15      	cmp	r3, #21
   baa38:	f47e aef7 	bne.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   baa3c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   baa3e:	2b00      	cmp	r3, #0
   baa40:	f43e aef3 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   baa44:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   baa46:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa48:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   baa4a:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   baa4c:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   baa4e:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   baa50:	3101      	adds	r1, #1
   baa52:	2908      	cmp	r1, #8
   baa54:	d1f7      	bne.n	baa46 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   baa56:	68a8      	ldr	r0, [r5, #8]
   baa58:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   baa5a:	f7fd f92c 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa5e:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   baa60:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   baa62:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baa64:	7a92      	ldrb	r2, [r2, #10]
   baa66:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   baa68:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   baa6a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa6c:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   baa6e:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   baa70:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   baa72:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa74:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   baa76:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   baa78:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   baa7a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa7c:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   baa7e:	73da      	strb	r2, [r3, #15]
   baa80:	2610      	movs	r6, #16
   baa82:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baa84:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   baa86:	7b51      	ldrb	r1, [r2, #13]
   baa88:	b2da      	uxtb	r2, r3
   baa8a:	4291      	cmp	r1, r2
   baa8c:	d80b      	bhi.n	baaa6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   baa8e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baa90:	2201      	movs	r2, #1
   baa92:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baa96:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   baa98:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   baa9c:	2800      	cmp	r0, #0
   baa9e:	d17f      	bne.n	baba0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   baaa0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baaa2:	f7fe bf50 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baaa6:	886a      	ldrh	r2, [r5, #2]
   baaa8:	3a10      	subs	r2, #16
   baaaa:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   baaae:	ea4f 1843 	mov.w	r8, r3, lsl #5
   baab2:	ddec      	ble.n	baa8e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   baab4:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baab6:	46b4      	mov	ip, r6
   baab8:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baaba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baabc:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baabe:	4440      	add	r0, r8
   baac0:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baac2:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baac6:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   baac8:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baaca:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baacc:	4437      	add	r7, r6
   baace:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baad0:	4440      	add	r0, r8
   baad2:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baad4:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baad6:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   baad8:	2a03      	cmp	r2, #3
   baada:	d80b      	bhi.n	baaf4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baadc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baade:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baae0:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   baae4:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baae8:	4440      	add	r0, r8
   baaea:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baaec:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baaf0:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   baaf4:	3201      	adds	r2, #1
   baaf6:	2a08      	cmp	r2, #8
   baaf8:	f10c 0c01 	add.w	ip, ip, #1
   baafc:	d1dd      	bne.n	baaba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   baafe:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bab00:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bab02:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   bab04:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bab06:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   bab0a:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bab0c:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   bab0e:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bab10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab12:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bab14:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bab18:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bab1a:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bab1c:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bab1e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab20:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bab22:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bab26:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bab28:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bab2a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bab2c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab2e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bab30:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bab34:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bab36:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bab38:	3118      	adds	r1, #24
   bab3a:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   bab3e:	68a8      	ldr	r0, [r5, #8]
   bab40:	b289      	uxth	r1, r1
   bab42:	f7fd f8b8 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bab46:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bab48:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bab4a:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   bab4e:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bab50:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab52:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bab54:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab56:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bab58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   bab5c:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bab5e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab60:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bab62:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab64:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bab66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   bab6a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bab6c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab6e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bab70:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab72:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bab74:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   bab78:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bab7a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab7c:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bab7e:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab80:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bab82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bab86:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab88:	68aa      	ldr	r2, [r5, #8]
   bab8a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bab8c:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab8e:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bab90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bab94:	f106 0620 	add.w	r6, r6, #32
   bab98:	463b      	mov	r3, r7
   bab9a:	f47f af73 	bne.w	baa84 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   bab9e:	e776      	b.n	baa8e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baba0:	780b      	ldrb	r3, [r1, #0]
   baba2:	071f      	lsls	r7, r3, #28
   baba4:	f53f af7c 	bmi.w	baaa0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   baba8:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   babac:	3102      	adds	r1, #2
   babae:	f009 f8e7 	bl	c3d80 <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   babb2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   babb4:	7813      	ldrb	r3, [r2, #0]
   babb6:	f043 0308 	orr.w	r3, r3, #8
   babba:	7013      	strb	r3, [r2, #0]
   babbc:	e770      	b.n	baaa0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   babbe:	680b      	ldr	r3, [r1, #0]
   babc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   babc4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   babc8:	d12f      	bne.n	bac2a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   babca:	6f03      	ldr	r3, [r0, #112]	; 0x70
   babcc:	2b00      	cmp	r3, #0
   babce:	f43e ae2c 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   babd2:	688a      	ldr	r2, [r1, #8]
   babd4:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   babd6:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   babd8:	6f06      	ldr	r6, [r0, #112]	; 0x70
   babda:	68a8      	ldr	r0, [r5, #8]
   babdc:	2102      	movs	r1, #2
   babde:	f7fd f86a 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babe2:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   babe4:	68a8      	ldr	r0, [r5, #8]
   babe6:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babe8:	2104      	movs	r1, #4
   babea:	f7fd f857 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babee:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   babf0:	68a8      	ldr	r0, [r5, #8]
   babf2:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babf4:	2108      	movs	r1, #8
   babf6:	f7fd f851 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babfa:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   babfc:	68a8      	ldr	r0, [r5, #8]
   babfe:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bac00:	210c      	movs	r1, #12
   bac02:	f7fd f858 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac06:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   bac08:	68a8      	ldr	r0, [r5, #8]
   bac0a:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bac0c:	210e      	movs	r1, #14
   bac0e:	f7fd f852 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac12:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   bac14:	68a8      	ldr	r0, [r5, #8]
   bac16:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bac18:	2110      	movs	r1, #16
   bac1a:	f7fd f84c 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac1e:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   bac20:	6f23      	ldr	r3, [r4, #112]	; 0x70
   bac22:	2201      	movs	r2, #1
   bac24:	751a      	strb	r2, [r3, #20]
   bac26:	f7fe be00 	b.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   bac2a:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   bac2e:	f47e adfc 	bne.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   bac32:	6f46      	ldr	r6, [r0, #116]	; 0x74
   bac34:	2e00      	cmp	r6, #0
   bac36:	f43e adf8 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   bac3a:	68a8      	ldr	r0, [r5, #8]
   bac3c:	2100      	movs	r1, #0
   bac3e:	f7fd f83a 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac42:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   bac44:	68a8      	ldr	r0, [r5, #8]
   bac46:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bac48:	2102      	movs	r1, #2
   bac4a:	f7fd f834 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac4e:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   bac50:	68a8      	ldr	r0, [r5, #8]
   bac52:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bac54:	2104      	movs	r1, #4
   bac56:	f7fd f82e 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac5a:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bac5c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   bac5e:	f04f 32ff 	mov.w	r2, #4294967295
   bac62:	609a      	str	r2, [r3, #8]
   bac64:	f7fe bde1 	b.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   bac68:	680b      	ldr	r3, [r1, #0]
   bac6a:	4ab0      	ldr	r2, [pc, #704]	; (baf2c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   bac6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bac70:	4293      	cmp	r3, r2
   bac72:	f47e adda 	bne.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   bac76:	6f83      	ldr	r3, [r0, #120]	; 0x78
   bac78:	2b00      	cmp	r3, #0
   bac7a:	f43e add6 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bac7e:	688a      	ldr	r2, [r1, #8]
   bac80:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   bac82:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bac84:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bac86:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   bac88:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bac8a:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   bac8c:	6f86      	ldr	r6, [r0, #120]	; 0x78
   bac8e:	68a8      	ldr	r0, [r5, #8]
   bac90:	2102      	movs	r1, #2
   bac92:	f7fd f810 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac96:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   bac98:	68a8      	ldr	r0, [r5, #8]
   bac9a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac9c:	2104      	movs	r1, #4
   bac9e:	f7fd f80a 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baca2:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   baca4:	68a8      	ldr	r0, [r5, #8]
   baca6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   baca8:	2106      	movs	r1, #6
   bacaa:	f7fd f804 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bacae:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   bacb0:	68a8      	ldr	r0, [r5, #8]
   bacb2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bacb4:	2108      	movs	r1, #8
   bacb6:	f7fc fff1 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacba:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   bacbc:	68a8      	ldr	r0, [r5, #8]
   bacbe:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bacc0:	210c      	movs	r1, #12
   bacc2:	f7fc ffeb 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacc6:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   bacc8:	68a8      	ldr	r0, [r5, #8]
   bacca:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   baccc:	2110      	movs	r1, #16
   bacce:	f7fc ffe5 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacd2:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   bacd4:	68a8      	ldr	r0, [r5, #8]
   bacd6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bacd8:	2114      	movs	r1, #20
   bacda:	f7fc ffdf 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacde:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   bace0:	68a8      	ldr	r0, [r5, #8]
   bace2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bace4:	2118      	movs	r1, #24
   bace6:	f7fc ffd9 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacea:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bacec:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bacee:	f04f 32ff 	mov.w	r2, #4294967295
   bacf2:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bacf4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bacf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   bacf8:	b17a      	cbz	r2, bad1a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bacfa:	7819      	ldrb	r1, [r3, #0]
   bacfc:	070e      	lsls	r6, r1, #28
   bacfe:	d40c      	bmi.n	bad1a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   bad00:	1d19      	adds	r1, r3, #4
   bad02:	3320      	adds	r3, #32
   bad04:	f851 0b04 	ldr.w	r0, [r1], #4
   bad08:	f842 0b04 	str.w	r0, [r2], #4
   bad0c:	4299      	cmp	r1, r3
   bad0e:	d1f9      	bne.n	bad04 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   bad10:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   bad12:	7813      	ldrb	r3, [r2, #0]
   bad14:	f043 0308 	orr.w	r3, r3, #8
   bad18:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   bad1a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bad1c:	f7fe be13 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   bad20:	4a83      	ldr	r2, [pc, #524]	; (baf30 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   bad22:	4293      	cmp	r3, r2
   bad24:	d158      	bne.n	badd8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   bad26:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   bad2a:	2f00      	cmp	r7, #0
   bad2c:	f43e ad7d 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   bad30:	68a8      	ldr	r0, [r5, #8]
   bad32:	2100      	movs	r1, #0
   bad34:	f7fc ffb2 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad38:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   bad3a:	68a8      	ldr	r0, [r5, #8]
   bad3c:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   bad40:	2108      	movs	r1, #8
   bad42:	f7fc ffab 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad46:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad48:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bad4a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad4e:	210c      	movs	r1, #12
   bad50:	f7fc ffa4 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bad54:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad56:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bad58:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad5c:	4631      	mov	r1, r6
   bad5e:	f7fc ff9d 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bad62:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad64:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bad66:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad6a:	2114      	movs	r1, #20
   bad6c:	f7fc ff96 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bad70:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad72:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bad74:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad78:	2118      	movs	r1, #24
   bad7a:	f7fc ff8f 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bad7e:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad80:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bad82:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad86:	211c      	movs	r1, #28
   bad88:	f7fc ff88 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bad8c:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad8e:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bad90:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad94:	2120      	movs	r1, #32
   bad96:	f7fc ff81 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bad9a:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bad9c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bada0:	f04f 32ff 	mov.w	r2, #4294967295
   bada4:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bada6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   badaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   badac:	b182      	cbz	r2, badd0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   badae:	7819      	ldrb	r1, [r3, #0]
   badb0:	0709      	lsls	r1, r1, #28
   badb2:	d40d      	bmi.n	badd0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   badb4:	1d19      	adds	r1, r3, #4
   badb6:	3328      	adds	r3, #40	; 0x28
   badb8:	f851 0b04 	ldr.w	r0, [r1], #4
   badbc:	f842 0b04 	str.w	r0, [r2], #4
   badc0:	4299      	cmp	r1, r3
   badc2:	d1f9      	bne.n	badb8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   badc4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   badc8:	7813      	ldrb	r3, [r2, #0]
   badca:	f043 0308 	orr.w	r3, r3, #8
   badce:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   badd0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   badd4:	f7fe bdb7 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   badd8:	784b      	ldrb	r3, [r1, #1]
   badda:	2b02      	cmp	r3, #2
   baddc:	d158      	bne.n	bae90 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   badde:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   bade2:	2e00      	cmp	r6, #0
   bade4:	f43e ad21 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   bade8:	68a8      	ldr	r0, [r5, #8]
   badea:	2100      	movs	r1, #0
   badec:	f7fc ff56 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   badf0:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   badf2:	68a8      	ldr	r0, [r5, #8]
   badf4:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   badf8:	2104      	movs	r1, #4
   badfa:	f7fc ff5c 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   badfe:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   bae00:	68a8      	ldr	r0, [r5, #8]
   bae02:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bae06:	2106      	movs	r1, #6
   bae08:	f7fc ff55 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bae0c:	8170      	strh	r0, [r6, #10]
   bae0e:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bae10:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   bae14:	886b      	ldrh	r3, [r5, #2]
   bae16:	7a7a      	ldrb	r2, [r7, #9]
   bae18:	b2b1      	uxth	r1, r6
   bae1a:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   bae1e:	d320      	bcc.n	bae62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   bae20:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bae24:	886a      	ldrh	r2, [r5, #2]
   bae26:	7a73      	ldrb	r3, [r6, #9]
   bae28:	08db      	lsrs	r3, r3, #3
   bae2a:	3302      	adds	r3, #2
   bae2c:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   bae30:	ea4f 0183 	mov.w	r1, r3, lsl #2
   bae34:	d826      	bhi.n	bae84 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bae36:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   bae3a:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   bae3e:	b160      	cbz	r0, bae5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bae40:	780b      	ldrb	r3, [r1, #0]
   bae42:	071a      	lsls	r2, r3, #28
   bae44:	d409      	bmi.n	bae5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   bae46:	2288      	movs	r2, #136	; 0x88
   bae48:	3104      	adds	r1, #4
   bae4a:	f008 ff99 	bl	c3d80 <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   bae4e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   bae52:	7813      	ldrb	r3, [r2, #0]
   bae54:	f043 0308 	orr.w	r3, r3, #8
   bae58:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   bae5a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   bae5e:	f7fe bd72 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bae62:	3b08      	subs	r3, #8
   bae64:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bae68:	ddda      	ble.n	bae20 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bae6a:	0089      	lsls	r1, r1, #2
   bae6c:	3108      	adds	r1, #8
   bae6e:	68a8      	ldr	r0, [r5, #8]
   bae70:	b289      	uxth	r1, r1
   bae72:	f7fc ff13 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae76:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bae7a:	3601      	adds	r6, #1
   bae7c:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bae7e:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bae80:	d1c6      	bne.n	bae10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   bae82:	e7cd      	b.n	bae20 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   bae84:	68a8      	ldr	r0, [r5, #8]
   bae86:	f7fc ff09 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae8a:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   bae8e:	e7d2      	b.n	bae36 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   bae90:	2b03      	cmp	r3, #3
   bae92:	d14f      	bne.n	baf34 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   bae94:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   bae98:	2900      	cmp	r1, #0
   bae9a:	f43e acc6 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   bae9e:	886a      	ldrh	r2, [r5, #2]
   baea0:	1f13      	subs	r3, r2, #4
   baea2:	bf48      	it	mi
   baea4:	1cd3      	addmi	r3, r2, #3
   baea6:	10db      	asrs	r3, r3, #3
   baea8:	2700      	movs	r7, #0
   baeaa:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   baeae:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   baeb0:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   baeb2:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   baeb6:	3b04      	subs	r3, #4
   baeb8:	42bb      	cmp	r3, r7
   baeba:	dc08      	bgt.n	baece <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baebc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   baec0:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   baec4:	bb10      	cbnz	r0, baf0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   baec6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   baeca:	f7fe bd3c 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   baece:	fa1f f887 	uxth.w	r8, r7
   baed2:	f108 0104 	add.w	r1, r8, #4
   baed6:	68a8      	ldr	r0, [r5, #8]
   baed8:	b289      	uxth	r1, r1
   baeda:	f7fc fedf 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baede:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   baee2:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   baee6:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   baeea:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   baeee:	68a8      	ldr	r0, [r5, #8]
   baef0:	b289      	uxth	r1, r1
   baef2:	f7fc fed3 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   baef6:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   baefa:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   baefc:	3601      	adds	r6, #1
   baefe:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   baf00:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   baf04:	f107 0708 	add.w	r7, r7, #8
   baf08:	d1d2      	bne.n	baeb0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   baf0a:	e7d7      	b.n	baebc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baf0c:	780b      	ldrb	r3, [r1, #0]
   baf0e:	071b      	lsls	r3, r3, #28
   baf10:	d4d9      	bmi.n	baec6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   baf12:	f44f 720e 	mov.w	r2, #568	; 0x238
   baf16:	3108      	adds	r1, #8
   baf18:	3004      	adds	r0, #4
   baf1a:	f008 ff31 	bl	c3d80 <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   baf1e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   baf22:	7813      	ldrb	r3, [r2, #0]
   baf24:	f043 0308 	orr.w	r3, r3, #8
   baf28:	7013      	strb	r3, [r2, #0]
   baf2a:	e7cc      	b.n	baec6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   baf2c:	001c0300 	.word	0x001c0300
   baf30:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   baf34:	2b10      	cmp	r3, #16
   baf36:	f47e ac78 	bne.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   baf3a:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   baf3e:	2e00      	cmp	r6, #0
   baf40:	f43e ac73 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   baf44:	68a8      	ldr	r0, [r5, #8]
   baf46:	2100      	movs	r1, #0
   baf48:	f7fc fea8 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baf4c:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   baf4e:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   baf50:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf54:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   baf56:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   baf58:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   baf5a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf5e:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   baf60:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   baf62:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   baf64:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf68:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   baf6a:	74da      	strb	r2, [r3, #19]
   baf6c:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   baf6e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   baf72:	7cc6      	ldrb	r6, [r0, #19]
   baf74:	b28a      	uxth	r2, r1
   baf76:	4296      	cmp	r6, r2
   baf78:	d80c      	bhi.n	baf94 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baf7a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   baf7e:	f04f 32ff 	mov.w	r2, #4294967295
   baf82:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baf84:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   baf88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   baf8a:	bb62      	cbnz	r2, bafe6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   baf8c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   baf90:	f7fe bcd9 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   baf94:	886a      	ldrh	r2, [r5, #2]
   baf96:	3a10      	subs	r2, #16
   baf98:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   baf9c:	dded      	ble.n	baf7a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   baf9e:	68aa      	ldr	r2, [r5, #8]
   bafa0:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bafa2:	1d0a      	adds	r2, r1, #4
   bafa4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bafa8:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bafaa:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   bafac:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bafae:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bafb2:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bafb4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bafb8:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bafba:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   bafbc:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bafbe:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bafc2:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bafc4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bafc8:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bafca:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   bafcc:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bafce:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bafd2:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bafd4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bafd8:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bafda:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bafdc:	2907      	cmp	r1, #7
   bafde:	f103 0304 	add.w	r3, r3, #4
   bafe2:	d1c4      	bne.n	baf6e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   bafe4:	e7c9      	b.n	baf7a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bafe6:	7819      	ldrb	r1, [r3, #0]
   bafe8:	070f      	lsls	r7, r1, #28
   bafea:	d4cf      	bmi.n	baf8c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   bafec:	1d19      	adds	r1, r3, #4
   bafee:	3330      	adds	r3, #48	; 0x30
   baff0:	f851 0b04 	ldr.w	r0, [r1], #4
   baff4:	f842 0b04 	str.w	r0, [r2], #4
   baff8:	4299      	cmp	r1, r3
   baffa:	d1f9      	bne.n	baff0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   baffc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bb000:	7813      	ldrb	r3, [r2, #0]
   bb002:	f043 0308 	orr.w	r3, r3, #8
   bb006:	7013      	strb	r3, [r2, #0]
   bb008:	e7c0      	b.n	baf8c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   bb00a:	680b      	ldr	r3, [r1, #0]
   bb00c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb010:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   bb014:	d16a      	bne.n	bb0ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   bb016:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   bb01a:	2b00      	cmp	r3, #0
   bb01c:	f43e ac05 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   bb020:	7818      	ldrb	r0, [r3, #0]
   bb022:	7859      	ldrb	r1, [r3, #1]
   bb024:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bb026:	bf36      	itet	cc
   bb028:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   bb02c:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bb02e:	1a52      	subcc	r2, r2, r1
   bb030:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   bb032:	2a0e      	cmp	r2, #14
   bb034:	d84b      	bhi.n	bb0ce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   bb036:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb038:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   bb03c:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb03e:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb040:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb044:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb046:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb048:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb04a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb04e:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb050:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb054:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb056:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb058:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb05a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb05e:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb060:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb064:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb066:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb068:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb06a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb06e:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb070:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb074:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb076:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb078:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb07a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb07e:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb080:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb084:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb086:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb088:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb08a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb08e:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb090:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb094:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb096:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb098:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb09a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb09e:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb0a0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb0a4:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb0a6:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb0a8:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb0aa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb0ae:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   bb0b0:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   bb0b4:	7813      	ldrb	r3, [r2, #0]
   bb0b6:	3301      	adds	r3, #1
   bb0b8:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   bb0ba:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bb0be:	781a      	ldrb	r2, [r3, #0]
   bb0c0:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb0c2:	f47e abb2 	bne.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   bb0c6:	2200      	movs	r2, #0
   bb0c8:	701a      	strb	r2, [r3, #0]
   bb0ca:	f7fe bbae 	b.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb0ce:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb0d2:	b923      	cbnz	r3, bb0de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   bb0d4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb0d8:	2b00      	cmp	r3, #0
   bb0da:	f43e aba6 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   bb0de:	4996      	ldr	r1, [pc, #600]	; (bb338 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb0e0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   bb0e4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb0e8:	f004 ba63 	b.w	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   bb0ec:	784b      	ldrb	r3, [r1, #1]
   bb0ee:	2b80      	cmp	r3, #128	; 0x80
   bb0f0:	f47e ab9b 	bne.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb0f4:	884b      	ldrh	r3, [r1, #2]
   bb0f6:	2ba4      	cmp	r3, #164	; 0xa4
   bb0f8:	f63e ab97 	bhi.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   bb0fc:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   bb100:	2a00      	cmp	r2, #0
   bb102:	f43e ab92 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   bb106:	7810      	ldrb	r0, [r2, #0]
   bb108:	7851      	ldrb	r1, [r2, #1]
   bb10a:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb10c:	bf36      	itet	cc
   bb10e:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   bb110:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb112:	1a5b      	subcc	r3, r3, r1
   bb114:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   bb116:	2bf8      	cmp	r3, #248	; 0xf8
   bb118:	d84f      	bhi.n	bb1ba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   bb11a:	23ac      	movs	r3, #172	; 0xac
   bb11c:	fb03 2200 	mla	r2, r3, r0, r2
   bb120:	21b5      	movs	r1, #181	; 0xb5
   bb122:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   bb124:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb128:	7811      	ldrb	r1, [r2, #0]
   bb12a:	fb03 2201 	mla	r2, r3, r1, r2
   bb12e:	2162      	movs	r1, #98	; 0x62
   bb130:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   bb132:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb136:	7811      	ldrb	r1, [r2, #0]
   bb138:	fb03 2201 	mla	r2, r3, r1, r2
   bb13c:	2113      	movs	r1, #19
   bb13e:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   bb140:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb144:	7811      	ldrb	r1, [r2, #0]
   bb146:	fb03 2201 	mla	r2, r3, r1, r2
   bb14a:	2180      	movs	r1, #128	; 0x80
   bb14c:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   bb14e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb152:	7811      	ldrb	r1, [r2, #0]
   bb154:	fb03 2201 	mla	r2, r3, r1, r2
   bb158:	8869      	ldrh	r1, [r5, #2]
   bb15a:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   bb15c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb160:	7811      	ldrb	r1, [r2, #0]
   bb162:	fb03 2201 	mla	r2, r3, r1, r2
   bb166:	8869      	ldrh	r1, [r5, #2]
   bb168:	0a09      	lsrs	r1, r1, #8
   bb16a:	71d1      	strb	r1, [r2, #7]
   bb16c:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   bb16e:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb170:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   bb174:	b28e      	uxth	r6, r1
   bb176:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb178:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   bb17a:	d907      	bls.n	bb18c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   bb17c:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb17e:	fb03 2200 	mla	r2, r3, r0, r2
   bb182:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   bb184:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb186:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   bb188:	3101      	adds	r1, #1
   bb18a:	e7f0      	b.n	bb16e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   bb18c:	fb03 2200 	mla	r2, r3, r0, r2
   bb190:	7b29      	ldrb	r1, [r5, #12]
   bb192:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   bb196:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb19a:	7b69      	ldrb	r1, [r5, #13]
   bb19c:	7810      	ldrb	r0, [r2, #0]
   bb19e:	fb03 2300 	mla	r3, r3, r0, r2
   bb1a2:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   bb1a6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb1aa:	7813      	ldrb	r3, [r2, #0]
   bb1ac:	3301      	adds	r3, #1
   bb1ae:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb1b0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   bb1b4:	781a      	ldrb	r2, [r3, #0]
   bb1b6:	2afa      	cmp	r2, #250	; 0xfa
   bb1b8:	e783      	b.n	bb0c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb1ba:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb1be:	b923      	cbnz	r3, bb1ca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   bb1c0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb1c4:	2b00      	cmp	r3, #0
   bb1c6:	f43e ab30 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb1ca:	495c      	ldr	r1, [pc, #368]	; (bb33c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   bb1cc:	e788      	b.n	bb0e0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   bb1ce:	680b      	ldr	r3, [r1, #0]
   bb1d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb1d4:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   bb1d8:	f040 80b2 	bne.w	bb340 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   bb1dc:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   bb1e0:	2f00      	cmp	r7, #0
   bb1e2:	f43e ab22 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   bb1e6:	68a8      	ldr	r0, [r5, #8]
   bb1e8:	2100      	movs	r1, #0
   bb1ea:	f7fc fd57 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb1ee:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   bb1f0:	68a8      	ldr	r0, [r5, #8]
   bb1f2:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   bb1f6:	2104      	movs	r1, #4
   bb1f8:	f7fc fd5d 	bl	b7cb6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb1fc:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   bb1fe:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb200:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb204:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb206:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   bb208:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb20a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb20e:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb210:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   bb212:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb214:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb218:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb21a:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb21c:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb21e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb222:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb224:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb226:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb228:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb22c:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb22e:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb230:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb232:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb236:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb238:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb23a:	210c      	movs	r1, #12
   bb23c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb23e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb242:	f7fc fd2b 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb246:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   bb248:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb24a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb24e:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb250:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bb252:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb254:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb258:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb25a:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb25c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb25e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb262:	2114      	movs	r1, #20
   bb264:	f7fc fd1a 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb268:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb26a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb26c:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb270:	2118      	movs	r1, #24
   bb272:	f7fc fd13 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb276:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb278:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb27a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb27e:	211c      	movs	r1, #28
   bb280:	f7fc fd0c 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb284:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb286:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb288:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb28c:	2120      	movs	r1, #32
   bb28e:	f7fc fd05 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb292:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb294:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb296:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb29a:	2124      	movs	r1, #36	; 0x24
   bb29c:	f7fc fcfe 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb2a0:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb2a2:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb2a4:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb2a8:	4631      	mov	r1, r6
   bb2aa:	f7fc fcf7 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb2ae:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb2b0:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb2b2:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb2b6:	212c      	movs	r1, #44	; 0x2c
   bb2b8:	f7fc fcf0 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb2bc:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb2be:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb2c0:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb2c4:	2130      	movs	r1, #48	; 0x30
   bb2c6:	f7fc fce9 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb2ca:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   bb2cc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb2d0:	68a8      	ldr	r0, [r5, #8]
   bb2d2:	2134      	movs	r1, #52	; 0x34
   bb2d4:	f7fc fce2 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2d8:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   bb2da:	68a8      	ldr	r0, [r5, #8]
   bb2dc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb2e0:	2138      	movs	r1, #56	; 0x38
   bb2e2:	f7fc fcdb 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2e6:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   bb2e8:	68a8      	ldr	r0, [r5, #8]
   bb2ea:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb2ee:	213c      	movs	r1, #60	; 0x3c
   bb2f0:	f7fc fcd4 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2f4:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   bb2f6:	68a8      	ldr	r0, [r5, #8]
   bb2f8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb2fc:	2140      	movs	r1, #64	; 0x40
   bb2fe:	f7fc fccd 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb302:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb304:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb308:	f04f 32ff 	mov.w	r2, #4294967295
   bb30c:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb30e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   bb312:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb314:	b160      	cbz	r0, bb330 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb316:	780b      	ldrb	r3, [r1, #0]
   bb318:	071e      	lsls	r6, r3, #28
   bb31a:	d409      	bmi.n	bb330 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   bb31c:	2248      	movs	r2, #72	; 0x48
   bb31e:	3104      	adds	r1, #4
   bb320:	f008 fd2e 	bl	c3d80 <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb324:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bb328:	7813      	ldrb	r3, [r2, #0]
   bb32a:	f043 0308 	orr.w	r3, r3, #8
   bb32e:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   bb330:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb334:	f7fe bb07 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bb338:	000c68e5 	.word	0x000c68e5
   bb33c:	000c6922 	.word	0x000c6922
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   bb340:	4a5d      	ldr	r2, [pc, #372]	; (bb4b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   bb342:	4293      	cmp	r3, r2
   bb344:	d156      	bne.n	bb3f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   bb346:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   bb34a:	2e00      	cmp	r6, #0
   bb34c:	f43e aa6d 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   bb350:	68a8      	ldr	r0, [r5, #8]
   bb352:	2100      	movs	r1, #0
   bb354:	f7fc fca2 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb358:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb35a:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb35c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bb360:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb362:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb364:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb366:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb36a:	2108      	movs	r1, #8
   bb36c:	f7fc fc96 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb370:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb372:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb374:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb378:	210c      	movs	r1, #12
   bb37a:	f7fc fc8f 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb37e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb380:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb382:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb386:	2110      	movs	r1, #16
   bb388:	f7fc fc88 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb38c:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bb38e:	68a8      	ldr	r0, [r5, #8]
   bb390:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb394:	2114      	movs	r1, #20
   bb396:	f7fc fc81 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb39a:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bb39c:	68a8      	ldr	r0, [r5, #8]
   bb39e:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb3a2:	2118      	movs	r1, #24
   bb3a4:	f7fc fc7a 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3a8:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bb3aa:	68a8      	ldr	r0, [r5, #8]
   bb3ac:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb3b0:	211c      	movs	r1, #28
   bb3b2:	f7fc fc73 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3b6:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb3b8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb3bc:	f04f 32ff 	mov.w	r2, #4294967295
   bb3c0:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb3c2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb3c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bb3c8:	b182      	cbz	r2, bb3ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb3ca:	7819      	ldrb	r1, [r3, #0]
   bb3cc:	0708      	lsls	r0, r1, #28
   bb3ce:	d40d      	bmi.n	bb3ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bb3d0:	1d19      	adds	r1, r3, #4
   bb3d2:	3324      	adds	r3, #36	; 0x24
   bb3d4:	f851 0b04 	ldr.w	r0, [r1], #4
   bb3d8:	f842 0b04 	str.w	r0, [r2], #4
   bb3dc:	4299      	cmp	r1, r3
   bb3de:	d1f9      	bne.n	bb3d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb3e0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bb3e4:	7813      	ldrb	r3, [r2, #0]
   bb3e6:	f043 0308 	orr.w	r3, r3, #8
   bb3ea:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bb3ec:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb3f0:	f7fe baa9 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bb3f4:	4a31      	ldr	r2, [pc, #196]	; (bb4bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bb3f6:	4293      	cmp	r3, r2
   bb3f8:	f47e aa17 	bne.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   bb3fc:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   bb400:	2e00      	cmp	r6, #0
   bb402:	f43e aa12 	beq.w	b982a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   bb406:	68a8      	ldr	r0, [r5, #8]
   bb408:	2100      	movs	r1, #0
   bb40a:	f7fc fc47 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb40e:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   bb410:	68a8      	ldr	r0, [r5, #8]
   bb412:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   bb416:	2108      	movs	r1, #8
   bb418:	f7fc fc40 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb41c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb41e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb420:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb424:	210c      	movs	r1, #12
   bb426:	f7fc fc39 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb42a:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb42c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb42e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb432:	2110      	movs	r1, #16
   bb434:	f7fc fc32 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb438:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb43a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb43c:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb440:	2114      	movs	r1, #20
   bb442:	f7fc fc2b 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb446:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb448:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb44a:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb44e:	2118      	movs	r1, #24
   bb450:	f7fc fc24 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb454:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb456:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb458:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb45c:	211c      	movs	r1, #28
   bb45e:	f7fc fc1d 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb462:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb464:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb466:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb46a:	2120      	movs	r1, #32
   bb46c:	f7fc fc16 	bl	b7c9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb470:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb472:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb476:	f04f 32ff 	mov.w	r2, #4294967295
   bb47a:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb47c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb482:	b182      	cbz	r2, bb4a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb484:	7819      	ldrb	r1, [r3, #0]
   bb486:	0709      	lsls	r1, r1, #28
   bb488:	d40d      	bmi.n	bb4a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bb48a:	1d19      	adds	r1, r3, #4
   bb48c:	3328      	adds	r3, #40	; 0x28
   bb48e:	f851 0b04 	ldr.w	r0, [r1], #4
   bb492:	f842 0b04 	str.w	r0, [r2], #4
   bb496:	4299      	cmp	r1, r3
   bb498:	d1f9      	bne.n	bb48e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb49a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bb49e:	7813      	ldrb	r3, [r2, #0]
   bb4a0:	f043 0308 	orr.w	r3, r3, #8
   bb4a4:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bb4a6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb4aa:	f7fe ba4c 	b.w	b9946 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bb4ae:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bb4b0:	2018      	movs	r0, #24
   bb4b2:	f7ff b9a2 	b.w	ba7fa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bb4b6:	bf00      	nop
   bb4b8:	00200100 	.word	0x00200100
   bb4bc:	00240200 	.word	0x00240200

000bb4c0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bb4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb4c4:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb4c6:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bb4ca:	f89d a020 	ldrb.w	sl, [sp, #32]
   bb4ce:	4604      	mov	r4, r0
   bb4d0:	460f      	mov	r7, r1
   bb4d2:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb4d4:	b993      	cbnz	r3, bb4fc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bb4d6:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bb4da:	886b      	ldrh	r3, [r5, #2]
   bb4dc:	88aa      	ldrh	r2, [r5, #4]
   bb4de:	3303      	adds	r3, #3
   bb4e0:	4293      	cmp	r3, r2
   bb4e2:	db03      	blt.n	bb4ec <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bb4e4:	4639      	mov	r1, r7
   bb4e6:	4620      	mov	r0, r4
   bb4e8:	f7fd fdf0 	bl	b90cc <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bb4ec:	88ae      	ldrh	r6, [r5, #4]
   bb4ee:	bb7e      	cbnz	r6, bb550 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bb4f0:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bb4f2:	88ab      	ldrh	r3, [r5, #4]
   bb4f4:	3301      	adds	r3, #1
   bb4f6:	80ab      	strh	r3, [r5, #4]
}
   bb4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bb4fc:	2b03      	cmp	r3, #3
   bb4fe:	d124      	bne.n	bb54a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   bb500:	7852      	ldrb	r2, [r2, #1]
   bb502:	7829      	ldrb	r1, [r5, #0]
   bb504:	f7fc fdda 	bl	b80bc <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bb508:	4680      	mov	r8, r0
   bb50a:	2800      	cmp	r0, #0
   bb50c:	d1e5      	bne.n	bb4da <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb50e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb512:	b91b      	cbnz	r3, bb51c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bb514:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb518:	2b00      	cmp	r3, #0
   bb51a:	d0de      	beq.n	bb4da <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bb51c:	49b7      	ldr	r1, [pc, #732]	; (bb7fc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bb51e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb522:	f004 f82c 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bb526:	7829      	ldrb	r1, [r5, #0]
   bb528:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb52c:	220a      	movs	r2, #10
   bb52e:	f7fc fbd5 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bb532:	49b3      	ldr	r1, [pc, #716]	; (bb800 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bb534:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb538:	f004 f821 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bb53c:	7869      	ldrb	r1, [r5, #1]
   bb53e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb542:	220a      	movs	r2, #10
   bb544:	f7fc fbd1 	bl	b7cea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb548:	e7c7      	b.n	bb4da <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bb54a:	f04f 0802 	mov.w	r8, #2
   bb54e:	e7c4      	b.n	bb4da <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bb550:	2e01      	cmp	r6, #1
   bb552:	d101      	bne.n	bb558 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bb554:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb556:	e7cc      	b.n	bb4f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bb558:	2e02      	cmp	r6, #2
   bb55a:	d101      	bne.n	bb560 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bb55c:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb55e:	e7c8      	b.n	bb4f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bb560:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bb562:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bb564:	d103      	bne.n	bb56e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bb566:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bb56a:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb56c:	e7c1      	b.n	bb4f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bb56e:	1d0b      	adds	r3, r1, #4
   bb570:	429e      	cmp	r6, r3
   bb572:	d136      	bne.n	bb5e2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bb574:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb576:	88aa      	ldrh	r2, [r5, #4]
   bb578:	f108 0306 	add.w	r3, r8, #6
   bb57c:	429a      	cmp	r2, r3
   bb57e:	d1b8      	bne.n	bb4f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bb580:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bb584:	2b00      	cmp	r3, #0
   bb586:	d1b4      	bne.n	bb4f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bb588:	2200      	movs	r2, #0
   bb58a:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb58c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bb590:	b91a      	cbnz	r2, bb59a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bb592:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bb596:	2a00      	cmp	r2, #0
   bb598:	d0ab      	beq.n	bb4f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bb59a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bb59e:	2b00      	cmp	r3, #0
   bb5a0:	f000 8170 	beq.w	bb884 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bb5a4:	4997      	ldr	r1, [pc, #604]	; (bb804 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bb5a6:	f003 ffea 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bb5aa:	4997      	ldr	r1, [pc, #604]	; (bb808 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bb5ac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5b0:	f003 ffe5 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bb5b4:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bb5b8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5bc:	220a      	movs	r2, #10
   bb5be:	f003 fffa 	bl	bf5b6 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bb5c2:	4992      	ldr	r1, [pc, #584]	; (bb80c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bb5c4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5c8:	f003 ffd9 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bb5cc:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bb5d0:	220a      	movs	r2, #10
   bb5d2:	4641      	mov	r1, r8
   bb5d4:	4620      	mov	r0, r4
   bb5d6:	f003 ffee 	bl	bf5b6 <_ZN5Print11printNumberEmh>
        n += println();
   bb5da:	4620      	mov	r0, r4
   bb5dc:	f003 ffd3 	bl	bf586 <_ZN5Print7printlnEv>
        return n;
   bb5e0:	e787      	b.n	bb4f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bb5e2:	3105      	adds	r1, #5
   bb5e4:	428e      	cmp	r6, r1
   bb5e6:	f040 812f 	bne.w	bb848 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bb5ea:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bb5ec:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bb5ee:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bb5f0:	89a9      	ldrh	r1, [r5, #12]
   bb5f2:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bb5f6:	4291      	cmp	r1, r2
   bb5f8:	f040 80ae 	bne.w	bb758 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bb5fc:	2301      	movs	r3, #1
   bb5fe:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bb600:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bb604:	7829      	ldrb	r1, [r5, #0]
   bb606:	4549      	cmp	r1, r9
   bb608:	d155      	bne.n	bb6b6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   bb60a:	786b      	ldrb	r3, [r5, #1]
   bb60c:	4553      	cmp	r3, sl
   bb60e:	d152      	bne.n	bb6b6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   bb610:	2301      	movs	r3, #1
   bb612:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   bb614:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb618:	b3b3      	cbz	r3, bb688 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   bb61a:	497d      	ldr	r1, [pc, #500]	; (bb810 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   bb61c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb620:	f003 ffad 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bb624:	220a      	movs	r2, #10
   bb626:	8869      	ldrh	r1, [r5, #2]
   bb628:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb62c:	f003 ffc3 	bl	bf5b6 <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   bb630:	4978      	ldr	r1, [pc, #480]	; (bb814 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   bb632:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb636:	f003 ffa2 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   bb63a:	2200      	movs	r2, #0
   bb63c:	4629      	mov	r1, r5
   bb63e:	4620      	mov	r0, r4
   bb640:	f7fd ff50 	bl	b94e4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb644:	7bab      	ldrb	r3, [r5, #14]
   bb646:	2b01      	cmp	r3, #1
   bb648:	d104      	bne.n	bb654 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   bb64a:	4973      	ldr	r1, [pc, #460]	; (bb818 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   bb64c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb650:	f003 ffaf 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb654:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   bb658:	2b01      	cmp	r3, #1
   bb65a:	d104      	bne.n	bb666 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bb65c:	496f      	ldr	r1, [pc, #444]	; (bb81c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bb65e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb662:	f003 ffa6 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb666:	7beb      	ldrb	r3, [r5, #15]
   bb668:	2b01      	cmp	r3, #1
   bb66a:	d104      	bne.n	bb676 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bb66c:	496c      	ldr	r1, [pc, #432]	; (bb820 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bb66e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb672:	f003 ff9e 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb676:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bb67a:	2b01      	cmp	r3, #1
   bb67c:	d104      	bne.n	bb688 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bb67e:	4969      	ldr	r1, [pc, #420]	; (bb824 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bb680:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb684:	f003 ff95 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bb688:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bb68c:	b91b      	cbnz	r3, bb696 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bb68e:	4629      	mov	r1, r5
   bb690:	4620      	mov	r0, r4
   bb692:	f7fe f8b9 	bl	b9808 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bb696:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bb69a:	2b03      	cmp	r3, #3
   bb69c:	f47f af6b 	bne.w	bb576 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bb6a0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bb6a4:	b108      	cbz	r0, bb6aa <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bb6a6:	f7f8 fcfa 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bb6aa:	2300      	movs	r3, #0
   bb6ac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bb6b0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb6b4:	e75f      	b.n	bb576 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb6b6:	882b      	ldrh	r3, [r5, #0]
   bb6b8:	f240 1205 	movw	r2, #261	; 0x105
   bb6bc:	4293      	cmp	r3, r2
   bb6be:	d123      	bne.n	bb708 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bb6c0:	68ab      	ldr	r3, [r5, #8]
   bb6c2:	781a      	ldrb	r2, [r3, #0]
   bb6c4:	454a      	cmp	r2, r9
   bb6c6:	d102      	bne.n	bb6ce <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb6c8:	785b      	ldrb	r3, [r3, #1]
   bb6ca:	4553      	cmp	r3, sl
   bb6cc:	d0a0      	beq.n	bb610 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb6ce:	786a      	ldrb	r2, [r5, #1]
   bb6d0:	4620      	mov	r0, r4
   bb6d2:	f7fc fbf1 	bl	b7eb8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bb6d6:	2800      	cmp	r0, #0
   bb6d8:	d09c      	beq.n	bb614 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bb6da:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb6de:	2b00      	cmp	r3, #0
   bb6e0:	d0d2      	beq.n	bb688 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bb6e2:	4951      	ldr	r1, [pc, #324]	; (bb828 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bb6e4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6e8:	f003 ff49 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bb6ec:	2210      	movs	r2, #16
   bb6ee:	7829      	ldrb	r1, [r5, #0]
   bb6f0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6f4:	f7fc faf2 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bb6f8:	4941      	ldr	r1, [pc, #260]	; (bb800 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bb6fa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6fe:	f003 ff3e 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   bb702:	7869      	ldrb	r1, [r5, #1]
   bb704:	2210      	movs	r2, #16
   bb706:	e022      	b.n	bb74e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb708:	2b05      	cmp	r3, #5
   bb70a:	d1e0      	bne.n	bb6ce <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb70c:	68ab      	ldr	r3, [r5, #8]
   bb70e:	781a      	ldrb	r2, [r3, #0]
   bb710:	454a      	cmp	r2, r9
   bb712:	d1dc      	bne.n	bb6ce <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb714:	785b      	ldrb	r3, [r3, #1]
   bb716:	4553      	cmp	r3, sl
   bb718:	d1d9      	bne.n	bb6ce <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   bb71a:	2303      	movs	r3, #3
   bb71c:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   bb71e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb722:	2b00      	cmp	r3, #0
   bb724:	d0b0      	beq.n	bb688 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   bb726:	4941      	ldr	r1, [pc, #260]	; (bb82c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   bb728:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb72c:	f003 ff27 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   bb730:	68ab      	ldr	r3, [r5, #8]
   bb732:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb736:	7819      	ldrb	r1, [r3, #0]
   bb738:	2210      	movs	r2, #16
   bb73a:	f7fc facf 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   bb73e:	493c      	ldr	r1, [pc, #240]	; (bb830 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   bb740:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb744:	f003 ff1b 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   bb748:	68ab      	ldr	r3, [r5, #8]
   bb74a:	7859      	ldrb	r1, [r3, #1]
   bb74c:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   bb74e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb752:	f7fc faca 	bl	b7cea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb756:	e75d      	b.n	bb614 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   bb758:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bb75a:	782b      	ldrb	r3, [r5, #0]
   bb75c:	454b      	cmp	r3, r9
   bb75e:	d143      	bne.n	bb7e8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   bb760:	786a      	ldrb	r2, [r5, #1]
   bb762:	4552      	cmp	r2, sl
   bb764:	d140      	bne.n	bb7e8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   bb766:	2300      	movs	r3, #0
   bb768:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb76a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb76e:	b91b      	cbnz	r3, bb778 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   bb770:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb774:	2b00      	cmp	r3, #0
   bb776:	d08e      	beq.n	bb696 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   bb778:	492e      	ldr	r1, [pc, #184]	; (bb834 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   bb77a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb77e:	f003 fefe 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   bb782:	492d      	ldr	r1, [pc, #180]	; (bb838 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   bb784:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb788:	f003 fef9 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   bb78c:	7b29      	ldrb	r1, [r5, #12]
   bb78e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb792:	220a      	movs	r2, #10
   bb794:	f7fc faa2 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   bb798:	4928      	ldr	r1, [pc, #160]	; (bb83c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   bb79a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb79e:	f003 feee 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   bb7a2:	7b69      	ldrb	r1, [r5, #13]
   bb7a4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7a8:	220a      	movs	r2, #10
   bb7aa:	f7fc fa97 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   bb7ae:	4924      	ldr	r1, [pc, #144]	; (bb840 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   bb7b0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7b4:	f003 fee3 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   bb7b8:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   bb7bc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7c0:	220a      	movs	r2, #10
   bb7c2:	f7fc fa8b 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   bb7c6:	491f      	ldr	r1, [pc, #124]	; (bb844 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   bb7c8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7cc:	f003 fed7 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   bb7d0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7d4:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   bb7d8:	220a      	movs	r2, #10
   bb7da:	f7fc fa7f 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   bb7de:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7e2:	f003 fed0 	bl	bf586 <_ZN5Print7printlnEv>
   bb7e6:	e756      	b.n	bb696 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb7e8:	2b05      	cmp	r3, #5
   bb7ea:	d1be      	bne.n	bb76a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb7ec:	68ab      	ldr	r3, [r5, #8]
   bb7ee:	781a      	ldrb	r2, [r3, #0]
   bb7f0:	454a      	cmp	r2, r9
   bb7f2:	d1ba      	bne.n	bb76a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb7f4:	785b      	ldrb	r3, [r3, #1]
   bb7f6:	4553      	cmp	r3, sl
   bb7f8:	d1b7      	bne.n	bb76a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb7fa:	e7b4      	b.n	bb766 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bb7fc:	000c6964 	.word	0x000c6964
   bb800:	000c69d5 	.word	0x000c69d5
   bb804:	000c6add 	.word	0x000c6add
   bb808:	000c6b34 	.word	0x000c6b34
   bb80c:	000c6b4a 	.word	0x000c6b4a
   bb810:	000c6a11 	.word	0x000c6a11
   bb814:	000c6a22 	.word	0x000c6a22
   bb818:	000c6a2e 	.word	0x000c6a2e
   bb81c:	000c6a42 	.word	0x000c6a42
   bb820:	000c6a56 	.word	0x000c6a56
   bb824:	000c6a70 	.word	0x000c6a70
   bb828:	000c69dd 	.word	0x000c69dd
   bb82c:	000c699c 	.word	0x000c699c
   bb830:	000c69cb 	.word	0x000c69cb
   bb834:	000c6a8a 	.word	0x000c6a8a
   bb838:	000c6a9b 	.word	0x000c6a9b
   bb83c:	000c6aa8 	.word	0x000c6aa8
   bb840:	000c6ab5 	.word	0x000c6ab5
   bb844:	000c6ac9 	.word	0x000c6ac9
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb848:	786a      	ldrb	r2, [r5, #1]
   bb84a:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   bb84c:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb850:	4620      	mov	r0, r4
   bb852:	f7fc fb31 	bl	b7eb8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   bb856:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   bb85a:	2800      	cmp	r0, #0
   bb85c:	bf18      	it	ne
   bb85e:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bb862:	2b00      	cmp	r3, #0
   bb864:	f47f ae87 	bne.w	bb576 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bb868:	1ef3      	subs	r3, r6, #3
   bb86a:	454b      	cmp	r3, r9
   bb86c:	f77f ae83 	ble.w	bb576 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bb870:	3e04      	subs	r6, #4
   bb872:	eba6 0609 	sub.w	r6, r6, r9
   bb876:	4546      	cmp	r6, r8
   bb878:	da02      	bge.n	bb880 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bb87a:	68ab      	ldr	r3, [r5, #8]
   bb87c:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb87e:	e67a      	b.n	bb576 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bb880:	2301      	movs	r3, #1
   bb882:	e681      	b.n	bb588 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bb884:	4900      	ldr	r1, [pc, #0]	; (bb888 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bb886:	e68e      	b.n	bb5a6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bb888:	000c6b02 	.word	0x000c6b02

000bb88c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bb88c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bb88e:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bb892:	4604      	mov	r4, r0
   bb894:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bb896:	b113      	cbz	r3, bb89e <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bb898:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bb89c:	b953      	cbnz	r3, bb8b4 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bb89e:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bb8a2:	b128      	cbz	r0, bb8b0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bb8a4:	490e      	ldr	r1, [pc, #56]	; (bb8e0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bb8a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb8aa:	f003 fe82 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bb8ae:	2000      	movs	r0, #0
}
   bb8b0:	b003      	add	sp, #12
   bb8b2:	bd30      	pop	{r4, r5, pc}
   bb8b4:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bb8b6:	f7fd ff12 	bl	b96de <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bb8ba:	4285      	cmp	r5, r0
   bb8bc:	9901      	ldr	r1, [sp, #4]
   bb8be:	d908      	bls.n	bb8d2 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb8c0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb8c4:	b91b      	cbnz	r3, bb8ce <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bb8c6:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bb8ca:	2800      	cmp	r0, #0
   bb8cc:	d0f0      	beq.n	bb8b0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bb8ce:	4905      	ldr	r1, [pc, #20]	; (bb8e4 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bb8d0:	e7e9      	b.n	bb8a6 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bb8d2:	4620      	mov	r0, r4
   bb8d4:	462a      	mov	r2, r5
   bb8d6:	f7fd ff0b 	bl	b96f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bb8da:	2001      	movs	r0, #1
   bb8dc:	e7e8      	b.n	bb8b0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bb8de:	bf00      	nop
   bb8e0:	000c6b62 	.word	0x000c6b62
   bb8e4:	000c6b8d 	.word	0x000c6b8d

000bb8e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bb8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb8ec:	4604      	mov	r4, r0
   bb8ee:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bb8f0:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bb8f4:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bb8f8:	f88d 100f 	strb.w	r1, [sp, #15]
   bb8fc:	4615      	mov	r5, r2
   bb8fe:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bb900:	b118      	cbz	r0, bb90a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bb902:	6803      	ldr	r3, [r0, #0]
   bb904:	b2c9      	uxtb	r1, r1
   bb906:	689b      	ldr	r3, [r3, #8]
   bb908:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bb90a:	7823      	ldrb	r3, [r4, #0]
   bb90c:	2b01      	cmp	r3, #1
   bb90e:	d80e      	bhi.n	bb92e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bb910:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb914:	2bb5      	cmp	r3, #181	; 0xb5
   bb916:	d12e      	bne.n	bb976 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bb918:	2300      	movs	r3, #0
   bb91a:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bb91e:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bb920:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bb924:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bb928:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bb92a:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bb92e:	7826      	ldrb	r6, [r4, #0]
   bb930:	2e02      	cmp	r6, #2
   bb932:	f040 81d5 	bne.w	bbce0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bb936:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bb93a:	bb5b      	cbnz	r3, bb994 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bb93c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb940:	2bb5      	cmp	r3, #181	; 0xb5
   bb942:	d001      	beq.n	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bb944:	2300      	movs	r3, #0
   bb946:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bb948:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bb94c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bb950:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bb954:	2b01      	cmp	r3, #1
   bb956:	f040 81a3 	bne.w	bbca0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bb95a:	463b      	mov	r3, r7
   bb95c:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bb960:	4620      	mov	r0, r4
   bb962:	f7ff fdad 	bl	bb4c0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bb966:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bb96a:	3301      	adds	r3, #1
   bb96c:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bb970:	b005      	add	sp, #20
   bb972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bb976:	2b24      	cmp	r3, #36	; 0x24
   bb978:	d105      	bne.n	bb986 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bb97a:	2300      	movs	r3, #0
   bb97c:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bb980:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bb982:	7023      	strb	r3, [r4, #0]
   bb984:	e7d3      	b.n	bb92e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bb986:	2bd3      	cmp	r3, #211	; 0xd3
   bb988:	d1d1      	bne.n	bb92e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bb98a:	2300      	movs	r3, #0
   bb98c:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bb990:	2303      	movs	r3, #3
   bb992:	e7f6      	b.n	bb982 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bb994:	2b01      	cmp	r3, #1
   bb996:	d103      	bne.n	bb9a0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bb998:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb99c:	2b62      	cmp	r3, #98	; 0x62
   bb99e:	e7d0      	b.n	bb942 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bb9a0:	2b02      	cmp	r3, #2
   bb9a2:	d10e      	bne.n	bb9c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bb9a4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb9a8:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bb9ac:	2200      	movs	r2, #0
   bb9ae:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bb9b2:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bb9b6:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bb9ba:	88eb      	ldrh	r3, [r5, #6]
   bb9bc:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bb9c0:	e7c2      	b.n	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bb9c2:	2b03      	cmp	r3, #3
   bb9c4:	f040 80b7 	bne.w	bbb36 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bb9c8:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bb9cc:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bb9d0:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bb9d4:	2905      	cmp	r1, #5
   bb9d6:	d0b7      	beq.n	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bb9d8:	42b9      	cmp	r1, r7
   bb9da:	d10c      	bne.n	bb9f6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bb9dc:	4546      	cmp	r6, r8
   bb9de:	d10a      	bne.n	bb9f6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bb9e0:	2300      	movs	r3, #0
   bb9e2:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bb9e6:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bb9e8:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bb9ec:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bb9ee:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bb9f2:	80ab      	strh	r3, [r5, #4]
   bb9f4:	e7a8      	b.n	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bb9f6:	4632      	mov	r2, r6
   bb9f8:	4620      	mov	r0, r4
   bb9fa:	f7fc fa5d 	bl	b7eb8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bb9fe:	2800      	cmp	r0, #0
   bba00:	f000 8095 	beq.w	bbb2e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bba04:	4632      	mov	r2, r6
   bba06:	4620      	mov	r0, r4
   bba08:	f7fc fb58 	bl	b80bc <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bba0c:	4606      	mov	r6, r0
   bba0e:	b9e8      	cbnz	r0, bba4c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bba10:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bba14:	b913      	cbnz	r3, bba1c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bba16:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bba1a:	b1bb      	cbz	r3, bba4c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bba1c:	49a7      	ldr	r1, [pc, #668]	; (bbcbc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bba1e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba22:	f003 fdac 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bba26:	220a      	movs	r2, #10
   bba28:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bba2c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba30:	f7fc f954 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bba34:	49a2      	ldr	r1, [pc, #648]	; (bbcc0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bba36:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba3a:	f003 fda0 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bba3e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bba42:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba46:	220a      	movs	r2, #10
   bba48:	f7fc f94f 	bl	b7cea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bba4c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bba50:	b1a3      	cbz	r3, bba7c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bba52:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bba56:	b913      	cbnz	r3, bba5e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bba58:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bba5c:	b123      	cbz	r3, bba68 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bba5e:	4999      	ldr	r1, [pc, #612]	; (bbcc4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bba60:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba64:	f003 fda5 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bba68:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bba6c:	b108      	cbz	r0, bba72 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bba6e:	f7f8 fb16 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bba72:	2300      	movs	r3, #0
   bba74:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bba78:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bba7c:	4630      	mov	r0, r6
   bba7e:	f7f8 fb0c 	bl	b409a <_Znaj>
   bba82:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bba86:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bba8a:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bba8e:	bb38      	cbnz	r0, bbae0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bba90:	b913      	cbnz	r3, bba98 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bba92:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bba96:	b1e3      	cbz	r3, bbad2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bba98:	498b      	ldr	r1, [pc, #556]	; (bbcc8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bba9a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba9e:	f003 fd6e 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bbaa2:	2210      	movs	r2, #16
   bbaa4:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbaa8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbaac:	f7fc f916 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bbab0:	4983      	ldr	r1, [pc, #524]	; (bbcc0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbab2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbab6:	f003 fd62 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bbaba:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbabe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbac2:	2210      	movs	r2, #16
   bbac4:	f7fc f911 	bl	b7cea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bbac8:	4980      	ldr	r1, [pc, #512]	; (bbccc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bbaca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbace:	f003 fd70 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bbad2:	2300      	movs	r3, #0
   bbad4:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bbad8:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bbadc:	702b      	strb	r3, [r5, #0]
   bbade:	e783      	b.n	bb9e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bbae0:	2203      	movs	r2, #3
   bbae2:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bbae6:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bbaea:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bbaee:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bbaf2:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bbaf6:	2b00      	cmp	r3, #0
   bbaf8:	f43f af26 	beq.w	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bbafc:	4974      	ldr	r1, [pc, #464]	; (bbcd0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bbafe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb02:	f003 fd3c 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bbb06:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbb0a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb0e:	2210      	movs	r2, #16
   bbb10:	f7fc f8e4 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bbb14:	496a      	ldr	r1, [pc, #424]	; (bbcc0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbb16:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb1a:	f003 fd30 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bbb1e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbb22:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb26:	2210      	movs	r2, #16
   bbb28:	f7fc f8df 	bl	b7cea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbb2c:	e70c      	b.n	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bbb2e:	2301      	movs	r3, #1
   bbb30:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bbb34:	e708      	b.n	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bbb36:	2b04      	cmp	r3, #4
   bbb38:	d104      	bne.n	bbb44 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bbb3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bbb3e:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bbb42:	e701      	b.n	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bbb44:	2b05      	cmp	r3, #5
   bbb46:	d106      	bne.n	bbb56 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bbb48:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbb4c:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbb50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bbb54:	e7f3      	b.n	bbb3e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bbb56:	2b06      	cmp	r3, #6
   bbb58:	d12b      	bne.n	bbbb2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bbb5a:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbb5e:	bb13      	cbnz	r3, bbba6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbb60:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbb64:	b913      	cbnz	r3, bbb6c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bbb66:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbb6a:	b1bb      	cbz	r3, bbb9c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bbb6c:	4959      	ldr	r1, [pc, #356]	; (bbcd4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bbb6e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb72:	f003 fd04 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bbb76:	2210      	movs	r2, #16
   bbb78:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbb7c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb80:	f7fc f8ac 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bbb84:	494e      	ldr	r1, [pc, #312]	; (bbcc0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbb86:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb8a:	f003 fcf8 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bbb8e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbb92:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb96:	2210      	movs	r2, #16
   bbb98:	f7fc f8a7 	bl	b7cea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bbb9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbba0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bbba4:	e6d0      	b.n	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bbba6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbbaa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbbae:	701a      	strb	r2, [r3, #0]
   bbbb0:	e6ca      	b.n	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bbbb2:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bbbb4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bbbb8:	f47f aec6 	bne.w	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bbbbc:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbbc0:	bb9b      	cbnz	r3, bbc2a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bbbc2:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bbbc6:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bbbca:	2b02      	cmp	r3, #2
   bbbcc:	f47f aebc 	bne.w	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bbbd0:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbbd4:	2905      	cmp	r1, #5
   bbbd6:	f47f aeb7 	bne.w	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bbbda:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbbde:	781a      	ldrb	r2, [r3, #0]
   bbbe0:	42ba      	cmp	r2, r7
   bbbe2:	f47f aeb1 	bne.w	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bbbe6:	785a      	ldrb	r2, [r3, #1]
   bbbe8:	4542      	cmp	r2, r8
   bbbea:	f47f aead 	bne.w	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bbbee:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bbbf2:	2a02      	cmp	r2, #2
   bbbf4:	d121      	bne.n	bbc3a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bbbf6:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bbbfa:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bbbfe:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bbc02:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bbc06:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bbc0a:	2001      	movs	r0, #1
   bbc0c:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bbc10:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bbc14:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bbc18:	781b      	ldrb	r3, [r3, #0]
   bbc1a:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bbc1c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bbc20:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bbc24:	7852      	ldrb	r2, [r2, #1]
   bbc26:	705a      	strb	r2, [r3, #1]
   bbc28:	e68e      	b.n	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bbc2a:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bbc2c:	bf16      	itet	ne
   bbc2e:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bbc32:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bbc36:	705a      	strbne	r2, [r3, #1]
   bbc38:	e7c5      	b.n	bbbc6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbc3a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbc3e:	b923      	cbnz	r3, bbc4a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bbc40:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbc44:	2b00      	cmp	r3, #0
   bbc46:	f43f ae7f 	beq.w	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bbc4a:	4923      	ldr	r1, [pc, #140]	; (bbcd8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bbc4c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc50:	f003 fc95 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bbc54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbc58:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc5c:	7819      	ldrb	r1, [r3, #0]
   bbc5e:	2210      	movs	r2, #16
   bbc60:	f7fc f83c 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bbc64:	4916      	ldr	r1, [pc, #88]	; (bbcc0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbc66:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc6a:	f003 fc88 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bbc6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbc72:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc76:	7859      	ldrb	r1, [r3, #1]
   bbc78:	2210      	movs	r2, #16
   bbc7a:	f7fc f82f 	bl	b7cdc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bbc7e:	4917      	ldr	r1, [pc, #92]	; (bbcdc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bbc80:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc84:	f003 fc7b 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bbc88:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bbc8c:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bbc90:	220a      	movs	r2, #10
   bbc92:	4630      	mov	r0, r6
   bbc94:	f003 fc8f 	bl	bf5b6 <_ZN5Print11printNumberEmh>
        n += println();
   bbc98:	4630      	mov	r0, r6
   bbc9a:	f003 fc74 	bl	bf586 <_ZN5Print7printlnEv>
        return n;
   bbc9e:	e653      	b.n	bb948 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbca0:	b913      	cbnz	r3, bbca8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bbca2:	463b      	mov	r3, r7
   bbca4:	462a      	mov	r2, r5
   bbca6:	e65b      	b.n	bb960 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bbca8:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bbcaa:	bf08      	it	eq
   bbcac:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bbcb0:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bbcb2:	bf18      	it	ne
   bbcb4:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bbcb8:	e652      	b.n	bb960 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bbcba:	bf00      	nop
   bbcbc:	000c6bce 	.word	0x000c6bce
   bbcc0:	000c69d5 	.word	0x000c69d5
   bbcc4:	000c6c03 	.word	0x000c6c03
   bbcc8:	000c6c45 	.word	0x000c6c45
   bbccc:	000c6c8a 	.word	0x000c6c8a
   bbcd0:	000c6cbc 	.word	0x000c6cbc
   bbcd4:	000c6ced 	.word	0x000c6ced
   bbcd8:	000c6d1d 	.word	0x000c6d1d
   bbcdc:	000c6d4d 	.word	0x000c6d4d
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bbce0:	2e01      	cmp	r6, #1
   bbce2:	f040 8188 	bne.w	bbff6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bbce6:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bbcea:	2b00      	cmp	r3, #0
   bbcec:	d146      	bne.n	bbd7c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bbcee:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbcf2:	2a24      	cmp	r2, #36	; 0x24
   bbcf4:	f000 8086 	beq.w	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bbcf8:	2300      	movs	r3, #0
   bbcfa:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bbcfc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbd00:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bbd02:	bf04      	itt	eq
   bbd04:	23fb      	moveq	r3, #251	; 0xfb
   bbd06:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bbd0a:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bbd0e:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bbd12:	3501      	adds	r5, #1
   bbd14:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bbd16:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bbd18:	bf08      	it	eq
   bbd1a:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bbd1c:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bbd20:	bf08      	it	eq
   bbd22:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bbd24:	2d00      	cmp	r5, #0
   bbd26:	f47f ae23 	bne.w	bb970 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bbd2a:	4620      	mov	r0, r4
   bbd2c:	f7fc fc20 	bl	b8570 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbd30:	2800      	cmp	r0, #0
   bbd32:	f000 8120 	beq.w	bbf76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbd36:	4620      	mov	r0, r4
   bbd38:	f7fc fd7c 	bl	b8834 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbd3c:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbd3e:	4620      	mov	r0, r4
   bbd40:	f7fc fdfa 	bl	b8938 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbd44:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbd46:	4620      	mov	r0, r4
   bbd48:	f7fd f88a 	bl	b8e60 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bbd4c:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbd4e:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbd50:	1e41      	subs	r1, r0, #1
   bbd52:	428e      	cmp	r6, r1
   bbd54:	f280 80b4 	bge.w	bbec0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bbd58:	783a      	ldrb	r2, [r7, #0]
   bbd5a:	3a04      	subs	r2, #4
   bbd5c:	4296      	cmp	r6, r2
   bbd5e:	f280 80af 	bge.w	bbec0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bbd62:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bbd64:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbd68:	f000 80ad 	beq.w	bbec6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bbd6c:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bbd6e:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bbd72:	bf18      	it	ne
   bbd74:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bbd76:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bbd78:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbd7a:	e7ea      	b.n	bbd52 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bbd7c:	2b01      	cmp	r3, #1
   bbd7e:	d103      	bne.n	bbd88 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bbd80:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbd84:	2a47      	cmp	r2, #71	; 0x47
   bbd86:	e7b5      	b.n	bbcf4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bbd88:	b2da      	uxtb	r2, r3
   bbd8a:	2a05      	cmp	r2, #5
   bbd8c:	d93a      	bls.n	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bbd8e:	4620      	mov	r0, r4
   bbd90:	f7fc fbee 	bl	b8570 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbd94:	b308      	cbz	r0, bbdda <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbd96:	4620      	mov	r0, r4
   bbd98:	f7fc fd4c 	bl	b8834 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbd9c:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbd9e:	4620      	mov	r0, r4
   bbda0:	f7fc fdca 	bl	b8938 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbda4:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbda6:	4620      	mov	r0, r4
   bbda8:	f7fd f85a 	bl	b8e60 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bbdac:	782b      	ldrb	r3, [r5, #0]
   bbdae:	4283      	cmp	r3, r0
   bbdb0:	d213      	bcs.n	bbdda <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bbdb2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbdb6:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bbdb8:	782b      	ldrb	r3, [r5, #0]
   bbdba:	3301      	adds	r3, #1
   bbdbc:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bbdbe:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bbdc0:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bbdc2:	d10a      	bne.n	bbdda <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbdc4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbdc8:	b913      	cbnz	r3, bbdd0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bbdca:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbdce:	b123      	cbz	r3, bbdda <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bbdd0:	498f      	ldr	r1, [pc, #572]	; (bc010 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bbdd2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdd6:	f003 fbec 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bbdda:	4620      	mov	r0, r4
   bbddc:	f7fc f9c8 	bl	b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bbde0:	b128      	cbz	r0, bbdee <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bbde2:	2201      	movs	r2, #1
   bbde4:	f10d 010f 	add.w	r1, sp, #15
   bbde8:	4620      	mov	r0, r4
   bbdea:	f7ff fd4f 	bl	bb88c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bbdee:	4620      	mov	r0, r4
   bbdf0:	f7fc faee 	bl	b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bbdf4:	2800      	cmp	r0, #0
   bbdf6:	d081      	beq.n	bbcfc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bbdf8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbdfc:	4620      	mov	r0, r4
   bbdfe:	f7fc fbaf 	bl	b8560 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bbe02:	e77b      	b.n	bbcfc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bbe04:	18e2      	adds	r2, r4, r3
   bbe06:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbe0a:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bbe0e:	2b05      	cmp	r3, #5
   bbe10:	f47f af74 	bne.w	bbcfc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bbe14:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bbe18:	b923      	cbnz	r3, bbe24 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bbe1a:	4620      	mov	r0, r4
   bbe1c:	f7fc fa70 	bl	b8300 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bbe20:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bbe24:	4620      	mov	r0, r4
   bbe26:	f7fc fba3 	bl	b8570 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbe2a:	b1b8      	cbz	r0, bbe5c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbe2c:	4620      	mov	r0, r4
   bbe2e:	f7fc fd01 	bl	b8834 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbe32:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbe34:	4620      	mov	r0, r4
   bbe36:	f7fc fd7f 	bl	b8938 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbe3a:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbe3c:	4620      	mov	r0, r4
   bbe3e:	f7fd f80f 	bl	b8e60 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bbe42:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbe44:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bbe46:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bbe48:	2100      	movs	r1, #0
   bbe4a:	4628      	mov	r0, r5
   bbe4c:	f007 ffc0 	bl	c3dd0 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bbe50:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bbe54:	602b      	str	r3, [r5, #0]
   bbe56:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bbe5a:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bbe5c:	4620      	mov	r0, r4
   bbe5e:	f7fc f987 	bl	b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bbe62:	b128      	cbz	r0, bbe70 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bbe64:	2206      	movs	r2, #6
   bbe66:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bbe6a:	4620      	mov	r0, r4
   bbe6c:	f7ff fd0e 	bl	bb88c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bbe70:	4620      	mov	r0, r4
   bbe72:	f7fc faad 	bl	b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bbe76:	b1e8      	cbz	r0, bbeb4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bbe78:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bbe7c:	4620      	mov	r0, r4
   bbe7e:	f7fc fb6f 	bl	b8560 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bbe82:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bbe86:	4620      	mov	r0, r4
   bbe88:	f7fc fb6a 	bl	b8560 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bbe8c:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bbe90:	4620      	mov	r0, r4
   bbe92:	f7fc fb65 	bl	b8560 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bbe96:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bbe9a:	4620      	mov	r0, r4
   bbe9c:	f7fc fb60 	bl	b8560 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bbea0:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bbea4:	4620      	mov	r0, r4
   bbea6:	f7fc fb5b 	bl	b8560 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bbeaa:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bbeae:	4620      	mov	r0, r4
   bbeb0:	f7fc fb56 	bl	b8560 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bbeb4:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bbeb8:	2b05      	cmp	r3, #5
   bbeba:	f67f af1f 	bls.w	bbcfc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bbebe:	e766      	b.n	bbd8e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bbec0:	2d2a      	cmp	r5, #42	; 0x2a
   bbec2:	f040 808b 	bne.w	bbfdc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bbec6:	091a      	lsrs	r2, r3, #4
   bbec8:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bbecc:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bbece:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bbed0:	f003 030f 	and.w	r3, r3, #15
   bbed4:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bbed8:	bf84      	itt	hi
   bbeda:	3237      	addhi	r2, #55	; 0x37
   bbedc:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bbede:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bbee2:	bf88      	it	hi
   bbee4:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bbee8:	f818 3006 	ldrb.w	r3, [r8, r6]
   bbeec:	42ab      	cmp	r3, r5
   bbeee:	eb08 0b06 	add.w	fp, r8, r6
   bbef2:	d143      	bne.n	bbf7c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bbef4:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bbef8:	4553      	cmp	r3, sl
   bbefa:	d13f      	bne.n	bbf7c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bbefc:	4620      	mov	r0, r4
   bbefe:	f7fc fd9d 	bl	b8a3c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bbf02:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bbf04:	4620      	mov	r0, r4
   bbf06:	f7fc fe1d 	bl	b8b44 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bbf0a:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bbf0c:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bbf0e:	2100      	movs	r1, #0
   bbf10:	f007 ff5e 	bl	c3dd0 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bbf14:	783a      	ldrb	r2, [r7, #0]
   bbf16:	4641      	mov	r1, r8
   bbf18:	4630      	mov	r0, r6
   bbf1a:	f007 ff31 	bl	c3d80 <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bbf1e:	783b      	ldrb	r3, [r7, #0]
   bbf20:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bbf22:	4620      	mov	r0, r4
   bbf24:	f7fd f80e 	bl	b8f44 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bbf28:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bbf2a:	f025 0503 	bic.w	r5, r5, #3
   bbf2e:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bbf32:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bbf34:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bbf38:	4620      	mov	r0, r4
   bbf3a:	f7fc fba5 	bl	b8688 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bbf3e:	b1d0      	cbz	r0, bbf76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bbf40:	f01a 0104 	ands.w	r1, sl, #4
   bbf44:	d117      	bne.n	bbf76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bbf46:	4620      	mov	r0, r4
   bbf48:	9102      	str	r1, [sp, #8]
   bbf4a:	f7fc fe7f 	bl	b8c4c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bbf4e:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bbf50:	4620      	mov	r0, r4
   bbf52:	f7fc feff 	bl	b8d54 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bbf56:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bbf58:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bbf5a:	464a      	mov	r2, r9
   bbf5c:	f007 ff38 	bl	c3dd0 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bbf60:	783a      	ldrb	r2, [r7, #0]
   bbf62:	4641      	mov	r1, r8
   bbf64:	4650      	mov	r0, sl
   bbf66:	f007 ff0b 	bl	c3d80 <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bbf6a:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bbf6e:	783b      	ldrb	r3, [r7, #0]
   bbf70:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bbf74:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bbf76:	2300      	movs	r3, #0
   bbf78:	7023      	strb	r3, [r4, #0]
   bbf7a:	e4f9      	b.n	bb970 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbf7c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbf80:	b91b      	cbnz	r3, bbf8a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bbf82:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbf86:	2b00      	cmp	r3, #0
   bbf88:	d0f5      	beq.n	bbf76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bbf8a:	4922      	ldr	r1, [pc, #136]	; (bc014 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bbf8c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf90:	f003 faf5 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bbf94:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf98:	6803      	ldr	r3, [r0, #0]
   bbf9a:	4629      	mov	r1, r5
   bbf9c:	689b      	ldr	r3, [r3, #8]
   bbf9e:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bbfa0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfa4:	6803      	ldr	r3, [r0, #0]
   bbfa6:	4651      	mov	r1, sl
   bbfa8:	689b      	ldr	r3, [r3, #8]
   bbfaa:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bbfac:	491a      	ldr	r1, [pc, #104]	; (bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bbfae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfb2:	f003 fae4 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bbfb6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfba:	f89b 1000 	ldrb.w	r1, [fp]
   bbfbe:	6803      	ldr	r3, [r0, #0]
   bbfc0:	689b      	ldr	r3, [r3, #8]
   bbfc2:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bbfc4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfc8:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bbfcc:	6803      	ldr	r3, [r0, #0]
   bbfce:	689b      	ldr	r3, [r3, #8]
   bbfd0:	4798      	blx	r3
              _debugSerial->println();
   bbfd2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfd6:	f003 fad6 	bl	bf586 <_ZN5Print7printlnEv>
   bbfda:	e7cc      	b.n	bbf76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbfdc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbfe0:	b91b      	cbnz	r3, bbfea <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bbfe2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbfe6:	2b00      	cmp	r3, #0
   bbfe8:	d0c5      	beq.n	bbf76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bbfea:	490c      	ldr	r1, [pc, #48]	; (bc01c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bbfec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbff0:	f003 fadf 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bbff4:	e7bf      	b.n	bbf76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bbff6:	2e03      	cmp	r6, #3
   bbff8:	f47f acba 	bne.w	bb970 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bbffc:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc000:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bc004:	4620      	mov	r0, r4
   bc006:	f7fd f821 	bl	b904c <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bc00a:	7020      	strb	r0, [r4, #0]
}
   bc00c:	e4b0      	b.n	bb970 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bc00e:	bf00      	nop
   bc010:	000c6d54 	.word	0x000c6d54
   bc014:	000c6d72 	.word	0x000c6d72
   bc018:	000c6d9d 	.word	0x000c6d9d
   bc01c:	000c6da3 	.word	0x000c6da3

000bc020 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bc020:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bc024:	4604      	mov	r4, r0
   bc026:	4699      	mov	r9, r3
   bc028:	460f      	mov	r7, r1
   bc02a:	4690      	mov	r8, r2
   bc02c:	f001 fa2c 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bc030:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bc034:	1ac0      	subs	r0, r0, r3
   bc036:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bc03a:	4298      	cmp	r0, r3
   bc03c:	f0c0 80a8 	bcc.w	bc190 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bc040:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc044:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc048:	f005 f906 	bl	c1258 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bc04c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc050:	21fd      	movs	r1, #253	; 0xfd
   bc052:	f7fb fe53 	bl	b7cfc <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bc056:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc05a:	2100      	movs	r1, #0
   bc05c:	f005 f903 	bl	c1266 <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bc060:	4605      	mov	r5, r0
   bc062:	b1a8      	cbz	r0, bc090 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc064:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc068:	b933      	cbnz	r3, bc078 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bc06a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc06e:	b91b      	cbnz	r3, bc078 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bc070:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bc072:	b002      	add	sp, #8
   bc074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bc078:	4946      	ldr	r1, [pc, #280]	; (bc194 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc07a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc07e:	f003 fa7e 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bc082:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc086:	220a      	movs	r2, #10
   bc088:	4629      	mov	r1, r5
   bc08a:	f7fb fe2e 	bl	b7cea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc08e:	e7ef      	b.n	bc070 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bc090:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc094:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc098:	2202      	movs	r2, #2
   bc09a:	f005 f8da 	bl	c1252 <_ZN7TwoWire11requestFromEhj>
   bc09e:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bc0a0:	2d02      	cmp	r5, #2
   bc0a2:	d008      	beq.n	bc0b6 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc0a4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc0a8:	b91b      	cbnz	r3, bc0b2 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bc0aa:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc0ae:	2b00      	cmp	r3, #0
   bc0b0:	d0de      	beq.n	bc070 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc0b2:	4939      	ldr	r1, [pc, #228]	; (bc198 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bc0b4:	e7e1      	b.n	bc07a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bc0b6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc0ba:	6803      	ldr	r3, [r0, #0]
   bc0bc:	695b      	ldr	r3, [r3, #20]
   bc0be:	4798      	blx	r3
   bc0c0:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bc0c2:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc0c6:	6803      	ldr	r3, [r0, #0]
   bc0c8:	695b      	ldr	r3, [r3, #20]
   bc0ca:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bc0cc:	b2c6      	uxtb	r6, r0
   bc0ce:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bc0d2:	b22a      	sxth	r2, r5
   bc0d4:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bc0d6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc0da:	b955      	cbnz	r5, bc0f2 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bc0dc:	b123      	cbz	r3, bc0e8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bc0de:	492f      	ldr	r1, [pc, #188]	; (bc19c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bc0e0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0e4:	f003 fa65 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc0e8:	f001 f9ce 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bc0ec:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bc0f0:	e7be      	b.n	bc070 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bc0f2:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bc0f4:	bfb8      	it	lt
   bc0f6:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bc0fa:	2d64      	cmp	r5, #100	; 0x64
   bc0fc:	d936      	bls.n	bc16c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bc0fe:	b17b      	cbz	r3, bc120 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bc100:	4927      	ldr	r1, [pc, #156]	; (bc1a0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bc102:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc106:	f003 fa3a 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bc10a:	4629      	mov	r1, r5
   bc10c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc110:	220a      	movs	r2, #10
   bc112:	f003 fa50 	bl	bf5b6 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bc116:	4923      	ldr	r1, [pc, #140]	; (bc1a4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bc118:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc11c:	f003 fa49 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bc120:	2d00      	cmp	r5, #0
   bc122:	d035      	beq.n	bc190 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bc124:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bc126:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc12a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc12e:	42ae      	cmp	r6, r5
   bc130:	bf28      	it	cs
   bc132:	462e      	movcs	r6, r5
   bc134:	4632      	mov	r2, r6
   bc136:	f005 f88c 	bl	c1252 <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bc13a:	b2c0      	uxtb	r0, r0
   bc13c:	4286      	cmp	r6, r0
   bc13e:	d197      	bne.n	bc070 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bc140:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc144:	fa1f f38a 	uxth.w	r3, sl
   bc148:	429e      	cmp	r6, r3
   bc14a:	d91e      	bls.n	bc18a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bc14c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc150:	6803      	ldr	r3, [r0, #0]
   bc152:	695b      	ldr	r3, [r3, #20]
   bc154:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bc156:	f8cd 9000 	str.w	r9, [sp]
   bc15a:	b2c1      	uxtb	r1, r0
   bc15c:	4643      	mov	r3, r8
   bc15e:	463a      	mov	r2, r7
   bc160:	4620      	mov	r0, r4
   bc162:	f7ff fbc1 	bl	bb8e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc166:	f10a 0a01 	add.w	sl, sl, #1
   bc16a:	e7eb      	b.n	bc144 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bc16c:	2b00      	cmp	r3, #0
   bc16e:	d0d7      	beq.n	bc120 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bc170:	490d      	ldr	r1, [pc, #52]	; (bc1a8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bc172:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc176:	f003 fa02 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
   bc17a:	4629      	mov	r1, r5
   bc17c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc180:	220a      	movs	r2, #10
   bc182:	f003 fa18 	bl	bf5b6 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bc186:	4909      	ldr	r1, [pc, #36]	; (bc1ac <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bc188:	e7c6      	b.n	bc118 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bc18a:	1bad      	subs	r5, r5, r6
   bc18c:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bc18e:	e7c7      	b.n	bc120 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bc190:	2001      	movs	r0, #1
   bc192:	e76e      	b.n	bc072 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bc194:	000c6dc4 	.word	0x000c6dc4
   bc198:	000c6df8 	.word	0x000c6df8
   bc19c:	000c6e2d 	.word	0x000c6e2d
   bc1a0:	000c6e55 	.word	0x000c6e55
   bc1a4:	000c6e75 	.word	0x000c6e75
   bc1a8:	000c6e85 	.word	0x000c6e85
   bc1ac:	000c6e9d 	.word	0x000c6e9d

000bc1b0 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bc1b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bc1b2:	4604      	mov	r4, r0
   bc1b4:	460d      	mov	r5, r1
   bc1b6:	4616      	mov	r6, r2
   bc1b8:	461f      	mov	r7, r3
  while (_serialPort->available())
   bc1ba:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc1be:	6803      	ldr	r3, [r0, #0]
   bc1c0:	691b      	ldr	r3, [r3, #16]
   bc1c2:	4798      	blx	r3
   bc1c4:	b160      	cbz	r0, bc1e0 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bc1c6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc1ca:	6803      	ldr	r3, [r0, #0]
   bc1cc:	695b      	ldr	r3, [r3, #20]
   bc1ce:	4798      	blx	r3
   bc1d0:	9700      	str	r7, [sp, #0]
   bc1d2:	b2c1      	uxtb	r1, r0
   bc1d4:	4633      	mov	r3, r6
   bc1d6:	462a      	mov	r2, r5
   bc1d8:	4620      	mov	r0, r4
   bc1da:	f7ff fb85 	bl	bb8e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bc1de:	e7ec      	b.n	bc1ba <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bc1e0:	2001      	movs	r0, #1
   bc1e2:	b003      	add	sp, #12
   bc1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc1e8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bc1e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc1ec:	4604      	mov	r4, r0
   bc1ee:	b087      	sub	sp, #28
   bc1f0:	460d      	mov	r5, r1
   bc1f2:	4616      	mov	r6, r2
   bc1f4:	461f      	mov	r7, r3
   bc1f6:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc1fa:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bc1fe:	fa5f f388 	uxtb.w	r3, r8
   bc202:	429a      	cmp	r2, r3
   bc204:	d90b      	bls.n	bc21e <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bc206:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bc20a:	4620      	mov	r0, r4
   bc20c:	5cd1      	ldrb	r1, [r2, r3]
   bc20e:	9700      	str	r7, [sp, #0]
   bc210:	4633      	mov	r3, r6
   bc212:	462a      	mov	r2, r5
   bc214:	f7ff fb68 	bl	bb8e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc218:	f108 0801 	add.w	r8, r8, #1
   bc21c:	e7ed      	b.n	bc1fa <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bc21e:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc222:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bc226:	4a25      	ldr	r2, [pc, #148]	; (bc2bc <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bc228:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bc22c:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc230:	a902      	add	r1, sp, #8
   bc232:	f04f 0901 	mov.w	r9, #1
   bc236:	9202      	str	r2, [sp, #8]
   bc238:	9304      	str	r3, [sp, #16]
   bc23a:	f88d 800c 	strb.w	r8, [sp, #12]
   bc23e:	f8ad 9014 	strh.w	r9, [sp, #20]
   bc242:	f001 fdab 	bl	bdd9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bc246:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc24a:	4641      	mov	r1, r8
   bc24c:	f005 faeb 	bl	c1826 <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bc250:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc254:	21ff      	movs	r1, #255	; 0xff
   bc256:	f001 fe41 	bl	bdedc <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc25a:	28ff      	cmp	r0, #255	; 0xff
   bc25c:	d116      	bne.n	bc28c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc25e:	7823      	ldrb	r3, [r4, #0]
   bc260:	b983      	cbnz	r3, bc284 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bc262:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc266:	4649      	mov	r1, r9
   bc268:	f005 fadd 	bl	c1826 <digitalWrite>
    _spiPort->endTransaction();
   bc26c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc270:	f001 fd7b 	bl	bdd6a <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bc274:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bc278:	f004 fa7c 	bl	c0774 <delay>
} // end checkUbloxSpi()
   bc27c:	2001      	movs	r0, #1
   bc27e:	b007      	add	sp, #28
   bc280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc284:	28ff      	cmp	r0, #255	; 0xff
   bc286:	d101      	bne.n	bc28c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc288:	7823      	ldrb	r3, [r4, #0]
   bc28a:	b163      	cbz	r3, bc2a6 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bc28c:	4601      	mov	r1, r0
   bc28e:	9700      	str	r7, [sp, #0]
   bc290:	4620      	mov	r0, r4
   bc292:	4633      	mov	r3, r6
   bc294:	462a      	mov	r2, r5
   bc296:	f7ff fb27 	bl	bb8e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bc29a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc29e:	21ff      	movs	r1, #255	; 0xff
   bc2a0:	f001 fe1c 	bl	bdedc <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc2a4:	e7ee      	b.n	bc284 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bc2a6:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc2aa:	2101      	movs	r1, #1
   bc2ac:	f005 fabb 	bl	c1826 <digitalWrite>
  _spiPort->endTransaction();
   bc2b0:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc2b4:	f001 fd59 	bl	bdd6a <_ZN8SPIClass14endTransactionEv>
  return (true);
   bc2b8:	e7e0      	b.n	bc27c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bc2ba:	bf00      	nop
   bc2bc:	000c64f8 	.word	0x000c64f8

000bc2c0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bc2c0:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bc2c2:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bc2c6:	b91c      	cbnz	r4, bc2d0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bc2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bc2cc:	f7ff bea8 	b.w	bc020 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bc2d0:	2c01      	cmp	r4, #1
   bc2d2:	d103      	bne.n	bc2dc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bc2d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bc2d8:	f7ff bf6a 	b.w	bc1b0 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bc2dc:	2c02      	cmp	r4, #2
   bc2de:	d103      	bne.n	bc2e8 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bc2e0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bc2e4:	f7ff bf80 	b.w	bc1e8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bc2e8:	2000      	movs	r0, #0
   bc2ea:	f85d 4b04 	ldr.w	r4, [sp], #4
   bc2ee:	4770      	bx	lr

000bc2f0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bc2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc2f4:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc2f6:	2102      	movs	r1, #2
   bc2f8:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2fa:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2fe:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc302:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc306:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc308:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc30c:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc310:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc314:	4604      	mov	r4, r0
   bc316:	4617      	mov	r7, r2
   bc318:	4698      	mov	r8, r3
   bc31a:	f001 f8b5 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc31e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bc322:	4606      	mov	r6, r0
   bc324:	4481      	add	r9, r0
   bc326:	f001 f8af 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   bc32a:	4581      	cmp	r9, r0
   bc32c:	f240 80a8 	bls.w	bc480 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc330:	4643      	mov	r3, r8
   bc332:	463a      	mov	r2, r7
   bc334:	4629      	mov	r1, r5
   bc336:	4620      	mov	r0, r4
   bc338:	f7ff ffc2 	bl	bc2c0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc33c:	2800      	cmp	r0, #0
   bc33e:	f000 809b 	beq.w	bc478 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc342:	7beb      	ldrb	r3, [r5, #15]
   bc344:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bc348:	2b01      	cmp	r3, #1
   bc34a:	d125      	bne.n	bc398 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bc34c:	2901      	cmp	r1, #1
   bc34e:	f040 80ec 	bne.w	bc52a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bc352:	7bab      	ldrb	r3, [r5, #14]
   bc354:	2b01      	cmp	r3, #1
   bc356:	782b      	ldrb	r3, [r5, #0]
   bc358:	d13b      	bne.n	bc3d2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bc35a:	42bb      	cmp	r3, r7
   bc35c:	d13e      	bne.n	bc3dc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc35e:	786a      	ldrb	r2, [r5, #1]
   bc360:	4542      	cmp	r2, r8
   bc362:	d136      	bne.n	bc3d2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bc364:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc368:	b913      	cbnz	r3, bc370 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bc36a:	200b      	movs	r0, #11
}
   bc36c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bc370:	4978      	ldr	r1, [pc, #480]	; (bc554 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bc372:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc376:	f003 f902 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc37a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc37e:	f001 f883 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   bc382:	220a      	movs	r2, #10
   bc384:	1b81      	subs	r1, r0, r6
   bc386:	4628      	mov	r0, r5
   bc388:	f7fb fc9b 	bl	b7cc2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc38c:	4972      	ldr	r1, [pc, #456]	; (bc558 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc38e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc392:	f003 f90e 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc396:	e7e8      	b.n	bc36a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc398:	2b02      	cmp	r3, #2
   bc39a:	d137      	bne.n	bc40c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bc39c:	2901      	cmp	r1, #1
   bc39e:	f040 80aa 	bne.w	bc4f6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bc3a2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc3a6:	b193      	cbz	r3, bc3ce <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bc3a8:	496c      	ldr	r1, [pc, #432]	; (bc55c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bc3aa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3ae:	f003 f8e6 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc3b2:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc3b6:	f001 f867 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   bc3ba:	220a      	movs	r2, #10
   bc3bc:	1b81      	subs	r1, r0, r6
   bc3be:	4628      	mov	r0, r5
   bc3c0:	f7fb fc7f 	bl	b7cc2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc3c4:	4964      	ldr	r1, [pc, #400]	; (bc558 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc3c6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3ca:	f003 f8f2 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bc3ce:	200a      	movs	r0, #10
   bc3d0:	e7cc      	b.n	bc36c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bc3d2:	42bb      	cmp	r3, r7
   bc3d4:	d102      	bne.n	bc3dc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc3d6:	786b      	ldrb	r3, [r5, #1]
   bc3d8:	4543      	cmp	r3, r8
   bc3da:	d019      	beq.n	bc410 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bc3dc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc3e0:	b193      	cbz	r3, bc408 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bc3e2:	495f      	ldr	r1, [pc, #380]	; (bc560 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bc3e4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3e8:	f003 f8c9 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc3ec:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc3f0:	f001 f84a 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   bc3f4:	220a      	movs	r2, #10
   bc3f6:	1b81      	subs	r1, r0, r6
   bc3f8:	4628      	mov	r0, r5
   bc3fa:	f7fb fc62 	bl	b7cc2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc3fe:	4956      	ldr	r1, [pc, #344]	; (bc558 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc400:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc404:	f003 f8d5 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bc408:	200d      	movs	r0, #13
   bc40a:	e7af      	b.n	bc36c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc40c:	2901      	cmp	r1, #1
   bc40e:	d172      	bne.n	bc4f6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bc410:	89eb      	ldrh	r3, [r5, #14]
   bc412:	bb8b      	cbnz	r3, bc478 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc414:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc418:	b193      	cbz	r3, bc440 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bc41a:	4952      	ldr	r1, [pc, #328]	; (bc564 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bc41c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc420:	f003 f8ad 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc424:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc428:	f001 f82e 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   bc42c:	220a      	movs	r2, #10
   bc42e:	1b81      	subs	r1, r0, r6
   bc430:	4628      	mov	r0, r5
   bc432:	f7fb fc46 	bl	b7cc2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc436:	4948      	ldr	r1, [pc, #288]	; (bc558 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc438:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc43c:	f003 f8b9 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bc440:	2002      	movs	r0, #2
   bc442:	e793      	b.n	bc36c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc444:	430b      	orrs	r3, r1
   bc446:	d117      	bne.n	bc478 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc448:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc44c:	b193      	cbz	r3, bc474 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bc44e:	4946      	ldr	r1, [pc, #280]	; (bc568 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bc450:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc454:	f003 f893 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc458:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc45c:	f001 f814 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   bc460:	220a      	movs	r2, #10
   bc462:	1b81      	subs	r1, r0, r6
   bc464:	4628      	mov	r0, r5
   bc466:	f7fb fc2c 	bl	b7cc2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc46a:	493b      	ldr	r1, [pc, #236]	; (bc558 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc46c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc470:	f003 f89f 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bc474:	2001      	movs	r0, #1
   bc476:	e779      	b.n	bc36c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bc478:	2001      	movs	r0, #1
   bc47a:	f004 f97b 	bl	c0774 <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc47e:	e752      	b.n	bc326 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc480:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bc482:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc486:	2a01      	cmp	r2, #1
   bc488:	d11f      	bne.n	bc4ca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc48a:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bc48e:	2a02      	cmp	r2, #2
   bc490:	d11b      	bne.n	bc4ca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc492:	7baa      	ldrb	r2, [r5, #14]
   bc494:	2a01      	cmp	r2, #1
   bc496:	d118      	bne.n	bc4ca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc498:	782a      	ldrb	r2, [r5, #0]
   bc49a:	42ba      	cmp	r2, r7
   bc49c:	d115      	bne.n	bc4ca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc49e:	786a      	ldrb	r2, [r5, #1]
   bc4a0:	4542      	cmp	r2, r8
   bc4a2:	d112      	bne.n	bc4ca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bc4a4:	2b00      	cmp	r3, #0
   bc4a6:	f43f af60 	beq.w	bc36a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bc4aa:	4930      	ldr	r1, [pc, #192]	; (bc56c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bc4ac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4b0:	f003 f865 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bc4b4:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc4b8:	f000 ffe6 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   bc4bc:	220a      	movs	r2, #10
   bc4be:	1b81      	subs	r1, r0, r6
   bc4c0:	4628      	mov	r0, r5
   bc4c2:	f7fb fbfe 	bl	b7cc2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bc4c6:	492a      	ldr	r1, [pc, #168]	; (bc570 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bc4c8:	e761      	b.n	bc38e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bc4ca:	b193      	cbz	r3, bc4f2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bc4cc:	4929      	ldr	r1, [pc, #164]	; (bc574 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bc4ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4d2:	f003 f854 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bc4d6:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc4da:	f000 ffd5 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   bc4de:	220a      	movs	r2, #10
   bc4e0:	1b81      	subs	r1, r0, r6
   bc4e2:	4628      	mov	r0, r5
   bc4e4:	f7fb fbed 	bl	b7cc2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bc4e8:	4923      	ldr	r1, [pc, #140]	; (bc578 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bc4ea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4ee:	f003 f860 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bc4f2:	2003      	movs	r0, #3
   bc4f4:	e73a      	b.n	bc36c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc4f6:	2903      	cmp	r1, #3
   bc4f8:	d1a4      	bne.n	bc444 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bc4fa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc4fe:	b193      	cbz	r3, bc526 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bc500:	491e      	ldr	r1, [pc, #120]	; (bc57c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bc502:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc506:	f003 f83a 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc50a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc50e:	f000 ffbb 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   bc512:	220a      	movs	r2, #10
   bc514:	1b81      	subs	r1, r0, r6
   bc516:	4628      	mov	r0, r5
   bc518:	f7fb fbd3 	bl	b7cc2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc51c:	490e      	ldr	r1, [pc, #56]	; (bc558 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc51e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc522:	f003 f846 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bc526:	2004      	movs	r0, #4
   bc528:	e720      	b.n	bc36c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc52a:	2903      	cmp	r1, #3
   bc52c:	d0e5      	beq.n	bc4fa <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc52e:	2900      	cmp	r1, #0
   bc530:	d1a2      	bne.n	bc478 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc532:	7bab      	ldrb	r3, [r5, #14]
   bc534:	2b01      	cmp	r3, #1
   bc536:	d19f      	bne.n	bc478 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc538:	782b      	ldrb	r3, [r5, #0]
   bc53a:	42bb      	cmp	r3, r7
   bc53c:	d19c      	bne.n	bc478 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc53e:	786b      	ldrb	r3, [r5, #1]
   bc540:	4543      	cmp	r3, r8
   bc542:	d199      	bne.n	bc478 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc544:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc548:	2b00      	cmp	r3, #0
   bc54a:	f43f af0e 	beq.w	bc36a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bc54e:	490c      	ldr	r1, [pc, #48]	; (bc580 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bc550:	e70f      	b.n	bc372 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bc552:	bf00      	nop
   bc554:	000c6ea4 	.word	0x000c6ea4
   bc558:	000c6ee1 	.word	0x000c6ee1
   bc55c:	000c6ee7 	.word	0x000c6ee7
   bc560:	000c6f18 	.word	0x000c6f18
   bc564:	000c6f4a 	.word	0x000c6f4a
   bc568:	000c6fea 	.word	0x000c6fea
   bc56c:	000c702b 	.word	0x000c702b
   bc570:	000c705e 	.word	0x000c705e
   bc574:	000c7066 	.word	0x000c7066
   bc578:	000c7089 	.word	0x000c7089
   bc57c:	000c6f70 	.word	0x000c6f70
   bc580:	000c6fab 	.word	0x000c6fab

000bc584 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bc584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc588:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc58a:	2102      	movs	r1, #2
   bc58c:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc58e:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc592:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc596:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc59a:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc59c:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc5a0:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc5a4:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc5a8:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bc5ac:	4604      	mov	r4, r0
   bc5ae:	4617      	mov	r7, r2
   bc5b0:	4698      	mov	r8, r3
   bc5b2:	f000 ff69 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc5b6:	f240 1a01 	movw	sl, #257	; 0x101
   bc5ba:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc5bc:	f240 2b01 	movw	fp, #513	; 0x201
   bc5c0:	f000 ff62 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bc5c4:	1b80      	subs	r0, r0, r6
   bc5c6:	4548      	cmp	r0, r9
   bc5c8:	d269      	bcs.n	bc69e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc5ca:	4643      	mov	r3, r8
   bc5cc:	463a      	mov	r2, r7
   bc5ce:	4629      	mov	r1, r5
   bc5d0:	4620      	mov	r0, r4
   bc5d2:	f7ff fe75 	bl	bc2c0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc5d6:	2800      	cmp	r0, #0
   bc5d8:	d05d      	beq.n	bc696 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc5da:	89ea      	ldrh	r2, [r5, #14]
   bc5dc:	4552      	cmp	r2, sl
   bc5de:	d11e      	bne.n	bc61e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bc5e0:	782b      	ldrb	r3, [r5, #0]
   bc5e2:	42bb      	cmp	r3, r7
   bc5e4:	d11b      	bne.n	bc61e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bc5e6:	786b      	ldrb	r3, [r5, #1]
   bc5e8:	4543      	cmp	r3, r8
   bc5ea:	d118      	bne.n	bc61e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bc5ec:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc5f0:	b193      	cbz	r3, bc618 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bc5f2:	4937      	ldr	r1, [pc, #220]	; (bc6d0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bc5f4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5f8:	f002 ffc1 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc5fc:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc600:	f000 ff42 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   bc604:	220a      	movs	r2, #10
   bc606:	1b81      	subs	r1, r0, r6
   bc608:	4628      	mov	r0, r5
   bc60a:	f7fb fb5a 	bl	b7cc2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc60e:	4931      	ldr	r1, [pc, #196]	; (bc6d4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc610:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc614:	f002 ffcd 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bc618:	200b      	movs	r0, #11
}
   bc61a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bc61e:	7beb      	ldrb	r3, [r5, #15]
   bc620:	2b01      	cmp	r3, #1
   bc622:	d11d      	bne.n	bc660 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bc624:	782b      	ldrb	r3, [r5, #0]
   bc626:	42bb      	cmp	r3, r7
   bc628:	d102      	bne.n	bc630 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bc62a:	786b      	ldrb	r3, [r5, #1]
   bc62c:	4543      	cmp	r3, r8
   bc62e:	d032      	beq.n	bc696 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bc630:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc634:	b193      	cbz	r3, bc65c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bc636:	4928      	ldr	r1, [pc, #160]	; (bc6d8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bc638:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc63c:	f002 ff9f 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc640:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc644:	f000 ff20 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   bc648:	220a      	movs	r2, #10
   bc64a:	1b81      	subs	r1, r0, r6
   bc64c:	4628      	mov	r0, r5
   bc64e:	f7fb fb38 	bl	b7cc2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc652:	4920      	ldr	r1, [pc, #128]	; (bc6d4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc654:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc658:	f002 ffab 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bc65c:	200d      	movs	r0, #13
   bc65e:	e7dc      	b.n	bc61a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc660:	455a      	cmp	r2, fp
   bc662:	d018      	beq.n	bc696 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bc664:	b9bb      	cbnz	r3, bc696 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bc666:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc66a:	b193      	cbz	r3, bc692 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bc66c:	491b      	ldr	r1, [pc, #108]	; (bc6dc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bc66e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc672:	f002 ff84 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc676:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc67a:	f000 ff05 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   bc67e:	220a      	movs	r2, #10
   bc680:	1b81      	subs	r1, r0, r6
   bc682:	4628      	mov	r0, r5
   bc684:	f7fb fb1d 	bl	b7cc2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc688:	4912      	ldr	r1, [pc, #72]	; (bc6d4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc68a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc68e:	f002 ff90 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bc692:	2002      	movs	r0, #2
   bc694:	e7c1      	b.n	bc61a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bc696:	2001      	movs	r0, #1
   bc698:	f004 f86c 	bl	c0774 <delay>
  while (millis() - startTime < maxTime)
   bc69c:	e790      	b.n	bc5c0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bc69e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc6a2:	b193      	cbz	r3, bc6ca <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bc6a4:	490e      	ldr	r1, [pc, #56]	; (bc6e0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bc6a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6aa:	f002 ff68 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bc6ae:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc6b2:	f000 fee9 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
   bc6b6:	220a      	movs	r2, #10
   bc6b8:	1b81      	subs	r1, r0, r6
   bc6ba:	4628      	mov	r0, r5
   bc6bc:	f7fb fb01 	bl	b7cc2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bc6c0:	4908      	ldr	r1, [pc, #32]	; (bc6e4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bc6c2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6c6:	f002 ff74 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bc6ca:	2003      	movs	r0, #3
   bc6cc:	e7a5      	b.n	bc61a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bc6ce:	bf00      	nop
   bc6d0:	000c7090 	.word	0x000c7090
   bc6d4:	000c6ee1 	.word	0x000c6ee1
   bc6d8:	000c70ca 	.word	0x000c70ca
   bc6dc:	000c70fe 	.word	0x000c70fe
   bc6e0:	000c7137 	.word	0x000c7137
   bc6e4:	000c715c 	.word	0x000c715c

000bc6e8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bc6e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bc6ec:	4604      	mov	r4, r0
   bc6ee:	4698      	mov	r8, r3
   bc6f0:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bc6f2:	f7fc fcc9 	bl	b9088 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bc6f6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bc6fa:	460d      	mov	r5, r1
  if (_printDebug == true)
   bc6fc:	b14b      	cbz	r3, bc712 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bc6fe:	492a      	ldr	r1, [pc, #168]	; (bc7a8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bc700:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc704:	f002 ff3b 	bl	bf57e <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bc708:	2201      	movs	r2, #1
   bc70a:	4629      	mov	r1, r5
   bc70c:	4620      	mov	r0, r4
   bc70e:	f7fc fee9 	bl	b94e4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bc712:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bc716:	b993      	cbnz	r3, bc73e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bc718:	463a      	mov	r2, r7
   bc71a:	4629      	mov	r1, r5
   bc71c:	4620      	mov	r0, r4
   bc71e:	f7fc fce1 	bl	b90e4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bc722:	4606      	mov	r6, r0
   bc724:	b188      	cbz	r0, bc74a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bc726:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc72a:	b123      	cbz	r3, bc736 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bc72c:	491f      	ldr	r1, [pc, #124]	; (bc7ac <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bc72e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc732:	f002 ff3e 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bc736:	4630      	mov	r0, r6
   bc738:	b002      	add	sp, #8
   bc73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bc73e:	2b01      	cmp	r3, #1
   bc740:	d11b      	bne.n	bc77a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bc742:	4629      	mov	r1, r5
   bc744:	4620      	mov	r0, r4
   bc746:	f7fc fd8f 	bl	b9268 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bc74a:	b35f      	cbz	r7, bc7a4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bc74c:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bc74e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bc752:	2a06      	cmp	r2, #6
   bc754:	d002      	beq.n	bc75c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bc756:	f1b8 0f00 	cmp.w	r8, #0
   bc75a:	d015      	beq.n	bc788 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bc75c:	b123      	cbz	r3, bc768 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bc75e:	4914      	ldr	r1, [pc, #80]	; (bc7b0 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bc760:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc764:	f002 ff25 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc768:	786b      	ldrb	r3, [r5, #1]
   bc76a:	782a      	ldrb	r2, [r5, #0]
   bc76c:	9700      	str	r7, [sp, #0]
   bc76e:	4629      	mov	r1, r5
   bc770:	4620      	mov	r0, r4
   bc772:	f7ff fdbd 	bl	bc2f0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc776:	4606      	mov	r6, r0
   bc778:	e7dd      	b.n	bc736 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bc77a:	2b02      	cmp	r3, #2
   bc77c:	d1e5      	bne.n	bc74a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bc77e:	4629      	mov	r1, r5
   bc780:	4620      	mov	r0, r4
   bc782:	f7fc fdcb 	bl	b931c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bc786:	e7e0      	b.n	bc74a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bc788:	b123      	cbz	r3, bc794 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bc78a:	490a      	ldr	r1, [pc, #40]	; (bc7b4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bc78c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc790:	f002 ff0f 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc794:	786b      	ldrb	r3, [r5, #1]
   bc796:	782a      	ldrb	r2, [r5, #0]
   bc798:	9700      	str	r7, [sp, #0]
   bc79a:	4629      	mov	r1, r5
   bc79c:	4620      	mov	r0, r4
   bc79e:	f7ff fef1 	bl	bc584 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bc7a2:	e7e8      	b.n	bc776 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bc7a4:	463e      	mov	r6, r7
   bc7a6:	e7c6      	b.n	bc736 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bc7a8:	000c7177 	.word	0x000c7177
   bc7ac:	000c7182 	.word	0x000c7182
   bc7b0:	000c719a 	.word	0x000c719a
   bc7b4:	000c71c0 	.word	0x000c71c0

000bc7b8 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bc7b8:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bc7ba:	4b09      	ldr	r3, [pc, #36]	; (bc7e0 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bc7bc:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc7c0:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc7c4:	2300      	movs	r3, #0
   bc7c6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bc7ca:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bc7cc:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bc7d0:	f7ff ff8a 	bl	bc6e8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bc7d4:	f1a0 030b 	sub.w	r3, r0, #11
   bc7d8:	4258      	negs	r0, r3
   bc7da:	4158      	adcs	r0, r3
   bc7dc:	bd38      	pop	{r3, r4, r5, pc}
   bc7de:	bf00      	nop
   bc7e0:	00010006 	.word	0x00010006

000bc7e4 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bc7e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc7e6:	4615      	mov	r5, r2
   bc7e8:	461a      	mov	r2, r3
   bc7ea:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bc7ec:	9301      	str	r3, [sp, #4]
   bc7ee:	f7ff ffe3 	bl	bc7b8 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bc7f2:	b190      	cbz	r0, bc81a <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bc7f4:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc7f8:	4b09      	ldr	r3, [pc, #36]	; (bc820 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bc7fa:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc7fe:	2300      	movs	r3, #0
   bc800:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc804:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bc806:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc808:	4620      	mov	r0, r4
   bc80a:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc80e:	f7ff ff6b 	bl	bc6e8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bc812:	f1a0 030a 	sub.w	r3, r0, #10
   bc816:	4258      	negs	r0, r3
   bc818:	4158      	adcs	r0, r3
}
   bc81a:	b003      	add	sp, #12
   bc81c:	bd30      	pop	{r4, r5, pc}
   bc81e:	bf00      	nop
   bc820:	00140006 	.word	0x00140006

000bc824 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bc824:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc826:	4615      	mov	r5, r2
   bc828:	461a      	mov	r2, r3
   bc82a:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bc82c:	9301      	str	r3, [sp, #4]
   bc82e:	f7ff ffc3 	bl	bc7b8 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bc832:	b190      	cbz	r0, bc85a <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bc834:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc838:	4b09      	ldr	r3, [pc, #36]	; (bc860 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bc83a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc83e:	2300      	movs	r3, #0
   bc840:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc844:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bc846:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc848:	4620      	mov	r0, r4
   bc84a:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc84e:	f7ff ff4b 	bl	bc6e8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bc852:	f1a0 030a 	sub.w	r3, r0, #10
   bc856:	4258      	negs	r0, r3
   bc858:	4158      	adcs	r0, r3
}
   bc85a:	b003      	add	sp, #12
   bc85c:	bd30      	pop	{r4, r5, pc}
   bc85e:	bf00      	nop
   bc860:	00140006 	.word	0x00140006

000bc864 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bc864:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bc866:	460a      	mov	r2, r1
   bc868:	2100      	movs	r1, #0
   bc86a:	f7ff bfbb 	b.w	bc7e4 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bc870 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bc870:	b510      	push	{r4, lr}
   bc872:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bc874:	2018      	movs	r0, #24
   bc876:	f7f7 fc0e 	bl	b4096 <_Znwj>
   bc87a:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bc87c:	b960      	cbnz	r0, bc898 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc87e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc882:	b913      	cbnz	r3, bc88a <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bc884:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc888:	b128      	cbz	r0, bc896 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bc88a:	4905      	ldr	r1, [pc, #20]	; (bc8a0 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bc88c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc890:	f002 fe8f 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc894:	2000      	movs	r0, #0
}
   bc896:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bc898:	2300      	movs	r3, #0
   bc89a:	7503      	strb	r3, [r0, #20]
  return (true);
   bc89c:	2001      	movs	r0, #1
   bc89e:	e7fa      	b.n	bc896 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bc8a0:	000c71e9 	.word	0x000c71e9

000bc8a4 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bc8a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bc8a6:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bc8a8:	4605      	mov	r5, r0
   bc8aa:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bc8ac:	b18b      	cbz	r3, bc8d2 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bc8ae:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc8b2:	4b13      	ldr	r3, [pc, #76]	; (bc900 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bc8b4:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc8b8:	2300      	movs	r3, #0
   bc8ba:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bc8be:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bc8c0:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bc8c2:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bc8c6:	f7ff ff0f 	bl	bc6e8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bc8ca:	280b      	cmp	r0, #11
   bc8cc:	d10b      	bne.n	bc8e6 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bc8ce:	2401      	movs	r4, #1
   bc8d0:	e00d      	b.n	bc8ee <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bc8d2:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bc8d4:	f7ff ffcc 	bl	bc870 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bc8d8:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bc8da:	9a01      	ldr	r2, [sp, #4]
   bc8dc:	2c00      	cmp	r4, #0
   bc8de:	d1e6      	bne.n	bc8ae <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bc8e0:	4620      	mov	r0, r4
   bc8e2:	b002      	add	sp, #8
   bc8e4:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bc8e6:	f1a0 030d 	sub.w	r3, r0, #13
   bc8ea:	425c      	negs	r4, r3
   bc8ec:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bc8ee:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bc8f0:	b110      	cbz	r0, bc8f8 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bc8f2:	2118      	movs	r1, #24
   bc8f4:	f7f7 fbd5 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bc8f8:	2300      	movs	r3, #0
   bc8fa:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bc8fc:	e7f0      	b.n	bc8e0 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bc8fe:	bf00      	nop
   bc900:	00010006 	.word	0x00010006

000bc904 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bc904:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bc906:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bc90a:	4604      	mov	r4, r0
   bc90c:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bc90e:	b145      	cbz	r5, bc922 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bc910:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bc914:	b9b1      	cbnz	r1, bc944 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc916:	4620      	mov	r0, r4
}
   bc918:	b003      	add	sp, #12
   bc91a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc91e:	f7ff bfc1 	b.w	bc8a4 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bc922:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bc924:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bc928:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bc92c:	f004 fc94 	bl	c1258 <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bc930:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc934:	f004 fc9b 	bl	c126e <_ZN7TwoWire15endTransmissionEv>
   bc938:	9a01      	ldr	r2, [sp, #4]
   bc93a:	2800      	cmp	r0, #0
   bc93c:	d0e8      	beq.n	bc910 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bc93e:	4628      	mov	r0, r5
   bc940:	b003      	add	sp, #12
   bc942:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bc944:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc946:	bf18      	it	ne
   bc948:	2104      	movne	r1, #4
   bc94a:	e7e4      	b.n	bc916 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bc94c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bc94c:	b570      	push	{r4, r5, r6, lr}
   bc94e:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bc950:	2300      	movs	r3, #0
   bc952:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bc956:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bc95a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bc95e:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bc962:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bc966:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bc968:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bc96c:	b91b      	cbnz	r3, bc976 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bc96e:	f44f 7180 	mov.w	r1, #256	; 0x100
   bc972:	f7fb fa45 	bl	b7e00 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bc976:	4620      	mov	r0, r4
   bc978:	f7fc fe5c 	bl	b9634 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bc97c:	4631      	mov	r1, r6
   bc97e:	4620      	mov	r0, r4
   bc980:	f7ff ffc0 	bl	bc904 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bc984:	b110      	cbz	r0, bc98c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bc986:	2501      	movs	r5, #1
}
   bc988:	4628      	mov	r0, r5
   bc98a:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc98c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc990:	b913      	cbnz	r3, bc998 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bc992:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc996:	b123      	cbz	r3, bc9a2 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bc998:	4917      	ldr	r1, [pc, #92]	; (bc9f8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bc99a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc99e:	f002 fe08 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bc9a2:	4631      	mov	r1, r6
   bc9a4:	4620      	mov	r0, r4
   bc9a6:	f7ff ffad 	bl	bc904 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bc9aa:	2800      	cmp	r0, #0
   bc9ac:	d1eb      	bne.n	bc986 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc9ae:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc9b2:	b913      	cbnz	r3, bc9ba <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bc9b4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc9b8:	b123      	cbz	r3, bc9c4 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bc9ba:	4910      	ldr	r1, [pc, #64]	; (bc9fc <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bc9bc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9c0:	f002 fdf7 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bc9c4:	4631      	mov	r1, r6
   bc9c6:	4620      	mov	r0, r4
   bc9c8:	f7ff ff9c 	bl	bc904 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bc9cc:	2800      	cmp	r0, #0
   bc9ce:	d1da      	bne.n	bc986 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bc9d0:	2d00      	cmp	r5, #0
   bc9d2:	d0d9      	beq.n	bc988 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bc9d4:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bc9d8:	2d00      	cmp	r5, #0
   bc9da:	d0d5      	beq.n	bc988 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc9dc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc9e0:	b91b      	cbnz	r3, bc9ea <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bc9e2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc9e6:	2b00      	cmp	r3, #0
   bc9e8:	d0cd      	beq.n	bc986 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bc9ea:	4905      	ldr	r1, [pc, #20]	; (bca00 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bc9ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9f0:	f002 fddf 	bl	bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc9f4:	e7c8      	b.n	bc988 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bc9f6:	bf00      	nop
   bc9f8:	000c7210 	.word	0x000c7210
   bc9fc:	000c7234 	.word	0x000c7234
   bca00:	000c7257 	.word	0x000c7257

000bca04 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   bca04:	4770      	bx	lr

000bca06 <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   bca06:	4770      	bx	lr

000bca08 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   bca08:	b538      	push	{r3, r4, r5, lr}
   bca0a:	460c      	mov	r4, r1
   bca0c:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   bca0e:	2220      	movs	r2, #32
   bca10:	2100      	movs	r1, #0
   bca12:	f104 0008 	add.w	r0, r4, #8
   bca16:	f007 f9db 	bl	c3dd0 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   bca1a:	4909      	ldr	r1, [pc, #36]	; (bca40 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   bca1c:	220b      	movs	r2, #11
   bca1e:	4620      	mov	r0, r4
   bca20:	f007 fa90 	bl	c3f44 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   bca24:	2301      	movs	r3, #1
   bca26:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   bca28:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bca2a:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   bca2c:	2302      	movs	r3, #2
   bca2e:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   bca30:	4b04      	ldr	r3, [pc, #16]	; (bca44 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   bca32:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   bca34:	4b04      	ldr	r3, [pc, #16]	; (bca48 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   bca36:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   bca38:	4b04      	ldr	r3, [pc, #16]	; (bca4c <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   bca3a:	6223      	str	r3, [r4, #32]
}
   bca3c:	bd38      	pop	{r3, r4, r5, pc}
   bca3e:	bf00      	nop
   bca40:	000c7375 	.word	0x000c7375
   bca44:	c4c80000 	.word	0xc4c80000
   bca48:	44c80000 	.word	0x44c80000
   bca4c:	3c75c28f 	.word	0x3c75c28f

000bca50 <_ZN16Adafruit_LIS3MDLD0Ev>:
   bca50:	b510      	push	{r4, lr}
   bca52:	2128      	movs	r1, #40	; 0x28
   bca54:	4604      	mov	r4, r0
   bca56:	f7f7 fb24 	bl	b40a2 <_ZdlPvj>
   bca5a:	4620      	mov	r0, r4
   bca5c:	bd10      	pop	{r4, pc}
	...

000bca60 <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   bca60:	4a03      	ldr	r2, [pc, #12]	; (bca70 <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   bca62:	6002      	str	r2, [r0, #0]
   bca64:	2200      	movs	r2, #0
   bca66:	e9c0 2207 	strd	r2, r2, [r0, #28]
   bca6a:	7602      	strb	r2, [r0, #24]
   bca6c:	4770      	bx	lr
   bca6e:	bf00      	nop
   bca70:	000c7398 	.word	0x000c7398

000bca74 <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   bca74:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   bca76:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   bca78:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   bca7a:	2200      	movs	r2, #0
   bca7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   bca80:	2506      	movs	r5, #6
   bca82:	2228      	movs	r2, #40	; 0x28
   bca84:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   bca88:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   bca8a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bca8e:	a806      	add	r0, sp, #24
   bca90:	f000 f9c8 	bl	bce24 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   bca94:	462a      	mov	r2, r5
   bca96:	a904      	add	r1, sp, #16
   bca98:	a806      	add	r0, sp, #24
   bca9a:	f000 fa41 	bl	bcf20 <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   bca9e:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   bcaa0:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   bcaa4:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   bcaa8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   bcaac:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   bcaae:	2d03      	cmp	r5, #3
   bcab0:	bf98      	it	ls
   bcab2:	4812      	ldrls	r0, [pc, #72]	; (bcafc <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   bcab4:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   bcab6:	ee07 1a10 	vmov	s14, r1
   bcaba:	bf9c      	itt	ls
   bcabc:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   bcac0:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   bcac4:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   bcac6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   bcaca:	bf88      	it	hi
   bcacc:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   bcad0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   bcad4:	ee07 2a10 	vmov	s14, r2
   bcad8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   bcadc:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   bcae0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   bcae4:	ee07 3a10 	vmov	s14, r3
   bcae8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   bcaec:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   bcaf0:	eec7 6a27 	vdiv.f32	s13, s14, s15
   bcaf4:	edc4 6a05 	vstr	s13, [r4, #20]
}
   bcaf8:	b00d      	add	sp, #52	; 0x34
   bcafa:	bd30      	pop	{r4, r5, pc}
   bcafc:	000c7380 	.word	0x000c7380

000bcb00 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   bcb00:	b538      	push	{r3, r4, r5, lr}
   bcb02:	460c      	mov	r4, r1
   bcb04:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   bcb06:	2220      	movs	r2, #32
   bcb08:	2100      	movs	r1, #0
   bcb0a:	1d20      	adds	r0, r4, #4
   bcb0c:	f007 f960 	bl	c3dd0 <memset>
  event->version = sizeof(sensors_event_t);
   bcb10:	2324      	movs	r3, #36	; 0x24
   bcb12:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   bcb14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bcb16:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   bcb18:	2302      	movs	r3, #2
   bcb1a:	60a3      	str	r3, [r4, #8]
   bcb1c:	f000 fcb4 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   bcb20:	6120      	str	r0, [r4, #16]
  read();
   bcb22:	4628      	mov	r0, r5
   bcb24:	f7ff ffa6 	bl	bca74 <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   bcb28:	edd5 7a03 	vldr	s15, [r5, #12]
   bcb2c:	ed9f 7a09 	vldr	s14, [pc, #36]	; bcb54 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   bcb30:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   bcb34:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   bcb36:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   bcb3a:	edd5 7a04 	vldr	s15, [r5, #16]
   bcb3e:	ee67 7a87 	vmul.f32	s15, s15, s14
   bcb42:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   bcb46:	edd5 7a05 	vldr	s15, [r5, #20]
   bcb4a:	ee67 7a87 	vmul.f32	s15, s15, s14
   bcb4e:	edc4 7a07 	vstr	s15, [r4, #28]
}
   bcb52:	bd38      	pop	{r3, r4, r5, pc}
   bcb54:	42c80000 	.word	0x42c80000

000bcb58 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   bcb58:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   bcb5a:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   bcb5c:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   bcb5e:	2700      	movs	r7, #0
   bcb60:	e9cd 7502 	strd	r7, r5, [sp, #8]
   bcb64:	2320      	movs	r3, #32
   bcb66:	9300      	str	r3, [sp, #0]
   bcb68:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   bcb6a:	460e      	mov	r6, r1
   bcb6c:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   bcb6e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bcb72:	462b      	mov	r3, r5
   bcb74:	a808      	add	r0, sp, #32
   bcb76:	f000 f955 	bl	bce24 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   bcb7a:	2305      	movs	r3, #5
   bcb7c:	2202      	movs	r2, #2
   bcb7e:	a908      	add	r1, sp, #32
   bcb80:	a804      	add	r0, sp, #16
   bcb82:	f000 fa2b 	bl	bcfdc <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   bcb86:	4631      	mov	r1, r6
   bcb88:	a804      	add	r0, sp, #16
   bcb8a:	f000 fa39 	bl	bd000 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   bcb8e:	2323      	movs	r3, #35	; 0x23
   bcb90:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   bcb94:	9300      	str	r3, [sp, #0]
   bcb96:	e9cd 7502 	strd	r7, r5, [sp, #8]
   bcb9a:	462b      	mov	r3, r5
   bcb9c:	9501      	str	r5, [sp, #4]
   bcb9e:	a80e      	add	r0, sp, #56	; 0x38
   bcba0:	f000 f940 	bl	bce24 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   bcba4:	2302      	movs	r3, #2
   bcba6:	461a      	mov	r2, r3
   bcba8:	a90e      	add	r1, sp, #56	; 0x38
   bcbaa:	a806      	add	r0, sp, #24
   bcbac:	f000 fa16 	bl	bcfdc <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   bcbb0:	4631      	mov	r1, r6
   bcbb2:	a806      	add	r0, sp, #24
   bcbb4:	f000 fa24 	bl	bd000 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   bcbb8:	b015      	add	sp, #84	; 0x54
   bcbba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bcbbc <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   bcbbc:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   bcbbe:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   bcbc0:	b08c      	sub	sp, #48	; 0x30
   bcbc2:	4606      	mov	r6, r0
   bcbc4:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   bcbc6:	d103      	bne.n	bcbd0 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   bcbc8:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   bcbca:	f7ff ffc5 	bl	bcb58 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   bcbce:	e009      	b.n	bcbe4 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   bcbd0:	2903      	cmp	r1, #3
   bcbd2:	d003      	beq.n	bcbdc <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   bcbd4:	2905      	cmp	r1, #5
   bcbd6:	d103      	bne.n	bcbe0 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   bcbd8:	2101      	movs	r1, #1
   bcbda:	e7f6      	b.n	bcbca <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   bcbdc:	2102      	movs	r1, #2
   bcbde:	e7f4      	b.n	bcbca <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   bcbe0:	2907      	cmp	r1, #7
   bcbe2:	d01b      	beq.n	bcc1c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   bcbe4:	200a      	movs	r0, #10
   bcbe6:	f003 fdc5 	bl	c0774 <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   bcbea:	2501      	movs	r5, #1
   bcbec:	2300      	movs	r3, #0
   bcbee:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bcbf2:	2320      	movs	r3, #32
   bcbf4:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   bcbf8:	9300      	str	r3, [sp, #0]
   bcbfa:	9501      	str	r5, [sp, #4]
   bcbfc:	462b      	mov	r3, r5
   bcbfe:	a806      	add	r0, sp, #24
   bcc00:	f000 f910 	bl	bce24 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   bcc04:	462b      	mov	r3, r5
   bcc06:	2204      	movs	r2, #4
   bcc08:	a906      	add	r1, sp, #24
   bcc0a:	a804      	add	r0, sp, #16
   bcc0c:	f000 f9e6 	bl	bcfdc <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   bcc10:	4621      	mov	r1, r4
   bcc12:	a804      	add	r0, sp, #16
   bcc14:	f000 f9f4 	bl	bd000 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   bcc18:	b00c      	add	sp, #48	; 0x30
   bcc1a:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   bcc1c:	2100      	movs	r1, #0
   bcc1e:	e7d4      	b.n	bcbca <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000bcc20 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   bcc20:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   bcc22:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   bcc24:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   bcc26:	2500      	movs	r5, #0
   bcc28:	e9cd 5302 	strd	r5, r3, [sp, #8]
   bcc2c:	2222      	movs	r2, #34	; 0x22
   bcc2e:	9301      	str	r3, [sp, #4]
   bcc30:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   bcc32:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   bcc34:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bcc38:	a806      	add	r0, sp, #24
   bcc3a:	f000 f8f3 	bl	bce24 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   bcc3e:	462b      	mov	r3, r5
   bcc40:	2202      	movs	r2, #2
   bcc42:	a906      	add	r1, sp, #24
   bcc44:	a804      	add	r0, sp, #16
   bcc46:	f000 f9c9 	bl	bcfdc <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   bcc4a:	4621      	mov	r1, r4
   bcc4c:	a804      	add	r0, sp, #16
   bcc4e:	f000 f9d7 	bl	bd000 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   bcc52:	b00d      	add	sp, #52	; 0x34
   bcc54:	bd30      	pop	{r4, r5, pc}

000bcc56 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   bcc56:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   bcc58:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   bcc5a:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   bcc5c:	2200      	movs	r2, #0
   bcc5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   bcc62:	2221      	movs	r2, #33	; 0x21
   bcc64:	9301      	str	r3, [sp, #4]
   bcc66:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   bcc68:	460d      	mov	r5, r1
   bcc6a:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   bcc6c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bcc70:	a806      	add	r0, sp, #24
   bcc72:	f000 f8d7 	bl	bce24 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   bcc76:	2305      	movs	r3, #5
   bcc78:	2202      	movs	r2, #2
   bcc7a:	a906      	add	r1, sp, #24
   bcc7c:	a804      	add	r0, sp, #16
   bcc7e:	f000 f9ad 	bl	bcfdc <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   bcc82:	4629      	mov	r1, r5
   bcc84:	a804      	add	r0, sp, #16
   bcc86:	f000 f9bb 	bl	bd000 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   bcc8a:	7625      	strb	r5, [r4, #24]
}
   bcc8c:	b00d      	add	sp, #52	; 0x34
   bcc8e:	bd30      	pop	{r4, r5, pc}

000bcc90 <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   bcc90:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   bcc92:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   bcc94:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   bcc96:	2200      	movs	r2, #0
   bcc98:	e9cd 2302 	strd	r2, r3, [sp, #8]
   bcc9c:	2221      	movs	r2, #33	; 0x21
   bcc9e:	9301      	str	r3, [sp, #4]
   bcca0:	9200      	str	r2, [sp, #0]
   bcca2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   bcca6:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   bcca8:	a806      	add	r0, sp, #24
   bccaa:	f000 f8bb 	bl	bce24 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   bccae:	2305      	movs	r3, #5
   bccb0:	2202      	movs	r2, #2
   bccb2:	a906      	add	r1, sp, #24
   bccb4:	a804      	add	r0, sp, #16
   bccb6:	f000 f991 	bl	bcfdc <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   bccba:	a804      	add	r0, sp, #16
   bccbc:	f000 f993 	bl	bcfe6 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   bccc0:	b2c0      	uxtb	r0, r0
   bccc2:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   bccc4:	b00c      	add	sp, #48	; 0x30
   bccc6:	bd10      	pop	{r4, pc}

000bccc8 <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   bccc8:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   bccca:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   bcccc:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   bccce:	2501      	movs	r5, #1
   bccd0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bccd4:	2321      	movs	r3, #33	; 0x21
   bccd6:	9300      	str	r3, [sp, #0]
   bccd8:	9501      	str	r5, [sp, #4]
   bccda:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   bccde:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   bcce0:	462b      	mov	r3, r5
   bcce2:	a806      	add	r0, sp, #24
   bcce4:	f000 f89e 	bl	bce24 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   bcce8:	2302      	movs	r3, #2
   bccea:	462a      	mov	r2, r5
   bccec:	a906      	add	r1, sp, #24
   bccee:	a804      	add	r0, sp, #16
   bccf0:	f000 f974 	bl	bcfdc <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   bccf4:	4629      	mov	r1, r5
   bccf6:	a804      	add	r0, sp, #16
   bccf8:	f000 f982 	bl	bd000 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   bccfc:	200a      	movs	r0, #10
   bccfe:	f003 fd39 	bl	c0774 <delay>
  getRange();
   bcd02:	4620      	mov	r0, r4
   bcd04:	f7ff ffc4 	bl	bcc90 <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   bcd08:	b00d      	add	sp, #52	; 0x34
   bcd0a:	bd30      	pop	{r4, r5, pc}

000bcd0c <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   bcd0c:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   bcd0e:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   bcd10:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   bcd12:	2500      	movs	r5, #0
   bcd14:	e9cd 5602 	strd	r5, r6, [sp, #8]
   bcd18:	230f      	movs	r3, #15
   bcd1a:	9300      	str	r3, [sp, #0]
   bcd1c:	9601      	str	r6, [sp, #4]
   bcd1e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bcd22:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   bcd24:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   bcd26:	a804      	add	r0, sp, #16
   bcd28:	f000 f87c 	bl	bce24 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   bcd2c:	a804      	add	r0, sp, #16
   bcd2e:	f000 f939 	bl	bcfa4 <_ZN23Adafruit_BusIO_Register4readEv>
   bcd32:	283d      	cmp	r0, #61	; 0x3d
   bcd34:	d115      	bne.n	bcd62 <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   bcd36:	4620      	mov	r0, r4
   bcd38:	f7ff ffc6 	bl	bccc8 <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   bcd3c:	2103      	movs	r1, #3
   bcd3e:	4620      	mov	r0, r4
   bcd40:	f7ff ff0a 	bl	bcb58 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   bcd44:	4631      	mov	r1, r6
   bcd46:	4620      	mov	r0, r4
   bcd48:	f7ff ff38 	bl	bcbbc <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   bcd4c:	4629      	mov	r1, r5
   bcd4e:	4620      	mov	r0, r4
   bcd50:	f7ff ff81 	bl	bcc56 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   bcd54:	4620      	mov	r0, r4
   bcd56:	4629      	mov	r1, r5
   bcd58:	f7ff ff62 	bl	bcc20 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   bcd5c:	4630      	mov	r0, r6
}
   bcd5e:	b00a      	add	sp, #40	; 0x28
   bcd60:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   bcd62:	4628      	mov	r0, r5
   bcd64:	e7fb      	b.n	bcd5e <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000bcd66 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   bcd66:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   bcd68:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   bcd6a:	4604      	mov	r4, r0
  if (!i2c_dev) {
   bcd6c:	b95b      	cbnz	r3, bcd86 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   bcd6e:	2010      	movs	r0, #16
   bcd70:	e9cd 1200 	strd	r1, r2, [sp]
   bcd74:	f7f7 f98f 	bl	b4096 <_Znwj>
   bcd78:	4605      	mov	r5, r0
   bcd7a:	b118      	cbz	r0, bcd84 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   bcd7c:	e9dd 1200 	ldrd	r1, r2, [sp]
   bcd80:	f000 fa71 	bl	bd266 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   bcd84:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   bcd86:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   bcd88:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   bcd8a:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   bcd8c:	2101      	movs	r1, #1
   bcd8e:	f000 fa86 	bl	bd29e <_ZN18Adafruit_I2CDevice5beginEb>
   bcd92:	b128      	cbz	r0, bcda0 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   bcd94:	4620      	mov	r0, r4
}
   bcd96:	b003      	add	sp, #12
   bcd98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   bcd9c:	f7ff bfb6 	b.w	bcd0c <_ZN16Adafruit_LIS3MDL5_initEv>
}
   bcda0:	b003      	add	sp, #12
   bcda2:	bd30      	pop	{r4, r5, pc}

000bcda4 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   bcda4:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   bcda6:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   bcda8:	b08b      	sub	sp, #44	; 0x2c
   bcdaa:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   bcdac:	2500      	movs	r5, #0
   bcdae:	2232      	movs	r2, #50	; 0x32
   bcdb0:	2102      	movs	r1, #2
   bcdb2:	e9cd 5302 	strd	r5, r3, [sp, #8]
   bcdb6:	e9cd 2100 	strd	r2, r1, [sp]
   bcdba:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bcdbe:	a804      	add	r0, sp, #16
   bcdc0:	f000 f830 	bl	bce24 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   bcdc4:	462a      	mov	r2, r5
   bcdc6:	f3c4 010e 	ubfx	r1, r4, #0, #15
   bcdca:	a804      	add	r0, sp, #16
   bcdcc:	f000 f88a 	bl	bcee4 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   bcdd0:	b00b      	add	sp, #44	; 0x2c
   bcdd2:	bd30      	pop	{r4, r5, pc}

000bcdd4 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   bcdd4:	b530      	push	{r4, r5, lr}
   bcdd6:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   bcdd8:	2500      	movs	r5, #0
  value |= latch << 1;
   bcdda:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   bcdde:	0064      	lsls	r4, r4, #1
   bcde0:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   bcde4:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   bcde8:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   bcdec:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   bcdf0:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   bcdf4:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   bcdf8:	2301      	movs	r3, #1
  value |= latch << 1;
   bcdfa:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   bcdfe:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   bce02:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   bce04:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   bce06:	2230      	movs	r2, #48	; 0x30
   bce08:	9301      	str	r3, [sp, #4]
   bce0a:	9200      	str	r2, [sp, #0]
   bce0c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bce10:	a804      	add	r0, sp, #16
   bce12:	f000 f807 	bl	bce24 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   bce16:	462a      	mov	r2, r5
   bce18:	4621      	mov	r1, r4
   bce1a:	a804      	add	r0, sp, #16
   bce1c:	f000 f862 	bl	bcee4 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   bce20:	b00b      	add	sp, #44	; 0x2c
   bce22:	bd30      	pop	{r4, r5, pc}

000bce24 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bce24:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bce26:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bce28:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bce2c:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bce2e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bce32:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bce34:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bce38:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bce3a:	2500      	movs	r5, #0
  _width = width;
   bce3c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bce40:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bce42:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bce46:	7303      	strb	r3, [r0, #12]
}
   bce48:	bd30      	pop	{r4, r5, pc}

000bce4a <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bce4a:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bce4c:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bce4e:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bce50:	b085      	sub	sp, #20
   bce52:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bce54:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bce56:	f88d 400c 	strb.w	r4, [sp, #12]
   bce5a:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bce5c:	460e      	mov	r6, r1
   bce5e:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bce60:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bce64:	b140      	cbz	r0, bce78 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bce66:	7b5b      	ldrb	r3, [r3, #13]
   bce68:	9301      	str	r3, [sp, #4]
   bce6a:	ab03      	add	r3, sp, #12
   bce6c:	9300      	str	r3, [sp, #0]
   bce6e:	2301      	movs	r3, #1
   bce70:	f000 fa24 	bl	bd2bc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bce74:	b005      	add	sp, #20
   bce76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bce78:	6858      	ldr	r0, [r3, #4]
   bce7a:	2800      	cmp	r0, #0
   bce7c:	d0fa      	beq.n	bce74 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bce7e:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bce82:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bce86:	f1be 0f03 	cmp.w	lr, #3
   bce8a:	d10c      	bne.n	bcea6 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bce8c:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bce90:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bce94:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bce96:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bce9a:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bce9e:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bcea0:	f000 f97b 	bl	bd19a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bcea4:	e7e6      	b.n	bce74 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bcea6:	f1be 0f00 	cmp.w	lr, #0
   bceaa:	d109      	bne.n	bcec0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bceac:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bceb0:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bceb4:	f8cd c000 	str.w	ip, [sp]
   bceb8:	ab03      	add	r3, sp, #12
   bceba:	463a      	mov	r2, r7
   bcebc:	4631      	mov	r1, r6
   bcebe:	e7ef      	b.n	bcea0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bcec0:	f1be 0f02 	cmp.w	lr, #2
   bcec4:	d102      	bne.n	bcecc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bcec6:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bceca:	e7f1      	b.n	bceb0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bcecc:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bced0:	bf01      	itttt	eq
   bced2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bced6:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bceda:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bcede:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bcee2:	e7e7      	b.n	bceb4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bcee4 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bcee4:	b4f0      	push	{r4, r5, r6, r7}
   bcee6:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bcee8:	b902      	cbnz	r2, bceec <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bceea:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bceec:	2a04      	cmp	r2, #4
   bceee:	d814      	bhi.n	bcf1a <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bcef0:	f100 050f 	add.w	r5, r0, #15
   bcef4:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bcef6:	1884      	adds	r4, r0, r2
   bcef8:	4629      	mov	r1, r5
   bcefa:	4284      	cmp	r4, r0
   bcefc:	d009      	beq.n	bcf12 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bcefe:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bcf00:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bcf02:	b927      	cbnz	r7, bcf0e <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bcf04:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bcf06:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bcf08:	3501      	adds	r5, #1
   bcf0a:	3c01      	subs	r4, #1
   bcf0c:	e7f5      	b.n	bcefa <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bcf0e:	73a6      	strb	r6, [r4, #14]
   bcf10:	e7f9      	b.n	bcf06 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bcf12:	4620      	mov	r0, r4
}
   bcf14:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bcf16:	f7ff bf98 	b.w	bce4a <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bcf1a:	2000      	movs	r0, #0
   bcf1c:	bcf0      	pop	{r4, r5, r6, r7}
   bcf1e:	4770      	bx	lr

000bcf20 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcf20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bcf22:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bcf24:	7a85      	ldrb	r5, [r0, #10]
   bcf26:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcf2a:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bcf2c:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bcf2e:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcf30:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bcf32:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bcf36:	b140      	cbz	r0, bcf4a <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcf38:	2100      	movs	r1, #0
   bcf3a:	e9cd 2100 	strd	r2, r1, [sp]
   bcf3e:	a903      	add	r1, sp, #12
   bcf40:	7b62      	ldrb	r2, [r4, #13]
   bcf42:	f000 fa29 	bl	bd398 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bcf46:	b004      	add	sp, #16
   bcf48:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bcf4a:	6860      	ldr	r0, [r4, #4]
   bcf4c:	2800      	cmp	r0, #0
   bcf4e:	d0fa      	beq.n	bcf46 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bcf50:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcf52:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bcf54:	2903      	cmp	r1, #3
   bcf56:	d10d      	bne.n	bcf74 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bcf58:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bcf5c:	21ff      	movs	r1, #255	; 0xff
   bcf5e:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bcf62:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bcf66:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bcf6a:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcf6c:	a903      	add	r1, sp, #12
   bcf6e:	f000 f946 	bl	bd1fe <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bcf72:	e7e8      	b.n	bcf46 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bcf74:	b941      	cbnz	r1, bcf88 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bcf76:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bcf7a:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcf7e:	21ff      	movs	r1, #255	; 0xff
   bcf80:	e9cd 2100 	strd	r2, r1, [sp]
   bcf84:	4622      	mov	r2, r4
   bcf86:	e7f1      	b.n	bcf6c <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bcf88:	2902      	cmp	r1, #2
   bcf8a:	d102      	bne.n	bcf92 <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bcf8c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bcf90:	e7f3      	b.n	bcf7a <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bcf92:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bcf94:	bf02      	ittt	eq
   bcf96:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bcf9a:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bcf9e:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bcfa2:	e7ec      	b.n	bcf7e <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bcfa4 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bcfa4:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bcfa6:	f100 050f 	add.w	r5, r0, #15
   bcfaa:	7b02      	ldrb	r2, [r0, #12]
   bcfac:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bcfae:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bcfb0:	f7ff ffb6 	bl	bcf20 <_ZN23Adafruit_BusIO_Register4readEPhh>
   bcfb4:	b178      	cbz	r0, bcfd6 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bcfb6:	7b22      	ldrb	r2, [r4, #12]
   bcfb8:	4629      	mov	r1, r5
   bcfba:	4422      	add	r2, r4
  uint32_t value = 0;
   bcfbc:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bcfbe:	42a2      	cmp	r2, r4
   bcfc0:	d00b      	beq.n	bcfda <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bcfc2:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bcfc4:	7ba0      	ldrb	r0, [r4, #14]
   bcfc6:	b920      	cbnz	r0, bcfd2 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bcfc8:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bcfca:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bcfcc:	3a01      	subs	r2, #1
   bcfce:	3101      	adds	r1, #1
   bcfd0:	e7f5      	b.n	bcfbe <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bcfd2:	7808      	ldrb	r0, [r1, #0]
   bcfd4:	e7f9      	b.n	bcfca <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bcfd6:	f04f 30ff 	mov.w	r0, #4294967295
}
   bcfda:	bd38      	pop	{r3, r4, r5, pc}

000bcfdc <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bcfdc:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bcfde:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bcfe0:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bcfe2:	7143      	strb	r3, [r0, #5]
}
   bcfe4:	bd10      	pop	{r4, pc}

000bcfe6 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bcfe6:	b510      	push	{r4, lr}
   bcfe8:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bcfea:	6800      	ldr	r0, [r0, #0]
   bcfec:	f7ff ffda 	bl	bcfa4 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bcff0:	7922      	ldrb	r2, [r4, #4]
   bcff2:	2301      	movs	r3, #1
   bcff4:	4093      	lsls	r3, r2
  val >>= _shift;
   bcff6:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bcff8:	3b01      	subs	r3, #1
  val >>= _shift;
   bcffa:	40d0      	lsrs	r0, r2
}
   bcffc:	4018      	ands	r0, r3
   bcffe:	bd10      	pop	{r4, pc}

000bd000 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd000:	b570      	push	{r4, r5, r6, lr}
   bd002:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd004:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd006:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bd008:	f7ff ffcc 	bl	bcfa4 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bd00c:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bd00e:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bd010:	2201      	movs	r2, #1
   bd012:	409a      	lsls	r2, r3
   bd014:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bd016:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bd01a:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bd01e:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bd020:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bd022:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bd026:	4329      	orrs	r1, r5
   bd028:	7b02      	ldrb	r2, [r0, #12]
}
   bd02a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bd02e:	f7ff bf59 	b.w	bcee4 <_ZN23Adafruit_BusIO_Register5writeEmh>
	...

000bd034 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd038:	4604      	mov	r4, r0
  if (_spi) {
   bd03a:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd03c:	b085      	sub	sp, #20
   bd03e:	460d      	mov	r5, r1
  if (_spi) {
   bd040:	b140      	cbz	r0, bd054 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bd042:	2300      	movs	r3, #0
   bd044:	9300      	str	r3, [sp, #0]
   bd046:	4613      	mov	r3, r2
   bd048:	460a      	mov	r2, r1
   bd04a:	f000 ff4d 	bl	bdee8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bd04e:	b005      	add	sp, #20
   bd050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bd054:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd056:	68a0      	ldr	r0, [r4, #8]
   bd058:	4f48      	ldr	r7, [pc, #288]	; (bd17c <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bd05a:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bd05e:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd060:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bd062:	bf0c      	ite	eq
   bd064:	f04f 0b01 	moveq.w	fp, #1
   bd068:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd06c:	ea1b 0f03 	tst.w	fp, r3
   bd070:	eb01 0302 	add.w	r3, r1, r2
   bd074:	bf0c      	ite	eq
   bd076:	f04f 0901 	moveq.w	r9, #1
   bd07a:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd07e:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bd080:	9303      	str	r3, [sp, #12]
   bd082:	9b03      	ldr	r3, [sp, #12]
   bd084:	42ab      	cmp	r3, r5
   bd086:	d0e2      	beq.n	bd04e <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bd088:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bd08c:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bd08e:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bd092:	b117      	cbz	r7, bd09a <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bd094:	4638      	mov	r0, r7
   bd096:	f000 f9e7 	bl	bd468 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bd09a:	7b63      	ldrb	r3, [r4, #13]
   bd09c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bd0a0:	d141      	bne.n	bd126 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd0a2:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd0a6:	1c5a      	adds	r2, r3, #1
   bd0a8:	d00f      	beq.n	bd0ca <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bd0aa:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd0ae:	bf14      	ite	ne
   bd0b0:	2301      	movne	r3, #1
   bd0b2:	2300      	moveq	r3, #0
   bd0b4:	454b      	cmp	r3, r9
   bd0b6:	d008      	beq.n	bd0ca <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bd0b8:	6963      	ldr	r3, [r4, #20]
   bd0ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bd0bc:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bd0be:	2900      	cmp	r1, #0
   bd0c0:	d02c      	beq.n	bd11c <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bd0c2:	4302      	orrs	r2, r0
   bd0c4:	601a      	str	r2, [r3, #0]
   bd0c6:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bd0ca:	69a1      	ldr	r1, [r4, #24]
   bd0cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd0ce:	680a      	ldr	r2, [r1, #0]
   bd0d0:	4313      	orrs	r3, r2
   bd0d2:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd0d4:	b117      	cbz	r7, bd0dc <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bd0d6:	4638      	mov	r0, r7
   bd0d8:	f000 f9c6 	bl	bd468 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bd0dc:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd0e0:	3301      	adds	r3, #1
   bd0e2:	d006      	beq.n	bd0f2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bd0e4:	69e3      	ldr	r3, [r4, #28]
   bd0e6:	681a      	ldr	r2, [r3, #0]
   bd0e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd0ea:	421a      	tst	r2, r3
            reply |= b;
   bd0ec:	bf18      	it	ne
   bd0ee:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bd0f2:	69a1      	ldr	r1, [r4, #24]
   bd0f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd0f6:	680a      	ldr	r2, [r1, #0]
   bd0f8:	ea22 0303 	bic.w	r3, r2, r3
   bd0fc:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bd0fe:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd102:	3301      	adds	r3, #1
        buffer[i] = reply;
   bd104:	bf18      	it	ne
   bd106:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bd10a:	7b23      	ldrb	r3, [r4, #12]
   bd10c:	2b00      	cmp	r3, #0
   bd10e:	d132      	bne.n	bd176 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bd110:	0076      	lsls	r6, r6, #1
   bd112:	b2f6      	uxtb	r6, r6
   bd114:	2e00      	cmp	r6, #0
   bd116:	d1bc      	bne.n	bd092 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bd118:	3501      	adds	r5, #1
   bd11a:	e7b2      	b.n	bd082 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bd11c:	ea22 0200 	bic.w	r2, r2, r0
   bd120:	601a      	str	r2, [r3, #0]
   bd122:	4689      	mov	r9, r1
   bd124:	e7d1      	b.n	bd0ca <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bd126:	69a1      	ldr	r1, [r4, #24]
   bd128:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd12a:	680a      	ldr	r2, [r1, #0]
   bd12c:	4313      	orrs	r3, r2
   bd12e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd130:	b117      	cbz	r7, bd138 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bd132:	4638      	mov	r0, r7
   bd134:	f000 f998 	bl	bd468 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bd138:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd13c:	3301      	adds	r3, #1
   bd13e:	d008      	beq.n	bd152 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bd140:	6963      	ldr	r3, [r4, #20]
   bd142:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bd144:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bd146:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bd14a:	bf14      	ite	ne
   bd14c:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bd14e:	438a      	biceq	r2, r1
   bd150:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bd152:	69a1      	ldr	r1, [r4, #24]
   bd154:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd156:	680a      	ldr	r2, [r1, #0]
   bd158:	ea22 0303 	bic.w	r3, r2, r3
   bd15c:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bd15e:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd162:	3301      	adds	r3, #1
   bd164:	d0cb      	beq.n	bd0fe <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bd166:	69e3      	ldr	r3, [r4, #28]
   bd168:	681a      	ldr	r2, [r3, #0]
   bd16a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd16c:	421a      	tst	r2, r3
            reply |= b;
   bd16e:	bf18      	it	ne
   bd170:	ea46 0808 	orrne.w	r8, r6, r8
   bd174:	e7c3      	b.n	bd0fe <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bd176:	0876      	lsrs	r6, r6, #1
   bd178:	e7cc      	b.n	bd114 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bd17a:	bf00      	nop
   bd17c:	0007a120 	.word	0x0007a120

000bd180 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bd180:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bd182:	2201      	movs	r2, #1
  uint8_t data = send;
   bd184:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bd188:	f10d 0107 	add.w	r1, sp, #7
   bd18c:	f7ff ff52 	bl	bd034 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bd190:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bd194:	b003      	add	sp, #12
   bd196:	f85d fb04 	ldr.w	pc, [sp], #4

000bd19a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd19e:	4604      	mov	r4, r0
  if (_spi) {
   bd1a0:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd1a2:	460e      	mov	r6, r1
   bd1a4:	4617      	mov	r7, r2
   bd1a6:	461d      	mov	r5, r3
  if (_spi) {
   bd1a8:	b110      	cbz	r0, bd1b0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bd1aa:	6861      	ldr	r1, [r4, #4]
   bd1ac:	f000 fdf6 	bl	bdd9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd1b0:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd1b4:	2100      	movs	r1, #0
   bd1b6:	b280      	uxth	r0, r0
   bd1b8:	f004 fb35 	bl	c1826 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bd1bc:	9b06      	ldr	r3, [sp, #24]
   bd1be:	eb05 0803 	add.w	r8, r5, r3
   bd1c2:	4545      	cmp	r5, r8
   bd1c4:	d108      	bne.n	bd1d8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bd1c6:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bd1c8:	42b7      	cmp	r7, r6
   bd1ca:	d00b      	beq.n	bd1e4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bd1cc:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd1d0:	4620      	mov	r0, r4
   bd1d2:	f7ff ffd5 	bl	bd180 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bd1d6:	e7f7      	b.n	bd1c8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bd1d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd1dc:	4620      	mov	r0, r4
   bd1de:	f7ff ffcf 	bl	bd180 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bd1e2:	e7ee      	b.n	bd1c2 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bd1e4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd1e8:	2101      	movs	r1, #1
   bd1ea:	b280      	uxth	r0, r0
   bd1ec:	f004 fb1b 	bl	c1826 <digitalWrite>

  if (_spi) {
   bd1f0:	6820      	ldr	r0, [r4, #0]
   bd1f2:	b108      	cbz	r0, bd1f8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bd1f4:	f000 fdb9 	bl	bdd6a <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd1f8:	2001      	movs	r0, #1
   bd1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd1fe <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bd1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd202:	4604      	mov	r4, r0
  if (_spi) {
   bd204:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bd206:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bd20a:	460e      	mov	r6, r1
   bd20c:	4617      	mov	r7, r2
   bd20e:	461d      	mov	r5, r3
  if (_spi) {
   bd210:	b110      	cbz	r0, bd218 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bd212:	6861      	ldr	r1, [r4, #4]
   bd214:	f000 fdc2 	bl	bdd9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd218:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd21c:	2100      	movs	r1, #0
   bd21e:	b280      	uxth	r0, r0
   bd220:	f004 fb01 	bl	c1826 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bd224:	4437      	add	r7, r6
   bd226:	42be      	cmp	r6, r7
   bd228:	d10a      	bne.n	bd240 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bd22a:	9b06      	ldr	r3, [sp, #24]
   bd22c:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bd22e:	42ae      	cmp	r6, r5
   bd230:	d00c      	beq.n	bd24c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bd232:	4641      	mov	r1, r8
   bd234:	4620      	mov	r0, r4
   bd236:	f7ff ffa3 	bl	bd180 <_ZN18Adafruit_SPIDevice8transferEh>
   bd23a:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bd23e:	e7f6      	b.n	bd22e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bd240:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd244:	4620      	mov	r0, r4
   bd246:	f7ff ff9b 	bl	bd180 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bd24a:	e7ec      	b.n	bd226 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bd24c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd250:	2101      	movs	r1, #1
   bd252:	b280      	uxth	r0, r0
   bd254:	f004 fae7 	bl	c1826 <digitalWrite>

  if (_spi) {
   bd258:	6820      	ldr	r0, [r4, #0]
   bd25a:	b108      	cbz	r0, bd260 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bd25c:	f000 fd85 	bl	bdd6a <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bd260:	2001      	movs	r0, #1
   bd262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd266 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bd266:	6042      	str	r2, [r0, #4]
  _begun = false;
   bd268:	2200      	movs	r2, #0
   bd26a:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bd26c:	2220      	movs	r2, #32
  _addr = addr;
   bd26e:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bd270:	60c2      	str	r2, [r0, #12]
#endif
}
   bd272:	4770      	bx	lr

000bd274 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bd274:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bd276:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bd278:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bd27a:	b153      	cbz	r3, bd292 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bd27c:	7821      	ldrb	r1, [r4, #0]
   bd27e:	6860      	ldr	r0, [r4, #4]
   bd280:	f003 ffea 	bl	c1258 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bd284:	6860      	ldr	r0, [r4, #4]
   bd286:	f003 fff2 	bl	c126e <_ZN7TwoWire15endTransmissionEv>
   bd28a:	fab0 f080 	clz	r0, r0
   bd28e:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bd290:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bd292:	2101      	movs	r1, #1
   bd294:	f000 f803 	bl	bd29e <_ZN18Adafruit_I2CDevice5beginEb>
   bd298:	2800      	cmp	r0, #0
   bd29a:	d1ef      	bne.n	bd27c <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bd29c:	e7f8      	b.n	bd290 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bd29e <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd29e:	b538      	push	{r3, r4, r5, lr}
   bd2a0:	4604      	mov	r4, r0
  _wire->begin();
   bd2a2:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd2a4:	460d      	mov	r5, r1
  _wire->begin();
   bd2a6:	f003 ffa5 	bl	c11f4 <_ZN7TwoWire5beginEv>
  _begun = true;
   bd2aa:	2001      	movs	r0, #1
   bd2ac:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bd2ae:	b125      	cbz	r5, bd2ba <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bd2b0:	4620      	mov	r0, r4
}
   bd2b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bd2b6:	f7ff bfdd 	b.w	bd274 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bd2ba:	bd38      	pop	{r3, r4, r5, pc}

000bd2bc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bd2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd2c0:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bd2c4:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bd2c6:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bd2c8:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bd2ca:	4432      	add	r2, r6
   bd2cc:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bd2ce:	4604      	mov	r4, r0
   bd2d0:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bd2d2:	d902      	bls.n	bd2da <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bd2d4:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bd2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bd2da:	7801      	ldrb	r1, [r0, #0]
   bd2dc:	6840      	ldr	r0, [r0, #4]
   bd2de:	f003 ffbb 	bl	c1258 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd2e2:	b97e      	cbnz	r6, bd304 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bd2e4:	6860      	ldr	r0, [r4, #4]
   bd2e6:	6803      	ldr	r3, [r0, #0]
   bd2e8:	462a      	mov	r2, r5
   bd2ea:	68db      	ldr	r3, [r3, #12]
   bd2ec:	4641      	mov	r1, r8
   bd2ee:	4798      	blx	r3
   bd2f0:	4285      	cmp	r5, r0
   bd2f2:	d1ef      	bne.n	bd2d4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bd2f4:	6860      	ldr	r0, [r4, #4]
   bd2f6:	4639      	mov	r1, r7
   bd2f8:	f003 ffb5 	bl	c1266 <_ZN7TwoWire15endTransmissionEh>
   bd2fc:	fab0 f080 	clz	r0, r0
   bd300:	0940      	lsrs	r0, r0, #5
   bd302:	e7e8      	b.n	bd2d6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd304:	f1b9 0f00 	cmp.w	r9, #0
   bd308:	d0ec      	beq.n	bd2e4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bd30a:	6860      	ldr	r0, [r4, #4]
   bd30c:	6803      	ldr	r3, [r0, #0]
   bd30e:	4632      	mov	r2, r6
   bd310:	68db      	ldr	r3, [r3, #12]
   bd312:	4649      	mov	r1, r9
   bd314:	4798      	blx	r3
   bd316:	4286      	cmp	r6, r0
   bd318:	d1dc      	bne.n	bd2d4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bd31a:	e7e3      	b.n	bd2e4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bd31c <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bd31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd320:	4615      	mov	r5, r2
   bd322:	4604      	mov	r4, r0
   bd324:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bd326:	b2d2      	uxtb	r2, r2
   bd328:	7801      	ldrb	r1, [r0, #0]
   bd32a:	6840      	ldr	r0, [r0, #4]
   bd32c:	f003 ff7f 	bl	c122e <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bd330:	4285      	cmp	r5, r0
   bd332:	d10d      	bne.n	bd350 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bd334:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bd336:	fa1f f887 	uxth.w	r8, r7
   bd33a:	45a8      	cmp	r8, r5
   bd33c:	f107 0701 	add.w	r7, r7, #1
   bd340:	d209      	bcs.n	bd356 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bd342:	6860      	ldr	r0, [r4, #4]
   bd344:	6803      	ldr	r3, [r0, #0]
   bd346:	695b      	ldr	r3, [r3, #20]
   bd348:	4798      	blx	r3
   bd34a:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bd34e:	e7f2      	b.n	bd336 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bd350:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd356:	2001      	movs	r0, #1
   bd358:	e7fb      	b.n	bd352 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bd35a <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bd35a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd35e:	4607      	mov	r7, r0
   bd360:	4688      	mov	r8, r1
   bd362:	4616      	mov	r6, r2
   bd364:	4699      	mov	r9, r3
  size_t pos = 0;
   bd366:	2500      	movs	r5, #0
  while (pos < len) {
   bd368:	42b5      	cmp	r5, r6
   bd36a:	d212      	bcs.n	bd392 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bd36c:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bd36e:	1b74      	subs	r4, r6, r5
   bd370:	4294      	cmp	r4, r2
   bd372:	bf28      	it	cs
   bd374:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bd376:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bd378:	42ab      	cmp	r3, r5
   bd37a:	bf94      	ite	ls
   bd37c:	464b      	movls	r3, r9
   bd37e:	2300      	movhi	r3, #0
   bd380:	4622      	mov	r2, r4
   bd382:	eb08 0105 	add.w	r1, r8, r5
   bd386:	4638      	mov	r0, r7
   bd388:	f7ff ffc8 	bl	bd31c <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bd38c:	b110      	cbz	r0, bd394 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bd38e:	4425      	add	r5, r4
  while (pos < len) {
   bd390:	e7ea      	b.n	bd368 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bd392:	2001      	movs	r0, #1
}
   bd394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bd398 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bd398:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd39a:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bd39c:	2300      	movs	r3, #0
   bd39e:	e9cd 3300 	strd	r3, r3, [sp]
   bd3a2:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bd3a6:	9e06      	ldr	r6, [sp, #24]
   bd3a8:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bd3aa:	f7ff ff87 	bl	bd2bc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bd3ae:	b140      	cbz	r0, bd3c2 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bd3b0:	2301      	movs	r3, #1
   bd3b2:	4632      	mov	r2, r6
   bd3b4:	4629      	mov	r1, r5
   bd3b6:	4620      	mov	r0, r4
}
   bd3b8:	b002      	add	sp, #8
   bd3ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bd3be:	f7ff bfcc 	b.w	bd35a <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bd3c2:	b002      	add	sp, #8
   bd3c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd3c8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bd3c8:	b508      	push	{r3, lr}
   bd3ca:	4b02      	ldr	r3, [pc, #8]	; (bd3d4 <netdb_freeaddrinfo+0xc>)
   bd3cc:	681b      	ldr	r3, [r3, #0]
   bd3ce:	689b      	ldr	r3, [r3, #8]
   bd3d0:	9301      	str	r3, [sp, #4]
   bd3d2:	bd08      	pop	{r3, pc}
   bd3d4:	00030268 	.word	0x00030268

000bd3d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bd3d8:	b508      	push	{r3, lr}
   bd3da:	4b02      	ldr	r3, [pc, #8]	; (bd3e4 <netdb_getaddrinfo+0xc>)
   bd3dc:	681b      	ldr	r3, [r3, #0]
   bd3de:	68db      	ldr	r3, [r3, #12]
   bd3e0:	9301      	str	r3, [sp, #4]
   bd3e2:	bd08      	pop	{r3, pc}
   bd3e4:	00030268 	.word	0x00030268

000bd3e8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bd3e8:	b508      	push	{r3, lr}
   bd3ea:	4b02      	ldr	r3, [pc, #8]	; (bd3f4 <HAL_Validate_Pin_Function+0xc>)
   bd3ec:	681b      	ldr	r3, [r3, #0]
   bd3ee:	685b      	ldr	r3, [r3, #4]
   bd3f0:	9301      	str	r3, [sp, #4]
   bd3f2:	bd08      	pop	{r3, pc}
   bd3f4:	0003022c 	.word	0x0003022c

000bd3f8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bd3f8:	b508      	push	{r3, lr}
   bd3fa:	4b02      	ldr	r3, [pc, #8]	; (bd404 <HAL_Pin_Mode+0xc>)
   bd3fc:	681b      	ldr	r3, [r3, #0]
   bd3fe:	689b      	ldr	r3, [r3, #8]
   bd400:	9301      	str	r3, [sp, #4]
   bd402:	bd08      	pop	{r3, pc}
   bd404:	0003022c 	.word	0x0003022c

000bd408 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bd408:	b508      	push	{r3, lr}
   bd40a:	4b02      	ldr	r3, [pc, #8]	; (bd414 <HAL_Get_Pin_Mode+0xc>)
   bd40c:	681b      	ldr	r3, [r3, #0]
   bd40e:	68db      	ldr	r3, [r3, #12]
   bd410:	9301      	str	r3, [sp, #4]
   bd412:	bd08      	pop	{r3, pc}
   bd414:	0003022c 	.word	0x0003022c

000bd418 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bd418:	b508      	push	{r3, lr}
   bd41a:	4b02      	ldr	r3, [pc, #8]	; (bd424 <HAL_GPIO_Write+0xc>)
   bd41c:	681b      	ldr	r3, [r3, #0]
   bd41e:	691b      	ldr	r3, [r3, #16]
   bd420:	9301      	str	r3, [sp, #4]
   bd422:	bd08      	pop	{r3, pc}
   bd424:	0003022c 	.word	0x0003022c

000bd428 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bd428:	b508      	push	{r3, lr}
   bd42a:	4b02      	ldr	r3, [pc, #8]	; (bd434 <HAL_Interrupts_Enable_All+0xc>)
   bd42c:	681b      	ldr	r3, [r3, #0]
   bd42e:	6a1b      	ldr	r3, [r3, #32]
   bd430:	9301      	str	r3, [sp, #4]
   bd432:	bd08      	pop	{r3, pc}
   bd434:	0003022c 	.word	0x0003022c

000bd438 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bd438:	b508      	push	{r3, lr}
   bd43a:	4b02      	ldr	r3, [pc, #8]	; (bd444 <HAL_Interrupts_Disable_All+0xc>)
   bd43c:	681b      	ldr	r3, [r3, #0]
   bd43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd440:	9301      	str	r3, [sp, #4]
   bd442:	bd08      	pop	{r3, pc}
   bd444:	0003022c 	.word	0x0003022c

000bd448 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bd448:	b508      	push	{r3, lr}
   bd44a:	4b02      	ldr	r3, [pc, #8]	; (bd454 <hal_adc_read+0xc>)
   bd44c:	681b      	ldr	r3, [r3, #0]
   bd44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd450:	9301      	str	r3, [sp, #4]
   bd452:	bd08      	pop	{r3, pc}
   bd454:	0003022c 	.word	0x0003022c

000bd458 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bd458:	b508      	push	{r3, lr}
   bd45a:	4b02      	ldr	r3, [pc, #8]	; (bd464 <HAL_RNG_GetRandomNumber+0xc>)
   bd45c:	681b      	ldr	r3, [r3, #0]
   bd45e:	685b      	ldr	r3, [r3, #4]
   bd460:	9301      	str	r3, [sp, #4]
   bd462:	bd08      	pop	{r3, pc}
   bd464:	00030218 	.word	0x00030218

000bd468 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bd468:	b508      	push	{r3, lr}
   bd46a:	4b02      	ldr	r3, [pc, #8]	; (bd474 <HAL_Delay_Microseconds+0xc>)
   bd46c:	681b      	ldr	r3, [r3, #0]
   bd46e:	68db      	ldr	r3, [r3, #12]
   bd470:	9301      	str	r3, [sp, #4]
   bd472:	bd08      	pop	{r3, pc}
   bd474:	00030218 	.word	0x00030218

000bd478 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bd478:	b508      	push	{r3, lr}
   bd47a:	4b02      	ldr	r3, [pc, #8]	; (bd484 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bd47c:	681b      	ldr	r3, [r3, #0]
   bd47e:	691b      	ldr	r3, [r3, #16]
   bd480:	9301      	str	r3, [sp, #4]
   bd482:	bd08      	pop	{r3, pc}
   bd484:	00030218 	.word	0x00030218

000bd488 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bd488:	b508      	push	{r3, lr}
   bd48a:	4b02      	ldr	r3, [pc, #8]	; (bd494 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bd48c:	681b      	ldr	r3, [r3, #0]
   bd48e:	695b      	ldr	r3, [r3, #20]
   bd490:	9301      	str	r3, [sp, #4]
   bd492:	bd08      	pop	{r3, pc}
   bd494:	00030218 	.word	0x00030218

000bd498 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bd498:	b508      	push	{r3, lr}
   bd49a:	4b02      	ldr	r3, [pc, #8]	; (bd4a4 <hal_rtc_time_is_valid+0xc>)
   bd49c:	681b      	ldr	r3, [r3, #0]
   bd49e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd4a0:	9301      	str	r3, [sp, #4]
   bd4a2:	bd08      	pop	{r3, pc}
   bd4a4:	00030218 	.word	0x00030218

000bd4a8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bd4a8:	b508      	push	{r3, lr}
   bd4aa:	4b02      	ldr	r3, [pc, #8]	; (bd4b4 <hal_rtc_get_time+0xc>)
   bd4ac:	681b      	ldr	r3, [r3, #0]
   bd4ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bd4b0:	9301      	str	r3, [sp, #4]
   bd4b2:	bd08      	pop	{r3, pc}
   bd4b4:	00030218 	.word	0x00030218

000bd4b8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bd4b8:	b508      	push	{r3, lr}
   bd4ba:	4b02      	ldr	r3, [pc, #8]	; (bd4c4 <hal_ble_stack_init+0xc>)
   bd4bc:	681b      	ldr	r3, [r3, #0]
   bd4be:	689b      	ldr	r3, [r3, #8]
   bd4c0:	9301      	str	r3, [sp, #4]
   bd4c2:	bd08      	pop	{r3, pc}
   bd4c4:	00030278 	.word	0x00030278

000bd4c8 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bd4c8:	b508      	push	{r3, lr}
   bd4ca:	4b02      	ldr	r3, [pc, #8]	; (bd4d4 <hal_ble_gap_set_tx_power+0xc>)
   bd4cc:	681b      	ldr	r3, [r3, #0]
   bd4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd4d0:	9301      	str	r3, [sp, #4]
   bd4d2:	bd08      	pop	{r3, pc}
   bd4d4:	00030278 	.word	0x00030278

000bd4d8 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bd4d8:	b508      	push	{r3, lr}
   bd4da:	4b02      	ldr	r3, [pc, #8]	; (bd4e4 <hal_ble_gap_set_advertising_data+0xc>)
   bd4dc:	681b      	ldr	r3, [r3, #0]
   bd4de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd4e0:	9301      	str	r3, [sp, #4]
   bd4e2:	bd08      	pop	{r3, pc}
   bd4e4:	00030278 	.word	0x00030278

000bd4e8 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bd4e8:	b508      	push	{r3, lr}
   bd4ea:	4b02      	ldr	r3, [pc, #8]	; (bd4f4 <hal_ble_gap_set_scan_response_data+0xc>)
   bd4ec:	681b      	ldr	r3, [r3, #0]
   bd4ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd4f0:	9301      	str	r3, [sp, #4]
   bd4f2:	bd08      	pop	{r3, pc}
   bd4f4:	00030278 	.word	0x00030278

000bd4f8 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bd4f8:	b508      	push	{r3, lr}
   bd4fa:	4b02      	ldr	r3, [pc, #8]	; (bd504 <hal_ble_gap_start_advertising+0xc>)
   bd4fc:	681b      	ldr	r3, [r3, #0]
   bd4fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bd500:	9301      	str	r3, [sp, #4]
   bd502:	bd08      	pop	{r3, pc}
   bd504:	00030278 	.word	0x00030278

000bd508 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bd508:	b508      	push	{r3, lr}
   bd50a:	4b03      	ldr	r3, [pc, #12]	; (bd518 <hal_ble_gap_disconnect+0x10>)
   bd50c:	681b      	ldr	r3, [r3, #0]
   bd50e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bd512:	9301      	str	r3, [sp, #4]
   bd514:	bd08      	pop	{r3, pc}
   bd516:	0000      	.short	0x0000
   bd518:	00030278 	.word	0x00030278

000bd51c <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bd51c:	b508      	push	{r3, lr}
   bd51e:	4b03      	ldr	r3, [pc, #12]	; (bd52c <hal_ble_gatt_server_add_service+0x10>)
   bd520:	681b      	ldr	r3, [r3, #0]
   bd522:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bd526:	9301      	str	r3, [sp, #4]
   bd528:	bd08      	pop	{r3, pc}
   bd52a:	0000      	.short	0x0000
   bd52c:	00030278 	.word	0x00030278

000bd530 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd530:	b508      	push	{r3, lr}
   bd532:	4b03      	ldr	r3, [pc, #12]	; (bd540 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bd534:	681b      	ldr	r3, [r3, #0]
   bd536:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bd53a:	9301      	str	r3, [sp, #4]
   bd53c:	bd08      	pop	{r3, pc}
   bd53e:	0000      	.short	0x0000
   bd540:	00030278 	.word	0x00030278

000bd544 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd544:	b508      	push	{r3, lr}
   bd546:	4b03      	ldr	r3, [pc, #12]	; (bd554 <hal_ble_gatt_client_write_with_response+0x10>)
   bd548:	681b      	ldr	r3, [r3, #0]
   bd54a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bd54e:	9301      	str	r3, [sp, #4]
   bd550:	bd08      	pop	{r3, pc}
   bd552:	0000      	.short	0x0000
   bd554:	00030278 	.word	0x00030278

000bd558 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd558:	b508      	push	{r3, lr}
   bd55a:	4b03      	ldr	r3, [pc, #12]	; (bd568 <hal_ble_gatt_client_write_without_response+0x10>)
   bd55c:	681b      	ldr	r3, [r3, #0]
   bd55e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bd562:	9301      	str	r3, [sp, #4]
   bd564:	bd08      	pop	{r3, pc}
   bd566:	0000      	.short	0x0000
   bd568:	00030278 	.word	0x00030278

000bd56c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bd56c:	b508      	push	{r3, lr}
   bd56e:	4b03      	ldr	r3, [pc, #12]	; (bd57c <hal_ble_gatt_server_add_characteristic+0x10>)
   bd570:	681b      	ldr	r3, [r3, #0]
   bd572:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bd576:	9301      	str	r3, [sp, #4]
   bd578:	bd08      	pop	{r3, pc}
   bd57a:	0000      	.short	0x0000
   bd57c:	00030278 	.word	0x00030278

000bd580 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bd580:	b508      	push	{r3, lr}
   bd582:	4b03      	ldr	r3, [pc, #12]	; (bd590 <hal_ble_set_callback_on_periph_link_events+0x10>)
   bd584:	681b      	ldr	r3, [r3, #0]
   bd586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bd58a:	9301      	str	r3, [sp, #4]
   bd58c:	bd08      	pop	{r3, pc}
   bd58e:	0000      	.short	0x0000
   bd590:	00030278 	.word	0x00030278

000bd594 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd594:	b508      	push	{r3, lr}
   bd596:	4b03      	ldr	r3, [pc, #12]	; (bd5a4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bd598:	681b      	ldr	r3, [r3, #0]
   bd59a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bd59e:	9301      	str	r3, [sp, #4]
   bd5a0:	bd08      	pop	{r3, pc}
   bd5a2:	0000      	.short	0x0000
   bd5a4:	00030278 	.word	0x00030278

000bd5a8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd5a8:	b508      	push	{r3, lr}
   bd5aa:	4b03      	ldr	r3, [pc, #12]	; (bd5b8 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bd5ac:	681b      	ldr	r3, [r3, #0]
   bd5ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bd5b2:	9301      	str	r3, [sp, #4]
   bd5b4:	bd08      	pop	{r3, pc}
   bd5b6:	0000      	.short	0x0000
   bd5b8:	00030278 	.word	0x00030278

000bd5bc <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bd5bc:	b508      	push	{r3, lr}
   bd5be:	4b02      	ldr	r3, [pc, #8]	; (bd5c8 <os_thread_yield+0xc>)
   bd5c0:	681b      	ldr	r3, [r3, #0]
   bd5c2:	68db      	ldr	r3, [r3, #12]
   bd5c4:	9301      	str	r3, [sp, #4]
   bd5c6:	bd08      	pop	{r3, pc}
   bd5c8:	00030248 	.word	0x00030248

000bd5cc <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bd5cc:	b508      	push	{r3, lr}
   bd5ce:	4b02      	ldr	r3, [pc, #8]	; (bd5d8 <os_thread_scheduling+0xc>)
   bd5d0:	681b      	ldr	r3, [r3, #0]
   bd5d2:	69db      	ldr	r3, [r3, #28]
   bd5d4:	9301      	str	r3, [sp, #4]
   bd5d6:	bd08      	pop	{r3, pc}
   bd5d8:	00030248 	.word	0x00030248

000bd5dc <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bd5dc:	b508      	push	{r3, lr}
   bd5de:	4b02      	ldr	r3, [pc, #8]	; (bd5e8 <os_timer_create+0xc>)
   bd5e0:	681b      	ldr	r3, [r3, #0]
   bd5e2:	6a1b      	ldr	r3, [r3, #32]
   bd5e4:	9301      	str	r3, [sp, #4]
   bd5e6:	bd08      	pop	{r3, pc}
   bd5e8:	00030248 	.word	0x00030248

000bd5ec <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bd5ec:	b508      	push	{r3, lr}
   bd5ee:	4b02      	ldr	r3, [pc, #8]	; (bd5f8 <os_timer_destroy+0xc>)
   bd5f0:	681b      	ldr	r3, [r3, #0]
   bd5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd5f4:	9301      	str	r3, [sp, #4]
   bd5f6:	bd08      	pop	{r3, pc}
   bd5f8:	00030248 	.word	0x00030248

000bd5fc <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bd5fc:	b508      	push	{r3, lr}
   bd5fe:	4b02      	ldr	r3, [pc, #8]	; (bd608 <os_timer_get_id+0xc>)
   bd600:	681b      	ldr	r3, [r3, #0]
   bd602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd604:	9301      	str	r3, [sp, #4]
   bd606:	bd08      	pop	{r3, pc}
   bd608:	00030248 	.word	0x00030248

000bd60c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bd60c:	b508      	push	{r3, lr}
   bd60e:	4b02      	ldr	r3, [pc, #8]	; (bd618 <os_timer_change+0xc>)
   bd610:	681b      	ldr	r3, [r3, #0]
   bd612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd614:	9301      	str	r3, [sp, #4]
   bd616:	bd08      	pop	{r3, pc}
   bd618:	00030248 	.word	0x00030248

000bd61c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bd61c:	b508      	push	{r3, lr}
   bd61e:	4b02      	ldr	r3, [pc, #8]	; (bd628 <os_mutex_recursive_create+0xc>)
   bd620:	681b      	ldr	r3, [r3, #0]
   bd622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd624:	9301      	str	r3, [sp, #4]
   bd626:	bd08      	pop	{r3, pc}
   bd628:	00030248 	.word	0x00030248

000bd62c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bd62c:	b508      	push	{r3, lr}
   bd62e:	4b02      	ldr	r3, [pc, #8]	; (bd638 <os_mutex_recursive_destroy+0xc>)
   bd630:	681b      	ldr	r3, [r3, #0]
   bd632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bd634:	9301      	str	r3, [sp, #4]
   bd636:	bd08      	pop	{r3, pc}
   bd638:	00030248 	.word	0x00030248

000bd63c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bd63c:	b508      	push	{r3, lr}
   bd63e:	4b02      	ldr	r3, [pc, #8]	; (bd648 <os_mutex_recursive_lock+0xc>)
   bd640:	681b      	ldr	r3, [r3, #0]
   bd642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd644:	9301      	str	r3, [sp, #4]
   bd646:	bd08      	pop	{r3, pc}
   bd648:	00030248 	.word	0x00030248

000bd64c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bd64c:	b508      	push	{r3, lr}
   bd64e:	4b02      	ldr	r3, [pc, #8]	; (bd658 <os_mutex_recursive_unlock+0xc>)
   bd650:	681b      	ldr	r3, [r3, #0]
   bd652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd654:	9301      	str	r3, [sp, #4]
   bd656:	bd08      	pop	{r3, pc}
   bd658:	00030248 	.word	0x00030248

000bd65c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bd65c:	b508      	push	{r3, lr}
   bd65e:	4b02      	ldr	r3, [pc, #8]	; (bd668 <os_timer_set_id+0xc>)
   bd660:	681b      	ldr	r3, [r3, #0]
   bd662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd664:	9301      	str	r3, [sp, #4]
   bd666:	bd08      	pop	{r3, pc}
   bd668:	00030248 	.word	0x00030248

000bd66c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bd66c:	b508      	push	{r3, lr}
   bd66e:	4b02      	ldr	r3, [pc, #8]	; (bd678 <inet_inet_ntop+0xc>)
   bd670:	681b      	ldr	r3, [r3, #0]
   bd672:	695b      	ldr	r3, [r3, #20]
   bd674:	9301      	str	r3, [sp, #4]
   bd676:	bd08      	pop	{r3, pc}
   bd678:	00030264 	.word	0x00030264

000bd67c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bd67c:	b508      	push	{r3, lr}
   bd67e:	4b02      	ldr	r3, [pc, #8]	; (bd688 <hal_usart_end+0xc>)
   bd680:	681b      	ldr	r3, [r3, #0]
   bd682:	689b      	ldr	r3, [r3, #8]
   bd684:	9301      	str	r3, [sp, #4]
   bd686:	bd08      	pop	{r3, pc}
   bd688:	0003023c 	.word	0x0003023c

000bd68c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bd68c:	b508      	push	{r3, lr}
   bd68e:	4b02      	ldr	r3, [pc, #8]	; (bd698 <hal_usart_write+0xc>)
   bd690:	681b      	ldr	r3, [r3, #0]
   bd692:	68db      	ldr	r3, [r3, #12]
   bd694:	9301      	str	r3, [sp, #4]
   bd696:	bd08      	pop	{r3, pc}
   bd698:	0003023c 	.word	0x0003023c

000bd69c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bd69c:	b508      	push	{r3, lr}
   bd69e:	4b02      	ldr	r3, [pc, #8]	; (bd6a8 <hal_usart_available+0xc>)
   bd6a0:	681b      	ldr	r3, [r3, #0]
   bd6a2:	691b      	ldr	r3, [r3, #16]
   bd6a4:	9301      	str	r3, [sp, #4]
   bd6a6:	bd08      	pop	{r3, pc}
   bd6a8:	0003023c 	.word	0x0003023c

000bd6ac <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bd6ac:	b508      	push	{r3, lr}
   bd6ae:	4b02      	ldr	r3, [pc, #8]	; (bd6b8 <hal_usart_read+0xc>)
   bd6b0:	681b      	ldr	r3, [r3, #0]
   bd6b2:	695b      	ldr	r3, [r3, #20]
   bd6b4:	9301      	str	r3, [sp, #4]
   bd6b6:	bd08      	pop	{r3, pc}
   bd6b8:	0003023c 	.word	0x0003023c

000bd6bc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bd6bc:	b508      	push	{r3, lr}
   bd6be:	4b02      	ldr	r3, [pc, #8]	; (bd6c8 <hal_usart_peek+0xc>)
   bd6c0:	681b      	ldr	r3, [r3, #0]
   bd6c2:	699b      	ldr	r3, [r3, #24]
   bd6c4:	9301      	str	r3, [sp, #4]
   bd6c6:	bd08      	pop	{r3, pc}
   bd6c8:	0003023c 	.word	0x0003023c

000bd6cc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bd6cc:	b508      	push	{r3, lr}
   bd6ce:	4b02      	ldr	r3, [pc, #8]	; (bd6d8 <hal_usart_flush+0xc>)
   bd6d0:	681b      	ldr	r3, [r3, #0]
   bd6d2:	69db      	ldr	r3, [r3, #28]
   bd6d4:	9301      	str	r3, [sp, #4]
   bd6d6:	bd08      	pop	{r3, pc}
   bd6d8:	0003023c 	.word	0x0003023c

000bd6dc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bd6dc:	b508      	push	{r3, lr}
   bd6de:	4b02      	ldr	r3, [pc, #8]	; (bd6e8 <hal_usart_is_enabled+0xc>)
   bd6e0:	681b      	ldr	r3, [r3, #0]
   bd6e2:	6a1b      	ldr	r3, [r3, #32]
   bd6e4:	9301      	str	r3, [sp, #4]
   bd6e6:	bd08      	pop	{r3, pc}
   bd6e8:	0003023c 	.word	0x0003023c

000bd6ec <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bd6ec:	b508      	push	{r3, lr}
   bd6ee:	4b02      	ldr	r3, [pc, #8]	; (bd6f8 <hal_usart_available_data_for_write+0xc>)
   bd6f0:	681b      	ldr	r3, [r3, #0]
   bd6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd6f4:	9301      	str	r3, [sp, #4]
   bd6f6:	bd08      	pop	{r3, pc}
   bd6f8:	0003023c 	.word	0x0003023c

000bd6fc <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bd6fc:	b508      	push	{r3, lr}
   bd6fe:	4b02      	ldr	r3, [pc, #8]	; (bd708 <hal_usart_begin_config+0xc>)
   bd700:	681b      	ldr	r3, [r3, #0]
   bd702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd704:	9301      	str	r3, [sp, #4]
   bd706:	bd08      	pop	{r3, pc}
   bd708:	0003023c 	.word	0x0003023c

000bd70c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bd70c:	b508      	push	{r3, lr}
   bd70e:	4b02      	ldr	r3, [pc, #8]	; (bd718 <hal_usart_init_ex+0xc>)
   bd710:	681b      	ldr	r3, [r3, #0]
   bd712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd714:	9301      	str	r3, [sp, #4]
   bd716:	bd08      	pop	{r3, pc}
   bd718:	0003023c 	.word	0x0003023c

000bd71c <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bd71c:	b508      	push	{r3, lr}
   bd71e:	4b02      	ldr	r3, [pc, #8]	; (bd728 <hal_i2c_set_speed+0xc>)
   bd720:	681b      	ldr	r3, [r3, #0]
   bd722:	681b      	ldr	r3, [r3, #0]
   bd724:	9301      	str	r3, [sp, #4]
   bd726:	bd08      	pop	{r3, pc}
   bd728:	00030228 	.word	0x00030228

000bd72c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bd72c:	b508      	push	{r3, lr}
   bd72e:	4b02      	ldr	r3, [pc, #8]	; (bd738 <hal_i2c_begin+0xc>)
   bd730:	681b      	ldr	r3, [r3, #0]
   bd732:	68db      	ldr	r3, [r3, #12]
   bd734:	9301      	str	r3, [sp, #4]
   bd736:	bd08      	pop	{r3, pc}
   bd738:	00030228 	.word	0x00030228

000bd73c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bd73c:	b508      	push	{r3, lr}
   bd73e:	4b02      	ldr	r3, [pc, #8]	; (bd748 <hal_i2c_begin_transmission+0xc>)
   bd740:	681b      	ldr	r3, [r3, #0]
   bd742:	699b      	ldr	r3, [r3, #24]
   bd744:	9301      	str	r3, [sp, #4]
   bd746:	bd08      	pop	{r3, pc}
   bd748:	00030228 	.word	0x00030228

000bd74c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bd74c:	b508      	push	{r3, lr}
   bd74e:	4b02      	ldr	r3, [pc, #8]	; (bd758 <hal_i2c_end_transmission+0xc>)
   bd750:	681b      	ldr	r3, [r3, #0]
   bd752:	69db      	ldr	r3, [r3, #28]
   bd754:	9301      	str	r3, [sp, #4]
   bd756:	bd08      	pop	{r3, pc}
   bd758:	00030228 	.word	0x00030228

000bd75c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bd75c:	b508      	push	{r3, lr}
   bd75e:	4b02      	ldr	r3, [pc, #8]	; (bd768 <hal_i2c_write+0xc>)
   bd760:	681b      	ldr	r3, [r3, #0]
   bd762:	6a1b      	ldr	r3, [r3, #32]
   bd764:	9301      	str	r3, [sp, #4]
   bd766:	bd08      	pop	{r3, pc}
   bd768:	00030228 	.word	0x00030228

000bd76c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bd76c:	b508      	push	{r3, lr}
   bd76e:	4b02      	ldr	r3, [pc, #8]	; (bd778 <hal_i2c_available+0xc>)
   bd770:	681b      	ldr	r3, [r3, #0]
   bd772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd774:	9301      	str	r3, [sp, #4]
   bd776:	bd08      	pop	{r3, pc}
   bd778:	00030228 	.word	0x00030228

000bd77c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bd77c:	b508      	push	{r3, lr}
   bd77e:	4b02      	ldr	r3, [pc, #8]	; (bd788 <hal_i2c_read+0xc>)
   bd780:	681b      	ldr	r3, [r3, #0]
   bd782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd784:	9301      	str	r3, [sp, #4]
   bd786:	bd08      	pop	{r3, pc}
   bd788:	00030228 	.word	0x00030228

000bd78c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bd78c:	b508      	push	{r3, lr}
   bd78e:	4b02      	ldr	r3, [pc, #8]	; (bd798 <hal_i2c_peek+0xc>)
   bd790:	681b      	ldr	r3, [r3, #0]
   bd792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd794:	9301      	str	r3, [sp, #4]
   bd796:	bd08      	pop	{r3, pc}
   bd798:	00030228 	.word	0x00030228

000bd79c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bd79c:	b508      	push	{r3, lr}
   bd79e:	4b02      	ldr	r3, [pc, #8]	; (bd7a8 <hal_i2c_flush+0xc>)
   bd7a0:	681b      	ldr	r3, [r3, #0]
   bd7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd7a4:	9301      	str	r3, [sp, #4]
   bd7a6:	bd08      	pop	{r3, pc}
   bd7a8:	00030228 	.word	0x00030228

000bd7ac <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bd7ac:	b508      	push	{r3, lr}
   bd7ae:	4b02      	ldr	r3, [pc, #8]	; (bd7b8 <hal_i2c_is_enabled+0xc>)
   bd7b0:	681b      	ldr	r3, [r3, #0]
   bd7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd7b4:	9301      	str	r3, [sp, #4]
   bd7b6:	bd08      	pop	{r3, pc}
   bd7b8:	00030228 	.word	0x00030228

000bd7bc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bd7bc:	b508      	push	{r3, lr}
   bd7be:	4b02      	ldr	r3, [pc, #8]	; (bd7c8 <hal_i2c_init+0xc>)
   bd7c0:	681b      	ldr	r3, [r3, #0]
   bd7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd7c4:	9301      	str	r3, [sp, #4]
   bd7c6:	bd08      	pop	{r3, pc}
   bd7c8:	00030228 	.word	0x00030228

000bd7cc <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bd7cc:	b508      	push	{r3, lr}
   bd7ce:	4b02      	ldr	r3, [pc, #8]	; (bd7d8 <hal_i2c_request_ex+0xc>)
   bd7d0:	681b      	ldr	r3, [r3, #0]
   bd7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd7d4:	9301      	str	r3, [sp, #4]
   bd7d6:	bd08      	pop	{r3, pc}
   bd7d8:	00030228 	.word	0x00030228

000bd7dc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bd7dc:	b508      	push	{r3, lr}
   bd7de:	4b02      	ldr	r3, [pc, #8]	; (bd7e8 <hal_spi_begin+0xc>)
   bd7e0:	681b      	ldr	r3, [r3, #0]
   bd7e2:	681b      	ldr	r3, [r3, #0]
   bd7e4:	9301      	str	r3, [sp, #4]
   bd7e6:	bd08      	pop	{r3, pc}
   bd7e8:	00030230 	.word	0x00030230

000bd7ec <hal_spi_set_clock_divider>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   bd7ec:	b508      	push	{r3, lr}
   bd7ee:	4b02      	ldr	r3, [pc, #8]	; (bd7f8 <hal_spi_set_clock_divider+0xc>)
   bd7f0:	681b      	ldr	r3, [r3, #0]
   bd7f2:	691b      	ldr	r3, [r3, #16]
   bd7f4:	9301      	str	r3, [sp, #4]
   bd7f6:	bd08      	pop	{r3, pc}
   bd7f8:	00030230 	.word	0x00030230

000bd7fc <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bd7fc:	b508      	push	{r3, lr}
   bd7fe:	4b02      	ldr	r3, [pc, #8]	; (bd808 <hal_spi_transfer+0xc>)
   bd800:	681b      	ldr	r3, [r3, #0]
   bd802:	695b      	ldr	r3, [r3, #20]
   bd804:	9301      	str	r3, [sp, #4]
   bd806:	bd08      	pop	{r3, pc}
   bd808:	00030230 	.word	0x00030230

000bd80c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bd80c:	b508      	push	{r3, lr}
   bd80e:	4b02      	ldr	r3, [pc, #8]	; (bd818 <hal_spi_init+0xc>)
   bd810:	681b      	ldr	r3, [r3, #0]
   bd812:	69db      	ldr	r3, [r3, #28]
   bd814:	9301      	str	r3, [sp, #4]
   bd816:	bd08      	pop	{r3, pc}
   bd818:	00030230 	.word	0x00030230

000bd81c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bd81c:	b508      	push	{r3, lr}
   bd81e:	4b02      	ldr	r3, [pc, #8]	; (bd828 <hal_spi_is_enabled+0xc>)
   bd820:	681b      	ldr	r3, [r3, #0]
   bd822:	6a1b      	ldr	r3, [r3, #32]
   bd824:	9301      	str	r3, [sp, #4]
   bd826:	bd08      	pop	{r3, pc}
   bd828:	00030230 	.word	0x00030230

000bd82c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bd82c:	b508      	push	{r3, lr}
   bd82e:	4b02      	ldr	r3, [pc, #8]	; (bd838 <hal_spi_info+0xc>)
   bd830:	681b      	ldr	r3, [r3, #0]
   bd832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd834:	9301      	str	r3, [sp, #4]
   bd836:	bd08      	pop	{r3, pc}
   bd838:	00030230 	.word	0x00030230

000bd83c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   bd83c:	b508      	push	{r3, lr}
   bd83e:	4b02      	ldr	r3, [pc, #8]	; (bd848 <hal_spi_transfer_dma+0xc>)
   bd840:	681b      	ldr	r3, [r3, #0]
   bd842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd844:	9301      	str	r3, [sp, #4]
   bd846:	bd08      	pop	{r3, pc}
   bd848:	00030230 	.word	0x00030230

000bd84c <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
   bd84c:	b508      	push	{r3, lr}
   bd84e:	4b02      	ldr	r3, [pc, #8]	; (bd858 <hal_spi_begin_ext+0xc>)
   bd850:	681b      	ldr	r3, [r3, #0]
   bd852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd854:	9301      	str	r3, [sp, #4]
   bd856:	bd08      	pop	{r3, pc}
   bd858:	00030230 	.word	0x00030230

000bd85c <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bd85c:	b508      	push	{r3, lr}
   bd85e:	4b02      	ldr	r3, [pc, #8]	; (bd868 <hal_spi_transfer_dma_status+0xc>)
   bd860:	681b      	ldr	r3, [r3, #0]
   bd862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bd864:	9301      	str	r3, [sp, #4]
   bd866:	bd08      	pop	{r3, pc}
   bd868:	00030230 	.word	0x00030230

000bd86c <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bd86c:	b508      	push	{r3, lr}
   bd86e:	4b02      	ldr	r3, [pc, #8]	; (bd878 <hal_spi_set_settings+0xc>)
   bd870:	681b      	ldr	r3, [r3, #0]
   bd872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd874:	9301      	str	r3, [sp, #4]
   bd876:	bd08      	pop	{r3, pc}
   bd878:	00030230 	.word	0x00030230

000bd87c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bd87c:	b508      	push	{r3, lr}
   bd87e:	4b02      	ldr	r3, [pc, #8]	; (bd888 <hal_spi_acquire+0xc>)
   bd880:	681b      	ldr	r3, [r3, #0]
   bd882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd884:	9301      	str	r3, [sp, #4]
   bd886:	bd08      	pop	{r3, pc}
   bd888:	00030230 	.word	0x00030230

000bd88c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bd88c:	b508      	push	{r3, lr}
   bd88e:	4b02      	ldr	r3, [pc, #8]	; (bd898 <hal_spi_release+0xc>)
   bd890:	681b      	ldr	r3, [r3, #0]
   bd892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd894:	9301      	str	r3, [sp, #4]
   bd896:	bd08      	pop	{r3, pc}
   bd898:	00030230 	.word	0x00030230

000bd89c <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bd89c:	b508      	push	{r3, lr}
   bd89e:	4b02      	ldr	r3, [pc, #8]	; (bd8a8 <HAL_Servo_Attach+0xc>)
   bd8a0:	681b      	ldr	r3, [r3, #0]
   bd8a2:	691b      	ldr	r3, [r3, #16]
   bd8a4:	9301      	str	r3, [sp, #4]
   bd8a6:	bd08      	pop	{r3, pc}
   bd8a8:	00030224 	.word	0x00030224

000bd8ac <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bd8ac:	b508      	push	{r3, lr}
   bd8ae:	4b02      	ldr	r3, [pc, #8]	; (bd8b8 <HAL_Servo_Detach+0xc>)
   bd8b0:	681b      	ldr	r3, [r3, #0]
   bd8b2:	695b      	ldr	r3, [r3, #20]
   bd8b4:	9301      	str	r3, [sp, #4]
   bd8b6:	bd08      	pop	{r3, pc}
   bd8b8:	00030224 	.word	0x00030224

000bd8bc <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bd8bc:	b508      	push	{r3, lr}
   bd8be:	4b02      	ldr	r3, [pc, #8]	; (bd8c8 <HAL_Servo_Write_Pulse_Width+0xc>)
   bd8c0:	681b      	ldr	r3, [r3, #0]
   bd8c2:	699b      	ldr	r3, [r3, #24]
   bd8c4:	9301      	str	r3, [sp, #4]
   bd8c6:	bd08      	pop	{r3, pc}
   bd8c8:	00030224 	.word	0x00030224

000bd8cc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bd8cc:	b508      	push	{r3, lr}
   bd8ce:	4b02      	ldr	r3, [pc, #8]	; (bd8d8 <HAL_USB_USART_Init+0xc>)
   bd8d0:	681b      	ldr	r3, [r3, #0]
   bd8d2:	681b      	ldr	r3, [r3, #0]
   bd8d4:	9301      	str	r3, [sp, #4]
   bd8d6:	bd08      	pop	{r3, pc}
   bd8d8:	0003024c 	.word	0x0003024c

000bd8dc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bd8dc:	b508      	push	{r3, lr}
   bd8de:	4b02      	ldr	r3, [pc, #8]	; (bd8e8 <HAL_USB_USART_Begin+0xc>)
   bd8e0:	681b      	ldr	r3, [r3, #0]
   bd8e2:	685b      	ldr	r3, [r3, #4]
   bd8e4:	9301      	str	r3, [sp, #4]
   bd8e6:	bd08      	pop	{r3, pc}
   bd8e8:	0003024c 	.word	0x0003024c

000bd8ec <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bd8ec:	b508      	push	{r3, lr}
   bd8ee:	4b02      	ldr	r3, [pc, #8]	; (bd8f8 <HAL_USB_USART_End+0xc>)
   bd8f0:	681b      	ldr	r3, [r3, #0]
   bd8f2:	689b      	ldr	r3, [r3, #8]
   bd8f4:	9301      	str	r3, [sp, #4]
   bd8f6:	bd08      	pop	{r3, pc}
   bd8f8:	0003024c 	.word	0x0003024c

000bd8fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bd8fc:	b508      	push	{r3, lr}
   bd8fe:	4b02      	ldr	r3, [pc, #8]	; (bd908 <HAL_USB_USART_Available_Data+0xc>)
   bd900:	681b      	ldr	r3, [r3, #0]
   bd902:	691b      	ldr	r3, [r3, #16]
   bd904:	9301      	str	r3, [sp, #4]
   bd906:	bd08      	pop	{r3, pc}
   bd908:	0003024c 	.word	0x0003024c

000bd90c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bd90c:	b508      	push	{r3, lr}
   bd90e:	4b02      	ldr	r3, [pc, #8]	; (bd918 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bd910:	681b      	ldr	r3, [r3, #0]
   bd912:	695b      	ldr	r3, [r3, #20]
   bd914:	9301      	str	r3, [sp, #4]
   bd916:	bd08      	pop	{r3, pc}
   bd918:	0003024c 	.word	0x0003024c

000bd91c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd91c:	b508      	push	{r3, lr}
   bd91e:	4b02      	ldr	r3, [pc, #8]	; (bd928 <HAL_USB_USART_Receive_Data+0xc>)
   bd920:	681b      	ldr	r3, [r3, #0]
   bd922:	699b      	ldr	r3, [r3, #24]
   bd924:	9301      	str	r3, [sp, #4]
   bd926:	bd08      	pop	{r3, pc}
   bd928:	0003024c 	.word	0x0003024c

000bd92c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd92c:	b508      	push	{r3, lr}
   bd92e:	4b02      	ldr	r3, [pc, #8]	; (bd938 <HAL_USB_USART_Send_Data+0xc>)
   bd930:	681b      	ldr	r3, [r3, #0]
   bd932:	69db      	ldr	r3, [r3, #28]
   bd934:	9301      	str	r3, [sp, #4]
   bd936:	bd08      	pop	{r3, pc}
   bd938:	0003024c 	.word	0x0003024c

000bd93c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bd93c:	b508      	push	{r3, lr}
   bd93e:	4b02      	ldr	r3, [pc, #8]	; (bd948 <HAL_USB_USART_Flush_Data+0xc>)
   bd940:	681b      	ldr	r3, [r3, #0]
   bd942:	6a1b      	ldr	r3, [r3, #32]
   bd944:	9301      	str	r3, [sp, #4]
   bd946:	bd08      	pop	{r3, pc}
   bd948:	0003024c 	.word	0x0003024c

000bd94c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bd94c:	b508      	push	{r3, lr}
   bd94e:	4b02      	ldr	r3, [pc, #8]	; (bd958 <panic_+0xc>)
   bd950:	681b      	ldr	r3, [r3, #0]
   bd952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd954:	9301      	str	r3, [sp, #4]
   bd956:	bd08      	pop	{r3, pc}
   bd958:	00030260 	.word	0x00030260

000bd95c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bd95c:	b508      	push	{r3, lr}
   bd95e:	4b02      	ldr	r3, [pc, #8]	; (bd968 <log_message+0xc>)
   bd960:	681b      	ldr	r3, [r3, #0]
   bd962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd964:	9301      	str	r3, [sp, #4]
   bd966:	bd08      	pop	{r3, pc}
   bd968:	00030260 	.word	0x00030260

000bd96c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bd96c:	b508      	push	{r3, lr}
   bd96e:	4b02      	ldr	r3, [pc, #8]	; (bd978 <log_level_name+0xc>)
   bd970:	681b      	ldr	r3, [r3, #0]
   bd972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bd974:	9301      	str	r3, [sp, #4]
   bd976:	bd08      	pop	{r3, pc}
   bd978:	00030260 	.word	0x00030260

000bd97c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bd97c:	b508      	push	{r3, lr}
   bd97e:	4b02      	ldr	r3, [pc, #8]	; (bd988 <log_set_callbacks+0xc>)
   bd980:	681b      	ldr	r3, [r3, #0]
   bd982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd984:	9301      	str	r3, [sp, #4]
   bd986:	bd08      	pop	{r3, pc}
   bd988:	00030260 	.word	0x00030260

000bd98c <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   bd98c:	b508      	push	{r3, lr}
   bd98e:	4b03      	ldr	r3, [pc, #12]	; (bd99c <led_set_status_active+0x10>)
   bd990:	681b      	ldr	r3, [r3, #0]
   bd992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bd996:	9301      	str	r3, [sp, #4]
   bd998:	bd08      	pop	{r3, pc}
   bd99a:	0000      	.short	0x0000
   bd99c:	00030260 	.word	0x00030260

000bd9a0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bd9a0:	b508      	push	{r3, lr}
   bd9a2:	4b02      	ldr	r3, [pc, #8]	; (bd9ac <system_mode+0xc>)
   bd9a4:	681b      	ldr	r3, [r3, #0]
   bd9a6:	681b      	ldr	r3, [r3, #0]
   bd9a8:	9301      	str	r3, [sp, #4]
   bd9aa:	bd08      	pop	{r3, pc}
   bd9ac:	00030220 	.word	0x00030220

000bd9b0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bd9b0:	b508      	push	{r3, lr}
   bd9b2:	4b02      	ldr	r3, [pc, #8]	; (bd9bc <set_system_mode+0xc>)
   bd9b4:	681b      	ldr	r3, [r3, #0]
   bd9b6:	685b      	ldr	r3, [r3, #4]
   bd9b8:	9301      	str	r3, [sp, #4]
   bd9ba:	bd08      	pop	{r3, pc}
   bd9bc:	00030220 	.word	0x00030220

000bd9c0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bd9c0:	b508      	push	{r3, lr}
   bd9c2:	4b02      	ldr	r3, [pc, #8]	; (bd9cc <system_delay_ms+0xc>)
   bd9c4:	681b      	ldr	r3, [r3, #0]
   bd9c6:	695b      	ldr	r3, [r3, #20]
   bd9c8:	9301      	str	r3, [sp, #4]
   bd9ca:	bd08      	pop	{r3, pc}
   bd9cc:	00030220 	.word	0x00030220

000bd9d0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bd9d0:	b508      	push	{r3, lr}
   bd9d2:	4b02      	ldr	r3, [pc, #8]	; (bd9dc <application_thread_current+0xc>)
   bd9d4:	681b      	ldr	r3, [r3, #0]
   bd9d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd9d8:	9301      	str	r3, [sp, #4]
   bd9da:	bd08      	pop	{r3, pc}
   bd9dc:	00030220 	.word	0x00030220

000bd9e0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bd9e0:	b508      	push	{r3, lr}
   bd9e2:	4b02      	ldr	r3, [pc, #8]	; (bd9ec <application_thread_invoke+0xc>)
   bd9e4:	681b      	ldr	r3, [r3, #0]
   bd9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd9e8:	9301      	str	r3, [sp, #4]
   bd9ea:	bd08      	pop	{r3, pc}
   bd9ec:	00030220 	.word	0x00030220

000bd9f0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bd9f0:	b508      	push	{r3, lr}
   bd9f2:	4b02      	ldr	r3, [pc, #8]	; (bd9fc <system_thread_get_state+0xc>)
   bd9f4:	681b      	ldr	r3, [r3, #0]
   bd9f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd9f8:	9301      	str	r3, [sp, #4]
   bd9fa:	bd08      	pop	{r3, pc}
   bd9fc:	00030220 	.word	0x00030220

000bda00 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   bda00:	b508      	push	{r3, lr}
   bda02:	4b02      	ldr	r3, [pc, #8]	; (bda0c <led_pattern_period+0xc>)
   bda04:	681b      	ldr	r3, [r3, #0]
   bda06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bda08:	9301      	str	r3, [sp, #4]
   bda0a:	bd08      	pop	{r3, pc}
   bda0c:	00030220 	.word	0x00030220

000bda10 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bda10:	b508      	push	{r3, lr}
   bda12:	4b03      	ldr	r3, [pc, #12]	; (bda20 <system_ctrl_set_app_request_handler+0x10>)
   bda14:	681b      	ldr	r3, [r3, #0]
   bda16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bda1a:	9301      	str	r3, [sp, #4]
   bda1c:	bd08      	pop	{r3, pc}
   bda1e:	0000      	.short	0x0000
   bda20:	00030220 	.word	0x00030220

000bda24 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bda24:	b508      	push	{r3, lr}
   bda26:	4b03      	ldr	r3, [pc, #12]	; (bda34 <system_ctrl_set_result+0x10>)
   bda28:	681b      	ldr	r3, [r3, #0]
   bda2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bda2e:	9301      	str	r3, [sp, #4]
   bda30:	bd08      	pop	{r3, pc}
   bda32:	0000      	.short	0x0000
   bda34:	00030220 	.word	0x00030220

000bda38 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bda38:	b508      	push	{r3, lr}
   bda3a:	4b02      	ldr	r3, [pc, #8]	; (bda44 <network_connect+0xc>)
   bda3c:	681b      	ldr	r3, [r3, #0]
   bda3e:	685b      	ldr	r3, [r3, #4]
   bda40:	9301      	str	r3, [sp, #4]
   bda42:	bd08      	pop	{r3, pc}
   bda44:	00030240 	.word	0x00030240

000bda48 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bda48:	b508      	push	{r3, lr}
   bda4a:	4b02      	ldr	r3, [pc, #8]	; (bda54 <network_connecting+0xc>)
   bda4c:	681b      	ldr	r3, [r3, #0]
   bda4e:	689b      	ldr	r3, [r3, #8]
   bda50:	9301      	str	r3, [sp, #4]
   bda52:	bd08      	pop	{r3, pc}
   bda54:	00030240 	.word	0x00030240

000bda58 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bda58:	b508      	push	{r3, lr}
   bda5a:	4b02      	ldr	r3, [pc, #8]	; (bda64 <network_disconnect+0xc>)
   bda5c:	681b      	ldr	r3, [r3, #0]
   bda5e:	68db      	ldr	r3, [r3, #12]
   bda60:	9301      	str	r3, [sp, #4]
   bda62:	bd08      	pop	{r3, pc}
   bda64:	00030240 	.word	0x00030240

000bda68 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bda68:	b508      	push	{r3, lr}
   bda6a:	4b02      	ldr	r3, [pc, #8]	; (bda74 <network_ready+0xc>)
   bda6c:	681b      	ldr	r3, [r3, #0]
   bda6e:	691b      	ldr	r3, [r3, #16]
   bda70:	9301      	str	r3, [sp, #4]
   bda72:	bd08      	pop	{r3, pc}
   bda74:	00030240 	.word	0x00030240

000bda78 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bda78:	b508      	push	{r3, lr}
   bda7a:	4b02      	ldr	r3, [pc, #8]	; (bda84 <network_on+0xc>)
   bda7c:	681b      	ldr	r3, [r3, #0]
   bda7e:	695b      	ldr	r3, [r3, #20]
   bda80:	9301      	str	r3, [sp, #4]
   bda82:	bd08      	pop	{r3, pc}
   bda84:	00030240 	.word	0x00030240

000bda88 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bda88:	b508      	push	{r3, lr}
   bda8a:	4b02      	ldr	r3, [pc, #8]	; (bda94 <network_off+0xc>)
   bda8c:	681b      	ldr	r3, [r3, #0]
   bda8e:	699b      	ldr	r3, [r3, #24]
   bda90:	9301      	str	r3, [sp, #4]
   bda92:	bd08      	pop	{r3, pc}
   bda94:	00030240 	.word	0x00030240

000bda98 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bda98:	b508      	push	{r3, lr}
   bda9a:	4b02      	ldr	r3, [pc, #8]	; (bdaa4 <network_listen+0xc>)
   bda9c:	681b      	ldr	r3, [r3, #0]
   bda9e:	69db      	ldr	r3, [r3, #28]
   bdaa0:	9301      	str	r3, [sp, #4]
   bdaa2:	bd08      	pop	{r3, pc}
   bdaa4:	00030240 	.word	0x00030240

000bdaa8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bdaa8:	b508      	push	{r3, lr}
   bdaaa:	4b02      	ldr	r3, [pc, #8]	; (bdab4 <network_listening+0xc>)
   bdaac:	681b      	ldr	r3, [r3, #0]
   bdaae:	6a1b      	ldr	r3, [r3, #32]
   bdab0:	9301      	str	r3, [sp, #4]
   bdab2:	bd08      	pop	{r3, pc}
   bdab4:	00030240 	.word	0x00030240

000bdab8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bdab8:	b508      	push	{r3, lr}
   bdaba:	4b02      	ldr	r3, [pc, #8]	; (bdac4 <network_set_listen_timeout+0xc>)
   bdabc:	681b      	ldr	r3, [r3, #0]
   bdabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdac0:	9301      	str	r3, [sp, #4]
   bdac2:	bd08      	pop	{r3, pc}
   bdac4:	00030240 	.word	0x00030240

000bdac8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bdac8:	b508      	push	{r3, lr}
   bdaca:	4b02      	ldr	r3, [pc, #8]	; (bdad4 <network_get_listen_timeout+0xc>)
   bdacc:	681b      	ldr	r3, [r3, #0]
   bdace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bdad0:	9301      	str	r3, [sp, #4]
   bdad2:	bd08      	pop	{r3, pc}
   bdad4:	00030240 	.word	0x00030240

000bdad8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bdad8:	b508      	push	{r3, lr}
   bdada:	4b02      	ldr	r3, [pc, #8]	; (bdae4 <network_is_on+0xc>)
   bdadc:	681b      	ldr	r3, [r3, #0]
   bdade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdae0:	9301      	str	r3, [sp, #4]
   bdae2:	bd08      	pop	{r3, pc}
   bdae4:	00030240 	.word	0x00030240

000bdae8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bdae8:	b508      	push	{r3, lr}
   bdaea:	4b02      	ldr	r3, [pc, #8]	; (bdaf4 <network_is_off+0xc>)
   bdaec:	681b      	ldr	r3, [r3, #0]
   bdaee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdaf0:	9301      	str	r3, [sp, #4]
   bdaf2:	bd08      	pop	{r3, pc}
   bdaf4:	00030240 	.word	0x00030240

000bdaf8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bdaf8:	b508      	push	{r3, lr}
   bdafa:	4b02      	ldr	r3, [pc, #8]	; (bdb04 <spark_process+0xc>)
   bdafc:	681b      	ldr	r3, [r3, #0]
   bdafe:	689b      	ldr	r3, [r3, #8]
   bdb00:	9301      	str	r3, [sp, #4]
   bdb02:	bd08      	pop	{r3, pc}
   bdb04:	00030244 	.word	0x00030244

000bdb08 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bdb08:	b508      	push	{r3, lr}
   bdb0a:	4b02      	ldr	r3, [pc, #8]	; (bdb14 <spark_cloud_flag_connected+0xc>)
   bdb0c:	681b      	ldr	r3, [r3, #0]
   bdb0e:	695b      	ldr	r3, [r3, #20]
   bdb10:	9301      	str	r3, [sp, #4]
   bdb12:	bd08      	pop	{r3, pc}
   bdb14:	00030244 	.word	0x00030244

000bdb18 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bdb18:	b508      	push	{r3, lr}
   bdb1a:	4b02      	ldr	r3, [pc, #8]	; (bdb24 <spark_send_event+0xc>)
   bdb1c:	681b      	ldr	r3, [r3, #0]
   bdb1e:	6a1b      	ldr	r3, [r3, #32]
   bdb20:	9301      	str	r3, [sp, #4]
   bdb22:	bd08      	pop	{r3, pc}
   bdb24:	00030244 	.word	0x00030244

000bdb28 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   bdb28:	b508      	push	{r3, lr}
   bdb2a:	4b02      	ldr	r3, [pc, #8]	; (bdb34 <spark_subscribe+0xc>)
   bdb2c:	681b      	ldr	r3, [r3, #0]
   bdb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdb30:	9301      	str	r3, [sp, #4]
   bdb32:	bd08      	pop	{r3, pc}
   bdb34:	00030244 	.word	0x00030244

000bdb38 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bdb38:	b508      	push	{r3, lr}
   bdb3a:	4b02      	ldr	r3, [pc, #8]	; (bdb44 <spark_sync_time_pending+0xc>)
   bdb3c:	681b      	ldr	r3, [r3, #0]
   bdb3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdb40:	9301      	str	r3, [sp, #4]
   bdb42:	bd08      	pop	{r3, pc}
   bdb44:	00030244 	.word	0x00030244

000bdb48 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bdb48:	b508      	push	{r3, lr}
   bdb4a:	4b02      	ldr	r3, [pc, #8]	; (bdb54 <spark_set_random_seed_from_cloud_handler+0xc>)
   bdb4c:	681b      	ldr	r3, [r3, #0]
   bdb4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bdb50:	9301      	str	r3, [sp, #4]
   bdb52:	bd08      	pop	{r3, pc}
   bdb54:	00030244 	.word	0x00030244

000bdb58 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bdb58:	b508      	push	{r3, lr}
   bdb5a:	4b02      	ldr	r3, [pc, #8]	; (bdb64 <malloc+0xc>)
   bdb5c:	681b      	ldr	r3, [r3, #0]
   bdb5e:	681b      	ldr	r3, [r3, #0]
   bdb60:	9301      	str	r3, [sp, #4]
   bdb62:	bd08      	pop	{r3, pc}
   bdb64:	0003021c 	.word	0x0003021c

000bdb68 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bdb68:	b508      	push	{r3, lr}
   bdb6a:	4b02      	ldr	r3, [pc, #8]	; (bdb74 <free+0xc>)
   bdb6c:	681b      	ldr	r3, [r3, #0]
   bdb6e:	685b      	ldr	r3, [r3, #4]
   bdb70:	9301      	str	r3, [sp, #4]
   bdb72:	bd08      	pop	{r3, pc}
   bdb74:	0003021c 	.word	0x0003021c

000bdb78 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bdb78:	b508      	push	{r3, lr}
   bdb7a:	4b02      	ldr	r3, [pc, #8]	; (bdb84 <realloc+0xc>)
   bdb7c:	681b      	ldr	r3, [r3, #0]
   bdb7e:	689b      	ldr	r3, [r3, #8]
   bdb80:	9301      	str	r3, [sp, #4]
   bdb82:	bd08      	pop	{r3, pc}
   bdb84:	0003021c 	.word	0x0003021c

000bdb88 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   bdb88:	b508      	push	{r3, lr}
   bdb8a:	4b02      	ldr	r3, [pc, #8]	; (bdb94 <sprintf+0xc>)
   bdb8c:	681b      	ldr	r3, [r3, #0]
   bdb8e:	68db      	ldr	r3, [r3, #12]
   bdb90:	9301      	str	r3, [sp, #4]
   bdb92:	bd08      	pop	{r3, pc}
   bdb94:	0003021c 	.word	0x0003021c

000bdb98 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bdb98:	b508      	push	{r3, lr}
   bdb9a:	4b02      	ldr	r3, [pc, #8]	; (bdba4 <sscanf+0xc>)
   bdb9c:	681b      	ldr	r3, [r3, #0]
   bdb9e:	695b      	ldr	r3, [r3, #20]
   bdba0:	9301      	str	r3, [sp, #4]
   bdba2:	bd08      	pop	{r3, pc}
   bdba4:	0003021c 	.word	0x0003021c

000bdba8 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bdba8:	b508      	push	{r3, lr}
   bdbaa:	4b02      	ldr	r3, [pc, #8]	; (bdbb4 <snprintf+0xc>)
   bdbac:	681b      	ldr	r3, [r3, #0]
   bdbae:	69db      	ldr	r3, [r3, #28]
   bdbb0:	9301      	str	r3, [sp, #4]
   bdbb2:	bd08      	pop	{r3, pc}
   bdbb4:	0003021c 	.word	0x0003021c

000bdbb8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bdbb8:	b508      	push	{r3, lr}
   bdbba:	4b02      	ldr	r3, [pc, #8]	; (bdbc4 <vsnprintf+0xc>)
   bdbbc:	681b      	ldr	r3, [r3, #0]
   bdbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdbc0:	9301      	str	r3, [sp, #4]
   bdbc2:	bd08      	pop	{r3, pc}
   bdbc4:	0003021c 	.word	0x0003021c

000bdbc8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bdbc8:	b508      	push	{r3, lr}
   bdbca:	4b02      	ldr	r3, [pc, #8]	; (bdbd4 <abort+0xc>)
   bdbcc:	681b      	ldr	r3, [r3, #0]
   bdbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdbd0:	9301      	str	r3, [sp, #4]
   bdbd2:	bd08      	pop	{r3, pc}
   bdbd4:	0003021c 	.word	0x0003021c

000bdbd8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bdbd8:	b508      	push	{r3, lr}
   bdbda:	4b02      	ldr	r3, [pc, #8]	; (bdbe4 <_malloc_r+0xc>)
   bdbdc:	681b      	ldr	r3, [r3, #0]
   bdbde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdbe0:	9301      	str	r3, [sp, #4]
   bdbe2:	bd08      	pop	{r3, pc}
   bdbe4:	0003021c 	.word	0x0003021c

000bdbe8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bdbe8:	b508      	push	{r3, lr}
   bdbea:	4b02      	ldr	r3, [pc, #8]	; (bdbf4 <__errno+0xc>)
   bdbec:	681b      	ldr	r3, [r3, #0]
   bdbee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bdbf0:	9301      	str	r3, [sp, #4]
   bdbf2:	bd08      	pop	{r3, pc}
   bdbf4:	0003021c 	.word	0x0003021c

000bdbf8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bdbf8:	b508      	push	{r3, lr}
   bdbfa:	4b02      	ldr	r3, [pc, #8]	; (bdc04 <__assert_func+0xc>)
   bdbfc:	681b      	ldr	r3, [r3, #0]
   bdbfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdc00:	9301      	str	r3, [sp, #4]
   bdc02:	bd08      	pop	{r3, pc}
   bdc04:	0003021c 	.word	0x0003021c

000bdc08 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bdc08:	b508      	push	{r3, lr}
   bdc0a:	4b02      	ldr	r3, [pc, #8]	; (bdc14 <newlib_impure_ptr_callback+0xc>)
   bdc0c:	681b      	ldr	r3, [r3, #0]
   bdc0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdc10:	9301      	str	r3, [sp, #4]
   bdc12:	bd08      	pop	{r3, pc}
   bdc14:	0003021c 	.word	0x0003021c

000bdc18 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bdc18:	b508      	push	{r3, lr}
   bdc1a:	4b02      	ldr	r3, [pc, #8]	; (bdc24 <localtime_r+0xc>)
   bdc1c:	681b      	ldr	r3, [r3, #0]
   bdc1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bdc20:	9301      	str	r3, [sp, #4]
   bdc22:	bd08      	pop	{r3, pc}
   bdc24:	0003021c 	.word	0x0003021c

000bdc28 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bdc28:	2200      	movs	r2, #0
   bdc2a:	6840      	ldr	r0, [r0, #4]
   bdc2c:	4611      	mov	r1, r2
   bdc2e:	f7ff bf3b 	b.w	bdaa8 <network_listening>

000bdc32 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bdc32:	2200      	movs	r2, #0
   bdc34:	6840      	ldr	r0, [r0, #4]
   bdc36:	4611      	mov	r1, r2
   bdc38:	f7ff bf46 	b.w	bdac8 <network_get_listen_timeout>

000bdc3c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bdc3c:	6840      	ldr	r0, [r0, #4]
   bdc3e:	2200      	movs	r2, #0
   bdc40:	f7ff bf3a 	b.w	bdab8 <network_set_listen_timeout>

000bdc44 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bdc44:	6840      	ldr	r0, [r0, #4]
   bdc46:	2200      	movs	r2, #0
   bdc48:	f081 0101 	eor.w	r1, r1, #1
   bdc4c:	f7ff bf24 	b.w	bda98 <network_listen>

000bdc50 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bdc50:	2300      	movs	r3, #0
   bdc52:	6840      	ldr	r0, [r0, #4]
   bdc54:	461a      	mov	r2, r3
   bdc56:	4619      	mov	r1, r3
   bdc58:	f7ff bf16 	b.w	bda88 <network_off>

000bdc5c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bdc5c:	2300      	movs	r3, #0
   bdc5e:	6840      	ldr	r0, [r0, #4]
   bdc60:	461a      	mov	r2, r3
   bdc62:	4619      	mov	r1, r3
   bdc64:	f7ff bf08 	b.w	bda78 <network_on>

000bdc68 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bdc68:	2200      	movs	r2, #0
   bdc6a:	6840      	ldr	r0, [r0, #4]
   bdc6c:	4611      	mov	r1, r2
   bdc6e:	f7ff befb 	b.w	bda68 <network_ready>

000bdc72 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bdc72:	2200      	movs	r2, #0
   bdc74:	6840      	ldr	r0, [r0, #4]
   bdc76:	4611      	mov	r1, r2
   bdc78:	f7ff bee6 	b.w	bda48 <network_connecting>

000bdc7c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bdc7c:	6840      	ldr	r0, [r0, #4]
   bdc7e:	2200      	movs	r2, #0
   bdc80:	2102      	movs	r1, #2
   bdc82:	f7ff bee9 	b.w	bda58 <network_disconnect>

000bdc86 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bdc86:	2300      	movs	r3, #0
   bdc88:	6840      	ldr	r0, [r0, #4]
   bdc8a:	461a      	mov	r2, r3
   bdc8c:	f7ff bed4 	b.w	bda38 <network_connect>

000bdc90 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bdc90:	4b02      	ldr	r3, [pc, #8]	; (bdc9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bdc92:	2203      	movs	r2, #3
   bdc94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bdc96:	4a02      	ldr	r2, [pc, #8]	; (bdca0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bdc98:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bdc9a:	4770      	bx	lr
   bdc9c:	2003e61c 	.word	0x2003e61c
   bdca0:	000c73b4 	.word	0x000c73b4

000bdca4 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   bdca4:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   bdca6:	460b      	mov	r3, r1
    s->update(ticks);
   bdca8:	6892      	ldr	r2, [r2, #8]
   bdcaa:	4601      	mov	r1, r0
   bdcac:	4618      	mov	r0, r3
   bdcae:	4710      	bx	r2

000bdcb0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   bdcb0:	b570      	push	{r4, r5, r6, lr}
   bdcb2:	4c0e      	ldr	r4, [pc, #56]	; (bdcec <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   bdcb4:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   bdcb6:	2500      	movs	r5, #0
   bdcb8:	241c      	movs	r4, #28
   bdcba:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bdcbe:	f89d 4014 	ldrb.w	r4, [sp, #20]
   bdcc2:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   bdcc6:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bdcc8:	f004 0403 	and.w	r4, r4, #3
   bdccc:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   bdcd0:	b2e4      	uxtb	r4, r4
   bdcd2:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   bdcd4:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   bdcd6:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   bdcd8:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   bdcda:	7c42      	ldrb	r2, [r0, #17]
   bdcdc:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   bdcde:	bf0a      	itet	eq
   bdce0:	4b03      	ldreq	r3, [pc, #12]	; (bdcf0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   bdce2:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   bdce4:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   bdce8:	bd70      	pop	{r4, r5, r6, pc}
   bdcea:	bf00      	nop
   bdcec:	000c6538 	.word	0x000c6538
   bdcf0:	000bdca5 	.word	0x000bdca5

000bdcf4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bdcf4:	2100      	movs	r1, #0
   bdcf6:	f7ff bdc9 	b.w	bd88c <hal_spi_release>

000bdcfa <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bdcfa:	2100      	movs	r1, #0
   bdcfc:	f7ff bdbe 	b.w	bd87c <hal_spi_acquire>

000bdd00 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bdd00:	b510      	push	{r4, lr}
   bdd02:	4604      	mov	r4, r0
   bdd04:	4608      	mov	r0, r1
{
    _spi = spi;
   bdd06:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bdd08:	f7ff fd80 	bl	bd80c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bdd0c:	2300      	movs	r3, #0
   bdd0e:	6063      	str	r3, [r4, #4]
}
   bdd10:	4620      	mov	r0, r4
   bdd12:	bd10      	pop	{r4, pc}

000bdd14 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bdd14:	b513      	push	{r0, r1, r4, lr}
   bdd16:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bdd18:	7800      	ldrb	r0, [r0, #0]
   bdd1a:	f7ff ffee 	bl	bdcfa <_ZN8SPIClass4lockEv.isra.0>
   bdd1e:	b958      	cbnz	r0, bdd38 <_ZN8SPIClass5beginEv+0x24>
   bdd20:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bdd22:	9001      	str	r0, [sp, #4]
   bdd24:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bdd28:	f7ff fd58 	bl	bd7dc <hal_spi_begin>
        unlock();
   bdd2c:	9801      	ldr	r0, [sp, #4]
    }
}
   bdd2e:	b002      	add	sp, #8
   bdd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bdd34:	f7ff bfde 	b.w	bdcf4 <_ZN8SPIClass6unlockEv.isra.0>
   bdd38:	b002      	add	sp, #8
   bdd3a:	bd10      	pop	{r4, pc}

000bdd3c <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
   bdd3c:	b513      	push	{r0, r1, r4, lr}
   bdd3e:	4604      	mov	r4, r0
    if (!lock())
   bdd40:	7800      	ldrb	r0, [r0, #0]
{
   bdd42:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
   bdd46:	f7ff ffd8 	bl	bdcfa <_ZN8SPIClass4lockEv.isra.0>
   bdd4a:	e9dd 2100 	ldrd	r2, r1, [sp]
   bdd4e:	4603      	mov	r3, r0
   bdd50:	b948      	cbnz	r0, bdd66 <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
   bdd52:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
   bdd54:	9000      	str	r0, [sp, #0]
   bdd56:	f7ff fd79 	bl	bd84c <hal_spi_begin_ext>
        unlock();
   bdd5a:	9800      	ldr	r0, [sp, #0]
    }
}
   bdd5c:	b002      	add	sp, #8
   bdd5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bdd62:	f7ff bfc7 	b.w	bdcf4 <_ZN8SPIClass6unlockEv.isra.0>
   bdd66:	b002      	add	sp, #8
   bdd68:	bd10      	pop	{r4, pc}

000bdd6a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bdd6a:	7800      	ldrb	r0, [r0, #0]
   bdd6c:	f7ff bfc2 	b.w	bdcf4 <_ZN8SPIClass6unlockEv.isra.0>

000bdd70 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bdd70:	0840      	lsrs	r0, r0, #1
{
   bdd72:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bdd74:	6018      	str	r0, [r3, #0]
   bdd76:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bdd78:	6818      	ldr	r0, [r3, #0]
   bdd7a:	4288      	cmp	r0, r1
   bdd7c:	b2e5      	uxtb	r5, r4
   bdd7e:	d906      	bls.n	bdd8e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bdd80:	3401      	adds	r4, #1
   bdd82:	2c08      	cmp	r4, #8
   bdd84:	d002      	beq.n	bdd8c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bdd86:	0840      	lsrs	r0, r0, #1
   bdd88:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bdd8a:	e7f5      	b.n	bdd78 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bdd8c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bdd8e:	4b02      	ldr	r3, [pc, #8]	; (bdd98 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bdd90:	5d5b      	ldrb	r3, [r3, r5]
   bdd92:	7013      	strb	r3, [r2, #0]
}
   bdd94:	bd30      	pop	{r4, r5, pc}
   bdd96:	bf00      	nop
   bdd98:	000c73e8 	.word	0x000c73e8

000bdd9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bdd9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bdda0:	4606      	mov	r6, r0
   bdda2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bdda4:	7800      	ldrb	r0, [r0, #0]
{
   bdda6:	460c      	mov	r4, r1
    CHECK(lock());
   bdda8:	f7ff ffa7 	bl	bdcfa <_ZN8SPIClass4lockEv.isra.0>
   bddac:	2800      	cmp	r0, #0
   bddae:	db1b      	blt.n	bdde8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bddb0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bddb2:	2214      	movs	r2, #20
   bddb4:	2100      	movs	r1, #0
   bddb6:	a809      	add	r0, sp, #36	; 0x24
   bddb8:	f006 f80a 	bl	c3dd0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bddbc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bddbe:	2200      	movs	r2, #0
   bddc0:	a909      	add	r1, sp, #36	; 0x24
   bddc2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bddc4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bddc8:	f7ff fd30 	bl	bd82c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bddcc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bddd0:	b113      	cbz	r3, bddd8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bddd2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bddd6:	b155      	cbz	r5, bddee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bddd8:	2700      	movs	r7, #0
   bddda:	46b9      	mov	r9, r7
   bdddc:	46b8      	mov	r8, r7
   bddde:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bdde0:	7923      	ldrb	r3, [r4, #4]
   bdde2:	b15d      	cbz	r5, bddfc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bdde4:	b1c3      	cbz	r3, bde18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bdde6:	2000      	movs	r0, #0
}
   bdde8:	b00f      	add	sp, #60	; 0x3c
   bddea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bddee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bddf2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bddf6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bddfa:	e7f1      	b.n	bdde0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bddfc:	2b00      	cmp	r3, #0
   bddfe:	d135      	bne.n	bde6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bde00:	68a3      	ldr	r3, [r4, #8]
   bde02:	4543      	cmp	r3, r8
   bde04:	d108      	bne.n	bde18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bde06:	f88d 9020 	strb.w	r9, [sp, #32]
   bde0a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bde0e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bde12:	89a3      	ldrh	r3, [r4, #12]
   bde14:	429a      	cmp	r2, r3
   bde16:	d0e6      	beq.n	bdde6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bde18:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bde1a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bde1c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bde20:	980a      	ldr	r0, [sp, #40]	; 0x28
   bde22:	ab04      	add	r3, sp, #16
   bde24:	f10d 020f 	add.w	r2, sp, #15
   bde28:	f7ff ffa2 	bl	bdd70 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bde2c:	7921      	ldrb	r1, [r4, #4]
   bde2e:	b985      	cbnz	r5, bde52 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bde30:	b989      	cbnz	r1, bde56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bde32:	68a3      	ldr	r3, [r4, #8]
   bde34:	4543      	cmp	r3, r8
   bde36:	d30e      	bcc.n	bde56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bde38:	f88d 9020 	strb.w	r9, [sp, #32]
   bde3c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bde40:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bde44:	89a3      	ldrh	r3, [r4, #12]
   bde46:	429a      	cmp	r2, r3
   bde48:	d105      	bne.n	bde56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bde4a:	9b04      	ldr	r3, [sp, #16]
   bde4c:	4543      	cmp	r3, r8
   bde4e:	d102      	bne.n	bde56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bde50:	e7c9      	b.n	bdde6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bde52:	2900      	cmp	r1, #0
   bde54:	d1f9      	bne.n	bde4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bde56:	2300      	movs	r3, #0
   bde58:	9301      	str	r3, [sp, #4]
   bde5a:	7b63      	ldrb	r3, [r4, #13]
   bde5c:	9300      	str	r3, [sp, #0]
   bde5e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bde62:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bde64:	7830      	ldrb	r0, [r6, #0]
   bde66:	f7ff fd01 	bl	bd86c <hal_spi_set_settings>
   bde6a:	e7bc      	b.n	bdde6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bde6c:	e9cd 5500 	strd	r5, r5, [sp]
   bde70:	462b      	mov	r3, r5
   bde72:	462a      	mov	r2, r5
   bde74:	2101      	movs	r1, #1
   bde76:	e7f5      	b.n	bde64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bde78 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   bde78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bde7c:	b088      	sub	sp, #32
    unsigned clock = 0;
   bde7e:	2300      	movs	r3, #0
{
   bde80:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   bde82:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   bde84:	9302      	str	r3, [sp, #8]
{
   bde86:	460e      	mov	r6, r1
   bde88:	4617      	mov	r7, r2
    if (!lock())
   bde8a:	f7ff ff36 	bl	bdcfa <_ZN8SPIClass4lockEv.isra.0>
   bde8e:	4605      	mov	r5, r0
   bde90:	bb00      	cbnz	r0, bded4 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   bde92:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   bde96:	4601      	mov	r1, r0
   bde98:	2214      	movs	r2, #20
   bde9a:	a803      	add	r0, sp, #12
   bde9c:	f005 ff98 	bl	c3dd0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bdea0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bdea2:	462a      	mov	r2, r5
   bdea4:	a903      	add	r1, sp, #12
   bdea6:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   bdea8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   bdeac:	f7ff fcbe 	bl	bd82c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   bdeb0:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   bdeb2:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   bdeb6:	ab02      	add	r3, sp, #8
   bdeb8:	f10d 0207 	add.w	r2, sp, #7
   bdebc:	fb07 f106 	mul.w	r1, r7, r6
   bdec0:	f7ff ff56 	bl	bdd70 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   bdec4:	7820      	ldrb	r0, [r4, #0]
   bdec6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   bdeca:	f7ff fc8f 	bl	bd7ec <hal_spi_set_clock_divider>
        unlock();
   bdece:	7820      	ldrb	r0, [r4, #0]
   bded0:	f7ff ff10 	bl	bdcf4 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   bded4:	9802      	ldr	r0, [sp, #8]
   bded6:	b008      	add	sp, #32
   bded8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bdedc <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   bdedc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bdede:	7800      	ldrb	r0, [r0, #0]
   bdee0:	f7ff fc8c 	bl	bd7fc <hal_spi_transfer>
}
   bdee4:	b2c0      	uxtb	r0, r0
   bdee6:	bd08      	pop	{r3, pc}

000bdee8 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   bdee8:	b530      	push	{r4, r5, lr}
   bdeea:	b087      	sub	sp, #28
   bdeec:	4604      	mov	r4, r0
   bdeee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   bdef0:	9500      	str	r5, [sp, #0]
   bdef2:	7800      	ldrb	r0, [r0, #0]
   bdef4:	f7ff fca2 	bl	bd83c <hal_spi_transfer_dma>
    if (user_callback == NULL)
   bdef8:	b93d      	cbnz	r5, bdf0a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   bdefa:	7820      	ldrb	r0, [r4, #0]
   bdefc:	a902      	add	r1, sp, #8
   bdefe:	f7ff fcad 	bl	bd85c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   bdf02:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bdf06:	07db      	lsls	r3, r3, #31
   bdf08:	d4f7      	bmi.n	bdefa <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   bdf0a:	b007      	add	sp, #28
   bdf0c:	bd30      	pop	{r4, r5, pc}

000bdf0e <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   bdf0e:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   bdf12:	1c53      	adds	r3, r2, #1
   bdf14:	d00b      	beq.n	bdf2e <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   bdf16:	8843      	ldrh	r3, [r0, #2]
   bdf18:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   bdf1a:	428b      	cmp	r3, r1
   bdf1c:	d803      	bhi.n	bdf26 <_ZN5Servo17writeMicrosecondsEt+0x18>
   bdf1e:	4288      	cmp	r0, r1
   bdf20:	4603      	mov	r3, r0
   bdf22:	bf28      	it	cs
   bdf24:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   bdf26:	4619      	mov	r1, r3
   bdf28:	b290      	uxth	r0, r2
   bdf2a:	f7ff bcc7 	b.w	bd8bc <HAL_Servo_Write_Pulse_Width>
}
   bdf2e:	4770      	bx	lr

000bdf30 <_ZN5Servo5writeEi>:
{
   bdf30:	b513      	push	{r0, r1, r4, lr}
   bdf32:	4604      	mov	r4, r0
   bdf34:	4608      	mov	r0, r1
   bdf36:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   bdf3a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   bdf3e:	4288      	cmp	r0, r1
   bdf40:	db10      	blt.n	bdf64 <_ZN5Servo5writeEi+0x34>
   bdf42:	4290      	cmp	r0, r2
   bdf44:	bfa8      	it	ge
   bdf46:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   bdf48:	88a3      	ldrh	r3, [r4, #4]
   bdf4a:	9300      	str	r3, [sp, #0]
   bdf4c:	8863      	ldrh	r3, [r4, #2]
   bdf4e:	f002 fc05 	bl	c075c <_Z3mapiiiii>
   bdf52:	68e1      	ldr	r1, [r4, #12]
   bdf54:	4401      	add	r1, r0
   bdf56:	b289      	uxth	r1, r1
   bdf58:	4620      	mov	r0, r4
}
   bdf5a:	b002      	add	sp, #8
   bdf5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   bdf60:	f7ff bfd5 	b.w	bdf0e <_ZN5Servo17writeMicrosecondsEt>
   bdf64:	4608      	mov	r0, r1
   bdf66:	e7ef      	b.n	bdf48 <_ZN5Servo5writeEi+0x18>

000bdf68 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   bdf68:	4a04      	ldr	r2, [pc, #16]	; (bdf7c <_ZN5Servo11resetFieldsEv+0x14>)
   bdf6a:	f44f 6316 	mov.w	r3, #2400	; 0x960
   bdf6e:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   bdf72:	23b4      	movs	r3, #180	; 0xb4
   bdf74:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   bdf76:	2300      	movs	r3, #0
   bdf78:	60c3      	str	r3, [r0, #12]
}
   bdf7a:	4770      	bx	lr
   bdf7c:	0220ffff 	.word	0x0220ffff

000bdf80 <_ZN5ServoC1Ev>:
Servo::Servo()
   bdf80:	b508      	push	{r3, lr}
  this->resetFields();
   bdf82:	f7ff fff1 	bl	bdf68 <_ZN5Servo11resetFieldsEv>
}
   bdf86:	bd08      	pop	{r3, pc}

000bdf88 <_ZN5Servo6detachEv>:
{
   bdf88:	b510      	push	{r4, lr}
   bdf8a:	4604      	mov	r4, r0
   bdf8c:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   bdf90:	1c43      	adds	r3, r0, #1
   bdf92:	d007      	beq.n	bdfa4 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   bdf94:	b280      	uxth	r0, r0
   bdf96:	f7ff fc89 	bl	bd8ac <HAL_Servo_Detach>
  this->resetFields();
   bdf9a:	4620      	mov	r0, r4
   bdf9c:	f7ff ffe4 	bl	bdf68 <_ZN5Servo11resetFieldsEv>
  return true;
   bdfa0:	2001      	movs	r0, #1
}
   bdfa2:	bd10      	pop	{r4, pc}
    return false;
   bdfa4:	2000      	movs	r0, #0
   bdfa6:	e7fc      	b.n	bdfa2 <_ZN5Servo6detachEv+0x1a>

000bdfa8 <_ZN5Servo6attachEtttss>:
{
   bdfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdfac:	460d      	mov	r5, r1
   bdfae:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   bdfb0:	2102      	movs	r1, #2
   bdfb2:	4628      	mov	r0, r5
{
   bdfb4:	4690      	mov	r8, r2
   bdfb6:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   bdfb8:	f7ff fa16 	bl	bd3e8 <HAL_Validate_Pin_Function>
   bdfbc:	2802      	cmp	r0, #2
   bdfbe:	d003      	beq.n	bdfc8 <_ZN5Servo6attachEtttss+0x20>
    return false;
   bdfc0:	2600      	movs	r6, #0
}
   bdfc2:	4630      	mov	r0, r6
   bdfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   bdfc8:	4628      	mov	r0, r5
   bdfca:	f003 fbdd 	bl	c1788 <pinAvailable>
   bdfce:	4606      	mov	r6, r0
   bdfd0:	2800      	cmp	r0, #0
   bdfd2:	d0f5      	beq.n	bdfc0 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   bdfd4:	f9b4 3000 	ldrsh.w	r3, [r4]
   bdfd8:	3301      	adds	r3, #1
   bdfda:	d002      	beq.n	bdfe2 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   bdfdc:	4620      	mov	r0, r4
   bdfde:	f7ff ffd3 	bl	bdf88 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   bdfe2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   bdfe6:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   bdfe8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   bdfec:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   bdfee:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   bdff2:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   bdff4:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   bdff6:	4628      	mov	r0, r5
   bdff8:	f7ff fc50 	bl	bd89c <HAL_Servo_Attach>
  return true;
   bdffc:	e7e1      	b.n	bdfc2 <_ZN5Servo6attachEtttss+0x1a>
	...

000be000 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   be000:	4b05      	ldr	r3, [pc, #20]	; (be018 <_GLOBAL__sub_I_System+0x18>)
   be002:	2202      	movs	r2, #2
   be004:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   be006:	4b05      	ldr	r3, [pc, #20]	; (be01c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   be008:	4a05      	ldr	r2, [pc, #20]	; (be020 <_GLOBAL__sub_I_System+0x20>)
   be00a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   be00c:	2000      	movs	r0, #0
   be00e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   be012:	f7ff bccd 	b.w	bd9b0 <set_system_mode>
   be016:	bf00      	nop
   be018:	2003e630 	.word	0x2003e630
   be01c:	2003e624 	.word	0x2003e624
   be020:	ffff0000 	.word	0xffff0000

000be024 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   be024:	b510      	push	{r4, lr}
   be026:	4604      	mov	r4, r0
{
	free(buffer);
   be028:	6800      	ldr	r0, [r0, #0]
   be02a:	f7ff fd9d 	bl	bdb68 <free>
}
   be02e:	4620      	mov	r0, r4
   be030:	bd10      	pop	{r4, pc}

000be032 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   be032:	b510      	push	{r4, lr}
   be034:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   be036:	6800      	ldr	r0, [r0, #0]
   be038:	b108      	cbz	r0, be03e <_ZN6String10invalidateEv+0xc>
   be03a:	f7ff fd95 	bl	bdb68 <free>
	buffer = NULL;
   be03e:	2300      	movs	r3, #0
	capacity = len = 0;
   be040:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   be044:	6023      	str	r3, [r4, #0]
}
   be046:	bd10      	pop	{r4, pc}

000be048 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   be048:	b538      	push	{r3, r4, r5, lr}
   be04a:	4604      	mov	r4, r0
   be04c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   be04e:	6800      	ldr	r0, [r0, #0]
   be050:	3101      	adds	r1, #1
   be052:	f7ff fd91 	bl	bdb78 <realloc>
	if (newbuffer) {
   be056:	b110      	cbz	r0, be05e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   be058:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   be05c:	2001      	movs	r0, #1
	}
	return 0;
}
   be05e:	bd38      	pop	{r3, r4, r5, pc}

000be060 <_ZN6String7reserveEj>:
{
   be060:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   be062:	6803      	ldr	r3, [r0, #0]
{
   be064:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   be066:	b123      	cbz	r3, be072 <_ZN6String7reserveEj+0x12>
   be068:	6843      	ldr	r3, [r0, #4]
   be06a:	428b      	cmp	r3, r1
   be06c:	d301      	bcc.n	be072 <_ZN6String7reserveEj+0x12>
   be06e:	2001      	movs	r0, #1
}
   be070:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   be072:	4620      	mov	r0, r4
   be074:	f7ff ffe8 	bl	be048 <_ZN6String12changeBufferEj>
   be078:	2800      	cmp	r0, #0
   be07a:	d0f9      	beq.n	be070 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   be07c:	68a3      	ldr	r3, [r4, #8]
   be07e:	2b00      	cmp	r3, #0
   be080:	d1f5      	bne.n	be06e <_ZN6String7reserveEj+0xe>
   be082:	6822      	ldr	r2, [r4, #0]
   be084:	7013      	strb	r3, [r2, #0]
   be086:	e7f2      	b.n	be06e <_ZN6String7reserveEj+0xe>

000be088 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   be088:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be08a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   be08c:	4611      	mov	r1, r2
   be08e:	9201      	str	r2, [sp, #4]
{
   be090:	4604      	mov	r4, r0
	if (!reserve(length)) {
   be092:	f7ff ffe5 	bl	be060 <_ZN6String7reserveEj>
   be096:	9a01      	ldr	r2, [sp, #4]
   be098:	b928      	cbnz	r0, be0a6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   be09a:	4620      	mov	r0, r4
   be09c:	f7ff ffc9 	bl	be032 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   be0a0:	4620      	mov	r0, r4
   be0a2:	b003      	add	sp, #12
   be0a4:	bd30      	pop	{r4, r5, pc}
	len = length;
   be0a6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   be0a8:	4629      	mov	r1, r5
   be0aa:	6820      	ldr	r0, [r4, #0]
   be0ac:	f005 fe68 	bl	c3d80 <memcpy>
	buffer[len] = 0;
   be0b0:	6822      	ldr	r2, [r4, #0]
   be0b2:	68a3      	ldr	r3, [r4, #8]
   be0b4:	2100      	movs	r1, #0
   be0b6:	54d1      	strb	r1, [r2, r3]
	return *this;
   be0b8:	e7f2      	b.n	be0a0 <_ZN6String4copyEPKcj+0x18>

000be0ba <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   be0ba:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   be0bc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   be0be:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   be0c2:	4604      	mov	r4, r0
	len = 0;
   be0c4:	6083      	str	r3, [r0, #8]
	flags = 0;
   be0c6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   be0c8:	b141      	cbz	r1, be0dc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   be0ca:	4608      	mov	r0, r1
   be0cc:	9101      	str	r1, [sp, #4]
   be0ce:	f005 ff0a 	bl	c3ee6 <strlen>
   be0d2:	9901      	ldr	r1, [sp, #4]
   be0d4:	4602      	mov	r2, r0
   be0d6:	4620      	mov	r0, r4
   be0d8:	f7ff ffd6 	bl	be088 <_ZN6String4copyEPKcj>
}
   be0dc:	4620      	mov	r0, r4
   be0de:	b002      	add	sp, #8
   be0e0:	bd10      	pop	{r4, pc}

000be0e2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   be0e2:	b538      	push	{r3, r4, r5, lr}
   be0e4:	4605      	mov	r5, r0
	if (buffer) {
   be0e6:	6800      	ldr	r0, [r0, #0]
{
   be0e8:	460c      	mov	r4, r1
	if (buffer) {
   be0ea:	b168      	cbz	r0, be108 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   be0ec:	686a      	ldr	r2, [r5, #4]
   be0ee:	688b      	ldr	r3, [r1, #8]
   be0f0:	429a      	cmp	r2, r3
   be0f2:	d307      	bcc.n	be104 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   be0f4:	6809      	ldr	r1, [r1, #0]
   be0f6:	f005 fed1 	bl	c3e9c <strcpy>
			len = rhs.len;
   be0fa:	68a3      	ldr	r3, [r4, #8]
   be0fc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   be0fe:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   be100:	60a3      	str	r3, [r4, #8]
}
   be102:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   be104:	f7ff fd30 	bl	bdb68 <free>
	buffer = rhs.buffer;
   be108:	6823      	ldr	r3, [r4, #0]
   be10a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   be10c:	6863      	ldr	r3, [r4, #4]
   be10e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   be110:	68a3      	ldr	r3, [r4, #8]
   be112:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   be114:	2300      	movs	r3, #0
	rhs.capacity = 0;
   be116:	e9c4 3300 	strd	r3, r3, [r4]
   be11a:	e7f1      	b.n	be100 <_ZN6String4moveERS_+0x1e>

000be11c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   be11c:	b510      	push	{r4, lr}
	buffer = NULL;
   be11e:	2300      	movs	r3, #0
	capacity = 0;
   be120:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   be124:	4604      	mov	r4, r0
	len = 0;
   be126:	6083      	str	r3, [r0, #8]
	flags = 0;
   be128:	7303      	strb	r3, [r0, #12]
	move(rval);
   be12a:	f7ff ffda 	bl	be0e2 <_ZN6String4moveERS_>
}
   be12e:	4620      	mov	r0, r4
   be130:	bd10      	pop	{r4, pc}

000be132 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   be132:	4288      	cmp	r0, r1
{
   be134:	b510      	push	{r4, lr}
   be136:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   be138:	d005      	beq.n	be146 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   be13a:	680b      	ldr	r3, [r1, #0]
   be13c:	b12b      	cbz	r3, be14a <_ZN6StringaSERKS_+0x18>
   be13e:	688a      	ldr	r2, [r1, #8]
   be140:	4619      	mov	r1, r3
   be142:	f7ff ffa1 	bl	be088 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   be146:	4620      	mov	r0, r4
   be148:	bd10      	pop	{r4, pc}
	else invalidate();
   be14a:	f7ff ff72 	bl	be032 <_ZN6String10invalidateEv>
   be14e:	e7fa      	b.n	be146 <_ZN6StringaSERKS_+0x14>

000be150 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   be150:	b510      	push	{r4, lr}
	buffer = NULL;
   be152:	2300      	movs	r3, #0
String::String(const String &value)
   be154:	4604      	mov	r4, r0
	capacity = 0;
   be156:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   be15a:	6083      	str	r3, [r0, #8]
	flags = 0;
   be15c:	7303      	strb	r3, [r0, #12]
	*this = value;
   be15e:	f7ff ffe8 	bl	be132 <_ZN6StringaSERKS_>
}
   be162:	4620      	mov	r0, r4
   be164:	bd10      	pop	{r4, pc}

000be166 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   be166:	b513      	push	{r0, r1, r4, lr}
   be168:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   be16a:	b159      	cbz	r1, be184 <_ZN6StringaSEPKc+0x1e>
   be16c:	4608      	mov	r0, r1
   be16e:	9101      	str	r1, [sp, #4]
   be170:	f005 feb9 	bl	c3ee6 <strlen>
   be174:	9901      	ldr	r1, [sp, #4]
   be176:	4602      	mov	r2, r0
   be178:	4620      	mov	r0, r4
   be17a:	f7ff ff85 	bl	be088 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   be17e:	4620      	mov	r0, r4
   be180:	b002      	add	sp, #8
   be182:	bd10      	pop	{r4, pc}
	else invalidate();
   be184:	f7ff ff55 	bl	be032 <_ZN6String10invalidateEv>
   be188:	e7f9      	b.n	be17e <_ZN6StringaSEPKc+0x18>

000be18a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   be18a:	b570      	push	{r4, r5, r6, lr}
   be18c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   be18e:	460e      	mov	r6, r1
   be190:	b909      	cbnz	r1, be196 <_ZN6String6concatEPKcj+0xc>
   be192:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   be194:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   be196:	b16a      	cbz	r2, be1b4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   be198:	6884      	ldr	r4, [r0, #8]
   be19a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   be19c:	4621      	mov	r1, r4
   be19e:	f7ff ff5f 	bl	be060 <_ZN6String7reserveEj>
   be1a2:	2800      	cmp	r0, #0
   be1a4:	d0f5      	beq.n	be192 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   be1a6:	6828      	ldr	r0, [r5, #0]
   be1a8:	68ab      	ldr	r3, [r5, #8]
   be1aa:	4631      	mov	r1, r6
   be1ac:	4418      	add	r0, r3
   be1ae:	f005 fe75 	bl	c3e9c <strcpy>
	len = newlen;
   be1b2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   be1b4:	2001      	movs	r0, #1
   be1b6:	e7ed      	b.n	be194 <_ZN6String6concatEPKcj+0xa>

000be1b8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   be1b8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   be1ba:	2300      	movs	r3, #0
	buf[0] = c;
   be1bc:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   be1c0:	2201      	movs	r2, #1
   be1c2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   be1c4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   be1c8:	f7ff ffdf 	bl	be18a <_ZN6String6concatEPKcj>
}
   be1cc:	b003      	add	sp, #12
   be1ce:	f85d fb04 	ldr.w	pc, [sp], #4

000be1d2 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   be1d2:	6883      	ldr	r3, [r0, #8]
   be1d4:	428b      	cmp	r3, r1
   be1d6:	d903      	bls.n	be1e0 <_ZNK6StringixEj+0xe>
   be1d8:	6800      	ldr	r0, [r0, #0]
   be1da:	b110      	cbz	r0, be1e2 <_ZNK6StringixEj+0x10>
	return buffer[index];
   be1dc:	5c40      	ldrb	r0, [r0, r1]
   be1de:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   be1e0:	2000      	movs	r0, #0
}
   be1e2:	4770      	bx	lr

000be1e4 <_ZNK6String6charAtEj>:
	return operator[](loc);
   be1e4:	f7ff bff5 	b.w	be1d2 <_ZNK6StringixEj>

000be1e8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be1e8:	4770      	bx	lr

000be1ea <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   be1ea:	4770      	bx	lr

000be1ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   be1ec:	4770      	bx	lr

000be1ee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be1ee:	4770      	bx	lr

000be1f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be1f0:	4b06      	ldr	r3, [pc, #24]	; (be20c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be1f2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be1f4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   be1f6:	f100 040c 	add.w	r4, r0, #12
	    ||
   be1fa:	d005      	beq.n	be208 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be1fc:	4608      	mov	r0, r1
   be1fe:	f003 fbc5 	bl	c198c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be202:	2800      	cmp	r0, #0
   be204:	bf08      	it	eq
   be206:	2400      	moveq	r4, #0
      }
   be208:	4620      	mov	r0, r4
   be20a:	bd10      	pop	{r4, pc}
   be20c:	000c7590 	.word	0x000c7590

000be210 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be210:	4b06      	ldr	r3, [pc, #24]	; (be22c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be212:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be214:	b510      	push	{r4, lr}
   be216:	f100 040c 	add.w	r4, r0, #12
	    ||
   be21a:	d005      	beq.n	be228 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be21c:	4608      	mov	r0, r1
   be21e:	f003 fbb5 	bl	c198c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be222:	2800      	cmp	r0, #0
   be224:	bf08      	it	eq
   be226:	2400      	moveq	r4, #0
      }
   be228:	4620      	mov	r0, r4
   be22a:	bd10      	pop	{r4, pc}
   be22c:	000c7590 	.word	0x000c7590

000be230 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be230:	4b06      	ldr	r3, [pc, #24]	; (be24c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be232:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be234:	b510      	push	{r4, lr}
   be236:	f100 040c 	add.w	r4, r0, #12
	    ||
   be23a:	d005      	beq.n	be248 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be23c:	4608      	mov	r0, r1
   be23e:	f003 fba5 	bl	c198c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be242:	2800      	cmp	r0, #0
   be244:	bf08      	it	eq
   be246:	2400      	moveq	r4, #0
      }
   be248:	4620      	mov	r0, r4
   be24a:	bd10      	pop	{r4, pc}
   be24c:	000c7590 	.word	0x000c7590

000be250 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be250:	b510      	push	{r4, lr}
   be252:	2168      	movs	r1, #104	; 0x68
   be254:	4604      	mov	r4, r0
   be256:	f7f5 ff24 	bl	b40a2 <_ZdlPvj>
   be25a:	4620      	mov	r0, r4
   be25c:	bd10      	pop	{r4, pc}

000be25e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be25e:	b510      	push	{r4, lr}
   be260:	2128      	movs	r1, #40	; 0x28
   be262:	4604      	mov	r4, r0
   be264:	f7f5 ff1d 	bl	b40a2 <_ZdlPvj>
   be268:	4620      	mov	r0, r4
   be26a:	bd10      	pop	{r4, pc}

000be26c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be26c:	b510      	push	{r4, lr}
   be26e:	2130      	movs	r1, #48	; 0x30
   be270:	4604      	mov	r4, r0
   be272:	f7f5 ff16 	bl	b40a2 <_ZdlPvj>
   be276:	4620      	mov	r0, r4
   be278:	bd10      	pop	{r4, pc}

000be27a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   be27a:	2168      	movs	r1, #104	; 0x68
   be27c:	f7f5 bf11 	b.w	b40a2 <_ZdlPvj>

000be280 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be280:	2128      	movs	r1, #40	; 0x28
   be282:	f7f5 bf0e 	b.w	b40a2 <_ZdlPvj>

000be286 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be286:	2130      	movs	r1, #48	; 0x30
   be288:	f7f5 bf0b 	b.w	b40a2 <_ZdlPvj>

000be28c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   be28c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be28e:	2500      	movs	r5, #0
   be290:	1cec      	adds	r4, r5, #3
   be292:	428c      	cmp	r4, r1
   be294:	d80d      	bhi.n	be2b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   be296:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   be298:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   be29a:	5d87      	ldrb	r7, [r0, r6]
   be29c:	4297      	cmp	r7, r2
   be29e:	d105      	bne.n	be2ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   be2a0:	4426      	add	r6, r4
   be2a2:	42b1      	cmp	r1, r6
   be2a4:	d305      	bcc.n	be2b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   be2a6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   be2a8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   be2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   be2ac:	3401      	adds	r4, #1
   be2ae:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be2b0:	e7ee      	b.n	be290 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   be2b2:	2000      	movs	r0, #0
   be2b4:	e7f9      	b.n	be2aa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000be2b8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   be2b8:	4a02      	ldr	r2, [pc, #8]	; (be2c4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   be2ba:	4903      	ldr	r1, [pc, #12]	; (be2c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   be2bc:	200a      	movs	r0, #10
   be2be:	f7ff bb45 	b.w	bd94c <panic_>
   be2c2:	bf00      	nop
   be2c4:	000bd469 	.word	0x000bd469
   be2c8:	000c73f0 	.word	0x000c73f0

000be2cc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   be2cc:	b430      	push	{r4, r5}
   be2ce:	460d      	mov	r5, r1
   be2d0:	4611      	mov	r1, r2
   be2d2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   be2d4:	6803      	ldr	r3, [r0, #0]
   be2d6:	6809      	ldr	r1, [r1, #0]
   be2d8:	6828      	ldr	r0, [r5, #0]
   be2da:	e9d3 4300 	ldrd	r4, r3, [r3]
   be2de:	46a4      	mov	ip, r4
      }
   be2e0:	bc30      	pop	{r4, r5}
   be2e2:	4760      	bx	ip

000be2e4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   be2e4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   be2e6:	b538      	push	{r3, r4, r5, lr}
   be2e8:	4604      	mov	r4, r0
	switch (__op)
   be2ea:	d102      	bne.n	be2f2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   be2ec:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   be2ee:	6023      	str	r3, [r4, #0]
	}
   be2f0:	e003      	b.n	be2fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   be2f2:	2a02      	cmp	r2, #2
   be2f4:	d003      	beq.n	be2fe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   be2f6:	2a03      	cmp	r2, #3
   be2f8:	d00d      	beq.n	be316 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   be2fa:	2000      	movs	r0, #0
   be2fc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   be2fe:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   be300:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   be302:	f7f5 fec8 	bl	b4096 <_Znwj>
   be306:	4603      	mov	r3, r0
   be308:	2800      	cmp	r0, #0
   be30a:	d0f0      	beq.n	be2ee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   be30c:	e895 0003 	ldmia.w	r5, {r0, r1}
   be310:	e883 0003 	stmia.w	r3, {r0, r1}
   be314:	e7eb      	b.n	be2ee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   be316:	6800      	ldr	r0, [r0, #0]
   be318:	2800      	cmp	r0, #0
   be31a:	d0ee      	beq.n	be2fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   be31c:	2108      	movs	r1, #8
   be31e:	f7f5 fec0 	bl	b40a2 <_ZdlPvj>
   be322:	e7ea      	b.n	be2fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000be324 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   be324:	b510      	push	{r4, lr}
   be326:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   be328:	3058      	adds	r0, #88	; 0x58
   be32a:	f7f6 f857 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   be32e:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   be332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be336:	f7ff be75 	b.w	be024 <_ZN6StringD1Ev>

000be33a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   be33a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   be33c:	6843      	ldr	r3, [r0, #4]
   be33e:	3b01      	subs	r3, #1
    {
   be340:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   be342:	6043      	str	r3, [r0, #4]
   be344:	b963      	cbnz	r3, be360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   be346:	6803      	ldr	r3, [r0, #0]
   be348:	689b      	ldr	r3, [r3, #8]
   be34a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   be34c:	68a3      	ldr	r3, [r4, #8]
   be34e:	3b01      	subs	r3, #1
   be350:	60a3      	str	r3, [r4, #8]
   be352:	b92b      	cbnz	r3, be360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   be354:	6823      	ldr	r3, [r4, #0]
   be356:	4620      	mov	r0, r4
   be358:	68db      	ldr	r3, [r3, #12]
    }
   be35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   be35e:	4718      	bx	r3
    }
   be360:	bd10      	pop	{r4, pc}

000be362 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   be362:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   be366:	b2da      	uxtb	r2, r3
   be368:	2a09      	cmp	r2, #9
   be36a:	d801      	bhi.n	be370 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   be36c:	4618      	mov	r0, r3
   be36e:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   be370:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   be374:	2b05      	cmp	r3, #5
   be376:	d801      	bhi.n	be37c <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   be378:	3857      	subs	r0, #87	; 0x57
   be37a:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   be37c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   be380:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   be382:	bf94      	ite	ls
   be384:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   be386:	f04f 30ff 	movhi.w	r0, #4294967295
}
   be38a:	4770      	bx	lr

000be38c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   be38c:	b510      	push	{r4, lr}
            locked_(false) {
   be38e:	2300      	movs	r3, #0
   be390:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   be392:	4b04      	ldr	r3, [pc, #16]	; (be3a4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   be394:	4604      	mov	r4, r0
   be396:	6818      	ldr	r0, [r3, #0]
   be398:	f7ff f950 	bl	bd63c <os_mutex_recursive_lock>
        locked_ = true;
   be39c:	2301      	movs	r3, #1
   be39e:	7023      	strb	r3, [r4, #0]
    }
   be3a0:	4620      	mov	r0, r4
   be3a2:	bd10      	pop	{r4, pc}
   be3a4:	2003e63c 	.word	0x2003e63c

000be3a8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   be3a8:	b510      	push	{r4, lr}
        if (locked_) {
   be3aa:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   be3ac:	4604      	mov	r4, r0
        if (locked_) {
   be3ae:	b11b      	cbz	r3, be3b8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   be3b0:	4b02      	ldr	r3, [pc, #8]	; (be3bc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   be3b2:	6818      	ldr	r0, [r3, #0]
   be3b4:	f7ff f94a 	bl	bd64c <os_mutex_recursive_unlock>
    }
   be3b8:	4620      	mov	r0, r4
   be3ba:	bd10      	pop	{r4, pc}
   be3bc:	2003e63c 	.word	0x2003e63c

000be3c0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   be3c0:	b082      	sub	sp, #8
   be3c2:	4603      	mov	r3, r0
    address_ = addr;
   be3c4:	6808      	ldr	r0, [r1, #0]
   be3c6:	6849      	ldr	r1, [r1, #4]
   be3c8:	466a      	mov	r2, sp
   be3ca:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   be3cc:	466a      	mov	r2, sp
   be3ce:	ca03      	ldmia	r2!, {r0, r1}
   be3d0:	6018      	str	r0, [r3, #0]
}
   be3d2:	4618      	mov	r0, r3
    address_ = addr.address_;
   be3d4:	6059      	str	r1, [r3, #4]
}
   be3d6:	b002      	add	sp, #8
   be3d8:	4770      	bx	lr

000be3da <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   be3da:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   be3dc:	7982      	ldrb	r2, [r0, #6]
   be3de:	798b      	ldrb	r3, [r1, #6]
   be3e0:	429a      	cmp	r2, r3
   be3e2:	d106      	bne.n	be3f2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   be3e4:	2206      	movs	r2, #6
   be3e6:	f005 fcbb 	bl	c3d60 <memcmp>
   be3ea:	fab0 f080 	clz	r0, r0
   be3ee:	0940      	lsrs	r0, r0, #5
}
   be3f0:	bd08      	pop	{r3, pc}
    return false;
   be3f2:	2000      	movs	r0, #0
   be3f4:	e7fc      	b.n	be3f0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000be3f6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   be3f6:	f04f 33ff 	mov.w	r3, #4294967295
   be3fa:	6003      	str	r3, [r0, #0]
   be3fc:	8083      	strh	r3, [r0, #4]
}
   be3fe:	2000      	movs	r0, #0
   be400:	4770      	bx	lr

000be402 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   be402:	b508      	push	{r3, lr}
   be404:	4602      	mov	r2, r0
        : address_{} {
   be406:	2100      	movs	r1, #0
   be408:	6001      	str	r1, [r0, #0]
   be40a:	6041      	str	r1, [r0, #4]
    clear();
   be40c:	f7ff fff3 	bl	be3f6 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   be410:	7191      	strb	r1, [r2, #6]
}
   be412:	4610      	mov	r0, r2
   be414:	bd08      	pop	{r3, pc}
	...

000be418 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   be418:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   be41a:	2301      	movs	r3, #1
   be41c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be41e:	4b05      	ldr	r3, [pc, #20]	; (be434 <_ZN8particle7BleUuidC1Ev+0x1c>)
   be420:	4602      	mov	r2, r0
   be422:	f103 0110 	add.w	r1, r3, #16
   be426:	f853 4b04 	ldr.w	r4, [r3], #4
   be42a:	f842 4b04 	str.w	r4, [r2], #4
   be42e:	428b      	cmp	r3, r1
   be430:	d1f9      	bne.n	be426 <_ZN8particle7BleUuidC1Ev+0xe>
}
   be432:	bd10      	pop	{r4, pc}
   be434:	000c759e 	.word	0x000c759e

000be438 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   be438:	b510      	push	{r4, lr}
    if (uuid128) {
   be43a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   be43c:	4604      	mov	r4, r0
    if (uuid128) {
   be43e:	b1b1      	cbz	r1, be46e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   be440:	2a01      	cmp	r2, #1
   be442:	f101 0210 	add.w	r2, r1, #16
   be446:	d10a      	bne.n	be45e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   be448:	4601      	mov	r1, r0
   be44a:	f853 0b04 	ldr.w	r0, [r3], #4
   be44e:	f841 0b04 	str.w	r0, [r1], #4
   be452:	4293      	cmp	r3, r2
   be454:	d1f9      	bne.n	be44a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   be456:	2301      	movs	r3, #1
   be458:	6123      	str	r3, [r4, #16]
}
   be45a:	4620      	mov	r0, r4
   be45c:	bd10      	pop	{r4, pc}
   be45e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   be460:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   be464:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   be468:	429a      	cmp	r2, r3
   be46a:	d1f9      	bne.n	be460 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   be46c:	e7f3      	b.n	be456 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   be46e:	2210      	movs	r2, #16
   be470:	f005 fcae 	bl	c3dd0 <memset>
   be474:	e7f1      	b.n	be45a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000be476 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   be476:	b538      	push	{r3, r4, r5, lr}
   be478:	4604      	mov	r4, r0
   be47a:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   be47c:	461a      	mov	r2, r3
   be47e:	f7ff ffdb 	bl	be438 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   be482:	81a5      	strh	r5, [r4, #12]
}
   be484:	4620      	mov	r0, r4
   be486:	bd38      	pop	{r3, r4, r5, pc}

000be488 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   be488:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   be48a:	6902      	ldr	r2, [r0, #16]
   be48c:	b922      	cbnz	r2, be498 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   be48e:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be490:	3800      	subs	r0, #0
   be492:	bf18      	it	ne
   be494:	2001      	movne	r0, #1
}
   be496:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be498:	4902      	ldr	r1, [pc, #8]	; (be4a4 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   be49a:	2210      	movs	r2, #16
   be49c:	f005 fc60 	bl	c3d60 <memcmp>
   be4a0:	e7f6      	b.n	be490 <_ZNK8particle7BleUuid7isValidEv+0x8>
   be4a2:	bf00      	nop
   be4a4:	000c75be 	.word	0x000c75be

000be4a8 <_ZNK8particle7BleUuid4typeEv>:
}
   be4a8:	6900      	ldr	r0, [r0, #16]
   be4aa:	4770      	bx	lr

000be4ac <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   be4ac:	b538      	push	{r3, r4, r5, lr}
   be4ae:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   be4b0:	2214      	movs	r2, #20
   be4b2:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   be4b4:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   be4b6:	f005 fc8b 	bl	c3dd0 <memset>
    if (type_ == BleUuidType::SHORT) {
   be4ba:	6923      	ldr	r3, [r4, #16]
   be4bc:	b91b      	cbnz	r3, be4c6 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   be4be:	89a3      	ldrh	r3, [r4, #12]
   be4c0:	802b      	strh	r3, [r5, #0]
}
   be4c2:	4628      	mov	r0, r5
   be4c4:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   be4c6:	2301      	movs	r3, #1
   be4c8:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   be4ca:	4621      	mov	r1, r4
   be4cc:	462b      	mov	r3, r5
   be4ce:	f104 0210 	add.w	r2, r4, #16
   be4d2:	f851 0b04 	ldr.w	r0, [r1], #4
   be4d6:	f843 0b04 	str.w	r0, [r3], #4
   be4da:	4291      	cmp	r1, r2
   be4dc:	d1f9      	bne.n	be4d2 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   be4de:	e7f0      	b.n	be4c2 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000be4e0 <_ZNK8particle7BleUuid7shortedEv>:
}
   be4e0:	8980      	ldrh	r0, [r0, #12]
   be4e2:	4770      	bx	lr

000be4e4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   be4e4:	4770      	bx	lr

000be4e6 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   be4e6:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   be4e8:	6902      	ldr	r2, [r0, #16]
   be4ea:	690b      	ldr	r3, [r1, #16]
   be4ec:	429a      	cmp	r2, r3
   be4ee:	d106      	bne.n	be4fe <_ZNK8particle7BleUuideqERKS0_+0x18>
   be4f0:	2210      	movs	r2, #16
   be4f2:	f005 fc35 	bl	c3d60 <memcmp>
   be4f6:	fab0 f080 	clz	r0, r0
   be4fa:	0940      	lsrs	r0, r0, #5
}
   be4fc:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   be4fe:	2000      	movs	r0, #0
   be500:	e7fc      	b.n	be4fc <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000be504 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   be504:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   be506:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   be50a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be50c:	4b34      	ldr	r3, [pc, #208]	; (be5e0 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   be50e:	460c      	mov	r4, r1
   be510:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be512:	4602      	mov	r2, r0
   be514:	f103 0110 	add.w	r1, r3, #16
   be518:	f853 0b04 	ldr.w	r0, [r3], #4
   be51c:	f842 0b04 	str.w	r0, [r2], #4
   be520:	428b      	cmp	r3, r1
   be522:	d1f9      	bne.n	be518 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   be524:	b344      	cbz	r4, be578 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   be526:	2124      	movs	r1, #36	; 0x24
   be528:	4620      	mov	r0, r4
   be52a:	f005 fd1e 	bl	c3f6a <strnlen>
   be52e:	2804      	cmp	r0, #4
   be530:	f04f 0500 	mov.w	r5, #0
   be534:	d123      	bne.n	be57e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   be536:	f8ad 5004 	strh.w	r5, [sp, #4]
   be53a:	af01      	add	r7, sp, #4
   be53c:	1ca5      	adds	r5, r4, #2
   be53e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   be540:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   be544:	f7ff ff0d 	bl	be362 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   be548:	f1b0 0800 	subs.w	r8, r0, #0
   be54c:	db12      	blt.n	be574 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   be54e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   be552:	f7ff ff06 	bl	be362 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   be556:	2800      	cmp	r0, #0
   be558:	db0c      	blt.n	be574 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   be55a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   be55c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   be560:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   be562:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   be566:	d1eb      	bne.n	be540 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   be568:	f89d 3005 	ldrb.w	r3, [sp, #5]
   be56c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   be56e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   be572:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   be574:	2300      	movs	r3, #0
   be576:	6133      	str	r3, [r6, #16]
}
   be578:	b002      	add	sp, #8
   be57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   be57e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be582:	2124      	movs	r1, #36	; 0x24
   be584:	4620      	mov	r0, r4
   be586:	f005 fcf0 	bl	c3f6a <strnlen>
   be58a:	42a8      	cmp	r0, r5
   be58c:	d807      	bhi.n	be59e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   be58e:	4642      	mov	r2, r8
   be590:	2100      	movs	r1, #0
   be592:	4630      	mov	r0, r6
}
   be594:	b002      	add	sp, #8
   be596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   be59a:	f005 bc19 	b.w	c3dd0 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be59e:	f1b8 0f00 	cmp.w	r8, #0
   be5a2:	d0e9      	beq.n	be578 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   be5a4:	5d60      	ldrb	r0, [r4, r5]
   be5a6:	f7ff fedc 	bl	be362 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   be5aa:	0603      	lsls	r3, r0, #24
   be5ac:	d415      	bmi.n	be5da <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   be5ae:	0100      	lsls	r0, r0, #4
   be5b0:	f108 38ff 	add.w	r8, r8, #4294967295
   be5b4:	b2c7      	uxtb	r7, r0
   be5b6:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   be5ba:	2124      	movs	r1, #36	; 0x24
   be5bc:	4620      	mov	r0, r4
   be5be:	f005 fcd4 	bl	c3f6a <strnlen>
   be5c2:	3501      	adds	r5, #1
   be5c4:	42a8      	cmp	r0, r5
   be5c6:	d908      	bls.n	be5da <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   be5c8:	5d60      	ldrb	r0, [r4, r5]
   be5ca:	f7ff feca 	bl	be362 <_ZN8particle11hexToNibbleEc>
   be5ce:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   be5d0:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   be5d2:	bfa4      	itt	ge
   be5d4:	4338      	orrge	r0, r7
   be5d6:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be5da:	3501      	adds	r5, #1
   be5dc:	e7d1      	b.n	be582 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   be5de:	bf00      	nop
   be5e0:	000c759e 	.word	0x000c759e

000be5e4 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   be5e4:	b513      	push	{r0, r1, r4, lr}
   be5e6:	4604      	mov	r4, r0
   be5e8:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   be5ea:	f7ff ff15 	bl	be418 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   be5ee:	4620      	mov	r0, r4
   be5f0:	9901      	ldr	r1, [sp, #4]
   be5f2:	f7ff ff87 	bl	be504 <_ZN8particle7BleUuid9constructEPKc>
}
   be5f6:	4620      	mov	r0, r4
   be5f8:	b002      	add	sp, #8
   be5fa:	bd10      	pop	{r4, pc}

000be5fc <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   be5fc:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   be5fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be602:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   be604:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   be606:	8043      	strh	r3, [r0, #2]
   be608:	220e      	movs	r2, #14
   be60a:	4629      	mov	r1, r5
   be60c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   be60e:	7105      	strb	r5, [r0, #4]
   be610:	3006      	adds	r0, #6
   be612:	f005 fbdd 	bl	c3dd0 <memset>
   be616:	f104 0014 	add.w	r0, r4, #20
   be61a:	f7ff fefd 	bl	be418 <_ZN8particle7BleUuidC1Ev>
   be61e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   be622:	f7ff fef9 	bl	be418 <_ZN8particle7BleUuidC1Ev>
   be626:	4904      	ldr	r1, [pc, #16]	; (be638 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   be628:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   be62c:	f7ff fd45 	bl	be0ba <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   be630:	6565      	str	r5, [r4, #84]	; 0x54
    }
   be632:	4620      	mov	r0, r4
   be634:	bd38      	pop	{r3, r4, r5, pc}
   be636:	bf00      	nop
   be638:	000c7628 	.word	0x000c7628

000be63c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   be63c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   be63e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   be642:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   be646:	4293      	cmp	r3, r2
   be648:	4618      	mov	r0, r3
   be64a:	d006      	beq.n	be65a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   be64c:	6804      	ldr	r4, [r0, #0]
   be64e:	8824      	ldrh	r4, [r4, #0]
   be650:	428c      	cmp	r4, r1
   be652:	f103 0308 	add.w	r3, r3, #8
   be656:	d1f6      	bne.n	be646 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   be658:	bd10      	pop	{r4, pc}
        return nullptr;
   be65a:	2000      	movs	r0, #0
   be65c:	e7fc      	b.n	be658 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000be660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   be660:	b5f0      	push	{r4, r5, r6, r7, lr}
   be662:	4606      	mov	r6, r0
   be664:	b085      	sub	sp, #20
   be666:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   be668:	460d      	mov	r5, r1
   be66a:	2900      	cmp	r1, #0
   be66c:	d050      	beq.n	be710 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   be66e:	2a00      	cmp	r2, #0
   be670:	d04e      	beq.n	be710 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   be672:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   be674:	7823      	ldrb	r3, [r4, #0]
   be676:	2af4      	cmp	r2, #244	; 0xf4
   be678:	bf28      	it	cs
   be67a:	22f4      	movcs	r2, #244	; 0xf4
   be67c:	b343      	cbz	r3, be6d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   be67e:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   be680:	0798      	lsls	r0, r3, #30
   be682:	d509      	bpl.n	be698 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   be684:	89a0      	ldrh	r0, [r4, #12]
   be686:	9203      	str	r2, [sp, #12]
   be688:	2300      	movs	r3, #0
   be68a:	f7fe ff51 	bl	bd530 <hal_ble_gatt_server_set_characteristic_value>
   be68e:	2800      	cmp	r0, #0
   be690:	9a03      	ldr	r2, [sp, #12]
   be692:	da03      	bge.n	be69c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   be694:	b005      	add	sp, #20
   be696:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   be698:	f06f 0077 	mvn.w	r0, #119	; 0x77
   be69c:	6834      	ldr	r4, [r6, #0]
   be69e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   be6a0:	06d9      	lsls	r1, r3, #27
   be6a2:	d509      	bpl.n	be6b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   be6a4:	2f01      	cmp	r7, #1
   be6a6:	d007      	beq.n	be6b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be6a8:	89a0      	ldrh	r0, [r4, #12]
   be6aa:	2300      	movs	r3, #0
   be6ac:	4629      	mov	r1, r5
}
   be6ae:	b005      	add	sp, #20
   be6b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be6b4:	f7fe bf6e 	b.w	bd594 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   be6b8:	069b      	lsls	r3, r3, #26
   be6ba:	d5eb      	bpl.n	be694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   be6bc:	2f02      	cmp	r7, #2
   be6be:	d0e9      	beq.n	be694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be6c0:	89a0      	ldrh	r0, [r4, #12]
   be6c2:	2300      	movs	r3, #0
   be6c4:	4629      	mov	r1, r5
}
   be6c6:	b005      	add	sp, #20
   be6c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be6cc:	f7fe bf6c 	b.w	bd5a8 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   be6d0:	8860      	ldrh	r0, [r4, #2]
   be6d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be6d6:	4288      	cmp	r0, r1
   be6d8:	d01c      	beq.n	be714 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   be6da:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   be6dc:	074e      	lsls	r6, r1, #29
   be6de:	d501      	bpl.n	be6e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   be6e0:	2f01      	cmp	r7, #1
   be6e2:	d104      	bne.n	be6ee <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   be6e4:	070b      	lsls	r3, r1, #28
   be6e6:	d409      	bmi.n	be6fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   be6e8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   be6ec:	e7d2      	b.n	be694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   be6ee:	89a1      	ldrh	r1, [r4, #12]
   be6f0:	9300      	str	r3, [sp, #0]
   be6f2:	4613      	mov	r3, r2
   be6f4:	462a      	mov	r2, r5
   be6f6:	f7fe ff2f 	bl	bd558 <hal_ble_gatt_client_write_without_response>
   be6fa:	e7cb      	b.n	be694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   be6fc:	2f02      	cmp	r7, #2
   be6fe:	d0f3      	beq.n	be6e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   be700:	2300      	movs	r3, #0
   be702:	89a1      	ldrh	r1, [r4, #12]
   be704:	9300      	str	r3, [sp, #0]
   be706:	4613      	mov	r3, r2
   be708:	462a      	mov	r2, r5
   be70a:	f7fe ff1b 	bl	bd544 <hal_ble_gatt_client_write_with_response>
   be70e:	e7c1      	b.n	be694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   be710:	4802      	ldr	r0, [pc, #8]	; (be71c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   be712:	e7bf      	b.n	be694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   be714:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   be718:	e7bc      	b.n	be694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   be71a:	bf00      	nop
   be71c:	fffffef2 	.word	0xfffffef2

000be720 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   be720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be724:	2600      	movs	r6, #0
   be726:	6006      	str	r6, [r0, #0]
   be728:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   be72a:	2028      	movs	r0, #40	; 0x28
   be72c:	460c      	mov	r4, r1
   be72e:	f7f5 fcb2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be732:	1e05      	subs	r5, r0, #0
   be734:	f105 080c 	add.w	r8, r5, #12
   be738:	d00f      	beq.n	be75a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   be73a:	2301      	movs	r3, #1
   be73c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   be740:	4b08      	ldr	r3, [pc, #32]	; (be764 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   be742:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   be744:	4640      	mov	r0, r8
   be746:	f7ff fe67 	bl	be418 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   be74a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   be74c:	622e      	str	r6, [r5, #32]
   be74e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   be752:	4646      	mov	r6, r8
   be754:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   be756:	6823      	ldr	r3, [r4, #0]
   be758:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   be75a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   be75e:	4638      	mov	r0, r7
   be760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   be764:	000c7560 	.word	0x000c7560

000be768 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   be768:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be76a:	2500      	movs	r5, #0
   be76c:	6005      	str	r5, [r0, #0]
   be76e:	4606      	mov	r6, r0
   be770:	2030      	movs	r0, #48	; 0x30
   be772:	f7f5 fc90 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be776:	4604      	mov	r4, r0
   be778:	b188      	cbz	r0, be79e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   be77a:	2301      	movs	r3, #1
   be77c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   be780:	4b09      	ldr	r3, [pc, #36]	; (be7a8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   be782:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   be784:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be788:	8183      	strh	r3, [r0, #12]
   be78a:	300e      	adds	r0, #14
   be78c:	f7ff fe39 	bl	be402 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   be790:	e9c4 5506 	strd	r5, r5, [r4, #24]
   be794:	e9c4 5508 	strd	r5, r5, [r4, #32]
   be798:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   be79c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   be79e:	6074      	str	r4, [r6, #4]
   be7a0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   be7a2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   be7a4:	4630      	mov	r0, r6
   be7a6:	bd70      	pop	{r4, r5, r6, pc}
   be7a8:	000c757c 	.word	0x000c757c

000be7ac <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   be7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be7ae:	460d      	mov	r5, r1
   be7b0:	4604      	mov	r4, r0
    WiringBleLock lk;
   be7b2:	a801      	add	r0, sp, #4
   be7b4:	f7ff fdea 	bl	be38c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   be7b8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   be7ba:	f8d2 3002 	ldr.w	r3, [r2, #2]
   be7be:	6023      	str	r3, [r4, #0]
   be7c0:	f8d2 3006 	ldr.w	r3, [r2, #6]
   be7c4:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   be7c6:	a801      	add	r0, sp, #4
   be7c8:	f7ff fdee 	bl	be3a8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   be7cc:	4620      	mov	r0, r4
   be7ce:	b003      	add	sp, #12
   be7d0:	bd30      	pop	{r4, r5, pc}

000be7d2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   be7d2:	b530      	push	{r4, r5, lr}
   be7d4:	4605      	mov	r5, r0
   be7d6:	b087      	sub	sp, #28
   be7d8:	460c      	mov	r4, r1
    WiringBleLock lk;
   be7da:	a801      	add	r0, sp, #4
   be7dc:	f7ff fdd6 	bl	be38c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   be7e0:	682a      	ldr	r2, [r5, #0]
   be7e2:	6823      	ldr	r3, [r4, #0]
   be7e4:	8812      	ldrh	r2, [r2, #0]
   be7e6:	881b      	ldrh	r3, [r3, #0]
   be7e8:	429a      	cmp	r2, r3
   be7ea:	d10d      	bne.n	be808 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   be7ec:	4629      	mov	r1, r5
   be7ee:	a802      	add	r0, sp, #8
   be7f0:	f7ff ffdc 	bl	be7ac <_ZNK8particle13BlePeerDevice7addressEv>
   be7f4:	4621      	mov	r1, r4
   be7f6:	a804      	add	r0, sp, #16
   be7f8:	f7ff ffd8 	bl	be7ac <_ZNK8particle13BlePeerDevice7addressEv>
   be7fc:	a904      	add	r1, sp, #16
   be7fe:	a802      	add	r0, sp, #8
   be800:	f7ff fdeb 	bl	be3da <_ZNK8particle10BleAddresseqERKS0_>
   be804:	4604      	mov	r4, r0
   be806:	b900      	cbnz	r0, be80a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   be808:	2400      	movs	r4, #0
    WiringBleLock lk;
   be80a:	a801      	add	r0, sp, #4
   be80c:	f7ff fdcc 	bl	be3a8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   be810:	4620      	mov	r0, r4
   be812:	b007      	add	sp, #28
   be814:	bd30      	pop	{r4, r5, pc}
	...

000be818 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   be818:	b510      	push	{r4, lr}
   be81a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   be81c:	2064      	movs	r0, #100	; 0x64
   be81e:	f7f5 fc3a 	bl	b4096 <_Znwj>
   be822:	b168      	cbz	r0, be840 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   be824:	2300      	movs	r3, #0
   be826:	e9c0 3300 	strd	r3, r3, [r0]
   be82a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   be82e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   be832:	e9c0 3306 	strd	r3, r3, [r0, #24]
   be836:	6203      	str	r3, [r0, #32]
   be838:	62c3      	str	r3, [r0, #44]	; 0x2c
   be83a:	63c3      	str	r3, [r0, #60]	; 0x3c
   be83c:	64c3      	str	r3, [r0, #76]	; 0x4c
   be83e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   be840:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   be842:	b920      	cbnz	r0, be84e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   be844:	4a0a      	ldr	r2, [pc, #40]	; (be870 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   be846:	490b      	ldr	r1, [pc, #44]	; (be874 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   be848:	200a      	movs	r0, #10
   be84a:	f7ff f87f 	bl	bd94c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   be84e:	2000      	movs	r0, #0
   be850:	f7fe fe32 	bl	bd4b8 <hal_ble_stack_init>
   be854:	b120      	cbz	r0, be860 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   be856:	4a06      	ldr	r2, [pc, #24]	; (be870 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   be858:	4907      	ldr	r1, [pc, #28]	; (be878 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   be85a:	200a      	movs	r0, #10
   be85c:	f7ff f876 	bl	bd94c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   be860:	6821      	ldr	r1, [r4, #0]
   be862:	4806      	ldr	r0, [pc, #24]	; (be87c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   be864:	2200      	movs	r2, #0
   be866:	f7fe fe8b 	bl	bd580 <hal_ble_set_callback_on_periph_link_events>
}
   be86a:	4620      	mov	r0, r4
   be86c:	bd10      	pop	{r4, pc}
   be86e:	bf00      	nop
   be870:	000bd469 	.word	0x000bd469
   be874:	000c73f0 	.word	0x000c73f0
   be878:	000c742e 	.word	0x000c742e
   be87c:	000bee3d 	.word	0x000bee3d

000be880 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   be880:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   be882:	4c0a      	ldr	r4, [pc, #40]	; (be8ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   be884:	7823      	ldrb	r3, [r4, #0]
   be886:	f3bf 8f5b 	dmb	ish
   be88a:	07db      	lsls	r3, r3, #31
   be88c:	d40c      	bmi.n	be8a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   be88e:	4620      	mov	r0, r4
   be890:	f7f5 fc16 	bl	b40c0 <__cxa_guard_acquire>
   be894:	b140      	cbz	r0, be8a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   be896:	4806      	ldr	r0, [pc, #24]	; (be8b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   be898:	f7ff ffbe 	bl	be818 <_ZN8particle14BleLocalDeviceC1Ev>
   be89c:	4620      	mov	r0, r4
   be89e:	f7f5 fc14 	bl	b40ca <__cxa_guard_release>
   be8a2:	4804      	ldr	r0, [pc, #16]	; (be8b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   be8a4:	f005 fa46 	bl	c3d34 <atexit>
    return instance;
}
   be8a8:	4801      	ldr	r0, [pc, #4]	; (be8b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   be8aa:	bd10      	pop	{r4, pc}
   be8ac:	2003e634 	.word	0x2003e634
   be8b0:	2003e640 	.word	0x2003e640
   be8b4:	000beaf5 	.word	0x000beaf5

000be8b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   be8b8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   be8ba:	6803      	ldr	r3, [r0, #0]
   be8bc:	3b09      	subs	r3, #9
   be8be:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   be8c0:	b08d      	sub	sp, #52	; 0x34
   be8c2:	4604      	mov	r4, r0
   be8c4:	460d      	mov	r5, r1
    switch (event->type) {
   be8c6:	d811      	bhi.n	be8ec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   be8c8:	f7ff ffda 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   be8cc:	88a1      	ldrh	r1, [r4, #4]
   be8ce:	6800      	ldr	r0, [r0, #0]
   be8d0:	f7ff feb4 	bl	be63c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   be8d4:	4603      	mov	r3, r0
   be8d6:	b958      	cbnz	r0, be8f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   be8d8:	2220      	movs	r2, #32
   be8da:	e9cd 2004 	strd	r2, r0, [sp, #16]
   be8de:	4a0b      	ldr	r2, [pc, #44]	; (be90c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   be8e0:	9200      	str	r2, [sp, #0]
   be8e2:	490b      	ldr	r1, [pc, #44]	; (be910 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   be8e4:	aa04      	add	r2, sp, #16
   be8e6:	2032      	movs	r0, #50	; 0x32
   be8e8:	f7ff f838 	bl	bd95c <log_message>
}
   be8ec:	b00d      	add	sp, #52	; 0x34
   be8ee:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   be8f0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   be8f2:	2a00      	cmp	r2, #0
   be8f4:	d0fa      	beq.n	be8ec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   be8f6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be8fa:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   be8fe:	e9cd 1203 	strd	r1, r2, [sp, #12]
   be902:	6dac      	ldr	r4, [r5, #88]	; 0x58
   be904:	aa04      	add	r2, sp, #16
   be906:	a903      	add	r1, sp, #12
   be908:	47a0      	blx	r4
}
   be90a:	e7ef      	b.n	be8ec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   be90c:	000c7470 	.word	0x000c7470
   be910:	000c7407 	.word	0x000c7407

000be914 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   be914:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   be916:	2000      	movs	r0, #0
   be918:	f7fe fdce 	bl	bd4b8 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   be91c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   be920:	bd08      	pop	{r3, pc}

000be922 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   be922:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   be924:	2100      	movs	r1, #0
   be926:	f7fe bdcf 	b.w	bd4c8 <hal_ble_gap_set_tx_power>

000be92a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   be92a:	b919      	cbnz	r1, be934 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   be92c:	460a      	mov	r2, r1
   be92e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   be930:	f7fe bdd2 	b.w	bd4d8 <hal_ble_gap_set_advertising_data>
   be934:	e9d1 0100 	ldrd	r0, r1, [r1]
   be938:	2200      	movs	r2, #0
   be93a:	e7f9      	b.n	be930 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000be93c <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   be93c:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   be93e:	69d8      	ldr	r0, [r3, #28]
}
   be940:	2800      	cmp	r0, #0
   be942:	bfd4      	ite	le
   be944:	2000      	movle	r0, #0
   be946:	2001      	movgt	r0, #1
   be948:	4770      	bx	lr

000be94a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be94a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be94c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be950:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be952:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   be956:	42ae      	cmp	r6, r5
   be958:	d004      	beq.n	be964 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   be95a:	4628      	mov	r0, r5
   be95c:	f7ff fb62 	bl	be024 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   be960:	3510      	adds	r5, #16
   be962:	e7f8      	b.n	be956 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be964:	6820      	ldr	r0, [r4, #0]
   be966:	f7ff f8ff 	bl	bdb68 <free>
}
   be96a:	4620      	mov	r0, r4
   be96c:	bd70      	pop	{r4, r5, r6, pc}

000be96e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   be96e:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   be970:	1e14      	subs	r4, r2, #0
   be972:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   be974:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   be976:	db02      	blt.n	be97e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   be978:	1862      	adds	r2, r4, r1
   be97a:	429a      	cmp	r2, r3
   be97c:	dd00      	ble.n	be980 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   be97e:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   be980:	682a      	ldr	r2, [r5, #0]
   be982:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   be984:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   be986:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   be988:	1a52      	subs	r2, r2, r1
   be98a:	f005 fa07 	bl	c3d9c <memmove>
    size_ -= n;
   be98e:	686a      	ldr	r2, [r5, #4]
   be990:	1b12      	subs	r2, r2, r4
   be992:	606a      	str	r2, [r5, #4]
}
   be994:	bd38      	pop	{r3, r4, r5, pc}

000be996 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   be996:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   be998:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   be99a:	4604      	mov	r4, r0
   be99c:	460d      	mov	r5, r1
   be99e:	ab01      	add	r3, sp, #4
   be9a0:	e9d0 0100 	ldrd	r0, r1, [r0]
   be9a4:	f7ff fc72 	bl	be28c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   be9a8:	4602      	mov	r2, r0
   be9aa:	b138      	cbz	r0, be9bc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   be9ac:	9901      	ldr	r1, [sp, #4]
   be9ae:	4620      	mov	r0, r4
   be9b0:	f7ff ffdd 	bl	be96e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   be9b4:	4629      	mov	r1, r5
   be9b6:	4620      	mov	r0, r4
   be9b8:	f7ff ffed 	bl	be996 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   be9bc:	b003      	add	sp, #12
   be9be:	bd30      	pop	{r4, r5, pc}

000be9c0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   be9c0:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   be9c2:	460c      	mov	r4, r1
   be9c4:	b929      	cbnz	r1, be9d2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   be9c6:	460a      	mov	r2, r1
   be9c8:	4608      	mov	r0, r1
}
   be9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   be9ce:	f7fe bd8b 	b.w	bd4e8 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   be9d2:	2101      	movs	r1, #1
   be9d4:	4620      	mov	r0, r4
   be9d6:	f7ff ffde 	bl	be996 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   be9da:	e9d4 0100 	ldrd	r0, r1, [r4]
   be9de:	2200      	movs	r2, #0
   be9e0:	e7f3      	b.n	be9ca <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000be9e2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   be9e2:	b538      	push	{r3, r4, r5, lr}
   be9e4:	4604      	mov	r4, r0
   be9e6:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   be9e8:	f7ff ff9f 	bl	be92a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   be9ec:	2800      	cmp	r0, #0
   be9ee:	db0a      	blt.n	bea06 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   be9f0:	4629      	mov	r1, r5
   be9f2:	4620      	mov	r0, r4
   be9f4:	f7ff ffe4 	bl	be9c0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   be9f8:	2800      	cmp	r0, #0
   be9fa:	db04      	blt.n	bea06 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   be9fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   bea00:	2000      	movs	r0, #0
   bea02:	f7fe bd79 	b.w	bd4f8 <hal_ble_gap_start_advertising>
}
   bea06:	bd38      	pop	{r3, r4, r5, pc}

000bea08 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   bea08:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bea0a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   bea0c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   bea0e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bea10:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bea12:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bea14:	f7f5 fb3f 	bl	b4096 <_Znwj>
   bea18:	b118      	cbz	r0, bea22 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   bea1a:	682b      	ldr	r3, [r5, #0]
   bea1c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bea1e:	686b      	ldr	r3, [r5, #4]
   bea20:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bea22:	4b03      	ldr	r3, [pc, #12]	; (bea30 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   bea24:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bea26:	4b03      	ldr	r3, [pc, #12]	; (bea34 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bea28:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bea2a:	60a3      	str	r3, [r4, #8]
      }
   bea2c:	4620      	mov	r0, r4
   bea2e:	bd38      	pop	{r3, r4, r5, pc}
   bea30:	000be2cd 	.word	0x000be2cd
   bea34:	000be2e5 	.word	0x000be2e5

000bea38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bea38:	680b      	ldr	r3, [r1, #0]
   bea3a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bea3c:	b113      	cbz	r3, bea44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bea3e:	685a      	ldr	r2, [r3, #4]
   bea40:	3201      	adds	r2, #1
   bea42:	605a      	str	r2, [r3, #4]
      }
   bea44:	4770      	bx	lr

000bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   bea46:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bea48:	f851 3b04 	ldr.w	r3, [r1], #4
   bea4c:	4604      	mov	r4, r0
   bea4e:	f840 3b04 	str.w	r3, [r0], #4
   bea52:	f7ff fff1 	bl	bea38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bea56:	6823      	ldr	r3, [r4, #0]
   bea58:	b90b      	cbnz	r3, bea5e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bea5a:	f7ff fc2d 	bl	be2b8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bea5e:	4620      	mov	r0, r4
   bea60:	bd10      	pop	{r4, pc}

000bea62 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bea62:	b510      	push	{r4, lr}
   bea64:	f851 3b04 	ldr.w	r3, [r1], #4
   bea68:	4604      	mov	r4, r0
   bea6a:	f840 3b04 	str.w	r3, [r0], #4
   bea6e:	f7ff ffe3 	bl	bea38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bea72:	4620      	mov	r0, r4
   bea74:	bd10      	pop	{r4, pc}

000bea76 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bea76:	b510      	push	{r4, lr}
   bea78:	f851 3b04 	ldr.w	r3, [r1], #4
   bea7c:	4604      	mov	r4, r0
   bea7e:	f840 3b04 	str.w	r3, [r0], #4
   bea82:	f7ff ffd9 	bl	bea38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bea86:	4620      	mov	r0, r4
   bea88:	bd10      	pop	{r4, pc}

000bea8a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   bea8a:	b510      	push	{r4, lr}
   bea8c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bea8e:	3004      	adds	r0, #4
   bea90:	f7f6 ff7c 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bea94:	4620      	mov	r0, r4
   bea96:	bd10      	pop	{r4, pc}

000bea98 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bea98:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bea9a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bea9e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   beaa0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   beaa4:	42ae      	cmp	r6, r5
   beaa6:	d004      	beq.n	beab2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   beaa8:	1d28      	adds	r0, r5, #4
   beaaa:	f7f6 ff6f 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   beaae:	3508      	adds	r5, #8
   beab0:	e7f8      	b.n	beaa4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   beab2:	6820      	ldr	r0, [r4, #0]
   beab4:	f7ff f858 	bl	bdb68 <free>
}
   beab8:	4620      	mov	r0, r4
   beaba:	bd70      	pop	{r4, r5, r6, pc}

000beabc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   beabc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   beabe:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   beac2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   beac4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   beac8:	42ae      	cmp	r6, r5
   beaca:	d004      	beq.n	bead6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   beacc:	1d28      	adds	r0, r5, #4
   beace:	f7f6 ff5d 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bead2:	3508      	adds	r5, #8
   bead4:	e7f8      	b.n	beac8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bead6:	6820      	ldr	r0, [r4, #0]
   bead8:	f7ff f846 	bl	bdb68 <free>
}
   beadc:	4620      	mov	r0, r4
   beade:	bd70      	pop	{r4, r5, r6, pc}

000beae0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   beae0:	b510      	push	{r4, lr}
   beae2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   beae4:	3024      	adds	r0, #36	; 0x24
   beae6:	f7ff ffe9 	bl	beabc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   beaea:	f104 0018 	add.w	r0, r4, #24
   beaee:	f7ff ffd3 	bl	bea98 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   beaf2:	bd10      	pop	{r4, pc}

000beaf4 <__tcf_0>:
    static BleLocalDevice instance;
   beaf4:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   beaf6:	4b17      	ldr	r3, [pc, #92]	; (beb54 <__tcf_0+0x60>)
   beaf8:	681c      	ldr	r4, [r3, #0]
   beafa:	b354      	cbz	r4, beb52 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   beafc:	f104 0054 	add.w	r0, r4, #84	; 0x54
   beb00:	f7f5 fc6c 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   beb04:	f104 0044 	add.w	r0, r4, #68	; 0x44
   beb08:	f7f5 fc68 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   beb0c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   beb10:	f7f5 fc64 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   beb14:	f104 0024 	add.w	r0, r4, #36	; 0x24
   beb18:	f7f5 fc60 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   beb1c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   beb20:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   beb24:	42ae      	cmp	r6, r5
   beb26:	d004      	beq.n	beb32 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   beb28:	1d28      	adds	r0, r5, #4
   beb2a:	f7f6 ff2f 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   beb2e:	3508      	adds	r5, #8
   beb30:	e7f8      	b.n	beb24 <__tcf_0+0x30>
    ::free(ptr);
   beb32:	69a0      	ldr	r0, [r4, #24]
   beb34:	f7ff f818 	bl	bdb68 <free>
    ~BleLocalDeviceImpl() = default;
   beb38:	f104 000c 	add.w	r0, r4, #12
   beb3c:	f7ff ffbe 	bl	beabc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   beb40:	4620      	mov	r0, r4
   beb42:	f7ff ffa9 	bl	bea98 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   beb46:	4620      	mov	r0, r4
   beb48:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   beb4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   beb4e:	f7f5 baa8 	b.w	b40a2 <_ZdlPvj>
   beb52:	bd70      	pop	{r4, r5, r6, pc}
   beb54:	2003e640 	.word	0x2003e640

000beb58 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   beb58:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   beb5a:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   beb5c:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   beb60:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   beb64:	6803      	ldr	r3, [r0, #0]
   beb66:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   beb68:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   beb6a:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   beb6c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   beb6e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   beb70:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   beb72:	f7f6 ff0b 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   beb76:	b002      	add	sp, #8
   beb78:	bd10      	pop	{r4, pc}

000beb7a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   beb7a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   beb7c:	b510      	push	{r4, lr}
      if (_M_empty())
   beb7e:	b90a      	cbnz	r2, beb84 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   beb80:	f002 ff00 	bl	c1984 <_ZSt25__throw_bad_function_callv>
    }
   beb84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   beb88:	68c3      	ldr	r3, [r0, #12]
   beb8a:	4718      	bx	r3

000beb8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   beb8c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   beb8e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   beb90:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   beb92:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   beb94:	dd03      	ble.n	beb9e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   beb96:	f7fe ffef 	bl	bdb78 <realloc>
            if (!d) {
   beb9a:	b918      	cbnz	r0, beba4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   beb9c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   beb9e:	f7fe ffe3 	bl	bdb68 <free>
        T* d = nullptr;
   beba2:	2000      	movs	r0, #0
        data_ = d;
   beba4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   beba6:	60a5      	str	r5, [r4, #8]
        return true;
   beba8:	2001      	movs	r0, #1
   bebaa:	e7f7      	b.n	beb9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bebac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bebac:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bebae:	6883      	ldr	r3, [r0, #8]
   bebb0:	428b      	cmp	r3, r1
   bebb2:	da02      	bge.n	bebba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bebb4:	f7ff ffea 	bl	beb8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   bebb8:	bd08      	pop	{r3, pc}
    return true;
   bebba:	2001      	movs	r0, #1
   bebbc:	e7fc      	b.n	bebb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000bebbe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bebbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bebc2:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bebc4:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bebc6:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bebc8:	4419      	add	r1, r3
   bebca:	6883      	ldr	r3, [r0, #8]
   bebcc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bebce:	4604      	mov	r4, r0
   bebd0:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bebd2:	dc12      	bgt.n	bebfa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bebd4:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bebd6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bebd8:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bebda:	1bd2      	subs	r2, r2, r7
   bebdc:	4631      	mov	r1, r6
   bebde:	1970      	adds	r0, r6, r5
   bebe0:	f005 f8dc 	bl	c3d9c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bebe4:	462a      	mov	r2, r5
   bebe6:	4641      	mov	r1, r8
   bebe8:	4630      	mov	r0, r6
   bebea:	f005 f8c9 	bl	c3d80 <memcpy>
    size_ += n;
   bebee:	6863      	ldr	r3, [r4, #4]
   bebf0:	442b      	add	r3, r5
   bebf2:	6063      	str	r3, [r4, #4]
    return true;
   bebf4:	2001      	movs	r0, #1
}
   bebf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bebfa:	f7ff ffc7 	bl	beb8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bebfe:	2800      	cmp	r0, #0
   bec00:	d1e8      	bne.n	bebd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bec02:	e7f8      	b.n	bebf6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bec04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bec04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bec06:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bec08:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bec0c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bec0e:	4604      	mov	r4, r0
   bec10:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bec12:	da0b      	bge.n	bec2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bec14:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bec16:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bec18:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bec1a:	1b52      	subs	r2, r2, r5
   bec1c:	1c48      	adds	r0, r1, #1
   bec1e:	f005 f8bd 	bl	c3d9c <memmove>
    new(p) T(std::move(value));
   bec22:	557e      	strb	r6, [r7, r5]
    ++size_;
   bec24:	6863      	ldr	r3, [r4, #4]
   bec26:	3301      	adds	r3, #1
   bec28:	6063      	str	r3, [r4, #4]
}
   bec2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bec2c:	3101      	adds	r1, #1
   bec2e:	f7ff ffad 	bl	beb8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bec32:	2800      	cmp	r0, #0
   bec34:	d1ee      	bne.n	bec14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bec36:	e7f8      	b.n	bec2a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bec38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bec38:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bec3a:	6841      	ldr	r1, [r0, #4]
   bec3c:	f7ff bfe2 	b.w	bec04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000bec40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bec40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bec44:	4604      	mov	r4, r0
   bec46:	461d      	mov	r5, r3
   bec48:	460f      	mov	r7, r1
   bec4a:	ab01      	add	r3, sp, #4
   bec4c:	4690      	mov	r8, r2
   bec4e:	460a      	mov	r2, r1
   bec50:	e9d0 0100 	ldrd	r0, r1, [r0]
   bec54:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bec58:	f7ff fb18 	bl	be28c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bec5c:	1cae      	adds	r6, r5, #2
   bec5e:	6863      	ldr	r3, [r4, #4]
   bec60:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bec62:	f1b9 0f00 	cmp.w	r9, #0
   bec66:	d126      	bne.n	becb6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bec68:	b328      	cbz	r0, becb6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bec6a:	4433      	add	r3, r6
   bec6c:	1a1b      	subs	r3, r3, r0
   bec6e:	2bff      	cmp	r3, #255	; 0xff
   bec70:	d809      	bhi.n	bec86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bec72:	9901      	ldr	r1, [sp, #4]
   bec74:	4620      	mov	r0, r4
   bec76:	f7ff fe7a 	bl	be96e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bec7a:	6861      	ldr	r1, [r4, #4]
   bec7c:	4620      	mov	r0, r4
   bec7e:	4431      	add	r1, r6
   bec80:	f7ff ff94 	bl	bebac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bec84:	b918      	cbnz	r0, bec8e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bec86:	6860      	ldr	r0, [r4, #4]
}
   bec88:	b003      	add	sp, #12
   bec8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bec8e:	1c6a      	adds	r2, r5, #1
   bec90:	9901      	ldr	r1, [sp, #4]
   bec92:	b2d2      	uxtb	r2, r2
   bec94:	4620      	mov	r0, r4
   bec96:	f7ff ffb5 	bl	bec04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bec9a:	9901      	ldr	r1, [sp, #4]
   bec9c:	463a      	mov	r2, r7
   bec9e:	3101      	adds	r1, #1
   beca0:	4620      	mov	r0, r4
   beca2:	f7ff ffaf 	bl	bec04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   beca6:	9901      	ldr	r1, [sp, #4]
   beca8:	462b      	mov	r3, r5
   becaa:	4642      	mov	r2, r8
   becac:	3102      	adds	r1, #2
    return insert(size_, values, n);
   becae:	4620      	mov	r0, r4
   becb0:	f7ff ff85 	bl	bebbe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   becb4:	e7e7      	b.n	bec86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   becb6:	18f1      	adds	r1, r6, r3
   becb8:	29ff      	cmp	r1, #255	; 0xff
   becba:	d8e4      	bhi.n	bec86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   becbc:	4620      	mov	r0, r4
   becbe:	f7ff ff75 	bl	bebac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   becc2:	2800      	cmp	r0, #0
   becc4:	d0df      	beq.n	bec86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   becc6:	1c69      	adds	r1, r5, #1
   becc8:	b2c9      	uxtb	r1, r1
   becca:	4620      	mov	r0, r4
   beccc:	f7ff ffb4 	bl	bec38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   becd0:	4639      	mov	r1, r7
   becd2:	4620      	mov	r0, r4
   becd4:	f7ff ffb0 	bl	bec38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   becd8:	6861      	ldr	r1, [r4, #4]
   becda:	462b      	mov	r3, r5
   becdc:	4642      	mov	r2, r8
   becde:	e7e6      	b.n	becae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bece0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bece0:	b430      	push	{r4, r5}
   bece2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bece6:	b11a      	cbz	r2, becf0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bece8:	9502      	str	r5, [sp, #8]
}
   becea:	bc30      	pop	{r4, r5}
   becec:	f7ff bfa8 	b.w	bec40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   becf0:	6840      	ldr	r0, [r0, #4]
}
   becf2:	bc30      	pop	{r4, r5}
   becf4:	4770      	bx	lr

000becf6 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   becf6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   becf8:	2300      	movs	r3, #0
   becfa:	e9c0 3300 	strd	r3, r3, [r0]
   becfe:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bed00:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bed02:	9300      	str	r3, [sp, #0]
   bed04:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bed06:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bed0a:	4619      	mov	r1, r3
   bed0c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bed10:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bed12:	f7ff ffe5 	bl	bece0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bed16:	4620      	mov	r0, r4
   bed18:	b004      	add	sp, #16
   bed1a:	bd10      	pop	{r4, pc}

000bed1c <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   bed1c:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   bed1e:	9300      	str	r3, [sp, #0]
   bed20:	4613      	mov	r3, r2
   bed22:	460a      	mov	r2, r1
   bed24:	21ff      	movs	r1, #255	; 0xff
   bed26:	f7ff ffdb 	bl	bece0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bed2a:	b003      	add	sp, #12
   bed2c:	f85d fb04 	ldr.w	pc, [sp], #4

000bed30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bed30:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bed32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bed34:	4604      	mov	r4, r0
   bed36:	460d      	mov	r5, r1
   bed38:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bed3a:	d914      	bls.n	bed66 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bed3c:	4290      	cmp	r0, r2
   bed3e:	d213      	bcs.n	bed68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bed40:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bed44:	1a75      	subs	r5, r6, r1
   bed46:	f1a1 0708 	sub.w	r7, r1, #8
   bed4a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bed4c:	42b7      	cmp	r7, r6
   bed4e:	d018      	beq.n	bed82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bed50:	b11c      	cbz	r4, bed5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bed52:	4631      	mov	r1, r6
   bed54:	4620      	mov	r0, r4
   bed56:	f7ff fe8e 	bl	bea76 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bed5a:	1d30      	adds	r0, r6, #4
   bed5c:	f7f6 fe16 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bed60:	3e08      	subs	r6, #8
   bed62:	3c08      	subs	r4, #8
   bed64:	e7f2      	b.n	bed4c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bed66:	d00c      	beq.n	bed82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bed68:	42b5      	cmp	r5, r6
   bed6a:	d00a      	beq.n	bed82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bed6c:	b11c      	cbz	r4, bed76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bed6e:	4629      	mov	r1, r5
   bed70:	4620      	mov	r0, r4
   bed72:	f7ff fe80 	bl	bea76 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bed76:	1d28      	adds	r0, r5, #4
   bed78:	f7f6 fe08 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bed7c:	3508      	adds	r5, #8
   bed7e:	3408      	adds	r4, #8
   bed80:	e7f2      	b.n	bed68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bed82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bed84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bed84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bed86:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bed88:	6846      	ldr	r6, [r0, #4]
   bed8a:	4668      	mov	r0, sp
   bed8c:	f7ff fe73 	bl	bea76 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bed90:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bed94:	429f      	cmp	r7, r3
   bed96:	db12      	blt.n	bedbe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bed98:	3701      	adds	r7, #1
        if (n > 0) {
   bed9a:	2f00      	cmp	r7, #0
   bed9c:	dd29      	ble.n	bedf2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bed9e:	00f8      	lsls	r0, r7, #3
   beda0:	f7fe feda 	bl	bdb58 <malloc>
            if (!d) {
   beda4:	4605      	mov	r5, r0
   beda6:	b1f0      	cbz	r0, bede6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   beda8:	e9d4 1200 	ldrd	r1, r2, [r4]
   bedac:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bedb0:	f7ff ffbe 	bl	bed30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bedb4:	6820      	ldr	r0, [r4, #0]
   bedb6:	f7fe fed7 	bl	bdb68 <free>
        data_ = d;
   bedba:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bedbc:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bedbe:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bedc0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bedc2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bedc6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bedca:	4631      	mov	r1, r6
   bedcc:	f106 0008 	add.w	r0, r6, #8
   bedd0:	f7ff ffae 	bl	bed30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bedd4:	b11e      	cbz	r6, bedde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bedd6:	4669      	mov	r1, sp
   bedd8:	4630      	mov	r0, r6
   bedda:	f7ff fe4c 	bl	bea76 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bedde:	6863      	ldr	r3, [r4, #4]
   bede0:	3301      	adds	r3, #1
   bede2:	6063      	str	r3, [r4, #4]
    return true;
   bede4:	2501      	movs	r5, #1
   bede6:	a801      	add	r0, sp, #4
   bede8:	f7f6 fdd0 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bedec:	4628      	mov	r0, r5
   bedee:	b003      	add	sp, #12
   bedf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bedf2:	2500      	movs	r5, #0
   bedf4:	e7de      	b.n	bedb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bedf6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bedf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bedf8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bedfc:	4605      	mov	r5, r0
   bedfe:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bee00:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bee04:	42a6      	cmp	r6, r4
   bee06:	d005      	beq.n	bee14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bee08:	4639      	mov	r1, r7
   bee0a:	4620      	mov	r0, r4
   bee0c:	f7ff fce1 	bl	be7d2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bee10:	b108      	cbz	r0, bee16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bee12:	b914      	cbnz	r4, bee1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bee14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bee16:	3408      	adds	r4, #8
   bee18:	e7f4      	b.n	bee04 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bee1a:	1d20      	adds	r0, r4, #4
   bee1c:	f7f6 fdb6 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bee20:	e9d5 3200 	ldrd	r3, r2, [r5]
   bee24:	f104 0108 	add.w	r1, r4, #8
   bee28:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bee2c:	4620      	mov	r0, r4
   bee2e:	f7ff ff7f 	bl	bed30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bee32:	686b      	ldr	r3, [r5, #4]
   bee34:	3b01      	subs	r3, #1
   bee36:	606b      	str	r3, [r5, #4]
    return true;
   bee38:	e7ec      	b.n	bee14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bee3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bee3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bee40:	4605      	mov	r5, r0
   bee42:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bee44:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bee46:	460c      	mov	r4, r1
        WiringBleLock lk;
   bee48:	f7ff faa0 	bl	be38c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bee4c:	682e      	ldr	r6, [r5, #0]
   bee4e:	1ef3      	subs	r3, r6, #3
   bee50:	2b0d      	cmp	r3, #13
   bee52:	d83c      	bhi.n	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bee54:	e8df f013 	tbh	[pc, r3, lsl #1]
   bee58:	0053000e 	.word	0x0053000e
   bee5c:	00d1003b 	.word	0x00d1003b
   bee60:	003b003b 	.word	0x003b003b
   bee64:	003b003b 	.word	0x003b003b
   bee68:	009b003b 	.word	0x009b003b
   bee6c:	009b009b 	.word	0x009b009b
   bee70:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bee74:	a804      	add	r0, sp, #16
   bee76:	f7ff fc77 	bl	be768 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bee7a:	9b04      	ldr	r3, [sp, #16]
   bee7c:	89aa      	ldrh	r2, [r5, #12]
   bee7e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bee80:	6869      	ldr	r1, [r5, #4]
   bee82:	9804      	ldr	r0, [sp, #16]
   bee84:	3108      	adds	r1, #8
   bee86:	3002      	adds	r0, #2
   bee88:	f7ff fa9a 	bl	be3c0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bee8c:	a904      	add	r1, sp, #16
   bee8e:	a806      	add	r0, sp, #24
   bee90:	f7ff fdf1 	bl	bea76 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bee94:	a906      	add	r1, sp, #24
   bee96:	f104 0018 	add.w	r0, r4, #24
   bee9a:	f7ff ff73 	bl	bed84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bee9e:	4605      	mov	r5, r0
   beea0:	a807      	add	r0, sp, #28
   beea2:	f7f6 fd73 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   beea6:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   beea8:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   beeaa:	b9b5      	cbnz	r5, beeda <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   beeac:	4b5d      	ldr	r3, [pc, #372]	; (bf024 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   beeae:	495e      	ldr	r1, [pc, #376]	; (bf028 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   beeb0:	9300      	str	r3, [sp, #0]
   beeb2:	2032      	movs	r0, #50	; 0x32
   beeb4:	462b      	mov	r3, r5
   beeb6:	aa06      	add	r2, sp, #24
   beeb8:	9507      	str	r5, [sp, #28]
   beeba:	f7fe fd4f 	bl	bd95c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   beebe:	9b04      	ldr	r3, [sp, #16]
   beec0:	4629      	mov	r1, r5
   beec2:	8818      	ldrh	r0, [r3, #0]
   beec4:	f7fe fb20 	bl	bd508 <hal_ble_gap_disconnect>
   beec8:	a805      	add	r0, sp, #20
   beeca:	f7f6 fd5f 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   beece:	a803      	add	r0, sp, #12
   beed0:	f7ff fa6a 	bl	be3a8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   beed4:	b00e      	add	sp, #56	; 0x38
   beed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   beeda:	4a54      	ldr	r2, [pc, #336]	; (bf02c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   beedc:	9200      	str	r2, [sp, #0]
   beede:	2300      	movs	r3, #0
   beee0:	4951      	ldr	r1, [pc, #324]	; (bf028 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   beee2:	9307      	str	r3, [sp, #28]
   beee4:	aa06      	add	r2, sp, #24
   beee6:	2001      	movs	r0, #1
   beee8:	f7fe fd38 	bl	bd95c <log_message>
                if (impl->connectedCallback_) {
   beeec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   beeee:	2b00      	cmp	r3, #0
   beef0:	d0ea      	beq.n	beec8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   beef2:	a904      	add	r1, sp, #16
   beef4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   beef8:	f7ff fe3f 	bl	beb7a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   beefc:	e7e4      	b.n	beec8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   beefe:	89a9      	ldrh	r1, [r5, #12]
   bef00:	4620      	mov	r0, r4
   bef02:	f7ff fb9b 	bl	be63c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bef06:	4606      	mov	r6, r0
   bef08:	2800      	cmp	r0, #0
   bef0a:	d0e0      	beq.n	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bef0c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bef0e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bef12:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bef16:	8029      	strh	r1, [r5, #0]
   bef18:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bef1c:	429a      	cmp	r2, r3
   bef1e:	d003      	beq.n	bef28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bef20:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bef24:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bef26:	e7f9      	b.n	bef1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bef28:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bef2c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bef30:	45b8      	cmp	r8, r7
   bef32:	d004      	beq.n	bef3e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bef34:	1d38      	adds	r0, r7, #4
   bef36:	f7f6 fd29 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bef3a:	3708      	adds	r7, #8
   bef3c:	e7f8      	b.n	bef30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bef3e:	2300      	movs	r3, #0
   bef40:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bef42:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bef46:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bef4a:	45b8      	cmp	r8, r7
   bef4c:	d004      	beq.n	bef58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bef4e:	1d38      	adds	r0, r7, #4
   bef50:	f7f6 fd1c 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bef54:	3708      	adds	r7, #8
   bef56:	e7f8      	b.n	bef4a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bef58:	2300      	movs	r3, #0
   bef5a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bef5c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bef5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bef60:	b123      	cbz	r3, bef6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bef62:	4631      	mov	r1, r6
   bef64:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bef68:	f7ff fe07 	bl	beb7a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bef6c:	2300      	movs	r3, #0
   bef6e:	2220      	movs	r2, #32
   bef70:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bef74:	4a2e      	ldr	r2, [pc, #184]	; (bf030 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bef76:	9200      	str	r2, [sp, #0]
   bef78:	492b      	ldr	r1, [pc, #172]	; (bf028 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bef7a:	aa06      	add	r2, sp, #24
   bef7c:	2001      	movs	r0, #1
   bef7e:	f7fe fced 	bl	bd95c <log_message>
                    impl->peers_.removeOne(*peer);
   bef82:	4631      	mov	r1, r6
   bef84:	f104 0018 	add.w	r0, r4, #24
   bef88:	f7ff ff35 	bl	bedf6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bef8c:	e79f      	b.n	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bef8e:	89a9      	ldrh	r1, [r5, #12]
   bef90:	4620      	mov	r0, r4
   bef92:	f7ff fb53 	bl	be63c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bef96:	2800      	cmp	r0, #0
   bef98:	d099      	beq.n	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bef9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bef9c:	2b00      	cmp	r3, #0
   bef9e:	d096      	beq.n	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   befa0:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   befa2:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   befa4:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   befa8:	d001      	beq.n	befae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   befaa:	2e10      	cmp	r6, #16
   befac:	d117      	bne.n	befde <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   befae:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   befb0:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   befb2:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   befb4:	2506      	movs	r5, #6
                        };
   befb6:	f88d 3015 	strb.w	r3, [sp, #21]
   befba:	9104      	str	r1, [sp, #16]
   befbc:	f88d 2014 	strb.w	r2, [sp, #20]
   befc0:	9006      	str	r0, [sp, #24]
   befc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   befc6:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   befc8:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   befcc:	9508      	str	r5, [sp, #32]
   befce:	e883 0003 	stmia.w	r3, {r0, r1}
   befd2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   befd4:	a906      	add	r1, sp, #24
   befd6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   befda:	4798      	blx	r3
   befdc:	e777      	b.n	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   befde:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   befe0:	bf01      	itttt	eq
   befe2:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   befe4:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   befe6:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   befea:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   befec:	bf0f      	iteee	eq
   befee:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   beff2:	461a      	movne	r2, r3
   beff4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   beff6:	461d      	movne	r5, r3
   beff8:	e7dd      	b.n	befb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   beffa:	89a9      	ldrh	r1, [r5, #12]
   beffc:	4620      	mov	r0, r4
   beffe:	f7ff fb1d 	bl	be63c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bf002:	4601      	mov	r1, r0
   bf004:	2800      	cmp	r0, #0
   bf006:	f43f af62 	beq.w	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf00a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bf00c:	2b00      	cmp	r3, #0
   bf00e:	f43f af5e 	beq.w	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bf012:	686b      	ldr	r3, [r5, #4]
   bf014:	9306      	str	r3, [sp, #24]
   bf016:	aa06      	add	r2, sp, #24
   bf018:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bf01a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bf01e:	4798      	blx	r3
   bf020:	e755      	b.n	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf022:	bf00      	nop
   bf024:	000c7488 	.word	0x000c7488
   bf028:	000c7407 	.word	0x000c7407
   bf02c:	000c74ae 	.word	0x000c74ae
   bf030:	000c74cb 	.word	0x000c74cb

000bf034 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bf034:	b513      	push	{r0, r1, r4, lr}
   bf036:	460b      	mov	r3, r1
   bf038:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf03a:	e9d0 0100 	ldrd	r0, r1, [r0]
   bf03e:	466c      	mov	r4, sp
   bf040:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bf044:	e893 0003 	ldmia.w	r3, {r0, r1}
   bf048:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bf04c:	e894 0003 	ldmia.w	r4, {r0, r1}
   bf050:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bf054:	b002      	add	sp, #8
   bf056:	bd10      	pop	{r4, pc}

000bf058 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bf058:	b538      	push	{r3, r4, r5, lr}
   bf05a:	4605      	mov	r5, r0
   bf05c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bf05e:	f7ff ffe9 	bl	bf034 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf062:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bf064:	68a2      	ldr	r2, [r4, #8]
   bf066:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf068:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf06a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bf06c:	68e2      	ldr	r2, [r4, #12]
   bf06e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf070:	60e3      	str	r3, [r4, #12]
      }
   bf072:	bd38      	pop	{r3, r4, r5, pc}

000bf074 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   bf074:	b570      	push	{r4, r5, r6, lr}
   bf076:	4604      	mov	r4, r0
   bf078:	b08c      	sub	sp, #48	; 0x30
   bf07a:	460e      	mov	r6, r1
   bf07c:	9201      	str	r2, [sp, #4]
   bf07e:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   bf080:	f7ff fabc 	bl	be5fc <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   bf084:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   bf086:	9901      	ldr	r1, [sp, #4]
   bf088:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bf08c:	f7ff f86b 	bl	be166 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bf090:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   bf094:	b1cd      	cbz	r5, bf0ca <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   bf096:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bf098:	9502      	str	r5, [sp, #8]
   bf09a:	a902      	add	r1, sp, #8
   bf09c:	a804      	add	r0, sp, #16
   bf09e:	9303      	str	r3, [sp, #12]
   bf0a0:	f7ff fcb2 	bl	bea08 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bf0a4:	2300      	movs	r3, #0
	__x.swap(*this);
   bf0a6:	a908      	add	r1, sp, #32
   bf0a8:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   bf0aa:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   bf0ac:	f7ff ffd4 	bl	bf058 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bf0b0:	4631      	mov	r1, r6
   bf0b2:	a808      	add	r0, sp, #32
   bf0b4:	f7ff ffd0 	bl	bf058 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bf0b8:	a808      	add	r0, sp, #32
   bf0ba:	f7f5 f98f 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   bf0be:	a804      	add	r0, sp, #16
   bf0c0:	f7f5 f98c 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    }
   bf0c4:	4620      	mov	r0, r4
   bf0c6:	b00c      	add	sp, #48	; 0x30
   bf0c8:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   bf0ca:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   bf0cc:	e7ea      	b.n	bf0a4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000bf0d0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   bf0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf0d4:	b087      	sub	sp, #28
   bf0d6:	461d      	mov	r5, r3
   bf0d8:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   bf0dc:	4680      	mov	r8, r0
   bf0de:	468b      	mov	fp, r1
   bf0e0:	4692      	mov	sl, r2
   bf0e2:	9912      	ldr	r1, [sp, #72]	; 0x48
   bf0e4:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bf0e6:	2200      	movs	r2, #0
   bf0e8:	2068      	movs	r0, #104	; 0x68
   bf0ea:	9102      	str	r1, [sp, #8]
   bf0ec:	9204      	str	r2, [sp, #16]
   bf0ee:	f7f4 ffd2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bf0f2:	1e06      	subs	r6, r0, #0
   bf0f4:	f106 090c 	add.w	r9, r6, #12
   bf0f8:	d018      	beq.n	bf12c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   bf0fa:	2201      	movs	r2, #1
	: _M_impl(__a)
   bf0fc:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   bf0fe:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   bf102:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   bf104:	4a15      	ldr	r2, [pc, #84]	; (bf15c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   bf106:	f847 2b20 	str.w	r2, [r7], #32
   bf10a:	9b03      	ldr	r3, [sp, #12]
   bf10c:	9100      	str	r1, [sp, #0]
   bf10e:	465a      	mov	r2, fp
   bf110:	4651      	mov	r1, sl
   bf112:	4648      	mov	r0, r9
   bf114:	f7ff ffae 	bl	bf074 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   bf118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf11a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   bf11c:	682b      	ldr	r3, [r5, #0]
   bf11e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   bf120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bf122:	f106 0534 	add.w	r5, r6, #52	; 0x34
   bf126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bf128:	6823      	ldr	r3, [r4, #0]
   bf12a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   bf12c:	a904      	add	r1, sp, #16
   bf12e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   bf130:	e9cd 9604 	strd	r9, r6, [sp, #16]
   bf134:	f7ff fd10 	bl	beb58 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   bf138:	a805      	add	r0, sp, #20
   bf13a:	f7f6 fc27 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   bf13e:	f8d8 3000 	ldr.w	r3, [r8]
   bf142:	b93b      	cbnz	r3, bf154 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   bf144:	4a06      	ldr	r2, [pc, #24]	; (bf160 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   bf146:	4907      	ldr	r1, [pc, #28]	; (bf164 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   bf148:	200a      	movs	r0, #10
}
   bf14a:	b007      	add	sp, #28
   bf14c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   bf150:	f7fe bbfc 	b.w	bd94c <panic_>
}
   bf154:	b007      	add	sp, #28
   bf156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf15a:	bf00      	nop
   bf15c:	000c7544 	.word	0x000c7544
   bf160:	000bd469 	.word	0x000bd469
   bf164:	000c73f0 	.word	0x000c73f0

000bf168 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf168:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf16a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf16c:	4604      	mov	r4, r0
   bf16e:	460d      	mov	r5, r1
   bf170:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf172:	d914      	bls.n	bf19e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf174:	4290      	cmp	r0, r2
   bf176:	d213      	bcs.n	bf1a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf178:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf17c:	1a75      	subs	r5, r6, r1
   bf17e:	f1a1 0708 	sub.w	r7, r1, #8
   bf182:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf184:	42b7      	cmp	r7, r6
   bf186:	d018      	beq.n	bf1ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf188:	b11c      	cbz	r4, bf192 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bf18a:	4631      	mov	r1, r6
   bf18c:	4620      	mov	r0, r4
   bf18e:	f7ff fc68 	bl	bea62 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf192:	1d30      	adds	r0, r6, #4
   bf194:	f7f6 fbfa 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf198:	3e08      	subs	r6, #8
   bf19a:	3c08      	subs	r4, #8
   bf19c:	e7f2      	b.n	bf184 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf19e:	d00c      	beq.n	bf1ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf1a0:	42b5      	cmp	r5, r6
   bf1a2:	d00a      	beq.n	bf1ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf1a4:	b11c      	cbz	r4, bf1ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf1a6:	4629      	mov	r1, r5
   bf1a8:	4620      	mov	r0, r4
   bf1aa:	f7ff fc5a 	bl	bea62 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf1ae:	1d28      	adds	r0, r5, #4
   bf1b0:	f7f6 fbec 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf1b4:	3508      	adds	r5, #8
   bf1b6:	3408      	adds	r4, #8
   bf1b8:	e7f2      	b.n	bf1a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf1bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf1bc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf1be:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf1c0:	4605      	mov	r5, r0
        if (n > 0) {
   bf1c2:	dd11      	ble.n	bf1e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf1c4:	00f0      	lsls	r0, r6, #3
   bf1c6:	f7fe fcc7 	bl	bdb58 <malloc>
            if (!d) {
   bf1ca:	4604      	mov	r4, r0
   bf1cc:	b158      	cbz	r0, bf1e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf1ce:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf1d2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf1d6:	f7ff ffc7 	bl	bf168 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf1da:	6828      	ldr	r0, [r5, #0]
   bf1dc:	f7fe fcc4 	bl	bdb68 <free>
        data_ = d;
   bf1e0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf1e2:	60ae      	str	r6, [r5, #8]
        return true;
   bf1e4:	2001      	movs	r0, #1
    }
   bf1e6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf1e8:	2400      	movs	r4, #0
   bf1ea:	e7f6      	b.n	bf1da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf1ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf1ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf1ee:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf1f0:	6845      	ldr	r5, [r0, #4]
   bf1f2:	4668      	mov	r0, sp
   bf1f4:	f7ff fc35 	bl	bea62 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf1f8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf1fc:	4299      	cmp	r1, r3
   bf1fe:	da10      	bge.n	bf222 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf200:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf202:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf204:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf208:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf20c:	4629      	mov	r1, r5
   bf20e:	f105 0008 	add.w	r0, r5, #8
   bf212:	f7ff ffa9 	bl	bf168 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf216:	b98d      	cbnz	r5, bf23c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf218:	6863      	ldr	r3, [r4, #4]
   bf21a:	3301      	adds	r3, #1
   bf21c:	6063      	str	r3, [r4, #4]
    return true;
   bf21e:	2601      	movs	r6, #1
   bf220:	e006      	b.n	bf230 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf222:	3101      	adds	r1, #1
   bf224:	4620      	mov	r0, r4
   bf226:	f7ff ffc9 	bl	bf1bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf22a:	4606      	mov	r6, r0
   bf22c:	2800      	cmp	r0, #0
   bf22e:	d1e7      	bne.n	bf200 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf230:	a801      	add	r0, sp, #4
   bf232:	f7f6 fbab 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf236:	4630      	mov	r0, r6
   bf238:	b002      	add	sp, #8
   bf23a:	bd70      	pop	{r4, r5, r6, pc}
   bf23c:	4669      	mov	r1, sp
   bf23e:	4628      	mov	r0, r5
   bf240:	f7ff fc0f 	bl	bea62 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf244:	e7e8      	b.n	bf218 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf246 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf246:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf24a:	4604      	mov	r4, r0
   bf24c:	460d      	mov	r5, r1
   bf24e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf250:	d914      	bls.n	bf27c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf252:	4290      	cmp	r0, r2
   bf254:	d213      	bcs.n	bf27e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf256:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf25a:	1a75      	subs	r5, r6, r1
   bf25c:	f1a1 0708 	sub.w	r7, r1, #8
   bf260:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf262:	42b7      	cmp	r7, r6
   bf264:	d018      	beq.n	bf298 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf266:	b11c      	cbz	r4, bf270 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bf268:	4631      	mov	r1, r6
   bf26a:	4620      	mov	r0, r4
   bf26c:	f7ff fbeb 	bl	bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf270:	1d30      	adds	r0, r6, #4
   bf272:	f7f6 fb8b 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf276:	3e08      	subs	r6, #8
   bf278:	3c08      	subs	r4, #8
   bf27a:	e7f2      	b.n	bf262 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf27c:	d00c      	beq.n	bf298 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf27e:	42b5      	cmp	r5, r6
   bf280:	d00a      	beq.n	bf298 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf282:	b11c      	cbz	r4, bf28c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf284:	4629      	mov	r1, r5
   bf286:	4620      	mov	r0, r4
   bf288:	f7ff fbdd 	bl	bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf28c:	1d28      	adds	r0, r5, #4
   bf28e:	f7f6 fb7d 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf292:	3508      	adds	r5, #8
   bf294:	3408      	adds	r4, #8
   bf296:	e7f2      	b.n	bf27e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf29a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf29a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf29c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf29e:	4605      	mov	r5, r0
        if (n > 0) {
   bf2a0:	dd11      	ble.n	bf2c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf2a2:	00f0      	lsls	r0, r6, #3
   bf2a4:	f7fe fc58 	bl	bdb58 <malloc>
            if (!d) {
   bf2a8:	4604      	mov	r4, r0
   bf2aa:	b158      	cbz	r0, bf2c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf2ac:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf2b0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf2b4:	f7ff ffc7 	bl	bf246 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf2b8:	6828      	ldr	r0, [r5, #0]
   bf2ba:	f7fe fc55 	bl	bdb68 <free>
        data_ = d;
   bf2be:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf2c0:	60ae      	str	r6, [r5, #8]
        return true;
   bf2c2:	2001      	movs	r0, #1
    }
   bf2c4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf2c6:	2400      	movs	r4, #0
   bf2c8:	e7f6      	b.n	bf2b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf2ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf2ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf2cc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf2ce:	6845      	ldr	r5, [r0, #4]
   bf2d0:	4668      	mov	r0, sp
   bf2d2:	f7ff fbb8 	bl	bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf2d6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf2da:	4299      	cmp	r1, r3
   bf2dc:	da10      	bge.n	bf300 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf2de:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf2e0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf2e2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf2e6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf2ea:	4629      	mov	r1, r5
   bf2ec:	f105 0008 	add.w	r0, r5, #8
   bf2f0:	f7ff ffa9 	bl	bf246 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf2f4:	b98d      	cbnz	r5, bf31a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf2f6:	6863      	ldr	r3, [r4, #4]
   bf2f8:	3301      	adds	r3, #1
   bf2fa:	6063      	str	r3, [r4, #4]
    return true;
   bf2fc:	2601      	movs	r6, #1
   bf2fe:	e006      	b.n	bf30e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf300:	3101      	adds	r1, #1
   bf302:	4620      	mov	r0, r4
   bf304:	f7ff ffc9 	bl	bf29a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf308:	4606      	mov	r6, r0
   bf30a:	2800      	cmp	r0, #0
   bf30c:	d1e7      	bne.n	bf2de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf30e:	a801      	add	r0, sp, #4
   bf310:	f7f6 fb3c 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf314:	4630      	mov	r0, r6
   bf316:	b002      	add	sp, #8
   bf318:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bf31a:	4669      	mov	r1, sp
   bf31c:	4628      	mov	r0, r5
   bf31e:	f7ff fb92 	bl	bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf322:	e7e8      	b.n	bf2f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bf324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf328:	4617      	mov	r7, r2
   bf32a:	b0a1      	sub	sp, #132	; 0x84
   bf32c:	4680      	mov	r8, r0
    WiringBleLock lk;
   bf32e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bf330:	460e      	mov	r6, r1
    WiringBleLock lk;
   bf332:	f7ff f82b 	bl	be38c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bf336:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   bf338:	7923      	ldrb	r3, [r4, #4]
   bf33a:	b953      	cbnz	r3, bf352 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   bf33c:	4639      	mov	r1, r7
   bf33e:	4640      	mov	r0, r8
   bf340:	f7ff fb81 	bl	bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   bf344:	a80a      	add	r0, sp, #40	; 0x28
   bf346:	f7ff f82f 	bl	be3a8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   bf34a:	4640      	mov	r0, r8
   bf34c:	b021      	add	sp, #132	; 0x84
   bf34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bf352:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   bf354:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   bf358:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   bf35c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   bf35e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   bf362:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   bf366:	9b03      	ldr	r3, [sp, #12]
   bf368:	429d      	cmp	r5, r3
   bf36a:	d021      	beq.n	bf3b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   bf36c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   bf370:	4658      	mov	r0, fp
   bf372:	f109 0114 	add.w	r1, r9, #20
   bf376:	f7ff f8b6 	bl	be4e6 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   bf37a:	b1b8      	cbz	r0, bf3ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   bf37c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   bf380:	4650      	mov	r0, sl
   bf382:	f7ff f8b0 	bl	be4e6 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   bf386:	b188      	cbz	r0, bf3ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   bf388:	6823      	ldr	r3, [r4, #0]
   bf38a:	f8d9 2000 	ldr.w	r2, [r9]
   bf38e:	4053      	eors	r3, r2
   bf390:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   bf394:	d10a      	bne.n	bf3ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   bf396:	2220      	movs	r2, #32
   bf398:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   bf39c:	4a5e      	ldr	r2, [pc, #376]	; (bf518 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   bf39e:	9200      	str	r2, [sp, #0]
   bf3a0:	aa15      	add	r2, sp, #84	; 0x54
   bf3a2:	495e      	ldr	r1, [pc, #376]	; (bf51c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   bf3a4:	2032      	movs	r0, #50	; 0x32
   bf3a6:	f7fe fad9 	bl	bd95c <log_message>
   bf3aa:	e7c7      	b.n	bf33c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   bf3ac:	3508      	adds	r5, #8
   bf3ae:	e7da      	b.n	bf366 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   bf3b0:	4650      	mov	r0, sl
   bf3b2:	f7ff f869 	bl	be488 <_ZNK8particle7BleUuid7isValidEv>
   bf3b6:	b960      	cbnz	r0, bf3d2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   bf3b8:	4959      	ldr	r1, [pc, #356]	; (bf520 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   bf3ba:	2201      	movs	r2, #1
   bf3bc:	a815      	add	r0, sp, #84	; 0x54
   bf3be:	ad15      	add	r5, sp, #84	; 0x54
   bf3c0:	f7ff f83a 	bl	be438 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   bf3c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf3c6:	46d4      	mov	ip, sl
   bf3c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bf3cc:	682b      	ldr	r3, [r5, #0]
   bf3ce:	f8cc 3000 	str.w	r3, [ip]
   bf3d2:	6833      	ldr	r3, [r6, #0]
   bf3d4:	e9d3 5300 	ldrd	r5, r3, [r3]
   bf3d8:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   bf3dc:	455d      	cmp	r5, fp
   bf3de:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   bf3e0:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   bf3e2:	d06e      	beq.n	bf4c2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   bf3e4:	f855 0b08 	ldr.w	r0, [r5], #8
   bf3e8:	f7ff f87d 	bl	be4e6 <_ZNK8particle7BleUuideqERKS0_>
   bf3ec:	2800      	cmp	r0, #0
   bf3ee:	d0f5      	beq.n	bf3dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   bf3f0:	f104 0a14 	add.w	sl, r4, #20
   bf3f4:	4650      	mov	r0, sl
   bf3f6:	f7ff f847 	bl	be488 <_ZNK8particle7BleUuid7isValidEv>
   bf3fa:	b988      	cbnz	r0, bf420 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   bf3fc:	4b49      	ldr	r3, [pc, #292]	; (bf524 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf3fe:	4948      	ldr	r1, [pc, #288]	; (bf520 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   bf400:	881a      	ldrh	r2, [r3, #0]
   bf402:	3201      	adds	r2, #1
   bf404:	b292      	uxth	r2, r2
   bf406:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf408:	a815      	add	r0, sp, #84	; 0x54
   bf40a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   bf40c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf40e:	f7ff f832 	bl	be476 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   bf412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf414:	46d4      	mov	ip, sl
   bf416:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bf41a:	682b      	ldr	r3, [r5, #0]
   bf41c:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   bf420:	4b41      	ldr	r3, [pc, #260]	; (bf528 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   bf422:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   bf424:	2228      	movs	r2, #40	; 0x28
   bf426:	2100      	movs	r1, #0
   bf428:	a816      	add	r0, sp, #88	; 0x58
   bf42a:	f004 fcd1 	bl	c3dd0 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   bf42e:	4651      	mov	r1, sl
   bf430:	a804      	add	r0, sp, #16
   bf432:	f7ff f83b 	bl	be4ac <_ZN8particle7BleUuid7halUUIDEv>
   bf436:	ab04      	add	r3, sp, #16
   bf438:	aa18      	add	r2, sp, #96	; 0x60
   bf43a:	f10d 0c20 	add.w	ip, sp, #32
   bf43e:	6818      	ldr	r0, [r3, #0]
   bf440:	6859      	ldr	r1, [r3, #4]
   bf442:	4615      	mov	r5, r2
   bf444:	c503      	stmia	r5!, {r0, r1}
   bf446:	3308      	adds	r3, #8
   bf448:	4563      	cmp	r3, ip
   bf44a:	462a      	mov	r2, r5
   bf44c:	d1f7      	bne.n	bf43e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   bf44e:	6818      	ldr	r0, [r3, #0]
   bf450:	6028      	str	r0, [r5, #0]
    return value_;
   bf452:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   bf454:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   bf458:	f8d9 3000 	ldr.w	r3, [r9]
   bf45c:	8a9b      	ldrh	r3, [r3, #20]
   bf45e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bf462:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bf464:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bf466:	4b31      	ldr	r3, [pc, #196]	; (bf52c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bf468:	2200      	movs	r2, #0
   bf46a:	1da1      	adds	r1, r4, #6
   bf46c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bf46e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bf472:	f7fe f87b 	bl	bd56c <hal_ble_gatt_server_add_characteristic>
   bf476:	2800      	cmp	r0, #0
   bf478:	f47f af60 	bne.w	bf33c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bf47c:	2301      	movs	r3, #1
   bf47e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bf480:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bf482:	4639      	mov	r1, r7
        return characteristics_;
   bf484:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bf486:	a80d      	add	r0, sp, #52	; 0x34
   bf488:	f7ff fadd 	bl	bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf48c:	4620      	mov	r0, r4
   bf48e:	a90d      	add	r1, sp, #52	; 0x34
   bf490:	f7ff ff1b 	bl	bf2ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bf494:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bf496:	a80e      	add	r0, sp, #56	; 0x38
   bf498:	f7f6 fa78 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf49c:	2c00      	cmp	r4, #0
   bf49e:	f47f af4d 	bne.w	bf33c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bf4a2:	2320      	movs	r3, #32
   bf4a4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bf4a8:	4b21      	ldr	r3, [pc, #132]	; (bf530 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bf4aa:	9300      	str	r3, [sp, #0]
   bf4ac:	aa0d      	add	r2, sp, #52	; 0x34
   bf4ae:	4623      	mov	r3, r4
   bf4b0:	e777      	b.n	bf3a2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bf4b2:	4639      	mov	r1, r7
   bf4b4:	4640      	mov	r0, r8
   bf4b6:	f7ff fac6 	bl	bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf4ba:	a80c      	add	r0, sp, #48	; 0x30
   bf4bc:	f7f6 fa66 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf4c0:	e740      	b.n	bf344 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   bf4c2:	a80b      	add	r0, sp, #44	; 0x2c
   bf4c4:	f7ff f92c 	bl	be720 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   bf4c8:	4651      	mov	r1, sl
   bf4ca:	a815      	add	r0, sp, #84	; 0x54
   bf4cc:	f7fe ffee 	bl	be4ac <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   bf4d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf4d2:	2300      	movs	r3, #0
   bf4d4:	3214      	adds	r2, #20
   bf4d6:	a915      	add	r1, sp, #84	; 0x54
   bf4d8:	2001      	movs	r0, #1
   bf4da:	f7fe f81f 	bl	bd51c <hal_ble_gatt_server_add_service>
   bf4de:	2800      	cmp	r0, #0
   bf4e0:	d1e7      	bne.n	bf4b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   bf4e2:	6835      	ldr	r5, [r6, #0]
   bf4e4:	a90b      	add	r1, sp, #44	; 0x2c
   bf4e6:	a80d      	add	r0, sp, #52	; 0x34
   bf4e8:	f7ff fabb 	bl	bea62 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   bf4ec:	4628      	mov	r0, r5
   bf4ee:	a90d      	add	r1, sp, #52	; 0x34
   bf4f0:	f7ff fe7c 	bl	bf1ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bf4f4:	4605      	mov	r5, r0
   bf4f6:	a80e      	add	r0, sp, #56	; 0x38
   bf4f8:	f7f6 fa48 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf4fc:	2d00      	cmp	r5, #0
   bf4fe:	d0d8      	beq.n	bf4b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   bf500:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   bf502:	6853      	ldr	r3, [r2, #4]
   bf504:	6812      	ldr	r2, [r2, #0]
   bf506:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   bf50a:	3b01      	subs	r3, #1
   bf50c:	a80c      	add	r0, sp, #48	; 0x30
   bf50e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   bf512:	f7f6 fa3b 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf516:	e76b      	b.n	bf3f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   bf518:	000c74ea 	.word	0x000c74ea
   bf51c:	000c7407 	.word	0x000c7407
   bf520:	000c75ae 	.word	0x000c75ae
   bf524:	2003e638 	.word	0x2003e638
   bf528:	002c0003 	.word	0x002c0003
   bf52c:	000be8b9 	.word	0x000be8b9
   bf530:	000c7515 	.word	0x000c7515

000bf534 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bf534:	4802      	ldr	r0, [pc, #8]	; (bf540 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bf536:	2300      	movs	r3, #0
   bf538:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bf53a:	f7fe b86f 	b.w	bd61c <os_mutex_recursive_create>
   bf53e:	bf00      	nop
   bf540:	2003e63c 	.word	0x2003e63c

000bf544 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bf544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf546:	4606      	mov	r6, r0
   bf548:	460d      	mov	r5, r1
  size_t n = 0;
   bf54a:	188f      	adds	r7, r1, r2
   bf54c:	2400      	movs	r4, #0
  while (size--) {
   bf54e:	42bd      	cmp	r5, r7
   bf550:	d00c      	beq.n	bf56c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bf552:	6833      	ldr	r3, [r6, #0]
   bf554:	f815 1b01 	ldrb.w	r1, [r5], #1
   bf558:	689b      	ldr	r3, [r3, #8]
   bf55a:	4630      	mov	r0, r6
   bf55c:	4798      	blx	r3
     if (chunk>=0)
   bf55e:	1e03      	subs	r3, r0, #0
   bf560:	db01      	blt.n	bf566 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bf562:	441c      	add	r4, r3
  while (size--) {
   bf564:	e7f3      	b.n	bf54e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bf566:	2c00      	cmp	r4, #0
   bf568:	bf08      	it	eq
   bf56a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bf56c:	4620      	mov	r0, r4
   bf56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf570 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bf570:	b508      	push	{r3, lr}
  return write(str);
   bf572:	f7f7 ff0b 	bl	b738c <_ZN5Print5writeEPKc>
}
   bf576:	bd08      	pop	{r3, pc}

000bf578 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bf578:	6803      	ldr	r3, [r0, #0]
   bf57a:	689b      	ldr	r3, [r3, #8]
   bf57c:	4718      	bx	r3

000bf57e <_ZN5Print5printEPK19__FlashStringHelper>:
   bf57e:	b508      	push	{r3, lr}
   bf580:	f7f7 ff04 	bl	b738c <_ZN5Print5writeEPKc>
   bf584:	bd08      	pop	{r3, pc}

000bf586 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bf586:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bf588:	210d      	movs	r1, #13
{
   bf58a:	4605      	mov	r5, r0
  size_t n = print('\r');
   bf58c:	f7ff fff4 	bl	bf578 <_ZN5Print5printEc>
  n += print('\n');
   bf590:	210a      	movs	r1, #10
  size_t n = print('\r');
   bf592:	4604      	mov	r4, r0
  n += print('\n');
   bf594:	4628      	mov	r0, r5
   bf596:	f7ff ffef 	bl	bf578 <_ZN5Print5printEc>
  return n;
}
   bf59a:	4420      	add	r0, r4
   bf59c:	bd38      	pop	{r3, r4, r5, pc}

000bf59e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bf59e:	b538      	push	{r3, r4, r5, lr}
   bf5a0:	4605      	mov	r5, r0
  return write(str);
   bf5a2:	f7f7 fef3 	bl	b738c <_ZN5Print5writeEPKc>
   bf5a6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bf5a8:	4628      	mov	r0, r5
   bf5aa:	f7ff ffec 	bl	bf586 <_ZN5Print7printlnEv>
  return n;
}
   bf5ae:	4420      	add	r0, r4
   bf5b0:	bd38      	pop	{r3, r4, r5, pc}

000bf5b2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   bf5b2:	f7ff bff4 	b.w	bf59e <_ZN5Print7printlnEPKc>

000bf5b6 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bf5b6:	b530      	push	{r4, r5, lr}
   bf5b8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bf5ba:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bf5bc:	2a01      	cmp	r2, #1
  *str = '\0';
   bf5be:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bf5c2:	bf98      	it	ls
   bf5c4:	220a      	movls	r2, #10
   bf5c6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bf5c8:	460d      	mov	r5, r1
   bf5ca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bf5ce:	fb01 5312 	mls	r3, r1, r2, r5
   bf5d2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bf5d6:	2b09      	cmp	r3, #9
   bf5d8:	bf94      	ite	ls
   bf5da:	3330      	addls	r3, #48	; 0x30
   bf5dc:	3337      	addhi	r3, #55	; 0x37
   bf5de:	b2db      	uxtb	r3, r3
  } while(n);
   bf5e0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bf5e2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bf5e6:	d9ef      	bls.n	bf5c8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bf5e8:	4621      	mov	r1, r4
   bf5ea:	f7f7 fecf 	bl	b738c <_ZN5Print5writeEPKc>
}
   bf5ee:	b00b      	add	sp, #44	; 0x2c
   bf5f0:	bd30      	pop	{r4, r5, pc}

000bf5f2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bf5f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf5f6:	b086      	sub	sp, #24
   bf5f8:	af00      	add	r7, sp, #0
   bf5fa:	4605      	mov	r5, r0
   bf5fc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bf5fe:	1d38      	adds	r0, r7, #4
   bf600:	2114      	movs	r1, #20
{
   bf602:	4614      	mov	r4, r2
    va_copy(args2, args);
   bf604:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bf606:	f7fe fad7 	bl	bdbb8 <vsnprintf>

    if (n<bufsize)
   bf60a:	2813      	cmp	r0, #19
   bf60c:	d80e      	bhi.n	bf62c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bf60e:	1d39      	adds	r1, r7, #4
   bf610:	4628      	mov	r0, r5
   bf612:	f7f7 febb 	bl	b738c <_ZN5Print5writeEPKc>
   bf616:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bf618:	b11e      	cbz	r6, bf622 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bf61a:	4628      	mov	r0, r5
   bf61c:	f7ff ffb3 	bl	bf586 <_ZN5Print7printlnEv>
   bf620:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bf622:	4620      	mov	r0, r4
   bf624:	3718      	adds	r7, #24
   bf626:	46bd      	mov	sp, r7
   bf628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bf62c:	f100 0308 	add.w	r3, r0, #8
   bf630:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bf634:	46e8      	mov	r8, sp
        char bigger[n+1];
   bf636:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bf63a:	4622      	mov	r2, r4
   bf63c:	1c41      	adds	r1, r0, #1
   bf63e:	683b      	ldr	r3, [r7, #0]
   bf640:	4668      	mov	r0, sp
   bf642:	f7fe fab9 	bl	bdbb8 <vsnprintf>
  return write(str);
   bf646:	4669      	mov	r1, sp
   bf648:	4628      	mov	r0, r5
   bf64a:	f7f7 fe9f 	bl	b738c <_ZN5Print5writeEPKc>
   bf64e:	4604      	mov	r4, r0
   bf650:	46c5      	mov	sp, r8
   bf652:	e7e1      	b.n	bf618 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bf654 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bf654:	b510      	push	{r4, lr}
   bf656:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bf658:	f7fd ff16 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bf65c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bf65e:	6823      	ldr	r3, [r4, #0]
   bf660:	4620      	mov	r0, r4
   bf662:	695b      	ldr	r3, [r3, #20]
   bf664:	4798      	blx	r3
    if (c >= 0) return c;
   bf666:	2800      	cmp	r0, #0
   bf668:	da08      	bge.n	bf67c <_ZN6Stream9timedReadEv+0x28>
   bf66a:	f7fd ff0d 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bf66e:	68e3      	ldr	r3, [r4, #12]
   bf670:	1ac0      	subs	r0, r0, r3
   bf672:	68a3      	ldr	r3, [r4, #8]
   bf674:	4298      	cmp	r0, r3
   bf676:	d3f2      	bcc.n	bf65e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bf678:	f04f 30ff 	mov.w	r0, #4294967295
}
   bf67c:	bd10      	pop	{r4, pc}

000bf67e <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   bf67e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf682:	4607      	mov	r7, r0
   bf684:	4688      	mov	r8, r1
   bf686:	4616      	mov	r6, r2
  if (length < 1) return 0;
   bf688:	461d      	mov	r5, r3
   bf68a:	b173      	cbz	r3, bf6aa <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   bf68c:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   bf68e:	4638      	mov	r0, r7
   bf690:	f7ff ffe0 	bl	bf654 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   bf694:	1e03      	subs	r3, r0, #0
   bf696:	db05      	blt.n	bf6a4 <_ZN6Stream14readBytesUntilEcPcj+0x26>
   bf698:	4543      	cmp	r3, r8
   bf69a:	d003      	beq.n	bf6a4 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   bf69c:	5533      	strb	r3, [r6, r4]
    index++;
   bf69e:	3401      	adds	r4, #1
  while (index < length) {
   bf6a0:	42a5      	cmp	r5, r4
   bf6a2:	d1f4      	bne.n	bf68e <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   bf6a4:	4620      	mov	r0, r4
   bf6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   bf6aa:	461c      	mov	r4, r3
   bf6ac:	e7fa      	b.n	bf6a4 <_ZN6Stream14readBytesUntilEcPcj+0x26>
	...

000bf6b0 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bf6b0:	b570      	push	{r4, r5, r6, lr}
   bf6b2:	460d      	mov	r5, r1
  String ret;
   bf6b4:	4909      	ldr	r1, [pc, #36]	; (bf6dc <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bf6b6:	4604      	mov	r4, r0
   bf6b8:	4616      	mov	r6, r2
  String ret;
   bf6ba:	f7fe fcfe 	bl	be0ba <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bf6be:	4628      	mov	r0, r5
   bf6c0:	f7ff ffc8 	bl	bf654 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bf6c4:	2800      	cmp	r0, #0
   bf6c6:	db06      	blt.n	bf6d6 <_ZN6Stream15readStringUntilEc+0x26>
   bf6c8:	4286      	cmp	r6, r0
   bf6ca:	d004      	beq.n	bf6d6 <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   bf6cc:	b2c1      	uxtb	r1, r0
   bf6ce:	4620      	mov	r0, r4
   bf6d0:	f7fe fd72 	bl	be1b8 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bf6d4:	e7f3      	b.n	bf6be <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bf6d6:	4620      	mov	r0, r4
   bf6d8:	bd70      	pop	{r4, r5, r6, pc}
   bf6da:	bf00      	nop
   bf6dc:	000c7628 	.word	0x000c7628

000bf6e0 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bf6e0:	6880      	ldr	r0, [r0, #8]
   bf6e2:	6803      	ldr	r3, [r0, #0]
   bf6e4:	68db      	ldr	r3, [r3, #12]
   bf6e6:	4718      	bx	r3

000bf6e8 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bf6e8:	4770      	bx	lr

000bf6ea <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bf6ea:	4608      	mov	r0, r1
   bf6ec:	b111      	cbz	r1, bf6f4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bf6ee:	680b      	ldr	r3, [r1, #0]
   bf6f0:	685b      	ldr	r3, [r3, #4]
   bf6f2:	4718      	bx	r3
}
   bf6f4:	4770      	bx	lr

000bf6f6 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bf6f6:	4770      	bx	lr

000bf6f8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bf6f8:	4770      	bx	lr

000bf6fa <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bf6fa:	4770      	bx	lr

000bf6fc <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bf6fc:	4770      	bx	lr

000bf6fe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bf6fe:	b538      	push	{r3, r4, r5, lr}
   bf700:	4604      	mov	r4, r0
   bf702:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bf704:	6800      	ldr	r0, [r0, #0]
   bf706:	212e      	movs	r1, #46	; 0x2e
   bf708:	f004 fbb4 	bl	c3e74 <strchrnul>
    size = s - category;
   bf70c:	6823      	ldr	r3, [r4, #0]
   bf70e:	1ac3      	subs	r3, r0, r3
   bf710:	602b      	str	r3, [r5, #0]
    if (size) {
   bf712:	b123      	cbz	r3, bf71e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bf714:	7803      	ldrb	r3, [r0, #0]
   bf716:	b103      	cbz	r3, bf71a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bf718:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   bf71a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf71c:	6020      	str	r0, [r4, #0]
}
   bf71e:	4618      	mov	r0, r3
   bf720:	bd38      	pop	{r3, r4, r5, pc}

000bf722 <_ZN5spark16JSONStreamWriterD0Ev>:
   bf722:	b510      	push	{r4, lr}
   bf724:	210c      	movs	r1, #12
   bf726:	4604      	mov	r4, r0
   bf728:	f7f4 fcbb 	bl	b40a2 <_ZdlPvj>
   bf72c:	4620      	mov	r0, r4
   bf72e:	bd10      	pop	{r4, pc}

000bf730 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bf730:	b510      	push	{r4, lr}
   bf732:	2104      	movs	r1, #4
   bf734:	4604      	mov	r4, r0
   bf736:	f7f4 fcb4 	bl	b40a2 <_ZdlPvj>
   bf73a:	4620      	mov	r0, r4
   bf73c:	bd10      	pop	{r4, pc}

000bf73e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bf73e:	b510      	push	{r4, lr}
   bf740:	2104      	movs	r1, #4
   bf742:	4604      	mov	r4, r0
   bf744:	f7f4 fcad 	bl	b40a2 <_ZdlPvj>
   bf748:	4620      	mov	r0, r4
   bf74a:	bd10      	pop	{r4, pc}

000bf74c <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   bf74c:	f7fd bf76 	b.w	bd63c <os_mutex_recursive_lock>

000bf750 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bf750:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bf752:	f004 fb99 	bl	c3e88 <strcmp>
}
   bf756:	fab0 f080 	clz	r0, r0
   bf75a:	0940      	lsrs	r0, r0, #5
   bf75c:	bd08      	pop	{r3, pc}

000bf75e <__tcf_1>:
   bf75e:	4770      	bx	lr

000bf760 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bf760:	b510      	push	{r4, lr}
   bf762:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bf764:	f001 fc1e 	bl	c0fa4 <_Z16_fetch_usbserialv>
   bf768:	4284      	cmp	r4, r0
   bf76a:	d010      	beq.n	bf78e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bf76c:	f002 f8a6 	bl	c18bc <_Z22__fetch_global_Serial1v>
   bf770:	4284      	cmp	r4, r0
   bf772:	d105      	bne.n	bf780 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bf774:	f002 f8a2 	bl	c18bc <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bf778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bf77c:	f001 bce1 	b.w	c1142 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bf780:	b12c      	cbz	r4, bf78e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bf782:	6823      	ldr	r3, [r4, #0]
   bf784:	4620      	mov	r0, r4
   bf786:	685b      	ldr	r3, [r3, #4]
}
   bf788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf78c:	4718      	bx	r3
   bf78e:	bd10      	pop	{r4, pc}

000bf790 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf790:	680b      	ldr	r3, [r1, #0]
   bf792:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bf794:	684b      	ldr	r3, [r1, #4]
   bf796:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bf798:	b113      	cbz	r3, bf7a0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   bf79a:	685a      	ldr	r2, [r3, #4]
   bf79c:	3201      	adds	r2, #1
   bf79e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf7a0:	4770      	bx	lr

000bf7a2 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bf7a2:	b513      	push	{r0, r1, r4, lr}
   bf7a4:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bf7a6:	4608      	mov	r0, r1
   bf7a8:	9101      	str	r1, [sp, #4]
   bf7aa:	f004 fb9c 	bl	c3ee6 <strlen>
   bf7ae:	9901      	ldr	r1, [sp, #4]
   bf7b0:	4602      	mov	r2, r0
   bf7b2:	4620      	mov	r0, r4
}
   bf7b4:	b002      	add	sp, #8
   bf7b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bf7ba:	f001 bfd5 	b.w	c1768 <_ZN5spark10JSONWriter5valueEPKcj>

000bf7be <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bf7be:	b513      	push	{r0, r1, r4, lr}
   bf7c0:	4604      	mov	r4, r0
    write(str, strlen(str));
   bf7c2:	4608      	mov	r0, r1
   bf7c4:	9101      	str	r1, [sp, #4]
   bf7c6:	f004 fb8e 	bl	c3ee6 <strlen>
   bf7ca:	6823      	ldr	r3, [r4, #0]
   bf7cc:	9901      	ldr	r1, [sp, #4]
   bf7ce:	68db      	ldr	r3, [r3, #12]
   bf7d0:	4602      	mov	r2, r0
   bf7d2:	4620      	mov	r0, r4
}
   bf7d4:	b002      	add	sp, #8
   bf7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bf7da:	4718      	bx	r3

000bf7dc <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bf7dc:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bf7de:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bf7e0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bf7e4:	68db      	ldr	r3, [r3, #12]
   bf7e6:	2201      	movs	r2, #1
   bf7e8:	f10d 0107 	add.w	r1, sp, #7
   bf7ec:	4798      	blx	r3
}
   bf7ee:	b003      	add	sp, #12
   bf7f0:	f85d fb04 	ldr.w	pc, [sp], #4

000bf7f4 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bf7f4:	b40e      	push	{r1, r2, r3}
   bf7f6:	b503      	push	{r0, r1, lr}
   bf7f8:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bf7fa:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bf7fc:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bf800:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bf802:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bf804:	f7ff fef5 	bl	bf5f2 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bf808:	b002      	add	sp, #8
   bf80a:	f85d eb04 	ldr.w	lr, [sp], #4
   bf80e:	b003      	add	sp, #12
   bf810:	4770      	bx	lr

000bf812 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bf812:	680a      	ldr	r2, [r1, #0]
   bf814:	6002      	str	r2, [r0, #0]
   bf816:	684a      	ldr	r2, [r1, #4]
   bf818:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bf81a:	2200      	movs	r2, #0
   bf81c:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bf820:	b510      	push	{r4, lr}
   bf822:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bf824:	688c      	ldr	r4, [r1, #8]
   bf826:	6084      	str	r4, [r0, #8]
   bf828:	68cc      	ldr	r4, [r1, #12]
   bf82a:	60c4      	str	r4, [r0, #12]
   bf82c:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bf82e:	608a      	str	r2, [r1, #8]
   bf830:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bf832:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bf834:	610a      	str	r2, [r1, #16]
   bf836:	bd10      	pop	{r4, pc}

000bf838 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bf838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bf83c:	e9d0 8400 	ldrd	r8, r4, [r0]
   bf840:	f04f 0a14 	mov.w	sl, #20
   bf844:	9300      	str	r3, [sp, #0]
   bf846:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bf84a:	4b18      	ldr	r3, [pc, #96]	; (bf8ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bf84c:	10a4      	asrs	r4, r4, #2
   bf84e:	4617      	mov	r7, r2
   bf850:	435c      	muls	r4, r3
   bf852:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bf854:	2c00      	cmp	r4, #0
   bf856:	dd21      	ble.n	bf89c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bf858:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bf85a:	fb0a f006 	mul.w	r0, sl, r6
   bf85e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bf862:	463a      	mov	r2, r7
   bf864:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bf868:	5828      	ldr	r0, [r5, r0]
   bf86a:	9101      	str	r1, [sp, #4]
   bf86c:	455f      	cmp	r7, fp
   bf86e:	bf28      	it	cs
   bf870:	465a      	movcs	r2, fp
   bf872:	f004 fb53 	bl	c3f1c <strncmp>
                if (cmp == 0) {
   bf876:	2800      	cmp	r0, #0
   bf878:	9901      	ldr	r1, [sp, #4]
   bf87a:	f04f 0301 	mov.w	r3, #1
   bf87e:	d10b      	bne.n	bf898 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bf880:	455f      	cmp	r7, fp
   bf882:	d103      	bne.n	bf88c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bf884:	9a00      	ldr	r2, [sp, #0]
   bf886:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bf888:	4634      	mov	r4, r6
   bf88a:	e7e3      	b.n	bf854 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bf88c:	d9fc      	bls.n	bf888 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bf88e:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bf890:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bf894:	3e01      	subs	r6, #1
   bf896:	e7f7      	b.n	bf888 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bf898:	dbf9      	blt.n	bf88e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bf89a:	e7f5      	b.n	bf888 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bf89c:	eba5 0508 	sub.w	r5, r5, r8
}
   bf8a0:	4802      	ldr	r0, [pc, #8]	; (bf8ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bf8a2:	10ad      	asrs	r5, r5, #2
   bf8a4:	4368      	muls	r0, r5
   bf8a6:	b003      	add	sp, #12
   bf8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf8ac:	cccccccd 	.word	0xcccccccd

000bf8b0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bf8b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bf8b2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bf8b4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bf8b6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bf8b8:	b303      	cbz	r3, bf8fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bf8ba:	b1f9      	cbz	r1, bf8fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bf8bc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bf8be:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bf8c2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bf8c4:	a903      	add	r1, sp, #12
   bf8c6:	a801      	add	r0, sp, #4
   bf8c8:	f7ff ff19 	bl	bf6fe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bf8cc:	4601      	mov	r1, r0
   bf8ce:	b1a8      	cbz	r0, bf8fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bf8d0:	f10d 030b 	add.w	r3, sp, #11
   bf8d4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bf8d6:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bf8da:	4620      	mov	r0, r4
   bf8dc:	f7ff ffac 	bl	bf838 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bf8e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bf8e4:	b153      	cbz	r3, bf8fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bf8e6:	6823      	ldr	r3, [r4, #0]
   bf8e8:	2414      	movs	r4, #20
   bf8ea:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bf8ee:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bf8f0:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bf8f4:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bf8f6:	bfa8      	it	ge
   bf8f8:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bf8fa:	e7e3      	b.n	bf8c4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bf8fc:	4628      	mov	r0, r5
   bf8fe:	b004      	add	sp, #16
   bf900:	bd70      	pop	{r4, r5, r6, pc}
	...

000bf904 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bf904:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bf906:	4c09      	ldr	r4, [pc, #36]	; (bf92c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bf908:	7823      	ldrb	r3, [r4, #0]
   bf90a:	f3bf 8f5b 	dmb	ish
   bf90e:	07db      	lsls	r3, r3, #31
   bf910:	d409      	bmi.n	bf926 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bf912:	4620      	mov	r0, r4
   bf914:	f7f4 fbd4 	bl	b40c0 <__cxa_guard_acquire>
   bf918:	b128      	cbz	r0, bf926 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bf91a:	4620      	mov	r0, r4
   bf91c:	f7f4 fbd5 	bl	b40ca <__cxa_guard_release>
   bf920:	4803      	ldr	r0, [pc, #12]	; (bf930 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bf922:	f004 fa07 	bl	c3d34 <atexit>
}
   bf926:	4803      	ldr	r0, [pc, #12]	; (bf934 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bf928:	bd10      	pop	{r4, pc}
   bf92a:	bf00      	nop
   bf92c:	2003e648 	.word	0x2003e648
   bf930:	000bf6f7 	.word	0x000bf6f7
   bf934:	2003db80 	.word	0x2003db80

000bf938 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bf938:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bf93a:	4c09      	ldr	r4, [pc, #36]	; (bf960 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bf93c:	7823      	ldrb	r3, [r4, #0]
   bf93e:	f3bf 8f5b 	dmb	ish
   bf942:	07db      	lsls	r3, r3, #31
   bf944:	d409      	bmi.n	bf95a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bf946:	4620      	mov	r0, r4
   bf948:	f7f4 fbba 	bl	b40c0 <__cxa_guard_acquire>
   bf94c:	b128      	cbz	r0, bf95a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bf94e:	4620      	mov	r0, r4
   bf950:	f7f4 fbbb 	bl	b40ca <__cxa_guard_release>
   bf954:	4803      	ldr	r0, [pc, #12]	; (bf964 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bf956:	f004 f9ed 	bl	c3d34 <atexit>
    return &factory;
}
   bf95a:	4803      	ldr	r0, [pc, #12]	; (bf968 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bf95c:	bd10      	pop	{r4, pc}
   bf95e:	bf00      	nop
   bf960:	2003e64c 	.word	0x2003e64c
   bf964:	000bf75f 	.word	0x000bf75f
   bf968:	2003db84 	.word	0x2003db84

000bf96c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bf96c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bf96e:	2500      	movs	r5, #0
   bf970:	4604      	mov	r4, r0
   bf972:	e9c0 5500 	strd	r5, r5, [r0]
   bf976:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bf97a:	6085      	str	r5, [r0, #8]
   bf97c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bf97e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bf982:	f7fd fe4b 	bl	bd61c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bf986:	f7ff ffbd 	bl	bf904 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bf98a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bf98c:	f7ff ffd4 	bl	bf938 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bf990:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bf992:	6220      	str	r0, [r4, #32]
}
   bf994:	4620      	mov	r0, r4
   bf996:	bd38      	pop	{r3, r4, r5, pc}

000bf998 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bf998:	b510      	push	{r4, lr}
    static LogManager mgr;
   bf99a:	4c0a      	ldr	r4, [pc, #40]	; (bf9c4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bf99c:	7823      	ldrb	r3, [r4, #0]
   bf99e:	f3bf 8f5b 	dmb	ish
   bf9a2:	07db      	lsls	r3, r3, #31
   bf9a4:	d40c      	bmi.n	bf9c0 <_ZN5spark10LogManager8instanceEv+0x28>
   bf9a6:	4620      	mov	r0, r4
   bf9a8:	f7f4 fb8a 	bl	b40c0 <__cxa_guard_acquire>
   bf9ac:	b140      	cbz	r0, bf9c0 <_ZN5spark10LogManager8instanceEv+0x28>
   bf9ae:	4806      	ldr	r0, [pc, #24]	; (bf9c8 <_ZN5spark10LogManager8instanceEv+0x30>)
   bf9b0:	f7ff ffdc 	bl	bf96c <_ZN5spark10LogManagerC1Ev>
   bf9b4:	4620      	mov	r0, r4
   bf9b6:	f7f4 fb88 	bl	b40ca <__cxa_guard_release>
   bf9ba:	4804      	ldr	r0, [pc, #16]	; (bf9cc <_ZN5spark10LogManager8instanceEv+0x34>)
   bf9bc:	f004 f9ba 	bl	c3d34 <atexit>
    return &mgr;
}
   bf9c0:	4801      	ldr	r0, [pc, #4]	; (bf9c8 <_ZN5spark10LogManager8instanceEv+0x30>)
   bf9c2:	bd10      	pop	{r4, pc}
   bf9c4:	2003e644 	.word	0x2003e644
   bf9c8:	2003e654 	.word	0x2003e654
   bf9cc:	000bfeed 	.word	0x000bfeed

000bf9d0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bf9d0:	4a02      	ldr	r2, [pc, #8]	; (bf9dc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bf9d2:	4903      	ldr	r1, [pc, #12]	; (bf9e0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bf9d4:	4803      	ldr	r0, [pc, #12]	; (bf9e4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bf9d6:	2300      	movs	r3, #0
   bf9d8:	f7fd bfd0 	b.w	bd97c <log_set_callbacks>
   bf9dc:	000bfcd1 	.word	0x000bfcd1
   bf9e0:	000bfc5d 	.word	0x000bfc5d
   bf9e4:	000bfbdd 	.word	0x000bfbdd

000bf9e8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bf9e8:	2300      	movs	r3, #0
   bf9ea:	461a      	mov	r2, r3
   bf9ec:	4619      	mov	r1, r3
   bf9ee:	4618      	mov	r0, r3
   bf9f0:	f7fd bfc4 	b.w	bd97c <log_set_callbacks>

000bf9f4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bf9f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   bf9f6:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bf9f8:	4604      	mov	r4, r0
   bf9fa:	4668      	mov	r0, sp
   bf9fc:	f7ff fec8 	bl	bf790 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   bfa00:	466a      	mov	r2, sp
   bfa02:	4629      	mov	r1, r5
   bfa04:	4620      	mov	r0, r4
   bfa06:	f001 fdcf 	bl	c15a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   bfa0a:	a801      	add	r0, sp, #4
   bfa0c:	f7f5 ffbe 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfa10:	4620      	mov	r0, r4
   bfa12:	b003      	add	sp, #12
   bfa14:	bd30      	pop	{r4, r5, pc}

000bfa16 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bfa16:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   bfa18:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bfa1a:	4604      	mov	r4, r0
   bfa1c:	4668      	mov	r0, sp
   bfa1e:	f7ff feb7 	bl	bf790 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   bfa22:	466a      	mov	r2, sp
   bfa24:	4629      	mov	r1, r5
   bfa26:	4620      	mov	r0, r4
   bfa28:	f001 fd9a 	bl	c1560 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bfa2c:	a801      	add	r0, sp, #4
   bfa2e:	f7f5 ffad 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfa32:	4620      	mov	r0, r4
   bfa34:	b003      	add	sp, #12
   bfa36:	bd30      	pop	{r4, r5, pc}

000bfa38 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bfa38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   bfa3a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bfa3c:	4604      	mov	r4, r0
   bfa3e:	4668      	mov	r0, sp
   bfa40:	f7ff fea6 	bl	bf790 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   bfa44:	466a      	mov	r2, sp
   bfa46:	4629      	mov	r1, r5
   bfa48:	4620      	mov	r0, r4
   bfa4a:	f001 fd32 	bl	c14b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bfa4e:	a801      	add	r0, sp, #4
   bfa50:	f7f5 ff9c 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfa54:	4620      	mov	r0, r4
   bfa56:	b003      	add	sp, #12
   bfa58:	bd30      	pop	{r4, r5, pc}
	...

000bfa5c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bfa5c:	b570      	push	{r4, r5, r6, lr}
   bfa5e:	b08a      	sub	sp, #40	; 0x28
   bfa60:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bfa62:	4601      	mov	r1, r0
   bfa64:	a804      	add	r0, sp, #16
   bfa66:	f7ff ffc5 	bl	bf9f4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bfa6a:	4e14      	ldr	r6, [pc, #80]	; (bfabc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bfa6c:	a804      	add	r0, sp, #16
   bfa6e:	f001 fdb3 	bl	c15d8 <_ZN5spark18JSONObjectIterator4nextEv>
   bfa72:	b1e8      	cbz	r0, bfab0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bfa74:	a904      	add	r1, sp, #16
   bfa76:	4668      	mov	r0, sp
   bfa78:	f7ff ffcd 	bl	bfa16 <_ZNK5spark18JSONObjectIterator4nameEv>
   bfa7c:	9802      	ldr	r0, [sp, #8]
   bfa7e:	4631      	mov	r1, r6
   bfa80:	f7ff fe66 	bl	bf750 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bfa84:	4604      	mov	r4, r0
   bfa86:	b110      	cbz	r0, bfa8e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bfa88:	1e2c      	subs	r4, r5, #0
   bfa8a:	bf18      	it	ne
   bfa8c:	2401      	movne	r4, #1
   bfa8e:	a801      	add	r0, sp, #4
   bfa90:	f7f5 ff7c 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfa94:	2c00      	cmp	r4, #0
   bfa96:	d0e9      	beq.n	bfa6c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bfa98:	a904      	add	r1, sp, #16
   bfa9a:	4668      	mov	r0, sp
   bfa9c:	f7ff ffcc 	bl	bfa38 <_ZNK5spark18JSONObjectIterator5valueEv>
   bfaa0:	4668      	mov	r0, sp
   bfaa2:	f001 fd3c 	bl	c151e <_ZNK5spark9JSONValue5toIntEv>
   bfaa6:	6028      	str	r0, [r5, #0]
   bfaa8:	a801      	add	r0, sp, #4
   bfaaa:	f7f5 ff6f 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfaae:	e7dd      	b.n	bfa6c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bfab0:	a805      	add	r0, sp, #20
   bfab2:	f7f5 ff6b 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfab6:	b00a      	add	sp, #40	; 0x28
   bfab8:	bd70      	pop	{r4, r5, r6, pc}
   bfaba:	bf00      	nop
   bfabc:	000c75ce 	.word	0x000c75ce

000bfac0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bfac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bfac2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bfac4:	4620      	mov	r0, r4
   bfac6:	4913      	ldr	r1, [pc, #76]	; (bfb14 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bfac8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bfaca:	f004 f9dd 	bl	c3e88 <strcmp>
   bface:	b950      	cbnz	r0, bfae6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bfad0:	f001 fa68 	bl	c0fa4 <_Z16_fetch_usbserialv>
   bfad4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bfad8:	f001 fa54 	bl	c0f84 <_ZN9USBSerial5beginEl>
}
   bfadc:	b003      	add	sp, #12
   bfade:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bfae2:	f001 ba5f 	b.w	c0fa4 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bfae6:	490c      	ldr	r1, [pc, #48]	; (bfb18 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bfae8:	4620      	mov	r0, r4
   bfaea:	f004 f9cd 	bl	c3e88 <strcmp>
   bfaee:	b978      	cbnz	r0, bfb10 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bfaf0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bfaf4:	a901      	add	r1, sp, #4
   bfaf6:	4628      	mov	r0, r5
        int baud = 9600;
   bfaf8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bfafa:	f7ff ffaf 	bl	bfa5c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bfafe:	f001 fedd 	bl	c18bc <_Z22__fetch_global_Serial1v>
   bfb02:	9901      	ldr	r1, [sp, #4]
   bfb04:	f001 fb1a 	bl	c113c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bfb08:	f001 fed8 	bl	c18bc <_Z22__fetch_global_Serial1v>
}
   bfb0c:	b003      	add	sp, #12
   bfb0e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bfb10:	2000      	movs	r0, #0
   bfb12:	e7fb      	b.n	bfb0c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bfb14:	000c75d3 	.word	0x000c75d3
   bfb18:	000c75da 	.word	0x000c75da

000bfb1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bfb1c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bfb1e:	e9d0 5300 	ldrd	r5, r3, [r0]
   bfb22:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bfb24:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bfb26:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bfb2a:	42ae      	cmp	r6, r5
   bfb2c:	d005      	beq.n	bfb3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bfb2e:	f105 0008 	add.w	r0, r5, #8
   bfb32:	f7ff fff3 	bl	bfb1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bfb36:	3514      	adds	r5, #20
   bfb38:	e7f7      	b.n	bfb2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bfb3a:	6820      	ldr	r0, [r4, #0]
   bfb3c:	f7fe f814 	bl	bdb68 <free>
}
   bfb40:	4620      	mov	r0, r4
   bfb42:	bd70      	pop	{r4, r5, r6, pc}

000bfb44 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bfb44:	b510      	push	{r4, lr}
   bfb46:	4604      	mov	r4, r0
   bfb48:	300c      	adds	r0, #12
   bfb4a:	f7ff ffe7 	bl	bfb1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bfb4e:	4620      	mov	r0, r4
   bfb50:	f7fe fefb 	bl	be94a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bfb54:	4620      	mov	r0, r4
   bfb56:	bd10      	pop	{r4, pc}

000bfb58 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bfb58:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bfb5a:	4b04      	ldr	r3, [pc, #16]	; (bfb6c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bfb5c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bfb5e:	f840 3b04 	str.w	r3, [r0], #4
   bfb62:	f7ff ffef 	bl	bfb44 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bfb66:	4620      	mov	r0, r4
   bfb68:	bd10      	pop	{r4, pc}
   bfb6a:	bf00      	nop
   bfb6c:	000c6520 	.word	0x000c6520

000bfb70 <_ZN5spark16StreamLogHandlerD0Ev>:
   bfb70:	b510      	push	{r4, lr}
   bfb72:	4604      	mov	r4, r0
   bfb74:	f7ff fff0 	bl	bfb58 <_ZN5spark16StreamLogHandlerD1Ev>
   bfb78:	4620      	mov	r0, r4
   bfb7a:	2124      	movs	r1, #36	; 0x24
   bfb7c:	f7f4 fa91 	bl	b40a2 <_ZdlPvj>
   bfb80:	4620      	mov	r0, r4
   bfb82:	bd10      	pop	{r4, pc}

000bfb84 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bfb84:	b510      	push	{r4, lr}
   bfb86:	4b03      	ldr	r3, [pc, #12]	; (bfb94 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bfb88:	6003      	str	r3, [r0, #0]
   bfb8a:	4604      	mov	r4, r0
   bfb8c:	f7ff ffe4 	bl	bfb58 <_ZN5spark16StreamLogHandlerD1Ev>
   bfb90:	4620      	mov	r0, r4
   bfb92:	bd10      	pop	{r4, pc}
   bfb94:	000c7678 	.word	0x000c7678

000bfb98 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bfb98:	b510      	push	{r4, lr}
   bfb9a:	4604      	mov	r4, r0
   bfb9c:	f7ff fff2 	bl	bfb84 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bfba0:	4620      	mov	r0, r4
   bfba2:	2124      	movs	r1, #36	; 0x24
   bfba4:	f7f4 fa7d 	bl	b40a2 <_ZdlPvj>
   bfba8:	4620      	mov	r0, r4
   bfbaa:	bd10      	pop	{r4, pc}

000bfbac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bfbac:	2200      	movs	r2, #0
   bfbae:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bfbb2:	b510      	push	{r4, lr}
        capacity_(0) {
   bfbb4:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bfbb6:	680c      	ldr	r4, [r1, #0]
   bfbb8:	6004      	str	r4, [r0, #0]
   bfbba:	684c      	ldr	r4, [r1, #4]
   bfbbc:	6044      	str	r4, [r0, #4]
   bfbbe:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfbc0:	600a      	str	r2, [r1, #0]
   bfbc2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bfbc4:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfbc6:	608a      	str	r2, [r1, #8]
}
   bfbc8:	bd10      	pop	{r4, pc}

000bfbca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   bfbca:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bfbcc:	6803      	ldr	r3, [r0, #0]
   bfbce:	4604      	mov	r4, r0
   bfbd0:	6818      	ldr	r0, [r3, #0]
   bfbd2:	f7fd fd3b 	bl	bd64c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bfbd6:	4620      	mov	r0, r4
   bfbd8:	bd10      	pop	{r4, pc}
	...

000bfbdc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bfbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfbe0:	b087      	sub	sp, #28
   bfbe2:	4680      	mov	r8, r0
   bfbe4:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bfbe6:	4b1c      	ldr	r3, [pc, #112]	; (bfc58 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bfbe8:	685b      	ldr	r3, [r3, #4]
   bfbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfbee:	4689      	mov	r9, r1
   bfbf0:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bfbf2:	b96b      	cbnz	r3, bfc10 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bfbf4:	f7ff fed0 	bl	bf998 <_ZN5spark10LogManager8instanceEv>
   bfbf8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bfbfa:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bfbfe:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfc00:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bfc02:	f7ff fda3 	bl	bf74c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bfc06:	7b23      	ldrb	r3, [r4, #12]
   bfc08:	b12b      	cbz	r3, bfc16 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bfc0a:	a805      	add	r0, sp, #20
   bfc0c:	f7ff ffdd 	bl	bfbca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bfc10:	b007      	add	sp, #28
   bfc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bfc16:	2301      	movs	r3, #1
   bfc18:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bfc1a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bfc1e:	fa5f f989 	uxtb.w	r9, r9
   bfc22:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfc26:	45aa      	cmp	sl, r5
   bfc28:	d012      	beq.n	bfc50 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bfc2a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bfc2e:	4631      	mov	r1, r6
   bfc30:	1d38      	adds	r0, r7, #4
   bfc32:	f7ff fe3d 	bl	bf8b0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bfc36:	4581      	cmp	r9, r0
   bfc38:	d3f5      	bcc.n	bfc26 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bfc3a:	683b      	ldr	r3, [r7, #0]
   bfc3c:	9a03      	ldr	r2, [sp, #12]
   bfc3e:	9200      	str	r2, [sp, #0]
   bfc40:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bfc44:	464a      	mov	r2, r9
   bfc46:	4633      	mov	r3, r6
   bfc48:	4641      	mov	r1, r8
   bfc4a:	4638      	mov	r0, r7
   bfc4c:	47d8      	blx	fp
   bfc4e:	e7ea      	b.n	bfc26 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bfc50:	2300      	movs	r3, #0
   bfc52:	7323      	strb	r3, [r4, #12]
   bfc54:	e7d9      	b.n	bfc0a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bfc56:	bf00      	nop
   bfc58:	e000ed00 	.word	0xe000ed00

000bfc5c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bfc5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfc60:	469b      	mov	fp, r3
   bfc62:	4b1a      	ldr	r3, [pc, #104]	; (bfccc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bfc64:	685b      	ldr	r3, [r3, #4]
   bfc66:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfc6a:	4680      	mov	r8, r0
   bfc6c:	4689      	mov	r9, r1
   bfc6e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bfc70:	b96b      	cbnz	r3, bfc8e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bfc72:	f7ff fe91 	bl	bf998 <_ZN5spark10LogManager8instanceEv>
   bfc76:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bfc78:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bfc7c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfc7e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfc80:	f7ff fd64 	bl	bf74c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bfc84:	7b23      	ldrb	r3, [r4, #12]
   bfc86:	b12b      	cbz	r3, bfc94 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bfc88:	a801      	add	r0, sp, #4
   bfc8a:	f7ff ff9e 	bl	bfbca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bfc8e:	b003      	add	sp, #12
   bfc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bfc94:	2301      	movs	r3, #1
   bfc96:	7323      	strb	r3, [r4, #12]
   bfc98:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bfc9c:	b2f6      	uxtb	r6, r6
   bfc9e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfca2:	4555      	cmp	r5, sl
   bfca4:	d00e      	beq.n	bfcc4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bfca6:	f855 7b04 	ldr.w	r7, [r5], #4
   bfcaa:	4659      	mov	r1, fp
   bfcac:	1d38      	adds	r0, r7, #4
   bfcae:	f7ff fdff 	bl	bf8b0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bfcb2:	4286      	cmp	r6, r0
   bfcb4:	d3f5      	bcc.n	bfca2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bfcb6:	683b      	ldr	r3, [r7, #0]
   bfcb8:	464a      	mov	r2, r9
   bfcba:	68db      	ldr	r3, [r3, #12]
   bfcbc:	4641      	mov	r1, r8
   bfcbe:	4638      	mov	r0, r7
   bfcc0:	4798      	blx	r3
   bfcc2:	e7ee      	b.n	bfca2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bfcc4:	2300      	movs	r3, #0
   bfcc6:	7323      	strb	r3, [r4, #12]
   bfcc8:	e7de      	b.n	bfc88 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bfcca:	bf00      	nop
   bfccc:	e000ed00 	.word	0xe000ed00

000bfcd0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bfcd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bfcd4:	4b16      	ldr	r3, [pc, #88]	; (bfd30 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bfcd6:	685b      	ldr	r3, [r3, #4]
   bfcd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfcdc:	4605      	mov	r5, r0
   bfcde:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bfce0:	bb1b      	cbnz	r3, bfd2a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bfce2:	f7ff fe59 	bl	bf998 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bfce6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bfcea:	4604      	mov	r4, r0
   bfcec:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfcee:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfcf0:	f7ff fd2c 	bl	bf74c <_ZN14RecursiveMutex4lockEv.isra.0>
   bfcf4:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bfcf8:	2446      	movs	r4, #70	; 0x46
   bfcfa:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfcfe:	45b0      	cmp	r8, r6
   bfd00:	d109      	bne.n	bfd16 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bfd02:	a801      	add	r0, sp, #4
   bfd04:	f7ff ff61 	bl	bfbca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bfd08:	42a5      	cmp	r5, r4
   bfd0a:	bfb4      	ite	lt
   bfd0c:	2000      	movlt	r0, #0
   bfd0e:	2001      	movge	r0, #1
}
   bfd10:	b002      	add	sp, #8
   bfd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bfd16:	f856 0b04 	ldr.w	r0, [r6], #4
   bfd1a:	4639      	mov	r1, r7
   bfd1c:	3004      	adds	r0, #4
   bfd1e:	f7ff fdc7 	bl	bf8b0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bfd22:	4284      	cmp	r4, r0
   bfd24:	bfa8      	it	ge
   bfd26:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bfd28:	e7e9      	b.n	bfcfe <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bfd2a:	2000      	movs	r0, #0
   bfd2c:	e7f0      	b.n	bfd10 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bfd2e:	bf00      	nop
   bfd30:	e000ed00 	.word	0xe000ed00

000bfd34 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bfd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bfd36:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bfd3a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bfd3c:	4604      	mov	r4, r0
   bfd3e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bfd40:	db0d      	blt.n	bfd5e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bfd42:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bfd44:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bfd46:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bfd48:	dd04      	ble.n	bfd54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bfd4a:	00b9      	lsls	r1, r7, #2
   bfd4c:	f7fd ff14 	bl	bdb78 <realloc>
            if (!d) {
   bfd50:	b918      	cbnz	r0, bfd5a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bfd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bfd54:	f7fd ff08 	bl	bdb68 <free>
        T* d = nullptr;
   bfd58:	2000      	movs	r0, #0
        data_ = d;
   bfd5a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bfd5c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bfd5e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bfd60:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bfd62:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bfd66:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bfd68:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bfd6c:	1d08      	adds	r0, r1, #4
   bfd6e:	f004 f815 	bl	c3d9c <memmove>
    new(p) T(std::move(value));
   bfd72:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bfd76:	6863      	ldr	r3, [r4, #4]
   bfd78:	3301      	adds	r3, #1
   bfd7a:	6063      	str	r3, [r4, #4]
    return true;
   bfd7c:	2001      	movs	r0, #1
   bfd7e:	e7e8      	b.n	bfd52 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bfd80 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bfd80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bfd82:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bfd86:	4604      	mov	r4, r0
   bfd88:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfd8a:	9301      	str	r3, [sp, #4]
   bfd8c:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bfd8e:	f7ff fcdd 	bl	bf74c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bfd92:	e9d4 3200 	ldrd	r3, r2, [r4]
   bfd96:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bfd9a:	4293      	cmp	r3, r2
   bfd9c:	4619      	mov	r1, r3
   bfd9e:	d00b      	beq.n	bfdb8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bfda0:	6809      	ldr	r1, [r1, #0]
   bfda2:	42a9      	cmp	r1, r5
   bfda4:	f103 0304 	add.w	r3, r3, #4
   bfda8:	d1f7      	bne.n	bfd9a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bfdaa:	a801      	add	r0, sp, #4
   bfdac:	f7ff ff0d 	bl	bfbca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bfdb0:	2500      	movs	r5, #0
}
   bfdb2:	4628      	mov	r0, r5
   bfdb4:	b003      	add	sp, #12
   bfdb6:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bfdb8:	4629      	mov	r1, r5
   bfdba:	4620      	mov	r0, r4
   bfdbc:	f7ff ffba 	bl	bfd34 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bfdc0:	4605      	mov	r5, r0
   bfdc2:	2800      	cmp	r0, #0
   bfdc4:	d0f1      	beq.n	bfdaa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bfdc6:	6863      	ldr	r3, [r4, #4]
   bfdc8:	2b01      	cmp	r3, #1
   bfdca:	d101      	bne.n	bfdd0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bfdcc:	f7ff fe00 	bl	bf9d0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bfdd0:	a801      	add	r0, sp, #4
   bfdd2:	f7ff fefa 	bl	bfbca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bfdd6:	e7ec      	b.n	bfdb2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bfdd8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bfdd8:	b570      	push	{r4, r5, r6, lr}
   bfdda:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bfddc:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bfde0:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bfde2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bfde6:	4282      	cmp	r2, r0
   bfde8:	d00f      	beq.n	bfe0a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bfdea:	4601      	mov	r1, r0
            if (*p == value) {
   bfdec:	681d      	ldr	r5, [r3, #0]
   bfdee:	f851 6b04 	ldr.w	r6, [r1], #4
   bfdf2:	42ae      	cmp	r6, r5
   bfdf4:	d107      	bne.n	bfe06 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bfdf6:	1a52      	subs	r2, r2, r1
   bfdf8:	f003 ffd0 	bl	c3d9c <memmove>
    --size_;
   bfdfc:	6863      	ldr	r3, [r4, #4]
   bfdfe:	3b01      	subs	r3, #1
   bfe00:	6063      	str	r3, [r4, #4]
    return true;
   bfe02:	2001      	movs	r0, #1
}
   bfe04:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bfe06:	4608      	mov	r0, r1
   bfe08:	e7ed      	b.n	bfde6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bfe0a:	2000      	movs	r0, #0
   bfe0c:	e7fa      	b.n	bfe04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bfe0e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bfe0e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bfe10:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bfe14:	4604      	mov	r4, r0
   bfe16:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bfe18:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfe1a:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bfe1c:	f7ff fc96 	bl	bf74c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bfe20:	a901      	add	r1, sp, #4
   bfe22:	4620      	mov	r0, r4
   bfe24:	f7ff ffd8 	bl	bfdd8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bfe28:	b118      	cbz	r0, bfe32 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bfe2a:	6863      	ldr	r3, [r4, #4]
   bfe2c:	b90b      	cbnz	r3, bfe32 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bfe2e:	f7ff fddb 	bl	bf9e8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bfe32:	a803      	add	r0, sp, #12
   bfe34:	f7ff fec9 	bl	bfbca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bfe38:	b004      	add	sp, #16
   bfe3a:	bd10      	pop	{r4, pc}

000bfe3c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bfe3c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bfe3e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bfe42:	2318      	movs	r3, #24
   bfe44:	4604      	mov	r4, r0
   bfe46:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bfe4a:	42ae      	cmp	r6, r5
   bfe4c:	d015      	beq.n	bfe7a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bfe4e:	f105 0110 	add.w	r1, r5, #16
   bfe52:	4620      	mov	r0, r4
   bfe54:	f7ff ffc0 	bl	bfdd8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bfe58:	6863      	ldr	r3, [r4, #4]
   bfe5a:	b90b      	cbnz	r3, bfe60 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bfe5c:	f7ff fdc4 	bl	bf9e8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bfe60:	69e0      	ldr	r0, [r4, #28]
   bfe62:	6929      	ldr	r1, [r5, #16]
   bfe64:	6803      	ldr	r3, [r0, #0]
   bfe66:	68db      	ldr	r3, [r3, #12]
   bfe68:	4798      	blx	r3
        if (h.stream) {
   bfe6a:	6969      	ldr	r1, [r5, #20]
   bfe6c:	b119      	cbz	r1, bfe76 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bfe6e:	6a20      	ldr	r0, [r4, #32]
   bfe70:	6803      	ldr	r3, [r0, #0]
   bfe72:	68db      	ldr	r3, [r3, #12]
   bfe74:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bfe76:	3518      	adds	r5, #24
   bfe78:	e7e7      	b.n	bfe4a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bfe7a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bfe7e:	2618      	movs	r6, #24
   bfe80:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bfe84:	42ae      	cmp	r6, r5
   bfe86:	d004      	beq.n	bfe92 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bfe88:	4628      	mov	r0, r5
   bfe8a:	f7fe f8cb 	bl	be024 <_ZN6StringD1Ev>
   bfe8e:	3518      	adds	r5, #24
   bfe90:	e7f8      	b.n	bfe84 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bfe92:	2300      	movs	r3, #0
   bfe94:	6163      	str	r3, [r4, #20]
}
   bfe96:	bd70      	pop	{r4, r5, r6, pc}

000bfe98 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bfe98:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bfe9a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bfe9c:	f7ff fda4 	bl	bf9e8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bfea0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bfea4:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfea6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfea8:	f7ff fc50 	bl	bf74c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bfeac:	4620      	mov	r0, r4
   bfeae:	f7ff ffc5 	bl	bfe3c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bfeb2:	a801      	add	r0, sp, #4
   bfeb4:	f7ff fe89 	bl	bfbca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bfeb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bfeba:	b108      	cbz	r0, bfec0 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bfebc:	f7fd fbb6 	bl	bd62c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bfec0:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bfec4:	2618      	movs	r6, #24
   bfec6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bfeca:	42ae      	cmp	r6, r5
   bfecc:	d004      	beq.n	bfed8 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bfece:	4628      	mov	r0, r5
   bfed0:	f7fe f8a8 	bl	be024 <_ZN6StringD1Ev>
   bfed4:	3518      	adds	r5, #24
   bfed6:	e7f8      	b.n	bfeca <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bfed8:	6920      	ldr	r0, [r4, #16]
   bfeda:	f7fd fe45 	bl	bdb68 <free>
   bfede:	6820      	ldr	r0, [r4, #0]
   bfee0:	f7fd fe42 	bl	bdb68 <free>
}
   bfee4:	4620      	mov	r0, r4
   bfee6:	b002      	add	sp, #8
   bfee8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bfeec <__tcf_2>:
    static LogManager mgr;
   bfeec:	4801      	ldr	r0, [pc, #4]	; (bfef4 <__tcf_2+0x8>)
   bfeee:	f7ff bfd3 	b.w	bfe98 <_ZN5spark10LogManagerD1Ev>
   bfef2:	bf00      	nop
   bfef4:	2003e654 	.word	0x2003e654

000bfef8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bfef8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bfefa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfefc:	4604      	mov	r4, r0
   bfefe:	460d      	mov	r5, r1
   bff00:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bff02:	d915      	bls.n	bff30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bff04:	4290      	cmp	r0, r2
   bff06:	d214      	bcs.n	bff32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bff08:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bff0c:	1a75      	subs	r5, r6, r1
   bff0e:	f1a1 0714 	sub.w	r7, r1, #20
   bff12:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bff14:	42b7      	cmp	r7, r6
   bff16:	d01a      	beq.n	bff4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bff18:	b11c      	cbz	r4, bff22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bff1a:	4631      	mov	r1, r6
   bff1c:	4620      	mov	r0, r4
   bff1e:	f7ff fc78 	bl	bf812 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bff22:	f106 0008 	add.w	r0, r6, #8
   bff26:	f7ff fdf9 	bl	bfb1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bff2a:	3e14      	subs	r6, #20
   bff2c:	3c14      	subs	r4, #20
   bff2e:	e7f1      	b.n	bff14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bff30:	d00d      	beq.n	bff4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bff32:	42b5      	cmp	r5, r6
   bff34:	d00b      	beq.n	bff4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bff36:	b11c      	cbz	r4, bff40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bff38:	4629      	mov	r1, r5
   bff3a:	4620      	mov	r0, r4
   bff3c:	f7ff fc69 	bl	bf812 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bff40:	f105 0008 	add.w	r0, r5, #8
   bff44:	f7ff fdea 	bl	bfb1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bff48:	3514      	adds	r5, #20
   bff4a:	3414      	adds	r4, #20
   bff4c:	e7f1      	b.n	bff32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bff4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bff50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bff50:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bff52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bff54:	4604      	mov	r4, r0
   bff56:	460d      	mov	r5, r1
   bff58:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bff5a:	d914      	bls.n	bff86 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bff5c:	4290      	cmp	r0, r2
   bff5e:	d213      	bcs.n	bff88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bff60:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bff64:	1a75      	subs	r5, r6, r1
   bff66:	f1a1 0710 	sub.w	r7, r1, #16
   bff6a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bff6c:	42b7      	cmp	r7, r6
   bff6e:	d018      	beq.n	bffa2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bff70:	b11c      	cbz	r4, bff7a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bff72:	4631      	mov	r1, r6
   bff74:	4620      	mov	r0, r4
   bff76:	f7fe f8d1 	bl	be11c <_ZN6StringC1EOS_>
                end->~T();
   bff7a:	4630      	mov	r0, r6
   bff7c:	f7fe f852 	bl	be024 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bff80:	3e10      	subs	r6, #16
   bff82:	3c10      	subs	r4, #16
   bff84:	e7f2      	b.n	bff6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bff86:	d00c      	beq.n	bffa2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bff88:	42b5      	cmp	r5, r6
   bff8a:	d00a      	beq.n	bffa2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bff8c:	b11c      	cbz	r4, bff96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bff8e:	4629      	mov	r1, r5
   bff90:	4620      	mov	r0, r4
   bff92:	f7fe f8c3 	bl	be11c <_ZN6StringC1EOS_>
                p->~T();
   bff96:	4628      	mov	r0, r5
   bff98:	f7fe f844 	bl	be024 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bff9c:	3510      	adds	r5, #16
   bff9e:	3410      	adds	r4, #16
   bffa0:	e7f2      	b.n	bff88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bffa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bffa4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bffa4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bffa6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bffa8:	4605      	mov	r5, r0
        if (n > 0) {
   bffaa:	dd11      	ble.n	bffd0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bffac:	0130      	lsls	r0, r6, #4
   bffae:	f7fd fdd3 	bl	bdb58 <malloc>
            if (!d) {
   bffb2:	4604      	mov	r4, r0
   bffb4:	b158      	cbz	r0, bffce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bffb6:	e9d5 1200 	ldrd	r1, r2, [r5]
   bffba:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bffbe:	f7ff ffc7 	bl	bff50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bffc2:	6828      	ldr	r0, [r5, #0]
   bffc4:	f7fd fdd0 	bl	bdb68 <free>
        data_ = d;
   bffc8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bffca:	60ae      	str	r6, [r5, #8]
        return true;
   bffcc:	2001      	movs	r0, #1
    }
   bffce:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bffd0:	2400      	movs	r4, #0
   bffd2:	e7f6      	b.n	bffc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bffd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bffd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bffd8:	4690      	mov	r8, r2
   bffda:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bffdc:	2300      	movs	r3, #0
   bffde:	9103      	str	r1, [sp, #12]
    return size_;
   bffe0:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bffe4:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bffe6:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bffe8:	4299      	cmp	r1, r3
        capacity_(0) {
   bffea:	e9c0 3300 	strd	r3, r3, [r0]
   bffee:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bfff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bfff6:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bfffa:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bfffc:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bfffe:	dc23      	bgt.n	c0048 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c0000:	e9d8 5700 	ldrd	r5, r7, [r8]
   c0004:	2314      	movs	r3, #20
   c0006:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c000a:	42af      	cmp	r7, r5
   c000c:	d03b      	beq.n	c0086 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c000e:	4629      	mov	r1, r5
   c0010:	a80b      	add	r0, sp, #44	; 0x2c
   c0012:	f7fe f883 	bl	be11c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c0016:	a90b      	add	r1, sp, #44	; 0x2c
   c0018:	a80f      	add	r0, sp, #60	; 0x3c
   c001a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c001c:	f7fe f87e 	bl	be11c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0020:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c0024:	4299      	cmp	r1, r3
   c0026:	da1b      	bge.n	c0060 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c0028:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c002a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c002c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c0030:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c0034:	4631      	mov	r1, r6
   c0036:	f106 0010 	add.w	r0, r6, #16
   c003a:	f7ff ff89 	bl	bff50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c003e:	b9ee      	cbnz	r6, c007c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c0040:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c0042:	3301      	adds	r3, #1
   c0044:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c0046:	e011      	b.n	c006c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c0048:	a808      	add	r0, sp, #32
   c004a:	f7ff ffab 	bl	bffa4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c004e:	2800      	cmp	r0, #0
   c0050:	d1d6      	bne.n	c0000 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c0052:	a808      	add	r0, sp, #32
   c0054:	f7fe fc79 	bl	be94a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0058:	4620      	mov	r0, r4
   c005a:	b015      	add	sp, #84	; 0x54
   c005c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0060:	3101      	adds	r1, #1
   c0062:	a808      	add	r0, sp, #32
   c0064:	f7ff ff9e 	bl	bffa4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0068:	2800      	cmp	r0, #0
   c006a:	d1dd      	bne.n	c0028 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c006c:	a80f      	add	r0, sp, #60	; 0x3c
   c006e:	f7fd ffd9 	bl	be024 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c0072:	a80b      	add	r0, sp, #44	; 0x2c
   c0074:	f7fd ffd6 	bl	be024 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c0078:	3514      	adds	r5, #20
   c007a:	e7c6      	b.n	c000a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c007c:	a90f      	add	r1, sp, #60	; 0x3c
   c007e:	4630      	mov	r0, r6
   c0080:	f7fe f84c 	bl	be11c <_ZN6StringC1EOS_>
   c0084:	e7dc      	b.n	c0040 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c0086:	2600      	movs	r6, #0
   c0088:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c008c:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c008e:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c0092:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c0096:	429e      	cmp	r6, r3
   c0098:	da7c      	bge.n	c0194 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   c009a:	0133      	lsls	r3, r6, #4
   c009c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c009e:	9306      	str	r3, [sp, #24]
        if (!category) {
   c00a0:	b90b      	cbnz	r3, c00a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c00a2:	3601      	adds	r6, #1
   c00a4:	e7f5      	b.n	c0092 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c00a6:	2300      	movs	r3, #0
   c00a8:	9307      	str	r3, [sp, #28]
   c00aa:	fb09 f306 	mul.w	r3, r9, r6
   c00ae:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c00b0:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c00b2:	a907      	add	r1, sp, #28
   c00b4:	a806      	add	r0, sp, #24
   c00b6:	f7ff fb22 	bl	bf6fe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c00ba:	4682      	mov	sl, r0
   c00bc:	2800      	cmp	r0, #0
   c00be:	d0f0      	beq.n	c00a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c00c0:	f04f 0300 	mov.w	r3, #0
   c00c4:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c00c8:	4601      	mov	r1, r0
   c00ca:	9a07      	ldr	r2, [sp, #28]
   c00cc:	f10d 0317 	add.w	r3, sp, #23
   c00d0:	4628      	mov	r0, r5
   c00d2:	f7ff fbb1 	bl	bf838 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c00d6:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c00da:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c00dc:	2f00      	cmp	r7, #0
   c00de:	d14a      	bne.n	c0176 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c00e0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c00e4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c00e8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c00ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c00f0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c00f4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c00f8:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c00fa:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c00fe:	4293      	cmp	r3, r2
   c0100:	db17      	blt.n	c0132 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c0102:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c0106:	f1ba 0f00 	cmp.w	sl, #0
   c010a:	dd30      	ble.n	c016e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c010c:	fb09 f00a 	mul.w	r0, r9, sl
   c0110:	f7fd fd22 	bl	bdb58 <malloc>
            if (!d) {
   c0114:	4683      	mov	fp, r0
   c0116:	b360      	cbz	r0, c0172 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c0118:	e9d5 1200 	ldrd	r1, r2, [r5]
   c011c:	fb09 1202 	mla	r2, r9, r2, r1
   c0120:	f7ff feea 	bl	bfef8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c0124:	6828      	ldr	r0, [r5, #0]
   c0126:	f7fd fd1f 	bl	bdb68 <free>
        data_ = d;
   c012a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c012e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c0132:	682b      	ldr	r3, [r5, #0]
   c0134:	9a01      	ldr	r2, [sp, #4]
   c0136:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c013a:	686a      	ldr	r2, [r5, #4]
   c013c:	4651      	mov	r1, sl
   c013e:	fb09 3202 	mla	r2, r9, r2, r3
   c0142:	f10a 0014 	add.w	r0, sl, #20
   c0146:	f7ff fed7 	bl	bfef8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c014a:	f1ba 0f00 	cmp.w	sl, #0
   c014e:	d003      	beq.n	c0158 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c0150:	a90f      	add	r1, sp, #60	; 0x3c
   c0152:	4650      	mov	r0, sl
   c0154:	f7ff fb5d 	bl	bf812 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c0158:	686b      	ldr	r3, [r5, #4]
   c015a:	3301      	adds	r3, #1
   c015c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c015e:	a811      	add	r0, sp, #68	; 0x44
   c0160:	f7ff fcdc 	bl	bfb1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0164:	b13f      	cbz	r7, c0176 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c0166:	a80b      	add	r0, sp, #44	; 0x2c
   c0168:	f7ff fcd8 	bl	bfb1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c016c:	e771      	b.n	c0052 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c016e:	46bb      	mov	fp, r7
   c0170:	e7d8      	b.n	c0124 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0172:	2701      	movs	r7, #1
   c0174:	e7f3      	b.n	c015e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c0176:	9b01      	ldr	r3, [sp, #4]
   c0178:	682d      	ldr	r5, [r5, #0]
   c017a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c017e:	9b06      	ldr	r3, [sp, #24]
   c0180:	781b      	ldrb	r3, [r3, #0]
   c0182:	b92b      	cbnz	r3, c0190 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c0184:	f8d8 3000 	ldr.w	r3, [r8]
   c0188:	9a02      	ldr	r2, [sp, #8]
   c018a:	4413      	add	r3, r2
   c018c:	7c1b      	ldrb	r3, [r3, #16]
   c018e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c0190:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c0192:	e78e      	b.n	c00b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0194:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c0196:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0198:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c019a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c019c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c019e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c01a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c01a2:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c01a4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c01a6:	60a2      	str	r2, [r4, #8]
   c01a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c01aa:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c01ac:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c01ae:	60e2      	str	r2, [r4, #12]
   c01b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c01b2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c01b4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c01b6:	6122      	str	r2, [r4, #16]
   c01b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c01ba:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c01bc:	9b03      	ldr	r3, [sp, #12]
   c01be:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c01c0:	6162      	str	r2, [r4, #20]
   c01c2:	7623      	strb	r3, [r4, #24]
   c01c4:	e7cf      	b.n	c0166 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c01c8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c01c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   c01ca:	4604      	mov	r4, r0
   c01cc:	b087      	sub	sp, #28
   c01ce:	460d      	mov	r5, r1
        filter_(level, filters) {
   c01d0:	4626      	mov	r6, r4
        stream_(&stream) {
   c01d2:	4619      	mov	r1, r3
   c01d4:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c01d6:	4617      	mov	r7, r2
        stream_(&stream) {
   c01d8:	f7f5 ffe4 	bl	b61a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c01dc:	4b0b      	ldr	r3, [pc, #44]	; (c020c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c01de:	f846 3b04 	str.w	r3, [r6], #4
   c01e2:	4669      	mov	r1, sp
   c01e4:	a803      	add	r0, sp, #12
   c01e6:	f7f5 ffdd 	bl	b61a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c01ea:	aa03      	add	r2, sp, #12
   c01ec:	4639      	mov	r1, r7
   c01ee:	4630      	mov	r0, r6
   c01f0:	f7ff fef0 	bl	bffd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c01f4:	a803      	add	r0, sp, #12
   c01f6:	f7f5 fd35 	bl	b5c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c01fa:	4668      	mov	r0, sp
   c01fc:	f7f5 fd32 	bl	b5c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0200:	4b03      	ldr	r3, [pc, #12]	; (c0210 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c0202:	6023      	str	r3, [r4, #0]
}
   c0204:	4620      	mov	r0, r4
        stream_(&stream) {
   c0206:	6225      	str	r5, [r4, #32]
}
   c0208:	b007      	add	sp, #28
   c020a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c020c:	000c6520 	.word	0x000c6520
   c0210:	000c7660 	.word	0x000c7660

000c0214 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c0214:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0216:	460f      	mov	r7, r1
   c0218:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c021a:	491d      	ldr	r1, [pc, #116]	; (c0290 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c021c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c021e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c0220:	4616      	mov	r6, r2
   c0222:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0224:	f003 fe30 	bl	c3e88 <strcmp>
   c0228:	b9c0      	cbnz	r0, c025c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c022a:	b1a4      	cbz	r4, c0256 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c022c:	4629      	mov	r1, r5
   c022e:	a801      	add	r0, sp, #4
   c0230:	f7ff fcbc 	bl	bfbac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c0234:	4917      	ldr	r1, [pc, #92]	; (c0294 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c0236:	2024      	movs	r0, #36	; 0x24
   c0238:	f001 fba0 	bl	c197c <_ZnwjRKSt9nothrow_t>
   c023c:	4605      	mov	r5, r0
   c023e:	b130      	cbz	r0, c024e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c0240:	ab01      	add	r3, sp, #4
   c0242:	4632      	mov	r2, r6
   c0244:	4621      	mov	r1, r4
   c0246:	f7ff ffbf 	bl	c01c8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c024a:	4b13      	ldr	r3, [pc, #76]	; (c0298 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c024c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c024e:	a801      	add	r0, sp, #4
   c0250:	f7f5 fd08 	bl	b5c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0254:	462c      	mov	r4, r5
}
   c0256:	4620      	mov	r0, r4
   c0258:	b005      	add	sp, #20
   c025a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c025c:	490f      	ldr	r1, [pc, #60]	; (c029c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c025e:	4638      	mov	r0, r7
   c0260:	f003 fe12 	bl	c3e88 <strcmp>
   c0264:	b990      	cbnz	r0, c028c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c0266:	2c00      	cmp	r4, #0
   c0268:	d0f5      	beq.n	c0256 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c026a:	4629      	mov	r1, r5
   c026c:	a801      	add	r0, sp, #4
   c026e:	f7ff fc9d 	bl	bfbac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c0272:	4908      	ldr	r1, [pc, #32]	; (c0294 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c0274:	2024      	movs	r0, #36	; 0x24
   c0276:	f001 fb81 	bl	c197c <_ZnwjRKSt9nothrow_t>
   c027a:	4605      	mov	r5, r0
   c027c:	2800      	cmp	r0, #0
   c027e:	d0e6      	beq.n	c024e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c0280:	ab01      	add	r3, sp, #4
   c0282:	4632      	mov	r2, r6
   c0284:	4621      	mov	r1, r4
   c0286:	f7ff ff9f 	bl	c01c8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c028a:	e7e0      	b.n	c024e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c028c:	2400      	movs	r4, #0
   c028e:	e7e2      	b.n	c0256 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c0290:	000c75e2 	.word	0x000c75e2
   c0294:	000c780d 	.word	0x000c780d
   c0298:	000c7678 	.word	0x000c7678
   c029c:	000c75e6 	.word	0x000c75e6

000c02a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c02a0:	4b01      	ldr	r3, [pc, #4]	; (c02a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c02a2:	4a02      	ldr	r2, [pc, #8]	; (c02ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c02a4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c02a6:	4770      	bx	lr
   c02a8:	2003e650 	.word	0x2003e650
   c02ac:	000c75f7 	.word	0x000c75f7

000c02b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c02b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c02b4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c02b6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c02ba:	4604      	mov	r4, r0
   c02bc:	460e      	mov	r6, r1
   c02be:	4617      	mov	r7, r2
   c02c0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c02c2:	f000 fe6f 	bl	c0fa4 <_Z16_fetch_usbserialv>
   c02c6:	4581      	cmp	r9, r0
   c02c8:	d04c      	beq.n	c0364 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c02ca:	792b      	ldrb	r3, [r5, #4]
   c02cc:	0719      	lsls	r1, r3, #28
   c02ce:	d504      	bpl.n	c02da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c02d0:	696a      	ldr	r2, [r5, #20]
   c02d2:	4954      	ldr	r1, [pc, #336]	; (c0424 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c02d4:	4620      	mov	r0, r4
   c02d6:	f7ff fa8d 	bl	bf7f4 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c02da:	f1b8 0f00 	cmp.w	r8, #0
   c02de:	d00d      	beq.n	c02fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c02e0:	215b      	movs	r1, #91	; 0x5b
   c02e2:	4620      	mov	r0, r4
   c02e4:	f7ff fa7a 	bl	bf7dc <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c02e8:	4641      	mov	r1, r8
   c02ea:	4620      	mov	r0, r4
   c02ec:	f7ff fa67 	bl	bf7be <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c02f0:	6823      	ldr	r3, [r4, #0]
   c02f2:	494d      	ldr	r1, [pc, #308]	; (c0428 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c02f4:	68db      	ldr	r3, [r3, #12]
   c02f6:	2202      	movs	r2, #2
   c02f8:	4620      	mov	r0, r4
   c02fa:	4798      	blx	r3
    if (attr.has_file) {
   c02fc:	792b      	ldrb	r3, [r5, #4]
   c02fe:	07da      	lsls	r2, r3, #31
   c0300:	d523      	bpl.n	c034a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c0302:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c0306:	212f      	movs	r1, #47	; 0x2f
   c0308:	4640      	mov	r0, r8
   c030a:	f003 fe3a 	bl	c3f82 <strrchr>
    if (s1) {
   c030e:	b108      	cbz	r0, c0314 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c0310:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c0314:	4641      	mov	r1, r8
   c0316:	4620      	mov	r0, r4
   c0318:	f7ff fa51 	bl	bf7be <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c031c:	792b      	ldrb	r3, [r5, #4]
   c031e:	079b      	lsls	r3, r3, #30
   c0320:	d508      	bpl.n	c0334 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c0322:	213a      	movs	r1, #58	; 0x3a
   c0324:	4620      	mov	r0, r4
   c0326:	f7ff fa59 	bl	bf7dc <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c032a:	68ea      	ldr	r2, [r5, #12]
   c032c:	493f      	ldr	r1, [pc, #252]	; (c042c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c032e:	4620      	mov	r0, r4
   c0330:	f7ff fa60 	bl	bf7f4 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c0334:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c0336:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c0338:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c033c:	68db      	ldr	r3, [r3, #12]
   c033e:	bf14      	ite	ne
   c0340:	493b      	ldrne	r1, [pc, #236]	; (c0430 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c0342:	493c      	ldreq	r1, [pc, #240]	; (c0434 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c0344:	2202      	movs	r2, #2
            write(": ", 2);
   c0346:	4620      	mov	r0, r4
   c0348:	4798      	blx	r3
    if (attr.has_function) {
   c034a:	792b      	ldrb	r3, [r5, #4]
   c034c:	0758      	lsls	r0, r3, #29
   c034e:	d51d      	bpl.n	c038c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0350:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c0352:	460b      	mov	r3, r1
   c0354:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c0356:	f813 0b01 	ldrb.w	r0, [r3], #1
   c035a:	b160      	cbz	r0, c0376 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c035c:	2820      	cmp	r0, #32
   c035e:	d108      	bne.n	c0372 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c0360:	4619      	mov	r1, r3
   c0362:	e7f7      	b.n	c0354 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c0364:	4834      	ldr	r0, [pc, #208]	; (c0438 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c0366:	f000 ffbc 	bl	c12e2 <_ZN5spark12NetworkClass9listeningEv>
   c036a:	2800      	cmp	r0, #0
   c036c:	d0ad      	beq.n	c02ca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c0372:	2828      	cmp	r0, #40	; 0x28
   c0374:	d1ee      	bne.n	c0354 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c0376:	6823      	ldr	r3, [r4, #0]
   c0378:	1a52      	subs	r2, r2, r1
   c037a:	68db      	ldr	r3, [r3, #12]
   c037c:	4620      	mov	r0, r4
   c037e:	4798      	blx	r3
        write("(): ", 4);
   c0380:	6823      	ldr	r3, [r4, #0]
   c0382:	492e      	ldr	r1, [pc, #184]	; (c043c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c0384:	68db      	ldr	r3, [r3, #12]
   c0386:	2204      	movs	r2, #4
   c0388:	4620      	mov	r0, r4
   c038a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c038c:	2100      	movs	r1, #0
   c038e:	4638      	mov	r0, r7
   c0390:	f7fd faec 	bl	bd96c <log_level_name>
   c0394:	4601      	mov	r1, r0
    write(s);
   c0396:	4620      	mov	r0, r4
   c0398:	f7ff fa11 	bl	bf7be <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c039c:	6823      	ldr	r3, [r4, #0]
   c039e:	4925      	ldr	r1, [pc, #148]	; (c0434 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c03a0:	68db      	ldr	r3, [r3, #12]
   c03a2:	2202      	movs	r2, #2
   c03a4:	4620      	mov	r0, r4
   c03a6:	4798      	blx	r3
    if (msg) {
   c03a8:	b11e      	cbz	r6, c03b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c03aa:	4631      	mov	r1, r6
   c03ac:	4620      	mov	r0, r4
   c03ae:	f7ff fa06 	bl	bf7be <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c03b2:	792b      	ldrb	r3, [r5, #4]
   c03b4:	f013 0f30 	tst.w	r3, #48	; 0x30
   c03b8:	d02c      	beq.n	c0414 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c03ba:	6823      	ldr	r3, [r4, #0]
   c03bc:	4920      	ldr	r1, [pc, #128]	; (c0440 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c03be:	68db      	ldr	r3, [r3, #12]
   c03c0:	2202      	movs	r2, #2
   c03c2:	4620      	mov	r0, r4
   c03c4:	4798      	blx	r3
        if (attr.has_code) {
   c03c6:	792b      	ldrb	r3, [r5, #4]
   c03c8:	06d9      	lsls	r1, r3, #27
   c03ca:	d50a      	bpl.n	c03e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c03cc:	6823      	ldr	r3, [r4, #0]
   c03ce:	491d      	ldr	r1, [pc, #116]	; (c0444 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c03d0:	68db      	ldr	r3, [r3, #12]
   c03d2:	2207      	movs	r2, #7
   c03d4:	4620      	mov	r0, r4
   c03d6:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c03d8:	69aa      	ldr	r2, [r5, #24]
   c03da:	491b      	ldr	r1, [pc, #108]	; (c0448 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c03dc:	4620      	mov	r0, r4
   c03de:	f7ff fa09 	bl	bf7f4 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c03e2:	792b      	ldrb	r3, [r5, #4]
   c03e4:	069a      	lsls	r2, r3, #26
   c03e6:	d511      	bpl.n	c040c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c03e8:	06db      	lsls	r3, r3, #27
   c03ea:	d505      	bpl.n	c03f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c03ec:	6823      	ldr	r3, [r4, #0]
   c03ee:	4910      	ldr	r1, [pc, #64]	; (c0430 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c03f0:	68db      	ldr	r3, [r3, #12]
   c03f2:	2202      	movs	r2, #2
   c03f4:	4620      	mov	r0, r4
   c03f6:	4798      	blx	r3
            write("details = ", 10);
   c03f8:	6823      	ldr	r3, [r4, #0]
   c03fa:	4914      	ldr	r1, [pc, #80]	; (c044c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c03fc:	68db      	ldr	r3, [r3, #12]
   c03fe:	4620      	mov	r0, r4
   c0400:	220a      	movs	r2, #10
   c0402:	4798      	blx	r3
            write(attr.details);
   c0404:	69e9      	ldr	r1, [r5, #28]
   c0406:	4620      	mov	r0, r4
   c0408:	f7ff f9d9 	bl	bf7be <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c040c:	215d      	movs	r1, #93	; 0x5d
   c040e:	4620      	mov	r0, r4
   c0410:	f7ff f9e4 	bl	bf7dc <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c0414:	6823      	ldr	r3, [r4, #0]
   c0416:	490e      	ldr	r1, [pc, #56]	; (c0450 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c0418:	68db      	ldr	r3, [r3, #12]
   c041a:	4620      	mov	r0, r4
   c041c:	2202      	movs	r2, #2
}
   c041e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c0422:	4718      	bx	r3
   c0424:	000c75fb 	.word	0x000c75fb
   c0428:	000c7602 	.word	0x000c7602
   c042c:	000c60c6 	.word	0x000c60c6
   c0430:	000c7605 	.word	0x000c7605
   c0434:	000c760a 	.word	0x000c760a
   c0438:	2003e720 	.word	0x2003e720
   c043c:	000c7608 	.word	0x000c7608
   c0440:	000c760d 	.word	0x000c760d
   c0444:	000c7610 	.word	0x000c7610
   c0448:	000c7618 	.word	0x000c7618
   c044c:	000c761b 	.word	0x000c761b
   c0450:	000c7626 	.word	0x000c7626

000c0454 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0458:	b085      	sub	sp, #20
    return stream_;
   c045a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c045e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c0460:	4605      	mov	r5, r0
   c0462:	460f      	mov	r7, r1
   c0464:	4690      	mov	r8, r2
   c0466:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c0468:	f000 fd9c 	bl	c0fa4 <_Z16_fetch_usbserialv>
   c046c:	4581      	cmp	r9, r0
   c046e:	d105      	bne.n	c047c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c0470:	4849      	ldr	r0, [pc, #292]	; (c0598 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c0472:	f000 ff36 	bl	c12e2 <_ZN5spark12NetworkClass9listeningEv>
   c0476:	2800      	cmp	r0, #0
   c0478:	f040 808a 	bne.w	c0590 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c047c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c047e:	4a47      	ldr	r2, [pc, #284]	; (c059c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c0480:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c0482:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c0486:	a801      	add	r0, sp, #4
        strm_(stream) {
   c0488:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c048a:	f88d 9008 	strb.w	r9, [sp, #8]
   c048e:	f001 f8cc 	bl	c162a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c0492:	4649      	mov	r1, r9
   c0494:	4640      	mov	r0, r8
   c0496:	f7fd fa69 	bl	bd96c <log_level_name>
    json.name("l", 1).value(s);
   c049a:	4941      	ldr	r1, [pc, #260]	; (c05a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c049c:	4680      	mov	r8, r0
   c049e:	2201      	movs	r2, #1
   c04a0:	a801      	add	r0, sp, #4
   c04a2:	f001 f951 	bl	c1748 <_ZN5spark10JSONWriter4nameEPKcj>
   c04a6:	4641      	mov	r1, r8
   c04a8:	f7ff f97b 	bl	bf7a2 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c04ac:	b13f      	cbz	r7, c04be <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c04ae:	493d      	ldr	r1, [pc, #244]	; (c05a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c04b0:	2201      	movs	r2, #1
   c04b2:	a801      	add	r0, sp, #4
   c04b4:	f001 f948 	bl	c1748 <_ZN5spark10JSONWriter4nameEPKcj>
   c04b8:	4639      	mov	r1, r7
   c04ba:	f7ff f972 	bl	bf7a2 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c04be:	b13e      	cbz	r6, c04d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c04c0:	4939      	ldr	r1, [pc, #228]	; (c05a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c04c2:	2201      	movs	r2, #1
   c04c4:	a801      	add	r0, sp, #4
   c04c6:	f001 f93f 	bl	c1748 <_ZN5spark10JSONWriter4nameEPKcj>
   c04ca:	4631      	mov	r1, r6
   c04cc:	f7ff f969 	bl	bf7a2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c04d0:	7923      	ldrb	r3, [r4, #4]
   c04d2:	07df      	lsls	r7, r3, #31
   c04d4:	d50e      	bpl.n	c04f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c04d6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c04d8:	212f      	movs	r1, #47	; 0x2f
   c04da:	4630      	mov	r0, r6
   c04dc:	f003 fd51 	bl	c3f82 <strrchr>
    if (s1) {
   c04e0:	b100      	cbz	r0, c04e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c04e2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c04e4:	4931      	ldr	r1, [pc, #196]	; (c05ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c04e6:	2201      	movs	r2, #1
   c04e8:	a801      	add	r0, sp, #4
   c04ea:	f001 f92d 	bl	c1748 <_ZN5spark10JSONWriter4nameEPKcj>
   c04ee:	4631      	mov	r1, r6
   c04f0:	f7ff f957 	bl	bf7a2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c04f4:	7923      	ldrb	r3, [r4, #4]
   c04f6:	079e      	lsls	r6, r3, #30
   c04f8:	d507      	bpl.n	c050a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c04fa:	492d      	ldr	r1, [pc, #180]	; (c05b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c04fc:	2202      	movs	r2, #2
   c04fe:	a801      	add	r0, sp, #4
   c0500:	f001 f922 	bl	c1748 <_ZN5spark10JSONWriter4nameEPKcj>
   c0504:	68e1      	ldr	r1, [r4, #12]
   c0506:	f001 f89d 	bl	c1644 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c050a:	7923      	ldrb	r3, [r4, #4]
   c050c:	0758      	lsls	r0, r3, #29
   c050e:	d514      	bpl.n	c053a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0510:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c0512:	4633      	mov	r3, r6
   c0514:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c0516:	f813 2b01 	ldrb.w	r2, [r3], #1
   c051a:	b12a      	cbz	r2, c0528 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c051c:	2a20      	cmp	r2, #32
   c051e:	d101      	bne.n	c0524 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c0520:	461e      	mov	r6, r3
   c0522:	e7f7      	b.n	c0514 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c0524:	2a28      	cmp	r2, #40	; 0x28
   c0526:	d1f5      	bne.n	c0514 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c0528:	4922      	ldr	r1, [pc, #136]	; (c05b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c052a:	2202      	movs	r2, #2
   c052c:	a801      	add	r0, sp, #4
   c052e:	f001 f90b 	bl	c1748 <_ZN5spark10JSONWriter4nameEPKcj>
   c0532:	1bba      	subs	r2, r7, r6
   c0534:	4631      	mov	r1, r6
   c0536:	f001 f917 	bl	c1768 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c053a:	7923      	ldrb	r3, [r4, #4]
   c053c:	0719      	lsls	r1, r3, #28
   c053e:	d507      	bpl.n	c0550 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c0540:	491d      	ldr	r1, [pc, #116]	; (c05b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c0542:	2201      	movs	r2, #1
   c0544:	a801      	add	r0, sp, #4
   c0546:	f001 f8ff 	bl	c1748 <_ZN5spark10JSONWriter4nameEPKcj>
   c054a:	6961      	ldr	r1, [r4, #20]
   c054c:	f001 f88c 	bl	c1668 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c0550:	7923      	ldrb	r3, [r4, #4]
   c0552:	06da      	lsls	r2, r3, #27
   c0554:	d508      	bpl.n	c0568 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c0556:	2204      	movs	r2, #4
   c0558:	4918      	ldr	r1, [pc, #96]	; (c05bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c055a:	eb0d 0002 	add.w	r0, sp, r2
   c055e:	f001 f8f3 	bl	c1748 <_ZN5spark10JSONWriter4nameEPKcj>
   c0562:	69a1      	ldr	r1, [r4, #24]
   c0564:	f001 f86e 	bl	c1644 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c0568:	7923      	ldrb	r3, [r4, #4]
   c056a:	069b      	lsls	r3, r3, #26
   c056c:	d507      	bpl.n	c057e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c056e:	4914      	ldr	r1, [pc, #80]	; (c05c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c0570:	2206      	movs	r2, #6
   c0572:	a801      	add	r0, sp, #4
   c0574:	f001 f8e8 	bl	c1748 <_ZN5spark10JSONWriter4nameEPKcj>
   c0578:	69e1      	ldr	r1, [r4, #28]
   c057a:	f7ff f912 	bl	bf7a2 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c057e:	a801      	add	r0, sp, #4
   c0580:	f001 f83d 	bl	c15fe <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c0584:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c0586:	490f      	ldr	r1, [pc, #60]	; (c05c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c0588:	6803      	ldr	r3, [r0, #0]
   c058a:	2202      	movs	r2, #2
   c058c:	68db      	ldr	r3, [r3, #12]
   c058e:	4798      	blx	r3
}
   c0590:	b005      	add	sp, #20
   c0592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c0596:	bf00      	nop
   c0598:	2003e720 	.word	0x2003e720
   c059c:	000c7648 	.word	0x000c7648
   c05a0:	000c75d8 	.word	0x000c75d8
   c05a4:	000c7629 	.word	0x000c7629
   c05a8:	000c8096 	.word	0x000c8096
   c05ac:	000c623f 	.word	0x000c623f
   c05b0:	000c762b 	.word	0x000c762b
   c05b4:	000c762e 	.word	0x000c762e
   c05b8:	000c63b7 	.word	0x000c63b7
   c05bc:	000c7631 	.word	0x000c7631
   c05c0:	000c7636 	.word	0x000c7636
   c05c4:	000c7626 	.word	0x000c7626

000c05c8 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c05c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c05cc:	4a15      	ldr	r2, [pc, #84]	; (c0624 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c05ce:	f8df 8060 	ldr.w	r8, [pc, #96]	; c0630 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c05d2:	e9d2 6300 	ldrd	r6, r3, [r2]
   c05d6:	1980      	adds	r0, r0, r6
   c05d8:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c05dc:	4b12      	ldr	r3, [pc, #72]	; (c0628 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c05de:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c05e2:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c05e6:	1986      	adds	r6, r0, r6
   c05e8:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c05ec:	42bb      	cmp	r3, r7
   c05ee:	bf08      	it	eq
   c05f0:	42b2      	cmpeq	r2, r6
{
   c05f2:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c05f4:	d013      	beq.n	c061e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c05f6:	a903      	add	r1, sp, #12
   c05f8:	4668      	mov	r0, sp
   c05fa:	e9cd 6700 	strd	r6, r7, [sp]
   c05fe:	f7fd fb0b 	bl	bdc18 <localtime_r>
	calendar_time.tm_year += 1900;
   c0602:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0604:	4d09      	ldr	r5, [pc, #36]	; (c062c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c0606:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c060a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c060c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c060e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c0612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c0616:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c061a:	6823      	ldr	r3, [r4, #0]
   c061c:	602b      	str	r3, [r5, #0]
    }
}
   c061e:	b00c      	add	sp, #48	; 0x30
   c0620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c0624:	2003e6b0 	.word	0x2003e6b0
   c0628:	2003e6a8 	.word	0x2003e6a8
   c062c:	2003e680 	.word	0x2003e680
   c0630:	2003e6b8 	.word	0x2003e6b8

000c0634 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   c0634:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0636:	2000      	movs	r0, #0
   c0638:	f7fd fa7e 	bl	bdb38 <spark_sync_time_pending>
   c063c:	b128      	cbz	r0, c064a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   c063e:	f7fd fa63 	bl	bdb08 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0642:	f080 0001 	eor.w	r0, r0, #1
   c0646:	b2c0      	uxtb	r0, r0
    }
   c0648:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c064a:	2001      	movs	r0, #1
   c064c:	e7fc      	b.n	c0648 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c0650 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c0650:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c0652:	f7ff ffb9 	bl	c05c8 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c0656:	4b02      	ldr	r3, [pc, #8]	; (c0660 <_ZN9TimeClass5monthEx+0x10>)
   c0658:	6918      	ldr	r0, [r3, #16]
}
   c065a:	3001      	adds	r0, #1
   c065c:	bd08      	pop	{r3, pc}
   c065e:	bf00      	nop
   c0660:	2003e680 	.word	0x2003e680

000c0664 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c0664:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c0666:	2000      	movs	r0, #0
   c0668:	f7fc ff16 	bl	bd498 <hal_rtc_time_is_valid>
    if (rtcstate)
   c066c:	4604      	mov	r4, r0
   c066e:	b9a0      	cbnz	r0, c069a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c0670:	f7fd f996 	bl	bd9a0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c0674:	2801      	cmp	r0, #1
   c0676:	d110      	bne.n	c069a <_ZN9TimeClass7isValidEv+0x36>
   c0678:	4620      	mov	r0, r4
   c067a:	f7fd f9b9 	bl	bd9f0 <system_thread_get_state>
   c067e:	b960      	cbnz	r0, c069a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c0680:	f7ff ffd8 	bl	c0634 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c0684:	b910      	cbnz	r0, c068c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c0686:	f7fd fa37 	bl	bdaf8 <spark_process>
        while (_while() && !_condition()) {
   c068a:	e7f9      	b.n	c0680 <_ZN9TimeClass7isValidEv+0x1c>
   c068c:	f7ff ffd2 	bl	c0634 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c0690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c0694:	2000      	movs	r0, #0
   c0696:	f7fc beff 	b.w	bd498 <hal_rtc_time_is_valid>
}
   c069a:	4620      	mov	r0, r4
   c069c:	bd10      	pop	{r4, pc}

000c069e <_ZN9TimeClass3nowEv>:
{
   c069e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c06a0:	f7ff ffe0 	bl	c0664 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c06a4:	2210      	movs	r2, #16
   c06a6:	2100      	movs	r1, #0
   c06a8:	4668      	mov	r0, sp
   c06aa:	f003 fb91 	bl	c3dd0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c06ae:	2100      	movs	r1, #0
   c06b0:	4668      	mov	r0, sp
   c06b2:	f7fc fef9 	bl	bd4a8 <hal_rtc_get_time>
}
   c06b6:	9800      	ldr	r0, [sp, #0]
   c06b8:	b005      	add	sp, #20
   c06ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c06c0 <_ZN9TimeClass4hourEv>:
{
   c06c0:	b508      	push	{r3, lr}
	return hour(now());
   c06c2:	f7ff ffec 	bl	c069e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c06c6:	17c1      	asrs	r1, r0, #31
   c06c8:	f7ff ff7e 	bl	c05c8 <_ZL22Refresh_UnixTime_Cachex>
}
   c06cc:	4b01      	ldr	r3, [pc, #4]	; (c06d4 <_ZN9TimeClass4hourEv+0x14>)
   c06ce:	6898      	ldr	r0, [r3, #8]
   c06d0:	bd08      	pop	{r3, pc}
   c06d2:	bf00      	nop
   c06d4:	2003e680 	.word	0x2003e680

000c06d8 <_ZN9TimeClass6minuteEv>:
{
   c06d8:	b508      	push	{r3, lr}
	return minute(now());
   c06da:	f7ff ffe0 	bl	c069e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c06de:	17c1      	asrs	r1, r0, #31
   c06e0:	f7ff ff72 	bl	c05c8 <_ZL22Refresh_UnixTime_Cachex>
}
   c06e4:	4b01      	ldr	r3, [pc, #4]	; (c06ec <_ZN9TimeClass6minuteEv+0x14>)
   c06e6:	6858      	ldr	r0, [r3, #4]
   c06e8:	bd08      	pop	{r3, pc}
   c06ea:	bf00      	nop
   c06ec:	2003e680 	.word	0x2003e680

000c06f0 <_ZN9TimeClass6secondEv>:
{
   c06f0:	b508      	push	{r3, lr}
	return second(now());
   c06f2:	f7ff ffd4 	bl	c069e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c06f6:	17c1      	asrs	r1, r0, #31
   c06f8:	f7ff ff66 	bl	c05c8 <_ZL22Refresh_UnixTime_Cachex>
}
   c06fc:	4b01      	ldr	r3, [pc, #4]	; (c0704 <_ZN9TimeClass6secondEv+0x14>)
   c06fe:	6818      	ldr	r0, [r3, #0]
   c0700:	bd08      	pop	{r3, pc}
   c0702:	bf00      	nop
   c0704:	2003e680 	.word	0x2003e680

000c0708 <_ZN9TimeClass3dayEv>:
{
   c0708:	b508      	push	{r3, lr}
	return day(now());
   c070a:	f7ff ffc8 	bl	c069e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c070e:	17c1      	asrs	r1, r0, #31
   c0710:	f7ff ff5a 	bl	c05c8 <_ZL22Refresh_UnixTime_Cachex>
}
   c0714:	4b01      	ldr	r3, [pc, #4]	; (c071c <_ZN9TimeClass3dayEv+0x14>)
   c0716:	68d8      	ldr	r0, [r3, #12]
   c0718:	bd08      	pop	{r3, pc}
   c071a:	bf00      	nop
   c071c:	2003e680 	.word	0x2003e680

000c0720 <_ZN9TimeClass5monthEv>:
{
   c0720:	b508      	push	{r3, lr}
	return month(now());
   c0722:	f7ff ffbc 	bl	c069e <_ZN9TimeClass3nowEv>
}
   c0726:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c072a:	17c1      	asrs	r1, r0, #31
   c072c:	f7ff bf90 	b.w	c0650 <_ZN9TimeClass5monthEx>

000c0730 <_ZN9TimeClass4yearEv>:
{
   c0730:	b508      	push	{r3, lr}
	return year(now());
   c0732:	f7ff ffb4 	bl	c069e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0736:	17c1      	asrs	r1, r0, #31
   c0738:	f7ff ff46 	bl	c05c8 <_ZL22Refresh_UnixTime_Cachex>
}
   c073c:	4b01      	ldr	r3, [pc, #4]	; (c0744 <_ZN9TimeClass4yearEv+0x14>)
   c073e:	6958      	ldr	r0, [r3, #20]
   c0740:	bd08      	pop	{r3, pc}
   c0742:	bf00      	nop
   c0744:	2003e680 	.word	0x2003e680

000c0748 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c0748:	4b02      	ldr	r3, [pc, #8]	; (c0754 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c074a:	681a      	ldr	r2, [r3, #0]
   c074c:	4b02      	ldr	r3, [pc, #8]	; (c0758 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c074e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c0750:	4770      	bx	lr
   c0752:	bf00      	nop
   c0754:	2003db88 	.word	0x2003db88
   c0758:	2003e67c 	.word	0x2003e67c

000c075c <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   c075c:	428a      	cmp	r2, r1
{
   c075e:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   c0760:	d007      	beq.n	c0772 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   c0762:	1a44      	subs	r4, r0, r1
   c0764:	9802      	ldr	r0, [sp, #8]
   c0766:	1ac0      	subs	r0, r0, r3
   c0768:	4344      	muls	r4, r0
   c076a:	1a50      	subs	r0, r2, r1
   c076c:	fb94 f0f0 	sdiv	r0, r4, r0
   c0770:	4418      	add	r0, r3
}
   c0772:	bd10      	pop	{r4, pc}

000c0774 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   c0774:	2100      	movs	r1, #0
   c0776:	f7fd b923 	b.w	bd9c0 <system_delay_ms>
	...

000c077c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c077c:	4b01      	ldr	r3, [pc, #4]	; (c0784 <_GLOBAL__sub_I_RGB+0x8>)
   c077e:	2200      	movs	r2, #0
   c0780:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c0782:	4770      	bx	lr
   c0784:	2003e6c0 	.word	0x2003e6c0

000c0788 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c0788:	4b01      	ldr	r3, [pc, #4]	; (c0790 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c078a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c078c:	4770      	bx	lr
   c078e:	bf00      	nop
   c0790:	2003db90 	.word	0x2003db90

000c0794 <serialEventRun>:
{
   c0794:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c0796:	4b0b      	ldr	r3, [pc, #44]	; (c07c4 <serialEventRun+0x30>)
   c0798:	b143      	cbz	r3, c07ac <serialEventRun+0x18>
   c079a:	f000 fc03 	bl	c0fa4 <_Z16_fetch_usbserialv>
   c079e:	6803      	ldr	r3, [r0, #0]
   c07a0:	691b      	ldr	r3, [r3, #16]
   c07a2:	4798      	blx	r3
   c07a4:	2800      	cmp	r0, #0
   c07a6:	dd01      	ble.n	c07ac <serialEventRun+0x18>
        serialEvent();
   c07a8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c07ac:	4b06      	ldr	r3, [pc, #24]	; (c07c8 <serialEventRun+0x34>)
   c07ae:	b143      	cbz	r3, c07c2 <serialEventRun+0x2e>
   c07b0:	f001 f884 	bl	c18bc <_Z22__fetch_global_Serial1v>
   c07b4:	6803      	ldr	r3, [r0, #0]
   c07b6:	691b      	ldr	r3, [r3, #16]
   c07b8:	4798      	blx	r3
   c07ba:	2800      	cmp	r0, #0
   c07bc:	dd01      	ble.n	c07c2 <serialEventRun+0x2e>
        serialEvent1();
   c07be:	f3af 8000 	nop.w
}
   c07c2:	bd08      	pop	{r3, pc}
	...

000c07cc <_post_loop>:
{
   c07cc:	b508      	push	{r3, lr}
	serialEventRun();
   c07ce:	f7ff ffe1 	bl	c0794 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c07d2:	f7fc fe59 	bl	bd488 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c07d6:	4b01      	ldr	r3, [pc, #4]	; (c07dc <_post_loop+0x10>)
   c07d8:	6018      	str	r0, [r3, #0]
}
   c07da:	bd08      	pop	{r3, pc}
   c07dc:	2003e740 	.word	0x2003e740

000c07e0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c07e0:	4805      	ldr	r0, [pc, #20]	; (c07f8 <_Z33system_initialize_user_backup_ramv+0x18>)
   c07e2:	4a06      	ldr	r2, [pc, #24]	; (c07fc <_Z33system_initialize_user_backup_ramv+0x1c>)
   c07e4:	4906      	ldr	r1, [pc, #24]	; (c0800 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c07e6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c07e8:	1a12      	subs	r2, r2, r0
   c07ea:	f003 fac9 	bl	c3d80 <memcpy>
    __backup_sram_signature = signature;
   c07ee:	4b05      	ldr	r3, [pc, #20]	; (c0804 <_Z33system_initialize_user_backup_ramv+0x24>)
   c07f0:	4a05      	ldr	r2, [pc, #20]	; (c0808 <_Z33system_initialize_user_backup_ramv+0x28>)
   c07f2:	601a      	str	r2, [r3, #0]
}
   c07f4:	bd08      	pop	{r3, pc}
   c07f6:	bf00      	nop
   c07f8:	2003f400 	.word	0x2003f400
   c07fc:	2003f404 	.word	0x2003f404
   c0800:	000c81e4 	.word	0x000c81e4
   c0804:	2003f400 	.word	0x2003f400
   c0808:	9a271c1e 	.word	0x9a271c1e

000c080c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c080c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c080e:	2300      	movs	r3, #0
   c0810:	9300      	str	r3, [sp, #0]
   c0812:	461a      	mov	r2, r3
   c0814:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c0818:	f7fd f904 	bl	bda24 <system_ctrl_set_result>
}
   c081c:	b003      	add	sp, #12
   c081e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0824 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c0824:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c0826:	8843      	ldrh	r3, [r0, #2]
   c0828:	2b0a      	cmp	r3, #10
   c082a:	d008      	beq.n	c083e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c082c:	2b50      	cmp	r3, #80	; 0x50
   c082e:	d10b      	bne.n	c0848 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c0830:	4b09      	ldr	r3, [pc, #36]	; (c0858 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c0832:	681b      	ldr	r3, [r3, #0]
   c0834:	b14b      	cbz	r3, c084a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c0836:	b003      	add	sp, #12
   c0838:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c083c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c083e:	f7ff ffe5 	bl	c080c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c0842:	b003      	add	sp, #12
   c0844:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c0848:	2300      	movs	r3, #0
   c084a:	9300      	str	r3, [sp, #0]
   c084c:	461a      	mov	r2, r3
   c084e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c0852:	f7fd f8e7 	bl	bda24 <system_ctrl_set_result>
}
   c0856:	e7f4      	b.n	c0842 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c0858:	2003e6d4 	.word	0x2003e6d4

000c085c <module_user_init_hook>:
{
   c085c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c085e:	4812      	ldr	r0, [pc, #72]	; (c08a8 <module_user_init_hook+0x4c>)
   c0860:	2100      	movs	r1, #0
   c0862:	f7fd f9d1 	bl	bdc08 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c0866:	4b11      	ldr	r3, [pc, #68]	; (c08ac <module_user_init_hook+0x50>)
   c0868:	681a      	ldr	r2, [r3, #0]
   c086a:	4b11      	ldr	r3, [pc, #68]	; (c08b0 <module_user_init_hook+0x54>)
   c086c:	429a      	cmp	r2, r3
   c086e:	4b11      	ldr	r3, [pc, #68]	; (c08b4 <module_user_init_hook+0x58>)
   c0870:	bf0c      	ite	eq
   c0872:	2201      	moveq	r2, #1
   c0874:	2200      	movne	r2, #0
   c0876:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c0878:	d001      	beq.n	c087e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c087a:	f7ff ffb1 	bl	c07e0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c087e:	f7fc fdeb 	bl	bd458 <HAL_RNG_GetRandomNumber>
   c0882:	4604      	mov	r4, r0
    srand(seed);
   c0884:	f003 faac 	bl	c3de0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c0888:	4b0b      	ldr	r3, [pc, #44]	; (c08b8 <module_user_init_hook+0x5c>)
   c088a:	b113      	cbz	r3, c0892 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c088c:	4620      	mov	r0, r4
   c088e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c0892:	2100      	movs	r1, #0
   c0894:	4808      	ldr	r0, [pc, #32]	; (c08b8 <module_user_init_hook+0x5c>)
   c0896:	f7fd f957 	bl	bdb48 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c089a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c089e:	4807      	ldr	r0, [pc, #28]	; (c08bc <module_user_init_hook+0x60>)
   c08a0:	2100      	movs	r1, #0
   c08a2:	f7fd b8b5 	b.w	bda10 <system_ctrl_set_app_request_handler>
   c08a6:	bf00      	nop
   c08a8:	000c0789 	.word	0x000c0789
   c08ac:	2003f400 	.word	0x2003f400
   c08b0:	9a271c1e 	.word	0x9a271c1e
   c08b4:	2003e6d0 	.word	0x2003e6d0
   c08b8:	00000000 	.word	0x00000000
   c08bc:	000c0825 	.word	0x000c0825

000c08c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   c08c0:	4770      	bx	lr

000c08c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   c08c2:	2000      	movs	r0, #0
   c08c4:	4770      	bx	lr

000c08c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   c08c6:	b510      	push	{r4, lr}
   c08c8:	2110      	movs	r1, #16
   c08ca:	4604      	mov	r4, r0
   c08cc:	f7f3 fbe9 	bl	b40a2 <_ZdlPvj>
   c08d0:	4620      	mov	r0, r4
   c08d2:	bd10      	pop	{r4, pc}

000c08d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   c08d4:	b508      	push	{r3, lr}
      { delete this; }
   c08d6:	f7ff fff6 	bl	c08c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   c08da:	bd08      	pop	{r3, pc}

000c08dc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   c08dc:	b530      	push	{r4, r5, lr}
        type_(type) {
   c08de:	2200      	movs	r2, #0
   c08e0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   c08e4:	6002      	str	r2, [r0, #0]
   c08e6:	8084      	strh	r4, [r0, #4]
   c08e8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   c08ea:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c08ec:	680c      	ldr	r4, [r1, #0]
   c08ee:	8085      	strh	r5, [r0, #4]
   c08f0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   c08f2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   c08f4:	bd30      	pop	{r4, r5, pc}

000c08f6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   c08f6:	b510      	push	{r4, lr}
   c08f8:	4604      	mov	r4, r0
    free((void*)msg_);
   c08fa:	6800      	ldr	r0, [r0, #0]
   c08fc:	f7fd f934 	bl	bdb68 <free>
}
   c0900:	4620      	mov	r0, r4
   c0902:	bd10      	pop	{r4, pc}

000c0904 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   c0904:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   c0906:	68c4      	ldr	r4, [r0, #12]
   c0908:	b1f4      	cbz	r4, c0948 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   c090a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   c090c:	2b02      	cmp	r3, #2
   c090e:	d103      	bne.n	c0918 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   c0910:	f104 000c 	add.w	r0, r4, #12
   c0914:	f7ff ffef 	bl	c08f6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   c0918:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   c091a:	b135      	cbz	r5, c092a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   c091c:	4628      	mov	r0, r5
   c091e:	f7f3 fd5d 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   c0922:	2110      	movs	r1, #16
   c0924:	4628      	mov	r0, r5
   c0926:	f7f3 fbbc 	bl	b40a2 <_ZdlPvj>
   c092a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   c092c:	b135      	cbz	r5, c093c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   c092e:	4628      	mov	r0, r5
   c0930:	f7f3 fd54 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   c0934:	2110      	movs	r1, #16
   c0936:	4628      	mov	r0, r5
   c0938:	f7f3 fbb3 	bl	b40a2 <_ZdlPvj>
   c093c:	4620      	mov	r0, r4
   c093e:	2114      	movs	r1, #20
   c0940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c0944:	f7f3 bbad 	b.w	b40a2 <_ZdlPvj>
   c0948:	bd38      	pop	{r3, r4, r5, pc}

000c094a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c094a:	680b      	ldr	r3, [r1, #0]
   c094c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   c094e:	684b      	ldr	r3, [r1, #4]
   c0950:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   c0952:	b113      	cbz	r3, c095a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   c0954:	685a      	ldr	r2, [r3, #4]
   c0956:	3201      	adds	r2, #1
   c0958:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c095a:	4770      	bx	lr

000c095c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   c095c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c095e:	4604      	mov	r4, r0
   c0960:	4668      	mov	r0, sp
   c0962:	460d      	mov	r5, r1
   c0964:	f7ff fff1 	bl	c094a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   c0968:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   c096a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   c096c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   c096e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   c0970:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   c0972:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   c0974:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   c0976:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   c0978:	f7f5 f808 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   c097c:	b135      	cbz	r5, c098c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   c097e:	1d28      	adds	r0, r5, #4
   c0980:	f7f5 f804 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c0984:	2108      	movs	r1, #8
   c0986:	4628      	mov	r0, r5
   c0988:	f7f3 fb8b 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   c098c:	4620      	mov	r0, r4
   c098e:	b003      	add	sp, #12
   c0990:	bd30      	pop	{r4, r5, pc}

000c0992 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   c0992:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   c0994:	b510      	push	{r4, lr}
      if (_M_empty())
   c0996:	b90a      	cbnz	r2, c099c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   c0998:	f000 fff4 	bl	c1984 <_ZSt25__throw_bad_function_callv>
    }
   c099c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c09a0:	68c3      	ldr	r3, [r0, #12]
   c09a2:	4718      	bx	r3

000c09a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   c09a4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   c09a6:	6800      	ldr	r0, [r0, #0]
   c09a8:	f100 0110 	add.w	r1, r0, #16
   c09ac:	f7ff fff1 	bl	c0992 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   c09b0:	bd08      	pop	{r3, pc}

000c09b2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   c09b2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   c09b4:	b510      	push	{r4, lr}
      if (_M_empty())
   c09b6:	b90a      	cbnz	r2, c09bc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   c09b8:	f000 ffe4 	bl	c1984 <_ZSt25__throw_bad_function_callv>
    }
   c09bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c09c0:	68c3      	ldr	r3, [r0, #12]
   c09c2:	4718      	bx	r3

000c09c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   c09c4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   c09c6:	6800      	ldr	r0, [r0, #0]
   c09c8:	f100 0110 	add.w	r1, r0, #16
   c09cc:	f7ff fff1 	bl	c09b2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   c09d0:	bd08      	pop	{r3, pc}
	...

000c09d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   c09d4:	b538      	push	{r3, r4, r5, lr}
   c09d6:	2300      	movs	r3, #0
   c09d8:	4604      	mov	r4, r0
   c09da:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c09dc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   c09de:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c09e0:	f7f3 fb59 	bl	b4096 <_Znwj>
   c09e4:	b128      	cbz	r0, c09f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   c09e6:	2301      	movs	r3, #1
   c09e8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   c09ec:	4b02      	ldr	r3, [pc, #8]	; (c09f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   c09ee:	6003      	str	r3, [r0, #0]
   c09f0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c09f2:	6020      	str	r0, [r4, #0]
	}
   c09f4:	4620      	mov	r0, r4
   c09f6:	bd38      	pop	{r3, r4, r5, pc}
   c09f8:	000c76dc 	.word	0x000c76dc

000c09fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   c09fc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   c09fe:	2300      	movs	r3, #0
   c0a00:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   c0a02:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   c0a04:	4604      	mov	r4, r0
   c0a06:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   c0a08:	b12b      	cbz	r3, c0a16 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   c0a0a:	2202      	movs	r2, #2
   c0a0c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   c0a0e:	68eb      	ldr	r3, [r5, #12]
   c0a10:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   c0a12:	68ab      	ldr	r3, [r5, #8]
   c0a14:	60a3      	str	r3, [r4, #8]
    }
   c0a16:	4620      	mov	r0, r4
   c0a18:	bd38      	pop	{r3, r4, r5, pc}
	...

000c0a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   c0a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0a1e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   c0a20:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   c0a22:	4668      	mov	r0, sp
   c0a24:	f7ff ff5a 	bl	c08dc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   c0a28:	f04f 0302 	mov.w	r3, #2
   c0a2c:	e8d4 2f4f 	ldrexb	r2, [r4]
   c0a30:	2a00      	cmp	r2, #0
   c0a32:	d103      	bne.n	c0a3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   c0a34:	e8c4 3f41 	strexb	r1, r3, [r4]
   c0a38:	2900      	cmp	r1, #0
   c0a3a:	d1f7      	bne.n	c0a2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   c0a3c:	d125      	bne.n	c0a8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   c0a3e:	f104 050c 	add.w	r5, r4, #12
   c0a42:	4669      	mov	r1, sp
   c0a44:	4628      	mov	r0, r5
   c0a46:	f7ff ff49 	bl	c08dc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   c0a4a:	f3bf 8f5b 	dmb	ish
   c0a4e:	2301      	movs	r3, #1
   c0a50:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   c0a52:	2000      	movs	r0, #0
   c0a54:	f104 0308 	add.w	r3, r4, #8
   c0a58:	f3bf 8f5b 	dmb	ish
   c0a5c:	e853 6f00 	ldrex	r6, [r3]
   c0a60:	e843 0200 	strex	r2, r0, [r3]
   c0a64:	2a00      	cmp	r2, #0
   c0a66:	d1f9      	bne.n	c0a5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   c0a68:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   c0a6c:	b16e      	cbz	r6, c0a8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   c0a6e:	f7fc ffaf 	bl	bd9d0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   c0a72:	b178      	cbz	r0, c0a94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   c0a74:	4629      	mov	r1, r5
   c0a76:	4630      	mov	r0, r6
   c0a78:	f7ff ff8b 	bl	c0992 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   c0a7c:	4630      	mov	r0, r6
   c0a7e:	f7f3 fcad 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   c0a82:	2110      	movs	r1, #16
   c0a84:	4630      	mov	r0, r6
   c0a86:	f7f3 fb0c 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   c0a8a:	4668      	mov	r0, sp
   c0a8c:	f7ff ff33 	bl	c08f6 <_ZN8particle5ErrorD1Ev>
    }
   c0a90:	b009      	add	sp, #36	; 0x24
   c0a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0a94:	4631      	mov	r1, r6
   c0a96:	a802      	add	r0, sp, #8
   c0a98:	f7ff ffb0 	bl	c09fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   c0a9c:	68e0      	ldr	r0, [r4, #12]
   c0a9e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c0aa2:	b108      	cbz	r0, c0aa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   c0aa4:	f003 fa02 	bl	c3eac <strdup>
        type_(type) {
   c0aa8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   c0aaa:	2010      	movs	r0, #16
   c0aac:	f8ad 501c 	strh.w	r5, [sp, #28]
   c0ab0:	f7f3 faf1 	bl	b4096 <_Znwj>
   c0ab4:	4605      	mov	r5, r0
   c0ab6:	b1e8      	cbz	r0, c0af4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   c0ab8:	2700      	movs	r7, #0
   c0aba:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c0abc:	2018      	movs	r0, #24
   c0abe:	f7f3 faea 	bl	b4096 <_Znwj>
   c0ac2:	4604      	mov	r4, r0
   c0ac4:	b188      	cbz	r0, c0aea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   c0ac6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   c0ac8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   c0aca:	a802      	add	r0, sp, #8
   c0acc:	f7fe fab2 	bl	bf034 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0ad0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   c0ad2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c0ad4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0ad6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   c0ad8:	9204      	str	r2, [sp, #16]
   c0ada:	a906      	add	r1, sp, #24
   c0adc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   c0ade:	60e3      	str	r3, [r4, #12]
   c0ae0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   c0ae4:	9205      	str	r2, [sp, #20]
   c0ae6:	f7ff fef9 	bl	c08dc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   c0aea:	4b08      	ldr	r3, [pc, #32]	; (c0b0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   c0aec:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   c0aee:	4b08      	ldr	r3, [pc, #32]	; (c0b10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c0af0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   c0af2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   c0af4:	a806      	add	r0, sp, #24
   c0af6:	f7ff fefe 	bl	c08f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   c0afa:	a802      	add	r0, sp, #8
   c0afc:	f7f3 fc6e 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   c0b00:	2200      	movs	r2, #0
   c0b02:	4629      	mov	r1, r5
   c0b04:	4803      	ldr	r0, [pc, #12]	; (c0b14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   c0b06:	f7fc ff6b 	bl	bd9e0 <application_thread_invoke>
   c0b0a:	e7b7      	b.n	c0a7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   c0b0c:	000c09a5 	.word	0x000c09a5
   c0b10:	000c0c29 	.word	0x000c0c29
   c0b14:	000c1149 	.word	0x000c1149

000c0b18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   c0b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0b1c:	b08b      	sub	sp, #44	; 0x2c
   c0b1e:	4605      	mov	r5, r0
   c0b20:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   c0b24:	460f      	mov	r7, r1
   c0b26:	4690      	mov	r8, r2
   c0b28:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c0b2a:	f7fc ffed 	bl	bdb08 <spark_cloud_flag_connected>
   c0b2e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   c0b30:	4683      	mov	fp, r0
   c0b32:	bb38      	cbnz	r0, c0b84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   c0b34:	f64f 732e 	movw	r3, #65326	; 0xff2e
   c0b38:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   c0b3a:	a905      	add	r1, sp, #20
   c0b3c:	4630      	mov	r0, r6
   c0b3e:	f8ad 3018 	strh.w	r3, [sp, #24]
   c0b42:	f7ff fecb 	bl	c08dc <_ZN8particle5ErrorC1EOS0_>
   c0b46:	2014      	movs	r0, #20
   c0b48:	f7f3 faa5 	bl	b4096 <_Znwj>
   c0b4c:	4604      	mov	r4, r0
   c0b4e:	b148      	cbz	r0, c0b64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   c0b50:	2302      	movs	r3, #2
   c0b52:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c0b54:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   c0b56:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c0b5a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   c0b5c:	4631      	mov	r1, r6
   c0b5e:	300c      	adds	r0, #12
   c0b60:	f7ff febc 	bl	c08dc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c0b64:	4628      	mov	r0, r5
	: __shared_count(__p)
   c0b66:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c0b68:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   c0b6c:	f7ff ff32 	bl	c09d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   c0b70:	4630      	mov	r0, r6
   c0b72:	f7ff fec0 	bl	c08f6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   c0b76:	a805      	add	r0, sp, #20
   c0b78:	f7ff febd 	bl	c08f6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   c0b7c:	4628      	mov	r0, r5
   c0b7e:	b00b      	add	sp, #44	; 0x2c
   c0b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   c0b84:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   c0b86:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   c0b88:	2014      	movs	r0, #20
   c0b8a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   c0b8e:	9307      	str	r3, [sp, #28]
   c0b90:	f7f3 fa81 	bl	b4096 <_Znwj>
   c0b94:	4601      	mov	r1, r0
   c0b96:	b118      	cbz	r0, c0ba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   c0b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c0b9c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c0b9e:	7044      	strb	r4, [r0, #1]
   c0ba0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c0ba2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   c0ba4:	f7ff ff16 	bl	c09d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   c0ba8:	4b1e      	ldr	r3, [pc, #120]	; (c0c24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   c0baa:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   c0bac:	2008      	movs	r0, #8
   c0bae:	f7f3 fa72 	bl	b4096 <_Znwj>
   c0bb2:	4604      	mov	r4, r0
   c0bb4:	b110      	cbz	r0, c0bbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   c0bb6:	a903      	add	r1, sp, #12
   c0bb8:	f7ff fec7 	bl	c094a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   c0bbc:	9600      	str	r6, [sp, #0]
   c0bbe:	fa5f f38a 	uxtb.w	r3, sl
   c0bc2:	464a      	mov	r2, r9
   c0bc4:	4641      	mov	r1, r8
   c0bc6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   c0bc8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   c0bca:	f7fc ffa5 	bl	bdb18 <spark_send_event>
   c0bce:	b9b8      	cbnz	r0, c0c00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   c0bd0:	9b03      	ldr	r3, [sp, #12]
   c0bd2:	785b      	ldrb	r3, [r3, #1]
   c0bd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   c0bd8:	b993      	cbnz	r3, c0c00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   c0bda:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   c0bde:	a905      	add	r1, sp, #20
   c0be0:	a803      	add	r0, sp, #12
   c0be2:	9205      	str	r2, [sp, #20]
   c0be4:	f8ad 3018 	strh.w	r3, [sp, #24]
   c0be8:	f7ff ff18 	bl	c0a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   c0bec:	a805      	add	r0, sp, #20
   c0bee:	f7ff fe82 	bl	c08f6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   c0bf2:	a805      	add	r0, sp, #20
   c0bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
   c0bf6:	f7ff feb1 	bl	c095c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   c0bfa:	a806      	add	r0, sp, #24
   c0bfc:	f7f4 fec6 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c0c00:	a903      	add	r1, sp, #12
   c0c02:	a805      	add	r0, sp, #20
   c0c04:	f7ff fea1 	bl	c094a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   c0c08:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   c0c0a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   c0c0c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   c0c0e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   c0c10:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   c0c12:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   c0c14:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   c0c16:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   c0c18:	f7f4 feb8 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c0c1c:	a804      	add	r0, sp, #16
   c0c1e:	f7f4 feb5 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   c0c22:	e7ab      	b.n	c0b7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   c0c24:	000c0ca5 	.word	0x000c0ca5

000c0c28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   c0c28:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   c0c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0c2c:	4605      	mov	r5, r0
	switch (__op)
   c0c2e:	d103      	bne.n	c0c38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   c0c30:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   c0c32:	6003      	str	r3, [r0, #0]
      }
   c0c34:	2000      	movs	r0, #0
   c0c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   c0c38:	2a02      	cmp	r2, #2
   c0c3a:	d010      	beq.n	c0c5e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   c0c3c:	2a03      	cmp	r2, #3
   c0c3e:	d1f9      	bne.n	c0c34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   c0c40:	6804      	ldr	r4, [r0, #0]
   c0c42:	2c00      	cmp	r4, #0
   c0c44:	d0f6      	beq.n	c0c34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   c0c46:	f104 0010 	add.w	r0, r4, #16
   c0c4a:	f7ff fe54 	bl	c08f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   c0c4e:	4620      	mov	r0, r4
   c0c50:	f7f3 fbc4 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   c0c54:	2118      	movs	r1, #24
   c0c56:	4620      	mov	r0, r4
   c0c58:	f7f3 fa23 	bl	b40a2 <_ZdlPvj>
   c0c5c:	e7ea      	b.n	c0c34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   c0c5e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   c0c60:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   c0c62:	f7f3 fa18 	bl	b4096 <_Znwj>
   c0c66:	4604      	mov	r4, r0
   c0c68:	b150      	cbz	r0, c0c80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   c0c6a:	4631      	mov	r1, r6
   c0c6c:	f7ff fec6 	bl	c09fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   c0c70:	6930      	ldr	r0, [r6, #16]
   c0c72:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c0c76:	b108      	cbz	r0, c0c7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   c0c78:	f003 f918 	bl	c3eac <strdup>
        type_(type) {
   c0c7c:	6120      	str	r0, [r4, #16]
   c0c7e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   c0c80:	602c      	str	r4, [r5, #0]
	}
   c0c82:	e7d7      	b.n	c0c34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000c0c84 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   c0c84:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   c0c86:	2300      	movs	r3, #0
   c0c88:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   c0c8a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   c0c8c:	4604      	mov	r4, r0
   c0c8e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   c0c90:	b12b      	cbz	r3, c0c9e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   c0c92:	2202      	movs	r2, #2
   c0c94:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   c0c96:	68eb      	ldr	r3, [r5, #12]
   c0c98:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   c0c9a:	68ab      	ldr	r3, [r5, #8]
   c0c9c:	60a3      	str	r3, [r4, #8]
    }
   c0c9e:	4620      	mov	r0, r4
   c0ca0:	bd38      	pop	{r3, r4, r5, pc}
	...

000c0ca4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   c0ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0ca6:	b089      	sub	sp, #36	; 0x24
   c0ca8:	4604      	mov	r4, r0
   c0caa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   c0cac:	a801      	add	r0, sp, #4
   c0cae:	4611      	mov	r1, r2
   c0cb0:	f7ff fe54 	bl	c095c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   c0cb4:	b1a4      	cbz	r4, c0ce0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   c0cb6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c0cb8:	b11d      	cbz	r5, c0cc2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   c0cba:	4628      	mov	r0, r5
   c0cbc:	f003 f8f6 	bl	c3eac <strdup>
   c0cc0:	4605      	mov	r5, r0
   c0cc2:	a801      	add	r0, sp, #4
   c0cc4:	a903      	add	r1, sp, #12
        type_(type) {
   c0cc6:	9503      	str	r5, [sp, #12]
   c0cc8:	f8ad 4010 	strh.w	r4, [sp, #16]
   c0ccc:	f7ff fea6 	bl	c0a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   c0cd0:	a803      	add	r0, sp, #12
   c0cd2:	f7ff fe10 	bl	c08f6 <_ZN8particle5ErrorD1Ev>
   c0cd6:	a802      	add	r0, sp, #8
   c0cd8:	f7f4 fe58 	bl	b598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0cdc:	b009      	add	sp, #36	; 0x24
   c0cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   c0ce0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   c0ce2:	2301      	movs	r3, #1
   c0ce4:	e8d5 2f4f 	ldrexb	r2, [r5]
   c0ce8:	2a00      	cmp	r2, #0
   c0cea:	d103      	bne.n	c0cf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   c0cec:	e8c5 3f41 	strexb	r1, r3, [r5]
   c0cf0:	2900      	cmp	r1, #0
   c0cf2:	d1f7      	bne.n	c0ce4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   c0cf4:	d1ef      	bne.n	c0cd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   c0cf6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   c0cf8:	f3bf 8f5b 	dmb	ish
   c0cfc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   c0cfe:	1d2b      	adds	r3, r5, #4
   c0d00:	f3bf 8f5b 	dmb	ish
   c0d04:	e853 6f00 	ldrex	r6, [r3]
   c0d08:	e843 4200 	strex	r2, r4, [r3]
   c0d0c:	2a00      	cmp	r2, #0
   c0d0e:	d1f9      	bne.n	c0d04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   c0d10:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   c0d14:	2e00      	cmp	r6, #0
   c0d16:	d0de      	beq.n	c0cd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   c0d18:	4620      	mov	r0, r4
   c0d1a:	f7fc fe59 	bl	bd9d0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   c0d1e:	4607      	mov	r7, r0
   c0d20:	b160      	cbz	r0, c0d3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   c0d22:	f105 010c 	add.w	r1, r5, #12
   c0d26:	4630      	mov	r0, r6
   c0d28:	f7ff fe43 	bl	c09b2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   c0d2c:	4630      	mov	r0, r6
   c0d2e:	f7f3 fb55 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   c0d32:	2110      	movs	r1, #16
   c0d34:	4630      	mov	r0, r6
   c0d36:	f7f3 f9b4 	bl	b40a2 <_ZdlPvj>
   c0d3a:	e7cc      	b.n	c0cd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   c0d3c:	4631      	mov	r1, r6
   c0d3e:	a803      	add	r0, sp, #12
   c0d40:	f7ff ffa0 	bl	c0c84 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   c0d44:	7b2b      	ldrb	r3, [r5, #12]
   c0d46:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   c0d4a:	2010      	movs	r0, #16
   c0d4c:	f7f3 f9a3 	bl	b4096 <_Znwj>
   c0d50:	4605      	mov	r5, r0
   c0d52:	b1d0      	cbz	r0, c0d8a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   c0d54:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c0d56:	2014      	movs	r0, #20
   c0d58:	f7f3 f99d 	bl	b4096 <_Znwj>
   c0d5c:	4604      	mov	r4, r0
   c0d5e:	b178      	cbz	r0, c0d80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   c0d60:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   c0d62:	4601      	mov	r1, r0
   c0d64:	a803      	add	r0, sp, #12
   c0d66:	f7fe f965 	bl	bf034 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0d6a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   c0d6c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c0d6e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0d70:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   c0d72:	9205      	str	r2, [sp, #20]
   c0d74:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   c0d76:	60e3      	str	r3, [r4, #12]
   c0d78:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   c0d7c:	9206      	str	r2, [sp, #24]
   c0d7e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   c0d80:	4b06      	ldr	r3, [pc, #24]	; (c0d9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   c0d82:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   c0d84:	4b06      	ldr	r3, [pc, #24]	; (c0da0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c0d86:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   c0d88:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   c0d8a:	a803      	add	r0, sp, #12
   c0d8c:	f7f3 fb26 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   c0d90:	2200      	movs	r2, #0
   c0d92:	4629      	mov	r1, r5
   c0d94:	4803      	ldr	r0, [pc, #12]	; (c0da4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   c0d96:	f7fc fe23 	bl	bd9e0 <application_thread_invoke>
   c0d9a:	e7c7      	b.n	c0d2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   c0d9c:	000c09c5 	.word	0x000c09c5
   c0da0:	000c0da9 	.word	0x000c0da9
   c0da4:	000c1149 	.word	0x000c1149

000c0da8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   c0da8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   c0daa:	b570      	push	{r4, r5, r6, lr}
   c0dac:	4604      	mov	r4, r0
	switch (__op)
   c0dae:	d103      	bne.n	c0db8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   c0db0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   c0db2:	6003      	str	r3, [r0, #0]
      }
   c0db4:	2000      	movs	r0, #0
   c0db6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   c0db8:	2a02      	cmp	r2, #2
   c0dba:	d00c      	beq.n	c0dd6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   c0dbc:	2a03      	cmp	r2, #3
   c0dbe:	d1f9      	bne.n	c0db4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   c0dc0:	6804      	ldr	r4, [r0, #0]
   c0dc2:	2c00      	cmp	r4, #0
   c0dc4:	d0f6      	beq.n	c0db4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   c0dc6:	4620      	mov	r0, r4
   c0dc8:	f7f3 fb08 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   c0dcc:	2114      	movs	r1, #20
   c0dce:	4620      	mov	r0, r4
   c0dd0:	f7f3 f967 	bl	b40a2 <_ZdlPvj>
   c0dd4:	e7ee      	b.n	c0db4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   c0dd6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   c0dd8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   c0dda:	f7f3 f95c 	bl	b4096 <_Znwj>
   c0dde:	4605      	mov	r5, r0
   c0de0:	b120      	cbz	r0, c0dec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   c0de2:	4631      	mov	r1, r6
   c0de4:	f7ff ff4e 	bl	c0c84 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   c0de8:	7c33      	ldrb	r3, [r6, #16]
   c0dea:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   c0dec:	6025      	str	r5, [r4, #0]
	}
   c0dee:	e7e1      	b.n	c0db4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000c0df0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   c0df0:	4770      	bx	lr

000c0df2 <_ZN9IPAddressD0Ev>:
   c0df2:	b510      	push	{r4, lr}
   c0df4:	2118      	movs	r1, #24
   c0df6:	4604      	mov	r4, r0
   c0df8:	f7f3 f953 	bl	b40a2 <_ZdlPvj>
   c0dfc:	4620      	mov	r0, r4
   c0dfe:	bd10      	pop	{r4, pc}

000c0e00 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   c0e00:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   c0e02:	7d03      	ldrb	r3, [r0, #20]
   c0e04:	2b06      	cmp	r3, #6
{
   c0e06:	b08d      	sub	sp, #52	; 0x34
   c0e08:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c0e0a:	f100 0704 	add.w	r7, r0, #4
   c0e0e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   c0e12:	d012      	beq.n	c0e3a <_ZNK9IPAddress7printToER5Print+0x3a>
   c0e14:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   c0e18:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   c0e1c:	220a      	movs	r2, #10
   c0e1e:	4630      	mov	r0, r6
   c0e20:	f7fe fbc9 	bl	bf5b6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   c0e24:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   c0e26:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   c0e28:	d019      	beq.n	c0e5e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   c0e2a:	2c00      	cmp	r4, #0
   c0e2c:	d0f4      	beq.n	c0e18 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   c0e2e:	212e      	movs	r1, #46	; 0x2e
   c0e30:	4630      	mov	r0, r6
   c0e32:	f7fe fba1 	bl	bf578 <_ZN5Print5printEc>
   c0e36:	4404      	add	r4, r0
   c0e38:	e7ee      	b.n	c0e18 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c0e3a:	232f      	movs	r3, #47	; 0x2f
   c0e3c:	466a      	mov	r2, sp
   c0e3e:	4639      	mov	r1, r7
   c0e40:	200a      	movs	r0, #10
		buf[0] = 0;
   c0e42:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c0e46:	f7fc fc11 	bl	bd66c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   c0e4a:	4668      	mov	r0, sp
   c0e4c:	f003 f84b 	bl	c3ee6 <strlen>
   c0e50:	6833      	ldr	r3, [r6, #0]
   c0e52:	4602      	mov	r2, r0
   c0e54:	68db      	ldr	r3, [r3, #12]
   c0e56:	4669      	mov	r1, sp
   c0e58:	4630      	mov	r0, r6
   c0e5a:	4798      	blx	r3
   c0e5c:	4604      	mov	r4, r0
    }
    return n;
}
   c0e5e:	4620      	mov	r0, r4
   c0e60:	b00d      	add	sp, #52	; 0x34
   c0e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c0e64 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   c0e64:	b510      	push	{r4, lr}
   c0e66:	4b05      	ldr	r3, [pc, #20]	; (c0e7c <_ZN9IPAddressC1Ev+0x18>)
   c0e68:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   c0e6a:	2211      	movs	r2, #17
   c0e6c:	f840 3b04 	str.w	r3, [r0], #4
   c0e70:	2100      	movs	r1, #0
   c0e72:	f002 ffad 	bl	c3dd0 <memset>
}
   c0e76:	4620      	mov	r0, r4
   c0e78:	bd10      	pop	{r4, pc}
   c0e7a:	bf00      	nop
   c0e7c:	000c76f8 	.word	0x000c76f8

000c0e80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   c0e80:	4603      	mov	r3, r0
   c0e82:	4a07      	ldr	r2, [pc, #28]	; (c0ea0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   c0e84:	b510      	push	{r4, lr}
   c0e86:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   c0e8a:	f101 0210 	add.w	r2, r1, #16
   c0e8e:	f851 4b04 	ldr.w	r4, [r1], #4
   c0e92:	f843 4b04 	str.w	r4, [r3], #4
   c0e96:	4291      	cmp	r1, r2
   c0e98:	d1f9      	bne.n	c0e8e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   c0e9a:	780a      	ldrb	r2, [r1, #0]
   c0e9c:	701a      	strb	r2, [r3, #0]
}
   c0e9e:	bd10      	pop	{r4, pc}
   c0ea0:	000c76f8 	.word	0x000c76f8

000c0ea4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   c0ea4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   c0ea6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   c0eaa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   c0eae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   c0eb2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   c0eb6:	2304      	movs	r3, #4
   c0eb8:	6041      	str	r1, [r0, #4]
   c0eba:	7503      	strb	r3, [r0, #20]
}
   c0ebc:	bd10      	pop	{r4, pc}
	...

000c0ec0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   c0ec0:	b507      	push	{r0, r1, r2, lr}
   c0ec2:	4b06      	ldr	r3, [pc, #24]	; (c0edc <_ZN9IPAddressC1EPKh+0x1c>)
   c0ec4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   c0ec6:	78cb      	ldrb	r3, [r1, #3]
   c0ec8:	9300      	str	r3, [sp, #0]
   c0eca:	788b      	ldrb	r3, [r1, #2]
   c0ecc:	784a      	ldrb	r2, [r1, #1]
   c0ece:	7809      	ldrb	r1, [r1, #0]
   c0ed0:	f7ff ffe8 	bl	c0ea4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   c0ed4:	b003      	add	sp, #12
   c0ed6:	f85d fb04 	ldr.w	pc, [sp], #4
   c0eda:	bf00      	nop
   c0edc:	000c76f8 	.word	0x000c76f8

000c0ee0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c0ee0:	7441      	strb	r1, [r0, #17]
}
   c0ee2:	4770      	bx	lr

000c0ee4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c0ee4:	4770      	bx	lr

000c0ee6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c0ee6:	4770      	bx	lr

000c0ee8 <_ZN9USBSerial4readEv>:
{
   c0ee8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c0eea:	2100      	movs	r1, #0
   c0eec:	7c00      	ldrb	r0, [r0, #16]
   c0eee:	f7fc fd15 	bl	bd91c <HAL_USB_USART_Receive_Data>
}
   c0ef2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c0ef6:	bd08      	pop	{r3, pc}

000c0ef8 <_ZN9USBSerial4peekEv>:
{
   c0ef8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c0efa:	2101      	movs	r1, #1
   c0efc:	7c00      	ldrb	r0, [r0, #16]
   c0efe:	f7fc fd0d 	bl	bd91c <HAL_USB_USART_Receive_Data>
}
   c0f02:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c0f06:	bd08      	pop	{r3, pc}

000c0f08 <_ZN9USBSerial17availableForWriteEv>:
{
   c0f08:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c0f0a:	7c00      	ldrb	r0, [r0, #16]
   c0f0c:	f7fc fcfe 	bl	bd90c <HAL_USB_USART_Available_Data_For_Write>
}
   c0f10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0f14:	bd08      	pop	{r3, pc}

000c0f16 <_ZN9USBSerial9availableEv>:
{
   c0f16:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c0f18:	7c00      	ldrb	r0, [r0, #16]
   c0f1a:	f7fc fcef 	bl	bd8fc <HAL_USB_USART_Available_Data>
}
   c0f1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0f22:	bd08      	pop	{r3, pc}

000c0f24 <_ZN9USBSerial5writeEh>:
{
   c0f24:	b513      	push	{r0, r1, r4, lr}
   c0f26:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c0f28:	7c00      	ldrb	r0, [r0, #16]
{
   c0f2a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c0f2c:	f7fc fcee 	bl	bd90c <HAL_USB_USART_Available_Data_For_Write>
   c0f30:	2800      	cmp	r0, #0
   c0f32:	9901      	ldr	r1, [sp, #4]
   c0f34:	dc01      	bgt.n	c0f3a <_ZN9USBSerial5writeEh+0x16>
   c0f36:	7c60      	ldrb	r0, [r4, #17]
   c0f38:	b120      	cbz	r0, c0f44 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c0f3a:	7c20      	ldrb	r0, [r4, #16]
   c0f3c:	f7fc fcf6 	bl	bd92c <HAL_USB_USART_Send_Data>
   c0f40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c0f44:	b002      	add	sp, #8
   c0f46:	bd10      	pop	{r4, pc}

000c0f48 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c0f48:	7c00      	ldrb	r0, [r0, #16]
   c0f4a:	f7fc bcf7 	b.w	bd93c <HAL_USB_USART_Flush_Data>

000c0f4e <_ZN9USBSerialD0Ev>:
   c0f4e:	b510      	push	{r4, lr}
   c0f50:	2114      	movs	r1, #20
   c0f52:	4604      	mov	r4, r0
   c0f54:	f7f3 f8a5 	bl	b40a2 <_ZdlPvj>
   c0f58:	4620      	mov	r0, r4
   c0f5a:	bd10      	pop	{r4, pc}

000c0f5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c0f5c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   c0f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c0f62:	4604      	mov	r4, r0
   c0f64:	4608      	mov	r0, r1
   c0f66:	2100      	movs	r1, #0
   c0f68:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c0f6c:	4b04      	ldr	r3, [pc, #16]	; (c0f80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c0f6e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c0f70:	2301      	movs	r3, #1
  _serial = serial;
   c0f72:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c0f74:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c0f76:	4611      	mov	r1, r2
   c0f78:	f7fc fca8 	bl	bd8cc <HAL_USB_USART_Init>
}
   c0f7c:	4620      	mov	r0, r4
   c0f7e:	bd10      	pop	{r4, pc}
   c0f80:	000c770c 	.word	0x000c770c

000c0f84 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c0f84:	7c00      	ldrb	r0, [r0, #16]
   c0f86:	2200      	movs	r2, #0
   c0f88:	f7fc bca8 	b.w	bd8dc <HAL_USB_USART_Begin>

000c0f8c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c0f8c:	7c00      	ldrb	r0, [r0, #16]
   c0f8e:	f7fc bcad 	b.w	bd8ec <HAL_USB_USART_End>

000c0f92 <_Z19acquireSerialBufferv>:
{
   c0f92:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c0f94:	2214      	movs	r2, #20
{
   c0f96:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c0f98:	2100      	movs	r1, #0
   c0f9a:	f002 ff19 	bl	c3dd0 <memset>
}
   c0f9e:	4620      	mov	r0, r4
   c0fa0:	bd10      	pop	{r4, pc}
	...

000c0fa4 <_Z16_fetch_usbserialv>:
{
   c0fa4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c0fa6:	4c0f      	ldr	r4, [pc, #60]	; (c0fe4 <_Z16_fetch_usbserialv+0x40>)
{
   c0fa8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c0faa:	a803      	add	r0, sp, #12
   c0fac:	f7ff fff1 	bl	c0f92 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c0fb0:	7821      	ldrb	r1, [r4, #0]
   c0fb2:	f3bf 8f5b 	dmb	ish
   c0fb6:	f011 0101 	ands.w	r1, r1, #1
   c0fba:	d10f      	bne.n	c0fdc <_Z16_fetch_usbserialv+0x38>
   c0fbc:	4620      	mov	r0, r4
   c0fbe:	9101      	str	r1, [sp, #4]
   c0fc0:	f7f3 f87e 	bl	b40c0 <__cxa_guard_acquire>
   c0fc4:	9901      	ldr	r1, [sp, #4]
   c0fc6:	b148      	cbz	r0, c0fdc <_Z16_fetch_usbserialv+0x38>
   c0fc8:	aa03      	add	r2, sp, #12
   c0fca:	4807      	ldr	r0, [pc, #28]	; (c0fe8 <_Z16_fetch_usbserialv+0x44>)
   c0fcc:	f7ff ffc6 	bl	c0f5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c0fd0:	4620      	mov	r0, r4
   c0fd2:	f7f3 f87a 	bl	b40ca <__cxa_guard_release>
   c0fd6:	4805      	ldr	r0, [pc, #20]	; (c0fec <_Z16_fetch_usbserialv+0x48>)
   c0fd8:	f002 feac 	bl	c3d34 <atexit>
	return _usbserial;
}
   c0fdc:	4802      	ldr	r0, [pc, #8]	; (c0fe8 <_Z16_fetch_usbserialv+0x44>)
   c0fde:	b008      	add	sp, #32
   c0fe0:	bd10      	pop	{r4, pc}
   c0fe2:	bf00      	nop
   c0fe4:	2003e6d8 	.word	0x2003e6d8
   c0fe8:	2003e6dc 	.word	0x2003e6dc
   c0fec:	000c0ee5 	.word	0x000c0ee5

000c0ff0 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   c0ff0:	f7fc ba22 	b.w	bd438 <HAL_Interrupts_Disable_All>

000c0ff4 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   c0ff4:	f7fc ba18 	b.w	bd428 <HAL_Interrupts_Enable_All>

000c0ff8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   c0ff8:	2200      	movs	r2, #0
   c0ffa:	6840      	ldr	r0, [r0, #4]
   c0ffc:	4611      	mov	r1, r2
   c0ffe:	f7fc bd33 	b.w	bda68 <network_ready>

000c1002 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   c1002:	2200      	movs	r2, #0
   c1004:	6840      	ldr	r0, [r0, #4]
   c1006:	4611      	mov	r1, r2
   c1008:	f7fc bd4e 	b.w	bdaa8 <network_listening>

000c100c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   c100c:	2200      	movs	r2, #0
   c100e:	6840      	ldr	r0, [r0, #4]
   c1010:	4611      	mov	r1, r2
   c1012:	f7fc bd59 	b.w	bdac8 <network_get_listen_timeout>

000c1016 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   c1016:	6840      	ldr	r0, [r0, #4]
   c1018:	2200      	movs	r2, #0
   c101a:	f7fc bd4d 	b.w	bdab8 <network_set_listen_timeout>

000c101e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   c101e:	6840      	ldr	r0, [r0, #4]
   c1020:	2200      	movs	r2, #0
   c1022:	f081 0101 	eor.w	r1, r1, #1
   c1026:	f7fc bd37 	b.w	bda98 <network_listen>

000c102a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   c102a:	2300      	movs	r3, #0
   c102c:	6840      	ldr	r0, [r0, #4]
   c102e:	461a      	mov	r2, r3
   c1030:	4619      	mov	r1, r3
   c1032:	f7fc bd29 	b.w	bda88 <network_off>

000c1036 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   c1036:	2300      	movs	r3, #0
   c1038:	6840      	ldr	r0, [r0, #4]
   c103a:	461a      	mov	r2, r3
   c103c:	4619      	mov	r1, r3
   c103e:	f7fc bd1b 	b.w	bda78 <network_on>

000c1042 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   c1042:	2200      	movs	r2, #0
   c1044:	6840      	ldr	r0, [r0, #4]
   c1046:	4611      	mov	r1, r2
   c1048:	f7fc bcfe 	b.w	bda48 <network_connecting>

000c104c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   c104c:	6840      	ldr	r0, [r0, #4]
   c104e:	2200      	movs	r2, #0
   c1050:	2102      	movs	r1, #2
   c1052:	f7fc bd01 	b.w	bda58 <network_disconnect>

000c1056 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   c1056:	2300      	movs	r3, #0
   c1058:	6840      	ldr	r0, [r0, #4]
   c105a:	461a      	mov	r2, r3
   c105c:	f7fc bcec 	b.w	bda38 <network_connect>

000c1060 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   c1060:	4b08      	ldr	r3, [pc, #32]	; (c1084 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   c1062:	b510      	push	{r4, lr}
   c1064:	2428      	movs	r4, #40	; 0x28
   c1066:	4622      	mov	r2, r4
   c1068:	4618      	mov	r0, r3
   c106a:	2100      	movs	r1, #0
   c106c:	f002 feb0 	bl	c3dd0 <memset>
   c1070:	4b05      	ldr	r3, [pc, #20]	; (c1088 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   c1072:	8004      	strh	r4, [r0, #0]
        cid = -1;
   c1074:	f04f 32ff 	mov.w	r2, #4294967295
   c1078:	6042      	str	r2, [r0, #4]
   c107a:	2204      	movs	r2, #4
   c107c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   c107e:	4a03      	ldr	r2, [pc, #12]	; (c108c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   c1080:	601a      	str	r2, [r3, #0]
   c1082:	bd10      	pop	{r4, pc}
   c1084:	2003e6f8 	.word	0x2003e6f8
   c1088:	2003e6f0 	.word	0x2003e6f0
   c108c:	000c773c 	.word	0x000c773c

000c1090 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c1090:	4770      	bx	lr

000c1092 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1092:	7441      	strb	r1, [r0, #17]
}
   c1094:	4770      	bx	lr

000c1096 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c1096:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c1098:	7c00      	ldrb	r0, [r0, #16]
   c109a:	f7fc fb27 	bl	bd6ec <hal_usart_available_data_for_write>
}
   c109e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c10a2:	bd08      	pop	{r3, pc}

000c10a4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c10a4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c10a6:	7c00      	ldrb	r0, [r0, #16]
   c10a8:	f7fc faf8 	bl	bd69c <hal_usart_available>
}
   c10ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c10b0:	bd08      	pop	{r3, pc}

000c10b2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c10b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c10b4:	7c00      	ldrb	r0, [r0, #16]
   c10b6:	f7fc fb01 	bl	bd6bc <hal_usart_peek>
}
   c10ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c10be:	bd08      	pop	{r3, pc}

000c10c0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c10c0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c10c2:	7c00      	ldrb	r0, [r0, #16]
   c10c4:	f7fc faf2 	bl	bd6ac <hal_usart_read>
}
   c10c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c10cc:	bd08      	pop	{r3, pc}

000c10ce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c10ce:	7c00      	ldrb	r0, [r0, #16]
   c10d0:	f7fc bafc 	b.w	bd6cc <hal_usart_flush>

000c10d4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c10d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c10d6:	7c45      	ldrb	r5, [r0, #17]
{
   c10d8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c10da:	b12d      	cbz	r5, c10e8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c10dc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c10de:	b003      	add	sp, #12
   c10e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c10e4:	f7fc bad2 	b.w	bd68c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c10e8:	7c00      	ldrb	r0, [r0, #16]
   c10ea:	9101      	str	r1, [sp, #4]
   c10ec:	f7fc fafe 	bl	bd6ec <hal_usart_available_data_for_write>
   c10f0:	2800      	cmp	r0, #0
   c10f2:	9901      	ldr	r1, [sp, #4]
   c10f4:	dcf2      	bgt.n	c10dc <_ZN11USARTSerial5writeEh+0x8>
}
   c10f6:	4628      	mov	r0, r5
   c10f8:	b003      	add	sp, #12
   c10fa:	bd30      	pop	{r4, r5, pc}

000c10fc <_ZN11USARTSerialD0Ev>:
   c10fc:	b510      	push	{r4, lr}
   c10fe:	2114      	movs	r1, #20
   c1100:	4604      	mov	r4, r0
   c1102:	f7f2 ffce 	bl	b40a2 <_ZdlPvj>
   c1106:	4620      	mov	r0, r4
   c1108:	bd10      	pop	{r4, pc}
	...

000c110c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c110c:	b510      	push	{r4, lr}
   c110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1112:	4604      	mov	r4, r0
   c1114:	4608      	mov	r0, r1
   c1116:	4611      	mov	r1, r2
   c1118:	2200      	movs	r2, #0
   c111a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c111e:	4b04      	ldr	r3, [pc, #16]	; (c1130 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c1120:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1122:	2301      	movs	r3, #1
  _serial = serial;
   c1124:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c1126:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c1128:	f7fc faf0 	bl	bd70c <hal_usart_init_ex>
}
   c112c:	4620      	mov	r0, r4
   c112e:	bd10      	pop	{r4, pc}
   c1130:	000c7778 	.word	0x000c7778

000c1134 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c1134:	7c00      	ldrb	r0, [r0, #16]
   c1136:	2300      	movs	r3, #0
   c1138:	f7fc bae0 	b.w	bd6fc <hal_usart_begin_config>

000c113c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c113c:	2200      	movs	r2, #0
   c113e:	f7ff bff9 	b.w	c1134 <_ZN11USARTSerial5beginEmm>

000c1142 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c1142:	7c00      	ldrb	r0, [r0, #16]
   c1144:	f7fc ba9a 	b.w	bd67c <hal_usart_end>

000c1148 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   c1148:	b510      	push	{r4, lr}
      if (_M_empty())
   c114a:	6883      	ldr	r3, [r0, #8]
   c114c:	4604      	mov	r4, r0
   c114e:	b90b      	cbnz	r3, c1154 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   c1150:	f000 fc18 	bl	c1984 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c1154:	68c3      	ldr	r3, [r0, #12]
   c1156:	4798      	blx	r3
      if (_M_manager)
   c1158:	68a3      	ldr	r3, [r4, #8]
   c115a:	b11b      	cbz	r3, c1164 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   c115c:	2203      	movs	r2, #3
   c115e:	4621      	mov	r1, r4
   c1160:	4620      	mov	r0, r4
   c1162:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   c1164:	4620      	mov	r0, r4
   c1166:	2110      	movs	r1, #16
}
   c1168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   c116c:	f7f2 bf99 	b.w	b40a2 <_ZdlPvj>

000c1170 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   c1170:	4770      	bx	lr

000c1172 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   c1172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c1174:	4606      	mov	r6, r0
   c1176:	4615      	mov	r5, r2
   c1178:	460c      	mov	r4, r1
   c117a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   c117c:	42bc      	cmp	r4, r7
   c117e:	d006      	beq.n	c118e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   c1180:	6833      	ldr	r3, [r6, #0]
   c1182:	f814 1b01 	ldrb.w	r1, [r4], #1
   c1186:	689b      	ldr	r3, [r3, #8]
   c1188:	4630      	mov	r0, r6
   c118a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   c118c:	e7f6      	b.n	c117c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   c118e:	4628      	mov	r0, r5
   c1190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c1192 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   c1192:	7c00      	ldrb	r0, [r0, #16]
   c1194:	2200      	movs	r2, #0
   c1196:	f7fc bae1 	b.w	bd75c <hal_i2c_write>

000c119a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   c119a:	7c00      	ldrb	r0, [r0, #16]
   c119c:	2100      	movs	r1, #0
   c119e:	f7fc bae5 	b.w	bd76c <hal_i2c_available>

000c11a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   c11a2:	7c00      	ldrb	r0, [r0, #16]
   c11a4:	2100      	movs	r1, #0
   c11a6:	f7fc bae9 	b.w	bd77c <hal_i2c_read>

000c11aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   c11aa:	7c00      	ldrb	r0, [r0, #16]
   c11ac:	2100      	movs	r1, #0
   c11ae:	f7fc baed 	b.w	bd78c <hal_i2c_peek>

000c11b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   c11b2:	7c00      	ldrb	r0, [r0, #16]
   c11b4:	2100      	movs	r1, #0
   c11b6:	f7fc baf1 	b.w	bd79c <hal_i2c_flush>

000c11ba <_ZN7TwoWireD0Ev>:
   c11ba:	b510      	push	{r4, lr}
   c11bc:	2114      	movs	r1, #20
   c11be:	4604      	mov	r4, r0
   c11c0:	f7f2 ff6f 	bl	b40a2 <_ZdlPvj>
   c11c4:	4620      	mov	r0, r4
   c11c6:	bd10      	pop	{r4, pc}

000c11c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   c11c8:	b510      	push	{r4, lr}
   c11ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c11ce:	4604      	mov	r4, r0
   c11d0:	4608      	mov	r0, r1
   c11d2:	2100      	movs	r1, #0
   c11d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c11d8:	4b03      	ldr	r3, [pc, #12]	; (c11e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   c11da:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   c11dc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   c11de:	4611      	mov	r1, r2
   c11e0:	f7fc faec 	bl	bd7bc <hal_i2c_init>
}
   c11e4:	4620      	mov	r0, r4
   c11e6:	bd10      	pop	{r4, pc}
   c11e8:	000c77a8 	.word	0x000c77a8

000c11ec <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   c11ec:	7c00      	ldrb	r0, [r0, #16]
   c11ee:	2200      	movs	r2, #0
   c11f0:	f7fc ba94 	b.w	bd71c <hal_i2c_set_speed>

000c11f4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   c11f4:	2300      	movs	r3, #0
   c11f6:	7c00      	ldrb	r0, [r0, #16]
   c11f8:	461a      	mov	r2, r3
   c11fa:	4619      	mov	r1, r3
   c11fc:	f7fc ba96 	b.w	bd72c <hal_i2c_begin>

000c1200 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   c1200:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   c1202:	2200      	movs	r2, #0
   c1204:	2314      	movs	r3, #20
   c1206:	e9cd 2201 	strd	r2, r2, [sp, #4]
   c120a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   c120e:	780b      	ldrb	r3, [r1, #0]
   c1210:	f88d 3008 	strb.w	r3, [sp, #8]
   c1214:	684b      	ldr	r3, [r1, #4]
   c1216:	9303      	str	r3, [sp, #12]
   c1218:	68cb      	ldr	r3, [r1, #12]
   c121a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   c121c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   c121e:	7a0b      	ldrb	r3, [r1, #8]
   c1220:	9305      	str	r3, [sp, #20]
   c1222:	a901      	add	r1, sp, #4
   c1224:	f7fc fad2 	bl	bd7cc <hal_i2c_request_ex>
}
   c1228:	b007      	add	sp, #28
   c122a:	f85d fb04 	ldr.w	pc, [sp], #4

000c122e <_ZN7TwoWire11requestFromEhjh>:
{
   c122e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   c1230:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   c1232:	f88d 1000 	strb.w	r1, [sp]
   c1236:	f04f 0164 	mov.w	r1, #100	; 0x64
   c123a:	9103      	str	r1, [sp, #12]
   c123c:	bf18      	it	ne
   c123e:	2301      	movne	r3, #1
   c1240:	4669      	mov	r1, sp
    size_ = size;
   c1242:	9201      	str	r2, [sp, #4]
   c1244:	f88d 3008 	strb.w	r3, [sp, #8]
   c1248:	f7ff ffda 	bl	c1200 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   c124c:	b005      	add	sp, #20
   c124e:	f85d fb04 	ldr.w	pc, [sp], #4

000c1252 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   c1252:	2301      	movs	r3, #1
   c1254:	f7ff bfeb 	b.w	c122e <_ZN7TwoWire11requestFromEhjh>

000c1258 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   c1258:	7c00      	ldrb	r0, [r0, #16]
   c125a:	2200      	movs	r2, #0
   c125c:	f7fc ba6e 	b.w	bd73c <hal_i2c_begin_transmission>

000c1260 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   c1260:	b2c9      	uxtb	r1, r1
   c1262:	f7ff bff9 	b.w	c1258 <_ZN7TwoWire17beginTransmissionEh>

000c1266 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   c1266:	7c00      	ldrb	r0, [r0, #16]
   c1268:	2200      	movs	r2, #0
   c126a:	f7fc ba6f 	b.w	bd74c <hal_i2c_end_transmission>

000c126e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   c126e:	2101      	movs	r1, #1
   c1270:	f7ff bff9 	b.w	c1266 <_ZN7TwoWire15endTransmissionEh>

000c1274 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c1274:	2300      	movs	r3, #0
   c1276:	6840      	ldr	r0, [r0, #4]
   c1278:	461a      	mov	r2, r3
   c127a:	f7fc bbdd 	b.w	bda38 <network_connect>

000c127e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c127e:	6840      	ldr	r0, [r0, #4]
   c1280:	2200      	movs	r2, #0
   c1282:	2102      	movs	r1, #2
   c1284:	f7fc bbe8 	b.w	bda58 <network_disconnect>

000c1288 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c1288:	2200      	movs	r2, #0
   c128a:	6840      	ldr	r0, [r0, #4]
   c128c:	4611      	mov	r1, r2
   c128e:	f7fc bbdb 	b.w	bda48 <network_connecting>

000c1292 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c1292:	2200      	movs	r2, #0
   c1294:	6840      	ldr	r0, [r0, #4]
   c1296:	4611      	mov	r1, r2
   c1298:	f7fc bbe6 	b.w	bda68 <network_ready>

000c129c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c129c:	2300      	movs	r3, #0
   c129e:	6840      	ldr	r0, [r0, #4]
   c12a0:	461a      	mov	r2, r3
   c12a2:	4619      	mov	r1, r3
   c12a4:	f7fc bbe8 	b.w	bda78 <network_on>

000c12a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c12a8:	2300      	movs	r3, #0
   c12aa:	6840      	ldr	r0, [r0, #4]
   c12ac:	461a      	mov	r2, r3
   c12ae:	4619      	mov	r1, r3
   c12b0:	f7fc bbea 	b.w	bda88 <network_off>

000c12b4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c12b4:	6840      	ldr	r0, [r0, #4]
   c12b6:	2100      	movs	r1, #0
   c12b8:	f7fc bc0e 	b.w	bdad8 <network_is_on>

000c12bc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c12bc:	6840      	ldr	r0, [r0, #4]
   c12be:	2100      	movs	r1, #0
   c12c0:	f7fc bc12 	b.w	bdae8 <network_is_off>

000c12c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c12c4:	6840      	ldr	r0, [r0, #4]
   c12c6:	2200      	movs	r2, #0
   c12c8:	f081 0101 	eor.w	r1, r1, #1
   c12cc:	f7fc bbe4 	b.w	bda98 <network_listen>

000c12d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c12d0:	6840      	ldr	r0, [r0, #4]
   c12d2:	2200      	movs	r2, #0
   c12d4:	f7fc bbf0 	b.w	bdab8 <network_set_listen_timeout>

000c12d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c12d8:	2200      	movs	r2, #0
   c12da:	6840      	ldr	r0, [r0, #4]
   c12dc:	4611      	mov	r1, r2
   c12de:	f7fc bbf3 	b.w	bdac8 <network_get_listen_timeout>

000c12e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c12e2:	2200      	movs	r2, #0
   c12e4:	6840      	ldr	r0, [r0, #4]
   c12e6:	4611      	mov	r1, r2
   c12e8:	f7fc bbde 	b.w	bdaa8 <network_listening>

000c12ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c12ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c12f0:	b095      	sub	sp, #84	; 0x54
   c12f2:	4614      	mov	r4, r2
   c12f4:	460d      	mov	r5, r1
   c12f6:	4607      	mov	r7, r0
    IPAddress addr;
   c12f8:	f7ff fdb4 	bl	c0e64 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c12fc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c12fe:	221c      	movs	r2, #28
   c1300:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c1302:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c1304:	f002 fd64 	bl	c3dd0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c1308:	2340      	movs	r3, #64	; 0x40
   c130a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c130c:	4620      	mov	r0, r4
   c130e:	466b      	mov	r3, sp
   c1310:	aa0c      	add	r2, sp, #48	; 0x30
   c1312:	2100      	movs	r1, #0
   c1314:	f7fc f860 	bl	bd3d8 <netdb_getaddrinfo>
    if (!r) {
   c1318:	4604      	mov	r4, r0
   c131a:	2800      	cmp	r0, #0
   c131c:	d14b      	bne.n	c13b6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c131e:	4602      	mov	r2, r0
   c1320:	2101      	movs	r1, #1
   c1322:	6868      	ldr	r0, [r5, #4]
   c1324:	f7fc fba0 	bl	bda68 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c1328:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c132a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c132c:	4622      	mov	r2, r4
   c132e:	6868      	ldr	r0, [r5, #4]
   c1330:	f7fc fb9a 	bl	bda68 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c1334:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c1336:	4681      	mov	r9, r0
        bool ok = false;
   c1338:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c133a:	2e00      	cmp	r6, #0
   c133c:	d03b      	beq.n	c13b6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c133e:	2900      	cmp	r1, #0
   c1340:	d139      	bne.n	c13b6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c1342:	6873      	ldr	r3, [r6, #4]
   c1344:	2b02      	cmp	r3, #2
   c1346:	d003      	beq.n	c1350 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c1348:	2b0a      	cmp	r3, #10
   c134a:	d011      	beq.n	c1370 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c134c:	69f6      	ldr	r6, [r6, #28]
   c134e:	e7f4      	b.n	c133a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c1350:	f1b8 0f00 	cmp.w	r8, #0
   c1354:	d0fa      	beq.n	c134c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c1356:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c1358:	a806      	add	r0, sp, #24
   c135a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c135c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c135e:	f7ff fdaf 	bl	c0ec0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c1362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c1364:	1d3c      	adds	r4, r7, #4
   c1366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c1368:	682b      	ldr	r3, [r5, #0]
   c136a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c136c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c136e:	e7ed      	b.n	c134c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c1370:	f1b9 0f00 	cmp.w	r9, #0
   c1374:	d0ea      	beq.n	c134c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c1376:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c1378:	2210      	movs	r2, #16
   c137a:	a801      	add	r0, sp, #4
   c137c:	f002 fd28 	bl	c3dd0 <memset>
                    a.v = 6;
   c1380:	2306      	movs	r3, #6
   c1382:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c1386:	ad01      	add	r5, sp, #4
   c1388:	f104 0308 	add.w	r3, r4, #8
   c138c:	3418      	adds	r4, #24
   c138e:	6818      	ldr	r0, [r3, #0]
   c1390:	6859      	ldr	r1, [r3, #4]
   c1392:	462a      	mov	r2, r5
   c1394:	c203      	stmia	r2!, {r0, r1}
   c1396:	3308      	adds	r3, #8
   c1398:	42a3      	cmp	r3, r4
   c139a:	4615      	mov	r5, r2
   c139c:	d1f7      	bne.n	c138e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c139e:	a901      	add	r1, sp, #4
   c13a0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c13a2:	ad07      	add	r5, sp, #28
   c13a4:	f7ff fd6c 	bl	c0e80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c13a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c13aa:	1d3c      	adds	r4, r7, #4
   c13ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c13ae:	682b      	ldr	r3, [r5, #0]
   c13b0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c13b2:	4649      	mov	r1, r9
   c13b4:	e7ca      	b.n	c134c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c13b6:	9800      	ldr	r0, [sp, #0]
   c13b8:	f7fc f806 	bl	bd3c8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c13bc:	4638      	mov	r0, r7
   c13be:	b015      	add	sp, #84	; 0x54
   c13c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c13c4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c13c4:	4b02      	ldr	r3, [pc, #8]	; (c13d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c13c6:	4a03      	ldr	r2, [pc, #12]	; (c13d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c13c8:	601a      	str	r2, [r3, #0]
   c13ca:	2200      	movs	r2, #0
   c13cc:	605a      	str	r2, [r3, #4]

} // spark
   c13ce:	4770      	bx	lr
   c13d0:	2003e720 	.word	0x2003e720
   c13d4:	000c77d0 	.word	0x000c77d0

000c13d8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   c13d8:	f100 0310 	add.w	r3, r0, #16
   c13dc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   c13de:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   c13e2:	2901      	cmp	r1, #1
   c13e4:	4618      	mov	r0, r3
   c13e6:	d108      	bne.n	c13fa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   c13e8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   c13ec:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   c13f0:	3a01      	subs	r2, #1
   c13f2:	f103 0310 	add.w	r3, r3, #16
   c13f6:	d1f2      	bne.n	c13de <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   c13f8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   c13fa:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   c13fc:	bf04      	itt	eq
   c13fe:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   c1402:	1852      	addeq	r2, r2, r1
   c1404:	e7f4      	b.n	c13f0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000c1406 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   c1406:	b40e      	push	{r1, r2, r3}
   c1408:	b5f0      	push	{r4, r5, r6, r7, lr}
   c140a:	b088      	sub	sp, #32
   c140c:	af00      	add	r7, sp, #0
   c140e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1412:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   c1414:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1418:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   c141a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c141c:	462b      	mov	r3, r5
   c141e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   c1420:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1422:	f7fc fbc9 	bl	bdbb8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   c1426:	280f      	cmp	r0, #15
   c1428:	687a      	ldr	r2, [r7, #4]
   c142a:	d91a      	bls.n	c1462 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   c142c:	f100 0308 	add.w	r3, r0, #8
   c1430:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   c1434:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   c1436:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c143a:	1c41      	adds	r1, r0, #1
   c143c:	462b      	mov	r3, r5
   c143e:	4668      	mov	r0, sp
        va_start(args, fmt);
   c1440:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1442:	f7fc fbb9 	bl	bdbb8 <vsnprintf>
        if (n > 0) {
   c1446:	1e02      	subs	r2, r0, #0
   c1448:	dd04      	ble.n	c1454 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   c144a:	6823      	ldr	r3, [r4, #0]
   c144c:	4669      	mov	r1, sp
   c144e:	689b      	ldr	r3, [r3, #8]
   c1450:	4620      	mov	r0, r4
   c1452:	4798      	blx	r3
   c1454:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   c1456:	3720      	adds	r7, #32
   c1458:	46bd      	mov	sp, r7
   c145a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c145e:	b003      	add	sp, #12
   c1460:	4770      	bx	lr
    } else if (n > 0) {
   c1462:	2800      	cmp	r0, #0
   c1464:	d0f7      	beq.n	c1456 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   c1466:	6823      	ldr	r3, [r4, #0]
   c1468:	4602      	mov	r2, r0
   c146a:	689b      	ldr	r3, [r3, #8]
   c146c:	f107 0110 	add.w	r1, r7, #16
   c1470:	4620      	mov	r0, r4
   c1472:	4798      	blx	r3
}
   c1474:	e7ef      	b.n	c1456 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000c1476 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c1476:	b538      	push	{r3, r4, r5, lr}
   c1478:	680b      	ldr	r3, [r1, #0]
   c147a:	6003      	str	r3, [r0, #0]
   c147c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   c147e:	6843      	ldr	r3, [r0, #4]
   c1480:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c1482:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   c1484:	d008      	beq.n	c1498 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   c1486:	b115      	cbz	r5, c148e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   c1488:	686b      	ldr	r3, [r5, #4]
   c148a:	3301      	adds	r3, #1
   c148c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   c148e:	6860      	ldr	r0, [r4, #4]
   c1490:	b108      	cbz	r0, c1496 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   c1492:	f7fc ff52 	bl	be33a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   c1496:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c1498:	bd38      	pop	{r3, r4, r5, pc}

000c149a <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   c149a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c149c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   c149e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c14a2:	689b      	ldr	r3, [r3, #8]
   c14a4:	2201      	movs	r2, #1
   c14a6:	f10d 0107 	add.w	r1, sp, #7
   c14aa:	4798      	blx	r3
}
   c14ac:	b003      	add	sp, #12
   c14ae:	f85d fb04 	ldr.w	pc, [sp], #4

000c14b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   c14b2:	460b      	mov	r3, r1
   c14b4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   c14b6:	2200      	movs	r2, #0
   c14b8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   c14ba:	e9c0 2200 	strd	r2, r2, [r0]
   c14be:	4604      	mov	r4, r0
        t_ = t;
   c14c0:	6083      	str	r3, [r0, #8]
    if (t) {
   c14c2:	b90b      	cbnz	r3, c14c8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   c14c4:	4620      	mov	r0, r4
   c14c6:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   c14c8:	f7ff ffd5 	bl	c1476 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   c14cc:	e7fa      	b.n	c14c4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000c14ce <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   c14ce:	6883      	ldr	r3, [r0, #8]
   c14d0:	b1eb      	cbz	r3, c150e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   c14d2:	781a      	ldrb	r2, [r3, #0]
   c14d4:	2a03      	cmp	r2, #3
   c14d6:	d81a      	bhi.n	c150e <_ZNK5spark9JSONValue4typeEv+0x40>
   c14d8:	e8df f002 	tbb	[pc, r2]
   c14dc:	1b021704 	.word	0x1b021704
   c14e0:	2005      	movs	r0, #5
   c14e2:	4770      	bx	lr
        const char c = d_->json[t_->start];
   c14e4:	6802      	ldr	r2, [r0, #0]
   c14e6:	685b      	ldr	r3, [r3, #4]
   c14e8:	6852      	ldr	r2, [r2, #4]
   c14ea:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   c14ec:	282d      	cmp	r0, #45	; 0x2d
   c14ee:	d012      	beq.n	c1516 <_ZNK5spark9JSONValue4typeEv+0x48>
   c14f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c14f4:	2b09      	cmp	r3, #9
   c14f6:	d90e      	bls.n	c1516 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   c14f8:	2874      	cmp	r0, #116	; 0x74
   c14fa:	d00e      	beq.n	c151a <_ZNK5spark9JSONValue4typeEv+0x4c>
   c14fc:	2866      	cmp	r0, #102	; 0x66
   c14fe:	d00c      	beq.n	c151a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   c1500:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   c1504:	4258      	negs	r0, r3
   c1506:	4158      	adcs	r0, r3
   c1508:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   c150a:	2006      	movs	r0, #6
   c150c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   c150e:	2000      	movs	r0, #0
   c1510:	4770      	bx	lr
        return JSON_TYPE_STRING;
   c1512:	2004      	movs	r0, #4
   c1514:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   c1516:	2003      	movs	r0, #3
   c1518:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   c151a:	2002      	movs	r0, #2
}
   c151c:	4770      	bx	lr

000c151e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   c151e:	b510      	push	{r4, lr}
   c1520:	4604      	mov	r4, r0
    switch (type()) {
   c1522:	f7ff ffd4 	bl	c14ce <_ZNK5spark9JSONValue4typeEv>
   c1526:	2802      	cmp	r0, #2
   c1528:	d00e      	beq.n	c1548 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   c152a:	1ec3      	subs	r3, r0, #3
   c152c:	b2db      	uxtb	r3, r3
   c152e:	2b01      	cmp	r3, #1
   c1530:	d814      	bhi.n	c155c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   c1532:	6822      	ldr	r2, [r4, #0]
   c1534:	68a3      	ldr	r3, [r4, #8]
   c1536:	6850      	ldr	r0, [r2, #4]
   c1538:	685b      	ldr	r3, [r3, #4]
}
   c153a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   c153e:	220a      	movs	r2, #10
   c1540:	2100      	movs	r1, #0
   c1542:	4418      	add	r0, r3
   c1544:	f003 bbf8 	b.w	c4d38 <strtol>
        const char* const s = d_->json + t_->start;
   c1548:	6822      	ldr	r2, [r4, #0]
   c154a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   c154c:	6852      	ldr	r2, [r2, #4]
   c154e:	685b      	ldr	r3, [r3, #4]
   c1550:	5cd0      	ldrb	r0, [r2, r3]
   c1552:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   c1556:	4258      	negs	r0, r3
   c1558:	4158      	adcs	r0, r3
}
   c155a:	bd10      	pop	{r4, pc}
    switch (type()) {
   c155c:	2000      	movs	r0, #0
   c155e:	e7fc      	b.n	c155a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000c1560 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   c1560:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c1562:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   c1564:	e9c0 3300 	strd	r3, r3, [r0]
   c1568:	4604      	mov	r4, r0
        n_(0) {
   c156a:	480e      	ldr	r0, [pc, #56]	; (c15a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   c156c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   c1570:	b1a9      	cbz	r1, c159e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   c1572:	780b      	ldrb	r3, [r1, #0]
   c1574:	2b03      	cmp	r3, #3
   c1576:	d006      	beq.n	c1586 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   c1578:	b98b      	cbnz	r3, c159e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   c157a:	6813      	ldr	r3, [r2, #0]
   c157c:	6858      	ldr	r0, [r3, #4]
   c157e:	684b      	ldr	r3, [r1, #4]
   c1580:	5cc3      	ldrb	r3, [r0, r3]
   c1582:	2b6e      	cmp	r3, #110	; 0x6e
   c1584:	d007      	beq.n	c1596 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   c1586:	6813      	ldr	r3, [r2, #0]
   c1588:	684d      	ldr	r5, [r1, #4]
   c158a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   c158c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   c158e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   c1590:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   c1592:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   c1594:	60e3      	str	r3, [r4, #12]
   c1596:	4611      	mov	r1, r2
   c1598:	4620      	mov	r0, r4
   c159a:	f7ff ff6c 	bl	c1476 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c159e:	4620      	mov	r0, r4
   c15a0:	bd38      	pop	{r3, r4, r5, pc}
   c15a2:	bf00      	nop
   c15a4:	000c7628 	.word	0x000c7628

000c15a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   c15a8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c15aa:	2500      	movs	r5, #0
   c15ac:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   c15ae:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   c15b2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   c15b6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c15ba:	4604      	mov	r4, r0
   c15bc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   c15be:	b14b      	cbz	r3, c15d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   c15c0:	781a      	ldrb	r2, [r3, #0]
   c15c2:	2a01      	cmp	r2, #1
   c15c4:	d106      	bne.n	c15d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   c15c6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   c15ca:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   c15cc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   c15ce:	6143      	str	r3, [r0, #20]
   c15d0:	f7ff ff51 	bl	c1476 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c15d4:	4620      	mov	r0, r4
   c15d6:	bd38      	pop	{r3, r4, r5, pc}

000c15d8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   c15d8:	b510      	push	{r4, lr}
    if (!n_) {
   c15da:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   c15dc:	4604      	mov	r4, r0
    if (!n_) {
   c15de:	b163      	cbz	r3, c15fa <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   c15e0:	6880      	ldr	r0, [r0, #8]
   c15e2:	60e0      	str	r0, [r4, #12]
    --n_;
   c15e4:	3b01      	subs	r3, #1
    ++t_;
   c15e6:	3010      	adds	r0, #16
   c15e8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   c15ea:	6120      	str	r0, [r4, #16]
    --n_;
   c15ec:	6163      	str	r3, [r4, #20]
    if (n_) {
   c15ee:	b113      	cbz	r3, c15f6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   c15f0:	f7ff fef2 	bl	c13d8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   c15f4:	60a0      	str	r0, [r4, #8]
    return true;
   c15f6:	2001      	movs	r0, #1
   c15f8:	e000      	b.n	c15fc <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   c15fa:	4618      	mov	r0, r3
}
   c15fc:	bd10      	pop	{r4, pc}

000c15fe <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   c15fe:	b510      	push	{r4, lr}
    write('}');
   c1600:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   c1602:	4604      	mov	r4, r0
    write('}');
   c1604:	f7ff ff49 	bl	c149a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   c1608:	2301      	movs	r3, #1
   c160a:	7123      	strb	r3, [r4, #4]
}
   c160c:	4620      	mov	r0, r4
   c160e:	bd10      	pop	{r4, pc}

000c1610 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   c1610:	b508      	push	{r3, lr}
    switch (state_) {
   c1612:	7903      	ldrb	r3, [r0, #4]
   c1614:	2b01      	cmp	r3, #1
   c1616:	d002      	beq.n	c161e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   c1618:	2b02      	cmp	r3, #2
   c161a:	d004      	beq.n	c1626 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   c161c:	bd08      	pop	{r3, pc}
        write(',');
   c161e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   c1620:	f7ff ff3b 	bl	c149a <_ZN5spark10JSONWriter5writeEc>
}
   c1624:	e7fa      	b.n	c161c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   c1626:	213a      	movs	r1, #58	; 0x3a
   c1628:	e7fa      	b.n	c1620 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000c162a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   c162a:	b510      	push	{r4, lr}
   c162c:	4604      	mov	r4, r0
    writeSeparator();
   c162e:	f7ff ffef 	bl	c1610 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   c1632:	4620      	mov	r0, r4
   c1634:	217b      	movs	r1, #123	; 0x7b
   c1636:	f7ff ff30 	bl	c149a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   c163a:	2300      	movs	r3, #0
   c163c:	7123      	strb	r3, [r4, #4]
}
   c163e:	4620      	mov	r0, r4
   c1640:	bd10      	pop	{r4, pc}
	...

000c1644 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   c1644:	b513      	push	{r0, r1, r4, lr}
   c1646:	4604      	mov	r4, r0
   c1648:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c164a:	f7ff ffe1 	bl	c1610 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   c164e:	6823      	ldr	r3, [r4, #0]
   c1650:	9a01      	ldr	r2, [sp, #4]
   c1652:	68db      	ldr	r3, [r3, #12]
   c1654:	4903      	ldr	r1, [pc, #12]	; (c1664 <_ZN5spark10JSONWriter5valueEi+0x20>)
   c1656:	4620      	mov	r0, r4
   c1658:	4798      	blx	r3
    state_ = NEXT;
   c165a:	2301      	movs	r3, #1
}
   c165c:	4620      	mov	r0, r4
    state_ = NEXT;
   c165e:	7123      	strb	r3, [r4, #4]
}
   c1660:	b002      	add	sp, #8
   c1662:	bd10      	pop	{r4, pc}
   c1664:	000c60c6 	.word	0x000c60c6

000c1668 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   c1668:	b513      	push	{r0, r1, r4, lr}
   c166a:	4604      	mov	r4, r0
   c166c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c166e:	f7ff ffcf 	bl	c1610 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   c1672:	6823      	ldr	r3, [r4, #0]
   c1674:	9a01      	ldr	r2, [sp, #4]
   c1676:	68db      	ldr	r3, [r3, #12]
   c1678:	4903      	ldr	r1, [pc, #12]	; (c1688 <_ZN5spark10JSONWriter5valueEj+0x20>)
   c167a:	4620      	mov	r0, r4
   c167c:	4798      	blx	r3
    state_ = NEXT;
   c167e:	2301      	movs	r3, #1
}
   c1680:	4620      	mov	r0, r4
    state_ = NEXT;
   c1682:	7123      	strb	r3, [r4, #4]
}
   c1684:	b002      	add	sp, #8
   c1686:	bd10      	pop	{r4, pc}
   c1688:	000c7804 	.word	0x000c7804

000c168c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c168c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1690:	460d      	mov	r5, r1
    write('"');
   c1692:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c1694:	4690      	mov	r8, r2
   c1696:	4604      	mov	r4, r0
    write('"');
   c1698:	f7ff feff 	bl	c149a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   c169c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; c1744 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   c16a0:	44a8      	add	r8, r5
    const char *s = str;
   c16a2:	462f      	mov	r7, r5
    while (s != end) {
   c16a4:	4547      	cmp	r7, r8
   c16a6:	46ba      	mov	sl, r7
   c16a8:	d03d      	beq.n	c1726 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   c16aa:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   c16ae:	2e22      	cmp	r6, #34	; 0x22
   c16b0:	d006      	beq.n	c16c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c16b2:	2e5c      	cmp	r6, #92	; 0x5c
   c16b4:	d004      	beq.n	c16c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c16b6:	4630      	mov	r0, r6
   c16b8:	f002 fb4a 	bl	c3d50 <isprint>
   c16bc:	2800      	cmp	r0, #0
   c16be:	d1f1      	bne.n	c16a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   c16c0:	6823      	ldr	r3, [r4, #0]
   c16c2:	ebaa 0205 	sub.w	r2, sl, r5
   c16c6:	689b      	ldr	r3, [r3, #8]
   c16c8:	4629      	mov	r1, r5
   c16ca:	4620      	mov	r0, r4
   c16cc:	4798      	blx	r3
            write('\\');
   c16ce:	215c      	movs	r1, #92	; 0x5c
   c16d0:	4620      	mov	r0, r4
   c16d2:	f7ff fee2 	bl	c149a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   c16d6:	2e0d      	cmp	r6, #13
   c16d8:	d80a      	bhi.n	c16f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   c16da:	2e07      	cmp	r6, #7
   c16dc:	d91c      	bls.n	c1718 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c16de:	f1a6 0308 	sub.w	r3, r6, #8
   c16e2:	2b05      	cmp	r3, #5
   c16e4:	d818      	bhi.n	c1718 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c16e6:	e8df f003 	tbb	[pc, r3]
   c16ea:	0f0d      	.short	0x0f0d
   c16ec:	15131711 	.word	0x15131711
   c16f0:	2e22      	cmp	r6, #34	; 0x22
   c16f2:	d001      	beq.n	c16f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   c16f4:	2e5c      	cmp	r6, #92	; 0x5c
   c16f6:	d10f      	bne.n	c1718 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   c16f8:	4631      	mov	r1, r6
                write('b');
   c16fa:	4620      	mov	r0, r4
   c16fc:	f7ff fecd 	bl	c149a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   c1700:	463d      	mov	r5, r7
    while (s != end) {
   c1702:	e7cf      	b.n	c16a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   c1704:	2162      	movs	r1, #98	; 0x62
   c1706:	e7f8      	b.n	c16fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   c1708:	2174      	movs	r1, #116	; 0x74
   c170a:	e7f6      	b.n	c16fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   c170c:	216e      	movs	r1, #110	; 0x6e
   c170e:	e7f4      	b.n	c16fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   c1710:	2166      	movs	r1, #102	; 0x66
   c1712:	e7f2      	b.n	c16fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   c1714:	2172      	movs	r1, #114	; 0x72
   c1716:	e7f0      	b.n	c16fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   c1718:	6823      	ldr	r3, [r4, #0]
   c171a:	4632      	mov	r2, r6
   c171c:	68db      	ldr	r3, [r3, #12]
   c171e:	4649      	mov	r1, r9
   c1720:	4620      	mov	r0, r4
   c1722:	4798      	blx	r3
                break;
   c1724:	e7ec      	b.n	c1700 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   c1726:	42bd      	cmp	r5, r7
   c1728:	d005      	beq.n	c1736 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   c172a:	6823      	ldr	r3, [r4, #0]
   c172c:	1b7a      	subs	r2, r7, r5
   c172e:	689b      	ldr	r3, [r3, #8]
   c1730:	4629      	mov	r1, r5
   c1732:	4620      	mov	r0, r4
   c1734:	4798      	blx	r3
    }
    write('"');
   c1736:	2122      	movs	r1, #34	; 0x22
   c1738:	4620      	mov	r0, r4
   c173a:	f7ff feae 	bl	c149a <_ZN5spark10JSONWriter5writeEc>
}
   c173e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c1742:	bf00      	nop
   c1744:	000c7807 	.word	0x000c7807

000c1748 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   c1748:	b513      	push	{r0, r1, r4, lr}
   c174a:	4604      	mov	r4, r0
   c174c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c1750:	f7ff ff5e 	bl	c1610 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   c1754:	4620      	mov	r0, r4
   c1756:	e9dd 2100 	ldrd	r2, r1, [sp]
   c175a:	f7ff ff97 	bl	c168c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   c175e:	2302      	movs	r3, #2
}
   c1760:	4620      	mov	r0, r4
    state_ = VALUE;
   c1762:	7123      	strb	r3, [r4, #4]
}
   c1764:	b002      	add	sp, #8
   c1766:	bd10      	pop	{r4, pc}

000c1768 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   c1768:	b513      	push	{r0, r1, r4, lr}
   c176a:	4604      	mov	r4, r0
   c176c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c1770:	f7ff ff4e 	bl	c1610 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   c1774:	4620      	mov	r0, r4
   c1776:	e9dd 2100 	ldrd	r2, r1, [sp]
   c177a:	f7ff ff87 	bl	c168c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   c177e:	2301      	movs	r3, #1
}
   c1780:	4620      	mov	r0, r4
    state_ = NEXT;
   c1782:	7123      	strb	r3, [r4, #4]
}
   c1784:	b002      	add	sp, #8
   c1786:	bd10      	pop	{r4, pc}

000c1788 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c1788:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c178a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c178c:	d902      	bls.n	c1794 <pinAvailable+0xc>
    return false;
   c178e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c1790:	b002      	add	sp, #8
   c1792:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c1794:	f1a0 030b 	sub.w	r3, r0, #11
   c1798:	2b02      	cmp	r3, #2
   c179a:	d81a      	bhi.n	c17d2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c179c:	4c17      	ldr	r4, [pc, #92]	; (c17fc <pinAvailable+0x74>)
   c179e:	7821      	ldrb	r1, [r4, #0]
   c17a0:	f3bf 8f5b 	dmb	ish
   c17a4:	f011 0101 	ands.w	r1, r1, #1
   c17a8:	d10b      	bne.n	c17c2 <pinAvailable+0x3a>
   c17aa:	4620      	mov	r0, r4
   c17ac:	9101      	str	r1, [sp, #4]
   c17ae:	f7f2 fc87 	bl	b40c0 <__cxa_guard_acquire>
   c17b2:	9901      	ldr	r1, [sp, #4]
   c17b4:	b128      	cbz	r0, c17c2 <pinAvailable+0x3a>
   c17b6:	4812      	ldr	r0, [pc, #72]	; (c1800 <pinAvailable+0x78>)
   c17b8:	f7fc faa2 	bl	bdd00 <_ZN8SPIClassC1E19hal_spi_interface_t>
   c17bc:	4620      	mov	r0, r4
   c17be:	f7f2 fc84 	bl	b40ca <__cxa_guard_release>
   c17c2:	4b0f      	ldr	r3, [pc, #60]	; (c1800 <pinAvailable+0x78>)
   c17c4:	7818      	ldrb	r0, [r3, #0]
   c17c6:	f7fc f829 	bl	bd81c <hal_spi_is_enabled>
   c17ca:	2800      	cmp	r0, #0
   c17cc:	d1df      	bne.n	c178e <pinAvailable+0x6>
  return true; // 'pin' is available
   c17ce:	2001      	movs	r0, #1
   c17d0:	e7de      	b.n	c1790 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c17d2:	2801      	cmp	r0, #1
   c17d4:	d809      	bhi.n	c17ea <pinAvailable+0x62>
   c17d6:	f000 f8ad 	bl	c1934 <_Z19__fetch_global_Wirev>
   c17da:	2100      	movs	r1, #0
   c17dc:	7c00      	ldrb	r0, [r0, #16]
   c17de:	f7fb ffe5 	bl	bd7ac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c17e2:	f080 0001 	eor.w	r0, r0, #1
   c17e6:	b2c0      	uxtb	r0, r0
   c17e8:	e7d2      	b.n	c1790 <pinAvailable+0x8>
   c17ea:	3809      	subs	r0, #9
   c17ec:	2801      	cmp	r0, #1
   c17ee:	d8ee      	bhi.n	c17ce <pinAvailable+0x46>
   c17f0:	f000 f864 	bl	c18bc <_Z22__fetch_global_Serial1v>
   c17f4:	7c00      	ldrb	r0, [r0, #16]
   c17f6:	f7fb ff71 	bl	bd6dc <hal_usart_is_enabled>
   c17fa:	e7f2      	b.n	c17e2 <pinAvailable+0x5a>
   c17fc:	2003dd68 	.word	0x2003dd68
   c1800:	2003dd6c 	.word	0x2003dd6c

000c1804 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1804:	2825      	cmp	r0, #37	; 0x25
{
   c1806:	b538      	push	{r3, r4, r5, lr}
   c1808:	4604      	mov	r4, r0
   c180a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c180c:	d80a      	bhi.n	c1824 <pinMode+0x20>
   c180e:	29ff      	cmp	r1, #255	; 0xff
   c1810:	d008      	beq.n	c1824 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c1812:	f7ff ffb9 	bl	c1788 <pinAvailable>
   c1816:	b128      	cbz	r0, c1824 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c1818:	4629      	mov	r1, r5
   c181a:	4620      	mov	r0, r4
}
   c181c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c1820:	f7fb bdea 	b.w	bd3f8 <HAL_Pin_Mode>
}
   c1824:	bd38      	pop	{r3, r4, r5, pc}

000c1826 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c1826:	b538      	push	{r3, r4, r5, lr}
   c1828:	4604      	mov	r4, r0
   c182a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c182c:	f7fb fdec 	bl	bd408 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c1830:	28ff      	cmp	r0, #255	; 0xff
   c1832:	d010      	beq.n	c1856 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c1834:	2806      	cmp	r0, #6
   c1836:	d804      	bhi.n	c1842 <digitalWrite+0x1c>
   c1838:	234d      	movs	r3, #77	; 0x4d
   c183a:	fa23 f000 	lsr.w	r0, r3, r0
   c183e:	07c3      	lsls	r3, r0, #31
   c1840:	d409      	bmi.n	c1856 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c1842:	4620      	mov	r0, r4
   c1844:	f7ff ffa0 	bl	c1788 <pinAvailable>
   c1848:	b128      	cbz	r0, c1856 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c184a:	4629      	mov	r1, r5
   c184c:	4620      	mov	r0, r4
}
   c184e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c1852:	f7fb bde1 	b.w	bd418 <HAL_GPIO_Write>
}
   c1856:	bd38      	pop	{r3, r4, r5, pc}

000c1858 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c1858:	280d      	cmp	r0, #13
{
   c185a:	b510      	push	{r4, lr}
   c185c:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c185e:	bf9c      	itt	ls
   c1860:	340e      	addls	r4, #14
   c1862:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c1864:	4620      	mov	r0, r4
   c1866:	f7ff ff8f 	bl	c1788 <pinAvailable>
   c186a:	b150      	cbz	r0, c1882 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c186c:	2103      	movs	r1, #3
   c186e:	4620      	mov	r0, r4
   c1870:	f7fb fdba 	bl	bd3e8 <HAL_Validate_Pin_Function>
   c1874:	2803      	cmp	r0, #3
   c1876:	d104      	bne.n	c1882 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c1878:	4620      	mov	r0, r4
}
   c187a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c187e:	f7fb bde3 	b.w	bd448 <hal_adc_read>
}
   c1882:	2000      	movs	r0, #0
   c1884:	bd10      	pop	{r4, pc}

000c1886 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1886:	4770      	bx	lr

000c1888 <_Z20acquireSerial1Bufferv>:
{
   c1888:	b538      	push	{r3, r4, r5, lr}
   c188a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c188c:	2514      	movs	r5, #20
   c188e:	462a      	mov	r2, r5
   c1890:	2100      	movs	r1, #0
   c1892:	f002 fa9d 	bl	c3dd0 <memset>
   c1896:	8025      	strh	r5, [r4, #0]
   c1898:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c189a:	4907      	ldr	r1, [pc, #28]	; (c18b8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c189c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c189e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c18a0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c18a2:	f000 f86d 	bl	c1980 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c18a6:	4904      	ldr	r1, [pc, #16]	; (c18b8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c18a8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c18aa:	4628      	mov	r0, r5
   c18ac:	f000 f868 	bl	c1980 <_ZnajRKSt9nothrow_t>
    };
   c18b0:	60e0      	str	r0, [r4, #12]
}
   c18b2:	4620      	mov	r0, r4
   c18b4:	bd38      	pop	{r3, r4, r5, pc}
   c18b6:	bf00      	nop
   c18b8:	000c780d 	.word	0x000c780d

000c18bc <_Z22__fetch_global_Serial1v>:
{
   c18bc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c18be:	4d0e      	ldr	r5, [pc, #56]	; (c18f8 <_Z22__fetch_global_Serial1v+0x3c>)
   c18c0:	7829      	ldrb	r1, [r5, #0]
   c18c2:	f3bf 8f5b 	dmb	ish
   c18c6:	f011 0401 	ands.w	r4, r1, #1
{
   c18ca:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c18cc:	d111      	bne.n	c18f2 <_Z22__fetch_global_Serial1v+0x36>
   c18ce:	4628      	mov	r0, r5
   c18d0:	f7f2 fbf6 	bl	b40c0 <__cxa_guard_acquire>
   c18d4:	b168      	cbz	r0, c18f2 <_Z22__fetch_global_Serial1v+0x36>
   c18d6:	a801      	add	r0, sp, #4
   c18d8:	f7ff ffd6 	bl	c1888 <_Z20acquireSerial1Bufferv>
   c18dc:	aa01      	add	r2, sp, #4
   c18de:	4621      	mov	r1, r4
   c18e0:	4806      	ldr	r0, [pc, #24]	; (c18fc <_Z22__fetch_global_Serial1v+0x40>)
   c18e2:	f7ff fc13 	bl	c110c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c18e6:	4628      	mov	r0, r5
   c18e8:	f7f2 fbef 	bl	b40ca <__cxa_guard_release>
   c18ec:	4804      	ldr	r0, [pc, #16]	; (c1900 <_Z22__fetch_global_Serial1v+0x44>)
   c18ee:	f002 fa21 	bl	c3d34 <atexit>
    return serial1;
}
   c18f2:	4802      	ldr	r0, [pc, #8]	; (c18fc <_Z22__fetch_global_Serial1v+0x40>)
   c18f4:	b007      	add	sp, #28
   c18f6:	bd30      	pop	{r4, r5, pc}
   c18f8:	2003e728 	.word	0x2003e728
   c18fc:	2003e72c 	.word	0x2003e72c
   c1900:	000c1887 	.word	0x000c1887

000c1904 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1904:	4770      	bx	lr
	...

000c1908 <_Z17acquireWireBufferv>:
{
   c1908:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c190a:	2520      	movs	r5, #32
   c190c:	2314      	movs	r3, #20
{
   c190e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c1910:	6003      	str	r3, [r0, #0]
   c1912:	6085      	str	r5, [r0, #8]
   c1914:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1916:	4906      	ldr	r1, [pc, #24]	; (c1930 <_Z17acquireWireBufferv+0x28>)
   c1918:	4628      	mov	r0, r5
   c191a:	f000 f831 	bl	c1980 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c191e:	4904      	ldr	r1, [pc, #16]	; (c1930 <_Z17acquireWireBufferv+0x28>)
	};
   c1920:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1922:	4628      	mov	r0, r5
   c1924:	f000 f82c 	bl	c1980 <_ZnajRKSt9nothrow_t>
	};
   c1928:	60e0      	str	r0, [r4, #12]
}
   c192a:	4620      	mov	r0, r4
   c192c:	bd38      	pop	{r3, r4, r5, pc}
   c192e:	bf00      	nop
   c1930:	000c780d 	.word	0x000c780d

000c1934 <_Z19__fetch_global_Wirev>:
{
   c1934:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1936:	4d0e      	ldr	r5, [pc, #56]	; (c1970 <_Z19__fetch_global_Wirev+0x3c>)
   c1938:	7829      	ldrb	r1, [r5, #0]
   c193a:	f3bf 8f5b 	dmb	ish
   c193e:	f011 0401 	ands.w	r4, r1, #1
{
   c1942:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1944:	d111      	bne.n	c196a <_Z19__fetch_global_Wirev+0x36>
   c1946:	4628      	mov	r0, r5
   c1948:	f7f2 fbba 	bl	b40c0 <__cxa_guard_acquire>
   c194c:	b168      	cbz	r0, c196a <_Z19__fetch_global_Wirev+0x36>
   c194e:	a801      	add	r0, sp, #4
   c1950:	f7ff ffda 	bl	c1908 <_Z17acquireWireBufferv>
   c1954:	aa01      	add	r2, sp, #4
   c1956:	4621      	mov	r1, r4
   c1958:	4806      	ldr	r0, [pc, #24]	; (c1974 <_Z19__fetch_global_Wirev+0x40>)
   c195a:	f7ff fc35 	bl	c11c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c195e:	4628      	mov	r0, r5
   c1960:	f7f2 fbb3 	bl	b40ca <__cxa_guard_release>
   c1964:	4804      	ldr	r0, [pc, #16]	; (c1978 <_Z19__fetch_global_Wirev+0x44>)
   c1966:	f002 f9e5 	bl	c3d34 <atexit>
	return wire;
}
   c196a:	4802      	ldr	r0, [pc, #8]	; (c1974 <_Z19__fetch_global_Wirev+0x40>)
   c196c:	b007      	add	sp, #28
   c196e:	bd30      	pop	{r4, r5, pc}
   c1970:	2003e744 	.word	0x2003e744
   c1974:	2003e748 	.word	0x2003e748
   c1978:	000c1905 	.word	0x000c1905

000c197c <_ZnwjRKSt9nothrow_t>:
   c197c:	f7f2 bb8b 	b.w	b4096 <_Znwj>

000c1980 <_ZnajRKSt9nothrow_t>:
   c1980:	f7f2 bb8b 	b.w	b409a <_Znaj>

000c1984 <_ZSt25__throw_bad_function_callv>:
   c1984:	b508      	push	{r3, lr}
   c1986:	f7fc f91f 	bl	bdbc8 <abort>
	...

000c198c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c198c:	4901      	ldr	r1, [pc, #4]	; (c1994 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c198e:	f000 b8f9 	b.w	c1b84 <_ZNKSt9type_infoeqERKS_>
   c1992:	bf00      	nop
   c1994:	000c7828 	.word	0x000c7828

000c1998 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c1998:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c199a:	2400      	movs	r4, #0
   c199c:	2310      	movs	r3, #16
   c199e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c19a2:	6803      	ldr	r3, [r0, #0]
   c19a4:	4615      	mov	r5, r2
   c19a6:	699e      	ldr	r6, [r3, #24]
   c19a8:	6812      	ldr	r2, [r2, #0]
   c19aa:	466b      	mov	r3, sp
   c19ac:	e9cd 4400 	strd	r4, r4, [sp]
   c19b0:	47b0      	blx	r6
   c19b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c19b6:	f003 0306 	and.w	r3, r3, #6
   c19ba:	2b06      	cmp	r3, #6
   c19bc:	bf03      	ittte	eq
   c19be:	9b00      	ldreq	r3, [sp, #0]
   c19c0:	602b      	streq	r3, [r5, #0]
   c19c2:	2001      	moveq	r0, #1
   c19c4:	4620      	movne	r0, r4
   c19c6:	b004      	add	sp, #16
   c19c8:	bd70      	pop	{r4, r5, r6, pc}

000c19ca <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c19ca:	9800      	ldr	r0, [sp, #0]
   c19cc:	4290      	cmp	r0, r2
   c19ce:	bf14      	ite	ne
   c19d0:	2001      	movne	r0, #1
   c19d2:	2006      	moveq	r0, #6
   c19d4:	4770      	bx	lr
	...

000c19d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c19d8:	b510      	push	{r4, lr}
   c19da:	4b03      	ldr	r3, [pc, #12]	; (c19e8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c19dc:	6003      	str	r3, [r0, #0]
   c19de:	4604      	mov	r4, r0
   c19e0:	f000 f8cd 	bl	c1b7e <_ZNSt9type_infoD1Ev>
   c19e4:	4620      	mov	r0, r4
   c19e6:	bd10      	pop	{r4, pc}
   c19e8:	000c7868 	.word	0x000c7868

000c19ec <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c19ec:	b510      	push	{r4, lr}
   c19ee:	4604      	mov	r4, r0
   c19f0:	f7ff fff2 	bl	c19d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c19f4:	4620      	mov	r0, r4
   c19f6:	2108      	movs	r1, #8
   c19f8:	f7f2 fb53 	bl	b40a2 <_ZdlPvj>
   c19fc:	4620      	mov	r0, r4
   c19fe:	bd10      	pop	{r4, pc}

000c1a00 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c1a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1a04:	461f      	mov	r7, r3
   c1a06:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c1a0a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c1a0e:	4598      	cmp	r8, r3
   c1a10:	4606      	mov	r6, r0
   c1a12:	4615      	mov	r5, r2
   c1a14:	d107      	bne.n	c1a26 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c1a16:	9907      	ldr	r1, [sp, #28]
   c1a18:	f000 f8b4 	bl	c1b84 <_ZNKSt9type_infoeqERKS_>
   c1a1c:	b118      	cbz	r0, c1a26 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c1a1e:	7165      	strb	r5, [r4, #5]
   c1a20:	2000      	movs	r0, #0
   c1a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1a26:	4639      	mov	r1, r7
   c1a28:	4630      	mov	r0, r6
   c1a2a:	f000 f8ab 	bl	c1b84 <_ZNKSt9type_infoeqERKS_>
   c1a2e:	2800      	cmp	r0, #0
   c1a30:	d0f6      	beq.n	c1a20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c1a32:	2301      	movs	r3, #1
   c1a34:	f8c4 8000 	str.w	r8, [r4]
   c1a38:	7125      	strb	r5, [r4, #4]
   c1a3a:	71a3      	strb	r3, [r4, #6]
   c1a3c:	e7f0      	b.n	c1a20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c1a3e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c1a3e:	b538      	push	{r3, r4, r5, lr}
   c1a40:	4615      	mov	r5, r2
   c1a42:	461c      	mov	r4, r3
   c1a44:	f000 f89e 	bl	c1b84 <_ZNKSt9type_infoeqERKS_>
   c1a48:	b120      	cbz	r0, c1a54 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c1a4a:	2308      	movs	r3, #8
   c1a4c:	60e3      	str	r3, [r4, #12]
   c1a4e:	2306      	movs	r3, #6
   c1a50:	6025      	str	r5, [r4, #0]
   c1a52:	7123      	strb	r3, [r4, #4]
   c1a54:	bd38      	pop	{r3, r4, r5, pc}

000c1a56 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c1a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c1a58:	4605      	mov	r5, r0
   c1a5a:	460c      	mov	r4, r1
   c1a5c:	9201      	str	r2, [sp, #4]
   c1a5e:	461e      	mov	r6, r3
   c1a60:	f000 f890 	bl	c1b84 <_ZNKSt9type_infoeqERKS_>
   c1a64:	b950      	cbnz	r0, c1a7c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c1a66:	2e03      	cmp	r6, #3
   c1a68:	d808      	bhi.n	c1a7c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c1a6a:	6823      	ldr	r3, [r4, #0]
   c1a6c:	9a01      	ldr	r2, [sp, #4]
   c1a6e:	695b      	ldr	r3, [r3, #20]
   c1a70:	4629      	mov	r1, r5
   c1a72:	4620      	mov	r0, r4
   c1a74:	b002      	add	sp, #8
   c1a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c1a7a:	4718      	bx	r3
   c1a7c:	b002      	add	sp, #8
   c1a7e:	bd70      	pop	{r4, r5, r6, pc}

000c1a80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c1a80:	b510      	push	{r4, lr}
   c1a82:	4b03      	ldr	r3, [pc, #12]	; (c1a90 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c1a84:	6003      	str	r3, [r0, #0]
   c1a86:	4604      	mov	r4, r0
   c1a88:	f7ff ffa6 	bl	c19d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c1a8c:	4620      	mov	r0, r4
   c1a8e:	bd10      	pop	{r4, pc}
   c1a90:	000c78c8 	.word	0x000c78c8

000c1a94 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c1a94:	b510      	push	{r4, lr}
   c1a96:	4604      	mov	r4, r0
   c1a98:	f7ff fff2 	bl	c1a80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c1a9c:	4620      	mov	r0, r4
   c1a9e:	210c      	movs	r1, #12
   c1aa0:	f7f2 faff 	bl	b40a2 <_ZdlPvj>
   c1aa4:	4620      	mov	r0, r4
   c1aa6:	bd10      	pop	{r4, pc}

000c1aa8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c1aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c1aaa:	9f08      	ldr	r7, [sp, #32]
   c1aac:	4297      	cmp	r7, r2
   c1aae:	4605      	mov	r5, r0
   c1ab0:	460e      	mov	r6, r1
   c1ab2:	4614      	mov	r4, r2
   c1ab4:	d00a      	beq.n	c1acc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c1ab6:	68a8      	ldr	r0, [r5, #8]
   c1ab8:	6802      	ldr	r2, [r0, #0]
   c1aba:	9708      	str	r7, [sp, #32]
   c1abc:	6a15      	ldr	r5, [r2, #32]
   c1abe:	4631      	mov	r1, r6
   c1ac0:	4622      	mov	r2, r4
   c1ac2:	46ac      	mov	ip, r5
   c1ac4:	b003      	add	sp, #12
   c1ac6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c1aca:	4760      	bx	ip
   c1acc:	4619      	mov	r1, r3
   c1ace:	9301      	str	r3, [sp, #4]
   c1ad0:	f000 f858 	bl	c1b84 <_ZNKSt9type_infoeqERKS_>
   c1ad4:	9b01      	ldr	r3, [sp, #4]
   c1ad6:	2800      	cmp	r0, #0
   c1ad8:	d0ed      	beq.n	c1ab6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c1ada:	2006      	movs	r0, #6
   c1adc:	b003      	add	sp, #12
   c1ade:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c1ae0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c1ae0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c1ae4:	460d      	mov	r5, r1
   c1ae6:	4619      	mov	r1, r3
   c1ae8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c1aec:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c1af0:	4681      	mov	r9, r0
   c1af2:	4617      	mov	r7, r2
   c1af4:	4698      	mov	r8, r3
   c1af6:	f000 f845 	bl	c1b84 <_ZNKSt9type_infoeqERKS_>
   c1afa:	b190      	cbz	r0, c1b22 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c1afc:	2d00      	cmp	r5, #0
   c1afe:	6034      	str	r4, [r6, #0]
   c1b00:	7137      	strb	r7, [r6, #4]
   c1b02:	db09      	blt.n	c1b18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c1b04:	1961      	adds	r1, r4, r5
   c1b06:	458a      	cmp	sl, r1
   c1b08:	bf0c      	ite	eq
   c1b0a:	2106      	moveq	r1, #6
   c1b0c:	2101      	movne	r1, #1
   c1b0e:	71b1      	strb	r1, [r6, #6]
   c1b10:	2000      	movs	r0, #0
   c1b12:	b001      	add	sp, #4
   c1b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1b18:	3502      	adds	r5, #2
   c1b1a:	d1f9      	bne.n	c1b10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c1b1c:	2301      	movs	r3, #1
   c1b1e:	71b3      	strb	r3, [r6, #6]
   c1b20:	e7f6      	b.n	c1b10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c1b22:	4554      	cmp	r4, sl
   c1b24:	d106      	bne.n	c1b34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c1b26:	4659      	mov	r1, fp
   c1b28:	4648      	mov	r0, r9
   c1b2a:	f000 f82b 	bl	c1b84 <_ZNKSt9type_infoeqERKS_>
   c1b2e:	b108      	cbz	r0, c1b34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c1b30:	7177      	strb	r7, [r6, #5]
   c1b32:	e7ed      	b.n	c1b10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c1b34:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c1b38:	6803      	ldr	r3, [r0, #0]
   c1b3a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c1b3e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c1b42:	69dc      	ldr	r4, [r3, #28]
   c1b44:	463a      	mov	r2, r7
   c1b46:	4643      	mov	r3, r8
   c1b48:	4629      	mov	r1, r5
   c1b4a:	46a4      	mov	ip, r4
   c1b4c:	b001      	add	sp, #4
   c1b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c1b52:	4760      	bx	ip

000c1b54 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c1b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1b58:	4607      	mov	r7, r0
   c1b5a:	460c      	mov	r4, r1
   c1b5c:	4615      	mov	r5, r2
   c1b5e:	461e      	mov	r6, r3
   c1b60:	f7ff ff6d 	bl	c1a3e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c1b64:	b948      	cbnz	r0, c1b7a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c1b66:	68b8      	ldr	r0, [r7, #8]
   c1b68:	6803      	ldr	r3, [r0, #0]
   c1b6a:	699f      	ldr	r7, [r3, #24]
   c1b6c:	462a      	mov	r2, r5
   c1b6e:	4633      	mov	r3, r6
   c1b70:	4621      	mov	r1, r4
   c1b72:	46bc      	mov	ip, r7
   c1b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c1b78:	4760      	bx	ip
   c1b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c1b7e <_ZNSt9type_infoD1Ev>:
   c1b7e:	4770      	bx	lr

000c1b80 <_ZNKSt9type_info14__is_pointer_pEv>:
   c1b80:	2000      	movs	r0, #0
   c1b82:	4770      	bx	lr

000c1b84 <_ZNKSt9type_infoeqERKS_>:
   c1b84:	4281      	cmp	r1, r0
   c1b86:	b508      	push	{r3, lr}
   c1b88:	d00e      	beq.n	c1ba8 <_ZNKSt9type_infoeqERKS_+0x24>
   c1b8a:	6840      	ldr	r0, [r0, #4]
   c1b8c:	7803      	ldrb	r3, [r0, #0]
   c1b8e:	2b2a      	cmp	r3, #42	; 0x2a
   c1b90:	d00c      	beq.n	c1bac <_ZNKSt9type_infoeqERKS_+0x28>
   c1b92:	6849      	ldr	r1, [r1, #4]
   c1b94:	780b      	ldrb	r3, [r1, #0]
   c1b96:	2b2a      	cmp	r3, #42	; 0x2a
   c1b98:	bf08      	it	eq
   c1b9a:	3101      	addeq	r1, #1
   c1b9c:	f002 f974 	bl	c3e88 <strcmp>
   c1ba0:	fab0 f080 	clz	r0, r0
   c1ba4:	0940      	lsrs	r0, r0, #5
   c1ba6:	bd08      	pop	{r3, pc}
   c1ba8:	2001      	movs	r0, #1
   c1baa:	e7fc      	b.n	c1ba6 <_ZNKSt9type_infoeqERKS_+0x22>
   c1bac:	2000      	movs	r0, #0
   c1bae:	e7fa      	b.n	c1ba6 <_ZNKSt9type_infoeqERKS_+0x22>

000c1bb0 <cosf>:
   c1bb0:	ee10 3a10 	vmov	r3, s0
   c1bb4:	4a18      	ldr	r2, [pc, #96]	; (c1c18 <cosf+0x68>)
   c1bb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c1bba:	4293      	cmp	r3, r2
   c1bbc:	dd1b      	ble.n	c1bf6 <cosf+0x46>
   c1bbe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c1bc2:	db02      	blt.n	c1bca <cosf+0x1a>
   c1bc4:	ee30 0a40 	vsub.f32	s0, s0, s0
   c1bc8:	4770      	bx	lr
   c1bca:	b500      	push	{lr}
   c1bcc:	b083      	sub	sp, #12
   c1bce:	4668      	mov	r0, sp
   c1bd0:	f000 fb10 	bl	c21f4 <__ieee754_rem_pio2f>
   c1bd4:	f000 0003 	and.w	r0, r0, #3
   c1bd8:	2801      	cmp	r0, #1
   c1bda:	eddd 0a01 	vldr	s1, [sp, #4]
   c1bde:	ed9d 0a00 	vldr	s0, [sp]
   c1be2:	d00c      	beq.n	c1bfe <cosf+0x4e>
   c1be4:	2802      	cmp	r0, #2
   c1be6:	d012      	beq.n	c1c0e <cosf+0x5e>
   c1be8:	b170      	cbz	r0, c1c08 <cosf+0x58>
   c1bea:	2001      	movs	r0, #1
   c1bec:	f000 fff4 	bl	c2bd8 <__kernel_sinf>
   c1bf0:	b003      	add	sp, #12
   c1bf2:	f85d fb04 	ldr.w	pc, [sp], #4
   c1bf6:	eddf 0a09 	vldr	s1, [pc, #36]	; c1c1c <cosf+0x6c>
   c1bfa:	f000 bc31 	b.w	c2460 <__kernel_cosf>
   c1bfe:	f000 ffeb 	bl	c2bd8 <__kernel_sinf>
   c1c02:	eeb1 0a40 	vneg.f32	s0, s0
   c1c06:	e7f3      	b.n	c1bf0 <cosf+0x40>
   c1c08:	f000 fc2a 	bl	c2460 <__kernel_cosf>
   c1c0c:	e7f0      	b.n	c1bf0 <cosf+0x40>
   c1c0e:	f000 fc27 	bl	c2460 <__kernel_cosf>
   c1c12:	eeb1 0a40 	vneg.f32	s0, s0
   c1c16:	e7eb      	b.n	c1bf0 <cosf+0x40>
   c1c18:	3f490fd8 	.word	0x3f490fd8
   c1c1c:	00000000 	.word	0x00000000

000c1c20 <sinf>:
   c1c20:	ee10 3a10 	vmov	r3, s0
   c1c24:	4a19      	ldr	r2, [pc, #100]	; (c1c8c <sinf+0x6c>)
   c1c26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c1c2a:	4293      	cmp	r3, r2
   c1c2c:	dd1c      	ble.n	c1c68 <sinf+0x48>
   c1c2e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c1c32:	db02      	blt.n	c1c3a <sinf+0x1a>
   c1c34:	ee30 0a40 	vsub.f32	s0, s0, s0
   c1c38:	4770      	bx	lr
   c1c3a:	b500      	push	{lr}
   c1c3c:	b083      	sub	sp, #12
   c1c3e:	4668      	mov	r0, sp
   c1c40:	f000 fad8 	bl	c21f4 <__ieee754_rem_pio2f>
   c1c44:	f000 0003 	and.w	r0, r0, #3
   c1c48:	2801      	cmp	r0, #1
   c1c4a:	eddd 0a01 	vldr	s1, [sp, #4]
   c1c4e:	ed9d 0a00 	vldr	s0, [sp]
   c1c52:	d00e      	beq.n	c1c72 <sinf+0x52>
   c1c54:	2802      	cmp	r0, #2
   c1c56:	d013      	beq.n	c1c80 <sinf+0x60>
   c1c58:	b170      	cbz	r0, c1c78 <sinf+0x58>
   c1c5a:	f000 fc01 	bl	c2460 <__kernel_cosf>
   c1c5e:	eeb1 0a40 	vneg.f32	s0, s0
   c1c62:	b003      	add	sp, #12
   c1c64:	f85d fb04 	ldr.w	pc, [sp], #4
   c1c68:	eddf 0a09 	vldr	s1, [pc, #36]	; c1c90 <sinf+0x70>
   c1c6c:	2000      	movs	r0, #0
   c1c6e:	f000 bfb3 	b.w	c2bd8 <__kernel_sinf>
   c1c72:	f000 fbf5 	bl	c2460 <__kernel_cosf>
   c1c76:	e7f4      	b.n	c1c62 <sinf+0x42>
   c1c78:	2001      	movs	r0, #1
   c1c7a:	f000 ffad 	bl	c2bd8 <__kernel_sinf>
   c1c7e:	e7f0      	b.n	c1c62 <sinf+0x42>
   c1c80:	2001      	movs	r0, #1
   c1c82:	f000 ffa9 	bl	c2bd8 <__kernel_sinf>
   c1c86:	eeb1 0a40 	vneg.f32	s0, s0
   c1c8a:	e7ea      	b.n	c1c62 <sinf+0x42>
   c1c8c:	3f490fd8 	.word	0x3f490fd8
   c1c90:	00000000 	.word	0x00000000

000c1c94 <atan2>:
   c1c94:	f000 b864 	b.w	c1d60 <__ieee754_atan2>

000c1c98 <sqrt>:
   c1c98:	b538      	push	{r3, r4, r5, lr}
   c1c9a:	ed2d 8b02 	vpush	{d8}
   c1c9e:	ec55 4b10 	vmov	r4, r5, d0
   c1ca2:	f000 f933 	bl	c1f0c <__ieee754_sqrt>
   c1ca6:	4b18      	ldr	r3, [pc, #96]	; (c1d08 <sqrt+0x70>)
   c1ca8:	eeb0 8a40 	vmov.f32	s16, s0
   c1cac:	eef0 8a60 	vmov.f32	s17, s1
   c1cb0:	f993 3000 	ldrsb.w	r3, [r3]
   c1cb4:	3301      	adds	r3, #1
   c1cb6:	d00d      	beq.n	c1cd4 <sqrt+0x3c>
   c1cb8:	4622      	mov	r2, r4
   c1cba:	462b      	mov	r3, r5
   c1cbc:	4620      	mov	r0, r4
   c1cbe:	4629      	mov	r1, r5
   c1cc0:	f001 ff6c 	bl	c3b9c <__aeabi_dcmpun>
   c1cc4:	b930      	cbnz	r0, c1cd4 <sqrt+0x3c>
   c1cc6:	2200      	movs	r2, #0
   c1cc8:	2300      	movs	r3, #0
   c1cca:	4620      	mov	r0, r4
   c1ccc:	4629      	mov	r1, r5
   c1cce:	f001 ff3d 	bl	c3b4c <__aeabi_dcmplt>
   c1cd2:	b930      	cbnz	r0, c1ce2 <sqrt+0x4a>
   c1cd4:	eeb0 0a48 	vmov.f32	s0, s16
   c1cd8:	eef0 0a68 	vmov.f32	s1, s17
   c1cdc:	ecbd 8b02 	vpop	{d8}
   c1ce0:	bd38      	pop	{r3, r4, r5, pc}
   c1ce2:	f7fb ff81 	bl	bdbe8 <__errno>
   c1ce6:	2200      	movs	r2, #0
   c1ce8:	2300      	movs	r3, #0
   c1cea:	2121      	movs	r1, #33	; 0x21
   c1cec:	6001      	str	r1, [r0, #0]
   c1cee:	4610      	mov	r0, r2
   c1cf0:	4619      	mov	r1, r3
   c1cf2:	f001 fde3 	bl	c38bc <__aeabi_ddiv>
   c1cf6:	ec41 0b18 	vmov	d8, r0, r1
   c1cfa:	eeb0 0a48 	vmov.f32	s0, s16
   c1cfe:	eef0 0a68 	vmov.f32	s1, s17
   c1d02:	ecbd 8b02 	vpop	{d8}
   c1d06:	bd38      	pop	{r3, r4, r5, pc}
   c1d08:	2003db8c 	.word	0x2003db8c

000c1d0c <atan2f>:
   c1d0c:	f000 b9ca 	b.w	c20a4 <__ieee754_atan2f>

000c1d10 <sqrtf>:
   c1d10:	b508      	push	{r3, lr}
   c1d12:	ed2d 8b02 	vpush	{d8}
   c1d16:	eeb0 8a40 	vmov.f32	s16, s0
   c1d1a:	f000 fb9d 	bl	c2458 <__ieee754_sqrtf>
   c1d1e:	4b0e      	ldr	r3, [pc, #56]	; (c1d58 <sqrtf+0x48>)
   c1d20:	f993 3000 	ldrsb.w	r3, [r3]
   c1d24:	3301      	adds	r3, #1
   c1d26:	d00b      	beq.n	c1d40 <sqrtf+0x30>
   c1d28:	eeb4 8a48 	vcmp.f32	s16, s16
   c1d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1d30:	d606      	bvs.n	c1d40 <sqrtf+0x30>
   c1d32:	eddf 8a0a 	vldr	s17, [pc, #40]	; c1d5c <sqrtf+0x4c>
   c1d36:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c1d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1d3e:	d402      	bmi.n	c1d46 <sqrtf+0x36>
   c1d40:	ecbd 8b02 	vpop	{d8}
   c1d44:	bd08      	pop	{r3, pc}
   c1d46:	f7fb ff4f 	bl	bdbe8 <__errno>
   c1d4a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c1d4e:	ecbd 8b02 	vpop	{d8}
   c1d52:	2321      	movs	r3, #33	; 0x21
   c1d54:	6003      	str	r3, [r0, #0]
   c1d56:	bd08      	pop	{r3, pc}
   c1d58:	2003db8c 	.word	0x2003db8c
   c1d5c:	00000000 	.word	0x00000000

000c1d60 <__ieee754_atan2>:
   c1d60:	ec51 0b11 	vmov	r0, r1, d1
   c1d64:	4243      	negs	r3, r0
   c1d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1d6a:	4303      	orrs	r3, r0
   c1d6c:	4e64      	ldr	r6, [pc, #400]	; (c1f00 <__ieee754_atan2+0x1a0>)
   c1d6e:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
   c1d72:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
   c1d76:	42b3      	cmp	r3, r6
   c1d78:	ec55 4b10 	vmov	r4, r5, d0
   c1d7c:	d83e      	bhi.n	c1dfc <__ieee754_atan2+0x9c>
   c1d7e:	4263      	negs	r3, r4
   c1d80:	4323      	orrs	r3, r4
   c1d82:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   c1d86:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   c1d8a:	42b3      	cmp	r3, r6
   c1d8c:	46a9      	mov	r9, r5
   c1d8e:	d835      	bhi.n	c1dfc <__ieee754_atan2+0x9c>
   c1d90:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   c1d94:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c1d98:	4303      	orrs	r3, r0
   c1d9a:	d03e      	beq.n	c1e1a <__ieee754_atan2+0xba>
   c1d9c:	178f      	asrs	r7, r1, #30
   c1d9e:	f007 0702 	and.w	r7, r7, #2
   c1da2:	ea5a 0304 	orrs.w	r3, sl, r4
   c1da6:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
   c1daa:	d02f      	beq.n	c1e0c <__ieee754_atan2+0xac>
   c1dac:	ea5e 0300 	orrs.w	r3, lr, r0
   c1db0:	d037      	beq.n	c1e22 <__ieee754_atan2+0xc2>
   c1db2:	45b6      	cmp	lr, r6
   c1db4:	d044      	beq.n	c1e40 <__ieee754_atan2+0xe0>
   c1db6:	45b2      	cmp	sl, r6
   c1db8:	d033      	beq.n	c1e22 <__ieee754_atan2+0xc2>
   c1dba:	ebaa 0e0e 	sub.w	lr, sl, lr
   c1dbe:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
   c1dc2:	ea4f 532e 	mov.w	r3, lr, asr #20
   c1dc6:	da38      	bge.n	c1e3a <__ieee754_atan2+0xda>
   c1dc8:	2900      	cmp	r1, #0
   c1dca:	da45      	bge.n	c1e58 <__ieee754_atan2+0xf8>
   c1dcc:	333c      	adds	r3, #60	; 0x3c
   c1dce:	da43      	bge.n	c1e58 <__ieee754_atan2+0xf8>
   c1dd0:	ed9f 0b3d 	vldr	d0, [pc, #244]	; c1ec8 <__ieee754_atan2+0x168>
   c1dd4:	2f01      	cmp	r7, #1
   c1dd6:	d05d      	beq.n	c1e94 <__ieee754_atan2+0x134>
   c1dd8:	2f02      	cmp	r7, #2
   c1dda:	d04a      	beq.n	c1e72 <__ieee754_atan2+0x112>
   c1ddc:	b1a7      	cbz	r7, c1e08 <__ieee754_atan2+0xa8>
   c1dde:	ec51 0b10 	vmov	r0, r1, d0
   c1de2:	a33b      	add	r3, pc, #236	; (adr r3, c1ed0 <__ieee754_atan2+0x170>)
   c1de4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1de8:	f001 fa86 	bl	c32f8 <__aeabi_dsub>
   c1dec:	a33a      	add	r3, pc, #232	; (adr r3, c1ed8 <__ieee754_atan2+0x178>)
   c1dee:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1df2:	f001 fa81 	bl	c32f8 <__aeabi_dsub>
   c1df6:	ec41 0b10 	vmov	d0, r0, r1
   c1dfa:	e005      	b.n	c1e08 <__ieee754_atan2+0xa8>
   c1dfc:	4622      	mov	r2, r4
   c1dfe:	462b      	mov	r3, r5
   c1e00:	f001 fa7c 	bl	c32fc <__adddf3>
   c1e04:	ec41 0b10 	vmov	d0, r0, r1
   c1e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c1e0c:	2f02      	cmp	r7, #2
   c1e0e:	d00e      	beq.n	c1e2e <__ieee754_atan2+0xce>
   c1e10:	2f03      	cmp	r7, #3
   c1e12:	d1f9      	bne.n	c1e08 <__ieee754_atan2+0xa8>
   c1e14:	ed9f 0b32 	vldr	d0, [pc, #200]	; c1ee0 <__ieee754_atan2+0x180>
   c1e18:	e7f6      	b.n	c1e08 <__ieee754_atan2+0xa8>
   c1e1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1e1e:	f000 bf23 	b.w	c2c68 <atan>
   c1e22:	f1b9 0f00 	cmp.w	r9, #0
   c1e26:	db05      	blt.n	c1e34 <__ieee754_atan2+0xd4>
   c1e28:	ed9f 0b2f 	vldr	d0, [pc, #188]	; c1ee8 <__ieee754_atan2+0x188>
   c1e2c:	e7ec      	b.n	c1e08 <__ieee754_atan2+0xa8>
   c1e2e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; c1ed8 <__ieee754_atan2+0x178>
   c1e32:	e7e9      	b.n	c1e08 <__ieee754_atan2+0xa8>
   c1e34:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c1ef0 <__ieee754_atan2+0x190>
   c1e38:	e7e6      	b.n	c1e08 <__ieee754_atan2+0xa8>
   c1e3a:	ed9f 0b2b 	vldr	d0, [pc, #172]	; c1ee8 <__ieee754_atan2+0x188>
   c1e3e:	e7c9      	b.n	c1dd4 <__ieee754_atan2+0x74>
   c1e40:	45f2      	cmp	sl, lr
   c1e42:	f107 37ff 	add.w	r7, r7, #4294967295
   c1e46:	d02e      	beq.n	c1ea6 <__ieee754_atan2+0x146>
   c1e48:	2f02      	cmp	r7, #2
   c1e4a:	d834      	bhi.n	c1eb6 <__ieee754_atan2+0x156>
   c1e4c:	4b2d      	ldr	r3, [pc, #180]	; (c1f04 <__ieee754_atan2+0x1a4>)
   c1e4e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c1e52:	ed97 0b00 	vldr	d0, [r7]
   c1e56:	e7d7      	b.n	c1e08 <__ieee754_atan2+0xa8>
   c1e58:	4602      	mov	r2, r0
   c1e5a:	460b      	mov	r3, r1
   c1e5c:	4620      	mov	r0, r4
   c1e5e:	4629      	mov	r1, r5
   c1e60:	f001 fd2c 	bl	c38bc <__aeabi_ddiv>
   c1e64:	ec41 0b10 	vmov	d0, r0, r1
   c1e68:	f001 f89e 	bl	c2fa8 <fabs>
   c1e6c:	f000 fefc 	bl	c2c68 <atan>
   c1e70:	e7b0      	b.n	c1dd4 <__ieee754_atan2+0x74>
   c1e72:	a317      	add	r3, pc, #92	; (adr r3, c1ed0 <__ieee754_atan2+0x170>)
   c1e74:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1e78:	ec51 0b10 	vmov	r0, r1, d0
   c1e7c:	f001 fa3c 	bl	c32f8 <__aeabi_dsub>
   c1e80:	4602      	mov	r2, r0
   c1e82:	460b      	mov	r3, r1
   c1e84:	a114      	add	r1, pc, #80	; (adr r1, c1ed8 <__ieee754_atan2+0x178>)
   c1e86:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1e8a:	f001 fa35 	bl	c32f8 <__aeabi_dsub>
   c1e8e:	ec41 0b10 	vmov	d0, r0, r1
   c1e92:	e7b9      	b.n	c1e08 <__ieee754_atan2+0xa8>
   c1e94:	ee10 1a90 	vmov	r1, s1
   c1e98:	ec53 2b10 	vmov	r2, r3, d0
   c1e9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1ea0:	ec43 2b10 	vmov	d0, r2, r3
   c1ea4:	e7b0      	b.n	c1e08 <__ieee754_atan2+0xa8>
   c1ea6:	2f02      	cmp	r7, #2
   c1ea8:	d808      	bhi.n	c1ebc <__ieee754_atan2+0x15c>
   c1eaa:	4b17      	ldr	r3, [pc, #92]	; (c1f08 <__ieee754_atan2+0x1a8>)
   c1eac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c1eb0:	ed97 0b00 	vldr	d0, [r7]
   c1eb4:	e7a8      	b.n	c1e08 <__ieee754_atan2+0xa8>
   c1eb6:	ed9f 0b04 	vldr	d0, [pc, #16]	; c1ec8 <__ieee754_atan2+0x168>
   c1eba:	e7a5      	b.n	c1e08 <__ieee754_atan2+0xa8>
   c1ebc:	ed9f 0b0e 	vldr	d0, [pc, #56]	; c1ef8 <__ieee754_atan2+0x198>
   c1ec0:	e7a2      	b.n	c1e08 <__ieee754_atan2+0xa8>
   c1ec2:	bf00      	nop
   c1ec4:	f3af 8000 	nop.w
	...
   c1ed0:	33145c07 	.word	0x33145c07
   c1ed4:	3ca1a626 	.word	0x3ca1a626
   c1ed8:	54442d18 	.word	0x54442d18
   c1edc:	400921fb 	.word	0x400921fb
   c1ee0:	54442d18 	.word	0x54442d18
   c1ee4:	c00921fb 	.word	0xc00921fb
   c1ee8:	54442d18 	.word	0x54442d18
   c1eec:	3ff921fb 	.word	0x3ff921fb
   c1ef0:	54442d18 	.word	0x54442d18
   c1ef4:	bff921fb 	.word	0xbff921fb
   c1ef8:	54442d18 	.word	0x54442d18
   c1efc:	3fe921fb 	.word	0x3fe921fb
   c1f00:	7ff00000 	.word	0x7ff00000
   c1f04:	000c7920 	.word	0x000c7920
   c1f08:	000c7908 	.word	0x000c7908

000c1f0c <__ieee754_sqrt>:
   c1f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1f10:	4a63      	ldr	r2, [pc, #396]	; (c20a0 <__ieee754_sqrt+0x194>)
   c1f12:	ec55 4b10 	vmov	r4, r5, d0
   c1f16:	43aa      	bics	r2, r5
   c1f18:	f000 809f 	beq.w	c205a <__ieee754_sqrt+0x14e>
   c1f1c:	2d00      	cmp	r5, #0
   c1f1e:	ee10 ca10 	vmov	ip, s0
   c1f22:	462b      	mov	r3, r5
   c1f24:	dd54      	ble.n	c1fd0 <__ieee754_sqrt+0xc4>
   c1f26:	1529      	asrs	r1, r5, #20
   c1f28:	d063      	beq.n	c1ff2 <__ieee754_sqrt+0xe6>
   c1f2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c1f2e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c1f32:	07c9      	lsls	r1, r1, #31
   c1f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c1f38:	d404      	bmi.n	c1f44 <__ieee754_sqrt+0x38>
   c1f3a:	005b      	lsls	r3, r3, #1
   c1f3c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c1f40:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1f44:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c1f48:	2600      	movs	r6, #0
   c1f4a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c1f4e:	107f      	asrs	r7, r7, #1
   c1f50:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1f54:	f04f 0e16 	mov.w	lr, #22
   c1f58:	4634      	mov	r4, r6
   c1f5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c1f5e:	18a1      	adds	r1, r4, r2
   c1f60:	4299      	cmp	r1, r3
   c1f62:	dc02      	bgt.n	c1f6a <__ieee754_sqrt+0x5e>
   c1f64:	1a5b      	subs	r3, r3, r1
   c1f66:	188c      	adds	r4, r1, r2
   c1f68:	4416      	add	r6, r2
   c1f6a:	005b      	lsls	r3, r3, #1
   c1f6c:	f1be 0e01 	subs.w	lr, lr, #1
   c1f70:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c1f74:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c1f78:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1f7c:	d1ef      	bne.n	c1f5e <__ieee754_sqrt+0x52>
   c1f7e:	4675      	mov	r5, lr
   c1f80:	2020      	movs	r0, #32
   c1f82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c1f86:	e00a      	b.n	c1f9e <__ieee754_sqrt+0x92>
   c1f88:	d044      	beq.n	c2014 <__ieee754_sqrt+0x108>
   c1f8a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c1f8e:	3801      	subs	r0, #1
   c1f90:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c1f94:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1f98:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c1f9c:	d043      	beq.n	c2026 <__ieee754_sqrt+0x11a>
   c1f9e:	42a3      	cmp	r3, r4
   c1fa0:	eb02 010e 	add.w	r1, r2, lr
   c1fa4:	ddf0      	ble.n	c1f88 <__ieee754_sqrt+0x7c>
   c1fa6:	2900      	cmp	r1, #0
   c1fa8:	eb01 0e02 	add.w	lr, r1, r2
   c1fac:	db0a      	blt.n	c1fc4 <__ieee754_sqrt+0xb8>
   c1fae:	46a0      	mov	r8, r4
   c1fb0:	1b1b      	subs	r3, r3, r4
   c1fb2:	4561      	cmp	r1, ip
   c1fb4:	bf88      	it	hi
   c1fb6:	f103 33ff 	addhi.w	r3, r3, #4294967295
   c1fba:	ebac 0c01 	sub.w	ip, ip, r1
   c1fbe:	4415      	add	r5, r2
   c1fc0:	4644      	mov	r4, r8
   c1fc2:	e7e2      	b.n	c1f8a <__ieee754_sqrt+0x7e>
   c1fc4:	f1be 0f00 	cmp.w	lr, #0
   c1fc8:	dbf1      	blt.n	c1fae <__ieee754_sqrt+0xa2>
   c1fca:	f104 0801 	add.w	r8, r4, #1
   c1fce:	e7ef      	b.n	c1fb0 <__ieee754_sqrt+0xa4>
   c1fd0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c1fd4:	4322      	orrs	r2, r4
   c1fd6:	d038      	beq.n	c204a <__ieee754_sqrt+0x13e>
   c1fd8:	2d00      	cmp	r5, #0
   c1fda:	d14e      	bne.n	c207a <__ieee754_sqrt+0x16e>
   c1fdc:	4629      	mov	r1, r5
   c1fde:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c1fe2:	3915      	subs	r1, #21
   c1fe4:	4613      	mov	r3, r2
   c1fe6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c1fea:	2a00      	cmp	r2, #0
   c1fec:	d0f7      	beq.n	c1fde <__ieee754_sqrt+0xd2>
   c1fee:	02d6      	lsls	r6, r2, #11
   c1ff0:	d450      	bmi.n	c2094 <__ieee754_sqrt+0x188>
   c1ff2:	2000      	movs	r0, #0
   c1ff4:	005b      	lsls	r3, r3, #1
   c1ff6:	02dd      	lsls	r5, r3, #11
   c1ff8:	4604      	mov	r4, r0
   c1ffa:	f100 0001 	add.w	r0, r0, #1
   c1ffe:	d5f9      	bpl.n	c1ff4 <__ieee754_sqrt+0xe8>
   c2000:	461a      	mov	r2, r3
   c2002:	4663      	mov	r3, ip
   c2004:	fa0c fc00 	lsl.w	ip, ip, r0
   c2008:	f1c0 0020 	rsb	r0, r0, #32
   c200c:	40c3      	lsrs	r3, r0
   c200e:	1b09      	subs	r1, r1, r4
   c2010:	4313      	orrs	r3, r2
   c2012:	e78a      	b.n	c1f2a <__ieee754_sqrt+0x1e>
   c2014:	4561      	cmp	r1, ip
   c2016:	d8b8      	bhi.n	c1f8a <__ieee754_sqrt+0x7e>
   c2018:	2900      	cmp	r1, #0
   c201a:	eb01 0e02 	add.w	lr, r1, r2
   c201e:	dbd1      	blt.n	c1fc4 <__ieee754_sqrt+0xb8>
   c2020:	4698      	mov	r8, r3
   c2022:	2300      	movs	r3, #0
   c2024:	e7c9      	b.n	c1fba <__ieee754_sqrt+0xae>
   c2026:	ea53 030c 	orrs.w	r3, r3, ip
   c202a:	d110      	bne.n	c204e <__ieee754_sqrt+0x142>
   c202c:	0868      	lsrs	r0, r5, #1
   c202e:	1071      	asrs	r1, r6, #1
   c2030:	07f3      	lsls	r3, r6, #31
   c2032:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c2036:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c203a:	bf48      	it	mi
   c203c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c2040:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c2044:	4602      	mov	r2, r0
   c2046:	ec43 2b10 	vmov	d0, r2, r3
   c204a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c204e:	1c6a      	adds	r2, r5, #1
   c2050:	bf16      	itet	ne
   c2052:	1c68      	addne	r0, r5, #1
   c2054:	3601      	addeq	r6, #1
   c2056:	0840      	lsrne	r0, r0, #1
   c2058:	e7e9      	b.n	c202e <__ieee754_sqrt+0x122>
   c205a:	ee10 2a10 	vmov	r2, s0
   c205e:	ee10 0a10 	vmov	r0, s0
   c2062:	462b      	mov	r3, r5
   c2064:	4629      	mov	r1, r5
   c2066:	f001 faff 	bl	c3668 <__aeabi_dmul>
   c206a:	4622      	mov	r2, r4
   c206c:	462b      	mov	r3, r5
   c206e:	f001 f945 	bl	c32fc <__adddf3>
   c2072:	ec41 0b10 	vmov	d0, r0, r1
   c2076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c207a:	ee10 2a10 	vmov	r2, s0
   c207e:	4620      	mov	r0, r4
   c2080:	4629      	mov	r1, r5
   c2082:	f001 f939 	bl	c32f8 <__aeabi_dsub>
   c2086:	4602      	mov	r2, r0
   c2088:	460b      	mov	r3, r1
   c208a:	f001 fc17 	bl	c38bc <__aeabi_ddiv>
   c208e:	ec41 0b10 	vmov	d0, r0, r1
   c2092:	e7da      	b.n	c204a <__ieee754_sqrt+0x13e>
   c2094:	4663      	mov	r3, ip
   c2096:	2020      	movs	r0, #32
   c2098:	f04f 34ff 	mov.w	r4, #4294967295
   c209c:	e7b6      	b.n	c200c <__ieee754_sqrt+0x100>
   c209e:	bf00      	nop
   c20a0:	7ff00000 	.word	0x7ff00000

000c20a4 <__ieee754_atan2f>:
   c20a4:	b510      	push	{r4, lr}
   c20a6:	b082      	sub	sp, #8
   c20a8:	edcd 0a01 	vstr	s1, [sp, #4]
   c20ac:	9b01      	ldr	r3, [sp, #4]
   c20ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   c20b2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c20b6:	eef0 7a40 	vmov.f32	s15, s0
   c20ba:	dc30      	bgt.n	c211e <__ieee754_atan2f+0x7a>
   c20bc:	ee10 0a10 	vmov	r0, s0
   c20c0:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   c20c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c20c8:	dc29      	bgt.n	c211e <__ieee754_atan2f+0x7a>
   c20ca:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   c20ce:	d042      	beq.n	c2156 <__ieee754_atan2f+0xb2>
   c20d0:	179c      	asrs	r4, r3, #30
   c20d2:	f004 0402 	and.w	r4, r4, #2
   c20d6:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   c20da:	b331      	cbz	r1, c212a <__ieee754_atan2f+0x86>
   c20dc:	b37a      	cbz	r2, c213e <__ieee754_atan2f+0x9a>
   c20de:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c20e2:	d040      	beq.n	c2166 <__ieee754_atan2f+0xc2>
   c20e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c20e8:	d029      	beq.n	c213e <__ieee754_atan2f+0x9a>
   c20ea:	1a8a      	subs	r2, r1, r2
   c20ec:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   c20f0:	ea4f 51e2 	mov.w	r1, r2, asr #23
   c20f4:	da34      	bge.n	c2160 <__ieee754_atan2f+0xbc>
   c20f6:	2b00      	cmp	r3, #0
   c20f8:	da42      	bge.n	c2180 <__ieee754_atan2f+0xdc>
   c20fa:	313c      	adds	r1, #60	; 0x3c
   c20fc:	da40      	bge.n	c2180 <__ieee754_atan2f+0xdc>
   c20fe:	ed9f 0a34 	vldr	s0, [pc, #208]	; c21d0 <__ieee754_atan2f+0x12c>
   c2102:	2c01      	cmp	r4, #1
   c2104:	d04e      	beq.n	c21a4 <__ieee754_atan2f+0x100>
   c2106:	2c02      	cmp	r4, #2
   c2108:	d043      	beq.n	c2192 <__ieee754_atan2f+0xee>
   c210a:	b164      	cbz	r4, c2126 <__ieee754_atan2f+0x82>
   c210c:	ed9f 7a31 	vldr	s14, [pc, #196]	; c21d4 <__ieee754_atan2f+0x130>
   c2110:	eddf 7a31 	vldr	s15, [pc, #196]	; c21d8 <__ieee754_atan2f+0x134>
   c2114:	ee30 0a07 	vadd.f32	s0, s0, s14
   c2118:	ee30 0a67 	vsub.f32	s0, s0, s15
   c211c:	e003      	b.n	c2126 <__ieee754_atan2f+0x82>
   c211e:	ed9d 7a01 	vldr	s14, [sp, #4]
   c2122:	ee37 0a27 	vadd.f32	s0, s14, s15
   c2126:	b002      	add	sp, #8
   c2128:	bd10      	pop	{r4, pc}
   c212a:	2c02      	cmp	r4, #2
   c212c:	d010      	beq.n	c2150 <__ieee754_atan2f+0xac>
   c212e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; c21dc <__ieee754_atan2f+0x138>
   c2132:	2c03      	cmp	r4, #3
   c2134:	bf18      	it	ne
   c2136:	eeb0 0a67 	vmovne.f32	s0, s15
   c213a:	b002      	add	sp, #8
   c213c:	bd10      	pop	{r4, pc}
   c213e:	ed9f 0a28 	vldr	s0, [pc, #160]	; c21e0 <__ieee754_atan2f+0x13c>
   c2142:	eddf 7a28 	vldr	s15, [pc, #160]	; c21e4 <__ieee754_atan2f+0x140>
   c2146:	2800      	cmp	r0, #0
   c2148:	bfb8      	it	lt
   c214a:	eeb0 0a67 	vmovlt.f32	s0, s15
   c214e:	e7ea      	b.n	c2126 <__ieee754_atan2f+0x82>
   c2150:	ed9f 0a21 	vldr	s0, [pc, #132]	; c21d8 <__ieee754_atan2f+0x134>
   c2154:	e7e7      	b.n	c2126 <__ieee754_atan2f+0x82>
   c2156:	b002      	add	sp, #8
   c2158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c215c:	f000 bf2e 	b.w	c2fbc <atanf>
   c2160:	ed9f 0a1f 	vldr	s0, [pc, #124]	; c21e0 <__ieee754_atan2f+0x13c>
   c2164:	e7cd      	b.n	c2102 <__ieee754_atan2f+0x5e>
   c2166:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c216a:	f104 34ff 	add.w	r4, r4, #4294967295
   c216e:	d020      	beq.n	c21b2 <__ieee754_atan2f+0x10e>
   c2170:	2c02      	cmp	r4, #2
   c2172:	d826      	bhi.n	c21c2 <__ieee754_atan2f+0x11e>
   c2174:	4b1c      	ldr	r3, [pc, #112]	; (c21e8 <__ieee754_atan2f+0x144>)
   c2176:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c217a:	ed94 0a00 	vldr	s0, [r4]
   c217e:	e7d2      	b.n	c2126 <__ieee754_atan2f+0x82>
   c2180:	ed9d 7a01 	vldr	s14, [sp, #4]
   c2184:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c2188:	f000 fff2 	bl	c3170 <fabsf>
   c218c:	f000 ff16 	bl	c2fbc <atanf>
   c2190:	e7b7      	b.n	c2102 <__ieee754_atan2f+0x5e>
   c2192:	ed9f 7a10 	vldr	s14, [pc, #64]	; c21d4 <__ieee754_atan2f+0x130>
   c2196:	eddf 7a10 	vldr	s15, [pc, #64]	; c21d8 <__ieee754_atan2f+0x134>
   c219a:	ee30 0a07 	vadd.f32	s0, s0, s14
   c219e:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c21a2:	e7c0      	b.n	c2126 <__ieee754_atan2f+0x82>
   c21a4:	ee10 3a10 	vmov	r3, s0
   c21a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c21ac:	ee00 3a10 	vmov	s0, r3
   c21b0:	e7b9      	b.n	c2126 <__ieee754_atan2f+0x82>
   c21b2:	2c02      	cmp	r4, #2
   c21b4:	d808      	bhi.n	c21c8 <__ieee754_atan2f+0x124>
   c21b6:	4b0d      	ldr	r3, [pc, #52]	; (c21ec <__ieee754_atan2f+0x148>)
   c21b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c21bc:	ed94 0a00 	vldr	s0, [r4]
   c21c0:	e7b1      	b.n	c2126 <__ieee754_atan2f+0x82>
   c21c2:	ed9f 0a03 	vldr	s0, [pc, #12]	; c21d0 <__ieee754_atan2f+0x12c>
   c21c6:	e7ae      	b.n	c2126 <__ieee754_atan2f+0x82>
   c21c8:	ed9f 0a09 	vldr	s0, [pc, #36]	; c21f0 <__ieee754_atan2f+0x14c>
   c21cc:	e7ab      	b.n	c2126 <__ieee754_atan2f+0x82>
   c21ce:	bf00      	nop
   c21d0:	00000000 	.word	0x00000000
   c21d4:	33bbbd2e 	.word	0x33bbbd2e
   c21d8:	40490fdb 	.word	0x40490fdb
   c21dc:	c0490fdb 	.word	0xc0490fdb
   c21e0:	3fc90fdb 	.word	0x3fc90fdb
   c21e4:	bfc90fdb 	.word	0xbfc90fdb
   c21e8:	000c7944 	.word	0x000c7944
   c21ec:	000c7938 	.word	0x000c7938
   c21f0:	3f490fdb 	.word	0x3f490fdb

000c21f4 <__ieee754_rem_pio2f>:
   c21f4:	b570      	push	{r4, r5, r6, lr}
   c21f6:	ee10 3a10 	vmov	r3, s0
   c21fa:	4a89      	ldr	r2, [pc, #548]	; (c2420 <__ieee754_rem_pio2f+0x22c>)
   c21fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   c2200:	4294      	cmp	r4, r2
   c2202:	b086      	sub	sp, #24
   c2204:	4605      	mov	r5, r0
   c2206:	dd70      	ble.n	c22ea <__ieee754_rem_pio2f+0xf6>
   c2208:	4a86      	ldr	r2, [pc, #536]	; (c2424 <__ieee754_rem_pio2f+0x230>)
   c220a:	4294      	cmp	r4, r2
   c220c:	ee10 6a10 	vmov	r6, s0
   c2210:	dc22      	bgt.n	c2258 <__ieee754_rem_pio2f+0x64>
   c2212:	2b00      	cmp	r3, #0
   c2214:	eddf 7a84 	vldr	s15, [pc, #528]	; c2428 <__ieee754_rem_pio2f+0x234>
   c2218:	4a84      	ldr	r2, [pc, #528]	; (c242c <__ieee754_rem_pio2f+0x238>)
   c221a:	f024 040f 	bic.w	r4, r4, #15
   c221e:	eeb0 7a40 	vmov.f32	s14, s0
   c2222:	f340 80e4 	ble.w	c23ee <__ieee754_rem_pio2f+0x1fa>
   c2226:	4294      	cmp	r4, r2
   c2228:	ee70 7a67 	vsub.f32	s15, s0, s15
   c222c:	bf09      	itett	eq
   c222e:	eddf 6a80 	vldreq	s13, [pc, #512]	; c2430 <__ieee754_rem_pio2f+0x23c>
   c2232:	ed9f 7a80 	vldrne	s14, [pc, #512]	; c2434 <__ieee754_rem_pio2f+0x240>
   c2236:	ed9f 7a80 	vldreq	s14, [pc, #512]	; c2438 <__ieee754_rem_pio2f+0x244>
   c223a:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   c223e:	2001      	movs	r0, #1
   c2240:	ee77 6ac7 	vsub.f32	s13, s15, s14
   c2244:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c2248:	edc5 6a00 	vstr	s13, [r5]
   c224c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2250:	edc5 7a01 	vstr	s15, [r5, #4]
   c2254:	b006      	add	sp, #24
   c2256:	bd70      	pop	{r4, r5, r6, pc}
   c2258:	4a78      	ldr	r2, [pc, #480]	; (c243c <__ieee754_rem_pio2f+0x248>)
   c225a:	4294      	cmp	r4, r2
   c225c:	dd54      	ble.n	c2308 <__ieee754_rem_pio2f+0x114>
   c225e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c2262:	da49      	bge.n	c22f8 <__ieee754_rem_pio2f+0x104>
   c2264:	15e2      	asrs	r2, r4, #23
   c2266:	3a86      	subs	r2, #134	; 0x86
   c2268:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   c226c:	ee07 3a90 	vmov	s15, r3
   c2270:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c2274:	eddf 6a72 	vldr	s13, [pc, #456]	; c2440 <__ieee754_rem_pio2f+0x24c>
   c2278:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c227c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2280:	ed8d 7a03 	vstr	s14, [sp, #12]
   c2284:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2288:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c228c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2290:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2294:	ed8d 7a04 	vstr	s14, [sp, #16]
   c2298:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c229c:	eef5 7a40 	vcmp.f32	s15, #0.0
   c22a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c22a4:	edcd 7a05 	vstr	s15, [sp, #20]
   c22a8:	f040 8090 	bne.w	c23cc <__ieee754_rem_pio2f+0x1d8>
   c22ac:	eeb5 7a40 	vcmp.f32	s14, #0.0
   c22b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c22b4:	bf14      	ite	ne
   c22b6:	2302      	movne	r3, #2
   c22b8:	2301      	moveq	r3, #1
   c22ba:	4962      	ldr	r1, [pc, #392]	; (c2444 <__ieee754_rem_pio2f+0x250>)
   c22bc:	9101      	str	r1, [sp, #4]
   c22be:	2102      	movs	r1, #2
   c22c0:	9100      	str	r1, [sp, #0]
   c22c2:	a803      	add	r0, sp, #12
   c22c4:	4629      	mov	r1, r5
   c22c6:	f000 f94d 	bl	c2564 <__kernel_rem_pio2f>
   c22ca:	2e00      	cmp	r6, #0
   c22cc:	dac2      	bge.n	c2254 <__ieee754_rem_pio2f+0x60>
   c22ce:	ed95 7a00 	vldr	s14, [r5]
   c22d2:	edd5 7a01 	vldr	s15, [r5, #4]
   c22d6:	eeb1 7a47 	vneg.f32	s14, s14
   c22da:	eef1 7a67 	vneg.f32	s15, s15
   c22de:	ed85 7a00 	vstr	s14, [r5]
   c22e2:	edc5 7a01 	vstr	s15, [r5, #4]
   c22e6:	4240      	negs	r0, r0
   c22e8:	e7b4      	b.n	c2254 <__ieee754_rem_pio2f+0x60>
   c22ea:	2200      	movs	r2, #0
   c22ec:	ed85 0a00 	vstr	s0, [r5]
   c22f0:	6042      	str	r2, [r0, #4]
   c22f2:	2000      	movs	r0, #0
   c22f4:	b006      	add	sp, #24
   c22f6:	bd70      	pop	{r4, r5, r6, pc}
   c22f8:	ee70 7a40 	vsub.f32	s15, s0, s0
   c22fc:	2000      	movs	r0, #0
   c22fe:	edc5 7a01 	vstr	s15, [r5, #4]
   c2302:	edc5 7a00 	vstr	s15, [r5]
   c2306:	e7a5      	b.n	c2254 <__ieee754_rem_pio2f+0x60>
   c2308:	f000 ff32 	bl	c3170 <fabsf>
   c230c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; c2448 <__ieee754_rem_pio2f+0x254>
   c2310:	ed9f 6a45 	vldr	s12, [pc, #276]	; c2428 <__ieee754_rem_pio2f+0x234>
   c2314:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2318:	eee0 7a07 	vfma.f32	s15, s0, s14
   c231c:	ed9f 7a45 	vldr	s14, [pc, #276]	; c2434 <__ieee754_rem_pio2f+0x240>
   c2320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2324:	ee17 0a90 	vmov	r0, s15
   c2328:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   c232c:	281f      	cmp	r0, #31
   c232e:	eea6 0ac6 	vfms.f32	s0, s13, s12
   c2332:	ee66 7a87 	vmul.f32	s15, s13, s14
   c2336:	eeb1 6a66 	vneg.f32	s12, s13
   c233a:	dc1e      	bgt.n	c237a <__ieee754_rem_pio2f+0x186>
   c233c:	4a43      	ldr	r2, [pc, #268]	; (c244c <__ieee754_rem_pio2f+0x258>)
   c233e:	1e41      	subs	r1, r0, #1
   c2340:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   c2344:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c2348:	4293      	cmp	r3, r2
   c234a:	d016      	beq.n	c237a <__ieee754_rem_pio2f+0x186>
   c234c:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2350:	ed85 7a00 	vstr	s14, [r5]
   c2354:	ee30 0a47 	vsub.f32	s0, s0, s14
   c2358:	2e00      	cmp	r6, #0
   c235a:	ee30 0a67 	vsub.f32	s0, s0, s15
   c235e:	ed85 0a01 	vstr	s0, [r5, #4]
   c2362:	f6bf af77 	bge.w	c2254 <__ieee754_rem_pio2f+0x60>
   c2366:	eeb1 7a47 	vneg.f32	s14, s14
   c236a:	eeb1 0a40 	vneg.f32	s0, s0
   c236e:	ed85 7a00 	vstr	s14, [r5]
   c2372:	ed85 0a01 	vstr	s0, [r5, #4]
   c2376:	4240      	negs	r0, r0
   c2378:	e76c      	b.n	c2254 <__ieee754_rem_pio2f+0x60>
   c237a:	ee30 7a67 	vsub.f32	s14, s0, s15
   c237e:	15e2      	asrs	r2, r4, #23
   c2380:	ee17 3a10 	vmov	r3, s14
   c2384:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2388:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   c238c:	2c08      	cmp	r4, #8
   c238e:	dddf      	ble.n	c2350 <__ieee754_rem_pio2f+0x15c>
   c2390:	eddf 7a27 	vldr	s15, [pc, #156]	; c2430 <__ieee754_rem_pio2f+0x23c>
   c2394:	ed9f 7a28 	vldr	s14, [pc, #160]	; c2438 <__ieee754_rem_pio2f+0x244>
   c2398:	eef0 5a40 	vmov.f32	s11, s0
   c239c:	eee6 5a27 	vfma.f32	s11, s12, s15
   c23a0:	ee30 0a65 	vsub.f32	s0, s0, s11
   c23a4:	eea6 0a27 	vfma.f32	s0, s12, s15
   c23a8:	eef0 7a40 	vmov.f32	s15, s0
   c23ac:	eed6 7a87 	vfnms.f32	s15, s13, s14
   c23b0:	ee35 7ae7 	vsub.f32	s14, s11, s15
   c23b4:	ee17 3a10 	vmov	r3, s14
   c23b8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c23bc:	1ad2      	subs	r2, r2, r3
   c23be:	2a19      	cmp	r2, #25
   c23c0:	dc06      	bgt.n	c23d0 <__ieee754_rem_pio2f+0x1dc>
   c23c2:	eeb0 0a65 	vmov.f32	s0, s11
   c23c6:	ed85 7a00 	vstr	s14, [r5]
   c23ca:	e7c3      	b.n	c2354 <__ieee754_rem_pio2f+0x160>
   c23cc:	2303      	movs	r3, #3
   c23ce:	e774      	b.n	c22ba <__ieee754_rem_pio2f+0xc6>
   c23d0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c2450 <__ieee754_rem_pio2f+0x25c>
   c23d4:	ed9f 5a1f 	vldr	s10, [pc, #124]	; c2454 <__ieee754_rem_pio2f+0x260>
   c23d8:	eeb0 0a65 	vmov.f32	s0, s11
   c23dc:	eea6 0a07 	vfma.f32	s0, s12, s14
   c23e0:	ee75 7ac0 	vsub.f32	s15, s11, s0
   c23e4:	eee6 7a07 	vfma.f32	s15, s12, s14
   c23e8:	eed6 7a85 	vfnms.f32	s15, s13, s10
   c23ec:	e7ae      	b.n	c234c <__ieee754_rem_pio2f+0x158>
   c23ee:	4294      	cmp	r4, r2
   c23f0:	ee70 7a27 	vadd.f32	s15, s0, s15
   c23f4:	bf09      	itett	eq
   c23f6:	eddf 6a0e 	vldreq	s13, [pc, #56]	; c2430 <__ieee754_rem_pio2f+0x23c>
   c23fa:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; c2434 <__ieee754_rem_pio2f+0x240>
   c23fe:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; c2438 <__ieee754_rem_pio2f+0x244>
   c2402:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   c2406:	f04f 30ff 	mov.w	r0, #4294967295
   c240a:	ee77 6a87 	vadd.f32	s13, s15, s14
   c240e:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c2412:	edc5 6a00 	vstr	s13, [r5]
   c2416:	ee77 7a87 	vadd.f32	s15, s15, s14
   c241a:	edc5 7a01 	vstr	s15, [r5, #4]
   c241e:	e719      	b.n	c2254 <__ieee754_rem_pio2f+0x60>
   c2420:	3f490fd8 	.word	0x3f490fd8
   c2424:	4016cbe3 	.word	0x4016cbe3
   c2428:	3fc90f80 	.word	0x3fc90f80
   c242c:	3fc90fd0 	.word	0x3fc90fd0
   c2430:	37354400 	.word	0x37354400
   c2434:	37354443 	.word	0x37354443
   c2438:	2e85a308 	.word	0x2e85a308
   c243c:	43490f80 	.word	0x43490f80
   c2440:	43800000 	.word	0x43800000
   c2444:	000c79d0 	.word	0x000c79d0
   c2448:	3f22f984 	.word	0x3f22f984
   c244c:	000c7950 	.word	0x000c7950
   c2450:	2e85a300 	.word	0x2e85a300
   c2454:	248d3132 	.word	0x248d3132

000c2458 <__ieee754_sqrtf>:
   c2458:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c245c:	4770      	bx	lr
   c245e:	bf00      	nop

000c2460 <__kernel_cosf>:
   c2460:	ee10 3a10 	vmov	r3, s0
   c2464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2468:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c246c:	da2c      	bge.n	c24c8 <__kernel_cosf+0x68>
   c246e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c2472:	ee17 3a90 	vmov	r3, s15
   c2476:	2b00      	cmp	r3, #0
   c2478:	d060      	beq.n	c253c <__kernel_cosf+0xdc>
   c247a:	ee20 7a00 	vmul.f32	s14, s0, s0
   c247e:	eddf 7a31 	vldr	s15, [pc, #196]	; c2544 <__kernel_cosf+0xe4>
   c2482:	ed9f 5a31 	vldr	s10, [pc, #196]	; c2548 <__kernel_cosf+0xe8>
   c2486:	eddf 5a31 	vldr	s11, [pc, #196]	; c254c <__kernel_cosf+0xec>
   c248a:	ed9f 6a31 	vldr	s12, [pc, #196]	; c2550 <__kernel_cosf+0xf0>
   c248e:	eddf 6a31 	vldr	s13, [pc, #196]	; c2554 <__kernel_cosf+0xf4>
   c2492:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2496:	eddf 7a30 	vldr	s15, [pc, #192]	; c2558 <__kernel_cosf+0xf8>
   c249a:	eee7 5a05 	vfma.f32	s11, s14, s10
   c249e:	eea7 6a25 	vfma.f32	s12, s14, s11
   c24a2:	eee7 7a06 	vfma.f32	s15, s14, s12
   c24a6:	eee7 6a27 	vfma.f32	s13, s14, s15
   c24aa:	ee67 6a26 	vmul.f32	s13, s14, s13
   c24ae:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c24b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c24b6:	eee7 0a26 	vfma.f32	s1, s14, s13
   c24ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c24be:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c24c2:	ee30 0a60 	vsub.f32	s0, s0, s1
   c24c6:	4770      	bx	lr
   c24c8:	ee20 7a00 	vmul.f32	s14, s0, s0
   c24cc:	eddf 7a1d 	vldr	s15, [pc, #116]	; c2544 <__kernel_cosf+0xe4>
   c24d0:	ed9f 5a1d 	vldr	s10, [pc, #116]	; c2548 <__kernel_cosf+0xe8>
   c24d4:	eddf 5a1d 	vldr	s11, [pc, #116]	; c254c <__kernel_cosf+0xec>
   c24d8:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c2550 <__kernel_cosf+0xf0>
   c24dc:	eddf 6a1d 	vldr	s13, [pc, #116]	; c2554 <__kernel_cosf+0xf4>
   c24e0:	4a1e      	ldr	r2, [pc, #120]	; (c255c <__kernel_cosf+0xfc>)
   c24e2:	eea7 5a27 	vfma.f32	s10, s14, s15
   c24e6:	4293      	cmp	r3, r2
   c24e8:	eddf 7a1b 	vldr	s15, [pc, #108]	; c2558 <__kernel_cosf+0xf8>
   c24ec:	eee5 5a07 	vfma.f32	s11, s10, s14
   c24f0:	eea5 6a87 	vfma.f32	s12, s11, s14
   c24f4:	eee6 7a07 	vfma.f32	s15, s12, s14
   c24f8:	eee7 6a87 	vfma.f32	s13, s15, s14
   c24fc:	ee66 6a87 	vmul.f32	s13, s13, s14
   c2500:	ddd5      	ble.n	c24ae <__kernel_cosf+0x4e>
   c2502:	4a17      	ldr	r2, [pc, #92]	; (c2560 <__kernel_cosf+0x100>)
   c2504:	4293      	cmp	r3, r2
   c2506:	dc14      	bgt.n	c2532 <__kernel_cosf+0xd2>
   c2508:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   c250c:	ee07 3a90 	vmov	s15, r3
   c2510:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   c2514:	ee36 6a67 	vsub.f32	s12, s12, s15
   c2518:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c251c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   c2520:	eed7 7a25 	vfnms.f32	s15, s14, s11
   c2524:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2528:	ee77 0ae0 	vsub.f32	s1, s15, s1
   c252c:	ee36 0a60 	vsub.f32	s0, s12, s1
   c2530:	4770      	bx	lr
   c2532:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   c2536:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   c253a:	e7ed      	b.n	c2518 <__kernel_cosf+0xb8>
   c253c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2540:	4770      	bx	lr
   c2542:	bf00      	nop
   c2544:	ad47d74e 	.word	0xad47d74e
   c2548:	310f74f6 	.word	0x310f74f6
   c254c:	b493f27c 	.word	0xb493f27c
   c2550:	37d00d01 	.word	0x37d00d01
   c2554:	3d2aaaab 	.word	0x3d2aaaab
   c2558:	bab60b61 	.word	0xbab60b61
   c255c:	3e999999 	.word	0x3e999999
   c2560:	3f480000 	.word	0x3f480000

000c2564 <__kernel_rem_pio2f>:
   c2564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2568:	ed2d 8b04 	vpush	{d8-d9}
   c256c:	b0db      	sub	sp, #364	; 0x16c
   c256e:	461c      	mov	r4, r3
   c2570:	9303      	str	r3, [sp, #12]
   c2572:	9106      	str	r1, [sp, #24]
   c2574:	4ba3      	ldr	r3, [pc, #652]	; (c2804 <__kernel_rem_pio2f+0x2a0>)
   c2576:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2578:	9208      	str	r2, [sp, #32]
   c257a:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   c257e:	1d11      	adds	r1, r2, #4
   c2580:	4682      	mov	sl, r0
   c2582:	f104 38ff 	add.w	r8, r4, #4294967295
   c2586:	f2c0 82a2 	blt.w	c2ace <__kernel_rem_pio2f+0x56a>
   c258a:	1ed3      	subs	r3, r2, #3
   c258c:	bf44      	itt	mi
   c258e:	4613      	movmi	r3, r2
   c2590:	3304      	addmi	r3, #4
   c2592:	10db      	asrs	r3, r3, #3
   c2594:	9302      	str	r3, [sp, #8]
   c2596:	3301      	adds	r3, #1
   c2598:	00db      	lsls	r3, r3, #3
   c259a:	9307      	str	r3, [sp, #28]
   c259c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   c25a0:	1a9b      	subs	r3, r3, r2
   c25a2:	9305      	str	r3, [sp, #20]
   c25a4:	9b02      	ldr	r3, [sp, #8]
   c25a6:	eb15 0108 	adds.w	r1, r5, r8
   c25aa:	eba3 0308 	sub.w	r3, r3, r8
   c25ae:	d416      	bmi.n	c25de <__kernel_rem_pio2f+0x7a>
   c25b0:	3101      	adds	r1, #1
   c25b2:	ed9f 7a95 	vldr	s14, [pc, #596]	; c2808 <__kernel_rem_pio2f+0x2a4>
   c25b6:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   c25b8:	4419      	add	r1, r3
   c25ba:	aa1e      	add	r2, sp, #120	; 0x78
   c25bc:	2b00      	cmp	r3, #0
   c25be:	bfa4      	itt	ge
   c25c0:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   c25c4:	ee07 4a90 	vmovge	s15, r4
   c25c8:	f103 0301 	add.w	r3, r3, #1
   c25cc:	bfac      	ite	ge
   c25ce:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   c25d2:	eef0 7a47 	vmovlt.f32	s15, s14
   c25d6:	428b      	cmp	r3, r1
   c25d8:	ece2 7a01 	vstmia	r2!, {s15}
   c25dc:	d1ee      	bne.n	c25bc <__kernel_rem_pio2f+0x58>
   c25de:	2d00      	cmp	r5, #0
   c25e0:	f2c0 82e5 	blt.w	c2bae <__kernel_rem_pio2f+0x64a>
   c25e4:	9b03      	ldr	r3, [sp, #12]
   c25e6:	a91e      	add	r1, sp, #120	; 0x78
   c25e8:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   c25ec:	ae46      	add	r6, sp, #280	; 0x118
   c25ee:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c25f2:	4640      	mov	r0, r8
   c25f4:	18ef      	adds	r7, r5, r3
   c25f6:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   c25fa:	f1b8 0f00 	cmp.w	r8, #0
   c25fe:	eddf 7a82 	vldr	s15, [pc, #520]	; c2808 <__kernel_rem_pio2f+0x2a4>
   c2602:	db09      	blt.n	c2618 <__kernel_rem_pio2f+0xb4>
   c2604:	4622      	mov	r2, r4
   c2606:	4653      	mov	r3, sl
   c2608:	ecf3 6a01 	vldmia	r3!, {s13}
   c260c:	ed32 7a01 	vldmdb	r2!, {s14}
   c2610:	428b      	cmp	r3, r1
   c2612:	eee6 7a87 	vfma.f32	s15, s13, s14
   c2616:	d1f7      	bne.n	c2608 <__kernel_rem_pio2f+0xa4>
   c2618:	3001      	adds	r0, #1
   c261a:	42b8      	cmp	r0, r7
   c261c:	ece6 7a01 	vstmia	r6!, {s15}
   c2620:	f104 0404 	add.w	r4, r4, #4
   c2624:	d1e9      	bne.n	c25fa <__kernel_rem_pio2f+0x96>
   c2626:	ab09      	add	r3, sp, #36	; 0x24
   c2628:	af0a      	add	r7, sp, #40	; 0x28
   c262a:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   c262e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   c2632:	3b08      	subs	r3, #8
   c2634:	ed9f 9a76 	vldr	s18, [pc, #472]	; c2810 <__kernel_rem_pio2f+0x2ac>
   c2638:	eddf 8a74 	vldr	s17, [pc, #464]	; c280c <__kernel_rem_pio2f+0x2a8>
   c263c:	9805      	ldr	r0, [sp, #20]
   c263e:	9304      	str	r3, [sp, #16]
   c2640:	eb0a 040c 	add.w	r4, sl, ip
   c2644:	ae46      	add	r6, sp, #280	; 0x118
   c2646:	9500      	str	r5, [sp, #0]
   c2648:	ab5a      	add	r3, sp, #360	; 0x168
   c264a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   c264e:	2d00      	cmp	r5, #0
   c2650:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   c2654:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   c2658:	dd16      	ble.n	c2688 <__kernel_rem_pio2f+0x124>
   c265a:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   c265e:	463a      	mov	r2, r7
   c2660:	ee60 7a09 	vmul.f32	s15, s0, s18
   c2664:	eeb0 7a40 	vmov.f32	s14, s0
   c2668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c266c:	ed73 6a01 	vldmdb	r3!, {s13}
   c2670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2674:	42b3      	cmp	r3, r6
   c2676:	eea7 7ae8 	vfms.f32	s14, s15, s17
   c267a:	ee37 0aa6 	vadd.f32	s0, s15, s13
   c267e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   c2682:	eca2 7a01 	vstmia	r2!, {s14}
   c2686:	d1eb      	bne.n	c2660 <__kernel_rem_pio2f+0xfc>
   c2688:	9001      	str	r0, [sp, #4]
   c268a:	f000 fdbf 	bl	c320c <scalbnf>
   c268e:	eeb0 8a40 	vmov.f32	s16, s0
   c2692:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   c2696:	ee28 0a00 	vmul.f32	s0, s16, s0
   c269a:	f000 fd71 	bl	c3180 <floorf>
   c269e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   c26a2:	eea0 8a67 	vfms.f32	s16, s0, s15
   c26a6:	9801      	ldr	r0, [sp, #4]
   c26a8:	2800      	cmp	r0, #0
   c26aa:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   c26ae:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   c26b2:	ee38 8a67 	vsub.f32	s16, s16, s15
   c26b6:	dd79      	ble.n	c27ac <__kernel_rem_pio2f+0x248>
   c26b8:	f105 3eff 	add.w	lr, r5, #4294967295
   c26bc:	f1c0 0308 	rsb	r3, r0, #8
   c26c0:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   c26c4:	fa41 fc03 	asr.w	ip, r1, r3
   c26c8:	fa0c f303 	lsl.w	r3, ip, r3
   c26cc:	1acb      	subs	r3, r1, r3
   c26ce:	f1c0 0207 	rsb	r2, r0, #7
   c26d2:	ee19 1a90 	vmov	r1, s19
   c26d6:	fa43 f202 	asr.w	r2, r3, r2
   c26da:	4461      	add	r1, ip
   c26dc:	2a00      	cmp	r2, #0
   c26de:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   c26e2:	ee09 1a90 	vmov	s19, r1
   c26e6:	dc69      	bgt.n	c27bc <__kernel_rem_pio2f+0x258>
   c26e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c26ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c26f0:	f040 80c1 	bne.w	c2876 <__kernel_rem_pio2f+0x312>
   c26f4:	9b00      	ldr	r3, [sp, #0]
   c26f6:	f105 3bff 	add.w	fp, r5, #4294967295
   c26fa:	455b      	cmp	r3, fp
   c26fc:	dc10      	bgt.n	c2720 <__kernel_rem_pio2f+0x1bc>
   c26fe:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   c2702:	3b01      	subs	r3, #1
   c2704:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2708:	2100      	movs	r1, #0
   c270a:	4694      	mov	ip, r2
   c270c:	f853 2904 	ldr.w	r2, [r3], #-4
   c2710:	454b      	cmp	r3, r9
   c2712:	ea41 0102 	orr.w	r1, r1, r2
   c2716:	d1f9      	bne.n	c270c <__kernel_rem_pio2f+0x1a8>
   c2718:	4662      	mov	r2, ip
   c271a:	2900      	cmp	r1, #0
   c271c:	f040 80f3 	bne.w	c2906 <__kernel_rem_pio2f+0x3a2>
   c2720:	9b00      	ldr	r3, [sp, #0]
   c2722:	3b01      	subs	r3, #1
   c2724:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   c2728:	2b00      	cmp	r3, #0
   c272a:	f040 80e8 	bne.w	c28fe <__kernel_rem_pio2f+0x39a>
   c272e:	9b04      	ldr	r3, [sp, #16]
   c2730:	f04f 0c01 	mov.w	ip, #1
   c2734:	f853 2904 	ldr.w	r2, [r3], #-4
   c2738:	f10c 0c01 	add.w	ip, ip, #1
   c273c:	2a00      	cmp	r2, #0
   c273e:	d0f9      	beq.n	c2734 <__kernel_rem_pio2f+0x1d0>
   c2740:	1c6b      	adds	r3, r5, #1
   c2742:	44ac      	add	ip, r5
   c2744:	469e      	mov	lr, r3
   c2746:	9a03      	ldr	r2, [sp, #12]
   c2748:	1951      	adds	r1, r2, r5
   c274a:	9a02      	ldr	r2, [sp, #8]
   c274c:	eb02 0b03 	add.w	fp, r2, r3
   c2750:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2754:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   c2756:	f10b 3bff 	add.w	fp, fp, #4294967295
   c275a:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   c275e:	ab1e      	add	r3, sp, #120	; 0x78
   c2760:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   c2764:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   c2768:	eddb 7a01 	vldr	s15, [fp, #4]
   c276c:	ed9f 7a26 	vldr	s14, [pc, #152]	; c2808 <__kernel_rem_pio2f+0x2a4>
   c2770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2774:	f1b8 0f00 	cmp.w	r8, #0
   c2778:	f10b 0b04 	add.w	fp, fp, #4
   c277c:	edc1 7a00 	vstr	s15, [r1]
   c2780:	460a      	mov	r2, r1
   c2782:	f101 0104 	add.w	r1, r1, #4
   c2786:	db09      	blt.n	c279c <__kernel_rem_pio2f+0x238>
   c2788:	4653      	mov	r3, sl
   c278a:	e001      	b.n	c2790 <__kernel_rem_pio2f+0x22c>
   c278c:	ed72 7a01 	vldmdb	r2!, {s15}
   c2790:	ecf3 6a01 	vldmia	r3!, {s13}
   c2794:	42a3      	cmp	r3, r4
   c2796:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c279a:	d1f7      	bne.n	c278c <__kernel_rem_pio2f+0x228>
   c279c:	f10e 0e01 	add.w	lr, lr, #1
   c27a0:	45e6      	cmp	lr, ip
   c27a2:	eca5 7a01 	vstmia	r5!, {s14}
   c27a6:	dddf      	ble.n	c2768 <__kernel_rem_pio2f+0x204>
   c27a8:	4665      	mov	r5, ip
   c27aa:	e74d      	b.n	c2648 <__kernel_rem_pio2f+0xe4>
   c27ac:	f040 809d 	bne.w	c28ea <__kernel_rem_pio2f+0x386>
   c27b0:	1e6b      	subs	r3, r5, #1
   c27b2:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   c27b6:	1212      	asrs	r2, r2, #8
   c27b8:	2a00      	cmp	r2, #0
   c27ba:	dd95      	ble.n	c26e8 <__kernel_rem_pio2f+0x184>
   c27bc:	ee19 3a90 	vmov	r3, s19
   c27c0:	2d00      	cmp	r5, #0
   c27c2:	f103 0301 	add.w	r3, r3, #1
   c27c6:	ee09 3a90 	vmov	s19, r3
   c27ca:	f340 8196 	ble.w	c2afa <__kernel_rem_pio2f+0x596>
   c27ce:	6839      	ldr	r1, [r7, #0]
   c27d0:	2900      	cmp	r1, #0
   c27d2:	f040 8080 	bne.w	c28d6 <__kernel_rem_pio2f+0x372>
   c27d6:	2d01      	cmp	r5, #1
   c27d8:	d026      	beq.n	c2828 <__kernel_rem_pio2f+0x2c4>
   c27da:	463b      	mov	r3, r7
   c27dc:	f04f 0c01 	mov.w	ip, #1
   c27e0:	f853 1f04 	ldr.w	r1, [r3, #4]!
   c27e4:	2900      	cmp	r1, #0
   c27e6:	d07a      	beq.n	c28de <__kernel_rem_pio2f+0x37a>
   c27e8:	f10c 0301 	add.w	r3, ip, #1
   c27ec:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   c27f0:	429d      	cmp	r5, r3
   c27f2:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   c27f6:	dd16      	ble.n	c2826 <__kernel_rem_pio2f+0x2c2>
   c27f8:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   c27fc:	44bb      	add	fp, r7
   c27fe:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2802:	e00a      	b.n	c281a <__kernel_rem_pio2f+0x2b6>
   c2804:	000c7d14 	.word	0x000c7d14
   c2808:	00000000 	.word	0x00000000
   c280c:	43800000 	.word	0x43800000
   c2810:	3b800000 	.word	0x3b800000
   c2814:	3fc90000 	.word	0x3fc90000
   c2818:	6819      	ldr	r1, [r3, #0]
   c281a:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   c281e:	f843 1b04 	str.w	r1, [r3], #4
   c2822:	455b      	cmp	r3, fp
   c2824:	d1f8      	bne.n	c2818 <__kernel_rem_pio2f+0x2b4>
   c2826:	2101      	movs	r1, #1
   c2828:	2800      	cmp	r0, #0
   c282a:	dd0c      	ble.n	c2846 <__kernel_rem_pio2f+0x2e2>
   c282c:	2801      	cmp	r0, #1
   c282e:	f000 8145 	beq.w	c2abc <__kernel_rem_pio2f+0x558>
   c2832:	2802      	cmp	r0, #2
   c2834:	d107      	bne.n	c2846 <__kernel_rem_pio2f+0x2e2>
   c2836:	f105 3cff 	add.w	ip, r5, #4294967295
   c283a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c283e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   c2842:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c2846:	2a02      	cmp	r2, #2
   c2848:	f47f af4e 	bne.w	c26e8 <__kernel_rem_pio2f+0x184>
   c284c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2850:	ee30 8a48 	vsub.f32	s16, s0, s16
   c2854:	2900      	cmp	r1, #0
   c2856:	f43f af47 	beq.w	c26e8 <__kernel_rem_pio2f+0x184>
   c285a:	9209      	str	r2, [sp, #36]	; 0x24
   c285c:	9001      	str	r0, [sp, #4]
   c285e:	f000 fcd5 	bl	c320c <scalbnf>
   c2862:	ee38 8a40 	vsub.f32	s16, s16, s0
   c2866:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c2868:	9801      	ldr	r0, [sp, #4]
   c286a:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c286e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2872:	f43f af3f 	beq.w	c26f4 <__kernel_rem_pio2f+0x190>
   c2876:	9202      	str	r2, [sp, #8]
   c2878:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   c287c:	eeb0 0a48 	vmov.f32	s0, s16
   c2880:	1a98      	subs	r0, r3, r2
   c2882:	9501      	str	r5, [sp, #4]
   c2884:	9d00      	ldr	r5, [sp, #0]
   c2886:	f000 fcc1 	bl	c320c <scalbnf>
   c288a:	ed1f 7a20 	vldr	s14, [pc, #-128]	; c280c <__kernel_rem_pio2f+0x2a8>
   c288e:	eeb4 0ac7 	vcmpe.f32	s0, s14
   c2892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2896:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   c289a:	f2c0 8156 	blt.w	c2b4a <__kernel_rem_pio2f+0x5e6>
   c289e:	ed5f 7a24 	vldr	s15, [pc, #-144]	; c2810 <__kernel_rem_pio2f+0x2ac>
   c28a2:	9905      	ldr	r1, [sp, #20]
   c28a4:	ee60 7a27 	vmul.f32	s15, s0, s15
   c28a8:	3108      	adds	r1, #8
   c28aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c28ae:	9105      	str	r1, [sp, #20]
   c28b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c28b4:	f103 0b01 	add.w	fp, r3, #1
   c28b8:	eea7 0ac7 	vfms.f32	s0, s15, s14
   c28bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c28c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c28c4:	ee10 1a10 	vmov	r1, s0
   c28c8:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c28cc:	ee17 3a90 	vmov	r3, s15
   c28d0:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   c28d4:	e02e      	b.n	c2934 <__kernel_rem_pio2f+0x3d0>
   c28d6:	2301      	movs	r3, #1
   c28d8:	f04f 0c00 	mov.w	ip, #0
   c28dc:	e786      	b.n	c27ec <__kernel_rem_pio2f+0x288>
   c28de:	f10c 0c01 	add.w	ip, ip, #1
   c28e2:	45ac      	cmp	ip, r5
   c28e4:	f47f af7c 	bne.w	c27e0 <__kernel_rem_pio2f+0x27c>
   c28e8:	e79e      	b.n	c2828 <__kernel_rem_pio2f+0x2c4>
   c28ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c28ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c28f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c28f6:	f280 80ef 	bge.w	c2ad8 <__kernel_rem_pio2f+0x574>
   c28fa:	2200      	movs	r2, #0
   c28fc:	e6f4      	b.n	c26e8 <__kernel_rem_pio2f+0x184>
   c28fe:	1c6b      	adds	r3, r5, #1
   c2900:	469e      	mov	lr, r3
   c2902:	469c      	mov	ip, r3
   c2904:	e71f      	b.n	c2746 <__kernel_rem_pio2f+0x1e2>
   c2906:	9905      	ldr	r1, [sp, #20]
   c2908:	f1a1 0008 	sub.w	r0, r1, #8
   c290c:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   c2910:	9005      	str	r0, [sp, #20]
   c2912:	462b      	mov	r3, r5
   c2914:	9d00      	ldr	r5, [sp, #0]
   c2916:	b969      	cbnz	r1, c2934 <__kernel_rem_pio2f+0x3d0>
   c2918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c291c:	3b02      	subs	r3, #2
   c291e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2922:	4601      	mov	r1, r0
   c2924:	f853 0904 	ldr.w	r0, [r3], #-4
   c2928:	f10b 3bff 	add.w	fp, fp, #4294967295
   c292c:	3908      	subs	r1, #8
   c292e:	2800      	cmp	r0, #0
   c2930:	d0f8      	beq.n	c2924 <__kernel_rem_pio2f+0x3c0>
   c2932:	9105      	str	r1, [sp, #20]
   c2934:	9805      	ldr	r0, [sp, #20]
   c2936:	9200      	str	r2, [sp, #0]
   c2938:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c293c:	f000 fc66 	bl	c320c <scalbnf>
   c2940:	f1bb 0f00 	cmp.w	fp, #0
   c2944:	9a00      	ldr	r2, [sp, #0]
   c2946:	f2c0 8125 	blt.w	c2b94 <__kernel_rem_pio2f+0x630>
   c294a:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   c294e:	ab46      	add	r3, sp, #280	; 0x118
   c2950:	eb03 060e 	add.w	r6, r3, lr
   c2954:	f10e 0c04 	add.w	ip, lr, #4
   c2958:	ed1f 7a53 	vldr	s14, [pc, #-332]	; c2810 <__kernel_rem_pio2f+0x2ac>
   c295c:	eb07 030c 	add.w	r3, r7, ip
   c2960:	1d31      	adds	r1, r6, #4
   c2962:	ed73 7a01 	vldmdb	r3!, {s15}
   c2966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c296a:	42bb      	cmp	r3, r7
   c296c:	ee67 7a80 	vmul.f32	s15, s15, s0
   c2970:	ee20 0a07 	vmul.f32	s0, s0, s14
   c2974:	ed61 7a01 	vstmdb	r1!, {s15}
   c2978:	d1f3      	bne.n	c2962 <__kernel_rem_pio2f+0x3fe>
   c297a:	2d00      	cmp	r5, #0
   c297c:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; c2814 <__kernel_rem_pio2f+0x2b0>
   c2980:	f04f 0400 	mov.w	r4, #0
   c2984:	db20      	blt.n	c29c8 <__kernel_rem_pio2f+0x464>
   c2986:	4892      	ldr	r0, [pc, #584]	; (c2bd0 <__kernel_rem_pio2f+0x66c>)
   c2988:	eddf 7a92 	vldr	s15, [pc, #584]	; c2bd4 <__kernel_rem_pio2f+0x670>
   c298c:	eeb0 7a46 	vmov.f32	s14, s12
   c2990:	4631      	mov	r1, r6
   c2992:	2300      	movs	r3, #0
   c2994:	e003      	b.n	c299e <__kernel_rem_pio2f+0x43a>
   c2996:	429c      	cmp	r4, r3
   c2998:	db08      	blt.n	c29ac <__kernel_rem_pio2f+0x448>
   c299a:	ecb0 7a01 	vldmia	r0!, {s14}
   c299e:	ecf1 6a01 	vldmia	r1!, {s13}
   c29a2:	3301      	adds	r3, #1
   c29a4:	429d      	cmp	r5, r3
   c29a6:	eee6 7a87 	vfma.f32	s15, s13, s14
   c29aa:	daf4      	bge.n	c2996 <__kernel_rem_pio2f+0x432>
   c29ac:	ab5a      	add	r3, sp, #360	; 0x168
   c29ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   c29b2:	45a3      	cmp	fp, r4
   c29b4:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   c29b8:	f1a6 0604 	sub.w	r6, r6, #4
   c29bc:	f104 0301 	add.w	r3, r4, #1
   c29c0:	d005      	beq.n	c29ce <__kernel_rem_pio2f+0x46a>
   c29c2:	2d00      	cmp	r5, #0
   c29c4:	461c      	mov	r4, r3
   c29c6:	dade      	bge.n	c2986 <__kernel_rem_pio2f+0x422>
   c29c8:	eddf 7a82 	vldr	s15, [pc, #520]	; c2bd4 <__kernel_rem_pio2f+0x670>
   c29cc:	e7ee      	b.n	c29ac <__kernel_rem_pio2f+0x448>
   c29ce:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c29d0:	2902      	cmp	r1, #2
   c29d2:	dc1c      	bgt.n	c2a0e <__kernel_rem_pio2f+0x4aa>
   c29d4:	2900      	cmp	r1, #0
   c29d6:	f300 8092 	bgt.w	c2afe <__kernel_rem_pio2f+0x59a>
   c29da:	d10f      	bne.n	c29fc <__kernel_rem_pio2f+0x498>
   c29dc:	ab32      	add	r3, sp, #200	; 0xc8
   c29de:	eddf 7a7d 	vldr	s15, [pc, #500]	; c2bd4 <__kernel_rem_pio2f+0x670>
   c29e2:	449c      	add	ip, r3
   c29e4:	ed3c 7a01 	vldmdb	ip!, {s14}
   c29e8:	4563      	cmp	r3, ip
   c29ea:	ee77 7a87 	vadd.f32	s15, s15, s14
   c29ee:	d1f9      	bne.n	c29e4 <__kernel_rem_pio2f+0x480>
   c29f0:	b10a      	cbz	r2, c29f6 <__kernel_rem_pio2f+0x492>
   c29f2:	eef1 7a67 	vneg.f32	s15, s15
   c29f6:	9b06      	ldr	r3, [sp, #24]
   c29f8:	edc3 7a00 	vstr	s15, [r3]
   c29fc:	ee19 3a90 	vmov	r3, s19
   c2a00:	f003 0007 	and.w	r0, r3, #7
   c2a04:	b05b      	add	sp, #364	; 0x16c
   c2a06:	ecbd 8b04 	vpop	{d8-d9}
   c2a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2a0e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c2a10:	2b03      	cmp	r3, #3
   c2a12:	d1f3      	bne.n	c29fc <__kernel_rem_pio2f+0x498>
   c2a14:	f1bb 0f00 	cmp.w	fp, #0
   c2a18:	f000 80d1 	beq.w	c2bbe <__kernel_rem_pio2f+0x65a>
   c2a1c:	ab5a      	add	r3, sp, #360	; 0x168
   c2a1e:	4473      	add	r3, lr
   c2a20:	a932      	add	r1, sp, #200	; 0xc8
   c2a22:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   c2a26:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   c2a2a:	ed73 7a01 	vldmdb	r3!, {s15}
   c2a2e:	eef0 6a47 	vmov.f32	s13, s14
   c2a32:	ee37 7a27 	vadd.f32	s14, s14, s15
   c2a36:	4299      	cmp	r1, r3
   c2a38:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2a3c:	ed83 7a00 	vstr	s14, [r3]
   c2a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c2a44:	edc3 7a01 	vstr	s15, [r3, #4]
   c2a48:	d1ef      	bne.n	c2a2a <__kernel_rem_pio2f+0x4c6>
   c2a4a:	f1bb 0f01 	cmp.w	fp, #1
   c2a4e:	f340 80b6 	ble.w	c2bbe <__kernel_rem_pio2f+0x65a>
   c2a52:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2a56:	ab5a      	add	r3, sp, #360	; 0x168
   c2a58:	f10b 3bff 	add.w	fp, fp, #4294967295
   c2a5c:	449e      	add	lr, r3
   c2a5e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   c2a62:	f10b 0304 	add.w	r3, fp, #4
   c2a66:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   c2a6a:	440b      	add	r3, r1
   c2a6c:	a833      	add	r0, sp, #204	; 0xcc
   c2a6e:	ed73 7a01 	vldmdb	r3!, {s15}
   c2a72:	eef0 6a47 	vmov.f32	s13, s14
   c2a76:	ee37 7a27 	vadd.f32	s14, s14, s15
   c2a7a:	4298      	cmp	r0, r3
   c2a7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2a80:	ed83 7a00 	vstr	s14, [r3]
   c2a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c2a88:	edc3 7a01 	vstr	s15, [r3, #4]
   c2a8c:	d1ef      	bne.n	c2a6e <__kernel_rem_pio2f+0x50a>
   c2a8e:	f10b 0b08 	add.w	fp, fp, #8
   c2a92:	eddf 7a50 	vldr	s15, [pc, #320]	; c2bd4 <__kernel_rem_pio2f+0x670>
   c2a96:	eb01 030b 	add.w	r3, r1, fp
   c2a9a:	3108      	adds	r1, #8
   c2a9c:	ed33 7a01 	vldmdb	r3!, {s14}
   c2aa0:	4299      	cmp	r1, r3
   c2aa2:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2aa6:	d1f9      	bne.n	c2a9c <__kernel_rem_pio2f+0x538>
   c2aa8:	2a00      	cmp	r2, #0
   c2aaa:	d156      	bne.n	c2b5a <__kernel_rem_pio2f+0x5f6>
   c2aac:	9906      	ldr	r1, [sp, #24]
   c2aae:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   c2ab0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   c2ab2:	600a      	str	r2, [r1, #0]
   c2ab4:	604b      	str	r3, [r1, #4]
   c2ab6:	edc1 7a02 	vstr	s15, [r1, #8]
   c2aba:	e79f      	b.n	c29fc <__kernel_rem_pio2f+0x498>
   c2abc:	f105 3cff 	add.w	ip, r5, #4294967295
   c2ac0:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c2ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   c2ac8:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c2acc:	e6bb      	b.n	c2846 <__kernel_rem_pio2f+0x2e2>
   c2ace:	2308      	movs	r3, #8
   c2ad0:	9307      	str	r3, [sp, #28]
   c2ad2:	2300      	movs	r3, #0
   c2ad4:	9302      	str	r3, [sp, #8]
   c2ad6:	e561      	b.n	c259c <__kernel_rem_pio2f+0x38>
   c2ad8:	ee19 3a90 	vmov	r3, s19
   c2adc:	2d00      	cmp	r5, #0
   c2ade:	f103 0301 	add.w	r3, r3, #1
   c2ae2:	ee09 3a90 	vmov	s19, r3
   c2ae6:	bfc8      	it	gt
   c2ae8:	2202      	movgt	r2, #2
   c2aea:	f73f ae70 	bgt.w	c27ce <__kernel_rem_pio2f+0x26a>
   c2aee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c2af2:	ee37 8ac8 	vsub.f32	s16, s15, s16
   c2af6:	2202      	movs	r2, #2
   c2af8:	e5f6      	b.n	c26e8 <__kernel_rem_pio2f+0x184>
   c2afa:	2100      	movs	r1, #0
   c2afc:	e694      	b.n	c2828 <__kernel_rem_pio2f+0x2c4>
   c2afe:	a932      	add	r1, sp, #200	; 0xc8
   c2b00:	eddf 7a34 	vldr	s15, [pc, #208]	; c2bd4 <__kernel_rem_pio2f+0x670>
   c2b04:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c2b08:	ed33 7a01 	vldmdb	r3!, {s14}
   c2b0c:	4299      	cmp	r1, r3
   c2b0e:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2b12:	d1f9      	bne.n	c2b08 <__kernel_rem_pio2f+0x5a4>
   c2b14:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   c2b18:	bb8a      	cbnz	r2, c2b7e <__kernel_rem_pio2f+0x61a>
   c2b1a:	9b06      	ldr	r3, [sp, #24]
   c2b1c:	f1bb 0f00 	cmp.w	fp, #0
   c2b20:	edc3 7a00 	vstr	s15, [r3]
   c2b24:	ee77 7a67 	vsub.f32	s15, s14, s15
   c2b28:	dd0b      	ble.n	c2b42 <__kernel_rem_pio2f+0x5de>
   c2b2a:	a933      	add	r1, sp, #204	; 0xcc
   c2b2c:	2301      	movs	r3, #1
   c2b2e:	ecb1 7a01 	vldmia	r1!, {s14}
   c2b32:	3301      	adds	r3, #1
   c2b34:	459b      	cmp	fp, r3
   c2b36:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2b3a:	daf8      	bge.n	c2b2e <__kernel_rem_pio2f+0x5ca>
   c2b3c:	b10a      	cbz	r2, c2b42 <__kernel_rem_pio2f+0x5de>
   c2b3e:	eef1 7a67 	vneg.f32	s15, s15
   c2b42:	9b06      	ldr	r3, [sp, #24]
   c2b44:	edc3 7a01 	vstr	s15, [r3, #4]
   c2b48:	e758      	b.n	c29fc <__kernel_rem_pio2f+0x498>
   c2b4a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c2b4e:	469b      	mov	fp, r3
   c2b50:	ee10 1a10 	vmov	r1, s0
   c2b54:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c2b58:	e6ec      	b.n	c2934 <__kernel_rem_pio2f+0x3d0>
   c2b5a:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   c2b5e:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   c2b62:	9b06      	ldr	r3, [sp, #24]
   c2b64:	eef1 6a66 	vneg.f32	s13, s13
   c2b68:	eeb1 7a47 	vneg.f32	s14, s14
   c2b6c:	eef1 7a67 	vneg.f32	s15, s15
   c2b70:	edc3 6a00 	vstr	s13, [r3]
   c2b74:	ed83 7a01 	vstr	s14, [r3, #4]
   c2b78:	edc3 7a02 	vstr	s15, [r3, #8]
   c2b7c:	e73e      	b.n	c29fc <__kernel_rem_pio2f+0x498>
   c2b7e:	9b06      	ldr	r3, [sp, #24]
   c2b80:	eef1 6a67 	vneg.f32	s13, s15
   c2b84:	f1bb 0f00 	cmp.w	fp, #0
   c2b88:	ee77 7a67 	vsub.f32	s15, s14, s15
   c2b8c:	edc3 6a00 	vstr	s13, [r3]
   c2b90:	dccb      	bgt.n	c2b2a <__kernel_rem_pio2f+0x5c6>
   c2b92:	e7d4      	b.n	c2b3e <__kernel_rem_pio2f+0x5da>
   c2b94:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c2b96:	2b02      	cmp	r3, #2
   c2b98:	dc0d      	bgt.n	c2bb6 <__kernel_rem_pio2f+0x652>
   c2b9a:	2b00      	cmp	r3, #0
   c2b9c:	dc14      	bgt.n	c2bc8 <__kernel_rem_pio2f+0x664>
   c2b9e:	f47f af2d 	bne.w	c29fc <__kernel_rem_pio2f+0x498>
   c2ba2:	eddf 7a0c 	vldr	s15, [pc, #48]	; c2bd4 <__kernel_rem_pio2f+0x670>
   c2ba6:	2a00      	cmp	r2, #0
   c2ba8:	f43f af25 	beq.w	c29f6 <__kernel_rem_pio2f+0x492>
   c2bac:	e721      	b.n	c29f2 <__kernel_rem_pio2f+0x48e>
   c2bae:	9b03      	ldr	r3, [sp, #12]
   c2bb0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c2bb4:	e537      	b.n	c2626 <__kernel_rem_pio2f+0xc2>
   c2bb6:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c2bb8:	2b03      	cmp	r3, #3
   c2bba:	f47f af1f 	bne.w	c29fc <__kernel_rem_pio2f+0x498>
   c2bbe:	eddf 7a05 	vldr	s15, [pc, #20]	; c2bd4 <__kernel_rem_pio2f+0x670>
   c2bc2:	2a00      	cmp	r2, #0
   c2bc4:	d1c9      	bne.n	c2b5a <__kernel_rem_pio2f+0x5f6>
   c2bc6:	e771      	b.n	c2aac <__kernel_rem_pio2f+0x548>
   c2bc8:	eddf 7a02 	vldr	s15, [pc, #8]	; c2bd4 <__kernel_rem_pio2f+0x670>
   c2bcc:	e7a2      	b.n	c2b14 <__kernel_rem_pio2f+0x5b0>
   c2bce:	bf00      	nop
   c2bd0:	000c7cec 	.word	0x000c7cec
   c2bd4:	00000000 	.word	0x00000000

000c2bd8 <__kernel_sinf>:
   c2bd8:	ee10 3a10 	vmov	r3, s0
   c2bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2be0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c2be4:	da04      	bge.n	c2bf0 <__kernel_sinf+0x18>
   c2be6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c2bea:	ee17 3a90 	vmov	r3, s15
   c2bee:	b35b      	cbz	r3, c2c48 <__kernel_sinf+0x70>
   c2bf0:	ee60 7a00 	vmul.f32	s15, s0, s0
   c2bf4:	ed9f 7a15 	vldr	s14, [pc, #84]	; c2c4c <__kernel_sinf+0x74>
   c2bf8:	eddf 5a15 	vldr	s11, [pc, #84]	; c2c50 <__kernel_sinf+0x78>
   c2bfc:	ed9f 6a15 	vldr	s12, [pc, #84]	; c2c54 <__kernel_sinf+0x7c>
   c2c00:	eddf 6a15 	vldr	s13, [pc, #84]	; c2c58 <__kernel_sinf+0x80>
   c2c04:	eee7 5a87 	vfma.f32	s11, s15, s14
   c2c08:	ed9f 7a14 	vldr	s14, [pc, #80]	; c2c5c <__kernel_sinf+0x84>
   c2c0c:	eea5 6aa7 	vfma.f32	s12, s11, s15
   c2c10:	ee20 5a27 	vmul.f32	s10, s0, s15
   c2c14:	eee6 6a27 	vfma.f32	s13, s12, s15
   c2c18:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c2c1c:	b930      	cbnz	r0, c2c2c <__kernel_sinf+0x54>
   c2c1e:	eddf 6a10 	vldr	s13, [pc, #64]	; c2c60 <__kernel_sinf+0x88>
   c2c22:	eee7 6a87 	vfma.f32	s13, s15, s14
   c2c26:	eea6 0a85 	vfma.f32	s0, s13, s10
   c2c2a:	4770      	bx	lr
   c2c2c:	ee27 7a45 	vnmul.f32	s14, s14, s10
   c2c30:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   c2c34:	eea0 7aa6 	vfma.f32	s14, s1, s13
   c2c38:	eddf 6a0a 	vldr	s13, [pc, #40]	; c2c64 <__kernel_sinf+0x8c>
   c2c3c:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c2c40:	eee5 0a26 	vfma.f32	s1, s10, s13
   c2c44:	ee30 0a60 	vsub.f32	s0, s0, s1
   c2c48:	4770      	bx	lr
   c2c4a:	bf00      	nop
   c2c4c:	2f2ec9d3 	.word	0x2f2ec9d3
   c2c50:	b2d72f34 	.word	0xb2d72f34
   c2c54:	3638ef1b 	.word	0x3638ef1b
   c2c58:	b9500d01 	.word	0xb9500d01
   c2c5c:	3c088889 	.word	0x3c088889
   c2c60:	be2aaaab 	.word	0xbe2aaaab
   c2c64:	3e2aaaab 	.word	0x3e2aaaab

000c2c68 <atan>:
   c2c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2c6c:	ec55 4b10 	vmov	r4, r5, d0
   c2c70:	4bc3      	ldr	r3, [pc, #780]	; (c2f80 <atan+0x318>)
   c2c72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   c2c76:	429e      	cmp	r6, r3
   c2c78:	46aa      	mov	sl, r5
   c2c7a:	dd17      	ble.n	c2cac <atan+0x44>
   c2c7c:	4bc1      	ldr	r3, [pc, #772]	; (c2f84 <atan+0x31c>)
   c2c7e:	429e      	cmp	r6, r3
   c2c80:	dc0a      	bgt.n	c2c98 <atan+0x30>
   c2c82:	d007      	beq.n	c2c94 <atan+0x2c>
   c2c84:	f1ba 0f00 	cmp.w	sl, #0
   c2c88:	f340 80cb 	ble.w	c2e22 <atan+0x1ba>
   c2c8c:	ed9f 0ba0 	vldr	d0, [pc, #640]	; c2f10 <atan+0x2a8>
   c2c90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2c94:	2c00      	cmp	r4, #0
   c2c96:	d0f5      	beq.n	c2c84 <atan+0x1c>
   c2c98:	4622      	mov	r2, r4
   c2c9a:	462b      	mov	r3, r5
   c2c9c:	4620      	mov	r0, r4
   c2c9e:	4629      	mov	r1, r5
   c2ca0:	f000 fb2c 	bl	c32fc <__adddf3>
   c2ca4:	ec41 0b10 	vmov	d0, r0, r1
   c2ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2cac:	4bb6      	ldr	r3, [pc, #728]	; (c2f88 <atan+0x320>)
   c2cae:	429e      	cmp	r6, r3
   c2cb0:	f300 80bb 	bgt.w	c2e2a <atan+0x1c2>
   c2cb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   c2cb8:	429e      	cmp	r6, r3
   c2cba:	f340 80a0 	ble.w	c2dfe <atan+0x196>
   c2cbe:	f04f 3bff 	mov.w	fp, #4294967295
   c2cc2:	4622      	mov	r2, r4
   c2cc4:	462b      	mov	r3, r5
   c2cc6:	4620      	mov	r0, r4
   c2cc8:	4629      	mov	r1, r5
   c2cca:	f000 fccd 	bl	c3668 <__aeabi_dmul>
   c2cce:	4602      	mov	r2, r0
   c2cd0:	460b      	mov	r3, r1
   c2cd2:	4680      	mov	r8, r0
   c2cd4:	4689      	mov	r9, r1
   c2cd6:	f000 fcc7 	bl	c3668 <__aeabi_dmul>
   c2cda:	a38f      	add	r3, pc, #572	; (adr r3, c2f18 <atan+0x2b0>)
   c2cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2ce0:	4606      	mov	r6, r0
   c2ce2:	460f      	mov	r7, r1
   c2ce4:	f000 fcc0 	bl	c3668 <__aeabi_dmul>
   c2ce8:	a38d      	add	r3, pc, #564	; (adr r3, c2f20 <atan+0x2b8>)
   c2cea:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2cee:	f000 fb05 	bl	c32fc <__adddf3>
   c2cf2:	4632      	mov	r2, r6
   c2cf4:	463b      	mov	r3, r7
   c2cf6:	f000 fcb7 	bl	c3668 <__aeabi_dmul>
   c2cfa:	a38b      	add	r3, pc, #556	; (adr r3, c2f28 <atan+0x2c0>)
   c2cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2d00:	f000 fafc 	bl	c32fc <__adddf3>
   c2d04:	4632      	mov	r2, r6
   c2d06:	463b      	mov	r3, r7
   c2d08:	f000 fcae 	bl	c3668 <__aeabi_dmul>
   c2d0c:	a388      	add	r3, pc, #544	; (adr r3, c2f30 <atan+0x2c8>)
   c2d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2d12:	f000 faf3 	bl	c32fc <__adddf3>
   c2d16:	4632      	mov	r2, r6
   c2d18:	463b      	mov	r3, r7
   c2d1a:	f000 fca5 	bl	c3668 <__aeabi_dmul>
   c2d1e:	a386      	add	r3, pc, #536	; (adr r3, c2f38 <atan+0x2d0>)
   c2d20:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2d24:	f000 faea 	bl	c32fc <__adddf3>
   c2d28:	4632      	mov	r2, r6
   c2d2a:	463b      	mov	r3, r7
   c2d2c:	f000 fc9c 	bl	c3668 <__aeabi_dmul>
   c2d30:	a383      	add	r3, pc, #524	; (adr r3, c2f40 <atan+0x2d8>)
   c2d32:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2d36:	f000 fae1 	bl	c32fc <__adddf3>
   c2d3a:	4642      	mov	r2, r8
   c2d3c:	464b      	mov	r3, r9
   c2d3e:	f000 fc93 	bl	c3668 <__aeabi_dmul>
   c2d42:	a381      	add	r3, pc, #516	; (adr r3, c2f48 <atan+0x2e0>)
   c2d44:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2d48:	4680      	mov	r8, r0
   c2d4a:	4689      	mov	r9, r1
   c2d4c:	4630      	mov	r0, r6
   c2d4e:	4639      	mov	r1, r7
   c2d50:	f000 fc8a 	bl	c3668 <__aeabi_dmul>
   c2d54:	a37e      	add	r3, pc, #504	; (adr r3, c2f50 <atan+0x2e8>)
   c2d56:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2d5a:	f000 facd 	bl	c32f8 <__aeabi_dsub>
   c2d5e:	4632      	mov	r2, r6
   c2d60:	463b      	mov	r3, r7
   c2d62:	f000 fc81 	bl	c3668 <__aeabi_dmul>
   c2d66:	a37c      	add	r3, pc, #496	; (adr r3, c2f58 <atan+0x2f0>)
   c2d68:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2d6c:	f000 fac4 	bl	c32f8 <__aeabi_dsub>
   c2d70:	4632      	mov	r2, r6
   c2d72:	463b      	mov	r3, r7
   c2d74:	f000 fc78 	bl	c3668 <__aeabi_dmul>
   c2d78:	a379      	add	r3, pc, #484	; (adr r3, c2f60 <atan+0x2f8>)
   c2d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2d7e:	f000 fabb 	bl	c32f8 <__aeabi_dsub>
   c2d82:	4632      	mov	r2, r6
   c2d84:	463b      	mov	r3, r7
   c2d86:	f000 fc6f 	bl	c3668 <__aeabi_dmul>
   c2d8a:	a377      	add	r3, pc, #476	; (adr r3, c2f68 <atan+0x300>)
   c2d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2d90:	f000 fab2 	bl	c32f8 <__aeabi_dsub>
   c2d94:	4632      	mov	r2, r6
   c2d96:	463b      	mov	r3, r7
   c2d98:	f000 fc66 	bl	c3668 <__aeabi_dmul>
   c2d9c:	f1bb 3fff 	cmp.w	fp, #4294967295
   c2da0:	4602      	mov	r2, r0
   c2da2:	460b      	mov	r3, r1
   c2da4:	4640      	mov	r0, r8
   c2da6:	4649      	mov	r1, r9
   c2da8:	d062      	beq.n	c2e70 <atan+0x208>
   c2daa:	f000 faa7 	bl	c32fc <__adddf3>
   c2dae:	4e77      	ldr	r6, [pc, #476]	; (c2f8c <atan+0x324>)
   c2db0:	4622      	mov	r2, r4
   c2db2:	462b      	mov	r3, r5
   c2db4:	f000 fc58 	bl	c3668 <__aeabi_dmul>
   c2db8:	4b75      	ldr	r3, [pc, #468]	; (c2f90 <atan+0x328>)
   c2dba:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   c2dbe:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   c2dc2:	449b      	add	fp, r3
   c2dc4:	e9db 2300 	ldrd	r2, r3, [fp]
   c2dc8:	f000 fa96 	bl	c32f8 <__aeabi_dsub>
   c2dcc:	4622      	mov	r2, r4
   c2dce:	462b      	mov	r3, r5
   c2dd0:	f000 fa92 	bl	c32f8 <__aeabi_dsub>
   c2dd4:	4602      	mov	r2, r0
   c2dd6:	460b      	mov	r3, r1
   c2dd8:	e9d6 0100 	ldrd	r0, r1, [r6]
   c2ddc:	f000 fa8c 	bl	c32f8 <__aeabi_dsub>
   c2de0:	f1ba 0f00 	cmp.w	sl, #0
   c2de4:	ec41 0b10 	vmov	d0, r0, r1
   c2de8:	f6bf af5e 	bge.w	c2ca8 <atan+0x40>
   c2dec:	ee10 1a90 	vmov	r1, s1
   c2df0:	4602      	mov	r2, r0
   c2df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2df6:	ec43 2b10 	vmov	d0, r2, r3
   c2dfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2dfe:	a35c      	add	r3, pc, #368	; (adr r3, c2f70 <atan+0x308>)
   c2e00:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2e04:	ee10 0a10 	vmov	r0, s0
   c2e08:	4629      	mov	r1, r5
   c2e0a:	f000 fa77 	bl	c32fc <__adddf3>
   c2e0e:	4b61      	ldr	r3, [pc, #388]	; (c2f94 <atan+0x32c>)
   c2e10:	2200      	movs	r2, #0
   c2e12:	f000 feb9 	bl	c3b88 <__aeabi_dcmpgt>
   c2e16:	2800      	cmp	r0, #0
   c2e18:	f43f af51 	beq.w	c2cbe <atan+0x56>
   c2e1c:	ec45 4b10 	vmov	d0, r4, r5
   c2e20:	e742      	b.n	c2ca8 <atan+0x40>
   c2e22:	ed9f 0b55 	vldr	d0, [pc, #340]	; c2f78 <atan+0x310>
   c2e26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2e2a:	f000 f8bd 	bl	c2fa8 <fabs>
   c2e2e:	4b5a      	ldr	r3, [pc, #360]	; (c2f98 <atan+0x330>)
   c2e30:	429e      	cmp	r6, r3
   c2e32:	ec55 4b10 	vmov	r4, r5, d0
   c2e36:	dc2b      	bgt.n	c2e90 <atan+0x228>
   c2e38:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   c2e3c:	429e      	cmp	r6, r3
   c2e3e:	dc56      	bgt.n	c2eee <atan+0x286>
   c2e40:	ee10 2a10 	vmov	r2, s0
   c2e44:	462b      	mov	r3, r5
   c2e46:	ee10 0a10 	vmov	r0, s0
   c2e4a:	4629      	mov	r1, r5
   c2e4c:	f000 fa56 	bl	c32fc <__adddf3>
   c2e50:	4b50      	ldr	r3, [pc, #320]	; (c2f94 <atan+0x32c>)
   c2e52:	2200      	movs	r2, #0
   c2e54:	f000 fa50 	bl	c32f8 <__aeabi_dsub>
   c2e58:	4602      	mov	r2, r0
   c2e5a:	460b      	mov	r3, r1
   c2e5c:	4620      	mov	r0, r4
   c2e5e:	4629      	mov	r1, r5
   c2e60:	4614      	mov	r4, r2
   c2e62:	461d      	mov	r5, r3
   c2e64:	f04f 0b00 	mov.w	fp, #0
   c2e68:	2200      	movs	r2, #0
   c2e6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c2e6e:	e027      	b.n	c2ec0 <atan+0x258>
   c2e70:	f000 fa44 	bl	c32fc <__adddf3>
   c2e74:	4622      	mov	r2, r4
   c2e76:	462b      	mov	r3, r5
   c2e78:	f000 fbf6 	bl	c3668 <__aeabi_dmul>
   c2e7c:	4602      	mov	r2, r0
   c2e7e:	460b      	mov	r3, r1
   c2e80:	4620      	mov	r0, r4
   c2e82:	4629      	mov	r1, r5
   c2e84:	f000 fa38 	bl	c32f8 <__aeabi_dsub>
   c2e88:	ec41 0b10 	vmov	d0, r0, r1
   c2e8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2e90:	4b42      	ldr	r3, [pc, #264]	; (c2f9c <atan+0x334>)
   c2e92:	429e      	cmp	r6, r3
   c2e94:	da1f      	bge.n	c2ed6 <atan+0x26e>
   c2e96:	4b42      	ldr	r3, [pc, #264]	; (c2fa0 <atan+0x338>)
   c2e98:	2200      	movs	r2, #0
   c2e9a:	4629      	mov	r1, r5
   c2e9c:	ee10 0a10 	vmov	r0, s0
   c2ea0:	f000 fa2a 	bl	c32f8 <__aeabi_dsub>
   c2ea4:	4602      	mov	r2, r0
   c2ea6:	460b      	mov	r3, r1
   c2ea8:	4620      	mov	r0, r4
   c2eaa:	4629      	mov	r1, r5
   c2eac:	4614      	mov	r4, r2
   c2eae:	461d      	mov	r5, r3
   c2eb0:	2200      	movs	r2, #0
   c2eb2:	4b3b      	ldr	r3, [pc, #236]	; (c2fa0 <atan+0x338>)
   c2eb4:	f04f 0b02 	mov.w	fp, #2
   c2eb8:	f000 fbd6 	bl	c3668 <__aeabi_dmul>
   c2ebc:	4b35      	ldr	r3, [pc, #212]	; (c2f94 <atan+0x32c>)
   c2ebe:	2200      	movs	r2, #0
   c2ec0:	f000 fa1c 	bl	c32fc <__adddf3>
   c2ec4:	4602      	mov	r2, r0
   c2ec6:	460b      	mov	r3, r1
   c2ec8:	4620      	mov	r0, r4
   c2eca:	4629      	mov	r1, r5
   c2ecc:	f000 fcf6 	bl	c38bc <__aeabi_ddiv>
   c2ed0:	4604      	mov	r4, r0
   c2ed2:	460d      	mov	r5, r1
   c2ed4:	e6f5      	b.n	c2cc2 <atan+0x5a>
   c2ed6:	462b      	mov	r3, r5
   c2ed8:	4932      	ldr	r1, [pc, #200]	; (c2fa4 <atan+0x33c>)
   c2eda:	ee10 2a10 	vmov	r2, s0
   c2ede:	2000      	movs	r0, #0
   c2ee0:	f000 fcec 	bl	c38bc <__aeabi_ddiv>
   c2ee4:	f04f 0b03 	mov.w	fp, #3
   c2ee8:	4604      	mov	r4, r0
   c2eea:	460d      	mov	r5, r1
   c2eec:	e6e9      	b.n	c2cc2 <atan+0x5a>
   c2eee:	4b29      	ldr	r3, [pc, #164]	; (c2f94 <atan+0x32c>)
   c2ef0:	2200      	movs	r2, #0
   c2ef2:	4629      	mov	r1, r5
   c2ef4:	ee10 0a10 	vmov	r0, s0
   c2ef8:	f000 f9fe 	bl	c32f8 <__aeabi_dsub>
   c2efc:	4602      	mov	r2, r0
   c2efe:	460b      	mov	r3, r1
   c2f00:	4620      	mov	r0, r4
   c2f02:	4629      	mov	r1, r5
   c2f04:	f04f 0b01 	mov.w	fp, #1
   c2f08:	4614      	mov	r4, r2
   c2f0a:	461d      	mov	r5, r3
   c2f0c:	e7d6      	b.n	c2ebc <atan+0x254>
   c2f0e:	bf00      	nop
   c2f10:	54442d18 	.word	0x54442d18
   c2f14:	3ff921fb 	.word	0x3ff921fb
   c2f18:	e322da11 	.word	0xe322da11
   c2f1c:	3f90ad3a 	.word	0x3f90ad3a
   c2f20:	24760deb 	.word	0x24760deb
   c2f24:	3fa97b4b 	.word	0x3fa97b4b
   c2f28:	a0d03d51 	.word	0xa0d03d51
   c2f2c:	3fb10d66 	.word	0x3fb10d66
   c2f30:	c54c206e 	.word	0xc54c206e
   c2f34:	3fb745cd 	.word	0x3fb745cd
   c2f38:	920083ff 	.word	0x920083ff
   c2f3c:	3fc24924 	.word	0x3fc24924
   c2f40:	5555550d 	.word	0x5555550d
   c2f44:	3fd55555 	.word	0x3fd55555
   c2f48:	2c6a6c2f 	.word	0x2c6a6c2f
   c2f4c:	bfa2b444 	.word	0xbfa2b444
   c2f50:	52defd9a 	.word	0x52defd9a
   c2f54:	3fadde2d 	.word	0x3fadde2d
   c2f58:	af749a6d 	.word	0xaf749a6d
   c2f5c:	3fb3b0f2 	.word	0x3fb3b0f2
   c2f60:	fe231671 	.word	0xfe231671
   c2f64:	3fbc71c6 	.word	0x3fbc71c6
   c2f68:	9998ebc4 	.word	0x9998ebc4
   c2f6c:	3fc99999 	.word	0x3fc99999
   c2f70:	8800759c 	.word	0x8800759c
   c2f74:	7e37e43c 	.word	0x7e37e43c
   c2f78:	54442d18 	.word	0x54442d18
   c2f7c:	bff921fb 	.word	0xbff921fb
   c2f80:	440fffff 	.word	0x440fffff
   c2f84:	7ff00000 	.word	0x7ff00000
   c2f88:	3fdbffff 	.word	0x3fdbffff
   c2f8c:	000c7d20 	.word	0x000c7d20
   c2f90:	000c7d40 	.word	0x000c7d40
   c2f94:	3ff00000 	.word	0x3ff00000
   c2f98:	3ff2ffff 	.word	0x3ff2ffff
   c2f9c:	40038000 	.word	0x40038000
   c2fa0:	3ff80000 	.word	0x3ff80000
   c2fa4:	bff00000 	.word	0xbff00000

000c2fa8 <fabs>:
   c2fa8:	ec51 0b10 	vmov	r0, r1, d0
   c2fac:	ee10 2a10 	vmov	r2, s0
   c2fb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c2fb4:	ec43 2b10 	vmov	d0, r2, r3
   c2fb8:	4770      	bx	lr
   c2fba:	bf00      	nop

000c2fbc <atanf>:
   c2fbc:	b538      	push	{r3, r4, r5, lr}
   c2fbe:	ee10 5a10 	vmov	r5, s0
   c2fc2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   c2fc6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   c2fca:	eef0 7a40 	vmov.f32	s15, s0
   c2fce:	db0b      	blt.n	c2fe8 <atanf+0x2c>
   c2fd0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c2fd4:	dc5b      	bgt.n	c308e <atanf+0xd2>
   c2fd6:	eddf 7a53 	vldr	s15, [pc, #332]	; c3124 <atanf+0x168>
   c2fda:	ed9f 0a53 	vldr	s0, [pc, #332]	; c3128 <atanf+0x16c>
   c2fde:	2d00      	cmp	r5, #0
   c2fe0:	bfc8      	it	gt
   c2fe2:	eeb0 0a67 	vmovgt.f32	s0, s15
   c2fe6:	bd38      	pop	{r3, r4, r5, pc}
   c2fe8:	4b50      	ldr	r3, [pc, #320]	; (c312c <atanf+0x170>)
   c2fea:	429c      	cmp	r4, r3
   c2fec:	dc5e      	bgt.n	c30ac <atanf+0xf0>
   c2fee:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   c2ff2:	db4f      	blt.n	c3094 <atanf+0xd8>
   c2ff4:	f04f 33ff 	mov.w	r3, #4294967295
   c2ff8:	ee67 6aa7 	vmul.f32	s13, s15, s15
   c2ffc:	eddf 4a4c 	vldr	s9, [pc, #304]	; c3130 <atanf+0x174>
   c3000:	eddf 5a4c 	vldr	s11, [pc, #304]	; c3134 <atanf+0x178>
   c3004:	ed9f 5a4c 	vldr	s10, [pc, #304]	; c3138 <atanf+0x17c>
   c3008:	ed9f 4a4c 	vldr	s8, [pc, #304]	; c313c <atanf+0x180>
   c300c:	ee26 7aa6 	vmul.f32	s14, s13, s13
   c3010:	eeb0 6a66 	vmov.f32	s12, s13
   c3014:	eee7 5a24 	vfma.f32	s11, s14, s9
   c3018:	1c5a      	adds	r2, r3, #1
   c301a:	eddf 4a49 	vldr	s9, [pc, #292]	; c3140 <atanf+0x184>
   c301e:	eddf 6a49 	vldr	s13, [pc, #292]	; c3144 <atanf+0x188>
   c3022:	eea5 5a87 	vfma.f32	s10, s11, s14
   c3026:	eee7 6a24 	vfma.f32	s13, s14, s9
   c302a:	eddf 5a47 	vldr	s11, [pc, #284]	; c3148 <atanf+0x18c>
   c302e:	eddf 4a47 	vldr	s9, [pc, #284]	; c314c <atanf+0x190>
   c3032:	eee6 5a87 	vfma.f32	s11, s13, s14
   c3036:	eea5 4a07 	vfma.f32	s8, s10, s14
   c303a:	ed9f 5a45 	vldr	s10, [pc, #276]	; c3150 <atanf+0x194>
   c303e:	eddf 6a45 	vldr	s13, [pc, #276]	; c3154 <atanf+0x198>
   c3042:	eea5 5a87 	vfma.f32	s10, s11, s14
   c3046:	eee4 4a07 	vfma.f32	s9, s8, s14
   c304a:	eddf 5a43 	vldr	s11, [pc, #268]	; c3158 <atanf+0x19c>
   c304e:	eee4 6a87 	vfma.f32	s13, s9, s14
   c3052:	eee5 5a07 	vfma.f32	s11, s10, s14
   c3056:	ee66 6a86 	vmul.f32	s13, s13, s12
   c305a:	ee25 7a87 	vmul.f32	s14, s11, s14
   c305e:	d03a      	beq.n	c30d6 <atanf+0x11a>
   c3060:	4a3e      	ldr	r2, [pc, #248]	; (c315c <atanf+0x1a0>)
   c3062:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   c3066:	ee76 6a87 	vadd.f32	s13, s13, s14
   c306a:	ed92 0a00 	vldr	s0, [r2]
   c306e:	4a3c      	ldr	r2, [pc, #240]	; (c3160 <atanf+0x1a4>)
   c3070:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   c3074:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c3078:	2d00      	cmp	r5, #0
   c307a:	ed93 7a00 	vldr	s14, [r3]
   c307e:	ee70 7a67 	vsub.f32	s15, s0, s15
   c3082:	ee37 0a67 	vsub.f32	s0, s14, s15
   c3086:	daae      	bge.n	c2fe6 <atanf+0x2a>
   c3088:	eeb1 0a40 	vneg.f32	s0, s0
   c308c:	bd38      	pop	{r3, r4, r5, pc}
   c308e:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3092:	bd38      	pop	{r3, r4, r5, pc}
   c3094:	ed9f 7a33 	vldr	s14, [pc, #204]	; c3164 <atanf+0x1a8>
   c3098:	ee30 7a07 	vadd.f32	s14, s0, s14
   c309c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   c30a0:	eeb4 7ae6 	vcmpe.f32	s14, s13
   c30a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c30a8:	dda4      	ble.n	c2ff4 <atanf+0x38>
   c30aa:	bd38      	pop	{r3, r4, r5, pc}
   c30ac:	f000 f860 	bl	c3170 <fabsf>
   c30b0:	4b2d      	ldr	r3, [pc, #180]	; (c3168 <atanf+0x1ac>)
   c30b2:	429c      	cmp	r4, r3
   c30b4:	dc16      	bgt.n	c30e4 <atanf+0x128>
   c30b6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   c30ba:	429c      	cmp	r4, r3
   c30bc:	dc27      	bgt.n	c310e <atanf+0x152>
   c30be:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c30c2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c30c6:	eea0 7a27 	vfma.f32	s14, s0, s15
   c30ca:	2300      	movs	r3, #0
   c30cc:	ee30 0a27 	vadd.f32	s0, s0, s15
   c30d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c30d4:	e790      	b.n	c2ff8 <atanf+0x3c>
   c30d6:	ee76 6a87 	vadd.f32	s13, s13, s14
   c30da:	eee6 7ae7 	vfms.f32	s15, s13, s15
   c30de:	eeb0 0a67 	vmov.f32	s0, s15
   c30e2:	bd38      	pop	{r3, r4, r5, pc}
   c30e4:	4b21      	ldr	r3, [pc, #132]	; (c316c <atanf+0x1b0>)
   c30e6:	429c      	cmp	r4, r3
   c30e8:	dc0b      	bgt.n	c3102 <atanf+0x146>
   c30ea:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   c30ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c30f2:	eea0 7a27 	vfma.f32	s14, s0, s15
   c30f6:	2302      	movs	r3, #2
   c30f8:	ee30 0a67 	vsub.f32	s0, s0, s15
   c30fc:	eec0 7a07 	vdiv.f32	s15, s0, s14
   c3100:	e77a      	b.n	c2ff8 <atanf+0x3c>
   c3102:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c3106:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c310a:	2303      	movs	r3, #3
   c310c:	e774      	b.n	c2ff8 <atanf+0x3c>
   c310e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c3112:	ee30 7a67 	vsub.f32	s14, s0, s15
   c3116:	ee30 0a27 	vadd.f32	s0, s0, s15
   c311a:	2301      	movs	r3, #1
   c311c:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c3120:	e76a      	b.n	c2ff8 <atanf+0x3c>
   c3122:	bf00      	nop
   c3124:	3fc90fdb 	.word	0x3fc90fdb
   c3128:	bfc90fdb 	.word	0xbfc90fdb
   c312c:	3edfffff 	.word	0x3edfffff
   c3130:	3c8569d7 	.word	0x3c8569d7
   c3134:	3d4bda59 	.word	0x3d4bda59
   c3138:	3d886b35 	.word	0x3d886b35
   c313c:	3dba2e6e 	.word	0x3dba2e6e
   c3140:	bd15a221 	.word	0xbd15a221
   c3144:	bd6ef16b 	.word	0xbd6ef16b
   c3148:	bd9d8795 	.word	0xbd9d8795
   c314c:	3e124925 	.word	0x3e124925
   c3150:	bde38e38 	.word	0xbde38e38
   c3154:	3eaaaaab 	.word	0x3eaaaaab
   c3158:	be4ccccd 	.word	0xbe4ccccd
   c315c:	000c7d70 	.word	0x000c7d70
   c3160:	000c7d60 	.word	0x000c7d60
   c3164:	7149f2ca 	.word	0x7149f2ca
   c3168:	3f97ffff 	.word	0x3f97ffff
   c316c:	401bffff 	.word	0x401bffff

000c3170 <fabsf>:
   c3170:	ee10 3a10 	vmov	r3, s0
   c3174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c3178:	ee00 3a10 	vmov	s0, r3
   c317c:	4770      	bx	lr
   c317e:	bf00      	nop

000c3180 <floorf>:
   c3180:	ee10 2a10 	vmov	r2, s0
   c3184:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c3188:	3b7f      	subs	r3, #127	; 0x7f
   c318a:	2b16      	cmp	r3, #22
   c318c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c3190:	dc28      	bgt.n	c31e4 <floorf+0x64>
   c3192:	2b00      	cmp	r3, #0
   c3194:	db18      	blt.n	c31c8 <floorf+0x48>
   c3196:	491a      	ldr	r1, [pc, #104]	; (c3200 <floorf+0x80>)
   c3198:	4119      	asrs	r1, r3
   c319a:	420a      	tst	r2, r1
   c319c:	d021      	beq.n	c31e2 <floorf+0x62>
   c319e:	eddf 7a19 	vldr	s15, [pc, #100]	; c3204 <floorf+0x84>
   c31a2:	ee70 7a27 	vadd.f32	s15, s0, s15
   c31a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c31aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c31ae:	dd18      	ble.n	c31e2 <floorf+0x62>
   c31b0:	2a00      	cmp	r2, #0
   c31b2:	da04      	bge.n	c31be <floorf+0x3e>
   c31b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c31b8:	fa40 f303 	asr.w	r3, r0, r3
   c31bc:	441a      	add	r2, r3
   c31be:	ea22 0301 	bic.w	r3, r2, r1
   c31c2:	ee00 3a10 	vmov	s0, r3
   c31c6:	4770      	bx	lr
   c31c8:	eddf 7a0e 	vldr	s15, [pc, #56]	; c3204 <floorf+0x84>
   c31cc:	ee70 7a27 	vadd.f32	s15, s0, s15
   c31d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c31d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c31d8:	dd03      	ble.n	c31e2 <floorf+0x62>
   c31da:	2a00      	cmp	r2, #0
   c31dc:	db08      	blt.n	c31f0 <floorf+0x70>
   c31de:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c3208 <floorf+0x88>
   c31e2:	4770      	bx	lr
   c31e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c31e8:	d3fb      	bcc.n	c31e2 <floorf+0x62>
   c31ea:	ee30 0a00 	vadd.f32	s0, s0, s0
   c31ee:	4770      	bx	lr
   c31f0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   c31f4:	2900      	cmp	r1, #0
   c31f6:	bf18      	it	ne
   c31f8:	eeb0 0a67 	vmovne.f32	s0, s15
   c31fc:	4770      	bx	lr
   c31fe:	bf00      	nop
   c3200:	007fffff 	.word	0x007fffff
   c3204:	7149f2ca 	.word	0x7149f2ca
   c3208:	00000000 	.word	0x00000000

000c320c <scalbnf>:
   c320c:	b082      	sub	sp, #8
   c320e:	ed8d 0a01 	vstr	s0, [sp, #4]
   c3212:	9b01      	ldr	r3, [sp, #4]
   c3214:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c3218:	d02a      	beq.n	c3270 <scalbnf+0x64>
   c321a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c321e:	d223      	bcs.n	c3268 <scalbnf+0x5c>
   c3220:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   c3224:	d128      	bne.n	c3278 <scalbnf+0x6c>
   c3226:	ed9d 7a01 	vldr	s14, [sp, #4]
   c322a:	eddf 7a2a 	vldr	s15, [pc, #168]	; c32d4 <scalbnf+0xc8>
   c322e:	4b2a      	ldr	r3, [pc, #168]	; (c32d8 <scalbnf+0xcc>)
   c3230:	ee67 7a27 	vmul.f32	s15, s14, s15
   c3234:	4298      	cmp	r0, r3
   c3236:	edcd 7a01 	vstr	s15, [sp, #4]
   c323a:	db37      	blt.n	c32ac <scalbnf+0xa0>
   c323c:	9b01      	ldr	r3, [sp, #4]
   c323e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c3242:	3a19      	subs	r2, #25
   c3244:	4402      	add	r2, r0
   c3246:	2afe      	cmp	r2, #254	; 0xfe
   c3248:	dd1a      	ble.n	c3280 <scalbnf+0x74>
   c324a:	ed9f 0a24 	vldr	s0, [pc, #144]	; c32dc <scalbnf+0xd0>
   c324e:	ed9f 7a24 	vldr	s14, [pc, #144]	; c32e0 <scalbnf+0xd4>
   c3252:	9b01      	ldr	r3, [sp, #4]
   c3254:	2b00      	cmp	r3, #0
   c3256:	eef0 7a40 	vmov.f32	s15, s0
   c325a:	bfb8      	it	lt
   c325c:	eeb0 0a47 	vmovlt.f32	s0, s14
   c3260:	ee20 0a27 	vmul.f32	s0, s0, s15
   c3264:	b002      	add	sp, #8
   c3266:	4770      	bx	lr
   c3268:	ee30 0a00 	vadd.f32	s0, s0, s0
   c326c:	b002      	add	sp, #8
   c326e:	4770      	bx	lr
   c3270:	ed9d 0a01 	vldr	s0, [sp, #4]
   c3274:	b002      	add	sp, #8
   c3276:	4770      	bx	lr
   c3278:	0dd2      	lsrs	r2, r2, #23
   c327a:	4402      	add	r2, r0
   c327c:	2afe      	cmp	r2, #254	; 0xfe
   c327e:	dce4      	bgt.n	c324a <scalbnf+0x3e>
   c3280:	2a00      	cmp	r2, #0
   c3282:	dc0b      	bgt.n	c329c <scalbnf+0x90>
   c3284:	f112 0f16 	cmn.w	r2, #22
   c3288:	da17      	bge.n	c32ba <scalbnf+0xae>
   c328a:	f24c 3350 	movw	r3, #50000	; 0xc350
   c328e:	4298      	cmp	r0, r3
   c3290:	dcdb      	bgt.n	c324a <scalbnf+0x3e>
   c3292:	ed9f 0a14 	vldr	s0, [pc, #80]	; c32e4 <scalbnf+0xd8>
   c3296:	ed9f 7a14 	vldr	s14, [pc, #80]	; c32e8 <scalbnf+0xdc>
   c329a:	e7da      	b.n	c3252 <scalbnf+0x46>
   c329c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c32a0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c32a4:	ee00 3a10 	vmov	s0, r3
   c32a8:	b002      	add	sp, #8
   c32aa:	4770      	bx	lr
   c32ac:	ed9f 0a0d 	vldr	s0, [pc, #52]	; c32e4 <scalbnf+0xd8>
   c32b0:	eddd 7a01 	vldr	s15, [sp, #4]
   c32b4:	ee27 0a80 	vmul.f32	s0, s15, s0
   c32b8:	e7d8      	b.n	c326c <scalbnf+0x60>
   c32ba:	3219      	adds	r2, #25
   c32bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c32c0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c32c4:	eddf 7a09 	vldr	s15, [pc, #36]	; c32ec <scalbnf+0xe0>
   c32c8:	ee07 3a10 	vmov	s14, r3
   c32cc:	ee27 0a27 	vmul.f32	s0, s14, s15
   c32d0:	e7cc      	b.n	c326c <scalbnf+0x60>
   c32d2:	bf00      	nop
   c32d4:	4c000000 	.word	0x4c000000
   c32d8:	ffff3cb0 	.word	0xffff3cb0
   c32dc:	7149f2ca 	.word	0x7149f2ca
   c32e0:	f149f2ca 	.word	0xf149f2ca
   c32e4:	0da24260 	.word	0x0da24260
   c32e8:	8da24260 	.word	0x8da24260
   c32ec:	33000000 	.word	0x33000000

000c32f0 <__aeabi_drsub>:
   c32f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c32f4:	e002      	b.n	c32fc <__adddf3>
   c32f6:	bf00      	nop

000c32f8 <__aeabi_dsub>:
   c32f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c32fc <__adddf3>:
   c32fc:	b530      	push	{r4, r5, lr}
   c32fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c3302:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c3306:	ea94 0f05 	teq	r4, r5
   c330a:	bf08      	it	eq
   c330c:	ea90 0f02 	teqeq	r0, r2
   c3310:	bf1f      	itttt	ne
   c3312:	ea54 0c00 	orrsne.w	ip, r4, r0
   c3316:	ea55 0c02 	orrsne.w	ip, r5, r2
   c331a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c331e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c3322:	f000 80e2 	beq.w	c34ea <__adddf3+0x1ee>
   c3326:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c332a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c332e:	bfb8      	it	lt
   c3330:	426d      	neglt	r5, r5
   c3332:	dd0c      	ble.n	c334e <__adddf3+0x52>
   c3334:	442c      	add	r4, r5
   c3336:	ea80 0202 	eor.w	r2, r0, r2
   c333a:	ea81 0303 	eor.w	r3, r1, r3
   c333e:	ea82 0000 	eor.w	r0, r2, r0
   c3342:	ea83 0101 	eor.w	r1, r3, r1
   c3346:	ea80 0202 	eor.w	r2, r0, r2
   c334a:	ea81 0303 	eor.w	r3, r1, r3
   c334e:	2d36      	cmp	r5, #54	; 0x36
   c3350:	bf88      	it	hi
   c3352:	bd30      	pophi	{r4, r5, pc}
   c3354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c3358:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c335c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c3360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c3364:	d002      	beq.n	c336c <__adddf3+0x70>
   c3366:	4240      	negs	r0, r0
   c3368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c336c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c3370:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c3374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c3378:	d002      	beq.n	c3380 <__adddf3+0x84>
   c337a:	4252      	negs	r2, r2
   c337c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c3380:	ea94 0f05 	teq	r4, r5
   c3384:	f000 80a7 	beq.w	c34d6 <__adddf3+0x1da>
   c3388:	f1a4 0401 	sub.w	r4, r4, #1
   c338c:	f1d5 0e20 	rsbs	lr, r5, #32
   c3390:	db0d      	blt.n	c33ae <__adddf3+0xb2>
   c3392:	fa02 fc0e 	lsl.w	ip, r2, lr
   c3396:	fa22 f205 	lsr.w	r2, r2, r5
   c339a:	1880      	adds	r0, r0, r2
   c339c:	f141 0100 	adc.w	r1, r1, #0
   c33a0:	fa03 f20e 	lsl.w	r2, r3, lr
   c33a4:	1880      	adds	r0, r0, r2
   c33a6:	fa43 f305 	asr.w	r3, r3, r5
   c33aa:	4159      	adcs	r1, r3
   c33ac:	e00e      	b.n	c33cc <__adddf3+0xd0>
   c33ae:	f1a5 0520 	sub.w	r5, r5, #32
   c33b2:	f10e 0e20 	add.w	lr, lr, #32
   c33b6:	2a01      	cmp	r2, #1
   c33b8:	fa03 fc0e 	lsl.w	ip, r3, lr
   c33bc:	bf28      	it	cs
   c33be:	f04c 0c02 	orrcs.w	ip, ip, #2
   c33c2:	fa43 f305 	asr.w	r3, r3, r5
   c33c6:	18c0      	adds	r0, r0, r3
   c33c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c33cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c33d0:	d507      	bpl.n	c33e2 <__adddf3+0xe6>
   c33d2:	f04f 0e00 	mov.w	lr, #0
   c33d6:	f1dc 0c00 	rsbs	ip, ip, #0
   c33da:	eb7e 0000 	sbcs.w	r0, lr, r0
   c33de:	eb6e 0101 	sbc.w	r1, lr, r1
   c33e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c33e6:	d31b      	bcc.n	c3420 <__adddf3+0x124>
   c33e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c33ec:	d30c      	bcc.n	c3408 <__adddf3+0x10c>
   c33ee:	0849      	lsrs	r1, r1, #1
   c33f0:	ea5f 0030 	movs.w	r0, r0, rrx
   c33f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c33f8:	f104 0401 	add.w	r4, r4, #1
   c33fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c3400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c3404:	f080 809a 	bcs.w	c353c <__adddf3+0x240>
   c3408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c340c:	bf08      	it	eq
   c340e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c3412:	f150 0000 	adcs.w	r0, r0, #0
   c3416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c341a:	ea41 0105 	orr.w	r1, r1, r5
   c341e:	bd30      	pop	{r4, r5, pc}
   c3420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c3424:	4140      	adcs	r0, r0
   c3426:	eb41 0101 	adc.w	r1, r1, r1
   c342a:	3c01      	subs	r4, #1
   c342c:	bf28      	it	cs
   c342e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c3432:	d2e9      	bcs.n	c3408 <__adddf3+0x10c>
   c3434:	f091 0f00 	teq	r1, #0
   c3438:	bf04      	itt	eq
   c343a:	4601      	moveq	r1, r0
   c343c:	2000      	moveq	r0, #0
   c343e:	fab1 f381 	clz	r3, r1
   c3442:	bf08      	it	eq
   c3444:	3320      	addeq	r3, #32
   c3446:	f1a3 030b 	sub.w	r3, r3, #11
   c344a:	f1b3 0220 	subs.w	r2, r3, #32
   c344e:	da0c      	bge.n	c346a <__adddf3+0x16e>
   c3450:	320c      	adds	r2, #12
   c3452:	dd08      	ble.n	c3466 <__adddf3+0x16a>
   c3454:	f102 0c14 	add.w	ip, r2, #20
   c3458:	f1c2 020c 	rsb	r2, r2, #12
   c345c:	fa01 f00c 	lsl.w	r0, r1, ip
   c3460:	fa21 f102 	lsr.w	r1, r1, r2
   c3464:	e00c      	b.n	c3480 <__adddf3+0x184>
   c3466:	f102 0214 	add.w	r2, r2, #20
   c346a:	bfd8      	it	le
   c346c:	f1c2 0c20 	rsble	ip, r2, #32
   c3470:	fa01 f102 	lsl.w	r1, r1, r2
   c3474:	fa20 fc0c 	lsr.w	ip, r0, ip
   c3478:	bfdc      	itt	le
   c347a:	ea41 010c 	orrle.w	r1, r1, ip
   c347e:	4090      	lslle	r0, r2
   c3480:	1ae4      	subs	r4, r4, r3
   c3482:	bfa2      	ittt	ge
   c3484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c3488:	4329      	orrge	r1, r5
   c348a:	bd30      	popge	{r4, r5, pc}
   c348c:	ea6f 0404 	mvn.w	r4, r4
   c3490:	3c1f      	subs	r4, #31
   c3492:	da1c      	bge.n	c34ce <__adddf3+0x1d2>
   c3494:	340c      	adds	r4, #12
   c3496:	dc0e      	bgt.n	c34b6 <__adddf3+0x1ba>
   c3498:	f104 0414 	add.w	r4, r4, #20
   c349c:	f1c4 0220 	rsb	r2, r4, #32
   c34a0:	fa20 f004 	lsr.w	r0, r0, r4
   c34a4:	fa01 f302 	lsl.w	r3, r1, r2
   c34a8:	ea40 0003 	orr.w	r0, r0, r3
   c34ac:	fa21 f304 	lsr.w	r3, r1, r4
   c34b0:	ea45 0103 	orr.w	r1, r5, r3
   c34b4:	bd30      	pop	{r4, r5, pc}
   c34b6:	f1c4 040c 	rsb	r4, r4, #12
   c34ba:	f1c4 0220 	rsb	r2, r4, #32
   c34be:	fa20 f002 	lsr.w	r0, r0, r2
   c34c2:	fa01 f304 	lsl.w	r3, r1, r4
   c34c6:	ea40 0003 	orr.w	r0, r0, r3
   c34ca:	4629      	mov	r1, r5
   c34cc:	bd30      	pop	{r4, r5, pc}
   c34ce:	fa21 f004 	lsr.w	r0, r1, r4
   c34d2:	4629      	mov	r1, r5
   c34d4:	bd30      	pop	{r4, r5, pc}
   c34d6:	f094 0f00 	teq	r4, #0
   c34da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c34de:	bf06      	itte	eq
   c34e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c34e4:	3401      	addeq	r4, #1
   c34e6:	3d01      	subne	r5, #1
   c34e8:	e74e      	b.n	c3388 <__adddf3+0x8c>
   c34ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c34ee:	bf18      	it	ne
   c34f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c34f4:	d029      	beq.n	c354a <__adddf3+0x24e>
   c34f6:	ea94 0f05 	teq	r4, r5
   c34fa:	bf08      	it	eq
   c34fc:	ea90 0f02 	teqeq	r0, r2
   c3500:	d005      	beq.n	c350e <__adddf3+0x212>
   c3502:	ea54 0c00 	orrs.w	ip, r4, r0
   c3506:	bf04      	itt	eq
   c3508:	4619      	moveq	r1, r3
   c350a:	4610      	moveq	r0, r2
   c350c:	bd30      	pop	{r4, r5, pc}
   c350e:	ea91 0f03 	teq	r1, r3
   c3512:	bf1e      	ittt	ne
   c3514:	2100      	movne	r1, #0
   c3516:	2000      	movne	r0, #0
   c3518:	bd30      	popne	{r4, r5, pc}
   c351a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c351e:	d105      	bne.n	c352c <__adddf3+0x230>
   c3520:	0040      	lsls	r0, r0, #1
   c3522:	4149      	adcs	r1, r1
   c3524:	bf28      	it	cs
   c3526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c352a:	bd30      	pop	{r4, r5, pc}
   c352c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c3530:	bf3c      	itt	cc
   c3532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c3536:	bd30      	popcc	{r4, r5, pc}
   c3538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c353c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c3540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c3544:	f04f 0000 	mov.w	r0, #0
   c3548:	bd30      	pop	{r4, r5, pc}
   c354a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c354e:	bf1a      	itte	ne
   c3550:	4619      	movne	r1, r3
   c3552:	4610      	movne	r0, r2
   c3554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c3558:	bf1c      	itt	ne
   c355a:	460b      	movne	r3, r1
   c355c:	4602      	movne	r2, r0
   c355e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3562:	bf06      	itte	eq
   c3564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c3568:	ea91 0f03 	teqeq	r1, r3
   c356c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c3570:	bd30      	pop	{r4, r5, pc}
   c3572:	bf00      	nop

000c3574 <__aeabi_ui2d>:
   c3574:	f090 0f00 	teq	r0, #0
   c3578:	bf04      	itt	eq
   c357a:	2100      	moveq	r1, #0
   c357c:	4770      	bxeq	lr
   c357e:	b530      	push	{r4, r5, lr}
   c3580:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3584:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3588:	f04f 0500 	mov.w	r5, #0
   c358c:	f04f 0100 	mov.w	r1, #0
   c3590:	e750      	b.n	c3434 <__adddf3+0x138>
   c3592:	bf00      	nop

000c3594 <__aeabi_i2d>:
   c3594:	f090 0f00 	teq	r0, #0
   c3598:	bf04      	itt	eq
   c359a:	2100      	moveq	r1, #0
   c359c:	4770      	bxeq	lr
   c359e:	b530      	push	{r4, r5, lr}
   c35a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c35a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c35a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c35ac:	bf48      	it	mi
   c35ae:	4240      	negmi	r0, r0
   c35b0:	f04f 0100 	mov.w	r1, #0
   c35b4:	e73e      	b.n	c3434 <__adddf3+0x138>
   c35b6:	bf00      	nop

000c35b8 <__aeabi_f2d>:
   c35b8:	0042      	lsls	r2, r0, #1
   c35ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c35be:	ea4f 0131 	mov.w	r1, r1, rrx
   c35c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c35c6:	bf1f      	itttt	ne
   c35c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c35cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c35d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c35d4:	4770      	bxne	lr
   c35d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c35da:	bf08      	it	eq
   c35dc:	4770      	bxeq	lr
   c35de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c35e2:	bf04      	itt	eq
   c35e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c35e8:	4770      	bxeq	lr
   c35ea:	b530      	push	{r4, r5, lr}
   c35ec:	f44f 7460 	mov.w	r4, #896	; 0x380
   c35f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c35f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c35f8:	e71c      	b.n	c3434 <__adddf3+0x138>
   c35fa:	bf00      	nop

000c35fc <__aeabi_ul2d>:
   c35fc:	ea50 0201 	orrs.w	r2, r0, r1
   c3600:	bf08      	it	eq
   c3602:	4770      	bxeq	lr
   c3604:	b530      	push	{r4, r5, lr}
   c3606:	f04f 0500 	mov.w	r5, #0
   c360a:	e00a      	b.n	c3622 <__aeabi_l2d+0x16>

000c360c <__aeabi_l2d>:
   c360c:	ea50 0201 	orrs.w	r2, r0, r1
   c3610:	bf08      	it	eq
   c3612:	4770      	bxeq	lr
   c3614:	b530      	push	{r4, r5, lr}
   c3616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c361a:	d502      	bpl.n	c3622 <__aeabi_l2d+0x16>
   c361c:	4240      	negs	r0, r0
   c361e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3622:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3626:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c362a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c362e:	f43f aed8 	beq.w	c33e2 <__adddf3+0xe6>
   c3632:	f04f 0203 	mov.w	r2, #3
   c3636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c363a:	bf18      	it	ne
   c363c:	3203      	addne	r2, #3
   c363e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3642:	bf18      	it	ne
   c3644:	3203      	addne	r2, #3
   c3646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c364a:	f1c2 0320 	rsb	r3, r2, #32
   c364e:	fa00 fc03 	lsl.w	ip, r0, r3
   c3652:	fa20 f002 	lsr.w	r0, r0, r2
   c3656:	fa01 fe03 	lsl.w	lr, r1, r3
   c365a:	ea40 000e 	orr.w	r0, r0, lr
   c365e:	fa21 f102 	lsr.w	r1, r1, r2
   c3662:	4414      	add	r4, r2
   c3664:	e6bd      	b.n	c33e2 <__adddf3+0xe6>
   c3666:	bf00      	nop

000c3668 <__aeabi_dmul>:
   c3668:	b570      	push	{r4, r5, r6, lr}
   c366a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c366e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3676:	bf1d      	ittte	ne
   c3678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c367c:	ea94 0f0c 	teqne	r4, ip
   c3680:	ea95 0f0c 	teqne	r5, ip
   c3684:	f000 f8de 	bleq	c3844 <__aeabi_dmul+0x1dc>
   c3688:	442c      	add	r4, r5
   c368a:	ea81 0603 	eor.w	r6, r1, r3
   c368e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c3692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c3696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c369a:	bf18      	it	ne
   c369c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c36a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c36a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c36a8:	d038      	beq.n	c371c <__aeabi_dmul+0xb4>
   c36aa:	fba0 ce02 	umull	ip, lr, r0, r2
   c36ae:	f04f 0500 	mov.w	r5, #0
   c36b2:	fbe1 e502 	umlal	lr, r5, r1, r2
   c36b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c36ba:	fbe0 e503 	umlal	lr, r5, r0, r3
   c36be:	f04f 0600 	mov.w	r6, #0
   c36c2:	fbe1 5603 	umlal	r5, r6, r1, r3
   c36c6:	f09c 0f00 	teq	ip, #0
   c36ca:	bf18      	it	ne
   c36cc:	f04e 0e01 	orrne.w	lr, lr, #1
   c36d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c36d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c36d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c36dc:	d204      	bcs.n	c36e8 <__aeabi_dmul+0x80>
   c36de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c36e2:	416d      	adcs	r5, r5
   c36e4:	eb46 0606 	adc.w	r6, r6, r6
   c36e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c36ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c36f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c36f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c36f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c36fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c3700:	bf88      	it	hi
   c3702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c3706:	d81e      	bhi.n	c3746 <__aeabi_dmul+0xde>
   c3708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c370c:	bf08      	it	eq
   c370e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c3712:	f150 0000 	adcs.w	r0, r0, #0
   c3716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c371a:	bd70      	pop	{r4, r5, r6, pc}
   c371c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c3720:	ea46 0101 	orr.w	r1, r6, r1
   c3724:	ea40 0002 	orr.w	r0, r0, r2
   c3728:	ea81 0103 	eor.w	r1, r1, r3
   c372c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c3730:	bfc2      	ittt	gt
   c3732:	ebd4 050c 	rsbsgt	r5, r4, ip
   c3736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c373a:	bd70      	popgt	{r4, r5, r6, pc}
   c373c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3740:	f04f 0e00 	mov.w	lr, #0
   c3744:	3c01      	subs	r4, #1
   c3746:	f300 80ab 	bgt.w	c38a0 <__aeabi_dmul+0x238>
   c374a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c374e:	bfde      	ittt	le
   c3750:	2000      	movle	r0, #0
   c3752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c3756:	bd70      	pople	{r4, r5, r6, pc}
   c3758:	f1c4 0400 	rsb	r4, r4, #0
   c375c:	3c20      	subs	r4, #32
   c375e:	da35      	bge.n	c37cc <__aeabi_dmul+0x164>
   c3760:	340c      	adds	r4, #12
   c3762:	dc1b      	bgt.n	c379c <__aeabi_dmul+0x134>
   c3764:	f104 0414 	add.w	r4, r4, #20
   c3768:	f1c4 0520 	rsb	r5, r4, #32
   c376c:	fa00 f305 	lsl.w	r3, r0, r5
   c3770:	fa20 f004 	lsr.w	r0, r0, r4
   c3774:	fa01 f205 	lsl.w	r2, r1, r5
   c3778:	ea40 0002 	orr.w	r0, r0, r2
   c377c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c3780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3788:	fa21 f604 	lsr.w	r6, r1, r4
   c378c:	eb42 0106 	adc.w	r1, r2, r6
   c3790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3794:	bf08      	it	eq
   c3796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c379a:	bd70      	pop	{r4, r5, r6, pc}
   c379c:	f1c4 040c 	rsb	r4, r4, #12
   c37a0:	f1c4 0520 	rsb	r5, r4, #32
   c37a4:	fa00 f304 	lsl.w	r3, r0, r4
   c37a8:	fa20 f005 	lsr.w	r0, r0, r5
   c37ac:	fa01 f204 	lsl.w	r2, r1, r4
   c37b0:	ea40 0002 	orr.w	r0, r0, r2
   c37b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c37b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c37bc:	f141 0100 	adc.w	r1, r1, #0
   c37c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c37c4:	bf08      	it	eq
   c37c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c37ca:	bd70      	pop	{r4, r5, r6, pc}
   c37cc:	f1c4 0520 	rsb	r5, r4, #32
   c37d0:	fa00 f205 	lsl.w	r2, r0, r5
   c37d4:	ea4e 0e02 	orr.w	lr, lr, r2
   c37d8:	fa20 f304 	lsr.w	r3, r0, r4
   c37dc:	fa01 f205 	lsl.w	r2, r1, r5
   c37e0:	ea43 0302 	orr.w	r3, r3, r2
   c37e4:	fa21 f004 	lsr.w	r0, r1, r4
   c37e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c37ec:	fa21 f204 	lsr.w	r2, r1, r4
   c37f0:	ea20 0002 	bic.w	r0, r0, r2
   c37f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c37f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c37fc:	bf08      	it	eq
   c37fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3802:	bd70      	pop	{r4, r5, r6, pc}
   c3804:	f094 0f00 	teq	r4, #0
   c3808:	d10f      	bne.n	c382a <__aeabi_dmul+0x1c2>
   c380a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c380e:	0040      	lsls	r0, r0, #1
   c3810:	eb41 0101 	adc.w	r1, r1, r1
   c3814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c3818:	bf08      	it	eq
   c381a:	3c01      	subeq	r4, #1
   c381c:	d0f7      	beq.n	c380e <__aeabi_dmul+0x1a6>
   c381e:	ea41 0106 	orr.w	r1, r1, r6
   c3822:	f095 0f00 	teq	r5, #0
   c3826:	bf18      	it	ne
   c3828:	4770      	bxne	lr
   c382a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c382e:	0052      	lsls	r2, r2, #1
   c3830:	eb43 0303 	adc.w	r3, r3, r3
   c3834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c3838:	bf08      	it	eq
   c383a:	3d01      	subeq	r5, #1
   c383c:	d0f7      	beq.n	c382e <__aeabi_dmul+0x1c6>
   c383e:	ea43 0306 	orr.w	r3, r3, r6
   c3842:	4770      	bx	lr
   c3844:	ea94 0f0c 	teq	r4, ip
   c3848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c384c:	bf18      	it	ne
   c384e:	ea95 0f0c 	teqne	r5, ip
   c3852:	d00c      	beq.n	c386e <__aeabi_dmul+0x206>
   c3854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3858:	bf18      	it	ne
   c385a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c385e:	d1d1      	bne.n	c3804 <__aeabi_dmul+0x19c>
   c3860:	ea81 0103 	eor.w	r1, r1, r3
   c3864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3868:	f04f 0000 	mov.w	r0, #0
   c386c:	bd70      	pop	{r4, r5, r6, pc}
   c386e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3872:	bf06      	itte	eq
   c3874:	4610      	moveq	r0, r2
   c3876:	4619      	moveq	r1, r3
   c3878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c387c:	d019      	beq.n	c38b2 <__aeabi_dmul+0x24a>
   c387e:	ea94 0f0c 	teq	r4, ip
   c3882:	d102      	bne.n	c388a <__aeabi_dmul+0x222>
   c3884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c3888:	d113      	bne.n	c38b2 <__aeabi_dmul+0x24a>
   c388a:	ea95 0f0c 	teq	r5, ip
   c388e:	d105      	bne.n	c389c <__aeabi_dmul+0x234>
   c3890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c3894:	bf1c      	itt	ne
   c3896:	4610      	movne	r0, r2
   c3898:	4619      	movne	r1, r3
   c389a:	d10a      	bne.n	c38b2 <__aeabi_dmul+0x24a>
   c389c:	ea81 0103 	eor.w	r1, r1, r3
   c38a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c38a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c38a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c38ac:	f04f 0000 	mov.w	r0, #0
   c38b0:	bd70      	pop	{r4, r5, r6, pc}
   c38b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c38b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c38ba:	bd70      	pop	{r4, r5, r6, pc}

000c38bc <__aeabi_ddiv>:
   c38bc:	b570      	push	{r4, r5, r6, lr}
   c38be:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c38c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c38c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c38ca:	bf1d      	ittte	ne
   c38cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c38d0:	ea94 0f0c 	teqne	r4, ip
   c38d4:	ea95 0f0c 	teqne	r5, ip
   c38d8:	f000 f8a7 	bleq	c3a2a <__aeabi_ddiv+0x16e>
   c38dc:	eba4 0405 	sub.w	r4, r4, r5
   c38e0:	ea81 0e03 	eor.w	lr, r1, r3
   c38e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c38e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c38ec:	f000 8088 	beq.w	c3a00 <__aeabi_ddiv+0x144>
   c38f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c38f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c38f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c38fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c3900:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c3904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c3908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c390c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c3910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c3914:	429d      	cmp	r5, r3
   c3916:	bf08      	it	eq
   c3918:	4296      	cmpeq	r6, r2
   c391a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c391e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c3922:	d202      	bcs.n	c392a <__aeabi_ddiv+0x6e>
   c3924:	085b      	lsrs	r3, r3, #1
   c3926:	ea4f 0232 	mov.w	r2, r2, rrx
   c392a:	1ab6      	subs	r6, r6, r2
   c392c:	eb65 0503 	sbc.w	r5, r5, r3
   c3930:	085b      	lsrs	r3, r3, #1
   c3932:	ea4f 0232 	mov.w	r2, r2, rrx
   c3936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c393a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c393e:	ebb6 0e02 	subs.w	lr, r6, r2
   c3942:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3946:	bf22      	ittt	cs
   c3948:	1ab6      	subcs	r6, r6, r2
   c394a:	4675      	movcs	r5, lr
   c394c:	ea40 000c 	orrcs.w	r0, r0, ip
   c3950:	085b      	lsrs	r3, r3, #1
   c3952:	ea4f 0232 	mov.w	r2, r2, rrx
   c3956:	ebb6 0e02 	subs.w	lr, r6, r2
   c395a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c395e:	bf22      	ittt	cs
   c3960:	1ab6      	subcs	r6, r6, r2
   c3962:	4675      	movcs	r5, lr
   c3964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c3968:	085b      	lsrs	r3, r3, #1
   c396a:	ea4f 0232 	mov.w	r2, r2, rrx
   c396e:	ebb6 0e02 	subs.w	lr, r6, r2
   c3972:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3976:	bf22      	ittt	cs
   c3978:	1ab6      	subcs	r6, r6, r2
   c397a:	4675      	movcs	r5, lr
   c397c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c3980:	085b      	lsrs	r3, r3, #1
   c3982:	ea4f 0232 	mov.w	r2, r2, rrx
   c3986:	ebb6 0e02 	subs.w	lr, r6, r2
   c398a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c398e:	bf22      	ittt	cs
   c3990:	1ab6      	subcs	r6, r6, r2
   c3992:	4675      	movcs	r5, lr
   c3994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c3998:	ea55 0e06 	orrs.w	lr, r5, r6
   c399c:	d018      	beq.n	c39d0 <__aeabi_ddiv+0x114>
   c399e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c39a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c39a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c39aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c39ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c39b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c39b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c39ba:	d1c0      	bne.n	c393e <__aeabi_ddiv+0x82>
   c39bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c39c0:	d10b      	bne.n	c39da <__aeabi_ddiv+0x11e>
   c39c2:	ea41 0100 	orr.w	r1, r1, r0
   c39c6:	f04f 0000 	mov.w	r0, #0
   c39ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c39ce:	e7b6      	b.n	c393e <__aeabi_ddiv+0x82>
   c39d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c39d4:	bf04      	itt	eq
   c39d6:	4301      	orreq	r1, r0
   c39d8:	2000      	moveq	r0, #0
   c39da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c39de:	bf88      	it	hi
   c39e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c39e4:	f63f aeaf 	bhi.w	c3746 <__aeabi_dmul+0xde>
   c39e8:	ebb5 0c03 	subs.w	ip, r5, r3
   c39ec:	bf04      	itt	eq
   c39ee:	ebb6 0c02 	subseq.w	ip, r6, r2
   c39f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c39f6:	f150 0000 	adcs.w	r0, r0, #0
   c39fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c39fe:	bd70      	pop	{r4, r5, r6, pc}
   c3a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c3a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c3a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c3a0c:	bfc2      	ittt	gt
   c3a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
   c3a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c3a16:	bd70      	popgt	{r4, r5, r6, pc}
   c3a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3a1c:	f04f 0e00 	mov.w	lr, #0
   c3a20:	3c01      	subs	r4, #1
   c3a22:	e690      	b.n	c3746 <__aeabi_dmul+0xde>
   c3a24:	ea45 0e06 	orr.w	lr, r5, r6
   c3a28:	e68d      	b.n	c3746 <__aeabi_dmul+0xde>
   c3a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c3a2e:	ea94 0f0c 	teq	r4, ip
   c3a32:	bf08      	it	eq
   c3a34:	ea95 0f0c 	teqeq	r5, ip
   c3a38:	f43f af3b 	beq.w	c38b2 <__aeabi_dmul+0x24a>
   c3a3c:	ea94 0f0c 	teq	r4, ip
   c3a40:	d10a      	bne.n	c3a58 <__aeabi_ddiv+0x19c>
   c3a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3a46:	f47f af34 	bne.w	c38b2 <__aeabi_dmul+0x24a>
   c3a4a:	ea95 0f0c 	teq	r5, ip
   c3a4e:	f47f af25 	bne.w	c389c <__aeabi_dmul+0x234>
   c3a52:	4610      	mov	r0, r2
   c3a54:	4619      	mov	r1, r3
   c3a56:	e72c      	b.n	c38b2 <__aeabi_dmul+0x24a>
   c3a58:	ea95 0f0c 	teq	r5, ip
   c3a5c:	d106      	bne.n	c3a6c <__aeabi_ddiv+0x1b0>
   c3a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c3a62:	f43f aefd 	beq.w	c3860 <__aeabi_dmul+0x1f8>
   c3a66:	4610      	mov	r0, r2
   c3a68:	4619      	mov	r1, r3
   c3a6a:	e722      	b.n	c38b2 <__aeabi_dmul+0x24a>
   c3a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3a70:	bf18      	it	ne
   c3a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c3a76:	f47f aec5 	bne.w	c3804 <__aeabi_dmul+0x19c>
   c3a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c3a7e:	f47f af0d 	bne.w	c389c <__aeabi_dmul+0x234>
   c3a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c3a86:	f47f aeeb 	bne.w	c3860 <__aeabi_dmul+0x1f8>
   c3a8a:	e712      	b.n	c38b2 <__aeabi_dmul+0x24a>

000c3a8c <__gedf2>:
   c3a8c:	f04f 3cff 	mov.w	ip, #4294967295
   c3a90:	e006      	b.n	c3aa0 <__cmpdf2+0x4>
   c3a92:	bf00      	nop

000c3a94 <__ledf2>:
   c3a94:	f04f 0c01 	mov.w	ip, #1
   c3a98:	e002      	b.n	c3aa0 <__cmpdf2+0x4>
   c3a9a:	bf00      	nop

000c3a9c <__cmpdf2>:
   c3a9c:	f04f 0c01 	mov.w	ip, #1
   c3aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
   c3aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c3aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c3ab0:	bf18      	it	ne
   c3ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c3ab6:	d01b      	beq.n	c3af0 <__cmpdf2+0x54>
   c3ab8:	b001      	add	sp, #4
   c3aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c3abe:	bf0c      	ite	eq
   c3ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c3ac4:	ea91 0f03 	teqne	r1, r3
   c3ac8:	bf02      	ittt	eq
   c3aca:	ea90 0f02 	teqeq	r0, r2
   c3ace:	2000      	moveq	r0, #0
   c3ad0:	4770      	bxeq	lr
   c3ad2:	f110 0f00 	cmn.w	r0, #0
   c3ad6:	ea91 0f03 	teq	r1, r3
   c3ada:	bf58      	it	pl
   c3adc:	4299      	cmppl	r1, r3
   c3ade:	bf08      	it	eq
   c3ae0:	4290      	cmpeq	r0, r2
   c3ae2:	bf2c      	ite	cs
   c3ae4:	17d8      	asrcs	r0, r3, #31
   c3ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c3aea:	f040 0001 	orr.w	r0, r0, #1
   c3aee:	4770      	bx	lr
   c3af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c3af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3af8:	d102      	bne.n	c3b00 <__cmpdf2+0x64>
   c3afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c3afe:	d107      	bne.n	c3b10 <__cmpdf2+0x74>
   c3b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c3b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3b08:	d1d6      	bne.n	c3ab8 <__cmpdf2+0x1c>
   c3b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c3b0e:	d0d3      	beq.n	c3ab8 <__cmpdf2+0x1c>
   c3b10:	f85d 0b04 	ldr.w	r0, [sp], #4
   c3b14:	4770      	bx	lr
   c3b16:	bf00      	nop

000c3b18 <__aeabi_cdrcmple>:
   c3b18:	4684      	mov	ip, r0
   c3b1a:	4610      	mov	r0, r2
   c3b1c:	4662      	mov	r2, ip
   c3b1e:	468c      	mov	ip, r1
   c3b20:	4619      	mov	r1, r3
   c3b22:	4663      	mov	r3, ip
   c3b24:	e000      	b.n	c3b28 <__aeabi_cdcmpeq>
   c3b26:	bf00      	nop

000c3b28 <__aeabi_cdcmpeq>:
   c3b28:	b501      	push	{r0, lr}
   c3b2a:	f7ff ffb7 	bl	c3a9c <__cmpdf2>
   c3b2e:	2800      	cmp	r0, #0
   c3b30:	bf48      	it	mi
   c3b32:	f110 0f00 	cmnmi.w	r0, #0
   c3b36:	bd01      	pop	{r0, pc}

000c3b38 <__aeabi_dcmpeq>:
   c3b38:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3b3c:	f7ff fff4 	bl	c3b28 <__aeabi_cdcmpeq>
   c3b40:	bf0c      	ite	eq
   c3b42:	2001      	moveq	r0, #1
   c3b44:	2000      	movne	r0, #0
   c3b46:	f85d fb08 	ldr.w	pc, [sp], #8
   c3b4a:	bf00      	nop

000c3b4c <__aeabi_dcmplt>:
   c3b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3b50:	f7ff ffea 	bl	c3b28 <__aeabi_cdcmpeq>
   c3b54:	bf34      	ite	cc
   c3b56:	2001      	movcc	r0, #1
   c3b58:	2000      	movcs	r0, #0
   c3b5a:	f85d fb08 	ldr.w	pc, [sp], #8
   c3b5e:	bf00      	nop

000c3b60 <__aeabi_dcmple>:
   c3b60:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3b64:	f7ff ffe0 	bl	c3b28 <__aeabi_cdcmpeq>
   c3b68:	bf94      	ite	ls
   c3b6a:	2001      	movls	r0, #1
   c3b6c:	2000      	movhi	r0, #0
   c3b6e:	f85d fb08 	ldr.w	pc, [sp], #8
   c3b72:	bf00      	nop

000c3b74 <__aeabi_dcmpge>:
   c3b74:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3b78:	f7ff ffce 	bl	c3b18 <__aeabi_cdrcmple>
   c3b7c:	bf94      	ite	ls
   c3b7e:	2001      	movls	r0, #1
   c3b80:	2000      	movhi	r0, #0
   c3b82:	f85d fb08 	ldr.w	pc, [sp], #8
   c3b86:	bf00      	nop

000c3b88 <__aeabi_dcmpgt>:
   c3b88:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3b8c:	f7ff ffc4 	bl	c3b18 <__aeabi_cdrcmple>
   c3b90:	bf34      	ite	cc
   c3b92:	2001      	movcc	r0, #1
   c3b94:	2000      	movcs	r0, #0
   c3b96:	f85d fb08 	ldr.w	pc, [sp], #8
   c3b9a:	bf00      	nop

000c3b9c <__aeabi_dcmpun>:
   c3b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c3ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3ba4:	d102      	bne.n	c3bac <__aeabi_dcmpun+0x10>
   c3ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c3baa:	d10a      	bne.n	c3bc2 <__aeabi_dcmpun+0x26>
   c3bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c3bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3bb4:	d102      	bne.n	c3bbc <__aeabi_dcmpun+0x20>
   c3bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c3bba:	d102      	bne.n	c3bc2 <__aeabi_dcmpun+0x26>
   c3bbc:	f04f 0000 	mov.w	r0, #0
   c3bc0:	4770      	bx	lr
   c3bc2:	f04f 0001 	mov.w	r0, #1
   c3bc6:	4770      	bx	lr

000c3bc8 <__aeabi_d2iz>:
   c3bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c3bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c3bd0:	d215      	bcs.n	c3bfe <__aeabi_d2iz+0x36>
   c3bd2:	d511      	bpl.n	c3bf8 <__aeabi_d2iz+0x30>
   c3bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c3bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c3bdc:	d912      	bls.n	c3c04 <__aeabi_d2iz+0x3c>
   c3bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c3be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c3be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c3bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c3bee:	fa23 f002 	lsr.w	r0, r3, r2
   c3bf2:	bf18      	it	ne
   c3bf4:	4240      	negne	r0, r0
   c3bf6:	4770      	bx	lr
   c3bf8:	f04f 0000 	mov.w	r0, #0
   c3bfc:	4770      	bx	lr
   c3bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c3c02:	d105      	bne.n	c3c10 <__aeabi_d2iz+0x48>
   c3c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c3c08:	bf08      	it	eq
   c3c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c3c0e:	4770      	bx	lr
   c3c10:	f04f 0000 	mov.w	r0, #0
   c3c14:	4770      	bx	lr
   c3c16:	bf00      	nop

000c3c18 <__aeabi_d2uiz>:
   c3c18:	004a      	lsls	r2, r1, #1
   c3c1a:	d211      	bcs.n	c3c40 <__aeabi_d2uiz+0x28>
   c3c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c3c20:	d211      	bcs.n	c3c46 <__aeabi_d2uiz+0x2e>
   c3c22:	d50d      	bpl.n	c3c40 <__aeabi_d2uiz+0x28>
   c3c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c3c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c3c2c:	d40e      	bmi.n	c3c4c <__aeabi_d2uiz+0x34>
   c3c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c3c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c3c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c3c3a:	fa23 f002 	lsr.w	r0, r3, r2
   c3c3e:	4770      	bx	lr
   c3c40:	f04f 0000 	mov.w	r0, #0
   c3c44:	4770      	bx	lr
   c3c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c3c4a:	d102      	bne.n	c3c52 <__aeabi_d2uiz+0x3a>
   c3c4c:	f04f 30ff 	mov.w	r0, #4294967295
   c3c50:	4770      	bx	lr
   c3c52:	f04f 0000 	mov.w	r0, #0
   c3c56:	4770      	bx	lr

000c3c58 <__aeabi_d2f>:
   c3c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c3c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c3c60:	bf24      	itt	cs
   c3c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c3c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c3c6a:	d90d      	bls.n	c3c88 <__aeabi_d2f+0x30>
   c3c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c3c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c3c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c3c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c3c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c3c80:	bf08      	it	eq
   c3c82:	f020 0001 	biceq.w	r0, r0, #1
   c3c86:	4770      	bx	lr
   c3c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c3c8c:	d121      	bne.n	c3cd2 <__aeabi_d2f+0x7a>
   c3c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c3c92:	bfbc      	itt	lt
   c3c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c3c98:	4770      	bxlt	lr
   c3c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c3ca2:	f1c2 0218 	rsb	r2, r2, #24
   c3ca6:	f1c2 0c20 	rsb	ip, r2, #32
   c3caa:	fa10 f30c 	lsls.w	r3, r0, ip
   c3cae:	fa20 f002 	lsr.w	r0, r0, r2
   c3cb2:	bf18      	it	ne
   c3cb4:	f040 0001 	orrne.w	r0, r0, #1
   c3cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c3cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c3cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
   c3cc4:	ea40 000c 	orr.w	r0, r0, ip
   c3cc8:	fa23 f302 	lsr.w	r3, r3, r2
   c3ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c3cd0:	e7cc      	b.n	c3c6c <__aeabi_d2f+0x14>
   c3cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c3cd6:	d107      	bne.n	c3ce8 <__aeabi_d2f+0x90>
   c3cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c3cdc:	bf1e      	ittt	ne
   c3cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c3ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c3ce6:	4770      	bxne	lr
   c3ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c3cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c3cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c3cf4:	4770      	bx	lr
   c3cf6:	bf00      	nop

000c3cf8 <__aeabi_d2ulz>:
   c3cf8:	b5d0      	push	{r4, r6, r7, lr}
   c3cfa:	4b0c      	ldr	r3, [pc, #48]	; (c3d2c <__aeabi_d2ulz+0x34>)
   c3cfc:	2200      	movs	r2, #0
   c3cfe:	4606      	mov	r6, r0
   c3d00:	460f      	mov	r7, r1
   c3d02:	f7ff fcb1 	bl	c3668 <__aeabi_dmul>
   c3d06:	f7ff ff87 	bl	c3c18 <__aeabi_d2uiz>
   c3d0a:	4604      	mov	r4, r0
   c3d0c:	f7ff fc32 	bl	c3574 <__aeabi_ui2d>
   c3d10:	4b07      	ldr	r3, [pc, #28]	; (c3d30 <__aeabi_d2ulz+0x38>)
   c3d12:	2200      	movs	r2, #0
   c3d14:	f7ff fca8 	bl	c3668 <__aeabi_dmul>
   c3d18:	4602      	mov	r2, r0
   c3d1a:	460b      	mov	r3, r1
   c3d1c:	4630      	mov	r0, r6
   c3d1e:	4639      	mov	r1, r7
   c3d20:	f7ff faea 	bl	c32f8 <__aeabi_dsub>
   c3d24:	f7ff ff78 	bl	c3c18 <__aeabi_d2uiz>
   c3d28:	4621      	mov	r1, r4
   c3d2a:	bdd0      	pop	{r4, r6, r7, pc}
   c3d2c:	3df00000 	.word	0x3df00000
   c3d30:	41f00000 	.word	0x41f00000

000c3d34 <atexit>:
   c3d34:	2300      	movs	r3, #0
   c3d36:	4601      	mov	r1, r0
   c3d38:	461a      	mov	r2, r3
   c3d3a:	4618      	mov	r0, r3
   c3d3c:	f001 b806 	b.w	c4d4c <__register_exitproc>

000c3d40 <atof>:
   c3d40:	2100      	movs	r1, #0
   c3d42:	f000 bf6b 	b.w	c4c1c <strtod>

000c3d46 <atoi>:
   c3d46:	220a      	movs	r2, #10
   c3d48:	2100      	movs	r1, #0
   c3d4a:	f000 bff5 	b.w	c4d38 <strtol>
	...

000c3d50 <isprint>:
   c3d50:	4b02      	ldr	r3, [pc, #8]	; (c3d5c <isprint+0xc>)
   c3d52:	4418      	add	r0, r3
   c3d54:	7840      	ldrb	r0, [r0, #1]
   c3d56:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c3d5a:	4770      	bx	lr
   c3d5c:	000c7e70 	.word	0x000c7e70

000c3d60 <memcmp>:
   c3d60:	b510      	push	{r4, lr}
   c3d62:	3901      	subs	r1, #1
   c3d64:	4402      	add	r2, r0
   c3d66:	4290      	cmp	r0, r2
   c3d68:	d101      	bne.n	c3d6e <memcmp+0xe>
   c3d6a:	2000      	movs	r0, #0
   c3d6c:	e005      	b.n	c3d7a <memcmp+0x1a>
   c3d6e:	7803      	ldrb	r3, [r0, #0]
   c3d70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c3d74:	42a3      	cmp	r3, r4
   c3d76:	d001      	beq.n	c3d7c <memcmp+0x1c>
   c3d78:	1b18      	subs	r0, r3, r4
   c3d7a:	bd10      	pop	{r4, pc}
   c3d7c:	3001      	adds	r0, #1
   c3d7e:	e7f2      	b.n	c3d66 <memcmp+0x6>

000c3d80 <memcpy>:
   c3d80:	440a      	add	r2, r1
   c3d82:	4291      	cmp	r1, r2
   c3d84:	f100 33ff 	add.w	r3, r0, #4294967295
   c3d88:	d100      	bne.n	c3d8c <memcpy+0xc>
   c3d8a:	4770      	bx	lr
   c3d8c:	b510      	push	{r4, lr}
   c3d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c3d92:	f803 4f01 	strb.w	r4, [r3, #1]!
   c3d96:	4291      	cmp	r1, r2
   c3d98:	d1f9      	bne.n	c3d8e <memcpy+0xe>
   c3d9a:	bd10      	pop	{r4, pc}

000c3d9c <memmove>:
   c3d9c:	4288      	cmp	r0, r1
   c3d9e:	b510      	push	{r4, lr}
   c3da0:	eb01 0402 	add.w	r4, r1, r2
   c3da4:	d902      	bls.n	c3dac <memmove+0x10>
   c3da6:	4284      	cmp	r4, r0
   c3da8:	4623      	mov	r3, r4
   c3daa:	d807      	bhi.n	c3dbc <memmove+0x20>
   c3dac:	1e43      	subs	r3, r0, #1
   c3dae:	42a1      	cmp	r1, r4
   c3db0:	d008      	beq.n	c3dc4 <memmove+0x28>
   c3db2:	f811 2b01 	ldrb.w	r2, [r1], #1
   c3db6:	f803 2f01 	strb.w	r2, [r3, #1]!
   c3dba:	e7f8      	b.n	c3dae <memmove+0x12>
   c3dbc:	4402      	add	r2, r0
   c3dbe:	4601      	mov	r1, r0
   c3dc0:	428a      	cmp	r2, r1
   c3dc2:	d100      	bne.n	c3dc6 <memmove+0x2a>
   c3dc4:	bd10      	pop	{r4, pc}
   c3dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c3dca:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c3dce:	e7f7      	b.n	c3dc0 <memmove+0x24>

000c3dd0 <memset>:
   c3dd0:	4402      	add	r2, r0
   c3dd2:	4603      	mov	r3, r0
   c3dd4:	4293      	cmp	r3, r2
   c3dd6:	d100      	bne.n	c3dda <memset+0xa>
   c3dd8:	4770      	bx	lr
   c3dda:	f803 1b01 	strb.w	r1, [r3], #1
   c3dde:	e7f9      	b.n	c3dd4 <memset+0x4>

000c3de0 <srand>:
   c3de0:	b538      	push	{r3, r4, r5, lr}
   c3de2:	4b10      	ldr	r3, [pc, #64]	; (c3e24 <srand+0x44>)
   c3de4:	681d      	ldr	r5, [r3, #0]
   c3de6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c3de8:	4604      	mov	r4, r0
   c3dea:	b9b3      	cbnz	r3, c3e1a <srand+0x3a>
   c3dec:	2018      	movs	r0, #24
   c3dee:	f7f9 feb3 	bl	bdb58 <malloc>
   c3df2:	4602      	mov	r2, r0
   c3df4:	63a8      	str	r0, [r5, #56]	; 0x38
   c3df6:	b920      	cbnz	r0, c3e02 <srand+0x22>
   c3df8:	4b0b      	ldr	r3, [pc, #44]	; (c3e28 <srand+0x48>)
   c3dfa:	480c      	ldr	r0, [pc, #48]	; (c3e2c <srand+0x4c>)
   c3dfc:	2142      	movs	r1, #66	; 0x42
   c3dfe:	f7f9 fefb 	bl	bdbf8 <__assert_func>
   c3e02:	490b      	ldr	r1, [pc, #44]	; (c3e30 <srand+0x50>)
   c3e04:	4b0b      	ldr	r3, [pc, #44]	; (c3e34 <srand+0x54>)
   c3e06:	e9c0 1300 	strd	r1, r3, [r0]
   c3e0a:	4b0b      	ldr	r3, [pc, #44]	; (c3e38 <srand+0x58>)
   c3e0c:	6083      	str	r3, [r0, #8]
   c3e0e:	230b      	movs	r3, #11
   c3e10:	8183      	strh	r3, [r0, #12]
   c3e12:	2100      	movs	r1, #0
   c3e14:	2001      	movs	r0, #1
   c3e16:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c3e1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c3e1c:	2200      	movs	r2, #0
   c3e1e:	611c      	str	r4, [r3, #16]
   c3e20:	615a      	str	r2, [r3, #20]
   c3e22:	bd38      	pop	{r3, r4, r5, pc}
   c3e24:	2003db90 	.word	0x2003db90
   c3e28:	000c7d80 	.word	0x000c7d80
   c3e2c:	000c7d97 	.word	0x000c7d97
   c3e30:	abcd330e 	.word	0xabcd330e
   c3e34:	e66d1234 	.word	0xe66d1234
   c3e38:	0005deec 	.word	0x0005deec

000c3e3c <strcat>:
   c3e3c:	b510      	push	{r4, lr}
   c3e3e:	4602      	mov	r2, r0
   c3e40:	7814      	ldrb	r4, [r2, #0]
   c3e42:	4613      	mov	r3, r2
   c3e44:	3201      	adds	r2, #1
   c3e46:	2c00      	cmp	r4, #0
   c3e48:	d1fa      	bne.n	c3e40 <strcat+0x4>
   c3e4a:	3b01      	subs	r3, #1
   c3e4c:	f811 2b01 	ldrb.w	r2, [r1], #1
   c3e50:	f803 2f01 	strb.w	r2, [r3, #1]!
   c3e54:	2a00      	cmp	r2, #0
   c3e56:	d1f9      	bne.n	c3e4c <strcat+0x10>
   c3e58:	bd10      	pop	{r4, pc}

000c3e5a <strchr>:
   c3e5a:	b2c9      	uxtb	r1, r1
   c3e5c:	4603      	mov	r3, r0
   c3e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
   c3e62:	b11a      	cbz	r2, c3e6c <strchr+0x12>
   c3e64:	428a      	cmp	r2, r1
   c3e66:	d1f9      	bne.n	c3e5c <strchr+0x2>
   c3e68:	4618      	mov	r0, r3
   c3e6a:	4770      	bx	lr
   c3e6c:	2900      	cmp	r1, #0
   c3e6e:	bf18      	it	ne
   c3e70:	2300      	movne	r3, #0
   c3e72:	e7f9      	b.n	c3e68 <strchr+0xe>

000c3e74 <strchrnul>:
   c3e74:	b510      	push	{r4, lr}
   c3e76:	4604      	mov	r4, r0
   c3e78:	f7ff ffef 	bl	c3e5a <strchr>
   c3e7c:	b918      	cbnz	r0, c3e86 <strchrnul+0x12>
   c3e7e:	4620      	mov	r0, r4
   c3e80:	f000 f831 	bl	c3ee6 <strlen>
   c3e84:	4420      	add	r0, r4
   c3e86:	bd10      	pop	{r4, pc}

000c3e88 <strcmp>:
   c3e88:	f810 2b01 	ldrb.w	r2, [r0], #1
   c3e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
   c3e90:	2a01      	cmp	r2, #1
   c3e92:	bf28      	it	cs
   c3e94:	429a      	cmpcs	r2, r3
   c3e96:	d0f7      	beq.n	c3e88 <strcmp>
   c3e98:	1ad0      	subs	r0, r2, r3
   c3e9a:	4770      	bx	lr

000c3e9c <strcpy>:
   c3e9c:	4603      	mov	r3, r0
   c3e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   c3ea2:	f803 2b01 	strb.w	r2, [r3], #1
   c3ea6:	2a00      	cmp	r2, #0
   c3ea8:	d1f9      	bne.n	c3e9e <strcpy+0x2>
   c3eaa:	4770      	bx	lr

000c3eac <strdup>:
   c3eac:	4b02      	ldr	r3, [pc, #8]	; (c3eb8 <strdup+0xc>)
   c3eae:	4601      	mov	r1, r0
   c3eb0:	6818      	ldr	r0, [r3, #0]
   c3eb2:	f000 b803 	b.w	c3ebc <_strdup_r>
   c3eb6:	bf00      	nop
   c3eb8:	2003db90 	.word	0x2003db90

000c3ebc <_strdup_r>:
   c3ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c3ebe:	4604      	mov	r4, r0
   c3ec0:	4608      	mov	r0, r1
   c3ec2:	460d      	mov	r5, r1
   c3ec4:	f000 f80f 	bl	c3ee6 <strlen>
   c3ec8:	1c42      	adds	r2, r0, #1
   c3eca:	4611      	mov	r1, r2
   c3ecc:	4620      	mov	r0, r4
   c3ece:	9201      	str	r2, [sp, #4]
   c3ed0:	f7f9 fe82 	bl	bdbd8 <_malloc_r>
   c3ed4:	4604      	mov	r4, r0
   c3ed6:	b118      	cbz	r0, c3ee0 <_strdup_r+0x24>
   c3ed8:	9a01      	ldr	r2, [sp, #4]
   c3eda:	4629      	mov	r1, r5
   c3edc:	f7ff ff50 	bl	c3d80 <memcpy>
   c3ee0:	4620      	mov	r0, r4
   c3ee2:	b003      	add	sp, #12
   c3ee4:	bd30      	pop	{r4, r5, pc}

000c3ee6 <strlen>:
   c3ee6:	4603      	mov	r3, r0
   c3ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
   c3eec:	2a00      	cmp	r2, #0
   c3eee:	d1fb      	bne.n	c3ee8 <strlen+0x2>
   c3ef0:	1a18      	subs	r0, r3, r0
   c3ef2:	3801      	subs	r0, #1
   c3ef4:	4770      	bx	lr
	...

000c3ef8 <strlwr>:
   c3ef8:	b510      	push	{r4, lr}
   c3efa:	4c07      	ldr	r4, [pc, #28]	; (c3f18 <strlwr+0x20>)
   c3efc:	1e42      	subs	r2, r0, #1
   c3efe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c3f02:	b903      	cbnz	r3, c3f06 <strlwr+0xe>
   c3f04:	bd10      	pop	{r4, pc}
   c3f06:	5ce1      	ldrb	r1, [r4, r3]
   c3f08:	f001 0103 	and.w	r1, r1, #3
   c3f0c:	2901      	cmp	r1, #1
   c3f0e:	bf08      	it	eq
   c3f10:	3320      	addeq	r3, #32
   c3f12:	7013      	strb	r3, [r2, #0]
   c3f14:	e7f3      	b.n	c3efe <strlwr+0x6>
   c3f16:	bf00      	nop
   c3f18:	000c7e71 	.word	0x000c7e71

000c3f1c <strncmp>:
   c3f1c:	b510      	push	{r4, lr}
   c3f1e:	b17a      	cbz	r2, c3f40 <strncmp+0x24>
   c3f20:	4603      	mov	r3, r0
   c3f22:	3901      	subs	r1, #1
   c3f24:	1884      	adds	r4, r0, r2
   c3f26:	f813 0b01 	ldrb.w	r0, [r3], #1
   c3f2a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c3f2e:	4290      	cmp	r0, r2
   c3f30:	d101      	bne.n	c3f36 <strncmp+0x1a>
   c3f32:	42a3      	cmp	r3, r4
   c3f34:	d101      	bne.n	c3f3a <strncmp+0x1e>
   c3f36:	1a80      	subs	r0, r0, r2
   c3f38:	bd10      	pop	{r4, pc}
   c3f3a:	2800      	cmp	r0, #0
   c3f3c:	d1f3      	bne.n	c3f26 <strncmp+0xa>
   c3f3e:	e7fa      	b.n	c3f36 <strncmp+0x1a>
   c3f40:	4610      	mov	r0, r2
   c3f42:	e7f9      	b.n	c3f38 <strncmp+0x1c>

000c3f44 <strncpy>:
   c3f44:	b510      	push	{r4, lr}
   c3f46:	3901      	subs	r1, #1
   c3f48:	4603      	mov	r3, r0
   c3f4a:	b132      	cbz	r2, c3f5a <strncpy+0x16>
   c3f4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c3f50:	f803 4b01 	strb.w	r4, [r3], #1
   c3f54:	3a01      	subs	r2, #1
   c3f56:	2c00      	cmp	r4, #0
   c3f58:	d1f7      	bne.n	c3f4a <strncpy+0x6>
   c3f5a:	441a      	add	r2, r3
   c3f5c:	2100      	movs	r1, #0
   c3f5e:	4293      	cmp	r3, r2
   c3f60:	d100      	bne.n	c3f64 <strncpy+0x20>
   c3f62:	bd10      	pop	{r4, pc}
   c3f64:	f803 1b01 	strb.w	r1, [r3], #1
   c3f68:	e7f9      	b.n	c3f5e <strncpy+0x1a>

000c3f6a <strnlen>:
   c3f6a:	b510      	push	{r4, lr}
   c3f6c:	4602      	mov	r2, r0
   c3f6e:	4401      	add	r1, r0
   c3f70:	428a      	cmp	r2, r1
   c3f72:	4613      	mov	r3, r2
   c3f74:	d003      	beq.n	c3f7e <strnlen+0x14>
   c3f76:	781c      	ldrb	r4, [r3, #0]
   c3f78:	3201      	adds	r2, #1
   c3f7a:	2c00      	cmp	r4, #0
   c3f7c:	d1f8      	bne.n	c3f70 <strnlen+0x6>
   c3f7e:	1a18      	subs	r0, r3, r0
   c3f80:	bd10      	pop	{r4, pc}

000c3f82 <strrchr>:
   c3f82:	b538      	push	{r3, r4, r5, lr}
   c3f84:	4603      	mov	r3, r0
   c3f86:	460c      	mov	r4, r1
   c3f88:	b969      	cbnz	r1, c3fa6 <strrchr+0x24>
   c3f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c3f8e:	f7ff bf64 	b.w	c3e5a <strchr>
   c3f92:	1c43      	adds	r3, r0, #1
   c3f94:	4605      	mov	r5, r0
   c3f96:	4621      	mov	r1, r4
   c3f98:	4618      	mov	r0, r3
   c3f9a:	f7ff ff5e 	bl	c3e5a <strchr>
   c3f9e:	2800      	cmp	r0, #0
   c3fa0:	d1f7      	bne.n	c3f92 <strrchr+0x10>
   c3fa2:	4628      	mov	r0, r5
   c3fa4:	bd38      	pop	{r3, r4, r5, pc}
   c3fa6:	2500      	movs	r5, #0
   c3fa8:	e7f5      	b.n	c3f96 <strrchr+0x14>

000c3faa <strstr>:
   c3faa:	780a      	ldrb	r2, [r1, #0]
   c3fac:	b570      	push	{r4, r5, r6, lr}
   c3fae:	b96a      	cbnz	r2, c3fcc <strstr+0x22>
   c3fb0:	bd70      	pop	{r4, r5, r6, pc}
   c3fb2:	429a      	cmp	r2, r3
   c3fb4:	d109      	bne.n	c3fca <strstr+0x20>
   c3fb6:	460c      	mov	r4, r1
   c3fb8:	4605      	mov	r5, r0
   c3fba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c3fbe:	2b00      	cmp	r3, #0
   c3fc0:	d0f6      	beq.n	c3fb0 <strstr+0x6>
   c3fc2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c3fc6:	429e      	cmp	r6, r3
   c3fc8:	d0f7      	beq.n	c3fba <strstr+0x10>
   c3fca:	3001      	adds	r0, #1
   c3fcc:	7803      	ldrb	r3, [r0, #0]
   c3fce:	2b00      	cmp	r3, #0
   c3fd0:	d1ef      	bne.n	c3fb2 <strstr+0x8>
   c3fd2:	4618      	mov	r0, r3
   c3fd4:	e7ec      	b.n	c3fb0 <strstr+0x6>

000c3fd6 <sulp>:
   c3fd6:	b570      	push	{r4, r5, r6, lr}
   c3fd8:	4604      	mov	r4, r0
   c3fda:	460d      	mov	r5, r1
   c3fdc:	ec45 4b10 	vmov	d0, r4, r5
   c3fe0:	4616      	mov	r6, r2
   c3fe2:	f001 fe0d 	bl	c5c00 <__ulp>
   c3fe6:	ec51 0b10 	vmov	r0, r1, d0
   c3fea:	b17e      	cbz	r6, c400c <sulp+0x36>
   c3fec:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c3ff0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c3ff4:	2b00      	cmp	r3, #0
   c3ff6:	dd09      	ble.n	c400c <sulp+0x36>
   c3ff8:	051b      	lsls	r3, r3, #20
   c3ffa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c3ffe:	2400      	movs	r4, #0
   c4000:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c4004:	4622      	mov	r2, r4
   c4006:	462b      	mov	r3, r5
   c4008:	f7ff fb2e 	bl	c3668 <__aeabi_dmul>
   c400c:	bd70      	pop	{r4, r5, r6, pc}
	...

000c4010 <_strtod_l>:
   c4010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4014:	ed2d 8b02 	vpush	{d8}
   c4018:	b09d      	sub	sp, #116	; 0x74
   c401a:	461f      	mov	r7, r3
   c401c:	2300      	movs	r3, #0
   c401e:	9318      	str	r3, [sp, #96]	; 0x60
   c4020:	4ba2      	ldr	r3, [pc, #648]	; (c42ac <_strtod_l+0x29c>)
   c4022:	9213      	str	r2, [sp, #76]	; 0x4c
   c4024:	681b      	ldr	r3, [r3, #0]
   c4026:	9305      	str	r3, [sp, #20]
   c4028:	4604      	mov	r4, r0
   c402a:	4618      	mov	r0, r3
   c402c:	4688      	mov	r8, r1
   c402e:	f7ff ff5a 	bl	c3ee6 <strlen>
   c4032:	f04f 0a00 	mov.w	sl, #0
   c4036:	4605      	mov	r5, r0
   c4038:	f04f 0b00 	mov.w	fp, #0
   c403c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4042:	781a      	ldrb	r2, [r3, #0]
   c4044:	2a2b      	cmp	r2, #43	; 0x2b
   c4046:	d04e      	beq.n	c40e6 <_strtod_l+0xd6>
   c4048:	d83b      	bhi.n	c40c2 <_strtod_l+0xb2>
   c404a:	2a0d      	cmp	r2, #13
   c404c:	d834      	bhi.n	c40b8 <_strtod_l+0xa8>
   c404e:	2a08      	cmp	r2, #8
   c4050:	d834      	bhi.n	c40bc <_strtod_l+0xac>
   c4052:	2a00      	cmp	r2, #0
   c4054:	d03e      	beq.n	c40d4 <_strtod_l+0xc4>
   c4056:	2300      	movs	r3, #0
   c4058:	930a      	str	r3, [sp, #40]	; 0x28
   c405a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c405c:	7833      	ldrb	r3, [r6, #0]
   c405e:	2b30      	cmp	r3, #48	; 0x30
   c4060:	f040 80b0 	bne.w	c41c4 <_strtod_l+0x1b4>
   c4064:	7873      	ldrb	r3, [r6, #1]
   c4066:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c406a:	2b58      	cmp	r3, #88	; 0x58
   c406c:	d168      	bne.n	c4140 <_strtod_l+0x130>
   c406e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c4070:	9301      	str	r3, [sp, #4]
   c4072:	ab18      	add	r3, sp, #96	; 0x60
   c4074:	9702      	str	r7, [sp, #8]
   c4076:	9300      	str	r3, [sp, #0]
   c4078:	4a8d      	ldr	r2, [pc, #564]	; (c42b0 <_strtod_l+0x2a0>)
   c407a:	ab19      	add	r3, sp, #100	; 0x64
   c407c:	a917      	add	r1, sp, #92	; 0x5c
   c407e:	4620      	mov	r0, r4
   c4080:	f000 ff2e 	bl	c4ee0 <__gethex>
   c4084:	f010 0707 	ands.w	r7, r0, #7
   c4088:	4605      	mov	r5, r0
   c408a:	d005      	beq.n	c4098 <_strtod_l+0x88>
   c408c:	2f06      	cmp	r7, #6
   c408e:	d12c      	bne.n	c40ea <_strtod_l+0xda>
   c4090:	3601      	adds	r6, #1
   c4092:	2300      	movs	r3, #0
   c4094:	9617      	str	r6, [sp, #92]	; 0x5c
   c4096:	930a      	str	r3, [sp, #40]	; 0x28
   c4098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c409a:	2b00      	cmp	r3, #0
   c409c:	f040 8590 	bne.w	c4bc0 <_strtod_l+0xbb0>
   c40a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c40a2:	b1eb      	cbz	r3, c40e0 <_strtod_l+0xd0>
   c40a4:	4652      	mov	r2, sl
   c40a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c40aa:	ec43 2b10 	vmov	d0, r2, r3
   c40ae:	b01d      	add	sp, #116	; 0x74
   c40b0:	ecbd 8b02 	vpop	{d8}
   c40b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c40b8:	2a20      	cmp	r2, #32
   c40ba:	d1cc      	bne.n	c4056 <_strtod_l+0x46>
   c40bc:	3301      	adds	r3, #1
   c40be:	9317      	str	r3, [sp, #92]	; 0x5c
   c40c0:	e7be      	b.n	c4040 <_strtod_l+0x30>
   c40c2:	2a2d      	cmp	r2, #45	; 0x2d
   c40c4:	d1c7      	bne.n	c4056 <_strtod_l+0x46>
   c40c6:	2201      	movs	r2, #1
   c40c8:	920a      	str	r2, [sp, #40]	; 0x28
   c40ca:	1c5a      	adds	r2, r3, #1
   c40cc:	9217      	str	r2, [sp, #92]	; 0x5c
   c40ce:	785b      	ldrb	r3, [r3, #1]
   c40d0:	2b00      	cmp	r3, #0
   c40d2:	d1c2      	bne.n	c405a <_strtod_l+0x4a>
   c40d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c40d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c40da:	2b00      	cmp	r3, #0
   c40dc:	f040 856e 	bne.w	c4bbc <_strtod_l+0xbac>
   c40e0:	4652      	mov	r2, sl
   c40e2:	465b      	mov	r3, fp
   c40e4:	e7e1      	b.n	c40aa <_strtod_l+0x9a>
   c40e6:	2200      	movs	r2, #0
   c40e8:	e7ee      	b.n	c40c8 <_strtod_l+0xb8>
   c40ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c40ec:	b13a      	cbz	r2, c40fe <_strtod_l+0xee>
   c40ee:	2135      	movs	r1, #53	; 0x35
   c40f0:	a81a      	add	r0, sp, #104	; 0x68
   c40f2:	f001 fe90 	bl	c5e16 <__copybits>
   c40f6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c40f8:	4620      	mov	r0, r4
   c40fa:	f001 fa4f 	bl	c559c <_Bfree>
   c40fe:	3f01      	subs	r7, #1
   c4100:	2f04      	cmp	r7, #4
   c4102:	d806      	bhi.n	c4112 <_strtod_l+0x102>
   c4104:	e8df f007 	tbb	[pc, r7]
   c4108:	1714030a 	.word	0x1714030a
   c410c:	0a          	.byte	0x0a
   c410d:	00          	.byte	0x00
   c410e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c4112:	0728      	lsls	r0, r5, #28
   c4114:	d5c0      	bpl.n	c4098 <_strtod_l+0x88>
   c4116:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c411a:	e7bd      	b.n	c4098 <_strtod_l+0x88>
   c411c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c4120:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c4122:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c4126:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c412a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c412e:	e7f0      	b.n	c4112 <_strtod_l+0x102>
   c4130:	f8df b180 	ldr.w	fp, [pc, #384]	; c42b4 <_strtod_l+0x2a4>
   c4134:	e7ed      	b.n	c4112 <_strtod_l+0x102>
   c4136:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c413a:	f04f 3aff 	mov.w	sl, #4294967295
   c413e:	e7e8      	b.n	c4112 <_strtod_l+0x102>
   c4140:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4142:	1c5a      	adds	r2, r3, #1
   c4144:	9217      	str	r2, [sp, #92]	; 0x5c
   c4146:	785b      	ldrb	r3, [r3, #1]
   c4148:	2b30      	cmp	r3, #48	; 0x30
   c414a:	d0f9      	beq.n	c4140 <_strtod_l+0x130>
   c414c:	2b00      	cmp	r3, #0
   c414e:	d0a3      	beq.n	c4098 <_strtod_l+0x88>
   c4150:	2301      	movs	r3, #1
   c4152:	f04f 0900 	mov.w	r9, #0
   c4156:	9304      	str	r3, [sp, #16]
   c4158:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c415a:	9308      	str	r3, [sp, #32]
   c415c:	f8cd 901c 	str.w	r9, [sp, #28]
   c4160:	464f      	mov	r7, r9
   c4162:	220a      	movs	r2, #10
   c4164:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c4166:	7806      	ldrb	r6, [r0, #0]
   c4168:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c416c:	b2d9      	uxtb	r1, r3
   c416e:	2909      	cmp	r1, #9
   c4170:	d92a      	bls.n	c41c8 <_strtod_l+0x1b8>
   c4172:	9905      	ldr	r1, [sp, #20]
   c4174:	462a      	mov	r2, r5
   c4176:	f7ff fed1 	bl	c3f1c <strncmp>
   c417a:	b398      	cbz	r0, c41e4 <_strtod_l+0x1d4>
   c417c:	2000      	movs	r0, #0
   c417e:	4632      	mov	r2, r6
   c4180:	463d      	mov	r5, r7
   c4182:	9005      	str	r0, [sp, #20]
   c4184:	4603      	mov	r3, r0
   c4186:	2a65      	cmp	r2, #101	; 0x65
   c4188:	d001      	beq.n	c418e <_strtod_l+0x17e>
   c418a:	2a45      	cmp	r2, #69	; 0x45
   c418c:	d118      	bne.n	c41c0 <_strtod_l+0x1b0>
   c418e:	b91d      	cbnz	r5, c4198 <_strtod_l+0x188>
   c4190:	9a04      	ldr	r2, [sp, #16]
   c4192:	4302      	orrs	r2, r0
   c4194:	d09e      	beq.n	c40d4 <_strtod_l+0xc4>
   c4196:	2500      	movs	r5, #0
   c4198:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c419c:	f108 0201 	add.w	r2, r8, #1
   c41a0:	9217      	str	r2, [sp, #92]	; 0x5c
   c41a2:	f898 2001 	ldrb.w	r2, [r8, #1]
   c41a6:	2a2b      	cmp	r2, #43	; 0x2b
   c41a8:	d075      	beq.n	c4296 <_strtod_l+0x286>
   c41aa:	2a2d      	cmp	r2, #45	; 0x2d
   c41ac:	d07b      	beq.n	c42a6 <_strtod_l+0x296>
   c41ae:	f04f 0c00 	mov.w	ip, #0
   c41b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c41b6:	2909      	cmp	r1, #9
   c41b8:	f240 8082 	bls.w	c42c0 <_strtod_l+0x2b0>
   c41bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c41c0:	2600      	movs	r6, #0
   c41c2:	e09d      	b.n	c4300 <_strtod_l+0x2f0>
   c41c4:	2300      	movs	r3, #0
   c41c6:	e7c4      	b.n	c4152 <_strtod_l+0x142>
   c41c8:	2f08      	cmp	r7, #8
   c41ca:	bfd8      	it	le
   c41cc:	9907      	ldrle	r1, [sp, #28]
   c41ce:	f100 0001 	add.w	r0, r0, #1
   c41d2:	bfda      	itte	le
   c41d4:	fb02 3301 	mlale	r3, r2, r1, r3
   c41d8:	9307      	strle	r3, [sp, #28]
   c41da:	fb02 3909 	mlagt	r9, r2, r9, r3
   c41de:	3701      	adds	r7, #1
   c41e0:	9017      	str	r0, [sp, #92]	; 0x5c
   c41e2:	e7bf      	b.n	c4164 <_strtod_l+0x154>
   c41e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c41e6:	195a      	adds	r2, r3, r5
   c41e8:	9217      	str	r2, [sp, #92]	; 0x5c
   c41ea:	5d5a      	ldrb	r2, [r3, r5]
   c41ec:	2f00      	cmp	r7, #0
   c41ee:	d037      	beq.n	c4260 <_strtod_l+0x250>
   c41f0:	9005      	str	r0, [sp, #20]
   c41f2:	463d      	mov	r5, r7
   c41f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c41f8:	2b09      	cmp	r3, #9
   c41fa:	d912      	bls.n	c4222 <_strtod_l+0x212>
   c41fc:	2301      	movs	r3, #1
   c41fe:	e7c2      	b.n	c4186 <_strtod_l+0x176>
   c4200:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4202:	1c5a      	adds	r2, r3, #1
   c4204:	9217      	str	r2, [sp, #92]	; 0x5c
   c4206:	785a      	ldrb	r2, [r3, #1]
   c4208:	3001      	adds	r0, #1
   c420a:	2a30      	cmp	r2, #48	; 0x30
   c420c:	d0f8      	beq.n	c4200 <_strtod_l+0x1f0>
   c420e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c4212:	2b08      	cmp	r3, #8
   c4214:	f200 84d9 	bhi.w	c4bca <_strtod_l+0xbba>
   c4218:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c421a:	9005      	str	r0, [sp, #20]
   c421c:	2000      	movs	r0, #0
   c421e:	9308      	str	r3, [sp, #32]
   c4220:	4605      	mov	r5, r0
   c4222:	3a30      	subs	r2, #48	; 0x30
   c4224:	f100 0301 	add.w	r3, r0, #1
   c4228:	d014      	beq.n	c4254 <_strtod_l+0x244>
   c422a:	9905      	ldr	r1, [sp, #20]
   c422c:	4419      	add	r1, r3
   c422e:	9105      	str	r1, [sp, #20]
   c4230:	462b      	mov	r3, r5
   c4232:	eb00 0e05 	add.w	lr, r0, r5
   c4236:	210a      	movs	r1, #10
   c4238:	4573      	cmp	r3, lr
   c423a:	d113      	bne.n	c4264 <_strtod_l+0x254>
   c423c:	182b      	adds	r3, r5, r0
   c423e:	2b08      	cmp	r3, #8
   c4240:	f105 0501 	add.w	r5, r5, #1
   c4244:	4405      	add	r5, r0
   c4246:	dc1c      	bgt.n	c4282 <_strtod_l+0x272>
   c4248:	9907      	ldr	r1, [sp, #28]
   c424a:	230a      	movs	r3, #10
   c424c:	fb03 2301 	mla	r3, r3, r1, r2
   c4250:	9307      	str	r3, [sp, #28]
   c4252:	2300      	movs	r3, #0
   c4254:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4256:	1c51      	adds	r1, r2, #1
   c4258:	9117      	str	r1, [sp, #92]	; 0x5c
   c425a:	7852      	ldrb	r2, [r2, #1]
   c425c:	4618      	mov	r0, r3
   c425e:	e7c9      	b.n	c41f4 <_strtod_l+0x1e4>
   c4260:	4638      	mov	r0, r7
   c4262:	e7d2      	b.n	c420a <_strtod_l+0x1fa>
   c4264:	2b08      	cmp	r3, #8
   c4266:	dc04      	bgt.n	c4272 <_strtod_l+0x262>
   c4268:	9e07      	ldr	r6, [sp, #28]
   c426a:	434e      	muls	r6, r1
   c426c:	9607      	str	r6, [sp, #28]
   c426e:	3301      	adds	r3, #1
   c4270:	e7e2      	b.n	c4238 <_strtod_l+0x228>
   c4272:	f103 0c01 	add.w	ip, r3, #1
   c4276:	f1bc 0f10 	cmp.w	ip, #16
   c427a:	bfd8      	it	le
   c427c:	fb01 f909 	mulle.w	r9, r1, r9
   c4280:	e7f5      	b.n	c426e <_strtod_l+0x25e>
   c4282:	2d10      	cmp	r5, #16
   c4284:	bfdc      	itt	le
   c4286:	230a      	movle	r3, #10
   c4288:	fb03 2909 	mlale	r9, r3, r9, r2
   c428c:	e7e1      	b.n	c4252 <_strtod_l+0x242>
   c428e:	2300      	movs	r3, #0
   c4290:	9305      	str	r3, [sp, #20]
   c4292:	2301      	movs	r3, #1
   c4294:	e77c      	b.n	c4190 <_strtod_l+0x180>
   c4296:	f04f 0c00 	mov.w	ip, #0
   c429a:	f108 0202 	add.w	r2, r8, #2
   c429e:	9217      	str	r2, [sp, #92]	; 0x5c
   c42a0:	f898 2002 	ldrb.w	r2, [r8, #2]
   c42a4:	e785      	b.n	c41b2 <_strtod_l+0x1a2>
   c42a6:	f04f 0c01 	mov.w	ip, #1
   c42aa:	e7f6      	b.n	c429a <_strtod_l+0x28a>
   c42ac:	000c8008 	.word	0x000c8008
   c42b0:	000c7e20 	.word	0x000c7e20
   c42b4:	7ff00000 	.word	0x7ff00000
   c42b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c42ba:	1c51      	adds	r1, r2, #1
   c42bc:	9117      	str	r1, [sp, #92]	; 0x5c
   c42be:	7852      	ldrb	r2, [r2, #1]
   c42c0:	2a30      	cmp	r2, #48	; 0x30
   c42c2:	d0f9      	beq.n	c42b8 <_strtod_l+0x2a8>
   c42c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c42c8:	2908      	cmp	r1, #8
   c42ca:	f63f af79 	bhi.w	c41c0 <_strtod_l+0x1b0>
   c42ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c42d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c42d4:	9206      	str	r2, [sp, #24]
   c42d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c42d8:	1c51      	adds	r1, r2, #1
   c42da:	9117      	str	r1, [sp, #92]	; 0x5c
   c42dc:	7852      	ldrb	r2, [r2, #1]
   c42de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c42e2:	2e09      	cmp	r6, #9
   c42e4:	d937      	bls.n	c4356 <_strtod_l+0x346>
   c42e6:	9e06      	ldr	r6, [sp, #24]
   c42e8:	1b89      	subs	r1, r1, r6
   c42ea:	2908      	cmp	r1, #8
   c42ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c42f0:	dc02      	bgt.n	c42f8 <_strtod_l+0x2e8>
   c42f2:	4576      	cmp	r6, lr
   c42f4:	bfa8      	it	ge
   c42f6:	4676      	movge	r6, lr
   c42f8:	f1bc 0f00 	cmp.w	ip, #0
   c42fc:	d000      	beq.n	c4300 <_strtod_l+0x2f0>
   c42fe:	4276      	negs	r6, r6
   c4300:	2d00      	cmp	r5, #0
   c4302:	d14d      	bne.n	c43a0 <_strtod_l+0x390>
   c4304:	9904      	ldr	r1, [sp, #16]
   c4306:	4301      	orrs	r1, r0
   c4308:	f47f aec6 	bne.w	c4098 <_strtod_l+0x88>
   c430c:	2b00      	cmp	r3, #0
   c430e:	f47f aee1 	bne.w	c40d4 <_strtod_l+0xc4>
   c4312:	2a69      	cmp	r2, #105	; 0x69
   c4314:	d027      	beq.n	c4366 <_strtod_l+0x356>
   c4316:	dc24      	bgt.n	c4362 <_strtod_l+0x352>
   c4318:	2a49      	cmp	r2, #73	; 0x49
   c431a:	d024      	beq.n	c4366 <_strtod_l+0x356>
   c431c:	2a4e      	cmp	r2, #78	; 0x4e
   c431e:	f47f aed9 	bne.w	c40d4 <_strtod_l+0xc4>
   c4322:	499f      	ldr	r1, [pc, #636]	; (c45a0 <_strtod_l+0x590>)
   c4324:	a817      	add	r0, sp, #92	; 0x5c
   c4326:	f001 f833 	bl	c5390 <__match>
   c432a:	2800      	cmp	r0, #0
   c432c:	f43f aed2 	beq.w	c40d4 <_strtod_l+0xc4>
   c4330:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4332:	781b      	ldrb	r3, [r3, #0]
   c4334:	2b28      	cmp	r3, #40	; 0x28
   c4336:	d12d      	bne.n	c4394 <_strtod_l+0x384>
   c4338:	499a      	ldr	r1, [pc, #616]	; (c45a4 <_strtod_l+0x594>)
   c433a:	aa1a      	add	r2, sp, #104	; 0x68
   c433c:	a817      	add	r0, sp, #92	; 0x5c
   c433e:	f001 f83b 	bl	c53b8 <__hexnan>
   c4342:	2805      	cmp	r0, #5
   c4344:	d126      	bne.n	c4394 <_strtod_l+0x384>
   c4346:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c4348:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c434c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c4350:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c4354:	e6a0      	b.n	c4098 <_strtod_l+0x88>
   c4356:	210a      	movs	r1, #10
   c4358:	fb01 2e0e 	mla	lr, r1, lr, r2
   c435c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c4360:	e7b9      	b.n	c42d6 <_strtod_l+0x2c6>
   c4362:	2a6e      	cmp	r2, #110	; 0x6e
   c4364:	e7db      	b.n	c431e <_strtod_l+0x30e>
   c4366:	4990      	ldr	r1, [pc, #576]	; (c45a8 <_strtod_l+0x598>)
   c4368:	a817      	add	r0, sp, #92	; 0x5c
   c436a:	f001 f811 	bl	c5390 <__match>
   c436e:	2800      	cmp	r0, #0
   c4370:	f43f aeb0 	beq.w	c40d4 <_strtod_l+0xc4>
   c4374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4376:	498d      	ldr	r1, [pc, #564]	; (c45ac <_strtod_l+0x59c>)
   c4378:	3b01      	subs	r3, #1
   c437a:	a817      	add	r0, sp, #92	; 0x5c
   c437c:	9317      	str	r3, [sp, #92]	; 0x5c
   c437e:	f001 f807 	bl	c5390 <__match>
   c4382:	b910      	cbnz	r0, c438a <_strtod_l+0x37a>
   c4384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4386:	3301      	adds	r3, #1
   c4388:	9317      	str	r3, [sp, #92]	; 0x5c
   c438a:	f8df b230 	ldr.w	fp, [pc, #560]	; c45bc <_strtod_l+0x5ac>
   c438e:	f04f 0a00 	mov.w	sl, #0
   c4392:	e681      	b.n	c4098 <_strtod_l+0x88>
   c4394:	4886      	ldr	r0, [pc, #536]	; (c45b0 <_strtod_l+0x5a0>)
   c4396:	f001 fd93 	bl	c5ec0 <nan>
   c439a:	ec5b ab10 	vmov	sl, fp, d0
   c439e:	e67b      	b.n	c4098 <_strtod_l+0x88>
   c43a0:	9b05      	ldr	r3, [sp, #20]
   c43a2:	9807      	ldr	r0, [sp, #28]
   c43a4:	1af3      	subs	r3, r6, r3
   c43a6:	2f00      	cmp	r7, #0
   c43a8:	bf08      	it	eq
   c43aa:	462f      	moveq	r7, r5
   c43ac:	2d10      	cmp	r5, #16
   c43ae:	9306      	str	r3, [sp, #24]
   c43b0:	46a8      	mov	r8, r5
   c43b2:	bfa8      	it	ge
   c43b4:	f04f 0810 	movge.w	r8, #16
   c43b8:	f7ff f8dc 	bl	c3574 <__aeabi_ui2d>
   c43bc:	2d09      	cmp	r5, #9
   c43be:	4682      	mov	sl, r0
   c43c0:	468b      	mov	fp, r1
   c43c2:	dd13      	ble.n	c43ec <_strtod_l+0x3dc>
   c43c4:	4b7b      	ldr	r3, [pc, #492]	; (c45b4 <_strtod_l+0x5a4>)
   c43c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c43ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c43ce:	f7ff f94b 	bl	c3668 <__aeabi_dmul>
   c43d2:	4682      	mov	sl, r0
   c43d4:	4648      	mov	r0, r9
   c43d6:	468b      	mov	fp, r1
   c43d8:	f7ff f8cc 	bl	c3574 <__aeabi_ui2d>
   c43dc:	4602      	mov	r2, r0
   c43de:	460b      	mov	r3, r1
   c43e0:	4650      	mov	r0, sl
   c43e2:	4659      	mov	r1, fp
   c43e4:	f7fe ff8a 	bl	c32fc <__adddf3>
   c43e8:	4682      	mov	sl, r0
   c43ea:	468b      	mov	fp, r1
   c43ec:	2d0f      	cmp	r5, #15
   c43ee:	dc38      	bgt.n	c4462 <_strtod_l+0x452>
   c43f0:	9b06      	ldr	r3, [sp, #24]
   c43f2:	2b00      	cmp	r3, #0
   c43f4:	f43f ae50 	beq.w	c4098 <_strtod_l+0x88>
   c43f8:	dd24      	ble.n	c4444 <_strtod_l+0x434>
   c43fa:	2b16      	cmp	r3, #22
   c43fc:	dc0b      	bgt.n	c4416 <_strtod_l+0x406>
   c43fe:	496d      	ldr	r1, [pc, #436]	; (c45b4 <_strtod_l+0x5a4>)
   c4400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4404:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4408:	4652      	mov	r2, sl
   c440a:	465b      	mov	r3, fp
   c440c:	f7ff f92c 	bl	c3668 <__aeabi_dmul>
   c4410:	4682      	mov	sl, r0
   c4412:	468b      	mov	fp, r1
   c4414:	e640      	b.n	c4098 <_strtod_l+0x88>
   c4416:	9a06      	ldr	r2, [sp, #24]
   c4418:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c441c:	4293      	cmp	r3, r2
   c441e:	db20      	blt.n	c4462 <_strtod_l+0x452>
   c4420:	4c64      	ldr	r4, [pc, #400]	; (c45b4 <_strtod_l+0x5a4>)
   c4422:	f1c5 050f 	rsb	r5, r5, #15
   c4426:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c442a:	4652      	mov	r2, sl
   c442c:	465b      	mov	r3, fp
   c442e:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4432:	f7ff f919 	bl	c3668 <__aeabi_dmul>
   c4436:	9b06      	ldr	r3, [sp, #24]
   c4438:	1b5d      	subs	r5, r3, r5
   c443a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c443e:	e9d4 2300 	ldrd	r2, r3, [r4]
   c4442:	e7e3      	b.n	c440c <_strtod_l+0x3fc>
   c4444:	9b06      	ldr	r3, [sp, #24]
   c4446:	3316      	adds	r3, #22
   c4448:	db0b      	blt.n	c4462 <_strtod_l+0x452>
   c444a:	9b05      	ldr	r3, [sp, #20]
   c444c:	1b9e      	subs	r6, r3, r6
   c444e:	4b59      	ldr	r3, [pc, #356]	; (c45b4 <_strtod_l+0x5a4>)
   c4450:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c4454:	e9d6 2300 	ldrd	r2, r3, [r6]
   c4458:	4650      	mov	r0, sl
   c445a:	4659      	mov	r1, fp
   c445c:	f7ff fa2e 	bl	c38bc <__aeabi_ddiv>
   c4460:	e7d6      	b.n	c4410 <_strtod_l+0x400>
   c4462:	9b06      	ldr	r3, [sp, #24]
   c4464:	eba5 0808 	sub.w	r8, r5, r8
   c4468:	4498      	add	r8, r3
   c446a:	f1b8 0f00 	cmp.w	r8, #0
   c446e:	dd74      	ble.n	c455a <_strtod_l+0x54a>
   c4470:	f018 030f 	ands.w	r3, r8, #15
   c4474:	d00a      	beq.n	c448c <_strtod_l+0x47c>
   c4476:	494f      	ldr	r1, [pc, #316]	; (c45b4 <_strtod_l+0x5a4>)
   c4478:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c447c:	4652      	mov	r2, sl
   c447e:	465b      	mov	r3, fp
   c4480:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4484:	f7ff f8f0 	bl	c3668 <__aeabi_dmul>
   c4488:	4682      	mov	sl, r0
   c448a:	468b      	mov	fp, r1
   c448c:	f038 080f 	bics.w	r8, r8, #15
   c4490:	d04f      	beq.n	c4532 <_strtod_l+0x522>
   c4492:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c4496:	dd22      	ble.n	c44de <_strtod_l+0x4ce>
   c4498:	2500      	movs	r5, #0
   c449a:	462e      	mov	r6, r5
   c449c:	9507      	str	r5, [sp, #28]
   c449e:	9505      	str	r5, [sp, #20]
   c44a0:	2322      	movs	r3, #34	; 0x22
   c44a2:	f8df b118 	ldr.w	fp, [pc, #280]	; c45bc <_strtod_l+0x5ac>
   c44a6:	6023      	str	r3, [r4, #0]
   c44a8:	f04f 0a00 	mov.w	sl, #0
   c44ac:	9b07      	ldr	r3, [sp, #28]
   c44ae:	2b00      	cmp	r3, #0
   c44b0:	f43f adf2 	beq.w	c4098 <_strtod_l+0x88>
   c44b4:	9918      	ldr	r1, [sp, #96]	; 0x60
   c44b6:	4620      	mov	r0, r4
   c44b8:	f001 f870 	bl	c559c <_Bfree>
   c44bc:	9905      	ldr	r1, [sp, #20]
   c44be:	4620      	mov	r0, r4
   c44c0:	f001 f86c 	bl	c559c <_Bfree>
   c44c4:	4631      	mov	r1, r6
   c44c6:	4620      	mov	r0, r4
   c44c8:	f001 f868 	bl	c559c <_Bfree>
   c44cc:	9907      	ldr	r1, [sp, #28]
   c44ce:	4620      	mov	r0, r4
   c44d0:	f001 f864 	bl	c559c <_Bfree>
   c44d4:	4629      	mov	r1, r5
   c44d6:	4620      	mov	r0, r4
   c44d8:	f001 f860 	bl	c559c <_Bfree>
   c44dc:	e5dc      	b.n	c4098 <_strtod_l+0x88>
   c44de:	4b36      	ldr	r3, [pc, #216]	; (c45b8 <_strtod_l+0x5a8>)
   c44e0:	9304      	str	r3, [sp, #16]
   c44e2:	2300      	movs	r3, #0
   c44e4:	ea4f 1828 	mov.w	r8, r8, asr #4
   c44e8:	4650      	mov	r0, sl
   c44ea:	4659      	mov	r1, fp
   c44ec:	4699      	mov	r9, r3
   c44ee:	f1b8 0f01 	cmp.w	r8, #1
   c44f2:	dc21      	bgt.n	c4538 <_strtod_l+0x528>
   c44f4:	b10b      	cbz	r3, c44fa <_strtod_l+0x4ea>
   c44f6:	4682      	mov	sl, r0
   c44f8:	468b      	mov	fp, r1
   c44fa:	4b2f      	ldr	r3, [pc, #188]	; (c45b8 <_strtod_l+0x5a8>)
   c44fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c4500:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c4504:	4652      	mov	r2, sl
   c4506:	465b      	mov	r3, fp
   c4508:	e9d9 0100 	ldrd	r0, r1, [r9]
   c450c:	f7ff f8ac 	bl	c3668 <__aeabi_dmul>
   c4510:	4b2a      	ldr	r3, [pc, #168]	; (c45bc <_strtod_l+0x5ac>)
   c4512:	460a      	mov	r2, r1
   c4514:	400b      	ands	r3, r1
   c4516:	492a      	ldr	r1, [pc, #168]	; (c45c0 <_strtod_l+0x5b0>)
   c4518:	428b      	cmp	r3, r1
   c451a:	4682      	mov	sl, r0
   c451c:	d8bc      	bhi.n	c4498 <_strtod_l+0x488>
   c451e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c4522:	428b      	cmp	r3, r1
   c4524:	bf86      	itte	hi
   c4526:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c45c4 <_strtod_l+0x5b4>
   c452a:	f04f 3aff 	movhi.w	sl, #4294967295
   c452e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c4532:	2300      	movs	r3, #0
   c4534:	9304      	str	r3, [sp, #16]
   c4536:	e084      	b.n	c4642 <_strtod_l+0x632>
   c4538:	f018 0f01 	tst.w	r8, #1
   c453c:	d005      	beq.n	c454a <_strtod_l+0x53a>
   c453e:	9b04      	ldr	r3, [sp, #16]
   c4540:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4544:	f7ff f890 	bl	c3668 <__aeabi_dmul>
   c4548:	2301      	movs	r3, #1
   c454a:	9a04      	ldr	r2, [sp, #16]
   c454c:	3208      	adds	r2, #8
   c454e:	f109 0901 	add.w	r9, r9, #1
   c4552:	ea4f 0868 	mov.w	r8, r8, asr #1
   c4556:	9204      	str	r2, [sp, #16]
   c4558:	e7c9      	b.n	c44ee <_strtod_l+0x4de>
   c455a:	d0ea      	beq.n	c4532 <_strtod_l+0x522>
   c455c:	f1c8 0800 	rsb	r8, r8, #0
   c4560:	f018 020f 	ands.w	r2, r8, #15
   c4564:	d00a      	beq.n	c457c <_strtod_l+0x56c>
   c4566:	4b13      	ldr	r3, [pc, #76]	; (c45b4 <_strtod_l+0x5a4>)
   c4568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c456c:	4650      	mov	r0, sl
   c456e:	4659      	mov	r1, fp
   c4570:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4574:	f7ff f9a2 	bl	c38bc <__aeabi_ddiv>
   c4578:	4682      	mov	sl, r0
   c457a:	468b      	mov	fp, r1
   c457c:	ea5f 1828 	movs.w	r8, r8, asr #4
   c4580:	d0d7      	beq.n	c4532 <_strtod_l+0x522>
   c4582:	f1b8 0f1f 	cmp.w	r8, #31
   c4586:	dd1f      	ble.n	c45c8 <_strtod_l+0x5b8>
   c4588:	2500      	movs	r5, #0
   c458a:	462e      	mov	r6, r5
   c458c:	9507      	str	r5, [sp, #28]
   c458e:	9505      	str	r5, [sp, #20]
   c4590:	2322      	movs	r3, #34	; 0x22
   c4592:	f04f 0a00 	mov.w	sl, #0
   c4596:	f04f 0b00 	mov.w	fp, #0
   c459a:	6023      	str	r3, [r4, #0]
   c459c:	e786      	b.n	c44ac <_strtod_l+0x49c>
   c459e:	bf00      	nop
   c45a0:	000c7e1d 	.word	0x000c7e1d
   c45a4:	000c7e34 	.word	0x000c7e34
   c45a8:	000c7e14 	.word	0x000c7e14
   c45ac:	000c7e17 	.word	0x000c7e17
   c45b0:	000c7628 	.word	0x000c7628
   c45b4:	000c80c0 	.word	0x000c80c0
   c45b8:	000c8098 	.word	0x000c8098
   c45bc:	7ff00000 	.word	0x7ff00000
   c45c0:	7ca00000 	.word	0x7ca00000
   c45c4:	7fefffff 	.word	0x7fefffff
   c45c8:	f018 0310 	ands.w	r3, r8, #16
   c45cc:	bf18      	it	ne
   c45ce:	236a      	movne	r3, #106	; 0x6a
   c45d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c4980 <_strtod_l+0x970>
   c45d4:	9304      	str	r3, [sp, #16]
   c45d6:	4650      	mov	r0, sl
   c45d8:	4659      	mov	r1, fp
   c45da:	2300      	movs	r3, #0
   c45dc:	f018 0f01 	tst.w	r8, #1
   c45e0:	d004      	beq.n	c45ec <_strtod_l+0x5dc>
   c45e2:	e9d9 2300 	ldrd	r2, r3, [r9]
   c45e6:	f7ff f83f 	bl	c3668 <__aeabi_dmul>
   c45ea:	2301      	movs	r3, #1
   c45ec:	ea5f 0868 	movs.w	r8, r8, asr #1
   c45f0:	f109 0908 	add.w	r9, r9, #8
   c45f4:	d1f2      	bne.n	c45dc <_strtod_l+0x5cc>
   c45f6:	b10b      	cbz	r3, c45fc <_strtod_l+0x5ec>
   c45f8:	4682      	mov	sl, r0
   c45fa:	468b      	mov	fp, r1
   c45fc:	9b04      	ldr	r3, [sp, #16]
   c45fe:	b1c3      	cbz	r3, c4632 <_strtod_l+0x622>
   c4600:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c4604:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c4608:	2b00      	cmp	r3, #0
   c460a:	4659      	mov	r1, fp
   c460c:	dd11      	ble.n	c4632 <_strtod_l+0x622>
   c460e:	2b1f      	cmp	r3, #31
   c4610:	f340 8124 	ble.w	c485c <_strtod_l+0x84c>
   c4614:	2b34      	cmp	r3, #52	; 0x34
   c4616:	bfde      	ittt	le
   c4618:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c461c:	f04f 33ff 	movle.w	r3, #4294967295
   c4620:	fa03 f202 	lslle.w	r2, r3, r2
   c4624:	f04f 0a00 	mov.w	sl, #0
   c4628:	bfcc      	ite	gt
   c462a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c462e:	ea02 0b01 	andle.w	fp, r2, r1
   c4632:	2200      	movs	r2, #0
   c4634:	2300      	movs	r3, #0
   c4636:	4650      	mov	r0, sl
   c4638:	4659      	mov	r1, fp
   c463a:	f7ff fa7d 	bl	c3b38 <__aeabi_dcmpeq>
   c463e:	2800      	cmp	r0, #0
   c4640:	d1a2      	bne.n	c4588 <_strtod_l+0x578>
   c4642:	9b07      	ldr	r3, [sp, #28]
   c4644:	9300      	str	r3, [sp, #0]
   c4646:	9908      	ldr	r1, [sp, #32]
   c4648:	462b      	mov	r3, r5
   c464a:	463a      	mov	r2, r7
   c464c:	4620      	mov	r0, r4
   c464e:	f001 f80d 	bl	c566c <__s2b>
   c4652:	9007      	str	r0, [sp, #28]
   c4654:	2800      	cmp	r0, #0
   c4656:	f43f af1f 	beq.w	c4498 <_strtod_l+0x488>
   c465a:	9b05      	ldr	r3, [sp, #20]
   c465c:	1b9e      	subs	r6, r3, r6
   c465e:	9b06      	ldr	r3, [sp, #24]
   c4660:	2b00      	cmp	r3, #0
   c4662:	bfb4      	ite	lt
   c4664:	4633      	movlt	r3, r6
   c4666:	2300      	movge	r3, #0
   c4668:	930c      	str	r3, [sp, #48]	; 0x30
   c466a:	9b06      	ldr	r3, [sp, #24]
   c466c:	2500      	movs	r5, #0
   c466e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c4672:	9312      	str	r3, [sp, #72]	; 0x48
   c4674:	462e      	mov	r6, r5
   c4676:	9b07      	ldr	r3, [sp, #28]
   c4678:	4620      	mov	r0, r4
   c467a:	6859      	ldr	r1, [r3, #4]
   c467c:	f000 ff4e 	bl	c551c <_Balloc>
   c4680:	9005      	str	r0, [sp, #20]
   c4682:	2800      	cmp	r0, #0
   c4684:	f43f af0c 	beq.w	c44a0 <_strtod_l+0x490>
   c4688:	9b07      	ldr	r3, [sp, #28]
   c468a:	691a      	ldr	r2, [r3, #16]
   c468c:	3202      	adds	r2, #2
   c468e:	f103 010c 	add.w	r1, r3, #12
   c4692:	0092      	lsls	r2, r2, #2
   c4694:	300c      	adds	r0, #12
   c4696:	f7ff fb73 	bl	c3d80 <memcpy>
   c469a:	ec4b ab10 	vmov	d0, sl, fp
   c469e:	aa1a      	add	r2, sp, #104	; 0x68
   c46a0:	a919      	add	r1, sp, #100	; 0x64
   c46a2:	4620      	mov	r0, r4
   c46a4:	f001 fb28 	bl	c5cf8 <__d2b>
   c46a8:	ec4b ab18 	vmov	d8, sl, fp
   c46ac:	9018      	str	r0, [sp, #96]	; 0x60
   c46ae:	2800      	cmp	r0, #0
   c46b0:	f43f aef6 	beq.w	c44a0 <_strtod_l+0x490>
   c46b4:	2101      	movs	r1, #1
   c46b6:	4620      	mov	r0, r4
   c46b8:	f001 f872 	bl	c57a0 <__i2b>
   c46bc:	4606      	mov	r6, r0
   c46be:	2800      	cmp	r0, #0
   c46c0:	f43f aeee 	beq.w	c44a0 <_strtod_l+0x490>
   c46c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c46c6:	9904      	ldr	r1, [sp, #16]
   c46c8:	2b00      	cmp	r3, #0
   c46ca:	bfab      	itete	ge
   c46cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c46ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c46d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c46d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c46d6:	bfac      	ite	ge
   c46d8:	eb03 0902 	addge.w	r9, r3, r2
   c46dc:	1ad7      	sublt	r7, r2, r3
   c46de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c46e0:	eba3 0801 	sub.w	r8, r3, r1
   c46e4:	4490      	add	r8, r2
   c46e6:	4ba1      	ldr	r3, [pc, #644]	; (c496c <_strtod_l+0x95c>)
   c46e8:	f108 38ff 	add.w	r8, r8, #4294967295
   c46ec:	4598      	cmp	r8, r3
   c46ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c46f2:	f280 80c7 	bge.w	c4884 <_strtod_l+0x874>
   c46f6:	eba3 0308 	sub.w	r3, r3, r8
   c46fa:	2b1f      	cmp	r3, #31
   c46fc:	eba2 0203 	sub.w	r2, r2, r3
   c4700:	f04f 0101 	mov.w	r1, #1
   c4704:	f300 80b1 	bgt.w	c486a <_strtod_l+0x85a>
   c4708:	fa01 f303 	lsl.w	r3, r1, r3
   c470c:	930d      	str	r3, [sp, #52]	; 0x34
   c470e:	2300      	movs	r3, #0
   c4710:	9308      	str	r3, [sp, #32]
   c4712:	eb09 0802 	add.w	r8, r9, r2
   c4716:	9b04      	ldr	r3, [sp, #16]
   c4718:	45c1      	cmp	r9, r8
   c471a:	4417      	add	r7, r2
   c471c:	441f      	add	r7, r3
   c471e:	464b      	mov	r3, r9
   c4720:	bfa8      	it	ge
   c4722:	4643      	movge	r3, r8
   c4724:	42bb      	cmp	r3, r7
   c4726:	bfa8      	it	ge
   c4728:	463b      	movge	r3, r7
   c472a:	2b00      	cmp	r3, #0
   c472c:	bfc2      	ittt	gt
   c472e:	eba8 0803 	subgt.w	r8, r8, r3
   c4732:	1aff      	subgt	r7, r7, r3
   c4734:	eba9 0903 	subgt.w	r9, r9, r3
   c4738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c473a:	2b00      	cmp	r3, #0
   c473c:	dd17      	ble.n	c476e <_strtod_l+0x75e>
   c473e:	4631      	mov	r1, r6
   c4740:	461a      	mov	r2, r3
   c4742:	4620      	mov	r0, r4
   c4744:	f001 f8ec 	bl	c5920 <__pow5mult>
   c4748:	4606      	mov	r6, r0
   c474a:	2800      	cmp	r0, #0
   c474c:	f43f aea8 	beq.w	c44a0 <_strtod_l+0x490>
   c4750:	4601      	mov	r1, r0
   c4752:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c4754:	4620      	mov	r0, r4
   c4756:	f001 f839 	bl	c57cc <__multiply>
   c475a:	900b      	str	r0, [sp, #44]	; 0x2c
   c475c:	2800      	cmp	r0, #0
   c475e:	f43f ae9f 	beq.w	c44a0 <_strtod_l+0x490>
   c4762:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4764:	4620      	mov	r0, r4
   c4766:	f000 ff19 	bl	c559c <_Bfree>
   c476a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c476c:	9318      	str	r3, [sp, #96]	; 0x60
   c476e:	f1b8 0f00 	cmp.w	r8, #0
   c4772:	f300 808c 	bgt.w	c488e <_strtod_l+0x87e>
   c4776:	9b06      	ldr	r3, [sp, #24]
   c4778:	2b00      	cmp	r3, #0
   c477a:	dd08      	ble.n	c478e <_strtod_l+0x77e>
   c477c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c477e:	9905      	ldr	r1, [sp, #20]
   c4780:	4620      	mov	r0, r4
   c4782:	f001 f8cd 	bl	c5920 <__pow5mult>
   c4786:	9005      	str	r0, [sp, #20]
   c4788:	2800      	cmp	r0, #0
   c478a:	f43f ae89 	beq.w	c44a0 <_strtod_l+0x490>
   c478e:	2f00      	cmp	r7, #0
   c4790:	dd08      	ble.n	c47a4 <_strtod_l+0x794>
   c4792:	9905      	ldr	r1, [sp, #20]
   c4794:	463a      	mov	r2, r7
   c4796:	4620      	mov	r0, r4
   c4798:	f001 f91c 	bl	c59d4 <__lshift>
   c479c:	9005      	str	r0, [sp, #20]
   c479e:	2800      	cmp	r0, #0
   c47a0:	f43f ae7e 	beq.w	c44a0 <_strtod_l+0x490>
   c47a4:	f1b9 0f00 	cmp.w	r9, #0
   c47a8:	dd08      	ble.n	c47bc <_strtod_l+0x7ac>
   c47aa:	4631      	mov	r1, r6
   c47ac:	464a      	mov	r2, r9
   c47ae:	4620      	mov	r0, r4
   c47b0:	f001 f910 	bl	c59d4 <__lshift>
   c47b4:	4606      	mov	r6, r0
   c47b6:	2800      	cmp	r0, #0
   c47b8:	f43f ae72 	beq.w	c44a0 <_strtod_l+0x490>
   c47bc:	9a05      	ldr	r2, [sp, #20]
   c47be:	9918      	ldr	r1, [sp, #96]	; 0x60
   c47c0:	4620      	mov	r0, r4
   c47c2:	f001 f993 	bl	c5aec <__mdiff>
   c47c6:	4605      	mov	r5, r0
   c47c8:	2800      	cmp	r0, #0
   c47ca:	f43f ae69 	beq.w	c44a0 <_strtod_l+0x490>
   c47ce:	68c3      	ldr	r3, [r0, #12]
   c47d0:	930b      	str	r3, [sp, #44]	; 0x2c
   c47d2:	2300      	movs	r3, #0
   c47d4:	60c3      	str	r3, [r0, #12]
   c47d6:	4631      	mov	r1, r6
   c47d8:	f001 f96c 	bl	c5ab4 <__mcmp>
   c47dc:	2800      	cmp	r0, #0
   c47de:	da60      	bge.n	c48a2 <_strtod_l+0x892>
   c47e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c47e2:	ea53 030a 	orrs.w	r3, r3, sl
   c47e6:	f040 8082 	bne.w	c48ee <_strtod_l+0x8de>
   c47ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c47ee:	2b00      	cmp	r3, #0
   c47f0:	d17d      	bne.n	c48ee <_strtod_l+0x8de>
   c47f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c47f6:	0d1b      	lsrs	r3, r3, #20
   c47f8:	051b      	lsls	r3, r3, #20
   c47fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c47fe:	d976      	bls.n	c48ee <_strtod_l+0x8de>
   c4800:	696b      	ldr	r3, [r5, #20]
   c4802:	b913      	cbnz	r3, c480a <_strtod_l+0x7fa>
   c4804:	692b      	ldr	r3, [r5, #16]
   c4806:	2b01      	cmp	r3, #1
   c4808:	dd71      	ble.n	c48ee <_strtod_l+0x8de>
   c480a:	4629      	mov	r1, r5
   c480c:	2201      	movs	r2, #1
   c480e:	4620      	mov	r0, r4
   c4810:	f001 f8e0 	bl	c59d4 <__lshift>
   c4814:	4631      	mov	r1, r6
   c4816:	4605      	mov	r5, r0
   c4818:	f001 f94c 	bl	c5ab4 <__mcmp>
   c481c:	2800      	cmp	r0, #0
   c481e:	dd66      	ble.n	c48ee <_strtod_l+0x8de>
   c4820:	9904      	ldr	r1, [sp, #16]
   c4822:	4a53      	ldr	r2, [pc, #332]	; (c4970 <_strtod_l+0x960>)
   c4824:	465b      	mov	r3, fp
   c4826:	2900      	cmp	r1, #0
   c4828:	f000 8081 	beq.w	c492e <_strtod_l+0x91e>
   c482c:	ea02 010b 	and.w	r1, r2, fp
   c4830:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c4834:	dc7b      	bgt.n	c492e <_strtod_l+0x91e>
   c4836:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c483a:	f77f aea9 	ble.w	c4590 <_strtod_l+0x580>
   c483e:	4b4d      	ldr	r3, [pc, #308]	; (c4974 <_strtod_l+0x964>)
   c4840:	4650      	mov	r0, sl
   c4842:	4659      	mov	r1, fp
   c4844:	2200      	movs	r2, #0
   c4846:	f7fe ff0f 	bl	c3668 <__aeabi_dmul>
   c484a:	460b      	mov	r3, r1
   c484c:	4303      	orrs	r3, r0
   c484e:	bf08      	it	eq
   c4850:	2322      	moveq	r3, #34	; 0x22
   c4852:	4682      	mov	sl, r0
   c4854:	468b      	mov	fp, r1
   c4856:	bf08      	it	eq
   c4858:	6023      	streq	r3, [r4, #0]
   c485a:	e62b      	b.n	c44b4 <_strtod_l+0x4a4>
   c485c:	f04f 32ff 	mov.w	r2, #4294967295
   c4860:	fa02 f303 	lsl.w	r3, r2, r3
   c4864:	ea03 0a0a 	and.w	sl, r3, sl
   c4868:	e6e3      	b.n	c4632 <_strtod_l+0x622>
   c486a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c486e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c4872:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c4876:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c487a:	fa01 f308 	lsl.w	r3, r1, r8
   c487e:	9308      	str	r3, [sp, #32]
   c4880:	910d      	str	r1, [sp, #52]	; 0x34
   c4882:	e746      	b.n	c4712 <_strtod_l+0x702>
   c4884:	2300      	movs	r3, #0
   c4886:	9308      	str	r3, [sp, #32]
   c4888:	2301      	movs	r3, #1
   c488a:	930d      	str	r3, [sp, #52]	; 0x34
   c488c:	e741      	b.n	c4712 <_strtod_l+0x702>
   c488e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4890:	4642      	mov	r2, r8
   c4892:	4620      	mov	r0, r4
   c4894:	f001 f89e 	bl	c59d4 <__lshift>
   c4898:	9018      	str	r0, [sp, #96]	; 0x60
   c489a:	2800      	cmp	r0, #0
   c489c:	f47f af6b 	bne.w	c4776 <_strtod_l+0x766>
   c48a0:	e5fe      	b.n	c44a0 <_strtod_l+0x490>
   c48a2:	465f      	mov	r7, fp
   c48a4:	d16e      	bne.n	c4984 <_strtod_l+0x974>
   c48a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c48a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c48ac:	b342      	cbz	r2, c4900 <_strtod_l+0x8f0>
   c48ae:	4a32      	ldr	r2, [pc, #200]	; (c4978 <_strtod_l+0x968>)
   c48b0:	4293      	cmp	r3, r2
   c48b2:	d128      	bne.n	c4906 <_strtod_l+0x8f6>
   c48b4:	9b04      	ldr	r3, [sp, #16]
   c48b6:	4651      	mov	r1, sl
   c48b8:	b1eb      	cbz	r3, c48f6 <_strtod_l+0x8e6>
   c48ba:	4b2d      	ldr	r3, [pc, #180]	; (c4970 <_strtod_l+0x960>)
   c48bc:	403b      	ands	r3, r7
   c48be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c48c2:	f04f 32ff 	mov.w	r2, #4294967295
   c48c6:	d819      	bhi.n	c48fc <_strtod_l+0x8ec>
   c48c8:	0d1b      	lsrs	r3, r3, #20
   c48ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c48ce:	fa02 f303 	lsl.w	r3, r2, r3
   c48d2:	4299      	cmp	r1, r3
   c48d4:	d117      	bne.n	c4906 <_strtod_l+0x8f6>
   c48d6:	4b29      	ldr	r3, [pc, #164]	; (c497c <_strtod_l+0x96c>)
   c48d8:	429f      	cmp	r7, r3
   c48da:	d102      	bne.n	c48e2 <_strtod_l+0x8d2>
   c48dc:	3101      	adds	r1, #1
   c48de:	f43f addf 	beq.w	c44a0 <_strtod_l+0x490>
   c48e2:	4b23      	ldr	r3, [pc, #140]	; (c4970 <_strtod_l+0x960>)
   c48e4:	403b      	ands	r3, r7
   c48e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c48ea:	f04f 0a00 	mov.w	sl, #0
   c48ee:	9b04      	ldr	r3, [sp, #16]
   c48f0:	2b00      	cmp	r3, #0
   c48f2:	d1a4      	bne.n	c483e <_strtod_l+0x82e>
   c48f4:	e5de      	b.n	c44b4 <_strtod_l+0x4a4>
   c48f6:	f04f 33ff 	mov.w	r3, #4294967295
   c48fa:	e7ea      	b.n	c48d2 <_strtod_l+0x8c2>
   c48fc:	4613      	mov	r3, r2
   c48fe:	e7e8      	b.n	c48d2 <_strtod_l+0x8c2>
   c4900:	ea53 030a 	orrs.w	r3, r3, sl
   c4904:	d08c      	beq.n	c4820 <_strtod_l+0x810>
   c4906:	9b08      	ldr	r3, [sp, #32]
   c4908:	b1db      	cbz	r3, c4942 <_strtod_l+0x932>
   c490a:	423b      	tst	r3, r7
   c490c:	d0ef      	beq.n	c48ee <_strtod_l+0x8de>
   c490e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4910:	9a04      	ldr	r2, [sp, #16]
   c4912:	4650      	mov	r0, sl
   c4914:	4659      	mov	r1, fp
   c4916:	b1c3      	cbz	r3, c494a <_strtod_l+0x93a>
   c4918:	f7ff fb5d 	bl	c3fd6 <sulp>
   c491c:	4602      	mov	r2, r0
   c491e:	460b      	mov	r3, r1
   c4920:	ec51 0b18 	vmov	r0, r1, d8
   c4924:	f7fe fcea 	bl	c32fc <__adddf3>
   c4928:	4682      	mov	sl, r0
   c492a:	468b      	mov	fp, r1
   c492c:	e7df      	b.n	c48ee <_strtod_l+0x8de>
   c492e:	4013      	ands	r3, r2
   c4930:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c4934:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c4938:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c493c:	f04f 3aff 	mov.w	sl, #4294967295
   c4940:	e7d5      	b.n	c48ee <_strtod_l+0x8de>
   c4942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c4944:	ea13 0f0a 	tst.w	r3, sl
   c4948:	e7e0      	b.n	c490c <_strtod_l+0x8fc>
   c494a:	f7ff fb44 	bl	c3fd6 <sulp>
   c494e:	4602      	mov	r2, r0
   c4950:	460b      	mov	r3, r1
   c4952:	ec51 0b18 	vmov	r0, r1, d8
   c4956:	f7fe fccf 	bl	c32f8 <__aeabi_dsub>
   c495a:	2200      	movs	r2, #0
   c495c:	2300      	movs	r3, #0
   c495e:	4682      	mov	sl, r0
   c4960:	468b      	mov	fp, r1
   c4962:	f7ff f8e9 	bl	c3b38 <__aeabi_dcmpeq>
   c4966:	2800      	cmp	r0, #0
   c4968:	d0c1      	beq.n	c48ee <_strtod_l+0x8de>
   c496a:	e611      	b.n	c4590 <_strtod_l+0x580>
   c496c:	fffffc02 	.word	0xfffffc02
   c4970:	7ff00000 	.word	0x7ff00000
   c4974:	39500000 	.word	0x39500000
   c4978:	000fffff 	.word	0x000fffff
   c497c:	7fefffff 	.word	0x7fefffff
   c4980:	000c7e48 	.word	0x000c7e48
   c4984:	4631      	mov	r1, r6
   c4986:	4628      	mov	r0, r5
   c4988:	f001 fa12 	bl	c5db0 <__ratio>
   c498c:	ec59 8b10 	vmov	r8, r9, d0
   c4990:	ee10 0a10 	vmov	r0, s0
   c4994:	2200      	movs	r2, #0
   c4996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c499a:	4649      	mov	r1, r9
   c499c:	f7ff f8e0 	bl	c3b60 <__aeabi_dcmple>
   c49a0:	2800      	cmp	r0, #0
   c49a2:	d07a      	beq.n	c4a9a <_strtod_l+0xa8a>
   c49a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c49a6:	2b00      	cmp	r3, #0
   c49a8:	d04a      	beq.n	c4a40 <_strtod_l+0xa30>
   c49aa:	4b95      	ldr	r3, [pc, #596]	; (c4c00 <_strtod_l+0xbf0>)
   c49ac:	2200      	movs	r2, #0
   c49ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c49b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; c4c00 <_strtod_l+0xbf0>
   c49b6:	f04f 0800 	mov.w	r8, #0
   c49ba:	4b92      	ldr	r3, [pc, #584]	; (c4c04 <_strtod_l+0xbf4>)
   c49bc:	403b      	ands	r3, r7
   c49be:	930d      	str	r3, [sp, #52]	; 0x34
   c49c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c49c2:	4b91      	ldr	r3, [pc, #580]	; (c4c08 <_strtod_l+0xbf8>)
   c49c4:	429a      	cmp	r2, r3
   c49c6:	f040 80b0 	bne.w	c4b2a <_strtod_l+0xb1a>
   c49ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c49ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c49d2:	ec4b ab10 	vmov	d0, sl, fp
   c49d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c49da:	f001 f911 	bl	c5c00 <__ulp>
   c49de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c49e2:	ec53 2b10 	vmov	r2, r3, d0
   c49e6:	f7fe fe3f 	bl	c3668 <__aeabi_dmul>
   c49ea:	4652      	mov	r2, sl
   c49ec:	465b      	mov	r3, fp
   c49ee:	f7fe fc85 	bl	c32fc <__adddf3>
   c49f2:	460b      	mov	r3, r1
   c49f4:	4983      	ldr	r1, [pc, #524]	; (c4c04 <_strtod_l+0xbf4>)
   c49f6:	4a85      	ldr	r2, [pc, #532]	; (c4c0c <_strtod_l+0xbfc>)
   c49f8:	4019      	ands	r1, r3
   c49fa:	4291      	cmp	r1, r2
   c49fc:	4682      	mov	sl, r0
   c49fe:	d960      	bls.n	c4ac2 <_strtod_l+0xab2>
   c4a00:	ee18 3a90 	vmov	r3, s17
   c4a04:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c4a08:	4293      	cmp	r3, r2
   c4a0a:	d104      	bne.n	c4a16 <_strtod_l+0xa06>
   c4a0c:	ee18 3a10 	vmov	r3, s16
   c4a10:	3301      	adds	r3, #1
   c4a12:	f43f ad45 	beq.w	c44a0 <_strtod_l+0x490>
   c4a16:	f8df b200 	ldr.w	fp, [pc, #512]	; c4c18 <_strtod_l+0xc08>
   c4a1a:	f04f 3aff 	mov.w	sl, #4294967295
   c4a1e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4a20:	4620      	mov	r0, r4
   c4a22:	f000 fdbb 	bl	c559c <_Bfree>
   c4a26:	9905      	ldr	r1, [sp, #20]
   c4a28:	4620      	mov	r0, r4
   c4a2a:	f000 fdb7 	bl	c559c <_Bfree>
   c4a2e:	4631      	mov	r1, r6
   c4a30:	4620      	mov	r0, r4
   c4a32:	f000 fdb3 	bl	c559c <_Bfree>
   c4a36:	4629      	mov	r1, r5
   c4a38:	4620      	mov	r0, r4
   c4a3a:	f000 fdaf 	bl	c559c <_Bfree>
   c4a3e:	e61a      	b.n	c4676 <_strtod_l+0x666>
   c4a40:	f1ba 0f00 	cmp.w	sl, #0
   c4a44:	d11b      	bne.n	c4a7e <_strtod_l+0xa6e>
   c4a46:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c4a4a:	b9f3      	cbnz	r3, c4a8a <_strtod_l+0xa7a>
   c4a4c:	4b6c      	ldr	r3, [pc, #432]	; (c4c00 <_strtod_l+0xbf0>)
   c4a4e:	2200      	movs	r2, #0
   c4a50:	4640      	mov	r0, r8
   c4a52:	4649      	mov	r1, r9
   c4a54:	f7ff f87a 	bl	c3b4c <__aeabi_dcmplt>
   c4a58:	b9d0      	cbnz	r0, c4a90 <_strtod_l+0xa80>
   c4a5a:	4640      	mov	r0, r8
   c4a5c:	4649      	mov	r1, r9
   c4a5e:	4b6c      	ldr	r3, [pc, #432]	; (c4c10 <_strtod_l+0xc00>)
   c4a60:	2200      	movs	r2, #0
   c4a62:	f7fe fe01 	bl	c3668 <__aeabi_dmul>
   c4a66:	4680      	mov	r8, r0
   c4a68:	4689      	mov	r9, r1
   c4a6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c4a6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c4a72:	9315      	str	r3, [sp, #84]	; 0x54
   c4a74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c4a78:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c4a7c:	e79d      	b.n	c49ba <_strtod_l+0x9aa>
   c4a7e:	f1ba 0f01 	cmp.w	sl, #1
   c4a82:	d102      	bne.n	c4a8a <_strtod_l+0xa7a>
   c4a84:	2f00      	cmp	r7, #0
   c4a86:	f43f ad83 	beq.w	c4590 <_strtod_l+0x580>
   c4a8a:	4b62      	ldr	r3, [pc, #392]	; (c4c14 <_strtod_l+0xc04>)
   c4a8c:	2200      	movs	r2, #0
   c4a8e:	e78e      	b.n	c49ae <_strtod_l+0x99e>
   c4a90:	f8df 917c 	ldr.w	r9, [pc, #380]	; c4c10 <_strtod_l+0xc00>
   c4a94:	f04f 0800 	mov.w	r8, #0
   c4a98:	e7e7      	b.n	c4a6a <_strtod_l+0xa5a>
   c4a9a:	4b5d      	ldr	r3, [pc, #372]	; (c4c10 <_strtod_l+0xc00>)
   c4a9c:	4640      	mov	r0, r8
   c4a9e:	4649      	mov	r1, r9
   c4aa0:	2200      	movs	r2, #0
   c4aa2:	f7fe fde1 	bl	c3668 <__aeabi_dmul>
   c4aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4aa8:	4680      	mov	r8, r0
   c4aaa:	4689      	mov	r9, r1
   c4aac:	b933      	cbnz	r3, c4abc <_strtod_l+0xaac>
   c4aae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c4ab2:	900e      	str	r0, [sp, #56]	; 0x38
   c4ab4:	930f      	str	r3, [sp, #60]	; 0x3c
   c4ab6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c4aba:	e7dd      	b.n	c4a78 <_strtod_l+0xa68>
   c4abc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c4ac0:	e7f9      	b.n	c4ab6 <_strtod_l+0xaa6>
   c4ac2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c4ac6:	9b04      	ldr	r3, [sp, #16]
   c4ac8:	2b00      	cmp	r3, #0
   c4aca:	d1a8      	bne.n	c4a1e <_strtod_l+0xa0e>
   c4acc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c4ad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c4ad2:	0d1b      	lsrs	r3, r3, #20
   c4ad4:	051b      	lsls	r3, r3, #20
   c4ad6:	429a      	cmp	r2, r3
   c4ad8:	d1a1      	bne.n	c4a1e <_strtod_l+0xa0e>
   c4ada:	4640      	mov	r0, r8
   c4adc:	4649      	mov	r1, r9
   c4ade:	f001 fa05 	bl	c5eec <__aeabi_d2lz>
   c4ae2:	f7fe fd93 	bl	c360c <__aeabi_l2d>
   c4ae6:	4602      	mov	r2, r0
   c4ae8:	460b      	mov	r3, r1
   c4aea:	4640      	mov	r0, r8
   c4aec:	4649      	mov	r1, r9
   c4aee:	f7fe fc03 	bl	c32f8 <__aeabi_dsub>
   c4af2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c4af4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c4af8:	ea43 030a 	orr.w	r3, r3, sl
   c4afc:	4313      	orrs	r3, r2
   c4afe:	4680      	mov	r8, r0
   c4b00:	4689      	mov	r9, r1
   c4b02:	d055      	beq.n	c4bb0 <_strtod_l+0xba0>
   c4b04:	a336      	add	r3, pc, #216	; (adr r3, c4be0 <_strtod_l+0xbd0>)
   c4b06:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4b0a:	f7ff f81f 	bl	c3b4c <__aeabi_dcmplt>
   c4b0e:	2800      	cmp	r0, #0
   c4b10:	f47f acd0 	bne.w	c44b4 <_strtod_l+0x4a4>
   c4b14:	a334      	add	r3, pc, #208	; (adr r3, c4be8 <_strtod_l+0xbd8>)
   c4b16:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4b1a:	4640      	mov	r0, r8
   c4b1c:	4649      	mov	r1, r9
   c4b1e:	f7ff f833 	bl	c3b88 <__aeabi_dcmpgt>
   c4b22:	2800      	cmp	r0, #0
   c4b24:	f43f af7b 	beq.w	c4a1e <_strtod_l+0xa0e>
   c4b28:	e4c4      	b.n	c44b4 <_strtod_l+0x4a4>
   c4b2a:	9b04      	ldr	r3, [sp, #16]
   c4b2c:	b333      	cbz	r3, c4b7c <_strtod_l+0xb6c>
   c4b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c4b30:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c4b34:	d822      	bhi.n	c4b7c <_strtod_l+0xb6c>
   c4b36:	a32e      	add	r3, pc, #184	; (adr r3, c4bf0 <_strtod_l+0xbe0>)
   c4b38:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4b3c:	4640      	mov	r0, r8
   c4b3e:	4649      	mov	r1, r9
   c4b40:	f7ff f80e 	bl	c3b60 <__aeabi_dcmple>
   c4b44:	b1a0      	cbz	r0, c4b70 <_strtod_l+0xb60>
   c4b46:	4649      	mov	r1, r9
   c4b48:	4640      	mov	r0, r8
   c4b4a:	f7ff f865 	bl	c3c18 <__aeabi_d2uiz>
   c4b4e:	2801      	cmp	r0, #1
   c4b50:	bf38      	it	cc
   c4b52:	2001      	movcc	r0, #1
   c4b54:	f7fe fd0e 	bl	c3574 <__aeabi_ui2d>
   c4b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4b5a:	4680      	mov	r8, r0
   c4b5c:	4689      	mov	r9, r1
   c4b5e:	bb23      	cbnz	r3, c4baa <_strtod_l+0xb9a>
   c4b60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c4b64:	9010      	str	r0, [sp, #64]	; 0x40
   c4b66:	9311      	str	r3, [sp, #68]	; 0x44
   c4b68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c4b6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c4b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c4b72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c4b74:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c4b78:	1a9b      	subs	r3, r3, r2
   c4b7a:	9309      	str	r3, [sp, #36]	; 0x24
   c4b7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4b80:	eeb0 0a48 	vmov.f32	s0, s16
   c4b84:	eef0 0a68 	vmov.f32	s1, s17
   c4b88:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c4b8c:	f001 f838 	bl	c5c00 <__ulp>
   c4b90:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4b94:	ec53 2b10 	vmov	r2, r3, d0
   c4b98:	f7fe fd66 	bl	c3668 <__aeabi_dmul>
   c4b9c:	ec53 2b18 	vmov	r2, r3, d8
   c4ba0:	f7fe fbac 	bl	c32fc <__adddf3>
   c4ba4:	4682      	mov	sl, r0
   c4ba6:	468b      	mov	fp, r1
   c4ba8:	e78d      	b.n	c4ac6 <_strtod_l+0xab6>
   c4baa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c4bae:	e7db      	b.n	c4b68 <_strtod_l+0xb58>
   c4bb0:	a311      	add	r3, pc, #68	; (adr r3, c4bf8 <_strtod_l+0xbe8>)
   c4bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4bb6:	f7fe ffc9 	bl	c3b4c <__aeabi_dcmplt>
   c4bba:	e7b2      	b.n	c4b22 <_strtod_l+0xb12>
   c4bbc:	2300      	movs	r3, #0
   c4bbe:	930a      	str	r3, [sp, #40]	; 0x28
   c4bc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c4bc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4bc4:	6013      	str	r3, [r2, #0]
   c4bc6:	f7ff ba6b 	b.w	c40a0 <_strtod_l+0x90>
   c4bca:	2a65      	cmp	r2, #101	; 0x65
   c4bcc:	f43f ab5f 	beq.w	c428e <_strtod_l+0x27e>
   c4bd0:	2a45      	cmp	r2, #69	; 0x45
   c4bd2:	f43f ab5c 	beq.w	c428e <_strtod_l+0x27e>
   c4bd6:	2301      	movs	r3, #1
   c4bd8:	f7ff bb94 	b.w	c4304 <_strtod_l+0x2f4>
   c4bdc:	f3af 8000 	nop.w
   c4be0:	94a03595 	.word	0x94a03595
   c4be4:	3fdfffff 	.word	0x3fdfffff
   c4be8:	35afe535 	.word	0x35afe535
   c4bec:	3fe00000 	.word	0x3fe00000
   c4bf0:	ffc00000 	.word	0xffc00000
   c4bf4:	41dfffff 	.word	0x41dfffff
   c4bf8:	94a03595 	.word	0x94a03595
   c4bfc:	3fcfffff 	.word	0x3fcfffff
   c4c00:	3ff00000 	.word	0x3ff00000
   c4c04:	7ff00000 	.word	0x7ff00000
   c4c08:	7fe00000 	.word	0x7fe00000
   c4c0c:	7c9fffff 	.word	0x7c9fffff
   c4c10:	3fe00000 	.word	0x3fe00000
   c4c14:	bff00000 	.word	0xbff00000
   c4c18:	7fefffff 	.word	0x7fefffff

000c4c1c <strtod>:
   c4c1c:	460a      	mov	r2, r1
   c4c1e:	4601      	mov	r1, r0
   c4c20:	4802      	ldr	r0, [pc, #8]	; (c4c2c <strtod+0x10>)
   c4c22:	4b03      	ldr	r3, [pc, #12]	; (c4c30 <strtod+0x14>)
   c4c24:	6800      	ldr	r0, [r0, #0]
   c4c26:	f7ff b9f3 	b.w	c4010 <_strtod_l>
   c4c2a:	bf00      	nop
   c4c2c:	2003db90 	.word	0x2003db90
   c4c30:	2003dbfc 	.word	0x2003dbfc

000c4c34 <_strtol_l.constprop.0>:
   c4c34:	2b01      	cmp	r3, #1
   c4c36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c4c3a:	d001      	beq.n	c4c40 <_strtol_l.constprop.0+0xc>
   c4c3c:	2b24      	cmp	r3, #36	; 0x24
   c4c3e:	d906      	bls.n	c4c4e <_strtol_l.constprop.0+0x1a>
   c4c40:	f7f8 ffd2 	bl	bdbe8 <__errno>
   c4c44:	2316      	movs	r3, #22
   c4c46:	6003      	str	r3, [r0, #0]
   c4c48:	2000      	movs	r0, #0
   c4c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c4c4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c4d34 <_strtol_l.constprop.0+0x100>
   c4c52:	460d      	mov	r5, r1
   c4c54:	462e      	mov	r6, r5
   c4c56:	f815 4b01 	ldrb.w	r4, [r5], #1
   c4c5a:	f814 700c 	ldrb.w	r7, [r4, ip]
   c4c5e:	f017 0708 	ands.w	r7, r7, #8
   c4c62:	d1f7      	bne.n	c4c54 <_strtol_l.constprop.0+0x20>
   c4c64:	2c2d      	cmp	r4, #45	; 0x2d
   c4c66:	d132      	bne.n	c4cce <_strtol_l.constprop.0+0x9a>
   c4c68:	782c      	ldrb	r4, [r5, #0]
   c4c6a:	2701      	movs	r7, #1
   c4c6c:	1cb5      	adds	r5, r6, #2
   c4c6e:	2b00      	cmp	r3, #0
   c4c70:	d05b      	beq.n	c4d2a <_strtol_l.constprop.0+0xf6>
   c4c72:	2b10      	cmp	r3, #16
   c4c74:	d109      	bne.n	c4c8a <_strtol_l.constprop.0+0x56>
   c4c76:	2c30      	cmp	r4, #48	; 0x30
   c4c78:	d107      	bne.n	c4c8a <_strtol_l.constprop.0+0x56>
   c4c7a:	782c      	ldrb	r4, [r5, #0]
   c4c7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c4c80:	2c58      	cmp	r4, #88	; 0x58
   c4c82:	d14d      	bne.n	c4d20 <_strtol_l.constprop.0+0xec>
   c4c84:	786c      	ldrb	r4, [r5, #1]
   c4c86:	2310      	movs	r3, #16
   c4c88:	3502      	adds	r5, #2
   c4c8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c4c8e:	f108 38ff 	add.w	r8, r8, #4294967295
   c4c92:	f04f 0c00 	mov.w	ip, #0
   c4c96:	fbb8 f9f3 	udiv	r9, r8, r3
   c4c9a:	4666      	mov	r6, ip
   c4c9c:	fb03 8a19 	mls	sl, r3, r9, r8
   c4ca0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c4ca4:	f1be 0f09 	cmp.w	lr, #9
   c4ca8:	d816      	bhi.n	c4cd8 <_strtol_l.constprop.0+0xa4>
   c4caa:	4674      	mov	r4, lr
   c4cac:	42a3      	cmp	r3, r4
   c4cae:	dd24      	ble.n	c4cfa <_strtol_l.constprop.0+0xc6>
   c4cb0:	f1bc 0f00 	cmp.w	ip, #0
   c4cb4:	db1e      	blt.n	c4cf4 <_strtol_l.constprop.0+0xc0>
   c4cb6:	45b1      	cmp	r9, r6
   c4cb8:	d31c      	bcc.n	c4cf4 <_strtol_l.constprop.0+0xc0>
   c4cba:	d101      	bne.n	c4cc0 <_strtol_l.constprop.0+0x8c>
   c4cbc:	45a2      	cmp	sl, r4
   c4cbe:	db19      	blt.n	c4cf4 <_strtol_l.constprop.0+0xc0>
   c4cc0:	fb06 4603 	mla	r6, r6, r3, r4
   c4cc4:	f04f 0c01 	mov.w	ip, #1
   c4cc8:	f815 4b01 	ldrb.w	r4, [r5], #1
   c4ccc:	e7e8      	b.n	c4ca0 <_strtol_l.constprop.0+0x6c>
   c4cce:	2c2b      	cmp	r4, #43	; 0x2b
   c4cd0:	bf04      	itt	eq
   c4cd2:	782c      	ldrbeq	r4, [r5, #0]
   c4cd4:	1cb5      	addeq	r5, r6, #2
   c4cd6:	e7ca      	b.n	c4c6e <_strtol_l.constprop.0+0x3a>
   c4cd8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c4cdc:	f1be 0f19 	cmp.w	lr, #25
   c4ce0:	d801      	bhi.n	c4ce6 <_strtol_l.constprop.0+0xb2>
   c4ce2:	3c37      	subs	r4, #55	; 0x37
   c4ce4:	e7e2      	b.n	c4cac <_strtol_l.constprop.0+0x78>
   c4ce6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c4cea:	f1be 0f19 	cmp.w	lr, #25
   c4cee:	d804      	bhi.n	c4cfa <_strtol_l.constprop.0+0xc6>
   c4cf0:	3c57      	subs	r4, #87	; 0x57
   c4cf2:	e7db      	b.n	c4cac <_strtol_l.constprop.0+0x78>
   c4cf4:	f04f 3cff 	mov.w	ip, #4294967295
   c4cf8:	e7e6      	b.n	c4cc8 <_strtol_l.constprop.0+0x94>
   c4cfa:	f1bc 0f00 	cmp.w	ip, #0
   c4cfe:	da05      	bge.n	c4d0c <_strtol_l.constprop.0+0xd8>
   c4d00:	2322      	movs	r3, #34	; 0x22
   c4d02:	6003      	str	r3, [r0, #0]
   c4d04:	4646      	mov	r6, r8
   c4d06:	b942      	cbnz	r2, c4d1a <_strtol_l.constprop.0+0xe6>
   c4d08:	4630      	mov	r0, r6
   c4d0a:	e79e      	b.n	c4c4a <_strtol_l.constprop.0+0x16>
   c4d0c:	b107      	cbz	r7, c4d10 <_strtol_l.constprop.0+0xdc>
   c4d0e:	4276      	negs	r6, r6
   c4d10:	2a00      	cmp	r2, #0
   c4d12:	d0f9      	beq.n	c4d08 <_strtol_l.constprop.0+0xd4>
   c4d14:	f1bc 0f00 	cmp.w	ip, #0
   c4d18:	d000      	beq.n	c4d1c <_strtol_l.constprop.0+0xe8>
   c4d1a:	1e69      	subs	r1, r5, #1
   c4d1c:	6011      	str	r1, [r2, #0]
   c4d1e:	e7f3      	b.n	c4d08 <_strtol_l.constprop.0+0xd4>
   c4d20:	2430      	movs	r4, #48	; 0x30
   c4d22:	2b00      	cmp	r3, #0
   c4d24:	d1b1      	bne.n	c4c8a <_strtol_l.constprop.0+0x56>
   c4d26:	2308      	movs	r3, #8
   c4d28:	e7af      	b.n	c4c8a <_strtol_l.constprop.0+0x56>
   c4d2a:	2c30      	cmp	r4, #48	; 0x30
   c4d2c:	d0a5      	beq.n	c4c7a <_strtol_l.constprop.0+0x46>
   c4d2e:	230a      	movs	r3, #10
   c4d30:	e7ab      	b.n	c4c8a <_strtol_l.constprop.0+0x56>
   c4d32:	bf00      	nop
   c4d34:	000c7e71 	.word	0x000c7e71

000c4d38 <strtol>:
   c4d38:	4613      	mov	r3, r2
   c4d3a:	460a      	mov	r2, r1
   c4d3c:	4601      	mov	r1, r0
   c4d3e:	4802      	ldr	r0, [pc, #8]	; (c4d48 <strtol+0x10>)
   c4d40:	6800      	ldr	r0, [r0, #0]
   c4d42:	f7ff bf77 	b.w	c4c34 <_strtol_l.constprop.0>
   c4d46:	bf00      	nop
   c4d48:	2003db90 	.word	0x2003db90

000c4d4c <__register_exitproc>:
   c4d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c4d50:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c4e0c <__register_exitproc+0xc0>
   c4d54:	4606      	mov	r6, r0
   c4d56:	f8d8 0000 	ldr.w	r0, [r8]
   c4d5a:	461f      	mov	r7, r3
   c4d5c:	460d      	mov	r5, r1
   c4d5e:	4691      	mov	r9, r2
   c4d60:	f000 fbc6 	bl	c54f0 <__retarget_lock_acquire_recursive>
   c4d64:	4b25      	ldr	r3, [pc, #148]	; (c4dfc <__register_exitproc+0xb0>)
   c4d66:	681c      	ldr	r4, [r3, #0]
   c4d68:	b934      	cbnz	r4, c4d78 <__register_exitproc+0x2c>
   c4d6a:	4c25      	ldr	r4, [pc, #148]	; (c4e00 <__register_exitproc+0xb4>)
   c4d6c:	601c      	str	r4, [r3, #0]
   c4d6e:	4b25      	ldr	r3, [pc, #148]	; (c4e04 <__register_exitproc+0xb8>)
   c4d70:	b113      	cbz	r3, c4d78 <__register_exitproc+0x2c>
   c4d72:	681b      	ldr	r3, [r3, #0]
   c4d74:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c4d78:	6863      	ldr	r3, [r4, #4]
   c4d7a:	2b1f      	cmp	r3, #31
   c4d7c:	dd07      	ble.n	c4d8e <__register_exitproc+0x42>
   c4d7e:	f8d8 0000 	ldr.w	r0, [r8]
   c4d82:	f000 fbb7 	bl	c54f4 <__retarget_lock_release_recursive>
   c4d86:	f04f 30ff 	mov.w	r0, #4294967295
   c4d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c4d8e:	b34e      	cbz	r6, c4de4 <__register_exitproc+0x98>
   c4d90:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c4d94:	b988      	cbnz	r0, c4dba <__register_exitproc+0x6e>
   c4d96:	4b1c      	ldr	r3, [pc, #112]	; (c4e08 <__register_exitproc+0xbc>)
   c4d98:	b923      	cbnz	r3, c4da4 <__register_exitproc+0x58>
   c4d9a:	f8d8 0000 	ldr.w	r0, [r8]
   c4d9e:	f000 fba8 	bl	c54f2 <__retarget_lock_release>
   c4da2:	e7f0      	b.n	c4d86 <__register_exitproc+0x3a>
   c4da4:	f44f 7084 	mov.w	r0, #264	; 0x108
   c4da8:	f7f8 fed6 	bl	bdb58 <malloc>
   c4dac:	2800      	cmp	r0, #0
   c4dae:	d0f4      	beq.n	c4d9a <__register_exitproc+0x4e>
   c4db0:	2300      	movs	r3, #0
   c4db2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c4db6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c4dba:	6863      	ldr	r3, [r4, #4]
   c4dbc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c4dc0:	2201      	movs	r2, #1
   c4dc2:	409a      	lsls	r2, r3
   c4dc4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c4dc8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c4dcc:	4313      	orrs	r3, r2
   c4dce:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c4dd2:	2e02      	cmp	r6, #2
   c4dd4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c4dd8:	bf02      	ittt	eq
   c4dda:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c4dde:	4313      	orreq	r3, r2
   c4de0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c4de4:	6863      	ldr	r3, [r4, #4]
   c4de6:	f8d8 0000 	ldr.w	r0, [r8]
   c4dea:	1c5a      	adds	r2, r3, #1
   c4dec:	3302      	adds	r3, #2
   c4dee:	6062      	str	r2, [r4, #4]
   c4df0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c4df4:	f000 fb7e 	bl	c54f4 <__retarget_lock_release_recursive>
   c4df8:	2000      	movs	r0, #0
   c4dfa:	e7c6      	b.n	c4d8a <__register_exitproc+0x3e>
   c4dfc:	2003e7e8 	.word	0x2003e7e8
   c4e00:	2003e75c 	.word	0x2003e75c
   c4e04:	00000000 	.word	0x00000000
   c4e08:	000bdb59 	.word	0x000bdb59
   c4e0c:	2003dbf4 	.word	0x2003dbf4

000c4e10 <rshift>:
   c4e10:	6903      	ldr	r3, [r0, #16]
   c4e12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c4e16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c4e1a:	ea4f 1261 	mov.w	r2, r1, asr #5
   c4e1e:	f100 0414 	add.w	r4, r0, #20
   c4e22:	dd45      	ble.n	c4eb0 <rshift+0xa0>
   c4e24:	f011 011f 	ands.w	r1, r1, #31
   c4e28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c4e2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c4e30:	d10c      	bne.n	c4e4c <rshift+0x3c>
   c4e32:	f100 0710 	add.w	r7, r0, #16
   c4e36:	4629      	mov	r1, r5
   c4e38:	42b1      	cmp	r1, r6
   c4e3a:	d334      	bcc.n	c4ea6 <rshift+0x96>
   c4e3c:	1a9b      	subs	r3, r3, r2
   c4e3e:	009b      	lsls	r3, r3, #2
   c4e40:	1eea      	subs	r2, r5, #3
   c4e42:	4296      	cmp	r6, r2
   c4e44:	bf38      	it	cc
   c4e46:	2300      	movcc	r3, #0
   c4e48:	4423      	add	r3, r4
   c4e4a:	e015      	b.n	c4e78 <rshift+0x68>
   c4e4c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c4e50:	f1c1 0820 	rsb	r8, r1, #32
   c4e54:	40cf      	lsrs	r7, r1
   c4e56:	f105 0e04 	add.w	lr, r5, #4
   c4e5a:	46a1      	mov	r9, r4
   c4e5c:	4576      	cmp	r6, lr
   c4e5e:	46f4      	mov	ip, lr
   c4e60:	d815      	bhi.n	c4e8e <rshift+0x7e>
   c4e62:	1a9a      	subs	r2, r3, r2
   c4e64:	0092      	lsls	r2, r2, #2
   c4e66:	3a04      	subs	r2, #4
   c4e68:	3501      	adds	r5, #1
   c4e6a:	42ae      	cmp	r6, r5
   c4e6c:	bf38      	it	cc
   c4e6e:	2200      	movcc	r2, #0
   c4e70:	18a3      	adds	r3, r4, r2
   c4e72:	50a7      	str	r7, [r4, r2]
   c4e74:	b107      	cbz	r7, c4e78 <rshift+0x68>
   c4e76:	3304      	adds	r3, #4
   c4e78:	1b1a      	subs	r2, r3, r4
   c4e7a:	42a3      	cmp	r3, r4
   c4e7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c4e80:	bf08      	it	eq
   c4e82:	2300      	moveq	r3, #0
   c4e84:	6102      	str	r2, [r0, #16]
   c4e86:	bf08      	it	eq
   c4e88:	6143      	streq	r3, [r0, #20]
   c4e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c4e8e:	f8dc c000 	ldr.w	ip, [ip]
   c4e92:	fa0c fc08 	lsl.w	ip, ip, r8
   c4e96:	ea4c 0707 	orr.w	r7, ip, r7
   c4e9a:	f849 7b04 	str.w	r7, [r9], #4
   c4e9e:	f85e 7b04 	ldr.w	r7, [lr], #4
   c4ea2:	40cf      	lsrs	r7, r1
   c4ea4:	e7da      	b.n	c4e5c <rshift+0x4c>
   c4ea6:	f851 cb04 	ldr.w	ip, [r1], #4
   c4eaa:	f847 cf04 	str.w	ip, [r7, #4]!
   c4eae:	e7c3      	b.n	c4e38 <rshift+0x28>
   c4eb0:	4623      	mov	r3, r4
   c4eb2:	e7e1      	b.n	c4e78 <rshift+0x68>

000c4eb4 <__hexdig_fun>:
   c4eb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c4eb8:	2b09      	cmp	r3, #9
   c4eba:	d802      	bhi.n	c4ec2 <__hexdig_fun+0xe>
   c4ebc:	3820      	subs	r0, #32
   c4ebe:	b2c0      	uxtb	r0, r0
   c4ec0:	4770      	bx	lr
   c4ec2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c4ec6:	2b05      	cmp	r3, #5
   c4ec8:	d801      	bhi.n	c4ece <__hexdig_fun+0x1a>
   c4eca:	3847      	subs	r0, #71	; 0x47
   c4ecc:	e7f7      	b.n	c4ebe <__hexdig_fun+0xa>
   c4ece:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c4ed2:	2b05      	cmp	r3, #5
   c4ed4:	d801      	bhi.n	c4eda <__hexdig_fun+0x26>
   c4ed6:	3827      	subs	r0, #39	; 0x27
   c4ed8:	e7f1      	b.n	c4ebe <__hexdig_fun+0xa>
   c4eda:	2000      	movs	r0, #0
   c4edc:	4770      	bx	lr
	...

000c4ee0 <__gethex>:
   c4ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4ee4:	ed2d 8b02 	vpush	{d8}
   c4ee8:	b089      	sub	sp, #36	; 0x24
   c4eea:	ee08 0a10 	vmov	s16, r0
   c4eee:	9304      	str	r3, [sp, #16]
   c4ef0:	4bb4      	ldr	r3, [pc, #720]	; (c51c4 <__gethex+0x2e4>)
   c4ef2:	681b      	ldr	r3, [r3, #0]
   c4ef4:	9301      	str	r3, [sp, #4]
   c4ef6:	4618      	mov	r0, r3
   c4ef8:	468b      	mov	fp, r1
   c4efa:	4690      	mov	r8, r2
   c4efc:	f7fe fff3 	bl	c3ee6 <strlen>
   c4f00:	9b01      	ldr	r3, [sp, #4]
   c4f02:	f8db 2000 	ldr.w	r2, [fp]
   c4f06:	4403      	add	r3, r0
   c4f08:	4682      	mov	sl, r0
   c4f0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c4f0e:	9305      	str	r3, [sp, #20]
   c4f10:	1c93      	adds	r3, r2, #2
   c4f12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c4f16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c4f1a:	32fe      	adds	r2, #254	; 0xfe
   c4f1c:	18d1      	adds	r1, r2, r3
   c4f1e:	461f      	mov	r7, r3
   c4f20:	f813 0b01 	ldrb.w	r0, [r3], #1
   c4f24:	9100      	str	r1, [sp, #0]
   c4f26:	2830      	cmp	r0, #48	; 0x30
   c4f28:	d0f8      	beq.n	c4f1c <__gethex+0x3c>
   c4f2a:	f7ff ffc3 	bl	c4eb4 <__hexdig_fun>
   c4f2e:	4604      	mov	r4, r0
   c4f30:	2800      	cmp	r0, #0
   c4f32:	d13a      	bne.n	c4faa <__gethex+0xca>
   c4f34:	9901      	ldr	r1, [sp, #4]
   c4f36:	4652      	mov	r2, sl
   c4f38:	4638      	mov	r0, r7
   c4f3a:	f7fe ffef 	bl	c3f1c <strncmp>
   c4f3e:	4605      	mov	r5, r0
   c4f40:	2800      	cmp	r0, #0
   c4f42:	d168      	bne.n	c5016 <__gethex+0x136>
   c4f44:	f817 000a 	ldrb.w	r0, [r7, sl]
   c4f48:	eb07 060a 	add.w	r6, r7, sl
   c4f4c:	f7ff ffb2 	bl	c4eb4 <__hexdig_fun>
   c4f50:	2800      	cmp	r0, #0
   c4f52:	d062      	beq.n	c501a <__gethex+0x13a>
   c4f54:	4633      	mov	r3, r6
   c4f56:	7818      	ldrb	r0, [r3, #0]
   c4f58:	2830      	cmp	r0, #48	; 0x30
   c4f5a:	461f      	mov	r7, r3
   c4f5c:	f103 0301 	add.w	r3, r3, #1
   c4f60:	d0f9      	beq.n	c4f56 <__gethex+0x76>
   c4f62:	f7ff ffa7 	bl	c4eb4 <__hexdig_fun>
   c4f66:	2301      	movs	r3, #1
   c4f68:	fab0 f480 	clz	r4, r0
   c4f6c:	0964      	lsrs	r4, r4, #5
   c4f6e:	4635      	mov	r5, r6
   c4f70:	9300      	str	r3, [sp, #0]
   c4f72:	463a      	mov	r2, r7
   c4f74:	4616      	mov	r6, r2
   c4f76:	3201      	adds	r2, #1
   c4f78:	7830      	ldrb	r0, [r6, #0]
   c4f7a:	f7ff ff9b 	bl	c4eb4 <__hexdig_fun>
   c4f7e:	2800      	cmp	r0, #0
   c4f80:	d1f8      	bne.n	c4f74 <__gethex+0x94>
   c4f82:	9901      	ldr	r1, [sp, #4]
   c4f84:	4652      	mov	r2, sl
   c4f86:	4630      	mov	r0, r6
   c4f88:	f7fe ffc8 	bl	c3f1c <strncmp>
   c4f8c:	b980      	cbnz	r0, c4fb0 <__gethex+0xd0>
   c4f8e:	b94d      	cbnz	r5, c4fa4 <__gethex+0xc4>
   c4f90:	eb06 050a 	add.w	r5, r6, sl
   c4f94:	462a      	mov	r2, r5
   c4f96:	4616      	mov	r6, r2
   c4f98:	3201      	adds	r2, #1
   c4f9a:	7830      	ldrb	r0, [r6, #0]
   c4f9c:	f7ff ff8a 	bl	c4eb4 <__hexdig_fun>
   c4fa0:	2800      	cmp	r0, #0
   c4fa2:	d1f8      	bne.n	c4f96 <__gethex+0xb6>
   c4fa4:	1bad      	subs	r5, r5, r6
   c4fa6:	00ad      	lsls	r5, r5, #2
   c4fa8:	e004      	b.n	c4fb4 <__gethex+0xd4>
   c4faa:	2400      	movs	r4, #0
   c4fac:	4625      	mov	r5, r4
   c4fae:	e7e0      	b.n	c4f72 <__gethex+0x92>
   c4fb0:	2d00      	cmp	r5, #0
   c4fb2:	d1f7      	bne.n	c4fa4 <__gethex+0xc4>
   c4fb4:	7833      	ldrb	r3, [r6, #0]
   c4fb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c4fba:	2b50      	cmp	r3, #80	; 0x50
   c4fbc:	d13b      	bne.n	c5036 <__gethex+0x156>
   c4fbe:	7873      	ldrb	r3, [r6, #1]
   c4fc0:	2b2b      	cmp	r3, #43	; 0x2b
   c4fc2:	d02c      	beq.n	c501e <__gethex+0x13e>
   c4fc4:	2b2d      	cmp	r3, #45	; 0x2d
   c4fc6:	d02e      	beq.n	c5026 <__gethex+0x146>
   c4fc8:	1c71      	adds	r1, r6, #1
   c4fca:	f04f 0900 	mov.w	r9, #0
   c4fce:	7808      	ldrb	r0, [r1, #0]
   c4fd0:	f7ff ff70 	bl	c4eb4 <__hexdig_fun>
   c4fd4:	1e43      	subs	r3, r0, #1
   c4fd6:	b2db      	uxtb	r3, r3
   c4fd8:	2b18      	cmp	r3, #24
   c4fda:	d82c      	bhi.n	c5036 <__gethex+0x156>
   c4fdc:	f1a0 0210 	sub.w	r2, r0, #16
   c4fe0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c4fe4:	f7ff ff66 	bl	c4eb4 <__hexdig_fun>
   c4fe8:	1e43      	subs	r3, r0, #1
   c4fea:	b2db      	uxtb	r3, r3
   c4fec:	2b18      	cmp	r3, #24
   c4fee:	d91d      	bls.n	c502c <__gethex+0x14c>
   c4ff0:	f1b9 0f00 	cmp.w	r9, #0
   c4ff4:	d000      	beq.n	c4ff8 <__gethex+0x118>
   c4ff6:	4252      	negs	r2, r2
   c4ff8:	4415      	add	r5, r2
   c4ffa:	f8cb 1000 	str.w	r1, [fp]
   c4ffe:	b1e4      	cbz	r4, c503a <__gethex+0x15a>
   c5000:	9b00      	ldr	r3, [sp, #0]
   c5002:	2b00      	cmp	r3, #0
   c5004:	bf14      	ite	ne
   c5006:	2700      	movne	r7, #0
   c5008:	2706      	moveq	r7, #6
   c500a:	4638      	mov	r0, r7
   c500c:	b009      	add	sp, #36	; 0x24
   c500e:	ecbd 8b02 	vpop	{d8}
   c5012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5016:	463e      	mov	r6, r7
   c5018:	4625      	mov	r5, r4
   c501a:	2401      	movs	r4, #1
   c501c:	e7ca      	b.n	c4fb4 <__gethex+0xd4>
   c501e:	f04f 0900 	mov.w	r9, #0
   c5022:	1cb1      	adds	r1, r6, #2
   c5024:	e7d3      	b.n	c4fce <__gethex+0xee>
   c5026:	f04f 0901 	mov.w	r9, #1
   c502a:	e7fa      	b.n	c5022 <__gethex+0x142>
   c502c:	230a      	movs	r3, #10
   c502e:	fb03 0202 	mla	r2, r3, r2, r0
   c5032:	3a10      	subs	r2, #16
   c5034:	e7d4      	b.n	c4fe0 <__gethex+0x100>
   c5036:	4631      	mov	r1, r6
   c5038:	e7df      	b.n	c4ffa <__gethex+0x11a>
   c503a:	1bf3      	subs	r3, r6, r7
   c503c:	3b01      	subs	r3, #1
   c503e:	4621      	mov	r1, r4
   c5040:	2b07      	cmp	r3, #7
   c5042:	dc0b      	bgt.n	c505c <__gethex+0x17c>
   c5044:	ee18 0a10 	vmov	r0, s16
   c5048:	f000 fa68 	bl	c551c <_Balloc>
   c504c:	4604      	mov	r4, r0
   c504e:	b940      	cbnz	r0, c5062 <__gethex+0x182>
   c5050:	4b5d      	ldr	r3, [pc, #372]	; (c51c8 <__gethex+0x2e8>)
   c5052:	4602      	mov	r2, r0
   c5054:	21de      	movs	r1, #222	; 0xde
   c5056:	485d      	ldr	r0, [pc, #372]	; (c51cc <__gethex+0x2ec>)
   c5058:	f7f8 fdce 	bl	bdbf8 <__assert_func>
   c505c:	3101      	adds	r1, #1
   c505e:	105b      	asrs	r3, r3, #1
   c5060:	e7ee      	b.n	c5040 <__gethex+0x160>
   c5062:	f100 0914 	add.w	r9, r0, #20
   c5066:	f04f 0b00 	mov.w	fp, #0
   c506a:	f1ca 0301 	rsb	r3, sl, #1
   c506e:	f8cd 9008 	str.w	r9, [sp, #8]
   c5072:	f8cd b000 	str.w	fp, [sp]
   c5076:	9306      	str	r3, [sp, #24]
   c5078:	42b7      	cmp	r7, r6
   c507a:	d340      	bcc.n	c50fe <__gethex+0x21e>
   c507c:	9802      	ldr	r0, [sp, #8]
   c507e:	9b00      	ldr	r3, [sp, #0]
   c5080:	f840 3b04 	str.w	r3, [r0], #4
   c5084:	eba0 0009 	sub.w	r0, r0, r9
   c5088:	1080      	asrs	r0, r0, #2
   c508a:	0146      	lsls	r6, r0, #5
   c508c:	6120      	str	r0, [r4, #16]
   c508e:	4618      	mov	r0, r3
   c5090:	f000 fb36 	bl	c5700 <__hi0bits>
   c5094:	1a30      	subs	r0, r6, r0
   c5096:	f8d8 6000 	ldr.w	r6, [r8]
   c509a:	42b0      	cmp	r0, r6
   c509c:	dd63      	ble.n	c5166 <__gethex+0x286>
   c509e:	1b87      	subs	r7, r0, r6
   c50a0:	4639      	mov	r1, r7
   c50a2:	4620      	mov	r0, r4
   c50a4:	f000 feda 	bl	c5e5c <__any_on>
   c50a8:	4682      	mov	sl, r0
   c50aa:	b1a8      	cbz	r0, c50d8 <__gethex+0x1f8>
   c50ac:	1e7b      	subs	r3, r7, #1
   c50ae:	1159      	asrs	r1, r3, #5
   c50b0:	f003 021f 	and.w	r2, r3, #31
   c50b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c50b8:	f04f 0a01 	mov.w	sl, #1
   c50bc:	fa0a f202 	lsl.w	r2, sl, r2
   c50c0:	420a      	tst	r2, r1
   c50c2:	d009      	beq.n	c50d8 <__gethex+0x1f8>
   c50c4:	4553      	cmp	r3, sl
   c50c6:	dd05      	ble.n	c50d4 <__gethex+0x1f4>
   c50c8:	1eb9      	subs	r1, r7, #2
   c50ca:	4620      	mov	r0, r4
   c50cc:	f000 fec6 	bl	c5e5c <__any_on>
   c50d0:	2800      	cmp	r0, #0
   c50d2:	d145      	bne.n	c5160 <__gethex+0x280>
   c50d4:	f04f 0a02 	mov.w	sl, #2
   c50d8:	4639      	mov	r1, r7
   c50da:	4620      	mov	r0, r4
   c50dc:	f7ff fe98 	bl	c4e10 <rshift>
   c50e0:	443d      	add	r5, r7
   c50e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c50e6:	42ab      	cmp	r3, r5
   c50e8:	da4c      	bge.n	c5184 <__gethex+0x2a4>
   c50ea:	ee18 0a10 	vmov	r0, s16
   c50ee:	4621      	mov	r1, r4
   c50f0:	f000 fa54 	bl	c559c <_Bfree>
   c50f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c50f6:	2300      	movs	r3, #0
   c50f8:	6013      	str	r3, [r2, #0]
   c50fa:	27a3      	movs	r7, #163	; 0xa3
   c50fc:	e785      	b.n	c500a <__gethex+0x12a>
   c50fe:	1e73      	subs	r3, r6, #1
   c5100:	9a05      	ldr	r2, [sp, #20]
   c5102:	9303      	str	r3, [sp, #12]
   c5104:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c5108:	4293      	cmp	r3, r2
   c510a:	d019      	beq.n	c5140 <__gethex+0x260>
   c510c:	f1bb 0f20 	cmp.w	fp, #32
   c5110:	d107      	bne.n	c5122 <__gethex+0x242>
   c5112:	9b02      	ldr	r3, [sp, #8]
   c5114:	9a00      	ldr	r2, [sp, #0]
   c5116:	f843 2b04 	str.w	r2, [r3], #4
   c511a:	9302      	str	r3, [sp, #8]
   c511c:	2300      	movs	r3, #0
   c511e:	9300      	str	r3, [sp, #0]
   c5120:	469b      	mov	fp, r3
   c5122:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c5126:	f7ff fec5 	bl	c4eb4 <__hexdig_fun>
   c512a:	9b00      	ldr	r3, [sp, #0]
   c512c:	f000 000f 	and.w	r0, r0, #15
   c5130:	fa00 f00b 	lsl.w	r0, r0, fp
   c5134:	4303      	orrs	r3, r0
   c5136:	9300      	str	r3, [sp, #0]
   c5138:	f10b 0b04 	add.w	fp, fp, #4
   c513c:	9b03      	ldr	r3, [sp, #12]
   c513e:	e00d      	b.n	c515c <__gethex+0x27c>
   c5140:	9b03      	ldr	r3, [sp, #12]
   c5142:	9a06      	ldr	r2, [sp, #24]
   c5144:	4413      	add	r3, r2
   c5146:	42bb      	cmp	r3, r7
   c5148:	d3e0      	bcc.n	c510c <__gethex+0x22c>
   c514a:	4618      	mov	r0, r3
   c514c:	9901      	ldr	r1, [sp, #4]
   c514e:	9307      	str	r3, [sp, #28]
   c5150:	4652      	mov	r2, sl
   c5152:	f7fe fee3 	bl	c3f1c <strncmp>
   c5156:	9b07      	ldr	r3, [sp, #28]
   c5158:	2800      	cmp	r0, #0
   c515a:	d1d7      	bne.n	c510c <__gethex+0x22c>
   c515c:	461e      	mov	r6, r3
   c515e:	e78b      	b.n	c5078 <__gethex+0x198>
   c5160:	f04f 0a03 	mov.w	sl, #3
   c5164:	e7b8      	b.n	c50d8 <__gethex+0x1f8>
   c5166:	da0a      	bge.n	c517e <__gethex+0x29e>
   c5168:	1a37      	subs	r7, r6, r0
   c516a:	4621      	mov	r1, r4
   c516c:	ee18 0a10 	vmov	r0, s16
   c5170:	463a      	mov	r2, r7
   c5172:	f000 fc2f 	bl	c59d4 <__lshift>
   c5176:	1bed      	subs	r5, r5, r7
   c5178:	4604      	mov	r4, r0
   c517a:	f100 0914 	add.w	r9, r0, #20
   c517e:	f04f 0a00 	mov.w	sl, #0
   c5182:	e7ae      	b.n	c50e2 <__gethex+0x202>
   c5184:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c5188:	42a8      	cmp	r0, r5
   c518a:	dd72      	ble.n	c5272 <__gethex+0x392>
   c518c:	1b45      	subs	r5, r0, r5
   c518e:	42ae      	cmp	r6, r5
   c5190:	dc36      	bgt.n	c5200 <__gethex+0x320>
   c5192:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c5196:	2b02      	cmp	r3, #2
   c5198:	d02a      	beq.n	c51f0 <__gethex+0x310>
   c519a:	2b03      	cmp	r3, #3
   c519c:	d02c      	beq.n	c51f8 <__gethex+0x318>
   c519e:	2b01      	cmp	r3, #1
   c51a0:	d11c      	bne.n	c51dc <__gethex+0x2fc>
   c51a2:	42ae      	cmp	r6, r5
   c51a4:	d11a      	bne.n	c51dc <__gethex+0x2fc>
   c51a6:	2e01      	cmp	r6, #1
   c51a8:	d112      	bne.n	c51d0 <__gethex+0x2f0>
   c51aa:	9a04      	ldr	r2, [sp, #16]
   c51ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c51b0:	6013      	str	r3, [r2, #0]
   c51b2:	2301      	movs	r3, #1
   c51b4:	6123      	str	r3, [r4, #16]
   c51b6:	f8c9 3000 	str.w	r3, [r9]
   c51ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c51bc:	2762      	movs	r7, #98	; 0x62
   c51be:	601c      	str	r4, [r3, #0]
   c51c0:	e723      	b.n	c500a <__gethex+0x12a>
   c51c2:	bf00      	nop
   c51c4:	000c8008 	.word	0x000c8008
   c51c8:	000c7f71 	.word	0x000c7f71
   c51cc:	000c7f82 	.word	0x000c7f82
   c51d0:	1e71      	subs	r1, r6, #1
   c51d2:	4620      	mov	r0, r4
   c51d4:	f000 fe42 	bl	c5e5c <__any_on>
   c51d8:	2800      	cmp	r0, #0
   c51da:	d1e6      	bne.n	c51aa <__gethex+0x2ca>
   c51dc:	ee18 0a10 	vmov	r0, s16
   c51e0:	4621      	mov	r1, r4
   c51e2:	f000 f9db 	bl	c559c <_Bfree>
   c51e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c51e8:	2300      	movs	r3, #0
   c51ea:	6013      	str	r3, [r2, #0]
   c51ec:	2750      	movs	r7, #80	; 0x50
   c51ee:	e70c      	b.n	c500a <__gethex+0x12a>
   c51f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c51f2:	2b00      	cmp	r3, #0
   c51f4:	d1f2      	bne.n	c51dc <__gethex+0x2fc>
   c51f6:	e7d8      	b.n	c51aa <__gethex+0x2ca>
   c51f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c51fa:	2b00      	cmp	r3, #0
   c51fc:	d1d5      	bne.n	c51aa <__gethex+0x2ca>
   c51fe:	e7ed      	b.n	c51dc <__gethex+0x2fc>
   c5200:	1e6f      	subs	r7, r5, #1
   c5202:	f1ba 0f00 	cmp.w	sl, #0
   c5206:	d131      	bne.n	c526c <__gethex+0x38c>
   c5208:	b127      	cbz	r7, c5214 <__gethex+0x334>
   c520a:	4639      	mov	r1, r7
   c520c:	4620      	mov	r0, r4
   c520e:	f000 fe25 	bl	c5e5c <__any_on>
   c5212:	4682      	mov	sl, r0
   c5214:	117b      	asrs	r3, r7, #5
   c5216:	2101      	movs	r1, #1
   c5218:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c521c:	f007 071f 	and.w	r7, r7, #31
   c5220:	fa01 f707 	lsl.w	r7, r1, r7
   c5224:	421f      	tst	r7, r3
   c5226:	4629      	mov	r1, r5
   c5228:	4620      	mov	r0, r4
   c522a:	bf18      	it	ne
   c522c:	f04a 0a02 	orrne.w	sl, sl, #2
   c5230:	1b76      	subs	r6, r6, r5
   c5232:	f7ff fded 	bl	c4e10 <rshift>
   c5236:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c523a:	2702      	movs	r7, #2
   c523c:	f1ba 0f00 	cmp.w	sl, #0
   c5240:	d048      	beq.n	c52d4 <__gethex+0x3f4>
   c5242:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c5246:	2b02      	cmp	r3, #2
   c5248:	d015      	beq.n	c5276 <__gethex+0x396>
   c524a:	2b03      	cmp	r3, #3
   c524c:	d017      	beq.n	c527e <__gethex+0x39e>
   c524e:	2b01      	cmp	r3, #1
   c5250:	d109      	bne.n	c5266 <__gethex+0x386>
   c5252:	f01a 0f02 	tst.w	sl, #2
   c5256:	d006      	beq.n	c5266 <__gethex+0x386>
   c5258:	f8d9 0000 	ldr.w	r0, [r9]
   c525c:	ea4a 0a00 	orr.w	sl, sl, r0
   c5260:	f01a 0f01 	tst.w	sl, #1
   c5264:	d10e      	bne.n	c5284 <__gethex+0x3a4>
   c5266:	f047 0710 	orr.w	r7, r7, #16
   c526a:	e033      	b.n	c52d4 <__gethex+0x3f4>
   c526c:	f04f 0a01 	mov.w	sl, #1
   c5270:	e7d0      	b.n	c5214 <__gethex+0x334>
   c5272:	2701      	movs	r7, #1
   c5274:	e7e2      	b.n	c523c <__gethex+0x35c>
   c5276:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5278:	f1c3 0301 	rsb	r3, r3, #1
   c527c:	9315      	str	r3, [sp, #84]	; 0x54
   c527e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5280:	2b00      	cmp	r3, #0
   c5282:	d0f0      	beq.n	c5266 <__gethex+0x386>
   c5284:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c5288:	f104 0314 	add.w	r3, r4, #20
   c528c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c5290:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c5294:	f04f 0c00 	mov.w	ip, #0
   c5298:	4618      	mov	r0, r3
   c529a:	f853 2b04 	ldr.w	r2, [r3], #4
   c529e:	f1b2 3fff 	cmp.w	r2, #4294967295
   c52a2:	d01c      	beq.n	c52de <__gethex+0x3fe>
   c52a4:	3201      	adds	r2, #1
   c52a6:	6002      	str	r2, [r0, #0]
   c52a8:	2f02      	cmp	r7, #2
   c52aa:	f104 0314 	add.w	r3, r4, #20
   c52ae:	d13f      	bne.n	c5330 <__gethex+0x450>
   c52b0:	f8d8 2000 	ldr.w	r2, [r8]
   c52b4:	3a01      	subs	r2, #1
   c52b6:	42b2      	cmp	r2, r6
   c52b8:	d10a      	bne.n	c52d0 <__gethex+0x3f0>
   c52ba:	1171      	asrs	r1, r6, #5
   c52bc:	2201      	movs	r2, #1
   c52be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c52c2:	f006 061f 	and.w	r6, r6, #31
   c52c6:	fa02 f606 	lsl.w	r6, r2, r6
   c52ca:	421e      	tst	r6, r3
   c52cc:	bf18      	it	ne
   c52ce:	4617      	movne	r7, r2
   c52d0:	f047 0720 	orr.w	r7, r7, #32
   c52d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c52d6:	601c      	str	r4, [r3, #0]
   c52d8:	9b04      	ldr	r3, [sp, #16]
   c52da:	601d      	str	r5, [r3, #0]
   c52dc:	e695      	b.n	c500a <__gethex+0x12a>
   c52de:	4299      	cmp	r1, r3
   c52e0:	f843 cc04 	str.w	ip, [r3, #-4]
   c52e4:	d8d8      	bhi.n	c5298 <__gethex+0x3b8>
   c52e6:	68a3      	ldr	r3, [r4, #8]
   c52e8:	459b      	cmp	fp, r3
   c52ea:	db19      	blt.n	c5320 <__gethex+0x440>
   c52ec:	6861      	ldr	r1, [r4, #4]
   c52ee:	ee18 0a10 	vmov	r0, s16
   c52f2:	3101      	adds	r1, #1
   c52f4:	f000 f912 	bl	c551c <_Balloc>
   c52f8:	4681      	mov	r9, r0
   c52fa:	b918      	cbnz	r0, c5304 <__gethex+0x424>
   c52fc:	4b1a      	ldr	r3, [pc, #104]	; (c5368 <__gethex+0x488>)
   c52fe:	4602      	mov	r2, r0
   c5300:	2184      	movs	r1, #132	; 0x84
   c5302:	e6a8      	b.n	c5056 <__gethex+0x176>
   c5304:	6922      	ldr	r2, [r4, #16]
   c5306:	3202      	adds	r2, #2
   c5308:	f104 010c 	add.w	r1, r4, #12
   c530c:	0092      	lsls	r2, r2, #2
   c530e:	300c      	adds	r0, #12
   c5310:	f7fe fd36 	bl	c3d80 <memcpy>
   c5314:	4621      	mov	r1, r4
   c5316:	ee18 0a10 	vmov	r0, s16
   c531a:	f000 f93f 	bl	c559c <_Bfree>
   c531e:	464c      	mov	r4, r9
   c5320:	6923      	ldr	r3, [r4, #16]
   c5322:	1c5a      	adds	r2, r3, #1
   c5324:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c5328:	6122      	str	r2, [r4, #16]
   c532a:	2201      	movs	r2, #1
   c532c:	615a      	str	r2, [r3, #20]
   c532e:	e7bb      	b.n	c52a8 <__gethex+0x3c8>
   c5330:	6922      	ldr	r2, [r4, #16]
   c5332:	455a      	cmp	r2, fp
   c5334:	dd0b      	ble.n	c534e <__gethex+0x46e>
   c5336:	2101      	movs	r1, #1
   c5338:	4620      	mov	r0, r4
   c533a:	f7ff fd69 	bl	c4e10 <rshift>
   c533e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c5342:	3501      	adds	r5, #1
   c5344:	42ab      	cmp	r3, r5
   c5346:	f6ff aed0 	blt.w	c50ea <__gethex+0x20a>
   c534a:	2701      	movs	r7, #1
   c534c:	e7c0      	b.n	c52d0 <__gethex+0x3f0>
   c534e:	f016 061f 	ands.w	r6, r6, #31
   c5352:	d0fa      	beq.n	c534a <__gethex+0x46a>
   c5354:	4453      	add	r3, sl
   c5356:	f1c6 0620 	rsb	r6, r6, #32
   c535a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c535e:	f000 f9cf 	bl	c5700 <__hi0bits>
   c5362:	42b0      	cmp	r0, r6
   c5364:	dbe7      	blt.n	c5336 <__gethex+0x456>
   c5366:	e7f0      	b.n	c534a <__gethex+0x46a>
   c5368:	000c7f71 	.word	0x000c7f71

000c536c <L_shift>:
   c536c:	f1c2 0208 	rsb	r2, r2, #8
   c5370:	0092      	lsls	r2, r2, #2
   c5372:	b570      	push	{r4, r5, r6, lr}
   c5374:	f1c2 0620 	rsb	r6, r2, #32
   c5378:	6843      	ldr	r3, [r0, #4]
   c537a:	6804      	ldr	r4, [r0, #0]
   c537c:	fa03 f506 	lsl.w	r5, r3, r6
   c5380:	432c      	orrs	r4, r5
   c5382:	40d3      	lsrs	r3, r2
   c5384:	6004      	str	r4, [r0, #0]
   c5386:	f840 3f04 	str.w	r3, [r0, #4]!
   c538a:	4288      	cmp	r0, r1
   c538c:	d3f4      	bcc.n	c5378 <L_shift+0xc>
   c538e:	bd70      	pop	{r4, r5, r6, pc}

000c5390 <__match>:
   c5390:	b530      	push	{r4, r5, lr}
   c5392:	6803      	ldr	r3, [r0, #0]
   c5394:	3301      	adds	r3, #1
   c5396:	f811 4b01 	ldrb.w	r4, [r1], #1
   c539a:	b914      	cbnz	r4, c53a2 <__match+0x12>
   c539c:	6003      	str	r3, [r0, #0]
   c539e:	2001      	movs	r0, #1
   c53a0:	bd30      	pop	{r4, r5, pc}
   c53a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   c53a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c53aa:	2d19      	cmp	r5, #25
   c53ac:	bf98      	it	ls
   c53ae:	3220      	addls	r2, #32
   c53b0:	42a2      	cmp	r2, r4
   c53b2:	d0f0      	beq.n	c5396 <__match+0x6>
   c53b4:	2000      	movs	r0, #0
   c53b6:	e7f3      	b.n	c53a0 <__match+0x10>

000c53b8 <__hexnan>:
   c53b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c53bc:	680b      	ldr	r3, [r1, #0]
   c53be:	115e      	asrs	r6, r3, #5
   c53c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c53c4:	f013 031f 	ands.w	r3, r3, #31
   c53c8:	b087      	sub	sp, #28
   c53ca:	bf18      	it	ne
   c53cc:	3604      	addne	r6, #4
   c53ce:	2500      	movs	r5, #0
   c53d0:	1f37      	subs	r7, r6, #4
   c53d2:	4690      	mov	r8, r2
   c53d4:	6802      	ldr	r2, [r0, #0]
   c53d6:	9301      	str	r3, [sp, #4]
   c53d8:	4682      	mov	sl, r0
   c53da:	f846 5c04 	str.w	r5, [r6, #-4]
   c53de:	46b9      	mov	r9, r7
   c53e0:	463c      	mov	r4, r7
   c53e2:	9502      	str	r5, [sp, #8]
   c53e4:	46ab      	mov	fp, r5
   c53e6:	7851      	ldrb	r1, [r2, #1]
   c53e8:	1c53      	adds	r3, r2, #1
   c53ea:	9303      	str	r3, [sp, #12]
   c53ec:	b341      	cbz	r1, c5440 <__hexnan+0x88>
   c53ee:	4608      	mov	r0, r1
   c53f0:	9205      	str	r2, [sp, #20]
   c53f2:	9104      	str	r1, [sp, #16]
   c53f4:	f7ff fd5e 	bl	c4eb4 <__hexdig_fun>
   c53f8:	2800      	cmp	r0, #0
   c53fa:	d14f      	bne.n	c549c <__hexnan+0xe4>
   c53fc:	9904      	ldr	r1, [sp, #16]
   c53fe:	9a05      	ldr	r2, [sp, #20]
   c5400:	2920      	cmp	r1, #32
   c5402:	d818      	bhi.n	c5436 <__hexnan+0x7e>
   c5404:	9b02      	ldr	r3, [sp, #8]
   c5406:	459b      	cmp	fp, r3
   c5408:	dd13      	ble.n	c5432 <__hexnan+0x7a>
   c540a:	454c      	cmp	r4, r9
   c540c:	d206      	bcs.n	c541c <__hexnan+0x64>
   c540e:	2d07      	cmp	r5, #7
   c5410:	dc04      	bgt.n	c541c <__hexnan+0x64>
   c5412:	462a      	mov	r2, r5
   c5414:	4649      	mov	r1, r9
   c5416:	4620      	mov	r0, r4
   c5418:	f7ff ffa8 	bl	c536c <L_shift>
   c541c:	4544      	cmp	r4, r8
   c541e:	d950      	bls.n	c54c2 <__hexnan+0x10a>
   c5420:	2300      	movs	r3, #0
   c5422:	f1a4 0904 	sub.w	r9, r4, #4
   c5426:	f844 3c04 	str.w	r3, [r4, #-4]
   c542a:	f8cd b008 	str.w	fp, [sp, #8]
   c542e:	464c      	mov	r4, r9
   c5430:	461d      	mov	r5, r3
   c5432:	9a03      	ldr	r2, [sp, #12]
   c5434:	e7d7      	b.n	c53e6 <__hexnan+0x2e>
   c5436:	2929      	cmp	r1, #41	; 0x29
   c5438:	d156      	bne.n	c54e8 <__hexnan+0x130>
   c543a:	3202      	adds	r2, #2
   c543c:	f8ca 2000 	str.w	r2, [sl]
   c5440:	f1bb 0f00 	cmp.w	fp, #0
   c5444:	d050      	beq.n	c54e8 <__hexnan+0x130>
   c5446:	454c      	cmp	r4, r9
   c5448:	d206      	bcs.n	c5458 <__hexnan+0xa0>
   c544a:	2d07      	cmp	r5, #7
   c544c:	dc04      	bgt.n	c5458 <__hexnan+0xa0>
   c544e:	462a      	mov	r2, r5
   c5450:	4649      	mov	r1, r9
   c5452:	4620      	mov	r0, r4
   c5454:	f7ff ff8a 	bl	c536c <L_shift>
   c5458:	4544      	cmp	r4, r8
   c545a:	d934      	bls.n	c54c6 <__hexnan+0x10e>
   c545c:	f1a8 0204 	sub.w	r2, r8, #4
   c5460:	4623      	mov	r3, r4
   c5462:	f853 1b04 	ldr.w	r1, [r3], #4
   c5466:	f842 1f04 	str.w	r1, [r2, #4]!
   c546a:	429f      	cmp	r7, r3
   c546c:	d2f9      	bcs.n	c5462 <__hexnan+0xaa>
   c546e:	1b3b      	subs	r3, r7, r4
   c5470:	f023 0303 	bic.w	r3, r3, #3
   c5474:	3304      	adds	r3, #4
   c5476:	3401      	adds	r4, #1
   c5478:	3e03      	subs	r6, #3
   c547a:	42b4      	cmp	r4, r6
   c547c:	bf88      	it	hi
   c547e:	2304      	movhi	r3, #4
   c5480:	4443      	add	r3, r8
   c5482:	2200      	movs	r2, #0
   c5484:	f843 2b04 	str.w	r2, [r3], #4
   c5488:	429f      	cmp	r7, r3
   c548a:	d2fb      	bcs.n	c5484 <__hexnan+0xcc>
   c548c:	683b      	ldr	r3, [r7, #0]
   c548e:	b91b      	cbnz	r3, c5498 <__hexnan+0xe0>
   c5490:	4547      	cmp	r7, r8
   c5492:	d127      	bne.n	c54e4 <__hexnan+0x12c>
   c5494:	2301      	movs	r3, #1
   c5496:	603b      	str	r3, [r7, #0]
   c5498:	2005      	movs	r0, #5
   c549a:	e026      	b.n	c54ea <__hexnan+0x132>
   c549c:	3501      	adds	r5, #1
   c549e:	2d08      	cmp	r5, #8
   c54a0:	f10b 0b01 	add.w	fp, fp, #1
   c54a4:	dd06      	ble.n	c54b4 <__hexnan+0xfc>
   c54a6:	4544      	cmp	r4, r8
   c54a8:	d9c3      	bls.n	c5432 <__hexnan+0x7a>
   c54aa:	2300      	movs	r3, #0
   c54ac:	f844 3c04 	str.w	r3, [r4, #-4]
   c54b0:	2501      	movs	r5, #1
   c54b2:	3c04      	subs	r4, #4
   c54b4:	6822      	ldr	r2, [r4, #0]
   c54b6:	f000 000f 	and.w	r0, r0, #15
   c54ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c54be:	6022      	str	r2, [r4, #0]
   c54c0:	e7b7      	b.n	c5432 <__hexnan+0x7a>
   c54c2:	2508      	movs	r5, #8
   c54c4:	e7b5      	b.n	c5432 <__hexnan+0x7a>
   c54c6:	9b01      	ldr	r3, [sp, #4]
   c54c8:	2b00      	cmp	r3, #0
   c54ca:	d0df      	beq.n	c548c <__hexnan+0xd4>
   c54cc:	f04f 32ff 	mov.w	r2, #4294967295
   c54d0:	f1c3 0320 	rsb	r3, r3, #32
   c54d4:	fa22 f303 	lsr.w	r3, r2, r3
   c54d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c54dc:	401a      	ands	r2, r3
   c54de:	f846 2c04 	str.w	r2, [r6, #-4]
   c54e2:	e7d3      	b.n	c548c <__hexnan+0xd4>
   c54e4:	3f04      	subs	r7, #4
   c54e6:	e7d1      	b.n	c548c <__hexnan+0xd4>
   c54e8:	2004      	movs	r0, #4
   c54ea:	b007      	add	sp, #28
   c54ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c54f0 <__retarget_lock_acquire_recursive>:
   c54f0:	4770      	bx	lr

000c54f2 <__retarget_lock_release>:
   c54f2:	4770      	bx	lr

000c54f4 <__retarget_lock_release_recursive>:
   c54f4:	4770      	bx	lr

000c54f6 <__ascii_mbtowc>:
   c54f6:	b082      	sub	sp, #8
   c54f8:	b901      	cbnz	r1, c54fc <__ascii_mbtowc+0x6>
   c54fa:	a901      	add	r1, sp, #4
   c54fc:	b142      	cbz	r2, c5510 <__ascii_mbtowc+0x1a>
   c54fe:	b14b      	cbz	r3, c5514 <__ascii_mbtowc+0x1e>
   c5500:	7813      	ldrb	r3, [r2, #0]
   c5502:	600b      	str	r3, [r1, #0]
   c5504:	7812      	ldrb	r2, [r2, #0]
   c5506:	1e10      	subs	r0, r2, #0
   c5508:	bf18      	it	ne
   c550a:	2001      	movne	r0, #1
   c550c:	b002      	add	sp, #8
   c550e:	4770      	bx	lr
   c5510:	4610      	mov	r0, r2
   c5512:	e7fb      	b.n	c550c <__ascii_mbtowc+0x16>
   c5514:	f06f 0001 	mvn.w	r0, #1
   c5518:	e7f8      	b.n	c550c <__ascii_mbtowc+0x16>
	...

000c551c <_Balloc>:
   c551c:	b570      	push	{r4, r5, r6, lr}
   c551e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5520:	4604      	mov	r4, r0
   c5522:	460d      	mov	r5, r1
   c5524:	b976      	cbnz	r6, c5544 <_Balloc+0x28>
   c5526:	2010      	movs	r0, #16
   c5528:	f7f8 fb16 	bl	bdb58 <malloc>
   c552c:	4602      	mov	r2, r0
   c552e:	6260      	str	r0, [r4, #36]	; 0x24
   c5530:	b920      	cbnz	r0, c553c <_Balloc+0x20>
   c5532:	4b18      	ldr	r3, [pc, #96]	; (c5594 <_Balloc+0x78>)
   c5534:	4818      	ldr	r0, [pc, #96]	; (c5598 <_Balloc+0x7c>)
   c5536:	2166      	movs	r1, #102	; 0x66
   c5538:	f7f8 fb5e 	bl	bdbf8 <__assert_func>
   c553c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5540:	6006      	str	r6, [r0, #0]
   c5542:	60c6      	str	r6, [r0, #12]
   c5544:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c5546:	68f3      	ldr	r3, [r6, #12]
   c5548:	b183      	cbz	r3, c556c <_Balloc+0x50>
   c554a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c554c:	68db      	ldr	r3, [r3, #12]
   c554e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c5552:	b9b8      	cbnz	r0, c5584 <_Balloc+0x68>
   c5554:	2101      	movs	r1, #1
   c5556:	fa01 f605 	lsl.w	r6, r1, r5
   c555a:	1d72      	adds	r2, r6, #5
   c555c:	0092      	lsls	r2, r2, #2
   c555e:	4620      	mov	r0, r4
   c5560:	f000 fc9d 	bl	c5e9e <_calloc_r>
   c5564:	b160      	cbz	r0, c5580 <_Balloc+0x64>
   c5566:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c556a:	e00e      	b.n	c558a <_Balloc+0x6e>
   c556c:	2221      	movs	r2, #33	; 0x21
   c556e:	2104      	movs	r1, #4
   c5570:	4620      	mov	r0, r4
   c5572:	f000 fc94 	bl	c5e9e <_calloc_r>
   c5576:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5578:	60f0      	str	r0, [r6, #12]
   c557a:	68db      	ldr	r3, [r3, #12]
   c557c:	2b00      	cmp	r3, #0
   c557e:	d1e4      	bne.n	c554a <_Balloc+0x2e>
   c5580:	2000      	movs	r0, #0
   c5582:	bd70      	pop	{r4, r5, r6, pc}
   c5584:	6802      	ldr	r2, [r0, #0]
   c5586:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c558a:	2300      	movs	r3, #0
   c558c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c5590:	e7f7      	b.n	c5582 <_Balloc+0x66>
   c5592:	bf00      	nop
   c5594:	000c7d80 	.word	0x000c7d80
   c5598:	000c801a 	.word	0x000c801a

000c559c <_Bfree>:
   c559c:	b570      	push	{r4, r5, r6, lr}
   c559e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c55a0:	4605      	mov	r5, r0
   c55a2:	460c      	mov	r4, r1
   c55a4:	b976      	cbnz	r6, c55c4 <_Bfree+0x28>
   c55a6:	2010      	movs	r0, #16
   c55a8:	f7f8 fad6 	bl	bdb58 <malloc>
   c55ac:	4602      	mov	r2, r0
   c55ae:	6268      	str	r0, [r5, #36]	; 0x24
   c55b0:	b920      	cbnz	r0, c55bc <_Bfree+0x20>
   c55b2:	4b09      	ldr	r3, [pc, #36]	; (c55d8 <_Bfree+0x3c>)
   c55b4:	4809      	ldr	r0, [pc, #36]	; (c55dc <_Bfree+0x40>)
   c55b6:	218a      	movs	r1, #138	; 0x8a
   c55b8:	f7f8 fb1e 	bl	bdbf8 <__assert_func>
   c55bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c55c0:	6006      	str	r6, [r0, #0]
   c55c2:	60c6      	str	r6, [r0, #12]
   c55c4:	b13c      	cbz	r4, c55d6 <_Bfree+0x3a>
   c55c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c55c8:	6862      	ldr	r2, [r4, #4]
   c55ca:	68db      	ldr	r3, [r3, #12]
   c55cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c55d0:	6021      	str	r1, [r4, #0]
   c55d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c55d6:	bd70      	pop	{r4, r5, r6, pc}
   c55d8:	000c7d80 	.word	0x000c7d80
   c55dc:	000c801a 	.word	0x000c801a

000c55e0 <__multadd>:
   c55e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c55e4:	690d      	ldr	r5, [r1, #16]
   c55e6:	4607      	mov	r7, r0
   c55e8:	460c      	mov	r4, r1
   c55ea:	461e      	mov	r6, r3
   c55ec:	f101 0c14 	add.w	ip, r1, #20
   c55f0:	2000      	movs	r0, #0
   c55f2:	f8dc 3000 	ldr.w	r3, [ip]
   c55f6:	b299      	uxth	r1, r3
   c55f8:	fb02 6101 	mla	r1, r2, r1, r6
   c55fc:	0c1e      	lsrs	r6, r3, #16
   c55fe:	0c0b      	lsrs	r3, r1, #16
   c5600:	fb02 3306 	mla	r3, r2, r6, r3
   c5604:	b289      	uxth	r1, r1
   c5606:	3001      	adds	r0, #1
   c5608:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c560c:	4285      	cmp	r5, r0
   c560e:	f84c 1b04 	str.w	r1, [ip], #4
   c5612:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c5616:	dcec      	bgt.n	c55f2 <__multadd+0x12>
   c5618:	b30e      	cbz	r6, c565e <__multadd+0x7e>
   c561a:	68a3      	ldr	r3, [r4, #8]
   c561c:	42ab      	cmp	r3, r5
   c561e:	dc19      	bgt.n	c5654 <__multadd+0x74>
   c5620:	6861      	ldr	r1, [r4, #4]
   c5622:	4638      	mov	r0, r7
   c5624:	3101      	adds	r1, #1
   c5626:	f7ff ff79 	bl	c551c <_Balloc>
   c562a:	4680      	mov	r8, r0
   c562c:	b928      	cbnz	r0, c563a <__multadd+0x5a>
   c562e:	4602      	mov	r2, r0
   c5630:	4b0c      	ldr	r3, [pc, #48]	; (c5664 <__multadd+0x84>)
   c5632:	480d      	ldr	r0, [pc, #52]	; (c5668 <__multadd+0x88>)
   c5634:	21b5      	movs	r1, #181	; 0xb5
   c5636:	f7f8 fadf 	bl	bdbf8 <__assert_func>
   c563a:	6922      	ldr	r2, [r4, #16]
   c563c:	3202      	adds	r2, #2
   c563e:	f104 010c 	add.w	r1, r4, #12
   c5642:	0092      	lsls	r2, r2, #2
   c5644:	300c      	adds	r0, #12
   c5646:	f7fe fb9b 	bl	c3d80 <memcpy>
   c564a:	4621      	mov	r1, r4
   c564c:	4638      	mov	r0, r7
   c564e:	f7ff ffa5 	bl	c559c <_Bfree>
   c5652:	4644      	mov	r4, r8
   c5654:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c5658:	3501      	adds	r5, #1
   c565a:	615e      	str	r6, [r3, #20]
   c565c:	6125      	str	r5, [r4, #16]
   c565e:	4620      	mov	r0, r4
   c5660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c5664:	000c7f71 	.word	0x000c7f71
   c5668:	000c801a 	.word	0x000c801a

000c566c <__s2b>:
   c566c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5670:	460c      	mov	r4, r1
   c5672:	4615      	mov	r5, r2
   c5674:	461f      	mov	r7, r3
   c5676:	2209      	movs	r2, #9
   c5678:	3308      	adds	r3, #8
   c567a:	4606      	mov	r6, r0
   c567c:	fb93 f3f2 	sdiv	r3, r3, r2
   c5680:	2100      	movs	r1, #0
   c5682:	2201      	movs	r2, #1
   c5684:	429a      	cmp	r2, r3
   c5686:	db09      	blt.n	c569c <__s2b+0x30>
   c5688:	4630      	mov	r0, r6
   c568a:	f7ff ff47 	bl	c551c <_Balloc>
   c568e:	b940      	cbnz	r0, c56a2 <__s2b+0x36>
   c5690:	4602      	mov	r2, r0
   c5692:	4b19      	ldr	r3, [pc, #100]	; (c56f8 <__s2b+0x8c>)
   c5694:	4819      	ldr	r0, [pc, #100]	; (c56fc <__s2b+0x90>)
   c5696:	21ce      	movs	r1, #206	; 0xce
   c5698:	f7f8 faae 	bl	bdbf8 <__assert_func>
   c569c:	0052      	lsls	r2, r2, #1
   c569e:	3101      	adds	r1, #1
   c56a0:	e7f0      	b.n	c5684 <__s2b+0x18>
   c56a2:	9b08      	ldr	r3, [sp, #32]
   c56a4:	6143      	str	r3, [r0, #20]
   c56a6:	2d09      	cmp	r5, #9
   c56a8:	f04f 0301 	mov.w	r3, #1
   c56ac:	6103      	str	r3, [r0, #16]
   c56ae:	dd16      	ble.n	c56de <__s2b+0x72>
   c56b0:	f104 0909 	add.w	r9, r4, #9
   c56b4:	46c8      	mov	r8, r9
   c56b6:	442c      	add	r4, r5
   c56b8:	f818 3b01 	ldrb.w	r3, [r8], #1
   c56bc:	4601      	mov	r1, r0
   c56be:	3b30      	subs	r3, #48	; 0x30
   c56c0:	220a      	movs	r2, #10
   c56c2:	4630      	mov	r0, r6
   c56c4:	f7ff ff8c 	bl	c55e0 <__multadd>
   c56c8:	45a0      	cmp	r8, r4
   c56ca:	d1f5      	bne.n	c56b8 <__s2b+0x4c>
   c56cc:	f1a5 0408 	sub.w	r4, r5, #8
   c56d0:	444c      	add	r4, r9
   c56d2:	1b2d      	subs	r5, r5, r4
   c56d4:	1963      	adds	r3, r4, r5
   c56d6:	42bb      	cmp	r3, r7
   c56d8:	db04      	blt.n	c56e4 <__s2b+0x78>
   c56da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c56de:	340a      	adds	r4, #10
   c56e0:	2509      	movs	r5, #9
   c56e2:	e7f6      	b.n	c56d2 <__s2b+0x66>
   c56e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   c56e8:	4601      	mov	r1, r0
   c56ea:	3b30      	subs	r3, #48	; 0x30
   c56ec:	220a      	movs	r2, #10
   c56ee:	4630      	mov	r0, r6
   c56f0:	f7ff ff76 	bl	c55e0 <__multadd>
   c56f4:	e7ee      	b.n	c56d4 <__s2b+0x68>
   c56f6:	bf00      	nop
   c56f8:	000c7f71 	.word	0x000c7f71
   c56fc:	000c801a 	.word	0x000c801a

000c5700 <__hi0bits>:
   c5700:	0c03      	lsrs	r3, r0, #16
   c5702:	041b      	lsls	r3, r3, #16
   c5704:	b9d3      	cbnz	r3, c573c <__hi0bits+0x3c>
   c5706:	0400      	lsls	r0, r0, #16
   c5708:	2310      	movs	r3, #16
   c570a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c570e:	bf04      	itt	eq
   c5710:	0200      	lsleq	r0, r0, #8
   c5712:	3308      	addeq	r3, #8
   c5714:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c5718:	bf04      	itt	eq
   c571a:	0100      	lsleq	r0, r0, #4
   c571c:	3304      	addeq	r3, #4
   c571e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c5722:	bf04      	itt	eq
   c5724:	0080      	lsleq	r0, r0, #2
   c5726:	3302      	addeq	r3, #2
   c5728:	2800      	cmp	r0, #0
   c572a:	db05      	blt.n	c5738 <__hi0bits+0x38>
   c572c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c5730:	f103 0301 	add.w	r3, r3, #1
   c5734:	bf08      	it	eq
   c5736:	2320      	moveq	r3, #32
   c5738:	4618      	mov	r0, r3
   c573a:	4770      	bx	lr
   c573c:	2300      	movs	r3, #0
   c573e:	e7e4      	b.n	c570a <__hi0bits+0xa>

000c5740 <__lo0bits>:
   c5740:	6803      	ldr	r3, [r0, #0]
   c5742:	f013 0207 	ands.w	r2, r3, #7
   c5746:	4601      	mov	r1, r0
   c5748:	d00b      	beq.n	c5762 <__lo0bits+0x22>
   c574a:	07da      	lsls	r2, r3, #31
   c574c:	d423      	bmi.n	c5796 <__lo0bits+0x56>
   c574e:	0798      	lsls	r0, r3, #30
   c5750:	bf49      	itett	mi
   c5752:	085b      	lsrmi	r3, r3, #1
   c5754:	089b      	lsrpl	r3, r3, #2
   c5756:	2001      	movmi	r0, #1
   c5758:	600b      	strmi	r3, [r1, #0]
   c575a:	bf5c      	itt	pl
   c575c:	600b      	strpl	r3, [r1, #0]
   c575e:	2002      	movpl	r0, #2
   c5760:	4770      	bx	lr
   c5762:	b298      	uxth	r0, r3
   c5764:	b9a8      	cbnz	r0, c5792 <__lo0bits+0x52>
   c5766:	0c1b      	lsrs	r3, r3, #16
   c5768:	2010      	movs	r0, #16
   c576a:	b2da      	uxtb	r2, r3
   c576c:	b90a      	cbnz	r2, c5772 <__lo0bits+0x32>
   c576e:	3008      	adds	r0, #8
   c5770:	0a1b      	lsrs	r3, r3, #8
   c5772:	071a      	lsls	r2, r3, #28
   c5774:	bf04      	itt	eq
   c5776:	091b      	lsreq	r3, r3, #4
   c5778:	3004      	addeq	r0, #4
   c577a:	079a      	lsls	r2, r3, #30
   c577c:	bf04      	itt	eq
   c577e:	089b      	lsreq	r3, r3, #2
   c5780:	3002      	addeq	r0, #2
   c5782:	07da      	lsls	r2, r3, #31
   c5784:	d403      	bmi.n	c578e <__lo0bits+0x4e>
   c5786:	085b      	lsrs	r3, r3, #1
   c5788:	f100 0001 	add.w	r0, r0, #1
   c578c:	d005      	beq.n	c579a <__lo0bits+0x5a>
   c578e:	600b      	str	r3, [r1, #0]
   c5790:	4770      	bx	lr
   c5792:	4610      	mov	r0, r2
   c5794:	e7e9      	b.n	c576a <__lo0bits+0x2a>
   c5796:	2000      	movs	r0, #0
   c5798:	4770      	bx	lr
   c579a:	2020      	movs	r0, #32
   c579c:	4770      	bx	lr
	...

000c57a0 <__i2b>:
   c57a0:	b510      	push	{r4, lr}
   c57a2:	460c      	mov	r4, r1
   c57a4:	2101      	movs	r1, #1
   c57a6:	f7ff feb9 	bl	c551c <_Balloc>
   c57aa:	4602      	mov	r2, r0
   c57ac:	b928      	cbnz	r0, c57ba <__i2b+0x1a>
   c57ae:	4b05      	ldr	r3, [pc, #20]	; (c57c4 <__i2b+0x24>)
   c57b0:	4805      	ldr	r0, [pc, #20]	; (c57c8 <__i2b+0x28>)
   c57b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c57b6:	f7f8 fa1f 	bl	bdbf8 <__assert_func>
   c57ba:	2301      	movs	r3, #1
   c57bc:	6144      	str	r4, [r0, #20]
   c57be:	6103      	str	r3, [r0, #16]
   c57c0:	bd10      	pop	{r4, pc}
   c57c2:	bf00      	nop
   c57c4:	000c7f71 	.word	0x000c7f71
   c57c8:	000c801a 	.word	0x000c801a

000c57cc <__multiply>:
   c57cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c57d0:	4691      	mov	r9, r2
   c57d2:	690a      	ldr	r2, [r1, #16]
   c57d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c57d8:	429a      	cmp	r2, r3
   c57da:	bfb8      	it	lt
   c57dc:	460b      	movlt	r3, r1
   c57de:	460c      	mov	r4, r1
   c57e0:	bfbc      	itt	lt
   c57e2:	464c      	movlt	r4, r9
   c57e4:	4699      	movlt	r9, r3
   c57e6:	6927      	ldr	r7, [r4, #16]
   c57e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c57ec:	68a3      	ldr	r3, [r4, #8]
   c57ee:	6861      	ldr	r1, [r4, #4]
   c57f0:	eb07 060a 	add.w	r6, r7, sl
   c57f4:	42b3      	cmp	r3, r6
   c57f6:	b085      	sub	sp, #20
   c57f8:	bfb8      	it	lt
   c57fa:	3101      	addlt	r1, #1
   c57fc:	f7ff fe8e 	bl	c551c <_Balloc>
   c5800:	b930      	cbnz	r0, c5810 <__multiply+0x44>
   c5802:	4602      	mov	r2, r0
   c5804:	4b44      	ldr	r3, [pc, #272]	; (c5918 <__multiply+0x14c>)
   c5806:	4845      	ldr	r0, [pc, #276]	; (c591c <__multiply+0x150>)
   c5808:	f240 115d 	movw	r1, #349	; 0x15d
   c580c:	f7f8 f9f4 	bl	bdbf8 <__assert_func>
   c5810:	f100 0514 	add.w	r5, r0, #20
   c5814:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c5818:	462b      	mov	r3, r5
   c581a:	2200      	movs	r2, #0
   c581c:	4543      	cmp	r3, r8
   c581e:	d321      	bcc.n	c5864 <__multiply+0x98>
   c5820:	f104 0314 	add.w	r3, r4, #20
   c5824:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c5828:	f109 0314 	add.w	r3, r9, #20
   c582c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c5830:	9202      	str	r2, [sp, #8]
   c5832:	1b3a      	subs	r2, r7, r4
   c5834:	3a15      	subs	r2, #21
   c5836:	f022 0203 	bic.w	r2, r2, #3
   c583a:	3204      	adds	r2, #4
   c583c:	f104 0115 	add.w	r1, r4, #21
   c5840:	428f      	cmp	r7, r1
   c5842:	bf38      	it	cc
   c5844:	2204      	movcc	r2, #4
   c5846:	9201      	str	r2, [sp, #4]
   c5848:	9a02      	ldr	r2, [sp, #8]
   c584a:	9303      	str	r3, [sp, #12]
   c584c:	429a      	cmp	r2, r3
   c584e:	d80c      	bhi.n	c586a <__multiply+0x9e>
   c5850:	2e00      	cmp	r6, #0
   c5852:	dd03      	ble.n	c585c <__multiply+0x90>
   c5854:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c5858:	2b00      	cmp	r3, #0
   c585a:	d05a      	beq.n	c5912 <__multiply+0x146>
   c585c:	6106      	str	r6, [r0, #16]
   c585e:	b005      	add	sp, #20
   c5860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5864:	f843 2b04 	str.w	r2, [r3], #4
   c5868:	e7d8      	b.n	c581c <__multiply+0x50>
   c586a:	f8b3 a000 	ldrh.w	sl, [r3]
   c586e:	f1ba 0f00 	cmp.w	sl, #0
   c5872:	d024      	beq.n	c58be <__multiply+0xf2>
   c5874:	f104 0e14 	add.w	lr, r4, #20
   c5878:	46a9      	mov	r9, r5
   c587a:	f04f 0c00 	mov.w	ip, #0
   c587e:	f85e 2b04 	ldr.w	r2, [lr], #4
   c5882:	f8d9 1000 	ldr.w	r1, [r9]
   c5886:	fa1f fb82 	uxth.w	fp, r2
   c588a:	b289      	uxth	r1, r1
   c588c:	fb0a 110b 	mla	r1, sl, fp, r1
   c5890:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c5894:	f8d9 2000 	ldr.w	r2, [r9]
   c5898:	4461      	add	r1, ip
   c589a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c589e:	fb0a c20b 	mla	r2, sl, fp, ip
   c58a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c58a6:	b289      	uxth	r1, r1
   c58a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c58ac:	4577      	cmp	r7, lr
   c58ae:	f849 1b04 	str.w	r1, [r9], #4
   c58b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c58b6:	d8e2      	bhi.n	c587e <__multiply+0xb2>
   c58b8:	9a01      	ldr	r2, [sp, #4]
   c58ba:	f845 c002 	str.w	ip, [r5, r2]
   c58be:	9a03      	ldr	r2, [sp, #12]
   c58c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c58c4:	3304      	adds	r3, #4
   c58c6:	f1b9 0f00 	cmp.w	r9, #0
   c58ca:	d020      	beq.n	c590e <__multiply+0x142>
   c58cc:	6829      	ldr	r1, [r5, #0]
   c58ce:	f104 0c14 	add.w	ip, r4, #20
   c58d2:	46ae      	mov	lr, r5
   c58d4:	f04f 0a00 	mov.w	sl, #0
   c58d8:	f8bc b000 	ldrh.w	fp, [ip]
   c58dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c58e0:	fb09 220b 	mla	r2, r9, fp, r2
   c58e4:	4492      	add	sl, r2
   c58e6:	b289      	uxth	r1, r1
   c58e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c58ec:	f84e 1b04 	str.w	r1, [lr], #4
   c58f0:	f85c 2b04 	ldr.w	r2, [ip], #4
   c58f4:	f8be 1000 	ldrh.w	r1, [lr]
   c58f8:	0c12      	lsrs	r2, r2, #16
   c58fa:	fb09 1102 	mla	r1, r9, r2, r1
   c58fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c5902:	4567      	cmp	r7, ip
   c5904:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c5908:	d8e6      	bhi.n	c58d8 <__multiply+0x10c>
   c590a:	9a01      	ldr	r2, [sp, #4]
   c590c:	50a9      	str	r1, [r5, r2]
   c590e:	3504      	adds	r5, #4
   c5910:	e79a      	b.n	c5848 <__multiply+0x7c>
   c5912:	3e01      	subs	r6, #1
   c5914:	e79c      	b.n	c5850 <__multiply+0x84>
   c5916:	bf00      	nop
   c5918:	000c7f71 	.word	0x000c7f71
   c591c:	000c801a 	.word	0x000c801a

000c5920 <__pow5mult>:
   c5920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5924:	4615      	mov	r5, r2
   c5926:	f012 0203 	ands.w	r2, r2, #3
   c592a:	4606      	mov	r6, r0
   c592c:	460f      	mov	r7, r1
   c592e:	d007      	beq.n	c5940 <__pow5mult+0x20>
   c5930:	4c25      	ldr	r4, [pc, #148]	; (c59c8 <__pow5mult+0xa8>)
   c5932:	3a01      	subs	r2, #1
   c5934:	2300      	movs	r3, #0
   c5936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c593a:	f7ff fe51 	bl	c55e0 <__multadd>
   c593e:	4607      	mov	r7, r0
   c5940:	10ad      	asrs	r5, r5, #2
   c5942:	d03d      	beq.n	c59c0 <__pow5mult+0xa0>
   c5944:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c5946:	b97c      	cbnz	r4, c5968 <__pow5mult+0x48>
   c5948:	2010      	movs	r0, #16
   c594a:	f7f8 f905 	bl	bdb58 <malloc>
   c594e:	4602      	mov	r2, r0
   c5950:	6270      	str	r0, [r6, #36]	; 0x24
   c5952:	b928      	cbnz	r0, c5960 <__pow5mult+0x40>
   c5954:	4b1d      	ldr	r3, [pc, #116]	; (c59cc <__pow5mult+0xac>)
   c5956:	481e      	ldr	r0, [pc, #120]	; (c59d0 <__pow5mult+0xb0>)
   c5958:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c595c:	f7f8 f94c 	bl	bdbf8 <__assert_func>
   c5960:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c5964:	6004      	str	r4, [r0, #0]
   c5966:	60c4      	str	r4, [r0, #12]
   c5968:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c596c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c5970:	b94c      	cbnz	r4, c5986 <__pow5mult+0x66>
   c5972:	f240 2171 	movw	r1, #625	; 0x271
   c5976:	4630      	mov	r0, r6
   c5978:	f7ff ff12 	bl	c57a0 <__i2b>
   c597c:	2300      	movs	r3, #0
   c597e:	f8c8 0008 	str.w	r0, [r8, #8]
   c5982:	4604      	mov	r4, r0
   c5984:	6003      	str	r3, [r0, #0]
   c5986:	f04f 0900 	mov.w	r9, #0
   c598a:	07eb      	lsls	r3, r5, #31
   c598c:	d50a      	bpl.n	c59a4 <__pow5mult+0x84>
   c598e:	4639      	mov	r1, r7
   c5990:	4622      	mov	r2, r4
   c5992:	4630      	mov	r0, r6
   c5994:	f7ff ff1a 	bl	c57cc <__multiply>
   c5998:	4639      	mov	r1, r7
   c599a:	4680      	mov	r8, r0
   c599c:	4630      	mov	r0, r6
   c599e:	f7ff fdfd 	bl	c559c <_Bfree>
   c59a2:	4647      	mov	r7, r8
   c59a4:	106d      	asrs	r5, r5, #1
   c59a6:	d00b      	beq.n	c59c0 <__pow5mult+0xa0>
   c59a8:	6820      	ldr	r0, [r4, #0]
   c59aa:	b938      	cbnz	r0, c59bc <__pow5mult+0x9c>
   c59ac:	4622      	mov	r2, r4
   c59ae:	4621      	mov	r1, r4
   c59b0:	4630      	mov	r0, r6
   c59b2:	f7ff ff0b 	bl	c57cc <__multiply>
   c59b6:	6020      	str	r0, [r4, #0]
   c59b8:	f8c0 9000 	str.w	r9, [r0]
   c59bc:	4604      	mov	r4, r0
   c59be:	e7e4      	b.n	c598a <__pow5mult+0x6a>
   c59c0:	4638      	mov	r0, r7
   c59c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c59c6:	bf00      	nop
   c59c8:	000c8188 	.word	0x000c8188
   c59cc:	000c7d80 	.word	0x000c7d80
   c59d0:	000c801a 	.word	0x000c801a

000c59d4 <__lshift>:
   c59d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c59d8:	460c      	mov	r4, r1
   c59da:	6849      	ldr	r1, [r1, #4]
   c59dc:	6923      	ldr	r3, [r4, #16]
   c59de:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c59e2:	68a3      	ldr	r3, [r4, #8]
   c59e4:	4607      	mov	r7, r0
   c59e6:	4691      	mov	r9, r2
   c59e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c59ec:	f108 0601 	add.w	r6, r8, #1
   c59f0:	42b3      	cmp	r3, r6
   c59f2:	db0b      	blt.n	c5a0c <__lshift+0x38>
   c59f4:	4638      	mov	r0, r7
   c59f6:	f7ff fd91 	bl	c551c <_Balloc>
   c59fa:	4605      	mov	r5, r0
   c59fc:	b948      	cbnz	r0, c5a12 <__lshift+0x3e>
   c59fe:	4602      	mov	r2, r0
   c5a00:	4b2a      	ldr	r3, [pc, #168]	; (c5aac <__lshift+0xd8>)
   c5a02:	482b      	ldr	r0, [pc, #172]	; (c5ab0 <__lshift+0xdc>)
   c5a04:	f240 11d9 	movw	r1, #473	; 0x1d9
   c5a08:	f7f8 f8f6 	bl	bdbf8 <__assert_func>
   c5a0c:	3101      	adds	r1, #1
   c5a0e:	005b      	lsls	r3, r3, #1
   c5a10:	e7ee      	b.n	c59f0 <__lshift+0x1c>
   c5a12:	2300      	movs	r3, #0
   c5a14:	f100 0114 	add.w	r1, r0, #20
   c5a18:	f100 0210 	add.w	r2, r0, #16
   c5a1c:	4618      	mov	r0, r3
   c5a1e:	4553      	cmp	r3, sl
   c5a20:	db37      	blt.n	c5a92 <__lshift+0xbe>
   c5a22:	6920      	ldr	r0, [r4, #16]
   c5a24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c5a28:	f104 0314 	add.w	r3, r4, #20
   c5a2c:	f019 091f 	ands.w	r9, r9, #31
   c5a30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c5a34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c5a38:	d02f      	beq.n	c5a9a <__lshift+0xc6>
   c5a3a:	f1c9 0e20 	rsb	lr, r9, #32
   c5a3e:	468a      	mov	sl, r1
   c5a40:	f04f 0c00 	mov.w	ip, #0
   c5a44:	681a      	ldr	r2, [r3, #0]
   c5a46:	fa02 f209 	lsl.w	r2, r2, r9
   c5a4a:	ea42 020c 	orr.w	r2, r2, ip
   c5a4e:	f84a 2b04 	str.w	r2, [sl], #4
   c5a52:	f853 2b04 	ldr.w	r2, [r3], #4
   c5a56:	4298      	cmp	r0, r3
   c5a58:	fa22 fc0e 	lsr.w	ip, r2, lr
   c5a5c:	d8f2      	bhi.n	c5a44 <__lshift+0x70>
   c5a5e:	1b03      	subs	r3, r0, r4
   c5a60:	3b15      	subs	r3, #21
   c5a62:	f023 0303 	bic.w	r3, r3, #3
   c5a66:	3304      	adds	r3, #4
   c5a68:	f104 0215 	add.w	r2, r4, #21
   c5a6c:	4290      	cmp	r0, r2
   c5a6e:	bf38      	it	cc
   c5a70:	2304      	movcc	r3, #4
   c5a72:	f841 c003 	str.w	ip, [r1, r3]
   c5a76:	f1bc 0f00 	cmp.w	ip, #0
   c5a7a:	d001      	beq.n	c5a80 <__lshift+0xac>
   c5a7c:	f108 0602 	add.w	r6, r8, #2
   c5a80:	3e01      	subs	r6, #1
   c5a82:	4638      	mov	r0, r7
   c5a84:	612e      	str	r6, [r5, #16]
   c5a86:	4621      	mov	r1, r4
   c5a88:	f7ff fd88 	bl	c559c <_Bfree>
   c5a8c:	4628      	mov	r0, r5
   c5a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c5a92:	f842 0f04 	str.w	r0, [r2, #4]!
   c5a96:	3301      	adds	r3, #1
   c5a98:	e7c1      	b.n	c5a1e <__lshift+0x4a>
   c5a9a:	3904      	subs	r1, #4
   c5a9c:	f853 2b04 	ldr.w	r2, [r3], #4
   c5aa0:	f841 2f04 	str.w	r2, [r1, #4]!
   c5aa4:	4298      	cmp	r0, r3
   c5aa6:	d8f9      	bhi.n	c5a9c <__lshift+0xc8>
   c5aa8:	e7ea      	b.n	c5a80 <__lshift+0xac>
   c5aaa:	bf00      	nop
   c5aac:	000c7f71 	.word	0x000c7f71
   c5ab0:	000c801a 	.word	0x000c801a

000c5ab4 <__mcmp>:
   c5ab4:	b530      	push	{r4, r5, lr}
   c5ab6:	6902      	ldr	r2, [r0, #16]
   c5ab8:	690c      	ldr	r4, [r1, #16]
   c5aba:	1b12      	subs	r2, r2, r4
   c5abc:	d10e      	bne.n	c5adc <__mcmp+0x28>
   c5abe:	f100 0314 	add.w	r3, r0, #20
   c5ac2:	3114      	adds	r1, #20
   c5ac4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c5ac8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c5acc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c5ad0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c5ad4:	42a5      	cmp	r5, r4
   c5ad6:	d003      	beq.n	c5ae0 <__mcmp+0x2c>
   c5ad8:	d305      	bcc.n	c5ae6 <__mcmp+0x32>
   c5ada:	2201      	movs	r2, #1
   c5adc:	4610      	mov	r0, r2
   c5ade:	bd30      	pop	{r4, r5, pc}
   c5ae0:	4283      	cmp	r3, r0
   c5ae2:	d3f3      	bcc.n	c5acc <__mcmp+0x18>
   c5ae4:	e7fa      	b.n	c5adc <__mcmp+0x28>
   c5ae6:	f04f 32ff 	mov.w	r2, #4294967295
   c5aea:	e7f7      	b.n	c5adc <__mcmp+0x28>

000c5aec <__mdiff>:
   c5aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5af0:	460c      	mov	r4, r1
   c5af2:	4606      	mov	r6, r0
   c5af4:	4611      	mov	r1, r2
   c5af6:	4620      	mov	r0, r4
   c5af8:	4690      	mov	r8, r2
   c5afa:	f7ff ffdb 	bl	c5ab4 <__mcmp>
   c5afe:	1e05      	subs	r5, r0, #0
   c5b00:	d110      	bne.n	c5b24 <__mdiff+0x38>
   c5b02:	4629      	mov	r1, r5
   c5b04:	4630      	mov	r0, r6
   c5b06:	f7ff fd09 	bl	c551c <_Balloc>
   c5b0a:	b930      	cbnz	r0, c5b1a <__mdiff+0x2e>
   c5b0c:	4b3a      	ldr	r3, [pc, #232]	; (c5bf8 <__mdiff+0x10c>)
   c5b0e:	4602      	mov	r2, r0
   c5b10:	f240 2132 	movw	r1, #562	; 0x232
   c5b14:	4839      	ldr	r0, [pc, #228]	; (c5bfc <__mdiff+0x110>)
   c5b16:	f7f8 f86f 	bl	bdbf8 <__assert_func>
   c5b1a:	2301      	movs	r3, #1
   c5b1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c5b20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5b24:	bfa4      	itt	ge
   c5b26:	4643      	movge	r3, r8
   c5b28:	46a0      	movge	r8, r4
   c5b2a:	4630      	mov	r0, r6
   c5b2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c5b30:	bfa6      	itte	ge
   c5b32:	461c      	movge	r4, r3
   c5b34:	2500      	movge	r5, #0
   c5b36:	2501      	movlt	r5, #1
   c5b38:	f7ff fcf0 	bl	c551c <_Balloc>
   c5b3c:	b920      	cbnz	r0, c5b48 <__mdiff+0x5c>
   c5b3e:	4b2e      	ldr	r3, [pc, #184]	; (c5bf8 <__mdiff+0x10c>)
   c5b40:	4602      	mov	r2, r0
   c5b42:	f44f 7110 	mov.w	r1, #576	; 0x240
   c5b46:	e7e5      	b.n	c5b14 <__mdiff+0x28>
   c5b48:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c5b4c:	6926      	ldr	r6, [r4, #16]
   c5b4e:	60c5      	str	r5, [r0, #12]
   c5b50:	f104 0914 	add.w	r9, r4, #20
   c5b54:	f108 0514 	add.w	r5, r8, #20
   c5b58:	f100 0e14 	add.w	lr, r0, #20
   c5b5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c5b60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c5b64:	f108 0210 	add.w	r2, r8, #16
   c5b68:	46f2      	mov	sl, lr
   c5b6a:	2100      	movs	r1, #0
   c5b6c:	f859 3b04 	ldr.w	r3, [r9], #4
   c5b70:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c5b74:	fa1f f883 	uxth.w	r8, r3
   c5b78:	fa11 f18b 	uxtah	r1, r1, fp
   c5b7c:	0c1b      	lsrs	r3, r3, #16
   c5b7e:	eba1 0808 	sub.w	r8, r1, r8
   c5b82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c5b86:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c5b8a:	fa1f f888 	uxth.w	r8, r8
   c5b8e:	1419      	asrs	r1, r3, #16
   c5b90:	454e      	cmp	r6, r9
   c5b92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c5b96:	f84a 3b04 	str.w	r3, [sl], #4
   c5b9a:	d8e7      	bhi.n	c5b6c <__mdiff+0x80>
   c5b9c:	1b33      	subs	r3, r6, r4
   c5b9e:	3b15      	subs	r3, #21
   c5ba0:	f023 0303 	bic.w	r3, r3, #3
   c5ba4:	3304      	adds	r3, #4
   c5ba6:	3415      	adds	r4, #21
   c5ba8:	42a6      	cmp	r6, r4
   c5baa:	bf38      	it	cc
   c5bac:	2304      	movcc	r3, #4
   c5bae:	441d      	add	r5, r3
   c5bb0:	4473      	add	r3, lr
   c5bb2:	469e      	mov	lr, r3
   c5bb4:	462e      	mov	r6, r5
   c5bb6:	4566      	cmp	r6, ip
   c5bb8:	d30e      	bcc.n	c5bd8 <__mdiff+0xec>
   c5bba:	f10c 0203 	add.w	r2, ip, #3
   c5bbe:	1b52      	subs	r2, r2, r5
   c5bc0:	f022 0203 	bic.w	r2, r2, #3
   c5bc4:	3d03      	subs	r5, #3
   c5bc6:	45ac      	cmp	ip, r5
   c5bc8:	bf38      	it	cc
   c5bca:	2200      	movcc	r2, #0
   c5bcc:	441a      	add	r2, r3
   c5bce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c5bd2:	b17b      	cbz	r3, c5bf4 <__mdiff+0x108>
   c5bd4:	6107      	str	r7, [r0, #16]
   c5bd6:	e7a3      	b.n	c5b20 <__mdiff+0x34>
   c5bd8:	f856 8b04 	ldr.w	r8, [r6], #4
   c5bdc:	fa11 f288 	uxtah	r2, r1, r8
   c5be0:	1414      	asrs	r4, r2, #16
   c5be2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c5be6:	b292      	uxth	r2, r2
   c5be8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c5bec:	f84e 2b04 	str.w	r2, [lr], #4
   c5bf0:	1421      	asrs	r1, r4, #16
   c5bf2:	e7e0      	b.n	c5bb6 <__mdiff+0xca>
   c5bf4:	3f01      	subs	r7, #1
   c5bf6:	e7ea      	b.n	c5bce <__mdiff+0xe2>
   c5bf8:	000c7f71 	.word	0x000c7f71
   c5bfc:	000c801a 	.word	0x000c801a

000c5c00 <__ulp>:
   c5c00:	b082      	sub	sp, #8
   c5c02:	ed8d 0b00 	vstr	d0, [sp]
   c5c06:	9b01      	ldr	r3, [sp, #4]
   c5c08:	4912      	ldr	r1, [pc, #72]	; (c5c54 <__ulp+0x54>)
   c5c0a:	4019      	ands	r1, r3
   c5c0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c5c10:	2900      	cmp	r1, #0
   c5c12:	dd05      	ble.n	c5c20 <__ulp+0x20>
   c5c14:	2200      	movs	r2, #0
   c5c16:	460b      	mov	r3, r1
   c5c18:	ec43 2b10 	vmov	d0, r2, r3
   c5c1c:	b002      	add	sp, #8
   c5c1e:	4770      	bx	lr
   c5c20:	4249      	negs	r1, r1
   c5c22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c5c26:	ea4f 5021 	mov.w	r0, r1, asr #20
   c5c2a:	f04f 0200 	mov.w	r2, #0
   c5c2e:	f04f 0300 	mov.w	r3, #0
   c5c32:	da04      	bge.n	c5c3e <__ulp+0x3e>
   c5c34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c5c38:	fa41 f300 	asr.w	r3, r1, r0
   c5c3c:	e7ec      	b.n	c5c18 <__ulp+0x18>
   c5c3e:	f1a0 0114 	sub.w	r1, r0, #20
   c5c42:	291e      	cmp	r1, #30
   c5c44:	bfda      	itte	le
   c5c46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c5c4a:	fa20 f101 	lsrle.w	r1, r0, r1
   c5c4e:	2101      	movgt	r1, #1
   c5c50:	460a      	mov	r2, r1
   c5c52:	e7e1      	b.n	c5c18 <__ulp+0x18>
   c5c54:	7ff00000 	.word	0x7ff00000

000c5c58 <__b2d>:
   c5c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c5c5a:	6905      	ldr	r5, [r0, #16]
   c5c5c:	f100 0714 	add.w	r7, r0, #20
   c5c60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c5c64:	1f2e      	subs	r6, r5, #4
   c5c66:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c5c6a:	4620      	mov	r0, r4
   c5c6c:	f7ff fd48 	bl	c5700 <__hi0bits>
   c5c70:	f1c0 0320 	rsb	r3, r0, #32
   c5c74:	280a      	cmp	r0, #10
   c5c76:	f8df c07c 	ldr.w	ip, [pc, #124]	; c5cf4 <__b2d+0x9c>
   c5c7a:	600b      	str	r3, [r1, #0]
   c5c7c:	dc14      	bgt.n	c5ca8 <__b2d+0x50>
   c5c7e:	f1c0 0e0b 	rsb	lr, r0, #11
   c5c82:	fa24 f10e 	lsr.w	r1, r4, lr
   c5c86:	42b7      	cmp	r7, r6
   c5c88:	ea41 030c 	orr.w	r3, r1, ip
   c5c8c:	bf34      	ite	cc
   c5c8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c5c92:	2100      	movcs	r1, #0
   c5c94:	3015      	adds	r0, #21
   c5c96:	fa04 f000 	lsl.w	r0, r4, r0
   c5c9a:	fa21 f10e 	lsr.w	r1, r1, lr
   c5c9e:	ea40 0201 	orr.w	r2, r0, r1
   c5ca2:	ec43 2b10 	vmov	d0, r2, r3
   c5ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c5ca8:	42b7      	cmp	r7, r6
   c5caa:	bf3a      	itte	cc
   c5cac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c5cb0:	f1a5 0608 	subcc.w	r6, r5, #8
   c5cb4:	2100      	movcs	r1, #0
   c5cb6:	380b      	subs	r0, #11
   c5cb8:	d017      	beq.n	c5cea <__b2d+0x92>
   c5cba:	f1c0 0c20 	rsb	ip, r0, #32
   c5cbe:	fa04 f500 	lsl.w	r5, r4, r0
   c5cc2:	42be      	cmp	r6, r7
   c5cc4:	fa21 f40c 	lsr.w	r4, r1, ip
   c5cc8:	ea45 0504 	orr.w	r5, r5, r4
   c5ccc:	bf8c      	ite	hi
   c5cce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c5cd2:	2400      	movls	r4, #0
   c5cd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c5cd8:	fa01 f000 	lsl.w	r0, r1, r0
   c5cdc:	fa24 f40c 	lsr.w	r4, r4, ip
   c5ce0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c5ce4:	ea40 0204 	orr.w	r2, r0, r4
   c5ce8:	e7db      	b.n	c5ca2 <__b2d+0x4a>
   c5cea:	ea44 030c 	orr.w	r3, r4, ip
   c5cee:	460a      	mov	r2, r1
   c5cf0:	e7d7      	b.n	c5ca2 <__b2d+0x4a>
   c5cf2:	bf00      	nop
   c5cf4:	3ff00000 	.word	0x3ff00000

000c5cf8 <__d2b>:
   c5cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c5cfc:	4689      	mov	r9, r1
   c5cfe:	2101      	movs	r1, #1
   c5d00:	ec57 6b10 	vmov	r6, r7, d0
   c5d04:	4690      	mov	r8, r2
   c5d06:	f7ff fc09 	bl	c551c <_Balloc>
   c5d0a:	4604      	mov	r4, r0
   c5d0c:	b930      	cbnz	r0, c5d1c <__d2b+0x24>
   c5d0e:	4602      	mov	r2, r0
   c5d10:	4b25      	ldr	r3, [pc, #148]	; (c5da8 <__d2b+0xb0>)
   c5d12:	4826      	ldr	r0, [pc, #152]	; (c5dac <__d2b+0xb4>)
   c5d14:	f240 310a 	movw	r1, #778	; 0x30a
   c5d18:	f7f7 ff6e 	bl	bdbf8 <__assert_func>
   c5d1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c5d20:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c5d24:	bb35      	cbnz	r5, c5d74 <__d2b+0x7c>
   c5d26:	2e00      	cmp	r6, #0
   c5d28:	9301      	str	r3, [sp, #4]
   c5d2a:	d028      	beq.n	c5d7e <__d2b+0x86>
   c5d2c:	4668      	mov	r0, sp
   c5d2e:	9600      	str	r6, [sp, #0]
   c5d30:	f7ff fd06 	bl	c5740 <__lo0bits>
   c5d34:	9900      	ldr	r1, [sp, #0]
   c5d36:	b300      	cbz	r0, c5d7a <__d2b+0x82>
   c5d38:	9a01      	ldr	r2, [sp, #4]
   c5d3a:	f1c0 0320 	rsb	r3, r0, #32
   c5d3e:	fa02 f303 	lsl.w	r3, r2, r3
   c5d42:	430b      	orrs	r3, r1
   c5d44:	40c2      	lsrs	r2, r0
   c5d46:	6163      	str	r3, [r4, #20]
   c5d48:	9201      	str	r2, [sp, #4]
   c5d4a:	9b01      	ldr	r3, [sp, #4]
   c5d4c:	61a3      	str	r3, [r4, #24]
   c5d4e:	2b00      	cmp	r3, #0
   c5d50:	bf14      	ite	ne
   c5d52:	2202      	movne	r2, #2
   c5d54:	2201      	moveq	r2, #1
   c5d56:	6122      	str	r2, [r4, #16]
   c5d58:	b1d5      	cbz	r5, c5d90 <__d2b+0x98>
   c5d5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c5d5e:	4405      	add	r5, r0
   c5d60:	f8c9 5000 	str.w	r5, [r9]
   c5d64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c5d68:	f8c8 0000 	str.w	r0, [r8]
   c5d6c:	4620      	mov	r0, r4
   c5d6e:	b003      	add	sp, #12
   c5d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c5d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c5d78:	e7d5      	b.n	c5d26 <__d2b+0x2e>
   c5d7a:	6161      	str	r1, [r4, #20]
   c5d7c:	e7e5      	b.n	c5d4a <__d2b+0x52>
   c5d7e:	a801      	add	r0, sp, #4
   c5d80:	f7ff fcde 	bl	c5740 <__lo0bits>
   c5d84:	9b01      	ldr	r3, [sp, #4]
   c5d86:	6163      	str	r3, [r4, #20]
   c5d88:	2201      	movs	r2, #1
   c5d8a:	6122      	str	r2, [r4, #16]
   c5d8c:	3020      	adds	r0, #32
   c5d8e:	e7e3      	b.n	c5d58 <__d2b+0x60>
   c5d90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c5d94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c5d98:	f8c9 0000 	str.w	r0, [r9]
   c5d9c:	6918      	ldr	r0, [r3, #16]
   c5d9e:	f7ff fcaf 	bl	c5700 <__hi0bits>
   c5da2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c5da6:	e7df      	b.n	c5d68 <__d2b+0x70>
   c5da8:	000c7f71 	.word	0x000c7f71
   c5dac:	000c801a 	.word	0x000c801a

000c5db0 <__ratio>:
   c5db0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5db4:	4688      	mov	r8, r1
   c5db6:	4669      	mov	r1, sp
   c5db8:	4681      	mov	r9, r0
   c5dba:	f7ff ff4d 	bl	c5c58 <__b2d>
   c5dbe:	a901      	add	r1, sp, #4
   c5dc0:	4640      	mov	r0, r8
   c5dc2:	ec55 4b10 	vmov	r4, r5, d0
   c5dc6:	f7ff ff47 	bl	c5c58 <__b2d>
   c5dca:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c5dce:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c5dd2:	eba3 0c02 	sub.w	ip, r3, r2
   c5dd6:	e9dd 3200 	ldrd	r3, r2, [sp]
   c5dda:	1a9b      	subs	r3, r3, r2
   c5ddc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c5de0:	ec51 0b10 	vmov	r0, r1, d0
   c5de4:	2b00      	cmp	r3, #0
   c5de6:	bfd6      	itet	le
   c5de8:	460a      	movle	r2, r1
   c5dea:	462a      	movgt	r2, r5
   c5dec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c5df0:	468b      	mov	fp, r1
   c5df2:	462f      	mov	r7, r5
   c5df4:	bfd4      	ite	le
   c5df6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c5dfa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c5dfe:	4620      	mov	r0, r4
   c5e00:	ee10 2a10 	vmov	r2, s0
   c5e04:	465b      	mov	r3, fp
   c5e06:	4639      	mov	r1, r7
   c5e08:	f7fd fd58 	bl	c38bc <__aeabi_ddiv>
   c5e0c:	ec41 0b10 	vmov	d0, r0, r1
   c5e10:	b003      	add	sp, #12
   c5e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c5e16 <__copybits>:
   c5e16:	3901      	subs	r1, #1
   c5e18:	b570      	push	{r4, r5, r6, lr}
   c5e1a:	1149      	asrs	r1, r1, #5
   c5e1c:	6914      	ldr	r4, [r2, #16]
   c5e1e:	3101      	adds	r1, #1
   c5e20:	f102 0314 	add.w	r3, r2, #20
   c5e24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c5e28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c5e2c:	1f05      	subs	r5, r0, #4
   c5e2e:	42a3      	cmp	r3, r4
   c5e30:	d30c      	bcc.n	c5e4c <__copybits+0x36>
   c5e32:	1aa3      	subs	r3, r4, r2
   c5e34:	3b11      	subs	r3, #17
   c5e36:	f023 0303 	bic.w	r3, r3, #3
   c5e3a:	3211      	adds	r2, #17
   c5e3c:	42a2      	cmp	r2, r4
   c5e3e:	bf88      	it	hi
   c5e40:	2300      	movhi	r3, #0
   c5e42:	4418      	add	r0, r3
   c5e44:	2300      	movs	r3, #0
   c5e46:	4288      	cmp	r0, r1
   c5e48:	d305      	bcc.n	c5e56 <__copybits+0x40>
   c5e4a:	bd70      	pop	{r4, r5, r6, pc}
   c5e4c:	f853 6b04 	ldr.w	r6, [r3], #4
   c5e50:	f845 6f04 	str.w	r6, [r5, #4]!
   c5e54:	e7eb      	b.n	c5e2e <__copybits+0x18>
   c5e56:	f840 3b04 	str.w	r3, [r0], #4
   c5e5a:	e7f4      	b.n	c5e46 <__copybits+0x30>

000c5e5c <__any_on>:
   c5e5c:	f100 0214 	add.w	r2, r0, #20
   c5e60:	6900      	ldr	r0, [r0, #16]
   c5e62:	114b      	asrs	r3, r1, #5
   c5e64:	4298      	cmp	r0, r3
   c5e66:	b510      	push	{r4, lr}
   c5e68:	db11      	blt.n	c5e8e <__any_on+0x32>
   c5e6a:	dd0a      	ble.n	c5e82 <__any_on+0x26>
   c5e6c:	f011 011f 	ands.w	r1, r1, #31
   c5e70:	d007      	beq.n	c5e82 <__any_on+0x26>
   c5e72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c5e76:	fa24 f001 	lsr.w	r0, r4, r1
   c5e7a:	fa00 f101 	lsl.w	r1, r0, r1
   c5e7e:	428c      	cmp	r4, r1
   c5e80:	d10b      	bne.n	c5e9a <__any_on+0x3e>
   c5e82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c5e86:	4293      	cmp	r3, r2
   c5e88:	d803      	bhi.n	c5e92 <__any_on+0x36>
   c5e8a:	2000      	movs	r0, #0
   c5e8c:	bd10      	pop	{r4, pc}
   c5e8e:	4603      	mov	r3, r0
   c5e90:	e7f7      	b.n	c5e82 <__any_on+0x26>
   c5e92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c5e96:	2900      	cmp	r1, #0
   c5e98:	d0f5      	beq.n	c5e86 <__any_on+0x2a>
   c5e9a:	2001      	movs	r0, #1
   c5e9c:	e7f6      	b.n	c5e8c <__any_on+0x30>

000c5e9e <_calloc_r>:
   c5e9e:	b513      	push	{r0, r1, r4, lr}
   c5ea0:	434a      	muls	r2, r1
   c5ea2:	4611      	mov	r1, r2
   c5ea4:	9201      	str	r2, [sp, #4]
   c5ea6:	f7f7 fe97 	bl	bdbd8 <_malloc_r>
   c5eaa:	4604      	mov	r4, r0
   c5eac:	b118      	cbz	r0, c5eb6 <_calloc_r+0x18>
   c5eae:	9a01      	ldr	r2, [sp, #4]
   c5eb0:	2100      	movs	r1, #0
   c5eb2:	f7fd ff8d 	bl	c3dd0 <memset>
   c5eb6:	4620      	mov	r0, r4
   c5eb8:	b002      	add	sp, #8
   c5eba:	bd10      	pop	{r4, pc}
   c5ebc:	0000      	movs	r0, r0
	...

000c5ec0 <nan>:
   c5ec0:	ed9f 0b01 	vldr	d0, [pc, #4]	; c5ec8 <nan+0x8>
   c5ec4:	4770      	bx	lr
   c5ec6:	bf00      	nop
   c5ec8:	00000000 	.word	0x00000000
   c5ecc:	7ff80000 	.word	0x7ff80000

000c5ed0 <__ascii_wctomb>:
   c5ed0:	b149      	cbz	r1, c5ee6 <__ascii_wctomb+0x16>
   c5ed2:	2aff      	cmp	r2, #255	; 0xff
   c5ed4:	bf85      	ittet	hi
   c5ed6:	238a      	movhi	r3, #138	; 0x8a
   c5ed8:	6003      	strhi	r3, [r0, #0]
   c5eda:	700a      	strbls	r2, [r1, #0]
   c5edc:	f04f 30ff 	movhi.w	r0, #4294967295
   c5ee0:	bf98      	it	ls
   c5ee2:	2001      	movls	r0, #1
   c5ee4:	4770      	bx	lr
   c5ee6:	4608      	mov	r0, r1
   c5ee8:	4770      	bx	lr
	...

000c5eec <__aeabi_d2lz>:
   c5eec:	b538      	push	{r3, r4, r5, lr}
   c5eee:	2200      	movs	r2, #0
   c5ef0:	2300      	movs	r3, #0
   c5ef2:	4604      	mov	r4, r0
   c5ef4:	460d      	mov	r5, r1
   c5ef6:	f7fd fe29 	bl	c3b4c <__aeabi_dcmplt>
   c5efa:	b928      	cbnz	r0, c5f08 <__aeabi_d2lz+0x1c>
   c5efc:	4620      	mov	r0, r4
   c5efe:	4629      	mov	r1, r5
   c5f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c5f04:	f7fd bef8 	b.w	c3cf8 <__aeabi_d2ulz>
   c5f08:	4620      	mov	r0, r4
   c5f0a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c5f0e:	f7fd fef3 	bl	c3cf8 <__aeabi_d2ulz>
   c5f12:	4240      	negs	r0, r0
   c5f14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c5f18:	bd38      	pop	{r3, r4, r5, pc}
   c5f1a:	bf00      	nop

000c5f1c <dynalib_user>:
   c5f1c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c5f2c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c5f3c:	7620 7269 7574 6c61 5300 6e65 6964 676e      virtual.Sending
   c5f4c:	6120 7320 6174 7574 2073 7075 6164 6574      a status update
   c5f5c:	0021 6564 6166 6c75 2074 4d00 4253 4c00     !.default .MSB.L
   c5f6c:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
   c5f7c:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
   c5f8c:	6974 676e 2073 7325 7525 2520 2073 4f4d     tings %s%u %s MO
   c5f9c:	4544 7525 003e 6157 6e72 6e69 2c67 6d20     DE%u>.Warning, m
   c5fac:	746f 726f 6320 6d6f 616d 646e 6820 7361     otor command has
   c5fbc:	6e20 746f 6220 6565 206e 6572 6563 7669      not been receiv
   c5fcc:	6465 6920 206e 766f 7265 2520 6d64 2c73     ed in over %dms,
   c5fdc:	6320 7475 6974 676e 6d20 746f 726f 0073      cutting motors.
   c5fec:	7453 7461 7375 203a 6425 5b00 4157 4e52     Status: %d.[WARN
   c5ffc:	205d 4258 6565 4d20 7365 6173 6567 2073     ] XBee Messages 
   c600c:	6168 6576 6e20 746f 6220 6565 206e 6572     have not been re
   c601c:	6563 7669 6465 6920 206e 6425 2c73 6120     ceived in %ds, a
   c602c:	7373 6d75 6e69 2067 4258 6565 6920 2073     ssuming XBee is 
   c603c:	6e75 7661 6961 616c 6c62 0065 575b 5241     unavailable.[WAR
   c604c:	5d4e 4220 454c 4d20 7365 6173 6567 2073     N] BLE Messages 
   c605c:	6168 6576 6e20 746f 6220 6565 206e 6572     have not been re
   c606c:	6563 7669 6465 6920 206e 6425 2c73 6120     ceived in %ds, a
   c607c:	7373 6d75 6e69 2067 4c42 2045 7369 7520     ssuming BLE is u
   c608c:	616e 6176 6c69 6261 656c 4300 6568 6b63     navailable.Check
   c609c:	7573 3a6d 2520 3230 2c78 2520 3330 0064     sum: %02x, %03d.
   c60ac:	7453 6972 676e 4c20 6e65 203a 6425 202c     String Len: %d, 
   c60bc:	6843 6365 736b 6d75 203a 6425 5b00 4157     Checksum: %d.[WA
   c60cc:	4e52 205d 654d 7373 6761 2065 6843 6365     RN] Message Chec
   c60dc:	736b 6d75 4420 656f 2073 6f4e 2074 614d     ksum Does Not Ma
   c60ec:	6374 2168 203a 7325 5700 7261 696e 676e     tch!: %s.Warning
   c60fc:	202c 6863 6365 736b 6d75 6420 656f 2073     , checksum does 
   c610c:	6f6e 2074 616d 6374 0068 6361 006b 7463     not match.ack.ct
   c611c:	006c 7325 2520 2073 6425 2520 2064 6425     l.%s %s %d %d %d
   c612c:	6d00 7274 5200 6365 6965 6576 2064 6f4d     .mtr.Received Mo
   c613c:	6f74 2072 6f43 6d6d 6e61 3a64 4c20 7053     tor Command: LSp
   c614c:	6565 3d64 6425 522c 7053 6565 3d64 6425     eed=%d,RSpeed=%d
   c615c:	7200 7165 7000 7374 5b00 5550 5354 205d     .req.pts.[PUTS] 
   c616c:	6552 6563 7669 6465 5320 7274 6e69 2067     Received String 
   c617c:	6f43 6d6d 6e61 3a64 2520 0073 7073 0063     Command: %s.spc.
   c618c:	7768 0061 7561 0074 6d64 0070 495b 464e     hwa.aut.dmp.[INF
   c619c:	5d4f 5220 6365 6965 6576 2064 544c 2045     O] Received LTE 
   c61ac:	654d 7373 6761 3a65 2520 0073 654e 2077     Message: %s.New 
   c61bc:	5442 4320 6d6f 616d 646e 003a 495b 464e     BT Command:.[INF
   c61cc:	5d4f 5220 6365 6965 6576 2064 4c42 2045     O] Received BLE 
   c61dc:	654d 7373 6761 3a65 2520 0073 4343 7548     Message: %s.CCHu
   c61ec:	0062 7245 6f72 2c72 4320 756f 646c 6e20     b.Error, Could n
   c61fc:	746f 6920 696e 6974 6c61 7a69 2065 5047     ot initialize GP
   c620c:	0053 6152 2077 203a 6625 202c 6f43 706d     S.Raw : %f, Comp
   c621c:	7361 2073 203a 6625 202c 7254 7661 6c65     ass : %f, Travel
   c622c:	6820 3a64 2520 2c66 5420 4420 6c65 6174      hd: %f, T Delta
   c623c:	203a 6625 2500 3230 2564 3230 2564 3430     : %f.%02d%02d%04
   c624c:	2564 3230 2564 3230 2564 3230 0064 7325     d%02d%02d%02d.%s
   c625c:	252c 2c66 6625 252c 2c66 6625 252c 2c66     ,%f,%f,%f,%f,%f,
   c626c:	6625 252c 0066 654e 2077 4258 6565 4320     %f,%f.New XBee C
   c627c:	6d6f 616d 646e 003a 495b 464e 5d4f 5220     ommand:.[INFO] R
   c628c:	6365 6965 6576 2064 4258 6565 4d20 7365     eceived XBee Mes
   c629c:	6173 6567 203a 7325 4500 746e 7265 6e69     sage: %s.Enterin
   c62ac:	2067 6144 6174 4f20 6666 6f6c 6461 7265     g Data Offloader
   c62bc:	4d20 646f 0065 002f 7245 6f72 2c72 6320      Mode./.Error, c
   c62cc:	756f 646c 6e20 746f 6f20 6570 206e 6f72     ould not open ro
   c62dc:	746f 5320 2044 6163 6472 6420 7269 6365     ot SD card direc
   c62ec:	6f74 7972 5700 6961 6974 676e 6620 726f     tory.Waiting for
   c62fc:	4320 4843 6275 6320 6e6f 656e 7463 6f69      CCHub connectio
   c630c:	2e6e 2e2e 5300 6174 7472 6e69 2067 7274     n....Starting tr
   c631c:	6e61 6673 7265 2e2e 002e 6843 6365 696b     ansfer....Checki
   c632c:	676e 6920 2066 6966 656c 2520 2073 7369     ng if file %s is
   c633c:	6120 2e20 7363 2076 726f 2e20 7874 2e74      a .csv or .txt.
   c634c:	2e2e 2e00 7363 0076 6966 656c 6f64 656e     ....csv.filedone
   c635c:	6600 6c69 6e65 6d61 0065 6553 646e 6e69     .filename.Sendin
   c636c:	2067 6f63 6d6d 6e61 2064 7325 4600 6c69     g command %s.Fil
   c637c:	2065 7325 6920 2073 2061 632e 7673 6f20     e %s is a .csv o
   c638c:	2072 742e 7478 7020 6972 746e 6e69 2067     r .txt printing 
   c639c:	6164 6174 6600 6c69 6365 6d6f 0070 7325     data.filecomp.%s
   c63ac:	3025 7832 4200 746f 6431 7461 4200 6425     %02x.Bot1dat.B%d
   c63bc:	4343 6e73 2573 2e30 6636 2520 2e30 6636     CCsns%0.6f %0.6f
   c63cc:	2520 2064 6425 2520 2064 6425 2520 2064      %d %d %d %d %d 
   c63dc:	4200 6425 4241 7573 2570 2064 6425 2520     .B%dABsup%d %d %
   c63ec:	362e 2066 2e25 6636 0020 3142 4343 7470     .6f %.6f .B1CCpt
   c63fc:	6273 6769 6f62 0074 6146 6c69 6465 7420     sbigbot.Failed t
   c640c:	206f 6966 646e 4c20 5349 4d33 4c44 6320     o find LIS3MDL c
   c641c:	6968 0070 494c 3353 444d 204c 6f46 6e75     hip.LIS3MDL Foun
   c642c:	2164 5700 7461 7265 6f42 0074 4c5f 474f     d!.WaterBot._LOG
   c643c:	742e 7478 4500 7272 726f 203a 6f63 6c75     .txt.Error: coul
   c644c:	2064 6f6e 2074 6f63 6e6e 6365 2074 6f74     d not connect to
   c645c:	5320 2044 6163 6472 0021 6954 656d 4c2c      SD card!.Time,L
   c646c:	7461 7469 6475 2c65 6f4c 676e 7469 6475     atitude,Longitud
   c647c:	2c65 6554 706d 7265 7461 7275 2c65 4870     e,Temperature,pH
   c648c:	442c 7369 6f73 766c 6465 4f20 2c32 6f43     ,Dissolved O2,Co
   c649c:	646e 6375 6974 6976 7974 3020 312e 2c4b     nductivity 0.1K,
   c64ac:	6f43 646e 6375 6974 6976 7974 3120 004b     Conductivity 1K.
   c64bc:	495b 464e 5d4f 5720 7461 7265 6f42 2074     [INFO] WaterBot 
   c64cc:	6425 203a 7453 7261 6574 2064 6f4c 6767     %d: Started Logg
   c64dc:	6e69 2167 7400 0078 7872 6f00 6666 6400     ing!.tx.rx.off.d
   c64ec:	6762 0000                                   bg..

000c64f0 <_ZTVN8particle11SPISettingsE>:
	...
   c64f8:	4305 000b 40d1 000b 4175 000b               .C...@..uA..

000c6504 <_ZTV5Timer>:
	...
   c650c:	43f1 000b 4445 000b 41db 000b               .C..ED...A..

000c6518 <_ZTVN5spark10LogHandlerE>:
	...
   c6528:	40a9 000b 40d3 000b                         .@...@..

000c6530 <_ZTVN8particle9LEDStatusE>:
	...
   c6538:	4241 000b 425d 000b 40dd 000b               AB..]B...@..

000c6544 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c654c:	4271 000b 42a5 000b 02b1 000c 40d5 000b     qB...B.......@..

000c655c <_ZTV4File>:
	...
   c6564:	40f9 000b 4183 000b 4197 000b 4191 000b     .@...A...A...A..
   c6574:	40df 000b 41bb 000b 41b5 000b 41af 000b     .@...A...A...A..
   c6584:	3462 3032 3936 3531 642d 3463 2d62 3735     b4206915-dc4b-57
   c6594:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c65a4:	3238 3062 6200 3234 3630 3139 2d34 6364     82b0.b4206914-dc
   c65b4:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c65c4:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c65d4:	3331 642d 3463 2d62 3735 3334 632d 6238     13-dc4b-5743-c8b
   c65e4:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c65f4:	3234 3630 3139 2d32 6364 6234 352d 3437     4206912-dc4b-574
   c6604:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c6614:	6232 0030 3462 3032 3936 3031 642d 3463     2b0.b4206910-dc4
   c6624:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   c6634:	3765 3135 3238 3062 0000 0000               e75182b0....

000c6640 <CSWTCH.315>:
   c6640:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c6650:	ffff 00ff ff00 00ff ffff 0000 6573 5074     ............setP
   c6660:	6361 656b 4374 6766 6150 6c79 616f 5364     acketCfgPayloadS
   c6670:	7a69 3a65 5a20 7265 206f 6170 6c79 616f     ize: Zero payloa
   c6680:	5364 7a69 2165 7300 7465 6150 6b63 7465     dSize!.setPacket
   c6690:	6643 5067 7961 6f6c 6461 6953 657a 203a     CfgPayloadSize: 
   c66a0:	4152 204d 6c61 6f6c 2063 6166 6c69 6465     RAM alloc failed
   c66b0:	0021 6573 5074 6361 656b 4374 6766 6150     !.setPacketCfgPa
   c66c0:	6c79 616f 5364 7a69 3a65 5220 4d41 7220     yloadSize: RAM r
   c66d0:	7365 7a69 2065 6166 6c69 6465 0021 4e47     esize failed!.GN
   c66e0:	4747 0041 5047 5456 0047 4e47 5456 0047     GGA.GPVTG.GNVTG.
   c66f0:	5047 4d52 0043 4e47 4d52 0043 5047 445a     GPRMC.GNRMC.GPZD
   c6700:	0041 4e47 445a 0041 5047 4747 0041 6573     A.GNZDA.GPGGA.se
   c6710:	646e 7053 4369 6d6f 616d 646e 203a 6f6e     ndSpiCommand: no
   c6720:	6d20 6d65 726f 2079 6c61 6f6c 6163 6974      memory allocati
   c6730:	6e6f 6620 726f 5320 4950 4220 6675 6566     on for SPI Buffe
   c6740:	2172 7300 6e65 5364 6970 6f43 6d6d 6e61     r!.sendSpiComman
   c6750:	3a64 0020 4c43 3a53 4e00 5641 4100 4b43     d: .CLS:.NAV.ACK
   c6760:	4300 4746 4d00 4e4f 2000 4449 003a 5650     .CFG.MON. ID:.PV
   c6770:	0054 4152 4554 5300 5641 0045 4c20 6e65     T.RATE.SAVE. Len
   c6780:	203a 7830 2000 6150 6c79 616f 3a64 2000     : 0x. Payload:. 
   c6790:	6150 6c79 616f 3a64 4920 4e47 524f 4445     Payload: IGNORED
   c67a0:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c67b0:	3a72 5720 7261 696e 676e 202e 6966 656c     r: Warning. file
   c67c0:	7542 6666 7265 6953 657a 6920 2073 657a     BufferSize is ze
   c67d0:	6f72 202e 6144 6174 6c20 676f 6967 676e     ro. Data logging
   c67e0:	6920 2073 6f6e 2074 6f70 7373 6269 656c      is not possible
   c67f0:	002e 7263 6165 6574 6946 656c 7542 6666     ..createFileBuff
   c6800:	7265 203a 6157 6e72 6e69 2e67 4620 6c69     er: Warning. Fil
   c6810:	2065 7562 6666 7265 6120 726c 6165 7964     e buffer already
   c6820:	6520 6978 7473 2e73 5320 696b 7070 6e69      exists. Skippin
   c6830:	2e67 2e2e 6300 6572 7461 4665 6c69 4265     g....createFileB
   c6840:	6675 6566 3a72 5220 4d41 6120 6c6c 636f     uffer: RAM alloc
   c6850:	6620 6961 656c 2164 6300 6572 7461 4665      failed!.createF
   c6860:	6c69 4265 6675 6566 3a72 6620 6c69 4265     ileBuffer: fileB
   c6870:	6675 6566 5372 7a69 2065 7369 203a 7300     ufferSize is: .s
   c6880:	6f74 6572 6150 6b63 7465 203a 6966 656c     torePacket: file
   c6890:	6220 6675 6566 2072 6f6e 2074 7661 6961      buffer not avai
   c68a0:	616c 6c62 2165 7300 6f74 6572 6150 6b63     lable!.storePack
   c68b0:	7465 203a 6e69 7573 6666 6369 6569 746e     et: insufficient
   c68c0:	7320 6170 6563 6120 6176 6c69 6261 656c      space available
   c68d0:	2021 6144 6174 7720 6c69 206c 6562 6c20     ! Data will be l
   c68e0:	736f 2174 7000 6f72 6563 7373 4255 7058     ost!.processUBXp
   c68f0:	6361 656b 3a74 7020 6361 656b 5574 5842     acket: packetUBX
   c6900:	474d 4141 4b43 6920 2073 7566 6c6c 202e     MGAACK is full. 
   c6910:	4341 204b 6977 6c6c 6220 2065 6f6c 7473     ACK will be lost
   c6920:	0021 7270 636f 7365 5573 5842 6170 6b63     !.processUBXpack
   c6930:	7465 203a 6170 6b63 7465 4255 4d58 4147     et: packetUBXMGA
   c6940:	4244 2044 7369 6620 6c75 2e6c 4420 4442     DBD is full. DBD
   c6950:	6420 7461 2061 6977 6c6c 6220 2065 6f6c      data will be lo
   c6960:	7473 0021 7270 636f 7365 5573 5842 203a     st!.processUBX: 
   c6970:	6567 4d74 7861 6150 6c79 616f 5364 7a69     getMaxPayloadSiz
   c6980:	2065 6572 7574 6e72 6465 5a20 5245 214f     e returned ZERO!
   c6990:	2021 6c43 7361 3a73 3020 0078 7270 636f     ! Class: 0x.proc
   c69a0:	7365 5573 5842 203a 414e 4b43 7220 6365     essUBX: NACK rec
   c69b0:	6965 6576 3a64 5220 7165 6575 7473 6465     eived: Requested
   c69c0:	4320 616c 7373 203a 7830 2000 6552 7571      Class: 0x. Requ
   c69d0:	7365 6574 2064 4449 203a 7830 7000 6f72     ested ID: 0x.pro
   c69e0:	6563 7373 4255 3a58 6920 636e 6d6f 6e69     cessUBX: incomin
   c69f0:	2067 6122 7475 6d6f 7461 6369 2022 656d     g "automatic" me
   c6a00:	7373 6761 3a65 4320 616c 7373 203a 7830     ssage: Class: 0x
   c6a10:	4900 636e 6d6f 6e69 3a67 5320 7a69 3a65     .Incoming: Size:
   c6a20:	0020 5220 6365 6965 6576 3a64 0020 6170      . Received: .pa
   c6a30:	6b63 7465 6643 2067 6f6e 2077 6176 696c     cketCfg now vali
   c6a40:	0064 6170 6b63 7465 6341 206b 6f6e 2077     d.packetAck now 
   c6a50:	6176 696c 0064 6170 6b63 7465 6643 2067     valid.packetCfg 
   c6a60:	6c63 7361 4173 646e 4449 616d 6374 0068     classAndIDmatch.
   c6a70:	6170 6b63 7465 6341 206b 6c63 7361 4173     packetAck classA
   c6a80:	646e 4449 616d 6374 0068 6843 6365 736b     ndIDmatch.Checks
   c6a90:	6d75 6620 6961 656c 3a64 2000 6863 6365     um failed:. chec
   c6aa0:	736b 6d75 3a41 0020 6320 6568 6b63 7573     ksumA: . checksu
   c6ab0:	426d 203a 2000 6f72 6c6c 6e69 4367 6568     mB: . rollingChe
   c6ac0:	6b63 7573 416d 203a 2000 6f72 6c6c 6e69     cksumA: . rollin
   c6ad0:	4367 6568 6b63 7573 426d 203a 7000 6f72     gChecksumB: .pro
   c6ae0:	6563 7373 4255 3a58 6220 6675 6566 2072     cessUBX: buffer 
   c6af0:	766f 7265 7572 206e 6564 6574 7463 6465     overrun detected
   c6b00:	0021 7270 636f 7365 5573 5842 203a 6f63     !.processUBX: co
   c6b10:	6e75 6574 2072 6968 2074 616d 6978 756d     unter hit maximu
   c6b20:	5f6d 6170 6c79 616f 5f64 6973 657a 2b20     m_payload_size +
   c6b30:	3620 0021 6120 7463 7669 5065 6361 656b      6!. activePacke
   c6b40:	4274 6675 6566 3a72 0020 6d20 7861 6d69     tBuffer: . maxim
   c6b50:	6d75 705f 7961 6f6c 6461 735f 7a69 3a65     um_payload_size:
   c6b60:	0020 7473 726f 4665 6c69 4265 7479 7365      .storeFileBytes
   c6b70:	203a 6966 656c 6220 6675 6566 2072 6f6e     : file buffer no
   c6b80:	2074 7661 6961 616c 6c62 2165 7300 6f74     t available!.sto
   c6b90:	6572 6946 656c 7942 6574 3a73 6920 736e     reFileBytes: ins
   c6ba0:	6675 6966 6963 6e65 2074 7073 6361 2065     ufficient space 
   c6bb0:	7661 6961 616c 6c62 2165 4420 7461 2061     available! Data 
   c6bc0:	6977 6c6c 6220 2065 6f6c 7473 0021 7270     will be lost!.pr
   c6bd0:	636f 7365 3a73 6720 7465 614d 5078 7961     ocess: getMaxPay
   c6be0:	6f6c 6461 6953 657a 7220 7465 7275 656e     loadSize returne
   c6bf0:	2064 455a 4f52 2121 4320 616c 7373 203a     d ZERO!! Class: 
   c6c00:	7830 7000 6f72 6563 7373 203a 656d 6f6d     0x.process: memo
   c6c10:	7972 6920 2073 6c61 6572 6461 2079 6c61     ry is already al
   c6c20:	6f6c 6163 6574 2064 6f66 2072 6170 6c79     located for payl
   c6c30:	616f 4164 7475 216f 4420 6c65 7465 6e69     oadAuto! Deletin
   c6c40:	2e67 2e2e 7000 6f72 6563 7373 203a 656d     g....process: me
   c6c50:	6f6d 7972 6120 6c6c 636f 7461 6f69 206e     mory allocation 
   c6c60:	6166 6c69 6465 6620 726f 2220 7561 6f74     failed for "auto
   c6c70:	616d 6974 2263 6d20 7365 6173 6567 203a     matic" message: 
   c6c80:	6c43 7361 3a73 3020 0078 7270 636f 7365     Class: 0x.proces
   c6c90:	3a73 2220 7561 6f74 616d 6974 2263 6d20     s: "automatic" m
   c6ca0:	7365 6173 6567 6320 756f 646c 6f20 6576     essage could ove
   c6cb0:	7772 6972 6574 6420 7461 0061 7270 636f     rwrite data.proc
   c6cc0:	7365 3a73 6920 636e 6d6f 6e69 2067 6122     ess: incoming "a
   c6cd0:	7475 6d6f 7461 6369 2022 656d 7373 6761     utomatic" messag
   c6ce0:	3a65 4320 616c 7373 203a 7830 7000 6f72     e: Class: 0x.pro
   c6cf0:	6563 7373 203a 455a 4f52 4c20 4e45 5447     cess: ZERO LENGT
   c6d00:	2048 6170 6b63 7465 7220 6365 6965 6576     H packet receive
   c6d10:	3a64 4320 616c 7373 203a 7830 7000 6f72     d: Class: 0x.pro
   c6d20:	6563 7373 203a 4341 204b 6572 6563 7669     cess: ACK receiv
   c6d30:	6465 7720 7469 2068 6c2e 6e65 2120 203d     ed with .len != 
   c6d40:	3a32 4320 616c 7373 203a 7830 2000 656c     2: Class: 0x. le
   c6d50:	3a6e 0020 7270 636f 7365 3a73 4e20 454d     n: .process: NME
   c6d60:	2041 7562 6666 7265 6920 2073 7566 6c6c     A buffer is full
   c6d70:	0021 7270 636f 7365 3a73 4e20 454d 2041     !.process: NMEA 
   c6d80:	6863 6365 736b 6d75 6620 6961 206c 3228     checksum fail (2
   c6d90:	2129 4520 7078 6365 6574 2064 2000 6f47     )! Expected . Go
   c6da0:	2074 7000 6f72 6563 7373 203a 4d4e 4145     t .process: NMEA
   c6db0:	6320 6568 6b63 7573 206d 6166 6c69 2820      checksum fail (
   c6dc0:	2931 0021 6863 6365 556b 6c62 786f 3249     1)!.checkUbloxI2
   c6dd0:	3a43 4920 4332 6520 7272 726f 203a 6e65     C: I2C error: en
   c6de0:	5464 6172 736e 696d 7373 6f69 206e 6572     dTransmission re
   c6df0:	7574 6e72 6465 0020 6863 6365 556b 6c62     turned .checkUbl
   c6e00:	786f 3249 3a43 4920 4332 6520 7272 726f     oxI2C: I2C error
   c6e10:	203a 6572 7571 7365 4674 6f72 206d 7830     : requestFrom 0x
   c6e20:	4446 7220 7465 7275 656e 2064 6300 6568     FD returned .che
   c6e30:	6b63 6255 6f6c 4978 4332 203a 4b4f 202c     ckUbloxI2C: OK, 
   c6e40:	657a 6f72 6220 7479 7365 6120 6176 6c69     zero bytes avail
   c6e50:	6261 656c 6300 6568 6b63 6255 6f6c 4978     able.checkUbloxI
   c6e60:	4332 203a 614c 6772 2065 6170 6b63 7465     2C: Large packet
   c6e70:	6f20 2066 2000 7962 6574 2073 6572 6563      of . bytes rece
   c6e80:	7669 6465 6300 6568 6b63 6255 6f6c 4978     ived.checkUbloxI
   c6e90:	4332 203a 6552 6461 6e69 2067 2000 7962     2C: Reading . by
   c6ea0:	6574 0073 6177 7469 6f46 4172 4b43 6552     tes.waitForACKRe
   c6eb0:	7073 6e6f 6573 203a 6176 696c 2064 6164     sponse: valid da
   c6ec0:	6174 6120 646e 7620 6c61 6469 4120 4b43     ta and valid ACK
   c6ed0:	7220 6365 6965 6576 2064 6661 6574 2072      received after 
   c6ee0:	2000 736d 6365 7700 6961 4674 726f 4341     . msec.waitForAC
   c6ef0:	524b 7365 6f70 736e 3a65 6e20 206f 6164     KResponse: no da
   c6f00:	6174 6120 646e 7620 6c61 6469 4120 4b43     ta and valid ACK
   c6f10:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c6f20:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c6f30:	6220 6965 676e 4f20 4556 5752 4952 5454      being OVERWRITT
   c6f40:	4e45 6120 7466 7265 0020 6177 7469 6f46     EN after .waitFo
   c6f50:	4172 4b43 6552 7073 6e6f 6573 203a 5243     rACKResponse: CR
   c6f60:	2043 6166 6c69 6465 6120 7466 7265 0020     C failed after .
   c6f70:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c6f80:	6573 203a 6164 6174 7720 7361 4e20 544f     se: data was NOT
   c6f90:	4341 4e4b 574f 454c 4744 4445 2820 414e     ACKNOWLEDGED (NA
   c6fa0:	4b43 2029 6661 6574 2072 7700 6961 4674     CK) after .waitF
   c6fb0:	726f 4341 524b 7365 6f70 736e 3a65 5620     orACKResponse: V
   c6fc0:	4c41 4449 6420 7461 2061 6e61 2064 4e49     ALID data and IN
   c6fd0:	4156 494c 2044 4341 204b 6572 6563 7669     VALID ACK receiv
   c6fe0:	6465 6120 7466 7265 0020 6177 7469 6f46     ed after .waitFo
   c6ff0:	4172 4b43 6552 7073 6e6f 6573 203a 4e49     rACKResponse: IN
   c7000:	4156 494c 2044 6164 6174 6120 646e 4920     VALID data and I
   c7010:	564e 4c41 4449 4120 4b43 7220 6365 6965     NVALID ACK recei
   c7020:	6576 2064 6661 6574 2072 7700 6961 4674     ved after .waitF
   c7030:	726f 4341 524b 7365 6f70 736e 3a65 5420     orACKResponse: T
   c7040:	4d49 4f45 5455 7720 7469 2068 6176 696c     IMEOUT with vali
   c7050:	2064 6164 6174 6120 7466 7265 0020 6d20     d data after . m
   c7060:	6573 2e63 0020 6177 7469 6f46 4172 4b43     sec. .waitForACK
   c7070:	6552 7073 6e6f 6573 203a 4954 454d 554f     Response: TIMEOU
   c7080:	2054 6661 6574 2072 2000 736d 6365 002e     T after . msec..
   c7090:	6177 7469 6f46 4e72 416f 4b43 6552 7073     waitForNoACKResp
   c70a0:	6e6f 6573 203a 6176 696c 2064 6164 6174     onse: valid data
   c70b0:	7720 7469 2068 4c43 2f53 4449 6d20 7461      with CLS/ID mat
   c70c0:	6863 6120 7466 7265 0020 6177 7469 6f46     ch after .waitFo
   c70d0:	4e72 416f 4b43 6552 7073 6e6f 6573 203a     rNoACKResponse: 
   c70e0:	6164 6174 6220 6965 676e 4f20 4556 5752     data being OVERW
   c70f0:	4952 5454 4e45 6120 7466 7265 0020 6177     RITTEN after .wa
   c7100:	7469 6f46 4e72 416f 4b43 6552 7073 6e6f     itForNoACKRespon
   c7110:	6573 203a 4c43 2f53 4449 6d20 7461 6863     se: CLS/ID match
   c7120:	6220 7475 6620 6961 656c 2064 5243 2043      but failed CRC 
   c7130:	6661 6574 2072 7700 6961 4674 726f 6f4e     after .waitForNo
   c7140:	4341 524b 7365 6f70 736e 3a65 5420 4d49     ACKResponse: TIM
   c7150:	4f45 5455 6120 7466 7265 0020 6d20 6573     EOUT after . mse
   c7160:	2e63 4e20 206f 6170 6b63 7465 7220 6365     c. No packet rec
   c7170:	6965 6576 2e64 0a00 6553 646e 6e69 3a67     eived...Sending:
   c7180:	0020 6553 646e 4920 4332 4320 6d6f 616d      .Send I2C Comma
   c7190:	646e 6620 6961 656c 0064 6573 646e 6f43     nd failed.sendCo
   c71a0:	6d6d 6e61 3a64 5720 6961 6974 676e 6620     mmand: Waiting f
   c71b0:	726f 4120 4b43 7220 7365 6f70 736e 0065     or ACK response.
   c71c0:	6573 646e 6f43 6d6d 6e61 3a64 5720 6961     sendCommand: Wai
   c71d0:	6974 676e 6620 726f 4e20 206f 4341 204b     ting for No ACK 
   c71e0:	6572 7073 6e6f 6573 6900 696e 5074 6361     response.initPac
   c71f0:	656b 5574 5842 4643 5047 5452 203a 4152     ketUBXCFGPRT: RA
   c7200:	204d 6c61 6f6c 2063 6166 6c69 6465 0021     M alloc failed!.
   c7210:	6562 6967 3a6e 6920 4373 6e6f 656e 7463     begin: isConnect
   c7220:	6465 2d20 7320 6365 6e6f 2064 7461 6574     ed - second atte
   c7230:	706d 0074 6562 6967 3a6e 6920 4373 6e6f     mpt.begin: isCon
   c7240:	656e 7463 6465 2d20 7420 6968 6472 6120     nected - third a
   c7250:	7474 6d65 7470 6200 6765 6e69 203a 6874     ttempt.begin: th
   c7260:	7269 2064 7461 6574 706d 2074 6166 6c69     ird attempt fail
   c7270:	6465 202e 7341 7573 696d 676e 7320 6375     ed. Assuming suc
   c7280:	6563 7373 2e2e 002e                         cess....

000c7288 <CSWTCH.334>:
   c7288:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c7298:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c72a8:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c72c8:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c72f0:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c7344:	0000 0010 0004                              ......

000c734a <CSWTCH.335>:
   c734a:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c7366:	002c 0000 0000 0000 0010 0024               ,.........$.

000c7372 <CSWTCH.336>:
   c7372:	2048 4c24 5349 4d33 4c44 0000 0000          H $LIS3MDL....

000c7380 <CSWTCH.26>:
   c7380:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c7390 <_ZTV16Adafruit_LIS3MDL>:
	...
   c7398:	ca07 000b ca51 000b ca05 000b cb01 000b     ....Q...........
   c73a8:	ca09 000b                                   ....

000c73ac <_ZTVN5spark13EthernetClassE>:
	...
   c73b4:	dc87 000b dc7d 000b dc73 000b dc69 000b     ....}...s...i...
   c73c4:	dc5d 000b dc51 000b 12b5 000c 12bd 000c     ]...Q...........
   c73d4:	dc45 000b dc3d 000b dc33 000b dc29 000b     E...=...3...)...
   c73e4:	12ed 000c                                   ....

000c73e8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c73e8:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   c73f8:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   c7408:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   c7418:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   c7428:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   c7438:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   c7448:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   c7458:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   c7468:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   c7478:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   c7488:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   c7498:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   c74a8:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   c74b8:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   c74c8:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   c74d8:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   c74e8:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   c74f8:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   c7508:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   c7518:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   c7528:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   c7538:	6369 002e                                   ic..

000c753c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7544:	e1ef 000b e251 000b e325 000b e27b 000b     ....Q...%...{...
   c7554:	e1f1 000b                                   ....

000c7558 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7560:	e1eb 000b e25f 000b e1ed 000b e281 000b     ...._...........
   c7570:	e211 000b                                   ....

000c7574 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c757c:	e1e9 000b e26d 000b eae1 000b e287 000b     ....m...........
   c758c:	e231 000b                                   1...

000c7590 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c759c:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c75ae <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c75ae:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c75be <_ZN8particle7BleUuid9BASE_UUIDE>:
   c75be:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   c75ce:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   c75de:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   c75ee:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   c75fe:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   c760e:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   c761e:	6961 736c 3d20 0020 0a0d 6d00 6c00 006e     ails = ....m.ln.
   c762e:	6e66 6300 646f 0065 6564 6174 6c69 0000     fn.code.detail..
	...

000c7640 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c7648:	f6fd 000b f723 000b f6e1 000b 1407 000c     ....#...........

000c7658 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c7660:	fb59 000b fb71 000b 02b1 000c 40d5 000b     Y...q........@..

000c7670 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c7678:	fb85 000b fb99 000b 0455 000c f6e9 000b     ........U.......

000c7688 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c7690:	f6fb 000b f731 000b 0215 000c f6eb 000b     ....1...........

000c76a0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c76a8:	f6f9 000b f73f 000b fac1 000b f761 000b     ....?.......a...
   c76b8:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   c76c8:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000c76d4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c76dc:	08c1 000c 08c7 000c 0905 000c 08d5 000c     ................
   c76ec:	08c3 000c                                   ....

000c76f0 <_ZTV9IPAddress>:
	...
   c76f8:	0e01 000c 0df1 000c 0df3 000c               ............

000c7704 <_ZTV9USBSerial>:
	...
   c770c:	0ee7 000c 0f4f 000c 0f25 000c f545 000b     ....O...%...E...
   c771c:	0f17 000c 0ee9 000c 0ef9 000c 0f49 000c     ............I...
   c772c:	0f09 000c 0ee1 000c                         ........

000c7734 <_ZTVN5spark13CellularClassE>:
	...
   c773c:	1057 000c 104d 000c 1043 000c 0ff9 000c     W...M...C.......
   c774c:	1037 000c 102b 000c 12b5 000c 12bd 000c     7...+...........
   c775c:	101f 000c 1017 000c 100d 000c 1003 000c     ................
   c776c:	12ed 000c                                   ....

000c7770 <_ZTV11USARTSerial>:
	...
   c7778:	1091 000c 10fd 000c 10d5 000c f545 000b     ............E...
   c7788:	10a5 000c 10c1 000c 10b3 000c 10cf 000c     ................
   c7798:	1093 000c 1097 000c                         ........

000c77a0 <_ZTV7TwoWire>:
	...
   c77a8:	1171 000c 11bb 000c 1193 000c 1173 000c     q...........s...
   c77b8:	119b 000c 11a3 000c 11ab 000c 11b3 000c     ................

000c77c8 <_ZTVN5spark12NetworkClassE>:
	...
   c77d0:	1275 000c 127f 000c 1289 000c 1293 000c     u...............
   c77e0:	129d 000c 12a9 000c 12b5 000c 12bd 000c     ................
   c77f0:	12c5 000c 12d1 000c 12d9 000c 12e3 000c     ................
   c7800:	12ed 000c 7525 7500 3025 7834                ....%u.u%04x.

000c780d <_ZSt7nothrow>:
	...

000c780e <_ZTSSt19_Sp_make_shared_tag>:
   c780e:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c781e:	6572 5f64 6174 0067 0000                    red_tag...

000c7828 <_ZTISt19_Sp_make_shared_tag>:
   c7828:	7868 000c 780e 000c                         hx...x..

000c7830 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c7830:	78c8 000c 783c 000c 78ec 000c               .x..<x...x..

000c783c <_ZTSN10__cxxabiv117__class_type_infoE>:
   c783c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c784c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c785c:	0045 0000                                   E...

000c7860 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c7860:	0000 0000 7830 000c 19d9 000c 19ed 000c     ....0x..........
   c7870:	1b81 000c 1b81 000c 1a57 000c 1999 000c     ........W.......
   c7880:	1a3f 000c 1a01 000c 19cb 000c               ?...........

000c788c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c788c:	78c8 000c 7898 000c 7830 000c               .x...x..0x..

000c7898 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c7898:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c78a8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c78b8:	666e 456f 0000 0000                         nfoE....

000c78c0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c78c0:	0000 0000 788c 000c 1a81 000c 1a95 000c     .....x..........
   c78d0:	1b81 000c 1b81 000c 1a57 000c 1999 000c     ........W.......
   c78e0:	1b55 000c 1ae1 000c 1aa9 000c               U...........

000c78ec <_ZTISt9type_info>:
   c78ec:	7868 000c 78f4 000c                         hx...x..

000c78f4 <_ZTSSt9type_info>:
   c78f4:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   c7904:	0000 0000                                   ....

000c7908 <CSWTCH.8>:
   c7908:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   c7918:	21d2 7f33 d97c c002                         .!3.|...

000c7920 <CSWTCH.9>:
   c7920:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   c7930:	2d18 5444 21fb c009                         .-DT.!..

000c7938 <CSWTCH.8>:
   c7938:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000c7944 <CSWTCH.9>:
   c7944:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000c7950 <npio2_hw>:
   c7950:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   c7960:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   c7970:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   c7980:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   c7990:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   c79a0:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   c79b0:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   c79c0:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000c79d0 <two_over_pi>:
   c79d0:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   c79e0:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   c79f0:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   c7a00:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   c7a10:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   c7a20:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   c7a30:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   c7a40:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   c7a50:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   c7a60:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   c7a70:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   c7a80:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   c7a90:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   c7aa0:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   c7ab0:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   c7ac0:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   c7ad0:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   c7ae0:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   c7af0:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   c7b00:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   c7b10:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   c7b20:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   c7b30:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   c7b40:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   c7b50:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   c7b60:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   c7b70:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   c7b80:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   c7b90:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   c7ba0:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   c7bb0:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   c7bc0:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   c7bd0:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   c7be0:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   c7bf0:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   c7c00:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   c7c10:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   c7c20:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   c7c30:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   c7c40:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   c7c50:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   c7c60:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   c7c70:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   c7c80:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   c7c90:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   c7ca0:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   c7cb0:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   c7cc0:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   c7cd0:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   c7ce0:	008c 0000 006b 0000                         ....k...

000c7ce8 <PIo2>:
   c7ce8:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   c7cf8:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   c7d08:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000c7d14 <init_jk>:
   c7d14:	0004 0000 0007 0000 0009 0000               ............

000c7d20 <atanhi>:
   c7d20:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   c7d30:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000c7d40 <atanlo>:
   c7d40:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   c7d50:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000c7d60 <atanhi>:
   c7d60:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000c7d70 <atanlo>:
   c7d70:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
   c7d80:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   c7d90:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   c7da0:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   c7db0:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   c7dc0:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   c7dd0:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   c7de0:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   c7df0:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   c7e00:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   c7e10:	2e64 0063 666e 6900 696e 7974 6100 006e     d.c.nf.inity.an.

000c7e20 <fpi.1>:
   c7e20:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c7e30:	0000 0000                                   ....

000c7e34 <fpinan.0>:
   c7e34:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c7e44:	0000 0000                                   ....

000c7e48 <tinytens>:
   c7e48:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c7e58:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c7e68:	6f43 64ac 0628 1168                         Co.d(.h.

000c7e70 <_ctype_>:
   c7e70:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c7e80:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c7e90:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c7ea0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c7eb0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c7ec0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c7ed0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c7ee0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c7ef0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c7f70:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c7f80:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   c7f90:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   c7fa0:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   c7fb0:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   c7fc0:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   c7fd0:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   c7fe0:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   c7ff0:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   c8000:	6874 7865 632e 0000                         thex.c..

000c8008 <_C_numeric_locale>:
   c8008:	6833 000c 7628 000c dbf8 2003 4f50 4953     3h..(v..... POSI
   c8018:	0058 6d2f 746e 772f 726f 736b 6170 6563     X./mnt/workspace
   c8028:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   c8038:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   c8048:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   c8058:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   c8068:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   c8078:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   c8088:	732f 6474 696c 2f62 706d 6572 2e63 0063     /stdlib/mprec.c.

000c8098 <__mprec_bigtens>:
   c8098:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c80a8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c80b8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c80c0 <__mprec_tens>:
   c80c0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c80d0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c80e0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c80f0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c8100:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c8110:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c8120:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c8130:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c8140:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c8150:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c8160:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c8170:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c8180:	9db4 79d9 7843 44ea                         ...yCx.D

000c8188 <p05.0>:
   c8188:	0005 0000 0019 0000 007d 0000               ........}...

000c8194 <link_const_variable_data_end>:
   c8194:	000b6209 	.word	0x000b6209
   c8198:	000bdc91 	.word	0x000bdc91
   c819c:	000be001 	.word	0x000be001
   c81a0:	000bf535 	.word	0x000bf535
   c81a4:	000c02a1 	.word	0x000c02a1
   c81a8:	000c0749 	.word	0x000c0749
   c81ac:	000c077d 	.word	0x000c077d
   c81b0:	000c1061 	.word	0x000c1061
   c81b4:	000c13c5 	.word	0x000c13c5

000c81b8 <link_constructors_end>:
	...
