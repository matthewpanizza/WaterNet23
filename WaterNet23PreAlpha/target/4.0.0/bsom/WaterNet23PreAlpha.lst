
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23PreAlpha/target/4.0.0/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00014460  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c8480  000c8480  00018480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c84a4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000204  2003db54  000c84a8  0002db54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a98  2003dd58  2003dd58  0003dd58  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c86ac  000c86ac  000386ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c86d4  000c86d4  000386d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022da8d  00000000  00000000  000386d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f2a  00000000  00000000  00266165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0007110f  00000000  00000000  0028708f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f80  00000000  00000000  002f819e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000114d0  00000000  00000000  002fd11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004ff92  00000000  00000000  0030e5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00087977  00000000  00000000  0035e580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c0f3  00000000  00000000  003e5ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000fd74  00000000  00000000  00541fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00f fffd 	bl	c4030 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f010 f81f 	bl	c4080 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db54 	.word	0x2003db54
   b404c:	000c84a8 	.word	0x000c84a8
   b4050:	2003dd58 	.word	0x2003dd58
   b4054:	2003dd58 	.word	0x2003dd58
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00d fcb7 	bl	c19d4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c845c 	.word	0x000c845c
   b4080:	000c8480 	.word	0x000c8480

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bfa4 	b.w	b5fd0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 ff25 	bl	b5ed8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00d bc57 	b.w	c1944 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f009 beb7 	b.w	bde08 <malloc>

000b409a <_Znaj>:
   b409a:	f009 beb5 	b.w	bde08 <malloc>

000b409e <_ZdaPv>:
   b409e:	f009 bebb 	b.w	bde18 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f009 beb9 	b.w	bde18 <free>
	...

000b40a8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f009 fda4 	bl	bdbfc <panic_>
  while (1);
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bd83d 	.word	0x000bd83d
   b40bc:	000c61e0 	.word	0x000c61e0

000b40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f8:	4770      	bx	lr
	...

000b40fc <_Z13StatusHandlerv>:
        memcpy(txBuf_tmp,dataOut,strlen(dataOut));
        bledbgCharacteristic.setValue(txBuf_tmp, strlen(dataOut));
    #endif
}

void StatusHandler(){
   b40fc:	b508      	push	{r3, lr}
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   b40fe:	4b13      	ldr	r3, [pc, #76]	; (b414c <_Z13StatusHandlerv+0x50>)
   b4100:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b4102:	4b13      	ldr	r3, [pc, #76]	; (b4150 <_Z13StatusHandlerv+0x54>)
   b4104:	781b      	ldrb	r3, [r3, #0]
   b4106:	009b      	lsls	r3, r3, #2
   b4108:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    statusFlags = LTEAvail;
   b410c:	4a11      	ldr	r2, [pc, #68]	; (b4154 <_Z13StatusHandlerv+0x58>)
    statusFlags |= BLEAvail << 2;
   b410e:	7812      	ldrb	r2, [r2, #0]
   b4110:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;
   b4112:	4a11      	ldr	r2, [pc, #68]	; (b4158 <_Z13StatusHandlerv+0x5c>)
   b4114:	7812      	ldrb	r2, [r2, #0]
   b4116:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;
   b411a:	4a10      	ldr	r2, [pc, #64]	; (b415c <_Z13StatusHandlerv+0x60>)
   b411c:	7812      	ldrb	r2, [r2, #0]
   b411e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;
   b4122:	4a0f      	ldr	r2, [pc, #60]	; (b4160 <_Z13StatusHandlerv+0x64>)
   b4124:	7812      	ldrb	r2, [r2, #0]
   b4126:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;
   b412a:	4a0e      	ldr	r2, [pc, #56]	; (b4164 <_Z13StatusHandlerv+0x68>)
   b412c:	7812      	ldrb	r2, [r2, #0]
   b412e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   b4132:	4a0d      	ldr	r2, [pc, #52]	; (b4168 <_Z13StatusHandlerv+0x6c>)
   b4134:	7013      	strb	r3, [r2, #0]
    statusReady = true;
   b4136:	4b0d      	ldr	r3, [pc, #52]	; (b416c <_Z13StatusHandlerv+0x70>)
   b4138:	2201      	movs	r2, #1
   b413a:	701a      	strb	r2, [r3, #0]
    Serial.println("Sending a status update!");
   b413c:	f00d fbba 	bl	c18b4 <_Z16_fetch_usbserialv>
}
   b4140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Sending a status update!");
   b4144:	490a      	ldr	r1, [pc, #40]	; (b4170 <_Z13StatusHandlerv+0x74>)
   b4146:	f00c bf0c 	b.w	c0f62 <_ZN5Print7printlnEPKc>
   b414a:	bf00      	nop
   b414c:	2003dda4 	.word	0x2003dda4
   b4150:	2003dd64 	.word	0x2003dd64
   b4154:	2003dd94 	.word	0x2003dd94
   b4158:	2003e0d8 	.word	0x2003e0d8
   b415c:	2003db60 	.word	0x2003db60
   b4160:	2003df04 	.word	0x2003df04
   b4164:	2003defd 	.word	0x2003defd
   b4168:	2003e5a8 	.word	0x2003e5a8
   b416c:	2003e5c8 	.word	0x2003e5c8
   b4170:	000c61f5 	.word	0x000c61f5

000b4174 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4174:	b510      	push	{r4, lr}
  }
   b4176:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4178:	4604      	mov	r4, r0
  }
   b417a:	f7ff ff92 	bl	b40a2 <_ZdlPvj>
   b417e:	4620      	mov	r0, r4
   b4180:	bd10      	pop	{r4, pc}

000b4182 <_ZN4FileD0Ev>:
   b4182:	b510      	push	{r4, lr}
   b4184:	2134      	movs	r1, #52	; 0x34
   b4186:	4604      	mov	r4, r0
   b4188:	f7ff ff8b 	bl	b40a2 <_ZdlPvj>
   b418c:	4620      	mov	r0, r4
   b418e:	bd10      	pop	{r4, pc}

000b4190 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4190:	3010      	adds	r0, #16
   b4192:	f002 bde5 	b.w	b6d60 <_ZN7FatFile5writeEPKvj>

000b4196 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4196:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4198:	2201      	movs	r2, #1
   b419a:	f88d 1007 	strb.w	r1, [sp, #7]
   b419e:	3010      	adds	r0, #16
   b41a0:	f10d 0107 	add.w	r1, sp, #7
   b41a4:	f002 fddc 	bl	b6d60 <_ZN7FatFile5writeEPKvj>
  }
   b41a8:	b003      	add	sp, #12
   b41aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b41ae <_ZN4File5flushEv>:
    FatFile::sync();
   b41ae:	3010      	adds	r0, #16
   b41b0:	f002 bd4c 	b.w	b6c4c <_ZN7FatFile4syncEv>

000b41b4 <_ZN4File4peekEv>:
    return FatFile::peek();
   b41b4:	3010      	adds	r0, #16
   b41b6:	f002 bc2d 	b.w	b6a14 <_ZN7FatFile4peekEv>

000b41ba <_ZN4File4readEv>:
  int read() {
   b41ba:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b41bc:	2201      	movs	r2, #1
   b41be:	f10d 0107 	add.w	r1, sp, #7
   b41c2:	3010      	adds	r0, #16
   b41c4:	f002 fb78 	bl	b68b8 <_ZN7FatFile4readEPvj>
   b41c8:	2801      	cmp	r0, #1
   b41ca:	bf0c      	ite	eq
   b41cc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b41d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  }
   b41d4:	b003      	add	sp, #12
   b41d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b41da <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b41da:	6943      	ldr	r3, [r0, #20]
   b41dc:	b113      	cbz	r3, b41e4 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41de:	6983      	ldr	r3, [r0, #24]
   b41e0:	300c      	adds	r0, #12
   b41e2:	4718      	bx	r3
            callback();
        }
    }
   b41e4:	4770      	bx	lr

000b41e6 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41e6:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41e8:	2100      	movs	r1, #0
   b41ea:	4604      	mov	r4, r0
   b41ec:	4608      	mov	r0, r1
   b41ee:	f009 facd 	bl	bd78c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41f2:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b41f4:	4620      	mov	r0, r4
   b41f6:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b41f8:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b41fa:	f009 fadf 	bl	bd7bc <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41fe:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4200:	b10c      	cbz	r4, b4206 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4202:	2301      	movs	r3, #1
   b4204:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4206:	2100      	movs	r1, #0
   b4208:	2001      	movs	r0, #1
   b420a:	f009 fabf 	bl	bd78c <os_thread_scheduling>
            }
        }
        if (t) {
   b420e:	b12c      	cbz	r4, b421c <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4210:	6823      	ldr	r3, [r4, #0]
   b4212:	4620      	mov	r0, r4
   b4214:	689b      	ldr	r3, [r3, #8]
   b4216:	4798      	blx	r3
            t->running = false;
   b4218:	2300      	movs	r3, #0
   b421a:	7123      	strb	r3, [r4, #4]
        }
    }
   b421c:	b002      	add	sp, #8
   b421e:	bd10      	pop	{r4, pc}

000b4220 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4220:	2a01      	cmp	r2, #1
   b4222:	d102      	bne.n	b422a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4224:	6001      	str	r1, [r0, #0]
      }
   b4226:	2000      	movs	r0, #0
   b4228:	4770      	bx	lr
	  switch (__op)
   b422a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b422c:	bf04      	itt	eq
   b422e:	680b      	ldreq	r3, [r1, #0]
   b4230:	6003      	streq	r3, [r0, #0]
	      break;
   b4232:	e7f8      	b.n	b4226 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4234 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4234:	6803      	ldr	r3, [r0, #0]
   b4236:	4718      	bx	r3

000b4238 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4238:	6803      	ldr	r3, [r0, #0]
   b423a:	b2c9      	uxtb	r1, r1
   b423c:	689b      	ldr	r3, [r3, #8]
   b423e:	4718      	bx	r3

000b4240 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4240:	b510      	push	{r4, lr}
   b4242:	4b05      	ldr	r3, [pc, #20]	; (b4258 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b4244:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b4246:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4248:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b424a:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b424e:	f009 fcf5 	bl	bdc3c <led_set_status_active>
}
   b4252:	4620      	mov	r0, r4
   b4254:	bd10      	pop	{r4, pc}
   b4256:	bf00      	nop
   b4258:	000c686c 	.word	0x000c686c

000b425c <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b425c:	b510      	push	{r4, lr}
   b425e:	4604      	mov	r4, r0
}
   b4260:	f7ff ffee 	bl	b4240 <_ZN8particle9LEDStatusD1Ev>
   b4264:	4620      	mov	r0, r4
   b4266:	2120      	movs	r1, #32
   b4268:	f7ff ff1b 	bl	b40a2 <_ZdlPvj>
   b426c:	4620      	mov	r0, r4
   b426e:	bd10      	pop	{r4, pc}

000b4270 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4270:	4b0a      	ldr	r3, [pc, #40]	; (b429c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4272:	b510      	push	{r4, lr}
   b4274:	4604      	mov	r4, r0
   b4276:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4278:	f00b ff7c 	bl	c0174 <_ZN5spark10LogManager8instanceEv>
   b427c:	4621      	mov	r1, r4
   b427e:	f00c f9b4 	bl	c05ea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4282:	f00d fb17 	bl	c18b4 <_Z16_fetch_usbserialv>
   b4286:	f00d fb09 	bl	c189c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b428a:	4620      	mov	r0, r4
   b428c:	4b04      	ldr	r3, [pc, #16]	; (b42a0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b428e:	f840 3b04 	str.w	r3, [r0], #4
   b4292:	f00c f845 	bl	c0320 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4296:	4620      	mov	r0, r4
   b4298:	bd10      	pop	{r4, pc}
   b429a:	bf00      	nop
   b429c:	000c6880 	.word	0x000c6880
   b42a0:	000c6854 	.word	0x000c6854

000b42a4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42a4:	b510      	push	{r4, lr}
   b42a6:	4604      	mov	r4, r0
    }
   b42a8:	f7ff ffe2 	bl	b4270 <_ZN5spark16SerialLogHandlerD1Ev>
   b42ac:	4620      	mov	r0, r4
   b42ae:	2124      	movs	r1, #36	; 0x24
   b42b0:	f7ff fef7 	bl	b40a2 <_ZdlPvj>
   b42b4:	4620      	mov	r0, r4
   b42b6:	bd10      	pop	{r4, pc}

000b42b8 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42ba:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42bc:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42be:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42c0:	b130      	cbz	r0, b42d0 <_ZN5Timer5startEj.isra.0+0x18>
   b42c2:	2300      	movs	r3, #0
   b42c4:	e9cd 3300 	strd	r3, r3, [sp]
   b42c8:	461a      	mov	r2, r3
   b42ca:	2102      	movs	r1, #2
   b42cc:	f009 fa7e 	bl	bd7cc <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42d0:	68a0      	ldr	r0, [r4, #8]
   b42d2:	b130      	cbz	r0, b42e2 <_ZN5Timer5startEj.isra.0+0x2a>
   b42d4:	2300      	movs	r3, #0
   b42d6:	e9cd 5300 	strd	r5, r3, [sp]
   b42da:	461a      	mov	r2, r3
   b42dc:	4619      	mov	r1, r3
   b42de:	f009 fa75 	bl	bd7cc <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42e2:	b003      	add	sp, #12
   b42e4:	bd30      	pop	{r4, r5, pc}

000b42e6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42e6:	b40e      	push	{r1, r2, r3}
   b42e8:	b503      	push	{r0, r1, lr}
   b42ea:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42ec:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42ee:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42f2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42f4:	f00c fe5f 	bl	c0fb6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42f8:	b002      	add	sp, #8
   b42fa:	f85d eb04 	ldr.w	lr, [sp], #4
   b42fe:	b003      	add	sp, #12
   b4300:	4770      	bx	lr
	...

000b4304 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4304:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4306:	4604      	mov	r4, r0
   b4308:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b430a:	7922      	ldrb	r2, [r4, #4]
   b430c:	68a3      	ldr	r3, [r4, #8]
   b430e:	b132      	cbz	r2, b431e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4310:	b9a3      	cbnz	r3, b433c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4312:	490b      	ldr	r1, [pc, #44]	; (b4340 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4314:	b002      	add	sp, #8
   b4316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b431a:	f00c be0b 	b.w	c0f34 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b431e:	4a09      	ldr	r2, [pc, #36]	; (b4344 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4320:	7b26      	ldrb	r6, [r4, #12]
   b4322:	4d09      	ldr	r5, [pc, #36]	; (b4348 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4324:	4909      	ldr	r1, [pc, #36]	; (b434c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4326:	7b64      	ldrb	r4, [r4, #13]
   b4328:	2e01      	cmp	r6, #1
   b432a:	bf18      	it	ne
   b432c:	4629      	movne	r1, r5
   b432e:	e9cd 1400 	strd	r1, r4, [sp]
   b4332:	4907      	ldr	r1, [pc, #28]	; (b4350 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4334:	f7ff ffd7 	bl	b42e6 <_ZN5Print6printfEPKcz>
  }
   b4338:	b002      	add	sp, #8
   b433a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b433c:	4a05      	ldr	r2, [pc, #20]	; (b4354 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b433e:	e7ef      	b.n	b4320 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4340:	000c621f 	.word	0x000c621f
   b4344:	000c79f3 	.word	0x000c79f3
   b4348:	000c621b 	.word	0x000c621b
   b434c:	000c6217 	.word	0x000c6217
   b4350:	000c6235 	.word	0x000c6235
   b4354:	000c620e 	.word	0x000c620e

000b4358 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4358:	b40e      	push	{r1, r2, r3}
   b435a:	b503      	push	{r0, r1, lr}
   b435c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b435e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4360:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4364:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4366:	f00c fe26 	bl	c0fb6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b436a:	b002      	add	sp, #8
   b436c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4370:	b003      	add	sp, #12
   b4372:	4770      	bx	lr

000b4374 <_Z13motionHandlerv>:
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
        logFile.close();
    }
}

void motionHandler(){
   b4374:	b570      	push	{r4, r5, r6, lr}
    if(driveMode == 0 && setLSpeed != 90 && setRSpeed != 90 && millis() - lastMtrTime > MTR_TIMEOUT){
   b4376:	4d2b      	ldr	r5, [pc, #172]	; (b4424 <_Z13motionHandlerv+0xb0>)
   b4378:	782b      	ldrb	r3, [r5, #0]
   b437a:	bb3b      	cbnz	r3, b43cc <_Z13motionHandlerv+0x58>
   b437c:	4e2a      	ldr	r6, [pc, #168]	; (b4428 <_Z13motionHandlerv+0xb4>)
   b437e:	7833      	ldrb	r3, [r6, #0]
   b4380:	2b5a      	cmp	r3, #90	; 0x5a
   b4382:	d023      	beq.n	b43cc <_Z13motionHandlerv+0x58>
   b4384:	4c29      	ldr	r4, [pc, #164]	; (b442c <_Z13motionHandlerv+0xb8>)
   b4386:	7823      	ldrb	r3, [r4, #0]
   b4388:	2b5a      	cmp	r3, #90	; 0x5a
   b438a:	d01f      	beq.n	b43cc <_Z13motionHandlerv+0x58>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b438c:	f009 fa66 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   b4390:	4b27      	ldr	r3, [pc, #156]	; (b4430 <_Z13motionHandlerv+0xbc>)
   b4392:	681b      	ldr	r3, [r3, #0]
   b4394:	1ac0      	subs	r0, r0, r3
   b4396:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b439a:	d917      	bls.n	b43cc <_Z13motionHandlerv+0x58>
        setLSpeed = 90;
        setRSpeed = 90;
        leftMotorSpeed = 90;
   b439c:	4b25      	ldr	r3, [pc, #148]	; (b4434 <_Z13motionHandlerv+0xc0>)
        rightMotorSpeed = 90;
        updateMotorControl = true;
        ESCL.write(setLSpeed);
   b439e:	4826      	ldr	r0, [pc, #152]	; (b4438 <_Z13motionHandlerv+0xc4>)
        setLSpeed = 90;
   b43a0:	215a      	movs	r1, #90	; 0x5a
        leftMotorSpeed = 90;
   b43a2:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b43a4:	4b25      	ldr	r3, [pc, #148]	; (b443c <_Z13motionHandlerv+0xc8>)
        setLSpeed = 90;
   b43a6:	7031      	strb	r1, [r6, #0]
        rightMotorSpeed = 90;
   b43a8:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b43aa:	4b25      	ldr	r3, [pc, #148]	; (b4440 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b43ac:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b43ae:	2201      	movs	r2, #1
   b43b0:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b43b2:	f00c fe48 	bl	c1046 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b43b6:	7821      	ldrb	r1, [r4, #0]
   b43b8:	4822      	ldr	r0, [pc, #136]	; (b4444 <_Z13motionHandlerv+0xd0>)
   b43ba:	f00c fe44 	bl	c1046 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, motor command has not been received in over %dms, cutting motors", MTR_TIMEOUT);
   b43be:	f00d fa79 	bl	c18b4 <_Z16_fetch_usbserialv>
   b43c2:	4921      	ldr	r1, [pc, #132]	; (b4448 <_Z13motionHandlerv+0xd4>)
   b43c4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b43c8:	f7ff ffc6 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    }
    if(!telemetryAvail && driveMode != 0 && millis() - lastTelemTime > MTR_TIMEOUT){
   b43cc:	4e1f      	ldr	r6, [pc, #124]	; (b444c <_Z13motionHandlerv+0xd8>)
   b43ce:	7834      	ldrb	r4, [r6, #0]
   b43d0:	bb3c      	cbnz	r4, b4422 <_Z13motionHandlerv+0xae>
   b43d2:	782b      	ldrb	r3, [r5, #0]
   b43d4:	b32b      	cbz	r3, b4422 <_Z13motionHandlerv+0xae>
   b43d6:	f009 fa41 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   b43da:	4b1d      	ldr	r3, [pc, #116]	; (b4450 <_Z13motionHandlerv+0xdc>)
   b43dc:	681b      	ldr	r3, [r3, #0]
   b43de:	1ac0      	subs	r0, r0, r3
   b43e0:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b43e4:	d91d      	bls.n	b4422 <_Z13motionHandlerv+0xae>
        driveMode = 0;
        telemetryAvail = false;
        pointArrived = false;
   b43e6:	4b1b      	ldr	r3, [pc, #108]	; (b4454 <_Z13motionHandlerv+0xe0>)
        driveMode = 0;
   b43e8:	702c      	strb	r4, [r5, #0]
        pointArrived = false;
   b43ea:	701c      	strb	r4, [r3, #0]
        setLSpeed = 90;
   b43ec:	4b0e      	ldr	r3, [pc, #56]	; (b4428 <_Z13motionHandlerv+0xb4>)
        telemetryAvail = false;
   b43ee:	7034      	strb	r4, [r6, #0]
        setLSpeed = 90;
   b43f0:	215a      	movs	r1, #90	; 0x5a
   b43f2:	7019      	strb	r1, [r3, #0]
        setRSpeed = 90;
        leftMotorSpeed = 90;
   b43f4:	4b0f      	ldr	r3, [pc, #60]	; (b4434 <_Z13motionHandlerv+0xc0>)
        setRSpeed = 90;
   b43f6:	4c0d      	ldr	r4, [pc, #52]	; (b442c <_Z13motionHandlerv+0xb8>)
        leftMotorSpeed = 90;
   b43f8:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b43fa:	4b10      	ldr	r3, [pc, #64]	; (b443c <_Z13motionHandlerv+0xc8>)
        updateMotorControl = true;
        ESCL.write(setLSpeed);
   b43fc:	480e      	ldr	r0, [pc, #56]	; (b4438 <_Z13motionHandlerv+0xc4>)
        rightMotorSpeed = 90;
   b43fe:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4400:	4b0f      	ldr	r3, [pc, #60]	; (b4440 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b4402:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b4404:	2201      	movs	r2, #1
   b4406:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b4408:	f00c fe1d 	bl	c1046 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b440c:	7821      	ldrb	r1, [r4, #0]
   b440e:	480d      	ldr	r0, [pc, #52]	; (b4444 <_Z13motionHandlerv+0xd0>)
   b4410:	f00c fe19 	bl	c1046 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, GPS or Compass data not available for greater than %dms, exiting autonomous mode", MTR_TIMEOUT);
   b4414:	f00d fa4e 	bl	c18b4 <_Z16_fetch_usbserialv>
   b4418:	490f      	ldr	r1, [pc, #60]	; (b4458 <_Z13motionHandlerv+0xe4>)
   b441a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b441e:	f7ff ff9b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    }
}
   b4422:	bd70      	pop	{r4, r5, r6, pc}
   b4424:	2003db60 	.word	0x2003db60
   b4428:	2003e580 	.word	0x2003e580
   b442c:	2003e581 	.word	0x2003e581
   b4430:	2003de18 	.word	0x2003de18
   b4434:	2003de44 	.word	0x2003de44
   b4438:	2003dd74 	.word	0x2003dd74
   b443c:	2003e0db 	.word	0x2003e0db
   b4440:	2003e5ec 	.word	0x2003e5ec
   b4444:	2003dd84 	.word	0x2003dd84
   b4448:	000c6252 	.word	0x000c6252
   b444c:	2003e5d8 	.word	0x2003e5d8
   b4450:	2003de20 	.word	0x2003de20
   b4454:	2003e0d9 	.word	0x2003e0d9
   b4458:	000c629c 	.word	0x000c629c

000b445c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b445c:	b510      	push	{r4, lr}
      if (_M_manager)
   b445e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4460:	4604      	mov	r4, r0
      if (_M_manager)
   b4462:	b113      	cbz	r3, b446a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4464:	2203      	movs	r2, #3
   b4466:	4601      	mov	r1, r0
   b4468:	4798      	blx	r3
    }
   b446a:	4620      	mov	r0, r4
   b446c:	bd10      	pop	{r4, pc}
	...

000b4470 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4470:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4472:	4b13      	ldr	r3, [pc, #76]	; (b44c0 <_ZN5TimerD1Ev+0x50>)
   b4474:	6003      	str	r3, [r0, #0]
   b4476:	4604      	mov	r4, r0
        if (handle) {
   b4478:	6880      	ldr	r0, [r0, #8]
   b447a:	b1c8      	cbz	r0, b44b0 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b447c:	2500      	movs	r5, #0
   b447e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4482:	e9cd 3500 	strd	r3, r5, [sp]
   b4486:	2102      	movs	r1, #2
   b4488:	462b      	mov	r3, r5
   b448a:	462a      	mov	r2, r5
   b448c:	f009 f99e 	bl	bd7cc <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4490:	68a0      	ldr	r0, [r4, #8]
   b4492:	4629      	mov	r1, r5
   b4494:	f009 f9c2 	bl	bd81c <os_timer_set_id>
            while (running) {
   b4498:	7923      	ldrb	r3, [r4, #4]
   b449a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b449e:	b113      	cbz	r3, b44a6 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b44a0:	f009 f96c 	bl	bd77c <os_thread_yield>
            while (running) {
   b44a4:	e7f8      	b.n	b4498 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b44a6:	68a0      	ldr	r0, [r4, #8]
   b44a8:	4629      	mov	r1, r5
   b44aa:	f009 f97f 	bl	bd7ac <os_timer_destroy>
            handle = nullptr;
   b44ae:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b44b0:	f104 000c 	add.w	r0, r4, #12
   b44b4:	f7ff ffd2 	bl	b445c <_ZNSt14_Function_baseD1Ev>
    }
   b44b8:	4620      	mov	r0, r4
   b44ba:	b003      	add	sp, #12
   b44bc:	bd30      	pop	{r4, r5, pc}
   b44be:	bf00      	nop
   b44c0:	000c6840 	.word	0x000c6840

000b44c4 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b44c4:	b510      	push	{r4, lr}
   b44c6:	4604      	mov	r4, r0
    }
   b44c8:	f7ff ffd2 	bl	b4470 <_ZN5TimerD1Ev>
   b44cc:	4620      	mov	r0, r4
   b44ce:	211c      	movs	r1, #28
   b44d0:	f7ff fde7 	bl	b40a2 <_ZdlPvj>
   b44d4:	4620      	mov	r0, r4
   b44d6:	bd10      	pop	{r4, pc}

000b44d8 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b44d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b44da:	468c      	mov	ip, r1
   b44dc:	2500      	movs	r5, #0
   b44de:	4914      	ldr	r1, [pc, #80]	; (b4530 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b44e0:	7105      	strb	r5, [r0, #4]
   b44e2:	4604      	mov	r4, r0
   b44e4:	6085      	str	r5, [r0, #8]
   b44e6:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b44e8:	e892 0003 	ldmia.w	r2, {r0, r1}
   b44ec:	b085      	sub	sp, #20
   b44ee:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b44f0:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b44f4:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b44f8:	e896 0003 	ldmia.w	r6, {r0, r1}
   b44fc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4500:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4504:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4508:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b450a:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b450c:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b450e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4510:	6095      	str	r5, [r2, #8]
   b4512:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4514:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4516:	e9cd 3500 	strd	r3, r5, [sp]
   b451a:	4a06      	ldr	r2, [pc, #24]	; (b4534 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b451c:	4623      	mov	r3, r4
   b451e:	4661      	mov	r1, ip
   b4520:	f104 0008 	add.w	r0, r4, #8
   b4524:	f009 f93a 	bl	bd79c <os_timer_create>
    }
   b4528:	4620      	mov	r0, r4
   b452a:	b005      	add	sp, #20
   b452c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b452e:	bf00      	nop
   b4530:	000c6840 	.word	0x000c6840
   b4534:	000b41e7 	.word	0x000b41e7

000b4538 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b4538:	b510      	push	{r4, lr}
   b453a:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b453c:	2200      	movs	r2, #0
   b453e:	7c40      	ldrb	r0, [r0, #17]
   b4540:	f009 fbb6 	bl	bdcb0 <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b4544:	7c63      	ldrb	r3, [r4, #17]
   b4546:	2b0f      	cmp	r3, #15
        d_.period = period;
   b4548:	bf18      	it	ne
   b454a:	8320      	strhne	r0, [r4, #24]
}
   b454c:	bd10      	pop	{r4, pc}
	...

000b4550 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   b4550:	b510      	push	{r4, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(signalLED){
   b4552:	4b24      	ldr	r3, [pc, #144]	; (b45e4 <_Z10LEDHandlerv+0x94>)
   b4554:	4a24      	ldr	r2, [pc, #144]	; (b45e8 <_Z10LEDHandlerv+0x98>)
   b4556:	781b      	ldrb	r3, [r3, #0]
   b4558:	b15b      	cbz	r3, b4572 <_Z10LEDHandlerv+0x22>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b455a:	7c53      	ldrb	r3, [r2, #17]
   b455c:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b455e:	bf1c      	itt	ne
   b4560:	2302      	movne	r3, #2
   b4562:	7453      	strbne	r3, [r2, #17]
    d_.color = color;
   b4564:	4b21      	ldr	r3, [pc, #132]	; (b45ec <_Z10LEDHandlerv+0x9c>)
   b4566:	6153      	str	r3, [r2, #20]
        return;
    }
    if(offloadMode){
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
   b4568:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b456a:	481f      	ldr	r0, [pc, #124]	; (b45e8 <_Z10LEDHandlerv+0x98>)
   b456c:	f7ff ffe4 	bl	b4538 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4570:	bd10      	pop	{r4, pc}
    if(offloadMode){
   b4572:	4b1f      	ldr	r3, [pc, #124]	; (b45f0 <_Z10LEDHandlerv+0xa0>)
   b4574:	781b      	ldrb	r3, [r3, #0]
   b4576:	b133      	cbz	r3, b4586 <_Z10LEDHandlerv+0x36>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4578:	7c53      	ldrb	r3, [r2, #17]
   b457a:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b457c:	bf1c      	itt	ne
   b457e:	2302      	movne	r3, #2
   b4580:	7453      	strbne	r3, [r2, #17]
    d_.color = color;
   b4582:	23ff      	movs	r3, #255	; 0xff
   b4584:	e7ef      	b.n	b4566 <_Z10LEDHandlerv+0x16>
    if(lowBattery){
   b4586:	4b1b      	ldr	r3, [pc, #108]	; (b45f4 <_Z10LEDHandlerv+0xa4>)
   b4588:	781b      	ldrb	r3, [r3, #0]
   b458a:	bb23      	cbnz	r3, b45d6 <_Z10LEDHandlerv+0x86>
    else if(logSensors){
   b458c:	4b1a      	ldr	r3, [pc, #104]	; (b45f8 <_Z10LEDHandlerv+0xa8>)
   b458e:	781b      	ldrb	r3, [r3, #0]
   b4590:	bb23      	cbnz	r3, b45dc <_Z10LEDHandlerv+0x8c>
    else if(driveMode == 0){
   b4592:	4b1a      	ldr	r3, [pc, #104]	; (b45fc <_Z10LEDHandlerv+0xac>)
   b4594:	781b      	ldrb	r3, [r3, #0]
        SetSpeed = LED_SPEED_NORMAL;
   b4596:	2b00      	cmp	r3, #0
   b4598:	bf0b      	itete	eq
   b459a:	210a      	moveq	r1, #10
   b459c:	2114      	movne	r1, #20
   b459e:	2002      	moveq	r0, #2
   b45a0:	2003      	movne	r0, #3
    statusMode |= XBeeAvail << 1;
   b45a2:	4b17      	ldr	r3, [pc, #92]	; (b4600 <_Z10LEDHandlerv+0xb0>)
   b45a4:	781c      	ldrb	r4, [r3, #0]
    statusMode |= BLEAvail << 2;
   b45a6:	4b17      	ldr	r3, [pc, #92]	; (b4604 <_Z10LEDHandlerv+0xb4>)
   b45a8:	781b      	ldrb	r3, [r3, #0]
   b45aa:	009b      	lsls	r3, r3, #2
   b45ac:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    statusMode = LTEAvail;
   b45b0:	4c15      	ldr	r4, [pc, #84]	; (b4608 <_Z10LEDHandlerv+0xb8>)
    statusMode |= BLEAvail << 2;
   b45b2:	7824      	ldrb	r4, [r4, #0]
   b45b4:	4323      	orrs	r3, r4
   b45b6:	3b01      	subs	r3, #1
   b45b8:	b2db      	uxtb	r3, r3
   b45ba:	2b06      	cmp	r3, #6
   b45bc:	bf9c      	itt	ls
   b45be:	4c13      	ldrls	r4, [pc, #76]	; (b460c <_Z10LEDHandlerv+0xbc>)
   b45c0:	f854 3023 	ldrls.w	r3, [r4, r3, lsl #2]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45c4:	7c54      	ldrb	r4, [r2, #17]
    switch (statusMode){
   b45c6:	bf88      	it	hi
   b45c8:	f44f 037f 	movhi.w	r3, #16711680	; 0xff0000
   b45cc:	2c0f      	cmp	r4, #15
        d_.pattern = pattern;
   b45ce:	bf18      	it	ne
   b45d0:	7450      	strbne	r0, [r2, #17]
    d_.color = color;
   b45d2:	6153      	str	r3, [r2, #20]
   b45d4:	e7c9      	b.n	b456a <_Z10LEDHandlerv+0x1a>
        SetSpeed = LED_SPEED_NORMAL;
   b45d6:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_BLINK;
   b45d8:	2002      	movs	r0, #2
   b45da:	e7e2      	b.n	b45a2 <_Z10LEDHandlerv+0x52>
        SetSpeed = LED_SPEED_NORMAL;
   b45dc:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_SOLID;
   b45de:	2001      	movs	r0, #1
   b45e0:	e7df      	b.n	b45a2 <_Z10LEDHandlerv+0x52>
   b45e2:	bf00      	nop
   b45e4:	2003e582 	.word	0x2003e582
   b45e8:	2003e588 	.word	0x2003e588
   b45ec:	00ff6000 	.word	0x00ff6000
   b45f0:	2003e0d8 	.word	0x2003e0d8
   b45f4:	2003df04 	.word	0x2003df04
   b45f8:	2003defd 	.word	0x2003defd
   b45fc:	2003db60 	.word	0x2003db60
   b4600:	2003dda4 	.word	0x2003dda4
   b4604:	2003dd64 	.word	0x2003dd64
   b4608:	2003dd94 	.word	0x2003dd94
   b460c:	000c6974 	.word	0x000c6974

000b4610 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b4610:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b4612:	460a      	mov	r2, r1
   b4614:	4901      	ldr	r1, [pc, #4]	; (b461c <_ZN7FatFile4openEPKci+0xc>)
   b4616:	6809      	ldr	r1, [r1, #0]
   b4618:	f002 bb55 	b.w	b6cc6 <_ZN7FatFile4openEPS_PKci>
   b461c:	2003e610 	.word	0x2003e610

000b4620 <_Z11wdogHandlerv>:
void wdogHandler(){
   b4620:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4622:	f009 fb69 	bl	bdcf8 <spark_cloud_flag_connected>
   b4626:	4c2b      	ldr	r4, [pc, #172]	; (b46d4 <_Z11wdogHandlerv+0xb4>)
    if(Particle.connected()) LTEAvail = true;
   b4628:	b1e0      	cbz	r0, b4664 <_Z11wdogHandlerv+0x44>
   b462a:	2301      	movs	r3, #1
        LTEAvail = false;
   b462c:	7023      	strb	r3, [r4, #0]
   b462e:	f009 f915 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){
   b4632:	4b29      	ldr	r3, [pc, #164]	; (b46d8 <_Z11wdogHandlerv+0xb8>)
   b4634:	4c29      	ldr	r4, [pc, #164]	; (b46dc <_Z11wdogHandlerv+0xbc>)
   b4636:	681b      	ldr	r3, [r3, #0]
   b4638:	f247 5230 	movw	r2, #30000	; 0x7530
   b463c:	1ac0      	subs	r0, r0, r3
   b463e:	4290      	cmp	r0, r2
   b4640:	d823      	bhi.n	b468a <_Z11wdogHandlerv+0x6a>
   b4642:	b313      	cbz	r3, b468a <_Z11wdogHandlerv+0x6a>
    else XBeeAvail = true;
   b4644:	2301      	movs	r3, #1
        XBeeAvail = false;
   b4646:	7023      	strb	r3, [r4, #0]
   b4648:	f009 f908 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){
   b464c:	4b24      	ldr	r3, [pc, #144]	; (b46e0 <_Z11wdogHandlerv+0xc0>)
   b464e:	4c25      	ldr	r4, [pc, #148]	; (b46e4 <_Z11wdogHandlerv+0xc4>)
   b4650:	681b      	ldr	r3, [r3, #0]
   b4652:	f247 5230 	movw	r2, #30000	; 0x7530
   b4656:	1ac0      	subs	r0, r0, r3
   b4658:	4290      	cmp	r0, r2
   b465a:	d828      	bhi.n	b46ae <_Z11wdogHandlerv+0x8e>
   b465c:	b33b      	cbz	r3, b46ae <_Z11wdogHandlerv+0x8e>
    else BLEAvail = true;
   b465e:	2301      	movs	r3, #1
        BLEAvail = false;
   b4660:	7023      	strb	r3, [r4, #0]
}
   b4662:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b4664:	7823      	ldrb	r3, [r4, #0]
   b4666:	2b00      	cmp	r3, #0
   b4668:	d0e1      	beq.n	b462e <_Z11wdogHandlerv+0xe>
    return m_attr;
   b466a:	481f      	ldr	r0, [pc, #124]	; (b46e8 <_Z11wdogHandlerv+0xc8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b466c:	7c03      	ldrb	r3, [r0, #16]
   b466e:	b92b      	cbnz	r3, b467c <_Z11wdogHandlerv+0x5c>
   b4670:	491e      	ldr	r1, [pc, #120]	; (b46ec <_Z11wdogHandlerv+0xcc>)
   b4672:	f244 2202 	movw	r2, #16898	; 0x4202
   b4676:	3010      	adds	r0, #16
   b4678:	f7ff ffca 	bl	b4610 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b467c:	491c      	ldr	r1, [pc, #112]	; (b46f0 <_Z11wdogHandlerv+0xd0>)
   b467e:	481a      	ldr	r0, [pc, #104]	; (b46e8 <_Z11wdogHandlerv+0xc8>)
   b4680:	221e      	movs	r2, #30
   b4682:	f7ff fe69 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b4686:	2300      	movs	r3, #0
   b4688:	e7d0      	b.n	b462c <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b468a:	7823      	ldrb	r3, [r4, #0]
   b468c:	b16b      	cbz	r3, b46aa <_Z11wdogHandlerv+0x8a>
   b468e:	4816      	ldr	r0, [pc, #88]	; (b46e8 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4690:	7c03      	ldrb	r3, [r0, #16]
   b4692:	b92b      	cbnz	r3, b46a0 <_Z11wdogHandlerv+0x80>
   b4694:	4915      	ldr	r1, [pc, #84]	; (b46ec <_Z11wdogHandlerv+0xcc>)
   b4696:	f244 2202 	movw	r2, #16898	; 0x4202
   b469a:	3010      	adds	r0, #16
   b469c:	f7ff ffb8 	bl	b4610 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b46a0:	4913      	ldr	r1, [pc, #76]	; (b46f0 <_Z11wdogHandlerv+0xd0>)
   b46a2:	4811      	ldr	r0, [pc, #68]	; (b46e8 <_Z11wdogHandlerv+0xc8>)
   b46a4:	221e      	movs	r2, #30
   b46a6:	f7ff fe57 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b46aa:	2300      	movs	r3, #0
   b46ac:	e7cb      	b.n	b4646 <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b46ae:	7822      	ldrb	r2, [r4, #0]
   b46b0:	b172      	cbz	r2, b46d0 <_Z11wdogHandlerv+0xb0>
   b46b2:	b16b      	cbz	r3, b46d0 <_Z11wdogHandlerv+0xb0>
   b46b4:	480c      	ldr	r0, [pc, #48]	; (b46e8 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b46b6:	7c03      	ldrb	r3, [r0, #16]
   b46b8:	b92b      	cbnz	r3, b46c6 <_Z11wdogHandlerv+0xa6>
   b46ba:	490c      	ldr	r1, [pc, #48]	; (b46ec <_Z11wdogHandlerv+0xcc>)
   b46bc:	f244 2202 	movw	r2, #16898	; 0x4202
   b46c0:	3010      	adds	r0, #16
   b46c2:	f7ff ffa5 	bl	b4610 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b46c6:	490b      	ldr	r1, [pc, #44]	; (b46f4 <_Z11wdogHandlerv+0xd4>)
   b46c8:	4807      	ldr	r0, [pc, #28]	; (b46e8 <_Z11wdogHandlerv+0xc8>)
   b46ca:	221e      	movs	r2, #30
   b46cc:	f7ff fe44 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b46d0:	2300      	movs	r3, #0
   b46d2:	e7c5      	b.n	b4660 <_Z11wdogHandlerv+0x40>
   b46d4:	2003dd94 	.word	0x2003dd94
   b46d8:	2003dda8 	.word	0x2003dda8
   b46dc:	2003dda4 	.word	0x2003dda4
   b46e0:	2003dd70 	.word	0x2003dd70
   b46e4:	2003dd64 	.word	0x2003dd64
   b46e8:	2003dea4 	.word	0x2003dea4
   b46ec:	2003ddf7 	.word	0x2003ddf7
   b46f0:	000c62f6 	.word	0x000c62f6
   b46f4:	000c6347 	.word	0x000c6347

000b46f8 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b46f8:	b530      	push	{r4, r5, lr}
   b46fa:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b46fc:	4b1b      	ldr	r3, [pc, #108]	; (b476c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b46fe:	9300      	str	r3, [sp, #0]
   b4700:	7913      	ldrb	r3, [r2, #4]
   b4702:	f88d 3004 	strb.w	r3, [sp, #4]
   b4706:	6893      	ldr	r3, [r2, #8]
   b4708:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b470a:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b470e:	8993      	ldrh	r3, [r2, #12]
   b4710:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4714:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4716:	460a      	mov	r2, r1
   b4718:	466b      	mov	r3, sp
   b471a:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b471e:	4628      	mov	r0, r5
   b4720:	f003 fa02 	bl	b7b28 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b4724:	b910      	cbnz	r0, b472c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b4726:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4728:	b005      	add	sp, #20
   b472a:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b472c:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b472e:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b4732:	4628      	mov	r0, r5
   b4734:	f002 fac0 	bl	b6cb8 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4738:	2101      	movs	r1, #1
   b473a:	4620      	mov	r0, r4
   b473c:	f003 f89f 	bl	b787e <_ZN9FatVolume4initEh>
   b4740:	4601      	mov	r1, r0
   b4742:	b168      	cbz	r0, b4760 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4744:	4621      	mov	r1, r4
   b4746:	4628      	mov	r0, r5
   b4748:	f002 f8b0 	bl	b68ac <_ZN7FatFile8openRootEP9FatVolume>
   b474c:	2800      	cmp	r0, #0
   b474e:	d0ea      	beq.n	b4726 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4750:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4754:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4758:	d0e5      	beq.n	b4726 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b475a:	4b05      	ldr	r3, [pc, #20]	; (b4770 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b475c:	601d      	str	r5, [r3, #0]
    return true;
   b475e:	e7e3      	b.n	b4728 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4760:	4620      	mov	r0, r4
   b4762:	f003 f88c 	bl	b787e <_ZN9FatVolume4initEh>
   b4766:	2800      	cmp	r0, #0
   b4768:	d1ec      	bne.n	b4744 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b476a:	e7dc      	b.n	b4726 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b476c:	000c682c 	.word	0x000c682c
   b4770:	2003e610 	.word	0x2003e610

000b4774 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4778:	b08a      	sub	sp, #40	; 0x28
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b477a:	7883      	ldrb	r3, [r0, #2]
   b477c:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b477e:	af04      	add	r7, sp, #16
   b4780:	4604      	mov	r4, r0
   b4782:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4784:	d14c      	bne.n	b4820 <_Z14processCommandPKchb+0xac>
   b4786:	78c3      	ldrb	r3, [r0, #3]
   b4788:	2b42      	cmp	r3, #66	; 0x42
   b478a:	d175      	bne.n	b4878 <_Z14processCommandPKchb+0x104>
        char dataStr[strlen(command)-8];
   b478c:	4620      	mov	r0, r4
   b478e:	f00f fd02 	bl	c4196 <strlen>
   b4792:	3801      	subs	r0, #1
   b4794:	f020 0007 	bic.w	r0, r0, #7
        }
   b4798:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];
   b479a:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b479e:	4620      	mov	r0, r4
   b47a0:	f00f fcf9 	bl	c4196 <strlen>
        char dataStr[strlen(command)-8];
   b47a4:	ad04      	add	r5, sp, #16
        dataStr[strlen(command)-9] = '\0';
   b47a6:	4428      	add	r0, r5
   b47a8:	2600      	movs	r6, #0
   b47aa:	f800 6c09 	strb.w	r6, [r0, #-9]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b47ae:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b47b0:	71fe      	strb	r6, [r7, #7]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b47b2:	803e      	strh	r6, [r7, #0]
   b47b4:	70be      	strb	r6, [r7, #2]
   b47b6:	f00f fcee 	bl	c4196 <strlen>
   b47ba:	4420      	add	r0, r4
   b47bc:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b47c0:	703b      	strb	r3, [r7, #0]
   b47c2:	4620      	mov	r0, r4
   b47c4:	f00f fce7 	bl	c4196 <strlen>
   b47c8:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b47ca:	4631      	mov	r1, r6
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b47cc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b47d0:	707b      	strb	r3, [r7, #1]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b47d2:	2210      	movs	r2, #16
   b47d4:	4638      	mov	r0, r7
   b47d6:	f010 fc07 	bl	c4fe8 <strtol>
   b47da:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b47dc:	fa5f f888 	uxtb.w	r8, r8
   b47e0:	f00d f868 	bl	c18b4 <_Z16_fetch_usbserialv>
   b47e4:	4986      	ldr	r1, [pc, #536]	; (b4a00 <_Z14processCommandPKchb+0x28c>)
   b47e6:	4643      	mov	r3, r8
   b47e8:	4642      	mov	r2, r8
   b47ea:	f7ff fdb5 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b47ee:	2604      	movs	r6, #4
   b47f0:	4620      	mov	r0, r4
   b47f2:	f00f fcd0 	bl	c4196 <strlen>
   b47f6:	3802      	subs	r0, #2
   b47f8:	4286      	cmp	r6, r0
   b47fa:	d216      	bcs.n	b482a <_Z14processCommandPKchb+0xb6>
            if(i < 7) cmdStr[i-4] = command[i];
   b47fc:	2e06      	cmp	r6, #6
   b47fe:	bf9b      	ittet	ls
   b4800:	f107 0318 	addls.w	r3, r7, #24
   b4804:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b4806:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b4808:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b480a:	bf8c      	ite	hi
   b480c:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b480e:	f803 2c18 	strbls.w	r2, [r3, #-24]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4812:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b4816:	bf88      	it	hi
   b4818:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b481c:	b2f6      	uxtb	r6, r6
   b481e:	e7e7      	b.n	b47f0 <_Z14processCommandPKchb+0x7c>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4820:	2b42      	cmp	r3, #66	; 0x42
   b4822:	d129      	bne.n	b4878 <_Z14processCommandPKchb+0x104>
   b4824:	78c3      	ldrb	r3, [r0, #3]
   b4826:	2b31      	cmp	r3, #49	; 0x31
   b4828:	e7af      	b.n	b478a <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b482a:	4540      	cmp	r0, r8
   b482c:	d02e      	beq.n	b488c <_Z14processCommandPKchb+0x118>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b482e:	f00d f841 	bl	c18b4 <_Z16_fetch_usbserialv>
   b4832:	4605      	mov	r5, r0
   b4834:	4620      	mov	r0, r4
   b4836:	f00f fcae 	bl	c4196 <strlen>
   b483a:	1e82      	subs	r2, r0, #2
   b483c:	4628      	mov	r0, r5
    return m_attr;
   b483e:	4d71      	ldr	r5, [pc, #452]	; (b4a04 <_Z14processCommandPKchb+0x290>)
   b4840:	4971      	ldr	r1, [pc, #452]	; (b4a08 <_Z14processCommandPKchb+0x294>)
   b4842:	4643      	mov	r3, r8
   b4844:	f7ff fd88 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b4848:	7c2b      	ldrb	r3, [r5, #16]
   b484a:	b9cb      	cbnz	r3, b4880 <_Z14processCommandPKchb+0x10c>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b484c:	496f      	ldr	r1, [pc, #444]	; (b4a0c <_Z14processCommandPKchb+0x298>)
   b484e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4852:	f105 0010 	add.w	r0, r5, #16
   b4856:	f7ff fedb 	bl	b4610 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b485a:	496d      	ldr	r1, [pc, #436]	; (b4a10 <_Z14processCommandPKchb+0x29c>)
   b485c:	4622      	mov	r2, r4
   b485e:	4628      	mov	r0, r5
   b4860:	f7ff fd7a 	bl	b4358 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4864:	f105 0010 	add.w	r0, r5, #16
   b4868:	f002 fa26 	bl	b6cb8 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b486c:	f00d f822 	bl	c18b4 <_Z16_fetch_usbserialv>
   b4870:	4968      	ldr	r1, [pc, #416]	; (b4a14 <_Z14processCommandPKchb+0x2a0>)
   b4872:	f00c fb76 	bl	c0f62 <_ZN5Print7printlnEPKc>
            return;
   b4876:	46cd      	mov	sp, r9
}
   b4878:	3718      	adds	r7, #24
   b487a:	46bd      	mov	sp, r7
   b487c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4880:	4963      	ldr	r1, [pc, #396]	; (b4a10 <_Z14processCommandPKchb+0x29c>)
   b4882:	4622      	mov	r2, r4
   b4884:	4628      	mov	r0, r5
   b4886:	f7ff fd67 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b488a:	e7ef      	b.n	b486c <_Z14processCommandPKchb+0xf8>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b488c:	4962      	ldr	r1, [pc, #392]	; (b4a18 <_Z14processCommandPKchb+0x2a4>)
   b488e:	1d38      	adds	r0, r7, #4
   b4890:	f00f fc52 	bl	c4138 <strcmp>
   b4894:	2800      	cmp	r0, #0
   b4896:	d0ee      	beq.n	b4876 <_Z14processCommandPKchb+0x102>
        if(!strcmp(cmdStr,"ctl")){
   b4898:	4960      	ldr	r1, [pc, #384]	; (b4a1c <_Z14processCommandPKchb+0x2a8>)
   b489a:	1d38      	adds	r0, r7, #4
   b489c:	f00f fc4c 	bl	c4138 <strcmp>
   b48a0:	b968      	cbnz	r0, b48be <_Z14processCommandPKchb+0x14a>
            sscanf(dataStr,"%s %s %d %d %d",tLat,tLon,&driveMode,&logSensors,&signalLED);    //Target lat, target lon, drive mode, dataRecord, signal 
   b48a2:	4b5f      	ldr	r3, [pc, #380]	; (b4a20 <_Z14processCommandPKchb+0x2ac>)
   b48a4:	9302      	str	r3, [sp, #8]
   b48a6:	4b5f      	ldr	r3, [pc, #380]	; (b4a24 <_Z14processCommandPKchb+0x2b0>)
   b48a8:	9301      	str	r3, [sp, #4]
   b48aa:	4b5f      	ldr	r3, [pc, #380]	; (b4a28 <_Z14processCommandPKchb+0x2b4>)
   b48ac:	9300      	str	r3, [sp, #0]
   b48ae:	495f      	ldr	r1, [pc, #380]	; (b4a2c <_Z14processCommandPKchb+0x2b8>)
   b48b0:	f107 0310 	add.w	r3, r7, #16
   b48b4:	f107 0208 	add.w	r2, r7, #8
   b48b8:	4628      	mov	r0, r5
   b48ba:	f009 fac5 	bl	bde48 <sscanf>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b48be:	495c      	ldr	r1, [pc, #368]	; (b4a30 <_Z14processCommandPKchb+0x2bc>)
   b48c0:	1d38      	adds	r0, r7, #4
   b48c2:	f00f fc39 	bl	c4138 <strcmp>
   b48c6:	2800      	cmp	r0, #0
   b48c8:	d13d      	bne.n	b4946 <_Z14processCommandPKchb+0x1d2>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   b48ca:	782b      	ldrb	r3, [r5, #0]
   b48cc:	723b      	strb	r3, [r7, #8]
   b48ce:	786b      	ldrb	r3, [r5, #1]
   b48d0:	727b      	strb	r3, [r7, #9]
   b48d2:	78ab      	ldrb	r3, [r5, #2]
   b48d4:	72bb      	strb	r3, [r7, #10]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b48d6:	78eb      	ldrb	r3, [r5, #3]
   b48d8:	743b      	strb	r3, [r7, #16]
   b48da:	792b      	ldrb	r3, [r5, #4]
   b48dc:	747b      	strb	r3, [r7, #17]
            setLSpeed = atoi(lSpd);
   b48de:	f107 0008 	add.w	r0, r7, #8
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b48e2:	796b      	ldrb	r3, [r5, #5]
   b48e4:	74bb      	strb	r3, [r7, #18]
            setLSpeed = atoi(lSpd);
   b48e6:	f00f fb86 	bl	c3ff6 <atoi>
   b48ea:	4d52      	ldr	r5, [pc, #328]	; (b4a34 <_Z14processCommandPKchb+0x2c0>)
            setRSpeed = atoi(rSpd);
   b48ec:	4c52      	ldr	r4, [pc, #328]	; (b4a38 <_Z14processCommandPKchb+0x2c4>)
            setLSpeed = atoi(lSpd);
   b48ee:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);
   b48f0:	f107 0010 	add.w	r0, r7, #16
   b48f4:	f00f fb7f 	bl	c3ff6 <atoi>
   b48f8:	7020      	strb	r0, [r4, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b48fa:	f00c ffdb 	bl	c18b4 <_Z16_fetch_usbserialv>
   b48fe:	782a      	ldrb	r2, [r5, #0]
   b4900:	7823      	ldrb	r3, [r4, #0]
   b4902:	494e      	ldr	r1, [pc, #312]	; (b4a3c <_Z14processCommandPKchb+0x2c8>)
   b4904:	f7ff fd28 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b4908:	782b      	ldrb	r3, [r5, #0]
            ESCL.write(setLSpeed);
   b490a:	484d      	ldr	r0, [pc, #308]	; (b4a40 <_Z14processCommandPKchb+0x2cc>)
            if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b490c:	3b5b      	subs	r3, #91	; 0x5b
   b490e:	2b20      	cmp	r3, #32
   b4910:	bf9c      	itt	ls
   b4912:	237b      	movls	r3, #123	; 0x7b
   b4914:	702b      	strbls	r3, [r5, #0]
            if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b4916:	7823      	ldrb	r3, [r4, #0]
            ESCL.write(setLSpeed);
   b4918:	7829      	ldrb	r1, [r5, #0]
            if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b491a:	3b5b      	subs	r3, #91	; 0x5b
   b491c:	2b20      	cmp	r3, #32
   b491e:	bf9c      	itt	ls
   b4920:	237b      	movls	r3, #123	; 0x7b
   b4922:	7023      	strbls	r3, [r4, #0]
            ESCL.write(setLSpeed);
   b4924:	f00c fb8f 	bl	c1046 <_ZN5Servo5writeEi>
            ESCR.write(setRSpeed);
   b4928:	7821      	ldrb	r1, [r4, #0]
   b492a:	4846      	ldr	r0, [pc, #280]	; (b4a44 <_Z14processCommandPKchb+0x2d0>)
   b492c:	f00c fb8b 	bl	c1046 <_ZN5Servo5writeEi>
            updateMotorControl = true;
   b4930:	4b45      	ldr	r3, [pc, #276]	; (b4a48 <_Z14processCommandPKchb+0x2d4>)
   b4932:	2201      	movs	r2, #1
   b4934:	701a      	strb	r2, [r3, #0]
   b4936:	f008 ff91 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
            lastMtrTime = millis();
   b493a:	4b44      	ldr	r3, [pc, #272]	; (b4a4c <_Z14processCommandPKchb+0x2d8>)
   b493c:	6018      	str	r0, [r3, #0]
            driveMode = 0;
   b493e:	4b3a      	ldr	r3, [pc, #232]	; (b4a28 <_Z14processCommandPKchb+0x2b4>)
   b4940:	2200      	movs	r2, #0
   b4942:	701a      	strb	r2, [r3, #0]
   b4944:	e797      	b.n	b4876 <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"req")){  //Data Request
   b4946:	4942      	ldr	r1, [pc, #264]	; (b4a50 <_Z14processCommandPKchb+0x2dc>)
   b4948:	1d38      	adds	r0, r7, #4
   b494a:	f00f fbf5 	bl	c4138 <strcmp>
   b494e:	b918      	cbnz	r0, b4958 <_Z14processCommandPKchb+0x1e4>
            requestActive = mode;
   b4950:	4b40      	ldr	r3, [pc, #256]	; (b4a54 <_Z14processCommandPKchb+0x2e0>)
   b4952:	f883 a000 	strb.w	sl, [r3]
   b4956:	e78e      	b.n	b4876 <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"pts")){
   b4958:	493f      	ldr	r1, [pc, #252]	; (b4a58 <_Z14processCommandPKchb+0x2e4>)
   b495a:	1d38      	adds	r0, r7, #4
   b495c:	f00f fbec 	bl	c4138 <strcmp>
   b4960:	b9f0      	cbnz	r0, b49a0 <_Z14processCommandPKchb+0x22c>
   b4962:	4c28      	ldr	r4, [pc, #160]	; (b4a04 <_Z14processCommandPKchb+0x290>)
            Serial.println(dataStr);
   b4964:	f00c ffa6 	bl	c18b4 <_Z16_fetch_usbserialv>
   b4968:	4629      	mov	r1, r5
   b496a:	f00c fafa 	bl	c0f62 <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   b496e:	7c23      	ldrb	r3, [r4, #16]
   b4970:	b983      	cbnz	r3, b4994 <_Z14processCommandPKchb+0x220>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4972:	4926      	ldr	r1, [pc, #152]	; (b4a0c <_Z14processCommandPKchb+0x298>)
   b4974:	f244 2202 	movw	r2, #16898	; 0x4202
   b4978:	f104 0010 	add.w	r0, r4, #16
   b497c:	f7ff fe48 	bl	b4610 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4980:	4936      	ldr	r1, [pc, #216]	; (b4a5c <_Z14processCommandPKchb+0x2e8>)
   b4982:	462a      	mov	r2, r5
   b4984:	4620      	mov	r0, r4
   b4986:	f7ff fce7 	bl	b4358 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b498a:	f104 0010 	add.w	r0, r4, #16
   b498e:	f002 f993 	bl	b6cb8 <_ZN7FatFile5closeEv>
   b4992:	e770      	b.n	b4876 <_Z14processCommandPKchb+0x102>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4994:	4931      	ldr	r1, [pc, #196]	; (b4a5c <_Z14processCommandPKchb+0x2e8>)
   b4996:	462a      	mov	r2, r5
   b4998:	4620      	mov	r0, r4
   b499a:	f7ff fcdd 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b499e:	e76a      	b.n	b4876 <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"spc")){  //Incoming communication status
   b49a0:	492f      	ldr	r1, [pc, #188]	; (b4a60 <_Z14processCommandPKchb+0x2ec>)
   b49a2:	1d38      	adds	r0, r7, #4
   b49a4:	f00f fbc8 	bl	c4138 <strcmp>
   b49a8:	b920      	cbnz	r0, b49b4 <_Z14processCommandPKchb+0x240>
   b49aa:	f008 ff57 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();
   b49ae:	4b2d      	ldr	r3, [pc, #180]	; (b4a64 <_Z14processCommandPKchb+0x2f0>)
   b49b0:	6018      	str	r0, [r3, #0]
   b49b2:	e760      	b.n	b4876 <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"hwa")){
   b49b4:	492c      	ldr	r1, [pc, #176]	; (b4a68 <_Z14processCommandPKchb+0x2f4>)
   b49b6:	1d38      	adds	r0, r7, #4
   b49b8:	f00f fbbe 	bl	c4138 <strcmp>
   b49bc:	b910      	cbnz	r0, b49c4 <_Z14processCommandPKchb+0x250>
            waitForConnection = false;
   b49be:	4b2b      	ldr	r3, [pc, #172]	; (b4a6c <_Z14processCommandPKchb+0x2f8>)
   b49c0:	7018      	strb	r0, [r3, #0]
   b49c2:	e758      	b.n	b4876 <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"aut")){  //Enter autonomous mode
   b49c4:	492a      	ldr	r1, [pc, #168]	; (b4a70 <_Z14processCommandPKchb+0x2fc>)
   b49c6:	1d38      	adds	r0, r7, #4
   b49c8:	f00f fbb6 	bl	c4138 <strcmp>
   b49cc:	2800      	cmp	r0, #0
   b49ce:	f43f af52 	beq.w	b4876 <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   b49d2:	4928      	ldr	r1, [pc, #160]	; (b4a74 <_Z14processCommandPKchb+0x300>)
   b49d4:	1d38      	adds	r0, r7, #4
   b49d6:	f00f fbaf 	bl	c4138 <strcmp>
   b49da:	2800      	cmp	r0, #0
   b49dc:	f47f af4b 	bne.w	b4876 <_Z14processCommandPKchb+0x102>
            offloadMode = true;
   b49e0:	4b25      	ldr	r3, [pc, #148]	; (b4a78 <_Z14processCommandPKchb+0x304>)
            status.setSpeed(LED_SPEED_FAST);
   b49e2:	4826      	ldr	r0, [pc, #152]	; (b4a7c <_Z14processCommandPKchb+0x308>)
            offloadMode = true;
   b49e4:	2201      	movs	r2, #1
   b49e6:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b49e8:	4b24      	ldr	r3, [pc, #144]	; (b4a7c <_Z14processCommandPKchb+0x308>)
   b49ea:	7c5a      	ldrb	r2, [r3, #17]
   b49ec:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b49ee:	bf1c      	itt	ne
   b49f0:	2202      	movne	r2, #2
   b49f2:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b49f4:	211e      	movs	r1, #30
    d_.color = color;
   b49f6:	22ff      	movs	r2, #255	; 0xff
   b49f8:	615a      	str	r2, [r3, #20]
   b49fa:	f7ff fd9d 	bl	b4538 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b49fe:	e73a      	b.n	b4876 <_Z14processCommandPKchb+0x102>
   b4a00:	000c6396 	.word	0x000c6396
   b4a04:	2003dea4 	.word	0x2003dea4
   b4a08:	000c63ab 	.word	0x000c63ab
   b4a0c:	2003ddf7 	.word	0x2003ddf7
   b4a10:	000c63c8 	.word	0x000c63c8
   b4a14:	000c63f4 	.word	0x000c63f4
   b4a18:	000c6415 	.word	0x000c6415
   b4a1c:	000c6419 	.word	0x000c6419
   b4a20:	2003e582 	.word	0x2003e582
   b4a24:	2003defd 	.word	0x2003defd
   b4a28:	2003db60 	.word	0x2003db60
   b4a2c:	000c641d 	.word	0x000c641d
   b4a30:	000c642c 	.word	0x000c642c
   b4a34:	2003e580 	.word	0x2003e580
   b4a38:	2003e581 	.word	0x2003e581
   b4a3c:	000c6430 	.word	0x000c6430
   b4a40:	2003dd74 	.word	0x2003dd74
   b4a44:	2003dd84 	.word	0x2003dd84
   b4a48:	2003e5ec 	.word	0x2003e5ec
   b4a4c:	2003de18 	.word	0x2003de18
   b4a50:	000c645c 	.word	0x000c645c
   b4a54:	2003e0da 	.word	0x2003e0da
   b4a58:	000c6460 	.word	0x000c6460
   b4a5c:	000c6464 	.word	0x000c6464
   b4a60:	000c6487 	.word	0x000c6487
   b4a64:	2003de1c 	.word	0x2003de1c
   b4a68:	000c648b 	.word	0x000c648b
   b4a6c:	2003e5ed 	.word	0x2003e5ed
   b4a70:	000c648f 	.word	0x000c648f
   b4a74:	000c6493 	.word	0x000c6493
   b4a78:	2003e0d8 	.word	0x2003e0d8
   b4a7c:	2003e588 	.word	0x2003e588

000b4a80 <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4a80:	b510      	push	{r4, lr}
   b4a82:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4a84:	2200      	movs	r2, #0
   b4a86:	2104      	movs	r1, #4
   b4a88:	4620      	mov	r0, r4
   b4a8a:	f7ff fe73 	bl	b4774 <_Z14processCommandPKchb>
    if(logMessages){
   b4a8e:	4b0b      	ldr	r3, [pc, #44]	; (b4abc <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4a90:	781b      	ldrb	r3, [r3, #0]
   b4a92:	b193      	cbz	r3, b4aba <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4a94:	480a      	ldr	r0, [pc, #40]	; (b4ac0 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4a96:	7c03      	ldrb	r3, [r0, #16]
   b4a98:	b92b      	cbnz	r3, b4aa6 <_Z13cmdLTEHandlerPKcS0_+0x26>
   b4a9a:	490a      	ldr	r1, [pc, #40]	; (b4ac4 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b4a9c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4aa0:	3010      	adds	r0, #16
   b4aa2:	f7ff fdb5 	bl	b4610 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4aa6:	4622      	mov	r2, r4
   b4aa8:	4907      	ldr	r1, [pc, #28]	; (b4ac8 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b4aaa:	4805      	ldr	r0, [pc, #20]	; (b4ac0 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b4aac:	f7ff fc54 	bl	b4358 <_ZN5Print8printlnfEPKcz>
}
   b4ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4ab4:	4805      	ldr	r0, [pc, #20]	; (b4acc <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b4ab6:	f002 b8ff 	b.w	b6cb8 <_ZN7FatFile5closeEv>
}
   b4aba:	bd10      	pop	{r4, pc}
   b4abc:	2003defc 	.word	0x2003defc
   b4ac0:	2003dea4 	.word	0x2003dea4
   b4ac4:	2003ddf7 	.word	0x2003ddf7
   b4ac8:	000c6497 	.word	0x000c6497
   b4acc:	2003deb4 	.word	0x2003deb4

000b4ad0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4ad0:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4ad2:	f101 0308 	add.w	r3, r1, #8
   b4ad6:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4ada:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b4adc:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4ae0:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b4ae2:	460a      	mov	r2, r1
   b4ae4:	4601      	mov	r1, r0
   b4ae6:	4668      	mov	r0, sp
   b4ae8:	f00f faa2 	bl	c4030 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4aec:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b4af0:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4af2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4af6:	b113      	cbz	r3, b4afe <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4af8:	2300      	movs	r3, #0
   b4afa:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b4afe:	f00c fed9 	bl	c18b4 <_Z16_fetch_usbserialv>
   b4b02:	4916      	ldr	r1, [pc, #88]	; (b4b5c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4b04:	f00c fa2d 	bl	c0f62 <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   b4b08:	f00c fed4 	bl	c18b4 <_Z16_fetch_usbserialv>
   b4b0c:	4629      	mov	r1, r5
   b4b0e:	f00c fa28 	bl	c0f62 <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b4b12:	2201      	movs	r2, #1
   b4b14:	4611      	mov	r1, r2
   b4b16:	4628      	mov	r0, r5
   b4b18:	f7ff fe2c 	bl	b4774 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   b4b1c:	782b      	ldrb	r3, [r5, #0]
   b4b1e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4b22:	2b41      	cmp	r3, #65	; 0x41
   b4b24:	d103      	bne.n	b4b2e <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b4b26:	f008 fe99 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   b4b2a:	4b0d      	ldr	r3, [pc, #52]	; (b4b60 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b4b2c:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b4b2e:	4b0d      	ldr	r3, [pc, #52]	; (b4b64 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b4b30:	781b      	ldrb	r3, [r3, #0]
   b4b32:	b183      	cbz	r3, b4b56 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b4b34:	480c      	ldr	r0, [pc, #48]	; (b4b68 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4b36:	7c03      	ldrb	r3, [r0, #16]
   b4b38:	b92b      	cbnz	r3, b4b46 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b4b3a:	490c      	ldr	r1, [pc, #48]	; (b4b6c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4b3c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4b40:	3010      	adds	r0, #16
   b4b42:	f7ff fd65 	bl	b4610 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4b46:	490a      	ldr	r1, [pc, #40]	; (b4b70 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4b48:	4807      	ldr	r0, [pc, #28]	; (b4b68 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4b4a:	462a      	mov	r2, r5
   b4b4c:	f7ff fc04 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4b50:	4808      	ldr	r0, [pc, #32]	; (b4b74 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4b52:	f002 f8b1 	bl	b6cb8 <_ZN7FatFile5closeEv>
}
   b4b56:	46bd      	mov	sp, r7
   b4b58:	bdb0      	pop	{r4, r5, r7, pc}
   b4b5a:	bf00      	nop
   b4b5c:	000c64b7 	.word	0x000c64b7
   b4b60:	2003dd70 	.word	0x2003dd70
   b4b64:	2003defc 	.word	0x2003defc
   b4b68:	2003dea4 	.word	0x2003dea4
   b4b6c:	2003ddf7 	.word	0x2003ddf7
   b4b70:	000c64c7 	.word	0x000c64c7
   b4b74:	2003deb4 	.word	0x2003deb4

000b4b78 <_Z8setupLTEv>:
void setupLTE(){
   b4b78:	b513      	push	{r0, r1, r4, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4b7a:	2400      	movs	r4, #0
   b4b7c:	e9cd 4400 	strd	r4, r4, [sp]
   b4b80:	4904      	ldr	r1, [pc, #16]	; (b4b94 <_Z8setupLTEv+0x1c>)
   b4b82:	4805      	ldr	r0, [pc, #20]	; (b4b98 <_Z8setupLTEv+0x20>)
   b4b84:	2301      	movs	r3, #1
   b4b86:	4622      	mov	r2, r4
   b4b88:	f009 f8c6 	bl	bdd18 <spark_subscribe>
    LTEAvail = false;
   b4b8c:	4b03      	ldr	r3, [pc, #12]	; (b4b9c <_Z8setupLTEv+0x24>)
   b4b8e:	701c      	strb	r4, [r3, #0]
}
   b4b90:	b002      	add	sp, #8
   b4b92:	bd10      	pop	{r4, pc}
   b4b94:	000b4a81 	.word	0x000b4a81
   b4b98:	000c64e7 	.word	0x000c64e7
   b4b9c:	2003dd94 	.word	0x2003dd94

000b4ba0 <_Z9setupXBeev>:
void setupXBee(){
   b4ba0:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4ba2:	f00d f81f 	bl	c1be4 <_Z22__fetch_global_Serial1v>
   b4ba6:	4908      	ldr	r1, [pc, #32]	; (b4bc8 <_Z9setupXBeev+0x28>)
   b4ba8:	f7ff fb9d 	bl	b42e6 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4bac:	2014      	movs	r0, #20
   b4bae:	f009 f99f 	bl	bdef0 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4bb2:	f00d f817 	bl	c1be4 <_Z22__fetch_global_Serial1v>
   b4bb6:	4905      	ldr	r1, [pc, #20]	; (b4bcc <_Z9setupXBeev+0x2c>)
   b4bb8:	f7ff fb95 	bl	b42e6 <_ZN5Print6printfEPKcz>
}
   b4bbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4bc0:	2014      	movs	r0, #20
   b4bc2:	f009 b995 	b.w	bdef0 <delay>
   b4bc6:	bf00      	nop
   b4bc8:	000c79f2 	.word	0x000c79f2
   b4bcc:	000c621d 	.word	0x000c621d

000b4bd0 <_Z8setupGPSv>:
void setupGPS(){
   b4bd0:	b507      	push	{r0, r1, r2, lr}
    if(myGPS.begin() == false){
   b4bd2:	f00c ffc7 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b4bd6:	2300      	movs	r3, #0
   b4bd8:	4601      	mov	r1, r0
   b4bda:	9300      	str	r3, [sp, #0]
   b4bdc:	4812      	ldr	r0, [pc, #72]	; (b4c28 <_Z8setupGPSv+0x58>)
   b4bde:	f240 434c 	movw	r3, #1100	; 0x44c
   b4be2:	2242      	movs	r2, #66	; 0x42
   b4be4:	f008 fa1a 	bl	bd01c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4be8:	b940      	cbnz	r0, b4bfc <_Z8setupGPSv+0x2c>
        delay(1000);
   b4bea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4bee:	f009 f97f 	bl	bdef0 <delay>
        Serial.println("Error, Could not initialize GPS");
   b4bf2:	f00c fe5f 	bl	c18b4 <_Z16_fetch_usbserialv>
   b4bf6:	490d      	ldr	r1, [pc, #52]	; (b4c2c <_Z8setupGPSv+0x5c>)
   b4bf8:	f00c f9b3 	bl	c0f62 <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4bfc:	f240 424c 	movw	r2, #1100	; 0x44c
   b4c00:	2101      	movs	r1, #1
   b4c02:	4809      	ldr	r0, [pc, #36]	; (b4c28 <_Z8setupGPSv+0x58>)
   b4c04:	f008 f996 	bl	bcf34 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4c08:	f240 434c 	movw	r3, #1100	; 0x44c
   b4c0c:	2201      	movs	r2, #1
   b4c0e:	2100      	movs	r1, #0
   b4c10:	4805      	ldr	r0, [pc, #20]	; (b4c28 <_Z8setupGPSv+0x58>)
   b4c12:	f008 f96f 	bl	bcef4 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4c16:	f00c ffa5 	bl	c1b64 <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4c1a:	4905      	ldr	r1, [pc, #20]	; (b4c30 <_Z8setupGPSv+0x60>)
}
   b4c1c:	b003      	add	sp, #12
   b4c1e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4c22:	f00a be8b 	b.w	bf93c <_ZN7TwoWire8setSpeedEm>
   b4c26:	bf00      	nop
   b4c28:	2003df58 	.word	0x2003df58
   b4c2c:	000c64ed 	.word	0x000c64ed
   b4c30:	00061a80 	.word	0x00061a80
   b4c34:	00000000 	.word	0x00000000

000b4c38 <_Z12readPowerSysv>:
uint8_t readPowerSys(){
   b4c38:	b510      	push	{r4, lr}
    battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4c3a:	2015      	movs	r0, #21
   b4c3c:	f00c ff64 	bl	c1b08 <analogRead>
   b4c40:	ee07 0a90 	vmov	s15, r0
   b4c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    battPercent = (uint8_t) rawPCT;
   b4c48:	4c37      	ldr	r4, [pc, #220]	; (b4d28 <_Z12readPowerSysv+0xf0>)
    battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4c4a:	ee17 0a90 	vmov	r0, s15
   b4c4e:	f00e fe0b 	bl	c3868 <__aeabi_f2d>
   b4c52:	a32d      	add	r3, pc, #180	; (adr r3, b4d08 <_Z12readPowerSysv+0xd0>)
   b4c54:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c58:	f00e fe5e 	bl	c3918 <__aeabi_dmul>
   b4c5c:	f00f f954 	bl	c3f08 <__aeabi_d2f>
   b4c60:	4b32      	ldr	r3, [pc, #200]	; (b4d2c <_Z12readPowerSysv+0xf4>)
   b4c62:	6018      	str	r0, [r3, #0]
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));
   b4c64:	f00e fe00 	bl	c3868 <__aeabi_f2d>
   b4c68:	a329      	add	r3, pc, #164	; (adr r3, b4d10 <_Z12readPowerSysv+0xd8>)
   b4c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c6e:	f00e fc9b 	bl	c35a8 <__aeabi_dsub>
   b4c72:	4b2f      	ldr	r3, [pc, #188]	; (b4d30 <_Z12readPowerSysv+0xf8>)
   b4c74:	2200      	movs	r2, #0
   b4c76:	f00e fe4f 	bl	c3918 <__aeabi_dmul>
   b4c7a:	a327      	add	r3, pc, #156	; (adr r3, b4d18 <_Z12readPowerSysv+0xe0>)
   b4c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c80:	f00e ff74 	bl	c3b6c <__aeabi_ddiv>
   b4c84:	f00f f8f8 	bl	c3e78 <__aeabi_d2iz>
    if(rawPCT < 0) rawPCT = 0;
   b4c88:	2864      	cmp	r0, #100	; 0x64
   b4c8a:	4603      	mov	r3, r0
   b4c8c:	bfa8      	it	ge
   b4c8e:	2364      	movge	r3, #100	; 0x64
    battPercent = (uint8_t) rawPCT;
   b4c90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b4c94:	2814      	cmp	r0, #20
   b4c96:	7023      	strb	r3, [r4, #0]
    if(battPercent <= LOW_BATT_PCT) lowBattery = true;
   b4c98:	4b26      	ldr	r3, [pc, #152]	; (b4d34 <_Z12readPowerSysv+0xfc>)
   b4c9a:	bfcc      	ite	gt
   b4c9c:	2000      	movgt	r0, #0
   b4c9e:	2001      	movle	r0, #1
   b4ca0:	7018      	strb	r0, [r3, #0]
    battCurrent = (float) analogRead(BATT_ISENSE) * BAT_ISENSE_MULT / 4095;
   b4ca2:	2010      	movs	r0, #16
   b4ca4:	f00c ff30 	bl	c1b08 <analogRead>
   b4ca8:	ee07 0a90 	vmov	s15, r0
   b4cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4cb0:	ee17 0a90 	vmov	r0, s15
   b4cb4:	f00e fdd8 	bl	c3868 <__aeabi_f2d>
   b4cb8:	4b1f      	ldr	r3, [pc, #124]	; (b4d38 <_Z12readPowerSysv+0x100>)
   b4cba:	2200      	movs	r2, #0
   b4cbc:	f00e fe2c 	bl	c3918 <__aeabi_dmul>
   b4cc0:	a317      	add	r3, pc, #92	; (adr r3, b4d20 <_Z12readPowerSysv+0xe8>)
   b4cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4cc6:	f00e ff51 	bl	c3b6c <__aeabi_ddiv>
   b4cca:	f00f f91d 	bl	c3f08 <__aeabi_d2f>
   b4cce:	4b1b      	ldr	r3, [pc, #108]	; (b4d3c <_Z12readPowerSysv+0x104>)
   b4cd0:	6018      	str	r0, [r3, #0]
    solarCurrent = (float) analogRead(SOL_ISENSE) * SLR_ISENSE_MULT / 4095;
   b4cd2:	2011      	movs	r0, #17
   b4cd4:	f00c ff18 	bl	c1b08 <analogRead>
   b4cd8:	ee07 0a90 	vmov	s15, r0
   b4cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4ce0:	ee17 0a90 	vmov	r0, s15
   b4ce4:	f00e fdc0 	bl	c3868 <__aeabi_f2d>
   b4ce8:	4b15      	ldr	r3, [pc, #84]	; (b4d40 <_Z12readPowerSysv+0x108>)
   b4cea:	2200      	movs	r2, #0
   b4cec:	f00e fe14 	bl	c3918 <__aeabi_dmul>
   b4cf0:	a30b      	add	r3, pc, #44	; (adr r3, b4d20 <_Z12readPowerSysv+0xe8>)
   b4cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4cf6:	f00e ff39 	bl	c3b6c <__aeabi_ddiv>
   b4cfa:	f00f f905 	bl	c3f08 <__aeabi_d2f>
   b4cfe:	4b11      	ldr	r3, [pc, #68]	; (b4d44 <_Z12readPowerSysv+0x10c>)
   b4d00:	6018      	str	r0, [r3, #0]
}
   b4d02:	7820      	ldrb	r0, [r4, #0]
   b4d04:	bd10      	pop	{r4, pc}
   b4d06:	bf00      	nop
   b4d08:	6e04c059 	.word	0x6e04c059
   b4d0c:	3f73cddd 	.word	0x3f73cddd
   b4d10:	66666666 	.word	0x66666666
   b4d14:	402a6666 	.word	0x402a6666
   b4d18:	99999998 	.word	0x99999998
   b4d1c:	40099999 	.word	0x40099999
   b4d20:	00000000 	.word	0x00000000
   b4d24:	40affe00 	.word	0x40affe00
   b4d28:	2003ddc0 	.word	0x2003ddc0
   b4d2c:	2003ddc4 	.word	0x2003ddc4
   b4d30:	40590000 	.word	0x40590000
   b4d34:	2003df04 	.word	0x2003df04
   b4d38:	40408000 	.word	0x40408000
   b4d3c:	2003ddbc 	.word	0x2003ddbc
   b4d40:	40308000 	.word	0x40308000
   b4d44:	2003e584 	.word	0x2003e584

000b4d48 <_Z18readCompassHeadingff>:
float readCompassHeading(float x_accel, float y_accel){
   b4d48:	b538      	push	{r3, r4, r5, lr}
   b4d4a:	eef0 7a60 	vmov.f32	s15, s1
   b4d4e:	ed2d 8b04 	vpush	{d8-d9}
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
   b4d52:	eef0 0a40 	vmov.f32	s1, s0
   b4d56:	eeb0 0a67 	vmov.f32	s0, s15
   b4d5a:	f00d f92f 	bl	c1fbc <atan2f>
   b4d5e:	ee10 0a10 	vmov	r0, s0
    float rawHeading = atan2(y_accel, x_accel) * 180.0 / M_PI;
   b4d62:	f00e fd81 	bl	c3868 <__aeabi_f2d>
   b4d66:	4b8e      	ldr	r3, [pc, #568]	; (b4fa0 <_Z18readCompassHeadingff+0x258>)
   b4d68:	2200      	movs	r2, #0
   b4d6a:	f00e fdd5 	bl	c3918 <__aeabi_dmul>
   b4d6e:	a384      	add	r3, pc, #528	; (adr r3, b4f80 <_Z18readCompassHeadingff+0x238>)
   b4d70:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d74:	f00e fefa 	bl	c3b6c <__aeabi_ddiv>
   b4d78:	f00f f8c6 	bl	c3f08 <__aeabi_d2f>
   b4d7c:	ee08 0a10 	vmov	s16, r0
    if(rawHeading >= N_BEARING && rawHeading < NE_BEARING){
   b4d80:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
   b4d84:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b4d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d8c:	eeb3 9a0f 	vmov.f32	s18, #63	; 0x41f80000  31.0
   b4d90:	db13      	blt.n	b4dba <_Z18readCompassHeadingff+0x72>
   b4d92:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b4d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d9a:	d50e      	bpl.n	b4dba <_Z18readCompassHeadingff+0x72>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4d9c:	f00e fd64 	bl	c3868 <__aeabi_f2d>
   b4da0:	4b80      	ldr	r3, [pc, #512]	; (b4fa4 <_Z18readCompassHeadingff+0x25c>)
   b4da2:	2200      	movs	r2, #0
   b4da4:	f00e fc00 	bl	c35a8 <__aeabi_dsub>
   b4da8:	4b7f      	ldr	r3, [pc, #508]	; (b4fa8 <_Z18readCompassHeadingff+0x260>)
   b4daa:	2200      	movs	r2, #0
   b4dac:	f00e fdb4 	bl	c3918 <__aeabi_dmul>
   b4db0:	4b7e      	ldr	r3, [pc, #504]	; (b4fac <_Z18readCompassHeadingff+0x264>)
   b4db2:	2200      	movs	r2, #0
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b4db4:	f00e feda 	bl	c3b6c <__aeabi_ddiv>
   b4db8:	e021      	b.n	b4dfe <_Z18readCompassHeadingff+0xb6>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4dba:	ee18 0a10 	vmov	r0, s16
   b4dbe:	f00e fd53 	bl	c3868 <__aeabi_f2d>
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b4dc2:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b4dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4dca:	eddf 7a79 	vldr	s15, [pc, #484]	; b4fb0 <_Z18readCompassHeadingff+0x268>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4dce:	4604      	mov	r4, r0
   b4dd0:	460d      	mov	r5, r1
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b4dd2:	db1b      	blt.n	b4e0c <_Z18readCompassHeadingff+0xc4>
   b4dd4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ddc:	d516      	bpl.n	b4e0c <_Z18readCompassHeadingff+0xc4>
        return (45.0 * (rawHeading-NE_BEARING)/diff) + 45.0;
   b4dde:	4b75      	ldr	r3, [pc, #468]	; (b4fb4 <_Z18readCompassHeadingff+0x26c>)
   b4de0:	2200      	movs	r2, #0
   b4de2:	f00e fbe1 	bl	c35a8 <__aeabi_dsub>
   b4de6:	4b70      	ldr	r3, [pc, #448]	; (b4fa8 <_Z18readCompassHeadingff+0x260>)
   b4de8:	2200      	movs	r2, #0
   b4dea:	f00e fd95 	bl	c3918 <__aeabi_dmul>
   b4dee:	4b72      	ldr	r3, [pc, #456]	; (b4fb8 <_Z18readCompassHeadingff+0x270>)
   b4df0:	2200      	movs	r2, #0
   b4df2:	f00e febb 	bl	c3b6c <__aeabi_ddiv>
   b4df6:	4b6c      	ldr	r3, [pc, #432]	; (b4fa8 <_Z18readCompassHeadingff+0x260>)
   b4df8:	2200      	movs	r2, #0
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b4dfa:	f00e fbd7 	bl	c35ac <__adddf3>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4dfe:	f00f f883 	bl	c3f08 <__aeabi_d2f>
}
   b4e02:	ecbd 8b04 	vpop	{d8-d9}
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4e06:	ee00 0a10 	vmov	s0, r0
}
   b4e0a:	bd38      	pop	{r3, r4, r5, pc}
    else if(rawHeading >= E_BEARING && rawHeading < SE_BEARING){
   b4e0c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e14:	eddf 7a69 	vldr	s15, [pc, #420]	; b4fbc <_Z18readCompassHeadingff+0x274>
   b4e18:	db15      	blt.n	b4e46 <_Z18readCompassHeadingff+0xfe>
   b4e1a:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e22:	d510      	bpl.n	b4e46 <_Z18readCompassHeadingff+0xfe>
        return (45.0 * (rawHeading-E_BEARING)/diff) + 90.0;
   b4e24:	4b66      	ldr	r3, [pc, #408]	; (b4fc0 <_Z18readCompassHeadingff+0x278>)
   b4e26:	2200      	movs	r2, #0
   b4e28:	4620      	mov	r0, r4
   b4e2a:	4629      	mov	r1, r5
   b4e2c:	f00e fbbc 	bl	c35a8 <__aeabi_dsub>
   b4e30:	4b5d      	ldr	r3, [pc, #372]	; (b4fa8 <_Z18readCompassHeadingff+0x260>)
   b4e32:	2200      	movs	r2, #0
   b4e34:	f00e fd70 	bl	c3918 <__aeabi_dmul>
   b4e38:	4b62      	ldr	r3, [pc, #392]	; (b4fc4 <_Z18readCompassHeadingff+0x27c>)
   b4e3a:	2200      	movs	r2, #0
   b4e3c:	f00e fe96 	bl	c3b6c <__aeabi_ddiv>
   b4e40:	4b61      	ldr	r3, [pc, #388]	; (b4fc8 <_Z18readCompassHeadingff+0x280>)
   b4e42:	2200      	movs	r2, #0
   b4e44:	e7d9      	b.n	b4dfa <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= SE_BEARING && rawHeading < S_BEARING){
   b4e46:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e4e:	db18      	blt.n	b4e82 <_Z18readCompassHeadingff+0x13a>
   b4e50:	eddf 7a5e 	vldr	s15, [pc, #376]	; b4fcc <_Z18readCompassHeadingff+0x284>
   b4e54:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e5c:	d511      	bpl.n	b4e82 <_Z18readCompassHeadingff+0x13a>
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b4e5e:	4b5c      	ldr	r3, [pc, #368]	; (b4fd0 <_Z18readCompassHeadingff+0x288>)
   b4e60:	2200      	movs	r2, #0
   b4e62:	4620      	mov	r0, r4
   b4e64:	4629      	mov	r1, r5
   b4e66:	f00e fb9f 	bl	c35a8 <__aeabi_dsub>
   b4e6a:	4b4f      	ldr	r3, [pc, #316]	; (b4fa8 <_Z18readCompassHeadingff+0x260>)
   b4e6c:	2200      	movs	r2, #0
   b4e6e:	f00e fd53 	bl	c3918 <__aeabi_dmul>
   b4e72:	4b58      	ldr	r3, [pc, #352]	; (b4fd4 <_Z18readCompassHeadingff+0x28c>)
   b4e74:	2200      	movs	r2, #0
   b4e76:	f00e fe79 	bl	c3b6c <__aeabi_ddiv>
   b4e7a:	a343      	add	r3, pc, #268	; (adr r3, b4f88 <_Z18readCompassHeadingff+0x240>)
   b4e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e80:	e7bb      	b.n	b4dfa <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= NW_BEARING && rawHeading < N_BEARING){
   b4e82:	eebb 7a02 	vmov.f32	s14, #178	; 0xc1900000 -18.0
   b4e86:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b4e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e8e:	db11      	blt.n	b4eb4 <_Z18readCompassHeadingff+0x16c>
   b4e90:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b4e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e98:	d50c      	bpl.n	b4eb4 <_Z18readCompassHeadingff+0x16c>
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b4e9a:	4b42      	ldr	r3, [pc, #264]	; (b4fa4 <_Z18readCompassHeadingff+0x25c>)
   b4e9c:	2200      	movs	r2, #0
   b4e9e:	4620      	mov	r0, r4
   b4ea0:	4629      	mov	r1, r5
   b4ea2:	f00e fb81 	bl	c35a8 <__aeabi_dsub>
   b4ea6:	4b4c      	ldr	r3, [pc, #304]	; (b4fd8 <_Z18readCompassHeadingff+0x290>)
   b4ea8:	2200      	movs	r2, #0
   b4eaa:	f00e fd35 	bl	c3918 <__aeabi_dmul>
   b4eae:	4b4b      	ldr	r3, [pc, #300]	; (b4fdc <_Z18readCompassHeadingff+0x294>)
   b4eb0:	2200      	movs	r2, #0
   b4eb2:	e77f      	b.n	b4db4 <_Z18readCompassHeadingff+0x6c>
    else if(rawHeading >= W_BEARING && rawHeading < NW_BEARING){
   b4eb4:	eddf 7a4a 	vldr	s15, [pc, #296]	; b4fe0 <_Z18readCompassHeadingff+0x298>
   b4eb8:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ec0:	db17      	blt.n	b4ef2 <_Z18readCompassHeadingff+0x1aa>
   b4ec2:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b4ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4eca:	d512      	bpl.n	b4ef2 <_Z18readCompassHeadingff+0x1aa>
        return (-45.0 * (rawHeading-NW_BEARING)/diff) - 45.0;
   b4ecc:	4b45      	ldr	r3, [pc, #276]	; (b4fe4 <_Z18readCompassHeadingff+0x29c>)
   b4ece:	2200      	movs	r2, #0
   b4ed0:	4620      	mov	r0, r4
   b4ed2:	4629      	mov	r1, r5
   b4ed4:	f00e fb6a 	bl	c35ac <__adddf3>
   b4ed8:	4b3f      	ldr	r3, [pc, #252]	; (b4fd8 <_Z18readCompassHeadingff+0x290>)
   b4eda:	2200      	movs	r2, #0
   b4edc:	f00e fd1c 	bl	c3918 <__aeabi_dmul>
   b4ee0:	4b41      	ldr	r3, [pc, #260]	; (b4fe8 <_Z18readCompassHeadingff+0x2a0>)
   b4ee2:	2200      	movs	r2, #0
   b4ee4:	f00e fe42 	bl	c3b6c <__aeabi_ddiv>
   b4ee8:	4b2f      	ldr	r3, [pc, #188]	; (b4fa8 <_Z18readCompassHeadingff+0x260>)
   b4eea:	2200      	movs	r2, #0
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4eec:	f00e fb5c 	bl	c35a8 <__aeabi_dsub>
   b4ef0:	e785      	b.n	b4dfe <_Z18readCompassHeadingff+0xb6>
    else if(rawHeading >=SW_BEARING && rawHeading < W_BEARING){
   b4ef2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; b4fec <_Z18readCompassHeadingff+0x2a4>
   b4ef6:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b4efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4efe:	db15      	blt.n	b4f2c <_Z18readCompassHeadingff+0x1e4>
   b4f00:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f08:	d510      	bpl.n	b4f2c <_Z18readCompassHeadingff+0x1e4>
        return (-45.0 * (rawHeading-W_BEARING)/diff) - 90.0;
   b4f0a:	4b39      	ldr	r3, [pc, #228]	; (b4ff0 <_Z18readCompassHeadingff+0x2a8>)
   b4f0c:	2200      	movs	r2, #0
   b4f0e:	4620      	mov	r0, r4
   b4f10:	4629      	mov	r1, r5
   b4f12:	f00e fb4b 	bl	c35ac <__adddf3>
   b4f16:	4b30      	ldr	r3, [pc, #192]	; (b4fd8 <_Z18readCompassHeadingff+0x290>)
   b4f18:	2200      	movs	r2, #0
   b4f1a:	f00e fcfd 	bl	c3918 <__aeabi_dmul>
   b4f1e:	4b35      	ldr	r3, [pc, #212]	; (b4ff4 <_Z18readCompassHeadingff+0x2ac>)
   b4f20:	2200      	movs	r2, #0
   b4f22:	f00e fe23 	bl	c3b6c <__aeabi_ddiv>
   b4f26:	4b28      	ldr	r3, [pc, #160]	; (b4fc8 <_Z18readCompassHeadingff+0x280>)
   b4f28:	2200      	movs	r2, #0
   b4f2a:	e7df      	b.n	b4eec <_Z18readCompassHeadingff+0x1a4>
        if(rawHeading > 0){
   b4f2c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b4f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b4f34:	f04f 0200 	mov.w	r2, #0
        if(rawHeading > 0){
   b4f38:	dd10      	ble.n	b4f5c <_Z18readCompassHeadingff+0x214>
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b4f3a:	4b2f      	ldr	r3, [pc, #188]	; (b4ff8 <_Z18readCompassHeadingff+0x2b0>)
   b4f3c:	4620      	mov	r0, r4
   b4f3e:	4629      	mov	r1, r5
   b4f40:	f00e fb32 	bl	c35a8 <__aeabi_dsub>
   b4f44:	4b18      	ldr	r3, [pc, #96]	; (b4fa8 <_Z18readCompassHeadingff+0x260>)
   b4f46:	2200      	movs	r2, #0
   b4f48:	f00e fce6 	bl	c3918 <__aeabi_dmul>
   b4f4c:	a310      	add	r3, pc, #64	; (adr r3, b4f90 <_Z18readCompassHeadingff+0x248>)
   b4f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f52:	f00e fe0b 	bl	c3b6c <__aeabi_ddiv>
   b4f56:	4b12      	ldr	r3, [pc, #72]	; (b4fa0 <_Z18readCompassHeadingff+0x258>)
   b4f58:	2200      	movs	r2, #0
   b4f5a:	e7c7      	b.n	b4eec <_Z18readCompassHeadingff+0x1a4>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4f5c:	4b27      	ldr	r3, [pc, #156]	; (b4ffc <_Z18readCompassHeadingff+0x2b4>)
   b4f5e:	4620      	mov	r0, r4
   b4f60:	4629      	mov	r1, r5
   b4f62:	f00e fb23 	bl	c35ac <__adddf3>
   b4f66:	a30c      	add	r3, pc, #48	; (adr r3, b4f98 <_Z18readCompassHeadingff+0x250>)
   b4f68:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f6c:	f00e fcd4 	bl	c3918 <__aeabi_dmul>
   b4f70:	4b23      	ldr	r3, [pc, #140]	; (b5000 <_Z18readCompassHeadingff+0x2b8>)
   b4f72:	2200      	movs	r2, #0
   b4f74:	f00e fdfa 	bl	c3b6c <__aeabi_ddiv>
   b4f78:	a303      	add	r3, pc, #12	; (adr r3, b4f88 <_Z18readCompassHeadingff+0x240>)
   b4f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f7e:	e7b5      	b.n	b4eec <_Z18readCompassHeadingff+0x1a4>
   b4f80:	54442d18 	.word	0x54442d18
   b4f84:	400921fb 	.word	0x400921fb
   b4f88:	00000000 	.word	0x00000000
   b4f8c:	4060e000 	.word	0x4060e000
   b4f90:	00000000 	.word	0x00000000
   b4f94:	4063a000 	.word	0x4063a000
   b4f98:	bb000000 	.word	0xbb000000
   b4f9c:	403d3c54 	.word	0x403d3c54
   b4fa0:	40668000 	.word	0x40668000
   b4fa4:	40180000 	.word	0x40180000
   b4fa8:	40468000 	.word	0x40468000
   b4fac:	40390000 	.word	0x40390000
   b4fb0:	42680000 	.word	0x42680000
   b4fb4:	403f0000 	.word	0x403f0000
   b4fb8:	403b0000 	.word	0x403b0000
   b4fbc:	42ac0000 	.word	0x42ac0000
   b4fc0:	404d0000 	.word	0x404d0000
   b4fc4:	403c0000 	.word	0x403c0000
   b4fc8:	40568000 	.word	0x40568000
   b4fcc:	42fa0000 	.word	0x42fa0000
   b4fd0:	40558000 	.word	0x40558000
   b4fd4:	40438000 	.word	0x40438000
   b4fd8:	c0468000 	.word	0xc0468000
   b4fdc:	c0380000 	.word	0xc0380000
   b4fe0:	c2200000 	.word	0xc2200000
   b4fe4:	40320000 	.word	0x40320000
   b4fe8:	c0360000 	.word	0xc0360000
   b4fec:	c29c0000 	.word	0xc29c0000
   b4ff0:	40440000 	.word	0x40440000
   b4ff4:	c0430000 	.word	0xc0430000
   b4ff8:	405f4000 	.word	0x405f4000
   b4ffc:	40538000 	.word	0x40538000
   b5000:	40598000 	.word	0x40598000
   b5004:	00000000 	.word	0x00000000

000b5008 <_Z12calcDistanceffff>:
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b5008:	b510      	push	{r4, lr}
   b500a:	ed2d 8b08 	vpush	{d8-d11}
  return deg * (3.14159/180);
   b500e:	ee70 7a60 	vsub.f32	s15, s0, s1
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b5012:	b082      	sub	sp, #8
  return deg * (3.14159/180);
   b5014:	ee17 0a90 	vmov	r0, s15
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b5018:	eef0 aa41 	vmov.f32	s21, s2
   b501c:	eeb0 aa61 	vmov.f32	s20, s3
   b5020:	eef0 8a60 	vmov.f32	s17, s1
   b5024:	eeb0 8a40 	vmov.f32	s16, s0
  return deg * (3.14159/180);
   b5028:	f00e fc1e 	bl	c3868 <__aeabi_f2d>
   b502c:	a342      	add	r3, pc, #264	; (adr r3, b5138 <_Z12calcDistanceffff+0x130>)
   b502e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5032:	f00e fc71 	bl	c3918 <__aeabi_dmul>
   b5036:	f00e ff67 	bl	c3f08 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b503a:	ee07 0a90 	vmov	s15, r0
   b503e:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
   b5042:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b5046:	f00c ff43 	bl	c1ed0 <sinf>
  return deg * (3.14159/180);
   b504a:	ee18 0a90 	vmov	r0, s17
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b504e:	eeb0 9a40 	vmov.f32	s18, s0
  return deg * (3.14159/180);
   b5052:	f00e fc09 	bl	c3868 <__aeabi_f2d>
   b5056:	a338      	add	r3, pc, #224	; (adr r3, b5138 <_Z12calcDistanceffff+0x130>)
   b5058:	e9d3 2300 	ldrd	r2, r3, [r3]
   b505c:	f00e fc5c 	bl	c3918 <__aeabi_dmul>
   b5060:	f00e ff52 	bl	c3f08 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5064:	ee00 0a10 	vmov	s0, r0
   b5068:	f00c fefa 	bl	c1e60 <cosf>
  return deg * (3.14159/180);
   b506c:	ee18 0a10 	vmov	r0, s16
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5070:	eef0 8a40 	vmov.f32	s17, s0
  return deg * (3.14159/180);
   b5074:	f00e fbf8 	bl	c3868 <__aeabi_f2d>
   b5078:	a32f      	add	r3, pc, #188	; (adr r3, b5138 <_Z12calcDistanceffff+0x130>)
   b507a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b507e:	f00e fc4b 	bl	c3918 <__aeabi_dmul>
   b5082:	f00e ff41 	bl	c3f08 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5086:	ee00 0a10 	vmov	s0, r0
   b508a:	f00c fee9 	bl	c1e60 <cosf>
  return deg * (3.14159/180);
   b508e:	ee7a 7aca 	vsub.f32	s15, s21, s20
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5092:	eef0 9a40 	vmov.f32	s19, s0
  return deg * (3.14159/180);
   b5096:	ee17 0a90 	vmov	r0, s15
   b509a:	f00e fbe5 	bl	c3868 <__aeabi_f2d>
   b509e:	a326      	add	r3, pc, #152	; (adr r3, b5138 <_Z12calcDistanceffff+0x130>)
   b50a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b50a4:	f00e fc38 	bl	c3918 <__aeabi_dmul>
   b50a8:	f00e ff2e 	bl	c3f08 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b50ac:	ee07 0a90 	vmov	s15, r0
   b50b0:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b50b4:	f00c ff0c 	bl	c1ed0 <sinf>
   b50b8:	ee68 8aa9 	vmul.f32	s17, s17, s19
   b50bc:	ee68 8a80 	vmul.f32	s17, s17, s0
   b50c0:	ee28 8a80 	vmul.f32	s16, s17, s0
   b50c4:	eea9 8a09 	vfma.f32	s16, s18, s18
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   b50c8:	eeb0 0a48 	vmov.f32	s0, s16
   b50cc:	f00c ff78 	bl	c1fc0 <sqrtf>
    float c = 2 * atan2(sqrt(a), sqrt(1.0-a)); 
   b50d0:	ee18 0a10 	vmov	r0, s16
   b50d4:	ee10 4a10 	vmov	r4, s0
   b50d8:	f00e fbc6 	bl	c3868 <__aeabi_f2d>
   b50dc:	4602      	mov	r2, r0
   b50de:	460b      	mov	r3, r1
   b50e0:	2000      	movs	r0, #0
   b50e2:	4913      	ldr	r1, [pc, #76]	; (b5130 <_Z12calcDistanceffff+0x128>)
   b50e4:	f00e fa60 	bl	c35a8 <__aeabi_dsub>
   b50e8:	ec41 0b10 	vmov	d0, r0, r1
   b50ec:	f00c ff2c 	bl	c1f48 <sqrt>
      return atan2(__type(__y), __type(__x));
   b50f0:	4620      	mov	r0, r4
   b50f2:	ed8d 0b00 	vstr	d0, [sp]
   b50f6:	f00e fbb7 	bl	c3868 <__aeabi_f2d>
   b50fa:	ed9d 1b00 	vldr	d1, [sp]
   b50fe:	ec41 0b10 	vmov	d0, r0, r1
   b5102:	f00c ff1f 	bl	c1f44 <atan2>
   b5106:	ec53 2b10 	vmov	r2, r3, d0
   b510a:	ee10 0a10 	vmov	r0, s0
   b510e:	4619      	mov	r1, r3
   b5110:	f00e fa4c 	bl	c35ac <__adddf3>
   b5114:	f00e fef8 	bl	c3f08 <__aeabi_d2f>
}
   b5118:	ed9f 0a06 	vldr	s0, [pc, #24]	; b5134 <_Z12calcDistanceffff+0x12c>
   b511c:	ee07 0a90 	vmov	s15, r0
   b5120:	ee27 0a80 	vmul.f32	s0, s15, s0
   b5124:	b002      	add	sp, #8
   b5126:	ecbd 8b08 	vpop	{d8-d11}
   b512a:	bd10      	pop	{r4, pc}
   b512c:	f3af 8000 	nop.w
   b5130:	3ff00000 	.word	0x3ff00000
   b5134:	4ac26d70 	.word	0x4ac26d70
   b5138:	a50de270 	.word	0xa50de270
   b513c:	3f91df45 	.word	0x3f91df45

000b5140 <_Z9calcDeltaff>:
float calcDelta(float compassHead, float targetHead){
   b5140:	b538      	push	{r3, r4, r5, lr}
    if(targetHead > 0){
   b5142:	eef5 0ac0 	vcmpe.f32	s1, #0.0
   b5146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
float calcDelta(float compassHead, float targetHead){
   b514a:	ed2d 8b02 	vpush	{d8}
        if(compassHead > 0){
   b514e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
float calcDelta(float compassHead, float targetHead){
   b5152:	eeb0 8a60 	vmov.f32	s16, s1
    if(targetHead > 0){
   b5156:	dd37      	ble.n	b51c8 <_Z9calcDeltaff+0x88>
        if(compassHead > 0){
   b5158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b515c:	dd04      	ble.n	b5168 <_Z9calcDeltaff+0x28>
            return targetHead - compassHead;
   b515e:	ee38 0a40 	vsub.f32	s0, s16, s0
}
   b5162:	ecbd 8b02 	vpop	{d8}
   b5166:	bd38      	pop	{r3, r4, r5, pc}
            float diff = -(180.0 - targetHead);
   b5168:	eddf 7a2b 	vldr	s15, [pc, #172]	; b5218 <_Z9calcDeltaff+0xd8>
   b516c:	ee77 7ae0 	vsub.f32	s15, s15, s1
   b5170:	eef1 7a67 	vneg.f32	s15, s15
            if(diff < compassHead) return targetHead - compassHead;
   b5174:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b517c:	dcef      	bgt.n	b515e <_Z9calcDeltaff+0x1e>
            else return 0 - (180.0 + compassHead) - (180.0 - targetHead);
   b517e:	ee10 0a10 	vmov	r0, s0
   b5182:	f00e fb71 	bl	c3868 <__aeabi_f2d>
   b5186:	4b25      	ldr	r3, [pc, #148]	; (b521c <_Z9calcDeltaff+0xdc>)
   b5188:	2200      	movs	r2, #0
   b518a:	f00e fa0f 	bl	c35ac <__adddf3>
   b518e:	4602      	mov	r2, r0
   b5190:	460b      	mov	r3, r1
   b5192:	2000      	movs	r0, #0
   b5194:	2100      	movs	r1, #0
   b5196:	f00e fa07 	bl	c35a8 <__aeabi_dsub>
   b519a:	4604      	mov	r4, r0
   b519c:	ee18 0a10 	vmov	r0, s16
   b51a0:	460d      	mov	r5, r1
   b51a2:	f00e fb61 	bl	c3868 <__aeabi_f2d>
   b51a6:	4602      	mov	r2, r0
   b51a8:	460b      	mov	r3, r1
   b51aa:	2000      	movs	r0, #0
   b51ac:	491b      	ldr	r1, [pc, #108]	; (b521c <_Z9calcDeltaff+0xdc>)
   b51ae:	f00e f9fb 	bl	c35a8 <__aeabi_dsub>
   b51b2:	4602      	mov	r2, r0
   b51b4:	460b      	mov	r3, r1
   b51b6:	4620      	mov	r0, r4
   b51b8:	4629      	mov	r1, r5
   b51ba:	f00e f9f5 	bl	c35a8 <__aeabi_dsub>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   b51be:	f00e fea3 	bl	c3f08 <__aeabi_d2f>
   b51c2:	ee00 0a10 	vmov	s0, r0
   b51c6:	e7cc      	b.n	b5162 <_Z9calcDeltaff+0x22>
        if(compassHead > 0){
   b51c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b51cc:	ddc7      	ble.n	b515e <_Z9calcDeltaff+0x1e>
            float diff = 180.0 + targetHead;
   b51ce:	eddf 7a12 	vldr	s15, [pc, #72]	; b5218 <_Z9calcDeltaff+0xd8>
   b51d2:	ee70 7aa7 	vadd.f32	s15, s1, s15
            if(diff > compassHead) return targetHead - compassHead;
   b51d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b51da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b51de:	d4be      	bmi.n	b515e <_Z9calcDeltaff+0x1e>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   b51e0:	ee10 0a10 	vmov	r0, s0
   b51e4:	f00e fb40 	bl	c3868 <__aeabi_f2d>
   b51e8:	4602      	mov	r2, r0
   b51ea:	460b      	mov	r3, r1
   b51ec:	2000      	movs	r0, #0
   b51ee:	490b      	ldr	r1, [pc, #44]	; (b521c <_Z9calcDeltaff+0xdc>)
   b51f0:	f00e f9da 	bl	c35a8 <__aeabi_dsub>
   b51f4:	4604      	mov	r4, r0
   b51f6:	ee18 0a10 	vmov	r0, s16
   b51fa:	460d      	mov	r5, r1
   b51fc:	f00e fb34 	bl	c3868 <__aeabi_f2d>
   b5200:	4b06      	ldr	r3, [pc, #24]	; (b521c <_Z9calcDeltaff+0xdc>)
   b5202:	2200      	movs	r2, #0
   b5204:	f00e f9d2 	bl	c35ac <__adddf3>
   b5208:	4602      	mov	r2, r0
   b520a:	460b      	mov	r3, r1
   b520c:	4620      	mov	r0, r4
   b520e:	4629      	mov	r1, r5
   b5210:	f00e f9cc 	bl	c35ac <__adddf3>
   b5214:	e7d3      	b.n	b51be <_Z9calcDeltaff+0x7e>
   b5216:	bf00      	nop
   b5218:	43340000 	.word	0x43340000
   b521c:	40668000 	.word	0x40668000

000b5220 <_Z12updateMotorsv>:
void updateMotors(){
   b5220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5224:	ed2d 8b04 	vpush	{d8-d9}
        if(driveMode == 1 || driveMode == 2){       //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b5228:	4b84      	ldr	r3, [pc, #528]	; (b543c <_Z12updateMotorsv+0x21c>)
   b522a:	4c85      	ldr	r4, [pc, #532]	; (b5440 <_Z12updateMotorsv+0x220>)
   b522c:	781b      	ldrb	r3, [r3, #0]
   b522e:	4d85      	ldr	r5, [pc, #532]	; (b5444 <_Z12updateMotorsv+0x224>)
   b5230:	f8df a240 	ldr.w	sl, [pc, #576]	; b5474 <_Z12updateMotorsv+0x254>
   b5234:	4f84      	ldr	r7, [pc, #528]	; (b5448 <_Z12updateMotorsv+0x228>)
   b5236:	3b01      	subs	r3, #1
   b5238:	2b01      	cmp	r3, #1
void updateMotors(){
   b523a:	b089      	sub	sp, #36	; 0x24
        if(driveMode == 1 || driveMode == 2){       //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b523c:	f200 80b0 	bhi.w	b53a0 <_Z12updateMotorsv+0x180>
            if(travelDistance < MTR_CUTOFF_RAD){
   b5240:	4b82      	ldr	r3, [pc, #520]	; (b544c <_Z12updateMotorsv+0x22c>)
   b5242:	edd3 7a00 	vldr	s15, [r3]
   b5246:	4b82      	ldr	r3, [pc, #520]	; (b5450 <_Z12updateMotorsv+0x230>)
   b5248:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
   b524c:	eef4 7ac7 	vcmpe.f32	s15, s14
   b5250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5254:	d559      	bpl.n	b530a <_Z12updateMotorsv+0xea>
                pointArrived = true;
   b5256:	2201      	movs	r2, #1
   b5258:	701a      	strb	r2, [r3, #0]
                    setLSpeed = 90;
   b525a:	235a      	movs	r3, #90	; 0x5a
   b525c:	7023      	strb	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b525e:	702b      	strb	r3, [r5, #0]
        if(setLSpeed < 90 && setLSpeed >=67) setLSpeed = 67;
   b5260:	7823      	ldrb	r3, [r4, #0]
        if(leftMotorSpeed < setLSpeed){
   b5262:	4e7c      	ldr	r6, [pc, #496]	; (b5454 <_Z12updateMotorsv+0x234>)
        if(setLSpeed < 90 && setLSpeed >=67) setLSpeed = 67;
   b5264:	3b43      	subs	r3, #67	; 0x43
   b5266:	2b16      	cmp	r3, #22
   b5268:	bf9c      	itt	ls
   b526a:	2343      	movls	r3, #67	; 0x43
   b526c:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >=67) setRSpeed = 67;
   b526e:	782b      	ldrb	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){
   b5270:	7822      	ldrb	r2, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >=67) setRSpeed = 67;
   b5272:	3b43      	subs	r3, #67	; 0x43
   b5274:	2b16      	cmp	r3, #22
   b5276:	bf9c      	itt	ls
   b5278:	2343      	movls	r3, #67	; 0x43
   b527a:	702b      	strbls	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){
   b527c:	7833      	ldrb	r3, [r6, #0]
   b527e:	4293      	cmp	r3, r2
   b5280:	f080 80c9 	bcs.w	b5416 <_Z12updateMotorsv+0x1f6>
            if(setLSpeed - leftMotorSpeed > MTR_RAMP_SPD) leftMotorSpeed += MTR_RAMP_SPD;
   b5284:	1ad1      	subs	r1, r2, r3
   b5286:	2903      	cmp	r1, #3
   b5288:	f340 80cc 	ble.w	b5424 <_Z12updateMotorsv+0x204>
   b528c:	3303      	adds	r3, #3
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;
   b528e:	7033      	strb	r3, [r6, #0]
        if(rightMotorSpeed < setRSpeed){
   b5290:	4c71      	ldr	r4, [pc, #452]	; (b5458 <_Z12updateMotorsv+0x238>)
   b5292:	782a      	ldrb	r2, [r5, #0]
   b5294:	7823      	ldrb	r3, [r4, #0]
   b5296:	4293      	cmp	r3, r2
   b5298:	f080 80c6 	bcs.w	b5428 <_Z12updateMotorsv+0x208>
            if(setRSpeed - rightMotorSpeed > MTR_RAMP_SPD) rightMotorSpeed += MTR_RAMP_SPD;
   b529c:	1ad1      	subs	r1, r2, r3
   b529e:	2903      	cmp	r1, #3
   b52a0:	f340 80c9 	ble.w	b5436 <_Z12updateMotorsv+0x216>
   b52a4:	3303      	adds	r3, #3
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD;
   b52a6:	7023      	strb	r3, [r4, #0]
        Serial.printlnf("Lspd: %d Rspd: %d HDelt: %d Hdist: %0.2f MR: %0.2f", leftMotorSpeed, rightMotorSpeed, (int)targetDelta, travelDistance, autoMoveRate);
   b52a8:	f00c fb04 	bl	c18b4 <_Z16_fetch_usbserialv>
   b52ac:	7832      	ldrb	r2, [r6, #0]
   b52ae:	7823      	ldrb	r3, [r4, #0]
   b52b0:	9206      	str	r2, [sp, #24]
   b52b2:	4605      	mov	r5, r0
   b52b4:	f8da 0000 	ldr.w	r0, [sl]
   b52b8:	9307      	str	r3, [sp, #28]
   b52ba:	f00e fad5 	bl	c3868 <__aeabi_f2d>
   b52be:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b52c2:	4b62      	ldr	r3, [pc, #392]	; (b544c <_Z12updateMotorsv+0x22c>)
   b52c4:	6818      	ldr	r0, [r3, #0]
   b52c6:	f00e facf 	bl	c3868 <__aeabi_f2d>
   b52ca:	edd7 7a00 	vldr	s15, [r7]
   b52ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b52d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b52d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b52da:	edcd 7a00 	vstr	s15, [sp]
   b52de:	495f      	ldr	r1, [pc, #380]	; (b545c <_Z12updateMotorsv+0x23c>)
   b52e0:	4628      	mov	r0, r5
   b52e2:	f7ff f839 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        ESCL.write(leftMotorSpeed);
   b52e6:	7831      	ldrb	r1, [r6, #0]
   b52e8:	485d      	ldr	r0, [pc, #372]	; (b5460 <_Z12updateMotorsv+0x240>)
   b52ea:	f00b feac 	bl	c1046 <_ZN5Servo5writeEi>
        ESCR.write(180-rightMotorSpeed);
   b52ee:	7821      	ldrb	r1, [r4, #0]
   b52f0:	485c      	ldr	r0, [pc, #368]	; (b5464 <_Z12updateMotorsv+0x244>)
   b52f2:	f1c1 01b4 	rsb	r1, r1, #180	; 0xb4
   b52f6:	f00b fea6 	bl	c1046 <_ZN5Servo5writeEi>
        updateMotorControl = false;        
   b52fa:	4b5b      	ldr	r3, [pc, #364]	; (b5468 <_Z12updateMotorsv+0x248>)
   b52fc:	2200      	movs	r2, #0
   b52fe:	701a      	strb	r2, [r3, #0]
}
   b5300:	b009      	add	sp, #36	; 0x24
   b5302:	ecbd 8b04 	vpop	{d8-d9}
   b5306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if(travelDistance < SENTRY_IDLE_RAD){
   b530a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
   b530e:	eef4 7ac7 	vcmpe.f32	s15, s14
   b5312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5316:	d559      	bpl.n	b53cc <_Z12updateMotorsv+0x1ac>
                if(pointArrived){
   b5318:	f893 b000 	ldrb.w	fp, [r3]
   b531c:	f1bb 0f00 	cmp.w	fp, #0
   b5320:	d19b      	bne.n	b525a <_Z12updateMotorsv+0x3a>
                    int Lset = (90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate)) * (travelDistance/SENTRY_IDLE_RAD);
   b5322:	ed9a 8a00 	vldr	s16, [sl]
   b5326:	eddf 8a51 	vldr	s17, [pc, #324]	; b546c <_Z12updateMotorsv+0x24c>
   b532a:	ed97 7a00 	vldr	s14, [r7]
   b532e:	eee8 8a28 	vfma.f32	s17, s16, s17
   b5332:	ee17 0a90 	vmov	r0, s15
   b5336:	ee28 8a07 	vmul.f32	s16, s16, s14
   b533a:	f00e fa95 	bl	c3868 <__aeabi_f2d>
   b533e:	4b4c      	ldr	r3, [pc, #304]	; (b5470 <_Z12updateMotorsv+0x250>)
   b5340:	2200      	movs	r2, #0
   b5342:	f00e fae9 	bl	c3918 <__aeabi_dmul>
   b5346:	ee78 7a88 	vadd.f32	s15, s17, s16
   b534a:	4680      	mov	r8, r0
   b534c:	4689      	mov	r9, r1
   b534e:	ee17 0a90 	vmov	r0, s15
   b5352:	f00e fa89 	bl	c3868 <__aeabi_f2d>
   b5356:	4642      	mov	r2, r8
   b5358:	464b      	mov	r3, r9
   b535a:	f00e fadd 	bl	c3918 <__aeabi_dmul>
   b535e:	f00e fd8b 	bl	c3e78 <__aeabi_d2iz>
   b5362:	4606      	mov	r6, r0
                    int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate) * (travelDistance/SENTRY_IDLE_RAD);
   b5364:	ee18 0a90 	vmov	r0, s17
   b5368:	f00e fa7e 	bl	c3868 <__aeabi_f2d>
   b536c:	ec41 0b19 	vmov	d9, r0, r1
   b5370:	ee18 0a10 	vmov	r0, s16
   b5374:	f00e fa78 	bl	c3868 <__aeabi_f2d>
   b5378:	4642      	mov	r2, r8
   b537a:	464b      	mov	r3, r9
   b537c:	f00e facc 	bl	c3918 <__aeabi_dmul>
   b5380:	4602      	mov	r2, r0
   b5382:	460b      	mov	r3, r1
   b5384:	ec51 0b19 	vmov	r0, r1, d9
   b5388:	f00e f90e 	bl	c35a8 <__aeabi_dsub>
   b538c:	f00e fd74 	bl	c3e78 <__aeabi_d2iz>
                    if(Lset < 0) setLSpeed = 0;
   b5390:	2e00      	cmp	r6, #0
   b5392:	da12      	bge.n	b53ba <_Z12updateMotorsv+0x19a>
   b5394:	f884 b000 	strb.w	fp, [r4]
                    if(Rset < 0) setRSpeed = 0;
   b5398:	2800      	cmp	r0, #0
   b539a:	da13      	bge.n	b53c4 <_Z12updateMotorsv+0x1a4>
   b539c:	2300      	movs	r3, #0
                else setRSpeed = Rset;
   b539e:	702b      	strb	r3, [r5, #0]
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b53a0:	7823      	ldrb	r3, [r4, #0]
   b53a2:	3b5b      	subs	r3, #91	; 0x5b
   b53a4:	2b20      	cmp	r3, #32
   b53a6:	bf9c      	itt	ls
   b53a8:	237b      	movls	r3, #123	; 0x7b
   b53aa:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b53ac:	782b      	ldrb	r3, [r5, #0]
   b53ae:	3b5b      	subs	r3, #91	; 0x5b
   b53b0:	2b20      	cmp	r3, #32
   b53b2:	f63f af55 	bhi.w	b5260 <_Z12updateMotorsv+0x40>
   b53b6:	237b      	movs	r3, #123	; 0x7b
   b53b8:	e751      	b.n	b525e <_Z12updateMotorsv+0x3e>
                    else if(Lset > 180) setLSpeed = 180;
   b53ba:	2eb4      	cmp	r6, #180	; 0xb4
   b53bc:	bfc4      	itt	gt
   b53be:	23b4      	movgt	r3, #180	; 0xb4
   b53c0:	7023      	strbgt	r3, [r4, #0]
   b53c2:	e7e9      	b.n	b5398 <_Z12updateMotorsv+0x178>
                    else if(Rset > 180) setRSpeed = 180;
   b53c4:	28b4      	cmp	r0, #180	; 0xb4
   b53c6:	ddeb      	ble.n	b53a0 <_Z12updateMotorsv+0x180>
   b53c8:	23b4      	movs	r3, #180	; 0xb4
   b53ca:	e7e8      	b.n	b539e <_Z12updateMotorsv+0x17e>
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate);
   b53cc:	edda 6a00 	vldr	s13, [sl]
   b53d0:	eddf 7a26 	vldr	s15, [pc, #152]	; b546c <_Z12updateMotorsv+0x24c>
   b53d4:	ed97 6a00 	vldr	s12, [r7]
   b53d8:	eee6 7aa7 	vfma.f32	s15, s13, s15
                pointArrived = false;
   b53dc:	2100      	movs	r1, #0
   b53de:	7019      	strb	r1, [r3, #0]
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate);
   b53e0:	eeb0 7a67 	vmov.f32	s14, s15
   b53e4:	eea6 7a86 	vfma.f32	s14, s13, s12
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate);
   b53e8:	eee6 7ac6 	vfms.f32	s15, s13, s12
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate);
   b53ec:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate);
   b53f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate);
   b53f4:	ee17 2a10 	vmov	r2, s14
                if(Lset < 0) setLSpeed = 0;
   b53f8:	428a      	cmp	r2, r1
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate);
   b53fa:	ee17 3a90 	vmov	r3, s15
                if(Lset < 0) setLSpeed = 0;
   b53fe:	da05      	bge.n	b540c <_Z12updateMotorsv+0x1ec>
   b5400:	7021      	strb	r1, [r4, #0]
                if(Rset < 0) setRSpeed = 0;
   b5402:	2b00      	cmp	r3, #0
   b5404:	dbca      	blt.n	b539c <_Z12updateMotorsv+0x17c>
                else if(Rset > 180) setRSpeed = 180;
   b5406:	2bb4      	cmp	r3, #180	; 0xb4
   b5408:	dcde      	bgt.n	b53c8 <_Z12updateMotorsv+0x1a8>
   b540a:	e7c8      	b.n	b539e <_Z12updateMotorsv+0x17e>
                else if(Lset > 180) setLSpeed = 180;
   b540c:	2ab4      	cmp	r2, #180	; 0xb4
   b540e:	bfc8      	it	gt
   b5410:	22b4      	movgt	r2, #180	; 0xb4
                else setLSpeed = Lset;
   b5412:	7022      	strb	r2, [r4, #0]
   b5414:	e7f5      	b.n	b5402 <_Z12updateMotorsv+0x1e2>
        else if(leftMotorSpeed > setLSpeed){
   b5416:	f67f af3b 	bls.w	b5290 <_Z12updateMotorsv+0x70>
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;
   b541a:	1a99      	subs	r1, r3, r2
   b541c:	2903      	cmp	r1, #3
   b541e:	dd01      	ble.n	b5424 <_Z12updateMotorsv+0x204>
   b5420:	3b03      	subs	r3, #3
   b5422:	e734      	b.n	b528e <_Z12updateMotorsv+0x6e>
            else leftMotorSpeed = setLSpeed;
   b5424:	7032      	strb	r2, [r6, #0]
   b5426:	e733      	b.n	b5290 <_Z12updateMotorsv+0x70>
        else if(rightMotorSpeed > setRSpeed){
   b5428:	f67f af3e 	bls.w	b52a8 <_Z12updateMotorsv+0x88>
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD;
   b542c:	1a99      	subs	r1, r3, r2
   b542e:	2903      	cmp	r1, #3
   b5430:	dd01      	ble.n	b5436 <_Z12updateMotorsv+0x216>
   b5432:	3b03      	subs	r3, #3
   b5434:	e737      	b.n	b52a6 <_Z12updateMotorsv+0x86>
            else rightMotorSpeed = setRSpeed;
   b5436:	7022      	strb	r2, [r4, #0]
   b5438:	e736      	b.n	b52a8 <_Z12updateMotorsv+0x88>
   b543a:	bf00      	nop
   b543c:	2003db60 	.word	0x2003db60
   b5440:	2003e580 	.word	0x2003e580
   b5444:	2003e581 	.word	0x2003e581
   b5448:	2003e5cc 	.word	0x2003e5cc
   b544c:	2003e5dc 	.word	0x2003e5dc
   b5450:	2003e0d9 	.word	0x2003e0d9
   b5454:	2003de44 	.word	0x2003de44
   b5458:	2003e0db 	.word	0x2003e0db
   b545c:	000c650d 	.word	0x000c650d
   b5460:	2003dd74 	.word	0x2003dd74
   b5464:	2003dd84 	.word	0x2003dd84
   b5468:	2003e5ec 	.word	0x2003e5ec
   b546c:	42b40000 	.word	0x42b40000
   b5470:	3fd00000 	.word	0x3fd00000
   b5474:	2003db58 	.word	0x2003db58

000b5478 <_Z8printBLEPKc>:
void printBLE(const char *dataOut){
   b5478:	b598      	push	{r3, r4, r7, lr}
   b547a:	af00      	add	r7, sp, #0
   b547c:	4604      	mov	r4, r0
        uint8_t txBuf_tmp[strlen(dataOut)];
   b547e:	f00e fe8a 	bl	c4196 <strlen>
   b5482:	3007      	adds	r0, #7
   b5484:	f020 0007 	bic.w	r0, r0, #7
   b5488:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,dataOut,strlen(dataOut));
   b548c:	4620      	mov	r0, r4
   b548e:	f00e fe82 	bl	c4196 <strlen>
   b5492:	4621      	mov	r1, r4
   b5494:	4602      	mov	r2, r0
   b5496:	4668      	mov	r0, sp
   b5498:	f00e fdca 	bl	c4030 <memcpy>
        bledbgCharacteristic.setValue(txBuf_tmp, strlen(dataOut));
   b549c:	4620      	mov	r0, r4
   b549e:	f00e fe7a 	bl	c4196 <strlen>
   b54a2:	2300      	movs	r3, #0
   b54a4:	4602      	mov	r2, r0
   b54a6:	4669      	mov	r1, sp
   b54a8:	4802      	ldr	r0, [pc, #8]	; (b54b4 <_Z8printBLEPKc+0x3c>)
   b54aa:	f008 ff75 	bl	be398 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
}
   b54ae:	46bd      	mov	sp, r7
   b54b0:	bd98      	pop	{r3, r4, r7, pc}
   b54b2:	bf00      	nop
   b54b4:	2003ddc8 	.word	0x2003ddc8

000b54b8 <_Z15getPositionDatav>:
bool getPositionData(){
   b54b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        targetLat = 35.769889;
   b54bc:	4e58      	ldr	r6, [pc, #352]	; (b5620 <_Z15getPositionDatav+0x168>)
   b54be:	4b59      	ldr	r3, [pc, #356]	; (b5624 <_Z15getPositionDatav+0x16c>)
        targetLon = -78.673824;
   b54c0:	f8df 81a4 	ldr.w	r8, [pc, #420]	; b5668 <_Z15getPositionDatav+0x1b0>
        targetLat = 35.769889;
   b54c4:	6033      	str	r3, [r6, #0]
        latitude = 35.771801;
   b54c6:	4f58      	ldr	r7, [pc, #352]	; (b5628 <_Z15getPositionDatav+0x170>)
        targetLon = -78.673824;
   b54c8:	4b58      	ldr	r3, [pc, #352]	; (b562c <_Z15getPositionDatav+0x174>)
   b54ca:	f8c8 3000 	str.w	r3, [r8]
        longitude = -78.674378;
   b54ce:	f8df 919c 	ldr.w	r9, [pc, #412]	; b566c <_Z15getPositionDatav+0x1b4>
        latitude = 35.771801;
   b54d2:	4b57      	ldr	r3, [pc, #348]	; (b5630 <_Z15getPositionDatav+0x178>)
        lis3mdl.read();      // get X Y and Z data at once
   b54d4:	4857      	ldr	r0, [pc, #348]	; (b5634 <_Z15getPositionDatav+0x17c>)
        latitude = 35.771801;
   b54d6:	603b      	str	r3, [r7, #0]
bool getPositionData(){
   b54d8:	b0ab      	sub	sp, #172	; 0xac
        longitude = -78.674378;
   b54da:	4b57      	ldr	r3, [pc, #348]	; (b5638 <_Z15getPositionDatav+0x180>)
   b54dc:	f8c9 3000 	str.w	r3, [r9]
        lis3mdl.read();      // get X Y and Z data at once
   b54e0:	f002 fd6c 	bl	b7fbc <_ZN16Adafruit_LIS3MDL4readEv>
        bool compassAvail = lis3mdl.getEvent(&event);
   b54e4:	4853      	ldr	r0, [pc, #332]	; (b5634 <_Z15getPositionDatav+0x17c>)
   b54e6:	a908      	add	r1, sp, #32
   b54e8:	f002 fdae 	bl	b8048 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>
        if(compassAvail) compassHeading = readCompassHeading(event.magnetic.x,event.magnetic.y);
   b54ec:	4604      	mov	r4, r0
   b54ee:	b140      	cbz	r0, b5502 <_Z15getPositionDatav+0x4a>
   b54f0:	eddd 0a0e 	vldr	s1, [sp, #56]	; 0x38
   b54f4:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
   b54f8:	f7ff fc26 	bl	b4d48 <_Z18readCompassHeadingff>
   b54fc:	4b4f      	ldr	r3, [pc, #316]	; (b563c <_Z15getPositionDatav+0x184>)
   b54fe:	ed83 0a00 	vstr	s0, [r3]
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b5502:	ed96 7a00 	vldr	s14, [r6]
   b5506:	ed9f 6a4e 	vldr	s12, [pc, #312]	; b5640 <_Z15getPositionDatav+0x188>
   b550a:	eeb4 7ac6 	vcmpe.f32	s14, s12
   b550e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5512:	db7b      	blt.n	b560c <_Z15getPositionDatav+0x154>
   b5514:	eddf 6a4b 	vldr	s13, [pc, #300]	; b5644 <_Z15getPositionDatav+0x18c>
   b5518:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5520:	d874      	bhi.n	b560c <_Z15getPositionDatav+0x154>
   b5522:	edd8 7a00 	vldr	s15, [r8]
   b5526:	eef4 7ac6 	vcmpe.f32	s15, s12
   b552a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b552e:	db6d      	blt.n	b560c <_Z15getPositionDatav+0x154>
   b5530:	eef4 7ae6 	vcmpe.f32	s15, s13
   b5534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5538:	d868      	bhi.n	b560c <_Z15getPositionDatav+0x154>
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b553a:	edd7 0a00 	vldr	s1, [r7]
   b553e:	ed99 0a00 	vldr	s0, [r9]
   b5542:	4d41      	ldr	r5, [pc, #260]	; (b5648 <_Z15getPositionDatav+0x190>)
  { return __builtin_atan2f(__y, __x); }
   b5544:	ee77 0a60 	vsub.f32	s1, s14, s1
   b5548:	ee37 0ac0 	vsub.f32	s0, s15, s0
   b554c:	f00c fd36 	bl	c1fbc <atan2f>
   b5550:	eddf 7a3e 	vldr	s15, [pc, #248]	; b564c <_Z15getPositionDatav+0x194>
   b5554:	ee60 7a27 	vmul.f32	s15, s0, s15
   b5558:	ee17 0a90 	vmov	r0, s15
   b555c:	f00e f984 	bl	c3868 <__aeabi_f2d>
   b5560:	a32d      	add	r3, pc, #180	; (adr r3, b5618 <_Z15getPositionDatav+0x160>)
   b5562:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5566:	f00e fb01 	bl	c3b6c <__aeabi_ddiv>
   b556a:	f00e fccd 	bl	c3f08 <__aeabi_d2f>
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b556e:	edd9 1a00 	vldr	s3, [r9]
   b5572:	ed98 1a00 	vldr	s2, [r8]
   b5576:	edd7 0a00 	vldr	s1, [r7]
   b557a:	ed96 0a00 	vldr	s0, [r6]
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b557e:	6028      	str	r0, [r5, #0]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b5580:	f7ff fd42 	bl	b5008 <_Z12calcDistanceffff>
            targetDelta = calcDelta(compassHeading, travelHeading);
   b5584:	4e2d      	ldr	r6, [pc, #180]	; (b563c <_Z15getPositionDatav+0x184>)
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b5586:	4b32      	ldr	r3, [pc, #200]	; (b5650 <_Z15getPositionDatav+0x198>)
            targetDelta = calcDelta(compassHeading, travelHeading);
   b5588:	edd5 0a00 	vldr	s1, [r5]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b558c:	ed83 0a00 	vstr	s0, [r3]
            targetDelta = calcDelta(compassHeading, travelHeading);
   b5590:	ed96 0a00 	vldr	s0, [r6]
   b5594:	4f2f      	ldr	r7, [pc, #188]	; (b5654 <_Z15getPositionDatav+0x19c>)
   b5596:	f7ff fdd3 	bl	b5140 <_Z9calcDeltaff>
   b559a:	ed87 0a00 	vstr	s0, [r7]
   b559e:	f008 f95d 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
            lastTelemTime = millis();
   b55a2:	4b2d      	ldr	r3, [pc, #180]	; (b5658 <_Z15getPositionDatav+0x1a0>)
   b55a4:	6018      	str	r0, [r3, #0]
            if(compassAvail) telemetryAvail = true;
   b55a6:	b114      	cbz	r4, b55ae <_Z15getPositionDatav+0xf6>
   b55a8:	4b2c      	ldr	r3, [pc, #176]	; (b565c <_Z15getPositionDatav+0x1a4>)
   b55aa:	2201      	movs	r2, #1
   b55ac:	701a      	strb	r2, [r3, #0]
   b55ae:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
   b55b2:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
   b55b6:	f00c fd01 	bl	c1fbc <atan2f>
   b55ba:	ee10 0a10 	vmov	r0, s0
            sprintf(tempbuf,"Raw : %f, Compass : %f, Travel hd: %f, T Delta: %f", atan2(event.magnetic.y, event.magnetic.x) * 180.0 / M_PI, compassHeading, travelHeading, targetDelta);
   b55be:	f00e f953 	bl	c3868 <__aeabi_f2d>
   b55c2:	4b27      	ldr	r3, [pc, #156]	; (b5660 <_Z15getPositionDatav+0x1a8>)
   b55c4:	2200      	movs	r2, #0
   b55c6:	f00e f9a7 	bl	c3918 <__aeabi_dmul>
   b55ca:	a313      	add	r3, pc, #76	; (adr r3, b5618 <_Z15getPositionDatav+0x160>)
   b55cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55d0:	f00e facc 	bl	c3b6c <__aeabi_ddiv>
   b55d4:	4602      	mov	r2, r0
   b55d6:	460b      	mov	r3, r1
   b55d8:	6838      	ldr	r0, [r7, #0]
   b55da:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b55de:	f00e f943 	bl	c3868 <__aeabi_f2d>
   b55e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b55e6:	6828      	ldr	r0, [r5, #0]
   b55e8:	f00e f93e 	bl	c3868 <__aeabi_f2d>
   b55ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b55f0:	6830      	ldr	r0, [r6, #0]
   b55f2:	f00e f939 	bl	c3868 <__aeabi_f2d>
   b55f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b55fa:	e9cd 0100 	strd	r0, r1, [sp]
   b55fe:	4919      	ldr	r1, [pc, #100]	; (b5664 <_Z15getPositionDatav+0x1ac>)
   b5600:	a811      	add	r0, sp, #68	; 0x44
   b5602:	f008 fc19 	bl	bde38 <sprintf>
            printBLE(tempbuf);
   b5606:	a811      	add	r0, sp, #68	; 0x44
   b5608:	f7ff ff36 	bl	b5478 <_Z8printBLEPKc>
}
   b560c:	2001      	movs	r0, #1
   b560e:	b02b      	add	sp, #172	; 0xac
   b5610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5614:	f3af 8000 	nop.w
   b5618:	54442d18 	.word	0x54442d18
   b561c:	400921fb 	.word	0x400921fb
   b5620:	2003e5d0 	.word	0x2003e5d0
   b5624:	420f145e 	.word	0x420f145e
   b5628:	2003de24 	.word	0x2003de24
   b562c:	c29d58ff 	.word	0xc29d58ff
   b5630:	420f1653 	.word	0x420f1653
   b5634:	2003de48 	.word	0x2003de48
   b5638:	c29d5948 	.word	0xc29d5948
   b563c:	2003ddd0 	.word	0x2003ddd0
   b5640:	c2b40000 	.word	0xc2b40000
   b5644:	42b40000 	.word	0x42b40000
   b5648:	2003e5e0 	.word	0x2003e5e0
   b564c:	43340000 	.word	0x43340000
   b5650:	2003e5dc 	.word	0x2003e5dc
   b5654:	2003e5cc 	.word	0x2003e5cc
   b5658:	2003de20 	.word	0x2003de20
   b565c:	2003e5d8 	.word	0x2003e5d8
   b5660:	40668000 	.word	0x40668000
   b5664:	000c6540 	.word	0x000c6540
   b5668:	2003e5d4 	.word	0x2003e5d4
   b566c:	2003df00 	.word	0x2003df00

000b5670 <_Z13sensorHandlerv>:
void sensorHandler(){
   b5670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){
   b5674:	4da4      	ldr	r5, [pc, #656]	; (b5908 <_Z13sensorHandlerv+0x298>)
void sensorHandler(){
   b5676:	b0ab      	sub	sp, #172	; 0xac
   b5678:	f008 f8f0 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){
   b567c:	682b      	ldr	r3, [r5, #0]
   b567e:	4283      	cmp	r3, r0
   b5680:	f080 80f3 	bcs.w	b586a <_Z13sensorHandlerv+0x1fa>
   b5684:	f8df b2b0 	ldr.w	fp, [pc, #688]	; b5938 <_Z13sensorHandlerv+0x2c8>
   b5688:	f89b 3000 	ldrb.w	r3, [fp]
   b568c:	2b00      	cmp	r3, #0
   b568e:	f000 80ec 	beq.w	b586a <_Z13sensorHandlerv+0x1fa>
        Wire.requestFrom(PHADDR, 20, 1);
   b5692:	f00c fa67 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b5696:	2301      	movs	r3, #1
   b5698:	2214      	movs	r2, #20
   b569a:	2163      	movs	r1, #99	; 0x63
   b569c:	f00a f96f 	bl	bf97e <_ZN7TwoWire11requestFromEhjh>
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b56a0:	f00c fa60 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b56a4:	6803      	ldr	r3, [r0, #0]
   b56a6:	695b      	ldr	r3, [r3, #20]
   b56a8:	4798      	blx	r3
        int c = 0;
   b56aa:	ac16      	add	r4, sp, #88	; 0x58
   b56ac:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b56ae:	f00c fa59 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b56b2:	6803      	ldr	r3, [r0, #0]
   b56b4:	691b      	ldr	r3, [r3, #16]
   b56b6:	4798      	blx	r3
   b56b8:	b138      	cbz	r0, b56ca <_Z13sensorHandlerv+0x5a>
            tempSense[c++] = Wire.read();
   b56ba:	f00c fa53 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b56be:	6803      	ldr	r3, [r0, #0]
   b56c0:	695b      	ldr	r3, [r3, #20]
   b56c2:	4798      	blx	r3
   b56c4:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b56c8:	e7f1      	b.n	b56ae <_Z13sensorHandlerv+0x3e>
        sensePH = atof(tempSense);
   b56ca:	4630      	mov	r0, r6
   b56cc:	f00e fc90 	bl	c3ff0 <atof>
   b56d0:	ec51 0b10 	vmov	r0, r1, d0
   b56d4:	f00e fc18 	bl	c3f08 <__aeabi_d2f>
   b56d8:	f8df a260 	ldr.w	sl, [pc, #608]	; b593c <_Z13sensorHandlerv+0x2cc>
   b56dc:	f8ca 0000 	str.w	r0, [sl]
        Wire.requestFrom(MCOND, 20, 1);
   b56e0:	f00c fa40 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b56e4:	2301      	movs	r3, #1
   b56e6:	2214      	movs	r2, #20
   b56e8:	2164      	movs	r1, #100	; 0x64
   b56ea:	f00a f948 	bl	bf97e <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b56ee:	f00c fa39 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b56f2:	6803      	ldr	r3, [r0, #0]
   b56f4:	695b      	ldr	r3, [r3, #20]
   b56f6:	4798      	blx	r3
        c = 0;
   b56f8:	ac1b      	add	r4, sp, #108	; 0x6c
   b56fa:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b56fc:	f00c fa32 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b5700:	6803      	ldr	r3, [r0, #0]
   b5702:	691b      	ldr	r3, [r3, #16]
   b5704:	4798      	blx	r3
   b5706:	b138      	cbz	r0, b5718 <_Z13sensorHandlerv+0xa8>
            mcondSense[c++] = Wire.read();
   b5708:	f00c fa2c 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b570c:	6803      	ldr	r3, [r0, #0]
   b570e:	695b      	ldr	r3, [r3, #20]
   b5710:	4798      	blx	r3
   b5712:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b5716:	e7f1      	b.n	b56fc <_Z13sensorHandlerv+0x8c>
        float senseMCond = atof(mcondSense);
   b5718:	4630      	mov	r0, r6
   b571a:	f00e fc69 	bl	c3ff0 <atof>
        Wire.requestFrom(COND, 20, 1);
   b571e:	f00c fa21 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b5722:	2301      	movs	r3, #1
   b5724:	2214      	movs	r2, #20
   b5726:	2165      	movs	r1, #101	; 0x65
   b5728:	f00a f929 	bl	bf97e <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b572c:	f00c fa1a 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b5730:	6803      	ldr	r3, [r0, #0]
   b5732:	695b      	ldr	r3, [r3, #20]
   b5734:	4798      	blx	r3
        c = 0;
   b5736:	ac20      	add	r4, sp, #128	; 0x80
   b5738:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b573a:	f00c fa13 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b573e:	6803      	ldr	r3, [r0, #0]
   b5740:	691b      	ldr	r3, [r3, #16]
   b5742:	4798      	blx	r3
   b5744:	b138      	cbz	r0, b5756 <_Z13sensorHandlerv+0xe6>
            condSense[c++] = Wire.read();
   b5746:	f00c fa0d 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b574a:	6803      	ldr	r3, [r0, #0]
   b574c:	695b      	ldr	r3, [r3, #20]
   b574e:	4798      	blx	r3
   b5750:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b5754:	e7f1      	b.n	b573a <_Z13sensorHandlerv+0xca>
        float senseCond = atof(condSense);
   b5756:	4630      	mov	r0, r6
   b5758:	f00e fc4a 	bl	c3ff0 <atof>
   b575c:	ec59 8b10 	vmov	r8, r9, d0
        Wire.requestFrom(TEMPADDR, 20, 1);
   b5760:	f00c fa00 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b5764:	2301      	movs	r3, #1
   b5766:	2214      	movs	r2, #20
   b5768:	2166      	movs	r1, #102	; 0x66
   b576a:	f00a f908 	bl	bf97e <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b576e:	f00c f9f9 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b5772:	6803      	ldr	r3, [r0, #0]
   b5774:	695b      	ldr	r3, [r3, #20]
   b5776:	4798      	blx	r3
        c = 0;
   b5778:	af25      	add	r7, sp, #148	; 0x94
   b577a:	463e      	mov	r6, r7
        while(Wire.available()){   // slave may send less than requested
   b577c:	f00c f9f2 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b5780:	6803      	ldr	r3, [r0, #0]
   b5782:	691b      	ldr	r3, [r3, #16]
   b5784:	4798      	blx	r3
   b5786:	4604      	mov	r4, r0
   b5788:	b138      	cbz	r0, b579a <_Z13sensorHandlerv+0x12a>
            addrSense[c++] = Wire.read();
   b578a:	f00c f9eb 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b578e:	6803      	ldr	r3, [r0, #0]
   b5790:	695b      	ldr	r3, [r3, #20]
   b5792:	4798      	blx	r3
   b5794:	f807 0b01 	strb.w	r0, [r7], #1
        while(Wire.available()){   // slave may send less than requested
   b5798:	e7f0      	b.n	b577c <_Z13sensorHandlerv+0x10c>
        float senseTemp = atof(addrSense);
   b579a:	4630      	mov	r0, r6
   b579c:	f00e fc28 	bl	c3ff0 <atof>
        if(logSensors){
   b57a0:	4b5a      	ldr	r3, [pc, #360]	; (b590c <_Z13sensorHandlerv+0x29c>)
        dataWait = false;
   b57a2:	f88b 4000 	strb.w	r4, [fp]
        if(logSensors){
   b57a6:	781b      	ldrb	r3, [r3, #0]
        float senseTemp = atof(addrSense);
   b57a8:	ec57 6b10 	vmov	r6, r7, d0
        if(logSensors){
   b57ac:	2b00      	cmp	r3, #0
   b57ae:	d05c      	beq.n	b586a <_Z13sensorHandlerv+0x1fa>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b57b0:	f00b ffa4 	bl	c16fc <_ZN9TimeClass5monthEv>
   b57b4:	9011      	str	r0, [sp, #68]	; 0x44
   b57b6:	f00b ff95 	bl	c16e4 <_ZN9TimeClass3dayEv>
   b57ba:	4604      	mov	r4, r0
   b57bc:	f00b ffa6 	bl	c170c <_ZN9TimeClass4yearEv>
   b57c0:	4683      	mov	fp, r0
   b57c2:	f00b ff6b 	bl	c169c <_ZN9TimeClass4hourEv>
   b57c6:	9010      	str	r0, [sp, #64]	; 0x40
   b57c8:	f00b ff74 	bl	c16b4 <_ZN9TimeClass6minuteEv>
   b57cc:	900f      	str	r0, [sp, #60]	; 0x3c
   b57ce:	f00b ff7d 	bl	c16cc <_ZN9TimeClass6secondEv>
   b57d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b57d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b57d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b57d8:	9004      	str	r0, [sp, #16]
   b57da:	e9cd b201 	strd	fp, r2, [sp, #4]
   b57de:	9103      	str	r1, [sp, #12]
   b57e0:	4a4b      	ldr	r2, [pc, #300]	; (b5910 <_Z13sensorHandlerv+0x2a0>)
   b57e2:	9400      	str	r4, [sp, #0]
   b57e4:	2110      	movs	r1, #16
   b57e6:	a812      	add	r0, sp, #72	; 0x48
   b57e8:	f008 fb36 	bl	bde58 <snprintf>
   b57ec:	4849      	ldr	r0, [pc, #292]	; (b5914 <_Z13sensorHandlerv+0x2a4>)
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b57ee:	7c03      	ldrb	r3, [r0, #16]
   b57f0:	b92b      	cbnz	r3, b57fe <_Z13sensorHandlerv+0x18e>
   b57f2:	4949      	ldr	r1, [pc, #292]	; (b5918 <_Z13sensorHandlerv+0x2a8>)
   b57f4:	f244 2202 	movw	r2, #16898	; 0x4202
   b57f8:	3010      	adds	r0, #16
   b57fa:	f7fe ff09 	bl	b4610 <_ZN7FatFile4openEPKci>
        float senseCond = atof(condSense);
   b57fe:	4649      	mov	r1, r9
   b5800:	4640      	mov	r0, r8
   b5802:	f00e fb81 	bl	c3f08 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b5806:	f00e f82f 	bl	c3868 <__aeabi_f2d>
   b580a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b580e:	4b43      	ldr	r3, [pc, #268]	; (b591c <_Z13sensorHandlerv+0x2ac>)
   b5810:	6818      	ldr	r0, [r3, #0]
   b5812:	f00e f829 	bl	c3868 <__aeabi_f2d>
   b5816:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b581a:	4b41      	ldr	r3, [pc, #260]	; (b5920 <_Z13sensorHandlerv+0x2b0>)
   b581c:	6818      	ldr	r0, [r3, #0]
   b581e:	f00e f823 	bl	c3868 <__aeabi_f2d>
   b5822:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b5826:	f8da 0000 	ldr.w	r0, [sl]
   b582a:	f00e f81d 	bl	c3868 <__aeabi_f2d>
   b582e:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float senseTemp = atof(addrSense);
   b5832:	4639      	mov	r1, r7
   b5834:	4630      	mov	r0, r6
   b5836:	f00e fb67 	bl	c3f08 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b583a:	f00e f815 	bl	c3868 <__aeabi_f2d>
   b583e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5842:	4b38      	ldr	r3, [pc, #224]	; (b5924 <_Z13sensorHandlerv+0x2b4>)
   b5844:	6818      	ldr	r0, [r3, #0]
   b5846:	f00e f80f 	bl	c3868 <__aeabi_f2d>
   b584a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b584e:	4b36      	ldr	r3, [pc, #216]	; (b5928 <_Z13sensorHandlerv+0x2b8>)
   b5850:	6818      	ldr	r0, [r3, #0]
   b5852:	f00e f809 	bl	c3868 <__aeabi_f2d>
   b5856:	aa12      	add	r2, sp, #72	; 0x48
   b5858:	e9cd 0100 	strd	r0, r1, [sp]
   b585c:	4933      	ldr	r1, [pc, #204]	; (b592c <_Z13sensorHandlerv+0x2bc>)
   b585e:	482d      	ldr	r0, [pc, #180]	; (b5914 <_Z13sensorHandlerv+0x2a4>)
   b5860:	f7fe fd7a 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            myFile.close();
   b5864:	4832      	ldr	r0, [pc, #200]	; (b5930 <_Z13sensorHandlerv+0x2c0>)
   b5866:	f001 fa27 	bl	b6cb8 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){
   b586a:	4c32      	ldr	r4, [pc, #200]	; (b5934 <_Z13sensorHandlerv+0x2c4>)
   b586c:	f007 fff6 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   b5870:	6823      	ldr	r3, [r4, #0]
   b5872:	4283      	cmp	r3, r0
   b5874:	d244      	bcs.n	b5900 <_Z13sensorHandlerv+0x290>
   b5876:	f007 fff1 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   b587a:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b587e:	6020      	str	r0, [r4, #0]
   b5880:	f007 ffec 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   b5884:	f200 3039 	addw	r0, r0, #825	; 0x339
   b5888:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   b588a:	f00c f96b 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b588e:	2163      	movs	r1, #99	; 0x63
   b5890:	f00a f88e 	bl	bf9b0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5894:	f00c f966 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b5898:	2172      	movs	r1, #114	; 0x72
   b589a:	f7fe fccd 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b589e:	f00c f961 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b58a2:	f00a f88c 	bl	bf9be <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   b58a6:	f00c f95d 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b58aa:	2164      	movs	r1, #100	; 0x64
   b58ac:	f00a f880 	bl	bf9b0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b58b0:	f00c f958 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b58b4:	2172      	movs	r1, #114	; 0x72
   b58b6:	f7fe fcbf 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b58ba:	f00c f953 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b58be:	f00a f87e 	bl	bf9be <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   b58c2:	f00c f94f 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b58c6:	2165      	movs	r1, #101	; 0x65
   b58c8:	f00a f872 	bl	bf9b0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b58cc:	f00c f94a 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b58d0:	2172      	movs	r1, #114	; 0x72
   b58d2:	f7fe fcb1 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b58d6:	f00c f945 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b58da:	f00a f870 	bl	bf9be <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   b58de:	f00c f941 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b58e2:	2166      	movs	r1, #102	; 0x66
   b58e4:	f00a f864 	bl	bf9b0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b58e8:	f00c f93c 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b58ec:	2172      	movs	r1, #114	; 0x72
   b58ee:	f7fe fca3 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b58f2:	f00c f937 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b58f6:	f00a f862 	bl	bf9be <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b58fa:	4b0f      	ldr	r3, [pc, #60]	; (b5938 <_Z13sensorHandlerv+0x2c8>)
   b58fc:	2201      	movs	r2, #1
   b58fe:	701a      	strb	r2, [r3, #0]
}
   b5900:	b02b      	add	sp, #172	; 0xac
   b5902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5906:	bf00      	nop
   b5908:	2003ddd4 	.word	0x2003ddd4
   b590c:	2003defd 	.word	0x2003defd
   b5910:	000c6573 	.word	0x000c6573
   b5914:	2003df24 	.word	0x2003df24
   b5918:	2003ddd9 	.word	0x2003ddd9
   b591c:	2003e570 	.word	0x2003e570
   b5920:	2003e56c 	.word	0x2003e56c
   b5924:	2003df00 	.word	0x2003df00
   b5928:	2003de24 	.word	0x2003de24
   b592c:	000c658c 	.word	0x000c658c
   b5930:	2003df34 	.word	0x2003df34
   b5934:	2003e57c 	.word	0x2003e57c
   b5938:	2003ddd8 	.word	0x2003ddd8
   b593c:	2003e574 	.word	0x2003e574

000b5940 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b5940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b5944:	4e3c      	ldr	r6, [pc, #240]	; (b5a38 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b5946:	f8df 8104 	ldr.w	r8, [pc, #260]	; b5a4c <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b594a:	f8df 9104 	ldr.w	r9, [pc, #260]	; b5a50 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b594e:	b089      	sub	sp, #36	; 0x24
   b5950:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b5952:	f00c f947 	bl	c1be4 <_Z22__fetch_global_Serial1v>
   b5956:	6803      	ldr	r3, [r0, #0]
   b5958:	691b      	ldr	r3, [r3, #16]
   b595a:	4798      	blx	r3
   b595c:	2800      	cmp	r0, #0
   b595e:	d066      	beq.n	b5a2e <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');
   b5960:	f00c f940 	bl	c1be4 <_Z22__fetch_global_Serial1v>
   b5964:	220a      	movs	r2, #10
   b5966:	4601      	mov	r1, r0
   b5968:	4638      	mov	r0, r7
   b596a:	f00b fd0f 	bl	c138c <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b596e:	68bb      	ldr	r3, [r7, #8]
   b5970:	3307      	adds	r3, #7
   b5972:	f023 0307 	bic.w	r3, r3, #7
    }
   b5976:	466d      	mov	r5, sp
        char buffer[data.length()];
   b5978:	ebad 0d03 	sub.w	sp, sp, r3
   b597c:	46ea      	mov	sl, sp
   b597e:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b5980:	68b9      	ldr	r1, [r7, #8]
   b5982:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b5986:	458b      	cmp	fp, r1
   b5988:	f103 0401 	add.w	r4, r3, #1
   b598c:	d207      	bcs.n	b599e <_Z11XBeeHandlerv+0x5e>
   b598e:	4659      	mov	r1, fp
   b5990:	4638      	mov	r0, r7
   b5992:	f00b fdf3 	bl	c157c <_ZNK6String6charAtEj>
   b5996:	4623      	mov	r3, r4
   b5998:	f80a 000b 	strb.w	r0, [sl, fp]
   b599c:	e7f0      	b.n	b5980 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b599e:	2901      	cmp	r1, #1
   b59a0:	d90a      	bls.n	b59b8 <_Z11XBeeHandlerv+0x78>
   b59a2:	3901      	subs	r1, #1
   b59a4:	4638      	mov	r0, r7
   b59a6:	f00b fde9 	bl	c157c <_ZNK6String6charAtEj>
   b59aa:	280d      	cmp	r0, #13
   b59ac:	bf01      	itttt	eq
   b59ae:	68bb      	ldreq	r3, [r7, #8]
   b59b0:	4453      	addeq	r3, sl
   b59b2:	2200      	moveq	r2, #0
   b59b4:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b59b8:	2201      	movs	r2, #1
   b59ba:	2102      	movs	r1, #2
   b59bc:	4650      	mov	r0, sl
   b59be:	f7fe fed9 	bl	b4774 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b59c2:	f00b ff77 	bl	c18b4 <_Z16_fetch_usbserialv>
   b59c6:	4631      	mov	r1, r6
   b59c8:	f00b facb 	bl	c0f62 <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b59cc:	f00b ff72 	bl	c18b4 <_Z16_fetch_usbserialv>
   b59d0:	6839      	ldr	r1, [r7, #0]
   b59d2:	f00b fac6 	bl	c0f62 <_ZN5Print7printlnEPKc>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b59d6:	f89a 3000 	ldrb.w	r3, [sl]
   b59da:	3b42      	subs	r3, #66	; 0x42
   b59dc:	2b01      	cmp	r3, #1
   b59de:	d803      	bhi.n	b59e8 <_Z11XBeeHandlerv+0xa8>
   b59e0:	f007 ff3c 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   b59e4:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b59e8:	f899 3000 	ldrb.w	r3, [r9]
   b59ec:	b1d3      	cbz	r3, b5a24 <_Z11XBeeHandlerv+0xe4>
   b59ee:	4813      	ldr	r0, [pc, #76]	; (b5a3c <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b59f0:	7c03      	ldrb	r3, [r0, #16]
   b59f2:	b92b      	cbnz	r3, b5a00 <_Z11XBeeHandlerv+0xc0>
   b59f4:	4912      	ldr	r1, [pc, #72]	; (b5a40 <_Z11XBeeHandlerv+0x100>)
   b59f6:	f244 2202 	movw	r2, #16898	; 0x4202
   b59fa:	3010      	adds	r0, #16
   b59fc:	f7fe fe08 	bl	b4610 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5a00:	4639      	mov	r1, r7
   b5a02:	f107 0010 	add.w	r0, r7, #16
   b5a06:	f00b fd6f 	bl	c14e8 <_ZN6StringC1ERKS_>
   b5a0a:	490e      	ldr	r1, [pc, #56]	; (b5a44 <_Z11XBeeHandlerv+0x104>)
   b5a0c:	480b      	ldr	r0, [pc, #44]	; (b5a3c <_Z11XBeeHandlerv+0xfc>)
   b5a0e:	f107 0210 	add.w	r2, r7, #16
   b5a12:	f7fe fca1 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b5a16:	f107 0010 	add.w	r0, r7, #16
   b5a1a:	f00b fccf 	bl	c13bc <_ZN6StringD1Ev>
            logFile.close();
   b5a1e:	480a      	ldr	r0, [pc, #40]	; (b5a48 <_Z11XBeeHandlerv+0x108>)
   b5a20:	f001 f94a 	bl	b6cb8 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5a24:	4638      	mov	r0, r7
   b5a26:	f00b fcc9 	bl	c13bc <_ZN6StringD1Ev>
   b5a2a:	46ad      	mov	sp, r5
    while(Serial1.available()){
   b5a2c:	e791      	b.n	b5952 <_Z11XBeeHandlerv+0x12>
}
   b5a2e:	3724      	adds	r7, #36	; 0x24
   b5a30:	46bd      	mov	sp, r7
   b5a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5a36:	bf00      	nop
   b5a38:	000c65a4 	.word	0x000c65a4
   b5a3c:	2003dea4 	.word	0x2003dea4
   b5a40:	2003ddf7 	.word	0x2003ddf7
   b5a44:	000c65b6 	.word	0x000c65b6
   b5a48:	2003deb4 	.word	0x2003deb4
   b5a4c:	2003dda8 	.word	0x2003dda8
   b5a50:	2003defc 	.word	0x2003defc

000b5a54 <_Z13dataOffloaderv>:
void dataOffloader(){
   b5a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5a58:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b5a5a:	f00b ff2b 	bl	c18b4 <_Z16_fetch_usbserialv>
   b5a5e:	4961      	ldr	r1, [pc, #388]	; (b5be4 <_Z13dataOffloaderv+0x190>)
   b5a60:	f00b fa7f 	bl	c0f62 <_ZN5Print7printlnEPKc>
    if (!logDir.open("/")) {
   b5a64:	4960      	ldr	r1, [pc, #384]	; (b5be8 <_Z13dataOffloaderv+0x194>)
   b5a66:	4861      	ldr	r0, [pc, #388]	; (b5bec <_Z13dataOffloaderv+0x198>)
   b5a68:	2200      	movs	r2, #0
   b5a6a:	f7fe fdd1 	bl	b4610 <_ZN7FatFile4openEPKci>
   b5a6e:	b948      	cbnz	r0, b5a84 <_Z13dataOffloaderv+0x30>
        offloadMode = false;
   b5a70:	4b5f      	ldr	r3, [pc, #380]	; (b5bf0 <_Z13dataOffloaderv+0x19c>)
   b5a72:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b5a74:	f00b ff1e 	bl	c18b4 <_Z16_fetch_usbserialv>
   b5a78:	495e      	ldr	r1, [pc, #376]	; (b5bf4 <_Z13dataOffloaderv+0x1a0>)
}
   b5a7a:	b02d      	add	sp, #180	; 0xb4
   b5a7c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b5a80:	f00b ba6f 	b.w	c0f62 <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b5a84:	f00b ff16 	bl	c18b4 <_Z16_fetch_usbserialv>
   b5a88:	495b      	ldr	r1, [pc, #364]	; (b5bf8 <_Z13dataOffloaderv+0x1a4>)
        BLE.advertise(&advData);;
   b5a8a:	4d5c      	ldr	r5, [pc, #368]	; (b5bfc <_Z13dataOffloaderv+0x1a8>)
    Serial.println("Waiting for CCHub connection...");
   b5a8c:	f00b fa69 	bl	c0f62 <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b5a90:	f008 fd92 	bl	be5b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5a94:	f008 fdee 	bl	be674 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5a98:	4604      	mov	r4, r0
   b5a9a:	b948      	cbnz	r0, b5ab0 <_Z13dataOffloaderv+0x5c>
        BLE.advertise(&advData);;
   b5a9c:	f008 fd8c 	bl	be5b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5aa0:	4622      	mov	r2, r4
   b5aa2:	4629      	mov	r1, r5
   b5aa4:	f008 fe39 	bl	be71a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b5aa8:	200a      	movs	r0, #10
   b5aaa:	f008 fa21 	bl	bdef0 <delay>
    while(!BLE.connected()){
   b5aae:	e7ef      	b.n	b5a90 <_Z13dataOffloaderv+0x3c>
    Serial.println("Starting transfer...");
   b5ab0:	f00b ff00 	bl	c18b4 <_Z16_fetch_usbserialv>
   b5ab4:	4952      	ldr	r1, [pc, #328]	; (b5c00 <_Z13dataOffloaderv+0x1ac>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5ab6:	4f4d      	ldr	r7, [pc, #308]	; (b5bec <_Z13dataOffloaderv+0x198>)
   b5ab8:	4d52      	ldr	r5, [pc, #328]	; (b5c04 <_Z13dataOffloaderv+0x1b0>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5aba:	f8df 816c 	ldr.w	r8, [pc, #364]	; b5c28 <_Z13dataOffloaderv+0x1d4>
    Serial.println("Starting transfer...");
   b5abe:	f00b fa50 	bl	c0f62 <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5ac2:	2200      	movs	r2, #0
   b5ac4:	4639      	mov	r1, r7
   b5ac6:	4628      	mov	r0, r5
   b5ac8:	f001 f883 	bl	b6bd2 <_ZN7FatFile8openNextEPS_i>
   b5acc:	b1f8      	cbz	r0, b5b0e <_Z13dataOffloaderv+0xba>
   b5ace:	f008 fd73 	bl	be5b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5ad2:	f008 fdcf 	bl	be674 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5ad6:	b1d0      	cbz	r0, b5b0e <_Z13dataOffloaderv+0xba>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b5ad8:	221e      	movs	r2, #30
   b5ada:	a901      	add	r1, sp, #4
   b5adc:	4628      	mov	r0, r5
   b5ade:	f001 fa3f 	bl	b6f60 <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5ae2:	f00b fee7 	bl	c18b4 <_Z16_fetch_usbserialv>
   b5ae6:	4641      	mov	r1, r8
   b5ae8:	aa01      	add	r2, sp, #4
   b5aea:	f7fe fc35 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b5aee:	a801      	add	r0, sp, #4
   b5af0:	f00e fb51 	bl	c4196 <strlen>
   b5af4:	ab01      	add	r3, sp, #4
   b5af6:	3804      	subs	r0, #4
   b5af8:	4418      	add	r0, r3
   b5afa:	f00e fb55 	bl	c41a8 <strlwr>
   b5afe:	4942      	ldr	r1, [pc, #264]	; (b5c08 <_Z13dataOffloaderv+0x1b4>)
   b5b00:	f00e fbab 	bl	c425a <strstr>
   b5b04:	b9d8      	cbnz	r0, b5b3e <_Z13dataOffloaderv+0xea>
            myFile.close();
   b5b06:	4628      	mov	r0, r5
   b5b08:	f001 f8d6 	bl	b6cb8 <_ZN7FatFile5closeEv>
   b5b0c:	e7d9      	b.n	b5ac2 <_Z13dataOffloaderv+0x6e>
    logDir.close();
   b5b0e:	4837      	ldr	r0, [pc, #220]	; (b5bec <_Z13dataOffloaderv+0x198>)
   b5b10:	f001 f8d2 	bl	b6cb8 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5b14:	2226      	movs	r2, #38	; 0x26
   b5b16:	2100      	movs	r1, #0
   b5b18:	a809      	add	r0, sp, #36	; 0x24
   b5b1a:	f00e fab1 	bl	c4080 <memset>
    strcpy(fileCode,"filedone");
   b5b1e:	493b      	ldr	r1, [pc, #236]	; (b5c0c <_Z13dataOffloaderv+0x1b8>)
   b5b20:	a809      	add	r0, sp, #36	; 0x24
   b5b22:	f00e fb13 	bl	c414c <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b5b26:	2300      	movs	r3, #0
   b5b28:	2226      	movs	r2, #38	; 0x26
   b5b2a:	a909      	add	r1, sp, #36	; 0x24
   b5b2c:	4838      	ldr	r0, [pc, #224]	; (b5c10 <_Z13dataOffloaderv+0x1bc>)
   b5b2e:	f008 fc33 	bl	be398 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b5b32:	4b2f      	ldr	r3, [pc, #188]	; (b5bf0 <_Z13dataOffloaderv+0x19c>)
   b5b34:	2200      	movs	r2, #0
   b5b36:	701a      	strb	r2, [r3, #0]
}
   b5b38:	b02d      	add	sp, #180	; 0xb4
   b5b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5b3e:	2226      	movs	r2, #38	; 0x26
   b5b40:	2100      	movs	r1, #0
   b5b42:	a809      	add	r0, sp, #36	; 0x24
   b5b44:	f00e fa9c 	bl	c4080 <memset>
            strcpy(fileCode,"filename");
   b5b48:	4932      	ldr	r1, [pc, #200]	; (b5c14 <_Z13dataOffloaderv+0x1c0>)
            while(myFile.available()){
   b5b4a:	4e33      	ldr	r6, [pc, #204]	; (b5c18 <_Z13dataOffloaderv+0x1c4>)
   b5b4c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b5c10 <_Z13dataOffloaderv+0x1bc>
            strcpy(fileCode,"filename");
   b5b50:	a809      	add	r0, sp, #36	; 0x24
   b5b52:	f00e fafb 	bl	c414c <strcpy>
            strcat(fileCode,namebuf);
   b5b56:	a901      	add	r1, sp, #4
   b5b58:	a809      	add	r0, sp, #36	; 0x24
   b5b5a:	f00e fac7 	bl	c40ec <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b5b5e:	f00b fea9 	bl	c18b4 <_Z16_fetch_usbserialv>
   b5b62:	492e      	ldr	r1, [pc, #184]	; (b5c1c <_Z13dataOffloaderv+0x1c8>)
   b5b64:	aa09      	add	r2, sp, #36	; 0x24
   b5b66:	f7fe fbf7 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b5b6a:	2300      	movs	r3, #0
   b5b6c:	2226      	movs	r2, #38	; 0x26
   b5b6e:	a909      	add	r1, sp, #36	; 0x24
   b5b70:	4827      	ldr	r0, [pc, #156]	; (b5c10 <_Z13dataOffloaderv+0x1bc>)
   b5b72:	f008 fc11 	bl	be398 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b5b76:	f00b fe9d 	bl	c18b4 <_Z16_fetch_usbserialv>
   b5b7a:	4929      	ldr	r1, [pc, #164]	; (b5c20 <_Z13dataOffloaderv+0x1cc>)
   b5b7c:	aa01      	add	r2, sp, #4
   b5b7e:	f7fe fbeb 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b5b82:	2096      	movs	r0, #150	; 0x96
   b5b84:	f008 f9b4 	bl	bdef0 <delay>
            noInterrupts();
   b5b88:	f009 ff1c 	bl	bf9c4 <_Z12noInterruptsv>
            while(myFile.available()){
   b5b8c:	4630      	mov	r0, r6
   b5b8e:	f7fe faa6 	bl	b40de <_ZN4File9availableEv>
   b5b92:	4604      	mov	r4, r0
   b5b94:	b188      	cbz	r0, b5bba <_Z13dataOffloaderv+0x166>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b5b96:	2264      	movs	r2, #100	; 0x64
   b5b98:	2100      	movs	r1, #0
   b5b9a:	a813      	add	r0, sp, #76	; 0x4c
   b5b9c:	f00e fa70 	bl	c4080 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b5ba0:	aa13      	add	r2, sp, #76	; 0x4c
   b5ba2:	2364      	movs	r3, #100	; 0x64
   b5ba4:	210d      	movs	r1, #13
   b5ba6:	4630      	mov	r0, r6
   b5ba8:	f00b fbd8 	bl	c135c <_ZN6Stream14readBytesUntilEcPcj>
   b5bac:	2300      	movs	r3, #0
   b5bae:	2264      	movs	r2, #100	; 0x64
   b5bb0:	a913      	add	r1, sp, #76	; 0x4c
   b5bb2:	4648      	mov	r0, r9
   b5bb4:	f008 fbf0 	bl	be398 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b5bb8:	e7e8      	b.n	b5b8c <_Z13dataOffloaderv+0x138>
            interrupts();
   b5bba:	f009 ff05 	bl	bf9c8 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5bbe:	2226      	movs	r2, #38	; 0x26
   b5bc0:	4621      	mov	r1, r4
   b5bc2:	a809      	add	r0, sp, #36	; 0x24
   b5bc4:	f00e fa5c 	bl	c4080 <memset>
            strcpy(fileCode,"filecomp");
   b5bc8:	4916      	ldr	r1, [pc, #88]	; (b5c24 <_Z13dataOffloaderv+0x1d0>)
   b5bca:	a809      	add	r0, sp, #36	; 0x24
   b5bcc:	f00e fabe 	bl	c414c <strcpy>
   b5bd0:	4623      	mov	r3, r4
   b5bd2:	2226      	movs	r2, #38	; 0x26
   b5bd4:	a909      	add	r1, sp, #36	; 0x24
   b5bd6:	480e      	ldr	r0, [pc, #56]	; (b5c10 <_Z13dataOffloaderv+0x1bc>)
   b5bd8:	f008 fbde 	bl	be398 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b5bdc:	2096      	movs	r0, #150	; 0x96
   b5bde:	f008 f987 	bl	bdef0 <delay>
   b5be2:	e790      	b.n	b5b06 <_Z13dataOffloaderv+0xb2>
   b5be4:	000c65d7 	.word	0x000c65d7
   b5be8:	000c65f4 	.word	0x000c65f4
   b5bec:	2003de80 	.word	0x2003de80
   b5bf0:	2003e0d8 	.word	0x2003e0d8
   b5bf4:	000c65f6 	.word	0x000c65f6
   b5bf8:	000c6623 	.word	0x000c6623
   b5bfc:	2003ddb0 	.word	0x2003ddb0
   b5c00:	000c6643 	.word	0x000c6643
   b5c04:	2003df34 	.word	0x2003df34
   b5c08:	000c6681 	.word	0x000c6681
   b5c0c:	000c6686 	.word	0x000c6686
   b5c10:	2003e0d0 	.word	0x2003e0d0
   b5c14:	000c668f 	.word	0x000c668f
   b5c18:	2003df24 	.word	0x2003df24
   b5c1c:	000c6698 	.word	0x000c6698
   b5c20:	000c66ab 	.word	0x000c66ab
   b5c24:	000c66d3 	.word	0x000c66d3
   b5c28:	000c6658 	.word	0x000c6658

000b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5c2c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b5c2e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5c30:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5c32:	b17c      	cbz	r4, b5c54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5c34:	6863      	ldr	r3, [r4, #4]
   b5c36:	3b01      	subs	r3, #1
   b5c38:	6063      	str	r3, [r4, #4]
   b5c3a:	b95b      	cbnz	r3, b5c54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5c3c:	6823      	ldr	r3, [r4, #0]
   b5c3e:	4620      	mov	r0, r4
   b5c40:	689b      	ldr	r3, [r3, #8]
   b5c42:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5c44:	68a3      	ldr	r3, [r4, #8]
   b5c46:	3b01      	subs	r3, #1
   b5c48:	60a3      	str	r3, [r4, #8]
   b5c4a:	b91b      	cbnz	r3, b5c54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5c4c:	6823      	ldr	r3, [r4, #0]
   b5c4e:	4620      	mov	r0, r4
   b5c50:	68db      	ldr	r3, [r3, #12]
   b5c52:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5c54:	4628      	mov	r0, r5
   b5c56:	bd38      	pop	{r3, r4, r5, pc}

000b5c58 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5c5c:	b084      	sub	sp, #16
   b5c5e:	af02      	add	r7, sp, #8
   b5c60:	4680      	mov	r8, r0
   b5c62:	4691      	mov	r9, r2
   b5c64:	461e      	mov	r6, r3
   b5c66:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b5c68:	f00e fa95 	bl	c4196 <strlen>
   b5c6c:	3009      	adds	r0, #9
   b5c6e:	f020 0107 	bic.w	r1, r0, #7
   b5c72:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5c76:	4640      	mov	r0, r8
   b5c78:	f00e fa8d 	bl	c4196 <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5c7c:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5c80:	4925      	ldr	r1, [pc, #148]	; (b5d18 <_Z8sendDataPKchbbb+0xc0>)
    char outStr[strlen(dataOut)+2];
   b5c82:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5c84:	4603      	mov	r3, r0
   b5c86:	4642      	mov	r2, r8
   b5c88:	4620      	mov	r0, r4
   b5c8a:	f008 f8d5 	bl	bde38 <sprintf>
    if(sendLTE || sendMode == 4){
   b5c8e:	f1ba 0f00 	cmp.w	sl, #0
   b5c92:	d101      	bne.n	b5c98 <_Z8sendDataPKchbbb+0x40>
   b5c94:	2d04      	cmp	r5, #4
   b5c96:	d10c      	bne.n	b5cb2 <_Z8sendDataPKchbbb+0x5a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5c98:	4b20      	ldr	r3, [pc, #128]	; (b5d1c <_Z8sendDataPKchbbb+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5c9a:	4921      	ldr	r1, [pc, #132]	; (b5d20 <_Z8sendDataPKchbbb+0xc8>)
   b5c9c:	781b      	ldrb	r3, [r3, #0]
   b5c9e:	f88d 3000 	strb.w	r3, [sp]
   b5ca2:	4638      	mov	r0, r7
   b5ca4:	233c      	movs	r3, #60	; 0x3c
   b5ca6:	4622      	mov	r2, r4
   b5ca8:	f009 fc60 	bl	bf56c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5cac:	1d38      	adds	r0, r7, #4
   b5cae:	f7ff ffbd 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b5cb2:	f1b9 0f00 	cmp.w	r9, #0
   b5cb6:	d101      	bne.n	b5cbc <_Z8sendDataPKchbbb+0x64>
   b5cb8:	2d01      	cmp	r5, #1
   b5cba:	d121      	bne.n	b5d00 <_Z8sendDataPKchbbb+0xa8>
   b5cbc:	f008 fc7c 	bl	be5b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5cc0:	f008 fcd8 	bl	be674 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5cc4:	b1e0      	cbz	r0, b5d00 <_Z8sendDataPKchbbb+0xa8>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5cc6:	4620      	mov	r0, r4
   b5cc8:	f00e fa65 	bl	c4196 <strlen>
   b5ccc:	3007      	adds	r0, #7
   b5cce:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5cd2:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b5cd4:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5cd8:	4620      	mov	r0, r4
   b5cda:	f00e fa5c 	bl	c4196 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5cde:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5ce2:	4602      	mov	r2, r0
   b5ce4:	4621      	mov	r1, r4
   b5ce6:	4648      	mov	r0, r9
   b5ce8:	f00e f9a2 	bl	c4030 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5cec:	4620      	mov	r0, r4
   b5cee:	f00e fa52 	bl	c4196 <strlen>
   b5cf2:	2300      	movs	r3, #0
   b5cf4:	4602      	mov	r2, r0
   b5cf6:	4649      	mov	r1, r9
   b5cf8:	480a      	ldr	r0, [pc, #40]	; (b5d24 <_Z8sendDataPKchbbb+0xcc>)
   b5cfa:	f008 fb4d 	bl	be398 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5cfe:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b5d00:	b90e      	cbnz	r6, b5d06 <_Z8sendDataPKchbbb+0xae>
   b5d02:	2d02      	cmp	r5, #2
   b5d04:	d104      	bne.n	b5d10 <_Z8sendDataPKchbbb+0xb8>
        Serial1.println(outStr);
   b5d06:	f00b ff6d 	bl	c1be4 <_Z22__fetch_global_Serial1v>
   b5d0a:	4621      	mov	r1, r4
   b5d0c:	f00b f929 	bl	c0f62 <_ZN5Print7printlnEPKc>
}
   b5d10:	3708      	adds	r7, #8
   b5d12:	46bd      	mov	sp, r7
   b5d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5d18:	000c66dc 	.word	0x000c66dc
   b5d1c:	2003ddac 	.word	0x2003ddac
   b5d20:	000c66e3 	.word	0x000c66e3
   b5d24:	2003e5e4 	.word	0x2003e5e4

000b5d28 <_Z16sendResponseDatav>:
void sendResponseData(){
   b5d28:	b530      	push	{r4, r5, lr}
    if(requestActive){
   b5d2a:	4d2a      	ldr	r5, [pc, #168]	; (b5dd4 <_Z16sendResponseDatav+0xac>)
   b5d2c:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b5d2e:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){
   b5d30:	2b00      	cmp	r3, #0
   b5d32:	d04d      	beq.n	b5dd0 <_Z16sendResponseDatav+0xa8>
        memset(responseStr,0,65);
   b5d34:	2241      	movs	r2, #65	; 0x41
   b5d36:	2100      	movs	r1, #0
   b5d38:	a80b      	add	r0, sp, #44	; 0x2c
   b5d3a:	f00e f9a1 	bl	c4080 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),(int)(senseTemp*1000));
   b5d3e:	4b26      	ldr	r3, [pc, #152]	; (b5dd8 <_Z16sendResponseDatav+0xb0>)
   b5d40:	ed9f 7a26 	vldr	s14, [pc, #152]	; b5ddc <_Z16sendResponseDatav+0xb4>
   b5d44:	edd3 7a00 	vldr	s15, [r3]
   b5d48:	4b25      	ldr	r3, [pc, #148]	; (b5de0 <_Z16sendResponseDatav+0xb8>)
   b5d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
        sendData(responseStr,requestActive,false,false,false);
   b5d4e:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),(int)(senseTemp*1000));
   b5d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5d54:	edcd 7a08 	vstr	s15, [sp, #32]
   b5d58:	edd3 7a00 	vldr	s15, [r3]
   b5d5c:	4b21      	ldr	r3, [pc, #132]	; (b5de4 <_Z16sendResponseDatav+0xbc>)
   b5d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5d62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5d66:	edcd 7a07 	vstr	s15, [sp, #28]
   b5d6a:	edd3 7a00 	vldr	s15, [r3]
   b5d6e:	4b1e      	ldr	r3, [pc, #120]	; (b5de8 <_Z16sendResponseDatav+0xc0>)
   b5d70:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5d74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5d78:	edcd 7a06 	vstr	s15, [sp, #24]
   b5d7c:	edd3 7a00 	vldr	s15, [r3]
   b5d80:	4b1a      	ldr	r3, [pc, #104]	; (b5dec <_Z16sendResponseDatav+0xc4>)
   b5d82:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5d8a:	edcd 7a05 	vstr	s15, [sp, #20]
   b5d8e:	edd3 7a00 	vldr	s15, [r3]
   b5d92:	4b17      	ldr	r3, [pc, #92]	; (b5df0 <_Z16sendResponseDatav+0xc8>)
   b5d94:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5d9c:	edcd 7a04 	vstr	s15, [sp, #16]
   b5da0:	6818      	ldr	r0, [r3, #0]
   b5da2:	f00d fd61 	bl	c3868 <__aeabi_f2d>
   b5da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5daa:	4b12      	ldr	r3, [pc, #72]	; (b5df4 <_Z16sendResponseDatav+0xcc>)
   b5dac:	6818      	ldr	r0, [r3, #0]
   b5dae:	f00d fd5b 	bl	c3868 <__aeabi_f2d>
   b5db2:	2201      	movs	r2, #1
   b5db4:	e9cd 0100 	strd	r0, r1, [sp]
   b5db8:	490f      	ldr	r1, [pc, #60]	; (b5df8 <_Z16sendResponseDatav+0xd0>)
   b5dba:	a80b      	add	r0, sp, #44	; 0x2c
   b5dbc:	f008 f83c 	bl	bde38 <sprintf>
        sendData(responseStr,requestActive,false,false,false);
   b5dc0:	7829      	ldrb	r1, [r5, #0]
   b5dc2:	9400      	str	r4, [sp, #0]
   b5dc4:	4623      	mov	r3, r4
   b5dc6:	4622      	mov	r2, r4
   b5dc8:	a80b      	add	r0, sp, #44	; 0x2c
   b5dca:	f7ff ff45 	bl	b5c58 <_Z8sendDataPKchbbb>
        requestActive = 0;
   b5dce:	702c      	strb	r4, [r5, #0]
}
   b5dd0:	b01d      	add	sp, #116	; 0x74
   b5dd2:	bd30      	pop	{r4, r5, pc}
   b5dd4:	2003e0da 	.word	0x2003e0da
   b5dd8:	2003e578 	.word	0x2003e578
   b5ddc:	447a0000 	.word	0x447a0000
   b5de0:	2003e570 	.word	0x2003e570
   b5de4:	2003e568 	.word	0x2003e568
   b5de8:	2003e574 	.word	0x2003e574
   b5dec:	2003e56c 	.word	0x2003e56c
   b5df0:	2003df00 	.word	0x2003df00
   b5df4:	2003de24 	.word	0x2003de24
   b5df8:	000c66eb 	.word	0x000c66eb

000b5dfc <_Z12statusUpdatev>:
void statusUpdate(){
   b5dfc:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){
   b5dfe:	4e2c      	ldr	r6, [pc, #176]	; (b5eb0 <_Z12statusUpdatev+0xb4>)
   b5e00:	7833      	ldrb	r3, [r6, #0]
void statusUpdate(){
   b5e02:	b090      	sub	sp, #64	; 0x40
    if(statusReady){
   b5e04:	2b00      	cmp	r3, #0
   b5e06:	d049      	beq.n	b5e9c <_Z12statusUpdatev+0xa0>
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b5e08:	4a2a      	ldr	r2, [pc, #168]	; (b5eb4 <_Z12statusUpdatev+0xb8>)
   b5e0a:	4b2b      	ldr	r3, [pc, #172]	; (b5eb8 <_Z12statusUpdatev+0xbc>)
   b5e0c:	6810      	ldr	r0, [r2, #0]
   b5e0e:	781b      	ldrb	r3, [r3, #0]
   b5e10:	9307      	str	r3, [sp, #28]
   b5e12:	f00d fd29 	bl	c3868 <__aeabi_f2d>
   b5e16:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5e1a:	4a28      	ldr	r2, [pc, #160]	; (b5ebc <_Z12statusUpdatev+0xc0>)
        Serial.println(LTEStatusCount);
   b5e1c:	4c28      	ldr	r4, [pc, #160]	; (b5ec0 <_Z12statusUpdatev+0xc4>)
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b5e1e:	6810      	ldr	r0, [r2, #0]
   b5e20:	f00d fd22 	bl	c3868 <__aeabi_f2d>
   b5e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5e28:	4a26      	ldr	r2, [pc, #152]	; (b5ec4 <_Z12statusUpdatev+0xc8>)
   b5e2a:	9b07      	ldr	r3, [sp, #28]
   b5e2c:	7812      	ldrb	r2, [r2, #0]
   b5e2e:	4926      	ldr	r1, [pc, #152]	; (b5ec8 <_Z12statusUpdatev+0xcc>)
   b5e30:	9200      	str	r2, [sp, #0]
   b5e32:	a809      	add	r0, sp, #36	; 0x24
   b5e34:	2201      	movs	r2, #1
   b5e36:	f007 ffff 	bl	bde38 <sprintf>
        Serial.println(updateStr);
   b5e3a:	f00b fd3b 	bl	c18b4 <_Z16_fetch_usbserialv>
   b5e3e:	a909      	add	r1, sp, #36	; 0x24
   b5e40:	f00b f88f 	bl	c0f62 <_ZN5Print7printlnEPKc>
        Serial.println(LTEStatusCount);
   b5e44:	f00b fd36 	bl	c18b4 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5e48:	8821      	ldrh	r1, [r4, #0]
   b5e4a:	4605      	mov	r5, r0
   b5e4c:	220a      	movs	r2, #10
   b5e4e:	f00b f894 	bl	c0f7a <_ZN5Print11printNumberEmh>
        n += println();
   b5e52:	4628      	mov	r0, r5
   b5e54:	f00b f879 	bl	c0f4a <_ZN5Print7printlnEv>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   b5e58:	4b1c      	ldr	r3, [pc, #112]	; (b5ecc <_Z12statusUpdatev+0xd0>)
   b5e5a:	781b      	ldrb	r3, [r3, #0]
   b5e5c:	bb03      	cbnz	r3, b5ea0 <_Z12statusUpdatev+0xa4>
   b5e5e:	4b1c      	ldr	r3, [pc, #112]	; (b5ed0 <_Z12statusUpdatev+0xd4>)
   b5e60:	781b      	ldrb	r3, [r3, #0]
   b5e62:	b9eb      	cbnz	r3, b5ea0 <_Z12statusUpdatev+0xa4>
   b5e64:	8823      	ldrh	r3, [r4, #0]
   b5e66:	b1f3      	cbz	r3, b5ea6 <_Z12statusUpdatev+0xaa>
   b5e68:	f013 0303 	ands.w	r3, r3, #3
   b5e6c:	d11b      	bne.n	b5ea6 <_Z12statusUpdatev+0xaa>
            sendData(updateStr,0,false,false,true);
   b5e6e:	2201      	movs	r2, #1
   b5e70:	9200      	str	r2, [sp, #0]
   b5e72:	4619      	mov	r1, r3
   b5e74:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b5e76:	a809      	add	r0, sp, #36	; 0x24
   b5e78:	f7ff feee 	bl	b5c58 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;
   b5e7c:	8823      	ldrh	r3, [r4, #0]
   b5e7e:	b10b      	cbz	r3, b5e84 <_Z12statusUpdatev+0x88>
   b5e80:	3b01      	subs	r3, #1
   b5e82:	8023      	strh	r3, [r4, #0]
        statusReady = false;
   b5e84:	2400      	movs	r4, #0
        delay(100);
   b5e86:	2064      	movs	r0, #100	; 0x64
        statusReady = false;
   b5e88:	7034      	strb	r4, [r6, #0]
        delay(100);
   b5e8a:	f008 f831 	bl	bdef0 <delay>
        sendData("B1CCptsbigbot",0,true,false,false);
   b5e8e:	4811      	ldr	r0, [pc, #68]	; (b5ed4 <_Z12statusUpdatev+0xd8>)
   b5e90:	9400      	str	r4, [sp, #0]
   b5e92:	4623      	mov	r3, r4
   b5e94:	2201      	movs	r2, #1
   b5e96:	4621      	mov	r1, r4
   b5e98:	f7ff fede 	bl	b5c58 <_Z8sendDataPKchbbb>
}
   b5e9c:	b010      	add	sp, #64	; 0x40
   b5e9e:	bd70      	pop	{r4, r5, r6, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;
   b5ea0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b5ea4:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b5ea6:	2100      	movs	r1, #0
   b5ea8:	2301      	movs	r3, #1
   b5eaa:	9100      	str	r1, [sp, #0]
   b5eac:	461a      	mov	r2, r3
   b5eae:	e7e2      	b.n	b5e76 <_Z12statusUpdatev+0x7a>
   b5eb0:	2003e5c8 	.word	0x2003e5c8
   b5eb4:	2003df00 	.word	0x2003df00
   b5eb8:	2003ddc0 	.word	0x2003ddc0
   b5ebc:	2003de24 	.word	0x2003de24
   b5ec0:	2003dd96 	.word	0x2003dd96
   b5ec4:	2003e5a8 	.word	0x2003e5a8
   b5ec8:	000c670f 	.word	0x000c670f
   b5ecc:	2003dd64 	.word	0x2003dd64
   b5ed0:	2003dda4 	.word	0x2003dda4
   b5ed4:	000c6728 	.word	0x000c6728

000b5ed8 <loop>:
void loop(){
   b5ed8:	b508      	push	{r3, lr}
    if(getPositionData()){
   b5eda:	f7ff faed 	bl	b54b8 <_Z15getPositionDatav>
    readPowerSys();
   b5ede:	f7fe feab 	bl	b4c38 <_Z12readPowerSysv>
    sensorHandler();
   b5ee2:	f7ff fbc5 	bl	b5670 <_Z13sensorHandlerv>
    XBeeHandler();
   b5ee6:	f7ff fd2b 	bl	b5940 <_Z11XBeeHandlerv>
    statusUpdate();
   b5eea:	f7ff ff87 	bl	b5dfc <_Z12statusUpdatev>
    updateMotors();
   b5eee:	f7ff f997 	bl	b5220 <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();
   b5ef2:	4b06      	ldr	r3, [pc, #24]	; (b5f0c <loop+0x34>)
   b5ef4:	781b      	ldrb	r3, [r3, #0]
   b5ef6:	b10b      	cbz	r3, b5efc <loop+0x24>
   b5ef8:	f7ff fdac 	bl	b5a54 <_Z13dataOffloaderv>
    sendResponseData();
   b5efc:	f7ff ff14 	bl	b5d28 <_Z16sendResponseDatav>
}
   b5f00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(500);
   b5f04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5f08:	f007 bff2 	b.w	bdef0 <delay>
   b5f0c:	2003e0d8 	.word	0x2003e0d8

000b5f10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5f10:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5f12:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5f16:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5f18:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5f1a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5f1e:	42ae      	cmp	r6, r5
   b5f20:	d004      	beq.n	b5f2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5f22:	4628      	mov	r0, r5
   b5f24:	f00b fa4a 	bl	c13bc <_ZN6StringD1Ev>
   b5f28:	3514      	adds	r5, #20
   b5f2a:	e7f8      	b.n	b5f1e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5f2c:	6820      	ldr	r0, [r4, #0]
   b5f2e:	f007 ff73 	bl	bde18 <free>
    AllocatorT::free(data_);
}
   b5f32:	4620      	mov	r0, r4
   b5f34:	bd70      	pop	{r4, r5, r6, pc}

000b5f36 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b5f36:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5f38:	4616      	mov	r6, r2
   b5f3a:	b08f      	sub	sp, #60	; 0x3c
      : _M_ptr(0), _M_refcount()
   b5f3c:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5f3e:	e9c0 2200 	strd	r2, r2, [r0]
   b5f42:	4604      	mov	r4, r0
   b5f44:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b5f46:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b5f48:	4619      	mov	r1, r3
   b5f4a:	a804      	add	r0, sp, #16
   b5f4c:	f008 f9e6 	bl	be31c <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b5f50:	9914      	ldr	r1, [sp, #80]	; 0x50
   b5f52:	4638      	mov	r0, r7
   b5f54:	f008 f9e2 	bl	be31c <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5f58:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5f5a:	9302      	str	r3, [sp, #8]
   b5f5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b5f5e:	4620      	mov	r0, r4
   b5f60:	e9cd 7300 	strd	r7, r3, [sp]
   b5f64:	4632      	mov	r2, r6
   b5f66:	ab04      	add	r3, sp, #16
   b5f68:	4629      	mov	r1, r5
   b5f6a:	f008 ff4d 	bl	bee08 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b5f6e:	4620      	mov	r0, r4
   b5f70:	b00f      	add	sp, #60	; 0x3c
   b5f72:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5f74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5f74:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5f76:	4c0b      	ldr	r4, [pc, #44]	; (b5fa4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5f78:	7821      	ldrb	r1, [r4, #0]
   b5f7a:	f3bf 8f5b 	dmb	ish
   b5f7e:	f011 0101 	ands.w	r1, r1, #1
   b5f82:	d10b      	bne.n	b5f9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5f84:	4620      	mov	r0, r4
   b5f86:	9101      	str	r1, [sp, #4]
   b5f88:	f7fe f89a 	bl	b40c0 <__cxa_guard_acquire>
   b5f8c:	9901      	ldr	r1, [sp, #4]
   b5f8e:	b128      	cbz	r0, b5f9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5f90:	4805      	ldr	r0, [pc, #20]	; (b5fa8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5f92:	f00b f8c6 	bl	c1122 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5f96:	4620      	mov	r0, r4
   b5f98:	f7fe f897 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b5f9c:	4802      	ldr	r0, [pc, #8]	; (b5fa8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5f9e:	b002      	add	sp, #8
   b5fa0:	bd10      	pop	{r4, pc}
   b5fa2:	bf00      	nop
   b5fa4:	2003dd58 	.word	0x2003dd58
   b5fa8:	2003dd5c 	.word	0x2003dd5c

000b5fac <_Z8setupSPIv>:
void setupSPI(){
   b5fac:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   b5fae:	f7ff ffe1 	bl	b5f74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5fb6:	2100      	movs	r1, #0
   b5fb8:	f00b f8d1 	bl	c115e <_ZN8SPIClass5beginE14hal_spi_mode_tt>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b5fbc:	f7ff ffda 	bl	b5f74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b5fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5fc4:	4901      	ldr	r1, [pc, #4]	; (b5fcc <_Z8setupSPIv+0x20>)
   b5fc6:	2201      	movs	r2, #1
   b5fc8:	f00b b968 	b.w	c129c <_ZN8SPIClass13setClockSpeedEjj>
   b5fcc:	000f4240 	.word	0x000f4240

000b5fd0 <setup>:
void setup(){
   b5fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b5fd4:	48c0      	ldr	r0, [pc, #768]	; (b62d8 <setup+0x308>)
    leftMotorSpeed = setLSpeed = 90;
   b5fd6:	4ec1      	ldr	r6, [pc, #772]	; (b62dc <setup+0x30c>)
   b5fd8:	7c03      	ldrb	r3, [r0, #16]
    rightMotorSpeed = setRSpeed = 90;
   b5fda:	4dc1      	ldr	r5, [pc, #772]	; (b62e0 <setup+0x310>)
   b5fdc:	f003 0303 	and.w	r3, r3, #3
   b5fe0:	f043 0378 	orr.w	r3, r3, #120	; 0x78
void setup(){
   b5fe4:	b093      	sub	sp, #76	; 0x4c
   b5fe6:	7403      	strb	r3, [r0, #16]
    led_set_status_active(&d_, active, nullptr);
   b5fe8:	2200      	movs	r2, #0
   b5fea:	2101      	movs	r1, #1
   b5fec:	3004      	adds	r0, #4
   b5fee:	f007 fe25 	bl	bdc3c <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);
   b5ff2:	2101      	movs	r1, #1
   b5ff4:	2002      	movs	r0, #2
   b5ff6:	f00b fd5d 	bl	c1ab4 <pinMode>
    pinMode(PWR_EN, OUTPUT);
   b5ffa:	2101      	movs	r1, #1
   b5ffc:	201c      	movs	r0, #28
   b5ffe:	f00b fd59 	bl	c1ab4 <pinMode>
    pinMode(LEAK_DET, INPUT);
   b6002:	2100      	movs	r1, #0
   b6004:	201d      	movs	r0, #29
   b6006:	f00b fd55 	bl	c1ab4 <pinMode>
    digitalWrite(SENSE_EN,LOW);
   b600a:	2100      	movs	r1, #0
   b600c:	2002      	movs	r0, #2
   b600e:	f00b fd62 	bl	c1ad6 <digitalWrite>
    digitalWrite(PWR_EN,LOW);
   b6012:	2100      	movs	r1, #0
   b6014:	201c      	movs	r0, #28
   b6016:	f00b fd5e 	bl	c1ad6 <digitalWrite>
   b601a:	f007 fc1f 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
    leftMotorSpeed = setLSpeed = 90;
   b601e:	4ab1      	ldr	r2, [pc, #708]	; (b62e4 <setup+0x314>)
    ESCL.attach(ESC_PWM_L,1000,2000);
   b6020:	48b1      	ldr	r0, [pc, #708]	; (b62e8 <setup+0x318>)
    leftMotorSpeed = setLSpeed = 90;
   b6022:	235a      	movs	r3, #90	; 0x5a
   b6024:	7013      	strb	r3, [r2, #0]
    rightMotorSpeed = setRSpeed = 90;
   b6026:	4ab1      	ldr	r2, [pc, #708]	; (b62ec <setup+0x31c>)
    leftMotorSpeed = setLSpeed = 90;
   b6028:	7033      	strb	r3, [r6, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b602a:	2400      	movs	r4, #0
   b602c:	27b4      	movs	r7, #180	; 0xb4
    rightMotorSpeed = setRSpeed = 90;
   b602e:	702b      	strb	r3, [r5, #0]
   b6030:	7013      	strb	r3, [r2, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b6032:	2106      	movs	r1, #6
   b6034:	e9cd 4700 	strd	r4, r7, [sp]
   b6038:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b603c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6040:	f00b f83e 	bl	c10c0 <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b6044:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b604c:	e9cd 4700 	strd	r4, r7, [sp]
   b6050:	2105      	movs	r1, #5
   b6052:	48a7      	ldr	r0, [pc, #668]	; (b62f0 <setup+0x320>)
    logSensors = true;
   b6054:	4fa7      	ldr	r7, [pc, #668]	; (b62f4 <setup+0x324>)
    ESCR.attach(ESC_PWM_R,1000,2000);
   b6056:	f00b f833 	bl	c10c0 <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);
   b605a:	7831      	ldrb	r1, [r6, #0]
   b605c:	48a2      	ldr	r0, [pc, #648]	; (b62e8 <setup+0x318>)
    logMessages = true;
   b605e:	4ea6      	ldr	r6, [pc, #664]	; (b62f8 <setup+0x328>)
    ESCL.write(setLSpeed);
   b6060:	f00a fff1 	bl	c1046 <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);
   b6064:	7829      	ldrb	r1, [r5, #0]
   b6066:	48a2      	ldr	r0, [pc, #648]	; (b62f0 <setup+0x320>)
   b6068:	f00a ffed 	bl	c1046 <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b606c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b6070:	f007 ff3e 	bl	bdef0 <delay>
    BLE.on();
   b6074:	f008 faa0 	bl	be5b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6078:	f008 fae8 	bl	be64c <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);          //Max transmitting power
   b607c:	f008 fa9c 	bl	be5b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6080:	2108      	movs	r1, #8
   b6082:	f008 faea 	bl	be65a <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin();
   b6086:	f00b fc15 	bl	c18b4 <_Z16_fetch_usbserialv>
   b608a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b608e:	f00b fc01 	bl	c1894 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b6092:	f00b fda7 	bl	c1be4 <_Z22__fetch_global_Serial1v>
   b6096:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b609a:	f00b fba3 	bl	c17e4 <_ZN11USARTSerial5beginEm>
    setupSPI();                                 //Setup SPI for BeagleBone
   b609e:	f7ff ff85 	bl	b5fac <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   b60a2:	f7fe fd7d 	bl	b4ba0 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b60a6:	f7fe fd93 	bl	b4bd0 <_Z8setupGPSv>
    setupLTE();                                 //Initialize LTE Flags
   b60aa:	f7fe fd65 	bl	b4b78 <_Z8setupLTEv>
   b60ae:	f007 fbd5 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
    lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();
   b60b2:	4b92      	ldr	r3, [pc, #584]	; (b62fc <setup+0x32c>)
   b60b4:	6018      	str	r0, [r3, #0]
   b60b6:	4b92      	ldr	r3, [pc, #584]	; (b6300 <setup+0x330>)
   b60b8:	6018      	str	r0, [r3, #0]
   b60ba:	4b92      	ldr	r3, [pc, #584]	; (b6304 <setup+0x334>)
   b60bc:	6018      	str	r0, [r3, #0]
   b60be:	4b92      	ldr	r3, [pc, #584]	; (b6308 <setup+0x338>)
   b60c0:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   b60c2:	4b92      	ldr	r3, [pc, #584]	; (b630c <setup+0x33c>)
   b60c4:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   b60c6:	4b92      	ldr	r3, [pc, #584]	; (b6310 <setup+0x340>)
   b60c8:	601c      	str	r4, [r3, #0]
    dataWait = false;
   b60ca:	4b92      	ldr	r3, [pc, #584]	; (b6314 <setup+0x344>)
   b60cc:	701c      	strb	r4, [r3, #0]
    offloadMode = false;
   b60ce:	4b92      	ldr	r3, [pc, #584]	; (b6318 <setup+0x348>)
   b60d0:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   b60d2:	4b92      	ldr	r3, [pc, #584]	; (b631c <setup+0x34c>)
   b60d4:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   b60d6:	4b92      	ldr	r3, [pc, #584]	; (b6320 <setup+0x350>)
   b60d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b60dc:	801a      	strh	r2, [r3, #0]
    telemetryAvail = false;
   b60de:	4b91      	ldr	r3, [pc, #580]	; (b6324 <setup+0x354>)
   b60e0:	701c      	strb	r4, [r3, #0]
    battPercent = 50;
   b60e2:	4b91      	ldr	r3, [pc, #580]	; (b6328 <setup+0x358>)
    logSensors = true;
   b60e4:	2501      	movs	r5, #1
    battPercent = 50;
   b60e6:	2232      	movs	r2, #50	; 0x32
   b60e8:	701a      	strb	r2, [r3, #0]
    logSensors = true;
   b60ea:	703d      	strb	r5, [r7, #0]
    logMessages = true;
   b60ec:	7035      	strb	r5, [r6, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   b60ee:	f008 fa63 	bl	be5b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b60f2:	4a8e      	ldr	r2, [pc, #568]	; (b632c <setup+0x35c>)
   b60f4:	4601      	mov	r1, r0
   b60f6:	a80d      	add	r0, sp, #52	; 0x34
   b60f8:	f008 ffb0 	bl	bf05c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b60fc:	a80d      	add	r0, sp, #52	; 0x34
   b60fe:	f008 fb60 	bl	be7c2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b6102:	f008 fa59 	bl	be5b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6106:	4a8a      	ldr	r2, [pc, #552]	; (b6330 <setup+0x360>)
   b6108:	4601      	mov	r1, r0
   b610a:	a80d      	add	r0, sp, #52	; 0x34
   b610c:	f008 ffa6 	bl	bf05c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6110:	a80d      	add	r0, sp, #52	; 0x34
   b6112:	f008 fb56 	bl	be7c2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   b6116:	f008 fa4f 	bl	be5b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b611a:	4a86      	ldr	r2, [pc, #536]	; (b6334 <setup+0x364>)
   b611c:	4601      	mov	r1, r0
   b611e:	a80d      	add	r0, sp, #52	; 0x34
   b6120:	f008 ff9c 	bl	bf05c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6124:	a80d      	add	r0, sp, #52	; 0x34
   b6126:	f008 fb4c 	bl	be7c2 <_ZN8particle17BleCharacteristicD1Ev>
        BLE.addCharacteristic(bledbgCharacteristic);
   b612a:	f008 fa45 	bl	be5b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b612e:	4a82      	ldr	r2, [pc, #520]	; (b6338 <setup+0x368>)
   b6130:	4601      	mov	r1, r0
   b6132:	a80d      	add	r0, sp, #52	; 0x34
   b6134:	f008 ff92 	bl	bf05c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6138:	a80d      	add	r0, sp, #52	; 0x34
   b613a:	f008 fb42 	bl	be7c2 <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;
   b613e:	4b7f      	ldr	r3, [pc, #508]	; (b633c <setup+0x36c>)
   b6140:	701d      	strb	r5, [r3, #0]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b6142:	4b7f      	ldr	r3, [pc, #508]	; (b6340 <setup+0x370>)
        BleUuid tempUUID(uuid);
   b6144:	a80d      	add	r0, sp, #52	; 0x34
   b6146:	6819      	ldr	r1, [r3, #0]
   b6148:	f008 f8e8 	bl	be31c <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b614c:	a80d      	add	r0, sp, #52	; 0x34
   b614e:	f008 f847 	bl	be1e0 <_ZNK8particle7BleUuid4typeEv>
   b6152:	4605      	mov	r5, r0
            uint16_t uuid16 = tempUUID.shorted();
   b6154:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6156:	2d00      	cmp	r5, #0
   b6158:	f040 80b3 	bne.w	b62c2 <setup+0x2f2>
            uint16_t uuid16 = tempUUID.shorted();
   b615c:	f008 f85c 	bl	be218 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6160:	9500      	str	r5, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b6162:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6166:	2302      	movs	r3, #2
   b6168:	aa09      	add	r2, sp, #36	; 0x24
   b616a:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b616c:	4875      	ldr	r0, [pc, #468]	; (b6344 <setup+0x374>)
   b616e:	f008 fc53 	bl	bea18 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b6172:	2300      	movs	r3, #0
   b6174:	4971      	ldr	r1, [pc, #452]	; (b633c <setup+0x36c>)
   b6176:	4873      	ldr	r0, [pc, #460]	; (b6344 <setup+0x374>)
   b6178:	2208      	movs	r2, #8
   b617a:	f008 fc6b 	bl	bea54 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b617e:	f008 fa1b 	bl	be5b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6182:	2200      	movs	r2, #0
   b6184:	496f      	ldr	r1, [pc, #444]	; (b6344 <setup+0x374>)
   b6186:	f008 fac8 	bl	be71a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b618a:	f00b fceb 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b618e:	f009 fbd9 	bl	bf944 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b6192:	f00b fce7 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b6196:	496c      	ldr	r1, [pc, #432]	; (b6348 <setup+0x378>)
   b6198:	f009 fbd0 	bl	bf93c <_ZN7TwoWire8setSpeedEm>
    if (! lis3mdl.begin_I2C()) {          // hardware I2C mode, can pass in address & alt Wire
   b619c:	f00b fce2 	bl	c1b64 <_Z19__fetch_global_Wirev>
   b61a0:	211c      	movs	r1, #28
   b61a2:	4602      	mov	r2, r0
   b61a4:	4869      	ldr	r0, [pc, #420]	; (b634c <setup+0x37c>)
   b61a6:	f002 f882 	bl	b82ae <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   b61aa:	2800      	cmp	r0, #0
   b61ac:	f040 8090 	bne.w	b62d0 <setup+0x300>
        Serial.println("Failed to find LIS3MDL chip");
   b61b0:	f00b fb80 	bl	c18b4 <_Z16_fetch_usbserialv>
   b61b4:	4966      	ldr	r1, [pc, #408]	; (b6350 <setup+0x380>)
    else Serial.println("LIS3MDL Found!");
   b61b6:	f00a fed4 	bl	c0f62 <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_HIGHMODE);
   b61ba:	4864      	ldr	r0, [pc, #400]	; (b634c <setup+0x37c>)
   b61bc:	2102      	movs	r1, #2
   b61be:	f001 ff6f 	bl	b80a0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b61c2:	4862      	ldr	r0, [pc, #392]	; (b634c <setup+0x37c>)
   b61c4:	2100      	movs	r1, #0
   b61c6:	f001 ffcf 	bl	b8168 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   b61ca:	4860      	ldr	r0, [pc, #384]	; (b634c <setup+0x37c>)
   b61cc:	2101      	movs	r1, #1
   b61ce:	f001 ff99 	bl	b8104 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   b61d2:	485e      	ldr	r0, [pc, #376]	; (b634c <setup+0x37c>)
   b61d4:	2101      	movs	r1, #1
   b61d6:	f001 ffe2 	bl	b819e <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b61da:	2401      	movs	r4, #1
   b61dc:	2500      	movs	r5, #0
    lis3mdl.setIntThreshold(500);
   b61de:	485b      	ldr	r0, [pc, #364]	; (b634c <setup+0x37c>)
   b61e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b61e4:	f002 f882 	bl	b82ec <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b61e8:	4623      	mov	r3, r4
   b61ea:	462a      	mov	r2, r5
   b61ec:	4629      	mov	r1, r5
   b61ee:	e9cd 5401 	strd	r5, r4, [sp, #4]
   b61f2:	4856      	ldr	r0, [pc, #344]	; (b634c <setup+0x37c>)
   b61f4:	9400      	str	r4, [sp, #0]
   b61f6:	f002 f891 	bl	b831c <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b61fa:	f00b fa7f 	bl	c16fc <_ZN9TimeClass5monthEv>
   b61fe:	9007      	str	r0, [sp, #28]
   b6200:	f00b fa70 	bl	c16e4 <_ZN9TimeClass3dayEv>
   b6204:	4680      	mov	r8, r0
   b6206:	f00b fa81 	bl	c170c <_ZN9TimeClass4yearEv>
   b620a:	4681      	mov	r9, r0
   b620c:	f00b fa46 	bl	c169c <_ZN9TimeClass4hourEv>
   b6210:	4682      	mov	sl, r0
   b6212:	f00b fa4f 	bl	c16b4 <_ZN9TimeClass6minuteEv>
   b6216:	4683      	mov	fp, r0
   b6218:	f00b fa58 	bl	c16cc <_ZN9TimeClass6secondEv>
   b621c:	9b07      	ldr	r3, [sp, #28]
   b621e:	4a4d      	ldr	r2, [pc, #308]	; (b6354 <setup+0x384>)
   b6220:	f8cd 8000 	str.w	r8, [sp]
   b6224:	e9cd b003 	strd	fp, r0, [sp, #12]
   b6228:	2110      	movs	r1, #16
   b622a:	e9cd 9a01 	strd	r9, sl, [sp, #4]
   b622e:	a809      	add	r0, sp, #36	; 0x24
   b6230:	f007 fe12 	bl	bde58 <snprintf>
    strcpy(filename,DEF_FILENAME);
   b6234:	4948      	ldr	r1, [pc, #288]	; (b6358 <setup+0x388>)
   b6236:	4849      	ldr	r0, [pc, #292]	; (b635c <setup+0x38c>)
   b6238:	f00d ff88 	bl	c414c <strcpy>
    strcat(filename,timestamp);
   b623c:	a909      	add	r1, sp, #36	; 0x24
   b623e:	4847      	ldr	r0, [pc, #284]	; (b635c <setup+0x38c>)
   b6240:	f00d ff54 	bl	c40ec <strcat>
    strcpy(filenameMessages,filename);
   b6244:	4945      	ldr	r1, [pc, #276]	; (b635c <setup+0x38c>)
   b6246:	4846      	ldr	r0, [pc, #280]	; (b6360 <setup+0x390>)
   b6248:	f00d ff80 	bl	c414c <strcpy>
    strcat(filename,".csv");
   b624c:	4945      	ldr	r1, [pc, #276]	; (b6364 <setup+0x394>)
   b624e:	4843      	ldr	r0, [pc, #268]	; (b635c <setup+0x38c>)
   b6250:	f00d ff4c 	bl	c40ec <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b6254:	4944      	ldr	r1, [pc, #272]	; (b6368 <setup+0x398>)
   b6256:	4842      	ldr	r0, [pc, #264]	; (b6360 <setup+0x390>)
   b6258:	f00d ff48 	bl	c40ec <strcat>
    Serial.println(filename);
   b625c:	f00b fb2a 	bl	c18b4 <_Z16_fetch_usbserialv>
   b6260:	493e      	ldr	r1, [pc, #248]	; (b635c <setup+0x38c>)
   b6262:	f00a fe7e 	bl	c0f62 <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b6266:	f00b fb25 	bl	c18b4 <_Z16_fetch_usbserialv>
   b626a:	493d      	ldr	r1, [pc, #244]	; (b6360 <setup+0x390>)
   b626c:	f00a fe79 	bl	c0f62 <_ZN5Print7printlnEPKc>
    watchdog.start();
   b6270:	483e      	ldr	r0, [pc, #248]	; (b636c <setup+0x39c>)
   b6272:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b6276:	f7fe f81f 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    ledTimer.start();
   b627a:	483d      	ldr	r0, [pc, #244]	; (b6370 <setup+0x3a0>)
   b627c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b6280:	f7fe f81a 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    statusPD.start();
   b6284:	483b      	ldr	r0, [pc, #236]	; (b6374 <setup+0x3a4>)
   b6286:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b628a:	f7fe f815 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
      dataMode_{dataMode}
   b628e:	4b3a      	ldr	r3, [pc, #232]	; (b6378 <setup+0x3a8>)
   b6290:	930d      	str	r3, [sp, #52]	; 0x34
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b6292:	483a      	ldr	r0, [pc, #232]	; (b637c <setup+0x3ac>)
   b6294:	4b3a      	ldr	r3, [pc, #232]	; (b6380 <setup+0x3b0>)
   b6296:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
   b629a:	aa0d      	add	r2, sp, #52	; 0x34
   b629c:	2108      	movs	r1, #8
   b629e:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
   b62a2:	930f      	str	r3, [sp, #60]	; 0x3c
   b62a4:	f7fe fa28 	bl	b46f8 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b62a8:	4604      	mov	r4, r0
   b62aa:	2800      	cmp	r0, #0
   b62ac:	d16e      	bne.n	b638c <setup+0x3bc>
        Serial.println("Error: could not connect to SD card!");
   b62ae:	f00b fb01 	bl	c18b4 <_Z16_fetch_usbserialv>
   b62b2:	4934      	ldr	r1, [pc, #208]	; (b6384 <setup+0x3b4>)
   b62b4:	f00a fe55 	bl	c0f62 <_ZN5Print7printlnEPKc>
        logSensors = false;
   b62b8:	703c      	strb	r4, [r7, #0]
        logMessages = false;
   b62ba:	7034      	strb	r4, [r6, #0]
}
   b62bc:	b013      	add	sp, #76	; 0x4c
   b62be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b62c2:	f007 ffab 	bl	be21c <_ZNK8particle7BleUuid8rawBytesEv>
   b62c6:	9400      	str	r4, [sp, #0]
   b62c8:	4602      	mov	r2, r0
   b62ca:	2310      	movs	r3, #16
   b62cc:	2107      	movs	r1, #7
   b62ce:	e74d      	b.n	b616c <setup+0x19c>
    else Serial.println("LIS3MDL Found!");
   b62d0:	f00b faf0 	bl	c18b4 <_Z16_fetch_usbserialv>
   b62d4:	492c      	ldr	r1, [pc, #176]	; (b6388 <setup+0x3b8>)
   b62d6:	e76e      	b.n	b61b6 <setup+0x1e6>
   b62d8:	2003e588 	.word	0x2003e588
   b62dc:	2003e580 	.word	0x2003e580
   b62e0:	2003e581 	.word	0x2003e581
   b62e4:	2003de44 	.word	0x2003de44
   b62e8:	2003dd74 	.word	0x2003dd74
   b62ec:	2003e0db 	.word	0x2003e0db
   b62f0:	2003dd84 	.word	0x2003dd84
   b62f4:	2003defd 	.word	0x2003defd
   b62f8:	2003defc 	.word	0x2003defc
   b62fc:	2003e57c 	.word	0x2003e57c
   b6300:	2003ddd4 	.word	0x2003ddd4
   b6304:	2003de1c 	.word	0x2003de1c
   b6308:	2003de20 	.word	0x2003de20
   b630c:	2003dda8 	.word	0x2003dda8
   b6310:	2003dd70 	.word	0x2003dd70
   b6314:	2003ddd8 	.word	0x2003ddd8
   b6318:	2003e0d8 	.word	0x2003e0d8
   b631c:	2003e0da 	.word	0x2003e0da
   b6320:	2003dd96 	.word	0x2003dd96
   b6324:	2003e5d8 	.word	0x2003e5d8
   b6328:	2003ddc0 	.word	0x2003ddc0
   b632c:	2003e5e4 	.word	0x2003e5e4
   b6330:	2003e0dc 	.word	0x2003e0dc
   b6334:	2003e0d0 	.word	0x2003e0d0
   b6338:	2003ddc8 	.word	0x2003ddc8
   b633c:	2003dd65 	.word	0x2003dd65
   b6340:	2003db54 	.word	0x2003db54
   b6344:	2003ddb0 	.word	0x2003ddb0
   b6348:	00061a80 	.word	0x00061a80
   b634c:	2003de48 	.word	0x2003de48
   b6350:	000c6736 	.word	0x000c6736
   b6354:	000c6573 	.word	0x000c6573
   b6358:	000c6761 	.word	0x000c6761
   b635c:	2003ddd9 	.word	0x2003ddd9
   b6360:	2003ddf7 	.word	0x2003ddf7
   b6364:	000c6681 	.word	0x000c6681
   b6368:	000c676a 	.word	0x000c676a
   b636c:	2003e5f0 	.word	0x2003e5f0
   b6370:	2003de28 	.word	0x2003de28
   b6374:	2003e5ac 	.word	0x2003e5ac
   b6378:	000c682c 	.word	0x000c682c
   b637c:	2003e0e4 	.word	0x2003e0e4
   b6380:	007a1200 	.word	0x007a1200
   b6384:	000c6773 	.word	0x000c6773
   b6388:	000c6752 	.word	0x000c6752
    if(logSensors){
   b638c:	783b      	ldrb	r3, [r7, #0]
   b638e:	b17b      	cbz	r3, b63b0 <setup+0x3e0>
   b6390:	4812      	ldr	r0, [pc, #72]	; (b63dc <setup+0x40c>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b6392:	7c03      	ldrb	r3, [r0, #16]
   b6394:	b92b      	cbnz	r3, b63a2 <setup+0x3d2>
   b6396:	4912      	ldr	r1, [pc, #72]	; (b63e0 <setup+0x410>)
   b6398:	f244 2202 	movw	r2, #16898	; 0x4202
   b639c:	3010      	adds	r0, #16
   b639e:	f7fe f937 	bl	b4610 <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b63a2:	4910      	ldr	r1, [pc, #64]	; (b63e4 <setup+0x414>)
   b63a4:	480d      	ldr	r0, [pc, #52]	; (b63dc <setup+0x40c>)
   b63a6:	f00a fddc 	bl	c0f62 <_ZN5Print7printlnEPKc>
        myFile.close();
   b63aa:	480f      	ldr	r0, [pc, #60]	; (b63e8 <setup+0x418>)
   b63ac:	f000 fc84 	bl	b6cb8 <_ZN7FatFile5closeEv>
    if(logMessages){
   b63b0:	7833      	ldrb	r3, [r6, #0]
   b63b2:	2b00      	cmp	r3, #0
   b63b4:	d082      	beq.n	b62bc <setup+0x2ec>
   b63b6:	480d      	ldr	r0, [pc, #52]	; (b63ec <setup+0x41c>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b63b8:	7c03      	ldrb	r3, [r0, #16]
   b63ba:	b92b      	cbnz	r3, b63c8 <setup+0x3f8>
   b63bc:	490c      	ldr	r1, [pc, #48]	; (b63f0 <setup+0x420>)
   b63be:	f244 2202 	movw	r2, #16898	; 0x4202
   b63c2:	3010      	adds	r0, #16
   b63c4:	f7fe f924 	bl	b4610 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b63c8:	490a      	ldr	r1, [pc, #40]	; (b63f4 <setup+0x424>)
   b63ca:	4808      	ldr	r0, [pc, #32]	; (b63ec <setup+0x41c>)
   b63cc:	2201      	movs	r2, #1
   b63ce:	f7fd ffc3 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b63d2:	4809      	ldr	r0, [pc, #36]	; (b63f8 <setup+0x428>)
   b63d4:	f000 fc70 	bl	b6cb8 <_ZN7FatFile5closeEv>
}
   b63d8:	e770      	b.n	b62bc <setup+0x2ec>
   b63da:	bf00      	nop
   b63dc:	2003df24 	.word	0x2003df24
   b63e0:	2003ddd9 	.word	0x2003ddd9
   b63e4:	000c6798 	.word	0x000c6798
   b63e8:	2003df34 	.word	0x2003df34
   b63ec:	2003dea4 	.word	0x2003dea4
   b63f0:	2003ddf7 	.word	0x2003ddf7
   b63f4:	000c67ee 	.word	0x000c67ee
   b63f8:	2003deb4 	.word	0x2003deb4

000b63fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b63fc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b63fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6400:	4604      	mov	r4, r0
   b6402:	460d      	mov	r5, r1
   b6404:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6406:	d916      	bls.n	b6436 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b6408:	4290      	cmp	r0, r2
   b640a:	d215      	bcs.n	b6438 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b640c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6410:	1a75      	subs	r5, r6, r1
   b6412:	f1a1 0714 	sub.w	r7, r1, #20
   b6416:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6418:	42b7      	cmp	r7, r6
   b641a:	d01c      	beq.n	b6456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b641c:	b12c      	cbz	r4, b642a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b641e:	4631      	mov	r1, r6
   b6420:	4620      	mov	r0, r4
   b6422:	f00b f847 	bl	c14b4 <_ZN6StringC1EOS_>
   b6426:	7c33      	ldrb	r3, [r6, #16]
   b6428:	7423      	strb	r3, [r4, #16]
   b642a:	4630      	mov	r0, r6
   b642c:	f00a ffc6 	bl	c13bc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6430:	3e14      	subs	r6, #20
   b6432:	3c14      	subs	r4, #20
   b6434:	e7f0      	b.n	b6418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6436:	d00e      	beq.n	b6456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b6438:	42b5      	cmp	r5, r6
   b643a:	d00c      	beq.n	b6456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b643c:	b12c      	cbz	r4, b644a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b643e:	4629      	mov	r1, r5
   b6440:	4620      	mov	r0, r4
   b6442:	f00b f837 	bl	c14b4 <_ZN6StringC1EOS_>
   b6446:	7c2b      	ldrb	r3, [r5, #16]
   b6448:	7423      	strb	r3, [r4, #16]
   b644a:	4628      	mov	r0, r5
   b644c:	f00a ffb6 	bl	c13bc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6450:	3514      	adds	r5, #20
   b6452:	3414      	adds	r4, #20
   b6454:	e7f0      	b.n	b6438 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b6456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6458 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b645c:	2300      	movs	r3, #0
   b645e:	e9c0 3300 	strd	r3, r3, [r0]
   b6462:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6464:	684f      	ldr	r7, [r1, #4]
   b6466:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6468:	4604      	mov	r4, r0
   b646a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b646c:	dd23      	ble.n	b64b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b646e:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b6472:	fb08 f007 	mul.w	r0, r8, r7
   b6476:	f007 fcc7 	bl	bde08 <malloc>
            if (!d) {
   b647a:	4605      	mov	r5, r0
   b647c:	b1d8      	cbz	r0, b64b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b647e:	e9d4 1200 	ldrd	r1, r2, [r4]
   b6482:	fb08 1202 	mla	r2, r8, r2, r1
   b6486:	f7ff ffb9 	bl	b63fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b648a:	6820      	ldr	r0, [r4, #0]
   b648c:	f007 fcc4 	bl	bde18 <free>
        data_ = d;
   b6490:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6492:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6494:	e9d6 7300 	ldrd	r7, r3, [r6]
   b6498:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b649c:	45b8      	cmp	r8, r7
   b649e:	d008      	beq.n	b64b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b64a0:	4639      	mov	r1, r7
   b64a2:	4628      	mov	r0, r5
   b64a4:	f00b f820 	bl	c14e8 <_ZN6StringC1ERKS_>
   b64a8:	7c3b      	ldrb	r3, [r7, #16]
   b64aa:	742b      	strb	r3, [r5, #16]
   b64ac:	3714      	adds	r7, #20
   b64ae:	3514      	adds	r5, #20
   b64b0:	e7f4      	b.n	b649c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b64b2:	6873      	ldr	r3, [r6, #4]
   b64b4:	6063      	str	r3, [r4, #4]
}
   b64b6:	4620      	mov	r0, r4
   b64b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b64bc <_GLOBAL__sub_I_SystemMode>:
   b64bc:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b64be:	4b7d      	ldr	r3, [pc, #500]	; (b66b4 <_GLOBAL__sub_I_SystemMode+0x1f8>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b64c0:	4a7d      	ldr	r2, [pc, #500]	; (b66b8 <_GLOBAL__sub_I_SystemMode+0x1fc>)
  explicit SdFat(SPIClass* spiPort) {
   b64c2:	4c7e      	ldr	r4, [pc, #504]	; (b66bc <_GLOBAL__sub_I_SystemMode+0x200>)
   b64c4:	2601      	movs	r6, #1
   b64c6:	701e      	strb	r6, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b64c8:	4b7d      	ldr	r3, [pc, #500]	; (b66c0 <_GLOBAL__sub_I_SystemMode+0x204>)
   b64ca:	2500      	movs	r5, #0
   b64cc:	e9c3 5500 	strd	r5, r5, [r3]
    SleepResult() {}
   b64d0:	609a      	str	r2, [r3, #8]
   b64d2:	b093      	sub	sp, #76	; 0x4c

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b64d4:	2003      	movs	r0, #3
   b64d6:	f007 fbc3 	bl	bdc60 <set_system_mode>
SFE_UBLOX_GNSS myGPS;
   b64da:	487a      	ldr	r0, [pc, #488]	; (b66c4 <_GLOBAL__sub_I_SystemMode+0x208>)
   b64dc:	f001 ff7a 	bl	b83d4 <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;
   b64e0:	4879      	ldr	r0, [pc, #484]	; (b66c8 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b64e2:	f001 fd61 	bl	b7fa8 <_ZN16Adafruit_LIS3MDLC1Ev>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   b64e6:	f7ff fd45 	bl	b5f74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b64ea:	2364      	movs	r3, #100	; 0x64
   b64ec:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
  {
   b64f0:	4b76      	ldr	r3, [pc, #472]	; (b66cc <_GLOBAL__sub_I_SystemMode+0x210>)
   b64f2:	6065      	str	r5, [r4, #4]
   b64f4:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
   b64f8:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
   b64fc:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
   b6500:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
   b6504:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
   b6508:	f8a4 547c 	strh.w	r5, [r4, #1148]	; 0x47c
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b650c:	b908      	cbnz	r0, b6512 <_GLOBAL__sub_I_SystemMode+0x56>
   b650e:	f7ff fd31 	bl	b5f74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    Print() : write_error(0) {}
   b6512:	4b6f      	ldr	r3, [pc, #444]	; (b66d0 <_GLOBAL__sub_I_SystemMode+0x214>)
  File() {}
   b6514:	4a6f      	ldr	r2, [pc, #444]	; (b66d4 <_GLOBAL__sub_I_SystemMode+0x218>)
   b6516:	f8c4 046c 	str.w	r0, [r4, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b651a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   b651e:	2400      	movs	r4, #0
   b6520:	601a      	str	r2, [r3, #0]
   b6522:	e9c3 4701 	strd	r4, r7, [r3, #4]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6526:	611c      	str	r4, [r3, #16]
   b6528:	4b6b      	ldr	r3, [pc, #428]	; (b66d8 <_GLOBAL__sub_I_SystemMode+0x21c>)
        capacity_(0) {
   b652a:	9407      	str	r4, [sp, #28]
   b652c:	601a      	str	r2, [r3, #0]
   b652e:	e9c3 4701 	strd	r4, r7, [r3, #4]
   b6532:	611c      	str	r4, [r3, #16]
   b6534:	4b69      	ldr	r3, [pc, #420]	; (b66dc <_GLOBAL__sub_I_SystemMode+0x220>)
        filter_(level, filters) {
   b6536:	4d6a      	ldr	r5, [pc, #424]	; (b66e0 <_GLOBAL__sub_I_SystemMode+0x224>)
   b6538:	601a      	str	r2, [r3, #0]
   b653a:	e9c3 4701 	strd	r4, r7, [r3, #4]
   b653e:	611c      	str	r4, [r3, #16]
   b6540:	e9cd 4405 	strd	r4, r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b6544:	f00b f9b6 	bl	c18b4 <_Z16_fetch_usbserialv>
   b6548:	a905      	add	r1, sp, #20
   b654a:	4606      	mov	r6, r0
   b654c:	a808      	add	r0, sp, #32
   b654e:	f7ff ff83 	bl	b6458 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b6552:	a908      	add	r1, sp, #32
   b6554:	a80b      	add	r0, sp, #44	; 0x2c
   b6556:	f7ff ff7f 	bl	b6458 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b655a:	4b62      	ldr	r3, [pc, #392]	; (b66e4 <_GLOBAL__sub_I_SystemMode+0x228>)
   b655c:	602b      	str	r3, [r5, #0]
   b655e:	a90b      	add	r1, sp, #44	; 0x2c
   b6560:	a80e      	add	r0, sp, #56	; 0x38
   b6562:	f7ff ff79 	bl	b6458 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6566:	aa0e      	add	r2, sp, #56	; 0x38
   b6568:	211e      	movs	r1, #30
   b656a:	1d28      	adds	r0, r5, #4
   b656c:	f00a f920 	bl	c07b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6570:	a80e      	add	r0, sp, #56	; 0x38
   b6572:	f7ff fccd 	bl	b5f10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6576:	a80b      	add	r0, sp, #44	; 0x2c
   b6578:	f7ff fcca 	bl	b5f10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b657c:	4b5a      	ldr	r3, [pc, #360]	; (b66e8 <_GLOBAL__sub_I_SystemMode+0x22c>)
   b657e:	602b      	str	r3, [r5, #0]
   b6580:	622e      	str	r6, [r5, #32]
   b6582:	a808      	add	r0, sp, #32
   b6584:	f7ff fcc4 	bl	b5f10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6588:	4b58      	ldr	r3, [pc, #352]	; (b66ec <_GLOBAL__sub_I_SystemMode+0x230>)
   b658a:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b658c:	f00b f992 	bl	c18b4 <_Z16_fetch_usbserialv>
   b6590:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6594:	f00b f97e 	bl	c1894 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b6598:	f009 fdec 	bl	c0174 <_ZN5spark10LogManager8instanceEv>
   b659c:	4629      	mov	r1, r5
   b659e:	f009 ffdd 	bl	c055c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   b65a2:	a805      	add	r0, sp, #20
   b65a4:	f7ff fcb4 	bl	b5f10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL; 
   b65a8:	4851      	ldr	r0, [pc, #324]	; (b66f0 <_GLOBAL__sub_I_SystemMode+0x234>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b65aa:	4d52      	ldr	r5, [pc, #328]	; (b66f4 <_GLOBAL__sub_I_SystemMode+0x238>)
	    _M_invoker = &_My_handler::_M_invoke;
   b65ac:	4e52      	ldr	r6, [pc, #328]	; (b66f8 <_GLOBAL__sub_I_SystemMode+0x23c>)
Servo ESCL; 
   b65ae:	f00a fd73 	bl	c1098 <_ZN5ServoC1Ev>
Servo ESCR;
   b65b2:	4852      	ldr	r0, [pc, #328]	; (b66fc <_GLOBAL__sub_I_SystemMode+0x240>)
   b65b4:	f00a fd70 	bl	c1098 <_ZN5ServoC1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b65b8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b65bc:	682b      	ldr	r3, [r5, #0]
   b65be:	9300      	str	r3, [sp, #0]
   b65c0:	4b4f      	ldr	r3, [pc, #316]	; (b6700 <_GLOBAL__sub_I_SystemMode+0x244>)
   b65c2:	4950      	ldr	r1, [pc, #320]	; (b6704 <_GLOBAL__sub_I_SystemMode+0x248>)
   b65c4:	681b      	ldr	r3, [r3, #0]
   b65c6:	4850      	ldr	r0, [pc, #320]	; (b6708 <_GLOBAL__sub_I_SystemMode+0x24c>)
   b65c8:	f04f 0210 	mov.w	r2, #16
   b65cc:	f7ff fcb3 	bl	b5f36 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b65d0:	4b4e      	ldr	r3, [pc, #312]	; (b670c <_GLOBAL__sub_I_SystemMode+0x250>)
   b65d2:	9402      	str	r4, [sp, #8]
   b65d4:	9301      	str	r3, [sp, #4]
   b65d6:	682b      	ldr	r3, [r5, #0]
   b65d8:	9300      	str	r3, [sp, #0]
   b65da:	4b4d      	ldr	r3, [pc, #308]	; (b6710 <_GLOBAL__sub_I_SystemMode+0x254>)
   b65dc:	494d      	ldr	r1, [pc, #308]	; (b6714 <_GLOBAL__sub_I_SystemMode+0x258>)
   b65de:	681b      	ldr	r3, [r3, #0]
   b65e0:	484d      	ldr	r0, [pc, #308]	; (b6718 <_GLOBAL__sub_I_SystemMode+0x25c>)
   b65e2:	f04f 0204 	mov.w	r2, #4
   b65e6:	f7ff fca6 	bl	b5f36 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b65ea:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b65ee:	682b      	ldr	r3, [r5, #0]
   b65f0:	9300      	str	r3, [sp, #0]
   b65f2:	4b4a      	ldr	r3, [pc, #296]	; (b671c <_GLOBAL__sub_I_SystemMode+0x260>)
   b65f4:	494a      	ldr	r1, [pc, #296]	; (b6720 <_GLOBAL__sub_I_SystemMode+0x264>)
   b65f6:	681b      	ldr	r3, [r3, #0]
   b65f8:	484a      	ldr	r0, [pc, #296]	; (b6724 <_GLOBAL__sub_I_SystemMode+0x268>)
   b65fa:	f04f 0210 	mov.w	r2, #16
   b65fe:	f7ff fc9a 	bl	b5f36 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
    BleCharacteristic bledbgCharacteristic("dbg", BleCharacteristicProperty::NOTIFY, bledbgUuid, WaterNetService);
   b6602:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6606:	682b      	ldr	r3, [r5, #0]
   b6608:	9300      	str	r3, [sp, #0]
   b660a:	4b47      	ldr	r3, [pc, #284]	; (b6728 <_GLOBAL__sub_I_SystemMode+0x26c>)
   b660c:	4947      	ldr	r1, [pc, #284]	; (b672c <_GLOBAL__sub_I_SystemMode+0x270>)
   b660e:	681b      	ldr	r3, [r3, #0]
   b6610:	4847      	ldr	r0, [pc, #284]	; (b6730 <_GLOBAL__sub_I_SystemMode+0x274>)
	    _M_manager = &_My_handler::_M_manager;
   b6612:	4d48      	ldr	r5, [pc, #288]	; (b6734 <_GLOBAL__sub_I_SystemMode+0x278>)
   b6614:	f04f 0210 	mov.w	r2, #16
   b6618:	f7ff fc8d 	bl	b5f36 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                 //Advertising data
   b661c:	4846      	ldr	r0, [pc, #280]	; (b6738 <_GLOBAL__sub_I_SystemMode+0x27c>)
   b661e:	f008 fa06 	bl	bea2e <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6622:	4b46      	ldr	r3, [pc, #280]	; (b673c <_GLOBAL__sub_I_SystemMode+0x280>)
   b6624:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   b6626:	aa0e      	add	r2, sp, #56	; 0x38
   b6628:	4623      	mov	r3, r4
   b662a:	f643 2198 	movw	r1, #15000	; 0x3a98
   b662e:	4844      	ldr	r0, [pc, #272]	; (b6740 <_GLOBAL__sub_I_SystemMode+0x284>)
	    _M_invoker = &_My_handler::_M_invoke;
   b6630:	9611      	str	r6, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   b6632:	9510      	str	r5, [sp, #64]	; 0x40
   b6634:	f7fd ff50 	bl	b44d8 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6638:	a80e      	add	r0, sp, #56	; 0x38
   b663a:	f7fd ff0f 	bl	b445c <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b663e:	4b41      	ldr	r3, [pc, #260]	; (b6744 <_GLOBAL__sub_I_SystemMode+0x288>)
   b6640:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   b6642:	aa0e      	add	r2, sp, #56	; 0x38
   b6644:	4623      	mov	r3, r4
   b6646:	4639      	mov	r1, r7
   b6648:	483f      	ldr	r0, [pc, #252]	; (b6748 <_GLOBAL__sub_I_SystemMode+0x28c>)
	    _M_manager = &_My_handler::_M_manager;
   b664a:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b664e:	f7fd ff43 	bl	b44d8 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6652:	a80e      	add	r0, sp, #56	; 0x38
   b6654:	f7fd ff02 	bl	b445c <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6658:	4b3c      	ldr	r3, [pc, #240]	; (b674c <_GLOBAL__sub_I_SystemMode+0x290>)
   b665a:	930e      	str	r3, [sp, #56]	; 0x38
Timer motionTimer(2500, motionHandler);
   b665c:	aa0e      	add	r2, sp, #56	; 0x38
   b665e:	4623      	mov	r3, r4
   b6660:	f640 11c4 	movw	r1, #2500	; 0x9c4
   b6664:	483a      	ldr	r0, [pc, #232]	; (b6750 <_GLOBAL__sub_I_SystemMode+0x294>)
	    _M_manager = &_My_handler::_M_manager;
   b6666:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b666a:	f7fd ff35 	bl	b44d8 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b666e:	a80e      	add	r0, sp, #56	; 0x38
   b6670:	f7fd fef4 	bl	b445c <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6674:	4b37      	ldr	r3, [pc, #220]	; (b6754 <_GLOBAL__sub_I_SystemMode+0x298>)
   b6676:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   b6678:	aa0e      	add	r2, sp, #56	; 0x38
   b667a:	4623      	mov	r3, r4
   b667c:	f643 2198 	movw	r1, #15000	; 0x3a98
   b6680:	4835      	ldr	r0, [pc, #212]	; (b6758 <_GLOBAL__sub_I_SystemMode+0x29c>)
	    _M_manager = &_My_handler::_M_manager;
   b6682:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b6686:	f7fd ff27 	bl	b44d8 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b668a:	a80e      	add	r0, sp, #56	; 0x38
   b668c:	f7fd fee6 	bl	b445c <_ZNSt14_Function_baseD1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b6690:	4622      	mov	r2, r4
   b6692:	2114      	movs	r1, #20
   b6694:	2001      	movs	r0, #1
   b6696:	f007 fb0b 	bl	bdcb0 <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b669a:	2201      	movs	r2, #1
   b669c:	2114      	movs	r1, #20
   b669e:	e9cd 1200 	strd	r1, r2, [sp]
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b66a2:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b66a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b66a8:	482c      	ldr	r0, [pc, #176]	; (b675c <_GLOBAL__sub_I_SystemMode+0x2a0>)
   b66aa:	f009 fbe5 	bl	bfe78 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b66ae:	b013      	add	sp, #76	; 0x4c
   b66b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b66b2:	bf00      	nop
   b66b4:	2003ddac 	.word	0x2003ddac
   b66b8:	ffff0000 	.word	0xffff0000
   b66bc:	2003e0e4 	.word	0x2003e0e4
   b66c0:	2003dd98 	.word	0x2003dd98
   b66c4:	2003df58 	.word	0x2003df58
   b66c8:	2003de48 	.word	0x2003de48
   b66cc:	000c682c 	.word	0x000c682c
   b66d0:	2003df24 	.word	0x2003df24
   b66d4:	000c6898 	.word	0x000c6898
   b66d8:	2003dea4 	.word	0x2003dea4
   b66dc:	2003de70 	.word	0x2003de70
   b66e0:	2003ded8 	.word	0x2003ded8
   b66e4:	000c6854 	.word	0x000c6854
   b66e8:	000c7a28 	.word	0x000c7a28
   b66ec:	000c6880 	.word	0x000c6880
   b66f0:	2003dd74 	.word	0x2003dd74
   b66f4:	2003db54 	.word	0x2003db54
   b66f8:	000b4235 	.word	0x000b4235
   b66fc:	2003dd84 	.word	0x2003dd84
   b6700:	2003db6c 	.word	0x2003db6c
   b6704:	000c6813 	.word	0x000c6813
   b6708:	2003e5e4 	.word	0x2003e5e4
   b670c:	000b4ad1 	.word	0x000b4ad1
   b6710:	2003db68 	.word	0x2003db68
   b6714:	000c6816 	.word	0x000c6816
   b6718:	2003e0dc 	.word	0x2003e0dc
   b671c:	2003db64 	.word	0x2003db64
   b6720:	000c6819 	.word	0x000c6819
   b6724:	2003e0d0 	.word	0x2003e0d0
   b6728:	2003db5c 	.word	0x2003db5c
   b672c:	000c681d 	.word	0x000c681d
   b6730:	2003ddc8 	.word	0x2003ddc8
   b6734:	000b4221 	.word	0x000b4221
   b6738:	2003ddb0 	.word	0x2003ddb0
   b673c:	000b4621 	.word	0x000b4621
   b6740:	2003e5f0 	.word	0x2003e5f0
   b6744:	000b4551 	.word	0x000b4551
   b6748:	2003de28 	.word	0x2003de28
   b674c:	000b4375 	.word	0x000b4375
   b6750:	2003df08 	.word	0x2003df08
   b6754:	000b40fd 	.word	0x000b40fd
   b6758:	2003e5ac 	.word	0x2003e5ac
   b675c:	2003e588 	.word	0x2003e588

000b6760 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b6760:	b538      	push	{r3, r4, r5, lr}
   b6762:	4604      	mov	r4, r0
   b6764:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6766:	2224      	movs	r2, #36	; 0x24
   b6768:	2100      	movs	r1, #0
   b676a:	f00d fc89 	bl	c4080 <memset>

  m_vol = vol;
   b676e:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b6770:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b6772:	2b10      	cmp	r3, #16
   b6774:	d003      	beq.n	b677e <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6776:	2b20      	cmp	r3, #32
   b6778:	d006      	beq.n	b6788 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b677a:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b677c:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b677e:	2320      	movs	r3, #32
  m_flags = F_READ;
   b6780:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b6782:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6784:	70a0      	strb	r0, [r4, #2]
  return true;
   b6786:	e7f9      	b.n	b677c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6788:	2340      	movs	r3, #64	; 0x40
   b678a:	e7f9      	b.n	b6780 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b678c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b678c:	b510      	push	{r4, lr}
   b678e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6790:	3024      	adds	r0, #36	; 0x24
   b6792:	f000 ff66 	bl	b7662 <_ZN8FatCache4syncEv>
   b6796:	b128      	cbz	r0, b67a4 <_ZN9FatVolume9cacheSyncEv+0x18>
   b6798:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b679c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b67a0:	f000 bf5f 	b.w	b7662 <_ZN8FatCache4syncEv>
  }
   b67a4:	bd10      	pop	{r4, pc}

000b67a6 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b67a6:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b67a8:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b67aa:	f043 0304 	orr.w	r3, r3, #4
   b67ae:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b67b0:	f100 0210 	add.w	r2, r0, #16
   b67b4:	6880      	ldr	r0, [r0, #8]
   b67b6:	f001 b80a 	b.w	b77ce <_ZN9FatVolume15allocateClusterEmPm>
	...

000b67bc <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b67bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b67c0:	7801      	ldrb	r1, [r0, #0]
   b67c2:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b67c6:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b67c8:	d003      	beq.n	b67d2 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b67ca:	2600      	movs	r6, #0
}
   b67cc:	4630      	mov	r0, r6
   b67ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b67d2:	6942      	ldr	r2, [r0, #20]
   b67d4:	4b17      	ldr	r3, [pc, #92]	; (b6834 <_ZN7FatFile13addDirClusterEv+0x78>)
   b67d6:	429a      	cmp	r2, r3
   b67d8:	d2f7      	bcs.n	b67ca <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b67da:	f7ff ffe4 	bl	b67a6 <_ZN7FatFile10addClusterEv>
   b67de:	4606      	mov	r6, r0
   b67e0:	2800      	cmp	r0, #0
   b67e2:	d0f2      	beq.n	b67ca <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b67e4:	6921      	ldr	r1, [r4, #16]
   b67e6:	68a0      	ldr	r0, [r4, #8]
   b67e8:	f000 ff86 	bl	b76f8 <_ZNK9FatVolume17clusterFirstBlockEm>
   b67ec:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b67ee:	68a0      	ldr	r0, [r4, #8]
   b67f0:	2205      	movs	r2, #5
   b67f2:	4639      	mov	r1, r7
   b67f4:	3024      	adds	r0, #36	; 0x24
   b67f6:	f000 ff5c 	bl	b76b2 <_ZN8FatCache4readEmh>
  if (!pc) {
   b67fa:	4680      	mov	r8, r0
   b67fc:	2800      	cmp	r0, #0
   b67fe:	d0e4      	beq.n	b67ca <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b6800:	4629      	mov	r1, r5
   b6802:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6806:	f00d fc3b 	bl	c4080 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b680a:	2501      	movs	r5, #1
   b680c:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b680e:	791a      	ldrb	r2, [r3, #4]
   b6810:	42aa      	cmp	r2, r5
   b6812:	d909      	bls.n	b6828 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6814:	6818      	ldr	r0, [r3, #0]
   b6816:	4642      	mov	r2, r8
   b6818:	19e9      	adds	r1, r5, r7
   b681a:	f001 fab6 	bl	b7d8a <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b681e:	2800      	cmp	r0, #0
   b6820:	d0d3      	beq.n	b67ca <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6822:	3501      	adds	r5, #1
   b6824:	b2ed      	uxtb	r5, r5
   b6826:	e7f1      	b.n	b680c <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b6828:	6963      	ldr	r3, [r4, #20]
   b682a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b682e:	6163      	str	r3, [r4, #20]
  return true;
   b6830:	e7cc      	b.n	b67cc <_ZN7FatFile13addDirClusterEv+0x10>
   b6832:	bf00      	nop
   b6834:	001ffe00 	.word	0x001ffe00

000b6838 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b6838:	b510      	push	{r4, lr}
   b683a:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b683c:	6880      	ldr	r0, [r0, #8]
   b683e:	460a      	mov	r2, r1
   b6840:	3024      	adds	r0, #36	; 0x24
   b6842:	69a1      	ldr	r1, [r4, #24]
   b6844:	f000 ff35 	bl	b76b2 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6848:	b120      	cbz	r0, b6854 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b684a:	88a3      	ldrh	r3, [r4, #4]
   b684c:	f003 030f 	and.w	r3, r3, #15
   b6850:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6854:	bd10      	pop	{r4, pc}

000b6856 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b6856:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b6858:	b5f0      	push	{r4, r5, r6, r7, lr}
   b685a:	4604      	mov	r4, r0
   b685c:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b685e:	2608      	movs	r6, #8
  uint8_t j = 0;
   b6860:	4618      	mov	r0, r3
      name[j++] = '.';
   b6862:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b6864:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b6868:	2a20      	cmp	r2, #32
   b686a:	d018      	beq.n	b689e <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b686c:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b686e:	bf02      	ittt	eq
   b6870:	540f      	strbeq	r7, [r1, r0]
   b6872:	1c42      	addeq	r2, r0, #1
   b6874:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b6876:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b6878:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b687c:	bf08      	it	eq
   b687e:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b6880:	f1bc 0f19 	cmp.w	ip, #25
   b6884:	d806      	bhi.n	b6894 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b6886:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b688a:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b688e:	bf1c      	itt	ne
   b6890:	3220      	addne	r2, #32
   b6892:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b6894:	f100 0c01 	add.w	ip, r0, #1
   b6898:	540a      	strb	r2, [r1, r0]
   b689a:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b689e:	3301      	adds	r3, #1
   b68a0:	b2db      	uxtb	r3, r3
   b68a2:	2b0b      	cmp	r3, #11
   b68a4:	d1de      	bne.n	b6864 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b68a6:	2300      	movs	r3, #0
   b68a8:	540b      	strb	r3, [r1, r0]
}
   b68aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b68ac <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b68ac:	7803      	ldrb	r3, [r0, #0]
   b68ae:	b90b      	cbnz	r3, b68b4 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b68b0:	f7ff bf56 	b.w	b6760 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b68b4:	2000      	movs	r0, #0
   b68b6:	4770      	bx	lr

000b68b8 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b68b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b68bc:	7803      	ldrb	r3, [r0, #0]
   b68be:	4604      	mov	r4, r0
   b68c0:	4688      	mov	r8, r1
   b68c2:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b68c4:	2b00      	cmp	r3, #0
   b68c6:	d05d      	beq.n	b6984 <_ZN7FatFile4readEPvj+0xcc>
   b68c8:	7882      	ldrb	r2, [r0, #2]
   b68ca:	07d1      	lsls	r1, r2, #31
   b68cc:	d55a      	bpl.n	b6984 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b68ce:	071a      	lsls	r2, r3, #28
   b68d0:	d52d      	bpl.n	b692e <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b68d2:	69c3      	ldr	r3, [r0, #28]
   b68d4:	6942      	ldr	r2, [r0, #20]
   b68d6:	1a9b      	subs	r3, r3, r2
   b68d8:	429d      	cmp	r5, r3
   b68da:	bf28      	it	cs
   b68dc:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b68de:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b68e0:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b68e4:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b68e8:	2e00      	cmp	r6, #0
   b68ea:	f000 808f 	beq.w	b6a0c <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b68ee:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b68f0:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b68f2:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b68f4:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b68f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b68fa:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b68fe:	d51f      	bpl.n	b6940 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6900:	6a00      	ldr	r0, [r0, #32]
   b6902:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b6904:	68a0      	ldr	r0, [r4, #8]
   b6906:	f1ba 0f00 	cmp.w	sl, #0
   b690a:	d142      	bne.n	b6992 <_ZN7FatFile4readEPvj+0xda>
   b690c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6910:	d33f      	bcc.n	b6992 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b6912:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6914:	4299      	cmp	r1, r3
   b6916:	d03c      	beq.n	b6992 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6918:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b691c:	d252      	bcs.n	b69c4 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b691e:	6800      	ldr	r0, [r0, #0]
   b6920:	4642      	mov	r2, r8
   b6922:	f001 f9a9 	bl	b7c78 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6926:	b368      	cbz	r0, b6984 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6928:	f44f 7700 	mov.w	r7, #512	; 0x200
   b692c:	e044      	b.n	b69b8 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b692e:	069b      	lsls	r3, r3, #26
   b6930:	d5d5      	bpl.n	b68de <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6932:	6883      	ldr	r3, [r0, #8]
   b6934:	891a      	ldrh	r2, [r3, #8]
   b6936:	6943      	ldr	r3, [r0, #20]
   b6938:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b693c:	b29b      	uxth	r3, r3
   b693e:	e7cb      	b.n	b68d8 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b6940:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6944:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6948:	f1ba 0f00 	cmp.w	sl, #0
   b694c:	d108      	bne.n	b6960 <_ZN7FatFile4readEPvj+0xa8>
   b694e:	f1b9 0f00 	cmp.w	r9, #0
   b6952:	d105      	bne.n	b6960 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6954:	b95b      	cbnz	r3, b696e <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6956:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6958:	bf4c      	ite	mi
   b695a:	6a03      	ldrmi	r3, [r0, #32]
   b695c:	6a23      	ldrpl	r3, [r4, #32]
   b695e:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6960:	6921      	ldr	r1, [r4, #16]
   b6962:	68a0      	ldr	r0, [r4, #8]
   b6964:	f000 fec8 	bl	b76f8 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6968:	eb09 0100 	add.w	r1, r9, r0
   b696c:	e7ca      	b.n	b6904 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b696e:	6921      	ldr	r1, [r4, #16]
   b6970:	465a      	mov	r2, fp
   b6972:	f000 fec7 	bl	b7704 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6976:	2800      	cmp	r0, #0
   b6978:	db04      	blt.n	b6984 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b697a:	d1f1      	bne.n	b6960 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b697c:	7823      	ldrb	r3, [r4, #0]
   b697e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6982:	d143      	bne.n	b6a0c <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b6984:	7863      	ldrb	r3, [r4, #1]
   b6986:	f043 0302 	orr.w	r3, r3, #2
   b698a:	7063      	strb	r3, [r4, #1]
  return -1;
   b698c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6990:	e03d      	b.n	b6a0e <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b6992:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b6996:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6998:	f04f 0200 	mov.w	r2, #0
   b699c:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b69a0:	bf28      	it	cs
   b69a2:	4637      	movcs	r7, r6
   b69a4:	f000 fe85 	bl	b76b2 <_ZN8FatCache4readEmh>
      if (!pc) {
   b69a8:	2800      	cmp	r0, #0
   b69aa:	d0eb      	beq.n	b6984 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b69ac:	eb00 010a 	add.w	r1, r0, sl
   b69b0:	463a      	mov	r2, r7
   b69b2:	4640      	mov	r0, r8
   b69b4:	f00d fb3c 	bl	c4030 <memcpy>
    m_curPosition += n;
   b69b8:	6963      	ldr	r3, [r4, #20]
   b69ba:	443b      	add	r3, r7
    dst += n;
   b69bc:	44b8      	add	r8, r7
    m_curPosition += n;
   b69be:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b69c0:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b69c2:	e791      	b.n	b68e8 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b69c4:	7822      	ldrb	r2, [r4, #0]
   b69c6:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b69c8:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b69cc:	d406      	bmi.n	b69dc <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b69ce:	7902      	ldrb	r2, [r0, #4]
   b69d0:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b69d4:	b2d2      	uxtb	r2, r2
   b69d6:	4592      	cmp	sl, r2
   b69d8:	bf28      	it	cs
   b69da:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b69dc:	4299      	cmp	r1, r3
      n = 512*nb;
   b69de:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b69e2:	d208      	bcs.n	b69f6 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b69e4:	68a0      	ldr	r0, [r4, #8]
   b69e6:	4653      	mov	r3, sl
   b69e8:	6800      	ldr	r0, [r0, #0]
   b69ea:	4642      	mov	r2, r8
   b69ec:	f001 f98c 	bl	b7d08 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b69f0:	2800      	cmp	r0, #0
   b69f2:	d1e1      	bne.n	b69b8 <_ZN7FatFile4readEPvj+0x100>
   b69f4:	e7c6      	b.n	b6984 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b69f6:	4453      	add	r3, sl
   b69f8:	428b      	cmp	r3, r1
   b69fa:	d9f3      	bls.n	b69e4 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b69fc:	3024      	adds	r0, #36	; 0x24
   b69fe:	9101      	str	r1, [sp, #4]
   b6a00:	f000 fe2f 	bl	b7662 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b6a04:	9901      	ldr	r1, [sp, #4]
   b6a06:	2800      	cmp	r0, #0
   b6a08:	d1ec      	bne.n	b69e4 <_ZN7FatFile4readEPvj+0x12c>
   b6a0a:	e7bb      	b.n	b6984 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6a0c:	1ba8      	subs	r0, r5, r6
}
   b6a0e:	b003      	add	sp, #12
   b6a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6a14 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b6a14:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b6a16:	2201      	movs	r2, #1
   b6a18:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b6a1c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b6a20:	4604      	mov	r4, r0
   b6a22:	f7ff ff49 	bl	b68b8 <_ZN7FatFile4readEPvj>
   b6a26:	2801      	cmp	r0, #1
   b6a28:	bf0a      	itet	eq
   b6a2a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b6a2e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6a32:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6a36:	b002      	add	sp, #8
   b6a38:	bd70      	pop	{r4, r5, r6, pc}

000b6a3a <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6a3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6a3c:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b6a3e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6a42:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6a44:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b6a48:	d000      	beq.n	b6a4c <_ZN7FatFile12readDirCacheEb+0x12>
   b6a4a:	b999      	cbnz	r1, b6a74 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b6a4c:	2201      	movs	r2, #1
   b6a4e:	f10d 0107 	add.w	r1, sp, #7
   b6a52:	4620      	mov	r0, r4
   b6a54:	f7ff ff30 	bl	b68b8 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b6a58:	b240      	sxtb	r0, r0
   b6a5a:	2801      	cmp	r0, #1
   b6a5c:	d002      	beq.n	b6a64 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b6a5e:	2000      	movs	r0, #0
}
   b6a60:	b003      	add	sp, #12
   b6a62:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6a64:	6963      	ldr	r3, [r4, #20]
   b6a66:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b6a68:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b6a6a:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b6a6c:	3030      	adds	r0, #48	; 0x30
   b6a6e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b6a72:	e7f5      	b.n	b6a60 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6a74:	3320      	adds	r3, #32
   b6a76:	e7f7      	b.n	b6a68 <_ZN7FatFile12readDirCacheEb+0x2e>

000b6a78 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b6a7c:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b6a7e:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b6a80:	4604      	mov	r4, r0
   b6a82:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6a84:	b162      	cbz	r2, b6aa0 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6a86:	6940      	ldr	r0, [r0, #20]
   b6a88:	4288      	cmp	r0, r1
   b6a8a:	d002      	beq.n	b6a92 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b6a8c:	b919      	cbnz	r1, b6a96 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b6a8e:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b6a90:	6165      	str	r5, [r4, #20]
    return true;
   b6a92:	2001      	movs	r0, #1
   b6a94:	e006      	b.n	b6aa4 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b6a96:	0716      	lsls	r6, r2, #28
   b6a98:	d506      	bpl.n	b6aa8 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b6a9a:	69e3      	ldr	r3, [r4, #28]
   b6a9c:	428b      	cmp	r3, r1
   b6a9e:	d20b      	bcs.n	b6ab8 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b6aa0:	6127      	str	r7, [r4, #16]
  return false;
   b6aa2:	2000      	movs	r0, #0
}
   b6aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b6aa8:	0691      	lsls	r1, r2, #26
   b6aaa:	d505      	bpl.n	b6ab8 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b6aac:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b6aae:	891b      	ldrh	r3, [r3, #8]
   b6ab0:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b6ab4:	d9ec      	bls.n	b6a90 <_ZN7FatFile7seekSetEm+0x18>
   b6ab6:	e7f3      	b.n	b6aa0 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6ab8:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b6abc:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b6ac0:	1e43      	subs	r3, r0, #1
   b6ac2:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6ac6:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6ac8:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6aca:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b6acc:	42b3      	cmp	r3, r6
   b6ace:	d800      	bhi.n	b6ad2 <_ZN7FatFile7seekSetEm+0x5a>
   b6ad0:	b998      	cbnz	r0, b6afa <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6ad2:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b6ad4:	bf4c      	ite	mi
   b6ad6:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b6ada:	6a23      	ldrpl	r3, [r4, #32]
   b6adc:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6ade:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b6ae2:	2e00      	cmp	r6, #0
   b6ae4:	d0d4      	beq.n	b6a90 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6ae6:	6921      	ldr	r1, [r4, #16]
   b6ae8:	68a0      	ldr	r0, [r4, #8]
   b6aea:	4642      	mov	r2, r8
   b6aec:	f000 fe0a 	bl	b7704 <_ZN9FatVolume6fatGetEmPm>
   b6af0:	2800      	cmp	r0, #0
   b6af2:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b6af6:	dcf4      	bgt.n	b6ae2 <_ZN7FatFile7seekSetEm+0x6a>
   b6af8:	e7d2      	b.n	b6aa0 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b6afa:	1af6      	subs	r6, r6, r3
   b6afc:	e7ef      	b.n	b6ade <_ZN7FatFile7seekSetEm+0x66>

000b6afe <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b6afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b00:	460f      	mov	r7, r1
   b6b02:	4604      	mov	r4, r0
   b6b04:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b6b06:	2100      	movs	r1, #0
   b6b08:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b6b0a:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6b0c:	f00d fab8 	bl	c4080 <memset>
  m_vol = dirFile->m_vol;
   b6b10:	68b8      	ldr	r0, [r7, #8]
   b6b12:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6b14:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b6b16:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b6b1a:	6a3b      	ldr	r3, [r7, #32]
   b6b1c:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b6b1e:	016a      	lsls	r2, r5, #5
   b6b20:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6b24:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6b28:	071f      	lsls	r7, r3, #28
   b6b2a:	d444      	bmi.n	b6bb6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b6b2c:	f003 0317 	and.w	r3, r3, #23
   b6b30:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6b32:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6b36:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b6b3a:	bf04      	itt	eq
   b6b3c:	f043 0308 	orreq.w	r3, r3, #8
   b6b40:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6b42:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6b46:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6b48:	f006 0303 	and.w	r3, r6, #3
   b6b4c:	2b01      	cmp	r3, #1
   b6b4e:	d02c      	beq.n	b6baa <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b6b50:	2b02      	cmp	r3, #2
   b6b52:	d028      	beq.n	b6ba6 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6b54:	bb7b      	cbnz	r3, b6bb6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6b56:	0571      	lsls	r1, r6, #21
   b6b58:	d42d      	bmi.n	b6bb6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b6b5a:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b6b5c:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b6b5e:	78a1      	ldrb	r1, [r4, #2]
   b6b60:	078b      	lsls	r3, r1, #30
   b6b62:	d504      	bpl.n	b6b6e <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6b64:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6b66:	06df      	lsls	r7, r3, #27
   b6b68:	d425      	bmi.n	b6bb6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b6b6a:	07dd      	lsls	r5, r3, #31
   b6b6c:	d423      	bmi.n	b6bb6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b6b6e:	11b3      	asrs	r3, r6, #6
   b6b70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6b74:	f006 0508 	and.w	r5, r6, #8
   b6b78:	432b      	orrs	r3, r5
   b6b7a:	430b      	orrs	r3, r1
   b6b7c:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b6b7e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b6b80:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6b82:	1883      	adds	r3, r0, r2
   b6b84:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b6b88:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6b8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b6b90:	0572      	lsls	r2, r6, #21
   b6b92:	d513      	bpl.n	b6bbc <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6b94:	b959      	cbnz	r1, b6bae <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b6b96:	78a3      	ldrb	r3, [r4, #2]
   b6b98:	f043 0304 	orr.w	r3, r3, #4
   b6b9c:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6b9e:	0473      	lsls	r3, r6, #17
   b6ba0:	d410      	bmi.n	b6bc4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b6ba2:	2001      	movs	r0, #1
}
   b6ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b6ba6:	2303      	movs	r3, #3
   b6ba8:	e7d8      	b.n	b6b5c <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b6baa:	2302      	movs	r3, #2
   b6bac:	e7d6      	b.n	b6b5c <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6bae:	f000 fe49 	bl	b7844 <_ZN9FatVolume9freeChainEm>
   b6bb2:	2800      	cmp	r0, #0
   b6bb4:	d1ef      	bne.n	b6b96 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b6bb6:	2000      	movs	r0, #0
   b6bb8:	7020      	strb	r0, [r4, #0]
  return false;
   b6bba:	e7f3      	b.n	b6ba4 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b6bbc:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b6bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6bc0:	61e3      	str	r3, [r4, #28]
   b6bc2:	e7ec      	b.n	b6b9e <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6bc4:	69e1      	ldr	r1, [r4, #28]
   b6bc6:	4620      	mov	r0, r4
   b6bc8:	f7ff ff56 	bl	b6a78 <_ZN7FatFile7seekSetEm>
   b6bcc:	2800      	cmp	r0, #0
   b6bce:	d1e8      	bne.n	b6ba2 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b6bd0:	e7f1      	b.n	b6bb6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b6bd2 <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b6bd2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b6bd6:	7803      	ldrb	r3, [r0, #0]
   b6bd8:	4607      	mov	r7, r0
   b6bda:	460d      	mov	r5, r1
   b6bdc:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b6bde:	bb53      	cbnz	r3, b6c36 <_ZN7FatFile8openNextEPS_i+0x64>
   b6be0:	780b      	ldrb	r3, [r1, #0]
   b6be2:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6be6:	d026      	beq.n	b6c36 <_ZN7FatFile8openNextEPS_i+0x64>
   b6be8:	694c      	ldr	r4, [r1, #20]
   b6bea:	f014 041f 	ands.w	r4, r4, #31
   b6bee:	d122      	bne.n	b6c36 <_ZN7FatFile8openNextEPS_i+0x64>
   b6bf0:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b6bf2:	2100      	movs	r1, #0
   b6bf4:	4628      	mov	r0, r5
    return m_curPosition;
   b6bf6:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b6bfa:	f7ff ff1e 	bl	b6a3a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6bfe:	b1d0      	cbz	r0, b6c36 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b6c00:	7806      	ldrb	r6, [r0, #0]
   b6c02:	b1c6      	cbz	r6, b6c36 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b6c04:	2e2e      	cmp	r6, #46	; 0x2e
   b6c06:	d010      	beq.n	b6c2a <_ZN7FatFile8openNextEPS_i+0x58>
   b6c08:	2ee5      	cmp	r6, #229	; 0xe5
   b6c0a:	d00e      	beq.n	b6c2a <_ZN7FatFile8openNextEPS_i+0x58>
   b6c0c:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6c0e:	071a      	lsls	r2, r3, #28
   b6c10:	d413      	bmi.n	b6c3a <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b6c12:	b964      	cbnz	r4, b6c2e <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b6c14:	9400      	str	r4, [sp, #0]
   b6c16:	4653      	mov	r3, sl
   b6c18:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b6c1c:	4629      	mov	r1, r5
   b6c1e:	4638      	mov	r0, r7
   b6c20:	f7ff ff6d 	bl	b6afe <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b6c24:	b002      	add	sp, #8
   b6c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b6c2a:	2400      	movs	r4, #0
   b6c2c:	e7e1      	b.n	b6bf2 <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b6c2e:	f000 f971 	bl	b6f14 <_ZN7FatFile11lfnChecksumEPh>
   b6c32:	4540      	cmp	r0, r8
   b6c34:	d0ee      	beq.n	b6c14 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b6c36:	2000      	movs	r0, #0
   b6c38:	e7f4      	b.n	b6c24 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6c3a:	2b0f      	cmp	r3, #15
   b6c3c:	d1f5      	bne.n	b6c2a <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b6c3e:	0673      	lsls	r3, r6, #25
   b6c40:	d5d7      	bpl.n	b6bf2 <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b6c42:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b6c46:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b6c4a:	e7d2      	b.n	b6bf2 <_ZN7FatFile8openNextEPS_i+0x20>

000b6c4c <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b6c4c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b6c4e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b6c50:	4604      	mov	r4, r0
  if (!isOpen()) {
   b6c52:	b90b      	cbnz	r3, b6c58 <_ZN7FatFile4syncEv+0xc>
    return true;
   b6c54:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b6c56:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b6c58:	7883      	ldrb	r3, [r0, #2]
   b6c5a:	075a      	lsls	r2, r3, #29
   b6c5c:	d523      	bpl.n	b6ca6 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b6c5e:	2101      	movs	r1, #1
   b6c60:	f7ff fdea 	bl	b6838 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6c64:	4605      	mov	r5, r0
   b6c66:	b928      	cbnz	r0, b6c74 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b6c68:	7863      	ldrb	r3, [r4, #1]
   b6c6a:	f043 0301 	orr.w	r3, r3, #1
   b6c6e:	7063      	strb	r3, [r4, #1]
  return false;
   b6c70:	2000      	movs	r0, #0
   b6c72:	e7f0      	b.n	b6c56 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6c74:	7803      	ldrb	r3, [r0, #0]
   b6c76:	2be5      	cmp	r3, #229	; 0xe5
   b6c78:	d0f6      	beq.n	b6c68 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b6c7a:	7823      	ldrb	r3, [r4, #0]
   b6c7c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b6c7e:	bf44      	itt	mi
   b6c80:	69e3      	ldrmi	r3, [r4, #28]
   b6c82:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b6c84:	6a23      	ldr	r3, [r4, #32]
   b6c86:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b6c88:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b6c8a:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b6c8c:	4b09      	ldr	r3, [pc, #36]	; (b6cb4 <_ZN7FatFile4syncEv+0x68>)
   b6c8e:	681b      	ldr	r3, [r3, #0]
   b6c90:	b12b      	cbz	r3, b6c9e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b6c92:	f100 0116 	add.w	r1, r0, #22
   b6c96:	3018      	adds	r0, #24
   b6c98:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b6c9a:	8b2b      	ldrh	r3, [r5, #24]
   b6c9c:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b6c9e:	78a3      	ldrb	r3, [r4, #2]
   b6ca0:	f023 0304 	bic.w	r3, r3, #4
   b6ca4:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b6ca6:	68a0      	ldr	r0, [r4, #8]
   b6ca8:	f7ff fd70 	bl	b678c <_ZN9FatVolume9cacheSyncEv>
   b6cac:	2800      	cmp	r0, #0
   b6cae:	d0db      	beq.n	b6c68 <_ZN7FatFile4syncEv+0x1c>
   b6cb0:	e7d0      	b.n	b6c54 <_ZN7FatFile4syncEv+0x8>
   b6cb2:	bf00      	nop
   b6cb4:	2003e60c 	.word	0x2003e60c

000b6cb8 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b6cb8:	b510      	push	{r4, lr}
   b6cba:	4604      	mov	r4, r0
  bool rtn = sync();
   b6cbc:	f7ff ffc6 	bl	b6c4c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b6cc0:	2300      	movs	r3, #0
   b6cc2:	7023      	strb	r3, [r4, #0]
}
   b6cc4:	bd10      	pop	{r4, pc}

000b6cc6 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6cc8:	b093      	sub	sp, #76	; 0x4c
   b6cca:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6ccc:	2300      	movs	r3, #0
   b6cce:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b6cd0:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6cd2:	9201      	str	r2, [sp, #4]
   b6cd4:	4606      	mov	r6, r0
   b6cd6:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b6cd8:	b113      	cbz	r3, b6ce0 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b6cda:	2000      	movs	r0, #0
}
   b6cdc:	b013      	add	sp, #76	; 0x4c
   b6cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b6ce0:	780b      	ldrb	r3, [r1, #0]
   b6ce2:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6ce6:	d0f8      	beq.n	b6cda <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b6ce8:	7813      	ldrb	r3, [r2, #0]
   b6cea:	2b2f      	cmp	r3, #47	; 0x2f
   b6cec:	d112      	bne.n	b6d14 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b6cee:	9a01      	ldr	r2, [sp, #4]
   b6cf0:	7813      	ldrb	r3, [r2, #0]
   b6cf2:	2b2f      	cmp	r3, #47	; 0x2f
   b6cf4:	d102      	bne.n	b6cfc <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b6cf6:	3201      	adds	r2, #1
   b6cf8:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b6cfa:	e7f8      	b.n	b6cee <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b6cfc:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b6cfe:	b91b      	cbnz	r3, b6d08 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6d00:	4630      	mov	r0, r6
   b6d02:	f7ff fdd3 	bl	b68ac <_ZN7FatFile8openRootEP9FatVolume>
   b6d06:	e7e9      	b.n	b6cdc <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6d08:	a809      	add	r0, sp, #36	; 0x24
   b6d0a:	f7ff fd29 	bl	b6760 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b6d0e:	2800      	cmp	r0, #0
   b6d10:	d0e3      	beq.n	b6cda <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b6d12:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b6d14:	9801      	ldr	r0, [sp, #4]
   b6d16:	aa01      	add	r2, sp, #4
   b6d18:	a903      	add	r1, sp, #12
   b6d1a:	f000 f98f 	bl	b703c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b6d1e:	2800      	cmp	r0, #0
   b6d20:	d0db      	beq.n	b6cda <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b6d22:	9b01      	ldr	r3, [sp, #4]
   b6d24:	781b      	ldrb	r3, [r3, #0]
   b6d26:	b19b      	cbz	r3, b6d50 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6d28:	2300      	movs	r3, #0
   b6d2a:	aa03      	add	r2, sp, #12
   b6d2c:	4621      	mov	r1, r4
   b6d2e:	4630      	mov	r0, r6
   b6d30:	f000 fab6 	bl	b72a0 <_ZN7FatFile4openEPS_P7fname_ti>
   b6d34:	2800      	cmp	r0, #0
   b6d36:	d0d0      	beq.n	b6cda <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6d38:	4635      	mov	r5, r6
   b6d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d3c:	ac09      	add	r4, sp, #36	; 0x24
   b6d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d44:	682b      	ldr	r3, [r5, #0]
   b6d46:	6023      	str	r3, [r4, #0]
    close();
   b6d48:	4630      	mov	r0, r6
   b6d4a:	f7ff ffb5 	bl	b6cb8 <_ZN7FatFile5closeEv>
  while (1) {
   b6d4e:	e7e0      	b.n	b6d12 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b6d50:	463b      	mov	r3, r7
   b6d52:	aa03      	add	r2, sp, #12
   b6d54:	4621      	mov	r1, r4
   b6d56:	4630      	mov	r0, r6
   b6d58:	f000 faa2 	bl	b72a0 <_ZN7FatFile4openEPS_P7fname_ti>
   b6d5c:	e7be      	b.n	b6cdc <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b6d60 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b6d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6d64:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b6d66:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6d68:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b6d6a:	4604      	mov	r4, r0
   b6d6c:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6d6e:	d55b      	bpl.n	b6e28 <_ZN7FatFile5writeEPKvj+0xc8>
   b6d70:	7883      	ldrb	r3, [r0, #2]
   b6d72:	079a      	lsls	r2, r3, #30
   b6d74:	d558      	bpl.n	b6e28 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b6d76:	071b      	lsls	r3, r3, #28
   b6d78:	d451      	bmi.n	b6e1e <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b6d7a:	6963      	ldr	r3, [r4, #20]
   b6d7c:	43db      	mvns	r3, r3
   b6d7e:	42bb      	cmp	r3, r7
   b6d80:	d352      	bcc.n	b6e28 <_ZN7FatFile5writeEPKvj+0xc8>
   b6d82:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6d84:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6d88:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b6d8a:	f1b8 0f00 	cmp.w	r8, #0
   b6d8e:	f000 8091 	beq.w	b6eb4 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6d92:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b6d94:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b6d96:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b6d9a:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b6d9e:	d10e      	bne.n	b6dbe <_ZN7FatFile5writeEPKvj+0x5e>
   b6da0:	b96d      	cbnz	r5, b6dbe <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b6da2:	6921      	ldr	r1, [r4, #16]
   b6da4:	2900      	cmp	r1, #0
   b6da6:	d046      	beq.n	b6e36 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6da8:	4652      	mov	r2, sl
   b6daa:	f000 fcab 	bl	b7704 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b6dae:	2800      	cmp	r0, #0
   b6db0:	db3a      	blt.n	b6e28 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b6db2:	d104      	bne.n	b6dbe <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b6db4:	4620      	mov	r0, r4
   b6db6:	f7ff fcf6 	bl	b67a6 <_ZN7FatFile10addClusterEv>
   b6dba:	2800      	cmp	r0, #0
   b6dbc:	d034      	beq.n	b6e28 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6dbe:	6921      	ldr	r1, [r4, #16]
   b6dc0:	68a0      	ldr	r0, [r4, #8]
   b6dc2:	f000 fc99 	bl	b76f8 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6dc6:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b6dc8:	68a0      	ldr	r0, [r4, #8]
   b6dca:	b915      	cbnz	r5, b6dd2 <_ZN7FatFile5writeEPKvj+0x72>
   b6dcc:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b6dd0:	d23f      	bcs.n	b6e52 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b6dd2:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b6dd6:	4546      	cmp	r6, r8
   b6dd8:	bf28      	it	cs
   b6dda:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b6ddc:	2d00      	cmp	r5, #0
   b6dde:	d136      	bne.n	b6e4e <_ZN7FatFile5writeEPKvj+0xee>
   b6de0:	6962      	ldr	r2, [r4, #20]
   b6de2:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b6de4:	429a      	cmp	r2, r3
   b6de6:	bf34      	ite	cc
   b6de8:	2201      	movcc	r2, #1
   b6dea:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6dec:	3024      	adds	r0, #36	; 0x24
   b6dee:	f000 fc60 	bl	b76b2 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b6df2:	b1c8      	cbz	r0, b6e28 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6df4:	4428      	add	r0, r5
   b6df6:	4632      	mov	r2, r6
   b6df8:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b6dfa:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b6dfc:	f00d f918 	bl	c4030 <memcpy>
      if (512 == (n + blockOffset)) {
   b6e00:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6e04:	d104      	bne.n	b6e10 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b6e06:	68a0      	ldr	r0, [r4, #8]
   b6e08:	3024      	adds	r0, #36	; 0x24
   b6e0a:	f000 fc2a 	bl	b7662 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b6e0e:	b158      	cbz	r0, b6e28 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6e10:	6963      	ldr	r3, [r4, #20]
   b6e12:	4433      	add	r3, r6
   b6e14:	6163      	str	r3, [r4, #20]
    src += n;
   b6e16:	44b1      	add	r9, r6
    nToWrite -= n;
   b6e18:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6e1c:	e7b4      	b.n	b6d88 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b6e1e:	69c1      	ldr	r1, [r0, #28]
   b6e20:	f7ff fe2a 	bl	b6a78 <_ZN7FatFile7seekSetEm>
   b6e24:	2800      	cmp	r0, #0
   b6e26:	d1a8      	bne.n	b6d7a <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b6e28:	7863      	ldrb	r3, [r4, #1]
   b6e2a:	f043 0301 	orr.w	r3, r3, #1
   b6e2e:	7063      	strb	r3, [r4, #1]
  return -1;
   b6e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6e34:	e050      	b.n	b6ed8 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b6e36:	6a23      	ldr	r3, [r4, #32]
   b6e38:	b93b      	cbnz	r3, b6e4a <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b6e3a:	4620      	mov	r0, r4
   b6e3c:	f7ff fcb3 	bl	b67a6 <_ZN7FatFile10addClusterEv>
   b6e40:	2800      	cmp	r0, #0
   b6e42:	d0f1      	beq.n	b6e28 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6e44:	6923      	ldr	r3, [r4, #16]
   b6e46:	6223      	str	r3, [r4, #32]
   b6e48:	e7b9      	b.n	b6dbe <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b6e4a:	6123      	str	r3, [r4, #16]
   b6e4c:	e7b7      	b.n	b6dbe <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b6e4e:	2201      	movs	r2, #1
   b6e50:	e7cc      	b.n	b6dec <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b6e52:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b6e56:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b6e58:	d31b      	bcc.n	b6e92 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b6e5a:	f890 c004 	ldrb.w	ip, [r0, #4]
   b6e5e:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b6e62:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6e64:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b6e68:	4573      	cmp	r3, lr
   b6e6a:	bf28      	it	cs
   b6e6c:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6e6e:	4291      	cmp	r1, r2
      n = 512*nb;
   b6e70:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6e74:	d307      	bcc.n	b6e86 <_ZN7FatFile5writeEPKvj+0x126>
   b6e76:	441a      	add	r2, r3
   b6e78:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b6e7a:	bf82      	ittt	hi
   b6e7c:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b6e80:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6e84:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b6e86:	68a5      	ldr	r5, [r4, #8]
   b6e88:	464a      	mov	r2, r9
   b6e8a:	6828      	ldr	r0, [r5, #0]
   b6e8c:	f000 fff3 	bl	b7e76 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b6e90:	e7bd      	b.n	b6e0e <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b6e92:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b6e94:	bf02      	ittt	eq
   b6e96:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b6e9a:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6e9e:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b6ea0:	68a3      	ldr	r3, [r4, #8]
   b6ea2:	464a      	mov	r2, r9
   b6ea4:	6818      	ldr	r0, [r3, #0]
   b6ea6:	f000 ff70 	bl	b7d8a <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b6eaa:	2800      	cmp	r0, #0
   b6eac:	d0bc      	beq.n	b6e28 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b6eae:	f44f 7600 	mov.w	r6, #512	; 0x200
   b6eb2:	e7ad      	b.n	b6e10 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b6eb4:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6eb6:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b6eb8:	42b2      	cmp	r2, r6
   b6eba:	d204      	bcs.n	b6ec6 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b6ebc:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6ebe:	f043 0304 	orr.w	r3, r3, #4
   b6ec2:	70a3      	strb	r3, [r4, #2]
   b6ec4:	e003      	b.n	b6ece <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b6ec6:	4a08      	ldr	r2, [pc, #32]	; (b6ee8 <_ZN7FatFile5writeEPKvj+0x188>)
   b6ec8:	6812      	ldr	r2, [r2, #0]
   b6eca:	2a00      	cmp	r2, #0
   b6ecc:	d1f7      	bne.n	b6ebe <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b6ece:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b6ed2:	2b00      	cmp	r3, #0
   b6ed4:	db02      	blt.n	b6edc <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b6ed6:	4638      	mov	r0, r7
}
   b6ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b6edc:	4620      	mov	r0, r4
   b6ede:	f7ff feb5 	bl	b6c4c <_ZN7FatFile4syncEv>
   b6ee2:	2800      	cmp	r0, #0
   b6ee4:	d1f7      	bne.n	b6ed6 <_ZN7FatFile5writeEPKvj+0x176>
   b6ee6:	e79f      	b.n	b6e28 <_ZN7FatFile5writeEPKvj+0xc8>
   b6ee8:	2003e60c 	.word	0x2003e60c

000b6eec <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b6eec:	2904      	cmp	r1, #4
   b6eee:	d804      	bhi.n	b6efa <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b6ef0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6ef4:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b6ef8:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6efa:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6efc:	bf9b      	ittet	ls
   b6efe:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b6f02:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6f06:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6f08:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6f0a:	bf84      	itt	hi
   b6f0c:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b6f10:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b6f12:	4770      	bx	lr

000b6f14 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b6f14:	1e41      	subs	r1, r0, #1
   b6f16:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b6f1a:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6f1c:	0842      	lsrs	r2, r0, #1
   b6f1e:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b6f22:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6f26:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6f2a:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6f2c:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6f2e:	d1f5      	bne.n	b6f1c <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b6f30:	4770      	bx	lr

000b6f32 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b6f32:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6f34:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6f36:	4604      	mov	r4, r0
   b6f38:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b6f3a:	b923      	cbnz	r3, b6f46 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b6f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b6f40:	6889      	ldr	r1, [r1, #8]
   b6f42:	f7ff bcb3 	b.w	b68ac <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6f46:	2224      	movs	r2, #36	; 0x24
   b6f48:	2100      	movs	r1, #0
   b6f4a:	f00d f899 	bl	c4080 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b6f4e:	2310      	movs	r3, #16
  m_flags = F_READ;
   b6f50:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b6f52:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6f54:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6f56:	68ab      	ldr	r3, [r5, #8]
   b6f58:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b6f5a:	68eb      	ldr	r3, [r5, #12]
   b6f5c:	6223      	str	r3, [r4, #32]
}
   b6f5e:	bd38      	pop	{r3, r4, r5, pc}

000b6f60 <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b6f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6f64:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b6f66:	7803      	ldrb	r3, [r0, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6f68:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b6f6c:	4606      	mov	r6, r0
   b6f6e:	460f      	mov	r7, r1
   b6f70:	4690      	mov	r8, r2
   b6f72:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b6f76:	2b00      	cmp	r3, #0
   b6f78:	d05d      	beq.n	b7036 <_ZN7FatFile7getNameEPcj+0xd6>
   b6f7a:	2a0c      	cmp	r2, #12
   b6f7c:	d95b      	bls.n	b7036 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b6f7e:	78c3      	ldrb	r3, [r0, #3]
   b6f80:	b933      	cbnz	r3, b6f90 <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b6f82:	f000 fb57 	bl	b7634 <_ZN7FatFile6getSFNEPc>
   b6f86:	4604      	mov	r4, r0
}
   b6f88:	4620      	mov	r0, r4
   b6f8a:	b00d      	add	sp, #52	; 0x34
   b6f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b6f90:	4601      	mov	r1, r0
   b6f92:	a803      	add	r0, sp, #12
   b6f94:	f7ff ffcd 	bl	b6f32 <_ZN7FatFile11openClusterEPS_>
   b6f98:	2800      	cmp	r0, #0
   b6f9a:	d04c      	beq.n	b7036 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b6f9c:	eb07 0308 	add.w	r3, r7, r8
   b6fa0:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6fa4:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b6fa8:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b6faa:	78f3      	ldrb	r3, [r6, #3]
   b6fac:	fa5f f58b 	uxtb.w	r5, fp
   b6fb0:	42ab      	cmp	r3, r5
   b6fb2:	d340      	bcc.n	b7036 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b6fb4:	88b1      	ldrh	r1, [r6, #4]
   b6fb6:	eba1 010b 	sub.w	r1, r1, fp
   b6fba:	0149      	lsls	r1, r1, #5
   b6fbc:	a803      	add	r0, sp, #12
   b6fbe:	f7ff fd5b 	bl	b6a78 <_ZN7FatFile7seekSetEm>
   b6fc2:	4604      	mov	r4, r0
   b6fc4:	2800      	cmp	r0, #0
   b6fc6:	d036      	beq.n	b7036 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b6fc8:	2100      	movs	r1, #0
   b6fca:	a803      	add	r0, sp, #12
   b6fcc:	f7ff fd35 	bl	b6a3a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6fd0:	4603      	mov	r3, r0
   b6fd2:	b380      	cbz	r0, b7036 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b6fd4:	7ac2      	ldrb	r2, [r0, #11]
   b6fd6:	2a0f      	cmp	r2, #15
   b6fd8:	d12d      	bne.n	b7036 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b6fda:	7802      	ldrb	r2, [r0, #0]
   b6fdc:	f002 021f 	and.w	r2, r2, #31
   b6fe0:	42aa      	cmp	r2, r5
   b6fe2:	d128      	bne.n	b7036 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6fe4:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   b6fe8:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b6fec:	197a      	adds	r2, r7, r5
   b6fee:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b6ff0:	4618      	mov	r0, r3
   b6ff2:	9101      	str	r1, [sp, #4]
   b6ff4:	f7ff ff7a 	bl	b6eec <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b6ff8:	b168      	cbz	r0, b7016 <_ZN7FatFile7getNameEPcj+0xb6>
   b6ffa:	45a8      	cmp	r8, r5
   b6ffc:	d912      	bls.n	b7024 <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b6ffe:	9901      	ldr	r1, [sp, #4]
   b7000:	3101      	adds	r1, #1
   b7002:	287f      	cmp	r0, #127	; 0x7f
   b7004:	b2c9      	uxtb	r1, r1
   b7006:	bf28      	it	cs
   b7008:	203f      	movcs	r0, #63	; 0x3f
   b700a:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b700c:	f802 0b01 	strb.w	r0, [r2], #1
   b7010:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b7014:	d1ec      	bne.n	b6ff0 <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b7016:	45a8      	cmp	r8, r5
   b7018:	d904      	bls.n	b7024 <_ZN7FatFile7getNameEPcj+0xc4>
   b701a:	781a      	ldrb	r2, [r3, #0]
   b701c:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b701e:	bf48      	it	mi
   b7020:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b7024:	9a00      	ldr	r2, [sp, #0]
   b7026:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b702a:	781b      	ldrb	r3, [r3, #0]
   b702c:	065b      	lsls	r3, r3, #25
   b702e:	f10b 0b01 	add.w	fp, fp, #1
   b7032:	d5ba      	bpl.n	b6faa <_ZN7FatFile7getNameEPcj+0x4a>
   b7034:	e7a8      	b.n	b6f88 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b7036:	2400      	movs	r4, #0
   b7038:	703c      	strb	r4, [r7, #0]
  return false;
   b703a:	e7a5      	b.n	b6f88 <_ZN7FatFile7getNameEPcj+0x28>

000b703c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b703c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7040:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b7042:	f810 3b01 	ldrb.w	r3, [r0], #1
   b7046:	2b20      	cmp	r3, #32
   b7048:	d0fa      	beq.n	b7040 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b704a:	4d6a      	ldr	r5, [pc, #424]	; (b71f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b704c:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b704e:	2400      	movs	r4, #0
    c = path[len];
   b7050:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b7052:	b1c3      	cbz	r3, b7086 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b7054:	2b2f      	cmp	r3, #47	; 0x2f
   b7056:	d016      	beq.n	b7086 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b7058:	2b5c      	cmp	r3, #92	; 0x5c
   b705a:	d102      	bne.n	b7062 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b705c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b705e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b7062:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b7066:	b2c0      	uxtb	r0, r0
   b7068:	281d      	cmp	r0, #29
   b706a:	d803      	bhi.n	b7074 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b706c:	fa25 f000 	lsr.w	r0, r5, r0
   b7070:	07c0      	lsls	r0, r0, #31
   b7072:	d4f3      	bmi.n	b705c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b7074:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b7078:	283c      	cmp	r0, #60	; 0x3c
   b707a:	d0ef      	beq.n	b705c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b707c:	3b20      	subs	r3, #32
   b707e:	2b5e      	cmp	r3, #94	; 0x5e
   b7080:	d8ec      	bhi.n	b705c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b7082:	3401      	adds	r4, #1
    c = path[len];
   b7084:	e7e4      	b.n	b7050 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b7086:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b7088:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b708a:	4607      	mov	r7, r0
   b708c:	f810 5b01 	ldrb.w	r5, [r0], #1
   b7090:	2d20      	cmp	r5, #32
   b7092:	d0fa      	beq.n	b708a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b7094:	2d2f      	cmp	r5, #47	; 0x2f
   b7096:	d0f8      	beq.n	b708a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b7098:	6017      	str	r7, [r2, #0]
  while (len) {
   b709a:	b14c      	cbz	r4, b70b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b709c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b70a0:	2a2e      	cmp	r2, #46	; 0x2e
   b70a2:	d001      	beq.n	b70a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b70a4:	2a20      	cmp	r2, #32
   b70a6:	d101      	bne.n	b70ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b70a8:	3c01      	subs	r4, #1
  while (len) {
   b70aa:	e7f6      	b.n	b709a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b70ac:	2cff      	cmp	r4, #255	; 0xff
   b70ae:	dcd5      	bgt.n	b705c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b70b0:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b70b4:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b70b8:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b70ba:	f8c1 300d 	str.w	r3, [r1, #13]
   b70be:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b70c0:	f04f 0800 	mov.w	r8, #0
   b70c4:	f816 3008 	ldrb.w	r3, [r6, r8]
   b70c8:	2b2e      	cmp	r3, #46	; 0x2e
   b70ca:	d001      	beq.n	b70d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b70cc:	2b20      	cmp	r3, #32
   b70ce:	d102      	bne.n	b70d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b70d0:	f108 0801 	add.w	r8, r8, #1
   b70d4:	e7f6      	b.n	b70c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b70d6:	fab8 f088 	clz	r0, r8
   b70da:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b70dc:	1e65      	subs	r5, r4, #1
   b70de:	1c6b      	adds	r3, r5, #1
   b70e0:	d002      	beq.n	b70e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b70e2:	5d73      	ldrb	r3, [r6, r5]
   b70e4:	2b2e      	cmp	r3, #46	; 0x2e
   b70e6:	d114      	bne.n	b7112 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b70e8:	f04f 0900 	mov.w	r9, #0
   b70ec:	2707      	movs	r7, #7
   b70ee:	464a      	mov	r2, r9
   b70f0:	46ca      	mov	sl, r9
   b70f2:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b70f6:	45a0      	cmp	r8, r4
   b70f8:	da68      	bge.n	b71cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b70fa:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b70fe:	2b20      	cmp	r3, #32
   b7100:	d003      	beq.n	b710a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b7102:	2b2e      	cmp	r3, #46	; 0x2e
   b7104:	d107      	bne.n	b7116 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b7106:	45a8      	cmp	r8, r5
   b7108:	d012      	beq.n	b7130 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b710a:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b710c:	f108 0801 	add.w	r8, r8, #1
   b7110:	e7f1      	b.n	b70f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b7112:	3d01      	subs	r5, #1
   b7114:	e7e3      	b.n	b70de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b7116:	2b22      	cmp	r3, #34	; 0x22
   b7118:	d008      	beq.n	b712c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b711a:	2b7c      	cmp	r3, #124	; 0x7c
   b711c:	d006      	beq.n	b712c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b711e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b7122:	f1bc 0f05 	cmp.w	ip, #5
   b7126:	d80a      	bhi.n	b713e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b7128:	2b2d      	cmp	r3, #45	; 0x2d
   b712a:	d012      	beq.n	b7152 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b712c:	45a8      	cmp	r8, r5
   b712e:	d15b      	bne.n	b71e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b7130:	2f0a      	cmp	r7, #10
   b7132:	d04a      	beq.n	b71ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b7134:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b7136:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b7138:	f04f 0e10 	mov.w	lr, #16
   b713c:	e7e6      	b.n	b710c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b713e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b7142:	f1bc 0f05 	cmp.w	ip, #5
   b7146:	d9f1      	bls.n	b712c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b7148:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b714c:	f1bc 0f02 	cmp.w	ip, #2
   b7150:	d9ec      	bls.n	b712c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b7152:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b7156:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b715a:	d8e7      	bhi.n	b712c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b715c:	45a8      	cmp	r8, r5
   b715e:	d0e7      	beq.n	b7130 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b7160:	42ba      	cmp	r2, r7
   b7162:	d830      	bhi.n	b71c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b7164:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b7168:	f1bc 0f19 	cmp.w	ip, #25
   b716c:	d81a      	bhi.n	b71a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b716e:	3b20      	subs	r3, #32
        lc |= bit;
   b7170:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b7174:	b2db      	uxtb	r3, r3
        lc |= bit;
   b7176:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b717a:	f102 0c01 	add.w	ip, r2, #1
   b717e:	fa5f fc8c 	uxtb.w	ip, ip
   b7182:	440a      	add	r2, r1
      if (i < 7) {
   b7184:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b7188:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b718a:	d801      	bhi.n	b7190 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b718c:	f881 c00c 	strb.w	ip, [r1, #12]
   b7190:	4662      	mov	r2, ip
   b7192:	e7bb      	b.n	b710c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b7194:	45a8      	cmp	r8, r5
   b7196:	dc18      	bgt.n	b71ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b7198:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b719a:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b719c:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b719e:	f04f 0e10 	mov.w	lr, #16
   b71a2:	e7b2      	b.n	b710a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b71a4:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b71a8:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b71ac:	bf98      	it	ls
   b71ae:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b71b2:	e7e2      	b.n	b717a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b71b4:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b71b6:	2001      	movs	r0, #1
   b71b8:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b71ba:	4419      	add	r1, r3
   b71bc:	237e      	movs	r3, #126	; 0x7e
   b71be:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b71c0:	2331      	movs	r3, #49	; 0x31
   b71c2:	738b      	strb	r3, [r1, #14]
   b71c4:	e74b      	b.n	b705e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b71c6:	2f0a      	cmp	r7, #10
   b71c8:	d1e4      	bne.n	b7194 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b71ca:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b71cc:	7b4b      	ldrb	r3, [r1, #13]
   b71ce:	2b20      	cmp	r3, #32
   b71d0:	f43f af44 	beq.w	b705c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b71d4:	2800      	cmp	r0, #0
   b71d6:	d0ed      	beq.n	b71b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b71d8:	ea1a 0f09 	tst.w	sl, r9
   b71dc:	bf18      	it	ne
   b71de:	f04f 0902 	movne.w	r9, #2
   b71e2:	f881 9000 	strb.w	r9, [r1]
   b71e6:	e73a      	b.n	b705e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b71e8:	42ba      	cmp	r2, r7
   b71ea:	d8ec      	bhi.n	b71c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b71ec:	2000      	movs	r0, #0
      c = '_';
   b71ee:	235f      	movs	r3, #95	; 0x5f
   b71f0:	e7c3      	b.n	b717a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b71f2:	bf00      	nop
   b71f4:	31000101 	.word	0x31000101

000b71f8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b71f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b71fc:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b7200:	4606      	mov	r6, r0
   b7202:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b7204:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b7206:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b7208:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b720c:	6861      	ldr	r1, [r4, #4]
   b720e:	68a2      	ldr	r2, [r4, #8]
   b7210:	186b      	adds	r3, r5, r1
   b7212:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b7214:	4411      	add	r1, r2
   b7216:	4291      	cmp	r1, r2
   b7218:	d006      	beq.n	b7228 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b721a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b721e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b7222:	4043      	eors	r3, r0
   b7224:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b7226:	e7f6      	b.n	b7216 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b7228:	f1b9 0f03 	cmp.w	r9, #3
   b722c:	bf28      	it	cs
   b722e:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7232:	f109 0204 	add.w	r2, r9, #4
   b7236:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b7238:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b723c:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b723e:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7240:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7242:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7244:	bf94      	ite	ls
   b7246:	3130      	addls	r1, #48	; 0x30
   b7248:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b724a:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b724c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b724e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7252:	d1f1      	bne.n	b7238 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b7254:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b7258:	2100      	movs	r1, #0
   b725a:	735f      	strb	r7, [r3, #13]
   b725c:	4630      	mov	r0, r6
   b725e:	f7ff fc0b 	bl	b6a78 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b7262:	2101      	movs	r1, #1
   b7264:	4630      	mov	r0, r6
   b7266:	f7ff fbe8 	bl	b6a3a <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b726a:	4601      	mov	r1, r0
   b726c:	b928      	cbnz	r0, b727a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b726e:	7870      	ldrb	r0, [r6, #1]
   b7270:	fab0 f080 	clz	r0, r0
   b7274:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b7276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b727a:	7803      	ldrb	r3, [r0, #0]
   b727c:	b16b      	cbz	r3, b729a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b727e:	7ac3      	ldrb	r3, [r0, #11]
   b7280:	071b      	lsls	r3, r3, #28
   b7282:	d4ee      	bmi.n	b7262 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b7284:	220b      	movs	r2, #11
   b7286:	4640      	mov	r0, r8
   b7288:	f00c fec2 	bl	c4010 <memcmp>
   b728c:	2800      	cmp	r0, #0
   b728e:	d1e8      	bne.n	b7262 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b7290:	3501      	adds	r5, #1
   b7292:	b2ad      	uxth	r5, r5
   b7294:	2d64      	cmp	r5, #100	; 0x64
   b7296:	d1b9      	bne.n	b720c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b7298:	e7ed      	b.n	b7276 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b729a:	2001      	movs	r0, #1
   b729c:	e7eb      	b.n	b7276 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b72a0 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b72a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b72a4:	ed2d 8b02 	vpush	{d8}
   b72a8:	b08b      	sub	sp, #44	; 0x2c
   b72aa:	460d      	mov	r5, r1
   b72ac:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b72ae:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b72b0:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b72b2:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b72b6:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b72b8:	d105      	bne.n	b72c6 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b72ba:	2000      	movs	r0, #0
}
   b72bc:	b00b      	add	sp, #44	; 0x2c
   b72be:	ecbd 8b02 	vpop	{d8}
   b72c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b72c6:	9b07      	ldr	r3, [sp, #28]
   b72c8:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b72ca:	2b00      	cmp	r3, #0
   b72cc:	d1f5      	bne.n	b72ba <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b72ce:	6853      	ldr	r3, [r2, #4]
   b72d0:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b72d2:	7813      	ldrb	r3, [r2, #0]
   b72d4:	079c      	lsls	r4, r3, #30
   b72d6:	bf1f      	itttt	ne
   b72d8:	9b05      	ldrne	r3, [sp, #20]
   b72da:	330c      	addne	r3, #12
   b72dc:	220d      	movne	r2, #13
   b72de:	fbb3 f3f2 	udivne	r3, r3, r2
   b72e2:	bf1a      	itte	ne
   b72e4:	3301      	addne	r3, #1
   b72e6:	b2db      	uxtbne	r3, r3
   b72e8:	2301      	moveq	r3, #1
    seekSet(0);
   b72ea:	2100      	movs	r1, #0
   b72ec:	4628      	mov	r0, r5
   b72ee:	9303      	str	r3, [sp, #12]
   b72f0:	f7ff fbc2 	bl	b6a78 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b72f4:	f107 030d 	add.w	r3, r7, #13
  }
   b72f8:	f04f 0b00 	mov.w	fp, #0
   b72fc:	ee08 3a10 	vmov	s16, r3
   b7300:	46da      	mov	sl, fp
   b7302:	465c      	mov	r4, fp
   b7304:	465e      	mov	r6, fp
   b7306:	f8cd b010 	str.w	fp, [sp, #16]
   b730a:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b730c:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b730e:	2101      	movs	r1, #1
   b7310:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b7312:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b7316:	f7ff fb90 	bl	b6a3a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b731a:	4603      	mov	r3, r0
   b731c:	2800      	cmp	r0, #0
   b731e:	d171      	bne.n	b7404 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b7320:	786b      	ldrb	r3, [r5, #1]
   b7322:	2b00      	cmp	r3, #0
   b7324:	d1c9      	bne.n	b72ba <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b7326:	9b06      	ldr	r3, [sp, #24]
   b7328:	059a      	lsls	r2, r3, #22
   b732a:	d5c6      	bpl.n	b72ba <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b732c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b7330:	3b01      	subs	r3, #1
   b7332:	2b01      	cmp	r3, #1
   b7334:	d8c1      	bhi.n	b72ba <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b7336:	9b04      	ldr	r3, [sp, #16]
   b7338:	2c00      	cmp	r4, #0
   b733a:	bf08      	it	eq
   b733c:	4643      	moveq	r3, r8
   b733e:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b7340:	9b03      	ldr	r3, [sp, #12]
   b7342:	429c      	cmp	r4, r3
   b7344:	f0c0 80f1 	bcc.w	b752a <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b7348:	f1b9 0f00 	cmp.w	r9, #0
   b734c:	f040 810a 	bne.w	b7564 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b7350:	9b04      	ldr	r3, [sp, #16]
   b7352:	4628      	mov	r0, r5
   b7354:	0159      	lsls	r1, r3, #5
   b7356:	f7ff fb8f 	bl	b6a78 <_ZN7FatFile7seekSetEm>
   b735a:	2800      	cmp	r0, #0
   b735c:	d0ad      	beq.n	b72ba <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b735e:	9b03      	ldr	r3, [sp, #12]
   b7360:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b7364:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7368:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b736a:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b736e:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7372:	2e00      	cmp	r6, #0
   b7374:	f000 810d 	beq.w	b7592 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7378:	2100      	movs	r1, #0
   b737a:	4628      	mov	r0, r5
   b737c:	f7ff fb5d 	bl	b6a3a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b7380:	4604      	mov	r4, r0
   b7382:	2800      	cmp	r0, #0
   b7384:	d099      	beq.n	b72ba <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b7386:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7388:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b738c:	454e      	cmp	r6, r9
   b738e:	f043 0301 	orr.w	r3, r3, #1
   b7392:	bf0c      	ite	eq
   b7394:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b7398:	46b3      	movne	fp, r6
   b739a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b739e:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b73a2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b73a6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b73aa:	f107 000d 	add.w	r0, r7, #13
   b73ae:	f7ff fdb1 	bl	b6f14 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b73b2:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b73b6:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b73b8:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b73bc:	f00b 031f 	and.w	r3, fp, #31
   b73c0:	220d      	movs	r2, #13
   b73c2:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b73c4:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b73c8:	4353      	muls	r3, r2
   b73ca:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b73cc:	9905      	ldr	r1, [sp, #20]
   b73ce:	4299      	cmp	r1, r3
   b73d0:	f240 80d0 	bls.w	b7574 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b73d4:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b73d8:	2a04      	cmp	r2, #4
   b73da:	fa5f fe82 	uxtb.w	lr, r2
   b73de:	f102 0001 	add.w	r0, r2, #1
   b73e2:	f200 80cd 	bhi.w	b7580 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b73e6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b73ea:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b73ee:	280d      	cmp	r0, #13
   b73f0:	f103 0301 	add.w	r3, r3, #1
   b73f4:	4602      	mov	r2, r0
   b73f6:	d1e9      	bne.n	b73cc <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b73f8:	3e01      	subs	r6, #1
   b73fa:	b2f6      	uxtb	r6, r6
   b73fc:	e7b9      	b.n	b7372 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b73fe:	f04f 0901 	mov.w	r9, #1
   b7402:	e783      	b.n	b730c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b7404:	7802      	ldrb	r2, [r0, #0]
   b7406:	2ae5      	cmp	r2, #229	; 0xe5
   b7408:	d000      	beq.n	b740c <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b740a:	b97a      	cbnz	r2, b742c <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b740c:	9904      	ldr	r1, [sp, #16]
   b740e:	2c00      	cmp	r4, #0
   b7410:	bf08      	it	eq
   b7412:	4641      	moveq	r1, r8
   b7414:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b7416:	9903      	ldr	r1, [sp, #12]
   b7418:	428c      	cmp	r4, r1
        freeFound++;
   b741a:	bf3c      	itt	cc
   b741c:	3401      	addcc	r4, #1
   b741e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b7420:	2a00      	cmp	r2, #0
   b7422:	d080      	beq.n	b7326 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7424:	2ae5      	cmp	r2, #229	; 0xe5
   b7426:	d105      	bne.n	b7434 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b7428:	2600      	movs	r6, #0
   b742a:	e76f      	b.n	b730c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b742c:	9903      	ldr	r1, [sp, #12]
   b742e:	428c      	cmp	r4, r1
   b7430:	bf38      	it	cc
   b7432:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7434:	2a2e      	cmp	r2, #46	; 0x2e
   b7436:	d0f7      	beq.n	b7428 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b7438:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b743a:	290f      	cmp	r1, #15
   b743c:	d14a      	bne.n	b74d4 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b743e:	bb16      	cbnz	r6, b7486 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b7440:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b7444:	f43f af62 	beq.w	b730c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b7448:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b744c:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b7450:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b7452:	220d      	movs	r2, #13
   b7454:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b7458:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b745c:	9a05      	ldr	r2, [sp, #20]
   b745e:	4542      	cmp	r2, r8
   b7460:	d9e2      	bls.n	b7428 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b7462:	eba2 0208 	sub.w	r2, r2, r8
   b7466:	9208      	str	r2, [sp, #32]
   b7468:	2200      	movs	r2, #0
   b746a:	eb02 0108 	add.w	r1, r2, r8
   b746e:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b7470:	4618      	mov	r0, r3
   b7472:	b2d1      	uxtb	r1, r2
   b7474:	f7ff fd3a 	bl	b6eec <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b7478:	9908      	ldr	r1, [sp, #32]
   b747a:	428a      	cmp	r2, r1
   b747c:	d10d      	bne.n	b749a <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b747e:	2800      	cmp	r0, #0
   b7480:	bf18      	it	ne
   b7482:	2600      	movne	r6, #0
   b7484:	e742      	b.n	b730c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b7486:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b748a:	fa5f fa8a 	uxtb.w	sl, sl
   b748e:	4552      	cmp	r2, sl
   b7490:	d1ca      	bne.n	b7428 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b7492:	7b5a      	ldrb	r2, [r3, #13]
   b7494:	455a      	cmp	r2, fp
   b7496:	d0dc      	beq.n	b7452 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b7498:	e7c6      	b.n	b7428 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b749a:	28ff      	cmp	r0, #255	; 0xff
   b749c:	d8c4      	bhi.n	b7428 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b749e:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b74a2:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b74a6:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b74a8:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b74aa:	bf9c      	itt	ls
   b74ac:	f10e 0020 	addls.w	r0, lr, #32
   b74b0:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b74b4:	4608      	mov	r0, r1
   b74b6:	9909      	ldr	r1, [sp, #36]	; 0x24
   b74b8:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b74ba:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b74be:	f1bc 0f19 	cmp.w	ip, #25
   b74c2:	bf9c      	itt	ls
   b74c4:	3120      	addls	r1, #32
   b74c6:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b74c8:	4571      	cmp	r1, lr
   b74ca:	d1ad      	bne.n	b7428 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b74cc:	3201      	adds	r2, #1
   b74ce:	2a0d      	cmp	r2, #13
   b74d0:	d1cb      	bne.n	b746a <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b74d2:	e71b      	b.n	b730c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b74d4:	0708      	lsls	r0, r1, #28
   b74d6:	d4a7      	bmi.n	b7428 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b74d8:	b15e      	cbz	r6, b74f2 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b74da:	f1ba 0f01 	cmp.w	sl, #1
   b74de:	f47f aeec 	bne.w	b72ba <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b74e2:	4618      	mov	r0, r3
   b74e4:	f7ff fd16 	bl	b6f14 <_ZN7FatFile11lfnChecksumEPh>
   b74e8:	4558      	cmp	r0, fp
   b74ea:	f47f aee6 	bne.w	b72ba <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b74ee:	46b1      	mov	r9, r6
   b74f0:	e00e      	b.n	b7510 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b74f2:	ee18 1a10 	vmov	r1, s16
   b74f6:	220b      	movs	r2, #11
   b74f8:	4618      	mov	r0, r3
   b74fa:	f00c fd89 	bl	c4010 <memcmp>
   b74fe:	2800      	cmp	r0, #0
   b7500:	f47f af04 	bne.w	b730c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b7504:	f897 9000 	ldrb.w	r9, [r7]
   b7508:	f019 0901 	ands.w	r9, r9, #1
   b750c:	f47f af77 	bne.w	b73fe <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b7510:	9b06      	ldr	r3, [sp, #24]
   b7512:	0519      	lsls	r1, r3, #20
   b7514:	f53f aed1 	bmi.w	b72ba <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b7518:	9b06      	ldr	r3, [sp, #24]
   b751a:	9807      	ldr	r0, [sp, #28]
   b751c:	f8cd 9000 	str.w	r9, [sp]
   b7520:	4642      	mov	r2, r8
   b7522:	4629      	mov	r1, r5
   b7524:	f7ff faeb 	bl	b6afe <_ZN7FatFile15openCachedEntryEPS_tih>
   b7528:	e6c8      	b.n	b72bc <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b752a:	2100      	movs	r1, #0
   b752c:	4628      	mov	r0, r5
   b752e:	f7ff fa84 	bl	b6a3a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b7532:	b9a0      	cbnz	r0, b755e <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b7534:	786b      	ldrb	r3, [r5, #1]
   b7536:	2b00      	cmp	r3, #0
   b7538:	f47f aebf 	bne.w	b72ba <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b753c:	4628      	mov	r0, r5
   b753e:	f7ff f93d 	bl	b67bc <_ZN7FatFile13addDirClusterEv>
   b7542:	2800      	cmp	r0, #0
   b7544:	f43f aeb9 	beq.w	b72ba <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b7548:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b754a:	791b      	ldrb	r3, [r3, #4]
   b754c:	2b01      	cmp	r3, #1
   b754e:	f63f aefb 	bhi.w	b7348 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b7552:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b7554:	3410      	adds	r4, #16
   b7556:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b7558:	42a3      	cmp	r3, r4
   b755a:	d8ef      	bhi.n	b753c <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b755c:	e6f4      	b.n	b7348 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b755e:	3401      	adds	r4, #1
   b7560:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b7562:	e6ed      	b.n	b7340 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b7564:	4639      	mov	r1, r7
   b7566:	4628      	mov	r0, r5
   b7568:	f7ff fe46 	bl	b71f8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b756c:	2800      	cmp	r0, #0
   b756e:	f47f aeef 	bne.w	b7350 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b7572:	e6a2      	b.n	b72ba <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7574:	bf14      	ite	ne
   b7576:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b757a:	2100      	moveq	r1, #0
   b757c:	b289      	uxth	r1, r1
   b757e:	e72b      	b.n	b73d8 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b7580:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b7584:	bf94      	ite	ls
   b7586:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b758a:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b758e:	8091      	strh	r1, [r2, #4]
   b7590:	e72d      	b.n	b73ee <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b7592:	4631      	mov	r1, r6
   b7594:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b7596:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b759a:	f7ff fa4e 	bl	b6a3a <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b759e:	4604      	mov	r4, r0
   b75a0:	2800      	cmp	r0, #0
   b75a2:	f43f ae8a 	beq.w	b72ba <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b75a6:	2220      	movs	r2, #32
   b75a8:	4631      	mov	r1, r6
   b75aa:	f00c fd69 	bl	c4080 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b75ae:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b75b2:	6023      	str	r3, [r4, #0]
   b75b4:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b75b8:	6063      	str	r3, [r4, #4]
   b75ba:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b75be:	8123      	strh	r3, [r4, #8]
   b75c0:	7dfb      	ldrb	r3, [r7, #23]
   b75c2:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b75c4:	783b      	ldrb	r3, [r7, #0]
   b75c6:	f003 0318 	and.w	r3, r3, #24
   b75ca:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b75cc:	4b0f      	ldr	r3, [pc, #60]	; (b760c <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b75ce:	681b      	ldr	r3, [r3, #0]
   b75d0:	b19b      	cbz	r3, b75fa <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b75d2:	f104 010e 	add.w	r1, r4, #14
   b75d6:	f104 0010 	add.w	r0, r4, #16
   b75da:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b75dc:	8a23      	ldrh	r3, [r4, #16]
   b75de:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b75e0:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b75e2:	89e3      	ldrh	r3, [r4, #14]
   b75e4:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b75e6:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b75e8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b75ec:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b75f0:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b75f4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b75f8:	e78e      	b.n	b7518 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b75fa:	2321      	movs	r3, #33	; 0x21
   b75fc:	7423      	strb	r3, [r4, #16]
   b75fe:	2328      	movs	r3, #40	; 0x28
   b7600:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b7602:	2308      	movs	r3, #8
   b7604:	73a6      	strb	r6, [r4, #14]
   b7606:	73e3      	strb	r3, [r4, #15]
   b7608:	e7e8      	b.n	b75dc <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b760a:	bf00      	nop
   b760c:	2003e60c 	.word	0x2003e60c

000b7610 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7610:	b513      	push	{r0, r1, r4, lr}
   b7612:	4604      	mov	r4, r0
    }
   b7614:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7616:	b159      	cbz	r1, b7630 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7618:	9101      	str	r1, [sp, #4]
   b761a:	f00c fdbc 	bl	c4196 <strlen>
   b761e:	6823      	ldr	r3, [r4, #0]
   b7620:	9901      	ldr	r1, [sp, #4]
   b7622:	68db      	ldr	r3, [r3, #12]
   b7624:	4602      	mov	r2, r0
   b7626:	4620      	mov	r0, r4
    }
   b7628:	b002      	add	sp, #8
   b762a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b762e:	4718      	bx	r3
    }
   b7630:	b002      	add	sp, #8
   b7632:	bd10      	pop	{r4, pc}

000b7634 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b7634:	b510      	push	{r4, lr}
   b7636:	460c      	mov	r4, r1
    return m_attr;
   b7638:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b763a:	b909      	cbnz	r1, b7640 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b763c:	2000      	movs	r0, #0
}
   b763e:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b7640:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b7644:	d005      	beq.n	b7652 <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b7646:	232f      	movs	r3, #47	; 0x2f
   b7648:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b764a:	2300      	movs	r3, #0
   b764c:	7063      	strb	r3, [r4, #1]
  return true;
   b764e:	2001      	movs	r0, #1
   b7650:	e7f5      	b.n	b763e <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b7652:	f7ff f8f1 	bl	b6838 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b7656:	2800      	cmp	r0, #0
   b7658:	d0f0      	beq.n	b763c <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b765a:	4621      	mov	r1, r4
   b765c:	f7ff f8fb 	bl	b6856 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b7660:	e7f5      	b.n	b764e <_ZN7FatFile6getSFNEPc+0x1a>

000b7662 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b7662:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b7664:	7803      	ldrb	r3, [r0, #0]
   b7666:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b7668:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b766a:	d520      	bpl.n	b76ae <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b766c:	6843      	ldr	r3, [r0, #4]
   b766e:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b7670:	f100 020c 	add.w	r2, r0, #12
   b7674:	6818      	ldr	r0, [r3, #0]
   b7676:	9201      	str	r2, [sp, #4]
   b7678:	f000 fb87 	bl	b7d8a <_ZN9SdSpiCard10writeBlockEmPKh>
   b767c:	9a01      	ldr	r2, [sp, #4]
   b767e:	4605      	mov	r5, r0
   b7680:	b918      	cbnz	r0, b768a <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b7682:	2500      	movs	r5, #0
}
   b7684:	4628      	mov	r0, r5
   b7686:	b003      	add	sp, #12
   b7688:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b768a:	7823      	ldrb	r3, [r4, #0]
   b768c:	079b      	lsls	r3, r3, #30
   b768e:	d404      	bmi.n	b769a <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b7690:	7823      	ldrb	r3, [r4, #0]
   b7692:	f023 0301 	bic.w	r3, r3, #1
   b7696:	7023      	strb	r3, [r4, #0]
   b7698:	e7f4      	b.n	b7684 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b769a:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b769e:	6919      	ldr	r1, [r3, #16]
   b76a0:	4401      	add	r1, r0
   b76a2:	6818      	ldr	r0, [r3, #0]
   b76a4:	f000 fb71 	bl	b7d8a <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b76a8:	2800      	cmp	r0, #0
   b76aa:	d1f1      	bne.n	b7690 <_ZN8FatCache4syncEv+0x2e>
   b76ac:	e7e9      	b.n	b7682 <_ZN8FatCache4syncEv+0x20>
  return true;
   b76ae:	2501      	movs	r5, #1
   b76b0:	e7e8      	b.n	b7684 <_ZN8FatCache4syncEv+0x22>

000b76b2 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b76b2:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b76b4:	6883      	ldr	r3, [r0, #8]
   b76b6:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b76b8:	4604      	mov	r4, r0
   b76ba:	460e      	mov	r6, r1
   b76bc:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b76be:	d009      	beq.n	b76d4 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b76c0:	f7ff ffcf 	bl	b7662 <_ZN8FatCache4syncEv>
   b76c4:	b908      	cbnz	r0, b76ca <_ZN8FatCache4readEmh+0x18>
  return 0;
   b76c6:	2000      	movs	r0, #0
}
   b76c8:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b76ca:	076b      	lsls	r3, r5, #29
   b76cc:	d50a      	bpl.n	b76e4 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b76ce:	2300      	movs	r3, #0
   b76d0:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b76d2:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b76d4:	7822      	ldrb	r2, [r4, #0]
   b76d6:	f005 0503 	and.w	r5, r5, #3
   b76da:	4620      	mov	r0, r4
   b76dc:	4315      	orrs	r5, r2
   b76de:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b76e2:	e7f1      	b.n	b76c8 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b76e4:	6863      	ldr	r3, [r4, #4]
   b76e6:	f104 020c 	add.w	r2, r4, #12
   b76ea:	6818      	ldr	r0, [r3, #0]
   b76ec:	4631      	mov	r1, r6
   b76ee:	f000 fac3 	bl	b7c78 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b76f2:	2800      	cmp	r0, #0
   b76f4:	d1eb      	bne.n	b76ce <_ZN8FatCache4readEmh+0x1c>
   b76f6:	e7e6      	b.n	b76c6 <_ZN8FatCache4readEmh+0x14>

000b76f8 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b76f8:	7983      	ldrb	r3, [r0, #6]
   b76fa:	6940      	ldr	r0, [r0, #20]
   b76fc:	3902      	subs	r1, #2
   b76fe:	4099      	lsls	r1, r3
}
   b7700:	4408      	add	r0, r1
   b7702:	4770      	bx	lr

000b7704 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7704:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7706:	b570      	push	{r4, r5, r6, lr}
   b7708:	4605      	mov	r5, r0
   b770a:	460c      	mov	r4, r1
   b770c:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b770e:	d802      	bhi.n	b7716 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b7710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7714:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7716:	69c3      	ldr	r3, [r0, #28]
   b7718:	428b      	cmp	r3, r1
   b771a:	d3f9      	bcc.n	b7710 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b771c:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b771e:	2b20      	cmp	r3, #32
   b7720:	d116      	bne.n	b7750 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7722:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7724:	2202      	movs	r2, #2
   b7726:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b772a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b772e:	f7ff ffc0 	bl	b76b2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7732:	2800      	cmp	r0, #0
   b7734:	d0ec      	beq.n	b7710 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7736:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b773a:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b773e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7742:	69ea      	ldr	r2, [r5, #28]
   b7744:	429a      	cmp	r2, r3
  *value = next;
   b7746:	bf26      	itte	cs
   b7748:	6033      	strcs	r3, [r6, #0]
  return 1;
   b774a:	2001      	movcs	r0, #1
    return 0;
   b774c:	2000      	movcc	r0, #0
   b774e:	e7e1      	b.n	b7714 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7750:	2b10      	cmp	r3, #16
   b7752:	d1dd      	bne.n	b7710 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7754:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7758:	6981      	ldr	r1, [r0, #24]
   b775a:	2202      	movs	r2, #2
   b775c:	4419      	add	r1, r3
   b775e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7762:	f7ff ffa6 	bl	b76b2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7766:	2800      	cmp	r0, #0
   b7768:	d0d2      	beq.n	b7710 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b776a:	b2e4      	uxtb	r4, r4
   b776c:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b7770:	e7e7      	b.n	b7742 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b7772 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7772:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b7774:	b538      	push	{r3, r4, r5, lr}
   b7776:	460c      	mov	r4, r1
   b7778:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b777a:	d801      	bhi.n	b7780 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b777c:	2000      	movs	r0, #0
}
   b777e:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7780:	69c3      	ldr	r3, [r0, #28]
   b7782:	428b      	cmp	r3, r1
   b7784:	d3fa      	bcc.n	b777c <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7786:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7788:	2b20      	cmp	r3, #32
   b778a:	d10f      	bne.n	b77ac <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b778c:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b778e:	2203      	movs	r2, #3
   b7790:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7794:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7798:	f7ff ff8b 	bl	b76b2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b779c:	2800      	cmp	r0, #0
   b779e:	d0ed      	beq.n	b777c <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b77a0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b77a4:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b77a8:	2001      	movs	r0, #1
   b77aa:	e7e8      	b.n	b777e <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b77ac:	2b10      	cmp	r3, #16
   b77ae:	d1e5      	bne.n	b777c <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b77b0:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b77b4:	6981      	ldr	r1, [r0, #24]
   b77b6:	2203      	movs	r2, #3
   b77b8:	4419      	add	r1, r3
   b77ba:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b77be:	f7ff ff78 	bl	b76b2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b77c2:	2800      	cmp	r0, #0
   b77c4:	d0da      	beq.n	b777c <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b77c6:	b2e4      	uxtb	r4, r4
   b77c8:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b77cc:	e7ec      	b.n	b77a8 <_ZN9FatVolume6fatPutEmm+0x36>

000b77ce <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b77ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b77d2:	68c4      	ldr	r4, [r0, #12]
   b77d4:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b77d6:	4605      	mov	r5, r0
   b77d8:	460e      	mov	r6, r1
   b77da:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b77dc:	d301      	bcc.n	b77e2 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b77de:	2701      	movs	r7, #1
   b77e0:	e001      	b.n	b77e6 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b77e2:	460c      	mov	r4, r1
    setStart = false;
   b77e4:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b77e6:	69eb      	ldr	r3, [r5, #28]
    find++;
   b77e8:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b77ea:	42a3      	cmp	r3, r4
   b77ec:	d202      	bcs.n	b77f4 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b77ee:	b9c7      	cbnz	r7, b7822 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b77f0:	68ec      	ldr	r4, [r5, #12]
   b77f2:	e7f4      	b.n	b77de <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b77f4:	42a6      	cmp	r6, r4
   b77f6:	d014      	beq.n	b7822 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b77f8:	aa01      	add	r2, sp, #4
   b77fa:	4621      	mov	r1, r4
   b77fc:	4628      	mov	r0, r5
   b77fe:	f7ff ff81 	bl	b7704 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7802:	2800      	cmp	r0, #0
   b7804:	db0d      	blt.n	b7822 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7806:	d0ee      	beq.n	b77e6 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7808:	9b01      	ldr	r3, [sp, #4]
   b780a:	2b00      	cmp	r3, #0
   b780c:	d1eb      	bne.n	b77e6 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b780e:	b107      	cbz	r7, b7812 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b7810:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b7812:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7816:	4621      	mov	r1, r4
   b7818:	4628      	mov	r0, r5
   b781a:	f7ff ffaa 	bl	b7772 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b781e:	4607      	mov	r7, r0
   b7820:	b920      	cbnz	r0, b782c <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7822:	2700      	movs	r7, #0
}
   b7824:	4638      	mov	r0, r7
   b7826:	b002      	add	sp, #8
   b7828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b782c:	b916      	cbnz	r6, b7834 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b782e:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7832:	e7f7      	b.n	b7824 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b7834:	4622      	mov	r2, r4
   b7836:	4631      	mov	r1, r6
   b7838:	4628      	mov	r0, r5
   b783a:	f7ff ff9a 	bl	b7772 <_ZN9FatVolume6fatPutEmm>
   b783e:	2800      	cmp	r0, #0
   b7840:	d1f5      	bne.n	b782e <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7842:	e7ee      	b.n	b7822 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b7844 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b7844:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7846:	4605      	mov	r5, r0
   b7848:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b784a:	aa01      	add	r2, sp, #4
   b784c:	4621      	mov	r1, r4
   b784e:	4628      	mov	r0, r5
   b7850:	f7ff ff58 	bl	b7704 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7854:	1e06      	subs	r6, r0, #0
   b7856:	db10      	blt.n	b787a <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b7858:	2200      	movs	r2, #0
   b785a:	4621      	mov	r1, r4
   b785c:	4628      	mov	r0, r5
   b785e:	f7ff ff88 	bl	b7772 <_ZN9FatVolume6fatPutEmm>
   b7862:	b150      	cbz	r0, b787a <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b7864:	68eb      	ldr	r3, [r5, #12]
   b7866:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b7868:	bf24      	itt	cs
   b786a:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b786e:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b7870:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b7872:	2e00      	cmp	r6, #0
   b7874:	d1e9      	bne.n	b784a <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b7876:	b002      	add	sp, #8
   b7878:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b787a:	2000      	movs	r0, #0
   b787c:	e7fb      	b.n	b7876 <_ZN9FatVolume9freeChainEm+0x32>

000b787e <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b787e:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b7880:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b7882:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b7884:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b788a:	4604      	mov	r4, r0
  m_fatType = 0;
   b788c:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b788e:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b7892:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b7894:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7898:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b789a:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b789e:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b78a2:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b78a6:	460d      	mov	r5, r1
   b78a8:	b1b9      	cbz	r1, b78da <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b78aa:	2904      	cmp	r1, #4
   b78ac:	d901      	bls.n	b78b2 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b78ae:	2000      	movs	r0, #0
}
   b78b0:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b78b2:	4611      	mov	r1, r2
   b78b4:	4630      	mov	r0, r6
   b78b6:	f7ff fefc 	bl	b76b2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b78ba:	2800      	cmp	r0, #0
   b78bc:	d0f7      	beq.n	b78ae <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b78be:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b78c2:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b78c6:	065b      	lsls	r3, r3, #25
   b78c8:	d1f1      	bne.n	b78ae <_ZN9FatVolume4initEh+0x30>
   b78ca:	f105 011b 	add.w	r1, r5, #27
   b78ce:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b78d2:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b78d6:	2d00      	cmp	r5, #0
   b78d8:	d0e9      	beq.n	b78ae <_ZN9FatVolume4initEh+0x30>
   b78da:	2200      	movs	r2, #0
   b78dc:	4629      	mov	r1, r5
   b78de:	4630      	mov	r0, r6
   b78e0:	f7ff fee7 	bl	b76b2 <_ZN8FatCache4readEmh>
  if (!pc) {
   b78e4:	2800      	cmp	r0, #0
   b78e6:	d0e2      	beq.n	b78ae <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b78e8:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b78ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b78f0:	d1dd      	bne.n	b78ae <_ZN9FatVolume4initEh+0x30>
   b78f2:	7c03      	ldrb	r3, [r0, #16]
   b78f4:	2b02      	cmp	r3, #2
   b78f6:	d1da      	bne.n	b78ae <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b78f8:	89c3      	ldrh	r3, [r0, #14]
   b78fa:	2b00      	cmp	r3, #0
   b78fc:	d0d7      	beq.n	b78ae <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b78fe:	7b41      	ldrb	r1, [r0, #13]
   b7900:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b7902:	1e4b      	subs	r3, r1, #1
   b7904:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7906:	2300      	movs	r3, #0
   b7908:	71a3      	strb	r3, [r4, #6]
   b790a:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b790c:	2301      	movs	r3, #1
   b790e:	4299      	cmp	r1, r3
   b7910:	d007      	beq.n	b7922 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b7912:	3e01      	subs	r6, #1
   b7914:	d0cb      	beq.n	b78ae <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7916:	79a2      	ldrb	r2, [r4, #6]
   b7918:	005b      	lsls	r3, r3, #1
   b791a:	3201      	adds	r2, #1
   b791c:	b2db      	uxtb	r3, r3
   b791e:	71a2      	strb	r2, [r4, #6]
   b7920:	e7f5      	b.n	b790e <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7922:	8ac1      	ldrh	r1, [r0, #22]
   b7924:	b901      	cbnz	r1, b7928 <_ZN9FatVolume4initEh+0xaa>
   b7926:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7928:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b792a:	89c3      	ldrh	r3, [r0, #14]
   b792c:	442b      	add	r3, r5
   b792e:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7930:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7934:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7936:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b793a:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b793c:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b7940:	0149      	lsls	r1, r1, #5
   b7942:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7946:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b794a:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b794c:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7950:	b902      	cbnz	r2, b7954 <_ZN9FatVolume4initEh+0xd6>
   b7952:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7954:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7956:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7958:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b795a:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b795c:	1c4b      	adds	r3, r1, #1
   b795e:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7960:	f640 73f4 	movw	r3, #4084	; 0xff4
   b7964:	4299      	cmp	r1, r3
   b7966:	d802      	bhi.n	b796e <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7968:	230c      	movs	r3, #12
   b796a:	71e3      	strb	r3, [r4, #7]
   b796c:	e79f      	b.n	b78ae <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b796e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b7972:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b7974:	bf85      	ittet	hi
   b7976:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7978:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b797a:	2310      	movls	r3, #16
    m_fatType = 32;
   b797c:	2320      	movhi	r3, #32
   b797e:	71e3      	strb	r3, [r4, #7]
  return true;
   b7980:	2001      	movs	r0, #1
   b7982:	e795      	b.n	b78b0 <_ZN9FatVolume4initEh+0x32>

000b7984 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b7984:	f000 baca 	b.w	b7f1c <_ZN14SdSpiAltDriver4sendEh>

000b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7988:	f000 baad 	b.w	b7ee6 <_ZN14SdSpiAltDriver7receiveEv>

000b798c <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b798c:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b798e:	4e0e      	ldr	r6, [pc, #56]	; (b79c8 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7990:	460d      	mov	r5, r1
   b7992:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7994:	f005 ff5a 	bl	bd84c <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7998:	6833      	ldr	r3, [r6, #0]
   b799a:	1ac0      	subs	r0, r0, r3
   b799c:	4b0b      	ldr	r3, [pc, #44]	; (b79cc <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b799e:	4298      	cmp	r0, r3
   b79a0:	d908      	bls.n	b79b4 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b79a2:	f005 ff5b 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b79a6:	4b0a      	ldr	r3, [pc, #40]	; (b79d0 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b79a8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b79aa:	f006 f99d 	bl	bdce8 <spark_process>
   b79ae:	f005 ff4d 	bl	bd84c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b79b2:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b79b4:	f005 ff52 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b79b8:	b280      	uxth	r0, r0
   b79ba:	1b40      	subs	r0, r0, r5
}
   b79bc:	42a0      	cmp	r0, r4
   b79be:	bfd4      	ite	le
   b79c0:	2000      	movle	r0, #0
   b79c2:	2001      	movgt	r0, #1
   b79c4:	bd70      	pop	{r4, r5, r6, pc}
   b79c6:	bf00      	nop
   b79c8:	2003e614 	.word	0x2003e614
   b79cc:	000186a0 	.word	0x000186a0
   b79d0:	2003e728 	.word	0x2003e728

000b79d4 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b79d4:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b79d6:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b79d8:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b79da:	b94d      	cbnz	r5, b79f0 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b79dc:	6840      	ldr	r0, [r0, #4]
   b79de:	f000 fa6b 	bl	b7eb8 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b79e2:	6863      	ldr	r3, [r4, #4]
   b79e4:	4629      	mov	r1, r5
   b79e6:	7d18      	ldrb	r0, [r3, #20]
   b79e8:	f00a f875 	bl	c1ad6 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b79ec:	2301      	movs	r3, #1
   b79ee:	7223      	strb	r3, [r4, #8]
  }
}
   b79f0:	bd38      	pop	{r3, r4, r5, pc}

000b79f2 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b79f2:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b79f4:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b79f6:	4604      	mov	r4, r0
  if (m_spiActive) {
   b79f8:	b16b      	cbz	r3, b7a16 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b79fa:	6843      	ldr	r3, [r0, #4]
   b79fc:	2101      	movs	r1, #1
   b79fe:	7d18      	ldrb	r0, [r3, #20]
   b7a00:	f00a f869 	bl	c1ad6 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7a04:	6860      	ldr	r0, [r4, #4]
   b7a06:	21ff      	movs	r1, #255	; 0xff
   b7a08:	f7ff ffbc 	bl	b7984 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7a0c:	6860      	ldr	r0, [r4, #4]
   b7a0e:	f000 fa67 	bl	b7ee0 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b7a12:	2300      	movs	r3, #0
   b7a14:	7223      	strb	r3, [r4, #8]
  }
}
   b7a16:	bd10      	pop	{r4, pc}

000b7a18 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a1a:	4604      	mov	r4, r0
   b7a1c:	460d      	mov	r5, r1
   b7a1e:	4616      	mov	r6, r2
   b7a20:	f005 ff1c 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7a24:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7a26:	6860      	ldr	r0, [r4, #4]
   b7a28:	f7ff ffae 	bl	b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7a2c:	28ff      	cmp	r0, #255	; 0xff
   b7a2e:	7260      	strb	r0, [r4, #9]
   b7a30:	d10e      	bne.n	b7a50 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b7a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7a36:	4639      	mov	r1, r7
   b7a38:	4620      	mov	r0, r4
   b7a3a:	f7ff ffa7 	bl	b798c <_ZN9SdSpiCard10isTimedOutEtt>
   b7a3e:	2800      	cmp	r0, #0
   b7a40:	d0f1      	beq.n	b7a26 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b7a42:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7a44:	4620      	mov	r0, r4
   b7a46:	7023      	strb	r3, [r4, #0]
   b7a48:	f7ff ffd3 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a4c:	2000      	movs	r0, #0
}
   b7a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b7a50:	28fe      	cmp	r0, #254	; 0xfe
   b7a52:	d001      	beq.n	b7a58 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7a54:	2350      	movs	r3, #80	; 0x50
   b7a56:	e7f5      	b.n	b7a44 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7a58:	6860      	ldr	r0, [r4, #4]
   b7a5a:	4632      	mov	r2, r6
   b7a5c:	4629      	mov	r1, r5
   b7a5e:	f000 fa47 	bl	b7ef0 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b7a62:	7260      	strb	r0, [r4, #9]
   b7a64:	b108      	cbz	r0, b7a6a <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7a66:	2360      	movs	r3, #96	; 0x60
   b7a68:	e7ec      	b.n	b7a44 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b7a6a:	6860      	ldr	r0, [r4, #4]
   b7a6c:	f7ff ff8c 	bl	b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b7a70:	6860      	ldr	r0, [r4, #4]
   b7a72:	f7ff ff89 	bl	b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b7a76:	2001      	movs	r0, #1
   b7a78:	e7e9      	b.n	b7a4e <_ZN9SdSpiCard8readDataEPhj+0x36>

000b7a7a <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b7a7a:	b570      	push	{r4, r5, r6, lr}
   b7a7c:	4604      	mov	r4, r0
   b7a7e:	460e      	mov	r6, r1
   b7a80:	f005 feec 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   b7a84:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7a86:	4632      	mov	r2, r6
   b7a88:	4629      	mov	r1, r5
   b7a8a:	4620      	mov	r0, r4
   b7a8c:	f7ff ff7e 	bl	b798c <_ZN9SdSpiCard10isTimedOutEtt>
   b7a90:	b930      	cbnz	r0, b7aa0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b7a92:	6860      	ldr	r0, [r4, #4]
   b7a94:	f7ff ff78 	bl	b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7a98:	28ff      	cmp	r0, #255	; 0xff
   b7a9a:	d1f4      	bne.n	b7a86 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7a9c:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b7a9e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7aa0:	2000      	movs	r0, #0
   b7aa2:	e7fc      	b.n	b7a9e <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b7aa4 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b7aa6:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7aa8:	9201      	str	r2, [sp, #4]
   b7aaa:	4604      	mov	r4, r0
   b7aac:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b7aae:	b90b      	cbnz	r3, b7ab4 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b7ab0:	f7ff ff90 	bl	b79d4 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b7ab4:	b125      	cbz	r5, b7ac0 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b7ab6:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b7aba:	4620      	mov	r0, r4
   b7abc:	f7ff ffdd 	bl	b7a7a <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b7ac0:	6860      	ldr	r0, [r4, #4]
   b7ac2:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b7ac6:	f7ff ff5d 	bl	b7984 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7aca:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b7acc:	af01      	add	r7, sp, #4
   b7ace:	5db9      	ldrb	r1, [r7, r6]
   b7ad0:	6860      	ldr	r0, [r4, #4]
   b7ad2:	f7ff ff57 	bl	b7984 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b7ad6:	3e01      	subs	r6, #1
   b7ad8:	d2f9      	bcs.n	b7ace <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b7ada:	2d00      	cmp	r5, #0
   b7adc:	6860      	ldr	r0, [r4, #4]
   b7ade:	bf0c      	ite	eq
   b7ae0:	2195      	moveq	r1, #149	; 0x95
   b7ae2:	2187      	movne	r1, #135	; 0x87
   b7ae4:	f7ff ff4e 	bl	b7984 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b7ae8:	6860      	ldr	r0, [r4, #4]
   b7aea:	f7ff ff4d 	bl	b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7aee:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b7af0:	6860      	ldr	r0, [r4, #4]
   b7af2:	f7ff ff49 	bl	b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7af6:	0603      	lsls	r3, r0, #24
   b7af8:	7260      	strb	r0, [r4, #9]
   b7afa:	d503      	bpl.n	b7b04 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b7afc:	3d01      	subs	r5, #1
   b7afe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7b02:	d1f5      	bne.n	b7af0 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7b04:	b003      	add	sp, #12
   b7b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7b08 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7b08:	b570      	push	{r4, r5, r6, lr}
   b7b0a:	4604      	mov	r4, r0
   b7b0c:	460d      	mov	r5, r1
   b7b0e:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7b10:	2137      	movs	r1, #55	; 0x37
   b7b12:	2200      	movs	r2, #0
   b7b14:	f7ff ffc6 	bl	b7aa4 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7b18:	4632      	mov	r2, r6
   b7b1a:	4629      	mov	r1, r5
   b7b1c:	4620      	mov	r0, r4
  }
   b7b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7b22:	f7ff bfbf 	b.w	b7aa4 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7b28 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7b2c:	2500      	movs	r5, #0
   b7b2e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7b30:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7b32:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7b34:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7b36:	4604      	mov	r4, r0
   b7b38:	4690      	mov	r8, r2
   b7b3a:	461e      	mov	r6, r3
   b7b3c:	f005 fe8e 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7b40:	4641      	mov	r1, r8
   b7b42:	4607      	mov	r7, r0
   b7b44:	6860      	ldr	r0, [r4, #4]
   b7b46:	f000 f9bb 	bl	b7ec0 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b7b4a:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b7b4c:	4a49      	ldr	r2, [pc, #292]	; (b7c74 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b7b4e:	721d      	strb	r5, [r3, #8]
   b7b50:	2501      	movs	r5, #1
   b7b52:	60da      	str	r2, [r3, #12]
   b7b54:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7b56:	4620      	mov	r0, r4
   b7b58:	f7ff ff3c 	bl	b79d4 <_ZN9SdSpiCard8spiStartEv>
   b7b5c:	6863      	ldr	r3, [r4, #4]
   b7b5e:	4629      	mov	r1, r5
   b7b60:	7d18      	ldrb	r0, [r3, #20]
   b7b62:	f009 ffb8 	bl	c1ad6 <digitalWrite>
   b7b66:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7b68:	6860      	ldr	r0, [r4, #4]
   b7b6a:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b7b6c:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b7b6e:	f7ff ff09 	bl	b7984 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b7b72:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7b76:	d1f7      	bne.n	b7b68 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7b78:	6863      	ldr	r3, [r4, #4]
   b7b7a:	4629      	mov	r1, r5
   b7b7c:	7d18      	ldrb	r0, [r3, #20]
   b7b7e:	f009 ffaa 	bl	c1ad6 <digitalWrite>
  }
   b7b82:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7b84:	2200      	movs	r2, #0
   b7b86:	4611      	mov	r1, r2
   b7b88:	4620      	mov	r0, r4
   b7b8a:	f7ff ff8b 	bl	b7aa4 <_ZN9SdSpiCard11cardCommandEhm>
   b7b8e:	2801      	cmp	r0, #1
   b7b90:	4680      	mov	r8, r0
   b7b92:	d018      	beq.n	b7bc6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7b94:	3d01      	subs	r5, #1
   b7b96:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7b9a:	d107      	bne.n	b7bac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7b9c:	2320      	movs	r3, #32
  spiStop();
   b7b9e:	4620      	mov	r0, r4
   b7ba0:	7023      	strb	r3, [r4, #0]
   b7ba2:	f7ff ff26 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7ba6:	2000      	movs	r0, #0
}
   b7ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b7bac:	6860      	ldr	r0, [r4, #4]
   b7bae:	21fd      	movs	r1, #253	; 0xfd
   b7bb0:	f7ff fee8 	bl	b7984 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7bb4:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7bb8:	6860      	ldr	r0, [r4, #4]
   b7bba:	f7ff fee5 	bl	b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b7bbe:	f1b8 0801 	subs.w	r8, r8, #1
   b7bc2:	d1f9      	bne.n	b7bb8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7bc4:	e7de      	b.n	b7b84 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b7bc6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b7bca:	2108      	movs	r1, #8
   b7bcc:	4620      	mov	r0, r4
   b7bce:	f7ff ff69 	bl	b7aa4 <_ZN9SdSpiCard11cardCommandEhm>
   b7bd2:	2805      	cmp	r0, #5
   b7bd4:	d114      	bne.n	b7c00 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b7bd6:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7bda:	2500      	movs	r5, #0
   b7bdc:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b7bde:	462a      	mov	r2, r5
   b7be0:	2129      	movs	r1, #41	; 0x29
   b7be2:	4620      	mov	r0, r4
   b7be4:	f7ff ff90 	bl	b7b08 <_ZN9SdSpiCard8cardAcmdEhm>
   b7be8:	4602      	mov	r2, r0
   b7bea:	b1d8      	cbz	r0, b7c24 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7bec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7bf0:	4639      	mov	r1, r7
   b7bf2:	4620      	mov	r0, r4
   b7bf4:	f7ff feca 	bl	b798c <_ZN9SdSpiCard10isTimedOutEtt>
   b7bf8:	2800      	cmp	r0, #0
   b7bfa:	d0f0      	beq.n	b7bde <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7bfc:	2343      	movs	r3, #67	; 0x43
   b7bfe:	e7ce      	b.n	b7b9e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7c00:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7c02:	6860      	ldr	r0, [r4, #4]
   b7c04:	f7ff fec0 	bl	b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7c08:	3d01      	subs	r5, #1
   b7c0a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b7c0e:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7c10:	d1f7      	bne.n	b7c02 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7c12:	28aa      	cmp	r0, #170	; 0xaa
   b7c14:	d104      	bne.n	b7c20 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7c16:	2302      	movs	r3, #2
   b7c18:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7c1a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b7c1e:	e7dd      	b.n	b7bdc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7c20:	2325      	movs	r3, #37	; 0x25
   b7c22:	e7bc      	b.n	b7b9e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7c24:	7aa3      	ldrb	r3, [r4, #10]
   b7c26:	2b02      	cmp	r3, #2
   b7c28:	d118      	bne.n	b7c5c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7c2a:	213a      	movs	r1, #58	; 0x3a
   b7c2c:	4620      	mov	r0, r4
   b7c2e:	f7ff ff39 	bl	b7aa4 <_ZN9SdSpiCard11cardCommandEhm>
   b7c32:	b108      	cbz	r0, b7c38 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7c34:	2337      	movs	r3, #55	; 0x37
   b7c36:	e7b2      	b.n	b7b9e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7c38:	6860      	ldr	r0, [r4, #4]
   b7c3a:	f7ff fea5 	bl	b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7c3e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7c42:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7c44:	bf04      	itt	eq
   b7c46:	2303      	moveq	r3, #3
   b7c48:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b7c4a:	6860      	ldr	r0, [r4, #4]
   b7c4c:	f7ff fe9c 	bl	b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7c50:	6860      	ldr	r0, [r4, #4]
   b7c52:	f7ff fe99 	bl	b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7c56:	6860      	ldr	r0, [r4, #4]
   b7c58:	f7ff fe96 	bl	b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b7c5c:	4620      	mov	r0, r4
   b7c5e:	f7ff fec8 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b7c62:	6863      	ldr	r3, [r4, #4]
   b7c64:	7930      	ldrb	r0, [r6, #4]
   b7c66:	68b1      	ldr	r1, [r6, #8]
   b7c68:	89b2      	ldrh	r2, [r6, #12]
   b7c6a:	821a      	strh	r2, [r3, #16]
   b7c6c:	7218      	strb	r0, [r3, #8]
   b7c6e:	60d9      	str	r1, [r3, #12]
  return true;
   b7c70:	2001      	movs	r0, #1
   b7c72:	e799      	b.n	b7ba8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b7c74:	0003d090 	.word	0x0003d090

000b7c78 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7c78:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7c7a:	7a83      	ldrb	r3, [r0, #10]
   b7c7c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7c7e:	bf18      	it	ne
   b7c80:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7c82:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7c84:	460a      	mov	r2, r1
   b7c86:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7c88:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b7c8a:	f7ff ff0b 	bl	b7aa4 <_ZN9SdSpiCard11cardCommandEhm>
   b7c8e:	b130      	cbz	r0, b7c9e <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b7c90:	2330      	movs	r3, #48	; 0x30
   b7c92:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7c94:	4620      	mov	r0, r4
   b7c96:	f7ff feac 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7c9a:	2500      	movs	r5, #0
   b7c9c:	e00b      	b.n	b7cb6 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b7c9e:	4629      	mov	r1, r5
   b7ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7ca4:	4620      	mov	r0, r4
   b7ca6:	f7ff feb7 	bl	b7a18 <_ZN9SdSpiCard8readDataEPhj>
   b7caa:	4605      	mov	r5, r0
   b7cac:	2800      	cmp	r0, #0
   b7cae:	d0f1      	beq.n	b7c94 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b7cb0:	4620      	mov	r0, r4
   b7cb2:	f7ff fe9e 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>
}
   b7cb6:	4628      	mov	r0, r5
   b7cb8:	bd38      	pop	{r3, r4, r5, pc}

000b7cba <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7cba:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7cbc:	7a83      	ldrb	r3, [r0, #10]
   b7cbe:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7cc0:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7cc2:	bf18      	it	ne
   b7cc4:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b7cc6:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7cc8:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b7cca:	f7ff feeb 	bl	b7aa4 <_ZN9SdSpiCard11cardCommandEhm>
   b7cce:	b130      	cbz	r0, b7cde <_ZN9SdSpiCard9readStartEm+0x24>
   b7cd0:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b7cd2:	4620      	mov	r0, r4
   b7cd4:	7023      	strb	r3, [r4, #0]
   b7cd6:	f7ff fe8c 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7cda:	2000      	movs	r0, #0
}
   b7cdc:	bd10      	pop	{r4, pc}
  return true;
   b7cde:	2001      	movs	r0, #1
   b7ce0:	e7fc      	b.n	b7cdc <_ZN9SdSpiCard9readStartEm+0x22>

000b7ce2 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b7ce2:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b7ce4:	2200      	movs	r2, #0
   b7ce6:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b7ce8:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b7cea:	f7ff fedb 	bl	b7aa4 <_ZN9SdSpiCard11cardCommandEhm>
   b7cee:	b130      	cbz	r0, b7cfe <_ZN9SdSpiCard8readStopEv+0x1c>
   b7cf0:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b7cf2:	4620      	mov	r0, r4
   b7cf4:	7023      	strb	r3, [r4, #0]
   b7cf6:	f7ff fe7c 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7cfa:	2000      	movs	r0, #0
}
   b7cfc:	bd10      	pop	{r4, pc}
  spiStop();
   b7cfe:	4620      	mov	r0, r4
   b7d00:	f7ff fe77 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7d04:	2001      	movs	r0, #1
   b7d06:	e7f9      	b.n	b7cfc <_ZN9SdSpiCard8readStopEv+0x1a>

000b7d08 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d0a:	4604      	mov	r4, r0
   b7d0c:	4616      	mov	r6, r2
   b7d0e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7d10:	f7ff ffd3 	bl	b7cba <_ZN9SdSpiCard9readStartEm>
   b7d14:	b168      	cbz	r0, b7d32 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7d16:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7d18:	b2ab      	uxth	r3, r5
   b7d1a:	429f      	cmp	r7, r3
   b7d1c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7d20:	d909      	bls.n	b7d36 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7d22:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7d26:	4620      	mov	r0, r4
   b7d28:	f7ff fe76 	bl	b7a18 <_ZN9SdSpiCard8readDataEPhj>
   b7d2c:	3501      	adds	r5, #1
   b7d2e:	2800      	cmp	r0, #0
   b7d30:	d1f2      	bne.n	b7d18 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7d32:	2000      	movs	r0, #0
   b7d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7d36:	4620      	mov	r0, r4
}
   b7d38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7d3c:	f7ff bfd1 	b.w	b7ce2 <_ZN9SdSpiCard8readStopEv>

000b7d40 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7d40:	b538      	push	{r3, r4, r5, lr}
   b7d42:	4604      	mov	r4, r0
   b7d44:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7d46:	6840      	ldr	r0, [r0, #4]
   b7d48:	f7ff fe1c 	bl	b7984 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7d50:	6860      	ldr	r0, [r4, #4]
   b7d52:	4629      	mov	r1, r5
   b7d54:	f000 f8e6 	bl	b7f24 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7d58:	6860      	ldr	r0, [r4, #4]
   b7d5a:	21ff      	movs	r1, #255	; 0xff
   b7d5c:	f7ff fe12 	bl	b7984 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7d60:	6860      	ldr	r0, [r4, #4]
   b7d62:	21ff      	movs	r1, #255	; 0xff
   b7d64:	f7ff fe0e 	bl	b7984 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7d68:	6860      	ldr	r0, [r4, #4]
   b7d6a:	f7ff fe0d 	bl	b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7d6e:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7d70:	f000 001f 	and.w	r0, r0, #31
   b7d74:	2805      	cmp	r0, #5
   b7d76:	d006      	beq.n	b7d86 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7d78:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7d7a:	4620      	mov	r0, r4
   b7d7c:	7023      	strb	r3, [r4, #0]
   b7d7e:	f7ff fe38 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7d82:	2000      	movs	r0, #0
}
   b7d84:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7d86:	2001      	movs	r0, #1
   b7d88:	e7fc      	b.n	b7d84 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b7d8a <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7d8a:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7d8c:	7a83      	ldrb	r3, [r0, #10]
   b7d8e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7d90:	bf18      	it	ne
   b7d92:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7d94:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b7d96:	460a      	mov	r2, r1
   b7d98:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7d9a:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b7d9c:	f7ff fe82 	bl	b7aa4 <_ZN9SdSpiCard11cardCommandEhm>
   b7da0:	4606      	mov	r6, r0
   b7da2:	b130      	cbz	r0, b7db2 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b7da4:	2332      	movs	r3, #50	; 0x32
   b7da6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7da8:	4620      	mov	r0, r4
   b7daa:	f7ff fe22 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7dae:	2500      	movs	r5, #0
   b7db0:	e01f      	b.n	b7df2 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b7db2:	462a      	mov	r2, r5
   b7db4:	21fe      	movs	r1, #254	; 0xfe
   b7db6:	4620      	mov	r0, r4
   b7db8:	f7ff ffc2 	bl	b7d40 <_ZN9SdSpiCard9writeDataEhPKh>
   b7dbc:	2800      	cmp	r0, #0
   b7dbe:	d0f3      	beq.n	b7da8 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7dc0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7dc4:	4620      	mov	r0, r4
   b7dc6:	f7ff fe58 	bl	b7a7a <_ZN9SdSpiCard11waitNotBusyEt>
   b7dca:	4605      	mov	r5, r0
   b7dcc:	b908      	cbnz	r0, b7dd2 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b7dce:	235a      	movs	r3, #90	; 0x5a
   b7dd0:	e7e9      	b.n	b7da6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b7dd2:	4632      	mov	r2, r6
   b7dd4:	210d      	movs	r1, #13
   b7dd6:	4620      	mov	r0, r4
   b7dd8:	f7ff fe64 	bl	b7aa4 <_ZN9SdSpiCard11cardCommandEhm>
   b7ddc:	b108      	cbz	r0, b7de2 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b7dde:	2329      	movs	r3, #41	; 0x29
   b7de0:	e7e1      	b.n	b7da6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b7de2:	6860      	ldr	r0, [r4, #4]
   b7de4:	f7ff fdd0 	bl	b7988 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7de8:	2800      	cmp	r0, #0
   b7dea:	d1f8      	bne.n	b7dde <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7dec:	4620      	mov	r0, r4
   b7dee:	f7ff fe00 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>
}
   b7df2:	4628      	mov	r0, r5
   b7df4:	bd70      	pop	{r4, r5, r6, pc}

000b7df6 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b7df6:	b513      	push	{r0, r1, r4, lr}
   b7df8:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7dfa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b7dfe:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7e00:	f7ff fe3b 	bl	b7a7a <_ZN9SdSpiCard11waitNotBusyEt>
   b7e04:	9a01      	ldr	r2, [sp, #4]
   b7e06:	b930      	cbnz	r0, b7e16 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7e08:	235b      	movs	r3, #91	; 0x5b
   b7e0a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7e0c:	4620      	mov	r0, r4
   b7e0e:	f7ff fdf0 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7e12:	2000      	movs	r0, #0
   b7e14:	e005      	b.n	b7e22 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7e16:	21fc      	movs	r1, #252	; 0xfc
   b7e18:	4620      	mov	r0, r4
   b7e1a:	f7ff ff91 	bl	b7d40 <_ZN9SdSpiCard9writeDataEhPKh>
   b7e1e:	2800      	cmp	r0, #0
   b7e20:	d0f4      	beq.n	b7e0c <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7e22:	b002      	add	sp, #8
   b7e24:	bd10      	pop	{r4, pc}

000b7e26 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7e26:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7e28:	7a83      	ldrb	r3, [r0, #10]
   b7e2a:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7e2c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7e2e:	bf18      	it	ne
   b7e30:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7e32:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7e34:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7e36:	f7ff fe35 	bl	b7aa4 <_ZN9SdSpiCard11cardCommandEhm>
   b7e3a:	b130      	cbz	r0, b7e4a <_ZN9SdSpiCard10writeStartEm+0x24>
   b7e3c:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7e3e:	4620      	mov	r0, r4
   b7e40:	7023      	strb	r3, [r4, #0]
   b7e42:	f7ff fdd6 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7e46:	2000      	movs	r0, #0
}
   b7e48:	bd10      	pop	{r4, pc}
  return true;
   b7e4a:	2001      	movs	r0, #1
   b7e4c:	e7fc      	b.n	b7e48 <_ZN9SdSpiCard10writeStartEm+0x22>

000b7e4e <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b7e4e:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7e50:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7e54:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7e56:	f7ff fe10 	bl	b7a7a <_ZN9SdSpiCard11waitNotBusyEt>
   b7e5a:	4605      	mov	r5, r0
   b7e5c:	b930      	cbnz	r0, b7e6c <_ZN9SdSpiCard9writeStopEv+0x1e>
   b7e5e:	2356      	movs	r3, #86	; 0x56
   b7e60:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7e62:	4620      	mov	r0, r4
   b7e64:	f7ff fdc5 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7e68:	4628      	mov	r0, r5
   b7e6a:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7e6c:	6860      	ldr	r0, [r4, #4]
   b7e6e:	21fd      	movs	r1, #253	; 0xfd
   b7e70:	f7ff fd88 	bl	b7984 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7e74:	e7f5      	b.n	b7e62 <_ZN9SdSpiCard9writeStopEv+0x14>

000b7e76 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b7e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e78:	4604      	mov	r4, r0
   b7e7a:	4616      	mov	r6, r2
   b7e7c:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b7e7e:	f7ff ffd2 	bl	b7e26 <_ZN9SdSpiCard10writeStartEm>
   b7e82:	b170      	cbz	r0, b7ea2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7e84:	2500      	movs	r5, #0
   b7e86:	42bd      	cmp	r5, r7
   b7e88:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b7e8c:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b7e8e:	d004      	beq.n	b7e9a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b7e90:	f7ff ffb1 	bl	b7df6 <_ZN9SdSpiCard9writeDataEPKh>
   b7e94:	b128      	cbz	r0, b7ea2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7e96:	3501      	adds	r5, #1
   b7e98:	e7f5      	b.n	b7e86 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b7e9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b7e9e:	f7ff bfd6 	b.w	b7e4e <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b7ea2:	4620      	mov	r0, r4
   b7ea4:	f7ff fda5 	bl	b79f2 <_ZN9SdSpiCard7spiStopEv>
}
   b7ea8:	2000      	movs	r0, #0
   b7eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7eac <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b7eac:	4b01      	ldr	r3, [pc, #4]	; (b7eb4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b7eae:	2201      	movs	r2, #1
   b7eb0:	701a      	strb	r2, [r3, #0]
}
   b7eb2:	4770      	bx	lr
   b7eb4:	2003e618 	.word	0x2003e618

000b7eb8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b7eb8:	1d01      	adds	r1, r0, #4
   b7eba:	6800      	ldr	r0, [r0, #0]
   b7ebc:	f009 b980 	b.w	c11c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b7ec0 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b7ec0:	b510      	push	{r4, lr}
   b7ec2:	4604      	mov	r4, r0
  m_csPin = csPin;
   b7ec4:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b7ec6:	6800      	ldr	r0, [r0, #0]
   b7ec8:	f009 f935 	bl	c1136 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b7ecc:	7d20      	ldrb	r0, [r4, #20]
   b7ece:	2101      	movs	r1, #1
   b7ed0:	f009 fdf0 	bl	c1ab4 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b7ed4:	7d20      	ldrb	r0, [r4, #20]
   b7ed6:	2101      	movs	r1, #1
}
   b7ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b7edc:	f009 bdfb 	b.w	c1ad6 <digitalWrite>

000b7ee0 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b7ee0:	6800      	ldr	r0, [r0, #0]
   b7ee2:	f009 b953 	b.w	c118c <_ZN8SPIClass14endTransactionEv>

000b7ee6 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b7ee6:	6800      	ldr	r0, [r0, #0]
   b7ee8:	21ff      	movs	r1, #255	; 0xff
   b7eea:	f009 ba09 	b.w	c1300 <_ZN8SPIClass8transferEh>
	...

000b7ef0 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b7ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7ef2:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7ef4:	4a07      	ldr	r2, [pc, #28]	; (b7f14 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b7ef6:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7ef8:	2500      	movs	r5, #0
   b7efa:	4c07      	ldr	r4, [pc, #28]	; (b7f18 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7efc:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7efe:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7f00:	460a      	mov	r2, r1
   b7f02:	4629      	mov	r1, r5
   b7f04:	f009 fa02 	bl	c130c <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7f08:	7823      	ldrb	r3, [r4, #0]
   b7f0a:	2b00      	cmp	r3, #0
   b7f0c:	d0fc      	beq.n	b7f08 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b7f0e:	2000      	movs	r0, #0
   b7f10:	b003      	add	sp, #12
   b7f12:	bd30      	pop	{r4, r5, pc}
   b7f14:	000b7ead 	.word	0x000b7ead
   b7f18:	2003e618 	.word	0x2003e618

000b7f1c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7f1c:	6800      	ldr	r0, [r0, #0]
   b7f1e:	f009 b9ef 	b.w	c1300 <_ZN8SPIClass8transferEh>
	...

000b7f24 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7f26:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7f28:	4a06      	ldr	r2, [pc, #24]	; (b7f44 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b7f2a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7f2c:	2500      	movs	r5, #0
   b7f2e:	4c06      	ldr	r4, [pc, #24]	; (b7f48 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7f30:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7f32:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7f34:	462a      	mov	r2, r5
   b7f36:	f009 f9e9 	bl	c130c <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b7f3a:	7823      	ldrb	r3, [r4, #0]
   b7f3c:	2b00      	cmp	r3, #0
   b7f3e:	d0fc      	beq.n	b7f3a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7f40:	b003      	add	sp, #12
   b7f42:	bd30      	pop	{r4, r5, pc}
   b7f44:	000b7ead 	.word	0x000b7ead
   b7f48:	2003e618 	.word	0x2003e618

000b7f4c <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b7f4c:	4770      	bx	lr

000b7f4e <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   b7f4e:	4770      	bx	lr

000b7f50 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   b7f50:	b538      	push	{r3, r4, r5, lr}
   b7f52:	460c      	mov	r4, r1
   b7f54:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b7f56:	2220      	movs	r2, #32
   b7f58:	2100      	movs	r1, #0
   b7f5a:	f104 0008 	add.w	r0, r4, #8
   b7f5e:	f00c f88f 	bl	c4080 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   b7f62:	4909      	ldr	r1, [pc, #36]	; (b7f88 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   b7f64:	220b      	movs	r2, #11
   b7f66:	4620      	mov	r0, r4
   b7f68:	f00c f944 	bl	c41f4 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   b7f6c:	2301      	movs	r3, #1
   b7f6e:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   b7f70:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b7f72:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b7f74:	2302      	movs	r3, #2
   b7f76:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   b7f78:	4b04      	ldr	r3, [pc, #16]	; (b7f8c <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   b7f7a:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   b7f7c:	4b04      	ldr	r3, [pc, #16]	; (b7f90 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   b7f7e:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   b7f80:	4b04      	ldr	r3, [pc, #16]	; (b7f94 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   b7f82:	6223      	str	r3, [r4, #32]
}
   b7f84:	bd38      	pop	{r3, r4, r5, pc}
   b7f86:	bf00      	nop
   b7f88:	000c6990 	.word	0x000c6990
   b7f8c:	c4c80000 	.word	0xc4c80000
   b7f90:	44c80000 	.word	0x44c80000
   b7f94:	3c75c28f 	.word	0x3c75c28f

000b7f98 <_ZN16Adafruit_LIS3MDLD0Ev>:
   b7f98:	b510      	push	{r4, lr}
   b7f9a:	2128      	movs	r1, #40	; 0x28
   b7f9c:	4604      	mov	r4, r0
   b7f9e:	f7fc f880 	bl	b40a2 <_ZdlPvj>
   b7fa2:	4620      	mov	r0, r4
   b7fa4:	bd10      	pop	{r4, pc}
	...

000b7fa8 <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   b7fa8:	4a03      	ldr	r2, [pc, #12]	; (b7fb8 <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   b7faa:	6002      	str	r2, [r0, #0]
   b7fac:	2200      	movs	r2, #0
   b7fae:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b7fb2:	7602      	strb	r2, [r0, #24]
   b7fb4:	4770      	bx	lr
   b7fb6:	bf00      	nop
   b7fb8:	000c69b0 	.word	0x000c69b0

000b7fbc <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   b7fbc:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b7fbe:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   b7fc0:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b7fc2:	2200      	movs	r2, #0
   b7fc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7fc8:	2506      	movs	r5, #6
   b7fca:	2228      	movs	r2, #40	; 0x28
   b7fcc:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   b7fd0:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b7fd2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7fd6:	a806      	add	r0, sp, #24
   b7fd8:	f005 f87c 	bl	bd0d4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   b7fdc:	462a      	mov	r2, r5
   b7fde:	a904      	add	r1, sp, #16
   b7fe0:	a806      	add	r0, sp, #24
   b7fe2:	f005 f8f5 	bl	bd1d0 <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   b7fe6:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   b7fe8:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   b7fec:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   b7ff0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   b7ff4:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   b7ff6:	2d03      	cmp	r5, #3
   b7ff8:	bf98      	it	ls
   b7ffa:	4812      	ldrls	r0, [pc, #72]	; (b8044 <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   b7ffc:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   b7ffe:	ee07 1a10 	vmov	s14, r1
   b8002:	bf9c      	itt	ls
   b8004:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   b8008:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   b800c:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   b800e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   b8012:	bf88      	it	hi
   b8014:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   b8018:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   b801c:	ee07 2a10 	vmov	s14, r2
   b8020:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   b8024:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   b8028:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   b802c:	ee07 3a10 	vmov	s14, r3
   b8030:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   b8034:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   b8038:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b803c:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b8040:	b00d      	add	sp, #52	; 0x34
   b8042:	bd30      	pop	{r4, r5, pc}
   b8044:	000c6998 	.word	0x000c6998

000b8048 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   b8048:	b538      	push	{r3, r4, r5, lr}
   b804a:	460c      	mov	r4, r1
   b804c:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b804e:	2220      	movs	r2, #32
   b8050:	2100      	movs	r1, #0
   b8052:	1d20      	adds	r0, r4, #4
   b8054:	f00c f814 	bl	c4080 <memset>
  event->version = sizeof(sensors_event_t);
   b8058:	2324      	movs	r3, #36	; 0x24
   b805a:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b805c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b805e:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b8060:	2302      	movs	r3, #2
   b8062:	60a3      	str	r3, [r4, #8]
   b8064:	f005 fbfa 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   b8068:	6120      	str	r0, [r4, #16]
  read();
   b806a:	4628      	mov	r0, r5
   b806c:	f7ff ffa6 	bl	b7fbc <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b8070:	edd5 7a03 	vldr	s15, [r5, #12]
   b8074:	ed9f 7a09 	vldr	s14, [pc, #36]	; b809c <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   b8078:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   b807c:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b807e:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   b8082:	edd5 7a04 	vldr	s15, [r5, #16]
   b8086:	ee67 7a87 	vmul.f32	s15, s15, s14
   b808a:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   b808e:	edd5 7a05 	vldr	s15, [r5, #20]
   b8092:	ee67 7a87 	vmul.f32	s15, s15, s14
   b8096:	edc4 7a07 	vstr	s15, [r4, #28]
}
   b809a:	bd38      	pop	{r3, r4, r5, pc}
   b809c:	42c80000 	.word	0x42c80000

000b80a0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b80a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b80a2:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b80a4:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   b80a6:	2700      	movs	r7, #0
   b80a8:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b80ac:	2320      	movs	r3, #32
   b80ae:	9300      	str	r3, [sp, #0]
   b80b0:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b80b2:	460e      	mov	r6, r1
   b80b4:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   b80b6:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b80ba:	462b      	mov	r3, r5
   b80bc:	a808      	add	r0, sp, #32
   b80be:	f005 f809 	bl	bd0d4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   b80c2:	2305      	movs	r3, #5
   b80c4:	2202      	movs	r2, #2
   b80c6:	a908      	add	r1, sp, #32
   b80c8:	a804      	add	r0, sp, #16
   b80ca:	f005 f8df 	bl	bd28c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   b80ce:	4631      	mov	r1, r6
   b80d0:	a804      	add	r0, sp, #16
   b80d2:	f005 f8ed 	bl	bd2b0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   b80d6:	2323      	movs	r3, #35	; 0x23
   b80d8:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b80dc:	9300      	str	r3, [sp, #0]
   b80de:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b80e2:	462b      	mov	r3, r5
   b80e4:	9501      	str	r5, [sp, #4]
   b80e6:	a80e      	add	r0, sp, #56	; 0x38
   b80e8:	f004 fff4 	bl	bd0d4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   b80ec:	2302      	movs	r3, #2
   b80ee:	461a      	mov	r2, r3
   b80f0:	a90e      	add	r1, sp, #56	; 0x38
   b80f2:	a806      	add	r0, sp, #24
   b80f4:	f005 f8ca 	bl	bd28c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   b80f8:	4631      	mov	r1, r6
   b80fa:	a806      	add	r0, sp, #24
   b80fc:	f005 f8d8 	bl	bd2b0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b8100:	b015      	add	sp, #84	; 0x54
   b8102:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8104 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b8104:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b8106:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b8108:	b08c      	sub	sp, #48	; 0x30
   b810a:	4606      	mov	r6, r0
   b810c:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b810e:	d103      	bne.n	b8118 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b8110:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b8112:	f7ff ffc5 	bl	b80a0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   b8116:	e009      	b.n	b812c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   b8118:	2903      	cmp	r1, #3
   b811a:	d003      	beq.n	b8124 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   b811c:	2905      	cmp	r1, #5
   b811e:	d103      	bne.n	b8128 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b8120:	2101      	movs	r1, #1
   b8122:	e7f6      	b.n	b8112 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   b8124:	2102      	movs	r1, #2
   b8126:	e7f4      	b.n	b8112 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   b8128:	2907      	cmp	r1, #7
   b812a:	d01b      	beq.n	b8164 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   b812c:	200a      	movs	r0, #10
   b812e:	f005 fedf 	bl	bdef0 <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b8132:	2501      	movs	r5, #1
   b8134:	2300      	movs	r3, #0
   b8136:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b813a:	2320      	movs	r3, #32
   b813c:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   b8140:	9300      	str	r3, [sp, #0]
   b8142:	9501      	str	r5, [sp, #4]
   b8144:	462b      	mov	r3, r5
   b8146:	a806      	add	r0, sp, #24
   b8148:	f004 ffc4 	bl	bd0d4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   b814c:	462b      	mov	r3, r5
   b814e:	2204      	movs	r2, #4
   b8150:	a906      	add	r1, sp, #24
   b8152:	a804      	add	r0, sp, #16
   b8154:	f005 f89a 	bl	bd28c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   b8158:	4621      	mov	r1, r4
   b815a:	a804      	add	r0, sp, #16
   b815c:	f005 f8a8 	bl	bd2b0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b8160:	b00c      	add	sp, #48	; 0x30
   b8162:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b8164:	2100      	movs	r1, #0
   b8166:	e7d4      	b.n	b8112 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000b8168 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b8168:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   b816a:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b816c:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   b816e:	2500      	movs	r5, #0
   b8170:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b8174:	2222      	movs	r2, #34	; 0x22
   b8176:	9301      	str	r3, [sp, #4]
   b8178:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b817a:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   b817c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8180:	a806      	add	r0, sp, #24
   b8182:	f004 ffa7 	bl	bd0d4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   b8186:	462b      	mov	r3, r5
   b8188:	2202      	movs	r2, #2
   b818a:	a906      	add	r1, sp, #24
   b818c:	a804      	add	r0, sp, #16
   b818e:	f005 f87d 	bl	bd28c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   b8192:	4621      	mov	r1, r4
   b8194:	a804      	add	r0, sp, #16
   b8196:	f005 f88b 	bl	bd2b0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b819a:	b00d      	add	sp, #52	; 0x34
   b819c:	bd30      	pop	{r4, r5, pc}

000b819e <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b819e:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b81a0:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b81a2:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b81a4:	2200      	movs	r2, #0
   b81a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b81aa:	2221      	movs	r2, #33	; 0x21
   b81ac:	9301      	str	r3, [sp, #4]
   b81ae:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b81b0:	460d      	mov	r5, r1
   b81b2:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b81b4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b81b8:	a806      	add	r0, sp, #24
   b81ba:	f004 ff8b 	bl	bd0d4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b81be:	2305      	movs	r3, #5
   b81c0:	2202      	movs	r2, #2
   b81c2:	a906      	add	r1, sp, #24
   b81c4:	a804      	add	r0, sp, #16
   b81c6:	f005 f861 	bl	bd28c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   b81ca:	4629      	mov	r1, r5
   b81cc:	a804      	add	r0, sp, #16
   b81ce:	f005 f86f 	bl	bd2b0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   b81d2:	7625      	strb	r5, [r4, #24]
}
   b81d4:	b00d      	add	sp, #52	; 0x34
   b81d6:	bd30      	pop	{r4, r5, pc}

000b81d8 <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b81d8:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b81da:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b81dc:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   b81de:	2200      	movs	r2, #0
   b81e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b81e4:	2221      	movs	r2, #33	; 0x21
   b81e6:	9301      	str	r3, [sp, #4]
   b81e8:	9200      	str	r2, [sp, #0]
   b81ea:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b81ee:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b81f0:	a806      	add	r0, sp, #24
   b81f2:	f004 ff6f 	bl	bd0d4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b81f6:	2305      	movs	r3, #5
   b81f8:	2202      	movs	r2, #2
   b81fa:	a906      	add	r1, sp, #24
   b81fc:	a804      	add	r0, sp, #16
   b81fe:	f005 f845 	bl	bd28c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   b8202:	a804      	add	r0, sp, #16
   b8204:	f005 f847 	bl	bd296 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b8208:	b2c0      	uxtb	r0, r0
   b820a:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   b820c:	b00c      	add	sp, #48	; 0x30
   b820e:	bd10      	pop	{r4, pc}

000b8210 <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   b8210:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8212:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   b8214:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8216:	2501      	movs	r5, #1
   b8218:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b821c:	2321      	movs	r3, #33	; 0x21
   b821e:	9300      	str	r3, [sp, #0]
   b8220:	9501      	str	r5, [sp, #4]
   b8222:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   b8226:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8228:	462b      	mov	r3, r5
   b822a:	a806      	add	r0, sp, #24
   b822c:	f004 ff52 	bl	bd0d4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   b8230:	2302      	movs	r3, #2
   b8232:	462a      	mov	r2, r5
   b8234:	a906      	add	r1, sp, #24
   b8236:	a804      	add	r0, sp, #16
   b8238:	f005 f828 	bl	bd28c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   b823c:	4629      	mov	r1, r5
   b823e:	a804      	add	r0, sp, #16
   b8240:	f005 f836 	bl	bd2b0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   b8244:	200a      	movs	r0, #10
   b8246:	f005 fe53 	bl	bdef0 <delay>
  getRange();
   b824a:	4620      	mov	r0, r4
   b824c:	f7ff ffc4 	bl	b81d8 <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   b8250:	b00d      	add	sp, #52	; 0x34
   b8252:	bd30      	pop	{r4, r5, pc}

000b8254 <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   b8254:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   b8256:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   b8258:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   b825a:	2500      	movs	r5, #0
   b825c:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b8260:	230f      	movs	r3, #15
   b8262:	9300      	str	r3, [sp, #0]
   b8264:	9601      	str	r6, [sp, #4]
   b8266:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b826a:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   b826c:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   b826e:	a804      	add	r0, sp, #16
   b8270:	f004 ff30 	bl	bd0d4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   b8274:	a804      	add	r0, sp, #16
   b8276:	f004 ffed 	bl	bd254 <_ZN23Adafruit_BusIO_Register4readEv>
   b827a:	283d      	cmp	r0, #61	; 0x3d
   b827c:	d115      	bne.n	b82aa <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   b827e:	4620      	mov	r0, r4
   b8280:	f7ff ffc6 	bl	b8210 <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b8284:	2103      	movs	r1, #3
   b8286:	4620      	mov	r0, r4
   b8288:	f7ff ff0a 	bl	b80a0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   b828c:	4631      	mov	r1, r6
   b828e:	4620      	mov	r0, r4
   b8290:	f7ff ff38 	bl	b8104 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   b8294:	4629      	mov	r1, r5
   b8296:	4620      	mov	r0, r4
   b8298:	f7ff ff81 	bl	b819e <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b829c:	4620      	mov	r0, r4
   b829e:	4629      	mov	r1, r5
   b82a0:	f7ff ff62 	bl	b8168 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   b82a4:	4630      	mov	r0, r6
}
   b82a6:	b00a      	add	sp, #40	; 0x28
   b82a8:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b82aa:	4628      	mov	r0, r5
   b82ac:	e7fb      	b.n	b82a6 <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000b82ae <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b82ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b82b0:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b82b2:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b82b4:	b95b      	cbnz	r3, b82ce <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b82b6:	2010      	movs	r0, #16
   b82b8:	e9cd 1200 	strd	r1, r2, [sp]
   b82bc:	f7fb feeb 	bl	b4096 <_Znwj>
   b82c0:	4605      	mov	r5, r0
   b82c2:	b118      	cbz	r0, b82cc <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   b82c4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b82c8:	f005 f80b 	bl	bd2e2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b82cc:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   b82ce:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   b82d0:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   b82d2:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   b82d4:	2101      	movs	r1, #1
   b82d6:	f005 f820 	bl	bd31a <_ZN18Adafruit_I2CDevice5beginEb>
   b82da:	b128      	cbz	r0, b82e8 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   b82dc:	4620      	mov	r0, r4
}
   b82de:	b003      	add	sp, #12
   b82e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   b82e4:	f7ff bfb6 	b.w	b8254 <_ZN16Adafruit_LIS3MDL5_initEv>
}
   b82e8:	b003      	add	sp, #12
   b82ea:	bd30      	pop	{r4, r5, pc}

000b82ec <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b82ec:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   b82ee:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b82f0:	b08b      	sub	sp, #44	; 0x2c
   b82f2:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   b82f4:	2500      	movs	r5, #0
   b82f6:	2232      	movs	r2, #50	; 0x32
   b82f8:	2102      	movs	r1, #2
   b82fa:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b82fe:	e9cd 2100 	strd	r2, r1, [sp]
   b8302:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8306:	a804      	add	r0, sp, #16
   b8308:	f004 fee4 	bl	bd0d4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   b830c:	462a      	mov	r2, r5
   b830e:	f3c4 010e 	ubfx	r1, r4, #0, #15
   b8312:	a804      	add	r0, sp, #16
   b8314:	f004 ff3e 	bl	bd194 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b8318:	b00b      	add	sp, #44	; 0x2c
   b831a:	bd30      	pop	{r4, r5, pc}

000b831c <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   b831c:	b530      	push	{r4, r5, lr}
   b831e:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b8320:	2500      	movs	r5, #0
  value |= latch << 1;
   b8322:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   b8326:	0064      	lsls	r4, r4, #1
   b8328:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   b832c:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   b8330:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   b8334:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   b8338:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   b833c:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b8340:	2301      	movs	r3, #1
  value |= latch << 1;
   b8342:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b8346:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   b834a:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   b834c:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b834e:	2230      	movs	r2, #48	; 0x30
   b8350:	9301      	str	r3, [sp, #4]
   b8352:	9200      	str	r2, [sp, #0]
   b8354:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8358:	a804      	add	r0, sp, #16
   b835a:	f004 febb 	bl	bd0d4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   b835e:	462a      	mov	r2, r5
   b8360:	4621      	mov	r1, r4
   b8362:	a804      	add	r0, sp, #16
   b8364:	f004 ff16 	bl	bd194 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b8368:	b00b      	add	sp, #44	; 0x2c
   b836a:	bd30      	pop	{r4, r5, pc}

000b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b836c:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b836e:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b8370:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b8372:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b8374:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b8376:	041b      	lsls	r3, r3, #16
   b8378:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b837c:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b837e:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b8380:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b8384:	bd10      	pop	{r4, pc}

000b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b8386:	1843      	adds	r3, r0, r1
   b8388:	5c40      	ldrb	r0, [r0, r1]
   b838a:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b838c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b8390:	4770      	bx	lr

000b8392 <_ZN5Print5printImLi0EEEjT_i.isra.0>:
size_t Print::print(T n, int base)
   b8392:	b410      	push	{r4}
    if (base == 0) {
   b8394:	b92a      	cbnz	r2, b83a2 <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b8396:	6802      	ldr	r2, [r0, #0]
    }
}
   b8398:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b839c:	6892      	ldr	r2, [r2, #8]
   b839e:	b2c9      	uxtb	r1, r1
   b83a0:	4710      	bx	r2
}
   b83a2:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b83a6:	b2d2      	uxtb	r2, r2
   b83a8:	f008 bde7 	b.w	c0f7a <_ZN5Print11printNumberEmh>

000b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b83ac:	b912      	cbnz	r2, b83b4 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b83ae:	6803      	ldr	r3, [r0, #0]
   b83b0:	689b      	ldr	r3, [r3, #8]
   b83b2:	4718      	bx	r3
        return printNumber(val, base) + t;
   b83b4:	b2d2      	uxtb	r2, r2
   b83b6:	f008 bde0 	b.w	c0f7a <_ZN5Print11printNumberEmh>

000b83ba <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b83ba:	b510      	push	{r4, lr}
   b83bc:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b83be:	f7ff fff5 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b83c2:	4620      	mov	r0, r4
    }
   b83c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b83c8:	f008 bdbf 	b.w	c0f4a <_ZN5Print7printlnEv>

000b83cc <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b83cc:	6803      	ldr	r3, [r0, #0]
   b83ce:	b2c9      	uxtb	r1, r1
   b83d0:	689b      	ldr	r3, [r3, #8]
   b83d2:	4718      	bx	r3

000b83d4 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b83d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b83d8:	8002      	strh	r2, [r0, #0]
   b83da:	2142      	movs	r1, #66	; 0x42
   b83dc:	2200      	movs	r2, #0
   b83de:	b510      	push	{r4, lr}
   b83e0:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b83e4:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b83e8:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b83ec:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b83f0:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b83f4:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b83f8:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b83fc:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b8400:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b8404:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b8408:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b840c:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b8410:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b8414:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b8418:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b841c:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b8420:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b8424:	2180      	movs	r1, #128	; 0x80
   b8426:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b842a:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b842e:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b8432:	4925      	ldr	r1, [pc, #148]	; (b84c8 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b8434:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b8438:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b843c:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b8440:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b8444:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b8448:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b844c:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b8450:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b8454:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b8458:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b845c:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b8460:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b8464:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b8468:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b846c:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b8470:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b8474:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b8478:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b847c:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b8480:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b8484:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b8488:	4910      	ldr	r1, [pc, #64]	; (b84cc <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b848a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b848e:	f640 1164 	movw	r1, #2404	; 0x964
   b8492:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b8496:	2158      	movs	r1, #88	; 0x58
   b8498:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b849c:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b849e:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b84a2:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b84a6:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b84aa:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b84ae:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b84b2:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b84b6:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b84ba:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b84be:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b84c2:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b84c6:	bd10      	pop	{r4, pc}
   b84c8:	02020000 	.word	0x02020000
   b84cc:	64640200 	.word	0x64640200

000b84d0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b84d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b84d2:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b84d4:	460d      	mov	r5, r1
   b84d6:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b84da:	b9a9      	cbnz	r1, b8508 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b84dc:	b1a8      	cbz	r0, b850a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b84de:	f7fb fdde 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b84e2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b84e6:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b84ea:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b84ee:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b84f2:	b913      	cbnz	r3, b84fa <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b84f4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b84f8:	b123      	cbz	r3, b8504 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b84fa:	4920      	ldr	r1, [pc, #128]	; (b857c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b84fc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8500:	f008 fd39 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b8504:	2001      	movs	r0, #1
   b8506:	e011      	b.n	b852c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b8508:	b9b8      	cbnz	r0, b853a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b850a:	4628      	mov	r0, r5
   b850c:	f7fb fdc5 	bl	b409a <_Znaj>
   b8510:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b8514:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b8518:	bb60      	cbnz	r0, b8574 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b851a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b851e:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8522:	b923      	cbnz	r3, b852e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b8524:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8528:	b90b      	cbnz	r3, b852e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b852a:	2000      	movs	r0, #0
}
   b852c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b852e:	4914      	ldr	r1, [pc, #80]	; (b8580 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b8530:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8534:	f008 fd1f 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b8538:	e7f7      	b.n	b852a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b853a:	4608      	mov	r0, r1
   b853c:	f7fb fdad 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b8540:	4606      	mov	r6, r0
   b8542:	b940      	cbnz	r0, b8556 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8544:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8548:	b91b      	cbnz	r3, b8552 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b854a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b854e:	2b00      	cmp	r3, #0
   b8550:	d0eb      	beq.n	b852a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b8552:	490c      	ldr	r1, [pc, #48]	; (b8584 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b8554:	e7ec      	b.n	b8530 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b8556:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b855a:	42aa      	cmp	r2, r5
   b855c:	bf28      	it	cs
   b855e:	462a      	movcs	r2, r5
   b8560:	4639      	mov	r1, r7
   b8562:	f00b fd65 	bl	c4030 <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b8566:	4638      	mov	r0, r7
   b8568:	f7fb fd99 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b856c:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b8570:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b8574:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b8578:	e7c4      	b.n	b8504 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b857a:	bf00      	nop
   b857c:	000c69c4 	.word	0x000c69c4
   b8580:	000c69ef 	.word	0x000c69ef
   b8584:	000c6a1a 	.word	0x000c6a1a

000b8588 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b8588:	290d      	cmp	r1, #13
   b858a:	f000 80cd 	beq.w	b8728 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b858e:	d809      	bhi.n	b85a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b8590:	2902      	cmp	r1, #2
   b8592:	f000 80a7 	beq.w	b86e4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b8596:	2906      	cmp	r1, #6
   b8598:	f000 80be 	beq.w	b8718 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b859c:	2901      	cmp	r1, #1
   b859e:	d016      	beq.n	b85ce <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b85a0:	2000      	movs	r0, #0
}
   b85a2:	4770      	bx	lr
  switch (Class)
   b85a4:	2913      	cmp	r1, #19
   b85a6:	f000 80d4 	beq.w	b8752 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b85aa:	2928      	cmp	r1, #40	; 0x28
   b85ac:	f000 80dc 	beq.w	b8768 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b85b0:	2910      	cmp	r1, #16
   b85b2:	d1f5      	bne.n	b85a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b85b4:	2a10      	cmp	r2, #16
   b85b6:	f000 80c9 	beq.w	b874c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b85ba:	f200 80ba 	bhi.w	b8732 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b85be:	2a02      	cmp	r2, #2
   b85c0:	f000 80c1 	beq.w	b8746 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b85c4:	2a03      	cmp	r2, #3
   b85c6:	d1eb      	bne.n	b85a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b85c8:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b85cc:	e066      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b85ce:	2a26      	cmp	r2, #38	; 0x26
   b85d0:	d854      	bhi.n	b867c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b85d2:	2a00      	cmp	r2, #0
   b85d4:	d0e4      	beq.n	b85a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b85d6:	3a01      	subs	r2, #1
   b85d8:	2a25      	cmp	r2, #37	; 0x25
   b85da:	d8e1      	bhi.n	b85a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b85dc:	a301      	add	r3, pc, #4	; (adr r3, b85e4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b85de:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b85e2:	bf00      	nop
   b85e4:	000b869b 	.word	0x000b869b
   b85e8:	000b85a1 	.word	0x000b85a1
   b85ec:	000b86a5 	.word	0x000b86a5
   b85f0:	000b86a9 	.word	0x000b86a9
   b85f4:	000b86ad 	.word	0x000b86ad
   b85f8:	000b85a1 	.word	0x000b85a1
   b85fc:	000b86b1 	.word	0x000b86b1
   b8600:	000b85a1 	.word	0x000b85a1
   b8604:	000b86b5 	.word	0x000b86b5
   b8608:	000b85a1 	.word	0x000b85a1
   b860c:	000b85a1 	.word	0x000b85a1
   b8610:	000b85a1 	.word	0x000b85a1
   b8614:	000b85a1 	.word	0x000b85a1
   b8618:	000b85a1 	.word	0x000b85a1
   b861c:	000b85a1 	.word	0x000b85a1
   b8620:	000b85a1 	.word	0x000b85a1
   b8624:	000b86b9 	.word	0x000b86b9
   b8628:	000b86bd 	.word	0x000b86bd
   b862c:	000b86c1 	.word	0x000b86c1
   b8630:	000b86c5 	.word	0x000b86c5
   b8634:	000b85a1 	.word	0x000b85a1
   b8638:	000b85a1 	.word	0x000b85a1
   b863c:	000b86c9 	.word	0x000b86c9
   b8640:	000b85a1 	.word	0x000b85a1
   b8644:	000b85a1 	.word	0x000b85a1
   b8648:	000b85a1 	.word	0x000b85a1
   b864c:	000b85a1 	.word	0x000b85a1
   b8650:	000b85a1 	.word	0x000b85a1
   b8654:	000b85a1 	.word	0x000b85a1
   b8658:	000b85a1 	.word	0x000b85a1
   b865c:	000b85a1 	.word	0x000b85a1
   b8660:	000b85a1 	.word	0x000b85a1
   b8664:	000b86cd 	.word	0x000b86cd
   b8668:	000b86d1 	.word	0x000b86d1
   b866c:	000b85a1 	.word	0x000b85a1
   b8670:	000b85a1 	.word	0x000b85a1
   b8674:	000b85a1 	.word	0x000b85a1
   b8678:	000b86d5 	.word	0x000b86d5
   b867c:	2a3c      	cmp	r2, #60	; 0x3c
   b867e:	d02d      	beq.n	b86dc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b8680:	d805      	bhi.n	b868e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b8682:	2a35      	cmp	r2, #53	; 0x35
   b8684:	d028      	beq.n	b86d8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b8686:	2a3b      	cmp	r2, #59	; 0x3b
   b8688:	d18a      	bne.n	b85a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b868a:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b868c:	e006      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b868e:	2a60      	cmp	r2, #96	; 0x60
   b8690:	d026      	beq.n	b86e0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b8692:	2a61      	cmp	r2, #97	; 0x61
   b8694:	d184      	bne.n	b85a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b8696:	6980      	ldr	r0, [r0, #24]
   b8698:	e000      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b869a:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b869c:	3800      	subs	r0, #0
   b869e:	bf18      	it	ne
   b86a0:	2001      	movne	r0, #1
   b86a2:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b86a4:	6900      	ldr	r0, [r0, #16]
   b86a6:	e7f9      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b86a8:	6940      	ldr	r0, [r0, #20]
   b86aa:	e7f7      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b86ac:	69c0      	ldr	r0, [r0, #28]
   b86ae:	e7f5      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b86b0:	6a00      	ldr	r0, [r0, #32]
   b86b2:	e7f3      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b86b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b86b6:	e7f1      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b86b8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b86ba:	e7ef      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b86bc:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b86be:	e7ed      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b86c0:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b86c2:	e7eb      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b86c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b86c6:	e7e9      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b86c8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b86ca:	e7e7      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b86cc:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b86ce:	e7e5      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b86d0:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b86d2:	e7e3      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b86d4:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b86d6:	e7e1      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b86d8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b86da:	e7df      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b86dc:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b86de:	e7dd      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b86e0:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b86e2:	e7db      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b86e4:	2a34      	cmp	r2, #52	; 0x34
   b86e6:	d015      	beq.n	b8714 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b86e8:	d806      	bhi.n	b86f8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b86ea:	2a13      	cmp	r2, #19
   b86ec:	d00b      	beq.n	b8706 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b86ee:	2a15      	cmp	r2, #21
   b86f0:	f47f af56 	bne.w	b85a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b86f4:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b86f6:	e7d1      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b86f8:	2a72      	cmp	r2, #114	; 0x72
   b86fa:	d006      	beq.n	b870a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b86fc:	2a73      	cmp	r2, #115	; 0x73
   b86fe:	f47f af4f 	bne.w	b85a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b8702:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b8704:	e7ca      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b8706:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b8708:	e7c8      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b870a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b870c:	2b00      	cmp	r3, #0
   b870e:	d13b      	bne.n	b8788 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b8710:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b8712:	e7c3      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b8714:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b8716:	e7c1      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8718:	b122      	cbz	r2, b8724 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b871a:	2a08      	cmp	r2, #8
   b871c:	f47f af40 	bne.w	b85a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b8720:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b8722:	e7bb      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b8724:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b8726:	e7b9      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8728:	2a03      	cmp	r2, #3
   b872a:	f47f af39 	bne.w	b85a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b872e:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b8730:	e7b4      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8732:	2a14      	cmp	r2, #20
   b8734:	d005      	beq.n	b8742 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b8736:	2a15      	cmp	r2, #21
   b8738:	f47f af32 	bne.w	b85a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b873c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b8740:	e7ac      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b8742:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b8744:	e7aa      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b8746:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b874a:	e7a7      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b874c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b8750:	e7a4      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8752:	2a60      	cmp	r2, #96	; 0x60
   b8754:	d005      	beq.n	b8762 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b8756:	2a80      	cmp	r2, #128	; 0x80
   b8758:	f47f af22 	bne.w	b85a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b875c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b8760:	e79c      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b8762:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b8766:	e799      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8768:	2a01      	cmp	r2, #1
   b876a:	d007      	beq.n	b877c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b876c:	2a02      	cmp	r2, #2
   b876e:	d008      	beq.n	b8782 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b8770:	2a00      	cmp	r2, #0
   b8772:	f47f af15 	bne.w	b85a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b8776:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b877a:	e78f      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b877c:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b8780:	e78c      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b8782:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b8786:	e789      	b.n	b869c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b8788:	2001      	movs	r0, #1
   b878a:	4770      	bx	lr

000b878c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b878c:	290d      	cmp	r1, #13
   b878e:	d035      	beq.n	b87fc <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b8790:	d807      	bhi.n	b87a2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b8792:	2902      	cmp	r1, #2
   b8794:	d019      	beq.n	b87ca <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b8796:	2906      	cmp	r1, #6
   b8798:	d02a      	beq.n	b87f0 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b879a:	2901      	cmp	r1, #1
   b879c:	d00d      	beq.n	b87ba <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b879e:	2000      	movs	r0, #0
}
   b87a0:	4770      	bx	lr
  switch (Class)
   b87a2:	2913      	cmp	r1, #19
   b87a4:	d02f      	beq.n	b8806 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b87a6:	2928      	cmp	r1, #40	; 0x28
   b87a8:	d034      	beq.n	b8814 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b87aa:	2910      	cmp	r1, #16
   b87ac:	d1f7      	bne.n	b879e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b87ae:	3a02      	subs	r2, #2
   b87b0:	b2d2      	uxtb	r2, r2
   b87b2:	2a13      	cmp	r2, #19
   b87b4:	d8f3      	bhi.n	b879e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b87b6:	4b1f      	ldr	r3, [pc, #124]	; (b8834 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b87b8:	e004      	b.n	b87c4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b87ba:	3a01      	subs	r2, #1
   b87bc:	b2d2      	uxtb	r2, r2
   b87be:	2a60      	cmp	r2, #96	; 0x60
   b87c0:	d8ed      	bhi.n	b879e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b87c2:	4b1d      	ldr	r3, [pc, #116]	; (b8838 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b87c4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b87c8:	4770      	bx	lr
    switch (ID)
   b87ca:	2a34      	cmp	r2, #52	; 0x34
   b87cc:	d027      	beq.n	b881e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b87ce:	d807      	bhi.n	b87e0 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b87d0:	2a13      	cmp	r2, #19
   b87d2:	d026      	beq.n	b8822 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b87d4:	2a15      	cmp	r2, #21
   b87d6:	bf14      	ite	ne
   b87d8:	2000      	movne	r0, #0
   b87da:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b87de:	4770      	bx	lr
   b87e0:	2a72      	cmp	r2, #114	; 0x72
   b87e2:	d020      	beq.n	b8826 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b87e4:	2a73      	cmp	r2, #115	; 0x73
   b87e6:	bf14      	ite	ne
   b87e8:	2000      	movne	r0, #0
   b87ea:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b87ee:	4770      	bx	lr
    switch (ID)
   b87f0:	b1e2      	cbz	r2, b882c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b87f2:	2a08      	cmp	r2, #8
   b87f4:	bf14      	ite	ne
   b87f6:	2000      	movne	r0, #0
   b87f8:	2006      	moveq	r0, #6
   b87fa:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b87fc:	2a03      	cmp	r2, #3
   b87fe:	bf14      	ite	ne
   b8800:	2000      	movne	r0, #0
   b8802:	201c      	moveq	r0, #28
   b8804:	4770      	bx	lr
    switch (ID)
   b8806:	2a60      	cmp	r2, #96	; 0x60
   b8808:	d012      	beq.n	b8830 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b880a:	2a80      	cmp	r2, #128	; 0x80
   b880c:	bf14      	ite	ne
   b880e:	2000      	movne	r0, #0
   b8810:	20a4      	moveq	r0, #164	; 0xa4
   b8812:	4770      	bx	lr
    switch (ID)
   b8814:	2a02      	cmp	r2, #2
   b8816:	d8c2      	bhi.n	b879e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8818:	4b08      	ldr	r3, [pc, #32]	; (b883c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b881a:	5c98      	ldrb	r0, [r3, r2]
   b881c:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b881e:	200c      	movs	r0, #12
   b8820:	4770      	bx	lr
   b8822:	2048      	movs	r0, #72	; 0x48
   b8824:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b8826:	f44f 7004 	mov.w	r0, #528	; 0x210
   b882a:	4770      	bx	lr
   b882c:	2014      	movs	r0, #20
   b882e:	4770      	bx	lr
   b8830:	2008      	movs	r0, #8
   b8832:	4770      	bx	lr
   b8834:	000c76b2 	.word	0x000c76b2
   b8838:	000c75f0 	.word	0x000c75f0
   b883c:	000c76da 	.word	0x000c76da

000b8840 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b8840:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b8842:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b8846:	07ca      	lsls	r2, r1, #31
   b8848:	d415      	bmi.n	b8876 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b884a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b884e:	4b59      	ldr	r3, [pc, #356]	; (b89b4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b8850:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8854:	429a      	cmp	r2, r3
   b8856:	d101      	bne.n	b885c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b8858:	078b      	lsls	r3, r1, #30
   b885a:	d40c      	bmi.n	b8876 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b885c:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8860:	2b47      	cmp	r3, #71	; 0x47
   b8862:	d174      	bne.n	b894e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b8864:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8868:	f245 1441 	movw	r4, #20801	; 0x5141
   b886c:	42a3      	cmp	r3, r4
   b886e:	d104      	bne.n	b887a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b8870:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8874:	d06b      	beq.n	b894e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b8876:	2001      	movs	r0, #1
   b8878:	e070      	b.n	b895c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b887a:	f245 1442 	movw	r4, #20802	; 0x5142
   b887e:	42a3      	cmp	r3, r4
   b8880:	d102      	bne.n	b8888 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b8882:	f011 0f08 	tst.w	r1, #8
   b8886:	e7f5      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b8888:	f245 3442 	movw	r4, #21314	; 0x5342
   b888c:	42a3      	cmp	r3, r4
   b888e:	d102      	bne.n	b8896 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b8890:	f011 0f10 	tst.w	r1, #16
   b8894:	e7ee      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b8896:	f244 1447 	movw	r4, #16711	; 0x4147
   b889a:	42a3      	cmp	r3, r4
   b889c:	d102      	bne.n	b88a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b889e:	f011 0f20 	tst.w	r1, #32
   b88a2:	e7e7      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b88a4:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b88a8:	42a3      	cmp	r3, r4
   b88aa:	d102      	bne.n	b88b2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b88ac:	f011 0f40 	tst.w	r1, #64	; 0x40
   b88b0:	e7e0      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b88b2:	f245 144c 	movw	r4, #20812	; 0x514c
   b88b6:	42a3      	cmp	r3, r4
   b88b8:	d102      	bne.n	b88c0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b88ba:	f011 0f80 	tst.w	r1, #128	; 0x80
   b88be:	e7d9      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b88c0:	f245 114e 	movw	r1, #20814	; 0x514e
   b88c4:	428b      	cmp	r3, r1
   b88c6:	d104      	bne.n	b88d2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b88c8:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b88cc:	f013 0f01 	tst.w	r3, #1
   b88d0:	e7d0      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b88d2:	f245 314e 	movw	r1, #21326	; 0x534e
   b88d6:	428b      	cmp	r3, r1
   b88d8:	d104      	bne.n	b88e4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b88da:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b88de:	f013 0f02 	tst.w	r3, #2
   b88e2:	e7c7      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b88e4:	f245 1150 	movw	r1, #20816	; 0x5150
   b88e8:	428b      	cmp	r3, r1
   b88ea:	d104      	bne.n	b88f6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b88ec:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b88f0:	f013 0f04 	tst.w	r3, #4
   b88f4:	e7be      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b88f6:	f245 1151 	movw	r1, #20817	; 0x5151
   b88fa:	428b      	cmp	r3, r1
   b88fc:	d104      	bne.n	b8908 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b88fe:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8902:	f013 0f08 	tst.w	r3, #8
   b8906:	e7b5      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b8908:	f245 3152 	movw	r1, #21330	; 0x5352
   b890c:	428b      	cmp	r3, r1
   b890e:	d104      	bne.n	b891a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b8910:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8914:	f013 0f10 	tst.w	r3, #16
   b8918:	e7ac      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b891a:	f244 1153 	movw	r1, #16723	; 0x4153
   b891e:	428b      	cmp	r3, r1
   b8920:	d104      	bne.n	b892c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b8922:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8926:	f013 0f20 	tst.w	r3, #32
   b892a:	e7a3      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b892c:	f245 4153 	movw	r1, #21587	; 0x5453
   b8930:	428b      	cmp	r3, r1
   b8932:	d104      	bne.n	b893e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b8934:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8938:	f013 0f40 	tst.w	r3, #64	; 0x40
   b893c:	e79a      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b893e:	f245 6153 	movw	r1, #22099	; 0x5653
   b8942:	428b      	cmp	r3, r1
   b8944:	d103      	bne.n	b894e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b8946:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b894a:	2b00      	cmp	r3, #0
   b894c:	db93      	blt.n	b8876 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b894e:	4b1a      	ldr	r3, [pc, #104]	; (b89b8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b8950:	429a      	cmp	r2, r3
   b8952:	d104      	bne.n	b895e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b8954:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8958:	f000 0001 	and.w	r0, r0, #1
}
   b895c:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b895e:	4b17      	ldr	r3, [pc, #92]	; (b89bc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b8960:	429a      	cmp	r2, r3
   b8962:	d104      	bne.n	b896e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b8964:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8968:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b896c:	e7f6      	b.n	b895c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b896e:	4b14      	ldr	r3, [pc, #80]	; (b89c0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b8970:	429a      	cmp	r2, r3
   b8972:	d104      	bne.n	b897e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b8974:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8978:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b897c:	e7ee      	b.n	b895c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b897e:	4b11      	ldr	r3, [pc, #68]	; (b89c4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b8980:	429a      	cmp	r2, r3
   b8982:	d104      	bne.n	b898e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b8984:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8988:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b898c:	e7e6      	b.n	b895c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b898e:	4b0e      	ldr	r3, [pc, #56]	; (b89c8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b8990:	429a      	cmp	r2, r3
   b8992:	d104      	bne.n	b899e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b8994:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8998:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b899c:	e7de      	b.n	b895c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b899e:	4b0b      	ldr	r3, [pc, #44]	; (b89cc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b89a0:	429a      	cmp	r2, r3
   b89a2:	d104      	bne.n	b89ae <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b89a4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b89a8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b89ac:	e7d6      	b.n	b895c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b89ae:	2000      	movs	r0, #0
   b89b0:	e7d4      	b.n	b895c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b89b2:	bf00      	nop
   b89b4:	4d544400 	.word	0x4d544400
   b89b8:	4d4c5200 	.word	0x4d4c5200
   b89bc:	434d5200 	.word	0x434d5200
   b89c0:	54585400 	.word	0x54585400
   b89c4:	574c5600 	.word	0x574c5600
   b89c8:	47545600 	.word	0x47545600
   b89cc:	41445a00 	.word	0x41445a00

000b89d0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b89d0:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b89d4:	2b2a      	cmp	r3, #42	; 0x2a
   b89d6:	d157      	bne.n	b8a88 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b89d8:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b89dc:	2b47      	cmp	r3, #71	; 0x47
   b89de:	d153      	bne.n	b8a88 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b89e0:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b89e4:	4a29      	ldr	r2, [pc, #164]	; (b8a8c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b89e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b89ea:	4293      	cmp	r3, r2
   b89ec:	d011      	beq.n	b8a12 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b89ee:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b89f2:	2a47      	cmp	r2, #71	; 0x47
   b89f4:	d11a      	bne.n	b8a2c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b89f6:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b89fa:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b89fe:	3941      	subs	r1, #65	; 0x41
   b8a00:	b289      	uxth	r1, r1
   b8a02:	2910      	cmp	r1, #16
   b8a04:	d907      	bls.n	b8a16 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b8a06:	f022 0110 	bic.w	r1, r2, #16
   b8a0a:	f245 3042 	movw	r0, #21314	; 0x5342
   b8a0e:	4281      	cmp	r1, r0
   b8a10:	d129      	bne.n	b8a66 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b8a12:	2001      	movs	r0, #1
}
   b8a14:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8a16:	481e      	ldr	r0, [pc, #120]	; (b8a90 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b8a18:	fa20 f101 	lsr.w	r1, r0, r1
   b8a1c:	07c9      	lsls	r1, r1, #31
   b8a1e:	d4f8      	bmi.n	b8a12 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b8a20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b8a24:	f245 4153 	movw	r1, #21587	; 0x5453
   b8a28:	428a      	cmp	r2, r1
   b8a2a:	d0f2      	beq.n	b8a12 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b8a2c:	4a19      	ldr	r2, [pc, #100]	; (b8a94 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b8a2e:	4293      	cmp	r3, r2
   b8a30:	d0ef      	beq.n	b8a12 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b8a32:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b8a36:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b8a3a:	4293      	cmp	r3, r2
   b8a3c:	d0e9      	beq.n	b8a12 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b8a3e:	4a16      	ldr	r2, [pc, #88]	; (b8a98 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b8a40:	4293      	cmp	r3, r2
   b8a42:	d0e6      	beq.n	b8a12 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b8a44:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b8a48:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b8a4c:	4293      	cmp	r3, r2
   b8a4e:	d0e0      	beq.n	b8a12 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b8a50:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b8a54:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b8a58:	4293      	cmp	r3, r2
   b8a5a:	d0da      	beq.n	b8a12 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b8a5c:	480f      	ldr	r0, [pc, #60]	; (b8a9c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b8a5e:	1a1b      	subs	r3, r3, r0
   b8a60:	4258      	negs	r0, r3
   b8a62:	4158      	adcs	r0, r3
   b8a64:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b8a66:	f244 1147 	movw	r1, #16711	; 0x4147
   b8a6a:	428a      	cmp	r2, r1
   b8a6c:	d0d1      	beq.n	b8a12 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b8a6e:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b8a72:	428a      	cmp	r2, r1
   b8a74:	d0cd      	beq.n	b8a12 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b8a76:	f245 314e 	movw	r1, #21326	; 0x534e
   b8a7a:	428a      	cmp	r2, r1
   b8a7c:	d0c9      	beq.n	b8a12 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b8a7e:	f244 1153 	movw	r1, #16723	; 0x4153
   b8a82:	428a      	cmp	r2, r1
   b8a84:	d0c5      	beq.n	b8a12 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b8a86:	e7cb      	b.n	b8a20 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b8a88:	2000      	movs	r0, #0
   b8a8a:	4770      	bx	lr
   b8a8c:	4d544400 	.word	0x4d544400
   b8a90:	0001a803 	.word	0x0001a803
   b8a94:	4d4c5200 	.word	0x4d4c5200
   b8a98:	54585400 	.word	0x54585400
   b8a9c:	41445a00 	.word	0x41445a00

000b8aa0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b8aa0:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b8aa2:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b8aa6:	07ca      	lsls	r2, r1, #31
   b8aa8:	d415      	bmi.n	b8ad6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b8aaa:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b8aae:	4b59      	ldr	r3, [pc, #356]	; (b8c14 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b8ab0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8ab4:	429a      	cmp	r2, r3
   b8ab6:	d101      	bne.n	b8abc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b8ab8:	078b      	lsls	r3, r1, #30
   b8aba:	d40c      	bmi.n	b8ad6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b8abc:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8ac0:	2b47      	cmp	r3, #71	; 0x47
   b8ac2:	d174      	bne.n	b8bae <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b8ac4:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8ac8:	f245 1441 	movw	r4, #20801	; 0x5141
   b8acc:	42a3      	cmp	r3, r4
   b8ace:	d104      	bne.n	b8ada <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b8ad0:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8ad4:	d06b      	beq.n	b8bae <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b8ad6:	2001      	movs	r0, #1
   b8ad8:	e070      	b.n	b8bbc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b8ada:	f245 1442 	movw	r4, #20802	; 0x5142
   b8ade:	42a3      	cmp	r3, r4
   b8ae0:	d102      	bne.n	b8ae8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b8ae2:	f011 0f08 	tst.w	r1, #8
   b8ae6:	e7f5      	b.n	b8ad4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b8ae8:	f245 3442 	movw	r4, #21314	; 0x5342
   b8aec:	42a3      	cmp	r3, r4
   b8aee:	d102      	bne.n	b8af6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b8af0:	f011 0f10 	tst.w	r1, #16
   b8af4:	e7ee      	b.n	b8ad4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b8af6:	f244 1447 	movw	r4, #16711	; 0x4147
   b8afa:	42a3      	cmp	r3, r4
   b8afc:	d102      	bne.n	b8b04 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b8afe:	f011 0f20 	tst.w	r1, #32
   b8b02:	e7e7      	b.n	b8ad4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b8b04:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8b08:	42a3      	cmp	r3, r4
   b8b0a:	d102      	bne.n	b8b12 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b8b0c:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8b10:	e7e0      	b.n	b8ad4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b8b12:	f245 144c 	movw	r4, #20812	; 0x514c
   b8b16:	42a3      	cmp	r3, r4
   b8b18:	d102      	bne.n	b8b20 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b8b1a:	f011 0f80 	tst.w	r1, #128	; 0x80
   b8b1e:	e7d9      	b.n	b8ad4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b8b20:	f245 114e 	movw	r1, #20814	; 0x514e
   b8b24:	428b      	cmp	r3, r1
   b8b26:	d104      	bne.n	b8b32 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b8b28:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8b2c:	f013 0f01 	tst.w	r3, #1
   b8b30:	e7d0      	b.n	b8ad4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b8b32:	f245 314e 	movw	r1, #21326	; 0x534e
   b8b36:	428b      	cmp	r3, r1
   b8b38:	d104      	bne.n	b8b44 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b8b3a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8b3e:	f013 0f02 	tst.w	r3, #2
   b8b42:	e7c7      	b.n	b8ad4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b8b44:	f245 1150 	movw	r1, #20816	; 0x5150
   b8b48:	428b      	cmp	r3, r1
   b8b4a:	d104      	bne.n	b8b56 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b8b4c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8b50:	f013 0f04 	tst.w	r3, #4
   b8b54:	e7be      	b.n	b8ad4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b8b56:	f245 1151 	movw	r1, #20817	; 0x5151
   b8b5a:	428b      	cmp	r3, r1
   b8b5c:	d104      	bne.n	b8b68 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b8b5e:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8b62:	f013 0f08 	tst.w	r3, #8
   b8b66:	e7b5      	b.n	b8ad4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b8b68:	f245 3152 	movw	r1, #21330	; 0x5352
   b8b6c:	428b      	cmp	r3, r1
   b8b6e:	d104      	bne.n	b8b7a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b8b70:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8b74:	f013 0f10 	tst.w	r3, #16
   b8b78:	e7ac      	b.n	b8ad4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b8b7a:	f244 1153 	movw	r1, #16723	; 0x4153
   b8b7e:	428b      	cmp	r3, r1
   b8b80:	d104      	bne.n	b8b8c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b8b82:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8b86:	f013 0f20 	tst.w	r3, #32
   b8b8a:	e7a3      	b.n	b8ad4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8b8c:	f245 4153 	movw	r1, #21587	; 0x5453
   b8b90:	428b      	cmp	r3, r1
   b8b92:	d104      	bne.n	b8b9e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b8b94:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8b98:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8b9c:	e79a      	b.n	b8ad4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b8b9e:	f245 6153 	movw	r1, #22099	; 0x5653
   b8ba2:	428b      	cmp	r3, r1
   b8ba4:	d103      	bne.n	b8bae <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b8ba6:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b8baa:	2b00      	cmp	r3, #0
   b8bac:	db93      	blt.n	b8ad6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b8bae:	4b1a      	ldr	r3, [pc, #104]	; (b8c18 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b8bb0:	429a      	cmp	r2, r3
   b8bb2:	d104      	bne.n	b8bbe <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b8bb4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8bb8:	f000 0001 	and.w	r0, r0, #1
}
   b8bbc:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b8bbe:	4b17      	ldr	r3, [pc, #92]	; (b8c1c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b8bc0:	429a      	cmp	r2, r3
   b8bc2:	d104      	bne.n	b8bce <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b8bc4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8bc8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b8bcc:	e7f6      	b.n	b8bbc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b8bce:	4b14      	ldr	r3, [pc, #80]	; (b8c20 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b8bd0:	429a      	cmp	r2, r3
   b8bd2:	d104      	bne.n	b8bde <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b8bd4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8bd8:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b8bdc:	e7ee      	b.n	b8bbc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b8bde:	4b11      	ldr	r3, [pc, #68]	; (b8c24 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b8be0:	429a      	cmp	r2, r3
   b8be2:	d104      	bne.n	b8bee <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b8be4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8be8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b8bec:	e7e6      	b.n	b8bbc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b8bee:	4b0e      	ldr	r3, [pc, #56]	; (b8c28 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b8bf0:	429a      	cmp	r2, r3
   b8bf2:	d104      	bne.n	b8bfe <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b8bf4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8bf8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b8bfc:	e7de      	b.n	b8bbc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b8bfe:	4b0b      	ldr	r3, [pc, #44]	; (b8c2c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b8c00:	429a      	cmp	r2, r3
   b8c02:	d104      	bne.n	b8c0e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b8c04:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8c08:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b8c0c:	e7d6      	b.n	b8bbc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b8c0e:	2000      	movs	r0, #0
   b8c10:	e7d4      	b.n	b8bbc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b8c12:	bf00      	nop
   b8c14:	4d544400 	.word	0x4d544400
   b8c18:	4d4c5200 	.word	0x4d4c5200
   b8c1c:	434d5200 	.word	0x434d5200
   b8c20:	54585400 	.word	0x54585400
   b8c24:	574c5600 	.word	0x574c5600
   b8c28:	47545600 	.word	0x47545600
   b8c2c:	41445a00 	.word	0x41445a00

000b8c30 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b8c30:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b8c34:	b110      	cbz	r0, b8c3c <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b8c36:	6803      	ldr	r3, [r0, #0]
   b8c38:	689b      	ldr	r3, [r3, #8]
   b8c3a:	4718      	bx	r3
}
   b8c3c:	4770      	bx	lr
	...

000b8c40 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b8c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8c42:	4b3d      	ldr	r3, [pc, #244]	; (b8d38 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b8c44:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c46:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8c4a:	6818      	ldr	r0, [r3, #0]
   b8c4c:	9000      	str	r0, [sp, #0]
   b8c4e:	889b      	ldrh	r3, [r3, #4]
   b8c50:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c54:	2205      	movs	r2, #5
   b8c56:	4629      	mov	r1, r5
   b8c58:	4668      	mov	r0, sp
   b8c5a:	f00b f9d9 	bl	c4010 <memcmp>
   b8c5e:	b928      	cbnz	r0, b8c6c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b8c60:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8c64:	b113      	cbz	r3, b8c6c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b8c66:	2001      	movs	r0, #1
}
   b8c68:	b003      	add	sp, #12
   b8c6a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8c6c:	4933      	ldr	r1, [pc, #204]	; (b8d3c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b8c6e:	4668      	mov	r0, sp
   b8c70:	f00b fa6c 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c74:	2205      	movs	r2, #5
   b8c76:	4629      	mov	r1, r5
   b8c78:	4668      	mov	r0, sp
   b8c7a:	f00b f9c9 	bl	c4010 <memcmp>
   b8c7e:	b918      	cbnz	r0, b8c88 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b8c80:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8c84:	2b00      	cmp	r3, #0
   b8c86:	d1ee      	bne.n	b8c66 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b8c88:	492d      	ldr	r1, [pc, #180]	; (b8d40 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b8c8a:	4668      	mov	r0, sp
   b8c8c:	f00b fa5e 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c90:	2205      	movs	r2, #5
   b8c92:	4629      	mov	r1, r5
   b8c94:	4668      	mov	r0, sp
   b8c96:	f00b f9bb 	bl	c4010 <memcmp>
   b8c9a:	b918      	cbnz	r0, b8ca4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b8c9c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8ca0:	2b00      	cmp	r3, #0
   b8ca2:	d1e0      	bne.n	b8c66 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b8ca4:	4927      	ldr	r1, [pc, #156]	; (b8d44 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b8ca6:	4668      	mov	r0, sp
   b8ca8:	f00b fa50 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cac:	2205      	movs	r2, #5
   b8cae:	4629      	mov	r1, r5
   b8cb0:	4668      	mov	r0, sp
   b8cb2:	f00b f9ad 	bl	c4010 <memcmp>
   b8cb6:	b918      	cbnz	r0, b8cc0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b8cb8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8cbc:	2b00      	cmp	r3, #0
   b8cbe:	d1d2      	bne.n	b8c66 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b8cc0:	4921      	ldr	r1, [pc, #132]	; (b8d48 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b8cc2:	4668      	mov	r0, sp
   b8cc4:	f00b fa42 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cc8:	2205      	movs	r2, #5
   b8cca:	4629      	mov	r1, r5
   b8ccc:	4668      	mov	r0, sp
   b8cce:	f00b f99f 	bl	c4010 <memcmp>
   b8cd2:	b918      	cbnz	r0, b8cdc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b8cd4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8cd8:	2b00      	cmp	r3, #0
   b8cda:	d1c4      	bne.n	b8c66 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b8cdc:	491b      	ldr	r1, [pc, #108]	; (b8d4c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b8cde:	4668      	mov	r0, sp
   b8ce0:	f00b fa34 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ce4:	2205      	movs	r2, #5
   b8ce6:	4629      	mov	r1, r5
   b8ce8:	4668      	mov	r0, sp
   b8cea:	f00b f991 	bl	c4010 <memcmp>
   b8cee:	b918      	cbnz	r0, b8cf8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b8cf0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8cf4:	2b00      	cmp	r3, #0
   b8cf6:	d1b6      	bne.n	b8c66 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b8cf8:	4915      	ldr	r1, [pc, #84]	; (b8d50 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b8cfa:	4668      	mov	r0, sp
   b8cfc:	f00b fa26 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d00:	2205      	movs	r2, #5
   b8d02:	4629      	mov	r1, r5
   b8d04:	4668      	mov	r0, sp
   b8d06:	f00b f983 	bl	c4010 <memcmp>
   b8d0a:	b918      	cbnz	r0, b8d14 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b8d0c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8d10:	2b00      	cmp	r3, #0
   b8d12:	d1a8      	bne.n	b8c66 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8d14:	490f      	ldr	r1, [pc, #60]	; (b8d54 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b8d16:	4668      	mov	r0, sp
   b8d18:	f00b fa18 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d1c:	2205      	movs	r2, #5
   b8d1e:	4629      	mov	r1, r5
   b8d20:	4668      	mov	r0, sp
   b8d22:	f00b f975 	bl	c4010 <memcmp>
   b8d26:	b928      	cbnz	r0, b8d34 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b8d28:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8d2c:	3800      	subs	r0, #0
   b8d2e:	bf18      	it	ne
   b8d30:	2001      	movne	r0, #1
   b8d32:	e799      	b.n	b8c68 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b8d34:	2000      	movs	r0, #0
   b8d36:	e797      	b.n	b8c68 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b8d38:	000c6a70 	.word	0x000c6a70
   b8d3c:	000c6a46 	.word	0x000c6a46
   b8d40:	000c6a4c 	.word	0x000c6a4c
   b8d44:	000c6a52 	.word	0x000c6a52
   b8d48:	000c6a58 	.word	0x000c6a58
   b8d4c:	000c6a5e 	.word	0x000c6a5e
   b8d50:	000c6a64 	.word	0x000c6a64
   b8d54:	000c6a6a 	.word	0x000c6a6a

000b8d58 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b8d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8d5a:	4b62      	ldr	r3, [pc, #392]	; (b8ee4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b8d5c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d5e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8d62:	6818      	ldr	r0, [r3, #0]
   b8d64:	9000      	str	r0, [sp, #0]
   b8d66:	889b      	ldrh	r3, [r3, #4]
   b8d68:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d6c:	2205      	movs	r2, #5
   b8d6e:	4629      	mov	r1, r5
   b8d70:	4668      	mov	r0, sp
   b8d72:	f00b f94d 	bl	c4010 <memcmp>
   b8d76:	b978      	cbnz	r0, b8d98 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b8d78:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8d7c:	b163      	cbz	r3, b8d98 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b8d7e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8d82:	b14a      	cbz	r2, b8d98 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b8d84:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8d88:	2a00      	cmp	r2, #0
   b8d8a:	f040 80a3 	bne.w	b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8d8e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8d92:	2b00      	cmp	r3, #0
   b8d94:	f040 809e 	bne.w	b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b8d98:	4953      	ldr	r1, [pc, #332]	; (b8ee8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b8d9a:	4668      	mov	r0, sp
   b8d9c:	f00b f9d6 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8da0:	2205      	movs	r2, #5
   b8da2:	4629      	mov	r1, r5
   b8da4:	4668      	mov	r0, sp
   b8da6:	f00b f933 	bl	c4010 <memcmp>
   b8daa:	b978      	cbnz	r0, b8dcc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b8dac:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8db0:	b163      	cbz	r3, b8dcc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b8db2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8db6:	b14a      	cbz	r2, b8dcc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b8db8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8dbc:	2a00      	cmp	r2, #0
   b8dbe:	f040 8089 	bne.w	b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8dc2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8dc6:	2b00      	cmp	r3, #0
   b8dc8:	f040 8084 	bne.w	b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b8dcc:	4947      	ldr	r1, [pc, #284]	; (b8eec <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b8dce:	4668      	mov	r0, sp
   b8dd0:	f00b f9bc 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dd4:	2205      	movs	r2, #5
   b8dd6:	4629      	mov	r1, r5
   b8dd8:	4668      	mov	r0, sp
   b8dda:	f00b f919 	bl	c4010 <memcmp>
   b8dde:	b968      	cbnz	r0, b8dfc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b8de0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8de4:	b153      	cbz	r3, b8dfc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b8de6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8dea:	b13a      	cbz	r2, b8dfc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b8dec:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8df0:	2a00      	cmp	r2, #0
   b8df2:	d16f      	bne.n	b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8df4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8df8:	2b00      	cmp	r3, #0
   b8dfa:	d16b      	bne.n	b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b8dfc:	493c      	ldr	r1, [pc, #240]	; (b8ef0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b8dfe:	4668      	mov	r0, sp
   b8e00:	f00b f9a4 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e04:	2205      	movs	r2, #5
   b8e06:	4629      	mov	r1, r5
   b8e08:	4668      	mov	r0, sp
   b8e0a:	f00b f901 	bl	c4010 <memcmp>
   b8e0e:	b968      	cbnz	r0, b8e2c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b8e10:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8e14:	b153      	cbz	r3, b8e2c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b8e16:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8e1a:	b13a      	cbz	r2, b8e2c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b8e1c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8e20:	2a00      	cmp	r2, #0
   b8e22:	d157      	bne.n	b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8e24:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8e28:	2b00      	cmp	r3, #0
   b8e2a:	d153      	bne.n	b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b8e2c:	4931      	ldr	r1, [pc, #196]	; (b8ef4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b8e2e:	4668      	mov	r0, sp
   b8e30:	f00b f98c 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e34:	2205      	movs	r2, #5
   b8e36:	4629      	mov	r1, r5
   b8e38:	4668      	mov	r0, sp
   b8e3a:	f00b f8e9 	bl	c4010 <memcmp>
   b8e3e:	b968      	cbnz	r0, b8e5c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b8e40:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8e44:	b153      	cbz	r3, b8e5c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b8e46:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8e4a:	b13a      	cbz	r2, b8e5c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b8e4c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8e50:	2a00      	cmp	r2, #0
   b8e52:	d13f      	bne.n	b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8e54:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8e58:	2b00      	cmp	r3, #0
   b8e5a:	d13b      	bne.n	b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b8e5c:	4926      	ldr	r1, [pc, #152]	; (b8ef8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b8e5e:	4668      	mov	r0, sp
   b8e60:	f00b f974 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e64:	2205      	movs	r2, #5
   b8e66:	4629      	mov	r1, r5
   b8e68:	4668      	mov	r0, sp
   b8e6a:	f00b f8d1 	bl	c4010 <memcmp>
   b8e6e:	b958      	cbnz	r0, b8e88 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b8e70:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8e74:	b143      	cbz	r3, b8e88 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b8e76:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8e7a:	b12a      	cbz	r2, b8e88 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b8e7c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8e80:	bb42      	cbnz	r2, b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8e82:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8e86:	bb2b      	cbnz	r3, b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b8e88:	491c      	ldr	r1, [pc, #112]	; (b8efc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b8e8a:	4668      	mov	r0, sp
   b8e8c:	f00b f95e 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e90:	2205      	movs	r2, #5
   b8e92:	4629      	mov	r1, r5
   b8e94:	4668      	mov	r0, sp
   b8e96:	f00b f8bb 	bl	c4010 <memcmp>
   b8e9a:	b940      	cbnz	r0, b8eae <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b8e9c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8ea0:	b12b      	cbz	r3, b8eae <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b8ea2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b8ea4:	b11a      	cbz	r2, b8eae <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b8ea6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b8ea8:	b9a2      	cbnz	r2, b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8eac:	b993      	cbnz	r3, b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b8eae:	4914      	ldr	r1, [pc, #80]	; (b8f00 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b8eb0:	4668      	mov	r0, sp
   b8eb2:	f00b f94b 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8eb6:	2205      	movs	r2, #5
   b8eb8:	4629      	mov	r1, r5
   b8eba:	4668      	mov	r0, sp
   b8ebc:	f00b f8a8 	bl	c4010 <memcmp>
   b8ec0:	b958      	cbnz	r0, b8eda <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b8ec2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8ec6:	b153      	cbz	r3, b8ede <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b8ec8:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8eca:	b120      	cbz	r0, b8ed6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b8ecc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b8ece:	b90a      	cbnz	r2, b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8ed0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b8ed2:	b100      	cbz	r0, b8ed6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b8ed4:	2001      	movs	r0, #1
}
   b8ed6:	b003      	add	sp, #12
   b8ed8:	bd30      	pop	{r4, r5, pc}
  return false;
   b8eda:	2000      	movs	r0, #0
   b8edc:	e7fb      	b.n	b8ed6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b8ede:	4618      	mov	r0, r3
   b8ee0:	e7f9      	b.n	b8ed6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b8ee2:	bf00      	nop
   b8ee4:	000c6a70 	.word	0x000c6a70
   b8ee8:	000c6a46 	.word	0x000c6a46
   b8eec:	000c6a4c 	.word	0x000c6a4c
   b8ef0:	000c6a52 	.word	0x000c6a52
   b8ef4:	000c6a58 	.word	0x000c6a58
   b8ef8:	000c6a5e 	.word	0x000c6a5e
   b8efc:	000c6a64 	.word	0x000c6a64
   b8f00:	000c6a6a 	.word	0x000c6a6a

000b8f04 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b8f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8f06:	4b38      	ldr	r3, [pc, #224]	; (b8fe8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b8f08:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f0a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8f0e:	6818      	ldr	r0, [r3, #0]
   b8f10:	9000      	str	r0, [sp, #0]
   b8f12:	889b      	ldrh	r3, [r3, #4]
   b8f14:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f18:	2205      	movs	r2, #5
   b8f1a:	4629      	mov	r1, r5
   b8f1c:	4668      	mov	r0, sp
   b8f1e:	f00b f877 	bl	c4010 <memcmp>
   b8f22:	b920      	cbnz	r0, b8f2e <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b8f24:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b8f28:	3001      	adds	r0, #1
}
   b8f2a:	b003      	add	sp, #12
   b8f2c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8f2e:	492f      	ldr	r1, [pc, #188]	; (b8fec <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b8f30:	4668      	mov	r0, sp
   b8f32:	f00b f90b 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f36:	2205      	movs	r2, #5
   b8f38:	4629      	mov	r1, r5
   b8f3a:	4668      	mov	r0, sp
   b8f3c:	f00b f868 	bl	c4010 <memcmp>
   b8f40:	b910      	cbnz	r0, b8f48 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b8f42:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8f46:	e7ef      	b.n	b8f28 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8f48:	4929      	ldr	r1, [pc, #164]	; (b8ff0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b8f4a:	4668      	mov	r0, sp
   b8f4c:	f00b f8fe 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f50:	2205      	movs	r2, #5
   b8f52:	4629      	mov	r1, r5
   b8f54:	4668      	mov	r0, sp
   b8f56:	f00b f85b 	bl	c4010 <memcmp>
   b8f5a:	b910      	cbnz	r0, b8f62 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b8f5c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8f60:	e7e2      	b.n	b8f28 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8f62:	4924      	ldr	r1, [pc, #144]	; (b8ff4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b8f64:	4668      	mov	r0, sp
   b8f66:	f00b f8f1 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f6a:	2205      	movs	r2, #5
   b8f6c:	4629      	mov	r1, r5
   b8f6e:	4668      	mov	r0, sp
   b8f70:	f00b f84e 	bl	c4010 <memcmp>
   b8f74:	b910      	cbnz	r0, b8f7c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b8f76:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8f7a:	e7d5      	b.n	b8f28 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8f7c:	491e      	ldr	r1, [pc, #120]	; (b8ff8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b8f7e:	4668      	mov	r0, sp
   b8f80:	f00b f8e4 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f84:	2205      	movs	r2, #5
   b8f86:	4629      	mov	r1, r5
   b8f88:	4668      	mov	r0, sp
   b8f8a:	f00b f841 	bl	c4010 <memcmp>
   b8f8e:	b910      	cbnz	r0, b8f96 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b8f90:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8f94:	e7c8      	b.n	b8f28 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8f96:	4919      	ldr	r1, [pc, #100]	; (b8ffc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b8f98:	4668      	mov	r0, sp
   b8f9a:	f00b f8d7 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f9e:	2205      	movs	r2, #5
   b8fa0:	4629      	mov	r1, r5
   b8fa2:	4668      	mov	r0, sp
   b8fa4:	f00b f834 	bl	c4010 <memcmp>
   b8fa8:	b910      	cbnz	r0, b8fb0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b8faa:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8fae:	e7bb      	b.n	b8f28 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8fb0:	4913      	ldr	r1, [pc, #76]	; (b9000 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b8fb2:	4668      	mov	r0, sp
   b8fb4:	f00b f8ca 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fb8:	2205      	movs	r2, #5
   b8fba:	4629      	mov	r1, r5
   b8fbc:	4668      	mov	r0, sp
   b8fbe:	f00b f827 	bl	c4010 <memcmp>
   b8fc2:	b910      	cbnz	r0, b8fca <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b8fc4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b8fc8:	e7ae      	b.n	b8f28 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b8fca:	490e      	ldr	r1, [pc, #56]	; (b9004 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b8fcc:	4668      	mov	r0, sp
   b8fce:	f00b f8bd 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fd2:	2205      	movs	r2, #5
   b8fd4:	4629      	mov	r1, r5
   b8fd6:	4668      	mov	r0, sp
   b8fd8:	f00b f81a 	bl	c4010 <memcmp>
   b8fdc:	b910      	cbnz	r0, b8fe4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b8fde:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8fe2:	e7a1      	b.n	b8f28 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b8fe4:	2000      	movs	r0, #0
   b8fe6:	e7a0      	b.n	b8f2a <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b8fe8:	000c6a70 	.word	0x000c6a70
   b8fec:	000c6a46 	.word	0x000c6a46
   b8ff0:	000c6a4c 	.word	0x000c6a4c
   b8ff4:	000c6a52 	.word	0x000c6a52
   b8ff8:	000c6a58 	.word	0x000c6a58
   b8ffc:	000c6a5e 	.word	0x000c6a5e
   b9000:	000c6a64 	.word	0x000c6a64
   b9004:	000c6a6a 	.word	0x000c6a6a

000b9008 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b9008:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b900a:	4b38      	ldr	r3, [pc, #224]	; (b90ec <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b900c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b900e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9012:	6818      	ldr	r0, [r3, #0]
   b9014:	9000      	str	r0, [sp, #0]
   b9016:	889b      	ldrh	r3, [r3, #4]
   b9018:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b901c:	2205      	movs	r2, #5
   b901e:	4629      	mov	r1, r5
   b9020:	4668      	mov	r0, sp
   b9022:	f00a fff5 	bl	c4010 <memcmp>
   b9026:	b920      	cbnz	r0, b9032 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b9028:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b902c:	3002      	adds	r0, #2
}
   b902e:	b003      	add	sp, #12
   b9030:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9032:	492f      	ldr	r1, [pc, #188]	; (b90f0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b9034:	4668      	mov	r0, sp
   b9036:	f00b f889 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b903a:	2205      	movs	r2, #5
   b903c:	4629      	mov	r1, r5
   b903e:	4668      	mov	r0, sp
   b9040:	f00a ffe6 	bl	c4010 <memcmp>
   b9044:	b910      	cbnz	r0, b904c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b9046:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b904a:	e7ef      	b.n	b902c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b904c:	4929      	ldr	r1, [pc, #164]	; (b90f4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b904e:	4668      	mov	r0, sp
   b9050:	f00b f87c 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9054:	2205      	movs	r2, #5
   b9056:	4629      	mov	r1, r5
   b9058:	4668      	mov	r0, sp
   b905a:	f00a ffd9 	bl	c4010 <memcmp>
   b905e:	b910      	cbnz	r0, b9066 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b9060:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9064:	e7e2      	b.n	b902c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9066:	4924      	ldr	r1, [pc, #144]	; (b90f8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b9068:	4668      	mov	r0, sp
   b906a:	f00b f86f 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b906e:	2205      	movs	r2, #5
   b9070:	4629      	mov	r1, r5
   b9072:	4668      	mov	r0, sp
   b9074:	f00a ffcc 	bl	c4010 <memcmp>
   b9078:	b910      	cbnz	r0, b9080 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b907a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b907e:	e7d5      	b.n	b902c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9080:	491e      	ldr	r1, [pc, #120]	; (b90fc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b9082:	4668      	mov	r0, sp
   b9084:	f00b f862 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9088:	2205      	movs	r2, #5
   b908a:	4629      	mov	r1, r5
   b908c:	4668      	mov	r0, sp
   b908e:	f00a ffbf 	bl	c4010 <memcmp>
   b9092:	b910      	cbnz	r0, b909a <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b9094:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9098:	e7c8      	b.n	b902c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b909a:	4919      	ldr	r1, [pc, #100]	; (b9100 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b909c:	4668      	mov	r0, sp
   b909e:	f00b f855 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90a2:	2205      	movs	r2, #5
   b90a4:	4629      	mov	r1, r5
   b90a6:	4668      	mov	r0, sp
   b90a8:	f00a ffb2 	bl	c4010 <memcmp>
   b90ac:	b910      	cbnz	r0, b90b4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b90ae:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b90b2:	e7bb      	b.n	b902c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b90b4:	4913      	ldr	r1, [pc, #76]	; (b9104 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b90b6:	4668      	mov	r0, sp
   b90b8:	f00b f848 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90bc:	2205      	movs	r2, #5
   b90be:	4629      	mov	r1, r5
   b90c0:	4668      	mov	r0, sp
   b90c2:	f00a ffa5 	bl	c4010 <memcmp>
   b90c6:	b910      	cbnz	r0, b90ce <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b90c8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b90cc:	e7ae      	b.n	b902c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b90ce:	490e      	ldr	r1, [pc, #56]	; (b9108 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b90d0:	4668      	mov	r0, sp
   b90d2:	f00b f83b 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90d6:	2205      	movs	r2, #5
   b90d8:	4629      	mov	r1, r5
   b90da:	4668      	mov	r0, sp
   b90dc:	f00a ff98 	bl	c4010 <memcmp>
   b90e0:	b910      	cbnz	r0, b90e8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b90e2:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b90e6:	e7a1      	b.n	b902c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b90e8:	2000      	movs	r0, #0
   b90ea:	e7a0      	b.n	b902e <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b90ec:	000c6a70 	.word	0x000c6a70
   b90f0:	000c6a46 	.word	0x000c6a46
   b90f4:	000c6a4c 	.word	0x000c6a4c
   b90f8:	000c6a52 	.word	0x000c6a52
   b90fc:	000c6a58 	.word	0x000c6a58
   b9100:	000c6a5e 	.word	0x000c6a5e
   b9104:	000c6a64 	.word	0x000c6a64
   b9108:	000c6a6a 	.word	0x000c6a6a

000b910c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b910c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b910e:	4b39      	ldr	r3, [pc, #228]	; (b91f4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b9110:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9112:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9116:	6818      	ldr	r0, [r3, #0]
   b9118:	9000      	str	r0, [sp, #0]
   b911a:	889b      	ldrh	r3, [r3, #4]
   b911c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9120:	2205      	movs	r2, #5
   b9122:	4629      	mov	r1, r5
   b9124:	4668      	mov	r0, sp
   b9126:	f00a ff73 	bl	c4010 <memcmp>
   b912a:	b920      	cbnz	r0, b9136 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b912c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b9130:	3066      	adds	r0, #102	; 0x66
}
   b9132:	b003      	add	sp, #12
   b9134:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9136:	4930      	ldr	r1, [pc, #192]	; (b91f8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b9138:	4668      	mov	r0, sp
   b913a:	f00b f807 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b913e:	2205      	movs	r2, #5
   b9140:	4629      	mov	r1, r5
   b9142:	4668      	mov	r0, sp
   b9144:	f00a ff64 	bl	c4010 <memcmp>
   b9148:	b910      	cbnz	r0, b9150 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b914a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b914e:	e7ef      	b.n	b9130 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9150:	492a      	ldr	r1, [pc, #168]	; (b91fc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b9152:	4668      	mov	r0, sp
   b9154:	f00a fffa 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9158:	2205      	movs	r2, #5
   b915a:	4629      	mov	r1, r5
   b915c:	4668      	mov	r0, sp
   b915e:	f00a ff57 	bl	c4010 <memcmp>
   b9162:	b910      	cbnz	r0, b916a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b9164:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9168:	e7e2      	b.n	b9130 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b916a:	4925      	ldr	r1, [pc, #148]	; (b9200 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b916c:	4668      	mov	r0, sp
   b916e:	f00a ffed 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9172:	2205      	movs	r2, #5
   b9174:	4629      	mov	r1, r5
   b9176:	4668      	mov	r0, sp
   b9178:	f00a ff4a 	bl	c4010 <memcmp>
   b917c:	b910      	cbnz	r0, b9184 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b917e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b9182:	e7d5      	b.n	b9130 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9184:	491f      	ldr	r1, [pc, #124]	; (b9204 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b9186:	4668      	mov	r0, sp
   b9188:	f00a ffe0 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b918c:	2205      	movs	r2, #5
   b918e:	4629      	mov	r1, r5
   b9190:	4668      	mov	r0, sp
   b9192:	f00a ff3d 	bl	c4010 <memcmp>
   b9196:	b910      	cbnz	r0, b919e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b9198:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b919c:	e7c8      	b.n	b9130 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b919e:	491a      	ldr	r1, [pc, #104]	; (b9208 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b91a0:	4668      	mov	r0, sp
   b91a2:	f00a ffd3 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91a6:	2205      	movs	r2, #5
   b91a8:	4629      	mov	r1, r5
   b91aa:	4668      	mov	r0, sp
   b91ac:	f00a ff30 	bl	c4010 <memcmp>
   b91b0:	b910      	cbnz	r0, b91b8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b91b2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b91b6:	e7bb      	b.n	b9130 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b91b8:	4914      	ldr	r1, [pc, #80]	; (b920c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b91ba:	4668      	mov	r0, sp
   b91bc:	f00a ffc6 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91c0:	2205      	movs	r2, #5
   b91c2:	4629      	mov	r1, r5
   b91c4:	4668      	mov	r0, sp
   b91c6:	f00a ff23 	bl	c4010 <memcmp>
   b91ca:	b918      	cbnz	r0, b91d4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b91cc:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b91d0:	3034      	adds	r0, #52	; 0x34
   b91d2:	e7ae      	b.n	b9132 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b91d4:	490e      	ldr	r1, [pc, #56]	; (b9210 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b91d6:	4668      	mov	r0, sp
   b91d8:	f00a ffb8 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91dc:	2205      	movs	r2, #5
   b91de:	4629      	mov	r1, r5
   b91e0:	4668      	mov	r0, sp
   b91e2:	f00a ff15 	bl	c4010 <memcmp>
   b91e6:	b910      	cbnz	r0, b91ee <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b91e8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b91ec:	e7f0      	b.n	b91d0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b91ee:	2000      	movs	r0, #0
   b91f0:	e79f      	b.n	b9132 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b91f2:	bf00      	nop
   b91f4:	000c6a70 	.word	0x000c6a70
   b91f8:	000c6a46 	.word	0x000c6a46
   b91fc:	000c6a4c 	.word	0x000c6a4c
   b9200:	000c6a52 	.word	0x000c6a52
   b9204:	000c6a58 	.word	0x000c6a58
   b9208:	000c6a5e 	.word	0x000c6a5e
   b920c:	000c6a64 	.word	0x000c6a64
   b9210:	000c6a6a 	.word	0x000c6a6a

000b9214 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b9214:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9216:	4b39      	ldr	r3, [pc, #228]	; (b92fc <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b9218:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b921a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b921e:	6818      	ldr	r0, [r3, #0]
   b9220:	9000      	str	r0, [sp, #0]
   b9222:	889b      	ldrh	r3, [r3, #4]
   b9224:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9228:	2205      	movs	r2, #5
   b922a:	4629      	mov	r1, r5
   b922c:	4668      	mov	r0, sp
   b922e:	f00a feef 	bl	c4010 <memcmp>
   b9232:	b920      	cbnz	r0, b923e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b9234:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b9238:	3067      	adds	r0, #103	; 0x67
}
   b923a:	b003      	add	sp, #12
   b923c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b923e:	4930      	ldr	r1, [pc, #192]	; (b9300 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b9240:	4668      	mov	r0, sp
   b9242:	f00a ff83 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9246:	2205      	movs	r2, #5
   b9248:	4629      	mov	r1, r5
   b924a:	4668      	mov	r0, sp
   b924c:	f00a fee0 	bl	c4010 <memcmp>
   b9250:	b910      	cbnz	r0, b9258 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b9252:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b9256:	e7ef      	b.n	b9238 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9258:	492a      	ldr	r1, [pc, #168]	; (b9304 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b925a:	4668      	mov	r0, sp
   b925c:	f00a ff76 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9260:	2205      	movs	r2, #5
   b9262:	4629      	mov	r1, r5
   b9264:	4668      	mov	r0, sp
   b9266:	f00a fed3 	bl	c4010 <memcmp>
   b926a:	b910      	cbnz	r0, b9272 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b926c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9270:	e7e2      	b.n	b9238 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9272:	4925      	ldr	r1, [pc, #148]	; (b9308 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b9274:	4668      	mov	r0, sp
   b9276:	f00a ff69 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b927a:	2205      	movs	r2, #5
   b927c:	4629      	mov	r1, r5
   b927e:	4668      	mov	r0, sp
   b9280:	f00a fec6 	bl	c4010 <memcmp>
   b9284:	b910      	cbnz	r0, b928c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b9286:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b928a:	e7d5      	b.n	b9238 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b928c:	491f      	ldr	r1, [pc, #124]	; (b930c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b928e:	4668      	mov	r0, sp
   b9290:	f00a ff5c 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9294:	2205      	movs	r2, #5
   b9296:	4629      	mov	r1, r5
   b9298:	4668      	mov	r0, sp
   b929a:	f00a feb9 	bl	c4010 <memcmp>
   b929e:	b910      	cbnz	r0, b92a6 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b92a0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b92a4:	e7c8      	b.n	b9238 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b92a6:	491a      	ldr	r1, [pc, #104]	; (b9310 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b92a8:	4668      	mov	r0, sp
   b92aa:	f00a ff4f 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92ae:	2205      	movs	r2, #5
   b92b0:	4629      	mov	r1, r5
   b92b2:	4668      	mov	r0, sp
   b92b4:	f00a feac 	bl	c4010 <memcmp>
   b92b8:	b910      	cbnz	r0, b92c0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b92ba:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b92be:	e7bb      	b.n	b9238 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b92c0:	4914      	ldr	r1, [pc, #80]	; (b9314 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b92c2:	4668      	mov	r0, sp
   b92c4:	f00a ff42 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92c8:	2205      	movs	r2, #5
   b92ca:	4629      	mov	r1, r5
   b92cc:	4668      	mov	r0, sp
   b92ce:	f00a fe9f 	bl	c4010 <memcmp>
   b92d2:	b918      	cbnz	r0, b92dc <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b92d4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b92d8:	3035      	adds	r0, #53	; 0x35
   b92da:	e7ae      	b.n	b923a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b92dc:	490e      	ldr	r1, [pc, #56]	; (b9318 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b92de:	4668      	mov	r0, sp
   b92e0:	f00a ff34 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92e4:	2205      	movs	r2, #5
   b92e6:	4629      	mov	r1, r5
   b92e8:	4668      	mov	r0, sp
   b92ea:	f00a fe91 	bl	c4010 <memcmp>
   b92ee:	b910      	cbnz	r0, b92f6 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b92f0:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b92f4:	e7f0      	b.n	b92d8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b92f6:	2000      	movs	r0, #0
   b92f8:	e79f      	b.n	b923a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b92fa:	bf00      	nop
   b92fc:	000c6a70 	.word	0x000c6a70
   b9300:	000c6a46 	.word	0x000c6a46
   b9304:	000c6a4c 	.word	0x000c6a4c
   b9308:	000c6a52 	.word	0x000c6a52
   b930c:	000c6a58 	.word	0x000c6a58
   b9310:	000c6a5e 	.word	0x000c6a5e
   b9314:	000c6a64 	.word	0x000c6a64
   b9318:	000c6a6a 	.word	0x000c6a6a

000b931c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b931c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b931e:	4b39      	ldr	r3, [pc, #228]	; (b9404 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b9320:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9322:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9326:	6818      	ldr	r0, [r3, #0]
   b9328:	9000      	str	r0, [sp, #0]
   b932a:	889b      	ldrh	r3, [r3, #4]
   b932c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9330:	2205      	movs	r2, #5
   b9332:	4629      	mov	r1, r5
   b9334:	4668      	mov	r0, sp
   b9336:	f00a fe6b 	bl	c4010 <memcmp>
   b933a:	b928      	cbnz	r0, b9348 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b933c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b9340:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b9344:	b003      	add	sp, #12
   b9346:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9348:	492f      	ldr	r1, [pc, #188]	; (b9408 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b934a:	4668      	mov	r0, sp
   b934c:	f00a fefe 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9350:	2205      	movs	r2, #5
   b9352:	4629      	mov	r1, r5
   b9354:	4668      	mov	r0, sp
   b9356:	f00a fe5b 	bl	c4010 <memcmp>
   b935a:	b910      	cbnz	r0, b9362 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b935c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b9360:	e7ee      	b.n	b9340 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9362:	492a      	ldr	r1, [pc, #168]	; (b940c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b9364:	4668      	mov	r0, sp
   b9366:	f00a fef1 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b936a:	2205      	movs	r2, #5
   b936c:	4629      	mov	r1, r5
   b936e:	4668      	mov	r0, sp
   b9370:	f00a fe4e 	bl	c4010 <memcmp>
   b9374:	b910      	cbnz	r0, b937c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b9376:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b937a:	e7e1      	b.n	b9340 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b937c:	4924      	ldr	r1, [pc, #144]	; (b9410 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b937e:	4668      	mov	r0, sp
   b9380:	f00a fee4 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9384:	2205      	movs	r2, #5
   b9386:	4629      	mov	r1, r5
   b9388:	4668      	mov	r0, sp
   b938a:	f00a fe41 	bl	c4010 <memcmp>
   b938e:	b910      	cbnz	r0, b9396 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b9390:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b9394:	e7d4      	b.n	b9340 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9396:	491f      	ldr	r1, [pc, #124]	; (b9414 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b9398:	4668      	mov	r0, sp
   b939a:	f00a fed7 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b939e:	2205      	movs	r2, #5
   b93a0:	4629      	mov	r1, r5
   b93a2:	4668      	mov	r0, sp
   b93a4:	f00a fe34 	bl	c4010 <memcmp>
   b93a8:	b910      	cbnz	r0, b93b0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b93aa:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b93ae:	e7c7      	b.n	b9340 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b93b0:	4919      	ldr	r1, [pc, #100]	; (b9418 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b93b2:	4668      	mov	r0, sp
   b93b4:	f00a feca 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93b8:	2205      	movs	r2, #5
   b93ba:	4629      	mov	r1, r5
   b93bc:	4668      	mov	r0, sp
   b93be:	f00a fe27 	bl	c4010 <memcmp>
   b93c2:	b910      	cbnz	r0, b93ca <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b93c4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b93c8:	e7ba      	b.n	b9340 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b93ca:	4914      	ldr	r1, [pc, #80]	; (b941c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b93cc:	4668      	mov	r0, sp
   b93ce:	f00a febd 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93d2:	2205      	movs	r2, #5
   b93d4:	4629      	mov	r1, r5
   b93d6:	4668      	mov	r0, sp
   b93d8:	f00a fe1a 	bl	c4010 <memcmp>
   b93dc:	b918      	cbnz	r0, b93e6 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b93de:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b93e2:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b93e4:	e7ae      	b.n	b9344 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b93e6:	490e      	ldr	r1, [pc, #56]	; (b9420 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b93e8:	4668      	mov	r0, sp
   b93ea:	f00a feaf 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93ee:	2205      	movs	r2, #5
   b93f0:	4629      	mov	r1, r5
   b93f2:	4668      	mov	r0, sp
   b93f4:	f00a fe0c 	bl	c4010 <memcmp>
   b93f8:	b910      	cbnz	r0, b9400 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b93fa:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b93fe:	e7f0      	b.n	b93e2 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b9400:	2000      	movs	r0, #0
   b9402:	e79f      	b.n	b9344 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b9404:	000c6a70 	.word	0x000c6a70
   b9408:	000c6a46 	.word	0x000c6a46
   b940c:	000c6a4c 	.word	0x000c6a4c
   b9410:	000c6a52 	.word	0x000c6a52
   b9414:	000c6a58 	.word	0x000c6a58
   b9418:	000c6a5e 	.word	0x000c6a5e
   b941c:	000c6a64 	.word	0x000c6a64
   b9420:	000c6a6a 	.word	0x000c6a6a

000b9424 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b9424:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9426:	4b3a      	ldr	r3, [pc, #232]	; (b9510 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b9428:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b942a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b942e:	6818      	ldr	r0, [r3, #0]
   b9430:	9000      	str	r0, [sp, #0]
   b9432:	889b      	ldrh	r3, [r3, #4]
   b9434:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9438:	2205      	movs	r2, #5
   b943a:	4629      	mov	r1, r5
   b943c:	4668      	mov	r0, sp
   b943e:	f00a fde7 	bl	c4010 <memcmp>
   b9442:	b930      	cbnz	r0, b9452 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b9444:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b9448:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b944c:	3001      	adds	r0, #1
}
   b944e:	b003      	add	sp, #12
   b9450:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9452:	4930      	ldr	r1, [pc, #192]	; (b9514 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b9454:	4668      	mov	r0, sp
   b9456:	f00a fe79 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b945a:	2205      	movs	r2, #5
   b945c:	4629      	mov	r1, r5
   b945e:	4668      	mov	r0, sp
   b9460:	f00a fdd6 	bl	c4010 <memcmp>
   b9464:	b910      	cbnz	r0, b946c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b9466:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b946a:	e7ed      	b.n	b9448 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b946c:	492a      	ldr	r1, [pc, #168]	; (b9518 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b946e:	4668      	mov	r0, sp
   b9470:	f00a fe6c 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9474:	2205      	movs	r2, #5
   b9476:	4629      	mov	r1, r5
   b9478:	4668      	mov	r0, sp
   b947a:	f00a fdc9 	bl	c4010 <memcmp>
   b947e:	b910      	cbnz	r0, b9486 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b9480:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b9484:	e7e0      	b.n	b9448 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9486:	4925      	ldr	r1, [pc, #148]	; (b951c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b9488:	4668      	mov	r0, sp
   b948a:	f00a fe5f 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b948e:	2205      	movs	r2, #5
   b9490:	4629      	mov	r1, r5
   b9492:	4668      	mov	r0, sp
   b9494:	f00a fdbc 	bl	c4010 <memcmp>
   b9498:	b910      	cbnz	r0, b94a0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b949a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b949e:	e7d3      	b.n	b9448 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b94a0:	491f      	ldr	r1, [pc, #124]	; (b9520 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b94a2:	4668      	mov	r0, sp
   b94a4:	f00a fe52 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94a8:	2205      	movs	r2, #5
   b94aa:	4629      	mov	r1, r5
   b94ac:	4668      	mov	r0, sp
   b94ae:	f00a fdaf 	bl	c4010 <memcmp>
   b94b2:	b910      	cbnz	r0, b94ba <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b94b4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b94b8:	e7c6      	b.n	b9448 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b94ba:	491a      	ldr	r1, [pc, #104]	; (b9524 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b94bc:	4668      	mov	r0, sp
   b94be:	f00a fe45 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94c2:	2205      	movs	r2, #5
   b94c4:	4629      	mov	r1, r5
   b94c6:	4668      	mov	r0, sp
   b94c8:	f00a fda2 	bl	c4010 <memcmp>
   b94cc:	b910      	cbnz	r0, b94d4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b94ce:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b94d2:	e7b9      	b.n	b9448 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b94d4:	4914      	ldr	r1, [pc, #80]	; (b9528 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b94d6:	4668      	mov	r0, sp
   b94d8:	f00a fe38 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94dc:	2205      	movs	r2, #5
   b94de:	4629      	mov	r1, r5
   b94e0:	4668      	mov	r0, sp
   b94e2:	f00a fd95 	bl	c4010 <memcmp>
   b94e6:	b918      	cbnz	r0, b94f0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b94e8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b94ec:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b94ee:	e7ad      	b.n	b944c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b94f0:	490e      	ldr	r1, [pc, #56]	; (b952c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b94f2:	4668      	mov	r0, sp
   b94f4:	f00a fe2a 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94f8:	2205      	movs	r2, #5
   b94fa:	4629      	mov	r1, r5
   b94fc:	4668      	mov	r0, sp
   b94fe:	f00a fd87 	bl	c4010 <memcmp>
   b9502:	b910      	cbnz	r0, b950a <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b9504:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b9508:	e7f0      	b.n	b94ec <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b950a:	2000      	movs	r0, #0
   b950c:	e79f      	b.n	b944e <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b950e:	bf00      	nop
   b9510:	000c6a70 	.word	0x000c6a70
   b9514:	000c6a46 	.word	0x000c6a46
   b9518:	000c6a4c 	.word	0x000c6a4c
   b951c:	000c6a52 	.word	0x000c6a52
   b9520:	000c6a58 	.word	0x000c6a58
   b9524:	000c6a5e 	.word	0x000c6a5e
   b9528:	000c6a64 	.word	0x000c6a64
   b952c:	000c6a6a 	.word	0x000c6a6a

000b9530 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b9530:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b9532:	4b30      	ldr	r3, [pc, #192]	; (b95f4 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b9534:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9536:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b953a:	6818      	ldr	r0, [r3, #0]
   b953c:	9000      	str	r0, [sp, #0]
   b953e:	889b      	ldrh	r3, [r3, #4]
   b9540:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9544:	2205      	movs	r2, #5
   b9546:	4621      	mov	r1, r4
   b9548:	4668      	mov	r0, sp
   b954a:	f00a fd61 	bl	c4010 <memcmp>
   b954e:	b910      	cbnz	r0, b9556 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b9550:	2064      	movs	r0, #100	; 0x64
}
   b9552:	b002      	add	sp, #8
   b9554:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b9556:	4928      	ldr	r1, [pc, #160]	; (b95f8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b9558:	4668      	mov	r0, sp
   b955a:	f00a fdf7 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b955e:	2205      	movs	r2, #5
   b9560:	4621      	mov	r1, r4
   b9562:	4668      	mov	r0, sp
   b9564:	f00a fd54 	bl	c4010 <memcmp>
   b9568:	2800      	cmp	r0, #0
   b956a:	d0f1      	beq.n	b9550 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b956c:	4923      	ldr	r1, [pc, #140]	; (b95fc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b956e:	4668      	mov	r0, sp
   b9570:	f00a fdec 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9574:	2205      	movs	r2, #5
   b9576:	4621      	mov	r1, r4
   b9578:	4668      	mov	r0, sp
   b957a:	f00a fd49 	bl	c4010 <memcmp>
   b957e:	2800      	cmp	r0, #0
   b9580:	d0e6      	beq.n	b9550 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b9582:	491f      	ldr	r1, [pc, #124]	; (b9600 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b9584:	4668      	mov	r0, sp
   b9586:	f00a fde1 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b958a:	2205      	movs	r2, #5
   b958c:	4621      	mov	r1, r4
   b958e:	4668      	mov	r0, sp
   b9590:	f00a fd3e 	bl	c4010 <memcmp>
   b9594:	2800      	cmp	r0, #0
   b9596:	d0db      	beq.n	b9550 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b9598:	491a      	ldr	r1, [pc, #104]	; (b9604 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b959a:	4668      	mov	r0, sp
   b959c:	f00a fdd6 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95a0:	2205      	movs	r2, #5
   b95a2:	4621      	mov	r1, r4
   b95a4:	4668      	mov	r0, sp
   b95a6:	f00a fd33 	bl	c4010 <memcmp>
   b95aa:	2800      	cmp	r0, #0
   b95ac:	d0d0      	beq.n	b9550 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b95ae:	4916      	ldr	r1, [pc, #88]	; (b9608 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b95b0:	4668      	mov	r0, sp
   b95b2:	f00a fdcb 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95b6:	2205      	movs	r2, #5
   b95b8:	4621      	mov	r1, r4
   b95ba:	4668      	mov	r0, sp
   b95bc:	f00a fd28 	bl	c4010 <memcmp>
   b95c0:	2800      	cmp	r0, #0
   b95c2:	d0c5      	beq.n	b9550 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b95c4:	4911      	ldr	r1, [pc, #68]	; (b960c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b95c6:	4668      	mov	r0, sp
   b95c8:	f00a fdc0 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95cc:	2205      	movs	r2, #5
   b95ce:	4621      	mov	r1, r4
   b95d0:	4668      	mov	r0, sp
   b95d2:	f00a fd1d 	bl	c4010 <memcmp>
   b95d6:	b148      	cbz	r0, b95ec <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b95d8:	490d      	ldr	r1, [pc, #52]	; (b9610 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b95da:	4668      	mov	r0, sp
   b95dc:	f00a fdb6 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95e0:	2205      	movs	r2, #5
   b95e2:	4621      	mov	r1, r4
   b95e4:	4668      	mov	r0, sp
   b95e6:	f00a fd13 	bl	c4010 <memcmp>
   b95ea:	b908      	cbnz	r0, b95f0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b95ec:	2032      	movs	r0, #50	; 0x32
   b95ee:	e7b0      	b.n	b9552 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b95f0:	2000      	movs	r0, #0
   b95f2:	e7ae      	b.n	b9552 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b95f4:	000c6a70 	.word	0x000c6a70
   b95f8:	000c6a46 	.word	0x000c6a46
   b95fc:	000c6a4c 	.word	0x000c6a4c
   b9600:	000c6a52 	.word	0x000c6a52
   b9604:	000c6a58 	.word	0x000c6a58
   b9608:	000c6a5e 	.word	0x000c6a5e
   b960c:	000c6a64 	.word	0x000c6a64
   b9610:	000c6a6a 	.word	0x000c6a6a

000b9614 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b9614:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9616:	4b38      	ldr	r3, [pc, #224]	; (b96f8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b9618:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b961a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b961e:	6818      	ldr	r0, [r3, #0]
   b9620:	9000      	str	r0, [sp, #0]
   b9622:	889b      	ldrh	r3, [r3, #4]
   b9624:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9628:	2205      	movs	r2, #5
   b962a:	4629      	mov	r1, r5
   b962c:	4668      	mov	r0, sp
   b962e:	f00a fcef 	bl	c4010 <memcmp>
   b9632:	b918      	cbnz	r0, b963c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b9634:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b9638:	b003      	add	sp, #12
   b963a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b963c:	492f      	ldr	r1, [pc, #188]	; (b96fc <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b963e:	4668      	mov	r0, sp
   b9640:	f00a fd84 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9644:	2205      	movs	r2, #5
   b9646:	4629      	mov	r1, r5
   b9648:	4668      	mov	r0, sp
   b964a:	f00a fce1 	bl	c4010 <memcmp>
   b964e:	b910      	cbnz	r0, b9656 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b9650:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b9654:	e7f0      	b.n	b9638 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9656:	492a      	ldr	r1, [pc, #168]	; (b9700 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b9658:	4668      	mov	r0, sp
   b965a:	f00a fd77 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b965e:	2205      	movs	r2, #5
   b9660:	4629      	mov	r1, r5
   b9662:	4668      	mov	r0, sp
   b9664:	f00a fcd4 	bl	c4010 <memcmp>
   b9668:	b910      	cbnz	r0, b9670 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b966a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b966e:	e7e3      	b.n	b9638 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9670:	4924      	ldr	r1, [pc, #144]	; (b9704 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b9672:	4668      	mov	r0, sp
   b9674:	f00a fd6a 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9678:	2205      	movs	r2, #5
   b967a:	4629      	mov	r1, r5
   b967c:	4668      	mov	r0, sp
   b967e:	f00a fcc7 	bl	c4010 <memcmp>
   b9682:	b910      	cbnz	r0, b968a <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b9684:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b9688:	e7d6      	b.n	b9638 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b968a:	491f      	ldr	r1, [pc, #124]	; (b9708 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b968c:	4668      	mov	r0, sp
   b968e:	f00a fd5d 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9692:	2205      	movs	r2, #5
   b9694:	4629      	mov	r1, r5
   b9696:	4668      	mov	r0, sp
   b9698:	f00a fcba 	bl	c4010 <memcmp>
   b969c:	b910      	cbnz	r0, b96a4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b969e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b96a2:	e7c9      	b.n	b9638 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b96a4:	4919      	ldr	r1, [pc, #100]	; (b970c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b96a6:	4668      	mov	r0, sp
   b96a8:	f00a fd50 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96ac:	2205      	movs	r2, #5
   b96ae:	4629      	mov	r1, r5
   b96b0:	4668      	mov	r0, sp
   b96b2:	f00a fcad 	bl	c4010 <memcmp>
   b96b6:	b910      	cbnz	r0, b96be <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b96b8:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b96bc:	e7bc      	b.n	b9638 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b96be:	4914      	ldr	r1, [pc, #80]	; (b9710 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b96c0:	4668      	mov	r0, sp
   b96c2:	f00a fd43 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96c6:	2205      	movs	r2, #5
   b96c8:	4629      	mov	r1, r5
   b96ca:	4668      	mov	r0, sp
   b96cc:	f00a fca0 	bl	c4010 <memcmp>
   b96d0:	b910      	cbnz	r0, b96d8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b96d2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b96d6:	e7af      	b.n	b9638 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b96d8:	490e      	ldr	r1, [pc, #56]	; (b9714 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b96da:	4668      	mov	r0, sp
   b96dc:	f00a fd36 	bl	c414c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96e0:	2205      	movs	r2, #5
   b96e2:	4629      	mov	r1, r5
   b96e4:	4668      	mov	r0, sp
   b96e6:	f00a fc93 	bl	c4010 <memcmp>
   b96ea:	b910      	cbnz	r0, b96f2 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b96ec:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b96f0:	e7a2      	b.n	b9638 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b96f2:	2000      	movs	r0, #0
   b96f4:	e7a0      	b.n	b9638 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b96f6:	bf00      	nop
   b96f8:	000c6a70 	.word	0x000c6a70
   b96fc:	000c6a46 	.word	0x000c6a46
   b9700:	000c6a4c 	.word	0x000c6a4c
   b9704:	000c6a52 	.word	0x000c6a52
   b9708:	000c6a58 	.word	0x000c6a58
   b970c:	000c6a5e 	.word	0x000c6a5e
   b9710:	000c6a64 	.word	0x000c6a64
   b9714:	000c6a6a 	.word	0x000c6a6a

000b9718 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b9718:	4770      	bx	lr
	...

000b971c <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b971c:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b971e:	8813      	ldrh	r3, [r2, #0]
   b9720:	4d0c      	ldr	r5, [pc, #48]	; (b9754 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b9722:	2b01      	cmp	r3, #1
{
   b9724:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b9726:	d10e      	bne.n	b9746 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b9728:	020a      	lsls	r2, r1, #8
   b972a:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b972e:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b9730:	3301      	adds	r3, #1
   b9732:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b9734:	f7ff fff0 	bl	b9718 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b9738:	8820      	ldrh	r0, [r4, #0]
   b973a:	882b      	ldrh	r3, [r5, #0]
}
   b973c:	4298      	cmp	r0, r3
   b973e:	bf14      	ite	ne
   b9740:	2003      	movne	r0, #3
   b9742:	2000      	moveq	r0, #0
   b9744:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b9746:	2b02      	cmp	r3, #2
   b9748:	d1f2      	bne.n	b9730 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b974a:	882a      	ldrh	r2, [r5, #0]
   b974c:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b974e:	3206      	adds	r2, #6
   b9750:	e7ed      	b.n	b972e <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b9752:	bf00      	nop
   b9754:	2003e61a 	.word	0x2003e61a

000b9758 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b9758:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b975a:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b975c:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b975e:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b9760:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b9762:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b9766:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b976a:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b976e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b9772:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b9776:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b9778:	4413      	add	r3, r2
   b977a:	734b      	strb	r3, [r1, #13]
   b977c:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b977e:	b293      	uxth	r3, r2
   b9780:	429c      	cmp	r4, r3
   b9782:	d90a      	bls.n	b979a <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b9784:	688b      	ldr	r3, [r1, #8]
   b9786:	7b08      	ldrb	r0, [r1, #12]
   b9788:	5c9b      	ldrb	r3, [r3, r2]
   b978a:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b978c:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b978e:	b2db      	uxtb	r3, r3
   b9790:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b9792:	4403      	add	r3, r0
   b9794:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b9796:	3201      	adds	r2, #1
   b9798:	e7f1      	b.n	b977e <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b979a:	bd30      	pop	{r4, r5, pc}

000b979c <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b979c:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b97a0:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b97a2:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b97a6:	b2c9      	uxtb	r1, r1
   b97a8:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b97ac:	4419      	add	r1, r3
   b97ae:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b97b2:	4770      	bx	lr

000b97b4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b97b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b97b8:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b97bc:	f10b 0b08 	add.w	fp, fp, #8
   b97c0:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b97c4:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b97c8:	f1ab 0302 	sub.w	r3, fp, #2
{
   b97cc:	4604      	mov	r4, r0
   b97ce:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b97d0:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b97d2:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b97d4:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b97d6:	f1ba 0f00 	cmp.w	sl, #0
   b97da:	f000 80a6 	beq.w	b992a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b97de:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b97e0:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b97e4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b97e8:	4556      	cmp	r6, sl
   b97ea:	bf28      	it	cs
   b97ec:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b97ee:	ebaa 0a06 	sub.w	sl, sl, r6
   b97f2:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b97f6:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b97fa:	bf02      	ittt	eq
   b97fc:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
   b9800:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b9802:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b9806:	f006 f8cf 	bl	bf9a8 <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b980a:	f1b9 0f00 	cmp.w	r9, #0
   b980e:	d15c      	bne.n	b98ca <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9810:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9814:	6803      	ldr	r3, [r0, #0]
   b9816:	21b5      	movs	r1, #181	; 0xb5
   b9818:	689b      	ldr	r3, [r3, #8]
   b981a:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b981c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9820:	6803      	ldr	r3, [r0, #0]
   b9822:	2162      	movs	r1, #98	; 0x62
   b9824:	689b      	ldr	r3, [r3, #8]
   b9826:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b9828:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b982c:	7829      	ldrb	r1, [r5, #0]
   b982e:	6803      	ldr	r3, [r0, #0]
   b9830:	689b      	ldr	r3, [r3, #8]
   b9832:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b9834:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9838:	7869      	ldrb	r1, [r5, #1]
   b983a:	6803      	ldr	r3, [r0, #0]
   b983c:	689b      	ldr	r3, [r3, #8]
   b983e:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b9840:	78a9      	ldrb	r1, [r5, #2]
   b9842:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9846:	f7fe fdc1 	bl	b83cc <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b984a:	8869      	ldrh	r1, [r5, #2]
   b984c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9850:	0a09      	lsrs	r1, r1, #8
   b9852:	f7fe fdbb 	bl	b83cc <_ZN7TwoWire5writeEi.isra.0>
   b9856:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9858:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b985a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b985e:	fa1f f983 	uxth.w	r9, r3
   b9862:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9866:	454a      	cmp	r2, r9
   b9868:	b2bf      	uxth	r7, r7
   b986a:	d90d      	bls.n	b9888 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b986c:	42be      	cmp	r6, r7
   b986e:	d90b      	bls.n	b9888 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9870:	68aa      	ldr	r2, [r5, #8]
   b9872:	6801      	ldr	r1, [r0, #0]
   b9874:	9301      	str	r3, [sp, #4]
   b9876:	4442      	add	r2, r8
   b9878:	688f      	ldr	r7, [r1, #8]
   b987a:	5cd1      	ldrb	r1, [r2, r3]
   b987c:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b987e:	9b01      	ldr	r3, [sp, #4]
   b9880:	3301      	adds	r3, #1
   b9882:	e7e9      	b.n	b9858 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b9884:	46b9      	mov	r9, r7
   b9886:	e7a6      	b.n	b97d6 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b9888:	3e02      	subs	r6, #2
      startSpot += x;
   b988a:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b988c:	42b7      	cmp	r7, r6
      startSpot += x;
   b988e:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b9892:	d10c      	bne.n	b98ae <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9894:	6803      	ldr	r3, [r0, #0]
   b9896:	7b29      	ldrb	r1, [r5, #12]
   b9898:	689b      	ldr	r3, [r3, #8]
   b989a:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b989c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b98a0:	7b69      	ldrb	r1, [r5, #13]
   b98a2:	6803      	ldr	r3, [r0, #0]
   b98a4:	689b      	ldr	r3, [r3, #8]
   b98a6:	4798      	blx	r3
        bytesSent += 2;
   b98a8:	f109 0708 	add.w	r7, r9, #8
   b98ac:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b98ae:	455f      	cmp	r7, fp
   b98b0:	d2e8      	bcs.n	b9884 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b98b2:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b98b6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b98ba:	f006 f87c 	bl	bf9b6 <_ZN7TwoWire15endTransmissionEh>
   b98be:	2800      	cmp	r0, #0
   b98c0:	d0e0      	beq.n	b9884 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b98c2:	200c      	movs	r0, #12
}
   b98c4:	b003      	add	sp, #12
   b98c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b98ca:	2200      	movs	r2, #0
   b98cc:	b291      	uxth	r1, r2
   b98ce:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b98d2:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b98d4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b98d8:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b98da:	d910      	bls.n	b98fe <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b98dc:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b98e0:	eb08 0c02 	add.w	ip, r8, r2
   b98e4:	1c53      	adds	r3, r2, #1
   b98e6:	45f4      	cmp	ip, lr
   b98e8:	9301      	str	r3, [sp, #4]
   b98ea:	da08      	bge.n	b98fe <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b98ec:	68a9      	ldr	r1, [r5, #8]
   b98ee:	6802      	ldr	r2, [r0, #0]
   b98f0:	f811 100c 	ldrb.w	r1, [r1, ip]
   b98f4:	6892      	ldr	r2, [r2, #8]
   b98f6:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b98f8:	9b01      	ldr	r3, [sp, #4]
   b98fa:	461a      	mov	r2, r3
   b98fc:	e7e6      	b.n	b98cc <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b98fe:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b9900:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9902:	429f      	cmp	r7, r3
      startSpot += x;
   b9904:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9908:	d1d1      	bne.n	b98ae <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b990a:	3e02      	subs	r6, #2
   b990c:	42b2      	cmp	r2, r6
   b990e:	d1ce      	bne.n	b98ae <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9910:	6803      	ldr	r3, [r0, #0]
   b9912:	7b29      	ldrb	r1, [r5, #12]
   b9914:	689b      	ldr	r3, [r3, #8]
   b9916:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9918:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b991c:	7b69      	ldrb	r1, [r5, #13]
   b991e:	6803      	ldr	r3, [r0, #0]
   b9920:	689b      	ldr	r3, [r3, #8]
   b9922:	4798      	blx	r3
        bytesSent += 2;
   b9924:	fa1f f78b 	uxth.w	r7, fp
   b9928:	e7c1      	b.n	b98ae <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b992a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b992e:	f006 f846 	bl	bf9be <_ZN7TwoWire15endTransmissionEv>
   b9932:	2800      	cmp	r0, #0
   b9934:	d0c6      	beq.n	b98c4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b9936:	e7c4      	b.n	b98c2 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b9938 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b9938:	b570      	push	{r4, r5, r6, lr}
   b993a:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b993c:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b9940:	6803      	ldr	r3, [r0, #0]
{
   b9942:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9944:	689b      	ldr	r3, [r3, #8]
   b9946:	21b5      	movs	r1, #181	; 0xb5
   b9948:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b994a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b994e:	6803      	ldr	r3, [r0, #0]
   b9950:	2162      	movs	r1, #98	; 0x62
   b9952:	689b      	ldr	r3, [r3, #8]
   b9954:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b9956:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b995a:	7821      	ldrb	r1, [r4, #0]
   b995c:	6803      	ldr	r3, [r0, #0]
   b995e:	689b      	ldr	r3, [r3, #8]
   b9960:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b9962:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9966:	7861      	ldrb	r1, [r4, #1]
   b9968:	6803      	ldr	r3, [r0, #0]
   b996a:	689b      	ldr	r3, [r3, #8]
   b996c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b996e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9972:	78a1      	ldrb	r1, [r4, #2]
   b9974:	6803      	ldr	r3, [r0, #0]
   b9976:	689b      	ldr	r3, [r3, #8]
   b9978:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b997a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b997e:	8861      	ldrh	r1, [r4, #2]
   b9980:	6803      	ldr	r3, [r0, #0]
   b9982:	0a09      	lsrs	r1, r1, #8
   b9984:	689b      	ldr	r3, [r3, #8]
   b9986:	4798      	blx	r3
   b9988:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b998a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b998e:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b9990:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9992:	b2b2      	uxth	r2, r6
   b9994:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b9996:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9998:	d904      	bls.n	b99a4 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b999a:	68a1      	ldr	r1, [r4, #8]
   b999c:	5c89      	ldrb	r1, [r1, r2]
   b999e:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b99a0:	3601      	adds	r6, #1
   b99a2:	e7f2      	b.n	b998a <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b99a4:	7b21      	ldrb	r1, [r4, #12]
   b99a6:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b99a8:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b99ac:	7b61      	ldrb	r1, [r4, #13]
   b99ae:	6803      	ldr	r3, [r0, #0]
}
   b99b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b99b4:	689b      	ldr	r3, [r3, #8]
   b99b6:	4718      	bx	r3

000b99b8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b99b8:	b510      	push	{r4, lr}
   b99ba:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b99bc:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b99c0:	f007 fc9e 	bl	c1300 <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b99c4:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b99c8:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b99cc:	429a      	cmp	r2, r3
   b99ce:	d90b      	bls.n	b99e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b99d0:	28ff      	cmp	r0, #255	; 0xff
   b99d2:	d101      	bne.n	b99d8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b99d4:	7822      	ldrb	r2, [r4, #0]
   b99d6:	b13a      	cbz	r2, b99e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b99d8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b99dc:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b99de:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b99e2:	3301      	adds	r3, #1
   b99e4:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b99e8:	bd10      	pop	{r4, pc}
	...

000b99ec <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b99ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b99f0:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b99f4:	4604      	mov	r4, r0
   b99f6:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b99f8:	b97b      	cbnz	r3, b9a1a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b99fa:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b99fe:	b923      	cbnz	r3, b9a0a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b9a00:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b9a04:	2b00      	cmp	r3, #0
   b9a06:	f000 80ca 	beq.w	b9b9e <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9a0a:	4966      	ldr	r1, [pc, #408]	; (b9ba4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b9a0c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9a10:	b004      	add	sp, #16
   b9a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9a16:	f007 ba94 	b.w	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9a1a:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b9a1e:	4a62      	ldr	r2, [pc, #392]	; (b9ba8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b9a20:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b9a22:	2600      	movs	r6, #0
   b9a24:	2301      	movs	r3, #1
   b9a26:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9a2a:	4669      	mov	r1, sp
   b9a2c:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9a30:	f8ad 300c 	strh.w	r3, [sp, #12]
   b9a34:	9200      	str	r2, [sp, #0]
   b9a36:	f88d 6004 	strb.w	r6, [sp, #4]
   b9a3a:	f007 fbc1 	bl	c11c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b9a3e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9a42:	4631      	mov	r1, r6
   b9a44:	f008 f847 	bl	c1ad6 <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9a48:	21b5      	movs	r1, #181	; 0xb5
   b9a4a:	4620      	mov	r0, r4
   b9a4c:	f7ff ffb4 	bl	b99b8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b9a50:	2162      	movs	r1, #98	; 0x62
   b9a52:	4620      	mov	r0, r4
   b9a54:	f7ff ffb0 	bl	b99b8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b9a58:	7829      	ldrb	r1, [r5, #0]
   b9a5a:	4620      	mov	r0, r4
   b9a5c:	f7ff ffac 	bl	b99b8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b9a60:	7869      	ldrb	r1, [r5, #1]
   b9a62:	4620      	mov	r0, r4
   b9a64:	f7ff ffa8 	bl	b99b8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b9a68:	78a9      	ldrb	r1, [r5, #2]
   b9a6a:	4620      	mov	r0, r4
   b9a6c:	f7ff ffa4 	bl	b99b8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b9a70:	8869      	ldrh	r1, [r5, #2]
   b9a72:	4620      	mov	r0, r4
   b9a74:	0a09      	lsrs	r1, r1, #8
   b9a76:	f7ff ff9f 	bl	b99b8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b9a7a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9a7e:	2b00      	cmp	r3, #0
   b9a80:	d042      	beq.n	b9b08 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b9a82:	494a      	ldr	r1, [pc, #296]	; (b9bac <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b9a84:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a88:	f007 fa5b 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b9a8c:	2210      	movs	r2, #16
   b9a8e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a92:	21b5      	movs	r1, #181	; 0xb5
   b9a94:	f7fe fc8a 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9a98:	4945      	ldr	r1, [pc, #276]	; (b9bb0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9a9a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a9e:	f007 fa50 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b9aa2:	2210      	movs	r2, #16
   b9aa4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9aa8:	2162      	movs	r1, #98	; 0x62
   b9aaa:	f7fe fc7f 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9aae:	4940      	ldr	r1, [pc, #256]	; (b9bb0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9ab0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ab4:	f007 fa45 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b9ab8:	2210      	movs	r2, #16
   b9aba:	7829      	ldrb	r1, [r5, #0]
   b9abc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ac0:	f7fe fc74 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9ac4:	493a      	ldr	r1, [pc, #232]	; (b9bb0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9ac6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9aca:	f007 fa3a 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b9ace:	2210      	movs	r2, #16
   b9ad0:	7869      	ldrb	r1, [r5, #1]
   b9ad2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ad6:	f7fe fc69 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9ada:	4935      	ldr	r1, [pc, #212]	; (b9bb0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9adc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ae0:	f007 fa2f 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b9ae4:	2210      	movs	r2, #16
   b9ae6:	78a9      	ldrb	r1, [r5, #2]
   b9ae8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9aec:	f007 fa45 	bl	c0f7a <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b9af0:	492f      	ldr	r1, [pc, #188]	; (b9bb0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9af2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9af6:	f007 fa24 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b9afa:	8869      	ldrh	r1, [r5, #2]
   b9afc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9b00:	2210      	movs	r2, #16
   b9b02:	0a09      	lsrs	r1, r1, #8
   b9b04:	f007 fa39 	bl	c0f7a <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b9b08:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b9bb0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b9b0c:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9b0e:	886a      	ldrh	r2, [r5, #2]
   b9b10:	b2b3      	uxth	r3, r6
   b9b12:	429a      	cmp	r2, r3
   b9b14:	d916      	bls.n	b9b44 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b9b16:	461f      	mov	r7, r3
   b9b18:	68ab      	ldr	r3, [r5, #8]
   b9b1a:	4620      	mov	r0, r4
   b9b1c:	5dd9      	ldrb	r1, [r3, r7]
   b9b1e:	f7ff ff4b 	bl	b99b8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b9b22:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9b26:	b15b      	cbz	r3, b9b40 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b9b28:	4641      	mov	r1, r8
   b9b2a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9b2e:	f007 fa08 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b9b32:	68ab      	ldr	r3, [r5, #8]
   b9b34:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9b38:	5dd9      	ldrb	r1, [r3, r7]
   b9b3a:	2210      	movs	r2, #16
   b9b3c:	f7fe fc36 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9b40:	3601      	adds	r6, #1
   b9b42:	e7e4      	b.n	b9b0e <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b9b44:	7b29      	ldrb	r1, [r5, #12]
   b9b46:	4620      	mov	r0, r4
   b9b48:	f7ff ff36 	bl	b99b8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b9b4c:	7b69      	ldrb	r1, [r5, #13]
   b9b4e:	4620      	mov	r0, r4
   b9b50:	f7ff ff32 	bl	b99b8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b9b54:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9b58:	2101      	movs	r1, #1
   b9b5a:	f007 ffbc 	bl	c1ad6 <digitalWrite>
  _spiPort->endTransaction();
   b9b5e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b9b62:	f007 fb13 	bl	c118c <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b9b66:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9b6a:	b1c3      	cbz	r3, b9b9e <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b9b6c:	4910      	ldr	r1, [pc, #64]	; (b9bb0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9b6e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9b72:	f007 f9e6 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b9b76:	7b29      	ldrb	r1, [r5, #12]
   b9b78:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9b7c:	2210      	movs	r2, #16
   b9b7e:	f7fe fc15 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9b82:	490b      	ldr	r1, [pc, #44]	; (b9bb0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9b84:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9b88:	f007 f9db 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9b8c:	7b69      	ldrb	r1, [r5, #13]
   b9b8e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9b92:	2210      	movs	r2, #16
}
   b9b94:	b004      	add	sp, #16
   b9b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9b9a:	f7fe bc0e 	b.w	b83ba <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b9b9e:	b004      	add	sp, #16
   b9ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9ba4:	000c6a76 	.word	0x000c6a76
   b9ba8:	000c682c 	.word	0x000c682c
   b9bac:	000c6aab 	.word	0x000c6aab
   b9bb0:	000c79d1 	.word	0x000c79d1

000b9bb4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b9bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b9bb6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b9bba:	4604      	mov	r4, r0
   b9bbc:	460d      	mov	r5, r1
   b9bbe:	4616      	mov	r6, r2
  if (_printDebug == true)
   b9bc0:	2b00      	cmp	r3, #0
   b9bc2:	f000 8082 	beq.w	b9cca <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b9bc6:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b9bca:	4940      	ldr	r1, [pc, #256]	; (b9ccc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b9bcc:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b9bd0:	f007 f9b7 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b9bd4:	782b      	ldrb	r3, [r5, #0]
   b9bd6:	2b01      	cmp	r3, #1
   b9bd8:	d13c      	bne.n	b9c54 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b9bda:	493d      	ldr	r1, [pc, #244]	; (b9cd0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b9bdc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b9be0:	f007 f9af 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b9be4:	493b      	ldr	r1, [pc, #236]	; (b9cd4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b9be6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9bea:	f007 f9aa 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b9bee:	882b      	ldrh	r3, [r5, #0]
   b9bf0:	f240 7201 	movw	r2, #1793	; 0x701
   b9bf4:	4293      	cmp	r3, r2
   b9bf6:	d145      	bne.n	b9c84 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b9bf8:	4937      	ldr	r1, [pc, #220]	; (b9cd8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b9bfa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b9bfe:	f007 f9a0 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b9c02:	4936      	ldr	r1, [pc, #216]	; (b9cdc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b9c04:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c08:	f007 f99b 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
   b9c0c:	8869      	ldrh	r1, [r5, #2]
   b9c0e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c12:	2210      	movs	r2, #16
   b9c14:	f007 f9b1 	bl	c0f7a <_ZN5Print11printNumberEmh>
    if (printPayload)
   b9c18:	2f01      	cmp	r7, #1
   b9c1a:	d101      	bne.n	b9c20 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b9c1c:	2e00      	cmp	r6, #0
   b9c1e:	d049      	beq.n	b9cb4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b9c20:	492f      	ldr	r1, [pc, #188]	; (b9ce0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b9c22:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b9c26:	4f2f      	ldr	r7, [pc, #188]	; (b9ce4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b9c28:	f007 f98b 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
   b9c2c:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b9c2e:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b9c30:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b9c34:	b2b3      	uxth	r3, r6
   b9c36:	429a      	cmp	r2, r3
   b9c38:	d941      	bls.n	b9cbe <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b9c3a:	4639      	mov	r1, r7
   b9c3c:	f007 f981 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b9c40:	b2b3      	uxth	r3, r6
   b9c42:	68a9      	ldr	r1, [r5, #8]
   b9c44:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c48:	5cc9      	ldrb	r1, [r1, r3]
   b9c4a:	2210      	movs	r2, #16
   b9c4c:	f7fe fbae 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b9c50:	3601      	adds	r6, #1
   b9c52:	e7ec      	b.n	b9c2e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9c54:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   b9c56:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9c5a:	d101      	bne.n	b9c60 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   b9c5c:	4922      	ldr	r1, [pc, #136]	; (b9ce8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   b9c5e:	e7bf      	b.n	b9be0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   b9c60:	2b06      	cmp	r3, #6
   b9c62:	d101      	bne.n	b9c68 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   b9c64:	4921      	ldr	r1, [pc, #132]	; (b9cec <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   b9c66:	e7bb      	b.n	b9be0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   b9c68:	2b0a      	cmp	r3, #10
   b9c6a:	d101      	bne.n	b9c70 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   b9c6c:	4920      	ldr	r1, [pc, #128]	; (b9cf0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   b9c6e:	e7b7      	b.n	b9be0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   b9c70:	4920      	ldr	r1, [pc, #128]	; (b9cf4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b9c72:	f007 f966 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   b9c76:	7829      	ldrb	r1, [r5, #0]
   b9c78:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c7c:	2210      	movs	r2, #16
   b9c7e:	f7fe fb95 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b9c82:	e7af      	b.n	b9be4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b9c84:	f640 0206 	movw	r2, #2054	; 0x806
   b9c88:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   b9c8a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b9c8e:	d101      	bne.n	b9c94 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   b9c90:	4919      	ldr	r1, [pc, #100]	; (b9cf8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   b9c92:	e7b4      	b.n	b9bfe <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   b9c94:	f640 1206 	movw	r2, #2310	; 0x906
   b9c98:	4293      	cmp	r3, r2
   b9c9a:	d101      	bne.n	b9ca0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   b9c9c:	4917      	ldr	r1, [pc, #92]	; (b9cfc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   b9c9e:	e7ae      	b.n	b9bfe <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   b9ca0:	4914      	ldr	r1, [pc, #80]	; (b9cf4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b9ca2:	f007 f94e 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   b9ca6:	7869      	ldrb	r1, [r5, #1]
   b9ca8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9cac:	2210      	movs	r2, #16
   b9cae:	f7fe fb7d 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b9cb2:	e7a6      	b.n	b9c02 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   b9cb4:	4912      	ldr	r1, [pc, #72]	; (b9d00 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   b9cb6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9cba:	f007 f942 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   b9cbe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9cc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   b9cc6:	f007 b940 	b.w	c0f4a <_ZN5Print7printlnEv>
}
   b9cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9ccc:	000c6abc 	.word	0x000c6abc
   b9cd0:	000c6ac1 	.word	0x000c6ac1
   b9cd4:	000c6ad1 	.word	0x000c6ad1
   b9cd8:	000c6ad6 	.word	0x000c6ad6
   b9cdc:	000c6ae4 	.word	0x000c6ae4
   b9ce0:	000c6aed 	.word	0x000c6aed
   b9ce4:	000c79d1 	.word	0x000c79d1
   b9ce8:	000c6ac5 	.word	0x000c6ac5
   b9cec:	000c6ac9 	.word	0x000c6ac9
   b9cf0:	000c6acd 	.word	0x000c6acd
   b9cf4:	000c6d42 	.word	0x000c6d42
   b9cf8:	000c6ada 	.word	0x000c6ada
   b9cfc:	000c6adf 	.word	0x000c6adf
   b9d00:	000c6af7 	.word	0x000c6af7

000b9d04 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   b9d04:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9d06:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   b9d0a:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9d0c:	b955      	cbnz	r5, b9d24 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   b9d0e:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9d12:	b90b      	cbnz	r3, b9d18 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   b9d14:	2000      	movs	r0, #0
}
   b9d16:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   b9d18:	491a      	ldr	r1, [pc, #104]	; (b9d84 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9d1a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9d1e:	f007 f92a 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b9d22:	e7f7      	b.n	b9d14 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   b9d24:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   b9d28:	b12b      	cbz	r3, b9d36 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   b9d2a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9d2e:	2b00      	cmp	r3, #0
   b9d30:	d0f0      	beq.n	b9d14 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   b9d32:	4915      	ldr	r1, [pc, #84]	; (b9d88 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   b9d34:	e7f1      	b.n	b9d1a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   b9d36:	4628      	mov	r0, r5
   b9d38:	f7fa f9af 	bl	b409a <_Znaj>
   b9d3c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9d40:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   b9d44:	b930      	cbnz	r0, b9d54 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9d46:	b91b      	cbnz	r3, b9d50 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   b9d48:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b9d4c:	2b00      	cmp	r3, #0
   b9d4e:	d0e1      	beq.n	b9d14 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9d50:	490e      	ldr	r1, [pc, #56]	; (b9d8c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   b9d52:	e7e2      	b.n	b9d1a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   b9d54:	b17b      	cbz	r3, b9d76 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   b9d56:	490e      	ldr	r1, [pc, #56]	; (b9d90 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   b9d58:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9d5c:	f007 f8f1 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   b9d60:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b9d64:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   b9d68:	220a      	movs	r2, #10
   b9d6a:	4628      	mov	r0, r5
   b9d6c:	f007 f905 	bl	c0f7a <_ZN5Print11printNumberEmh>
        n += println();
   b9d70:	4628      	mov	r0, r5
   b9d72:	f007 f8ea 	bl	c0f4a <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   b9d76:	2300      	movs	r3, #0
   b9d78:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   b9d7c:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   b9d80:	2001      	movs	r0, #1
   b9d82:	e7c8      	b.n	b9d16 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   b9d84:	000c6b09 	.word	0x000c6b09
   b9d88:	000c6b5a 	.word	0x000c6b5a
   b9d8c:	000c6b9d 	.word	0x000c6b9d
   b9d90:	000c6bc1 	.word	0x000c6bc1

000b9d94 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   b9d94:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b9d98:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   b9d9c:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b9d9e:	bf3b      	ittet	cc
   b9da0:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   b9da4:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   b9da6:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b9da8:	1a80      	subcc	r0, r0, r2
   b9daa:	b280      	uxth	r0, r0
}
   b9dac:	4770      	bx	lr

000b9dae <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   b9dae:	b508      	push	{r3, lr}
   b9db0:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   b9db2:	f7ff ffef 	bl	b9d94 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   b9db6:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   b9dba:	1a18      	subs	r0, r3, r0
}
   b9dbc:	b280      	uxth	r0, r0
   b9dbe:	bd08      	pop	{r3, pc}

000b9dc0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   b9dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   b9dc4:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b9dc8:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   b9dcc:	1aed      	subs	r5, r5, r3
   b9dce:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   b9dd0:	4295      	cmp	r5, r2
   b9dd2:	bf28      	it	cs
   b9dd4:	4615      	movcs	r5, r2
{
   b9dd6:	4616      	mov	r6, r2
   b9dd8:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9dda:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b9dde:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9de0:	462a      	mov	r2, r5
   b9de2:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b9de4:	b2bf      	uxth	r7, r7
{
   b9de6:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9de8:	f00a f922 	bl	c4030 <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   b9dec:	b19f      	cbz	r7, b9e16 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   b9dee:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   b9df2:	463a      	mov	r2, r7
   b9df4:	eb08 0105 	add.w	r1, r8, r5
   b9df8:	f00a f91a 	bl	c4030 <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   b9dfc:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   b9e00:	4620      	mov	r0, r4
   b9e02:	f7ff ffc7 	bl	b9d94 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   b9e06:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   b9e0a:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   b9e0c:	bf38      	it	cc
   b9e0e:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   b9e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   b9e16:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   b9e1a:	4416      	add	r6, r2
   b9e1c:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   b9e20:	e7ee      	b.n	b9e00 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000b9e24 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   b9e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9e26:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   b9e2a:	4604      	mov	r4, r0
   b9e2c:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9e2e:	b113      	cbz	r3, b9e36 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   b9e30:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   b9e34:	b953      	cbnz	r3, b9e4c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   b9e36:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   b9e3a:	b128      	cbz	r0, b9e48 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   b9e3c:	4924      	ldr	r1, [pc, #144]	; (b9ed0 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9e3e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e42:	f007 f898 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   b9e46:	2000      	movs	r0, #0
}
   b9e48:	b003      	add	sp, #12
   b9e4a:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   b9e4c:	f7ff ffaf 	bl	b9dae <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   b9e50:	886b      	ldrh	r3, [r5, #2]
   b9e52:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   b9e54:	b29b      	uxth	r3, r3
   b9e56:	4283      	cmp	r3, r0
   b9e58:	d908      	bls.n	b9e6c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9e5a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9e5e:	b91b      	cbnz	r3, b9e68 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   b9e60:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b9e64:	2800      	cmp	r0, #0
   b9e66:	d0ef      	beq.n	b9e48 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9e68:	491a      	ldr	r1, [pc, #104]	; (b9ed4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   b9e6a:	e7e8      	b.n	b9e3e <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b9e6c:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   b9e70:	2202      	movs	r2, #2
   b9e72:	4669      	mov	r1, sp
   b9e74:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b9e76:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   b9e7a:	f7ff ffa1 	bl	b9dc0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   b9e7e:	2201      	movs	r2, #1
   b9e80:	4629      	mov	r1, r5
   b9e82:	4620      	mov	r0, r4
   b9e84:	f7ff ff9c 	bl	b9dc0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   b9e88:	2201      	movs	r2, #1
   b9e8a:	18a9      	adds	r1, r5, r2
   b9e8c:	4620      	mov	r0, r4
   b9e8e:	f7ff ff97 	bl	b9dc0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   b9e92:	886b      	ldrh	r3, [r5, #2]
   b9e94:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   b9e98:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   b9e9a:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   b9e9c:	a901      	add	r1, sp, #4
   b9e9e:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   b9ea0:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   b9ea4:	f7ff ff8c 	bl	b9dc0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   b9ea8:	886a      	ldrh	r2, [r5, #2]
   b9eaa:	68a9      	ldr	r1, [r5, #8]
   b9eac:	4620      	mov	r0, r4
   b9eae:	f7ff ff87 	bl	b9dc0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   b9eb2:	2201      	movs	r2, #1
   b9eb4:	f105 010c 	add.w	r1, r5, #12
   b9eb8:	4620      	mov	r0, r4
   b9eba:	f7ff ff81 	bl	b9dc0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   b9ebe:	4620      	mov	r0, r4
   b9ec0:	2201      	movs	r2, #1
   b9ec2:	f105 010d 	add.w	r1, r5, #13
   b9ec6:	f7ff ff7b 	bl	b9dc0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   b9eca:	2001      	movs	r0, #1
   b9ecc:	e7bc      	b.n	b9e48 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   b9ece:	bf00      	nop
   b9ed0:	000c6be7 	.word	0x000c6be7
   b9ed4:	000c6c0f 	.word	0x000c6c0f

000b9ed8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   b9ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   b9edc:	780e      	ldrb	r6, [r1, #0]
   b9ede:	2e0d      	cmp	r6, #13
{
   b9ee0:	4604      	mov	r4, r0
   b9ee2:	460d      	mov	r5, r1
  switch (msg->cls)
   b9ee4:	f001 8228 	beq.w	bb338 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   b9ee8:	d809      	bhi.n	b9efe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   b9eea:	2e02      	cmp	r6, #2
   b9eec:	f000 879a 	beq.w	bae24 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   b9ef0:	2e06      	cmp	r6, #6
   b9ef2:	f001 81cc 	beq.w	bb28e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   b9ef6:	2e01      	cmp	r6, #1
   b9ef8:	d04f      	beq.n	b9f9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   b9efa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   b9efe:	2e13      	cmp	r6, #19
   b9f00:	f001 83eb 	beq.w	bb6da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   b9f04:	2e28      	cmp	r6, #40	; 0x28
   b9f06:	f001 84ca 	beq.w	bb89e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   b9f0a:	2e10      	cmp	r6, #16
   b9f0c:	d1f5      	bne.n	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   b9f0e:	680b      	ldr	r3, [r1, #0]
   b9f10:	4a8e      	ldr	r2, [pc, #568]	; (ba14c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   b9f12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9f16:	4293      	cmp	r3, r2
   b9f18:	f041 826a 	bne.w	bb3f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   b9f1c:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   b9f1e:	2e00      	cmp	r6, #0
   b9f20:	d0eb      	beq.n	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   b9f22:	68a8      	ldr	r0, [r5, #8]
   b9f24:	2100      	movs	r1, #0
   b9f26:	f7fe fa21 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f2a:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   b9f2c:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b9f2e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9f30:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b9f32:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9f34:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9f36:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9f38:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9f3a:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9f3c:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b9f3e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9f40:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b9f42:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   b9f44:	68a8      	ldr	r0, [r5, #8]
   b9f46:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   b9f48:	2108      	movs	r1, #8
   b9f4a:	f7fe fa0f 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f4e:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9f50:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9f52:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9f54:	210c      	movs	r1, #12
   b9f56:	f7fe fa16 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9f5a:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9f5c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b9f5e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9f60:	210e      	movs	r1, #14
   b9f62:	f7fe fa10 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b9f66:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9f68:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9f6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9f6e:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9f70:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9f72:	6a1a      	ldr	r2, [r3, #32]
   b9f74:	b17a      	cbz	r2, b9f96 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9f76:	7819      	ldrb	r1, [r3, #0]
   b9f78:	0708      	lsls	r0, r1, #28
   b9f7a:	d40c      	bmi.n	b9f96 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   b9f7c:	1d19      	adds	r1, r3, #4
   b9f7e:	3314      	adds	r3, #20
   b9f80:	f851 0b04 	ldr.w	r0, [r1], #4
   b9f84:	f842 0b04 	str.w	r0, [r2], #4
   b9f88:	4299      	cmp	r1, r3
   b9f8a:	d1f9      	bne.n	b9f80 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   b9f8c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   b9f8e:	7813      	ldrb	r3, [r2, #0]
   b9f90:	f043 0308 	orr.w	r3, r3, #8
   b9f94:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   b9f96:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9f98:	e03d      	b.n	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   b9f9a:	680b      	ldr	r3, [r1, #0]
   b9f9c:	4a6c      	ldr	r2, [pc, #432]	; (ba150 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   b9f9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9fa2:	4293      	cmp	r3, r2
   b9fa4:	d141      	bne.n	ba02a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   b9fa6:	68c6      	ldr	r6, [r0, #12]
   b9fa8:	2e00      	cmp	r6, #0
   b9faa:	d0a6      	beq.n	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   b9fac:	68a8      	ldr	r0, [r5, #8]
   b9fae:	2100      	movs	r1, #0
   b9fb0:	f7fe f9dc 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9fb4:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9fb6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b9fb8:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9fba:	2104      	movs	r1, #4
   b9fbc:	f7fe f9d6 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b9fc0:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9fc2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b9fc4:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9fc6:	2108      	movs	r1, #8
   b9fc8:	f7fe f9d0 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b9fcc:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9fce:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b9fd0:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9fd2:	210c      	movs	r1, #12
   b9fd4:	f7fe f9ca 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b9fd8:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   b9fda:	68a8      	ldr	r0, [r5, #8]
   b9fdc:	68e6      	ldr	r6, [r4, #12]
   b9fde:	2110      	movs	r1, #16
   b9fe0:	f7fe f9c4 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9fe4:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9fe6:	68e3      	ldr	r3, [r4, #12]
   b9fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9fec:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9fee:	68e3      	ldr	r3, [r4, #12]
   b9ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9ff2:	b17a      	cbz	r2, ba014 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9ff4:	7819      	ldrb	r1, [r3, #0]
   b9ff6:	0709      	lsls	r1, r1, #28
   b9ff8:	d40c      	bmi.n	ba014 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   b9ffa:	1d19      	adds	r1, r3, #4
   b9ffc:	3318      	adds	r3, #24
   b9ffe:	f851 0b04 	ldr.w	r0, [r1], #4
   ba002:	f842 0b04 	str.w	r0, [r2], #4
   ba006:	4299      	cmp	r1, r3
   ba008:	d1f9      	bne.n	b9ffe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba00a:	68e2      	ldr	r2, [r4, #12]
   ba00c:	7813      	ldrb	r3, [r2, #0]
   ba00e:	f043 0308 	orr.w	r3, r3, #8
   ba012:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba014:	68e3      	ldr	r3, [r4, #12]
   ba016:	781b      	ldrb	r3, [r3, #0]
   ba018:	075f      	lsls	r7, r3, #29
   ba01a:	f57f af6e 	bpl.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   ba01e:	4629      	mov	r1, r5
   ba020:	4620      	mov	r0, r4
}
   ba022:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   ba026:	f7ff befd 	b.w	b9e24 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   ba02a:	4a4a      	ldr	r2, [pc, #296]	; (ba154 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   ba02c:	4293      	cmp	r3, r2
   ba02e:	d13d      	bne.n	ba0ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   ba030:	6906      	ldr	r6, [r0, #16]
   ba032:	2e00      	cmp	r6, #0
   ba034:	f43f af61 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   ba038:	68a8      	ldr	r0, [r5, #8]
   ba03a:	2100      	movs	r1, #0
   ba03c:	f7fe f996 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba040:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba042:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   ba044:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba046:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   ba048:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba04a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   ba04c:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba04e:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   ba050:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba052:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   ba054:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba056:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   ba058:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   ba05a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   ba05c:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba05e:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   ba060:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   ba062:	68a8      	ldr	r0, [r5, #8]
   ba064:	6926      	ldr	r6, [r4, #16]
   ba066:	2108      	movs	r1, #8
   ba068:	f7fe f980 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba06c:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   ba06e:	68a8      	ldr	r0, [r5, #8]
   ba070:	6926      	ldr	r6, [r4, #16]
   ba072:	210c      	movs	r1, #12
   ba074:	f7fe f97a 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba078:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba07a:	6923      	ldr	r3, [r4, #16]
   ba07c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba080:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba082:	6923      	ldr	r3, [r4, #16]
   ba084:	6a1a      	ldr	r2, [r3, #32]
   ba086:	b17a      	cbz	r2, ba0a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba088:	7819      	ldrb	r1, [r3, #0]
   ba08a:	070e      	lsls	r6, r1, #28
   ba08c:	d40c      	bmi.n	ba0a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   ba08e:	1d19      	adds	r1, r3, #4
   ba090:	3314      	adds	r3, #20
   ba092:	f851 0b04 	ldr.w	r0, [r1], #4
   ba096:	f842 0b04 	str.w	r0, [r2], #4
   ba09a:	4299      	cmp	r1, r3
   ba09c:	d1f9      	bne.n	ba092 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba09e:	6922      	ldr	r2, [r4, #16]
   ba0a0:	7813      	ldrb	r3, [r2, #0]
   ba0a2:	f043 0308 	orr.w	r3, r3, #8
   ba0a6:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   ba0a8:	6923      	ldr	r3, [r4, #16]
   ba0aa:	e7b4      	b.n	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   ba0ac:	4a2a      	ldr	r2, [pc, #168]	; (ba158 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   ba0ae:	4293      	cmp	r3, r2
   ba0b0:	d154      	bne.n	ba15c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   ba0b2:	6946      	ldr	r6, [r0, #20]
   ba0b4:	2e00      	cmp	r6, #0
   ba0b6:	f43f af20 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   ba0ba:	68a8      	ldr	r0, [r5, #8]
   ba0bc:	2100      	movs	r1, #0
   ba0be:	f7fe f955 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0c2:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   ba0c4:	68a8      	ldr	r0, [r5, #8]
   ba0c6:	6966      	ldr	r6, [r4, #20]
   ba0c8:	2104      	movs	r1, #4
   ba0ca:	f7fe f95c 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba0ce:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   ba0d0:	68a8      	ldr	r0, [r5, #8]
   ba0d2:	6966      	ldr	r6, [r4, #20]
   ba0d4:	2106      	movs	r1, #6
   ba0d6:	f7fe f956 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba0da:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   ba0dc:	68a8      	ldr	r0, [r5, #8]
   ba0de:	6966      	ldr	r6, [r4, #20]
   ba0e0:	2108      	movs	r1, #8
   ba0e2:	f7fe f950 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba0e6:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   ba0e8:	68a8      	ldr	r0, [r5, #8]
   ba0ea:	6966      	ldr	r6, [r4, #20]
   ba0ec:	210a      	movs	r1, #10
   ba0ee:	f7fe f94a 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba0f2:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   ba0f4:	68a8      	ldr	r0, [r5, #8]
   ba0f6:	6966      	ldr	r6, [r4, #20]
   ba0f8:	210c      	movs	r1, #12
   ba0fa:	f7fe f944 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba0fe:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   ba100:	68a8      	ldr	r0, [r5, #8]
   ba102:	6966      	ldr	r6, [r4, #20]
   ba104:	210e      	movs	r1, #14
   ba106:	f7fe f93e 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba10a:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   ba10c:	68a8      	ldr	r0, [r5, #8]
   ba10e:	6966      	ldr	r6, [r4, #20]
   ba110:	2110      	movs	r1, #16
   ba112:	f7fe f938 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba116:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba118:	6963      	ldr	r3, [r4, #20]
   ba11a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba11e:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba120:	6963      	ldr	r3, [r4, #20]
   ba122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba124:	b17a      	cbz	r2, ba146 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba126:	7819      	ldrb	r1, [r3, #0]
   ba128:	0708      	lsls	r0, r1, #28
   ba12a:	d40c      	bmi.n	ba146 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   ba12c:	1d19      	adds	r1, r3, #4
   ba12e:	3318      	adds	r3, #24
   ba130:	f851 0b04 	ldr.w	r0, [r1], #4
   ba134:	f842 0b04 	str.w	r0, [r2], #4
   ba138:	4299      	cmp	r1, r3
   ba13a:	d1f9      	bne.n	ba130 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   ba13c:	6962      	ldr	r2, [r4, #20]
   ba13e:	7813      	ldrb	r3, [r2, #0]
   ba140:	f043 0308 	orr.w	r3, r3, #8
   ba144:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   ba146:	6963      	ldr	r3, [r4, #20]
   ba148:	e765      	b.n	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba14a:	bf00      	nop
   ba14c:	00101400 	.word	0x00101400
   ba150:	00140100 	.word	0x00140100
   ba154:	00100300 	.word	0x00100300
   ba158:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   ba15c:	4a8c      	ldr	r2, [pc, #560]	; (ba390 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   ba15e:	4293      	cmp	r3, r2
   ba160:	d149      	bne.n	ba1f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   ba162:	69c6      	ldr	r6, [r0, #28]
   ba164:	2e00      	cmp	r6, #0
   ba166:	f43f aec8 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   ba16a:	68a8      	ldr	r0, [r5, #8]
   ba16c:	2100      	movs	r1, #0
   ba16e:	f7fe f8fd 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba172:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba174:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   ba176:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   ba178:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   ba17a:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba17c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   ba17e:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba180:	2108      	movs	r1, #8
   ba182:	f7fe f8f3 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   ba186:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba188:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   ba18a:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba18c:	210c      	movs	r1, #12
   ba18e:	f7fe f8ed 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   ba192:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba194:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   ba196:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba198:	2110      	movs	r1, #16
   ba19a:	f7fe f8e7 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   ba19e:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   ba1a0:	68a8      	ldr	r0, [r5, #8]
   ba1a2:	69e6      	ldr	r6, [r4, #28]
   ba1a4:	2114      	movs	r1, #20
   ba1a6:	f7fe f8e1 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1aa:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   ba1ac:	68a8      	ldr	r0, [r5, #8]
   ba1ae:	69e6      	ldr	r6, [r4, #28]
   ba1b0:	2118      	movs	r1, #24
   ba1b2:	f7fe f8db 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1b6:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   ba1b8:	68a8      	ldr	r0, [r5, #8]
   ba1ba:	69e6      	ldr	r6, [r4, #28]
   ba1bc:	211c      	movs	r1, #28
   ba1be:	f7fe f8d5 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1c2:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba1c4:	69e3      	ldr	r3, [r4, #28]
   ba1c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba1ca:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba1cc:	69e3      	ldr	r3, [r4, #28]
   ba1ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   ba1d0:	b17a      	cbz	r2, ba1f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba1d2:	7819      	ldrb	r1, [r3, #0]
   ba1d4:	0709      	lsls	r1, r1, #28
   ba1d6:	d40c      	bmi.n	ba1f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   ba1d8:	1d19      	adds	r1, r3, #4
   ba1da:	3324      	adds	r3, #36	; 0x24
   ba1dc:	f851 0b04 	ldr.w	r0, [r1], #4
   ba1e0:	f842 0b04 	str.w	r0, [r2], #4
   ba1e4:	4299      	cmp	r1, r3
   ba1e6:	d1f9      	bne.n	ba1dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba1e8:	69e2      	ldr	r2, [r4, #28]
   ba1ea:	7813      	ldrb	r3, [r2, #0]
   ba1ec:	f043 0308 	orr.w	r3, r3, #8
   ba1f0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   ba1f2:	69e3      	ldr	r3, [r4, #28]
   ba1f4:	e70f      	b.n	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   ba1f6:	4a67      	ldr	r2, [pc, #412]	; (ba394 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   ba1f8:	4293      	cmp	r3, r2
   ba1fa:	f040 80cd 	bne.w	ba398 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   ba1fe:	6a06      	ldr	r6, [r0, #32]
   ba200:	2e00      	cmp	r6, #0
   ba202:	f43f ae7a 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   ba206:	68a8      	ldr	r0, [r5, #8]
   ba208:	2100      	movs	r1, #0
   ba20a:	f7fe f8af 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba20e:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   ba210:	68a8      	ldr	r0, [r5, #8]
   ba212:	6a26      	ldr	r6, [r4, #32]
   ba214:	2104      	movs	r1, #4
   ba216:	f7fe f8b6 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba21a:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   ba21c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   ba21e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba220:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   ba222:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   ba224:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   ba226:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba228:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   ba22a:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   ba22c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   ba22e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba230:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   ba232:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba234:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   ba236:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba238:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   ba23a:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba23c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   ba23e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba240:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   ba242:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba244:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   ba246:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba248:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   ba24a:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   ba24c:	210c      	movs	r1, #12
   ba24e:	68a8      	ldr	r0, [r5, #8]
   ba250:	6a26      	ldr	r6, [r4, #32]
   ba252:	f7fe f88b 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba256:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba258:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   ba25a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba25c:	2110      	movs	r1, #16
   ba25e:	f7fe f885 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   ba262:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba264:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   ba266:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba268:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   ba26a:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba26c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   ba26e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba270:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   ba272:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba274:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   ba276:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba278:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   ba27a:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba27c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   ba27e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba280:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   ba282:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba284:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   ba286:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba288:	2118      	movs	r1, #24
   ba28a:	f7fe f86f 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   ba28e:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba290:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba292:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba294:	211c      	movs	r1, #28
   ba296:	f7fe f869 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba29a:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba29c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba29e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2a0:	2120      	movs	r1, #32
   ba2a2:	f7fe f863 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba2a6:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2a8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba2aa:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2ac:	2124      	movs	r1, #36	; 0x24
   ba2ae:	f7fe f85d 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba2b2:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   ba2b4:	68a8      	ldr	r0, [r5, #8]
   ba2b6:	6a26      	ldr	r6, [r4, #32]
   ba2b8:	2128      	movs	r1, #40	; 0x28
   ba2ba:	f7fe f857 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2be:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   ba2c0:	6a26      	ldr	r6, [r4, #32]
   ba2c2:	68a8      	ldr	r0, [r5, #8]
   ba2c4:	212c      	movs	r1, #44	; 0x2c
   ba2c6:	f7fe f851 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2ca:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2cc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba2ce:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2d0:	2130      	movs	r1, #48	; 0x30
   ba2d2:	f7fe f84b 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba2d6:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2d8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba2da:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2dc:	2134      	movs	r1, #52	; 0x34
   ba2de:	f7fe f845 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba2e2:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2e4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba2e6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2e8:	2138      	movs	r1, #56	; 0x38
   ba2ea:	f7fe f83f 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba2ee:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2f0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba2f2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2f4:	213c      	movs	r1, #60	; 0x3c
   ba2f6:	f7fe f839 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba2fa:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2fc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba2fe:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba300:	2140      	movs	r1, #64	; 0x40
   ba302:	f7fe f833 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba306:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   ba308:	68a8      	ldr	r0, [r5, #8]
   ba30a:	6a26      	ldr	r6, [r4, #32]
   ba30c:	2144      	movs	r1, #68	; 0x44
   ba30e:	f7fe f82d 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba312:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   ba314:	68a8      	ldr	r0, [r5, #8]
   ba316:	6a26      	ldr	r6, [r4, #32]
   ba318:	2148      	movs	r1, #72	; 0x48
   ba31a:	f7fe f827 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba31e:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   ba320:	68a8      	ldr	r0, [r5, #8]
   ba322:	6a26      	ldr	r6, [r4, #32]
   ba324:	214c      	movs	r1, #76	; 0x4c
   ba326:	f7fe f82e 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba32a:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   ba32e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba330:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba332:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba336:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba33a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba33c:	68a8      	ldr	r0, [r5, #8]
   ba33e:	2154      	movs	r1, #84	; 0x54
   ba340:	f7fe f814 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba344:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba346:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba348:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba34a:	2158      	movs	r1, #88	; 0x58
   ba34c:	f7fe f81b 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba350:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   ba354:	68a8      	ldr	r0, [r5, #8]
   ba356:	6a26      	ldr	r6, [r4, #32]
   ba358:	215a      	movs	r1, #90	; 0x5a
   ba35a:	f7fe f814 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba35e:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba362:	6a22      	ldr	r2, [r4, #32]
   ba364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba368:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba36a:	6a22      	ldr	r2, [r4, #32]
   ba36c:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba36e:	6a21      	ldr	r1, [r4, #32]
   ba370:	6f08      	ldr	r0, [r1, #112]	; 0x70
   ba372:	b158      	cbz	r0, ba38c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba374:	780b      	ldrb	r3, [r1, #0]
   ba376:	071b      	lsls	r3, r3, #28
   ba378:	d408      	bmi.n	ba38c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   ba37a:	225c      	movs	r2, #92	; 0x5c
   ba37c:	3104      	adds	r1, #4
   ba37e:	f009 fe57 	bl	c4030 <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba382:	6a22      	ldr	r2, [r4, #32]
   ba384:	7813      	ldrb	r3, [r2, #0]
   ba386:	f043 0308 	orr.w	r3, r3, #8
   ba38a:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   ba38c:	6a23      	ldr	r3, [r4, #32]
   ba38e:	e642      	b.n	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba390:	00200500 	.word	0x00200500
   ba394:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   ba398:	4a8e      	ldr	r2, [pc, #568]	; (ba5d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   ba39a:	4293      	cmp	r3, r2
   ba39c:	d137      	bne.n	ba40e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   ba39e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba3a0:	2b00      	cmp	r3, #0
   ba3a2:	f43f adaa 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba3a6:	688a      	ldr	r2, [r1, #8]
   ba3a8:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   ba3aa:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   ba3ac:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba3ae:	68a8      	ldr	r0, [r5, #8]
   ba3b0:	2104      	movs	r1, #4
   ba3b2:	f7fd ffdb 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3b6:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   ba3b8:	68a8      	ldr	r0, [r5, #8]
   ba3ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba3bc:	2108      	movs	r1, #8
   ba3be:	f7fd ffd5 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3c2:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   ba3c4:	68a8      	ldr	r0, [r5, #8]
   ba3c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba3c8:	210c      	movs	r1, #12
   ba3ca:	f7fd ffcf 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3ce:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   ba3d0:	68a8      	ldr	r0, [r5, #8]
   ba3d2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba3d4:	2110      	movs	r1, #16
   ba3d6:	f7fd ffc9 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3da:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba3dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba3de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba3e2:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba3e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba3e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba3e8:	b17a      	cbz	r2, ba40a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba3ea:	7819      	ldrb	r1, [r3, #0]
   ba3ec:	070f      	lsls	r7, r1, #28
   ba3ee:	d40c      	bmi.n	ba40a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   ba3f0:	1d19      	adds	r1, r3, #4
   ba3f2:	3318      	adds	r3, #24
   ba3f4:	f851 0b04 	ldr.w	r0, [r1], #4
   ba3f8:	f842 0b04 	str.w	r0, [r2], #4
   ba3fc:	4299      	cmp	r1, r3
   ba3fe:	d1f9      	bne.n	ba3f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   ba400:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba402:	7813      	ldrb	r3, [r2, #0]
   ba404:	f043 0308 	orr.w	r3, r3, #8
   ba408:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   ba40a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba40c:	e603      	b.n	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   ba40e:	4a72      	ldr	r2, [pc, #456]	; (ba5d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   ba410:	4293      	cmp	r3, r2
   ba412:	d139      	bne.n	ba488 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   ba414:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   ba416:	2e00      	cmp	r6, #0
   ba418:	f43f ad6f 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   ba41c:	68a8      	ldr	r0, [r5, #8]
   ba41e:	2100      	movs	r1, #0
   ba420:	f7fd ffa4 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba424:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba426:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba42a:	2104      	movs	r1, #4
   ba42c:	f7fd ff9e 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba430:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba432:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba436:	2108      	movs	r1, #8
   ba438:	f7fd ff98 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba43c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba43e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba442:	210c      	movs	r1, #12
   ba444:	f7fd ff92 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba448:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   ba44a:	68a8      	ldr	r0, [r5, #8]
   ba44c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   ba44e:	2110      	movs	r1, #16
   ba450:	f7fd ff8c 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba454:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba456:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba45c:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba45e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba462:	b17a      	cbz	r2, ba484 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba464:	7819      	ldrb	r1, [r3, #0]
   ba466:	070e      	lsls	r6, r1, #28
   ba468:	d40c      	bmi.n	ba484 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   ba46a:	1d19      	adds	r1, r3, #4
   ba46c:	3318      	adds	r3, #24
   ba46e:	f851 0b04 	ldr.w	r0, [r1], #4
   ba472:	f842 0b04 	str.w	r0, [r2], #4
   ba476:	4299      	cmp	r1, r3
   ba478:	d1f9      	bne.n	ba46e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba47a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   ba47c:	7813      	ldrb	r3, [r2, #0]
   ba47e:	f043 0308 	orr.w	r3, r3, #8
   ba482:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba484:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba486:	e5c6      	b.n	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   ba488:	4a54      	ldr	r2, [pc, #336]	; (ba5dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   ba48a:	4293      	cmp	r3, r2
   ba48c:	d151      	bne.n	ba532 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   ba48e:	6b06      	ldr	r6, [r0, #48]	; 0x30
   ba490:	2e00      	cmp	r6, #0
   ba492:	f43f ad32 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   ba496:	68a8      	ldr	r0, [r5, #8]
   ba498:	2100      	movs	r1, #0
   ba49a:	f7fd ff67 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba49e:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4a0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba4a2:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4a4:	2104      	movs	r1, #4
   ba4a6:	f7fd ff61 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba4aa:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4ac:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba4ae:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4b0:	2108      	movs	r1, #8
   ba4b2:	f7fd ff5b 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba4b6:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4b8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba4ba:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4bc:	210c      	movs	r1, #12
   ba4be:	f7fd ff55 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba4c2:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   ba4c4:	68a8      	ldr	r0, [r5, #8]
   ba4c6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba4c8:	2110      	movs	r1, #16
   ba4ca:	f7fd ff4f 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4ce:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   ba4d0:	68a8      	ldr	r0, [r5, #8]
   ba4d2:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba4d4:	2114      	movs	r1, #20
   ba4d6:	f7fd ff49 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4da:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4dc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba4de:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4e0:	2118      	movs	r1, #24
   ba4e2:	f7fd ff43 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba4e6:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   ba4e8:	68a8      	ldr	r0, [r5, #8]
   ba4ea:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba4ec:	211c      	movs	r1, #28
   ba4ee:	f7fd ff3d 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4f2:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   ba4f4:	68a8      	ldr	r0, [r5, #8]
   ba4f6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba4f8:	2120      	movs	r1, #32
   ba4fa:	f7fd ff37 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4fe:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba500:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba506:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba508:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba50a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba50c:	b17a      	cbz	r2, ba52e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba50e:	7819      	ldrb	r1, [r3, #0]
   ba510:	0708      	lsls	r0, r1, #28
   ba512:	d40c      	bmi.n	ba52e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   ba514:	1d19      	adds	r1, r3, #4
   ba516:	3328      	adds	r3, #40	; 0x28
   ba518:	f851 0b04 	ldr.w	r0, [r1], #4
   ba51c:	f842 0b04 	str.w	r0, [r2], #4
   ba520:	4299      	cmp	r1, r3
   ba522:	d1f9      	bne.n	ba518 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   ba524:	6b22      	ldr	r2, [r4, #48]	; 0x30
   ba526:	7813      	ldrb	r3, [r2, #0]
   ba528:	f043 0308 	orr.w	r3, r3, #8
   ba52c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   ba52e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba530:	e571      	b.n	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   ba532:	4a2b      	ldr	r2, [pc, #172]	; (ba5e0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   ba534:	4293      	cmp	r3, r2
   ba536:	d155      	bne.n	ba5e4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   ba538:	6b43      	ldr	r3, [r0, #52]	; 0x34
   ba53a:	2b00      	cmp	r3, #0
   ba53c:	f43f acdd 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba540:	688a      	ldr	r2, [r1, #8]
   ba542:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   ba544:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   ba546:	6b46      	ldr	r6, [r0, #52]	; 0x34
   ba548:	68a8      	ldr	r0, [r5, #8]
   ba54a:	2104      	movs	r1, #4
   ba54c:	f7fd ff0e 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba550:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba552:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba554:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba556:	2108      	movs	r1, #8
   ba558:	f7fd ff08 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba55c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba55e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba560:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba562:	210c      	movs	r1, #12
   ba564:	f7fd ff02 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba568:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba56a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba56c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba56e:	2110      	movs	r1, #16
   ba570:	f7fd fefc 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba574:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba576:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   ba578:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba57a:	7d12      	ldrb	r2, [r2, #20]
   ba57c:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba57e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   ba580:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba582:	7d52      	ldrb	r2, [r2, #21]
   ba584:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba586:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   ba588:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba58a:	7d92      	ldrb	r2, [r2, #22]
   ba58c:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba58e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba590:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   ba592:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba594:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   ba596:	6b66      	ldr	r6, [r4, #52]	; 0x34
   ba598:	68a8      	ldr	r0, [r5, #8]
   ba59a:	2118      	movs	r1, #24
   ba59c:	f7fd fee6 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5a0:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba5a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba5a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba5a8:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba5aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   ba5ae:	b17a      	cbz	r2, ba5d0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba5b0:	7819      	ldrb	r1, [r3, #0]
   ba5b2:	0709      	lsls	r1, r1, #28
   ba5b4:	d40c      	bmi.n	ba5d0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   ba5b6:	1d19      	adds	r1, r3, #4
   ba5b8:	3320      	adds	r3, #32
   ba5ba:	f851 0b04 	ldr.w	r0, [r1], #4
   ba5be:	f842 0b04 	str.w	r0, [r2], #4
   ba5c2:	4299      	cmp	r1, r3
   ba5c4:	d1f9      	bne.n	ba5ba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba5c6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   ba5c8:	7813      	ldrb	r3, [r2, #0]
   ba5ca:	f043 0308 	orr.w	r3, r3, #8
   ba5ce:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba5d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba5d2:	e520      	b.n	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba5d4:	00140900 	.word	0x00140900
   ba5d8:	00141100 	.word	0x00141100
   ba5dc:	00241200 	.word	0x00241200
   ba5e0:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   ba5e4:	4a30      	ldr	r2, [pc, #192]	; (ba6a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   ba5e6:	4293      	cmp	r3, r2
   ba5e8:	d160      	bne.n	ba6ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   ba5ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
   ba5ec:	2b00      	cmp	r3, #0
   ba5ee:	f43f ac84 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba5f2:	688a      	ldr	r2, [r1, #8]
   ba5f4:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   ba5f6:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba5f8:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   ba5fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   ba5fc:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   ba5fe:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   ba600:	6b86      	ldr	r6, [r0, #56]	; 0x38
   ba602:	68a8      	ldr	r0, [r5, #8]
   ba604:	2104      	movs	r1, #4
   ba606:	f7fd feb1 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba60a:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba60c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   ba60e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba610:	2108      	movs	r1, #8
   ba612:	f7fd feab 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   ba616:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba618:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   ba61a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba61c:	210c      	movs	r1, #12
   ba61e:	f7fd fea5 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   ba622:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba624:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   ba626:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba628:	2110      	movs	r1, #16
   ba62a:	f7fd fe9f 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   ba62e:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba630:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   ba632:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba634:	2114      	movs	r1, #20
   ba636:	f7fd fe99 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   ba63a:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba63c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   ba63e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba640:	7e12      	ldrb	r2, [r2, #24]
   ba642:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba644:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   ba646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba648:	7e52      	ldrb	r2, [r2, #25]
   ba64a:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba64c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   ba64e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba650:	7e92      	ldrb	r2, [r2, #26]
   ba652:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba654:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   ba656:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba658:	7ed2      	ldrb	r2, [r2, #27]
   ba65a:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   ba65c:	68a8      	ldr	r0, [r5, #8]
   ba65e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   ba660:	211c      	movs	r1, #28
   ba662:	f7fd fe83 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba666:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   ba668:	68a8      	ldr	r0, [r5, #8]
   ba66a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   ba66c:	2120      	movs	r1, #32
   ba66e:	f7fd fe7d 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba672:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba674:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba67a:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba67c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba67e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba680:	b17a      	cbz	r2, ba6a2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba682:	7819      	ldrb	r1, [r3, #0]
   ba684:	070f      	lsls	r7, r1, #28
   ba686:	d40c      	bmi.n	ba6a2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   ba688:	1d19      	adds	r1, r3, #4
   ba68a:	3328      	adds	r3, #40	; 0x28
   ba68c:	f851 0b04 	ldr.w	r0, [r1], #4
   ba690:	f842 0b04 	str.w	r0, [r2], #4
   ba694:	4299      	cmp	r1, r3
   ba696:	d1f9      	bne.n	ba68c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   ba698:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   ba69a:	7813      	ldrb	r3, [r2, #0]
   ba69c:	f043 0308 	orr.w	r3, r3, #8
   ba6a0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   ba6a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba6a4:	e4b7      	b.n	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba6a6:	bf00      	nop
   ba6a8:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   ba6ac:	4aa1      	ldr	r2, [pc, #644]	; (ba934 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   ba6ae:	4293      	cmp	r3, r2
   ba6b0:	f040 80f0 	bne.w	ba894 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   ba6b4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   ba6b6:	2e00      	cmp	r6, #0
   ba6b8:	f43f ac1f 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   ba6bc:	68a8      	ldr	r0, [r5, #8]
   ba6be:	2100      	movs	r1, #0
   ba6c0:	f7fd fe54 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6c4:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba6c6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   ba6c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba6ca:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   ba6cc:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba6ce:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   ba6d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba6d2:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   ba6d4:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   ba6d6:	68a8      	ldr	r0, [r5, #8]
   ba6d8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba6da:	2106      	movs	r1, #6
   ba6dc:	f7fd fe53 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba6e0:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   ba6e2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   ba6e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba6e6:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   ba6e8:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba6ea:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   ba6ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba6ee:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   ba6f0:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba6f2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   ba6f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba6f6:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   ba6f8:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba6fa:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   ba6fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba6fe:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   ba700:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   ba702:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba704:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba706:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba708:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   ba70a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba70c:	68a8      	ldr	r0, [r5, #8]
   ba70e:	2110      	movs	r1, #16
   ba710:	f7fd fe2c 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba714:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba716:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba718:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba71a:	2114      	movs	r1, #20
   ba71c:	f7fd fe26 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba720:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba722:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba724:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba726:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba728:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba72a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba72c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba72e:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba730:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba732:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba734:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba736:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba738:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba73a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba73c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba73e:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba740:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba742:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba744:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba746:	211c      	movs	r1, #28
   ba748:	f7fd fe10 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba74c:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba74e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba750:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba752:	2120      	movs	r1, #32
   ba754:	f7fd fe0a 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba758:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba75a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba75c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba75e:	2124      	movs	r1, #36	; 0x24
   ba760:	f7fd fe04 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba764:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba766:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba768:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba76a:	2128      	movs	r1, #40	; 0x28
   ba76c:	f7fd fdfe 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba770:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   ba772:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba774:	68a8      	ldr	r0, [r5, #8]
   ba776:	212c      	movs	r1, #44	; 0x2c
   ba778:	f7fd fdf8 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba77c:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   ba77e:	68a8      	ldr	r0, [r5, #8]
   ba780:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba782:	2130      	movs	r1, #48	; 0x30
   ba784:	f7fd fdf2 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba788:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba78a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba78c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba78e:	2134      	movs	r1, #52	; 0x34
   ba790:	f7fd fdec 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba794:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba796:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba798:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba79a:	2138      	movs	r1, #56	; 0x38
   ba79c:	f7fd fde6 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba7a0:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7a2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba7a4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7a6:	213c      	movs	r1, #60	; 0x3c
   ba7a8:	f7fd fde0 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba7ac:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7ae:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba7b0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7b2:	2140      	movs	r1, #64	; 0x40
   ba7b4:	f7fd fdda 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba7b8:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   ba7ba:	68a8      	ldr	r0, [r5, #8]
   ba7bc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba7be:	2144      	movs	r1, #68	; 0x44
   ba7c0:	f7fd fdd4 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7c4:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7c6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba7c8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7ca:	2148      	movs	r1, #72	; 0x48
   ba7cc:	f7fd fdce 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba7d0:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7d2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba7d4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7d6:	214c      	movs	r1, #76	; 0x4c
   ba7d8:	f7fd fdc8 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba7dc:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7de:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba7e0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7e2:	2150      	movs	r1, #80	; 0x50
   ba7e4:	f7fd fdc2 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba7e8:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7ea:	2154      	movs	r1, #84	; 0x54
   ba7ec:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba7ee:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7f0:	f7fd fdbc 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba7f4:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   ba7f6:	68a8      	ldr	r0, [r5, #8]
   ba7f8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba7fa:	2158      	movs	r1, #88	; 0x58
   ba7fc:	f7fd fdc3 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba800:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   ba804:	68a8      	ldr	r0, [r5, #8]
   ba806:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba808:	215a      	movs	r1, #90	; 0x5a
   ba80a:	f7fd fdbc 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba80e:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   ba812:	68a8      	ldr	r0, [r5, #8]
   ba814:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba816:	215c      	movs	r1, #92	; 0x5c
   ba818:	f7fd fdb5 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba81c:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba820:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba822:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba824:	215e      	movs	r1, #94	; 0x5e
   ba826:	f7fd fdae 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba82a:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   ba82e:	68a8      	ldr	r0, [r5, #8]
   ba830:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba832:	2160      	movs	r1, #96	; 0x60
   ba834:	f7fd fda7 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba838:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   ba83c:	68a8      	ldr	r0, [r5, #8]
   ba83e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba840:	2162      	movs	r1, #98	; 0x62
   ba842:	f7fd fda0 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba846:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   ba84a:	68a8      	ldr	r0, [r5, #8]
   ba84c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba84e:	2164      	movs	r1, #100	; 0x64
   ba850:	f7fd fd8c 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba854:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   ba856:	68a8      	ldr	r0, [r5, #8]
   ba858:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba85a:	2168      	movs	r1, #104	; 0x68
   ba85c:	f7fd fd86 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba860:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba862:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba868:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba86a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba86c:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba86e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   ba870:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   ba874:	b158      	cbz	r0, ba88e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba876:	780b      	ldrb	r3, [r1, #0]
   ba878:	071e      	lsls	r6, r3, #28
   ba87a:	d408      	bmi.n	ba88e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   ba87c:	2274      	movs	r2, #116	; 0x74
   ba87e:	3104      	adds	r1, #4
   ba880:	f009 fbd6 	bl	c4030 <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba884:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba886:	7813      	ldrb	r3, [r2, #0]
   ba888:	f043 0308 	orr.w	r3, r3, #8
   ba88c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   ba88e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba890:	f7ff bbc1 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   ba894:	4a28      	ldr	r2, [pc, #160]	; (ba938 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   ba896:	4293      	cmp	r3, r2
   ba898:	d150      	bne.n	ba93c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   ba89a:	6a86      	ldr	r6, [r0, #40]	; 0x28
   ba89c:	2e00      	cmp	r6, #0
   ba89e:	f43f ab2c 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   ba8a2:	68a8      	ldr	r0, [r5, #8]
   ba8a4:	2100      	movs	r1, #0
   ba8a6:	f7fd fd61 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba8aa:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   ba8ac:	68a8      	ldr	r0, [r5, #8]
   ba8ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba8b0:	2104      	movs	r1, #4
   ba8b2:	f7fd fd5b 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba8b6:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8b8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba8ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8bc:	2108      	movs	r1, #8
   ba8be:	f7fd fd55 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba8c2:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   ba8c4:	68a8      	ldr	r0, [r5, #8]
   ba8c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba8c8:	210c      	movs	r1, #12
   ba8ca:	f7fd fd5c 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba8ce:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   ba8d0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba8d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba8d4:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba8d6:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   ba8d8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba8da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba8dc:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba8de:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   ba8e0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba8e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba8e4:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba8e6:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   ba8e8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba8ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba8ec:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba8ee:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   ba8f0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba8f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba8f4:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba8f6:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba8f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba8fa:	68aa      	ldr	r2, [r5, #8]
   ba8fc:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba8fe:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba900:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba906:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba908:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba90a:	6a1a      	ldr	r2, [r3, #32]
   ba90c:	b17a      	cbz	r2, ba92e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba90e:	7819      	ldrb	r1, [r3, #0]
   ba910:	0708      	lsls	r0, r1, #28
   ba912:	d40c      	bmi.n	ba92e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   ba914:	1d19      	adds	r1, r3, #4
   ba916:	3318      	adds	r3, #24
   ba918:	f851 0b04 	ldr.w	r0, [r1], #4
   ba91c:	f842 0b04 	str.w	r0, [r2], #4
   ba920:	4299      	cmp	r1, r3
   ba922:	d1f9      	bne.n	ba918 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   ba924:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   ba926:	7813      	ldrb	r3, [r2, #0]
   ba928:	f043 0308 	orr.w	r3, r3, #8
   ba92c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   ba92e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba930:	f7ff bb71 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba934:	00741700 	.word	0x00741700
   ba938:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   ba93c:	4a84      	ldr	r2, [pc, #528]	; (bab50 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   ba93e:	4293      	cmp	r3, r2
   ba940:	d13a      	bne.n	ba9b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   ba942:	6c06      	ldr	r6, [r0, #64]	; 0x40
   ba944:	2e00      	cmp	r6, #0
   ba946:	f43f aad8 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   ba94a:	68a8      	ldr	r0, [r5, #8]
   ba94c:	2100      	movs	r1, #0
   ba94e:	f7fd fd0d 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba952:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba954:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba956:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba958:	2104      	movs	r1, #4
   ba95a:	f7fd fd07 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba95e:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba960:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba962:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba964:	2108      	movs	r1, #8
   ba966:	f7fd fd01 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba96a:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   ba96c:	68a8      	ldr	r0, [r5, #8]
   ba96e:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba970:	210c      	movs	r1, #12
   ba972:	f7fd fcfb 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba976:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   ba978:	68a8      	ldr	r0, [r5, #8]
   ba97a:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba97c:	2110      	movs	r1, #16
   ba97e:	f7fd fcf5 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba982:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba984:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba98a:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba98c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba98e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba990:	b17a      	cbz	r2, ba9b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba992:	7819      	ldrb	r1, [r3, #0]
   ba994:	0709      	lsls	r1, r1, #28
   ba996:	d40c      	bmi.n	ba9b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   ba998:	1d19      	adds	r1, r3, #4
   ba99a:	3318      	adds	r3, #24
   ba99c:	f851 0b04 	ldr.w	r0, [r1], #4
   ba9a0:	f842 0b04 	str.w	r0, [r2], #4
   ba9a4:	4299      	cmp	r1, r3
   ba9a6:	d1f9      	bne.n	ba99c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   ba9a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   ba9aa:	7813      	ldrb	r3, [r2, #0]
   ba9ac:	f043 0308 	orr.w	r3, r3, #8
   ba9b0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   ba9b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba9b4:	f7ff bb2f 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   ba9b8:	4a66      	ldr	r2, [pc, #408]	; (bab54 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   ba9ba:	4293      	cmp	r3, r2
   ba9bc:	d138      	bne.n	baa30 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   ba9be:	6c46      	ldr	r6, [r0, #68]	; 0x44
   ba9c0:	2e00      	cmp	r6, #0
   ba9c2:	f43f aa9a 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   ba9c6:	68a8      	ldr	r0, [r5, #8]
   ba9c8:	2100      	movs	r1, #0
   ba9ca:	f7fd fccf 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9ce:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba9d0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba9d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba9d4:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba9d6:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba9d8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba9da:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba9dc:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba9de:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba9e0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   ba9e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba9e4:	7a52      	ldrb	r2, [r2, #9]
   ba9e6:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba9e8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba9ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba9ec:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba9ee:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba9f0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   ba9f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba9f4:	7ad2      	ldrb	r2, [r2, #11]
   ba9f6:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9f8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba9fa:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9fc:	210c      	movs	r1, #12
   ba9fe:	f7fd fcb5 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   baa02:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   baa04:	68a8      	ldr	r0, [r5, #8]
   baa06:	6c66      	ldr	r6, [r4, #68]	; 0x44
   baa08:	2110      	movs	r1, #16
   baa0a:	f7fd fcbc 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa0e:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   baa10:	68a8      	ldr	r0, [r5, #8]
   baa12:	6c66      	ldr	r6, [r4, #68]	; 0x44
   baa14:	2112      	movs	r1, #18
   baa16:	f7fd fcb6 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa1a:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   baa1c:	68ab      	ldr	r3, [r5, #8]
   baa1e:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   baa20:	6c63      	ldr	r3, [r4, #68]	; 0x44
   baa22:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baa24:	6c63      	ldr	r3, [r4, #68]	; 0x44
   baa26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baa2a:	61da      	str	r2, [r3, #28]
   baa2c:	f7ff ba65 	b.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   baa30:	4a49      	ldr	r2, [pc, #292]	; (bab58 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   baa32:	4293      	cmp	r3, r2
   baa34:	d162      	bne.n	baafc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   baa36:	6c83      	ldr	r3, [r0, #72]	; 0x48
   baa38:	2b00      	cmp	r3, #0
   baa3a:	f43f aa5e 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   baa3e:	688a      	ldr	r2, [r1, #8]
   baa40:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   baa42:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   baa44:	6c86      	ldr	r6, [r0, #72]	; 0x48
   baa46:	68a8      	ldr	r0, [r5, #8]
   baa48:	2104      	movs	r1, #4
   baa4a:	f7fd fc8f 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa4e:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   baa50:	68a8      	ldr	r0, [r5, #8]
   baa52:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   baa54:	2108      	movs	r1, #8
   baa56:	f7fd fc89 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa5a:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa5c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   baa5e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa60:	210c      	movs	r1, #12
   baa62:	f7fd fc83 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   baa66:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa68:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   baa6a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa6c:	2110      	movs	r1, #16
   baa6e:	f7fd fc7d 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   baa72:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa74:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   baa76:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa78:	2114      	movs	r1, #20
   baa7a:	f7fd fc77 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   baa7e:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   baa80:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   baa82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baa84:	7e12      	ldrb	r2, [r2, #24]
   baa86:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   baa88:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   baa8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baa8c:	7e52      	ldrb	r2, [r2, #25]
   baa8e:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   baa90:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   baa92:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baa94:	7e92      	ldrb	r2, [r2, #26]
   baa96:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   baa98:	211c      	movs	r1, #28
   baa9a:	68a8      	ldr	r0, [r5, #8]
   baa9c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   baa9e:	f7fd fc65 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baaa2:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   baaa4:	68a8      	ldr	r0, [r5, #8]
   baaa6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   baaa8:	2120      	movs	r1, #32
   baaaa:	f7fd fc5f 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baaae:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   baab0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   baab2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baab4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   baab8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   baabc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   baabe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baac0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   baac4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baac8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baaca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baace:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baad0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   baad4:	b17a      	cbz	r2, baaf6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baad6:	7819      	ldrb	r1, [r3, #0]
   baad8:	070f      	lsls	r7, r1, #28
   baada:	d40c      	bmi.n	baaf6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   baadc:	1d19      	adds	r1, r3, #4
   baade:	332c      	adds	r3, #44	; 0x2c
   baae0:	f851 0b04 	ldr.w	r0, [r1], #4
   baae4:	f842 0b04 	str.w	r0, [r2], #4
   baae8:	4299      	cmp	r1, r3
   baaea:	d1f9      	bne.n	baae0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   baaec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   baaee:	7813      	ldrb	r3, [r2, #0]
   baaf0:	f043 0308 	orr.w	r3, r3, #8
   baaf4:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   baaf6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baaf8:	f7ff ba8d 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   baafc:	784a      	ldrb	r2, [r1, #1]
   baafe:	2a35      	cmp	r2, #53	; 0x35
   bab00:	d17f      	bne.n	bac02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   bab02:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   bab04:	2e00      	cmp	r6, #0
   bab06:	f43f a9f8 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   bab0a:	68a8      	ldr	r0, [r5, #8]
   bab0c:	2100      	movs	r1, #0
   bab0e:	f7fd fc2d 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab12:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bab14:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   bab16:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bab18:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   bab1a:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bab1c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   bab1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bab20:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   bab22:	725a      	strb	r2, [r3, #9]
   bab24:	f04f 0808 	mov.w	r8, #8
   bab28:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   bab2a:	f04f 0a0c 	mov.w	sl, #12
   bab2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bab30:	7a59      	ldrb	r1, [r3, #9]
   bab32:	b2ba      	uxth	r2, r7
   bab34:	4291      	cmp	r1, r2
   bab36:	d811      	bhi.n	bab5c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   bab38:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bab3a:	2201      	movs	r2, #1
   bab3c:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bab40:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   bab42:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   bab46:	2800      	cmp	r0, #0
   bab48:	d14d      	bne.n	babe6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   bab4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bab4c:	f7ff ba63 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bab50:	00142200 	.word	0x00142200
   bab54:	00182600 	.word	0x00182600
   bab58:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   bab5c:	886a      	ldrh	r2, [r5, #2]
   bab5e:	fb0a f607 	mul.w	r6, sl, r7
   bab62:	3a08      	subs	r2, #8
   bab64:	42b2      	cmp	r2, r6
   bab66:	dde7      	ble.n	bab38 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   bab68:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   bab6a:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   bab6c:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   bab70:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bab72:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bab74:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bab76:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bab78:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   bab7a:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bab7c:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bab7e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   bab80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bab82:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   bab84:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   bab86:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   bab88:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bab8a:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   bab8c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bab8e:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   bab90:	4433      	add	r3, r6
   bab92:	78d2      	ldrb	r2, [r2, #3]
   bab94:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   bab96:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bab9a:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   bab9e:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   baba2:	68a8      	ldr	r0, [r5, #8]
   baba4:	b289      	uxth	r1, r1
   baba6:	f7fd fbee 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   babaa:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   babac:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   babb0:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   babb4:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   babb8:	68a8      	ldr	r0, [r5, #8]
   babba:	b289      	uxth	r1, r1
   babbc:	f7fd fbe3 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   babc0:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   babc2:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   babc6:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   babca:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   babce:	68a8      	ldr	r0, [r5, #8]
   babd0:	b289      	uxth	r1, r1
   babd2:	f7fd fbcb 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babd6:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   babd8:	3701      	adds	r7, #1
   babda:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   babdc:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   babde:	f108 080c 	add.w	r8, r8, #12
   babe2:	d1a4      	bne.n	bab2e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   babe4:	e7a8      	b.n	bab38 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   babe6:	780b      	ldrb	r3, [r1, #0]
   babe8:	071e      	lsls	r6, r3, #28
   babea:	d4ae      	bmi.n	bab4a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   babec:	f640 32fc 	movw	r2, #3068	; 0xbfc
   babf0:	3104      	adds	r1, #4
   babf2:	f009 fa1d 	bl	c4030 <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   babf6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   babf8:	7813      	ldrb	r3, [r2, #0]
   babfa:	f043 0308 	orr.w	r3, r3, #8
   babfe:	7013      	strb	r3, [r2, #0]
   bac00:	e7a3      	b.n	bab4a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   bac02:	2a3c      	cmp	r2, #60	; 0x3c
   bac04:	f040 80bf 	bne.w	bad86 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   bac08:	884a      	ldrh	r2, [r1, #2]
   bac0a:	2a28      	cmp	r2, #40	; 0x28
   bac0c:	d002      	beq.n	bac14 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   bac0e:	2a40      	cmp	r2, #64	; 0x40
   bac10:	f040 80b9 	bne.w	bad86 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   bac14:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac16:	2b00      	cmp	r3, #0
   bac18:	f43f a96f 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bac1c:	68aa      	ldr	r2, [r5, #8]
   bac1e:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   bac20:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   bac22:	68a8      	ldr	r0, [r5, #8]
   bac24:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bac26:	2102      	movs	r1, #2
   bac28:	f7fd fbad 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac2c:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   bac2e:	68a8      	ldr	r0, [r5, #8]
   bac30:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bac32:	2104      	movs	r1, #4
   bac34:	f7fd fb9a 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac38:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac3a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   bac3c:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac3e:	2108      	movs	r1, #8
   bac40:	f7fd fb94 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   bac44:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac46:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   bac48:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac4a:	210c      	movs	r1, #12
   bac4c:	f7fd fb8e 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   bac50:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac52:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   bac54:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac56:	2110      	movs	r1, #16
   bac58:	f7fd fb88 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   bac5c:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   bac5e:	886b      	ldrh	r3, [r5, #2]
   bac60:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bac62:	2b28      	cmp	r3, #40	; 0x28
   bac64:	d14b      	bne.n	bacfe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   bac66:	2600      	movs	r6, #0
   bac68:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   bac6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac6c:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   bac6e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   bac70:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac72:	7d12      	ldrb	r2, [r2, #20]
   bac74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   bac78:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   bac7a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac7c:	7d52      	ldrb	r2, [r2, #21]
   bac7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   bac82:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   bac84:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac86:	7d92      	ldrb	r2, [r2, #22]
   bac88:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   bac8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac8e:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   bac92:	68a8      	ldr	r0, [r5, #8]
   bac94:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bac96:	2118      	movs	r1, #24
   bac98:	f7fd fb68 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac9c:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   bac9e:	68a8      	ldr	r0, [r5, #8]
   baca0:	6d27      	ldr	r7, [r4, #80]	; 0x50
   baca2:	211c      	movs	r1, #28
   baca4:	f7fd fb62 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baca8:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   bacaa:	68a8      	ldr	r0, [r5, #8]
   bacac:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bacae:	2120      	movs	r1, #32
   bacb0:	f7fd fb5c 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacb4:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   bacb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bacb8:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   bacba:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bacbc:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   bacbe:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bacc0:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   bacc2:	68a8      	ldr	r0, [r5, #8]
   bacc4:	f7fd fb52 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacc8:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bacca:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bacd0:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bacd2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bacd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   bacd6:	b17a      	cbz	r2, bacf8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bacd8:	7819      	ldrb	r1, [r3, #0]
   bacda:	0708      	lsls	r0, r1, #28
   bacdc:	d40c      	bmi.n	bacf8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   bacde:	1d19      	adds	r1, r3, #4
   bace0:	3344      	adds	r3, #68	; 0x44
   bace2:	f851 0b04 	ldr.w	r0, [r1], #4
   bace6:	f842 0b04 	str.w	r0, [r2], #4
   bacea:	4299      	cmp	r1, r3
   bacec:	d1f9      	bne.n	bace2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   bacee:	6d22      	ldr	r2, [r4, #80]	; 0x50
   bacf0:	7813      	ldrb	r3, [r2, #0]
   bacf2:	f043 0308 	orr.w	r3, r3, #8
   bacf6:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   bacf8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bacfa:	f7ff b98c 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bacfe:	68a8      	ldr	r0, [r5, #8]
   bad00:	2114      	movs	r1, #20
   bad02:	f7fd fb33 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   bad06:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad08:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   bad0a:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad0c:	2118      	movs	r1, #24
   bad0e:	f7fd fb2d 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   bad12:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   bad14:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   bad16:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bad18:	f892 2020 	ldrb.w	r2, [r2, #32]
   bad1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   bad20:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   bad22:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bad24:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   bad28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   bad2c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   bad2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bad30:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   bad34:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   bad38:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   bad3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bad3c:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   bad40:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   bad44:	68a8      	ldr	r0, [r5, #8]
   bad46:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bad48:	2124      	movs	r1, #36	; 0x24
   bad4a:	f7fd fb0f 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad4e:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   bad50:	68a8      	ldr	r0, [r5, #8]
   bad52:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bad54:	2128      	movs	r1, #40	; 0x28
   bad56:	f7fd fb09 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad5a:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   bad5c:	68a8      	ldr	r0, [r5, #8]
   bad5e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bad60:	212c      	movs	r1, #44	; 0x2c
   bad62:	f7fd fb03 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad66:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   bad68:	68a8      	ldr	r0, [r5, #8]
   bad6a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bad6c:	2130      	movs	r1, #48	; 0x30
   bad6e:	f7fd fafd 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad72:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   bad74:	2134      	movs	r1, #52	; 0x34
   bad76:	68a8      	ldr	r0, [r5, #8]
   bad78:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bad7a:	f7fd faf7 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad7e:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   bad80:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bad82:	213c      	movs	r1, #60	; 0x3c
   bad84:	e79d      	b.n	bacc2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   bad86:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   bad8a:	d12a      	bne.n	bade2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   bad8c:	6d66      	ldr	r6, [r4, #84]	; 0x54
   bad8e:	2e00      	cmp	r6, #0
   bad90:	f43f a8b3 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   bad94:	68a8      	ldr	r0, [r5, #8]
   bad96:	2100      	movs	r1, #0
   bad98:	f7fd fae8 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad9c:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bad9e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   bada0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   bada2:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   bada4:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bada6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   bada8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   badaa:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   badac:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   badae:	6d63      	ldr	r3, [r4, #84]	; 0x54
   badb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   badb4:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   badb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   badb8:	6a1a      	ldr	r2, [r3, #32]
   badba:	b17a      	cbz	r2, baddc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   badbc:	7819      	ldrb	r1, [r3, #0]
   badbe:	0709      	lsls	r1, r1, #28
   badc0:	d40c      	bmi.n	baddc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   badc2:	1d19      	adds	r1, r3, #4
   badc4:	3314      	adds	r3, #20
   badc6:	f851 0b04 	ldr.w	r0, [r1], #4
   badca:	f842 0b04 	str.w	r0, [r2], #4
   badce:	4299      	cmp	r1, r3
   badd0:	d1f9      	bne.n	badc6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   badd2:	6d62      	ldr	r2, [r4, #84]	; 0x54
   badd4:	7813      	ldrb	r3, [r2, #0]
   badd6:	f043 0308 	orr.w	r3, r3, #8
   badda:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   baddc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   badde:	f7ff b91a 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   bade2:	4aa1      	ldr	r2, [pc, #644]	; (bb068 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   bade4:	4293      	cmp	r3, r2
   bade6:	f47f a888 	bne.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   badea:	69a6      	ldr	r6, [r4, #24]
   badec:	2e00      	cmp	r6, #0
   badee:	f43f a884 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   badf2:	68a8      	ldr	r0, [r5, #8]
   badf4:	2100      	movs	r1, #0
   badf6:	f7fd fab9 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   badfa:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   badfc:	69a3      	ldr	r3, [r4, #24]
   badfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bae02:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bae04:	69a3      	ldr	r3, [r4, #24]
   bae06:	691a      	ldr	r2, [r3, #16]
   bae08:	b14a      	cbz	r2, bae1e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bae0a:	7819      	ldrb	r1, [r3, #0]
   bae0c:	070f      	lsls	r7, r1, #28
   bae0e:	d406      	bmi.n	bae1e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   bae10:	685b      	ldr	r3, [r3, #4]
   bae12:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   bae14:	69a2      	ldr	r2, [r4, #24]
   bae16:	7813      	ldrb	r3, [r2, #0]
   bae18:	f043 0308 	orr.w	r3, r3, #8
   bae1c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   bae1e:	69a3      	ldr	r3, [r4, #24]
   bae20:	f7ff b8f9 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   bae24:	784b      	ldrb	r3, [r1, #1]
   bae26:	2b72      	cmp	r3, #114	; 0x72
   bae28:	f040 80a4 	bne.w	baf74 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   bae2c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   bae2e:	2b00      	cmp	r3, #0
   bae30:	d069      	beq.n	baf06 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   bae32:	689b      	ldr	r3, [r3, #8]
   bae34:	2b00      	cmp	r3, #0
   bae36:	d066      	beq.n	baf06 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   bae38:	688a      	ldr	r2, [r1, #8]
   bae3a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   bae3c:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   bae3e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   bae40:	68a8      	ldr	r0, [r5, #8]
   bae42:	689f      	ldr	r7, [r3, #8]
   bae44:	4631      	mov	r1, r6
   bae46:	f7fd fa9e 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bae4a:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   bae4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bae4e:	68a8      	ldr	r0, [r5, #8]
   bae50:	689e      	ldr	r6, [r3, #8]
   bae52:	2104      	movs	r1, #4
   bae54:	f7fd fa8a 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae58:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   bae5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bae5c:	68a8      	ldr	r0, [r5, #8]
   bae5e:	689e      	ldr	r6, [r3, #8]
   bae60:	2108      	movs	r1, #8
   bae62:	f7fd fa83 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae66:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   bae68:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bae6a:	68a8      	ldr	r0, [r5, #8]
   bae6c:	689e      	ldr	r6, [r3, #8]
   bae6e:	210c      	movs	r1, #12
   bae70:	f7fd fa7c 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae74:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   bae76:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bae78:	68a8      	ldr	r0, [r5, #8]
   bae7a:	689e      	ldr	r6, [r3, #8]
   bae7c:	2110      	movs	r1, #16
   bae7e:	f7fd fa82 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bae82:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bae84:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bae86:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bae88:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bae8a:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bae8c:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bae8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bae90:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bae92:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bae94:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bae96:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   bae98:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bae9a:	689e      	ldr	r6, [r3, #8]
   bae9c:	7833      	ldrb	r3, [r6, #0]
   bae9e:	bb23      	cbnz	r3, baeea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   baea0:	68a8      	ldr	r0, [r5, #8]
   baea2:	f44f 7103 	mov.w	r1, #524	; 0x20c
   baea6:	f7fd fa6e 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baeaa:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   baeac:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   baeae:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   baeb0:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   baeb2:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   baeb6:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   baeb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   baeba:	689b      	ldr	r3, [r3, #8]
   baebc:	781a      	ldrb	r2, [r3, #0]
   baebe:	2a00      	cmp	r2, #0
   baec0:	f040 865d 	bne.w	bbb7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   baec4:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   baec6:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   baeca:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   baecc:	b299      	uxth	r1, r3
   baece:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   baed0:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   baed2:	d914      	bls.n	baefe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   baed4:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   baed8:	d011      	beq.n	baefe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   baeda:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   baedc:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   baede:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   baee0:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   baee2:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   baee4:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   baee6:	3301      	adds	r3, #1
   baee8:	e7f0      	b.n	baecc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   baeea:	68a8      	ldr	r0, [r5, #8]
   baeec:	2114      	movs	r1, #20
   baeee:	f7fd fa4a 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baef2:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   baef4:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   baef6:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   baef8:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   baefa:	7d92      	ldrb	r2, [r2, #22]
   baefc:	e7db      	b.n	baeb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   baefe:	7813      	ldrb	r3, [r2, #0]
   baf00:	f043 0308 	orr.w	r3, r3, #8
   baf04:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   baf06:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baf08:	2b00      	cmp	r3, #0
   baf0a:	f43e aff6 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   baf0e:	689b      	ldr	r3, [r3, #8]
   baf10:	2b00      	cmp	r3, #0
   baf12:	f43e aff2 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   baf16:	22b5      	movs	r2, #181	; 0xb5
   baf18:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   baf1a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baf1c:	689b      	ldr	r3, [r3, #8]
   baf1e:	2262      	movs	r2, #98	; 0x62
   baf20:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   baf22:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baf24:	689b      	ldr	r3, [r3, #8]
   baf26:	2202      	movs	r2, #2
   baf28:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   baf2a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baf2c:	689b      	ldr	r3, [r3, #8]
   baf2e:	2272      	movs	r2, #114	; 0x72
   baf30:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   baf32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baf34:	886a      	ldrh	r2, [r5, #2]
   baf36:	689b      	ldr	r3, [r3, #8]
   baf38:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   baf3a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baf3c:	689a      	ldr	r2, [r3, #8]
   baf3e:	886b      	ldrh	r3, [r5, #2]
   baf40:	0a1b      	lsrs	r3, r3, #8
   baf42:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   baf44:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baf46:	886a      	ldrh	r2, [r5, #2]
   baf48:	6898      	ldr	r0, [r3, #8]
   baf4a:	68a9      	ldr	r1, [r5, #8]
   baf4c:	3006      	adds	r0, #6
   baf4e:	f009 f86f 	bl	c4030 <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   baf52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baf54:	7b2a      	ldrb	r2, [r5, #12]
   baf56:	689b      	ldr	r3, [r3, #8]
   baf58:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   baf5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baf5e:	7b6a      	ldrb	r2, [r5, #13]
   baf60:	689b      	ldr	r3, [r3, #8]
   baf62:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   baf66:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   baf68:	7813      	ldrb	r3, [r2, #0]
   baf6a:	f043 0308 	orr.w	r3, r3, #8
   baf6e:	7013      	strb	r3, [r2, #0]
   baf70:	f7fe bfc3 	b.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   baf74:	2b73      	cmp	r3, #115	; 0x73
   baf76:	d14d      	bne.n	bb014 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   baf78:	6e01      	ldr	r1, [r0, #96]	; 0x60
   baf7a:	780b      	ldrb	r3, [r1, #0]
   baf7c:	071e      	lsls	r6, r3, #28
   baf7e:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   baf82:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   baf86:	d543      	bpl.n	bb010 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   baf88:	0843      	lsrs	r3, r0, #1
   baf8a:	f47e afb6 	bne.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   baf8e:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   baf90:	f44f 7688 	mov.w	r6, #272	; 0x110
   baf94:	688b      	ldr	r3, [r1, #8]
   baf96:	437e      	muls	r6, r7
   baf98:	22b5      	movs	r2, #181	; 0xb5
   baf9a:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   baf9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   baf9e:	689b      	ldr	r3, [r3, #8]
   bafa0:	4433      	add	r3, r6
   bafa2:	2262      	movs	r2, #98	; 0x62
   bafa4:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   bafa6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bafa8:	689b      	ldr	r3, [r3, #8]
   bafaa:	4433      	add	r3, r6
   bafac:	2202      	movs	r2, #2
   bafae:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   bafb0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bafb2:	689b      	ldr	r3, [r3, #8]
   bafb4:	4433      	add	r3, r6
   bafb6:	2273      	movs	r2, #115	; 0x73
   bafb8:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   bafba:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bafbc:	886a      	ldrh	r2, [r5, #2]
   bafbe:	689b      	ldr	r3, [r3, #8]
   bafc0:	4433      	add	r3, r6
   bafc2:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   bafc4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bafc6:	886a      	ldrh	r2, [r5, #2]
   bafc8:	689b      	ldr	r3, [r3, #8]
   bafca:	4433      	add	r3, r6
   bafcc:	0a12      	lsrs	r2, r2, #8
   bafce:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   bafd0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bafd2:	886a      	ldrh	r2, [r5, #2]
   bafd4:	6898      	ldr	r0, [r3, #8]
   bafd6:	68a9      	ldr	r1, [r5, #8]
   bafd8:	4430      	add	r0, r6
   bafda:	3006      	adds	r0, #6
   bafdc:	f009 f828 	bl	c4030 <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   bafe0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bafe2:	7b2a      	ldrb	r2, [r5, #12]
   bafe4:	689b      	ldr	r3, [r3, #8]
   bafe6:	4433      	add	r3, r6
   bafe8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   bafec:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bafee:	7b6a      	ldrb	r2, [r5, #13]
   baff0:	689b      	ldr	r3, [r3, #8]
   baff2:	441e      	add	r6, r3
   baff4:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   baff8:	6e21      	ldr	r1, [r4, #96]	; 0x60
   baffa:	780b      	ldrb	r3, [r1, #0]
   baffc:	2201      	movs	r2, #1
   baffe:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   bb002:	40ba      	lsls	r2, r7
   bb004:	4302      	orrs	r2, r0
   bb006:	f362 03c4 	bfi	r3, r2, #3, #2
   bb00a:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   bb00c:	f7fe bf75 	b.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   bb010:	4617      	mov	r7, r2
   bb012:	e7bd      	b.n	baf90 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   bb014:	2b34      	cmp	r3, #52	; 0x34
   bb016:	d129      	bne.n	bb06c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   bb018:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bb01a:	2b00      	cmp	r3, #0
   bb01c:	f43e af6d 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb020:	689b      	ldr	r3, [r3, #8]
   bb022:	2b00      	cmp	r3, #0
   bb024:	f43e af69 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb028:	688a      	ldr	r2, [r1, #8]
   bb02a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   bb02c:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb02e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   bb030:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb032:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb034:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb036:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   bb038:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bb03a:	68a8      	ldr	r0, [r5, #8]
   bb03c:	689e      	ldr	r6, [r3, #8]
   bb03e:	2104      	movs	r1, #4
   bb040:	f7fd f994 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb044:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   bb046:	6e63      	ldr	r3, [r4, #100]	; 0x64
   bb048:	68a8      	ldr	r0, [r5, #8]
   bb04a:	689e      	ldr	r6, [r3, #8]
   bb04c:	2108      	movs	r1, #8
   bb04e:	f7fd f99a 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb052:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   bb054:	6e63      	ldr	r3, [r4, #100]	; 0x64
   bb056:	68a8      	ldr	r0, [r5, #8]
   bb058:	689e      	ldr	r6, [r3, #8]
   bb05a:	210a      	movs	r1, #10
   bb05c:	f7fd f993 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb060:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb062:	6e62      	ldr	r2, [r4, #100]	; 0x64
   bb064:	e780      	b.n	baf68 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   bb066:	bf00      	nop
   bb068:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   bb06c:	2b13      	cmp	r3, #19
   bb06e:	d14a      	bne.n	bb106 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   bb070:	6e83      	ldr	r3, [r0, #104]	; 0x68
   bb072:	2b00      	cmp	r3, #0
   bb074:	f43e af41 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb078:	688a      	ldr	r2, [r1, #8]
   bb07a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   bb07c:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bb07e:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bb080:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb082:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bb084:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   bb086:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   bb088:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb08a:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   bb08c:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bb08e:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   bb090:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb092:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   bb094:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb096:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bb098:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb09a:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bb09c:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   bb09e:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bb0a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb0a2:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bb0a4:	729a      	strb	r2, [r3, #10]
   bb0a6:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb0a8:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   bb0aa:	7a3a      	ldrb	r2, [r7, #8]
   bb0ac:	b2f3      	uxtb	r3, r6
   bb0ae:	429a      	cmp	r2, r3
   bb0b0:	d809      	bhi.n	bb0c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   bb0b2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   bb0b4:	2201      	movs	r2, #1
   bb0b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb0ba:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   bb0bc:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb0be:	b9a8      	cbnz	r0, bb0ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   bb0c0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   bb0c2:	f7fe bfa8 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb0c6:	886b      	ldrh	r3, [r5, #2]
   bb0c8:	3b08      	subs	r3, #8
   bb0ca:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bb0ce:	ea4f 0186 	mov.w	r1, r6, lsl #2
   bb0d2:	ddee      	ble.n	bb0b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   bb0d4:	3108      	adds	r1, #8
   bb0d6:	68a8      	ldr	r0, [r5, #8]
   bb0d8:	b289      	uxth	r1, r1
   bb0da:	f7fd f947 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0de:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb0e2:	3601      	adds	r6, #1
   bb0e4:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   bb0e6:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb0e8:	d1de      	bne.n	bb0a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   bb0ea:	e7e2      	b.n	bb0b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb0ec:	780b      	ldrb	r3, [r1, #0]
   bb0ee:	071b      	lsls	r3, r3, #28
   bb0f0:	d4e6      	bmi.n	bb0c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   bb0f2:	2248      	movs	r2, #72	; 0x48
   bb0f4:	3104      	adds	r1, #4
   bb0f6:	f008 ff9b 	bl	c4030 <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   bb0fa:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   bb0fc:	7813      	ldrb	r3, [r2, #0]
   bb0fe:	f043 0308 	orr.w	r3, r3, #8
   bb102:	7013      	strb	r3, [r2, #0]
   bb104:	e7dc      	b.n	bb0c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   bb106:	2b15      	cmp	r3, #21
   bb108:	f47e aef7 	bne.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   bb10c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   bb10e:	2b00      	cmp	r3, #0
   bb110:	f43e aef3 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb114:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb116:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb118:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb11a:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   bb11c:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb11e:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   bb120:	3101      	adds	r1, #1
   bb122:	2908      	cmp	r1, #8
   bb124:	d1f7      	bne.n	bb116 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   bb126:	68a8      	ldr	r0, [r5, #8]
   bb128:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   bb12a:	f7fd f92c 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb12e:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   bb130:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   bb132:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb134:	7a92      	ldrb	r2, [r2, #10]
   bb136:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb138:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   bb13a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb13c:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   bb13e:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb140:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   bb142:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb144:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   bb146:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb148:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   bb14a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb14c:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   bb14e:	73da      	strb	r2, [r3, #15]
   bb150:	2610      	movs	r6, #16
   bb152:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb154:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb156:	7b51      	ldrb	r1, [r2, #13]
   bb158:	b2da      	uxtb	r2, r3
   bb15a:	4291      	cmp	r1, r2
   bb15c:	d80b      	bhi.n	bb176 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   bb15e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb160:	2201      	movs	r2, #1
   bb162:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb166:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   bb168:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   bb16c:	2800      	cmp	r0, #0
   bb16e:	d17f      	bne.n	bb270 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   bb170:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb172:	f7fe bf50 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb176:	886a      	ldrh	r2, [r5, #2]
   bb178:	3a10      	subs	r2, #16
   bb17a:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   bb17e:	ea4f 1843 	mov.w	r8, r3, lsl #5
   bb182:	ddec      	ble.n	bb15e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   bb184:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb186:	46b4      	mov	ip, r6
   bb188:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb18a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb18c:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb18e:	4440      	add	r0, r8
   bb190:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb192:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb196:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   bb198:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb19a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb19c:	4437      	add	r7, r6
   bb19e:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb1a0:	4440      	add	r0, r8
   bb1a2:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb1a4:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb1a6:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   bb1a8:	2a03      	cmp	r2, #3
   bb1aa:	d80b      	bhi.n	bb1c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb1ac:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb1ae:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb1b0:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   bb1b4:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb1b8:	4440      	add	r0, r8
   bb1ba:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb1bc:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb1c0:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   bb1c4:	3201      	adds	r2, #1
   bb1c6:	2a08      	cmp	r2, #8
   bb1c8:	f10c 0c01 	add.w	ip, ip, #1
   bb1cc:	d1dd      	bne.n	bb18a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   bb1ce:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb1d0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb1d2:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   bb1d4:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb1d6:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb1da:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb1dc:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   bb1de:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb1e0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb1e2:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb1e4:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb1e8:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb1ea:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bb1ec:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb1ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb1f0:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb1f2:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb1f6:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb1f8:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb1fa:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb1fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb1fe:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb200:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb204:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb206:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bb208:	3118      	adds	r1, #24
   bb20a:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   bb20e:	68a8      	ldr	r0, [r5, #8]
   bb210:	b289      	uxth	r1, r1
   bb212:	f7fd f8b8 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb216:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb218:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bb21a:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   bb21e:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb220:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb222:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb224:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb226:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb228:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   bb22c:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb22e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb230:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb232:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb234:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb236:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   bb23a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb23c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb23e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb240:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb242:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb244:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   bb248:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb24a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb24c:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb24e:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb250:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb252:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb256:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb258:	68aa      	ldr	r2, [r5, #8]
   bb25a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb25c:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb25e:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb260:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb264:	f106 0620 	add.w	r6, r6, #32
   bb268:	463b      	mov	r3, r7
   bb26a:	f47f af73 	bne.w	bb154 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   bb26e:	e776      	b.n	bb15e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb270:	780b      	ldrb	r3, [r1, #0]
   bb272:	071f      	lsls	r7, r3, #28
   bb274:	f53f af7c 	bmi.w	bb170 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   bb278:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   bb27c:	3102      	adds	r1, #2
   bb27e:	f008 fed7 	bl	c4030 <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   bb282:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb284:	7813      	ldrb	r3, [r2, #0]
   bb286:	f043 0308 	orr.w	r3, r3, #8
   bb28a:	7013      	strb	r3, [r2, #0]
   bb28c:	e770      	b.n	bb170 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   bb28e:	680b      	ldr	r3, [r1, #0]
   bb290:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb294:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   bb298:	d12f      	bne.n	bb2fa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   bb29a:	6f03      	ldr	r3, [r0, #112]	; 0x70
   bb29c:	2b00      	cmp	r3, #0
   bb29e:	f43e ae2c 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb2a2:	688a      	ldr	r2, [r1, #8]
   bb2a4:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   bb2a6:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   bb2a8:	6f06      	ldr	r6, [r0, #112]	; 0x70
   bb2aa:	68a8      	ldr	r0, [r5, #8]
   bb2ac:	2102      	movs	r1, #2
   bb2ae:	f7fd f86a 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb2b2:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   bb2b4:	68a8      	ldr	r0, [r5, #8]
   bb2b6:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb2b8:	2104      	movs	r1, #4
   bb2ba:	f7fd f857 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2be:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   bb2c0:	68a8      	ldr	r0, [r5, #8]
   bb2c2:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb2c4:	2108      	movs	r1, #8
   bb2c6:	f7fd f851 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2ca:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   bb2cc:	68a8      	ldr	r0, [r5, #8]
   bb2ce:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb2d0:	210c      	movs	r1, #12
   bb2d2:	f7fd f858 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb2d6:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   bb2d8:	68a8      	ldr	r0, [r5, #8]
   bb2da:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb2dc:	210e      	movs	r1, #14
   bb2de:	f7fd f852 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb2e2:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   bb2e4:	68a8      	ldr	r0, [r5, #8]
   bb2e6:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb2e8:	2110      	movs	r1, #16
   bb2ea:	f7fd f84c 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb2ee:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   bb2f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
   bb2f2:	2201      	movs	r2, #1
   bb2f4:	751a      	strb	r2, [r3, #20]
   bb2f6:	f7fe be00 	b.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   bb2fa:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   bb2fe:	f47e adfc 	bne.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   bb302:	6f46      	ldr	r6, [r0, #116]	; 0x74
   bb304:	2e00      	cmp	r6, #0
   bb306:	f43e adf8 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   bb30a:	68a8      	ldr	r0, [r5, #8]
   bb30c:	2100      	movs	r1, #0
   bb30e:	f7fd f83a 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb312:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   bb314:	68a8      	ldr	r0, [r5, #8]
   bb316:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb318:	2102      	movs	r1, #2
   bb31a:	f7fd f834 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb31e:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   bb320:	68a8      	ldr	r0, [r5, #8]
   bb322:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb324:	2104      	movs	r1, #4
   bb326:	f7fd f82e 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb32a:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb32c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   bb32e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb332:	609a      	str	r2, [r3, #8]
   bb334:	f7fe bde1 	b.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   bb338:	680b      	ldr	r3, [r1, #0]
   bb33a:	4ab0      	ldr	r2, [pc, #704]	; (bb5fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   bb33c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb340:	4293      	cmp	r3, r2
   bb342:	f47e adda 	bne.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   bb346:	6f83      	ldr	r3, [r0, #120]	; 0x78
   bb348:	2b00      	cmp	r3, #0
   bb34a:	f43e add6 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb34e:	688a      	ldr	r2, [r1, #8]
   bb350:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   bb352:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bb354:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb356:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   bb358:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb35a:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   bb35c:	6f86      	ldr	r6, [r0, #120]	; 0x78
   bb35e:	68a8      	ldr	r0, [r5, #8]
   bb360:	2102      	movs	r1, #2
   bb362:	f7fd f810 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb366:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   bb368:	68a8      	ldr	r0, [r5, #8]
   bb36a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb36c:	2104      	movs	r1, #4
   bb36e:	f7fd f80a 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb372:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   bb374:	68a8      	ldr	r0, [r5, #8]
   bb376:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb378:	2106      	movs	r1, #6
   bb37a:	f7fd f804 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb37e:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   bb380:	68a8      	ldr	r0, [r5, #8]
   bb382:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb384:	2108      	movs	r1, #8
   bb386:	f7fc fff1 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb38a:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   bb38c:	68a8      	ldr	r0, [r5, #8]
   bb38e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb390:	210c      	movs	r1, #12
   bb392:	f7fc ffeb 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb396:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   bb398:	68a8      	ldr	r0, [r5, #8]
   bb39a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb39c:	2110      	movs	r1, #16
   bb39e:	f7fc ffe5 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3a2:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   bb3a4:	68a8      	ldr	r0, [r5, #8]
   bb3a6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb3a8:	2114      	movs	r1, #20
   bb3aa:	f7fc ffdf 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3ae:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   bb3b0:	68a8      	ldr	r0, [r5, #8]
   bb3b2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb3b4:	2118      	movs	r1, #24
   bb3b6:	f7fc ffd9 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3ba:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb3bc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb3be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb3c2:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb3c4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   bb3c8:	b17a      	cbz	r2, bb3ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb3ca:	7819      	ldrb	r1, [r3, #0]
   bb3cc:	070e      	lsls	r6, r1, #28
   bb3ce:	d40c      	bmi.n	bb3ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   bb3d0:	1d19      	adds	r1, r3, #4
   bb3d2:	3320      	adds	r3, #32
   bb3d4:	f851 0b04 	ldr.w	r0, [r1], #4
   bb3d8:	f842 0b04 	str.w	r0, [r2], #4
   bb3dc:	4299      	cmp	r1, r3
   bb3de:	d1f9      	bne.n	bb3d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   bb3e0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   bb3e2:	7813      	ldrb	r3, [r2, #0]
   bb3e4:	f043 0308 	orr.w	r3, r3, #8
   bb3e8:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   bb3ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb3ec:	f7fe be13 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   bb3f0:	4a83      	ldr	r2, [pc, #524]	; (bb600 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   bb3f2:	4293      	cmp	r3, r2
   bb3f4:	d158      	bne.n	bb4a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   bb3f6:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   bb3fa:	2f00      	cmp	r7, #0
   bb3fc:	f43e ad7d 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   bb400:	68a8      	ldr	r0, [r5, #8]
   bb402:	2100      	movs	r1, #0
   bb404:	f7fc ffb2 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb408:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   bb40a:	68a8      	ldr	r0, [r5, #8]
   bb40c:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   bb410:	2108      	movs	r1, #8
   bb412:	f7fc ffab 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb416:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb418:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb41a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb41e:	210c      	movs	r1, #12
   bb420:	f7fc ffa4 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb424:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb426:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb428:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb42c:	4631      	mov	r1, r6
   bb42e:	f7fc ff9d 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb432:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb434:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb436:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb43a:	2114      	movs	r1, #20
   bb43c:	f7fc ff96 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb440:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb442:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb444:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb448:	2118      	movs	r1, #24
   bb44a:	f7fc ff8f 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb44e:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb450:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb452:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb456:	211c      	movs	r1, #28
   bb458:	f7fc ff88 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb45c:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb45e:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb460:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb464:	2120      	movs	r1, #32
   bb466:	f7fc ff81 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb46a:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb46c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb474:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb476:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb47a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb47c:	b182      	cbz	r2, bb4a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb47e:	7819      	ldrb	r1, [r3, #0]
   bb480:	0709      	lsls	r1, r1, #28
   bb482:	d40d      	bmi.n	bb4a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   bb484:	1d19      	adds	r1, r3, #4
   bb486:	3328      	adds	r3, #40	; 0x28
   bb488:	f851 0b04 	ldr.w	r0, [r1], #4
   bb48c:	f842 0b04 	str.w	r0, [r2], #4
   bb490:	4299      	cmp	r1, r3
   bb492:	d1f9      	bne.n	bb488 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb494:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   bb498:	7813      	ldrb	r3, [r2, #0]
   bb49a:	f043 0308 	orr.w	r3, r3, #8
   bb49e:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   bb4a0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb4a4:	f7fe bdb7 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   bb4a8:	784b      	ldrb	r3, [r1, #1]
   bb4aa:	2b02      	cmp	r3, #2
   bb4ac:	d158      	bne.n	bb560 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   bb4ae:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   bb4b2:	2e00      	cmp	r6, #0
   bb4b4:	f43e ad21 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   bb4b8:	68a8      	ldr	r0, [r5, #8]
   bb4ba:	2100      	movs	r1, #0
   bb4bc:	f7fc ff56 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb4c0:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   bb4c2:	68a8      	ldr	r0, [r5, #8]
   bb4c4:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb4c8:	2104      	movs	r1, #4
   bb4ca:	f7fc ff5c 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb4ce:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   bb4d0:	68a8      	ldr	r0, [r5, #8]
   bb4d2:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb4d6:	2106      	movs	r1, #6
   bb4d8:	f7fc ff55 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb4dc:	8170      	strh	r0, [r6, #10]
   bb4de:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb4e0:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   bb4e4:	886b      	ldrh	r3, [r5, #2]
   bb4e6:	7a7a      	ldrb	r2, [r7, #9]
   bb4e8:	b2b1      	uxth	r1, r6
   bb4ea:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   bb4ee:	d320      	bcc.n	bb532 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   bb4f0:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb4f4:	886a      	ldrh	r2, [r5, #2]
   bb4f6:	7a73      	ldrb	r3, [r6, #9]
   bb4f8:	08db      	lsrs	r3, r3, #3
   bb4fa:	3302      	adds	r3, #2
   bb4fc:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   bb500:	ea4f 0183 	mov.w	r1, r3, lsl #2
   bb504:	d826      	bhi.n	bb554 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb506:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   bb50a:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   bb50e:	b160      	cbz	r0, bb52a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb510:	780b      	ldrb	r3, [r1, #0]
   bb512:	071a      	lsls	r2, r3, #28
   bb514:	d409      	bmi.n	bb52a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   bb516:	2288      	movs	r2, #136	; 0x88
   bb518:	3104      	adds	r1, #4
   bb51a:	f008 fd89 	bl	c4030 <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb51e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   bb522:	7813      	ldrb	r3, [r2, #0]
   bb524:	f043 0308 	orr.w	r3, r3, #8
   bb528:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   bb52a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   bb52e:	f7fe bd72 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb532:	3b08      	subs	r3, #8
   bb534:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bb538:	ddda      	ble.n	bb4f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb53a:	0089      	lsls	r1, r1, #2
   bb53c:	3108      	adds	r1, #8
   bb53e:	68a8      	ldr	r0, [r5, #8]
   bb540:	b289      	uxth	r1, r1
   bb542:	f7fc ff13 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb546:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb54a:	3601      	adds	r6, #1
   bb54c:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb54e:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb550:	d1c6      	bne.n	bb4e0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   bb552:	e7cd      	b.n	bb4f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   bb554:	68a8      	ldr	r0, [r5, #8]
   bb556:	f7fc ff09 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb55a:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   bb55e:	e7d2      	b.n	bb506 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   bb560:	2b03      	cmp	r3, #3
   bb562:	d14f      	bne.n	bb604 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   bb564:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   bb568:	2900      	cmp	r1, #0
   bb56a:	f43e acc6 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   bb56e:	886a      	ldrh	r2, [r5, #2]
   bb570:	1f13      	subs	r3, r2, #4
   bb572:	bf48      	it	mi
   bb574:	1cd3      	addmi	r3, r2, #3
   bb576:	10db      	asrs	r3, r3, #3
   bb578:	2700      	movs	r7, #0
   bb57a:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   bb57e:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb580:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb582:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb586:	3b04      	subs	r3, #4
   bb588:	42bb      	cmp	r3, r7
   bb58a:	dc08      	bgt.n	bb59e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb58c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   bb590:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   bb594:	bb10      	cbnz	r0, bb5dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   bb596:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   bb59a:	f7fe bd3c 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb59e:	fa1f f887 	uxth.w	r8, r7
   bb5a2:	f108 0104 	add.w	r1, r8, #4
   bb5a6:	68a8      	ldr	r0, [r5, #8]
   bb5a8:	b289      	uxth	r1, r1
   bb5aa:	f7fc fedf 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb5ae:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb5b2:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb5b6:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb5ba:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   bb5be:	68a8      	ldr	r0, [r5, #8]
   bb5c0:	b289      	uxth	r1, r1
   bb5c2:	f7fc fed3 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb5c6:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb5ca:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb5cc:	3601      	adds	r6, #1
   bb5ce:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb5d0:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb5d4:	f107 0708 	add.w	r7, r7, #8
   bb5d8:	d1d2      	bne.n	bb580 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   bb5da:	e7d7      	b.n	bb58c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb5dc:	780b      	ldrb	r3, [r1, #0]
   bb5de:	071b      	lsls	r3, r3, #28
   bb5e0:	d4d9      	bmi.n	bb596 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   bb5e2:	f44f 720e 	mov.w	r2, #568	; 0x238
   bb5e6:	3108      	adds	r1, #8
   bb5e8:	3004      	adds	r0, #4
   bb5ea:	f008 fd21 	bl	c4030 <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   bb5ee:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   bb5f2:	7813      	ldrb	r3, [r2, #0]
   bb5f4:	f043 0308 	orr.w	r3, r3, #8
   bb5f8:	7013      	strb	r3, [r2, #0]
   bb5fa:	e7cc      	b.n	bb596 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   bb5fc:	001c0300 	.word	0x001c0300
   bb600:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   bb604:	2b10      	cmp	r3, #16
   bb606:	f47e ac78 	bne.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   bb60a:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   bb60e:	2e00      	cmp	r6, #0
   bb610:	f43e ac73 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   bb614:	68a8      	ldr	r0, [r5, #8]
   bb616:	2100      	movs	r1, #0
   bb618:	f7fc fea8 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb61c:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb61e:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bb620:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb624:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bb626:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb628:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bb62a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb62e:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bb630:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   bb632:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bb634:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb638:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bb63a:	74da      	strb	r2, [r3, #19]
   bb63c:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb63e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   bb642:	7cc6      	ldrb	r6, [r0, #19]
   bb644:	b28a      	uxth	r2, r1
   bb646:	4296      	cmp	r6, r2
   bb648:	d80c      	bhi.n	bb664 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb64a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb64e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb652:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb654:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   bb65a:	bb62      	cbnz	r2, bb6b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bb65c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb660:	f7fe bcd9 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb664:	886a      	ldrh	r2, [r5, #2]
   bb666:	3a10      	subs	r2, #16
   bb668:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   bb66c:	dded      	ble.n	bb64a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   bb66e:	68aa      	ldr	r2, [r5, #8]
   bb670:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bb672:	1d0a      	adds	r2, r1, #4
   bb674:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb678:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bb67a:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   bb67c:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb67e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb682:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb684:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb688:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb68a:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   bb68c:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb68e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb692:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb694:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb698:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb69a:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   bb69c:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb69e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb6a2:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb6a4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb6a8:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb6aa:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb6ac:	2907      	cmp	r1, #7
   bb6ae:	f103 0304 	add.w	r3, r3, #4
   bb6b2:	d1c4      	bne.n	bb63e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   bb6b4:	e7c9      	b.n	bb64a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb6b6:	7819      	ldrb	r1, [r3, #0]
   bb6b8:	070f      	lsls	r7, r1, #28
   bb6ba:	d4cf      	bmi.n	bb65c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   bb6bc:	1d19      	adds	r1, r3, #4
   bb6be:	3330      	adds	r3, #48	; 0x30
   bb6c0:	f851 0b04 	ldr.w	r0, [r1], #4
   bb6c4:	f842 0b04 	str.w	r0, [r2], #4
   bb6c8:	4299      	cmp	r1, r3
   bb6ca:	d1f9      	bne.n	bb6c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb6cc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bb6d0:	7813      	ldrb	r3, [r2, #0]
   bb6d2:	f043 0308 	orr.w	r3, r3, #8
   bb6d6:	7013      	strb	r3, [r2, #0]
   bb6d8:	e7c0      	b.n	bb65c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   bb6da:	680b      	ldr	r3, [r1, #0]
   bb6dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb6e0:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   bb6e4:	d16a      	bne.n	bb7bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   bb6e6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   bb6ea:	2b00      	cmp	r3, #0
   bb6ec:	f43e ac05 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   bb6f0:	7818      	ldrb	r0, [r3, #0]
   bb6f2:	7859      	ldrb	r1, [r3, #1]
   bb6f4:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bb6f6:	bf36      	itet	cc
   bb6f8:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   bb6fc:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bb6fe:	1a52      	subcc	r2, r2, r1
   bb700:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   bb702:	2a0e      	cmp	r2, #14
   bb704:	d84b      	bhi.n	bb79e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   bb706:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb708:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   bb70c:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb70e:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb710:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb714:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb716:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb718:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb71a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb71e:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb720:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb724:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb726:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb728:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb72a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb72e:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb730:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb734:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb736:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb738:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb73a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb73e:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb740:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb744:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb746:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb748:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb74a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb74e:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb750:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb754:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb756:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb758:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb75a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb75e:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb760:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb764:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb766:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb768:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb76a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb76e:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb770:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb774:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb776:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb778:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb77a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb77e:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   bb780:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   bb784:	7813      	ldrb	r3, [r2, #0]
   bb786:	3301      	adds	r3, #1
   bb788:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   bb78a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bb78e:	781a      	ldrb	r2, [r3, #0]
   bb790:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb792:	f47e abb2 	bne.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   bb796:	2200      	movs	r2, #0
   bb798:	701a      	strb	r2, [r3, #0]
   bb79a:	f7fe bbae 	b.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb79e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb7a2:	b923      	cbnz	r3, bb7ae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   bb7a4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb7a8:	2b00      	cmp	r3, #0
   bb7aa:	f43e aba6 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   bb7ae:	4996      	ldr	r1, [pc, #600]	; (bba08 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb7b0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   bb7b4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb7b8:	f005 bbdd 	b.w	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   bb7bc:	784b      	ldrb	r3, [r1, #1]
   bb7be:	2b80      	cmp	r3, #128	; 0x80
   bb7c0:	f47e ab9b 	bne.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb7c4:	884b      	ldrh	r3, [r1, #2]
   bb7c6:	2ba4      	cmp	r3, #164	; 0xa4
   bb7c8:	f63e ab97 	bhi.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   bb7cc:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   bb7d0:	2a00      	cmp	r2, #0
   bb7d2:	f43e ab92 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   bb7d6:	7810      	ldrb	r0, [r2, #0]
   bb7d8:	7851      	ldrb	r1, [r2, #1]
   bb7da:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb7dc:	bf36      	itet	cc
   bb7de:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   bb7e0:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb7e2:	1a5b      	subcc	r3, r3, r1
   bb7e4:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   bb7e6:	2bf8      	cmp	r3, #248	; 0xf8
   bb7e8:	d84f      	bhi.n	bb88a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   bb7ea:	23ac      	movs	r3, #172	; 0xac
   bb7ec:	fb03 2200 	mla	r2, r3, r0, r2
   bb7f0:	21b5      	movs	r1, #181	; 0xb5
   bb7f2:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   bb7f4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb7f8:	7811      	ldrb	r1, [r2, #0]
   bb7fa:	fb03 2201 	mla	r2, r3, r1, r2
   bb7fe:	2162      	movs	r1, #98	; 0x62
   bb800:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   bb802:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb806:	7811      	ldrb	r1, [r2, #0]
   bb808:	fb03 2201 	mla	r2, r3, r1, r2
   bb80c:	2113      	movs	r1, #19
   bb80e:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   bb810:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb814:	7811      	ldrb	r1, [r2, #0]
   bb816:	fb03 2201 	mla	r2, r3, r1, r2
   bb81a:	2180      	movs	r1, #128	; 0x80
   bb81c:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   bb81e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb822:	7811      	ldrb	r1, [r2, #0]
   bb824:	fb03 2201 	mla	r2, r3, r1, r2
   bb828:	8869      	ldrh	r1, [r5, #2]
   bb82a:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   bb82c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb830:	7811      	ldrb	r1, [r2, #0]
   bb832:	fb03 2201 	mla	r2, r3, r1, r2
   bb836:	8869      	ldrh	r1, [r5, #2]
   bb838:	0a09      	lsrs	r1, r1, #8
   bb83a:	71d1      	strb	r1, [r2, #7]
   bb83c:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   bb83e:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb840:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   bb844:	b28e      	uxth	r6, r1
   bb846:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb848:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   bb84a:	d907      	bls.n	bb85c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   bb84c:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb84e:	fb03 2200 	mla	r2, r3, r0, r2
   bb852:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   bb854:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb856:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   bb858:	3101      	adds	r1, #1
   bb85a:	e7f0      	b.n	bb83e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   bb85c:	fb03 2200 	mla	r2, r3, r0, r2
   bb860:	7b29      	ldrb	r1, [r5, #12]
   bb862:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   bb866:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb86a:	7b69      	ldrb	r1, [r5, #13]
   bb86c:	7810      	ldrb	r0, [r2, #0]
   bb86e:	fb03 2300 	mla	r3, r3, r0, r2
   bb872:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   bb876:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb87a:	7813      	ldrb	r3, [r2, #0]
   bb87c:	3301      	adds	r3, #1
   bb87e:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb880:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   bb884:	781a      	ldrb	r2, [r3, #0]
   bb886:	2afa      	cmp	r2, #250	; 0xfa
   bb888:	e783      	b.n	bb792 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb88a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb88e:	b923      	cbnz	r3, bb89a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   bb890:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb894:	2b00      	cmp	r3, #0
   bb896:	f43e ab30 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb89a:	495c      	ldr	r1, [pc, #368]	; (bba0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   bb89c:	e788      	b.n	bb7b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   bb89e:	680b      	ldr	r3, [r1, #0]
   bb8a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb8a4:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   bb8a8:	f040 80b2 	bne.w	bba10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   bb8ac:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   bb8b0:	2f00      	cmp	r7, #0
   bb8b2:	f43e ab22 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   bb8b6:	68a8      	ldr	r0, [r5, #8]
   bb8b8:	2100      	movs	r1, #0
   bb8ba:	f7fc fd57 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb8be:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   bb8c0:	68a8      	ldr	r0, [r5, #8]
   bb8c2:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   bb8c6:	2104      	movs	r1, #4
   bb8c8:	f7fc fd5d 	bl	b8386 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb8cc:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   bb8ce:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb8d0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb8d4:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb8d6:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   bb8d8:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb8da:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb8de:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb8e0:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   bb8e2:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb8e4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb8e8:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb8ea:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb8ec:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb8ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb8f2:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb8f4:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb8f6:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb8f8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb8fc:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb8fe:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb900:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb902:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb906:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb908:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb90a:	210c      	movs	r1, #12
   bb90c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb90e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb912:	f7fc fd2b 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb916:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   bb918:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb91a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb91e:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb920:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bb922:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb924:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb928:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb92a:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb92c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb92e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb932:	2114      	movs	r1, #20
   bb934:	f7fc fd1a 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb938:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb93a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb93c:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb940:	2118      	movs	r1, #24
   bb942:	f7fc fd13 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb946:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb948:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb94a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb94e:	211c      	movs	r1, #28
   bb950:	f7fc fd0c 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb954:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb956:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb958:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb95c:	2120      	movs	r1, #32
   bb95e:	f7fc fd05 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb962:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb964:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb966:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb96a:	2124      	movs	r1, #36	; 0x24
   bb96c:	f7fc fcfe 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb970:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb972:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb974:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb978:	4631      	mov	r1, r6
   bb97a:	f7fc fcf7 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb97e:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb980:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb982:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb986:	212c      	movs	r1, #44	; 0x2c
   bb988:	f7fc fcf0 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb98c:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb98e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb990:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb994:	2130      	movs	r1, #48	; 0x30
   bb996:	f7fc fce9 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb99a:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   bb99c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb9a0:	68a8      	ldr	r0, [r5, #8]
   bb9a2:	2134      	movs	r1, #52	; 0x34
   bb9a4:	f7fc fce2 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb9a8:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   bb9aa:	68a8      	ldr	r0, [r5, #8]
   bb9ac:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb9b0:	2138      	movs	r1, #56	; 0x38
   bb9b2:	f7fc fcdb 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb9b6:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   bb9b8:	68a8      	ldr	r0, [r5, #8]
   bb9ba:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb9be:	213c      	movs	r1, #60	; 0x3c
   bb9c0:	f7fc fcd4 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb9c4:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   bb9c6:	68a8      	ldr	r0, [r5, #8]
   bb9c8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb9cc:	2140      	movs	r1, #64	; 0x40
   bb9ce:	f7fc fccd 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb9d2:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb9d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb9d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb9dc:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb9de:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   bb9e2:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb9e4:	b160      	cbz	r0, bba00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb9e6:	780b      	ldrb	r3, [r1, #0]
   bb9e8:	071e      	lsls	r6, r3, #28
   bb9ea:	d409      	bmi.n	bba00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   bb9ec:	2248      	movs	r2, #72	; 0x48
   bb9ee:	3104      	adds	r1, #4
   bb9f0:	f008 fb1e 	bl	c4030 <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb9f4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bb9f8:	7813      	ldrb	r3, [r2, #0]
   bb9fa:	f043 0308 	orr.w	r3, r3, #8
   bb9fe:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   bba00:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bba04:	f7fe bb07 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bba08:	000c6c4d 	.word	0x000c6c4d
   bba0c:	000c6c8a 	.word	0x000c6c8a
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   bba10:	4a5d      	ldr	r2, [pc, #372]	; (bbb88 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   bba12:	4293      	cmp	r3, r2
   bba14:	d156      	bne.n	bbac4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   bba16:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   bba1a:	2e00      	cmp	r6, #0
   bba1c:	f43e aa6d 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   bba20:	68a8      	ldr	r0, [r5, #8]
   bba22:	2100      	movs	r1, #0
   bba24:	f7fc fca2 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bba28:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bba2a:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bba2c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bba30:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bba32:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bba34:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bba36:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bba3a:	2108      	movs	r1, #8
   bba3c:	f7fc fc96 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bba40:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bba42:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bba44:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bba48:	210c      	movs	r1, #12
   bba4a:	f7fc fc8f 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bba4e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bba50:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bba52:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bba56:	2110      	movs	r1, #16
   bba58:	f7fc fc88 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bba5c:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bba5e:	68a8      	ldr	r0, [r5, #8]
   bba60:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bba64:	2114      	movs	r1, #20
   bba66:	f7fc fc81 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bba6a:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bba6c:	68a8      	ldr	r0, [r5, #8]
   bba6e:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bba72:	2118      	movs	r1, #24
   bba74:	f7fc fc7a 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bba78:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bba7a:	68a8      	ldr	r0, [r5, #8]
   bba7c:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bba80:	211c      	movs	r1, #28
   bba82:	f7fc fc73 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bba86:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bba88:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bba8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bba90:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bba92:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bba96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bba98:	b182      	cbz	r2, bbabc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bba9a:	7819      	ldrb	r1, [r3, #0]
   bba9c:	0708      	lsls	r0, r1, #28
   bba9e:	d40d      	bmi.n	bbabc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bbaa0:	1d19      	adds	r1, r3, #4
   bbaa2:	3324      	adds	r3, #36	; 0x24
   bbaa4:	f851 0b04 	ldr.w	r0, [r1], #4
   bbaa8:	f842 0b04 	str.w	r0, [r2], #4
   bbaac:	4299      	cmp	r1, r3
   bbaae:	d1f9      	bne.n	bbaa4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bbab0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bbab4:	7813      	ldrb	r3, [r2, #0]
   bbab6:	f043 0308 	orr.w	r3, r3, #8
   bbaba:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bbabc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bbac0:	f7fe baa9 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bbac4:	4a31      	ldr	r2, [pc, #196]	; (bbb8c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bbac6:	4293      	cmp	r3, r2
   bbac8:	f47e aa17 	bne.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   bbacc:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   bbad0:	2e00      	cmp	r6, #0
   bbad2:	f43e aa12 	beq.w	b9efa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   bbad6:	68a8      	ldr	r0, [r5, #8]
   bbad8:	2100      	movs	r1, #0
   bbada:	f7fc fc47 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbade:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   bbae0:	68a8      	ldr	r0, [r5, #8]
   bbae2:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   bbae6:	2108      	movs	r1, #8
   bbae8:	f7fc fc40 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbaec:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbaee:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bbaf0:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbaf4:	210c      	movs	r1, #12
   bbaf6:	f7fc fc39 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bbafa:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbafc:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bbafe:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbb02:	2110      	movs	r1, #16
   bbb04:	f7fc fc32 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bbb08:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbb0a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bbb0c:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbb10:	2114      	movs	r1, #20
   bbb12:	f7fc fc2b 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bbb16:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbb18:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bbb1a:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbb1e:	2118      	movs	r1, #24
   bbb20:	f7fc fc24 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bbb24:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbb26:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bbb28:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbb2c:	211c      	movs	r1, #28
   bbb2e:	f7fc fc1d 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bbb32:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbb34:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bbb36:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbb3a:	2120      	movs	r1, #32
   bbb3c:	f7fc fc16 	bl	b836c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bbb40:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bbb42:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbb46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbb4a:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bbb4c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbb50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bbb52:	b182      	cbz	r2, bbb76 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbb54:	7819      	ldrb	r1, [r3, #0]
   bbb56:	0709      	lsls	r1, r1, #28
   bbb58:	d40d      	bmi.n	bbb76 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bbb5a:	1d19      	adds	r1, r3, #4
   bbb5c:	3328      	adds	r3, #40	; 0x28
   bbb5e:	f851 0b04 	ldr.w	r0, [r1], #4
   bbb62:	f842 0b04 	str.w	r0, [r2], #4
   bbb66:	4299      	cmp	r1, r3
   bbb68:	d1f9      	bne.n	bbb5e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bbb6a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bbb6e:	7813      	ldrb	r3, [r2, #0]
   bbb70:	f043 0308 	orr.w	r3, r3, #8
   bbb74:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bbb76:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbb7a:	f7fe ba4c 	b.w	ba016 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bbb7e:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bbb80:	2018      	movs	r0, #24
   bbb82:	f7ff b9a2 	b.w	baeca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bbb86:	bf00      	nop
   bbb88:	00200100 	.word	0x00200100
   bbb8c:	00240200 	.word	0x00240200

000bbb90 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bbb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbb94:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbb96:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bbb9a:	f89d a020 	ldrb.w	sl, [sp, #32]
   bbb9e:	4604      	mov	r4, r0
   bbba0:	460f      	mov	r7, r1
   bbba2:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbba4:	b993      	cbnz	r3, bbbcc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bbba6:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bbbaa:	886b      	ldrh	r3, [r5, #2]
   bbbac:	88aa      	ldrh	r2, [r5, #4]
   bbbae:	3303      	adds	r3, #3
   bbbb0:	4293      	cmp	r3, r2
   bbbb2:	db03      	blt.n	bbbbc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bbbb4:	4639      	mov	r1, r7
   bbbb6:	4620      	mov	r0, r4
   bbbb8:	f7fd fdf0 	bl	b979c <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bbbbc:	88ae      	ldrh	r6, [r5, #4]
   bbbbe:	bb7e      	cbnz	r6, bbc20 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bbbc0:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bbbc2:	88ab      	ldrh	r3, [r5, #4]
   bbbc4:	3301      	adds	r3, #1
   bbbc6:	80ab      	strh	r3, [r5, #4]
}
   bbbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bbbcc:	2b03      	cmp	r3, #3
   bbbce:	d124      	bne.n	bbc1a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   bbbd0:	7852      	ldrb	r2, [r2, #1]
   bbbd2:	7829      	ldrb	r1, [r5, #0]
   bbbd4:	f7fc fdda 	bl	b878c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bbbd8:	4680      	mov	r8, r0
   bbbda:	2800      	cmp	r0, #0
   bbbdc:	d1e5      	bne.n	bbbaa <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbbde:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbbe2:	b91b      	cbnz	r3, bbbec <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bbbe4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbbe8:	2b00      	cmp	r3, #0
   bbbea:	d0de      	beq.n	bbbaa <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bbbec:	49b7      	ldr	r1, [pc, #732]	; (bbecc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bbbee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbf2:	f005 f9a6 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bbbf6:	7829      	ldrb	r1, [r5, #0]
   bbbf8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbfc:	220a      	movs	r2, #10
   bbbfe:	f7fc fbd5 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bbc02:	49b3      	ldr	r1, [pc, #716]	; (bbed0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bbc04:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc08:	f005 f99b 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bbc0c:	7869      	ldrb	r1, [r5, #1]
   bbc0e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc12:	220a      	movs	r2, #10
   bbc14:	f7fc fbd1 	bl	b83ba <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbc18:	e7c7      	b.n	bbbaa <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bbc1a:	f04f 0802 	mov.w	r8, #2
   bbc1e:	e7c4      	b.n	bbbaa <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bbc20:	2e01      	cmp	r6, #1
   bbc22:	d101      	bne.n	bbc28 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bbc24:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbc26:	e7cc      	b.n	bbbc2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bbc28:	2e02      	cmp	r6, #2
   bbc2a:	d101      	bne.n	bbc30 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bbc2c:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbc2e:	e7c8      	b.n	bbbc2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bbc30:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bbc32:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bbc34:	d103      	bne.n	bbc3e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bbc36:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bbc3a:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbc3c:	e7c1      	b.n	bbbc2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bbc3e:	1d0b      	adds	r3, r1, #4
   bbc40:	429e      	cmp	r6, r3
   bbc42:	d136      	bne.n	bbcb2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bbc44:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbc46:	88aa      	ldrh	r2, [r5, #4]
   bbc48:	f108 0306 	add.w	r3, r8, #6
   bbc4c:	429a      	cmp	r2, r3
   bbc4e:	d1b8      	bne.n	bbbc2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bbc50:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bbc54:	2b00      	cmp	r3, #0
   bbc56:	d1b4      	bne.n	bbbc2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bbc58:	2200      	movs	r2, #0
   bbc5a:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbc5c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bbc60:	b91a      	cbnz	r2, bbc6a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bbc62:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bbc66:	2a00      	cmp	r2, #0
   bbc68:	d0ab      	beq.n	bbbc2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bbc6a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bbc6e:	2b00      	cmp	r3, #0
   bbc70:	f000 8170 	beq.w	bbf54 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bbc74:	4997      	ldr	r1, [pc, #604]	; (bbed4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bbc76:	f005 f964 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bbc7a:	4997      	ldr	r1, [pc, #604]	; (bbed8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bbc7c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc80:	f005 f95f 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bbc84:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bbc88:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc8c:	220a      	movs	r2, #10
   bbc8e:	f005 f974 	bl	c0f7a <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bbc92:	4992      	ldr	r1, [pc, #584]	; (bbedc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bbc94:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc98:	f005 f953 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bbc9c:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bbca0:	220a      	movs	r2, #10
   bbca2:	4641      	mov	r1, r8
   bbca4:	4620      	mov	r0, r4
   bbca6:	f005 f968 	bl	c0f7a <_ZN5Print11printNumberEmh>
        n += println();
   bbcaa:	4620      	mov	r0, r4
   bbcac:	f005 f94d 	bl	c0f4a <_ZN5Print7printlnEv>
        return n;
   bbcb0:	e787      	b.n	bbbc2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bbcb2:	3105      	adds	r1, #5
   bbcb4:	428e      	cmp	r6, r1
   bbcb6:	f040 812f 	bne.w	bbf18 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bbcba:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bbcbc:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bbcbe:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bbcc0:	89a9      	ldrh	r1, [r5, #12]
   bbcc2:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bbcc6:	4291      	cmp	r1, r2
   bbcc8:	f040 80ae 	bne.w	bbe28 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bbccc:	2301      	movs	r3, #1
   bbcce:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bbcd0:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bbcd4:	7829      	ldrb	r1, [r5, #0]
   bbcd6:	4549      	cmp	r1, r9
   bbcd8:	d155      	bne.n	bbd86 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   bbcda:	786b      	ldrb	r3, [r5, #1]
   bbcdc:	4553      	cmp	r3, sl
   bbcde:	d152      	bne.n	bbd86 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   bbce0:	2301      	movs	r3, #1
   bbce2:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   bbce4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbce8:	b3b3      	cbz	r3, bbd58 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   bbcea:	497d      	ldr	r1, [pc, #500]	; (bbee0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   bbcec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbcf0:	f005 f927 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bbcf4:	220a      	movs	r2, #10
   bbcf6:	8869      	ldrh	r1, [r5, #2]
   bbcf8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbcfc:	f005 f93d 	bl	c0f7a <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   bbd00:	4978      	ldr	r1, [pc, #480]	; (bbee4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   bbd02:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd06:	f005 f91c 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   bbd0a:	2200      	movs	r2, #0
   bbd0c:	4629      	mov	r1, r5
   bbd0e:	4620      	mov	r0, r4
   bbd10:	f7fd ff50 	bl	b9bb4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbd14:	7bab      	ldrb	r3, [r5, #14]
   bbd16:	2b01      	cmp	r3, #1
   bbd18:	d104      	bne.n	bbd24 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   bbd1a:	4973      	ldr	r1, [pc, #460]	; (bbee8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   bbd1c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd20:	f005 f929 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbd24:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   bbd28:	2b01      	cmp	r3, #1
   bbd2a:	d104      	bne.n	bbd36 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bbd2c:	496f      	ldr	r1, [pc, #444]	; (bbeec <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bbd2e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd32:	f005 f920 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbd36:	7beb      	ldrb	r3, [r5, #15]
   bbd38:	2b01      	cmp	r3, #1
   bbd3a:	d104      	bne.n	bbd46 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bbd3c:	496c      	ldr	r1, [pc, #432]	; (bbef0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bbd3e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd42:	f005 f918 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbd46:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bbd4a:	2b01      	cmp	r3, #1
   bbd4c:	d104      	bne.n	bbd58 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bbd4e:	4969      	ldr	r1, [pc, #420]	; (bbef4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bbd50:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd54:	f005 f90f 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bbd58:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bbd5c:	b91b      	cbnz	r3, bbd66 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bbd5e:	4629      	mov	r1, r5
   bbd60:	4620      	mov	r0, r4
   bbd62:	f7fe f8b9 	bl	b9ed8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bbd66:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bbd6a:	2b03      	cmp	r3, #3
   bbd6c:	f47f af6b 	bne.w	bbc46 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bbd70:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bbd74:	b108      	cbz	r0, bbd7a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bbd76:	f7f8 f992 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bbd7a:	2300      	movs	r3, #0
   bbd7c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bbd80:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbd84:	e75f      	b.n	bbc46 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bbd86:	882b      	ldrh	r3, [r5, #0]
   bbd88:	f240 1205 	movw	r2, #261	; 0x105
   bbd8c:	4293      	cmp	r3, r2
   bbd8e:	d123      	bne.n	bbdd8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bbd90:	68ab      	ldr	r3, [r5, #8]
   bbd92:	781a      	ldrb	r2, [r3, #0]
   bbd94:	454a      	cmp	r2, r9
   bbd96:	d102      	bne.n	bbd9e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbd98:	785b      	ldrb	r3, [r3, #1]
   bbd9a:	4553      	cmp	r3, sl
   bbd9c:	d0a0      	beq.n	bbce0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bbd9e:	786a      	ldrb	r2, [r5, #1]
   bbda0:	4620      	mov	r0, r4
   bbda2:	f7fc fbf1 	bl	b8588 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bbda6:	2800      	cmp	r0, #0
   bbda8:	d09c      	beq.n	bbce4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bbdaa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbdae:	2b00      	cmp	r3, #0
   bbdb0:	d0d2      	beq.n	bbd58 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bbdb2:	4951      	ldr	r1, [pc, #324]	; (bbef8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bbdb4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdb8:	f005 f8c3 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bbdbc:	2210      	movs	r2, #16
   bbdbe:	7829      	ldrb	r1, [r5, #0]
   bbdc0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdc4:	f7fc faf2 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bbdc8:	4941      	ldr	r1, [pc, #260]	; (bbed0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bbdca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdce:	f005 f8b8 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   bbdd2:	7869      	ldrb	r1, [r5, #1]
   bbdd4:	2210      	movs	r2, #16
   bbdd6:	e022      	b.n	bbe1e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bbdd8:	2b05      	cmp	r3, #5
   bbdda:	d1e0      	bne.n	bbd9e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbddc:	68ab      	ldr	r3, [r5, #8]
   bbdde:	781a      	ldrb	r2, [r3, #0]
   bbde0:	454a      	cmp	r2, r9
   bbde2:	d1dc      	bne.n	bbd9e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbde4:	785b      	ldrb	r3, [r3, #1]
   bbde6:	4553      	cmp	r3, sl
   bbde8:	d1d9      	bne.n	bbd9e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   bbdea:	2303      	movs	r3, #3
   bbdec:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   bbdee:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbdf2:	2b00      	cmp	r3, #0
   bbdf4:	d0b0      	beq.n	bbd58 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   bbdf6:	4941      	ldr	r1, [pc, #260]	; (bbefc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   bbdf8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdfc:	f005 f8a1 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   bbe00:	68ab      	ldr	r3, [r5, #8]
   bbe02:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe06:	7819      	ldrb	r1, [r3, #0]
   bbe08:	2210      	movs	r2, #16
   bbe0a:	f7fc facf 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   bbe0e:	493c      	ldr	r1, [pc, #240]	; (bbf00 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   bbe10:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe14:	f005 f895 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   bbe18:	68ab      	ldr	r3, [r5, #8]
   bbe1a:	7859      	ldrb	r1, [r3, #1]
   bbe1c:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   bbe1e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe22:	f7fc faca 	bl	b83ba <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbe26:	e75d      	b.n	bbce4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   bbe28:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bbe2a:	782b      	ldrb	r3, [r5, #0]
   bbe2c:	454b      	cmp	r3, r9
   bbe2e:	d143      	bne.n	bbeb8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   bbe30:	786a      	ldrb	r2, [r5, #1]
   bbe32:	4552      	cmp	r2, sl
   bbe34:	d140      	bne.n	bbeb8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   bbe36:	2300      	movs	r3, #0
   bbe38:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbe3a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbe3e:	b91b      	cbnz	r3, bbe48 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   bbe40:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbe44:	2b00      	cmp	r3, #0
   bbe46:	d08e      	beq.n	bbd66 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   bbe48:	492e      	ldr	r1, [pc, #184]	; (bbf04 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   bbe4a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe4e:	f005 f878 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   bbe52:	492d      	ldr	r1, [pc, #180]	; (bbf08 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   bbe54:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe58:	f005 f873 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   bbe5c:	7b29      	ldrb	r1, [r5, #12]
   bbe5e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe62:	220a      	movs	r2, #10
   bbe64:	f7fc faa2 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   bbe68:	4928      	ldr	r1, [pc, #160]	; (bbf0c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   bbe6a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe6e:	f005 f868 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   bbe72:	7b69      	ldrb	r1, [r5, #13]
   bbe74:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe78:	220a      	movs	r2, #10
   bbe7a:	f7fc fa97 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   bbe7e:	4924      	ldr	r1, [pc, #144]	; (bbf10 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   bbe80:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe84:	f005 f85d 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   bbe88:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   bbe8c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe90:	220a      	movs	r2, #10
   bbe92:	f7fc fa8b 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   bbe96:	491f      	ldr	r1, [pc, #124]	; (bbf14 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   bbe98:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe9c:	f005 f851 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   bbea0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbea4:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   bbea8:	220a      	movs	r2, #10
   bbeaa:	f7fc fa7f 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   bbeae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbeb2:	f005 f84a 	bl	c0f4a <_ZN5Print7printlnEv>
   bbeb6:	e756      	b.n	bbd66 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bbeb8:	2b05      	cmp	r3, #5
   bbeba:	d1be      	bne.n	bbe3a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bbebc:	68ab      	ldr	r3, [r5, #8]
   bbebe:	781a      	ldrb	r2, [r3, #0]
   bbec0:	454a      	cmp	r2, r9
   bbec2:	d1ba      	bne.n	bbe3a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bbec4:	785b      	ldrb	r3, [r3, #1]
   bbec6:	4553      	cmp	r3, sl
   bbec8:	d1b7      	bne.n	bbe3a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bbeca:	e7b4      	b.n	bbe36 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bbecc:	000c6ccc 	.word	0x000c6ccc
   bbed0:	000c6d3d 	.word	0x000c6d3d
   bbed4:	000c6e45 	.word	0x000c6e45
   bbed8:	000c6e9c 	.word	0x000c6e9c
   bbedc:	000c6eb2 	.word	0x000c6eb2
   bbee0:	000c6d79 	.word	0x000c6d79
   bbee4:	000c6d8a 	.word	0x000c6d8a
   bbee8:	000c6d96 	.word	0x000c6d96
   bbeec:	000c6daa 	.word	0x000c6daa
   bbef0:	000c6dbe 	.word	0x000c6dbe
   bbef4:	000c6dd8 	.word	0x000c6dd8
   bbef8:	000c6d45 	.word	0x000c6d45
   bbefc:	000c6d04 	.word	0x000c6d04
   bbf00:	000c6d33 	.word	0x000c6d33
   bbf04:	000c6df2 	.word	0x000c6df2
   bbf08:	000c6e03 	.word	0x000c6e03
   bbf0c:	000c6e10 	.word	0x000c6e10
   bbf10:	000c6e1d 	.word	0x000c6e1d
   bbf14:	000c6e31 	.word	0x000c6e31
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bbf18:	786a      	ldrb	r2, [r5, #1]
   bbf1a:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   bbf1c:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bbf20:	4620      	mov	r0, r4
   bbf22:	f7fc fb31 	bl	b8588 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   bbf26:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   bbf2a:	2800      	cmp	r0, #0
   bbf2c:	bf18      	it	ne
   bbf2e:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bbf32:	2b00      	cmp	r3, #0
   bbf34:	f47f ae87 	bne.w	bbc46 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bbf38:	1ef3      	subs	r3, r6, #3
   bbf3a:	454b      	cmp	r3, r9
   bbf3c:	f77f ae83 	ble.w	bbc46 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bbf40:	3e04      	subs	r6, #4
   bbf42:	eba6 0609 	sub.w	r6, r6, r9
   bbf46:	4546      	cmp	r6, r8
   bbf48:	da02      	bge.n	bbf50 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bbf4a:	68ab      	ldr	r3, [r5, #8]
   bbf4c:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbf4e:	e67a      	b.n	bbc46 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bbf50:	2301      	movs	r3, #1
   bbf52:	e681      	b.n	bbc58 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bbf54:	4900      	ldr	r1, [pc, #0]	; (bbf58 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bbf56:	e68e      	b.n	bbc76 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bbf58:	000c6e6a 	.word	0x000c6e6a

000bbf5c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bbf5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bbf5e:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bbf62:	4604      	mov	r4, r0
   bbf64:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bbf66:	b113      	cbz	r3, bbf6e <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bbf68:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bbf6c:	b953      	cbnz	r3, bbf84 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bbf6e:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bbf72:	b128      	cbz	r0, bbf80 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bbf74:	490e      	ldr	r1, [pc, #56]	; (bbfb0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bbf76:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf7a:	f004 fffc 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bbf7e:	2000      	movs	r0, #0
}
   bbf80:	b003      	add	sp, #12
   bbf82:	bd30      	pop	{r4, r5, pc}
   bbf84:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bbf86:	f7fd ff12 	bl	b9dae <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bbf8a:	4285      	cmp	r5, r0
   bbf8c:	9901      	ldr	r1, [sp, #4]
   bbf8e:	d908      	bls.n	bbfa2 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbf90:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbf94:	b91b      	cbnz	r3, bbf9e <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bbf96:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bbf9a:	2800      	cmp	r0, #0
   bbf9c:	d0f0      	beq.n	bbf80 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bbf9e:	4905      	ldr	r1, [pc, #20]	; (bbfb4 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bbfa0:	e7e9      	b.n	bbf76 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bbfa2:	4620      	mov	r0, r4
   bbfa4:	462a      	mov	r2, r5
   bbfa6:	f7fd ff0b 	bl	b9dc0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bbfaa:	2001      	movs	r0, #1
   bbfac:	e7e8      	b.n	bbf80 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bbfae:	bf00      	nop
   bbfb0:	000c6eca 	.word	0x000c6eca
   bbfb4:	000c6ef5 	.word	0x000c6ef5

000bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bbfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbfbc:	4604      	mov	r4, r0
   bbfbe:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bbfc0:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bbfc4:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bbfc8:	f88d 100f 	strb.w	r1, [sp, #15]
   bbfcc:	4615      	mov	r5, r2
   bbfce:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bbfd0:	b118      	cbz	r0, bbfda <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bbfd2:	6803      	ldr	r3, [r0, #0]
   bbfd4:	b2c9      	uxtb	r1, r1
   bbfd6:	689b      	ldr	r3, [r3, #8]
   bbfd8:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bbfda:	7823      	ldrb	r3, [r4, #0]
   bbfdc:	2b01      	cmp	r3, #1
   bbfde:	d80e      	bhi.n	bbffe <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bbfe0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbfe4:	2bb5      	cmp	r3, #181	; 0xb5
   bbfe6:	d12e      	bne.n	bc046 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bbfe8:	2300      	movs	r3, #0
   bbfea:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bbfee:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bbff0:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bbff4:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bbff8:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bbffa:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bbffe:	7826      	ldrb	r6, [r4, #0]
   bc000:	2e02      	cmp	r6, #2
   bc002:	f040 81d5 	bne.w	bc3b0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bc006:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bc00a:	bb5b      	cbnz	r3, bc064 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bc00c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc010:	2bb5      	cmp	r3, #181	; 0xb5
   bc012:	d001      	beq.n	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bc014:	2300      	movs	r3, #0
   bc016:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bc018:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bc01c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc020:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bc024:	2b01      	cmp	r3, #1
   bc026:	f040 81a3 	bne.w	bc370 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bc02a:	463b      	mov	r3, r7
   bc02c:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bc030:	4620      	mov	r0, r4
   bc032:	f7ff fdad 	bl	bbb90 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bc036:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bc03a:	3301      	adds	r3, #1
   bc03c:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bc040:	b005      	add	sp, #20
   bc042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bc046:	2b24      	cmp	r3, #36	; 0x24
   bc048:	d105      	bne.n	bc056 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bc04a:	2300      	movs	r3, #0
   bc04c:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bc050:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bc052:	7023      	strb	r3, [r4, #0]
   bc054:	e7d3      	b.n	bbffe <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bc056:	2bd3      	cmp	r3, #211	; 0xd3
   bc058:	d1d1      	bne.n	bbffe <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bc05a:	2300      	movs	r3, #0
   bc05c:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bc060:	2303      	movs	r3, #3
   bc062:	e7f6      	b.n	bc052 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bc064:	2b01      	cmp	r3, #1
   bc066:	d103      	bne.n	bc070 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bc068:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc06c:	2b62      	cmp	r3, #98	; 0x62
   bc06e:	e7d0      	b.n	bc012 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bc070:	2b02      	cmp	r3, #2
   bc072:	d10e      	bne.n	bc092 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bc074:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc078:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bc07c:	2200      	movs	r2, #0
   bc07e:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bc082:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bc086:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bc08a:	88eb      	ldrh	r3, [r5, #6]
   bc08c:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bc090:	e7c2      	b.n	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bc092:	2b03      	cmp	r3, #3
   bc094:	f040 80b7 	bne.w	bc206 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bc098:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bc09c:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bc0a0:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bc0a4:	2905      	cmp	r1, #5
   bc0a6:	d0b7      	beq.n	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bc0a8:	42b9      	cmp	r1, r7
   bc0aa:	d10c      	bne.n	bc0c6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bc0ac:	4546      	cmp	r6, r8
   bc0ae:	d10a      	bne.n	bc0c6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bc0b0:	2300      	movs	r3, #0
   bc0b2:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bc0b6:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bc0b8:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bc0bc:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bc0be:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bc0c2:	80ab      	strh	r3, [r5, #4]
   bc0c4:	e7a8      	b.n	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bc0c6:	4632      	mov	r2, r6
   bc0c8:	4620      	mov	r0, r4
   bc0ca:	f7fc fa5d 	bl	b8588 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bc0ce:	2800      	cmp	r0, #0
   bc0d0:	f000 8095 	beq.w	bc1fe <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bc0d4:	4632      	mov	r2, r6
   bc0d6:	4620      	mov	r0, r4
   bc0d8:	f7fc fb58 	bl	b878c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bc0dc:	4606      	mov	r6, r0
   bc0de:	b9e8      	cbnz	r0, bc11c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc0e0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc0e4:	b913      	cbnz	r3, bc0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bc0e6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc0ea:	b1bb      	cbz	r3, bc11c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bc0ec:	49a7      	ldr	r1, [pc, #668]	; (bc38c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bc0ee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0f2:	f004 ff26 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bc0f6:	220a      	movs	r2, #10
   bc0f8:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc0fc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc100:	f7fc f954 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc104:	49a2      	ldr	r1, [pc, #648]	; (bc390 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc106:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc10a:	f004 ff1a 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bc10e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc112:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc116:	220a      	movs	r2, #10
   bc118:	f7fc f94f 	bl	b83ba <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bc11c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bc120:	b1a3      	cbz	r3, bc14c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc122:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc126:	b913      	cbnz	r3, bc12e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bc128:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc12c:	b123      	cbz	r3, bc138 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bc12e:	4999      	ldr	r1, [pc, #612]	; (bc394 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bc130:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc134:	f004 ff1f 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bc138:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bc13c:	b108      	cbz	r0, bc142 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bc13e:	f7f7 ffae 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bc142:	2300      	movs	r3, #0
   bc144:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bc148:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bc14c:	4630      	mov	r0, r6
   bc14e:	f7f7 ffa4 	bl	b409a <_Znaj>
   bc152:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc156:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bc15a:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bc15e:	bb38      	cbnz	r0, bc1b0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc160:	b913      	cbnz	r3, bc168 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bc162:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc166:	b1e3      	cbz	r3, bc1a2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bc168:	498b      	ldr	r1, [pc, #556]	; (bc398 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bc16a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc16e:	f004 fee8 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bc172:	2210      	movs	r2, #16
   bc174:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc178:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc17c:	f7fc f916 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc180:	4983      	ldr	r1, [pc, #524]	; (bc390 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc182:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc186:	f004 fedc 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bc18a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc18e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc192:	2210      	movs	r2, #16
   bc194:	f7fc f911 	bl	b83ba <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bc198:	4980      	ldr	r1, [pc, #512]	; (bc39c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bc19a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc19e:	f004 feea 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bc1a2:	2300      	movs	r3, #0
   bc1a4:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bc1a8:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bc1ac:	702b      	strb	r3, [r5, #0]
   bc1ae:	e783      	b.n	bc0b8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bc1b0:	2203      	movs	r2, #3
   bc1b2:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bc1b6:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bc1ba:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bc1be:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bc1c2:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bc1c6:	2b00      	cmp	r3, #0
   bc1c8:	f43f af26 	beq.w	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bc1cc:	4974      	ldr	r1, [pc, #464]	; (bc3a0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bc1ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1d2:	f004 feb6 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bc1d6:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc1da:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1de:	2210      	movs	r2, #16
   bc1e0:	f7fc f8e4 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc1e4:	496a      	ldr	r1, [pc, #424]	; (bc390 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc1e6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1ea:	f004 feaa 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bc1ee:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc1f2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1f6:	2210      	movs	r2, #16
   bc1f8:	f7fc f8df 	bl	b83ba <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc1fc:	e70c      	b.n	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bc1fe:	2301      	movs	r3, #1
   bc200:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bc204:	e708      	b.n	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bc206:	2b04      	cmp	r3, #4
   bc208:	d104      	bne.n	bc214 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bc20a:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bc20e:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bc212:	e701      	b.n	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bc214:	2b05      	cmp	r3, #5
   bc216:	d106      	bne.n	bc226 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bc218:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc21c:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc220:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bc224:	e7f3      	b.n	bc20e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bc226:	2b06      	cmp	r3, #6
   bc228:	d12b      	bne.n	bc282 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bc22a:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc22e:	bb13      	cbnz	r3, bc276 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc230:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc234:	b913      	cbnz	r3, bc23c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bc236:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc23a:	b1bb      	cbz	r3, bc26c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bc23c:	4959      	ldr	r1, [pc, #356]	; (bc3a4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bc23e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc242:	f004 fe7e 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bc246:	2210      	movs	r2, #16
   bc248:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc24c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc250:	f7fc f8ac 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bc254:	494e      	ldr	r1, [pc, #312]	; (bc390 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc256:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc25a:	f004 fe72 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bc25e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc262:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc266:	2210      	movs	r2, #16
   bc268:	f7fc f8a7 	bl	b83ba <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bc26c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc270:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bc274:	e6d0      	b.n	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bc276:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc27a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc27e:	701a      	strb	r2, [r3, #0]
   bc280:	e6ca      	b.n	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bc282:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bc284:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bc288:	f47f aec6 	bne.w	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bc28c:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc290:	bb9b      	cbnz	r3, bc2fa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bc292:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bc296:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bc29a:	2b02      	cmp	r3, #2
   bc29c:	f47f aebc 	bne.w	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bc2a0:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc2a4:	2905      	cmp	r1, #5
   bc2a6:	f47f aeb7 	bne.w	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bc2aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc2ae:	781a      	ldrb	r2, [r3, #0]
   bc2b0:	42ba      	cmp	r2, r7
   bc2b2:	f47f aeb1 	bne.w	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bc2b6:	785a      	ldrb	r2, [r3, #1]
   bc2b8:	4542      	cmp	r2, r8
   bc2ba:	f47f aead 	bne.w	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bc2be:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bc2c2:	2a02      	cmp	r2, #2
   bc2c4:	d121      	bne.n	bc30a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bc2c6:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bc2ca:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bc2ce:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bc2d2:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bc2d6:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bc2da:	2001      	movs	r0, #1
   bc2dc:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bc2e0:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bc2e4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bc2e8:	781b      	ldrb	r3, [r3, #0]
   bc2ea:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bc2ec:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bc2f0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bc2f4:	7852      	ldrb	r2, [r2, #1]
   bc2f6:	705a      	strb	r2, [r3, #1]
   bc2f8:	e68e      	b.n	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bc2fa:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bc2fc:	bf16      	itet	ne
   bc2fe:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bc302:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bc306:	705a      	strbne	r2, [r3, #1]
   bc308:	e7c5      	b.n	bc296 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc30a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc30e:	b923      	cbnz	r3, bc31a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bc310:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc314:	2b00      	cmp	r3, #0
   bc316:	f43f ae7f 	beq.w	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bc31a:	4923      	ldr	r1, [pc, #140]	; (bc3a8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bc31c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc320:	f004 fe0f 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bc324:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc328:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc32c:	7819      	ldrb	r1, [r3, #0]
   bc32e:	2210      	movs	r2, #16
   bc330:	f7fc f83c 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bc334:	4916      	ldr	r1, [pc, #88]	; (bc390 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc336:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc33a:	f004 fe02 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bc33e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc342:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc346:	7859      	ldrb	r1, [r3, #1]
   bc348:	2210      	movs	r2, #16
   bc34a:	f7fc f82f 	bl	b83ac <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bc34e:	4917      	ldr	r1, [pc, #92]	; (bc3ac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bc350:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc354:	f004 fdf5 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bc358:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bc35c:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bc360:	220a      	movs	r2, #10
   bc362:	4630      	mov	r0, r6
   bc364:	f004 fe09 	bl	c0f7a <_ZN5Print11printNumberEmh>
        n += println();
   bc368:	4630      	mov	r0, r6
   bc36a:	f004 fdee 	bl	c0f4a <_ZN5Print7printlnEv>
        return n;
   bc36e:	e653      	b.n	bc018 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bc370:	b913      	cbnz	r3, bc378 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bc372:	463b      	mov	r3, r7
   bc374:	462a      	mov	r2, r5
   bc376:	e65b      	b.n	bc030 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bc378:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bc37a:	bf08      	it	eq
   bc37c:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bc380:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bc382:	bf18      	it	ne
   bc384:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bc388:	e652      	b.n	bc030 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bc38a:	bf00      	nop
   bc38c:	000c6f36 	.word	0x000c6f36
   bc390:	000c6d3d 	.word	0x000c6d3d
   bc394:	000c6f6b 	.word	0x000c6f6b
   bc398:	000c6fad 	.word	0x000c6fad
   bc39c:	000c6ff2 	.word	0x000c6ff2
   bc3a0:	000c7024 	.word	0x000c7024
   bc3a4:	000c7055 	.word	0x000c7055
   bc3a8:	000c7085 	.word	0x000c7085
   bc3ac:	000c70b5 	.word	0x000c70b5
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bc3b0:	2e01      	cmp	r6, #1
   bc3b2:	f040 8188 	bne.w	bc6c6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bc3b6:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bc3ba:	2b00      	cmp	r3, #0
   bc3bc:	d146      	bne.n	bc44c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bc3be:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc3c2:	2a24      	cmp	r2, #36	; 0x24
   bc3c4:	f000 8086 	beq.w	bc4d4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bc3c8:	2300      	movs	r3, #0
   bc3ca:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bc3cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc3d0:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bc3d2:	bf04      	itt	eq
   bc3d4:	23fb      	moveq	r3, #251	; 0xfb
   bc3d6:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bc3da:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc3de:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bc3e2:	3501      	adds	r5, #1
   bc3e4:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc3e6:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc3e8:	bf08      	it	eq
   bc3ea:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bc3ec:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc3f0:	bf08      	it	eq
   bc3f2:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bc3f4:	2d00      	cmp	r5, #0
   bc3f6:	f47f ae23 	bne.w	bc040 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bc3fa:	4620      	mov	r0, r4
   bc3fc:	f7fc fc20 	bl	b8c40 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc400:	2800      	cmp	r0, #0
   bc402:	f000 8120 	beq.w	bc646 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc406:	4620      	mov	r0, r4
   bc408:	f7fc fd7c 	bl	b8f04 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc40c:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc40e:	4620      	mov	r0, r4
   bc410:	f7fc fdfa 	bl	b9008 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc414:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc416:	4620      	mov	r0, r4
   bc418:	f7fd f88a 	bl	b9530 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bc41c:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc41e:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc420:	1e41      	subs	r1, r0, #1
   bc422:	428e      	cmp	r6, r1
   bc424:	f280 80b4 	bge.w	bc590 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc428:	783a      	ldrb	r2, [r7, #0]
   bc42a:	3a04      	subs	r2, #4
   bc42c:	4296      	cmp	r6, r2
   bc42e:	f280 80af 	bge.w	bc590 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc432:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc434:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc438:	f000 80ad 	beq.w	bc596 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bc43c:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bc43e:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bc442:	bf18      	it	ne
   bc444:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bc446:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc448:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc44a:	e7ea      	b.n	bc422 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bc44c:	2b01      	cmp	r3, #1
   bc44e:	d103      	bne.n	bc458 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bc450:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc454:	2a47      	cmp	r2, #71	; 0x47
   bc456:	e7b5      	b.n	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bc458:	b2da      	uxtb	r2, r3
   bc45a:	2a05      	cmp	r2, #5
   bc45c:	d93a      	bls.n	bc4d4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bc45e:	4620      	mov	r0, r4
   bc460:	f7fc fbee 	bl	b8c40 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc464:	b308      	cbz	r0, bc4aa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc466:	4620      	mov	r0, r4
   bc468:	f7fc fd4c 	bl	b8f04 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc46c:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc46e:	4620      	mov	r0, r4
   bc470:	f7fc fdca 	bl	b9008 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc474:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc476:	4620      	mov	r0, r4
   bc478:	f7fd f85a 	bl	b9530 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bc47c:	782b      	ldrb	r3, [r5, #0]
   bc47e:	4283      	cmp	r3, r0
   bc480:	d213      	bcs.n	bc4aa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bc482:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc486:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc488:	782b      	ldrb	r3, [r5, #0]
   bc48a:	3301      	adds	r3, #1
   bc48c:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bc48e:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc490:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bc492:	d10a      	bne.n	bc4aa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc494:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc498:	b913      	cbnz	r3, bc4a0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bc49a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc49e:	b123      	cbz	r3, bc4aa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bc4a0:	498f      	ldr	r1, [pc, #572]	; (bc6e0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bc4a2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4a6:	f004 fd66 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bc4aa:	4620      	mov	r0, r4
   bc4ac:	f7fc f9c8 	bl	b8840 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc4b0:	b128      	cbz	r0, bc4be <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bc4b2:	2201      	movs	r2, #1
   bc4b4:	f10d 010f 	add.w	r1, sp, #15
   bc4b8:	4620      	mov	r0, r4
   bc4ba:	f7ff fd4f 	bl	bbf5c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc4be:	4620      	mov	r0, r4
   bc4c0:	f7fc faee 	bl	b8aa0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc4c4:	2800      	cmp	r0, #0
   bc4c6:	d081      	beq.n	bc3cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bc4c8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc4cc:	4620      	mov	r0, r4
   bc4ce:	f7fc fbaf 	bl	b8c30 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bc4d2:	e77b      	b.n	bc3cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bc4d4:	18e2      	adds	r2, r4, r3
   bc4d6:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc4da:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bc4de:	2b05      	cmp	r3, #5
   bc4e0:	f47f af74 	bne.w	bc3cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bc4e4:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bc4e8:	b923      	cbnz	r3, bc4f4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bc4ea:	4620      	mov	r0, r4
   bc4ec:	f7fc fa70 	bl	b89d0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bc4f0:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bc4f4:	4620      	mov	r0, r4
   bc4f6:	f7fc fba3 	bl	b8c40 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc4fa:	b1b8      	cbz	r0, bc52c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc4fc:	4620      	mov	r0, r4
   bc4fe:	f7fc fd01 	bl	b8f04 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc502:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc504:	4620      	mov	r0, r4
   bc506:	f7fc fd7f 	bl	b9008 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc50a:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc50c:	4620      	mov	r0, r4
   bc50e:	f7fd f80f 	bl	b9530 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bc512:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc514:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bc516:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bc518:	2100      	movs	r1, #0
   bc51a:	4628      	mov	r0, r5
   bc51c:	f007 fdb0 	bl	c4080 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bc520:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bc524:	602b      	str	r3, [r5, #0]
   bc526:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bc52a:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bc52c:	4620      	mov	r0, r4
   bc52e:	f7fc f987 	bl	b8840 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc532:	b128      	cbz	r0, bc540 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bc534:	2206      	movs	r2, #6
   bc536:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bc53a:	4620      	mov	r0, r4
   bc53c:	f7ff fd0e 	bl	bbf5c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc540:	4620      	mov	r0, r4
   bc542:	f7fc faad 	bl	b8aa0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc546:	b1e8      	cbz	r0, bc584 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bc548:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bc54c:	4620      	mov	r0, r4
   bc54e:	f7fc fb6f 	bl	b8c30 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bc552:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bc556:	4620      	mov	r0, r4
   bc558:	f7fc fb6a 	bl	b8c30 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bc55c:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bc560:	4620      	mov	r0, r4
   bc562:	f7fc fb65 	bl	b8c30 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bc566:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bc56a:	4620      	mov	r0, r4
   bc56c:	f7fc fb60 	bl	b8c30 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bc570:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bc574:	4620      	mov	r0, r4
   bc576:	f7fc fb5b 	bl	b8c30 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bc57a:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bc57e:	4620      	mov	r0, r4
   bc580:	f7fc fb56 	bl	b8c30 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bc584:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bc588:	2b05      	cmp	r3, #5
   bc58a:	f67f af1f 	bls.w	bc3cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bc58e:	e766      	b.n	bc45e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bc590:	2d2a      	cmp	r5, #42	; 0x2a
   bc592:	f040 808b 	bne.w	bc6ac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bc596:	091a      	lsrs	r2, r3, #4
   bc598:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bc59c:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bc59e:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bc5a0:	f003 030f 	and.w	r3, r3, #15
   bc5a4:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bc5a8:	bf84      	itt	hi
   bc5aa:	3237      	addhi	r2, #55	; 0x37
   bc5ac:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bc5ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bc5b2:	bf88      	it	hi
   bc5b4:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bc5b8:	f818 3006 	ldrb.w	r3, [r8, r6]
   bc5bc:	42ab      	cmp	r3, r5
   bc5be:	eb08 0b06 	add.w	fp, r8, r6
   bc5c2:	d143      	bne.n	bc64c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bc5c4:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bc5c8:	4553      	cmp	r3, sl
   bc5ca:	d13f      	bne.n	bc64c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bc5cc:	4620      	mov	r0, r4
   bc5ce:	f7fc fd9d 	bl	b910c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bc5d2:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bc5d4:	4620      	mov	r0, r4
   bc5d6:	f7fc fe1d 	bl	b9214 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bc5da:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bc5dc:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bc5de:	2100      	movs	r1, #0
   bc5e0:	f007 fd4e 	bl	c4080 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bc5e4:	783a      	ldrb	r2, [r7, #0]
   bc5e6:	4641      	mov	r1, r8
   bc5e8:	4630      	mov	r0, r6
   bc5ea:	f007 fd21 	bl	c4030 <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bc5ee:	783b      	ldrb	r3, [r7, #0]
   bc5f0:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bc5f2:	4620      	mov	r0, r4
   bc5f4:	f7fd f80e 	bl	b9614 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bc5f8:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bc5fa:	f025 0503 	bic.w	r5, r5, #3
   bc5fe:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bc602:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bc604:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bc608:	4620      	mov	r0, r4
   bc60a:	f7fc fba5 	bl	b8d58 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bc60e:	b1d0      	cbz	r0, bc646 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bc610:	f01a 0104 	ands.w	r1, sl, #4
   bc614:	d117      	bne.n	bc646 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bc616:	4620      	mov	r0, r4
   bc618:	9102      	str	r1, [sp, #8]
   bc61a:	f7fc fe7f 	bl	b931c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bc61e:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bc620:	4620      	mov	r0, r4
   bc622:	f7fc feff 	bl	b9424 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bc626:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bc628:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bc62a:	464a      	mov	r2, r9
   bc62c:	f007 fd28 	bl	c4080 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bc630:	783a      	ldrb	r2, [r7, #0]
   bc632:	4641      	mov	r1, r8
   bc634:	4650      	mov	r0, sl
   bc636:	f007 fcfb 	bl	c4030 <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bc63a:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bc63e:	783b      	ldrb	r3, [r7, #0]
   bc640:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bc644:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bc646:	2300      	movs	r3, #0
   bc648:	7023      	strb	r3, [r4, #0]
   bc64a:	e4f9      	b.n	bc040 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc64c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc650:	b91b      	cbnz	r3, bc65a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bc652:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc656:	2b00      	cmp	r3, #0
   bc658:	d0f5      	beq.n	bc646 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bc65a:	4922      	ldr	r1, [pc, #136]	; (bc6e4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bc65c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc660:	f004 fc6f 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bc664:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc668:	6803      	ldr	r3, [r0, #0]
   bc66a:	4629      	mov	r1, r5
   bc66c:	689b      	ldr	r3, [r3, #8]
   bc66e:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bc670:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc674:	6803      	ldr	r3, [r0, #0]
   bc676:	4651      	mov	r1, sl
   bc678:	689b      	ldr	r3, [r3, #8]
   bc67a:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bc67c:	491a      	ldr	r1, [pc, #104]	; (bc6e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bc67e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc682:	f004 fc5e 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bc686:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc68a:	f89b 1000 	ldrb.w	r1, [fp]
   bc68e:	6803      	ldr	r3, [r0, #0]
   bc690:	689b      	ldr	r3, [r3, #8]
   bc692:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bc694:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc698:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bc69c:	6803      	ldr	r3, [r0, #0]
   bc69e:	689b      	ldr	r3, [r3, #8]
   bc6a0:	4798      	blx	r3
              _debugSerial->println();
   bc6a2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6a6:	f004 fc50 	bl	c0f4a <_ZN5Print7printlnEv>
   bc6aa:	e7cc      	b.n	bc646 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc6ac:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc6b0:	b91b      	cbnz	r3, bc6ba <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bc6b2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc6b6:	2b00      	cmp	r3, #0
   bc6b8:	d0c5      	beq.n	bc646 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bc6ba:	490c      	ldr	r1, [pc, #48]	; (bc6ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bc6bc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6c0:	f004 fc59 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc6c4:	e7bf      	b.n	bc646 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bc6c6:	2e03      	cmp	r6, #3
   bc6c8:	f47f acba 	bne.w	bc040 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bc6cc:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc6d0:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bc6d4:	4620      	mov	r0, r4
   bc6d6:	f7fd f821 	bl	b971c <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bc6da:	7020      	strb	r0, [r4, #0]
}
   bc6dc:	e4b0      	b.n	bc040 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bc6de:	bf00      	nop
   bc6e0:	000c70bc 	.word	0x000c70bc
   bc6e4:	000c70da 	.word	0x000c70da
   bc6e8:	000c7105 	.word	0x000c7105
   bc6ec:	000c710b 	.word	0x000c710b

000bc6f0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bc6f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bc6f4:	4604      	mov	r4, r0
   bc6f6:	4699      	mov	r9, r3
   bc6f8:	460f      	mov	r7, r1
   bc6fa:	4690      	mov	r8, r2
   bc6fc:	f001 f8ae 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bc700:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bc704:	1ac0      	subs	r0, r0, r3
   bc706:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bc70a:	4298      	cmp	r0, r3
   bc70c:	f0c0 80a8 	bcc.w	bc860 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bc710:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc714:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc718:	f003 f946 	bl	bf9a8 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bc71c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc720:	21fd      	movs	r1, #253	; 0xfd
   bc722:	f7fb fe53 	bl	b83cc <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bc726:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc72a:	2100      	movs	r1, #0
   bc72c:	f003 f943 	bl	bf9b6 <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bc730:	4605      	mov	r5, r0
   bc732:	b1a8      	cbz	r0, bc760 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc734:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc738:	b933      	cbnz	r3, bc748 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bc73a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc73e:	b91b      	cbnz	r3, bc748 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bc740:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bc742:	b002      	add	sp, #8
   bc744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bc748:	4946      	ldr	r1, [pc, #280]	; (bc864 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc74a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc74e:	f004 fbf8 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bc752:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc756:	220a      	movs	r2, #10
   bc758:	4629      	mov	r1, r5
   bc75a:	f7fb fe2e 	bl	b83ba <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc75e:	e7ef      	b.n	bc740 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bc760:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc764:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc768:	2202      	movs	r2, #2
   bc76a:	f003 f91a 	bl	bf9a2 <_ZN7TwoWire11requestFromEhj>
   bc76e:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bc770:	2d02      	cmp	r5, #2
   bc772:	d008      	beq.n	bc786 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc774:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc778:	b91b      	cbnz	r3, bc782 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bc77a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc77e:	2b00      	cmp	r3, #0
   bc780:	d0de      	beq.n	bc740 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc782:	4939      	ldr	r1, [pc, #228]	; (bc868 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bc784:	e7e1      	b.n	bc74a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bc786:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc78a:	6803      	ldr	r3, [r0, #0]
   bc78c:	695b      	ldr	r3, [r3, #20]
   bc78e:	4798      	blx	r3
   bc790:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bc792:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc796:	6803      	ldr	r3, [r0, #0]
   bc798:	695b      	ldr	r3, [r3, #20]
   bc79a:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bc79c:	b2c6      	uxtb	r6, r0
   bc79e:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bc7a2:	b22a      	sxth	r2, r5
   bc7a4:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bc7a6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc7aa:	b955      	cbnz	r5, bc7c2 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bc7ac:	b123      	cbz	r3, bc7b8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bc7ae:	492f      	ldr	r1, [pc, #188]	; (bc86c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bc7b0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7b4:	f004 fbdf 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc7b8:	f001 f850 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bc7bc:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bc7c0:	e7be      	b.n	bc740 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bc7c2:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bc7c4:	bfb8      	it	lt
   bc7c6:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bc7ca:	2d64      	cmp	r5, #100	; 0x64
   bc7cc:	d936      	bls.n	bc83c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bc7ce:	b17b      	cbz	r3, bc7f0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bc7d0:	4927      	ldr	r1, [pc, #156]	; (bc870 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bc7d2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7d6:	f004 fbb4 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bc7da:	4629      	mov	r1, r5
   bc7dc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7e0:	220a      	movs	r2, #10
   bc7e2:	f004 fbca 	bl	c0f7a <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bc7e6:	4923      	ldr	r1, [pc, #140]	; (bc874 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bc7e8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7ec:	f004 fbc3 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bc7f0:	2d00      	cmp	r5, #0
   bc7f2:	d035      	beq.n	bc860 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bc7f4:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bc7f6:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc7fa:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc7fe:	42ae      	cmp	r6, r5
   bc800:	bf28      	it	cs
   bc802:	462e      	movcs	r6, r5
   bc804:	4632      	mov	r2, r6
   bc806:	f003 f8cc 	bl	bf9a2 <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bc80a:	b2c0      	uxtb	r0, r0
   bc80c:	4286      	cmp	r6, r0
   bc80e:	d197      	bne.n	bc740 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bc810:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc814:	fa1f f38a 	uxth.w	r3, sl
   bc818:	429e      	cmp	r6, r3
   bc81a:	d91e      	bls.n	bc85a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bc81c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc820:	6803      	ldr	r3, [r0, #0]
   bc822:	695b      	ldr	r3, [r3, #20]
   bc824:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bc826:	f8cd 9000 	str.w	r9, [sp]
   bc82a:	b2c1      	uxtb	r1, r0
   bc82c:	4643      	mov	r3, r8
   bc82e:	463a      	mov	r2, r7
   bc830:	4620      	mov	r0, r4
   bc832:	f7ff fbc1 	bl	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc836:	f10a 0a01 	add.w	sl, sl, #1
   bc83a:	e7eb      	b.n	bc814 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bc83c:	2b00      	cmp	r3, #0
   bc83e:	d0d7      	beq.n	bc7f0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bc840:	490d      	ldr	r1, [pc, #52]	; (bc878 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bc842:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc846:	f004 fb7c 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
   bc84a:	4629      	mov	r1, r5
   bc84c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc850:	220a      	movs	r2, #10
   bc852:	f004 fb92 	bl	c0f7a <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bc856:	4909      	ldr	r1, [pc, #36]	; (bc87c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bc858:	e7c6      	b.n	bc7e8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bc85a:	1bad      	subs	r5, r5, r6
   bc85c:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bc85e:	e7c7      	b.n	bc7f0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bc860:	2001      	movs	r0, #1
   bc862:	e76e      	b.n	bc742 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bc864:	000c712c 	.word	0x000c712c
   bc868:	000c7160 	.word	0x000c7160
   bc86c:	000c7195 	.word	0x000c7195
   bc870:	000c71bd 	.word	0x000c71bd
   bc874:	000c71dd 	.word	0x000c71dd
   bc878:	000c71ed 	.word	0x000c71ed
   bc87c:	000c7205 	.word	0x000c7205

000bc880 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bc880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bc882:	4604      	mov	r4, r0
   bc884:	460d      	mov	r5, r1
   bc886:	4616      	mov	r6, r2
   bc888:	461f      	mov	r7, r3
  while (_serialPort->available())
   bc88a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc88e:	6803      	ldr	r3, [r0, #0]
   bc890:	691b      	ldr	r3, [r3, #16]
   bc892:	4798      	blx	r3
   bc894:	b160      	cbz	r0, bc8b0 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bc896:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc89a:	6803      	ldr	r3, [r0, #0]
   bc89c:	695b      	ldr	r3, [r3, #20]
   bc89e:	4798      	blx	r3
   bc8a0:	9700      	str	r7, [sp, #0]
   bc8a2:	b2c1      	uxtb	r1, r0
   bc8a4:	4633      	mov	r3, r6
   bc8a6:	462a      	mov	r2, r5
   bc8a8:	4620      	mov	r0, r4
   bc8aa:	f7ff fb85 	bl	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bc8ae:	e7ec      	b.n	bc88a <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bc8b0:	2001      	movs	r0, #1
   bc8b2:	b003      	add	sp, #12
   bc8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc8b8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bc8b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc8bc:	4604      	mov	r4, r0
   bc8be:	b087      	sub	sp, #28
   bc8c0:	460d      	mov	r5, r1
   bc8c2:	4616      	mov	r6, r2
   bc8c4:	461f      	mov	r7, r3
   bc8c6:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc8ca:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bc8ce:	fa5f f388 	uxtb.w	r3, r8
   bc8d2:	429a      	cmp	r2, r3
   bc8d4:	d90b      	bls.n	bc8ee <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bc8d6:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bc8da:	4620      	mov	r0, r4
   bc8dc:	5cd1      	ldrb	r1, [r2, r3]
   bc8de:	9700      	str	r7, [sp, #0]
   bc8e0:	4633      	mov	r3, r6
   bc8e2:	462a      	mov	r2, r5
   bc8e4:	f7ff fb68 	bl	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc8e8:	f108 0801 	add.w	r8, r8, #1
   bc8ec:	e7ed      	b.n	bc8ca <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bc8ee:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc8f2:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bc8f6:	4a25      	ldr	r2, [pc, #148]	; (bc98c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bc8f8:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bc8fc:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc900:	a902      	add	r1, sp, #8
   bc902:	f04f 0901 	mov.w	r9, #1
   bc906:	9202      	str	r2, [sp, #8]
   bc908:	9304      	str	r3, [sp, #16]
   bc90a:	f88d 800c 	strb.w	r8, [sp, #12]
   bc90e:	f8ad 9014 	strh.w	r9, [sp, #20]
   bc912:	f004 fc55 	bl	c11c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bc916:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc91a:	4641      	mov	r1, r8
   bc91c:	f005 f8db 	bl	c1ad6 <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bc920:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc924:	21ff      	movs	r1, #255	; 0xff
   bc926:	f004 fceb 	bl	c1300 <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc92a:	28ff      	cmp	r0, #255	; 0xff
   bc92c:	d116      	bne.n	bc95c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc92e:	7823      	ldrb	r3, [r4, #0]
   bc930:	b983      	cbnz	r3, bc954 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bc932:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc936:	4649      	mov	r1, r9
   bc938:	f005 f8cd 	bl	c1ad6 <digitalWrite>
    _spiPort->endTransaction();
   bc93c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc940:	f004 fc24 	bl	c118c <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bc944:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bc948:	f001 fad2 	bl	bdef0 <delay>
} // end checkUbloxSpi()
   bc94c:	2001      	movs	r0, #1
   bc94e:	b007      	add	sp, #28
   bc950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc954:	28ff      	cmp	r0, #255	; 0xff
   bc956:	d101      	bne.n	bc95c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc958:	7823      	ldrb	r3, [r4, #0]
   bc95a:	b163      	cbz	r3, bc976 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bc95c:	4601      	mov	r1, r0
   bc95e:	9700      	str	r7, [sp, #0]
   bc960:	4620      	mov	r0, r4
   bc962:	4633      	mov	r3, r6
   bc964:	462a      	mov	r2, r5
   bc966:	f7ff fb27 	bl	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bc96a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc96e:	21ff      	movs	r1, #255	; 0xff
   bc970:	f004 fcc6 	bl	c1300 <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc974:	e7ee      	b.n	bc954 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bc976:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc97a:	2101      	movs	r1, #1
   bc97c:	f005 f8ab 	bl	c1ad6 <digitalWrite>
  _spiPort->endTransaction();
   bc980:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc984:	f004 fc02 	bl	c118c <_ZN8SPIClass14endTransactionEv>
  return (true);
   bc988:	e7e0      	b.n	bc94c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bc98a:	bf00      	nop
   bc98c:	000c682c 	.word	0x000c682c

000bc990 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bc990:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bc992:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bc996:	b91c      	cbnz	r4, bc9a0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bc998:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bc99c:	f7ff bea8 	b.w	bc6f0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bc9a0:	2c01      	cmp	r4, #1
   bc9a2:	d103      	bne.n	bc9ac <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bc9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bc9a8:	f7ff bf6a 	b.w	bc880 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bc9ac:	2c02      	cmp	r4, #2
   bc9ae:	d103      	bne.n	bc9b8 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bc9b0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bc9b4:	f7ff bf80 	b.w	bc8b8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bc9b8:	2000      	movs	r0, #0
   bc9ba:	f85d 4b04 	ldr.w	r4, [sp], #4
   bc9be:	4770      	bx	lr

000bc9c0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bc9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc9c4:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc9c6:	2102      	movs	r1, #2
   bc9c8:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc9ca:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc9ce:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc9d2:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc9d6:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc9d8:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc9dc:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc9e0:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc9e4:	4604      	mov	r4, r0
   bc9e6:	4617      	mov	r7, r2
   bc9e8:	4698      	mov	r8, r3
   bc9ea:	f000 ff37 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc9ee:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bc9f2:	4606      	mov	r6, r0
   bc9f4:	4481      	add	r9, r0
   bc9f6:	f000 ff31 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   bc9fa:	4581      	cmp	r9, r0
   bc9fc:	f240 80a8 	bls.w	bcb50 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bca00:	4643      	mov	r3, r8
   bca02:	463a      	mov	r2, r7
   bca04:	4629      	mov	r1, r5
   bca06:	4620      	mov	r0, r4
   bca08:	f7ff ffc2 	bl	bc990 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bca0c:	2800      	cmp	r0, #0
   bca0e:	f000 809b 	beq.w	bcb48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bca12:	7beb      	ldrb	r3, [r5, #15]
   bca14:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bca18:	2b01      	cmp	r3, #1
   bca1a:	d125      	bne.n	bca68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bca1c:	2901      	cmp	r1, #1
   bca1e:	f040 80ec 	bne.w	bcbfa <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bca22:	7bab      	ldrb	r3, [r5, #14]
   bca24:	2b01      	cmp	r3, #1
   bca26:	782b      	ldrb	r3, [r5, #0]
   bca28:	d13b      	bne.n	bcaa2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bca2a:	42bb      	cmp	r3, r7
   bca2c:	d13e      	bne.n	bcaac <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bca2e:	786a      	ldrb	r2, [r5, #1]
   bca30:	4542      	cmp	r2, r8
   bca32:	d136      	bne.n	bcaa2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bca34:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca38:	b913      	cbnz	r3, bca40 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bca3a:	200b      	movs	r0, #11
}
   bca3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bca40:	4978      	ldr	r1, [pc, #480]	; (bcc24 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bca42:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca46:	f004 fa7c 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bca4a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bca4e:	f000 ff05 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   bca52:	220a      	movs	r2, #10
   bca54:	1b81      	subs	r1, r0, r6
   bca56:	4628      	mov	r0, r5
   bca58:	f7fb fc9b 	bl	b8392 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bca5c:	4972      	ldr	r1, [pc, #456]	; (bcc28 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bca5e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca62:	f004 fa88 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bca66:	e7e8      	b.n	bca3a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bca68:	2b02      	cmp	r3, #2
   bca6a:	d137      	bne.n	bcadc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bca6c:	2901      	cmp	r1, #1
   bca6e:	f040 80aa 	bne.w	bcbc6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bca72:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca76:	b193      	cbz	r3, bca9e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bca78:	496c      	ldr	r1, [pc, #432]	; (bcc2c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bca7a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca7e:	f004 fa60 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bca82:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bca86:	f000 fee9 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   bca8a:	220a      	movs	r2, #10
   bca8c:	1b81      	subs	r1, r0, r6
   bca8e:	4628      	mov	r0, r5
   bca90:	f7fb fc7f 	bl	b8392 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bca94:	4964      	ldr	r1, [pc, #400]	; (bcc28 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bca96:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca9a:	f004 fa6c 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bca9e:	200a      	movs	r0, #10
   bcaa0:	e7cc      	b.n	bca3c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bcaa2:	42bb      	cmp	r3, r7
   bcaa4:	d102      	bne.n	bcaac <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bcaa6:	786b      	ldrb	r3, [r5, #1]
   bcaa8:	4543      	cmp	r3, r8
   bcaaa:	d019      	beq.n	bcae0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bcaac:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcab0:	b193      	cbz	r3, bcad8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bcab2:	495f      	ldr	r1, [pc, #380]	; (bcc30 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bcab4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcab8:	f004 fa43 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcabc:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcac0:	f000 fecc 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   bcac4:	220a      	movs	r2, #10
   bcac6:	1b81      	subs	r1, r0, r6
   bcac8:	4628      	mov	r0, r5
   bcaca:	f7fb fc62 	bl	b8392 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcace:	4956      	ldr	r1, [pc, #344]	; (bcc28 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcad0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcad4:	f004 fa4f 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bcad8:	200d      	movs	r0, #13
   bcada:	e7af      	b.n	bca3c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bcadc:	2901      	cmp	r1, #1
   bcade:	d172      	bne.n	bcbc6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bcae0:	89eb      	ldrh	r3, [r5, #14]
   bcae2:	bb8b      	cbnz	r3, bcb48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bcae4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcae8:	b193      	cbz	r3, bcb10 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bcaea:	4952      	ldr	r1, [pc, #328]	; (bcc34 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bcaec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcaf0:	f004 fa27 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcaf4:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcaf8:	f000 feb0 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   bcafc:	220a      	movs	r2, #10
   bcafe:	1b81      	subs	r1, r0, r6
   bcb00:	4628      	mov	r0, r5
   bcb02:	f7fb fc46 	bl	b8392 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcb06:	4948      	ldr	r1, [pc, #288]	; (bcc28 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcb08:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb0c:	f004 fa33 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bcb10:	2002      	movs	r0, #2
   bcb12:	e793      	b.n	bca3c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bcb14:	430b      	orrs	r3, r1
   bcb16:	d117      	bne.n	bcb48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bcb18:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcb1c:	b193      	cbz	r3, bcb44 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bcb1e:	4946      	ldr	r1, [pc, #280]	; (bcc38 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bcb20:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb24:	f004 fa0d 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcb28:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcb2c:	f000 fe96 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   bcb30:	220a      	movs	r2, #10
   bcb32:	1b81      	subs	r1, r0, r6
   bcb34:	4628      	mov	r0, r5
   bcb36:	f7fb fc2c 	bl	b8392 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcb3a:	493b      	ldr	r1, [pc, #236]	; (bcc28 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcb3c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb40:	f004 fa19 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bcb44:	2001      	movs	r0, #1
   bcb46:	e779      	b.n	bca3c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bcb48:	2001      	movs	r0, #1
   bcb4a:	f001 f9d1 	bl	bdef0 <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bcb4e:	e752      	b.n	bc9f6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcb50:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bcb52:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcb56:	2a01      	cmp	r2, #1
   bcb58:	d11f      	bne.n	bcb9a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcb5a:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bcb5e:	2a02      	cmp	r2, #2
   bcb60:	d11b      	bne.n	bcb9a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcb62:	7baa      	ldrb	r2, [r5, #14]
   bcb64:	2a01      	cmp	r2, #1
   bcb66:	d118      	bne.n	bcb9a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcb68:	782a      	ldrb	r2, [r5, #0]
   bcb6a:	42ba      	cmp	r2, r7
   bcb6c:	d115      	bne.n	bcb9a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcb6e:	786a      	ldrb	r2, [r5, #1]
   bcb70:	4542      	cmp	r2, r8
   bcb72:	d112      	bne.n	bcb9a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bcb74:	2b00      	cmp	r3, #0
   bcb76:	f43f af60 	beq.w	bca3a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bcb7a:	4930      	ldr	r1, [pc, #192]	; (bcc3c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bcb7c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb80:	f004 f9df 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bcb84:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcb88:	f000 fe68 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   bcb8c:	220a      	movs	r2, #10
   bcb8e:	1b81      	subs	r1, r0, r6
   bcb90:	4628      	mov	r0, r5
   bcb92:	f7fb fbfe 	bl	b8392 <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bcb96:	492a      	ldr	r1, [pc, #168]	; (bcc40 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bcb98:	e761      	b.n	bca5e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bcb9a:	b193      	cbz	r3, bcbc2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bcb9c:	4929      	ldr	r1, [pc, #164]	; (bcc44 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bcb9e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcba2:	f004 f9ce 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bcba6:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcbaa:	f000 fe57 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   bcbae:	220a      	movs	r2, #10
   bcbb0:	1b81      	subs	r1, r0, r6
   bcbb2:	4628      	mov	r0, r5
   bcbb4:	f7fb fbed 	bl	b8392 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bcbb8:	4923      	ldr	r1, [pc, #140]	; (bcc48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bcbba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcbbe:	f004 f9da 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bcbc2:	2003      	movs	r0, #3
   bcbc4:	e73a      	b.n	bca3c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bcbc6:	2903      	cmp	r1, #3
   bcbc8:	d1a4      	bne.n	bcb14 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bcbca:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcbce:	b193      	cbz	r3, bcbf6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bcbd0:	491e      	ldr	r1, [pc, #120]	; (bcc4c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bcbd2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcbd6:	f004 f9b4 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcbda:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcbde:	f000 fe3d 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   bcbe2:	220a      	movs	r2, #10
   bcbe4:	1b81      	subs	r1, r0, r6
   bcbe6:	4628      	mov	r0, r5
   bcbe8:	f7fb fbd3 	bl	b8392 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcbec:	490e      	ldr	r1, [pc, #56]	; (bcc28 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcbee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcbf2:	f004 f9c0 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bcbf6:	2004      	movs	r0, #4
   bcbf8:	e720      	b.n	bca3c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bcbfa:	2903      	cmp	r1, #3
   bcbfc:	d0e5      	beq.n	bcbca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcbfe:	2900      	cmp	r1, #0
   bcc00:	d1a2      	bne.n	bcb48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcc02:	7bab      	ldrb	r3, [r5, #14]
   bcc04:	2b01      	cmp	r3, #1
   bcc06:	d19f      	bne.n	bcb48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcc08:	782b      	ldrb	r3, [r5, #0]
   bcc0a:	42bb      	cmp	r3, r7
   bcc0c:	d19c      	bne.n	bcb48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcc0e:	786b      	ldrb	r3, [r5, #1]
   bcc10:	4543      	cmp	r3, r8
   bcc12:	d199      	bne.n	bcb48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bcc14:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcc18:	2b00      	cmp	r3, #0
   bcc1a:	f43f af0e 	beq.w	bca3a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bcc1e:	490c      	ldr	r1, [pc, #48]	; (bcc50 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bcc20:	e70f      	b.n	bca42 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bcc22:	bf00      	nop
   bcc24:	000c720c 	.word	0x000c720c
   bcc28:	000c7249 	.word	0x000c7249
   bcc2c:	000c724f 	.word	0x000c724f
   bcc30:	000c7280 	.word	0x000c7280
   bcc34:	000c72b2 	.word	0x000c72b2
   bcc38:	000c7352 	.word	0x000c7352
   bcc3c:	000c7393 	.word	0x000c7393
   bcc40:	000c73c6 	.word	0x000c73c6
   bcc44:	000c73ce 	.word	0x000c73ce
   bcc48:	000c73f1 	.word	0x000c73f1
   bcc4c:	000c72d8 	.word	0x000c72d8
   bcc50:	000c7313 	.word	0x000c7313

000bcc54 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bcc54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcc58:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bcc5a:	2102      	movs	r1, #2
   bcc5c:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcc5e:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcc62:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcc66:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bcc6a:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcc6c:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcc70:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcc74:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bcc78:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bcc7c:	4604      	mov	r4, r0
   bcc7e:	4617      	mov	r7, r2
   bcc80:	4698      	mov	r8, r3
   bcc82:	f000 fdeb 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcc86:	f240 1a01 	movw	sl, #257	; 0x101
   bcc8a:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bcc8c:	f240 2b01 	movw	fp, #513	; 0x201
   bcc90:	f000 fde4 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bcc94:	1b80      	subs	r0, r0, r6
   bcc96:	4548      	cmp	r0, r9
   bcc98:	d269      	bcs.n	bcd6e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bcc9a:	4643      	mov	r3, r8
   bcc9c:	463a      	mov	r2, r7
   bcc9e:	4629      	mov	r1, r5
   bcca0:	4620      	mov	r0, r4
   bcca2:	f7ff fe75 	bl	bc990 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bcca6:	2800      	cmp	r0, #0
   bcca8:	d05d      	beq.n	bcd66 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bccaa:	89ea      	ldrh	r2, [r5, #14]
   bccac:	4552      	cmp	r2, sl
   bccae:	d11e      	bne.n	bccee <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bccb0:	782b      	ldrb	r3, [r5, #0]
   bccb2:	42bb      	cmp	r3, r7
   bccb4:	d11b      	bne.n	bccee <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bccb6:	786b      	ldrb	r3, [r5, #1]
   bccb8:	4543      	cmp	r3, r8
   bccba:	d118      	bne.n	bccee <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bccbc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bccc0:	b193      	cbz	r3, bcce8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bccc2:	4937      	ldr	r1, [pc, #220]	; (bcda0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bccc4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bccc8:	f004 f93b 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcccc:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bccd0:	f000 fdc4 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   bccd4:	220a      	movs	r2, #10
   bccd6:	1b81      	subs	r1, r0, r6
   bccd8:	4628      	mov	r0, r5
   bccda:	f7fb fb5a 	bl	b8392 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bccde:	4931      	ldr	r1, [pc, #196]	; (bcda4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bcce0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcce4:	f004 f947 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bcce8:	200b      	movs	r0, #11
}
   bccea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bccee:	7beb      	ldrb	r3, [r5, #15]
   bccf0:	2b01      	cmp	r3, #1
   bccf2:	d11d      	bne.n	bcd30 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bccf4:	782b      	ldrb	r3, [r5, #0]
   bccf6:	42bb      	cmp	r3, r7
   bccf8:	d102      	bne.n	bcd00 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bccfa:	786b      	ldrb	r3, [r5, #1]
   bccfc:	4543      	cmp	r3, r8
   bccfe:	d032      	beq.n	bcd66 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bcd00:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcd04:	b193      	cbz	r3, bcd2c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bcd06:	4928      	ldr	r1, [pc, #160]	; (bcda8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bcd08:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd0c:	f004 f919 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcd10:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcd14:	f000 fda2 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   bcd18:	220a      	movs	r2, #10
   bcd1a:	1b81      	subs	r1, r0, r6
   bcd1c:	4628      	mov	r0, r5
   bcd1e:	f7fb fb38 	bl	b8392 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcd22:	4920      	ldr	r1, [pc, #128]	; (bcda4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bcd24:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd28:	f004 f925 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bcd2c:	200d      	movs	r0, #13
   bcd2e:	e7dc      	b.n	bccea <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bcd30:	455a      	cmp	r2, fp
   bcd32:	d018      	beq.n	bcd66 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bcd34:	b9bb      	cbnz	r3, bcd66 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bcd36:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcd3a:	b193      	cbz	r3, bcd62 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bcd3c:	491b      	ldr	r1, [pc, #108]	; (bcdac <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bcd3e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd42:	f004 f8fe 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcd46:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcd4a:	f000 fd87 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   bcd4e:	220a      	movs	r2, #10
   bcd50:	1b81      	subs	r1, r0, r6
   bcd52:	4628      	mov	r0, r5
   bcd54:	f7fb fb1d 	bl	b8392 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcd58:	4912      	ldr	r1, [pc, #72]	; (bcda4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bcd5a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd5e:	f004 f90a 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bcd62:	2002      	movs	r0, #2
   bcd64:	e7c1      	b.n	bccea <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bcd66:	2001      	movs	r0, #1
   bcd68:	f001 f8c2 	bl	bdef0 <delay>
  while (millis() - startTime < maxTime)
   bcd6c:	e790      	b.n	bcc90 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bcd6e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcd72:	b193      	cbz	r3, bcd9a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bcd74:	490e      	ldr	r1, [pc, #56]	; (bcdb0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bcd76:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd7a:	f004 f8e2 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bcd7e:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcd82:	f000 fd6b 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
   bcd86:	220a      	movs	r2, #10
   bcd88:	1b81      	subs	r1, r0, r6
   bcd8a:	4628      	mov	r0, r5
   bcd8c:	f7fb fb01 	bl	b8392 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bcd90:	4908      	ldr	r1, [pc, #32]	; (bcdb4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bcd92:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd96:	f004 f8ee 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bcd9a:	2003      	movs	r0, #3
   bcd9c:	e7a5      	b.n	bccea <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bcd9e:	bf00      	nop
   bcda0:	000c73f8 	.word	0x000c73f8
   bcda4:	000c7249 	.word	0x000c7249
   bcda8:	000c7432 	.word	0x000c7432
   bcdac:	000c7466 	.word	0x000c7466
   bcdb0:	000c749f 	.word	0x000c749f
   bcdb4:	000c74c4 	.word	0x000c74c4

000bcdb8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bcdb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bcdbc:	4604      	mov	r4, r0
   bcdbe:	4698      	mov	r8, r3
   bcdc0:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bcdc2:	f7fc fcc9 	bl	b9758 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bcdc6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bcdca:	460d      	mov	r5, r1
  if (_printDebug == true)
   bcdcc:	b14b      	cbz	r3, bcde2 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bcdce:	492a      	ldr	r1, [pc, #168]	; (bce78 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bcdd0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcdd4:	f004 f8b5 	bl	c0f42 <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bcdd8:	2201      	movs	r2, #1
   bcdda:	4629      	mov	r1, r5
   bcddc:	4620      	mov	r0, r4
   bcdde:	f7fc fee9 	bl	b9bb4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bcde2:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bcde6:	b993      	cbnz	r3, bce0e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bcde8:	463a      	mov	r2, r7
   bcdea:	4629      	mov	r1, r5
   bcdec:	4620      	mov	r0, r4
   bcdee:	f7fc fce1 	bl	b97b4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bcdf2:	4606      	mov	r6, r0
   bcdf4:	b188      	cbz	r0, bce1a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bcdf6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcdfa:	b123      	cbz	r3, bce06 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bcdfc:	491f      	ldr	r1, [pc, #124]	; (bce7c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bcdfe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce02:	f004 f8b8 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bce06:	4630      	mov	r0, r6
   bce08:	b002      	add	sp, #8
   bce0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bce0e:	2b01      	cmp	r3, #1
   bce10:	d11b      	bne.n	bce4a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bce12:	4629      	mov	r1, r5
   bce14:	4620      	mov	r0, r4
   bce16:	f7fc fd8f 	bl	b9938 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bce1a:	b35f      	cbz	r7, bce74 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bce1c:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bce1e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bce22:	2a06      	cmp	r2, #6
   bce24:	d002      	beq.n	bce2c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bce26:	f1b8 0f00 	cmp.w	r8, #0
   bce2a:	d015      	beq.n	bce58 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bce2c:	b123      	cbz	r3, bce38 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bce2e:	4914      	ldr	r1, [pc, #80]	; (bce80 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bce30:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce34:	f004 f89f 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bce38:	786b      	ldrb	r3, [r5, #1]
   bce3a:	782a      	ldrb	r2, [r5, #0]
   bce3c:	9700      	str	r7, [sp, #0]
   bce3e:	4629      	mov	r1, r5
   bce40:	4620      	mov	r0, r4
   bce42:	f7ff fdbd 	bl	bc9c0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bce46:	4606      	mov	r6, r0
   bce48:	e7dd      	b.n	bce06 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bce4a:	2b02      	cmp	r3, #2
   bce4c:	d1e5      	bne.n	bce1a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bce4e:	4629      	mov	r1, r5
   bce50:	4620      	mov	r0, r4
   bce52:	f7fc fdcb 	bl	b99ec <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bce56:	e7e0      	b.n	bce1a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bce58:	b123      	cbz	r3, bce64 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bce5a:	490a      	ldr	r1, [pc, #40]	; (bce84 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bce5c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce60:	f004 f889 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bce64:	786b      	ldrb	r3, [r5, #1]
   bce66:	782a      	ldrb	r2, [r5, #0]
   bce68:	9700      	str	r7, [sp, #0]
   bce6a:	4629      	mov	r1, r5
   bce6c:	4620      	mov	r0, r4
   bce6e:	f7ff fef1 	bl	bcc54 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bce72:	e7e8      	b.n	bce46 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bce74:	463e      	mov	r6, r7
   bce76:	e7c6      	b.n	bce06 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bce78:	000c74df 	.word	0x000c74df
   bce7c:	000c74ea 	.word	0x000c74ea
   bce80:	000c7502 	.word	0x000c7502
   bce84:	000c7528 	.word	0x000c7528

000bce88 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bce88:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bce8a:	4b09      	ldr	r3, [pc, #36]	; (bceb0 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bce8c:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bce90:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bce94:	2300      	movs	r3, #0
   bce96:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bce9a:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bce9c:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bcea0:	f7ff ff8a 	bl	bcdb8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bcea4:	f1a0 030b 	sub.w	r3, r0, #11
   bcea8:	4258      	negs	r0, r3
   bceaa:	4158      	adcs	r0, r3
   bceac:	bd38      	pop	{r3, r4, r5, pc}
   bceae:	bf00      	nop
   bceb0:	00010006 	.word	0x00010006

000bceb4 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bceb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bceb6:	4615      	mov	r5, r2
   bceb8:	461a      	mov	r2, r3
   bceba:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bcebc:	9301      	str	r3, [sp, #4]
   bcebe:	f7ff ffe3 	bl	bce88 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bcec2:	b190      	cbz	r0, bceea <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bcec4:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bcec8:	4b09      	ldr	r3, [pc, #36]	; (bcef0 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bceca:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bcece:	2300      	movs	r3, #0
   bced0:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bced4:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bced6:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bced8:	4620      	mov	r0, r4
   bceda:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bcede:	f7ff ff6b 	bl	bcdb8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bcee2:	f1a0 030a 	sub.w	r3, r0, #10
   bcee6:	4258      	negs	r0, r3
   bcee8:	4158      	adcs	r0, r3
}
   bceea:	b003      	add	sp, #12
   bceec:	bd30      	pop	{r4, r5, pc}
   bceee:	bf00      	nop
   bcef0:	00140006 	.word	0x00140006

000bcef4 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bcef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcef6:	4615      	mov	r5, r2
   bcef8:	461a      	mov	r2, r3
   bcefa:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bcefc:	9301      	str	r3, [sp, #4]
   bcefe:	f7ff ffc3 	bl	bce88 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bcf02:	b190      	cbz	r0, bcf2a <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bcf04:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bcf08:	4b09      	ldr	r3, [pc, #36]	; (bcf30 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bcf0a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bcf0e:	2300      	movs	r3, #0
   bcf10:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bcf14:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bcf16:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bcf18:	4620      	mov	r0, r4
   bcf1a:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bcf1e:	f7ff ff4b 	bl	bcdb8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bcf22:	f1a0 030a 	sub.w	r3, r0, #10
   bcf26:	4258      	negs	r0, r3
   bcf28:	4158      	adcs	r0, r3
}
   bcf2a:	b003      	add	sp, #12
   bcf2c:	bd30      	pop	{r4, r5, pc}
   bcf2e:	bf00      	nop
   bcf30:	00140006 	.word	0x00140006

000bcf34 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bcf34:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bcf36:	460a      	mov	r2, r1
   bcf38:	2100      	movs	r1, #0
   bcf3a:	f7ff bfbb 	b.w	bceb4 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bcf40 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bcf40:	b510      	push	{r4, lr}
   bcf42:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bcf44:	2018      	movs	r0, #24
   bcf46:	f7f7 f8a6 	bl	b4096 <_Znwj>
   bcf4a:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bcf4c:	b960      	cbnz	r0, bcf68 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bcf4e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcf52:	b913      	cbnz	r3, bcf5a <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bcf54:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bcf58:	b128      	cbz	r0, bcf66 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bcf5a:	4905      	ldr	r1, [pc, #20]	; (bcf70 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bcf5c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf60:	f004 f809 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bcf64:	2000      	movs	r0, #0
}
   bcf66:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bcf68:	2300      	movs	r3, #0
   bcf6a:	7503      	strb	r3, [r0, #20]
  return (true);
   bcf6c:	2001      	movs	r0, #1
   bcf6e:	e7fa      	b.n	bcf66 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bcf70:	000c7551 	.word	0x000c7551

000bcf74 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bcf74:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bcf76:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bcf78:	4605      	mov	r5, r0
   bcf7a:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bcf7c:	b18b      	cbz	r3, bcfa2 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bcf7e:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bcf82:	4b13      	ldr	r3, [pc, #76]	; (bcfd0 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bcf84:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bcf88:	2300      	movs	r3, #0
   bcf8a:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bcf8e:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bcf90:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bcf92:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bcf96:	f7ff ff0f 	bl	bcdb8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bcf9a:	280b      	cmp	r0, #11
   bcf9c:	d10b      	bne.n	bcfb6 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bcf9e:	2401      	movs	r4, #1
   bcfa0:	e00d      	b.n	bcfbe <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bcfa2:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bcfa4:	f7ff ffcc 	bl	bcf40 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bcfa8:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bcfaa:	9a01      	ldr	r2, [sp, #4]
   bcfac:	2c00      	cmp	r4, #0
   bcfae:	d1e6      	bne.n	bcf7e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bcfb0:	4620      	mov	r0, r4
   bcfb2:	b002      	add	sp, #8
   bcfb4:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bcfb6:	f1a0 030d 	sub.w	r3, r0, #13
   bcfba:	425c      	negs	r4, r3
   bcfbc:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bcfbe:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bcfc0:	b110      	cbz	r0, bcfc8 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bcfc2:	2118      	movs	r1, #24
   bcfc4:	f7f7 f86d 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bcfc8:	2300      	movs	r3, #0
   bcfca:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bcfcc:	e7f0      	b.n	bcfb0 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bcfce:	bf00      	nop
   bcfd0:	00010006 	.word	0x00010006

000bcfd4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bcfd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bcfd6:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bcfda:	4604      	mov	r4, r0
   bcfdc:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bcfde:	b145      	cbz	r5, bcff2 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bcfe0:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bcfe4:	b9b1      	cbnz	r1, bd014 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bcfe6:	4620      	mov	r0, r4
}
   bcfe8:	b003      	add	sp, #12
   bcfea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bcfee:	f7ff bfc1 	b.w	bcf74 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bcff2:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bcff4:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bcff8:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bcffc:	f002 fcd4 	bl	bf9a8 <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bd000:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bd004:	f002 fcdb 	bl	bf9be <_ZN7TwoWire15endTransmissionEv>
   bd008:	9a01      	ldr	r2, [sp, #4]
   bd00a:	2800      	cmp	r0, #0
   bd00c:	d0e8      	beq.n	bcfe0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bd00e:	4628      	mov	r0, r5
   bd010:	b003      	add	sp, #12
   bd012:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bd014:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd016:	bf18      	it	ne
   bd018:	2104      	movne	r1, #4
   bd01a:	e7e4      	b.n	bcfe6 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bd01c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bd01c:	b570      	push	{r4, r5, r6, lr}
   bd01e:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bd020:	2300      	movs	r3, #0
   bd022:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bd026:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bd02a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bd02e:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bd032:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bd036:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bd038:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bd03c:	b91b      	cbnz	r3, bd046 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bd03e:	f44f 7180 	mov.w	r1, #256	; 0x100
   bd042:	f7fb fa45 	bl	b84d0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bd046:	4620      	mov	r0, r4
   bd048:	f7fc fe5c 	bl	b9d04 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bd04c:	4631      	mov	r1, r6
   bd04e:	4620      	mov	r0, r4
   bd050:	f7ff ffc0 	bl	bcfd4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bd054:	b110      	cbz	r0, bd05c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bd056:	2501      	movs	r5, #1
}
   bd058:	4628      	mov	r0, r5
   bd05a:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd05c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd060:	b913      	cbnz	r3, bd068 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bd062:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd066:	b123      	cbz	r3, bd072 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bd068:	4917      	ldr	r1, [pc, #92]	; (bd0c8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bd06a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd06e:	f003 ff82 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bd072:	4631      	mov	r1, r6
   bd074:	4620      	mov	r0, r4
   bd076:	f7ff ffad 	bl	bcfd4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bd07a:	2800      	cmp	r0, #0
   bd07c:	d1eb      	bne.n	bd056 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd07e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd082:	b913      	cbnz	r3, bd08a <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bd084:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd088:	b123      	cbz	r3, bd094 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bd08a:	4910      	ldr	r1, [pc, #64]	; (bd0cc <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bd08c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd090:	f003 ff71 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bd094:	4631      	mov	r1, r6
   bd096:	4620      	mov	r0, r4
   bd098:	f7ff ff9c 	bl	bcfd4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bd09c:	2800      	cmp	r0, #0
   bd09e:	d1da      	bne.n	bd056 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bd0a0:	2d00      	cmp	r5, #0
   bd0a2:	d0d9      	beq.n	bd058 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bd0a4:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bd0a8:	2d00      	cmp	r5, #0
   bd0aa:	d0d5      	beq.n	bd058 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd0ac:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd0b0:	b91b      	cbnz	r3, bd0ba <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bd0b2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd0b6:	2b00      	cmp	r3, #0
   bd0b8:	d0cd      	beq.n	bd056 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bd0ba:	4905      	ldr	r1, [pc, #20]	; (bd0d0 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bd0bc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd0c0:	f003 ff59 	bl	c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bd0c4:	e7c8      	b.n	bd058 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bd0c6:	bf00      	nop
   bd0c8:	000c7578 	.word	0x000c7578
   bd0cc:	000c759c 	.word	0x000c759c
   bd0d0:	000c75bf 	.word	0x000c75bf

000bd0d4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bd0d4:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bd0d6:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bd0d8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bd0dc:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bd0de:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bd0e2:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bd0e4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bd0e8:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bd0ea:	2500      	movs	r5, #0
  _width = width;
   bd0ec:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bd0f0:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bd0f2:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bd0f6:	7303      	strb	r3, [r0, #12]
}
   bd0f8:	bd30      	pop	{r4, r5, pc}

000bd0fa <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd0fa:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd0fc:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd0fe:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd100:	b085      	sub	sp, #20
   bd102:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bd104:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd106:	f88d 400c 	strb.w	r4, [sp, #12]
   bd10a:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd10c:	460e      	mov	r6, r1
   bd10e:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bd110:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bd114:	b140      	cbz	r0, bd128 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd116:	7b5b      	ldrb	r3, [r3, #13]
   bd118:	9301      	str	r3, [sp, #4]
   bd11a:	ab03      	add	r3, sp, #12
   bd11c:	9300      	str	r3, [sp, #0]
   bd11e:	2301      	movs	r3, #1
   bd120:	f000 f90a 	bl	bd338 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bd124:	b005      	add	sp, #20
   bd126:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bd128:	6858      	ldr	r0, [r3, #4]
   bd12a:	2800      	cmp	r0, #0
   bd12c:	d0fa      	beq.n	bd124 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd12e:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd132:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd136:	f1be 0f03 	cmp.w	lr, #3
   bd13a:	d10c      	bne.n	bd156 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd13c:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bd140:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd144:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bd146:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bd14a:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd14e:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd150:	f000 fa2b 	bl	bd5aa <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bd154:	e7e6      	b.n	bd124 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd156:	f1be 0f00 	cmp.w	lr, #0
   bd15a:	d109      	bne.n	bd170 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bd15c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bd160:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd164:	f8cd c000 	str.w	ip, [sp]
   bd168:	ab03      	add	r3, sp, #12
   bd16a:	463a      	mov	r2, r7
   bd16c:	4631      	mov	r1, r6
   bd16e:	e7ef      	b.n	bd150 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd170:	f1be 0f02 	cmp.w	lr, #2
   bd174:	d102      	bne.n	bd17c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bd176:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bd17a:	e7f1      	b.n	bd160 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd17c:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bd180:	bf01      	itttt	eq
   bd182:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bd186:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bd18a:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bd18e:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bd192:	e7e7      	b.n	bd164 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bd194 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bd194:	b4f0      	push	{r4, r5, r6, r7}
   bd196:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bd198:	b902      	cbnz	r2, bd19c <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bd19a:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bd19c:	2a04      	cmp	r2, #4
   bd19e:	d814      	bhi.n	bd1ca <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bd1a0:	f100 050f 	add.w	r5, r0, #15
   bd1a4:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bd1a6:	1884      	adds	r4, r0, r2
   bd1a8:	4629      	mov	r1, r5
   bd1aa:	4284      	cmp	r4, r0
   bd1ac:	d009      	beq.n	bd1c2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bd1ae:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bd1b0:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bd1b2:	b927      	cbnz	r7, bd1be <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bd1b4:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bd1b6:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bd1b8:	3501      	adds	r5, #1
   bd1ba:	3c01      	subs	r4, #1
   bd1bc:	e7f5      	b.n	bd1aa <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bd1be:	73a6      	strb	r6, [r4, #14]
   bd1c0:	e7f9      	b.n	bd1b6 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bd1c2:	4620      	mov	r0, r4
}
   bd1c4:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bd1c6:	f7ff bf98 	b.w	bd0fa <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bd1ca:	2000      	movs	r0, #0
   bd1cc:	bcf0      	pop	{r4, r5, r6, r7}
   bd1ce:	4770      	bx	lr

000bd1d0 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd1d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd1d2:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd1d4:	7a85      	ldrb	r5, [r0, #10]
   bd1d6:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd1da:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bd1dc:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd1de:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd1e0:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bd1e2:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bd1e6:	b140      	cbz	r0, bd1fa <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd1e8:	2100      	movs	r1, #0
   bd1ea:	e9cd 2100 	strd	r2, r1, [sp]
   bd1ee:	a903      	add	r1, sp, #12
   bd1f0:	7b62      	ldrb	r2, [r4, #13]
   bd1f2:	f000 f90f 	bl	bd414 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bd1f6:	b004      	add	sp, #16
   bd1f8:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bd1fa:	6860      	ldr	r0, [r4, #4]
   bd1fc:	2800      	cmp	r0, #0
   bd1fe:	d0fa      	beq.n	bd1f6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd200:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd202:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd204:	2903      	cmp	r1, #3
   bd206:	d10d      	bne.n	bd224 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bd208:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bd20c:	21ff      	movs	r1, #255	; 0xff
   bd20e:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bd212:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bd216:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bd21a:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd21c:	a903      	add	r1, sp, #12
   bd21e:	f000 f9f6 	bl	bd60e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bd222:	e7e8      	b.n	bd1f6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd224:	b941      	cbnz	r1, bd238 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bd226:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bd22a:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd22e:	21ff      	movs	r1, #255	; 0xff
   bd230:	e9cd 2100 	strd	r2, r1, [sp]
   bd234:	4622      	mov	r2, r4
   bd236:	e7f1      	b.n	bd21c <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd238:	2902      	cmp	r1, #2
   bd23a:	d102      	bne.n	bd242 <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bd23c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bd240:	e7f3      	b.n	bd22a <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd242:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bd244:	bf02      	ittt	eq
   bd246:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bd24a:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bd24e:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bd252:	e7ec      	b.n	bd22e <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bd254 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bd254:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bd256:	f100 050f 	add.w	r5, r0, #15
   bd25a:	7b02      	ldrb	r2, [r0, #12]
   bd25c:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bd25e:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bd260:	f7ff ffb6 	bl	bd1d0 <_ZN23Adafruit_BusIO_Register4readEPhh>
   bd264:	b178      	cbz	r0, bd286 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bd266:	7b22      	ldrb	r2, [r4, #12]
   bd268:	4629      	mov	r1, r5
   bd26a:	4422      	add	r2, r4
  uint32_t value = 0;
   bd26c:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bd26e:	42a2      	cmp	r2, r4
   bd270:	d00b      	beq.n	bd28a <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bd272:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bd274:	7ba0      	ldrb	r0, [r4, #14]
   bd276:	b920      	cbnz	r0, bd282 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bd278:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bd27a:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bd27c:	3a01      	subs	r2, #1
   bd27e:	3101      	adds	r1, #1
   bd280:	e7f5      	b.n	bd26e <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bd282:	7808      	ldrb	r0, [r1, #0]
   bd284:	e7f9      	b.n	bd27a <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bd286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bd28a:	bd38      	pop	{r3, r4, r5, pc}

000bd28c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bd28c:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bd28e:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bd290:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bd292:	7143      	strb	r3, [r0, #5]
}
   bd294:	bd10      	pop	{r4, pc}

000bd296 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bd296:	b510      	push	{r4, lr}
   bd298:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd29a:	6800      	ldr	r0, [r0, #0]
   bd29c:	f7ff ffda 	bl	bd254 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bd2a0:	7922      	ldrb	r2, [r4, #4]
   bd2a2:	2301      	movs	r3, #1
   bd2a4:	4093      	lsls	r3, r2
  val >>= _shift;
   bd2a6:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bd2a8:	3b01      	subs	r3, #1
  val >>= _shift;
   bd2aa:	40d0      	lsrs	r0, r2
}
   bd2ac:	4018      	ands	r0, r3
   bd2ae:	bd10      	pop	{r4, pc}

000bd2b0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd2b0:	b570      	push	{r4, r5, r6, lr}
   bd2b2:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd2b4:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd2b6:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bd2b8:	f7ff ffcc 	bl	bd254 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bd2bc:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bd2be:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bd2c0:	2201      	movs	r2, #1
   bd2c2:	409a      	lsls	r2, r3
   bd2c4:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bd2c6:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bd2ca:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bd2ce:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bd2d0:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bd2d2:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bd2d6:	4329      	orrs	r1, r5
   bd2d8:	7b02      	ldrb	r2, [r0, #12]
}
   bd2da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bd2de:	f7ff bf59 	b.w	bd194 <_ZN23Adafruit_BusIO_Register5writeEmh>

000bd2e2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bd2e2:	6042      	str	r2, [r0, #4]
  _begun = false;
   bd2e4:	2200      	movs	r2, #0
   bd2e6:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bd2e8:	2220      	movs	r2, #32
  _addr = addr;
   bd2ea:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bd2ec:	60c2      	str	r2, [r0, #12]
#endif
}
   bd2ee:	4770      	bx	lr

000bd2f0 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bd2f0:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bd2f2:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bd2f4:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bd2f6:	b153      	cbz	r3, bd30e <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bd2f8:	7821      	ldrb	r1, [r4, #0]
   bd2fa:	6860      	ldr	r0, [r4, #4]
   bd2fc:	f002 fb54 	bl	bf9a8 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bd300:	6860      	ldr	r0, [r4, #4]
   bd302:	f002 fb5c 	bl	bf9be <_ZN7TwoWire15endTransmissionEv>
   bd306:	fab0 f080 	clz	r0, r0
   bd30a:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bd30c:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bd30e:	2101      	movs	r1, #1
   bd310:	f000 f803 	bl	bd31a <_ZN18Adafruit_I2CDevice5beginEb>
   bd314:	2800      	cmp	r0, #0
   bd316:	d1ef      	bne.n	bd2f8 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bd318:	e7f8      	b.n	bd30c <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bd31a <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd31a:	b538      	push	{r3, r4, r5, lr}
   bd31c:	4604      	mov	r4, r0
  _wire->begin();
   bd31e:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd320:	460d      	mov	r5, r1
  _wire->begin();
   bd322:	f002 fb0f 	bl	bf944 <_ZN7TwoWire5beginEv>
  _begun = true;
   bd326:	2001      	movs	r0, #1
   bd328:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bd32a:	b125      	cbz	r5, bd336 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bd32c:	4620      	mov	r0, r4
}
   bd32e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bd332:	f7ff bfdd 	b.w	bd2f0 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bd336:	bd38      	pop	{r3, r4, r5, pc}

000bd338 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bd338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd33c:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bd340:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bd342:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bd344:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bd346:	4432      	add	r2, r6
   bd348:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bd34a:	4604      	mov	r4, r0
   bd34c:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bd34e:	d902      	bls.n	bd356 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bd350:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bd352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bd356:	7801      	ldrb	r1, [r0, #0]
   bd358:	6840      	ldr	r0, [r0, #4]
   bd35a:	f002 fb25 	bl	bf9a8 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd35e:	b97e      	cbnz	r6, bd380 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bd360:	6860      	ldr	r0, [r4, #4]
   bd362:	6803      	ldr	r3, [r0, #0]
   bd364:	462a      	mov	r2, r5
   bd366:	68db      	ldr	r3, [r3, #12]
   bd368:	4641      	mov	r1, r8
   bd36a:	4798      	blx	r3
   bd36c:	4285      	cmp	r5, r0
   bd36e:	d1ef      	bne.n	bd350 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bd370:	6860      	ldr	r0, [r4, #4]
   bd372:	4639      	mov	r1, r7
   bd374:	f002 fb1f 	bl	bf9b6 <_ZN7TwoWire15endTransmissionEh>
   bd378:	fab0 f080 	clz	r0, r0
   bd37c:	0940      	lsrs	r0, r0, #5
   bd37e:	e7e8      	b.n	bd352 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd380:	f1b9 0f00 	cmp.w	r9, #0
   bd384:	d0ec      	beq.n	bd360 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bd386:	6860      	ldr	r0, [r4, #4]
   bd388:	6803      	ldr	r3, [r0, #0]
   bd38a:	4632      	mov	r2, r6
   bd38c:	68db      	ldr	r3, [r3, #12]
   bd38e:	4649      	mov	r1, r9
   bd390:	4798      	blx	r3
   bd392:	4286      	cmp	r6, r0
   bd394:	d1dc      	bne.n	bd350 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bd396:	e7e3      	b.n	bd360 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bd398 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bd398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd39c:	4615      	mov	r5, r2
   bd39e:	4604      	mov	r4, r0
   bd3a0:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bd3a2:	b2d2      	uxtb	r2, r2
   bd3a4:	7801      	ldrb	r1, [r0, #0]
   bd3a6:	6840      	ldr	r0, [r0, #4]
   bd3a8:	f002 fae9 	bl	bf97e <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bd3ac:	4285      	cmp	r5, r0
   bd3ae:	d10d      	bne.n	bd3cc <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bd3b0:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bd3b2:	fa1f f887 	uxth.w	r8, r7
   bd3b6:	45a8      	cmp	r8, r5
   bd3b8:	f107 0701 	add.w	r7, r7, #1
   bd3bc:	d209      	bcs.n	bd3d2 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bd3be:	6860      	ldr	r0, [r4, #4]
   bd3c0:	6803      	ldr	r3, [r0, #0]
   bd3c2:	695b      	ldr	r3, [r3, #20]
   bd3c4:	4798      	blx	r3
   bd3c6:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bd3ca:	e7f2      	b.n	bd3b2 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bd3cc:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd3d2:	2001      	movs	r0, #1
   bd3d4:	e7fb      	b.n	bd3ce <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bd3d6 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bd3d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd3da:	4607      	mov	r7, r0
   bd3dc:	4688      	mov	r8, r1
   bd3de:	4616      	mov	r6, r2
   bd3e0:	4699      	mov	r9, r3
  size_t pos = 0;
   bd3e2:	2500      	movs	r5, #0
  while (pos < len) {
   bd3e4:	42b5      	cmp	r5, r6
   bd3e6:	d212      	bcs.n	bd40e <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bd3e8:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bd3ea:	1b74      	subs	r4, r6, r5
   bd3ec:	4294      	cmp	r4, r2
   bd3ee:	bf28      	it	cs
   bd3f0:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bd3f2:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bd3f4:	42ab      	cmp	r3, r5
   bd3f6:	bf94      	ite	ls
   bd3f8:	464b      	movls	r3, r9
   bd3fa:	2300      	movhi	r3, #0
   bd3fc:	4622      	mov	r2, r4
   bd3fe:	eb08 0105 	add.w	r1, r8, r5
   bd402:	4638      	mov	r0, r7
   bd404:	f7ff ffc8 	bl	bd398 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bd408:	b110      	cbz	r0, bd410 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bd40a:	4425      	add	r5, r4
  while (pos < len) {
   bd40c:	e7ea      	b.n	bd3e4 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bd40e:	2001      	movs	r0, #1
}
   bd410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bd414 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bd414:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd416:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bd418:	2300      	movs	r3, #0
   bd41a:	e9cd 3300 	strd	r3, r3, [sp]
   bd41e:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bd422:	9e06      	ldr	r6, [sp, #24]
   bd424:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bd426:	f7ff ff87 	bl	bd338 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bd42a:	b140      	cbz	r0, bd43e <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bd42c:	2301      	movs	r3, #1
   bd42e:	4632      	mov	r2, r6
   bd430:	4629      	mov	r1, r5
   bd432:	4620      	mov	r0, r4
}
   bd434:	b002      	add	sp, #8
   bd436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bd43a:	f7ff bfcc 	b.w	bd3d6 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bd43e:	b002      	add	sp, #8
   bd440:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd444 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd448:	4604      	mov	r4, r0
  if (_spi) {
   bd44a:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd44c:	b085      	sub	sp, #20
   bd44e:	460d      	mov	r5, r1
  if (_spi) {
   bd450:	b140      	cbz	r0, bd464 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bd452:	2300      	movs	r3, #0
   bd454:	9300      	str	r3, [sp, #0]
   bd456:	4613      	mov	r3, r2
   bd458:	460a      	mov	r2, r1
   bd45a:	f003 ff57 	bl	c130c <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bd45e:	b005      	add	sp, #20
   bd460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bd464:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd466:	68a0      	ldr	r0, [r4, #8]
   bd468:	4f48      	ldr	r7, [pc, #288]	; (bd58c <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bd46a:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bd46e:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd470:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bd472:	bf0c      	ite	eq
   bd474:	f04f 0b01 	moveq.w	fp, #1
   bd478:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd47c:	ea1b 0f03 	tst.w	fp, r3
   bd480:	eb01 0302 	add.w	r3, r1, r2
   bd484:	bf0c      	ite	eq
   bd486:	f04f 0901 	moveq.w	r9, #1
   bd48a:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd48e:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bd490:	9303      	str	r3, [sp, #12]
   bd492:	9b03      	ldr	r3, [sp, #12]
   bd494:	42ab      	cmp	r3, r5
   bd496:	d0e2      	beq.n	bd45e <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bd498:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bd49c:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bd49e:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bd4a2:	b117      	cbz	r7, bd4aa <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bd4a4:	4638      	mov	r0, r7
   bd4a6:	f000 f9c9 	bl	bd83c <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bd4aa:	7b63      	ldrb	r3, [r4, #13]
   bd4ac:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bd4b0:	d141      	bne.n	bd536 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd4b2:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd4b6:	1c5a      	adds	r2, r3, #1
   bd4b8:	d00f      	beq.n	bd4da <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bd4ba:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd4be:	bf14      	ite	ne
   bd4c0:	2301      	movne	r3, #1
   bd4c2:	2300      	moveq	r3, #0
   bd4c4:	454b      	cmp	r3, r9
   bd4c6:	d008      	beq.n	bd4da <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bd4c8:	6963      	ldr	r3, [r4, #20]
   bd4ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bd4cc:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bd4ce:	2900      	cmp	r1, #0
   bd4d0:	d02c      	beq.n	bd52c <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bd4d2:	4302      	orrs	r2, r0
   bd4d4:	601a      	str	r2, [r3, #0]
   bd4d6:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bd4da:	69a1      	ldr	r1, [r4, #24]
   bd4dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd4de:	680a      	ldr	r2, [r1, #0]
   bd4e0:	4313      	orrs	r3, r2
   bd4e2:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd4e4:	b117      	cbz	r7, bd4ec <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bd4e6:	4638      	mov	r0, r7
   bd4e8:	f000 f9a8 	bl	bd83c <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bd4ec:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd4f0:	3301      	adds	r3, #1
   bd4f2:	d006      	beq.n	bd502 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bd4f4:	69e3      	ldr	r3, [r4, #28]
   bd4f6:	681a      	ldr	r2, [r3, #0]
   bd4f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd4fa:	421a      	tst	r2, r3
            reply |= b;
   bd4fc:	bf18      	it	ne
   bd4fe:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bd502:	69a1      	ldr	r1, [r4, #24]
   bd504:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd506:	680a      	ldr	r2, [r1, #0]
   bd508:	ea22 0303 	bic.w	r3, r2, r3
   bd50c:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bd50e:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd512:	3301      	adds	r3, #1
        buffer[i] = reply;
   bd514:	bf18      	it	ne
   bd516:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bd51a:	7b23      	ldrb	r3, [r4, #12]
   bd51c:	2b00      	cmp	r3, #0
   bd51e:	d132      	bne.n	bd586 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bd520:	0076      	lsls	r6, r6, #1
   bd522:	b2f6      	uxtb	r6, r6
   bd524:	2e00      	cmp	r6, #0
   bd526:	d1bc      	bne.n	bd4a2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bd528:	3501      	adds	r5, #1
   bd52a:	e7b2      	b.n	bd492 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bd52c:	ea22 0200 	bic.w	r2, r2, r0
   bd530:	601a      	str	r2, [r3, #0]
   bd532:	4689      	mov	r9, r1
   bd534:	e7d1      	b.n	bd4da <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bd536:	69a1      	ldr	r1, [r4, #24]
   bd538:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd53a:	680a      	ldr	r2, [r1, #0]
   bd53c:	4313      	orrs	r3, r2
   bd53e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd540:	b117      	cbz	r7, bd548 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bd542:	4638      	mov	r0, r7
   bd544:	f000 f97a 	bl	bd83c <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bd548:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd54c:	3301      	adds	r3, #1
   bd54e:	d008      	beq.n	bd562 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bd550:	6963      	ldr	r3, [r4, #20]
   bd552:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bd554:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bd556:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bd55a:	bf14      	ite	ne
   bd55c:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bd55e:	438a      	biceq	r2, r1
   bd560:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bd562:	69a1      	ldr	r1, [r4, #24]
   bd564:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd566:	680a      	ldr	r2, [r1, #0]
   bd568:	ea22 0303 	bic.w	r3, r2, r3
   bd56c:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bd56e:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd572:	3301      	adds	r3, #1
   bd574:	d0cb      	beq.n	bd50e <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bd576:	69e3      	ldr	r3, [r4, #28]
   bd578:	681a      	ldr	r2, [r3, #0]
   bd57a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd57c:	421a      	tst	r2, r3
            reply |= b;
   bd57e:	bf18      	it	ne
   bd580:	ea46 0808 	orrne.w	r8, r6, r8
   bd584:	e7c3      	b.n	bd50e <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bd586:	0876      	lsrs	r6, r6, #1
   bd588:	e7cc      	b.n	bd524 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bd58a:	bf00      	nop
   bd58c:	0007a120 	.word	0x0007a120

000bd590 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bd590:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bd592:	2201      	movs	r2, #1
  uint8_t data = send;
   bd594:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bd598:	f10d 0107 	add.w	r1, sp, #7
   bd59c:	f7ff ff52 	bl	bd444 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bd5a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bd5a4:	b003      	add	sp, #12
   bd5a6:	f85d fb04 	ldr.w	pc, [sp], #4

000bd5aa <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd5ae:	4604      	mov	r4, r0
  if (_spi) {
   bd5b0:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd5b2:	460e      	mov	r6, r1
   bd5b4:	4617      	mov	r7, r2
   bd5b6:	461d      	mov	r5, r3
  if (_spi) {
   bd5b8:	b110      	cbz	r0, bd5c0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bd5ba:	6861      	ldr	r1, [r4, #4]
   bd5bc:	f003 fe00 	bl	c11c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd5c0:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd5c4:	2100      	movs	r1, #0
   bd5c6:	b280      	uxth	r0, r0
   bd5c8:	f004 fa85 	bl	c1ad6 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bd5cc:	9b06      	ldr	r3, [sp, #24]
   bd5ce:	eb05 0803 	add.w	r8, r5, r3
   bd5d2:	4545      	cmp	r5, r8
   bd5d4:	d108      	bne.n	bd5e8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bd5d6:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bd5d8:	42b7      	cmp	r7, r6
   bd5da:	d00b      	beq.n	bd5f4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bd5dc:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd5e0:	4620      	mov	r0, r4
   bd5e2:	f7ff ffd5 	bl	bd590 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bd5e6:	e7f7      	b.n	bd5d8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bd5e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd5ec:	4620      	mov	r0, r4
   bd5ee:	f7ff ffcf 	bl	bd590 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bd5f2:	e7ee      	b.n	bd5d2 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bd5f4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd5f8:	2101      	movs	r1, #1
   bd5fa:	b280      	uxth	r0, r0
   bd5fc:	f004 fa6b 	bl	c1ad6 <digitalWrite>

  if (_spi) {
   bd600:	6820      	ldr	r0, [r4, #0]
   bd602:	b108      	cbz	r0, bd608 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bd604:	f003 fdc2 	bl	c118c <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd608:	2001      	movs	r0, #1
   bd60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd60e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bd60e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd612:	4604      	mov	r4, r0
  if (_spi) {
   bd614:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bd616:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bd61a:	460e      	mov	r6, r1
   bd61c:	4617      	mov	r7, r2
   bd61e:	461d      	mov	r5, r3
  if (_spi) {
   bd620:	b110      	cbz	r0, bd628 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bd622:	6861      	ldr	r1, [r4, #4]
   bd624:	f003 fdcc 	bl	c11c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd628:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd62c:	2100      	movs	r1, #0
   bd62e:	b280      	uxth	r0, r0
   bd630:	f004 fa51 	bl	c1ad6 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bd634:	4437      	add	r7, r6
   bd636:	42be      	cmp	r6, r7
   bd638:	d10a      	bne.n	bd650 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bd63a:	9b06      	ldr	r3, [sp, #24]
   bd63c:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bd63e:	42ae      	cmp	r6, r5
   bd640:	d00c      	beq.n	bd65c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bd642:	4641      	mov	r1, r8
   bd644:	4620      	mov	r0, r4
   bd646:	f7ff ffa3 	bl	bd590 <_ZN18Adafruit_SPIDevice8transferEh>
   bd64a:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bd64e:	e7f6      	b.n	bd63e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bd650:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd654:	4620      	mov	r0, r4
   bd656:	f7ff ff9b 	bl	bd590 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bd65a:	e7ec      	b.n	bd636 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bd65c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd660:	2101      	movs	r1, #1
   bd662:	b280      	uxth	r0, r0
   bd664:	f004 fa37 	bl	c1ad6 <digitalWrite>

  if (_spi) {
   bd668:	6820      	ldr	r0, [r4, #0]
   bd66a:	b108      	cbz	r0, bd670 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bd66c:	f003 fd8e 	bl	c118c <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bd670:	2001      	movs	r0, #1
   bd672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000bd678 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bd678:	b508      	push	{r3, lr}
   bd67a:	4b02      	ldr	r3, [pc, #8]	; (bd684 <hal_ble_stack_init+0xc>)
   bd67c:	681b      	ldr	r3, [r3, #0]
   bd67e:	689b      	ldr	r3, [r3, #8]
   bd680:	9301      	str	r3, [sp, #4]
   bd682:	bd08      	pop	{r3, pc}
   bd684:	00030278 	.word	0x00030278

000bd688 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bd688:	b508      	push	{r3, lr}
   bd68a:	4b02      	ldr	r3, [pc, #8]	; (bd694 <hal_ble_gap_set_tx_power+0xc>)
   bd68c:	681b      	ldr	r3, [r3, #0]
   bd68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd690:	9301      	str	r3, [sp, #4]
   bd692:	bd08      	pop	{r3, pc}
   bd694:	00030278 	.word	0x00030278

000bd698 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bd698:	b508      	push	{r3, lr}
   bd69a:	4b02      	ldr	r3, [pc, #8]	; (bd6a4 <hal_ble_gap_set_advertising_data+0xc>)
   bd69c:	681b      	ldr	r3, [r3, #0]
   bd69e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd6a0:	9301      	str	r3, [sp, #4]
   bd6a2:	bd08      	pop	{r3, pc}
   bd6a4:	00030278 	.word	0x00030278

000bd6a8 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bd6a8:	b508      	push	{r3, lr}
   bd6aa:	4b02      	ldr	r3, [pc, #8]	; (bd6b4 <hal_ble_gap_set_scan_response_data+0xc>)
   bd6ac:	681b      	ldr	r3, [r3, #0]
   bd6ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd6b0:	9301      	str	r3, [sp, #4]
   bd6b2:	bd08      	pop	{r3, pc}
   bd6b4:	00030278 	.word	0x00030278

000bd6b8 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bd6b8:	b508      	push	{r3, lr}
   bd6ba:	4b02      	ldr	r3, [pc, #8]	; (bd6c4 <hal_ble_gap_start_advertising+0xc>)
   bd6bc:	681b      	ldr	r3, [r3, #0]
   bd6be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bd6c0:	9301      	str	r3, [sp, #4]
   bd6c2:	bd08      	pop	{r3, pc}
   bd6c4:	00030278 	.word	0x00030278

000bd6c8 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bd6c8:	b508      	push	{r3, lr}
   bd6ca:	4b03      	ldr	r3, [pc, #12]	; (bd6d8 <hal_ble_gap_disconnect+0x10>)
   bd6cc:	681b      	ldr	r3, [r3, #0]
   bd6ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bd6d2:	9301      	str	r3, [sp, #4]
   bd6d4:	bd08      	pop	{r3, pc}
   bd6d6:	0000      	.short	0x0000
   bd6d8:	00030278 	.word	0x00030278

000bd6dc <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bd6dc:	b508      	push	{r3, lr}
   bd6de:	4b03      	ldr	r3, [pc, #12]	; (bd6ec <hal_ble_gatt_server_add_service+0x10>)
   bd6e0:	681b      	ldr	r3, [r3, #0]
   bd6e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bd6e6:	9301      	str	r3, [sp, #4]
   bd6e8:	bd08      	pop	{r3, pc}
   bd6ea:	0000      	.short	0x0000
   bd6ec:	00030278 	.word	0x00030278

000bd6f0 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd6f0:	b508      	push	{r3, lr}
   bd6f2:	4b03      	ldr	r3, [pc, #12]	; (bd700 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bd6f4:	681b      	ldr	r3, [r3, #0]
   bd6f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bd6fa:	9301      	str	r3, [sp, #4]
   bd6fc:	bd08      	pop	{r3, pc}
   bd6fe:	0000      	.short	0x0000
   bd700:	00030278 	.word	0x00030278

000bd704 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd704:	b508      	push	{r3, lr}
   bd706:	4b03      	ldr	r3, [pc, #12]	; (bd714 <hal_ble_gatt_client_write_with_response+0x10>)
   bd708:	681b      	ldr	r3, [r3, #0]
   bd70a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bd70e:	9301      	str	r3, [sp, #4]
   bd710:	bd08      	pop	{r3, pc}
   bd712:	0000      	.short	0x0000
   bd714:	00030278 	.word	0x00030278

000bd718 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd718:	b508      	push	{r3, lr}
   bd71a:	4b03      	ldr	r3, [pc, #12]	; (bd728 <hal_ble_gatt_client_write_without_response+0x10>)
   bd71c:	681b      	ldr	r3, [r3, #0]
   bd71e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bd722:	9301      	str	r3, [sp, #4]
   bd724:	bd08      	pop	{r3, pc}
   bd726:	0000      	.short	0x0000
   bd728:	00030278 	.word	0x00030278

000bd72c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bd72c:	b508      	push	{r3, lr}
   bd72e:	4b03      	ldr	r3, [pc, #12]	; (bd73c <hal_ble_gatt_server_add_characteristic+0x10>)
   bd730:	681b      	ldr	r3, [r3, #0]
   bd732:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bd736:	9301      	str	r3, [sp, #4]
   bd738:	bd08      	pop	{r3, pc}
   bd73a:	0000      	.short	0x0000
   bd73c:	00030278 	.word	0x00030278

000bd740 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bd740:	b508      	push	{r3, lr}
   bd742:	4b03      	ldr	r3, [pc, #12]	; (bd750 <hal_ble_set_callback_on_periph_link_events+0x10>)
   bd744:	681b      	ldr	r3, [r3, #0]
   bd746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bd74a:	9301      	str	r3, [sp, #4]
   bd74c:	bd08      	pop	{r3, pc}
   bd74e:	0000      	.short	0x0000
   bd750:	00030278 	.word	0x00030278

000bd754 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd754:	b508      	push	{r3, lr}
   bd756:	4b03      	ldr	r3, [pc, #12]	; (bd764 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bd758:	681b      	ldr	r3, [r3, #0]
   bd75a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bd75e:	9301      	str	r3, [sp, #4]
   bd760:	bd08      	pop	{r3, pc}
   bd762:	0000      	.short	0x0000
   bd764:	00030278 	.word	0x00030278

000bd768 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd768:	b508      	push	{r3, lr}
   bd76a:	4b03      	ldr	r3, [pc, #12]	; (bd778 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bd76c:	681b      	ldr	r3, [r3, #0]
   bd76e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bd772:	9301      	str	r3, [sp, #4]
   bd774:	bd08      	pop	{r3, pc}
   bd776:	0000      	.short	0x0000
   bd778:	00030278 	.word	0x00030278

000bd77c <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bd77c:	b508      	push	{r3, lr}
   bd77e:	4b02      	ldr	r3, [pc, #8]	; (bd788 <os_thread_yield+0xc>)
   bd780:	681b      	ldr	r3, [r3, #0]
   bd782:	68db      	ldr	r3, [r3, #12]
   bd784:	9301      	str	r3, [sp, #4]
   bd786:	bd08      	pop	{r3, pc}
   bd788:	00030248 	.word	0x00030248

000bd78c <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bd78c:	b508      	push	{r3, lr}
   bd78e:	4b02      	ldr	r3, [pc, #8]	; (bd798 <os_thread_scheduling+0xc>)
   bd790:	681b      	ldr	r3, [r3, #0]
   bd792:	69db      	ldr	r3, [r3, #28]
   bd794:	9301      	str	r3, [sp, #4]
   bd796:	bd08      	pop	{r3, pc}
   bd798:	00030248 	.word	0x00030248

000bd79c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bd79c:	b508      	push	{r3, lr}
   bd79e:	4b02      	ldr	r3, [pc, #8]	; (bd7a8 <os_timer_create+0xc>)
   bd7a0:	681b      	ldr	r3, [r3, #0]
   bd7a2:	6a1b      	ldr	r3, [r3, #32]
   bd7a4:	9301      	str	r3, [sp, #4]
   bd7a6:	bd08      	pop	{r3, pc}
   bd7a8:	00030248 	.word	0x00030248

000bd7ac <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bd7ac:	b508      	push	{r3, lr}
   bd7ae:	4b02      	ldr	r3, [pc, #8]	; (bd7b8 <os_timer_destroy+0xc>)
   bd7b0:	681b      	ldr	r3, [r3, #0]
   bd7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd7b4:	9301      	str	r3, [sp, #4]
   bd7b6:	bd08      	pop	{r3, pc}
   bd7b8:	00030248 	.word	0x00030248

000bd7bc <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bd7bc:	b508      	push	{r3, lr}
   bd7be:	4b02      	ldr	r3, [pc, #8]	; (bd7c8 <os_timer_get_id+0xc>)
   bd7c0:	681b      	ldr	r3, [r3, #0]
   bd7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd7c4:	9301      	str	r3, [sp, #4]
   bd7c6:	bd08      	pop	{r3, pc}
   bd7c8:	00030248 	.word	0x00030248

000bd7cc <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bd7cc:	b508      	push	{r3, lr}
   bd7ce:	4b02      	ldr	r3, [pc, #8]	; (bd7d8 <os_timer_change+0xc>)
   bd7d0:	681b      	ldr	r3, [r3, #0]
   bd7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd7d4:	9301      	str	r3, [sp, #4]
   bd7d6:	bd08      	pop	{r3, pc}
   bd7d8:	00030248 	.word	0x00030248

000bd7dc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bd7dc:	b508      	push	{r3, lr}
   bd7de:	4b02      	ldr	r3, [pc, #8]	; (bd7e8 <os_mutex_recursive_create+0xc>)
   bd7e0:	681b      	ldr	r3, [r3, #0]
   bd7e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd7e4:	9301      	str	r3, [sp, #4]
   bd7e6:	bd08      	pop	{r3, pc}
   bd7e8:	00030248 	.word	0x00030248

000bd7ec <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bd7ec:	b508      	push	{r3, lr}
   bd7ee:	4b02      	ldr	r3, [pc, #8]	; (bd7f8 <os_mutex_recursive_destroy+0xc>)
   bd7f0:	681b      	ldr	r3, [r3, #0]
   bd7f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bd7f4:	9301      	str	r3, [sp, #4]
   bd7f6:	bd08      	pop	{r3, pc}
   bd7f8:	00030248 	.word	0x00030248

000bd7fc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bd7fc:	b508      	push	{r3, lr}
   bd7fe:	4b02      	ldr	r3, [pc, #8]	; (bd808 <os_mutex_recursive_lock+0xc>)
   bd800:	681b      	ldr	r3, [r3, #0]
   bd802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd804:	9301      	str	r3, [sp, #4]
   bd806:	bd08      	pop	{r3, pc}
   bd808:	00030248 	.word	0x00030248

000bd80c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bd80c:	b508      	push	{r3, lr}
   bd80e:	4b02      	ldr	r3, [pc, #8]	; (bd818 <os_mutex_recursive_unlock+0xc>)
   bd810:	681b      	ldr	r3, [r3, #0]
   bd812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd814:	9301      	str	r3, [sp, #4]
   bd816:	bd08      	pop	{r3, pc}
   bd818:	00030248 	.word	0x00030248

000bd81c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bd81c:	b508      	push	{r3, lr}
   bd81e:	4b02      	ldr	r3, [pc, #8]	; (bd828 <os_timer_set_id+0xc>)
   bd820:	681b      	ldr	r3, [r3, #0]
   bd822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd824:	9301      	str	r3, [sp, #4]
   bd826:	bd08      	pop	{r3, pc}
   bd828:	00030248 	.word	0x00030248

000bd82c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bd82c:	b508      	push	{r3, lr}
   bd82e:	4b02      	ldr	r3, [pc, #8]	; (bd838 <HAL_RNG_GetRandomNumber+0xc>)
   bd830:	681b      	ldr	r3, [r3, #0]
   bd832:	685b      	ldr	r3, [r3, #4]
   bd834:	9301      	str	r3, [sp, #4]
   bd836:	bd08      	pop	{r3, pc}
   bd838:	00030218 	.word	0x00030218

000bd83c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bd83c:	b508      	push	{r3, lr}
   bd83e:	4b02      	ldr	r3, [pc, #8]	; (bd848 <HAL_Delay_Microseconds+0xc>)
   bd840:	681b      	ldr	r3, [r3, #0]
   bd842:	68db      	ldr	r3, [r3, #12]
   bd844:	9301      	str	r3, [sp, #4]
   bd846:	bd08      	pop	{r3, pc}
   bd848:	00030218 	.word	0x00030218

000bd84c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bd84c:	b508      	push	{r3, lr}
   bd84e:	4b02      	ldr	r3, [pc, #8]	; (bd858 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bd850:	681b      	ldr	r3, [r3, #0]
   bd852:	691b      	ldr	r3, [r3, #16]
   bd854:	9301      	str	r3, [sp, #4]
   bd856:	bd08      	pop	{r3, pc}
   bd858:	00030218 	.word	0x00030218

000bd85c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bd85c:	b508      	push	{r3, lr}
   bd85e:	4b02      	ldr	r3, [pc, #8]	; (bd868 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bd860:	681b      	ldr	r3, [r3, #0]
   bd862:	695b      	ldr	r3, [r3, #20]
   bd864:	9301      	str	r3, [sp, #4]
   bd866:	bd08      	pop	{r3, pc}
   bd868:	00030218 	.word	0x00030218

000bd86c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bd86c:	b508      	push	{r3, lr}
   bd86e:	4b02      	ldr	r3, [pc, #8]	; (bd878 <hal_rtc_time_is_valid+0xc>)
   bd870:	681b      	ldr	r3, [r3, #0]
   bd872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd874:	9301      	str	r3, [sp, #4]
   bd876:	bd08      	pop	{r3, pc}
   bd878:	00030218 	.word	0x00030218

000bd87c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bd87c:	b508      	push	{r3, lr}
   bd87e:	4b02      	ldr	r3, [pc, #8]	; (bd888 <hal_rtc_get_time+0xc>)
   bd880:	681b      	ldr	r3, [r3, #0]
   bd882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bd884:	9301      	str	r3, [sp, #4]
   bd886:	bd08      	pop	{r3, pc}
   bd888:	00030218 	.word	0x00030218

000bd88c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bd88c:	b508      	push	{r3, lr}
   bd88e:	4b02      	ldr	r3, [pc, #8]	; (bd898 <HAL_Validate_Pin_Function+0xc>)
   bd890:	681b      	ldr	r3, [r3, #0]
   bd892:	685b      	ldr	r3, [r3, #4]
   bd894:	9301      	str	r3, [sp, #4]
   bd896:	bd08      	pop	{r3, pc}
   bd898:	0003022c 	.word	0x0003022c

000bd89c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bd89c:	b508      	push	{r3, lr}
   bd89e:	4b02      	ldr	r3, [pc, #8]	; (bd8a8 <HAL_Pin_Mode+0xc>)
   bd8a0:	681b      	ldr	r3, [r3, #0]
   bd8a2:	689b      	ldr	r3, [r3, #8]
   bd8a4:	9301      	str	r3, [sp, #4]
   bd8a6:	bd08      	pop	{r3, pc}
   bd8a8:	0003022c 	.word	0x0003022c

000bd8ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bd8ac:	b508      	push	{r3, lr}
   bd8ae:	4b02      	ldr	r3, [pc, #8]	; (bd8b8 <HAL_Get_Pin_Mode+0xc>)
   bd8b0:	681b      	ldr	r3, [r3, #0]
   bd8b2:	68db      	ldr	r3, [r3, #12]
   bd8b4:	9301      	str	r3, [sp, #4]
   bd8b6:	bd08      	pop	{r3, pc}
   bd8b8:	0003022c 	.word	0x0003022c

000bd8bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bd8bc:	b508      	push	{r3, lr}
   bd8be:	4b02      	ldr	r3, [pc, #8]	; (bd8c8 <HAL_GPIO_Write+0xc>)
   bd8c0:	681b      	ldr	r3, [r3, #0]
   bd8c2:	691b      	ldr	r3, [r3, #16]
   bd8c4:	9301      	str	r3, [sp, #4]
   bd8c6:	bd08      	pop	{r3, pc}
   bd8c8:	0003022c 	.word	0x0003022c

000bd8cc <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bd8cc:	b508      	push	{r3, lr}
   bd8ce:	4b02      	ldr	r3, [pc, #8]	; (bd8d8 <HAL_Interrupts_Enable_All+0xc>)
   bd8d0:	681b      	ldr	r3, [r3, #0]
   bd8d2:	6a1b      	ldr	r3, [r3, #32]
   bd8d4:	9301      	str	r3, [sp, #4]
   bd8d6:	bd08      	pop	{r3, pc}
   bd8d8:	0003022c 	.word	0x0003022c

000bd8dc <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bd8dc:	b508      	push	{r3, lr}
   bd8de:	4b02      	ldr	r3, [pc, #8]	; (bd8e8 <HAL_Interrupts_Disable_All+0xc>)
   bd8e0:	681b      	ldr	r3, [r3, #0]
   bd8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd8e4:	9301      	str	r3, [sp, #4]
   bd8e6:	bd08      	pop	{r3, pc}
   bd8e8:	0003022c 	.word	0x0003022c

000bd8ec <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bd8ec:	b508      	push	{r3, lr}
   bd8ee:	4b02      	ldr	r3, [pc, #8]	; (bd8f8 <hal_adc_read+0xc>)
   bd8f0:	681b      	ldr	r3, [r3, #0]
   bd8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd8f4:	9301      	str	r3, [sp, #4]
   bd8f6:	bd08      	pop	{r3, pc}
   bd8f8:	0003022c 	.word	0x0003022c

000bd8fc <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bd8fc:	b508      	push	{r3, lr}
   bd8fe:	4b02      	ldr	r3, [pc, #8]	; (bd908 <hal_i2c_set_speed+0xc>)
   bd900:	681b      	ldr	r3, [r3, #0]
   bd902:	681b      	ldr	r3, [r3, #0]
   bd904:	9301      	str	r3, [sp, #4]
   bd906:	bd08      	pop	{r3, pc}
   bd908:	00030228 	.word	0x00030228

000bd90c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bd90c:	b508      	push	{r3, lr}
   bd90e:	4b02      	ldr	r3, [pc, #8]	; (bd918 <hal_i2c_begin+0xc>)
   bd910:	681b      	ldr	r3, [r3, #0]
   bd912:	68db      	ldr	r3, [r3, #12]
   bd914:	9301      	str	r3, [sp, #4]
   bd916:	bd08      	pop	{r3, pc}
   bd918:	00030228 	.word	0x00030228

000bd91c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bd91c:	b508      	push	{r3, lr}
   bd91e:	4b02      	ldr	r3, [pc, #8]	; (bd928 <hal_i2c_begin_transmission+0xc>)
   bd920:	681b      	ldr	r3, [r3, #0]
   bd922:	699b      	ldr	r3, [r3, #24]
   bd924:	9301      	str	r3, [sp, #4]
   bd926:	bd08      	pop	{r3, pc}
   bd928:	00030228 	.word	0x00030228

000bd92c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bd92c:	b508      	push	{r3, lr}
   bd92e:	4b02      	ldr	r3, [pc, #8]	; (bd938 <hal_i2c_end_transmission+0xc>)
   bd930:	681b      	ldr	r3, [r3, #0]
   bd932:	69db      	ldr	r3, [r3, #28]
   bd934:	9301      	str	r3, [sp, #4]
   bd936:	bd08      	pop	{r3, pc}
   bd938:	00030228 	.word	0x00030228

000bd93c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bd93c:	b508      	push	{r3, lr}
   bd93e:	4b02      	ldr	r3, [pc, #8]	; (bd948 <hal_i2c_write+0xc>)
   bd940:	681b      	ldr	r3, [r3, #0]
   bd942:	6a1b      	ldr	r3, [r3, #32]
   bd944:	9301      	str	r3, [sp, #4]
   bd946:	bd08      	pop	{r3, pc}
   bd948:	00030228 	.word	0x00030228

000bd94c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bd94c:	b508      	push	{r3, lr}
   bd94e:	4b02      	ldr	r3, [pc, #8]	; (bd958 <hal_i2c_available+0xc>)
   bd950:	681b      	ldr	r3, [r3, #0]
   bd952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd954:	9301      	str	r3, [sp, #4]
   bd956:	bd08      	pop	{r3, pc}
   bd958:	00030228 	.word	0x00030228

000bd95c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bd95c:	b508      	push	{r3, lr}
   bd95e:	4b02      	ldr	r3, [pc, #8]	; (bd968 <hal_i2c_read+0xc>)
   bd960:	681b      	ldr	r3, [r3, #0]
   bd962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd964:	9301      	str	r3, [sp, #4]
   bd966:	bd08      	pop	{r3, pc}
   bd968:	00030228 	.word	0x00030228

000bd96c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bd96c:	b508      	push	{r3, lr}
   bd96e:	4b02      	ldr	r3, [pc, #8]	; (bd978 <hal_i2c_peek+0xc>)
   bd970:	681b      	ldr	r3, [r3, #0]
   bd972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd974:	9301      	str	r3, [sp, #4]
   bd976:	bd08      	pop	{r3, pc}
   bd978:	00030228 	.word	0x00030228

000bd97c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bd97c:	b508      	push	{r3, lr}
   bd97e:	4b02      	ldr	r3, [pc, #8]	; (bd988 <hal_i2c_flush+0xc>)
   bd980:	681b      	ldr	r3, [r3, #0]
   bd982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd984:	9301      	str	r3, [sp, #4]
   bd986:	bd08      	pop	{r3, pc}
   bd988:	00030228 	.word	0x00030228

000bd98c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bd98c:	b508      	push	{r3, lr}
   bd98e:	4b02      	ldr	r3, [pc, #8]	; (bd998 <hal_i2c_is_enabled+0xc>)
   bd990:	681b      	ldr	r3, [r3, #0]
   bd992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd994:	9301      	str	r3, [sp, #4]
   bd996:	bd08      	pop	{r3, pc}
   bd998:	00030228 	.word	0x00030228

000bd99c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bd99c:	b508      	push	{r3, lr}
   bd99e:	4b02      	ldr	r3, [pc, #8]	; (bd9a8 <hal_i2c_init+0xc>)
   bd9a0:	681b      	ldr	r3, [r3, #0]
   bd9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd9a4:	9301      	str	r3, [sp, #4]
   bd9a6:	bd08      	pop	{r3, pc}
   bd9a8:	00030228 	.word	0x00030228

000bd9ac <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bd9ac:	b508      	push	{r3, lr}
   bd9ae:	4b02      	ldr	r3, [pc, #8]	; (bd9b8 <hal_i2c_request_ex+0xc>)
   bd9b0:	681b      	ldr	r3, [r3, #0]
   bd9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd9b4:	9301      	str	r3, [sp, #4]
   bd9b6:	bd08      	pop	{r3, pc}
   bd9b8:	00030228 	.word	0x00030228

000bd9bc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bd9bc:	b508      	push	{r3, lr}
   bd9be:	4b02      	ldr	r3, [pc, #8]	; (bd9c8 <inet_inet_ntop+0xc>)
   bd9c0:	681b      	ldr	r3, [r3, #0]
   bd9c2:	695b      	ldr	r3, [r3, #20]
   bd9c4:	9301      	str	r3, [sp, #4]
   bd9c6:	bd08      	pop	{r3, pc}
   bd9c8:	00030264 	.word	0x00030264

000bd9cc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bd9cc:	b508      	push	{r3, lr}
   bd9ce:	4b02      	ldr	r3, [pc, #8]	; (bd9d8 <netdb_freeaddrinfo+0xc>)
   bd9d0:	681b      	ldr	r3, [r3, #0]
   bd9d2:	689b      	ldr	r3, [r3, #8]
   bd9d4:	9301      	str	r3, [sp, #4]
   bd9d6:	bd08      	pop	{r3, pc}
   bd9d8:	00030268 	.word	0x00030268

000bd9dc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bd9dc:	b508      	push	{r3, lr}
   bd9de:	4b02      	ldr	r3, [pc, #8]	; (bd9e8 <netdb_getaddrinfo+0xc>)
   bd9e0:	681b      	ldr	r3, [r3, #0]
   bd9e2:	68db      	ldr	r3, [r3, #12]
   bd9e4:	9301      	str	r3, [sp, #4]
   bd9e6:	bd08      	pop	{r3, pc}
   bd9e8:	00030268 	.word	0x00030268

000bd9ec <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bd9ec:	b508      	push	{r3, lr}
   bd9ee:	4b02      	ldr	r3, [pc, #8]	; (bd9f8 <HAL_Servo_Attach+0xc>)
   bd9f0:	681b      	ldr	r3, [r3, #0]
   bd9f2:	691b      	ldr	r3, [r3, #16]
   bd9f4:	9301      	str	r3, [sp, #4]
   bd9f6:	bd08      	pop	{r3, pc}
   bd9f8:	00030224 	.word	0x00030224

000bd9fc <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bd9fc:	b508      	push	{r3, lr}
   bd9fe:	4b02      	ldr	r3, [pc, #8]	; (bda08 <HAL_Servo_Detach+0xc>)
   bda00:	681b      	ldr	r3, [r3, #0]
   bda02:	695b      	ldr	r3, [r3, #20]
   bda04:	9301      	str	r3, [sp, #4]
   bda06:	bd08      	pop	{r3, pc}
   bda08:	00030224 	.word	0x00030224

000bda0c <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bda0c:	b508      	push	{r3, lr}
   bda0e:	4b02      	ldr	r3, [pc, #8]	; (bda18 <HAL_Servo_Write_Pulse_Width+0xc>)
   bda10:	681b      	ldr	r3, [r3, #0]
   bda12:	699b      	ldr	r3, [r3, #24]
   bda14:	9301      	str	r3, [sp, #4]
   bda16:	bd08      	pop	{r3, pc}
   bda18:	00030224 	.word	0x00030224

000bda1c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bda1c:	b508      	push	{r3, lr}
   bda1e:	4b02      	ldr	r3, [pc, #8]	; (bda28 <hal_spi_begin+0xc>)
   bda20:	681b      	ldr	r3, [r3, #0]
   bda22:	681b      	ldr	r3, [r3, #0]
   bda24:	9301      	str	r3, [sp, #4]
   bda26:	bd08      	pop	{r3, pc}
   bda28:	00030230 	.word	0x00030230

000bda2c <hal_spi_set_clock_divider>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   bda2c:	b508      	push	{r3, lr}
   bda2e:	4b02      	ldr	r3, [pc, #8]	; (bda38 <hal_spi_set_clock_divider+0xc>)
   bda30:	681b      	ldr	r3, [r3, #0]
   bda32:	691b      	ldr	r3, [r3, #16]
   bda34:	9301      	str	r3, [sp, #4]
   bda36:	bd08      	pop	{r3, pc}
   bda38:	00030230 	.word	0x00030230

000bda3c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bda3c:	b508      	push	{r3, lr}
   bda3e:	4b02      	ldr	r3, [pc, #8]	; (bda48 <hal_spi_transfer+0xc>)
   bda40:	681b      	ldr	r3, [r3, #0]
   bda42:	695b      	ldr	r3, [r3, #20]
   bda44:	9301      	str	r3, [sp, #4]
   bda46:	bd08      	pop	{r3, pc}
   bda48:	00030230 	.word	0x00030230

000bda4c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bda4c:	b508      	push	{r3, lr}
   bda4e:	4b02      	ldr	r3, [pc, #8]	; (bda58 <hal_spi_init+0xc>)
   bda50:	681b      	ldr	r3, [r3, #0]
   bda52:	69db      	ldr	r3, [r3, #28]
   bda54:	9301      	str	r3, [sp, #4]
   bda56:	bd08      	pop	{r3, pc}
   bda58:	00030230 	.word	0x00030230

000bda5c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bda5c:	b508      	push	{r3, lr}
   bda5e:	4b02      	ldr	r3, [pc, #8]	; (bda68 <hal_spi_is_enabled+0xc>)
   bda60:	681b      	ldr	r3, [r3, #0]
   bda62:	6a1b      	ldr	r3, [r3, #32]
   bda64:	9301      	str	r3, [sp, #4]
   bda66:	bd08      	pop	{r3, pc}
   bda68:	00030230 	.word	0x00030230

000bda6c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bda6c:	b508      	push	{r3, lr}
   bda6e:	4b02      	ldr	r3, [pc, #8]	; (bda78 <hal_spi_info+0xc>)
   bda70:	681b      	ldr	r3, [r3, #0]
   bda72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bda74:	9301      	str	r3, [sp, #4]
   bda76:	bd08      	pop	{r3, pc}
   bda78:	00030230 	.word	0x00030230

000bda7c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   bda7c:	b508      	push	{r3, lr}
   bda7e:	4b02      	ldr	r3, [pc, #8]	; (bda88 <hal_spi_transfer_dma+0xc>)
   bda80:	681b      	ldr	r3, [r3, #0]
   bda82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bda84:	9301      	str	r3, [sp, #4]
   bda86:	bd08      	pop	{r3, pc}
   bda88:	00030230 	.word	0x00030230

000bda8c <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
   bda8c:	b508      	push	{r3, lr}
   bda8e:	4b02      	ldr	r3, [pc, #8]	; (bda98 <hal_spi_begin_ext+0xc>)
   bda90:	681b      	ldr	r3, [r3, #0]
   bda92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bda94:	9301      	str	r3, [sp, #4]
   bda96:	bd08      	pop	{r3, pc}
   bda98:	00030230 	.word	0x00030230

000bda9c <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bda9c:	b508      	push	{r3, lr}
   bda9e:	4b02      	ldr	r3, [pc, #8]	; (bdaa8 <hal_spi_transfer_dma_status+0xc>)
   bdaa0:	681b      	ldr	r3, [r3, #0]
   bdaa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bdaa4:	9301      	str	r3, [sp, #4]
   bdaa6:	bd08      	pop	{r3, pc}
   bdaa8:	00030230 	.word	0x00030230

000bdaac <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bdaac:	b508      	push	{r3, lr}
   bdaae:	4b02      	ldr	r3, [pc, #8]	; (bdab8 <hal_spi_set_settings+0xc>)
   bdab0:	681b      	ldr	r3, [r3, #0]
   bdab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bdab4:	9301      	str	r3, [sp, #4]
   bdab6:	bd08      	pop	{r3, pc}
   bdab8:	00030230 	.word	0x00030230

000bdabc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bdabc:	b508      	push	{r3, lr}
   bdabe:	4b02      	ldr	r3, [pc, #8]	; (bdac8 <hal_spi_acquire+0xc>)
   bdac0:	681b      	ldr	r3, [r3, #0]
   bdac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdac4:	9301      	str	r3, [sp, #4]
   bdac6:	bd08      	pop	{r3, pc}
   bdac8:	00030230 	.word	0x00030230

000bdacc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bdacc:	b508      	push	{r3, lr}
   bdace:	4b02      	ldr	r3, [pc, #8]	; (bdad8 <hal_spi_release+0xc>)
   bdad0:	681b      	ldr	r3, [r3, #0]
   bdad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdad4:	9301      	str	r3, [sp, #4]
   bdad6:	bd08      	pop	{r3, pc}
   bdad8:	00030230 	.word	0x00030230

000bdadc <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bdadc:	b508      	push	{r3, lr}
   bdade:	4b02      	ldr	r3, [pc, #8]	; (bdae8 <hal_usart_end+0xc>)
   bdae0:	681b      	ldr	r3, [r3, #0]
   bdae2:	689b      	ldr	r3, [r3, #8]
   bdae4:	9301      	str	r3, [sp, #4]
   bdae6:	bd08      	pop	{r3, pc}
   bdae8:	0003023c 	.word	0x0003023c

000bdaec <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bdaec:	b508      	push	{r3, lr}
   bdaee:	4b02      	ldr	r3, [pc, #8]	; (bdaf8 <hal_usart_write+0xc>)
   bdaf0:	681b      	ldr	r3, [r3, #0]
   bdaf2:	68db      	ldr	r3, [r3, #12]
   bdaf4:	9301      	str	r3, [sp, #4]
   bdaf6:	bd08      	pop	{r3, pc}
   bdaf8:	0003023c 	.word	0x0003023c

000bdafc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bdafc:	b508      	push	{r3, lr}
   bdafe:	4b02      	ldr	r3, [pc, #8]	; (bdb08 <hal_usart_available+0xc>)
   bdb00:	681b      	ldr	r3, [r3, #0]
   bdb02:	691b      	ldr	r3, [r3, #16]
   bdb04:	9301      	str	r3, [sp, #4]
   bdb06:	bd08      	pop	{r3, pc}
   bdb08:	0003023c 	.word	0x0003023c

000bdb0c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bdb0c:	b508      	push	{r3, lr}
   bdb0e:	4b02      	ldr	r3, [pc, #8]	; (bdb18 <hal_usart_read+0xc>)
   bdb10:	681b      	ldr	r3, [r3, #0]
   bdb12:	695b      	ldr	r3, [r3, #20]
   bdb14:	9301      	str	r3, [sp, #4]
   bdb16:	bd08      	pop	{r3, pc}
   bdb18:	0003023c 	.word	0x0003023c

000bdb1c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bdb1c:	b508      	push	{r3, lr}
   bdb1e:	4b02      	ldr	r3, [pc, #8]	; (bdb28 <hal_usart_peek+0xc>)
   bdb20:	681b      	ldr	r3, [r3, #0]
   bdb22:	699b      	ldr	r3, [r3, #24]
   bdb24:	9301      	str	r3, [sp, #4]
   bdb26:	bd08      	pop	{r3, pc}
   bdb28:	0003023c 	.word	0x0003023c

000bdb2c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bdb2c:	b508      	push	{r3, lr}
   bdb2e:	4b02      	ldr	r3, [pc, #8]	; (bdb38 <hal_usart_flush+0xc>)
   bdb30:	681b      	ldr	r3, [r3, #0]
   bdb32:	69db      	ldr	r3, [r3, #28]
   bdb34:	9301      	str	r3, [sp, #4]
   bdb36:	bd08      	pop	{r3, pc}
   bdb38:	0003023c 	.word	0x0003023c

000bdb3c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bdb3c:	b508      	push	{r3, lr}
   bdb3e:	4b02      	ldr	r3, [pc, #8]	; (bdb48 <hal_usart_is_enabled+0xc>)
   bdb40:	681b      	ldr	r3, [r3, #0]
   bdb42:	6a1b      	ldr	r3, [r3, #32]
   bdb44:	9301      	str	r3, [sp, #4]
   bdb46:	bd08      	pop	{r3, pc}
   bdb48:	0003023c 	.word	0x0003023c

000bdb4c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bdb4c:	b508      	push	{r3, lr}
   bdb4e:	4b02      	ldr	r3, [pc, #8]	; (bdb58 <hal_usart_available_data_for_write+0xc>)
   bdb50:	681b      	ldr	r3, [r3, #0]
   bdb52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdb54:	9301      	str	r3, [sp, #4]
   bdb56:	bd08      	pop	{r3, pc}
   bdb58:	0003023c 	.word	0x0003023c

000bdb5c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bdb5c:	b508      	push	{r3, lr}
   bdb5e:	4b02      	ldr	r3, [pc, #8]	; (bdb68 <hal_usart_begin_config+0xc>)
   bdb60:	681b      	ldr	r3, [r3, #0]
   bdb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdb64:	9301      	str	r3, [sp, #4]
   bdb66:	bd08      	pop	{r3, pc}
   bdb68:	0003023c 	.word	0x0003023c

000bdb6c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bdb6c:	b508      	push	{r3, lr}
   bdb6e:	4b02      	ldr	r3, [pc, #8]	; (bdb78 <hal_usart_init_ex+0xc>)
   bdb70:	681b      	ldr	r3, [r3, #0]
   bdb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdb74:	9301      	str	r3, [sp, #4]
   bdb76:	bd08      	pop	{r3, pc}
   bdb78:	0003023c 	.word	0x0003023c

000bdb7c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bdb7c:	b508      	push	{r3, lr}
   bdb7e:	4b02      	ldr	r3, [pc, #8]	; (bdb88 <HAL_USB_USART_Init+0xc>)
   bdb80:	681b      	ldr	r3, [r3, #0]
   bdb82:	681b      	ldr	r3, [r3, #0]
   bdb84:	9301      	str	r3, [sp, #4]
   bdb86:	bd08      	pop	{r3, pc}
   bdb88:	0003024c 	.word	0x0003024c

000bdb8c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bdb8c:	b508      	push	{r3, lr}
   bdb8e:	4b02      	ldr	r3, [pc, #8]	; (bdb98 <HAL_USB_USART_Begin+0xc>)
   bdb90:	681b      	ldr	r3, [r3, #0]
   bdb92:	685b      	ldr	r3, [r3, #4]
   bdb94:	9301      	str	r3, [sp, #4]
   bdb96:	bd08      	pop	{r3, pc}
   bdb98:	0003024c 	.word	0x0003024c

000bdb9c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bdb9c:	b508      	push	{r3, lr}
   bdb9e:	4b02      	ldr	r3, [pc, #8]	; (bdba8 <HAL_USB_USART_End+0xc>)
   bdba0:	681b      	ldr	r3, [r3, #0]
   bdba2:	689b      	ldr	r3, [r3, #8]
   bdba4:	9301      	str	r3, [sp, #4]
   bdba6:	bd08      	pop	{r3, pc}
   bdba8:	0003024c 	.word	0x0003024c

000bdbac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bdbac:	b508      	push	{r3, lr}
   bdbae:	4b02      	ldr	r3, [pc, #8]	; (bdbb8 <HAL_USB_USART_Available_Data+0xc>)
   bdbb0:	681b      	ldr	r3, [r3, #0]
   bdbb2:	691b      	ldr	r3, [r3, #16]
   bdbb4:	9301      	str	r3, [sp, #4]
   bdbb6:	bd08      	pop	{r3, pc}
   bdbb8:	0003024c 	.word	0x0003024c

000bdbbc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bdbbc:	b508      	push	{r3, lr}
   bdbbe:	4b02      	ldr	r3, [pc, #8]	; (bdbc8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bdbc0:	681b      	ldr	r3, [r3, #0]
   bdbc2:	695b      	ldr	r3, [r3, #20]
   bdbc4:	9301      	str	r3, [sp, #4]
   bdbc6:	bd08      	pop	{r3, pc}
   bdbc8:	0003024c 	.word	0x0003024c

000bdbcc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bdbcc:	b508      	push	{r3, lr}
   bdbce:	4b02      	ldr	r3, [pc, #8]	; (bdbd8 <HAL_USB_USART_Receive_Data+0xc>)
   bdbd0:	681b      	ldr	r3, [r3, #0]
   bdbd2:	699b      	ldr	r3, [r3, #24]
   bdbd4:	9301      	str	r3, [sp, #4]
   bdbd6:	bd08      	pop	{r3, pc}
   bdbd8:	0003024c 	.word	0x0003024c

000bdbdc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bdbdc:	b508      	push	{r3, lr}
   bdbde:	4b02      	ldr	r3, [pc, #8]	; (bdbe8 <HAL_USB_USART_Send_Data+0xc>)
   bdbe0:	681b      	ldr	r3, [r3, #0]
   bdbe2:	69db      	ldr	r3, [r3, #28]
   bdbe4:	9301      	str	r3, [sp, #4]
   bdbe6:	bd08      	pop	{r3, pc}
   bdbe8:	0003024c 	.word	0x0003024c

000bdbec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bdbec:	b508      	push	{r3, lr}
   bdbee:	4b02      	ldr	r3, [pc, #8]	; (bdbf8 <HAL_USB_USART_Flush_Data+0xc>)
   bdbf0:	681b      	ldr	r3, [r3, #0]
   bdbf2:	6a1b      	ldr	r3, [r3, #32]
   bdbf4:	9301      	str	r3, [sp, #4]
   bdbf6:	bd08      	pop	{r3, pc}
   bdbf8:	0003024c 	.word	0x0003024c

000bdbfc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bdbfc:	b508      	push	{r3, lr}
   bdbfe:	4b02      	ldr	r3, [pc, #8]	; (bdc08 <panic_+0xc>)
   bdc00:	681b      	ldr	r3, [r3, #0]
   bdc02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bdc04:	9301      	str	r3, [sp, #4]
   bdc06:	bd08      	pop	{r3, pc}
   bdc08:	00030260 	.word	0x00030260

000bdc0c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bdc0c:	b508      	push	{r3, lr}
   bdc0e:	4b02      	ldr	r3, [pc, #8]	; (bdc18 <log_message+0xc>)
   bdc10:	681b      	ldr	r3, [r3, #0]
   bdc12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bdc14:	9301      	str	r3, [sp, #4]
   bdc16:	bd08      	pop	{r3, pc}
   bdc18:	00030260 	.word	0x00030260

000bdc1c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bdc1c:	b508      	push	{r3, lr}
   bdc1e:	4b02      	ldr	r3, [pc, #8]	; (bdc28 <log_level_name+0xc>)
   bdc20:	681b      	ldr	r3, [r3, #0]
   bdc22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bdc24:	9301      	str	r3, [sp, #4]
   bdc26:	bd08      	pop	{r3, pc}
   bdc28:	00030260 	.word	0x00030260

000bdc2c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bdc2c:	b508      	push	{r3, lr}
   bdc2e:	4b02      	ldr	r3, [pc, #8]	; (bdc38 <log_set_callbacks+0xc>)
   bdc30:	681b      	ldr	r3, [r3, #0]
   bdc32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bdc34:	9301      	str	r3, [sp, #4]
   bdc36:	bd08      	pop	{r3, pc}
   bdc38:	00030260 	.word	0x00030260

000bdc3c <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   bdc3c:	b508      	push	{r3, lr}
   bdc3e:	4b03      	ldr	r3, [pc, #12]	; (bdc4c <led_set_status_active+0x10>)
   bdc40:	681b      	ldr	r3, [r3, #0]
   bdc42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bdc46:	9301      	str	r3, [sp, #4]
   bdc48:	bd08      	pop	{r3, pc}
   bdc4a:	0000      	.short	0x0000
   bdc4c:	00030260 	.word	0x00030260

000bdc50 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bdc50:	b508      	push	{r3, lr}
   bdc52:	4b02      	ldr	r3, [pc, #8]	; (bdc5c <system_mode+0xc>)
   bdc54:	681b      	ldr	r3, [r3, #0]
   bdc56:	681b      	ldr	r3, [r3, #0]
   bdc58:	9301      	str	r3, [sp, #4]
   bdc5a:	bd08      	pop	{r3, pc}
   bdc5c:	00030220 	.word	0x00030220

000bdc60 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bdc60:	b508      	push	{r3, lr}
   bdc62:	4b02      	ldr	r3, [pc, #8]	; (bdc6c <set_system_mode+0xc>)
   bdc64:	681b      	ldr	r3, [r3, #0]
   bdc66:	685b      	ldr	r3, [r3, #4]
   bdc68:	9301      	str	r3, [sp, #4]
   bdc6a:	bd08      	pop	{r3, pc}
   bdc6c:	00030220 	.word	0x00030220

000bdc70 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bdc70:	b508      	push	{r3, lr}
   bdc72:	4b02      	ldr	r3, [pc, #8]	; (bdc7c <system_delay_ms+0xc>)
   bdc74:	681b      	ldr	r3, [r3, #0]
   bdc76:	695b      	ldr	r3, [r3, #20]
   bdc78:	9301      	str	r3, [sp, #4]
   bdc7a:	bd08      	pop	{r3, pc}
   bdc7c:	00030220 	.word	0x00030220

000bdc80 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bdc80:	b508      	push	{r3, lr}
   bdc82:	4b02      	ldr	r3, [pc, #8]	; (bdc8c <application_thread_current+0xc>)
   bdc84:	681b      	ldr	r3, [r3, #0]
   bdc86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bdc88:	9301      	str	r3, [sp, #4]
   bdc8a:	bd08      	pop	{r3, pc}
   bdc8c:	00030220 	.word	0x00030220

000bdc90 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bdc90:	b508      	push	{r3, lr}
   bdc92:	4b02      	ldr	r3, [pc, #8]	; (bdc9c <application_thread_invoke+0xc>)
   bdc94:	681b      	ldr	r3, [r3, #0]
   bdc96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bdc98:	9301      	str	r3, [sp, #4]
   bdc9a:	bd08      	pop	{r3, pc}
   bdc9c:	00030220 	.word	0x00030220

000bdca0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bdca0:	b508      	push	{r3, lr}
   bdca2:	4b02      	ldr	r3, [pc, #8]	; (bdcac <system_thread_get_state+0xc>)
   bdca4:	681b      	ldr	r3, [r3, #0]
   bdca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdca8:	9301      	str	r3, [sp, #4]
   bdcaa:	bd08      	pop	{r3, pc}
   bdcac:	00030220 	.word	0x00030220

000bdcb0 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   bdcb0:	b508      	push	{r3, lr}
   bdcb2:	4b02      	ldr	r3, [pc, #8]	; (bdcbc <led_pattern_period+0xc>)
   bdcb4:	681b      	ldr	r3, [r3, #0]
   bdcb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bdcb8:	9301      	str	r3, [sp, #4]
   bdcba:	bd08      	pop	{r3, pc}
   bdcbc:	00030220 	.word	0x00030220

000bdcc0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bdcc0:	b508      	push	{r3, lr}
   bdcc2:	4b03      	ldr	r3, [pc, #12]	; (bdcd0 <system_ctrl_set_app_request_handler+0x10>)
   bdcc4:	681b      	ldr	r3, [r3, #0]
   bdcc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bdcca:	9301      	str	r3, [sp, #4]
   bdccc:	bd08      	pop	{r3, pc}
   bdcce:	0000      	.short	0x0000
   bdcd0:	00030220 	.word	0x00030220

000bdcd4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bdcd4:	b508      	push	{r3, lr}
   bdcd6:	4b03      	ldr	r3, [pc, #12]	; (bdce4 <system_ctrl_set_result+0x10>)
   bdcd8:	681b      	ldr	r3, [r3, #0]
   bdcda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bdcde:	9301      	str	r3, [sp, #4]
   bdce0:	bd08      	pop	{r3, pc}
   bdce2:	0000      	.short	0x0000
   bdce4:	00030220 	.word	0x00030220

000bdce8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bdce8:	b508      	push	{r3, lr}
   bdcea:	4b02      	ldr	r3, [pc, #8]	; (bdcf4 <spark_process+0xc>)
   bdcec:	681b      	ldr	r3, [r3, #0]
   bdcee:	689b      	ldr	r3, [r3, #8]
   bdcf0:	9301      	str	r3, [sp, #4]
   bdcf2:	bd08      	pop	{r3, pc}
   bdcf4:	00030244 	.word	0x00030244

000bdcf8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bdcf8:	b508      	push	{r3, lr}
   bdcfa:	4b02      	ldr	r3, [pc, #8]	; (bdd04 <spark_cloud_flag_connected+0xc>)
   bdcfc:	681b      	ldr	r3, [r3, #0]
   bdcfe:	695b      	ldr	r3, [r3, #20]
   bdd00:	9301      	str	r3, [sp, #4]
   bdd02:	bd08      	pop	{r3, pc}
   bdd04:	00030244 	.word	0x00030244

000bdd08 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bdd08:	b508      	push	{r3, lr}
   bdd0a:	4b02      	ldr	r3, [pc, #8]	; (bdd14 <spark_send_event+0xc>)
   bdd0c:	681b      	ldr	r3, [r3, #0]
   bdd0e:	6a1b      	ldr	r3, [r3, #32]
   bdd10:	9301      	str	r3, [sp, #4]
   bdd12:	bd08      	pop	{r3, pc}
   bdd14:	00030244 	.word	0x00030244

000bdd18 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   bdd18:	b508      	push	{r3, lr}
   bdd1a:	4b02      	ldr	r3, [pc, #8]	; (bdd24 <spark_subscribe+0xc>)
   bdd1c:	681b      	ldr	r3, [r3, #0]
   bdd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdd20:	9301      	str	r3, [sp, #4]
   bdd22:	bd08      	pop	{r3, pc}
   bdd24:	00030244 	.word	0x00030244

000bdd28 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bdd28:	b508      	push	{r3, lr}
   bdd2a:	4b02      	ldr	r3, [pc, #8]	; (bdd34 <spark_sync_time_pending+0xc>)
   bdd2c:	681b      	ldr	r3, [r3, #0]
   bdd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdd30:	9301      	str	r3, [sp, #4]
   bdd32:	bd08      	pop	{r3, pc}
   bdd34:	00030244 	.word	0x00030244

000bdd38 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bdd38:	b508      	push	{r3, lr}
   bdd3a:	4b02      	ldr	r3, [pc, #8]	; (bdd44 <spark_set_random_seed_from_cloud_handler+0xc>)
   bdd3c:	681b      	ldr	r3, [r3, #0]
   bdd3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bdd40:	9301      	str	r3, [sp, #4]
   bdd42:	bd08      	pop	{r3, pc}
   bdd44:	00030244 	.word	0x00030244

000bdd48 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bdd48:	b508      	push	{r3, lr}
   bdd4a:	4b02      	ldr	r3, [pc, #8]	; (bdd54 <network_connect+0xc>)
   bdd4c:	681b      	ldr	r3, [r3, #0]
   bdd4e:	685b      	ldr	r3, [r3, #4]
   bdd50:	9301      	str	r3, [sp, #4]
   bdd52:	bd08      	pop	{r3, pc}
   bdd54:	00030240 	.word	0x00030240

000bdd58 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bdd58:	b508      	push	{r3, lr}
   bdd5a:	4b02      	ldr	r3, [pc, #8]	; (bdd64 <network_connecting+0xc>)
   bdd5c:	681b      	ldr	r3, [r3, #0]
   bdd5e:	689b      	ldr	r3, [r3, #8]
   bdd60:	9301      	str	r3, [sp, #4]
   bdd62:	bd08      	pop	{r3, pc}
   bdd64:	00030240 	.word	0x00030240

000bdd68 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bdd68:	b508      	push	{r3, lr}
   bdd6a:	4b02      	ldr	r3, [pc, #8]	; (bdd74 <network_disconnect+0xc>)
   bdd6c:	681b      	ldr	r3, [r3, #0]
   bdd6e:	68db      	ldr	r3, [r3, #12]
   bdd70:	9301      	str	r3, [sp, #4]
   bdd72:	bd08      	pop	{r3, pc}
   bdd74:	00030240 	.word	0x00030240

000bdd78 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bdd78:	b508      	push	{r3, lr}
   bdd7a:	4b02      	ldr	r3, [pc, #8]	; (bdd84 <network_ready+0xc>)
   bdd7c:	681b      	ldr	r3, [r3, #0]
   bdd7e:	691b      	ldr	r3, [r3, #16]
   bdd80:	9301      	str	r3, [sp, #4]
   bdd82:	bd08      	pop	{r3, pc}
   bdd84:	00030240 	.word	0x00030240

000bdd88 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bdd88:	b508      	push	{r3, lr}
   bdd8a:	4b02      	ldr	r3, [pc, #8]	; (bdd94 <network_on+0xc>)
   bdd8c:	681b      	ldr	r3, [r3, #0]
   bdd8e:	695b      	ldr	r3, [r3, #20]
   bdd90:	9301      	str	r3, [sp, #4]
   bdd92:	bd08      	pop	{r3, pc}
   bdd94:	00030240 	.word	0x00030240

000bdd98 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bdd98:	b508      	push	{r3, lr}
   bdd9a:	4b02      	ldr	r3, [pc, #8]	; (bdda4 <network_off+0xc>)
   bdd9c:	681b      	ldr	r3, [r3, #0]
   bdd9e:	699b      	ldr	r3, [r3, #24]
   bdda0:	9301      	str	r3, [sp, #4]
   bdda2:	bd08      	pop	{r3, pc}
   bdda4:	00030240 	.word	0x00030240

000bdda8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bdda8:	b508      	push	{r3, lr}
   bddaa:	4b02      	ldr	r3, [pc, #8]	; (bddb4 <network_listen+0xc>)
   bddac:	681b      	ldr	r3, [r3, #0]
   bddae:	69db      	ldr	r3, [r3, #28]
   bddb0:	9301      	str	r3, [sp, #4]
   bddb2:	bd08      	pop	{r3, pc}
   bddb4:	00030240 	.word	0x00030240

000bddb8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bddb8:	b508      	push	{r3, lr}
   bddba:	4b02      	ldr	r3, [pc, #8]	; (bddc4 <network_listening+0xc>)
   bddbc:	681b      	ldr	r3, [r3, #0]
   bddbe:	6a1b      	ldr	r3, [r3, #32]
   bddc0:	9301      	str	r3, [sp, #4]
   bddc2:	bd08      	pop	{r3, pc}
   bddc4:	00030240 	.word	0x00030240

000bddc8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bddc8:	b508      	push	{r3, lr}
   bddca:	4b02      	ldr	r3, [pc, #8]	; (bddd4 <network_set_listen_timeout+0xc>)
   bddcc:	681b      	ldr	r3, [r3, #0]
   bddce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bddd0:	9301      	str	r3, [sp, #4]
   bddd2:	bd08      	pop	{r3, pc}
   bddd4:	00030240 	.word	0x00030240

000bddd8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bddd8:	b508      	push	{r3, lr}
   bddda:	4b02      	ldr	r3, [pc, #8]	; (bdde4 <network_get_listen_timeout+0xc>)
   bdddc:	681b      	ldr	r3, [r3, #0]
   bddde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bdde0:	9301      	str	r3, [sp, #4]
   bdde2:	bd08      	pop	{r3, pc}
   bdde4:	00030240 	.word	0x00030240

000bdde8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bdde8:	b508      	push	{r3, lr}
   bddea:	4b02      	ldr	r3, [pc, #8]	; (bddf4 <network_is_on+0xc>)
   bddec:	681b      	ldr	r3, [r3, #0]
   bddee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bddf0:	9301      	str	r3, [sp, #4]
   bddf2:	bd08      	pop	{r3, pc}
   bddf4:	00030240 	.word	0x00030240

000bddf8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bddf8:	b508      	push	{r3, lr}
   bddfa:	4b02      	ldr	r3, [pc, #8]	; (bde04 <network_is_off+0xc>)
   bddfc:	681b      	ldr	r3, [r3, #0]
   bddfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bde00:	9301      	str	r3, [sp, #4]
   bde02:	bd08      	pop	{r3, pc}
   bde04:	00030240 	.word	0x00030240

000bde08 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bde08:	b508      	push	{r3, lr}
   bde0a:	4b02      	ldr	r3, [pc, #8]	; (bde14 <malloc+0xc>)
   bde0c:	681b      	ldr	r3, [r3, #0]
   bde0e:	681b      	ldr	r3, [r3, #0]
   bde10:	9301      	str	r3, [sp, #4]
   bde12:	bd08      	pop	{r3, pc}
   bde14:	0003021c 	.word	0x0003021c

000bde18 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bde18:	b508      	push	{r3, lr}
   bde1a:	4b02      	ldr	r3, [pc, #8]	; (bde24 <free+0xc>)
   bde1c:	681b      	ldr	r3, [r3, #0]
   bde1e:	685b      	ldr	r3, [r3, #4]
   bde20:	9301      	str	r3, [sp, #4]
   bde22:	bd08      	pop	{r3, pc}
   bde24:	0003021c 	.word	0x0003021c

000bde28 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bde28:	b508      	push	{r3, lr}
   bde2a:	4b02      	ldr	r3, [pc, #8]	; (bde34 <realloc+0xc>)
   bde2c:	681b      	ldr	r3, [r3, #0]
   bde2e:	689b      	ldr	r3, [r3, #8]
   bde30:	9301      	str	r3, [sp, #4]
   bde32:	bd08      	pop	{r3, pc}
   bde34:	0003021c 	.word	0x0003021c

000bde38 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   bde38:	b508      	push	{r3, lr}
   bde3a:	4b02      	ldr	r3, [pc, #8]	; (bde44 <sprintf+0xc>)
   bde3c:	681b      	ldr	r3, [r3, #0]
   bde3e:	68db      	ldr	r3, [r3, #12]
   bde40:	9301      	str	r3, [sp, #4]
   bde42:	bd08      	pop	{r3, pc}
   bde44:	0003021c 	.word	0x0003021c

000bde48 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bde48:	b508      	push	{r3, lr}
   bde4a:	4b02      	ldr	r3, [pc, #8]	; (bde54 <sscanf+0xc>)
   bde4c:	681b      	ldr	r3, [r3, #0]
   bde4e:	695b      	ldr	r3, [r3, #20]
   bde50:	9301      	str	r3, [sp, #4]
   bde52:	bd08      	pop	{r3, pc}
   bde54:	0003021c 	.word	0x0003021c

000bde58 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bde58:	b508      	push	{r3, lr}
   bde5a:	4b02      	ldr	r3, [pc, #8]	; (bde64 <snprintf+0xc>)
   bde5c:	681b      	ldr	r3, [r3, #0]
   bde5e:	69db      	ldr	r3, [r3, #28]
   bde60:	9301      	str	r3, [sp, #4]
   bde62:	bd08      	pop	{r3, pc}
   bde64:	0003021c 	.word	0x0003021c

000bde68 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bde68:	b508      	push	{r3, lr}
   bde6a:	4b02      	ldr	r3, [pc, #8]	; (bde74 <vsnprintf+0xc>)
   bde6c:	681b      	ldr	r3, [r3, #0]
   bde6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bde70:	9301      	str	r3, [sp, #4]
   bde72:	bd08      	pop	{r3, pc}
   bde74:	0003021c 	.word	0x0003021c

000bde78 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bde78:	b508      	push	{r3, lr}
   bde7a:	4b02      	ldr	r3, [pc, #8]	; (bde84 <abort+0xc>)
   bde7c:	681b      	ldr	r3, [r3, #0]
   bde7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bde80:	9301      	str	r3, [sp, #4]
   bde82:	bd08      	pop	{r3, pc}
   bde84:	0003021c 	.word	0x0003021c

000bde88 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bde88:	b508      	push	{r3, lr}
   bde8a:	4b02      	ldr	r3, [pc, #8]	; (bde94 <_malloc_r+0xc>)
   bde8c:	681b      	ldr	r3, [r3, #0]
   bde8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bde90:	9301      	str	r3, [sp, #4]
   bde92:	bd08      	pop	{r3, pc}
   bde94:	0003021c 	.word	0x0003021c

000bde98 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bde98:	b508      	push	{r3, lr}
   bde9a:	4b02      	ldr	r3, [pc, #8]	; (bdea4 <__errno+0xc>)
   bde9c:	681b      	ldr	r3, [r3, #0]
   bde9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bdea0:	9301      	str	r3, [sp, #4]
   bdea2:	bd08      	pop	{r3, pc}
   bdea4:	0003021c 	.word	0x0003021c

000bdea8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bdea8:	b508      	push	{r3, lr}
   bdeaa:	4b02      	ldr	r3, [pc, #8]	; (bdeb4 <__assert_func+0xc>)
   bdeac:	681b      	ldr	r3, [r3, #0]
   bdeae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdeb0:	9301      	str	r3, [sp, #4]
   bdeb2:	bd08      	pop	{r3, pc}
   bdeb4:	0003021c 	.word	0x0003021c

000bdeb8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bdeb8:	b508      	push	{r3, lr}
   bdeba:	4b02      	ldr	r3, [pc, #8]	; (bdec4 <newlib_impure_ptr_callback+0xc>)
   bdebc:	681b      	ldr	r3, [r3, #0]
   bdebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdec0:	9301      	str	r3, [sp, #4]
   bdec2:	bd08      	pop	{r3, pc}
   bdec4:	0003021c 	.word	0x0003021c

000bdec8 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bdec8:	b508      	push	{r3, lr}
   bdeca:	4b02      	ldr	r3, [pc, #8]	; (bded4 <localtime_r+0xc>)
   bdecc:	681b      	ldr	r3, [r3, #0]
   bdece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bded0:	9301      	str	r3, [sp, #4]
   bded2:	bd08      	pop	{r3, pc}
   bded4:	0003021c 	.word	0x0003021c

000bded8 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   bded8:	428a      	cmp	r2, r1
{
   bdeda:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   bdedc:	d007      	beq.n	bdeee <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   bdede:	1a44      	subs	r4, r0, r1
   bdee0:	9802      	ldr	r0, [sp, #8]
   bdee2:	1ac0      	subs	r0, r0, r3
   bdee4:	4344      	muls	r4, r0
   bdee6:	1a50      	subs	r0, r2, r1
   bdee8:	fb94 f0f0 	sdiv	r0, r4, r0
   bdeec:	4418      	add	r0, r3
}
   bdeee:	bd10      	pop	{r4, pc}

000bdef0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bdef0:	2100      	movs	r1, #0
   bdef2:	f7ff bebd 	b.w	bdc70 <system_delay_ms>

000bdef6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bdef6:	b510      	push	{r4, lr}
      if (_M_empty())
   bdef8:	6883      	ldr	r3, [r0, #8]
   bdefa:	4604      	mov	r4, r0
   bdefc:	b90b      	cbnz	r3, bdf02 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bdefe:	f003 fe99 	bl	c1c34 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bdf02:	68c3      	ldr	r3, [r0, #12]
   bdf04:	4798      	blx	r3
      if (_M_manager)
   bdf06:	68a3      	ldr	r3, [r4, #8]
   bdf08:	b11b      	cbz	r3, bdf12 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bdf0a:	2203      	movs	r2, #3
   bdf0c:	4621      	mov	r1, r4
   bdf0e:	4620      	mov	r0, r4
   bdf10:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bdf12:	4620      	mov	r0, r4
   bdf14:	2110      	movs	r1, #16
}
   bdf16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bdf1a:	f7f6 b8c2 	b.w	b40a2 <_ZdlPvj>

000bdf1e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bdf1e:	4770      	bx	lr

000bdf20 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   bdf20:	4770      	bx	lr

000bdf22 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   bdf22:	4770      	bx	lr

000bdf24 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bdf24:	4770      	bx	lr
	...

000bdf28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bdf28:	4b06      	ldr	r3, [pc, #24]	; (bdf44 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bdf2a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bdf2c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   bdf2e:	f100 040c 	add.w	r4, r0, #12
	    ||
   bdf32:	d005      	beq.n	bdf40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bdf34:	4608      	mov	r0, r1
   bdf36:	f003 fe81 	bl	c1c3c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bdf3a:	2800      	cmp	r0, #0
   bdf3c:	bf08      	it	eq
   bdf3e:	2400      	moveq	r4, #0
      }
   bdf40:	4620      	mov	r0, r4
   bdf42:	bd10      	pop	{r4, pc}
   bdf44:	000c7880 	.word	0x000c7880

000bdf48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bdf48:	4b06      	ldr	r3, [pc, #24]	; (bdf64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bdf4a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bdf4c:	b510      	push	{r4, lr}
   bdf4e:	f100 040c 	add.w	r4, r0, #12
	    ||
   bdf52:	d005      	beq.n	bdf60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bdf54:	4608      	mov	r0, r1
   bdf56:	f003 fe71 	bl	c1c3c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bdf5a:	2800      	cmp	r0, #0
   bdf5c:	bf08      	it	eq
   bdf5e:	2400      	moveq	r4, #0
      }
   bdf60:	4620      	mov	r0, r4
   bdf62:	bd10      	pop	{r4, pc}
   bdf64:	000c7880 	.word	0x000c7880

000bdf68 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bdf68:	4b06      	ldr	r3, [pc, #24]	; (bdf84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bdf6a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bdf6c:	b510      	push	{r4, lr}
   bdf6e:	f100 040c 	add.w	r4, r0, #12
	    ||
   bdf72:	d005      	beq.n	bdf80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bdf74:	4608      	mov	r0, r1
   bdf76:	f003 fe61 	bl	c1c3c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bdf7a:	2800      	cmp	r0, #0
   bdf7c:	bf08      	it	eq
   bdf7e:	2400      	moveq	r4, #0
      }
   bdf80:	4620      	mov	r0, r4
   bdf82:	bd10      	pop	{r4, pc}
   bdf84:	000c7880 	.word	0x000c7880

000bdf88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bdf88:	b510      	push	{r4, lr}
   bdf8a:	2168      	movs	r1, #104	; 0x68
   bdf8c:	4604      	mov	r4, r0
   bdf8e:	f7f6 f888 	bl	b40a2 <_ZdlPvj>
   bdf92:	4620      	mov	r0, r4
   bdf94:	bd10      	pop	{r4, pc}

000bdf96 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bdf96:	b510      	push	{r4, lr}
   bdf98:	2128      	movs	r1, #40	; 0x28
   bdf9a:	4604      	mov	r4, r0
   bdf9c:	f7f6 f881 	bl	b40a2 <_ZdlPvj>
   bdfa0:	4620      	mov	r0, r4
   bdfa2:	bd10      	pop	{r4, pc}

000bdfa4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bdfa4:	b510      	push	{r4, lr}
   bdfa6:	2130      	movs	r1, #48	; 0x30
   bdfa8:	4604      	mov	r4, r0
   bdfaa:	f7f6 f87a 	bl	b40a2 <_ZdlPvj>
   bdfae:	4620      	mov	r0, r4
   bdfb0:	bd10      	pop	{r4, pc}

000bdfb2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   bdfb2:	2168      	movs	r1, #104	; 0x68
   bdfb4:	f7f6 b875 	b.w	b40a2 <_ZdlPvj>

000bdfb8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bdfb8:	2128      	movs	r1, #40	; 0x28
   bdfba:	f7f6 b872 	b.w	b40a2 <_ZdlPvj>

000bdfbe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bdfbe:	2130      	movs	r1, #48	; 0x30
   bdfc0:	f7f6 b86f 	b.w	b40a2 <_ZdlPvj>

000bdfc4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   bdfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bdfc6:	2500      	movs	r5, #0
   bdfc8:	1cec      	adds	r4, r5, #3
   bdfca:	428c      	cmp	r4, r1
   bdfcc:	d80d      	bhi.n	bdfea <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   bdfce:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   bdfd0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   bdfd2:	5d87      	ldrb	r7, [r0, r6]
   bdfd4:	4297      	cmp	r7, r2
   bdfd6:	d105      	bne.n	bdfe4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   bdfd8:	4426      	add	r6, r4
   bdfda:	42b1      	cmp	r1, r6
   bdfdc:	d305      	bcc.n	bdfea <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   bdfde:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   bdfe0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   bdfe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   bdfe4:	3401      	adds	r4, #1
   bdfe6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bdfe8:	e7ee      	b.n	bdfc8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   bdfea:	2000      	movs	r0, #0
   bdfec:	e7f9      	b.n	bdfe2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000bdff0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   bdff0:	4a02      	ldr	r2, [pc, #8]	; (bdffc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   bdff2:	4903      	ldr	r1, [pc, #12]	; (be000 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   bdff4:	200a      	movs	r0, #10
   bdff6:	f7ff be01 	b.w	bdbfc <panic_>
   bdffa:	bf00      	nop
   bdffc:	000bd83d 	.word	0x000bd83d
   be000:	000c76dd 	.word	0x000c76dd

000be004 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   be004:	b430      	push	{r4, r5}
   be006:	460d      	mov	r5, r1
   be008:	4611      	mov	r1, r2
   be00a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   be00c:	6803      	ldr	r3, [r0, #0]
   be00e:	6809      	ldr	r1, [r1, #0]
   be010:	6828      	ldr	r0, [r5, #0]
   be012:	e9d3 4300 	ldrd	r4, r3, [r3]
   be016:	46a4      	mov	ip, r4
      }
   be018:	bc30      	pop	{r4, r5}
   be01a:	4760      	bx	ip

000be01c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   be01c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   be01e:	b538      	push	{r3, r4, r5, lr}
   be020:	4604      	mov	r4, r0
	switch (__op)
   be022:	d102      	bne.n	be02a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   be024:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   be026:	6023      	str	r3, [r4, #0]
	}
   be028:	e003      	b.n	be032 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   be02a:	2a02      	cmp	r2, #2
   be02c:	d003      	beq.n	be036 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   be02e:	2a03      	cmp	r2, #3
   be030:	d00d      	beq.n	be04e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   be032:	2000      	movs	r0, #0
   be034:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   be036:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   be038:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   be03a:	f7f6 f82c 	bl	b4096 <_Znwj>
   be03e:	4603      	mov	r3, r0
   be040:	2800      	cmp	r0, #0
   be042:	d0f0      	beq.n	be026 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   be044:	e895 0003 	ldmia.w	r5, {r0, r1}
   be048:	e883 0003 	stmia.w	r3, {r0, r1}
   be04c:	e7eb      	b.n	be026 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   be04e:	6800      	ldr	r0, [r0, #0]
   be050:	2800      	cmp	r0, #0
   be052:	d0ee      	beq.n	be032 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   be054:	2108      	movs	r1, #8
   be056:	f7f6 f824 	bl	b40a2 <_ZdlPvj>
   be05a:	e7ea      	b.n	be032 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000be05c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   be05c:	b510      	push	{r4, lr}
   be05e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   be060:	3058      	adds	r0, #88	; 0x58
   be062:	f7f6 f9fb 	bl	b445c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   be066:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   be06a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be06e:	f003 b9a5 	b.w	c13bc <_ZN6StringD1Ev>

000be072 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   be072:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   be074:	6843      	ldr	r3, [r0, #4]
   be076:	3b01      	subs	r3, #1
    {
   be078:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   be07a:	6043      	str	r3, [r0, #4]
   be07c:	b963      	cbnz	r3, be098 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   be07e:	6803      	ldr	r3, [r0, #0]
   be080:	689b      	ldr	r3, [r3, #8]
   be082:	4798      	blx	r3
          if (--_M_weak_count == 0)
   be084:	68a3      	ldr	r3, [r4, #8]
   be086:	3b01      	subs	r3, #1
   be088:	60a3      	str	r3, [r4, #8]
   be08a:	b92b      	cbnz	r3, be098 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   be08c:	6823      	ldr	r3, [r4, #0]
   be08e:	4620      	mov	r0, r4
   be090:	68db      	ldr	r3, [r3, #12]
    }
   be092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   be096:	4718      	bx	r3
    }
   be098:	bd10      	pop	{r4, pc}

000be09a <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   be09a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   be09e:	b2da      	uxtb	r2, r3
   be0a0:	2a09      	cmp	r2, #9
   be0a2:	d801      	bhi.n	be0a8 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   be0a4:	4618      	mov	r0, r3
   be0a6:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   be0a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   be0ac:	2b05      	cmp	r3, #5
   be0ae:	d801      	bhi.n	be0b4 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   be0b0:	3857      	subs	r0, #87	; 0x57
   be0b2:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   be0b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   be0b8:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   be0ba:	bf94      	ite	ls
   be0bc:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   be0be:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   be0c2:	4770      	bx	lr

000be0c4 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   be0c4:	b510      	push	{r4, lr}
            locked_(false) {
   be0c6:	2300      	movs	r3, #0
   be0c8:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   be0ca:	4b04      	ldr	r3, [pc, #16]	; (be0dc <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   be0cc:	4604      	mov	r4, r0
   be0ce:	6818      	ldr	r0, [r3, #0]
   be0d0:	f7ff fb94 	bl	bd7fc <os_mutex_recursive_lock>
        locked_ = true;
   be0d4:	2301      	movs	r3, #1
   be0d6:	7023      	strb	r3, [r4, #0]
    }
   be0d8:	4620      	mov	r0, r4
   be0da:	bd10      	pop	{r4, pc}
   be0dc:	2003e624 	.word	0x2003e624

000be0e0 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   be0e0:	b510      	push	{r4, lr}
        if (locked_) {
   be0e2:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   be0e4:	4604      	mov	r4, r0
        if (locked_) {
   be0e6:	b11b      	cbz	r3, be0f0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   be0e8:	4b02      	ldr	r3, [pc, #8]	; (be0f4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   be0ea:	6818      	ldr	r0, [r3, #0]
   be0ec:	f7ff fb8e 	bl	bd80c <os_mutex_recursive_unlock>
    }
   be0f0:	4620      	mov	r0, r4
   be0f2:	bd10      	pop	{r4, pc}
   be0f4:	2003e624 	.word	0x2003e624

000be0f8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   be0f8:	b082      	sub	sp, #8
   be0fa:	4603      	mov	r3, r0
    address_ = addr;
   be0fc:	6808      	ldr	r0, [r1, #0]
   be0fe:	6849      	ldr	r1, [r1, #4]
   be100:	466a      	mov	r2, sp
   be102:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   be104:	466a      	mov	r2, sp
   be106:	ca03      	ldmia	r2!, {r0, r1}
   be108:	6018      	str	r0, [r3, #0]
}
   be10a:	4618      	mov	r0, r3
    address_ = addr.address_;
   be10c:	6059      	str	r1, [r3, #4]
}
   be10e:	b002      	add	sp, #8
   be110:	4770      	bx	lr

000be112 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   be112:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   be114:	7982      	ldrb	r2, [r0, #6]
   be116:	798b      	ldrb	r3, [r1, #6]
   be118:	429a      	cmp	r2, r3
   be11a:	d106      	bne.n	be12a <_ZNK8particle10BleAddresseqERKS0_+0x18>
   be11c:	2206      	movs	r2, #6
   be11e:	f005 ff77 	bl	c4010 <memcmp>
   be122:	fab0 f080 	clz	r0, r0
   be126:	0940      	lsrs	r0, r0, #5
}
   be128:	bd08      	pop	{r3, pc}
    return false;
   be12a:	2000      	movs	r0, #0
   be12c:	e7fc      	b.n	be128 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000be12e <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   be12e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   be132:	6003      	str	r3, [r0, #0]
   be134:	8083      	strh	r3, [r0, #4]
}
   be136:	2000      	movs	r0, #0
   be138:	4770      	bx	lr

000be13a <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   be13a:	b508      	push	{r3, lr}
   be13c:	4602      	mov	r2, r0
        : address_{} {
   be13e:	2100      	movs	r1, #0
   be140:	6001      	str	r1, [r0, #0]
   be142:	6041      	str	r1, [r0, #4]
    clear();
   be144:	f7ff fff3 	bl	be12e <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   be148:	7191      	strb	r1, [r2, #6]
}
   be14a:	4610      	mov	r0, r2
   be14c:	bd08      	pop	{r3, pc}
	...

000be150 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   be150:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   be152:	2301      	movs	r3, #1
   be154:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be156:	4b05      	ldr	r3, [pc, #20]	; (be16c <_ZN8particle7BleUuidC1Ev+0x1c>)
   be158:	4602      	mov	r2, r0
   be15a:	f103 0110 	add.w	r1, r3, #16
   be15e:	f853 4b04 	ldr.w	r4, [r3], #4
   be162:	f842 4b04 	str.w	r4, [r2], #4
   be166:	428b      	cmp	r3, r1
   be168:	d1f9      	bne.n	be15e <_ZN8particle7BleUuidC1Ev+0xe>
}
   be16a:	bd10      	pop	{r4, pc}
   be16c:	000c788e 	.word	0x000c788e

000be170 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   be170:	b510      	push	{r4, lr}
    if (uuid128) {
   be172:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   be174:	4604      	mov	r4, r0
    if (uuid128) {
   be176:	b1b1      	cbz	r1, be1a6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   be178:	2a01      	cmp	r2, #1
   be17a:	f101 0210 	add.w	r2, r1, #16
   be17e:	d10a      	bne.n	be196 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   be180:	4601      	mov	r1, r0
   be182:	f853 0b04 	ldr.w	r0, [r3], #4
   be186:	f841 0b04 	str.w	r0, [r1], #4
   be18a:	4293      	cmp	r3, r2
   be18c:	d1f9      	bne.n	be182 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   be18e:	2301      	movs	r3, #1
   be190:	6123      	str	r3, [r4, #16]
}
   be192:	4620      	mov	r0, r4
   be194:	bd10      	pop	{r4, pc}
   be196:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   be198:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   be19c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   be1a0:	429a      	cmp	r2, r3
   be1a2:	d1f9      	bne.n	be198 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   be1a4:	e7f3      	b.n	be18e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   be1a6:	2210      	movs	r2, #16
   be1a8:	f005 ff6a 	bl	c4080 <memset>
   be1ac:	e7f1      	b.n	be192 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000be1ae <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   be1ae:	b538      	push	{r3, r4, r5, lr}
   be1b0:	4604      	mov	r4, r0
   be1b2:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   be1b4:	461a      	mov	r2, r3
   be1b6:	f7ff ffdb 	bl	be170 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   be1ba:	81a5      	strh	r5, [r4, #12]
}
   be1bc:	4620      	mov	r0, r4
   be1be:	bd38      	pop	{r3, r4, r5, pc}

000be1c0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   be1c0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   be1c2:	6902      	ldr	r2, [r0, #16]
   be1c4:	b922      	cbnz	r2, be1d0 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   be1c6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be1c8:	3800      	subs	r0, #0
   be1ca:	bf18      	it	ne
   be1cc:	2001      	movne	r0, #1
}
   be1ce:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be1d0:	4902      	ldr	r1, [pc, #8]	; (be1dc <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   be1d2:	2210      	movs	r2, #16
   be1d4:	f005 ff1c 	bl	c4010 <memcmp>
   be1d8:	e7f6      	b.n	be1c8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   be1da:	bf00      	nop
   be1dc:	000c78ae 	.word	0x000c78ae

000be1e0 <_ZNK8particle7BleUuid4typeEv>:
}
   be1e0:	6900      	ldr	r0, [r0, #16]
   be1e2:	4770      	bx	lr

000be1e4 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   be1e4:	b538      	push	{r3, r4, r5, lr}
   be1e6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   be1e8:	2214      	movs	r2, #20
   be1ea:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   be1ec:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   be1ee:	f005 ff47 	bl	c4080 <memset>
    if (type_ == BleUuidType::SHORT) {
   be1f2:	6923      	ldr	r3, [r4, #16]
   be1f4:	b91b      	cbnz	r3, be1fe <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   be1f6:	89a3      	ldrh	r3, [r4, #12]
   be1f8:	802b      	strh	r3, [r5, #0]
}
   be1fa:	4628      	mov	r0, r5
   be1fc:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   be1fe:	2301      	movs	r3, #1
   be200:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   be202:	4621      	mov	r1, r4
   be204:	462b      	mov	r3, r5
   be206:	f104 0210 	add.w	r2, r4, #16
   be20a:	f851 0b04 	ldr.w	r0, [r1], #4
   be20e:	f843 0b04 	str.w	r0, [r3], #4
   be212:	4291      	cmp	r1, r2
   be214:	d1f9      	bne.n	be20a <_ZN8particle7BleUuid7halUUIDEv+0x26>
   be216:	e7f0      	b.n	be1fa <_ZN8particle7BleUuid7halUUIDEv+0x16>

000be218 <_ZNK8particle7BleUuid7shortedEv>:
}
   be218:	8980      	ldrh	r0, [r0, #12]
   be21a:	4770      	bx	lr

000be21c <_ZNK8particle7BleUuid8rawBytesEv>:
}
   be21c:	4770      	bx	lr

000be21e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   be21e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   be220:	6902      	ldr	r2, [r0, #16]
   be222:	690b      	ldr	r3, [r1, #16]
   be224:	429a      	cmp	r2, r3
   be226:	d106      	bne.n	be236 <_ZNK8particle7BleUuideqERKS0_+0x18>
   be228:	2210      	movs	r2, #16
   be22a:	f005 fef1 	bl	c4010 <memcmp>
   be22e:	fab0 f080 	clz	r0, r0
   be232:	0940      	lsrs	r0, r0, #5
}
   be234:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   be236:	2000      	movs	r0, #0
   be238:	e7fc      	b.n	be234 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000be23c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   be23c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   be23e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   be242:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be244:	4b34      	ldr	r3, [pc, #208]	; (be318 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   be246:	460c      	mov	r4, r1
   be248:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be24a:	4602      	mov	r2, r0
   be24c:	f103 0110 	add.w	r1, r3, #16
   be250:	f853 0b04 	ldr.w	r0, [r3], #4
   be254:	f842 0b04 	str.w	r0, [r2], #4
   be258:	428b      	cmp	r3, r1
   be25a:	d1f9      	bne.n	be250 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   be25c:	b344      	cbz	r4, be2b0 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   be25e:	2124      	movs	r1, #36	; 0x24
   be260:	4620      	mov	r0, r4
   be262:	f005 ffda 	bl	c421a <strnlen>
   be266:	2804      	cmp	r0, #4
   be268:	f04f 0500 	mov.w	r5, #0
   be26c:	d123      	bne.n	be2b6 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   be26e:	f8ad 5004 	strh.w	r5, [sp, #4]
   be272:	af01      	add	r7, sp, #4
   be274:	1ca5      	adds	r5, r4, #2
   be276:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   be278:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   be27c:	f7ff ff0d 	bl	be09a <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   be280:	f1b0 0800 	subs.w	r8, r0, #0
   be284:	db12      	blt.n	be2ac <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   be286:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   be28a:	f7ff ff06 	bl	be09a <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   be28e:	2800      	cmp	r0, #0
   be290:	db0c      	blt.n	be2ac <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   be292:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   be294:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   be298:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   be29a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   be29e:	d1eb      	bne.n	be278 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   be2a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   be2a4:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   be2a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   be2aa:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   be2ac:	2300      	movs	r3, #0
   be2ae:	6133      	str	r3, [r6, #16]
}
   be2b0:	b002      	add	sp, #8
   be2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   be2b6:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be2ba:	2124      	movs	r1, #36	; 0x24
   be2bc:	4620      	mov	r0, r4
   be2be:	f005 ffac 	bl	c421a <strnlen>
   be2c2:	42a8      	cmp	r0, r5
   be2c4:	d807      	bhi.n	be2d6 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   be2c6:	4642      	mov	r2, r8
   be2c8:	2100      	movs	r1, #0
   be2ca:	4630      	mov	r0, r6
}
   be2cc:	b002      	add	sp, #8
   be2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   be2d2:	f005 bed5 	b.w	c4080 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be2d6:	f1b8 0f00 	cmp.w	r8, #0
   be2da:	d0e9      	beq.n	be2b0 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   be2dc:	5d60      	ldrb	r0, [r4, r5]
   be2de:	f7ff fedc 	bl	be09a <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   be2e2:	0603      	lsls	r3, r0, #24
   be2e4:	d415      	bmi.n	be312 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   be2e6:	0100      	lsls	r0, r0, #4
   be2e8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   be2ec:	b2c7      	uxtb	r7, r0
   be2ee:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   be2f2:	2124      	movs	r1, #36	; 0x24
   be2f4:	4620      	mov	r0, r4
   be2f6:	f005 ff90 	bl	c421a <strnlen>
   be2fa:	3501      	adds	r5, #1
   be2fc:	42a8      	cmp	r0, r5
   be2fe:	d908      	bls.n	be312 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   be300:	5d60      	ldrb	r0, [r4, r5]
   be302:	f7ff feca 	bl	be09a <_ZN8particle11hexToNibbleEc>
   be306:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   be308:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   be30a:	bfa4      	itt	ge
   be30c:	4338      	orrge	r0, r7
   be30e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be312:	3501      	adds	r5, #1
   be314:	e7d1      	b.n	be2ba <_ZN8particle7BleUuid9constructEPKc+0x7e>
   be316:	bf00      	nop
   be318:	000c788e 	.word	0x000c788e

000be31c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   be31c:	b513      	push	{r0, r1, r4, lr}
   be31e:	4604      	mov	r4, r0
   be320:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   be322:	f7ff ff15 	bl	be150 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   be326:	4620      	mov	r0, r4
   be328:	9901      	ldr	r1, [sp, #4]
   be32a:	f7ff ff87 	bl	be23c <_ZN8particle7BleUuid9constructEPKc>
}
   be32e:	4620      	mov	r0, r4
   be330:	b002      	add	sp, #8
   be332:	bd10      	pop	{r4, pc}

000be334 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   be334:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   be336:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be33a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   be33c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   be33e:	8043      	strh	r3, [r0, #2]
   be340:	220e      	movs	r2, #14
   be342:	4629      	mov	r1, r5
   be344:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   be346:	7105      	strb	r5, [r0, #4]
   be348:	3006      	adds	r0, #6
   be34a:	f005 fe99 	bl	c4080 <memset>
   be34e:	f104 0014 	add.w	r0, r4, #20
   be352:	f7ff fefd 	bl	be150 <_ZN8particle7BleUuidC1Ev>
   be356:	f104 0028 	add.w	r0, r4, #40	; 0x28
   be35a:	f7ff fef9 	bl	be150 <_ZN8particle7BleUuidC1Ev>
   be35e:	4904      	ldr	r1, [pc, #16]	; (be370 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   be360:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   be364:	f003 f875 	bl	c1452 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   be368:	6565      	str	r5, [r4, #84]	; 0x54
    }
   be36a:	4620      	mov	r0, r4
   be36c:	bd38      	pop	{r3, r4, r5, pc}
   be36e:	bf00      	nop
   be370:	000c79f3 	.word	0x000c79f3

000be374 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   be374:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   be376:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   be37a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   be37e:	4293      	cmp	r3, r2
   be380:	4618      	mov	r0, r3
   be382:	d006      	beq.n	be392 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   be384:	6804      	ldr	r4, [r0, #0]
   be386:	8824      	ldrh	r4, [r4, #0]
   be388:	428c      	cmp	r4, r1
   be38a:	f103 0308 	add.w	r3, r3, #8
   be38e:	d1f6      	bne.n	be37e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   be390:	bd10      	pop	{r4, pc}
        return nullptr;
   be392:	2000      	movs	r0, #0
   be394:	e7fc      	b.n	be390 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000be398 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   be398:	b5f0      	push	{r4, r5, r6, r7, lr}
   be39a:	4606      	mov	r6, r0
   be39c:	b085      	sub	sp, #20
   be39e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   be3a0:	460d      	mov	r5, r1
   be3a2:	2900      	cmp	r1, #0
   be3a4:	d050      	beq.n	be448 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   be3a6:	2a00      	cmp	r2, #0
   be3a8:	d04e      	beq.n	be448 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   be3aa:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   be3ac:	7823      	ldrb	r3, [r4, #0]
   be3ae:	2af4      	cmp	r2, #244	; 0xf4
   be3b0:	bf28      	it	cs
   be3b2:	22f4      	movcs	r2, #244	; 0xf4
   be3b4:	b343      	cbz	r3, be408 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   be3b6:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   be3b8:	0798      	lsls	r0, r3, #30
   be3ba:	d509      	bpl.n	be3d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   be3bc:	89a0      	ldrh	r0, [r4, #12]
   be3be:	9203      	str	r2, [sp, #12]
   be3c0:	2300      	movs	r3, #0
   be3c2:	f7ff f995 	bl	bd6f0 <hal_ble_gatt_server_set_characteristic_value>
   be3c6:	2800      	cmp	r0, #0
   be3c8:	9a03      	ldr	r2, [sp, #12]
   be3ca:	da03      	bge.n	be3d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   be3cc:	b005      	add	sp, #20
   be3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   be3d0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   be3d4:	6834      	ldr	r4, [r6, #0]
   be3d6:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   be3d8:	06d9      	lsls	r1, r3, #27
   be3da:	d509      	bpl.n	be3f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   be3dc:	2f01      	cmp	r7, #1
   be3de:	d007      	beq.n	be3f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be3e0:	89a0      	ldrh	r0, [r4, #12]
   be3e2:	2300      	movs	r3, #0
   be3e4:	4629      	mov	r1, r5
}
   be3e6:	b005      	add	sp, #20
   be3e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be3ec:	f7ff b9b2 	b.w	bd754 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   be3f0:	069b      	lsls	r3, r3, #26
   be3f2:	d5eb      	bpl.n	be3cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   be3f4:	2f02      	cmp	r7, #2
   be3f6:	d0e9      	beq.n	be3cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be3f8:	89a0      	ldrh	r0, [r4, #12]
   be3fa:	2300      	movs	r3, #0
   be3fc:	4629      	mov	r1, r5
}
   be3fe:	b005      	add	sp, #20
   be400:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be404:	f7ff b9b0 	b.w	bd768 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   be408:	8860      	ldrh	r0, [r4, #2]
   be40a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be40e:	4288      	cmp	r0, r1
   be410:	d01c      	beq.n	be44c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   be412:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   be414:	074e      	lsls	r6, r1, #29
   be416:	d501      	bpl.n	be41c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   be418:	2f01      	cmp	r7, #1
   be41a:	d104      	bne.n	be426 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   be41c:	070b      	lsls	r3, r1, #28
   be41e:	d409      	bmi.n	be434 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   be420:	f06f 0077 	mvn.w	r0, #119	; 0x77
   be424:	e7d2      	b.n	be3cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   be426:	89a1      	ldrh	r1, [r4, #12]
   be428:	9300      	str	r3, [sp, #0]
   be42a:	4613      	mov	r3, r2
   be42c:	462a      	mov	r2, r5
   be42e:	f7ff f973 	bl	bd718 <hal_ble_gatt_client_write_without_response>
   be432:	e7cb      	b.n	be3cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   be434:	2f02      	cmp	r7, #2
   be436:	d0f3      	beq.n	be420 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   be438:	2300      	movs	r3, #0
   be43a:	89a1      	ldrh	r1, [r4, #12]
   be43c:	9300      	str	r3, [sp, #0]
   be43e:	4613      	mov	r3, r2
   be440:	462a      	mov	r2, r5
   be442:	f7ff f95f 	bl	bd704 <hal_ble_gatt_client_write_with_response>
   be446:	e7c1      	b.n	be3cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   be448:	4802      	ldr	r0, [pc, #8]	; (be454 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   be44a:	e7bf      	b.n	be3cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   be44c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   be450:	e7bc      	b.n	be3cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   be452:	bf00      	nop
   be454:	fffffef2 	.word	0xfffffef2

000be458 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   be458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be45c:	2600      	movs	r6, #0
   be45e:	6006      	str	r6, [r0, #0]
   be460:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   be462:	2028      	movs	r0, #40	; 0x28
   be464:	460c      	mov	r4, r1
   be466:	f7f5 fe16 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be46a:	1e05      	subs	r5, r0, #0
   be46c:	f105 080c 	add.w	r8, r5, #12
   be470:	d00f      	beq.n	be492 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   be472:	2301      	movs	r3, #1
   be474:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   be478:	4b08      	ldr	r3, [pc, #32]	; (be49c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   be47a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   be47c:	4640      	mov	r0, r8
   be47e:	f7ff fe67 	bl	be150 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   be482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   be484:	622e      	str	r6, [r5, #32]
   be486:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   be48a:	4646      	mov	r6, r8
   be48c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   be48e:	6823      	ldr	r3, [r4, #0]
   be490:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   be492:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   be496:	4638      	mov	r0, r7
   be498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   be49c:	000c7850 	.word	0x000c7850

000be4a0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   be4a0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be4a2:	2500      	movs	r5, #0
   be4a4:	6005      	str	r5, [r0, #0]
   be4a6:	4606      	mov	r6, r0
   be4a8:	2030      	movs	r0, #48	; 0x30
   be4aa:	f7f5 fdf4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be4ae:	4604      	mov	r4, r0
   be4b0:	b188      	cbz	r0, be4d6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   be4b2:	2301      	movs	r3, #1
   be4b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   be4b8:	4b09      	ldr	r3, [pc, #36]	; (be4e0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   be4ba:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   be4bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be4c0:	8183      	strh	r3, [r0, #12]
   be4c2:	300e      	adds	r0, #14
   be4c4:	f7ff fe39 	bl	be13a <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   be4c8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   be4cc:	e9c4 5508 	strd	r5, r5, [r4, #32]
   be4d0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   be4d4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   be4d6:	6074      	str	r4, [r6, #4]
   be4d8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   be4da:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   be4dc:	4630      	mov	r0, r6
   be4de:	bd70      	pop	{r4, r5, r6, pc}
   be4e0:	000c786c 	.word	0x000c786c

000be4e4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   be4e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be4e6:	460d      	mov	r5, r1
   be4e8:	4604      	mov	r4, r0
    WiringBleLock lk;
   be4ea:	a801      	add	r0, sp, #4
   be4ec:	f7ff fdea 	bl	be0c4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   be4f0:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   be4f2:	f8d2 3002 	ldr.w	r3, [r2, #2]
   be4f6:	6023      	str	r3, [r4, #0]
   be4f8:	f8d2 3006 	ldr.w	r3, [r2, #6]
   be4fc:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   be4fe:	a801      	add	r0, sp, #4
   be500:	f7ff fdee 	bl	be0e0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   be504:	4620      	mov	r0, r4
   be506:	b003      	add	sp, #12
   be508:	bd30      	pop	{r4, r5, pc}

000be50a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   be50a:	b530      	push	{r4, r5, lr}
   be50c:	4605      	mov	r5, r0
   be50e:	b087      	sub	sp, #28
   be510:	460c      	mov	r4, r1
    WiringBleLock lk;
   be512:	a801      	add	r0, sp, #4
   be514:	f7ff fdd6 	bl	be0c4 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   be518:	682a      	ldr	r2, [r5, #0]
   be51a:	6823      	ldr	r3, [r4, #0]
   be51c:	8812      	ldrh	r2, [r2, #0]
   be51e:	881b      	ldrh	r3, [r3, #0]
   be520:	429a      	cmp	r2, r3
   be522:	d10d      	bne.n	be540 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   be524:	4629      	mov	r1, r5
   be526:	a802      	add	r0, sp, #8
   be528:	f7ff ffdc 	bl	be4e4 <_ZNK8particle13BlePeerDevice7addressEv>
   be52c:	4621      	mov	r1, r4
   be52e:	a804      	add	r0, sp, #16
   be530:	f7ff ffd8 	bl	be4e4 <_ZNK8particle13BlePeerDevice7addressEv>
   be534:	a904      	add	r1, sp, #16
   be536:	a802      	add	r0, sp, #8
   be538:	f7ff fdeb 	bl	be112 <_ZNK8particle10BleAddresseqERKS0_>
   be53c:	4604      	mov	r4, r0
   be53e:	b900      	cbnz	r0, be542 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   be540:	2400      	movs	r4, #0
    WiringBleLock lk;
   be542:	a801      	add	r0, sp, #4
   be544:	f7ff fdcc 	bl	be0e0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   be548:	4620      	mov	r0, r4
   be54a:	b007      	add	sp, #28
   be54c:	bd30      	pop	{r4, r5, pc}
	...

000be550 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   be550:	b510      	push	{r4, lr}
   be552:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   be554:	2064      	movs	r0, #100	; 0x64
   be556:	f7f5 fd9e 	bl	b4096 <_Znwj>
   be55a:	b168      	cbz	r0, be578 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   be55c:	2300      	movs	r3, #0
   be55e:	e9c0 3300 	strd	r3, r3, [r0]
   be562:	e9c0 3302 	strd	r3, r3, [r0, #8]
   be566:	e9c0 3304 	strd	r3, r3, [r0, #16]
   be56a:	e9c0 3306 	strd	r3, r3, [r0, #24]
   be56e:	6203      	str	r3, [r0, #32]
   be570:	62c3      	str	r3, [r0, #44]	; 0x2c
   be572:	63c3      	str	r3, [r0, #60]	; 0x3c
   be574:	64c3      	str	r3, [r0, #76]	; 0x4c
   be576:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   be578:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   be57a:	b920      	cbnz	r0, be586 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   be57c:	4a0a      	ldr	r2, [pc, #40]	; (be5a8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   be57e:	490b      	ldr	r1, [pc, #44]	; (be5ac <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   be580:	200a      	movs	r0, #10
   be582:	f7ff fb3b 	bl	bdbfc <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   be586:	2000      	movs	r0, #0
   be588:	f7ff f876 	bl	bd678 <hal_ble_stack_init>
   be58c:	b120      	cbz	r0, be598 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   be58e:	4a06      	ldr	r2, [pc, #24]	; (be5a8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   be590:	4907      	ldr	r1, [pc, #28]	; (be5b0 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   be592:	200a      	movs	r0, #10
   be594:	f7ff fb32 	bl	bdbfc <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   be598:	6821      	ldr	r1, [r4, #0]
   be59a:	4806      	ldr	r0, [pc, #24]	; (be5b4 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   be59c:	2200      	movs	r2, #0
   be59e:	f7ff f8cf 	bl	bd740 <hal_ble_set_callback_on_periph_link_events>
}
   be5a2:	4620      	mov	r0, r4
   be5a4:	bd10      	pop	{r4, pc}
   be5a6:	bf00      	nop
   be5a8:	000bd83d 	.word	0x000bd83d
   be5ac:	000c76dd 	.word	0x000c76dd
   be5b0:	000c771b 	.word	0x000c771b
   be5b4:	000beb75 	.word	0x000beb75

000be5b8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   be5b8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   be5ba:	4c0a      	ldr	r4, [pc, #40]	; (be5e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   be5bc:	7823      	ldrb	r3, [r4, #0]
   be5be:	f3bf 8f5b 	dmb	ish
   be5c2:	07db      	lsls	r3, r3, #31
   be5c4:	d40c      	bmi.n	be5e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   be5c6:	4620      	mov	r0, r4
   be5c8:	f7f5 fd7a 	bl	b40c0 <__cxa_guard_acquire>
   be5cc:	b140      	cbz	r0, be5e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   be5ce:	4806      	ldr	r0, [pc, #24]	; (be5e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   be5d0:	f7ff ffbe 	bl	be550 <_ZN8particle14BleLocalDeviceC1Ev>
   be5d4:	4620      	mov	r0, r4
   be5d6:	f7f5 fd78 	bl	b40ca <__cxa_guard_release>
   be5da:	4804      	ldr	r0, [pc, #16]	; (be5ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   be5dc:	f005 fd02 	bl	c3fe4 <atexit>
    return instance;
}
   be5e0:	4801      	ldr	r0, [pc, #4]	; (be5e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   be5e2:	bd10      	pop	{r4, pc}
   be5e4:	2003e61c 	.word	0x2003e61c
   be5e8:	2003e628 	.word	0x2003e628
   be5ec:	000be82d 	.word	0x000be82d

000be5f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   be5f0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   be5f2:	6803      	ldr	r3, [r0, #0]
   be5f4:	3b09      	subs	r3, #9
   be5f6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   be5f8:	b08d      	sub	sp, #52	; 0x34
   be5fa:	4604      	mov	r4, r0
   be5fc:	460d      	mov	r5, r1
    switch (event->type) {
   be5fe:	d811      	bhi.n	be624 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   be600:	f7ff ffda 	bl	be5b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   be604:	88a1      	ldrh	r1, [r4, #4]
   be606:	6800      	ldr	r0, [r0, #0]
   be608:	f7ff feb4 	bl	be374 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   be60c:	4603      	mov	r3, r0
   be60e:	b958      	cbnz	r0, be628 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   be610:	2220      	movs	r2, #32
   be612:	e9cd 2004 	strd	r2, r0, [sp, #16]
   be616:	4a0b      	ldr	r2, [pc, #44]	; (be644 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   be618:	9200      	str	r2, [sp, #0]
   be61a:	490b      	ldr	r1, [pc, #44]	; (be648 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   be61c:	aa04      	add	r2, sp, #16
   be61e:	2032      	movs	r0, #50	; 0x32
   be620:	f7ff faf4 	bl	bdc0c <log_message>
}
   be624:	b00d      	add	sp, #52	; 0x34
   be626:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   be628:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   be62a:	2a00      	cmp	r2, #0
   be62c:	d0fa      	beq.n	be624 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   be62e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be632:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   be636:	e9cd 1203 	strd	r1, r2, [sp, #12]
   be63a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   be63c:	aa04      	add	r2, sp, #16
   be63e:	a903      	add	r1, sp, #12
   be640:	47a0      	blx	r4
}
   be642:	e7ef      	b.n	be624 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   be644:	000c775d 	.word	0x000c775d
   be648:	000c76f4 	.word	0x000c76f4

000be64c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   be64c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   be64e:	2000      	movs	r0, #0
   be650:	f7ff f812 	bl	bd678 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   be654:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   be658:	bd08      	pop	{r3, pc}

000be65a <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   be65a:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   be65c:	2100      	movs	r1, #0
   be65e:	f7ff b813 	b.w	bd688 <hal_ble_gap_set_tx_power>

000be662 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   be662:	b919      	cbnz	r1, be66c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   be664:	460a      	mov	r2, r1
   be666:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   be668:	f7ff b816 	b.w	bd698 <hal_ble_gap_set_advertising_data>
   be66c:	e9d1 0100 	ldrd	r0, r1, [r1]
   be670:	2200      	movs	r2, #0
   be672:	e7f9      	b.n	be668 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000be674 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   be674:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   be676:	69d8      	ldr	r0, [r3, #28]
}
   be678:	2800      	cmp	r0, #0
   be67a:	bfd4      	ite	le
   be67c:	2000      	movle	r0, #0
   be67e:	2001      	movgt	r0, #1
   be680:	4770      	bx	lr

000be682 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be682:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be684:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be688:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be68a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   be68e:	42ae      	cmp	r6, r5
   be690:	d004      	beq.n	be69c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   be692:	4628      	mov	r0, r5
   be694:	f002 fe92 	bl	c13bc <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   be698:	3510      	adds	r5, #16
   be69a:	e7f8      	b.n	be68e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be69c:	6820      	ldr	r0, [r4, #0]
   be69e:	f7ff fbbb 	bl	bde18 <free>
}
   be6a2:	4620      	mov	r0, r4
   be6a4:	bd70      	pop	{r4, r5, r6, pc}

000be6a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   be6a6:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   be6a8:	1e14      	subs	r4, r2, #0
   be6aa:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   be6ac:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   be6ae:	db02      	blt.n	be6b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   be6b0:	1862      	adds	r2, r4, r1
   be6b2:	429a      	cmp	r2, r3
   be6b4:	dd00      	ble.n	be6b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   be6b6:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   be6b8:	682a      	ldr	r2, [r5, #0]
   be6ba:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   be6bc:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   be6be:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   be6c0:	1a52      	subs	r2, r2, r1
   be6c2:	f005 fcc3 	bl	c404c <memmove>
    size_ -= n;
   be6c6:	686a      	ldr	r2, [r5, #4]
   be6c8:	1b12      	subs	r2, r2, r4
   be6ca:	606a      	str	r2, [r5, #4]
}
   be6cc:	bd38      	pop	{r3, r4, r5, pc}

000be6ce <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   be6ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   be6d0:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   be6d2:	4604      	mov	r4, r0
   be6d4:	460d      	mov	r5, r1
   be6d6:	ab01      	add	r3, sp, #4
   be6d8:	e9d0 0100 	ldrd	r0, r1, [r0]
   be6dc:	f7ff fc72 	bl	bdfc4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   be6e0:	4602      	mov	r2, r0
   be6e2:	b138      	cbz	r0, be6f4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   be6e4:	9901      	ldr	r1, [sp, #4]
   be6e6:	4620      	mov	r0, r4
   be6e8:	f7ff ffdd 	bl	be6a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   be6ec:	4629      	mov	r1, r5
   be6ee:	4620      	mov	r0, r4
   be6f0:	f7ff ffed 	bl	be6ce <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   be6f4:	b003      	add	sp, #12
   be6f6:	bd30      	pop	{r4, r5, pc}

000be6f8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   be6f8:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   be6fa:	460c      	mov	r4, r1
   be6fc:	b929      	cbnz	r1, be70a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   be6fe:	460a      	mov	r2, r1
   be700:	4608      	mov	r0, r1
}
   be702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   be706:	f7fe bfcf 	b.w	bd6a8 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   be70a:	2101      	movs	r1, #1
   be70c:	4620      	mov	r0, r4
   be70e:	f7ff ffde 	bl	be6ce <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   be712:	e9d4 0100 	ldrd	r0, r1, [r4]
   be716:	2200      	movs	r2, #0
   be718:	e7f3      	b.n	be702 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000be71a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   be71a:	b538      	push	{r3, r4, r5, lr}
   be71c:	4604      	mov	r4, r0
   be71e:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   be720:	f7ff ff9f 	bl	be662 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   be724:	2800      	cmp	r0, #0
   be726:	db0a      	blt.n	be73e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   be728:	4629      	mov	r1, r5
   be72a:	4620      	mov	r0, r4
   be72c:	f7ff ffe4 	bl	be6f8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   be730:	2800      	cmp	r0, #0
   be732:	db04      	blt.n	be73e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   be734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   be738:	2000      	movs	r0, #0
   be73a:	f7fe bfbd 	b.w	bd6b8 <hal_ble_gap_start_advertising>
}
   be73e:	bd38      	pop	{r3, r4, r5, pc}

000be740 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   be740:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   be742:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   be744:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   be746:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be748:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   be74a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be74c:	f7f5 fca3 	bl	b4096 <_Znwj>
   be750:	b118      	cbz	r0, be75a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   be752:	682b      	ldr	r3, [r5, #0]
   be754:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   be756:	686b      	ldr	r3, [r5, #4]
   be758:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   be75a:	4b03      	ldr	r3, [pc, #12]	; (be768 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   be75c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   be75e:	4b03      	ldr	r3, [pc, #12]	; (be76c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be760:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   be762:	60a3      	str	r3, [r4, #8]
      }
   be764:	4620      	mov	r0, r4
   be766:	bd38      	pop	{r3, r4, r5, pc}
   be768:	000be005 	.word	0x000be005
   be76c:	000be01d 	.word	0x000be01d

000be770 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   be770:	680b      	ldr	r3, [r1, #0]
   be772:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   be774:	b113      	cbz	r3, be77c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   be776:	685a      	ldr	r2, [r3, #4]
   be778:	3201      	adds	r2, #1
   be77a:	605a      	str	r2, [r3, #4]
      }
   be77c:	4770      	bx	lr

000be77e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   be77e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   be780:	f851 3b04 	ldr.w	r3, [r1], #4
   be784:	4604      	mov	r4, r0
   be786:	f840 3b04 	str.w	r3, [r0], #4
   be78a:	f7ff fff1 	bl	be770 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   be78e:	6823      	ldr	r3, [r4, #0]
   be790:	b90b      	cbnz	r3, be796 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   be792:	f7ff fc2d 	bl	bdff0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   be796:	4620      	mov	r0, r4
   be798:	bd10      	pop	{r4, pc}

000be79a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   be79a:	b510      	push	{r4, lr}
   be79c:	f851 3b04 	ldr.w	r3, [r1], #4
   be7a0:	4604      	mov	r4, r0
   be7a2:	f840 3b04 	str.w	r3, [r0], #4
   be7a6:	f7ff ffe3 	bl	be770 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   be7aa:	4620      	mov	r0, r4
   be7ac:	bd10      	pop	{r4, pc}

000be7ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   be7ae:	b510      	push	{r4, lr}
   be7b0:	f851 3b04 	ldr.w	r3, [r1], #4
   be7b4:	4604      	mov	r4, r0
   be7b6:	f840 3b04 	str.w	r3, [r0], #4
   be7ba:	f7ff ffd9 	bl	be770 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   be7be:	4620      	mov	r0, r4
   be7c0:	bd10      	pop	{r4, pc}

000be7c2 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   be7c2:	b510      	push	{r4, lr}
   be7c4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   be7c6:	3004      	adds	r0, #4
   be7c8:	f7f7 fa30 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be7cc:	4620      	mov	r0, r4
   be7ce:	bd10      	pop	{r4, pc}

000be7d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be7d0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be7d2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be7d6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be7d8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be7dc:	42ae      	cmp	r6, r5
   be7de:	d004      	beq.n	be7ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   be7e0:	1d28      	adds	r0, r5, #4
   be7e2:	f7f7 fa23 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be7e6:	3508      	adds	r5, #8
   be7e8:	e7f8      	b.n	be7dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be7ea:	6820      	ldr	r0, [r4, #0]
   be7ec:	f7ff fb14 	bl	bde18 <free>
}
   be7f0:	4620      	mov	r0, r4
   be7f2:	bd70      	pop	{r4, r5, r6, pc}

000be7f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be7f4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be7f6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be7fa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be7fc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be800:	42ae      	cmp	r6, r5
   be802:	d004      	beq.n	be80e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   be804:	1d28      	adds	r0, r5, #4
   be806:	f7f7 fa11 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be80a:	3508      	adds	r5, #8
   be80c:	e7f8      	b.n	be800 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be80e:	6820      	ldr	r0, [r4, #0]
   be810:	f7ff fb02 	bl	bde18 <free>
}
   be814:	4620      	mov	r0, r4
   be816:	bd70      	pop	{r4, r5, r6, pc}

000be818 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   be818:	b510      	push	{r4, lr}
   be81a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   be81c:	3024      	adds	r0, #36	; 0x24
   be81e:	f7ff ffe9 	bl	be7f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   be822:	f104 0018 	add.w	r0, r4, #24
   be826:	f7ff ffd3 	bl	be7d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   be82a:	bd10      	pop	{r4, pc}

000be82c <__tcf_0>:
    static BleLocalDevice instance;
   be82c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   be82e:	4b17      	ldr	r3, [pc, #92]	; (be88c <__tcf_0+0x60>)
   be830:	681c      	ldr	r4, [r3, #0]
   be832:	b354      	cbz	r4, be88a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   be834:	f104 0054 	add.w	r0, r4, #84	; 0x54
   be838:	f7f5 fe10 	bl	b445c <_ZNSt14_Function_baseD1Ev>
   be83c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   be840:	f7f5 fe0c 	bl	b445c <_ZNSt14_Function_baseD1Ev>
   be844:	f104 0034 	add.w	r0, r4, #52	; 0x34
   be848:	f7f5 fe08 	bl	b445c <_ZNSt14_Function_baseD1Ev>
   be84c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   be850:	f7f5 fe04 	bl	b445c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   be854:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   be858:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be85c:	42ae      	cmp	r6, r5
   be85e:	d004      	beq.n	be86a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   be860:	1d28      	adds	r0, r5, #4
   be862:	f7f7 f9e3 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be866:	3508      	adds	r5, #8
   be868:	e7f8      	b.n	be85c <__tcf_0+0x30>
    ::free(ptr);
   be86a:	69a0      	ldr	r0, [r4, #24]
   be86c:	f7ff fad4 	bl	bde18 <free>
    ~BleLocalDeviceImpl() = default;
   be870:	f104 000c 	add.w	r0, r4, #12
   be874:	f7ff ffbe 	bl	be7f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   be878:	4620      	mov	r0, r4
   be87a:	f7ff ffa9 	bl	be7d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   be87e:	4620      	mov	r0, r4
   be880:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   be882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   be886:	f7f5 bc0c 	b.w	b40a2 <_ZdlPvj>
   be88a:	bd70      	pop	{r4, r5, r6, pc}
   be88c:	2003e628 	.word	0x2003e628

000be890 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   be890:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   be892:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   be894:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   be898:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   be89c:	6803      	ldr	r3, [r0, #0]
   be89e:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   be8a0:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   be8a2:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   be8a4:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   be8a6:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   be8a8:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   be8aa:	f7f7 f9bf 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   be8ae:	b002      	add	sp, #8
   be8b0:	bd10      	pop	{r4, pc}

000be8b2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   be8b2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   be8b4:	b510      	push	{r4, lr}
      if (_M_empty())
   be8b6:	b90a      	cbnz	r2, be8bc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   be8b8:	f003 f9bc 	bl	c1c34 <_ZSt25__throw_bad_function_callv>
    }
   be8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be8c0:	68c3      	ldr	r3, [r0, #12]
   be8c2:	4718      	bx	r3

000be8c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   be8c4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   be8c6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   be8c8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   be8ca:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   be8cc:	dd03      	ble.n	be8d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   be8ce:	f7ff faab 	bl	bde28 <realloc>
            if (!d) {
   be8d2:	b918      	cbnz	r0, be8dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   be8d4:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   be8d6:	f7ff fa9f 	bl	bde18 <free>
        T* d = nullptr;
   be8da:	2000      	movs	r0, #0
        data_ = d;
   be8dc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   be8de:	60a5      	str	r5, [r4, #8]
        return true;
   be8e0:	2001      	movs	r0, #1
   be8e2:	e7f7      	b.n	be8d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000be8e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   be8e4:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   be8e6:	6883      	ldr	r3, [r0, #8]
   be8e8:	428b      	cmp	r3, r1
   be8ea:	da02      	bge.n	be8f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   be8ec:	f7ff ffea 	bl	be8c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   be8f0:	bd08      	pop	{r3, pc}
    return true;
   be8f2:	2001      	movs	r0, #1
   be8f4:	e7fc      	b.n	be8f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000be8f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be8fa:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be8fc:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be8fe:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be900:	4419      	add	r1, r3
   be902:	6883      	ldr	r3, [r0, #8]
   be904:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be906:	4604      	mov	r4, r0
   be908:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be90a:	dc12      	bgt.n	be932 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   be90c:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   be90e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be910:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   be912:	1bd2      	subs	r2, r2, r7
   be914:	4631      	mov	r1, r6
   be916:	1970      	adds	r0, r6, r5
   be918:	f005 fb98 	bl	c404c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   be91c:	462a      	mov	r2, r5
   be91e:	4641      	mov	r1, r8
   be920:	4630      	mov	r0, r6
   be922:	f005 fb85 	bl	c4030 <memcpy>
    size_ += n;
   be926:	6863      	ldr	r3, [r4, #4]
   be928:	442b      	add	r3, r5
   be92a:	6063      	str	r3, [r4, #4]
    return true;
   be92c:	2001      	movs	r0, #1
}
   be92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be932:	f7ff ffc7 	bl	be8c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   be936:	2800      	cmp	r0, #0
   be938:	d1e8      	bne.n	be90c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   be93a:	e7f8      	b.n	be92e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000be93c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   be93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be93e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be940:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   be944:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   be946:	4604      	mov	r4, r0
   be948:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be94a:	da0b      	bge.n	be964 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   be94c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   be94e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be950:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   be952:	1b52      	subs	r2, r2, r5
   be954:	1c48      	adds	r0, r1, #1
   be956:	f005 fb79 	bl	c404c <memmove>
    new(p) T(std::move(value));
   be95a:	557e      	strb	r6, [r7, r5]
    ++size_;
   be95c:	6863      	ldr	r3, [r4, #4]
   be95e:	3301      	adds	r3, #1
   be960:	6063      	str	r3, [r4, #4]
}
   be962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be964:	3101      	adds	r1, #1
   be966:	f7ff ffad 	bl	be8c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   be96a:	2800      	cmp	r0, #0
   be96c:	d1ee      	bne.n	be94c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   be96e:	e7f8      	b.n	be962 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000be970 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be970:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   be972:	6841      	ldr	r1, [r0, #4]
   be974:	f7ff bfe2 	b.w	be93c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000be978 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   be978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   be97c:	4604      	mov	r4, r0
   be97e:	461d      	mov	r5, r3
   be980:	460f      	mov	r7, r1
   be982:	ab01      	add	r3, sp, #4
   be984:	4690      	mov	r8, r2
   be986:	460a      	mov	r2, r1
   be988:	e9d0 0100 	ldrd	r0, r1, [r0]
   be98c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   be990:	f7ff fb18 	bl	bdfc4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   be994:	1cae      	adds	r6, r5, #2
   be996:	6863      	ldr	r3, [r4, #4]
   be998:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   be99a:	f1b9 0f00 	cmp.w	r9, #0
   be99e:	d126      	bne.n	be9ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   be9a0:	b328      	cbz	r0, be9ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   be9a2:	4433      	add	r3, r6
   be9a4:	1a1b      	subs	r3, r3, r0
   be9a6:	2bff      	cmp	r3, #255	; 0xff
   be9a8:	d809      	bhi.n	be9be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   be9aa:	9901      	ldr	r1, [sp, #4]
   be9ac:	4620      	mov	r0, r4
   be9ae:	f7ff fe7a 	bl	be6a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   be9b2:	6861      	ldr	r1, [r4, #4]
   be9b4:	4620      	mov	r0, r4
   be9b6:	4431      	add	r1, r6
   be9b8:	f7ff ff94 	bl	be8e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   be9bc:	b918      	cbnz	r0, be9c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   be9be:	6860      	ldr	r0, [r4, #4]
}
   be9c0:	b003      	add	sp, #12
   be9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   be9c6:	1c6a      	adds	r2, r5, #1
   be9c8:	9901      	ldr	r1, [sp, #4]
   be9ca:	b2d2      	uxtb	r2, r2
   be9cc:	4620      	mov	r0, r4
   be9ce:	f7ff ffb5 	bl	be93c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   be9d2:	9901      	ldr	r1, [sp, #4]
   be9d4:	463a      	mov	r2, r7
   be9d6:	3101      	adds	r1, #1
   be9d8:	4620      	mov	r0, r4
   be9da:	f7ff ffaf 	bl	be93c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   be9de:	9901      	ldr	r1, [sp, #4]
   be9e0:	462b      	mov	r3, r5
   be9e2:	4642      	mov	r2, r8
   be9e4:	3102      	adds	r1, #2
    return insert(size_, values, n);
   be9e6:	4620      	mov	r0, r4
   be9e8:	f7ff ff85 	bl	be8f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   be9ec:	e7e7      	b.n	be9be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   be9ee:	18f1      	adds	r1, r6, r3
   be9f0:	29ff      	cmp	r1, #255	; 0xff
   be9f2:	d8e4      	bhi.n	be9be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   be9f4:	4620      	mov	r0, r4
   be9f6:	f7ff ff75 	bl	be8e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   be9fa:	2800      	cmp	r0, #0
   be9fc:	d0df      	beq.n	be9be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   be9fe:	1c69      	adds	r1, r5, #1
   bea00:	b2c9      	uxtb	r1, r1
   bea02:	4620      	mov	r0, r4
   bea04:	f7ff ffb4 	bl	be970 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bea08:	4639      	mov	r1, r7
   bea0a:	4620      	mov	r0, r4
   bea0c:	f7ff ffb0 	bl	be970 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bea10:	6861      	ldr	r1, [r4, #4]
   bea12:	462b      	mov	r3, r5
   bea14:	4642      	mov	r2, r8
   bea16:	e7e6      	b.n	be9e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bea18 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bea18:	b430      	push	{r4, r5}
   bea1a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bea1e:	b11a      	cbz	r2, bea28 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bea20:	9502      	str	r5, [sp, #8]
}
   bea22:	bc30      	pop	{r4, r5}
   bea24:	f7ff bfa8 	b.w	be978 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   bea28:	6840      	ldr	r0, [r0, #4]
}
   bea2a:	bc30      	pop	{r4, r5}
   bea2c:	4770      	bx	lr

000bea2e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   bea2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bea30:	2300      	movs	r3, #0
   bea32:	e9c0 3300 	strd	r3, r3, [r0]
   bea36:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bea38:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bea3a:	9300      	str	r3, [sp, #0]
   bea3c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bea3e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bea42:	4619      	mov	r1, r3
   bea44:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bea48:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bea4a:	f7ff ffe5 	bl	bea18 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bea4e:	4620      	mov	r0, r4
   bea50:	b004      	add	sp, #16
   bea52:	bd10      	pop	{r4, pc}

000bea54 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   bea54:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   bea56:	9300      	str	r3, [sp, #0]
   bea58:	4613      	mov	r3, r2
   bea5a:	460a      	mov	r2, r1
   bea5c:	21ff      	movs	r1, #255	; 0xff
   bea5e:	f7ff ffdb 	bl	bea18 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bea62:	b003      	add	sp, #12
   bea64:	f85d fb04 	ldr.w	pc, [sp], #4

000bea68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bea68:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bea6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bea6c:	4604      	mov	r4, r0
   bea6e:	460d      	mov	r5, r1
   bea70:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bea72:	d914      	bls.n	bea9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bea74:	4290      	cmp	r0, r2
   bea76:	d213      	bcs.n	beaa0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bea78:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bea7c:	1a75      	subs	r5, r6, r1
   bea7e:	f1a1 0708 	sub.w	r7, r1, #8
   bea82:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bea84:	42b7      	cmp	r7, r6
   bea86:	d018      	beq.n	beaba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bea88:	b11c      	cbz	r4, bea92 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bea8a:	4631      	mov	r1, r6
   bea8c:	4620      	mov	r0, r4
   bea8e:	f7ff fe8e 	bl	be7ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bea92:	1d30      	adds	r0, r6, #4
   bea94:	f7f7 f8ca 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bea98:	3e08      	subs	r6, #8
   bea9a:	3c08      	subs	r4, #8
   bea9c:	e7f2      	b.n	bea84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bea9e:	d00c      	beq.n	beaba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   beaa0:	42b5      	cmp	r5, r6
   beaa2:	d00a      	beq.n	beaba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   beaa4:	b11c      	cbz	r4, beaae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   beaa6:	4629      	mov	r1, r5
   beaa8:	4620      	mov	r0, r4
   beaaa:	f7ff fe80 	bl	be7ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   beaae:	1d28      	adds	r0, r5, #4
   beab0:	f7f7 f8bc 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   beab4:	3508      	adds	r5, #8
   beab6:	3408      	adds	r4, #8
   beab8:	e7f2      	b.n	beaa0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   beaba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000beabc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   beabc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   beabe:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   beac0:	6846      	ldr	r6, [r0, #4]
   beac2:	4668      	mov	r0, sp
   beac4:	f7ff fe73 	bl	be7ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   beac8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   beacc:	429f      	cmp	r7, r3
   beace:	db12      	blt.n	beaf6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bead0:	3701      	adds	r7, #1
        if (n > 0) {
   bead2:	2f00      	cmp	r7, #0
   bead4:	dd29      	ble.n	beb2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bead6:	00f8      	lsls	r0, r7, #3
   bead8:	f7ff f996 	bl	bde08 <malloc>
            if (!d) {
   beadc:	4605      	mov	r5, r0
   beade:	b1f0      	cbz	r0, beb1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   beae0:	e9d4 1200 	ldrd	r1, r2, [r4]
   beae4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   beae8:	f7ff ffbe 	bl	bea68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   beaec:	6820      	ldr	r0, [r4, #0]
   beaee:	f7ff f993 	bl	bde18 <free>
        data_ = d;
   beaf2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   beaf4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   beaf6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   beaf8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   beafa:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   beafe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   beb02:	4631      	mov	r1, r6
   beb04:	f106 0008 	add.w	r0, r6, #8
   beb08:	f7ff ffae 	bl	bea68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   beb0c:	b11e      	cbz	r6, beb16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   beb0e:	4669      	mov	r1, sp
   beb10:	4630      	mov	r0, r6
   beb12:	f7ff fe4c 	bl	be7ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   beb16:	6863      	ldr	r3, [r4, #4]
   beb18:	3301      	adds	r3, #1
   beb1a:	6063      	str	r3, [r4, #4]
    return true;
   beb1c:	2501      	movs	r5, #1
   beb1e:	a801      	add	r0, sp, #4
   beb20:	f7f7 f884 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   beb24:	4628      	mov	r0, r5
   beb26:	b003      	add	sp, #12
   beb28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   beb2a:	2500      	movs	r5, #0
   beb2c:	e7de      	b.n	beaec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000beb2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   beb2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   beb30:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   beb34:	4605      	mov	r5, r0
   beb36:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   beb38:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   beb3c:	42a6      	cmp	r6, r4
   beb3e:	d005      	beq.n	beb4c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   beb40:	4639      	mov	r1, r7
   beb42:	4620      	mov	r0, r4
   beb44:	f7ff fce1 	bl	be50a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   beb48:	b108      	cbz	r0, beb4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   beb4a:	b914      	cbnz	r4, beb52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   beb4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   beb4e:	3408      	adds	r4, #8
   beb50:	e7f4      	b.n	beb3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   beb52:	1d20      	adds	r0, r4, #4
   beb54:	f7f7 f86a 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   beb58:	e9d5 3200 	ldrd	r3, r2, [r5]
   beb5c:	f104 0108 	add.w	r1, r4, #8
   beb60:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   beb64:	4620      	mov	r0, r4
   beb66:	f7ff ff7f 	bl	bea68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   beb6a:	686b      	ldr	r3, [r5, #4]
   beb6c:	3b01      	subs	r3, #1
   beb6e:	606b      	str	r3, [r5, #4]
    return true;
   beb70:	e7ec      	b.n	beb4c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000beb74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   beb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   beb78:	4605      	mov	r5, r0
   beb7a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   beb7c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   beb7e:	460c      	mov	r4, r1
        WiringBleLock lk;
   beb80:	f7ff faa0 	bl	be0c4 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   beb84:	682e      	ldr	r6, [r5, #0]
   beb86:	1ef3      	subs	r3, r6, #3
   beb88:	2b0d      	cmp	r3, #13
   beb8a:	d83c      	bhi.n	bec06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   beb8c:	e8df f013 	tbh	[pc, r3, lsl #1]
   beb90:	0053000e 	.word	0x0053000e
   beb94:	00d1003b 	.word	0x00d1003b
   beb98:	003b003b 	.word	0x003b003b
   beb9c:	003b003b 	.word	0x003b003b
   beba0:	009b003b 	.word	0x009b003b
   beba4:	009b009b 	.word	0x009b009b
   beba8:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bebac:	a804      	add	r0, sp, #16
   bebae:	f7ff fc77 	bl	be4a0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bebb2:	9b04      	ldr	r3, [sp, #16]
   bebb4:	89aa      	ldrh	r2, [r5, #12]
   bebb6:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bebb8:	6869      	ldr	r1, [r5, #4]
   bebba:	9804      	ldr	r0, [sp, #16]
   bebbc:	3108      	adds	r1, #8
   bebbe:	3002      	adds	r0, #2
   bebc0:	f7ff fa9a 	bl	be0f8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bebc4:	a904      	add	r1, sp, #16
   bebc6:	a806      	add	r0, sp, #24
   bebc8:	f7ff fdf1 	bl	be7ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bebcc:	a906      	add	r1, sp, #24
   bebce:	f104 0018 	add.w	r0, r4, #24
   bebd2:	f7ff ff73 	bl	beabc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bebd6:	4605      	mov	r5, r0
   bebd8:	a807      	add	r0, sp, #28
   bebda:	f7f7 f827 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bebde:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bebe0:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bebe2:	b9b5      	cbnz	r5, bec12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bebe4:	4b5d      	ldr	r3, [pc, #372]	; (bed5c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bebe6:	495e      	ldr	r1, [pc, #376]	; (bed60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bebe8:	9300      	str	r3, [sp, #0]
   bebea:	2032      	movs	r0, #50	; 0x32
   bebec:	462b      	mov	r3, r5
   bebee:	aa06      	add	r2, sp, #24
   bebf0:	9507      	str	r5, [sp, #28]
   bebf2:	f7ff f80b 	bl	bdc0c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bebf6:	9b04      	ldr	r3, [sp, #16]
   bebf8:	4629      	mov	r1, r5
   bebfa:	8818      	ldrh	r0, [r3, #0]
   bebfc:	f7fe fd64 	bl	bd6c8 <hal_ble_gap_disconnect>
   bec00:	a805      	add	r0, sp, #20
   bec02:	f7f7 f813 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bec06:	a803      	add	r0, sp, #12
   bec08:	f7ff fa6a 	bl	be0e0 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bec0c:	b00e      	add	sp, #56	; 0x38
   bec0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bec12:	4a54      	ldr	r2, [pc, #336]	; (bed64 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bec14:	9200      	str	r2, [sp, #0]
   bec16:	2300      	movs	r3, #0
   bec18:	4951      	ldr	r1, [pc, #324]	; (bed60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bec1a:	9307      	str	r3, [sp, #28]
   bec1c:	aa06      	add	r2, sp, #24
   bec1e:	2001      	movs	r0, #1
   bec20:	f7fe fff4 	bl	bdc0c <log_message>
                if (impl->connectedCallback_) {
   bec24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bec26:	2b00      	cmp	r3, #0
   bec28:	d0ea      	beq.n	bec00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bec2a:	a904      	add	r1, sp, #16
   bec2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bec30:	f7ff fe3f 	bl	be8b2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bec34:	e7e4      	b.n	bec00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bec36:	89a9      	ldrh	r1, [r5, #12]
   bec38:	4620      	mov	r0, r4
   bec3a:	f7ff fb9b 	bl	be374 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bec3e:	4606      	mov	r6, r0
   bec40:	2800      	cmp	r0, #0
   bec42:	d0e0      	beq.n	bec06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bec44:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bec46:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bec4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bec4e:	8029      	strh	r1, [r5, #0]
   bec50:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bec54:	429a      	cmp	r2, r3
   bec56:	d003      	beq.n	bec60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bec58:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bec5c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bec5e:	e7f9      	b.n	bec54 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bec60:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bec64:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bec68:	45b8      	cmp	r8, r7
   bec6a:	d004      	beq.n	bec76 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bec6c:	1d38      	adds	r0, r7, #4
   bec6e:	f7f6 ffdd 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bec72:	3708      	adds	r7, #8
   bec74:	e7f8      	b.n	bec68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bec76:	2300      	movs	r3, #0
   bec78:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bec7a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bec7e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bec82:	45b8      	cmp	r8, r7
   bec84:	d004      	beq.n	bec90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bec86:	1d38      	adds	r0, r7, #4
   bec88:	f7f6 ffd0 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bec8c:	3708      	adds	r7, #8
   bec8e:	e7f8      	b.n	bec82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bec90:	2300      	movs	r3, #0
   bec92:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bec94:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bec96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bec98:	b123      	cbz	r3, beca4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bec9a:	4631      	mov	r1, r6
   bec9c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   beca0:	f7ff fe07 	bl	be8b2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   beca4:	2300      	movs	r3, #0
   beca6:	2220      	movs	r2, #32
   beca8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   becac:	4a2e      	ldr	r2, [pc, #184]	; (bed68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   becae:	9200      	str	r2, [sp, #0]
   becb0:	492b      	ldr	r1, [pc, #172]	; (bed60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   becb2:	aa06      	add	r2, sp, #24
   becb4:	2001      	movs	r0, #1
   becb6:	f7fe ffa9 	bl	bdc0c <log_message>
                    impl->peers_.removeOne(*peer);
   becba:	4631      	mov	r1, r6
   becbc:	f104 0018 	add.w	r0, r4, #24
   becc0:	f7ff ff35 	bl	beb2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   becc4:	e79f      	b.n	bec06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   becc6:	89a9      	ldrh	r1, [r5, #12]
   becc8:	4620      	mov	r0, r4
   becca:	f7ff fb53 	bl	be374 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   becce:	2800      	cmp	r0, #0
   becd0:	d099      	beq.n	bec06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   becd2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   becd4:	2b00      	cmp	r3, #0
   becd6:	d096      	beq.n	bec06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   becd8:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   becda:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   becdc:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bece0:	d001      	beq.n	bece6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bece2:	2e10      	cmp	r6, #16
   bece4:	d117      	bne.n	bed16 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bece6:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bece8:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   becea:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   becec:	2506      	movs	r5, #6
                        };
   becee:	f88d 3015 	strb.w	r3, [sp, #21]
   becf2:	9104      	str	r1, [sp, #16]
   becf4:	f88d 2014 	strb.w	r2, [sp, #20]
   becf8:	9006      	str	r0, [sp, #24]
   becfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   becfe:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bed00:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bed04:	9508      	str	r5, [sp, #32]
   bed06:	e883 0003 	stmia.w	r3, {r0, r1}
   bed0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bed0c:	a906      	add	r1, sp, #24
   bed0e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bed12:	4798      	blx	r3
   bed14:	e777      	b.n	bec06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bed16:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bed18:	bf01      	itttt	eq
   bed1a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bed1c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bed1e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bed22:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bed24:	bf0f      	iteee	eq
   bed26:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bed2a:	461a      	movne	r2, r3
   bed2c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bed2e:	461d      	movne	r5, r3
   bed30:	e7dd      	b.n	becee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bed32:	89a9      	ldrh	r1, [r5, #12]
   bed34:	4620      	mov	r0, r4
   bed36:	f7ff fb1d 	bl	be374 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bed3a:	4601      	mov	r1, r0
   bed3c:	2800      	cmp	r0, #0
   bed3e:	f43f af62 	beq.w	bec06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bed42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bed44:	2b00      	cmp	r3, #0
   bed46:	f43f af5e 	beq.w	bec06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bed4a:	686b      	ldr	r3, [r5, #4]
   bed4c:	9306      	str	r3, [sp, #24]
   bed4e:	aa06      	add	r2, sp, #24
   bed50:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bed52:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bed56:	4798      	blx	r3
   bed58:	e755      	b.n	bec06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bed5a:	bf00      	nop
   bed5c:	000c7775 	.word	0x000c7775
   bed60:	000c76f4 	.word	0x000c76f4
   bed64:	000c779b 	.word	0x000c779b
   bed68:	000c77b8 	.word	0x000c77b8

000bed6c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bed6c:	b513      	push	{r0, r1, r4, lr}
   bed6e:	460b      	mov	r3, r1
   bed70:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bed72:	e9d0 0100 	ldrd	r0, r1, [r0]
   bed76:	466c      	mov	r4, sp
   bed78:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bed7c:	e893 0003 	ldmia.w	r3, {r0, r1}
   bed80:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bed84:	e894 0003 	ldmia.w	r4, {r0, r1}
   bed88:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bed8c:	b002      	add	sp, #8
   bed8e:	bd10      	pop	{r4, pc}

000bed90 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bed90:	b538      	push	{r3, r4, r5, lr}
   bed92:	4605      	mov	r5, r0
   bed94:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bed96:	f7ff ffe9 	bl	bed6c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bed9a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bed9c:	68a2      	ldr	r2, [r4, #8]
   bed9e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   beda0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   beda2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   beda4:	68e2      	ldr	r2, [r4, #12]
   beda6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   beda8:	60e3      	str	r3, [r4, #12]
      }
   bedaa:	bd38      	pop	{r3, r4, r5, pc}

000bedac <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   bedac:	b570      	push	{r4, r5, r6, lr}
   bedae:	4604      	mov	r4, r0
   bedb0:	b08c      	sub	sp, #48	; 0x30
   bedb2:	460e      	mov	r6, r1
   bedb4:	9201      	str	r2, [sp, #4]
   bedb6:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   bedb8:	f7ff fabc 	bl	be334 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   bedbc:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   bedbe:	9901      	ldr	r1, [sp, #4]
   bedc0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bedc4:	f002 fb9b 	bl	c14fe <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bedc8:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   bedcc:	b1cd      	cbz	r5, bee02 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   bedce:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bedd0:	9502      	str	r5, [sp, #8]
   bedd2:	a902      	add	r1, sp, #8
   bedd4:	a804      	add	r0, sp, #16
   bedd6:	9303      	str	r3, [sp, #12]
   bedd8:	f7ff fcb2 	bl	be740 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   beddc:	2300      	movs	r3, #0
	__x.swap(*this);
   bedde:	a908      	add	r1, sp, #32
   bede0:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   bede2:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   bede4:	f7ff ffd4 	bl	bed90 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bede8:	4631      	mov	r1, r6
   bedea:	a808      	add	r0, sp, #32
   bedec:	f7ff ffd0 	bl	bed90 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bedf0:	a808      	add	r0, sp, #32
   bedf2:	f7f5 fb33 	bl	b445c <_ZNSt14_Function_baseD1Ev>
   bedf6:	a804      	add	r0, sp, #16
   bedf8:	f7f5 fb30 	bl	b445c <_ZNSt14_Function_baseD1Ev>
    }
   bedfc:	4620      	mov	r0, r4
   bedfe:	b00c      	add	sp, #48	; 0x30
   bee00:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   bee02:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   bee04:	e7ea      	b.n	beddc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000bee08 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   bee08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bee0c:	b087      	sub	sp, #28
   bee0e:	461d      	mov	r5, r3
   bee10:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   bee14:	4680      	mov	r8, r0
   bee16:	468b      	mov	fp, r1
   bee18:	4692      	mov	sl, r2
   bee1a:	9912      	ldr	r1, [sp, #72]	; 0x48
   bee1c:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bee1e:	2200      	movs	r2, #0
   bee20:	2068      	movs	r0, #104	; 0x68
   bee22:	9102      	str	r1, [sp, #8]
   bee24:	9204      	str	r2, [sp, #16]
   bee26:	f7f5 f936 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bee2a:	1e06      	subs	r6, r0, #0
   bee2c:	f106 090c 	add.w	r9, r6, #12
   bee30:	d018      	beq.n	bee64 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   bee32:	2201      	movs	r2, #1
	: _M_impl(__a)
   bee34:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   bee36:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   bee3a:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   bee3c:	4a15      	ldr	r2, [pc, #84]	; (bee94 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   bee3e:	f847 2b20 	str.w	r2, [r7], #32
   bee42:	9b03      	ldr	r3, [sp, #12]
   bee44:	9100      	str	r1, [sp, #0]
   bee46:	465a      	mov	r2, fp
   bee48:	4651      	mov	r1, sl
   bee4a:	4648      	mov	r0, r9
   bee4c:	f7ff ffae 	bl	bedac <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   bee50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bee52:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   bee54:	682b      	ldr	r3, [r5, #0]
   bee56:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   bee58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bee5a:	f106 0534 	add.w	r5, r6, #52	; 0x34
   bee5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bee60:	6823      	ldr	r3, [r4, #0]
   bee62:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   bee64:	a904      	add	r1, sp, #16
   bee66:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   bee68:	e9cd 9604 	strd	r9, r6, [sp, #16]
   bee6c:	f7ff fd10 	bl	be890 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   bee70:	a805      	add	r0, sp, #20
   bee72:	f7f6 fedb 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   bee76:	f8d8 3000 	ldr.w	r3, [r8]
   bee7a:	b93b      	cbnz	r3, bee8c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   bee7c:	4a06      	ldr	r2, [pc, #24]	; (bee98 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   bee7e:	4907      	ldr	r1, [pc, #28]	; (bee9c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   bee80:	200a      	movs	r0, #10
}
   bee82:	b007      	add	sp, #28
   bee84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   bee88:	f7fe beb8 	b.w	bdbfc <panic_>
}
   bee8c:	b007      	add	sp, #28
   bee8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bee92:	bf00      	nop
   bee94:	000c7834 	.word	0x000c7834
   bee98:	000bd83d 	.word	0x000bd83d
   bee9c:	000c76dd 	.word	0x000c76dd

000beea0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   beea0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   beea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   beea4:	4604      	mov	r4, r0
   beea6:	460d      	mov	r5, r1
   beea8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   beeaa:	d914      	bls.n	beed6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   beeac:	4290      	cmp	r0, r2
   beeae:	d213      	bcs.n	beed8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   beeb0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   beeb4:	1a75      	subs	r5, r6, r1
   beeb6:	f1a1 0708 	sub.w	r7, r1, #8
   beeba:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   beebc:	42b7      	cmp	r7, r6
   beebe:	d018      	beq.n	beef2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   beec0:	b11c      	cbz	r4, beeca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   beec2:	4631      	mov	r1, r6
   beec4:	4620      	mov	r0, r4
   beec6:	f7ff fc68 	bl	be79a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   beeca:	1d30      	adds	r0, r6, #4
   beecc:	f7f6 feae 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   beed0:	3e08      	subs	r6, #8
   beed2:	3c08      	subs	r4, #8
   beed4:	e7f2      	b.n	beebc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   beed6:	d00c      	beq.n	beef2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   beed8:	42b5      	cmp	r5, r6
   beeda:	d00a      	beq.n	beef2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   beedc:	b11c      	cbz	r4, beee6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   beede:	4629      	mov	r1, r5
   beee0:	4620      	mov	r0, r4
   beee2:	f7ff fc5a 	bl	be79a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   beee6:	1d28      	adds	r0, r5, #4
   beee8:	f7f6 fea0 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   beeec:	3508      	adds	r5, #8
   beeee:	3408      	adds	r4, #8
   beef0:	e7f2      	b.n	beed8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   beef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000beef4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   beef4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   beef6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   beef8:	4605      	mov	r5, r0
        if (n > 0) {
   beefa:	dd11      	ble.n	bef20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   beefc:	00f0      	lsls	r0, r6, #3
   beefe:	f7fe ff83 	bl	bde08 <malloc>
            if (!d) {
   bef02:	4604      	mov	r4, r0
   bef04:	b158      	cbz	r0, bef1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bef06:	e9d5 1200 	ldrd	r1, r2, [r5]
   bef0a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bef0e:	f7ff ffc7 	bl	beea0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bef12:	6828      	ldr	r0, [r5, #0]
   bef14:	f7fe ff80 	bl	bde18 <free>
        data_ = d;
   bef18:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bef1a:	60ae      	str	r6, [r5, #8]
        return true;
   bef1c:	2001      	movs	r0, #1
    }
   bef1e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bef20:	2400      	movs	r4, #0
   bef22:	e7f6      	b.n	bef12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bef24 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bef24:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bef26:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bef28:	6845      	ldr	r5, [r0, #4]
   bef2a:	4668      	mov	r0, sp
   bef2c:	f7ff fc35 	bl	be79a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bef30:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bef34:	4299      	cmp	r1, r3
   bef36:	da10      	bge.n	bef5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bef38:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bef3a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bef3c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bef40:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bef44:	4629      	mov	r1, r5
   bef46:	f105 0008 	add.w	r0, r5, #8
   bef4a:	f7ff ffa9 	bl	beea0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bef4e:	b98d      	cbnz	r5, bef74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bef50:	6863      	ldr	r3, [r4, #4]
   bef52:	3301      	adds	r3, #1
   bef54:	6063      	str	r3, [r4, #4]
    return true;
   bef56:	2601      	movs	r6, #1
   bef58:	e006      	b.n	bef68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bef5a:	3101      	adds	r1, #1
   bef5c:	4620      	mov	r0, r4
   bef5e:	f7ff ffc9 	bl	beef4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bef62:	4606      	mov	r6, r0
   bef64:	2800      	cmp	r0, #0
   bef66:	d1e7      	bne.n	bef38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   bef68:	a801      	add	r0, sp, #4
   bef6a:	f7f6 fe5f 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bef6e:	4630      	mov	r0, r6
   bef70:	b002      	add	sp, #8
   bef72:	bd70      	pop	{r4, r5, r6, pc}
   bef74:	4669      	mov	r1, sp
   bef76:	4628      	mov	r0, r5
   bef78:	f7ff fc0f 	bl	be79a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bef7c:	e7e8      	b.n	bef50 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bef7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bef7e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bef80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bef82:	4604      	mov	r4, r0
   bef84:	460d      	mov	r5, r1
   bef86:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bef88:	d914      	bls.n	befb4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bef8a:	4290      	cmp	r0, r2
   bef8c:	d213      	bcs.n	befb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bef8e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bef92:	1a75      	subs	r5, r6, r1
   bef94:	f1a1 0708 	sub.w	r7, r1, #8
   bef98:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bef9a:	42b7      	cmp	r7, r6
   bef9c:	d018      	beq.n	befd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bef9e:	b11c      	cbz	r4, befa8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   befa0:	4631      	mov	r1, r6
   befa2:	4620      	mov	r0, r4
   befa4:	f7ff fbeb 	bl	be77e <_ZN8particle17BleCharacteristicC1ERKS0_>
   befa8:	1d30      	adds	r0, r6, #4
   befaa:	f7f6 fe3f 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   befae:	3e08      	subs	r6, #8
   befb0:	3c08      	subs	r4, #8
   befb2:	e7f2      	b.n	bef9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   befb4:	d00c      	beq.n	befd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   befb6:	42b5      	cmp	r5, r6
   befb8:	d00a      	beq.n	befd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   befba:	b11c      	cbz	r4, befc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   befbc:	4629      	mov	r1, r5
   befbe:	4620      	mov	r0, r4
   befc0:	f7ff fbdd 	bl	be77e <_ZN8particle17BleCharacteristicC1ERKS0_>
   befc4:	1d28      	adds	r0, r5, #4
   befc6:	f7f6 fe31 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   befca:	3508      	adds	r5, #8
   befcc:	3408      	adds	r4, #8
   befce:	e7f2      	b.n	befb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   befd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000befd2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   befd2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   befd4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   befd6:	4605      	mov	r5, r0
        if (n > 0) {
   befd8:	dd11      	ble.n	beffe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   befda:	00f0      	lsls	r0, r6, #3
   befdc:	f7fe ff14 	bl	bde08 <malloc>
            if (!d) {
   befe0:	4604      	mov	r4, r0
   befe2:	b158      	cbz	r0, beffc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   befe4:	e9d5 1200 	ldrd	r1, r2, [r5]
   befe8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   befec:	f7ff ffc7 	bl	bef7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   beff0:	6828      	ldr	r0, [r5, #0]
   beff2:	f7fe ff11 	bl	bde18 <free>
        data_ = d;
   beff6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   beff8:	60ae      	str	r6, [r5, #8]
        return true;
   beffa:	2001      	movs	r0, #1
    }
   beffc:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   beffe:	2400      	movs	r4, #0
   bf000:	e7f6      	b.n	beff0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf002 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf002:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf004:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf006:	6845      	ldr	r5, [r0, #4]
   bf008:	4668      	mov	r0, sp
   bf00a:	f7ff fbb8 	bl	be77e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf00e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf012:	4299      	cmp	r1, r3
   bf014:	da10      	bge.n	bf038 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf016:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf018:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf01a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf01e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf022:	4629      	mov	r1, r5
   bf024:	f105 0008 	add.w	r0, r5, #8
   bf028:	f7ff ffa9 	bl	bef7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf02c:	b98d      	cbnz	r5, bf052 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf02e:	6863      	ldr	r3, [r4, #4]
   bf030:	3301      	adds	r3, #1
   bf032:	6063      	str	r3, [r4, #4]
    return true;
   bf034:	2601      	movs	r6, #1
   bf036:	e006      	b.n	bf046 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf038:	3101      	adds	r1, #1
   bf03a:	4620      	mov	r0, r4
   bf03c:	f7ff ffc9 	bl	befd2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf040:	4606      	mov	r6, r0
   bf042:	2800      	cmp	r0, #0
   bf044:	d1e7      	bne.n	bf016 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf046:	a801      	add	r0, sp, #4
   bf048:	f7f6 fdf0 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf04c:	4630      	mov	r0, r6
   bf04e:	b002      	add	sp, #8
   bf050:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bf052:	4669      	mov	r1, sp
   bf054:	4628      	mov	r0, r5
   bf056:	f7ff fb92 	bl	be77e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf05a:	e7e8      	b.n	bf02e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf05c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bf05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf060:	4617      	mov	r7, r2
   bf062:	b0a1      	sub	sp, #132	; 0x84
   bf064:	4680      	mov	r8, r0
    WiringBleLock lk;
   bf066:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bf068:	460e      	mov	r6, r1
    WiringBleLock lk;
   bf06a:	f7ff f82b 	bl	be0c4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bf06e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   bf070:	7923      	ldrb	r3, [r4, #4]
   bf072:	b953      	cbnz	r3, bf08a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   bf074:	4639      	mov	r1, r7
   bf076:	4640      	mov	r0, r8
   bf078:	f7ff fb81 	bl	be77e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   bf07c:	a80a      	add	r0, sp, #40	; 0x28
   bf07e:	f7ff f82f 	bl	be0e0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   bf082:	4640      	mov	r0, r8
   bf084:	b021      	add	sp, #132	; 0x84
   bf086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bf08a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   bf08c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   bf090:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   bf094:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   bf096:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   bf09a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   bf09e:	9b03      	ldr	r3, [sp, #12]
   bf0a0:	429d      	cmp	r5, r3
   bf0a2:	d021      	beq.n	bf0e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   bf0a4:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   bf0a8:	4658      	mov	r0, fp
   bf0aa:	f109 0114 	add.w	r1, r9, #20
   bf0ae:	f7ff f8b6 	bl	be21e <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   bf0b2:	b1b8      	cbz	r0, bf0e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   bf0b4:	f109 0128 	add.w	r1, r9, #40	; 0x28
   bf0b8:	4650      	mov	r0, sl
   bf0ba:	f7ff f8b0 	bl	be21e <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   bf0be:	b188      	cbz	r0, bf0e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   bf0c0:	6823      	ldr	r3, [r4, #0]
   bf0c2:	f8d9 2000 	ldr.w	r2, [r9]
   bf0c6:	4053      	eors	r3, r2
   bf0c8:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   bf0cc:	d10a      	bne.n	bf0e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   bf0ce:	2220      	movs	r2, #32
   bf0d0:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   bf0d4:	4a5e      	ldr	r2, [pc, #376]	; (bf250 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   bf0d6:	9200      	str	r2, [sp, #0]
   bf0d8:	aa15      	add	r2, sp, #84	; 0x54
   bf0da:	495e      	ldr	r1, [pc, #376]	; (bf254 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   bf0dc:	2032      	movs	r0, #50	; 0x32
   bf0de:	f7fe fd95 	bl	bdc0c <log_message>
   bf0e2:	e7c7      	b.n	bf074 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   bf0e4:	3508      	adds	r5, #8
   bf0e6:	e7da      	b.n	bf09e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   bf0e8:	4650      	mov	r0, sl
   bf0ea:	f7ff f869 	bl	be1c0 <_ZNK8particle7BleUuid7isValidEv>
   bf0ee:	b960      	cbnz	r0, bf10a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   bf0f0:	4959      	ldr	r1, [pc, #356]	; (bf258 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   bf0f2:	2201      	movs	r2, #1
   bf0f4:	a815      	add	r0, sp, #84	; 0x54
   bf0f6:	ad15      	add	r5, sp, #84	; 0x54
   bf0f8:	f7ff f83a 	bl	be170 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   bf0fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf0fe:	46d4      	mov	ip, sl
   bf100:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bf104:	682b      	ldr	r3, [r5, #0]
   bf106:	f8cc 3000 	str.w	r3, [ip]
   bf10a:	6833      	ldr	r3, [r6, #0]
   bf10c:	e9d3 5300 	ldrd	r5, r3, [r3]
   bf110:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   bf114:	455d      	cmp	r5, fp
   bf116:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   bf118:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   bf11a:	d06e      	beq.n	bf1fa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   bf11c:	f855 0b08 	ldr.w	r0, [r5], #8
   bf120:	f7ff f87d 	bl	be21e <_ZNK8particle7BleUuideqERKS0_>
   bf124:	2800      	cmp	r0, #0
   bf126:	d0f5      	beq.n	bf114 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   bf128:	f104 0a14 	add.w	sl, r4, #20
   bf12c:	4650      	mov	r0, sl
   bf12e:	f7ff f847 	bl	be1c0 <_ZNK8particle7BleUuid7isValidEv>
   bf132:	b988      	cbnz	r0, bf158 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   bf134:	4b49      	ldr	r3, [pc, #292]	; (bf25c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf136:	4948      	ldr	r1, [pc, #288]	; (bf258 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   bf138:	881a      	ldrh	r2, [r3, #0]
   bf13a:	3201      	adds	r2, #1
   bf13c:	b292      	uxth	r2, r2
   bf13e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf140:	a815      	add	r0, sp, #84	; 0x54
   bf142:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   bf144:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf146:	f7ff f832 	bl	be1ae <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   bf14a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf14c:	46d4      	mov	ip, sl
   bf14e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bf152:	682b      	ldr	r3, [r5, #0]
   bf154:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   bf158:	4b41      	ldr	r3, [pc, #260]	; (bf260 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   bf15a:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   bf15c:	2228      	movs	r2, #40	; 0x28
   bf15e:	2100      	movs	r1, #0
   bf160:	a816      	add	r0, sp, #88	; 0x58
   bf162:	f004 ff8d 	bl	c4080 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   bf166:	4651      	mov	r1, sl
   bf168:	a804      	add	r0, sp, #16
   bf16a:	f7ff f83b 	bl	be1e4 <_ZN8particle7BleUuid7halUUIDEv>
   bf16e:	ab04      	add	r3, sp, #16
   bf170:	aa18      	add	r2, sp, #96	; 0x60
   bf172:	f10d 0c20 	add.w	ip, sp, #32
   bf176:	6818      	ldr	r0, [r3, #0]
   bf178:	6859      	ldr	r1, [r3, #4]
   bf17a:	4615      	mov	r5, r2
   bf17c:	c503      	stmia	r5!, {r0, r1}
   bf17e:	3308      	adds	r3, #8
   bf180:	4563      	cmp	r3, ip
   bf182:	462a      	mov	r2, r5
   bf184:	d1f7      	bne.n	bf176 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   bf186:	6818      	ldr	r0, [r3, #0]
   bf188:	6028      	str	r0, [r5, #0]
    return value_;
   bf18a:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   bf18c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   bf190:	f8d9 3000 	ldr.w	r3, [r9]
   bf194:	8a9b      	ldrh	r3, [r3, #20]
   bf196:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bf19a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bf19c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bf19e:	4b31      	ldr	r3, [pc, #196]	; (bf264 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bf1a0:	2200      	movs	r2, #0
   bf1a2:	1da1      	adds	r1, r4, #6
   bf1a4:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bf1a6:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bf1aa:	f7fe fabf 	bl	bd72c <hal_ble_gatt_server_add_characteristic>
   bf1ae:	2800      	cmp	r0, #0
   bf1b0:	f47f af60 	bne.w	bf074 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bf1b4:	2301      	movs	r3, #1
   bf1b6:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bf1b8:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bf1ba:	4639      	mov	r1, r7
        return characteristics_;
   bf1bc:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bf1be:	a80d      	add	r0, sp, #52	; 0x34
   bf1c0:	f7ff fadd 	bl	be77e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf1c4:	4620      	mov	r0, r4
   bf1c6:	a90d      	add	r1, sp, #52	; 0x34
   bf1c8:	f7ff ff1b 	bl	bf002 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bf1cc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bf1ce:	a80e      	add	r0, sp, #56	; 0x38
   bf1d0:	f7f6 fd2c 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf1d4:	2c00      	cmp	r4, #0
   bf1d6:	f47f af4d 	bne.w	bf074 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bf1da:	2320      	movs	r3, #32
   bf1dc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bf1e0:	4b21      	ldr	r3, [pc, #132]	; (bf268 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bf1e2:	9300      	str	r3, [sp, #0]
   bf1e4:	aa0d      	add	r2, sp, #52	; 0x34
   bf1e6:	4623      	mov	r3, r4
   bf1e8:	e777      	b.n	bf0da <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bf1ea:	4639      	mov	r1, r7
   bf1ec:	4640      	mov	r0, r8
   bf1ee:	f7ff fac6 	bl	be77e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf1f2:	a80c      	add	r0, sp, #48	; 0x30
   bf1f4:	f7f6 fd1a 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf1f8:	e740      	b.n	bf07c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   bf1fa:	a80b      	add	r0, sp, #44	; 0x2c
   bf1fc:	f7ff f92c 	bl	be458 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   bf200:	4651      	mov	r1, sl
   bf202:	a815      	add	r0, sp, #84	; 0x54
   bf204:	f7fe ffee 	bl	be1e4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   bf208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf20a:	2300      	movs	r3, #0
   bf20c:	3214      	adds	r2, #20
   bf20e:	a915      	add	r1, sp, #84	; 0x54
   bf210:	2001      	movs	r0, #1
   bf212:	f7fe fa63 	bl	bd6dc <hal_ble_gatt_server_add_service>
   bf216:	2800      	cmp	r0, #0
   bf218:	d1e7      	bne.n	bf1ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   bf21a:	6835      	ldr	r5, [r6, #0]
   bf21c:	a90b      	add	r1, sp, #44	; 0x2c
   bf21e:	a80d      	add	r0, sp, #52	; 0x34
   bf220:	f7ff fabb 	bl	be79a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   bf224:	4628      	mov	r0, r5
   bf226:	a90d      	add	r1, sp, #52	; 0x34
   bf228:	f7ff fe7c 	bl	bef24 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bf22c:	4605      	mov	r5, r0
   bf22e:	a80e      	add	r0, sp, #56	; 0x38
   bf230:	f7f6 fcfc 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf234:	2d00      	cmp	r5, #0
   bf236:	d0d8      	beq.n	bf1ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   bf238:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   bf23a:	6853      	ldr	r3, [r2, #4]
   bf23c:	6812      	ldr	r2, [r2, #0]
   bf23e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   bf242:	3b01      	subs	r3, #1
   bf244:	a80c      	add	r0, sp, #48	; 0x30
   bf246:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   bf24a:	f7f6 fcef 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf24e:	e76b      	b.n	bf128 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   bf250:	000c77d7 	.word	0x000c77d7
   bf254:	000c76f4 	.word	0x000c76f4
   bf258:	000c789e 	.word	0x000c789e
   bf25c:	2003e620 	.word	0x2003e620
   bf260:	002c0003 	.word	0x002c0003
   bf264:	000be5f1 	.word	0x000be5f1
   bf268:	000c7802 	.word	0x000c7802

000bf26c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bf26c:	4802      	ldr	r0, [pc, #8]	; (bf278 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bf26e:	2300      	movs	r3, #0
   bf270:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bf272:	f7fe bab3 	b.w	bd7dc <os_mutex_recursive_create>
   bf276:	bf00      	nop
   bf278:	2003e624 	.word	0x2003e624

000bf27c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bf27c:	2200      	movs	r2, #0
   bf27e:	6840      	ldr	r0, [r0, #4]
   bf280:	4611      	mov	r1, r2
   bf282:	f7fe bd79 	b.w	bdd78 <network_ready>

000bf286 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bf286:	2200      	movs	r2, #0
   bf288:	6840      	ldr	r0, [r0, #4]
   bf28a:	4611      	mov	r1, r2
   bf28c:	f7fe bd94 	b.w	bddb8 <network_listening>

000bf290 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bf290:	2200      	movs	r2, #0
   bf292:	6840      	ldr	r0, [r0, #4]
   bf294:	4611      	mov	r1, r2
   bf296:	f7fe bd9f 	b.w	bddd8 <network_get_listen_timeout>

000bf29a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bf29a:	6840      	ldr	r0, [r0, #4]
   bf29c:	2200      	movs	r2, #0
   bf29e:	f7fe bd93 	b.w	bddc8 <network_set_listen_timeout>

000bf2a2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bf2a2:	6840      	ldr	r0, [r0, #4]
   bf2a4:	2200      	movs	r2, #0
   bf2a6:	f081 0101 	eor.w	r1, r1, #1
   bf2aa:	f7fe bd7d 	b.w	bdda8 <network_listen>

000bf2ae <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bf2ae:	2300      	movs	r3, #0
   bf2b0:	6840      	ldr	r0, [r0, #4]
   bf2b2:	461a      	mov	r2, r3
   bf2b4:	4619      	mov	r1, r3
   bf2b6:	f7fe bd6f 	b.w	bdd98 <network_off>

000bf2ba <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bf2ba:	2300      	movs	r3, #0
   bf2bc:	6840      	ldr	r0, [r0, #4]
   bf2be:	461a      	mov	r2, r3
   bf2c0:	4619      	mov	r1, r3
   bf2c2:	f7fe bd61 	b.w	bdd88 <network_on>

000bf2c6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bf2c6:	2200      	movs	r2, #0
   bf2c8:	6840      	ldr	r0, [r0, #4]
   bf2ca:	4611      	mov	r1, r2
   bf2cc:	f7fe bd44 	b.w	bdd58 <network_connecting>

000bf2d0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bf2d0:	6840      	ldr	r0, [r0, #4]
   bf2d2:	2200      	movs	r2, #0
   bf2d4:	2102      	movs	r1, #2
   bf2d6:	f7fe bd47 	b.w	bdd68 <network_disconnect>

000bf2da <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bf2da:	2300      	movs	r3, #0
   bf2dc:	6840      	ldr	r0, [r0, #4]
   bf2de:	461a      	mov	r2, r3
   bf2e0:	f7fe bd32 	b.w	bdd48 <network_connect>

000bf2e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bf2e4:	4b08      	ldr	r3, [pc, #32]	; (bf308 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bf2e6:	b510      	push	{r4, lr}
   bf2e8:	2428      	movs	r4, #40	; 0x28
   bf2ea:	4622      	mov	r2, r4
   bf2ec:	4618      	mov	r0, r3
   bf2ee:	2100      	movs	r1, #0
   bf2f0:	f004 fec6 	bl	c4080 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bf2f4:	4b05      	ldr	r3, [pc, #20]	; (bf30c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bf2f6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bf2f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf2fc:	6042      	str	r2, [r0, #4]
   bf2fe:	2204      	movs	r2, #4
   bf300:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bf302:	4a03      	ldr	r2, [pc, #12]	; (bf310 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bf304:	601a      	str	r2, [r3, #0]
   bf306:	bd10      	pop	{r4, pc}
   bf308:	2003e634 	.word	0x2003e634
   bf30c:	2003e62c 	.word	0x2003e62c
   bf310:	000c78c8 	.word	0x000c78c8

000bf314 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bf314:	4770      	bx	lr

000bf316 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bf316:	2000      	movs	r0, #0
   bf318:	4770      	bx	lr

000bf31a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bf31a:	b510      	push	{r4, lr}
   bf31c:	2110      	movs	r1, #16
   bf31e:	4604      	mov	r4, r0
   bf320:	f7f4 febf 	bl	b40a2 <_ZdlPvj>
   bf324:	4620      	mov	r0, r4
   bf326:	bd10      	pop	{r4, pc}

000bf328 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bf328:	b508      	push	{r3, lr}
      { delete this; }
   bf32a:	f7ff fff6 	bl	bf31a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bf32e:	bd08      	pop	{r3, pc}

000bf330 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bf330:	b530      	push	{r4, r5, lr}
        type_(type) {
   bf332:	2200      	movs	r2, #0
   bf334:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bf338:	6002      	str	r2, [r0, #0]
   bf33a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bf33c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bf33e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bf340:	680c      	ldr	r4, [r1, #0]
   bf342:	8085      	strh	r5, [r0, #4]
   bf344:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf346:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bf348:	bd30      	pop	{r4, r5, pc}

000bf34a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bf34a:	b510      	push	{r4, lr}
   bf34c:	4604      	mov	r4, r0
    free((void*)msg_);
   bf34e:	6800      	ldr	r0, [r0, #0]
   bf350:	f7fe fd62 	bl	bde18 <free>
}
   bf354:	4620      	mov	r0, r4
   bf356:	bd10      	pop	{r4, pc}

000bf358 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bf358:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bf35a:	68c4      	ldr	r4, [r0, #12]
   bf35c:	b1f4      	cbz	r4, bf39c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bf35e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bf360:	2b02      	cmp	r3, #2
   bf362:	d103      	bne.n	bf36c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bf364:	f104 000c 	add.w	r0, r4, #12
   bf368:	f7ff ffef 	bl	bf34a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bf36c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bf36e:	b135      	cbz	r5, bf37e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bf370:	4628      	mov	r0, r5
   bf372:	f7f5 f873 	bl	b445c <_ZNSt14_Function_baseD1Ev>
   bf376:	2110      	movs	r1, #16
   bf378:	4628      	mov	r0, r5
   bf37a:	f7f4 fe92 	bl	b40a2 <_ZdlPvj>
   bf37e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bf380:	b135      	cbz	r5, bf390 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bf382:	4628      	mov	r0, r5
   bf384:	f7f5 f86a 	bl	b445c <_ZNSt14_Function_baseD1Ev>
   bf388:	2110      	movs	r1, #16
   bf38a:	4628      	mov	r0, r5
   bf38c:	f7f4 fe89 	bl	b40a2 <_ZdlPvj>
   bf390:	4620      	mov	r0, r4
   bf392:	2114      	movs	r1, #20
   bf394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf398:	f7f4 be83 	b.w	b40a2 <_ZdlPvj>
   bf39c:	bd38      	pop	{r3, r4, r5, pc}

000bf39e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf39e:	680b      	ldr	r3, [r1, #0]
   bf3a0:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bf3a2:	684b      	ldr	r3, [r1, #4]
   bf3a4:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bf3a6:	b113      	cbz	r3, bf3ae <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bf3a8:	685a      	ldr	r2, [r3, #4]
   bf3aa:	3201      	adds	r2, #1
   bf3ac:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf3ae:	4770      	bx	lr

000bf3b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bf3b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf3b2:	4604      	mov	r4, r0
   bf3b4:	4668      	mov	r0, sp
   bf3b6:	460d      	mov	r5, r1
   bf3b8:	f7ff fff1 	bl	bf39e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf3bc:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf3be:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf3c0:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bf3c2:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bf3c4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bf3c6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bf3c8:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bf3ca:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bf3cc:	f7f6 fc2e 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bf3d0:	b135      	cbz	r5, bf3e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bf3d2:	1d28      	adds	r0, r5, #4
   bf3d4:	f7f6 fc2a 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf3d8:	2108      	movs	r1, #8
   bf3da:	4628      	mov	r0, r5
   bf3dc:	f7f4 fe61 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   bf3e0:	4620      	mov	r0, r4
   bf3e2:	b003      	add	sp, #12
   bf3e4:	bd30      	pop	{r4, r5, pc}

000bf3e6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bf3e6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf3e8:	b510      	push	{r4, lr}
      if (_M_empty())
   bf3ea:	b90a      	cbnz	r2, bf3f0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bf3ec:	f002 fc22 	bl	c1c34 <_ZSt25__throw_bad_function_callv>
    }
   bf3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf3f4:	68c3      	ldr	r3, [r0, #12]
   bf3f6:	4718      	bx	r3

000bf3f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bf3f8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bf3fa:	6800      	ldr	r0, [r0, #0]
   bf3fc:	f100 0110 	add.w	r1, r0, #16
   bf400:	f7ff fff1 	bl	bf3e6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bf404:	bd08      	pop	{r3, pc}

000bf406 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bf406:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf408:	b510      	push	{r4, lr}
      if (_M_empty())
   bf40a:	b90a      	cbnz	r2, bf410 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bf40c:	f002 fc12 	bl	c1c34 <_ZSt25__throw_bad_function_callv>
    }
   bf410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf414:	68c3      	ldr	r3, [r0, #12]
   bf416:	4718      	bx	r3

000bf418 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bf418:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bf41a:	6800      	ldr	r0, [r0, #0]
   bf41c:	f100 0110 	add.w	r1, r0, #16
   bf420:	f7ff fff1 	bl	bf406 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bf424:	bd08      	pop	{r3, pc}
	...

000bf428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bf428:	b538      	push	{r3, r4, r5, lr}
   bf42a:	2300      	movs	r3, #0
   bf42c:	4604      	mov	r4, r0
   bf42e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf430:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bf432:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf434:	f7f4 fe2f 	bl	b4096 <_Znwj>
   bf438:	b128      	cbz	r0, bf446 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bf43a:	2301      	movs	r3, #1
   bf43c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bf440:	4b02      	ldr	r3, [pc, #8]	; (bf44c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bf442:	6003      	str	r3, [r0, #0]
   bf444:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf446:	6020      	str	r0, [r4, #0]
	}
   bf448:	4620      	mov	r0, r4
   bf44a:	bd38      	pop	{r3, r4, r5, pc}
   bf44c:	000c7904 	.word	0x000c7904

000bf450 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bf450:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bf452:	2300      	movs	r3, #0
   bf454:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bf456:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bf458:	4604      	mov	r4, r0
   bf45a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bf45c:	b12b      	cbz	r3, bf46a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bf45e:	2202      	movs	r2, #2
   bf460:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bf462:	68eb      	ldr	r3, [r5, #12]
   bf464:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bf466:	68ab      	ldr	r3, [r5, #8]
   bf468:	60a3      	str	r3, [r4, #8]
    }
   bf46a:	4620      	mov	r0, r4
   bf46c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bf470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bf470:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf472:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bf474:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bf476:	4668      	mov	r0, sp
   bf478:	f7ff ff5a 	bl	bf330 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bf47c:	f04f 0302 	mov.w	r3, #2
   bf480:	e8d4 2f4f 	ldrexb	r2, [r4]
   bf484:	2a00      	cmp	r2, #0
   bf486:	d103      	bne.n	bf490 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bf488:	e8c4 3f41 	strexb	r1, r3, [r4]
   bf48c:	2900      	cmp	r1, #0
   bf48e:	d1f7      	bne.n	bf480 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bf490:	d125      	bne.n	bf4de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bf492:	f104 050c 	add.w	r5, r4, #12
   bf496:	4669      	mov	r1, sp
   bf498:	4628      	mov	r0, r5
   bf49a:	f7ff ff49 	bl	bf330 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bf49e:	f3bf 8f5b 	dmb	ish
   bf4a2:	2301      	movs	r3, #1
   bf4a4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bf4a6:	2000      	movs	r0, #0
   bf4a8:	f104 0308 	add.w	r3, r4, #8
   bf4ac:	f3bf 8f5b 	dmb	ish
   bf4b0:	e853 6f00 	ldrex	r6, [r3]
   bf4b4:	e843 0200 	strex	r2, r0, [r3]
   bf4b8:	2a00      	cmp	r2, #0
   bf4ba:	d1f9      	bne.n	bf4b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bf4bc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bf4c0:	b16e      	cbz	r6, bf4de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bf4c2:	f7fe fbdd 	bl	bdc80 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bf4c6:	b178      	cbz	r0, bf4e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bf4c8:	4629      	mov	r1, r5
   bf4ca:	4630      	mov	r0, r6
   bf4cc:	f7ff ff8b 	bl	bf3e6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bf4d0:	4630      	mov	r0, r6
   bf4d2:	f7f4 ffc3 	bl	b445c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bf4d6:	2110      	movs	r1, #16
   bf4d8:	4630      	mov	r0, r6
   bf4da:	f7f4 fde2 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   bf4de:	4668      	mov	r0, sp
   bf4e0:	f7ff ff33 	bl	bf34a <_ZN8particle5ErrorD1Ev>
    }
   bf4e4:	b009      	add	sp, #36	; 0x24
   bf4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bf4e8:	4631      	mov	r1, r6
   bf4ea:	a802      	add	r0, sp, #8
   bf4ec:	f7ff ffb0 	bl	bf450 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bf4f0:	68e0      	ldr	r0, [r4, #12]
   bf4f2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf4f6:	b108      	cbz	r0, bf4fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bf4f8:	f004 fe30 	bl	c415c <strdup>
        type_(type) {
   bf4fc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bf4fe:	2010      	movs	r0, #16
   bf500:	f8ad 501c 	strh.w	r5, [sp, #28]
   bf504:	f7f4 fdc7 	bl	b4096 <_Znwj>
   bf508:	4605      	mov	r5, r0
   bf50a:	b1e8      	cbz	r0, bf548 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bf50c:	2700      	movs	r7, #0
   bf50e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf510:	2018      	movs	r0, #24
   bf512:	f7f4 fdc0 	bl	b4096 <_Znwj>
   bf516:	4604      	mov	r4, r0
   bf518:	b188      	cbz	r0, bf53e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bf51a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bf51c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bf51e:	a802      	add	r0, sp, #8
   bf520:	f7ff fc24 	bl	bed6c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf524:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bf526:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf528:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf52a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bf52c:	9204      	str	r2, [sp, #16]
   bf52e:	a906      	add	r1, sp, #24
   bf530:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf532:	60e3      	str	r3, [r4, #12]
   bf534:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bf538:	9205      	str	r2, [sp, #20]
   bf53a:	f7ff fef9 	bl	bf330 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bf53e:	4b08      	ldr	r3, [pc, #32]	; (bf560 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bf540:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bf542:	4b08      	ldr	r3, [pc, #32]	; (bf564 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf544:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bf546:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bf548:	a806      	add	r0, sp, #24
   bf54a:	f7ff fefe 	bl	bf34a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bf54e:	a802      	add	r0, sp, #8
   bf550:	f7f4 ff84 	bl	b445c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bf554:	2200      	movs	r2, #0
   bf556:	4629      	mov	r1, r5
   bf558:	4803      	ldr	r0, [pc, #12]	; (bf568 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bf55a:	f7fe fb99 	bl	bdc90 <application_thread_invoke>
   bf55e:	e7b7      	b.n	bf4d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bf560:	000bf3f9 	.word	0x000bf3f9
   bf564:	000bf67d 	.word	0x000bf67d
   bf568:	000bdef7 	.word	0x000bdef7

000bf56c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bf56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf570:	b08b      	sub	sp, #44	; 0x2c
   bf572:	4605      	mov	r5, r0
   bf574:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bf578:	460f      	mov	r7, r1
   bf57a:	4690      	mov	r8, r2
   bf57c:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bf57e:	f7fe fbbb 	bl	bdcf8 <spark_cloud_flag_connected>
   bf582:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bf584:	4683      	mov	fp, r0
   bf586:	bb38      	cbnz	r0, bf5d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bf588:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bf58c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bf58e:	a905      	add	r1, sp, #20
   bf590:	4630      	mov	r0, r6
   bf592:	f8ad 3018 	strh.w	r3, [sp, #24]
   bf596:	f7ff fecb 	bl	bf330 <_ZN8particle5ErrorC1EOS0_>
   bf59a:	2014      	movs	r0, #20
   bf59c:	f7f4 fd7b 	bl	b4096 <_Znwj>
   bf5a0:	4604      	mov	r4, r0
   bf5a2:	b148      	cbz	r0, bf5b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bf5a4:	2302      	movs	r3, #2
   bf5a6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bf5a8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bf5aa:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bf5ae:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bf5b0:	4631      	mov	r1, r6
   bf5b2:	300c      	adds	r0, #12
   bf5b4:	f7ff febc 	bl	bf330 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bf5b8:	4628      	mov	r0, r5
	: __shared_count(__p)
   bf5ba:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bf5bc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bf5c0:	f7ff ff32 	bl	bf428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bf5c4:	4630      	mov	r0, r6
   bf5c6:	f7ff fec0 	bl	bf34a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bf5ca:	a805      	add	r0, sp, #20
   bf5cc:	f7ff febd 	bl	bf34a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bf5d0:	4628      	mov	r0, r5
   bf5d2:	b00b      	add	sp, #44	; 0x2c
   bf5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bf5d8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bf5da:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bf5dc:	2014      	movs	r0, #20
   bf5de:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bf5e2:	9307      	str	r3, [sp, #28]
   bf5e4:	f7f4 fd57 	bl	b4096 <_Znwj>
   bf5e8:	4601      	mov	r1, r0
   bf5ea:	b118      	cbz	r0, bf5f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bf5ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bf5f0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bf5f2:	7044      	strb	r4, [r0, #1]
   bf5f4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bf5f6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bf5f8:	f7ff ff16 	bl	bf428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bf5fc:	4b1e      	ldr	r3, [pc, #120]	; (bf678 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bf5fe:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bf600:	2008      	movs	r0, #8
   bf602:	f7f4 fd48 	bl	b4096 <_Znwj>
   bf606:	4604      	mov	r4, r0
   bf608:	b110      	cbz	r0, bf610 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bf60a:	a903      	add	r1, sp, #12
   bf60c:	f7ff fec7 	bl	bf39e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bf610:	9600      	str	r6, [sp, #0]
   bf612:	fa5f f38a 	uxtb.w	r3, sl
   bf616:	464a      	mov	r2, r9
   bf618:	4641      	mov	r1, r8
   bf61a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bf61c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bf61e:	f7fe fb73 	bl	bdd08 <spark_send_event>
   bf622:	b9b8      	cbnz	r0, bf654 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bf624:	9b03      	ldr	r3, [sp, #12]
   bf626:	785b      	ldrb	r3, [r3, #1]
   bf628:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bf62c:	b993      	cbnz	r3, bf654 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bf62e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bf632:	a905      	add	r1, sp, #20
   bf634:	a803      	add	r0, sp, #12
   bf636:	9205      	str	r2, [sp, #20]
   bf638:	f8ad 3018 	strh.w	r3, [sp, #24]
   bf63c:	f7ff ff18 	bl	bf470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bf640:	a805      	add	r0, sp, #20
   bf642:	f7ff fe82 	bl	bf34a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bf646:	a805      	add	r0, sp, #20
   bf648:	9909      	ldr	r1, [sp, #36]	; 0x24
   bf64a:	f7ff feb1 	bl	bf3b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bf64e:	a806      	add	r0, sp, #24
   bf650:	f7f6 faec 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf654:	a903      	add	r1, sp, #12
   bf656:	a805      	add	r0, sp, #20
   bf658:	f7ff fea1 	bl	bf39e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf65c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf65e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf660:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bf662:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bf664:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bf666:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bf668:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bf66a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bf66c:	f7f6 fade 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf670:	a804      	add	r0, sp, #16
   bf672:	f7f6 fadb 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bf676:	e7ab      	b.n	bf5d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bf678:	000bf6f9 	.word	0x000bf6f9

000bf67c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bf67c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bf67e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf680:	4605      	mov	r5, r0
	switch (__op)
   bf682:	d103      	bne.n	bf68c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bf684:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bf686:	6003      	str	r3, [r0, #0]
      }
   bf688:	2000      	movs	r0, #0
   bf68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bf68c:	2a02      	cmp	r2, #2
   bf68e:	d010      	beq.n	bf6b2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bf690:	2a03      	cmp	r2, #3
   bf692:	d1f9      	bne.n	bf688 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bf694:	6804      	ldr	r4, [r0, #0]
   bf696:	2c00      	cmp	r4, #0
   bf698:	d0f6      	beq.n	bf688 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bf69a:	f104 0010 	add.w	r0, r4, #16
   bf69e:	f7ff fe54 	bl	bf34a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bf6a2:	4620      	mov	r0, r4
   bf6a4:	f7f4 feda 	bl	b445c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bf6a8:	2118      	movs	r1, #24
   bf6aa:	4620      	mov	r0, r4
   bf6ac:	f7f4 fcf9 	bl	b40a2 <_ZdlPvj>
   bf6b0:	e7ea      	b.n	bf688 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bf6b2:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bf6b4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bf6b6:	f7f4 fcee 	bl	b4096 <_Znwj>
   bf6ba:	4604      	mov	r4, r0
   bf6bc:	b150      	cbz	r0, bf6d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bf6be:	4631      	mov	r1, r6
   bf6c0:	f7ff fec6 	bl	bf450 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bf6c4:	6930      	ldr	r0, [r6, #16]
   bf6c6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf6ca:	b108      	cbz	r0, bf6d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bf6cc:	f004 fd46 	bl	c415c <strdup>
        type_(type) {
   bf6d0:	6120      	str	r0, [r4, #16]
   bf6d2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bf6d4:	602c      	str	r4, [r5, #0]
	}
   bf6d6:	e7d7      	b.n	bf688 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bf6d8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bf6d8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bf6da:	2300      	movs	r3, #0
   bf6dc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bf6de:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bf6e0:	4604      	mov	r4, r0
   bf6e2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bf6e4:	b12b      	cbz	r3, bf6f2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bf6e6:	2202      	movs	r2, #2
   bf6e8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bf6ea:	68eb      	ldr	r3, [r5, #12]
   bf6ec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bf6ee:	68ab      	ldr	r3, [r5, #8]
   bf6f0:	60a3      	str	r3, [r4, #8]
    }
   bf6f2:	4620      	mov	r0, r4
   bf6f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bf6f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bf6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf6fa:	b089      	sub	sp, #36	; 0x24
   bf6fc:	4604      	mov	r4, r0
   bf6fe:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bf700:	a801      	add	r0, sp, #4
   bf702:	4611      	mov	r1, r2
   bf704:	f7ff fe54 	bl	bf3b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bf708:	b1a4      	cbz	r4, bf734 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bf70a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf70c:	b11d      	cbz	r5, bf716 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bf70e:	4628      	mov	r0, r5
   bf710:	f004 fd24 	bl	c415c <strdup>
   bf714:	4605      	mov	r5, r0
   bf716:	a801      	add	r0, sp, #4
   bf718:	a903      	add	r1, sp, #12
        type_(type) {
   bf71a:	9503      	str	r5, [sp, #12]
   bf71c:	f8ad 4010 	strh.w	r4, [sp, #16]
   bf720:	f7ff fea6 	bl	bf470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bf724:	a803      	add	r0, sp, #12
   bf726:	f7ff fe10 	bl	bf34a <_ZN8particle5ErrorD1Ev>
   bf72a:	a802      	add	r0, sp, #8
   bf72c:	f7f6 fa7e 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf730:	b009      	add	sp, #36	; 0x24
   bf732:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bf734:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bf736:	2301      	movs	r3, #1
   bf738:	e8d5 2f4f 	ldrexb	r2, [r5]
   bf73c:	2a00      	cmp	r2, #0
   bf73e:	d103      	bne.n	bf748 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bf740:	e8c5 3f41 	strexb	r1, r3, [r5]
   bf744:	2900      	cmp	r1, #0
   bf746:	d1f7      	bne.n	bf738 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bf748:	d1ef      	bne.n	bf72a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bf74a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bf74c:	f3bf 8f5b 	dmb	ish
   bf750:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bf752:	1d2b      	adds	r3, r5, #4
   bf754:	f3bf 8f5b 	dmb	ish
   bf758:	e853 6f00 	ldrex	r6, [r3]
   bf75c:	e843 4200 	strex	r2, r4, [r3]
   bf760:	2a00      	cmp	r2, #0
   bf762:	d1f9      	bne.n	bf758 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bf764:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bf768:	2e00      	cmp	r6, #0
   bf76a:	d0de      	beq.n	bf72a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bf76c:	4620      	mov	r0, r4
   bf76e:	f7fe fa87 	bl	bdc80 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bf772:	4607      	mov	r7, r0
   bf774:	b160      	cbz	r0, bf790 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bf776:	f105 010c 	add.w	r1, r5, #12
   bf77a:	4630      	mov	r0, r6
   bf77c:	f7ff fe43 	bl	bf406 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bf780:	4630      	mov	r0, r6
   bf782:	f7f4 fe6b 	bl	b445c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bf786:	2110      	movs	r1, #16
   bf788:	4630      	mov	r0, r6
   bf78a:	f7f4 fc8a 	bl	b40a2 <_ZdlPvj>
   bf78e:	e7cc      	b.n	bf72a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bf790:	4631      	mov	r1, r6
   bf792:	a803      	add	r0, sp, #12
   bf794:	f7ff ffa0 	bl	bf6d8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bf798:	7b2b      	ldrb	r3, [r5, #12]
   bf79a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bf79e:	2010      	movs	r0, #16
   bf7a0:	f7f4 fc79 	bl	b4096 <_Znwj>
   bf7a4:	4605      	mov	r5, r0
   bf7a6:	b1d0      	cbz	r0, bf7de <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bf7a8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf7aa:	2014      	movs	r0, #20
   bf7ac:	f7f4 fc73 	bl	b4096 <_Znwj>
   bf7b0:	4604      	mov	r4, r0
   bf7b2:	b178      	cbz	r0, bf7d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bf7b4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bf7b6:	4601      	mov	r1, r0
   bf7b8:	a803      	add	r0, sp, #12
   bf7ba:	f7ff fad7 	bl	bed6c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf7be:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bf7c0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf7c2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf7c4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bf7c6:	9205      	str	r2, [sp, #20]
   bf7c8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf7ca:	60e3      	str	r3, [r4, #12]
   bf7cc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bf7d0:	9206      	str	r2, [sp, #24]
   bf7d2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bf7d4:	4b06      	ldr	r3, [pc, #24]	; (bf7f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bf7d6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bf7d8:	4b06      	ldr	r3, [pc, #24]	; (bf7f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf7da:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bf7dc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bf7de:	a803      	add	r0, sp, #12
   bf7e0:	f7f4 fe3c 	bl	b445c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bf7e4:	2200      	movs	r2, #0
   bf7e6:	4629      	mov	r1, r5
   bf7e8:	4803      	ldr	r0, [pc, #12]	; (bf7f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bf7ea:	f7fe fa51 	bl	bdc90 <application_thread_invoke>
   bf7ee:	e7c7      	b.n	bf780 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bf7f0:	000bf419 	.word	0x000bf419
   bf7f4:	000bf7fd 	.word	0x000bf7fd
   bf7f8:	000bdef7 	.word	0x000bdef7

000bf7fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bf7fc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bf7fe:	b570      	push	{r4, r5, r6, lr}
   bf800:	4604      	mov	r4, r0
	switch (__op)
   bf802:	d103      	bne.n	bf80c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bf804:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bf806:	6003      	str	r3, [r0, #0]
      }
   bf808:	2000      	movs	r0, #0
   bf80a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bf80c:	2a02      	cmp	r2, #2
   bf80e:	d00c      	beq.n	bf82a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bf810:	2a03      	cmp	r2, #3
   bf812:	d1f9      	bne.n	bf808 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bf814:	6804      	ldr	r4, [r0, #0]
   bf816:	2c00      	cmp	r4, #0
   bf818:	d0f6      	beq.n	bf808 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bf81a:	4620      	mov	r0, r4
   bf81c:	f7f4 fe1e 	bl	b445c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bf820:	2114      	movs	r1, #20
   bf822:	4620      	mov	r0, r4
   bf824:	f7f4 fc3d 	bl	b40a2 <_ZdlPvj>
   bf828:	e7ee      	b.n	bf808 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bf82a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bf82c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bf82e:	f7f4 fc32 	bl	b4096 <_Znwj>
   bf832:	4605      	mov	r5, r0
   bf834:	b120      	cbz	r0, bf840 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bf836:	4631      	mov	r1, r6
   bf838:	f7ff ff4e 	bl	bf6d8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bf83c:	7c33      	ldrb	r3, [r6, #16]
   bf83e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bf840:	6025      	str	r5, [r4, #0]
	}
   bf842:	e7e1      	b.n	bf808 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bf844 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bf844:	2200      	movs	r2, #0
   bf846:	6840      	ldr	r0, [r0, #4]
   bf848:	4611      	mov	r1, r2
   bf84a:	f7fe bab5 	b.w	bddb8 <network_listening>

000bf84e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bf84e:	2200      	movs	r2, #0
   bf850:	6840      	ldr	r0, [r0, #4]
   bf852:	4611      	mov	r1, r2
   bf854:	f7fe bac0 	b.w	bddd8 <network_get_listen_timeout>

000bf858 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bf858:	6840      	ldr	r0, [r0, #4]
   bf85a:	2200      	movs	r2, #0
   bf85c:	f7fe bab4 	b.w	bddc8 <network_set_listen_timeout>

000bf860 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bf860:	6840      	ldr	r0, [r0, #4]
   bf862:	2200      	movs	r2, #0
   bf864:	f081 0101 	eor.w	r1, r1, #1
   bf868:	f7fe ba9e 	b.w	bdda8 <network_listen>

000bf86c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bf86c:	2300      	movs	r3, #0
   bf86e:	6840      	ldr	r0, [r0, #4]
   bf870:	461a      	mov	r2, r3
   bf872:	4619      	mov	r1, r3
   bf874:	f7fe ba90 	b.w	bdd98 <network_off>

000bf878 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bf878:	2300      	movs	r3, #0
   bf87a:	6840      	ldr	r0, [r0, #4]
   bf87c:	461a      	mov	r2, r3
   bf87e:	4619      	mov	r1, r3
   bf880:	f7fe ba82 	b.w	bdd88 <network_on>

000bf884 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bf884:	2200      	movs	r2, #0
   bf886:	6840      	ldr	r0, [r0, #4]
   bf888:	4611      	mov	r1, r2
   bf88a:	f7fe ba75 	b.w	bdd78 <network_ready>

000bf88e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bf88e:	2200      	movs	r2, #0
   bf890:	6840      	ldr	r0, [r0, #4]
   bf892:	4611      	mov	r1, r2
   bf894:	f7fe ba60 	b.w	bdd58 <network_connecting>

000bf898 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bf898:	6840      	ldr	r0, [r0, #4]
   bf89a:	2200      	movs	r2, #0
   bf89c:	2102      	movs	r1, #2
   bf89e:	f7fe ba63 	b.w	bdd68 <network_disconnect>

000bf8a2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bf8a2:	2300      	movs	r3, #0
   bf8a4:	6840      	ldr	r0, [r0, #4]
   bf8a6:	461a      	mov	r2, r3
   bf8a8:	f7fe ba4e 	b.w	bdd48 <network_connect>

000bf8ac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bf8ac:	4b02      	ldr	r3, [pc, #8]	; (bf8b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bf8ae:	2203      	movs	r2, #3
   bf8b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bf8b2:	4a02      	ldr	r2, [pc, #8]	; (bf8bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bf8b4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bf8b6:	4770      	bx	lr
   bf8b8:	2003e65c 	.word	0x2003e65c
   bf8bc:	000c7920 	.word	0x000c7920

000bf8c0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bf8c0:	4770      	bx	lr

000bf8c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bf8c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf8c4:	4606      	mov	r6, r0
   bf8c6:	4615      	mov	r5, r2
   bf8c8:	460c      	mov	r4, r1
   bf8ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bf8cc:	42bc      	cmp	r4, r7
   bf8ce:	d006      	beq.n	bf8de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bf8d0:	6833      	ldr	r3, [r6, #0]
   bf8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   bf8d6:	689b      	ldr	r3, [r3, #8]
   bf8d8:	4630      	mov	r0, r6
   bf8da:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bf8dc:	e7f6      	b.n	bf8cc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bf8de:	4628      	mov	r0, r5
   bf8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf8e2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bf8e2:	7c00      	ldrb	r0, [r0, #16]
   bf8e4:	2200      	movs	r2, #0
   bf8e6:	f7fe b829 	b.w	bd93c <hal_i2c_write>

000bf8ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bf8ea:	7c00      	ldrb	r0, [r0, #16]
   bf8ec:	2100      	movs	r1, #0
   bf8ee:	f7fe b82d 	b.w	bd94c <hal_i2c_available>

000bf8f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bf8f2:	7c00      	ldrb	r0, [r0, #16]
   bf8f4:	2100      	movs	r1, #0
   bf8f6:	f7fe b831 	b.w	bd95c <hal_i2c_read>

000bf8fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bf8fa:	7c00      	ldrb	r0, [r0, #16]
   bf8fc:	2100      	movs	r1, #0
   bf8fe:	f7fe b835 	b.w	bd96c <hal_i2c_peek>

000bf902 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bf902:	7c00      	ldrb	r0, [r0, #16]
   bf904:	2100      	movs	r1, #0
   bf906:	f7fe b839 	b.w	bd97c <hal_i2c_flush>

000bf90a <_ZN7TwoWireD0Ev>:
   bf90a:	b510      	push	{r4, lr}
   bf90c:	2114      	movs	r1, #20
   bf90e:	4604      	mov	r4, r0
   bf910:	f7f4 fbc7 	bl	b40a2 <_ZdlPvj>
   bf914:	4620      	mov	r0, r4
   bf916:	bd10      	pop	{r4, pc}

000bf918 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bf918:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bf91a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf91e:	4604      	mov	r4, r0
   bf920:	4608      	mov	r0, r1
   bf922:	2100      	movs	r1, #0
   bf924:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bf928:	4b03      	ldr	r3, [pc, #12]	; (bf938 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bf92a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bf92c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bf92e:	4611      	mov	r1, r2
   bf930:	f7fe f834 	bl	bd99c <hal_i2c_init>
}
   bf934:	4620      	mov	r0, r4
   bf936:	bd10      	pop	{r4, pc}
   bf938:	000c795c 	.word	0x000c795c

000bf93c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bf93c:	7c00      	ldrb	r0, [r0, #16]
   bf93e:	2200      	movs	r2, #0
   bf940:	f7fd bfdc 	b.w	bd8fc <hal_i2c_set_speed>

000bf944 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bf944:	2300      	movs	r3, #0
   bf946:	7c00      	ldrb	r0, [r0, #16]
   bf948:	461a      	mov	r2, r3
   bf94a:	4619      	mov	r1, r3
   bf94c:	f7fd bfde 	b.w	bd90c <hal_i2c_begin>

000bf950 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bf950:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bf952:	2200      	movs	r2, #0
   bf954:	2314      	movs	r3, #20
   bf956:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bf95a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bf95e:	780b      	ldrb	r3, [r1, #0]
   bf960:	f88d 3008 	strb.w	r3, [sp, #8]
   bf964:	684b      	ldr	r3, [r1, #4]
   bf966:	9303      	str	r3, [sp, #12]
   bf968:	68cb      	ldr	r3, [r1, #12]
   bf96a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bf96c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bf96e:	7a0b      	ldrb	r3, [r1, #8]
   bf970:	9305      	str	r3, [sp, #20]
   bf972:	a901      	add	r1, sp, #4
   bf974:	f7fe f81a 	bl	bd9ac <hal_i2c_request_ex>
}
   bf978:	b007      	add	sp, #28
   bf97a:	f85d fb04 	ldr.w	pc, [sp], #4

000bf97e <_ZN7TwoWire11requestFromEhjh>:
{
   bf97e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bf980:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf982:	f88d 1000 	strb.w	r1, [sp]
   bf986:	f04f 0164 	mov.w	r1, #100	; 0x64
   bf98a:	9103      	str	r1, [sp, #12]
   bf98c:	bf18      	it	ne
   bf98e:	2301      	movne	r3, #1
   bf990:	4669      	mov	r1, sp
    size_ = size;
   bf992:	9201      	str	r2, [sp, #4]
   bf994:	f88d 3008 	strb.w	r3, [sp, #8]
   bf998:	f7ff ffda 	bl	bf950 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bf99c:	b005      	add	sp, #20
   bf99e:	f85d fb04 	ldr.w	pc, [sp], #4

000bf9a2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   bf9a2:	2301      	movs	r3, #1
   bf9a4:	f7ff bfeb 	b.w	bf97e <_ZN7TwoWire11requestFromEhjh>

000bf9a8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bf9a8:	7c00      	ldrb	r0, [r0, #16]
   bf9aa:	2200      	movs	r2, #0
   bf9ac:	f7fd bfb6 	b.w	bd91c <hal_i2c_begin_transmission>

000bf9b0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bf9b0:	b2c9      	uxtb	r1, r1
   bf9b2:	f7ff bff9 	b.w	bf9a8 <_ZN7TwoWire17beginTransmissionEh>

000bf9b6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bf9b6:	7c00      	ldrb	r0, [r0, #16]
   bf9b8:	2200      	movs	r2, #0
   bf9ba:	f7fd bfb7 	b.w	bd92c <hal_i2c_end_transmission>

000bf9be <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bf9be:	2101      	movs	r1, #1
   bf9c0:	f7ff bff9 	b.w	bf9b6 <_ZN7TwoWire15endTransmissionEh>

000bf9c4 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   bf9c4:	f7fd bf8a 	b.w	bd8dc <HAL_Interrupts_Disable_All>

000bf9c8 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   bf9c8:	f7fd bf80 	b.w	bd8cc <HAL_Interrupts_Enable_All>

000bf9cc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bf9cc:	4770      	bx	lr

000bf9ce <_ZN9IPAddressD0Ev>:
   bf9ce:	b510      	push	{r4, lr}
   bf9d0:	2118      	movs	r1, #24
   bf9d2:	4604      	mov	r4, r0
   bf9d4:	f7f4 fb65 	bl	b40a2 <_ZdlPvj>
   bf9d8:	4620      	mov	r0, r4
   bf9da:	bd10      	pop	{r4, pc}

000bf9dc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bf9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bf9de:	7d03      	ldrb	r3, [r0, #20]
   bf9e0:	2b06      	cmp	r3, #6
{
   bf9e2:	b08d      	sub	sp, #52	; 0x34
   bf9e4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf9e6:	f100 0704 	add.w	r7, r0, #4
   bf9ea:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bf9ee:	d012      	beq.n	bfa16 <_ZNK9IPAddress7printToER5Print+0x3a>
   bf9f0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bf9f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bf9f8:	220a      	movs	r2, #10
   bf9fa:	4630      	mov	r0, r6
   bf9fc:	f001 fabd 	bl	c0f7a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bfa00:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bfa02:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bfa04:	d019      	beq.n	bfa3a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bfa06:	2c00      	cmp	r4, #0
   bfa08:	d0f4      	beq.n	bf9f4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bfa0a:	212e      	movs	r1, #46	; 0x2e
   bfa0c:	4630      	mov	r0, r6
   bfa0e:	f001 fa95 	bl	c0f3c <_ZN5Print5printEc>
   bfa12:	4404      	add	r4, r0
   bfa14:	e7ee      	b.n	bf9f4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bfa16:	232f      	movs	r3, #47	; 0x2f
   bfa18:	466a      	mov	r2, sp
   bfa1a:	4639      	mov	r1, r7
   bfa1c:	200a      	movs	r0, #10
		buf[0] = 0;
   bfa1e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bfa22:	f7fd ffcb 	bl	bd9bc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bfa26:	4668      	mov	r0, sp
   bfa28:	f004 fbb5 	bl	c4196 <strlen>
   bfa2c:	6833      	ldr	r3, [r6, #0]
   bfa2e:	4602      	mov	r2, r0
   bfa30:	68db      	ldr	r3, [r3, #12]
   bfa32:	4669      	mov	r1, sp
   bfa34:	4630      	mov	r0, r6
   bfa36:	4798      	blx	r3
   bfa38:	4604      	mov	r4, r0
    }
    return n;
}
   bfa3a:	4620      	mov	r0, r4
   bfa3c:	b00d      	add	sp, #52	; 0x34
   bfa3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bfa40 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bfa40:	b510      	push	{r4, lr}
   bfa42:	4b05      	ldr	r3, [pc, #20]	; (bfa58 <_ZN9IPAddressC1Ev+0x18>)
   bfa44:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bfa46:	2211      	movs	r2, #17
   bfa48:	f840 3b04 	str.w	r3, [r0], #4
   bfa4c:	2100      	movs	r1, #0
   bfa4e:	f004 fb17 	bl	c4080 <memset>
}
   bfa52:	4620      	mov	r0, r4
   bfa54:	bd10      	pop	{r4, pc}
   bfa56:	bf00      	nop
   bfa58:	000c7984 	.word	0x000c7984

000bfa5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bfa5c:	4603      	mov	r3, r0
   bfa5e:	4a07      	ldr	r2, [pc, #28]	; (bfa7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bfa60:	b510      	push	{r4, lr}
   bfa62:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bfa66:	f101 0210 	add.w	r2, r1, #16
   bfa6a:	f851 4b04 	ldr.w	r4, [r1], #4
   bfa6e:	f843 4b04 	str.w	r4, [r3], #4
   bfa72:	4291      	cmp	r1, r2
   bfa74:	d1f9      	bne.n	bfa6a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bfa76:	780a      	ldrb	r2, [r1, #0]
   bfa78:	701a      	strb	r2, [r3, #0]
}
   bfa7a:	bd10      	pop	{r4, pc}
   bfa7c:	000c7984 	.word	0x000c7984

000bfa80 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bfa80:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bfa82:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bfa86:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bfa8a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bfa8e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bfa92:	2304      	movs	r3, #4
   bfa94:	6041      	str	r1, [r0, #4]
   bfa96:	7503      	strb	r3, [r0, #20]
}
   bfa98:	bd10      	pop	{r4, pc}
	...

000bfa9c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bfa9c:	b507      	push	{r0, r1, r2, lr}
   bfa9e:	4b06      	ldr	r3, [pc, #24]	; (bfab8 <_ZN9IPAddressC1EPKh+0x1c>)
   bfaa0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bfaa2:	78cb      	ldrb	r3, [r1, #3]
   bfaa4:	9300      	str	r3, [sp, #0]
   bfaa6:	788b      	ldrb	r3, [r1, #2]
   bfaa8:	784a      	ldrb	r2, [r1, #1]
   bfaaa:	7809      	ldrb	r1, [r1, #0]
   bfaac:	f7ff ffe8 	bl	bfa80 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bfab0:	b003      	add	sp, #12
   bfab2:	f85d fb04 	ldr.w	pc, [sp], #4
   bfab6:	bf00      	nop
   bfab8:	000c7984 	.word	0x000c7984

000bfabc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bfabc:	f100 0310 	add.w	r3, r0, #16
   bfac0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bfac2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bfac6:	2901      	cmp	r1, #1
   bfac8:	4618      	mov	r0, r3
   bfaca:	d108      	bne.n	bfade <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bfacc:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bfad0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bfad4:	3a01      	subs	r2, #1
   bfad6:	f103 0310 	add.w	r3, r3, #16
   bfada:	d1f2      	bne.n	bfac2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bfadc:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bfade:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bfae0:	bf04      	itt	eq
   bfae2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bfae6:	1852      	addeq	r2, r2, r1
   bfae8:	e7f4      	b.n	bfad4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bfaea <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bfaea:	b40e      	push	{r1, r2, r3}
   bfaec:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfaee:	b088      	sub	sp, #32
   bfaf0:	af00      	add	r7, sp, #0
   bfaf2:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfaf6:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bfaf8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfafc:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bfafe:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfb00:	462b      	mov	r3, r5
   bfb02:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bfb04:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfb06:	f7fe f9af 	bl	bde68 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bfb0a:	280f      	cmp	r0, #15
   bfb0c:	687a      	ldr	r2, [r7, #4]
   bfb0e:	d91a      	bls.n	bfb46 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bfb10:	f100 0308 	add.w	r3, r0, #8
   bfb14:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bfb18:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bfb1a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfb1e:	1c41      	adds	r1, r0, #1
   bfb20:	462b      	mov	r3, r5
   bfb22:	4668      	mov	r0, sp
        va_start(args, fmt);
   bfb24:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfb26:	f7fe f99f 	bl	bde68 <vsnprintf>
        if (n > 0) {
   bfb2a:	1e02      	subs	r2, r0, #0
   bfb2c:	dd04      	ble.n	bfb38 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bfb2e:	6823      	ldr	r3, [r4, #0]
   bfb30:	4669      	mov	r1, sp
   bfb32:	689b      	ldr	r3, [r3, #8]
   bfb34:	4620      	mov	r0, r4
   bfb36:	4798      	blx	r3
   bfb38:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bfb3a:	3720      	adds	r7, #32
   bfb3c:	46bd      	mov	sp, r7
   bfb3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bfb42:	b003      	add	sp, #12
   bfb44:	4770      	bx	lr
    } else if (n > 0) {
   bfb46:	2800      	cmp	r0, #0
   bfb48:	d0f7      	beq.n	bfb3a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bfb4a:	6823      	ldr	r3, [r4, #0]
   bfb4c:	4602      	mov	r2, r0
   bfb4e:	689b      	ldr	r3, [r3, #8]
   bfb50:	f107 0110 	add.w	r1, r7, #16
   bfb54:	4620      	mov	r0, r4
   bfb56:	4798      	blx	r3
}
   bfb58:	e7ef      	b.n	bfb3a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bfb5a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bfb5a:	b538      	push	{r3, r4, r5, lr}
   bfb5c:	680b      	ldr	r3, [r1, #0]
   bfb5e:	6003      	str	r3, [r0, #0]
   bfb60:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bfb62:	6843      	ldr	r3, [r0, #4]
   bfb64:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bfb66:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bfb68:	d008      	beq.n	bfb7c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bfb6a:	b115      	cbz	r5, bfb72 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bfb6c:	686b      	ldr	r3, [r5, #4]
   bfb6e:	3301      	adds	r3, #1
   bfb70:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bfb72:	6860      	ldr	r0, [r4, #4]
   bfb74:	b108      	cbz	r0, bfb7a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bfb76:	f7fe fa7c 	bl	be072 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bfb7a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bfb7c:	bd38      	pop	{r3, r4, r5, pc}

000bfb7e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bfb7e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bfb80:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bfb82:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bfb86:	689b      	ldr	r3, [r3, #8]
   bfb88:	2201      	movs	r2, #1
   bfb8a:	f10d 0107 	add.w	r1, sp, #7
   bfb8e:	4798      	blx	r3
}
   bfb90:	b003      	add	sp, #12
   bfb92:	f85d fb04 	ldr.w	pc, [sp], #4

000bfb96 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bfb96:	460b      	mov	r3, r1
   bfb98:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bfb9a:	2200      	movs	r2, #0
   bfb9c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bfb9e:	e9c0 2200 	strd	r2, r2, [r0]
   bfba2:	4604      	mov	r4, r0
        t_ = t;
   bfba4:	6083      	str	r3, [r0, #8]
    if (t) {
   bfba6:	b90b      	cbnz	r3, bfbac <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bfba8:	4620      	mov	r0, r4
   bfbaa:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bfbac:	f7ff ffd5 	bl	bfb5a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bfbb0:	e7fa      	b.n	bfba8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bfbb2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bfbb2:	6883      	ldr	r3, [r0, #8]
   bfbb4:	b1eb      	cbz	r3, bfbf2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bfbb6:	781a      	ldrb	r2, [r3, #0]
   bfbb8:	2a03      	cmp	r2, #3
   bfbba:	d81a      	bhi.n	bfbf2 <_ZNK5spark9JSONValue4typeEv+0x40>
   bfbbc:	e8df f002 	tbb	[pc, r2]
   bfbc0:	1b021704 	.word	0x1b021704
   bfbc4:	2005      	movs	r0, #5
   bfbc6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bfbc8:	6802      	ldr	r2, [r0, #0]
   bfbca:	685b      	ldr	r3, [r3, #4]
   bfbcc:	6852      	ldr	r2, [r2, #4]
   bfbce:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bfbd0:	282d      	cmp	r0, #45	; 0x2d
   bfbd2:	d012      	beq.n	bfbfa <_ZNK5spark9JSONValue4typeEv+0x48>
   bfbd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bfbd8:	2b09      	cmp	r3, #9
   bfbda:	d90e      	bls.n	bfbfa <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bfbdc:	2874      	cmp	r0, #116	; 0x74
   bfbde:	d00e      	beq.n	bfbfe <_ZNK5spark9JSONValue4typeEv+0x4c>
   bfbe0:	2866      	cmp	r0, #102	; 0x66
   bfbe2:	d00c      	beq.n	bfbfe <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bfbe4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bfbe8:	4258      	negs	r0, r3
   bfbea:	4158      	adcs	r0, r3
   bfbec:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bfbee:	2006      	movs	r0, #6
   bfbf0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bfbf2:	2000      	movs	r0, #0
   bfbf4:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bfbf6:	2004      	movs	r0, #4
   bfbf8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bfbfa:	2003      	movs	r0, #3
   bfbfc:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bfbfe:	2002      	movs	r0, #2
}
   bfc00:	4770      	bx	lr

000bfc02 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bfc02:	b510      	push	{r4, lr}
   bfc04:	4604      	mov	r4, r0
    switch (type()) {
   bfc06:	f7ff ffd4 	bl	bfbb2 <_ZNK5spark9JSONValue4typeEv>
   bfc0a:	2802      	cmp	r0, #2
   bfc0c:	d00e      	beq.n	bfc2c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bfc0e:	1ec3      	subs	r3, r0, #3
   bfc10:	b2db      	uxtb	r3, r3
   bfc12:	2b01      	cmp	r3, #1
   bfc14:	d814      	bhi.n	bfc40 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bfc16:	6822      	ldr	r2, [r4, #0]
   bfc18:	68a3      	ldr	r3, [r4, #8]
   bfc1a:	6850      	ldr	r0, [r2, #4]
   bfc1c:	685b      	ldr	r3, [r3, #4]
}
   bfc1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bfc22:	220a      	movs	r2, #10
   bfc24:	2100      	movs	r1, #0
   bfc26:	4418      	add	r0, r3
   bfc28:	f005 b9de 	b.w	c4fe8 <strtol>
        const char* const s = d_->json + t_->start;
   bfc2c:	6822      	ldr	r2, [r4, #0]
   bfc2e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bfc30:	6852      	ldr	r2, [r2, #4]
   bfc32:	685b      	ldr	r3, [r3, #4]
   bfc34:	5cd0      	ldrb	r0, [r2, r3]
   bfc36:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bfc3a:	4258      	negs	r0, r3
   bfc3c:	4158      	adcs	r0, r3
}
   bfc3e:	bd10      	pop	{r4, pc}
    switch (type()) {
   bfc40:	2000      	movs	r0, #0
   bfc42:	e7fc      	b.n	bfc3e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bfc44 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bfc44:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bfc46:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bfc48:	e9c0 3300 	strd	r3, r3, [r0]
   bfc4c:	4604      	mov	r4, r0
        n_(0) {
   bfc4e:	480e      	ldr	r0, [pc, #56]	; (bfc88 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bfc50:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bfc54:	b1a9      	cbz	r1, bfc82 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bfc56:	780b      	ldrb	r3, [r1, #0]
   bfc58:	2b03      	cmp	r3, #3
   bfc5a:	d006      	beq.n	bfc6a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bfc5c:	b98b      	cbnz	r3, bfc82 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bfc5e:	6813      	ldr	r3, [r2, #0]
   bfc60:	6858      	ldr	r0, [r3, #4]
   bfc62:	684b      	ldr	r3, [r1, #4]
   bfc64:	5cc3      	ldrb	r3, [r0, r3]
   bfc66:	2b6e      	cmp	r3, #110	; 0x6e
   bfc68:	d007      	beq.n	bfc7a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bfc6a:	6813      	ldr	r3, [r2, #0]
   bfc6c:	684d      	ldr	r5, [r1, #4]
   bfc6e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bfc70:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bfc72:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bfc74:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bfc76:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bfc78:	60e3      	str	r3, [r4, #12]
   bfc7a:	4611      	mov	r1, r2
   bfc7c:	4620      	mov	r0, r4
   bfc7e:	f7ff ff6c 	bl	bfb5a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bfc82:	4620      	mov	r0, r4
   bfc84:	bd38      	pop	{r3, r4, r5, pc}
   bfc86:	bf00      	nop
   bfc88:	000c79f3 	.word	0x000c79f3

000bfc8c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bfc8c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bfc8e:	2500      	movs	r5, #0
   bfc90:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bfc92:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bfc96:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bfc9a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bfc9e:	4604      	mov	r4, r0
   bfca0:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bfca2:	b14b      	cbz	r3, bfcb8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bfca4:	781a      	ldrb	r2, [r3, #0]
   bfca6:	2a01      	cmp	r2, #1
   bfca8:	d106      	bne.n	bfcb8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bfcaa:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bfcae:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bfcb0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bfcb2:	6143      	str	r3, [r0, #20]
   bfcb4:	f7ff ff51 	bl	bfb5a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bfcb8:	4620      	mov	r0, r4
   bfcba:	bd38      	pop	{r3, r4, r5, pc}

000bfcbc <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bfcbc:	b510      	push	{r4, lr}
    if (!n_) {
   bfcbe:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bfcc0:	4604      	mov	r4, r0
    if (!n_) {
   bfcc2:	b163      	cbz	r3, bfcde <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bfcc4:	6880      	ldr	r0, [r0, #8]
   bfcc6:	60e0      	str	r0, [r4, #12]
    --n_;
   bfcc8:	3b01      	subs	r3, #1
    ++t_;
   bfcca:	3010      	adds	r0, #16
   bfccc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bfcce:	6120      	str	r0, [r4, #16]
    --n_;
   bfcd0:	6163      	str	r3, [r4, #20]
    if (n_) {
   bfcd2:	b113      	cbz	r3, bfcda <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bfcd4:	f7ff fef2 	bl	bfabc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bfcd8:	60a0      	str	r0, [r4, #8]
    return true;
   bfcda:	2001      	movs	r0, #1
   bfcdc:	e000      	b.n	bfce0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bfcde:	4618      	mov	r0, r3
}
   bfce0:	bd10      	pop	{r4, pc}

000bfce2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bfce2:	b510      	push	{r4, lr}
    write('}');
   bfce4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bfce6:	4604      	mov	r4, r0
    write('}');
   bfce8:	f7ff ff49 	bl	bfb7e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bfcec:	2301      	movs	r3, #1
   bfcee:	7123      	strb	r3, [r4, #4]
}
   bfcf0:	4620      	mov	r0, r4
   bfcf2:	bd10      	pop	{r4, pc}

000bfcf4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bfcf4:	b508      	push	{r3, lr}
    switch (state_) {
   bfcf6:	7903      	ldrb	r3, [r0, #4]
   bfcf8:	2b01      	cmp	r3, #1
   bfcfa:	d002      	beq.n	bfd02 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bfcfc:	2b02      	cmp	r3, #2
   bfcfe:	d004      	beq.n	bfd0a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bfd00:	bd08      	pop	{r3, pc}
        write(',');
   bfd02:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bfd04:	f7ff ff3b 	bl	bfb7e <_ZN5spark10JSONWriter5writeEc>
}
   bfd08:	e7fa      	b.n	bfd00 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bfd0a:	213a      	movs	r1, #58	; 0x3a
   bfd0c:	e7fa      	b.n	bfd04 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bfd0e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bfd0e:	b510      	push	{r4, lr}
   bfd10:	4604      	mov	r4, r0
    writeSeparator();
   bfd12:	f7ff ffef 	bl	bfcf4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bfd16:	4620      	mov	r0, r4
   bfd18:	217b      	movs	r1, #123	; 0x7b
   bfd1a:	f7ff ff30 	bl	bfb7e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bfd1e:	2300      	movs	r3, #0
   bfd20:	7123      	strb	r3, [r4, #4]
}
   bfd22:	4620      	mov	r0, r4
   bfd24:	bd10      	pop	{r4, pc}
	...

000bfd28 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bfd28:	b513      	push	{r0, r1, r4, lr}
   bfd2a:	4604      	mov	r4, r0
   bfd2c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bfd2e:	f7ff ffe1 	bl	bfcf4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bfd32:	6823      	ldr	r3, [r4, #0]
   bfd34:	9a01      	ldr	r2, [sp, #4]
   bfd36:	68db      	ldr	r3, [r3, #12]
   bfd38:	4903      	ldr	r1, [pc, #12]	; (bfd48 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bfd3a:	4620      	mov	r0, r4
   bfd3c:	4798      	blx	r3
    state_ = NEXT;
   bfd3e:	2301      	movs	r3, #1
}
   bfd40:	4620      	mov	r0, r4
    state_ = NEXT;
   bfd42:	7123      	strb	r3, [r4, #4]
}
   bfd44:	b002      	add	sp, #8
   bfd46:	bd10      	pop	{r4, pc}
   bfd48:	000c63c5 	.word	0x000c63c5

000bfd4c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bfd4c:	b513      	push	{r0, r1, r4, lr}
   bfd4e:	4604      	mov	r4, r0
   bfd50:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bfd52:	f7ff ffcf 	bl	bfcf4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bfd56:	6823      	ldr	r3, [r4, #0]
   bfd58:	9a01      	ldr	r2, [sp, #4]
   bfd5a:	68db      	ldr	r3, [r3, #12]
   bfd5c:	4903      	ldr	r1, [pc, #12]	; (bfd6c <_ZN5spark10JSONWriter5valueEj+0x20>)
   bfd5e:	4620      	mov	r0, r4
   bfd60:	4798      	blx	r3
    state_ = NEXT;
   bfd62:	2301      	movs	r3, #1
}
   bfd64:	4620      	mov	r0, r4
    state_ = NEXT;
   bfd66:	7123      	strb	r3, [r4, #4]
}
   bfd68:	b002      	add	sp, #8
   bfd6a:	bd10      	pop	{r4, pc}
   bfd6c:	000c7990 	.word	0x000c7990

000bfd70 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bfd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bfd74:	460d      	mov	r5, r1
    write('"');
   bfd76:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bfd78:	4690      	mov	r8, r2
   bfd7a:	4604      	mov	r4, r0
    write('"');
   bfd7c:	f7ff feff 	bl	bfb7e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bfd80:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bfe28 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bfd84:	44a8      	add	r8, r5
    const char *s = str;
   bfd86:	462f      	mov	r7, r5
    while (s != end) {
   bfd88:	4547      	cmp	r7, r8
   bfd8a:	46ba      	mov	sl, r7
   bfd8c:	d03d      	beq.n	bfe0a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bfd8e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bfd92:	2e22      	cmp	r6, #34	; 0x22
   bfd94:	d006      	beq.n	bfda4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bfd96:	2e5c      	cmp	r6, #92	; 0x5c
   bfd98:	d004      	beq.n	bfda4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bfd9a:	4630      	mov	r0, r6
   bfd9c:	f004 f930 	bl	c4000 <isprint>
   bfda0:	2800      	cmp	r0, #0
   bfda2:	d1f1      	bne.n	bfd88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bfda4:	6823      	ldr	r3, [r4, #0]
   bfda6:	ebaa 0205 	sub.w	r2, sl, r5
   bfdaa:	689b      	ldr	r3, [r3, #8]
   bfdac:	4629      	mov	r1, r5
   bfdae:	4620      	mov	r0, r4
   bfdb0:	4798      	blx	r3
            write('\\');
   bfdb2:	215c      	movs	r1, #92	; 0x5c
   bfdb4:	4620      	mov	r0, r4
   bfdb6:	f7ff fee2 	bl	bfb7e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bfdba:	2e0d      	cmp	r6, #13
   bfdbc:	d80a      	bhi.n	bfdd4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bfdbe:	2e07      	cmp	r6, #7
   bfdc0:	d91c      	bls.n	bfdfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bfdc2:	f1a6 0308 	sub.w	r3, r6, #8
   bfdc6:	2b05      	cmp	r3, #5
   bfdc8:	d818      	bhi.n	bfdfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bfdca:	e8df f003 	tbb	[pc, r3]
   bfdce:	0f0d      	.short	0x0f0d
   bfdd0:	15131711 	.word	0x15131711
   bfdd4:	2e22      	cmp	r6, #34	; 0x22
   bfdd6:	d001      	beq.n	bfddc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bfdd8:	2e5c      	cmp	r6, #92	; 0x5c
   bfdda:	d10f      	bne.n	bfdfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bfddc:	4631      	mov	r1, r6
                write('b');
   bfdde:	4620      	mov	r0, r4
   bfde0:	f7ff fecd 	bl	bfb7e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bfde4:	463d      	mov	r5, r7
    while (s != end) {
   bfde6:	e7cf      	b.n	bfd88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bfde8:	2162      	movs	r1, #98	; 0x62
   bfdea:	e7f8      	b.n	bfdde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bfdec:	2174      	movs	r1, #116	; 0x74
   bfdee:	e7f6      	b.n	bfdde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bfdf0:	216e      	movs	r1, #110	; 0x6e
   bfdf2:	e7f4      	b.n	bfdde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bfdf4:	2166      	movs	r1, #102	; 0x66
   bfdf6:	e7f2      	b.n	bfdde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bfdf8:	2172      	movs	r1, #114	; 0x72
   bfdfa:	e7f0      	b.n	bfdde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bfdfc:	6823      	ldr	r3, [r4, #0]
   bfdfe:	4632      	mov	r2, r6
   bfe00:	68db      	ldr	r3, [r3, #12]
   bfe02:	4649      	mov	r1, r9
   bfe04:	4620      	mov	r0, r4
   bfe06:	4798      	blx	r3
                break;
   bfe08:	e7ec      	b.n	bfde4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bfe0a:	42bd      	cmp	r5, r7
   bfe0c:	d005      	beq.n	bfe1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bfe0e:	6823      	ldr	r3, [r4, #0]
   bfe10:	1b7a      	subs	r2, r7, r5
   bfe12:	689b      	ldr	r3, [r3, #8]
   bfe14:	4629      	mov	r1, r5
   bfe16:	4620      	mov	r0, r4
   bfe18:	4798      	blx	r3
    }
    write('"');
   bfe1a:	2122      	movs	r1, #34	; 0x22
   bfe1c:	4620      	mov	r0, r4
   bfe1e:	f7ff feae 	bl	bfb7e <_ZN5spark10JSONWriter5writeEc>
}
   bfe22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bfe26:	bf00      	nop
   bfe28:	000c7993 	.word	0x000c7993

000bfe2c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bfe2c:	b513      	push	{r0, r1, r4, lr}
   bfe2e:	4604      	mov	r4, r0
   bfe30:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bfe34:	f7ff ff5e 	bl	bfcf4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bfe38:	4620      	mov	r0, r4
   bfe3a:	e9dd 2100 	ldrd	r2, r1, [sp]
   bfe3e:	f7ff ff97 	bl	bfd70 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bfe42:	2302      	movs	r3, #2
}
   bfe44:	4620      	mov	r0, r4
    state_ = VALUE;
   bfe46:	7123      	strb	r3, [r4, #4]
}
   bfe48:	b002      	add	sp, #8
   bfe4a:	bd10      	pop	{r4, pc}

000bfe4c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bfe4c:	b513      	push	{r0, r1, r4, lr}
   bfe4e:	4604      	mov	r4, r0
   bfe50:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bfe54:	f7ff ff4e 	bl	bfcf4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bfe58:	4620      	mov	r0, r4
   bfe5a:	e9dd 2100 	ldrd	r2, r1, [sp]
   bfe5e:	f7ff ff87 	bl	bfd70 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bfe62:	2301      	movs	r3, #1
}
   bfe64:	4620      	mov	r0, r4
    state_ = NEXT;
   bfe66:	7123      	strb	r3, [r4, #4]
}
   bfe68:	b002      	add	sp, #8
   bfe6a:	bd10      	pop	{r4, pc}

000bfe6c <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   bfe6c:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   bfe6e:	460b      	mov	r3, r1
    s->update(ticks);
   bfe70:	6892      	ldr	r2, [r2, #8]
   bfe72:	4601      	mov	r1, r0
   bfe74:	4618      	mov	r0, r3
   bfe76:	4710      	bx	r2

000bfe78 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   bfe78:	b570      	push	{r4, r5, r6, lr}
   bfe7a:	4c0e      	ldr	r4, [pc, #56]	; (bfeb4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   bfe7c:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   bfe7e:	2500      	movs	r5, #0
   bfe80:	241c      	movs	r4, #28
   bfe82:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bfe86:	f89d 4014 	ldrb.w	r4, [sp, #20]
   bfe8a:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   bfe8e:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bfe90:	f004 0403 	and.w	r4, r4, #3
   bfe94:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   bfe98:	b2e4      	uxtb	r4, r4
   bfe9a:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   bfe9c:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   bfe9e:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   bfea0:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   bfea2:	7c42      	ldrb	r2, [r0, #17]
   bfea4:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   bfea6:	bf0a      	itet	eq
   bfea8:	4b03      	ldreq	r3, [pc, #12]	; (bfeb8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   bfeaa:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   bfeac:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   bfeb0:	bd70      	pop	{r4, r5, r6, pc}
   bfeb2:	bf00      	nop
   bfeb4:	000c686c 	.word	0x000c686c
   bfeb8:	000bfe6d 	.word	0x000bfe6d

000bfebc <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bfebc:	6880      	ldr	r0, [r0, #8]
   bfebe:	6803      	ldr	r3, [r0, #0]
   bfec0:	68db      	ldr	r3, [r3, #12]
   bfec2:	4718      	bx	r3

000bfec4 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bfec4:	4770      	bx	lr

000bfec6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bfec6:	4608      	mov	r0, r1
   bfec8:	b111      	cbz	r1, bfed0 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bfeca:	680b      	ldr	r3, [r1, #0]
   bfecc:	685b      	ldr	r3, [r3, #4]
   bfece:	4718      	bx	r3
}
   bfed0:	4770      	bx	lr

000bfed2 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bfed2:	4770      	bx	lr

000bfed4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bfed4:	4770      	bx	lr

000bfed6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bfed6:	4770      	bx	lr

000bfed8 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bfed8:	4770      	bx	lr

000bfeda <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bfeda:	b538      	push	{r3, r4, r5, lr}
   bfedc:	4604      	mov	r4, r0
   bfede:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bfee0:	6800      	ldr	r0, [r0, #0]
   bfee2:	212e      	movs	r1, #46	; 0x2e
   bfee4:	f004 f91e 	bl	c4124 <strchrnul>
    size = s - category;
   bfee8:	6823      	ldr	r3, [r4, #0]
   bfeea:	1ac3      	subs	r3, r0, r3
   bfeec:	602b      	str	r3, [r5, #0]
    if (size) {
   bfeee:	b123      	cbz	r3, bfefa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bfef0:	7803      	ldrb	r3, [r0, #0]
   bfef2:	b103      	cbz	r3, bfef6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bfef4:	3001      	adds	r0, #1
   bfef6:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bfef8:	6020      	str	r0, [r4, #0]
}
   bfefa:	4618      	mov	r0, r3
   bfefc:	bd38      	pop	{r3, r4, r5, pc}

000bfefe <_ZN5spark16JSONStreamWriterD0Ev>:
   bfefe:	b510      	push	{r4, lr}
   bff00:	210c      	movs	r1, #12
   bff02:	4604      	mov	r4, r0
   bff04:	f7f4 f8cd 	bl	b40a2 <_ZdlPvj>
   bff08:	4620      	mov	r0, r4
   bff0a:	bd10      	pop	{r4, pc}

000bff0c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bff0c:	b510      	push	{r4, lr}
   bff0e:	2104      	movs	r1, #4
   bff10:	4604      	mov	r4, r0
   bff12:	f7f4 f8c6 	bl	b40a2 <_ZdlPvj>
   bff16:	4620      	mov	r0, r4
   bff18:	bd10      	pop	{r4, pc}

000bff1a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bff1a:	b510      	push	{r4, lr}
   bff1c:	2104      	movs	r1, #4
   bff1e:	4604      	mov	r4, r0
   bff20:	f7f4 f8bf 	bl	b40a2 <_ZdlPvj>
   bff24:	4620      	mov	r0, r4
   bff26:	bd10      	pop	{r4, pc}

000bff28 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   bff28:	f7fd bc68 	b.w	bd7fc <os_mutex_recursive_lock>

000bff2c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bff2c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bff2e:	f004 f903 	bl	c4138 <strcmp>
}
   bff32:	fab0 f080 	clz	r0, r0
   bff36:	0940      	lsrs	r0, r0, #5
   bff38:	bd08      	pop	{r3, pc}

000bff3a <__tcf_1>:
   bff3a:	4770      	bx	lr

000bff3c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bff3c:	b510      	push	{r4, lr}
   bff3e:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bff40:	f001 fcb8 	bl	c18b4 <_Z16_fetch_usbserialv>
   bff44:	4284      	cmp	r4, r0
   bff46:	d010      	beq.n	bff6a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bff48:	f001 fe4c 	bl	c1be4 <_Z22__fetch_global_Serial1v>
   bff4c:	4284      	cmp	r4, r0
   bff4e:	d105      	bne.n	bff5c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bff50:	f001 fe48 	bl	c1be4 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bff54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bff58:	f001 bc47 	b.w	c17ea <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bff5c:	b12c      	cbz	r4, bff6a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bff5e:	6823      	ldr	r3, [r4, #0]
   bff60:	4620      	mov	r0, r4
   bff62:	685b      	ldr	r3, [r3, #4]
}
   bff64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bff68:	4718      	bx	r3
   bff6a:	bd10      	pop	{r4, pc}

000bff6c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bff6c:	680b      	ldr	r3, [r1, #0]
   bff6e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bff70:	684b      	ldr	r3, [r1, #4]
   bff72:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bff74:	b113      	cbz	r3, bff7c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   bff76:	685a      	ldr	r2, [r3, #4]
   bff78:	3201      	adds	r2, #1
   bff7a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bff7c:	4770      	bx	lr

000bff7e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bff7e:	b513      	push	{r0, r1, r4, lr}
   bff80:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bff82:	4608      	mov	r0, r1
   bff84:	9101      	str	r1, [sp, #4]
   bff86:	f004 f906 	bl	c4196 <strlen>
   bff8a:	9901      	ldr	r1, [sp, #4]
   bff8c:	4602      	mov	r2, r0
   bff8e:	4620      	mov	r0, r4
}
   bff90:	b002      	add	sp, #8
   bff92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bff96:	f7ff bf59 	b.w	bfe4c <_ZN5spark10JSONWriter5valueEPKcj>

000bff9a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bff9a:	b513      	push	{r0, r1, r4, lr}
   bff9c:	4604      	mov	r4, r0
    write(str, strlen(str));
   bff9e:	4608      	mov	r0, r1
   bffa0:	9101      	str	r1, [sp, #4]
   bffa2:	f004 f8f8 	bl	c4196 <strlen>
   bffa6:	6823      	ldr	r3, [r4, #0]
   bffa8:	9901      	ldr	r1, [sp, #4]
   bffaa:	68db      	ldr	r3, [r3, #12]
   bffac:	4602      	mov	r2, r0
   bffae:	4620      	mov	r0, r4
}
   bffb0:	b002      	add	sp, #8
   bffb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bffb6:	4718      	bx	r3

000bffb8 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bffb8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bffba:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bffbc:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bffc0:	68db      	ldr	r3, [r3, #12]
   bffc2:	2201      	movs	r2, #1
   bffc4:	f10d 0107 	add.w	r1, sp, #7
   bffc8:	4798      	blx	r3
}
   bffca:	b003      	add	sp, #12
   bffcc:	f85d fb04 	ldr.w	pc, [sp], #4

000bffd0 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bffd0:	b40e      	push	{r1, r2, r3}
   bffd2:	b503      	push	{r0, r1, lr}
   bffd4:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bffd6:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bffd8:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bffdc:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bffde:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bffe0:	f000 ffe9 	bl	c0fb6 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bffe4:	b002      	add	sp, #8
   bffe6:	f85d eb04 	ldr.w	lr, [sp], #4
   bffea:	b003      	add	sp, #12
   bffec:	4770      	bx	lr

000bffee <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bffee:	680a      	ldr	r2, [r1, #0]
   bfff0:	6002      	str	r2, [r0, #0]
   bfff2:	684a      	ldr	r2, [r1, #4]
   bfff4:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bfff6:	2200      	movs	r2, #0
   bfff8:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bfffc:	b510      	push	{r4, lr}
   bfffe:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   c0000:	688c      	ldr	r4, [r1, #8]
   c0002:	6084      	str	r4, [r0, #8]
   c0004:	68cc      	ldr	r4, [r1, #12]
   c0006:	60c4      	str	r4, [r0, #12]
   c0008:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   c000a:	608a      	str	r2, [r1, #8]
   c000c:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   c000e:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   c0010:	610a      	str	r2, [r1, #16]
   c0012:	bd10      	pop	{r4, pc}

000c0014 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   c0014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   c0018:	e9d0 8400 	ldrd	r8, r4, [r0]
   c001c:	f04f 0a14 	mov.w	sl, #20
   c0020:	9300      	str	r3, [sp, #0]
   c0022:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   c0026:	4b18      	ldr	r3, [pc, #96]	; (c0088 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   c0028:	10a4      	asrs	r4, r4, #2
   c002a:	4617      	mov	r7, r2
   c002c:	435c      	muls	r4, r3
   c002e:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   c0030:	2c00      	cmp	r4, #0
   c0032:	dd21      	ble.n	c0078 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   c0034:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   c0036:	fb0a f006 	mul.w	r0, sl, r6
   c003a:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   c003e:	463a      	mov	r2, r7
   c0040:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   c0044:	5828      	ldr	r0, [r5, r0]
   c0046:	9101      	str	r1, [sp, #4]
   c0048:	455f      	cmp	r7, fp
   c004a:	bf28      	it	cs
   c004c:	465a      	movcs	r2, fp
   c004e:	f004 f8bd 	bl	c41cc <strncmp>
                if (cmp == 0) {
   c0052:	2800      	cmp	r0, #0
   c0054:	9901      	ldr	r1, [sp, #4]
   c0056:	f04f 0301 	mov.w	r3, #1
   c005a:	d10b      	bne.n	c0074 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   c005c:	455f      	cmp	r7, fp
   c005e:	d103      	bne.n	c0068 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   c0060:	9a00      	ldr	r2, [sp, #0]
   c0062:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   c0064:	4634      	mov	r4, r6
   c0066:	e7e3      	b.n	c0030 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   c0068:	d9fc      	bls.n	c0064 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   c006a:	1ba6      	subs	r6, r4, r6
	      ++__first;
   c006c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   c0070:	3e01      	subs	r6, #1
   c0072:	e7f7      	b.n	c0064 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   c0074:	dbf9      	blt.n	c006a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   c0076:	e7f5      	b.n	c0064 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   c0078:	eba5 0508 	sub.w	r5, r5, r8
}
   c007c:	4802      	ldr	r0, [pc, #8]	; (c0088 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   c007e:	10ad      	asrs	r5, r5, #2
   c0080:	4368      	muls	r0, r5
   c0082:	b003      	add	sp, #12
   c0084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c0088:	cccccccd 	.word	0xcccccccd

000c008c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   c008c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   c008e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   c0090:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   c0092:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   c0094:	b303      	cbz	r3, c00d8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   c0096:	b1f9      	cbz	r1, c00d8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   c0098:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   c009a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   c009e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   c00a0:	a903      	add	r1, sp, #12
   c00a2:	a801      	add	r0, sp, #4
   c00a4:	f7ff ff19 	bl	bfeda <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c00a8:	4601      	mov	r1, r0
   c00aa:	b1a8      	cbz	r0, c00d8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   c00ac:	f10d 030b 	add.w	r3, sp, #11
   c00b0:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   c00b2:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   c00b6:	4620      	mov	r0, r4
   c00b8:	f7ff ffac 	bl	c0014 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   c00bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   c00c0:	b153      	cbz	r3, c00d8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   c00c2:	6823      	ldr	r3, [r4, #0]
   c00c4:	2414      	movs	r4, #20
   c00c6:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   c00ca:	3408      	adds	r4, #8
            if (node.level >= 0) {
   c00cc:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   c00d0:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   c00d2:	bfa8      	it	ge
   c00d4:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   c00d6:	e7e3      	b.n	c00a0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   c00d8:	4628      	mov	r0, r5
   c00da:	b004      	add	sp, #16
   c00dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000c00e0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   c00e0:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   c00e2:	4c09      	ldr	r4, [pc, #36]	; (c0108 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   c00e4:	7823      	ldrb	r3, [r4, #0]
   c00e6:	f3bf 8f5b 	dmb	ish
   c00ea:	07db      	lsls	r3, r3, #31
   c00ec:	d409      	bmi.n	c0102 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   c00ee:	4620      	mov	r0, r4
   c00f0:	f7f3 ffe6 	bl	b40c0 <__cxa_guard_acquire>
   c00f4:	b128      	cbz	r0, c0102 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   c00f6:	4620      	mov	r0, r4
   c00f8:	f7f3 ffe7 	bl	b40ca <__cxa_guard_release>
   c00fc:	4803      	ldr	r0, [pc, #12]	; (c010c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   c00fe:	f003 ff71 	bl	c3fe4 <atexit>
}
   c0102:	4803      	ldr	r0, [pc, #12]	; (c0110 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   c0104:	bd10      	pop	{r4, pc}
   c0106:	bf00      	nop
   c0108:	2003e668 	.word	0x2003e668
   c010c:	000bfed3 	.word	0x000bfed3
   c0110:	2003db70 	.word	0x2003db70

000c0114 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   c0114:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   c0116:	4c09      	ldr	r4, [pc, #36]	; (c013c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   c0118:	7823      	ldrb	r3, [r4, #0]
   c011a:	f3bf 8f5b 	dmb	ish
   c011e:	07db      	lsls	r3, r3, #31
   c0120:	d409      	bmi.n	c0136 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c0122:	4620      	mov	r0, r4
   c0124:	f7f3 ffcc 	bl	b40c0 <__cxa_guard_acquire>
   c0128:	b128      	cbz	r0, c0136 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c012a:	4620      	mov	r0, r4
   c012c:	f7f3 ffcd 	bl	b40ca <__cxa_guard_release>
   c0130:	4803      	ldr	r0, [pc, #12]	; (c0140 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   c0132:	f003 ff57 	bl	c3fe4 <atexit>
    return &factory;
}
   c0136:	4803      	ldr	r0, [pc, #12]	; (c0144 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   c0138:	bd10      	pop	{r4, pc}
   c013a:	bf00      	nop
   c013c:	2003e66c 	.word	0x2003e66c
   c0140:	000bff3b 	.word	0x000bff3b
   c0144:	2003db74 	.word	0x2003db74

000c0148 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   c0148:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   c014a:	2500      	movs	r5, #0
   c014c:	4604      	mov	r4, r0
   c014e:	e9c0 5500 	strd	r5, r5, [r0]
   c0152:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c0156:	6085      	str	r5, [r0, #8]
   c0158:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   c015a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   c015e:	f7fd fb3d 	bl	bd7dc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   c0162:	f7ff ffbd 	bl	c00e0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   c0166:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c0168:	f7ff ffd4 	bl	c0114 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   c016c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c016e:	6220      	str	r0, [r4, #32]
}
   c0170:	4620      	mov	r0, r4
   c0172:	bd38      	pop	{r3, r4, r5, pc}

000c0174 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   c0174:	b510      	push	{r4, lr}
    static LogManager mgr;
   c0176:	4c0a      	ldr	r4, [pc, #40]	; (c01a0 <_ZN5spark10LogManager8instanceEv+0x2c>)
   c0178:	7823      	ldrb	r3, [r4, #0]
   c017a:	f3bf 8f5b 	dmb	ish
   c017e:	07db      	lsls	r3, r3, #31
   c0180:	d40c      	bmi.n	c019c <_ZN5spark10LogManager8instanceEv+0x28>
   c0182:	4620      	mov	r0, r4
   c0184:	f7f3 ff9c 	bl	b40c0 <__cxa_guard_acquire>
   c0188:	b140      	cbz	r0, c019c <_ZN5spark10LogManager8instanceEv+0x28>
   c018a:	4806      	ldr	r0, [pc, #24]	; (c01a4 <_ZN5spark10LogManager8instanceEv+0x30>)
   c018c:	f7ff ffdc 	bl	c0148 <_ZN5spark10LogManagerC1Ev>
   c0190:	4620      	mov	r0, r4
   c0192:	f7f3 ff9a 	bl	b40ca <__cxa_guard_release>
   c0196:	4804      	ldr	r0, [pc, #16]	; (c01a8 <_ZN5spark10LogManager8instanceEv+0x34>)
   c0198:	f003 ff24 	bl	c3fe4 <atexit>
    return &mgr;
}
   c019c:	4801      	ldr	r0, [pc, #4]	; (c01a4 <_ZN5spark10LogManager8instanceEv+0x30>)
   c019e:	bd10      	pop	{r4, pc}
   c01a0:	2003e664 	.word	0x2003e664
   c01a4:	2003e674 	.word	0x2003e674
   c01a8:	000c06c9 	.word	0x000c06c9

000c01ac <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   c01ac:	4a02      	ldr	r2, [pc, #8]	; (c01b8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   c01ae:	4903      	ldr	r1, [pc, #12]	; (c01bc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   c01b0:	4803      	ldr	r0, [pc, #12]	; (c01c0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   c01b2:	2300      	movs	r3, #0
   c01b4:	f7fd bd3a 	b.w	bdc2c <log_set_callbacks>
   c01b8:	000c04ad 	.word	0x000c04ad
   c01bc:	000c0439 	.word	0x000c0439
   c01c0:	000c03b9 	.word	0x000c03b9

000c01c4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   c01c4:	2300      	movs	r3, #0
   c01c6:	461a      	mov	r2, r3
   c01c8:	4619      	mov	r1, r3
   c01ca:	4618      	mov	r0, r3
   c01cc:	f7fd bd2e 	b.w	bdc2c <log_set_callbacks>

000c01d0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c01d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   c01d2:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c01d4:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   c01d6:	4668      	mov	r0, sp
   c01d8:	f7ff fec8 	bl	bff6c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   c01dc:	466a      	mov	r2, sp
   c01de:	4629      	mov	r1, r5
   c01e0:	4620      	mov	r0, r4
   c01e2:	f7ff fd53 	bl	bfc8c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   c01e6:	a801      	add	r0, sp, #4
   c01e8:	f7f5 fd20 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c01ec:	4620      	mov	r0, r4
   c01ee:	b003      	add	sp, #12
   c01f0:	bd30      	pop	{r4, r5, pc}

000c01f2 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c01f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   c01f4:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c01f6:	4604      	mov	r4, r0
   c01f8:	4668      	mov	r0, sp
   c01fa:	f7ff feb7 	bl	bff6c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   c01fe:	466a      	mov	r2, sp
   c0200:	4629      	mov	r1, r5
   c0202:	4620      	mov	r0, r4
   c0204:	f7ff fd1e 	bl	bfc44 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c0208:	a801      	add	r0, sp, #4
   c020a:	f7f5 fd0f 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c020e:	4620      	mov	r0, r4
   c0210:	b003      	add	sp, #12
   c0212:	bd30      	pop	{r4, r5, pc}

000c0214 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c0214:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   c0216:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c0218:	4604      	mov	r4, r0
   c021a:	4668      	mov	r0, sp
   c021c:	f7ff fea6 	bl	bff6c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   c0220:	466a      	mov	r2, sp
   c0222:	4629      	mov	r1, r5
   c0224:	4620      	mov	r0, r4
   c0226:	f7ff fcb6 	bl	bfb96 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c022a:	a801      	add	r0, sp, #4
   c022c:	f7f5 fcfe 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0230:	4620      	mov	r0, r4
   c0232:	b003      	add	sp, #12
   c0234:	bd30      	pop	{r4, r5, pc}
	...

000c0238 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   c0238:	b570      	push	{r4, r5, r6, lr}
   c023a:	b08a      	sub	sp, #40	; 0x28
   c023c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   c023e:	4601      	mov	r1, r0
   c0240:	a804      	add	r0, sp, #16
   c0242:	f7ff ffc5 	bl	c01d0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   c0246:	4e14      	ldr	r6, [pc, #80]	; (c0298 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   c0248:	a804      	add	r0, sp, #16
   c024a:	f7ff fd37 	bl	bfcbc <_ZN5spark18JSONObjectIterator4nextEv>
   c024e:	b1e8      	cbz	r0, c028c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   c0250:	a904      	add	r1, sp, #16
   c0252:	4668      	mov	r0, sp
   c0254:	f7ff ffcd 	bl	c01f2 <_ZNK5spark18JSONObjectIterator4nameEv>
   c0258:	9802      	ldr	r0, [sp, #8]
   c025a:	4631      	mov	r1, r6
   c025c:	f7ff fe66 	bl	bff2c <_ZNK5spark10JSONStringeqEPKc.isra.0>
   c0260:	4604      	mov	r4, r0
   c0262:	b110      	cbz	r0, c026a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   c0264:	1e2c      	subs	r4, r5, #0
   c0266:	bf18      	it	ne
   c0268:	2401      	movne	r4, #1
   c026a:	a801      	add	r0, sp, #4
   c026c:	f7f5 fcde 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c0270:	2c00      	cmp	r4, #0
   c0272:	d0e9      	beq.n	c0248 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   c0274:	a904      	add	r1, sp, #16
   c0276:	4668      	mov	r0, sp
   c0278:	f7ff ffcc 	bl	c0214 <_ZNK5spark18JSONObjectIterator5valueEv>
   c027c:	4668      	mov	r0, sp
   c027e:	f7ff fcc0 	bl	bfc02 <_ZNK5spark9JSONValue5toIntEv>
   c0282:	6028      	str	r0, [r5, #0]
   c0284:	a801      	add	r0, sp, #4
   c0286:	f7f5 fcd1 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c028a:	e7dd      	b.n	c0248 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   c028c:	a805      	add	r0, sp, #20
   c028e:	f7f5 fccd 	bl	b5c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0292:	b00a      	add	sp, #40	; 0x28
   c0294:	bd70      	pop	{r4, r5, r6, pc}
   c0296:	bf00      	nop
   c0298:	000c7999 	.word	0x000c7999

000c029c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c029c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c029e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   c02a0:	4620      	mov	r0, r4
   c02a2:	4913      	ldr	r1, [pc, #76]	; (c02f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c02a4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   c02a6:	f003 ff47 	bl	c4138 <strcmp>
   c02aa:	b950      	cbnz	r0, c02c2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   c02ac:	f001 fb02 	bl	c18b4 <_Z16_fetch_usbserialv>
   c02b0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   c02b4:	f001 faee 	bl	c1894 <_ZN9USBSerial5beginEl>
}
   c02b8:	b003      	add	sp, #12
   c02ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   c02be:	f001 baf9 	b.w	c18b4 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   c02c2:	490c      	ldr	r1, [pc, #48]	; (c02f4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   c02c4:	4620      	mov	r0, r4
   c02c6:	f003 ff37 	bl	c4138 <strcmp>
   c02ca:	b978      	cbnz	r0, c02ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   c02cc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   c02d0:	a901      	add	r1, sp, #4
   c02d2:	4628      	mov	r0, r5
        int baud = 9600;
   c02d4:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   c02d6:	f7ff ffaf 	bl	c0238 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   c02da:	f001 fc83 	bl	c1be4 <_Z22__fetch_global_Serial1v>
   c02de:	9901      	ldr	r1, [sp, #4]
   c02e0:	f001 fa80 	bl	c17e4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   c02e4:	f001 fc7e 	bl	c1be4 <_Z22__fetch_global_Serial1v>
}
   c02e8:	b003      	add	sp, #12
   c02ea:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   c02ec:	2000      	movs	r0, #0
   c02ee:	e7fb      	b.n	c02e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   c02f0:	000c799e 	.word	0x000c799e
   c02f4:	000c79a5 	.word	0x000c79a5

000c02f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   c02f8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   c02fa:	e9d0 5300 	ldrd	r5, r3, [r0]
   c02fe:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   c0300:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   c0302:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0306:	42ae      	cmp	r6, r5
   c0308:	d005      	beq.n	c0316 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   c030a:	f105 0008 	add.w	r0, r5, #8
   c030e:	f7ff fff3 	bl	c02f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0312:	3514      	adds	r5, #20
   c0314:	e7f7      	b.n	c0306 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   c0316:	6820      	ldr	r0, [r4, #0]
   c0318:	f7fd fd7e 	bl	bde18 <free>
}
   c031c:	4620      	mov	r0, r4
   c031e:	bd70      	pop	{r4, r5, r6, pc}

000c0320 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   c0320:	b510      	push	{r4, lr}
   c0322:	4604      	mov	r4, r0
   c0324:	300c      	adds	r0, #12
   c0326:	f7ff ffe7 	bl	c02f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c032a:	4620      	mov	r0, r4
   c032c:	f7fe f9a9 	bl	be682 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0330:	4620      	mov	r0, r4
   c0332:	bd10      	pop	{r4, pc}

000c0334 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   c0334:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   c0336:	4b04      	ldr	r3, [pc, #16]	; (c0348 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   c0338:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   c033a:	f840 3b04 	str.w	r3, [r0], #4
   c033e:	f7ff ffef 	bl	c0320 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   c0342:	4620      	mov	r0, r4
   c0344:	bd10      	pop	{r4, pc}
   c0346:	bf00      	nop
   c0348:	000c6854 	.word	0x000c6854

000c034c <_ZN5spark16StreamLogHandlerD0Ev>:
   c034c:	b510      	push	{r4, lr}
   c034e:	4604      	mov	r4, r0
   c0350:	f7ff fff0 	bl	c0334 <_ZN5spark16StreamLogHandlerD1Ev>
   c0354:	4620      	mov	r0, r4
   c0356:	2124      	movs	r1, #36	; 0x24
   c0358:	f7f3 fea3 	bl	b40a2 <_ZdlPvj>
   c035c:	4620      	mov	r0, r4
   c035e:	bd10      	pop	{r4, pc}

000c0360 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   c0360:	b510      	push	{r4, lr}
   c0362:	4b03      	ldr	r3, [pc, #12]	; (c0370 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   c0364:	6003      	str	r3, [r0, #0]
   c0366:	4604      	mov	r4, r0
   c0368:	f7ff ffe4 	bl	c0334 <_ZN5spark16StreamLogHandlerD1Ev>
   c036c:	4620      	mov	r0, r4
   c036e:	bd10      	pop	{r4, pc}
   c0370:	000c7a40 	.word	0x000c7a40

000c0374 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   c0374:	b510      	push	{r4, lr}
   c0376:	4604      	mov	r4, r0
   c0378:	f7ff fff2 	bl	c0360 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   c037c:	4620      	mov	r0, r4
   c037e:	2124      	movs	r1, #36	; 0x24
   c0380:	f7f3 fe8f 	bl	b40a2 <_ZdlPvj>
   c0384:	4620      	mov	r0, r4
   c0386:	bd10      	pop	{r4, pc}

000c0388 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   c0388:	2200      	movs	r2, #0
   c038a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   c038e:	b510      	push	{r4, lr}
        capacity_(0) {
   c0390:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   c0392:	680c      	ldr	r4, [r1, #0]
   c0394:	6004      	str	r4, [r0, #0]
   c0396:	684c      	ldr	r4, [r1, #4]
   c0398:	6044      	str	r4, [r0, #4]
   c039a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c039c:	600a      	str	r2, [r1, #0]
   c039e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c03a0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c03a2:	608a      	str	r2, [r1, #8]
}
   c03a4:	bd10      	pop	{r4, pc}

000c03a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   c03a6:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   c03a8:	6803      	ldr	r3, [r0, #0]
   c03aa:	4604      	mov	r4, r0
   c03ac:	6818      	ldr	r0, [r3, #0]
   c03ae:	f7fd fa2d 	bl	bd80c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   c03b2:	4620      	mov	r0, r4
   c03b4:	bd10      	pop	{r4, pc}
	...

000c03b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   c03b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c03bc:	b087      	sub	sp, #28
   c03be:	4680      	mov	r8, r0
   c03c0:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   c03c2:	4b1c      	ldr	r3, [pc, #112]	; (c0434 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   c03c4:	685b      	ldr	r3, [r3, #4]
   c03c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c03ca:	4689      	mov	r9, r1
   c03cc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   c03ce:	b96b      	cbnz	r3, c03ec <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   c03d0:	f7ff fed0 	bl	c0174 <_ZN5spark10LogManager8instanceEv>
   c03d4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c03d6:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   c03da:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c03dc:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   c03de:	f7ff fda3 	bl	bff28 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   c03e2:	7b23      	ldrb	r3, [r4, #12]
   c03e4:	b12b      	cbz	r3, c03f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   c03e6:	a805      	add	r0, sp, #20
   c03e8:	f7ff ffdd 	bl	c03a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   c03ec:	b007      	add	sp, #28
   c03ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   c03f2:	2301      	movs	r3, #1
   c03f4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   c03f6:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   c03fa:	fa5f f989 	uxtb.w	r9, r9
   c03fe:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c0402:	45aa      	cmp	sl, r5
   c0404:	d012      	beq.n	c042c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   c0406:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   c040a:	4631      	mov	r1, r6
   c040c:	1d38      	adds	r0, r7, #4
   c040e:	f7ff fe3d 	bl	c008c <_ZNK5spark6detail9LogFilter5levelEPKc>
   c0412:	4581      	cmp	r9, r0
   c0414:	d3f5      	bcc.n	c0402 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   c0416:	683b      	ldr	r3, [r7, #0]
   c0418:	9a03      	ldr	r2, [sp, #12]
   c041a:	9200      	str	r2, [sp, #0]
   c041c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   c0420:	464a      	mov	r2, r9
   c0422:	4633      	mov	r3, r6
   c0424:	4641      	mov	r1, r8
   c0426:	4638      	mov	r0, r7
   c0428:	47d8      	blx	fp
   c042a:	e7ea      	b.n	c0402 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   c042c:	2300      	movs	r3, #0
   c042e:	7323      	strb	r3, [r4, #12]
   c0430:	e7d9      	b.n	c03e6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   c0432:	bf00      	nop
   c0434:	e000ed00 	.word	0xe000ed00

000c0438 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   c0438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c043c:	469b      	mov	fp, r3
   c043e:	4b1a      	ldr	r3, [pc, #104]	; (c04a8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   c0440:	685b      	ldr	r3, [r3, #4]
   c0442:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c0446:	4680      	mov	r8, r0
   c0448:	4689      	mov	r9, r1
   c044a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   c044c:	b96b      	cbnz	r3, c046a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   c044e:	f7ff fe91 	bl	c0174 <_ZN5spark10LogManager8instanceEv>
   c0452:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c0454:	f100 0324 	add.w	r3, r0, #36	; 0x24
   c0458:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c045a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c045c:	f7ff fd64 	bl	bff28 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   c0460:	7b23      	ldrb	r3, [r4, #12]
   c0462:	b12b      	cbz	r3, c0470 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   c0464:	a801      	add	r0, sp, #4
   c0466:	f7ff ff9e 	bl	c03a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c046a:	b003      	add	sp, #12
   c046c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   c0470:	2301      	movs	r3, #1
   c0472:	7323      	strb	r3, [r4, #12]
   c0474:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   c0478:	b2f6      	uxtb	r6, r6
   c047a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c047e:	4555      	cmp	r5, sl
   c0480:	d00e      	beq.n	c04a0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   c0482:	f855 7b04 	ldr.w	r7, [r5], #4
   c0486:	4659      	mov	r1, fp
   c0488:	1d38      	adds	r0, r7, #4
   c048a:	f7ff fdff 	bl	c008c <_ZNK5spark6detail9LogFilter5levelEPKc>
   c048e:	4286      	cmp	r6, r0
   c0490:	d3f5      	bcc.n	c047e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   c0492:	683b      	ldr	r3, [r7, #0]
   c0494:	464a      	mov	r2, r9
   c0496:	68db      	ldr	r3, [r3, #12]
   c0498:	4641      	mov	r1, r8
   c049a:	4638      	mov	r0, r7
   c049c:	4798      	blx	r3
   c049e:	e7ee      	b.n	c047e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   c04a0:	2300      	movs	r3, #0
   c04a2:	7323      	strb	r3, [r4, #12]
   c04a4:	e7de      	b.n	c0464 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   c04a6:	bf00      	nop
   c04a8:	e000ed00 	.word	0xe000ed00

000c04ac <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   c04ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c04b0:	4b16      	ldr	r3, [pc, #88]	; (c050c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   c04b2:	685b      	ldr	r3, [r3, #4]
   c04b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c04b8:	4605      	mov	r5, r0
   c04ba:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   c04bc:	bb1b      	cbnz	r3, c0506 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   c04be:	f7ff fe59 	bl	c0174 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   c04c2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   c04c6:	4604      	mov	r4, r0
   c04c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c04ca:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c04cc:	f7ff fd2c 	bl	bff28 <_ZN14RecursiveMutex4lockEv.isra.0>
   c04d0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   c04d4:	2446      	movs	r4, #70	; 0x46
   c04d6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c04da:	45b0      	cmp	r8, r6
   c04dc:	d109      	bne.n	c04f2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   c04de:	a801      	add	r0, sp, #4
   c04e0:	f7ff ff61 	bl	c03a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   c04e4:	42a5      	cmp	r5, r4
   c04e6:	bfb4      	ite	lt
   c04e8:	2000      	movlt	r0, #0
   c04ea:	2001      	movge	r0, #1
}
   c04ec:	b002      	add	sp, #8
   c04ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   c04f2:	f856 0b04 	ldr.w	r0, [r6], #4
   c04f6:	4639      	mov	r1, r7
   c04f8:	3004      	adds	r0, #4
   c04fa:	f7ff fdc7 	bl	c008c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   c04fe:	4284      	cmp	r4, r0
   c0500:	bfa8      	it	ge
   c0502:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   c0504:	e7e9      	b.n	c04da <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   c0506:	2000      	movs	r0, #0
   c0508:	e7f0      	b.n	c04ec <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   c050a:	bf00      	nop
   c050c:	e000ed00 	.word	0xe000ed00

000c0510 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c0510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0512:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   c0516:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c0518:	4604      	mov	r4, r0
   c051a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c051c:	db0d      	blt.n	c053a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   c051e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   c0520:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   c0522:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   c0524:	dd04      	ble.n	c0530 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   c0526:	00b9      	lsls	r1, r7, #2
   c0528:	f7fd fc7e 	bl	bde28 <realloc>
            if (!d) {
   c052c:	b918      	cbnz	r0, c0536 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   c052e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   c0530:	f7fd fc72 	bl	bde18 <free>
        T* d = nullptr;
   c0534:	2000      	movs	r0, #0
        data_ = d;
   c0536:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   c0538:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   c053a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   c053c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   c053e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   c0542:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   c0544:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   c0548:	1d08      	adds	r0, r1, #4
   c054a:	f003 fd7f 	bl	c404c <memmove>
    new(p) T(std::move(value));
   c054e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   c0552:	6863      	ldr	r3, [r4, #4]
   c0554:	3301      	adds	r3, #1
   c0556:	6063      	str	r3, [r4, #4]
    return true;
   c0558:	2001      	movs	r0, #1
   c055a:	e7e8      	b.n	c052e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000c055c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   c055c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   c055e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   c0562:	4604      	mov	r4, r0
   c0564:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0566:	9301      	str	r3, [sp, #4]
   c0568:	460d      	mov	r5, r1
      { _M_device.lock(); }
   c056a:	f7ff fcdd 	bl	bff28 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   c056e:	e9d4 3200 	ldrd	r3, r2, [r4]
   c0572:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   c0576:	4293      	cmp	r3, r2
   c0578:	4619      	mov	r1, r3
   c057a:	d00b      	beq.n	c0594 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   c057c:	6809      	ldr	r1, [r1, #0]
   c057e:	42a9      	cmp	r1, r5
   c0580:	f103 0304 	add.w	r3, r3, #4
   c0584:	d1f7      	bne.n	c0576 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   c0586:	a801      	add	r0, sp, #4
   c0588:	f7ff ff0d 	bl	c03a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c058c:	2500      	movs	r5, #0
}
   c058e:	4628      	mov	r0, r5
   c0590:	b003      	add	sp, #12
   c0592:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   c0594:	4629      	mov	r1, r5
   c0596:	4620      	mov	r0, r4
   c0598:	f7ff ffba 	bl	c0510 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   c059c:	4605      	mov	r5, r0
   c059e:	2800      	cmp	r0, #0
   c05a0:	d0f1      	beq.n	c0586 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   c05a2:	6863      	ldr	r3, [r4, #4]
   c05a4:	2b01      	cmp	r3, #1
   c05a6:	d101      	bne.n	c05ac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   c05a8:	f7ff fe00 	bl	c01ac <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c05ac:	a801      	add	r0, sp, #4
   c05ae:	f7ff fefa 	bl	c03a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c05b2:	e7ec      	b.n	c058e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000c05b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c05b4:	b570      	push	{r4, r5, r6, lr}
   c05b6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   c05b8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c05bc:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   c05be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   c05c2:	4282      	cmp	r2, r0
   c05c4:	d00f      	beq.n	c05e6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   c05c6:	4601      	mov	r1, r0
            if (*p == value) {
   c05c8:	681d      	ldr	r5, [r3, #0]
   c05ca:	f851 6b04 	ldr.w	r6, [r1], #4
   c05ce:	42ae      	cmp	r6, r5
   c05d0:	d107      	bne.n	c05e2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   c05d2:	1a52      	subs	r2, r2, r1
   c05d4:	f003 fd3a 	bl	c404c <memmove>
    --size_;
   c05d8:	6863      	ldr	r3, [r4, #4]
   c05da:	3b01      	subs	r3, #1
   c05dc:	6063      	str	r3, [r4, #4]
    return true;
   c05de:	2001      	movs	r0, #1
}
   c05e0:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   c05e2:	4608      	mov	r0, r1
   c05e4:	e7ed      	b.n	c05c2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   c05e6:	2000      	movs	r0, #0
   c05e8:	e7fa      	b.n	c05e0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000c05ea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   c05ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   c05ec:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   c05f0:	4604      	mov	r4, r0
   c05f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   c05f4:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c05f6:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   c05f8:	f7ff fc96 	bl	bff28 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   c05fc:	a901      	add	r1, sp, #4
   c05fe:	4620      	mov	r0, r4
   c0600:	f7ff ffd8 	bl	c05b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   c0604:	b118      	cbz	r0, c060e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   c0606:	6863      	ldr	r3, [r4, #4]
   c0608:	b90b      	cbnz	r3, c060e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   c060a:	f7ff fddb 	bl	c01c4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c060e:	a803      	add	r0, sp, #12
   c0610:	f7ff fec9 	bl	c03a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c0614:	b004      	add	sp, #16
   c0616:	bd10      	pop	{r4, pc}

000c0618 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   c0618:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   c061a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   c061e:	2318      	movs	r3, #24
   c0620:	4604      	mov	r4, r0
   c0622:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   c0626:	42ae      	cmp	r6, r5
   c0628:	d015      	beq.n	c0656 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   c062a:	f105 0110 	add.w	r1, r5, #16
   c062e:	4620      	mov	r0, r4
   c0630:	f7ff ffc0 	bl	c05b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   c0634:	6863      	ldr	r3, [r4, #4]
   c0636:	b90b      	cbnz	r3, c063c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   c0638:	f7ff fdc4 	bl	c01c4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   c063c:	69e0      	ldr	r0, [r4, #28]
   c063e:	6929      	ldr	r1, [r5, #16]
   c0640:	6803      	ldr	r3, [r0, #0]
   c0642:	68db      	ldr	r3, [r3, #12]
   c0644:	4798      	blx	r3
        if (h.stream) {
   c0646:	6969      	ldr	r1, [r5, #20]
   c0648:	b119      	cbz	r1, c0652 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   c064a:	6a20      	ldr	r0, [r4, #32]
   c064c:	6803      	ldr	r3, [r0, #0]
   c064e:	68db      	ldr	r3, [r3, #12]
   c0650:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   c0652:	3518      	adds	r5, #24
   c0654:	e7e7      	b.n	c0626 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   c0656:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c065a:	2618      	movs	r6, #24
   c065c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0660:	42ae      	cmp	r6, r5
   c0662:	d004      	beq.n	c066e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   c0664:	4628      	mov	r0, r5
   c0666:	f000 fea9 	bl	c13bc <_ZN6StringD1Ev>
   c066a:	3518      	adds	r5, #24
   c066c:	e7f8      	b.n	c0660 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   c066e:	2300      	movs	r3, #0
   c0670:	6163      	str	r3, [r4, #20]
}
   c0672:	bd70      	pop	{r4, r5, r6, pc}

000c0674 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   c0674:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c0676:	4604      	mov	r4, r0
    resetSystemCallbacks();
   c0678:	f7ff fda4 	bl	c01c4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c067c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   c0680:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0682:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0684:	f7ff fc50 	bl	bff28 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   c0688:	4620      	mov	r0, r4
   c068a:	f7ff ffc5 	bl	c0618 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   c068e:	a801      	add	r0, sp, #4
   c0690:	f7ff fe89 	bl	c03a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   c0694:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c0696:	b108      	cbz	r0, c069c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   c0698:	f7fd f8a8 	bl	bd7ec <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   c069c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c06a0:	2618      	movs	r6, #24
   c06a2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c06a6:	42ae      	cmp	r6, r5
   c06a8:	d004      	beq.n	c06b4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   c06aa:	4628      	mov	r0, r5
   c06ac:	f000 fe86 	bl	c13bc <_ZN6StringD1Ev>
   c06b0:	3518      	adds	r5, #24
   c06b2:	e7f8      	b.n	c06a6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   c06b4:	6920      	ldr	r0, [r4, #16]
   c06b6:	f7fd fbaf 	bl	bde18 <free>
   c06ba:	6820      	ldr	r0, [r4, #0]
   c06bc:	f7fd fbac 	bl	bde18 <free>
}
   c06c0:	4620      	mov	r0, r4
   c06c2:	b002      	add	sp, #8
   c06c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000c06c8 <__tcf_2>:
    static LogManager mgr;
   c06c8:	4801      	ldr	r0, [pc, #4]	; (c06d0 <__tcf_2+0x8>)
   c06ca:	f7ff bfd3 	b.w	c0674 <_ZN5spark10LogManagerD1Ev>
   c06ce:	bf00      	nop
   c06d0:	2003e674 	.word	0x2003e674

000c06d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   c06d4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c06d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c06d8:	4604      	mov	r4, r0
   c06da:	460d      	mov	r5, r1
   c06dc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c06de:	d915      	bls.n	c070c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   c06e0:	4290      	cmp	r0, r2
   c06e2:	d214      	bcs.n	c070e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   c06e4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   c06e8:	1a75      	subs	r5, r6, r1
   c06ea:	f1a1 0714 	sub.w	r7, r1, #20
   c06ee:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c06f0:	42b7      	cmp	r7, r6
   c06f2:	d01a      	beq.n	c072a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   c06f4:	b11c      	cbz	r4, c06fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   c06f6:	4631      	mov	r1, r6
   c06f8:	4620      	mov	r0, r4
   c06fa:	f7ff fc78 	bl	bffee <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   c06fe:	f106 0008 	add.w	r0, r6, #8
   c0702:	f7ff fdf9 	bl	c02f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   c0706:	3e14      	subs	r6, #20
   c0708:	3c14      	subs	r4, #20
   c070a:	e7f1      	b.n	c06f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   c070c:	d00d      	beq.n	c072a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   c070e:	42b5      	cmp	r5, r6
   c0710:	d00b      	beq.n	c072a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   c0712:	b11c      	cbz	r4, c071c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   c0714:	4629      	mov	r1, r5
   c0716:	4620      	mov	r0, r4
   c0718:	f7ff fc69 	bl	bffee <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   c071c:	f105 0008 	add.w	r0, r5, #8
   c0720:	f7ff fdea 	bl	c02f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   c0724:	3514      	adds	r5, #20
   c0726:	3414      	adds	r4, #20
   c0728:	e7f1      	b.n	c070e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   c072a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c072c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   c072c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c072e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0730:	4604      	mov	r4, r0
   c0732:	460d      	mov	r5, r1
   c0734:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c0736:	d914      	bls.n	c0762 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   c0738:	4290      	cmp	r0, r2
   c073a:	d213      	bcs.n	c0764 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   c073c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   c0740:	1a75      	subs	r5, r6, r1
   c0742:	f1a1 0710 	sub.w	r7, r1, #16
   c0746:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0748:	42b7      	cmp	r7, r6
   c074a:	d018      	beq.n	c077e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   c074c:	b11c      	cbz	r4, c0756 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   c074e:	4631      	mov	r1, r6
   c0750:	4620      	mov	r0, r4
   c0752:	f000 feaf 	bl	c14b4 <_ZN6StringC1EOS_>
                end->~T();
   c0756:	4630      	mov	r0, r6
   c0758:	f000 fe30 	bl	c13bc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   c075c:	3e10      	subs	r6, #16
   c075e:	3c10      	subs	r4, #16
   c0760:	e7f2      	b.n	c0748 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   c0762:	d00c      	beq.n	c077e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   c0764:	42b5      	cmp	r5, r6
   c0766:	d00a      	beq.n	c077e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   c0768:	b11c      	cbz	r4, c0772 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   c076a:	4629      	mov	r1, r5
   c076c:	4620      	mov	r0, r4
   c076e:	f000 fea1 	bl	c14b4 <_ZN6StringC1EOS_>
                p->~T();
   c0772:	4628      	mov	r0, r5
   c0774:	f000 fe22 	bl	c13bc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   c0778:	3510      	adds	r5, #16
   c077a:	3410      	adds	r4, #16
   c077c:	e7f2      	b.n	c0764 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   c077e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0780 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   c0780:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   c0782:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   c0784:	4605      	mov	r5, r0
        if (n > 0) {
   c0786:	dd11      	ble.n	c07ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   c0788:	0130      	lsls	r0, r6, #4
   c078a:	f7fd fb3d 	bl	bde08 <malloc>
            if (!d) {
   c078e:	4604      	mov	r4, r0
   c0790:	b158      	cbz	r0, c07aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   c0792:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0796:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   c079a:	f7ff ffc7 	bl	c072c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   c079e:	6828      	ldr	r0, [r5, #0]
   c07a0:	f7fd fb3a 	bl	bde18 <free>
        data_ = d;
   c07a4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   c07a6:	60ae      	str	r6, [r5, #8]
        return true;
   c07a8:	2001      	movs	r0, #1
    }
   c07aa:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   c07ac:	2400      	movs	r4, #0
   c07ae:	e7f6      	b.n	c079e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000c07b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c07b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c07b4:	4690      	mov	r8, r2
   c07b6:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c07b8:	2300      	movs	r3, #0
   c07ba:	9103      	str	r1, [sp, #12]
    return size_;
   c07bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c07c0:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c07c2:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c07c4:	4299      	cmp	r1, r3
        capacity_(0) {
   c07c6:	e9c0 3300 	strd	r3, r3, [r0]
   c07ca:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c07ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c07d2:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c07d6:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c07d8:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c07da:	dc23      	bgt.n	c0824 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c07dc:	e9d8 5700 	ldrd	r5, r7, [r8]
   c07e0:	2314      	movs	r3, #20
   c07e2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c07e6:	42af      	cmp	r7, r5
   c07e8:	d03b      	beq.n	c0862 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c07ea:	4629      	mov	r1, r5
   c07ec:	a80b      	add	r0, sp, #44	; 0x2c
   c07ee:	f000 fe61 	bl	c14b4 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c07f2:	a90b      	add	r1, sp, #44	; 0x2c
   c07f4:	a80f      	add	r0, sp, #60	; 0x3c
   c07f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c07f8:	f000 fe5c 	bl	c14b4 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c07fc:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c0800:	4299      	cmp	r1, r3
   c0802:	da1b      	bge.n	c083c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c0804:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c0806:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c0808:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c080c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c0810:	4631      	mov	r1, r6
   c0812:	f106 0010 	add.w	r0, r6, #16
   c0816:	f7ff ff89 	bl	c072c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c081a:	b9ee      	cbnz	r6, c0858 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c081c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c081e:	3301      	adds	r3, #1
   c0820:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c0822:	e011      	b.n	c0848 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c0824:	a808      	add	r0, sp, #32
   c0826:	f7ff ffab 	bl	c0780 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c082a:	2800      	cmp	r0, #0
   c082c:	d1d6      	bne.n	c07dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c082e:	a808      	add	r0, sp, #32
   c0830:	f7fd ff27 	bl	be682 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0834:	4620      	mov	r0, r4
   c0836:	b015      	add	sp, #84	; 0x54
   c0838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c083c:	3101      	adds	r1, #1
   c083e:	a808      	add	r0, sp, #32
   c0840:	f7ff ff9e 	bl	c0780 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0844:	2800      	cmp	r0, #0
   c0846:	d1dd      	bne.n	c0804 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c0848:	a80f      	add	r0, sp, #60	; 0x3c
   c084a:	f000 fdb7 	bl	c13bc <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c084e:	a80b      	add	r0, sp, #44	; 0x2c
   c0850:	f000 fdb4 	bl	c13bc <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c0854:	3514      	adds	r5, #20
   c0856:	e7c6      	b.n	c07e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c0858:	a90f      	add	r1, sp, #60	; 0x3c
   c085a:	4630      	mov	r0, r6
   c085c:	f000 fe2a 	bl	c14b4 <_ZN6StringC1EOS_>
   c0860:	e7dc      	b.n	c081c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c0862:	2600      	movs	r6, #0
   c0864:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c0868:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c086a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c086e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c0872:	429e      	cmp	r6, r3
   c0874:	da7c      	bge.n	c0970 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   c0876:	0133      	lsls	r3, r6, #4
   c0878:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c087a:	9306      	str	r3, [sp, #24]
        if (!category) {
   c087c:	b90b      	cbnz	r3, c0882 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c087e:	3601      	adds	r6, #1
   c0880:	e7f5      	b.n	c086e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c0882:	2300      	movs	r3, #0
   c0884:	9307      	str	r3, [sp, #28]
   c0886:	fb09 f306 	mul.w	r3, r9, r6
   c088a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c088c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c088e:	a907      	add	r1, sp, #28
   c0890:	a806      	add	r0, sp, #24
   c0892:	f7ff fb22 	bl	bfeda <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c0896:	4682      	mov	sl, r0
   c0898:	2800      	cmp	r0, #0
   c089a:	d0f0      	beq.n	c087e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c089c:	f04f 0300 	mov.w	r3, #0
   c08a0:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c08a4:	4601      	mov	r1, r0
   c08a6:	9a07      	ldr	r2, [sp, #28]
   c08a8:	f10d 0317 	add.w	r3, sp, #23
   c08ac:	4628      	mov	r0, r5
   c08ae:	f7ff fbb1 	bl	c0014 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c08b2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c08b6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c08b8:	2f00      	cmp	r7, #0
   c08ba:	d14a      	bne.n	c0952 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c08bc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c08c0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c08c4:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c08c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c08cc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c08d0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c08d4:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c08d6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c08da:	4293      	cmp	r3, r2
   c08dc:	db17      	blt.n	c090e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c08de:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c08e2:	f1ba 0f00 	cmp.w	sl, #0
   c08e6:	dd30      	ble.n	c094a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c08e8:	fb09 f00a 	mul.w	r0, r9, sl
   c08ec:	f7fd fa8c 	bl	bde08 <malloc>
            if (!d) {
   c08f0:	4683      	mov	fp, r0
   c08f2:	b360      	cbz	r0, c094e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c08f4:	e9d5 1200 	ldrd	r1, r2, [r5]
   c08f8:	fb09 1202 	mla	r2, r9, r2, r1
   c08fc:	f7ff feea 	bl	c06d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c0900:	6828      	ldr	r0, [r5, #0]
   c0902:	f7fd fa89 	bl	bde18 <free>
        data_ = d;
   c0906:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c090a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c090e:	682b      	ldr	r3, [r5, #0]
   c0910:	9a01      	ldr	r2, [sp, #4]
   c0912:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c0916:	686a      	ldr	r2, [r5, #4]
   c0918:	4651      	mov	r1, sl
   c091a:	fb09 3202 	mla	r2, r9, r2, r3
   c091e:	f10a 0014 	add.w	r0, sl, #20
   c0922:	f7ff fed7 	bl	c06d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c0926:	f1ba 0f00 	cmp.w	sl, #0
   c092a:	d003      	beq.n	c0934 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c092c:	a90f      	add	r1, sp, #60	; 0x3c
   c092e:	4650      	mov	r0, sl
   c0930:	f7ff fb5d 	bl	bffee <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c0934:	686b      	ldr	r3, [r5, #4]
   c0936:	3301      	adds	r3, #1
   c0938:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c093a:	a811      	add	r0, sp, #68	; 0x44
   c093c:	f7ff fcdc 	bl	c02f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0940:	b13f      	cbz	r7, c0952 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c0942:	a80b      	add	r0, sp, #44	; 0x2c
   c0944:	f7ff fcd8 	bl	c02f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0948:	e771      	b.n	c082e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c094a:	46bb      	mov	fp, r7
   c094c:	e7d8      	b.n	c0900 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c094e:	2701      	movs	r7, #1
   c0950:	e7f3      	b.n	c093a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c0952:	9b01      	ldr	r3, [sp, #4]
   c0954:	682d      	ldr	r5, [r5, #0]
   c0956:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c095a:	9b06      	ldr	r3, [sp, #24]
   c095c:	781b      	ldrb	r3, [r3, #0]
   c095e:	b92b      	cbnz	r3, c096c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c0960:	f8d8 3000 	ldr.w	r3, [r8]
   c0964:	9a02      	ldr	r2, [sp, #8]
   c0966:	4413      	add	r3, r2
   c0968:	7c1b      	ldrb	r3, [r3, #16]
   c096a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c096c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c096e:	e78e      	b.n	c088e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0970:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c0972:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0974:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c0976:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0978:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c097a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c097c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c097e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0980:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c0982:	60a2      	str	r2, [r4, #8]
   c0984:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c0986:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0988:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c098a:	60e2      	str	r2, [r4, #12]
   c098c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c098e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0990:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c0992:	6122      	str	r2, [r4, #16]
   c0994:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c0996:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c0998:	9b03      	ldr	r3, [sp, #12]
   c099a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c099c:	6162      	str	r2, [r4, #20]
   c099e:	7623      	strb	r3, [r4, #24]
   c09a0:	e7cf      	b.n	c0942 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c09a4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c09a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   c09a6:	4604      	mov	r4, r0
   c09a8:	b087      	sub	sp, #28
   c09aa:	460d      	mov	r5, r1
        filter_(level, filters) {
   c09ac:	4626      	mov	r6, r4
        stream_(&stream) {
   c09ae:	4619      	mov	r1, r3
   c09b0:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c09b2:	4617      	mov	r7, r2
        stream_(&stream) {
   c09b4:	f7f5 fd50 	bl	b6458 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c09b8:	4b0b      	ldr	r3, [pc, #44]	; (c09e8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c09ba:	f846 3b04 	str.w	r3, [r6], #4
   c09be:	4669      	mov	r1, sp
   c09c0:	a803      	add	r0, sp, #12
   c09c2:	f7f5 fd49 	bl	b6458 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c09c6:	aa03      	add	r2, sp, #12
   c09c8:	4639      	mov	r1, r7
   c09ca:	4630      	mov	r0, r6
   c09cc:	f7ff fef0 	bl	c07b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c09d0:	a803      	add	r0, sp, #12
   c09d2:	f7f5 fa9d 	bl	b5f10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c09d6:	4668      	mov	r0, sp
   c09d8:	f7f5 fa9a 	bl	b5f10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c09dc:	4b03      	ldr	r3, [pc, #12]	; (c09ec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c09de:	6023      	str	r3, [r4, #0]
}
   c09e0:	4620      	mov	r0, r4
        stream_(&stream) {
   c09e2:	6225      	str	r5, [r4, #32]
}
   c09e4:	b007      	add	sp, #28
   c09e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c09e8:	000c6854 	.word	0x000c6854
   c09ec:	000c7a28 	.word	0x000c7a28

000c09f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c09f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   c09f2:	460f      	mov	r7, r1
   c09f4:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c09f6:	491d      	ldr	r1, [pc, #116]	; (c0a6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c09f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c09fa:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c09fc:	4616      	mov	r6, r2
   c09fe:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0a00:	f003 fb9a 	bl	c4138 <strcmp>
   c0a04:	b9c0      	cbnz	r0, c0a38 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c0a06:	b1a4      	cbz	r4, c0a32 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c0a08:	4629      	mov	r1, r5
   c0a0a:	a801      	add	r0, sp, #4
   c0a0c:	f7ff fcbc 	bl	c0388 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c0a10:	4917      	ldr	r1, [pc, #92]	; (c0a70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c0a12:	2024      	movs	r0, #36	; 0x24
   c0a14:	f001 f90a 	bl	c1c2c <_ZnwjRKSt9nothrow_t>
   c0a18:	4605      	mov	r5, r0
   c0a1a:	b130      	cbz	r0, c0a2a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c0a1c:	ab01      	add	r3, sp, #4
   c0a1e:	4632      	mov	r2, r6
   c0a20:	4621      	mov	r1, r4
   c0a22:	f7ff ffbf 	bl	c09a4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0a26:	4b13      	ldr	r3, [pc, #76]	; (c0a74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c0a28:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0a2a:	a801      	add	r0, sp, #4
   c0a2c:	f7f5 fa70 	bl	b5f10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0a30:	462c      	mov	r4, r5
}
   c0a32:	4620      	mov	r0, r4
   c0a34:	b005      	add	sp, #20
   c0a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c0a38:	490f      	ldr	r1, [pc, #60]	; (c0a78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c0a3a:	4638      	mov	r0, r7
   c0a3c:	f003 fb7c 	bl	c4138 <strcmp>
   c0a40:	b990      	cbnz	r0, c0a68 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c0a42:	2c00      	cmp	r4, #0
   c0a44:	d0f5      	beq.n	c0a32 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0a46:	4629      	mov	r1, r5
   c0a48:	a801      	add	r0, sp, #4
   c0a4a:	f7ff fc9d 	bl	c0388 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c0a4e:	4908      	ldr	r1, [pc, #32]	; (c0a70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c0a50:	2024      	movs	r0, #36	; 0x24
   c0a52:	f001 f8eb 	bl	c1c2c <_ZnwjRKSt9nothrow_t>
   c0a56:	4605      	mov	r5, r0
   c0a58:	2800      	cmp	r0, #0
   c0a5a:	d0e6      	beq.n	c0a2a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c0a5c:	ab01      	add	r3, sp, #4
   c0a5e:	4632      	mov	r2, r6
   c0a60:	4621      	mov	r1, r4
   c0a62:	f7ff ff9f 	bl	c09a4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0a66:	e7e0      	b.n	c0a2a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c0a68:	2400      	movs	r4, #0
   c0a6a:	e7e2      	b.n	c0a32 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c0a6c:	000c79ad 	.word	0x000c79ad
   c0a70:	000c7b40 	.word	0x000c7b40
   c0a74:	000c7a40 	.word	0x000c7a40
   c0a78:	000c79b1 	.word	0x000c79b1

000c0a7c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c0a7c:	4b01      	ldr	r3, [pc, #4]	; (c0a84 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c0a7e:	4a02      	ldr	r2, [pc, #8]	; (c0a88 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c0a80:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c0a82:	4770      	bx	lr
   c0a84:	2003e670 	.word	0x2003e670
   c0a88:	000c79c2 	.word	0x000c79c2

000c0a8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c0a90:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c0a92:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0a96:	4604      	mov	r4, r0
   c0a98:	460e      	mov	r6, r1
   c0a9a:	4617      	mov	r7, r2
   c0a9c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c0a9e:	f000 ff09 	bl	c18b4 <_Z16_fetch_usbserialv>
   c0aa2:	4581      	cmp	r9, r0
   c0aa4:	d04c      	beq.n	c0b40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c0aa6:	792b      	ldrb	r3, [r5, #4]
   c0aa8:	0719      	lsls	r1, r3, #28
   c0aaa:	d504      	bpl.n	c0ab6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c0aac:	696a      	ldr	r2, [r5, #20]
   c0aae:	4954      	ldr	r1, [pc, #336]	; (c0c00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c0ab0:	4620      	mov	r0, r4
   c0ab2:	f7ff fa8d 	bl	bffd0 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c0ab6:	f1b8 0f00 	cmp.w	r8, #0
   c0aba:	d00d      	beq.n	c0ad8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c0abc:	215b      	movs	r1, #91	; 0x5b
   c0abe:	4620      	mov	r0, r4
   c0ac0:	f7ff fa7a 	bl	bffb8 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c0ac4:	4641      	mov	r1, r8
   c0ac6:	4620      	mov	r0, r4
   c0ac8:	f7ff fa67 	bl	bff9a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c0acc:	6823      	ldr	r3, [r4, #0]
   c0ace:	494d      	ldr	r1, [pc, #308]	; (c0c04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c0ad0:	68db      	ldr	r3, [r3, #12]
   c0ad2:	2202      	movs	r2, #2
   c0ad4:	4620      	mov	r0, r4
   c0ad6:	4798      	blx	r3
    if (attr.has_file) {
   c0ad8:	792b      	ldrb	r3, [r5, #4]
   c0ada:	07da      	lsls	r2, r3, #31
   c0adc:	d523      	bpl.n	c0b26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c0ade:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c0ae2:	212f      	movs	r1, #47	; 0x2f
   c0ae4:	4640      	mov	r0, r8
   c0ae6:	f003 fba4 	bl	c4232 <strrchr>
    if (s1) {
   c0aea:	b108      	cbz	r0, c0af0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c0aec:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c0af0:	4641      	mov	r1, r8
   c0af2:	4620      	mov	r0, r4
   c0af4:	f7ff fa51 	bl	bff9a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c0af8:	792b      	ldrb	r3, [r5, #4]
   c0afa:	079b      	lsls	r3, r3, #30
   c0afc:	d508      	bpl.n	c0b10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c0afe:	213a      	movs	r1, #58	; 0x3a
   c0b00:	4620      	mov	r0, r4
   c0b02:	f7ff fa59 	bl	bffb8 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c0b06:	68ea      	ldr	r2, [r5, #12]
   c0b08:	493f      	ldr	r1, [pc, #252]	; (c0c08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c0b0a:	4620      	mov	r0, r4
   c0b0c:	f7ff fa60 	bl	bffd0 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c0b10:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c0b12:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c0b14:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c0b18:	68db      	ldr	r3, [r3, #12]
   c0b1a:	bf14      	ite	ne
   c0b1c:	493b      	ldrne	r1, [pc, #236]	; (c0c0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c0b1e:	493c      	ldreq	r1, [pc, #240]	; (c0c10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c0b20:	2202      	movs	r2, #2
            write(": ", 2);
   c0b22:	4620      	mov	r0, r4
   c0b24:	4798      	blx	r3
    if (attr.has_function) {
   c0b26:	792b      	ldrb	r3, [r5, #4]
   c0b28:	0758      	lsls	r0, r3, #29
   c0b2a:	d51d      	bpl.n	c0b68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0b2c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c0b2e:	460b      	mov	r3, r1
   c0b30:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c0b32:	f813 0b01 	ldrb.w	r0, [r3], #1
   c0b36:	b160      	cbz	r0, c0b52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c0b38:	2820      	cmp	r0, #32
   c0b3a:	d108      	bne.n	c0b4e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c0b3c:	4619      	mov	r1, r3
   c0b3e:	e7f7      	b.n	c0b30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c0b40:	4834      	ldr	r0, [pc, #208]	; (c0c14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c0b42:	f000 f966 	bl	c0e12 <_ZN5spark12NetworkClass9listeningEv>
   c0b46:	2800      	cmp	r0, #0
   c0b48:	d0ad      	beq.n	c0aa6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c0b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c0b4e:	2828      	cmp	r0, #40	; 0x28
   c0b50:	d1ee      	bne.n	c0b30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c0b52:	6823      	ldr	r3, [r4, #0]
   c0b54:	1a52      	subs	r2, r2, r1
   c0b56:	68db      	ldr	r3, [r3, #12]
   c0b58:	4620      	mov	r0, r4
   c0b5a:	4798      	blx	r3
        write("(): ", 4);
   c0b5c:	6823      	ldr	r3, [r4, #0]
   c0b5e:	492e      	ldr	r1, [pc, #184]	; (c0c18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c0b60:	68db      	ldr	r3, [r3, #12]
   c0b62:	2204      	movs	r2, #4
   c0b64:	4620      	mov	r0, r4
   c0b66:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c0b68:	2100      	movs	r1, #0
   c0b6a:	4638      	mov	r0, r7
   c0b6c:	f7fd f856 	bl	bdc1c <log_level_name>
   c0b70:	4601      	mov	r1, r0
    write(s);
   c0b72:	4620      	mov	r0, r4
   c0b74:	f7ff fa11 	bl	bff9a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c0b78:	6823      	ldr	r3, [r4, #0]
   c0b7a:	4925      	ldr	r1, [pc, #148]	; (c0c10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c0b7c:	68db      	ldr	r3, [r3, #12]
   c0b7e:	2202      	movs	r2, #2
   c0b80:	4620      	mov	r0, r4
   c0b82:	4798      	blx	r3
    if (msg) {
   c0b84:	b11e      	cbz	r6, c0b8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c0b86:	4631      	mov	r1, r6
   c0b88:	4620      	mov	r0, r4
   c0b8a:	f7ff fa06 	bl	bff9a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c0b8e:	792b      	ldrb	r3, [r5, #4]
   c0b90:	f013 0f30 	tst.w	r3, #48	; 0x30
   c0b94:	d02c      	beq.n	c0bf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c0b96:	6823      	ldr	r3, [r4, #0]
   c0b98:	4920      	ldr	r1, [pc, #128]	; (c0c1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c0b9a:	68db      	ldr	r3, [r3, #12]
   c0b9c:	2202      	movs	r2, #2
   c0b9e:	4620      	mov	r0, r4
   c0ba0:	4798      	blx	r3
        if (attr.has_code) {
   c0ba2:	792b      	ldrb	r3, [r5, #4]
   c0ba4:	06d9      	lsls	r1, r3, #27
   c0ba6:	d50a      	bpl.n	c0bbe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c0ba8:	6823      	ldr	r3, [r4, #0]
   c0baa:	491d      	ldr	r1, [pc, #116]	; (c0c20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c0bac:	68db      	ldr	r3, [r3, #12]
   c0bae:	2207      	movs	r2, #7
   c0bb0:	4620      	mov	r0, r4
   c0bb2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c0bb4:	69aa      	ldr	r2, [r5, #24]
   c0bb6:	491b      	ldr	r1, [pc, #108]	; (c0c24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c0bb8:	4620      	mov	r0, r4
   c0bba:	f7ff fa09 	bl	bffd0 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c0bbe:	792b      	ldrb	r3, [r5, #4]
   c0bc0:	069a      	lsls	r2, r3, #26
   c0bc2:	d511      	bpl.n	c0be8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c0bc4:	06db      	lsls	r3, r3, #27
   c0bc6:	d505      	bpl.n	c0bd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c0bc8:	6823      	ldr	r3, [r4, #0]
   c0bca:	4910      	ldr	r1, [pc, #64]	; (c0c0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c0bcc:	68db      	ldr	r3, [r3, #12]
   c0bce:	2202      	movs	r2, #2
   c0bd0:	4620      	mov	r0, r4
   c0bd2:	4798      	blx	r3
            write("details = ", 10);
   c0bd4:	6823      	ldr	r3, [r4, #0]
   c0bd6:	4914      	ldr	r1, [pc, #80]	; (c0c28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c0bd8:	68db      	ldr	r3, [r3, #12]
   c0bda:	4620      	mov	r0, r4
   c0bdc:	220a      	movs	r2, #10
   c0bde:	4798      	blx	r3
            write(attr.details);
   c0be0:	69e9      	ldr	r1, [r5, #28]
   c0be2:	4620      	mov	r0, r4
   c0be4:	f7ff f9d9 	bl	bff9a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c0be8:	215d      	movs	r1, #93	; 0x5d
   c0bea:	4620      	mov	r0, r4
   c0bec:	f7ff f9e4 	bl	bffb8 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c0bf0:	6823      	ldr	r3, [r4, #0]
   c0bf2:	490e      	ldr	r1, [pc, #56]	; (c0c2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c0bf4:	68db      	ldr	r3, [r3, #12]
   c0bf6:	4620      	mov	r0, r4
   c0bf8:	2202      	movs	r2, #2
}
   c0bfa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c0bfe:	4718      	bx	r3
   c0c00:	000c79c6 	.word	0x000c79c6
   c0c04:	000c79cd 	.word	0x000c79cd
   c0c08:	000c63c5 	.word	0x000c63c5
   c0c0c:	000c79d0 	.word	0x000c79d0
   c0c10:	000c79d5 	.word	0x000c79d5
   c0c14:	2003e69c 	.word	0x2003e69c
   c0c18:	000c79d3 	.word	0x000c79d3
   c0c1c:	000c79d8 	.word	0x000c79d8
   c0c20:	000c79db 	.word	0x000c79db
   c0c24:	000c79e3 	.word	0x000c79e3
   c0c28:	000c79e6 	.word	0x000c79e6
   c0c2c:	000c79f1 	.word	0x000c79f1

000c0c30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0c34:	b085      	sub	sp, #20
    return stream_;
   c0c36:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c0c3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c0c3c:	4605      	mov	r5, r0
   c0c3e:	460f      	mov	r7, r1
   c0c40:	4690      	mov	r8, r2
   c0c42:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c0c44:	f000 fe36 	bl	c18b4 <_Z16_fetch_usbserialv>
   c0c48:	4581      	cmp	r9, r0
   c0c4a:	d105      	bne.n	c0c58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c0c4c:	4849      	ldr	r0, [pc, #292]	; (c0d74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c0c4e:	f000 f8e0 	bl	c0e12 <_ZN5spark12NetworkClass9listeningEv>
   c0c52:	2800      	cmp	r0, #0
   c0c54:	f040 808a 	bne.w	c0d6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c0c58:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c0c5a:	4a47      	ldr	r2, [pc, #284]	; (c0d78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c0c5c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c0c5e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c0c62:	a801      	add	r0, sp, #4
        strm_(stream) {
   c0c64:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c0c66:	f88d 9008 	strb.w	r9, [sp, #8]
   c0c6a:	f7ff f850 	bl	bfd0e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c0c6e:	4649      	mov	r1, r9
   c0c70:	4640      	mov	r0, r8
   c0c72:	f7fc ffd3 	bl	bdc1c <log_level_name>
    json.name("l", 1).value(s);
   c0c76:	4941      	ldr	r1, [pc, #260]	; (c0d7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c0c78:	4680      	mov	r8, r0
   c0c7a:	2201      	movs	r2, #1
   c0c7c:	a801      	add	r0, sp, #4
   c0c7e:	f7ff f8d5 	bl	bfe2c <_ZN5spark10JSONWriter4nameEPKcj>
   c0c82:	4641      	mov	r1, r8
   c0c84:	f7ff f97b 	bl	bff7e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c0c88:	b13f      	cbz	r7, c0c9a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c0c8a:	493d      	ldr	r1, [pc, #244]	; (c0d80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c0c8c:	2201      	movs	r2, #1
   c0c8e:	a801      	add	r0, sp, #4
   c0c90:	f7ff f8cc 	bl	bfe2c <_ZN5spark10JSONWriter4nameEPKcj>
   c0c94:	4639      	mov	r1, r7
   c0c96:	f7ff f972 	bl	bff7e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c0c9a:	b13e      	cbz	r6, c0cac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c0c9c:	4939      	ldr	r1, [pc, #228]	; (c0d84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c0c9e:	2201      	movs	r2, #1
   c0ca0:	a801      	add	r0, sp, #4
   c0ca2:	f7ff f8c3 	bl	bfe2c <_ZN5spark10JSONWriter4nameEPKcj>
   c0ca6:	4631      	mov	r1, r6
   c0ca8:	f7ff f969 	bl	bff7e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c0cac:	7923      	ldrb	r3, [r4, #4]
   c0cae:	07df      	lsls	r7, r3, #31
   c0cb0:	d50e      	bpl.n	c0cd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c0cb2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c0cb4:	212f      	movs	r1, #47	; 0x2f
   c0cb6:	4630      	mov	r0, r6
   c0cb8:	f003 fabb 	bl	c4232 <strrchr>
    if (s1) {
   c0cbc:	b100      	cbz	r0, c0cc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c0cbe:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c0cc0:	4931      	ldr	r1, [pc, #196]	; (c0d88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c0cc2:	2201      	movs	r2, #1
   c0cc4:	a801      	add	r0, sp, #4
   c0cc6:	f7ff f8b1 	bl	bfe2c <_ZN5spark10JSONWriter4nameEPKcj>
   c0cca:	4631      	mov	r1, r6
   c0ccc:	f7ff f957 	bl	bff7e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c0cd0:	7923      	ldrb	r3, [r4, #4]
   c0cd2:	079e      	lsls	r6, r3, #30
   c0cd4:	d507      	bpl.n	c0ce6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c0cd6:	492d      	ldr	r1, [pc, #180]	; (c0d8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c0cd8:	2202      	movs	r2, #2
   c0cda:	a801      	add	r0, sp, #4
   c0cdc:	f7ff f8a6 	bl	bfe2c <_ZN5spark10JSONWriter4nameEPKcj>
   c0ce0:	68e1      	ldr	r1, [r4, #12]
   c0ce2:	f7ff f821 	bl	bfd28 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c0ce6:	7923      	ldrb	r3, [r4, #4]
   c0ce8:	0758      	lsls	r0, r3, #29
   c0cea:	d514      	bpl.n	c0d16 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0cec:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c0cee:	4633      	mov	r3, r6
   c0cf0:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c0cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
   c0cf6:	b12a      	cbz	r2, c0d04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c0cf8:	2a20      	cmp	r2, #32
   c0cfa:	d101      	bne.n	c0d00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c0cfc:	461e      	mov	r6, r3
   c0cfe:	e7f7      	b.n	c0cf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c0d00:	2a28      	cmp	r2, #40	; 0x28
   c0d02:	d1f5      	bne.n	c0cf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c0d04:	4922      	ldr	r1, [pc, #136]	; (c0d90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c0d06:	2202      	movs	r2, #2
   c0d08:	a801      	add	r0, sp, #4
   c0d0a:	f7ff f88f 	bl	bfe2c <_ZN5spark10JSONWriter4nameEPKcj>
   c0d0e:	1bba      	subs	r2, r7, r6
   c0d10:	4631      	mov	r1, r6
   c0d12:	f7ff f89b 	bl	bfe4c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c0d16:	7923      	ldrb	r3, [r4, #4]
   c0d18:	0719      	lsls	r1, r3, #28
   c0d1a:	d507      	bpl.n	c0d2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c0d1c:	491d      	ldr	r1, [pc, #116]	; (c0d94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c0d1e:	2201      	movs	r2, #1
   c0d20:	a801      	add	r0, sp, #4
   c0d22:	f7ff f883 	bl	bfe2c <_ZN5spark10JSONWriter4nameEPKcj>
   c0d26:	6961      	ldr	r1, [r4, #20]
   c0d28:	f7ff f810 	bl	bfd4c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c0d2c:	7923      	ldrb	r3, [r4, #4]
   c0d2e:	06da      	lsls	r2, r3, #27
   c0d30:	d508      	bpl.n	c0d44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c0d32:	2204      	movs	r2, #4
   c0d34:	4918      	ldr	r1, [pc, #96]	; (c0d98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c0d36:	eb0d 0002 	add.w	r0, sp, r2
   c0d3a:	f7ff f877 	bl	bfe2c <_ZN5spark10JSONWriter4nameEPKcj>
   c0d3e:	69a1      	ldr	r1, [r4, #24]
   c0d40:	f7fe fff2 	bl	bfd28 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c0d44:	7923      	ldrb	r3, [r4, #4]
   c0d46:	069b      	lsls	r3, r3, #26
   c0d48:	d507      	bpl.n	c0d5a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c0d4a:	4914      	ldr	r1, [pc, #80]	; (c0d9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c0d4c:	2206      	movs	r2, #6
   c0d4e:	a801      	add	r0, sp, #4
   c0d50:	f7ff f86c 	bl	bfe2c <_ZN5spark10JSONWriter4nameEPKcj>
   c0d54:	69e1      	ldr	r1, [r4, #28]
   c0d56:	f7ff f912 	bl	bff7e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c0d5a:	a801      	add	r0, sp, #4
   c0d5c:	f7fe ffc1 	bl	bfce2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c0d60:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c0d62:	490f      	ldr	r1, [pc, #60]	; (c0da0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c0d64:	6803      	ldr	r3, [r0, #0]
   c0d66:	2202      	movs	r2, #2
   c0d68:	68db      	ldr	r3, [r3, #12]
   c0d6a:	4798      	blx	r3
}
   c0d6c:	b005      	add	sp, #20
   c0d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c0d72:	bf00      	nop
   c0d74:	2003e69c 	.word	0x2003e69c
   c0d78:	000c7a10 	.word	0x000c7a10
   c0d7c:	000c79a3 	.word	0x000c79a3
   c0d80:	000c79f4 	.word	0x000c79f4
   c0d84:	000c835e 	.word	0x000c835e
   c0d88:	000c6571 	.word	0x000c6571
   c0d8c:	000c79f6 	.word	0x000c79f6
   c0d90:	000c79f9 	.word	0x000c79f9
   c0d94:	000c66e9 	.word	0x000c66e9
   c0d98:	000c79fc 	.word	0x000c79fc
   c0d9c:	000c7a01 	.word	0x000c7a01
   c0da0:	000c79f1 	.word	0x000c79f1

000c0da4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c0da4:	2300      	movs	r3, #0
   c0da6:	6840      	ldr	r0, [r0, #4]
   c0da8:	461a      	mov	r2, r3
   c0daa:	f7fc bfcd 	b.w	bdd48 <network_connect>

000c0dae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c0dae:	6840      	ldr	r0, [r0, #4]
   c0db0:	2200      	movs	r2, #0
   c0db2:	2102      	movs	r1, #2
   c0db4:	f7fc bfd8 	b.w	bdd68 <network_disconnect>

000c0db8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c0db8:	2200      	movs	r2, #0
   c0dba:	6840      	ldr	r0, [r0, #4]
   c0dbc:	4611      	mov	r1, r2
   c0dbe:	f7fc bfcb 	b.w	bdd58 <network_connecting>

000c0dc2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c0dc2:	2200      	movs	r2, #0
   c0dc4:	6840      	ldr	r0, [r0, #4]
   c0dc6:	4611      	mov	r1, r2
   c0dc8:	f7fc bfd6 	b.w	bdd78 <network_ready>

000c0dcc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c0dcc:	2300      	movs	r3, #0
   c0dce:	6840      	ldr	r0, [r0, #4]
   c0dd0:	461a      	mov	r2, r3
   c0dd2:	4619      	mov	r1, r3
   c0dd4:	f7fc bfd8 	b.w	bdd88 <network_on>

000c0dd8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c0dd8:	2300      	movs	r3, #0
   c0dda:	6840      	ldr	r0, [r0, #4]
   c0ddc:	461a      	mov	r2, r3
   c0dde:	4619      	mov	r1, r3
   c0de0:	f7fc bfda 	b.w	bdd98 <network_off>

000c0de4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c0de4:	6840      	ldr	r0, [r0, #4]
   c0de6:	2100      	movs	r1, #0
   c0de8:	f7fc bffe 	b.w	bdde8 <network_is_on>

000c0dec <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c0dec:	6840      	ldr	r0, [r0, #4]
   c0dee:	2100      	movs	r1, #0
   c0df0:	f7fd b802 	b.w	bddf8 <network_is_off>

000c0df4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c0df4:	6840      	ldr	r0, [r0, #4]
   c0df6:	2200      	movs	r2, #0
   c0df8:	f081 0101 	eor.w	r1, r1, #1
   c0dfc:	f7fc bfd4 	b.w	bdda8 <network_listen>

000c0e00 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c0e00:	6840      	ldr	r0, [r0, #4]
   c0e02:	2200      	movs	r2, #0
   c0e04:	f7fc bfe0 	b.w	bddc8 <network_set_listen_timeout>

000c0e08 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c0e08:	2200      	movs	r2, #0
   c0e0a:	6840      	ldr	r0, [r0, #4]
   c0e0c:	4611      	mov	r1, r2
   c0e0e:	f7fc bfe3 	b.w	bddd8 <network_get_listen_timeout>

000c0e12 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c0e12:	2200      	movs	r2, #0
   c0e14:	6840      	ldr	r0, [r0, #4]
   c0e16:	4611      	mov	r1, r2
   c0e18:	f7fc bfce 	b.w	bddb8 <network_listening>

000c0e1c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c0e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0e20:	b095      	sub	sp, #84	; 0x54
   c0e22:	4614      	mov	r4, r2
   c0e24:	460d      	mov	r5, r1
   c0e26:	4607      	mov	r7, r0
    IPAddress addr;
   c0e28:	f7fe fe0a 	bl	bfa40 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c0e2c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c0e2e:	221c      	movs	r2, #28
   c0e30:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c0e32:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c0e34:	f003 f924 	bl	c4080 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c0e38:	2340      	movs	r3, #64	; 0x40
   c0e3a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c0e3c:	4620      	mov	r0, r4
   c0e3e:	466b      	mov	r3, sp
   c0e40:	aa0c      	add	r2, sp, #48	; 0x30
   c0e42:	2100      	movs	r1, #0
   c0e44:	f7fc fdca 	bl	bd9dc <netdb_getaddrinfo>
    if (!r) {
   c0e48:	4604      	mov	r4, r0
   c0e4a:	2800      	cmp	r0, #0
   c0e4c:	d14b      	bne.n	c0ee6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c0e4e:	4602      	mov	r2, r0
   c0e50:	2101      	movs	r1, #1
   c0e52:	6868      	ldr	r0, [r5, #4]
   c0e54:	f7fc ff90 	bl	bdd78 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0e58:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c0e5a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0e5c:	4622      	mov	r2, r4
   c0e5e:	6868      	ldr	r0, [r5, #4]
   c0e60:	f7fc ff8a 	bl	bdd78 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0e64:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0e66:	4681      	mov	r9, r0
        bool ok = false;
   c0e68:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0e6a:	2e00      	cmp	r6, #0
   c0e6c:	d03b      	beq.n	c0ee6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c0e6e:	2900      	cmp	r1, #0
   c0e70:	d139      	bne.n	c0ee6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c0e72:	6873      	ldr	r3, [r6, #4]
   c0e74:	2b02      	cmp	r3, #2
   c0e76:	d003      	beq.n	c0e80 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c0e78:	2b0a      	cmp	r3, #10
   c0e7a:	d011      	beq.n	c0ea0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0e7c:	69f6      	ldr	r6, [r6, #28]
   c0e7e:	e7f4      	b.n	c0e6a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c0e80:	f1b8 0f00 	cmp.w	r8, #0
   c0e84:	d0fa      	beq.n	c0e7c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c0e86:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c0e88:	a806      	add	r0, sp, #24
   c0e8a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c0e8c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c0e8e:	f7fe fe05 	bl	bfa9c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c0e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c0e94:	1d3c      	adds	r4, r7, #4
   c0e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c0e98:	682b      	ldr	r3, [r5, #0]
   c0e9a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c0e9c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c0e9e:	e7ed      	b.n	c0e7c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c0ea0:	f1b9 0f00 	cmp.w	r9, #0
   c0ea4:	d0ea      	beq.n	c0e7c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c0ea6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c0ea8:	2210      	movs	r2, #16
   c0eaa:	a801      	add	r0, sp, #4
   c0eac:	f003 f8e8 	bl	c4080 <memset>
                    a.v = 6;
   c0eb0:	2306      	movs	r3, #6
   c0eb2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c0eb6:	ad01      	add	r5, sp, #4
   c0eb8:	f104 0308 	add.w	r3, r4, #8
   c0ebc:	3418      	adds	r4, #24
   c0ebe:	6818      	ldr	r0, [r3, #0]
   c0ec0:	6859      	ldr	r1, [r3, #4]
   c0ec2:	462a      	mov	r2, r5
   c0ec4:	c203      	stmia	r2!, {r0, r1}
   c0ec6:	3308      	adds	r3, #8
   c0ec8:	42a3      	cmp	r3, r4
   c0eca:	4615      	mov	r5, r2
   c0ecc:	d1f7      	bne.n	c0ebe <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c0ece:	a901      	add	r1, sp, #4
   c0ed0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c0ed2:	ad07      	add	r5, sp, #28
   c0ed4:	f7fe fdc2 	bl	bfa5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c0ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c0eda:	1d3c      	adds	r4, r7, #4
   c0edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c0ede:	682b      	ldr	r3, [r5, #0]
   c0ee0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c0ee2:	4649      	mov	r1, r9
   c0ee4:	e7ca      	b.n	c0e7c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c0ee6:	9800      	ldr	r0, [sp, #0]
   c0ee8:	f7fc fd70 	bl	bd9cc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c0eec:	4638      	mov	r0, r7
   c0eee:	b015      	add	sp, #84	; 0x54
   c0ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c0ef4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c0ef4:	4b02      	ldr	r3, [pc, #8]	; (c0f00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c0ef6:	4a03      	ldr	r2, [pc, #12]	; (c0f04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c0ef8:	601a      	str	r2, [r3, #0]
   c0efa:	2200      	movs	r2, #0
   c0efc:	605a      	str	r2, [r3, #4]

} // spark
   c0efe:	4770      	bx	lr
   c0f00:	2003e69c 	.word	0x2003e69c
   c0f04:	000c7a88 	.word	0x000c7a88

000c0f08 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c0f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0f0a:	4606      	mov	r6, r0
   c0f0c:	460d      	mov	r5, r1
  size_t n = 0;
   c0f0e:	188f      	adds	r7, r1, r2
   c0f10:	2400      	movs	r4, #0
  while (size--) {
   c0f12:	42bd      	cmp	r5, r7
   c0f14:	d00c      	beq.n	c0f30 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c0f16:	6833      	ldr	r3, [r6, #0]
   c0f18:	f815 1b01 	ldrb.w	r1, [r5], #1
   c0f1c:	689b      	ldr	r3, [r3, #8]
   c0f1e:	4630      	mov	r0, r6
   c0f20:	4798      	blx	r3
     if (chunk>=0)
   c0f22:	1e03      	subs	r3, r0, #0
   c0f24:	db01      	blt.n	c0f2a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c0f26:	441c      	add	r4, r3
  while (size--) {
   c0f28:	e7f3      	b.n	c0f12 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c0f2a:	2c00      	cmp	r4, #0
   c0f2c:	bf08      	it	eq
   c0f2e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c0f30:	4620      	mov	r0, r4
   c0f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0f34 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c0f34:	b508      	push	{r3, lr}
  return write(str);
   c0f36:	f7f6 fb6b 	bl	b7610 <_ZN5Print5writeEPKc>
}
   c0f3a:	bd08      	pop	{r3, pc}

000c0f3c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c0f3c:	6803      	ldr	r3, [r0, #0]
   c0f3e:	689b      	ldr	r3, [r3, #8]
   c0f40:	4718      	bx	r3

000c0f42 <_ZN5Print5printEPK19__FlashStringHelper>:
   c0f42:	b508      	push	{r3, lr}
   c0f44:	f7f6 fb64 	bl	b7610 <_ZN5Print5writeEPKc>
   c0f48:	bd08      	pop	{r3, pc}

000c0f4a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c0f4a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c0f4c:	210d      	movs	r1, #13
{
   c0f4e:	4605      	mov	r5, r0
  size_t n = print('\r');
   c0f50:	f7ff fff4 	bl	c0f3c <_ZN5Print5printEc>
  n += print('\n');
   c0f54:	210a      	movs	r1, #10
  size_t n = print('\r');
   c0f56:	4604      	mov	r4, r0
  n += print('\n');
   c0f58:	4628      	mov	r0, r5
   c0f5a:	f7ff ffef 	bl	c0f3c <_ZN5Print5printEc>
  return n;
}
   c0f5e:	4420      	add	r0, r4
   c0f60:	bd38      	pop	{r3, r4, r5, pc}

000c0f62 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   c0f62:	b538      	push	{r3, r4, r5, lr}
   c0f64:	4605      	mov	r5, r0
  return write(str);
   c0f66:	f7f6 fb53 	bl	b7610 <_ZN5Print5writeEPKc>
   c0f6a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   c0f6c:	4628      	mov	r0, r5
   c0f6e:	f7ff ffec 	bl	c0f4a <_ZN5Print7printlnEv>
  return n;
}
   c0f72:	4420      	add	r0, r4
   c0f74:	bd38      	pop	{r3, r4, r5, pc}

000c0f76 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   c0f76:	f7ff bff4 	b.w	c0f62 <_ZN5Print7printlnEPKc>

000c0f7a <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c0f7a:	b530      	push	{r4, r5, lr}
   c0f7c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c0f7e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c0f80:	2a01      	cmp	r2, #1
  *str = '\0';
   c0f82:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c0f86:	bf98      	it	ls
   c0f88:	220a      	movls	r2, #10
   c0f8a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c0f8c:	460d      	mov	r5, r1
   c0f8e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c0f92:	fb01 5312 	mls	r3, r1, r2, r5
   c0f96:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c0f9a:	2b09      	cmp	r3, #9
   c0f9c:	bf94      	ite	ls
   c0f9e:	3330      	addls	r3, #48	; 0x30
   c0fa0:	3337      	addhi	r3, #55	; 0x37
   c0fa2:	b2db      	uxtb	r3, r3
  } while(n);
   c0fa4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c0fa6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c0faa:	d9ef      	bls.n	c0f8c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c0fac:	4621      	mov	r1, r4
   c0fae:	f7f6 fb2f 	bl	b7610 <_ZN5Print5writeEPKc>
}
   c0fb2:	b00b      	add	sp, #44	; 0x2c
   c0fb4:	bd30      	pop	{r4, r5, pc}

000c0fb6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c0fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0fba:	b086      	sub	sp, #24
   c0fbc:	af00      	add	r7, sp, #0
   c0fbe:	4605      	mov	r5, r0
   c0fc0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c0fc2:	1d38      	adds	r0, r7, #4
   c0fc4:	2114      	movs	r1, #20
{
   c0fc6:	4614      	mov	r4, r2
    va_copy(args2, args);
   c0fc8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c0fca:	f7fc ff4d 	bl	bde68 <vsnprintf>

    if (n<bufsize)
   c0fce:	2813      	cmp	r0, #19
   c0fd0:	d80e      	bhi.n	c0ff0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c0fd2:	1d39      	adds	r1, r7, #4
   c0fd4:	4628      	mov	r0, r5
   c0fd6:	f7f6 fb1b 	bl	b7610 <_ZN5Print5writeEPKc>
   c0fda:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c0fdc:	b11e      	cbz	r6, c0fe6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c0fde:	4628      	mov	r0, r5
   c0fe0:	f7ff ffb3 	bl	c0f4a <_ZN5Print7printlnEv>
   c0fe4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c0fe6:	4620      	mov	r0, r4
   c0fe8:	3718      	adds	r7, #24
   c0fea:	46bd      	mov	sp, r7
   c0fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c0ff0:	f100 0308 	add.w	r3, r0, #8
   c0ff4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c0ff8:	46e8      	mov	r8, sp
        char bigger[n+1];
   c0ffa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c0ffe:	4622      	mov	r2, r4
   c1000:	1c41      	adds	r1, r0, #1
   c1002:	683b      	ldr	r3, [r7, #0]
   c1004:	4668      	mov	r0, sp
   c1006:	f7fc ff2f 	bl	bde68 <vsnprintf>
  return write(str);
   c100a:	4669      	mov	r1, sp
   c100c:	4628      	mov	r0, r5
   c100e:	f7f6 faff 	bl	b7610 <_ZN5Print5writeEPKc>
   c1012:	4604      	mov	r4, r0
   c1014:	46c5      	mov	sp, r8
   c1016:	e7e1      	b.n	c0fdc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c1018 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c1018:	4b01      	ldr	r3, [pc, #4]	; (c1020 <_GLOBAL__sub_I_RGB+0x8>)
   c101a:	2200      	movs	r2, #0
   c101c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c101e:	4770      	bx	lr
   c1020:	2003e6a4 	.word	0x2003e6a4

000c1024 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   c1024:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   c1028:	1c53      	adds	r3, r2, #1
   c102a:	d00b      	beq.n	c1044 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   c102c:	8843      	ldrh	r3, [r0, #2]
   c102e:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   c1030:	428b      	cmp	r3, r1
   c1032:	d803      	bhi.n	c103c <_ZN5Servo17writeMicrosecondsEt+0x18>
   c1034:	4288      	cmp	r0, r1
   c1036:	4603      	mov	r3, r0
   c1038:	bf28      	it	cs
   c103a:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   c103c:	4619      	mov	r1, r3
   c103e:	b290      	uxth	r0, r2
   c1040:	f7fc bce4 	b.w	bda0c <HAL_Servo_Write_Pulse_Width>
}
   c1044:	4770      	bx	lr

000c1046 <_ZN5Servo5writeEi>:
{
   c1046:	b513      	push	{r0, r1, r4, lr}
   c1048:	4604      	mov	r4, r0
   c104a:	4608      	mov	r0, r1
   c104c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   c1050:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   c1054:	4288      	cmp	r0, r1
   c1056:	db10      	blt.n	c107a <_ZN5Servo5writeEi+0x34>
   c1058:	4290      	cmp	r0, r2
   c105a:	bfa8      	it	ge
   c105c:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c105e:	88a3      	ldrh	r3, [r4, #4]
   c1060:	9300      	str	r3, [sp, #0]
   c1062:	8863      	ldrh	r3, [r4, #2]
   c1064:	f7fc ff38 	bl	bded8 <_Z3mapiiiii>
   c1068:	68e1      	ldr	r1, [r4, #12]
   c106a:	4401      	add	r1, r0
   c106c:	b289      	uxth	r1, r1
   c106e:	4620      	mov	r0, r4
}
   c1070:	b002      	add	sp, #8
   c1072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c1076:	f7ff bfd5 	b.w	c1024 <_ZN5Servo17writeMicrosecondsEt>
   c107a:	4608      	mov	r0, r1
   c107c:	e7ef      	b.n	c105e <_ZN5Servo5writeEi+0x18>
	...

000c1080 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   c1080:	4a04      	ldr	r2, [pc, #16]	; (c1094 <_ZN5Servo11resetFieldsEv+0x14>)
   c1082:	f44f 6316 	mov.w	r3, #2400	; 0x960
   c1086:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   c108a:	23b4      	movs	r3, #180	; 0xb4
   c108c:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   c108e:	2300      	movs	r3, #0
   c1090:	60c3      	str	r3, [r0, #12]
}
   c1092:	4770      	bx	lr
   c1094:	0220ffff 	.word	0x0220ffff

000c1098 <_ZN5ServoC1Ev>:
Servo::Servo()
   c1098:	b508      	push	{r3, lr}
  this->resetFields();
   c109a:	f7ff fff1 	bl	c1080 <_ZN5Servo11resetFieldsEv>
}
   c109e:	bd08      	pop	{r3, pc}

000c10a0 <_ZN5Servo6detachEv>:
{
   c10a0:	b510      	push	{r4, lr}
   c10a2:	4604      	mov	r4, r0
   c10a4:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   c10a8:	1c43      	adds	r3, r0, #1
   c10aa:	d007      	beq.n	c10bc <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   c10ac:	b280      	uxth	r0, r0
   c10ae:	f7fc fca5 	bl	bd9fc <HAL_Servo_Detach>
  this->resetFields();
   c10b2:	4620      	mov	r0, r4
   c10b4:	f7ff ffe4 	bl	c1080 <_ZN5Servo11resetFieldsEv>
  return true;
   c10b8:	2001      	movs	r0, #1
}
   c10ba:	bd10      	pop	{r4, pc}
    return false;
   c10bc:	2000      	movs	r0, #0
   c10be:	e7fc      	b.n	c10ba <_ZN5Servo6detachEv+0x1a>

000c10c0 <_ZN5Servo6attachEtttss>:
{
   c10c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c10c4:	460d      	mov	r5, r1
   c10c6:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c10c8:	2102      	movs	r1, #2
   c10ca:	4628      	mov	r0, r5
{
   c10cc:	4690      	mov	r8, r2
   c10ce:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c10d0:	f7fc fbdc 	bl	bd88c <HAL_Validate_Pin_Function>
   c10d4:	2802      	cmp	r0, #2
   c10d6:	d003      	beq.n	c10e0 <_ZN5Servo6attachEtttss+0x20>
    return false;
   c10d8:	2600      	movs	r6, #0
}
   c10da:	4630      	mov	r0, r6
   c10dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   c10e0:	4628      	mov	r0, r5
   c10e2:	f000 fca9 	bl	c1a38 <pinAvailable>
   c10e6:	4606      	mov	r6, r0
   c10e8:	2800      	cmp	r0, #0
   c10ea:	d0f5      	beq.n	c10d8 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   c10ec:	f9b4 3000 	ldrsh.w	r3, [r4]
   c10f0:	3301      	adds	r3, #1
   c10f2:	d002      	beq.n	c10fa <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   c10f4:	4620      	mov	r0, r4
   c10f6:	f7ff ffd3 	bl	c10a0 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   c10fa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   c10fe:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   c1100:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   c1104:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   c1106:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   c110a:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   c110c:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   c110e:	4628      	mov	r0, r5
   c1110:	f7fc fc6c 	bl	bd9ec <HAL_Servo_Attach>
  return true;
   c1114:	e7e1      	b.n	c10da <_ZN5Servo6attachEtttss+0x1a>

000c1116 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   c1116:	2100      	movs	r1, #0
   c1118:	f7fc bcd8 	b.w	bdacc <hal_spi_release>

000c111c <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   c111c:	2100      	movs	r1, #0
   c111e:	f7fc bccd 	b.w	bdabc <hal_spi_acquire>

000c1122 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   c1122:	b510      	push	{r4, lr}
   c1124:	4604      	mov	r4, r0
   c1126:	4608      	mov	r0, r1
{
    _spi = spi;
   c1128:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   c112a:	f7fc fc8f 	bl	bda4c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   c112e:	2300      	movs	r3, #0
   c1130:	6063      	str	r3, [r4, #4]
}
   c1132:	4620      	mov	r0, r4
   c1134:	bd10      	pop	{r4, pc}

000c1136 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   c1136:	b513      	push	{r0, r1, r4, lr}
   c1138:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   c113a:	7800      	ldrb	r0, [r0, #0]
   c113c:	f7ff ffee 	bl	c111c <_ZN8SPIClass4lockEv.isra.0>
   c1140:	b958      	cbnz	r0, c115a <_ZN8SPIClass5beginEv+0x24>
   c1142:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   c1144:	9001      	str	r0, [sp, #4]
   c1146:	f64f 71ff 	movw	r1, #65535	; 0xffff
   c114a:	f7fc fc67 	bl	bda1c <hal_spi_begin>
        unlock();
   c114e:	9801      	ldr	r0, [sp, #4]
    }
}
   c1150:	b002      	add	sp, #8
   c1152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c1156:	f7ff bfde 	b.w	c1116 <_ZN8SPIClass6unlockEv.isra.0>
   c115a:	b002      	add	sp, #8
   c115c:	bd10      	pop	{r4, pc}

000c115e <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
   c115e:	b513      	push	{r0, r1, r4, lr}
   c1160:	4604      	mov	r4, r0
    if (!lock())
   c1162:	7800      	ldrb	r0, [r0, #0]
{
   c1164:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
   c1168:	f7ff ffd8 	bl	c111c <_ZN8SPIClass4lockEv.isra.0>
   c116c:	e9dd 2100 	ldrd	r2, r1, [sp]
   c1170:	4603      	mov	r3, r0
   c1172:	b948      	cbnz	r0, c1188 <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
   c1174:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
   c1176:	9000      	str	r0, [sp, #0]
   c1178:	f7fc fc88 	bl	bda8c <hal_spi_begin_ext>
        unlock();
   c117c:	9800      	ldr	r0, [sp, #0]
    }
}
   c117e:	b002      	add	sp, #8
   c1180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c1184:	f7ff bfc7 	b.w	c1116 <_ZN8SPIClass6unlockEv.isra.0>
   c1188:	b002      	add	sp, #8
   c118a:	bd10      	pop	{r4, pc}

000c118c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   c118c:	7800      	ldrb	r0, [r0, #0]
   c118e:	f7ff bfc2 	b.w	c1116 <_ZN8SPIClass6unlockEv.isra.0>
	...

000c1194 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   c1194:	0840      	lsrs	r0, r0, #1
{
   c1196:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   c1198:	6018      	str	r0, [r3, #0]
   c119a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   c119c:	6818      	ldr	r0, [r3, #0]
   c119e:	4288      	cmp	r0, r1
   c11a0:	b2e5      	uxtb	r5, r4
   c11a2:	d906      	bls.n	c11b2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   c11a4:	3401      	adds	r4, #1
   c11a6:	2c08      	cmp	r4, #8
   c11a8:	d002      	beq.n	c11b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   c11aa:	0840      	lsrs	r0, r0, #1
   c11ac:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   c11ae:	e7f5      	b.n	c119c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   c11b0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   c11b2:	4b02      	ldr	r3, [pc, #8]	; (c11bc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   c11b4:	5d5b      	ldrb	r3, [r3, r5]
   c11b6:	7013      	strb	r3, [r2, #0]
}
   c11b8:	bd30      	pop	{r4, r5, pc}
   c11ba:	bf00      	nop
   c11bc:	000c7abc 	.word	0x000c7abc

000c11c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   c11c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c11c4:	4606      	mov	r6, r0
   c11c6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   c11c8:	7800      	ldrb	r0, [r0, #0]
{
   c11ca:	460c      	mov	r4, r1
    CHECK(lock());
   c11cc:	f7ff ffa6 	bl	c111c <_ZN8SPIClass4lockEv.isra.0>
   c11d0:	2800      	cmp	r0, #0
   c11d2:	db1b      	blt.n	c120c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   c11d4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   c11d6:	2214      	movs	r2, #20
   c11d8:	2100      	movs	r1, #0
   c11da:	a809      	add	r0, sp, #36	; 0x24
   c11dc:	f002 ff50 	bl	c4080 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c11e0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c11e2:	2200      	movs	r2, #0
   c11e4:	a909      	add	r1, sp, #36	; 0x24
   c11e6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   c11e8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   c11ec:	f7fc fc3e 	bl	bda6c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   c11f0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   c11f4:	b113      	cbz	r3, c11fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   c11f6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   c11fa:	b155      	cbz	r5, c1212 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   c11fc:	2700      	movs	r7, #0
   c11fe:	46b9      	mov	r9, r7
   c1200:	46b8      	mov	r8, r7
   c1202:	2501      	movs	r5, #1
    if (default_ && other.default_)
   c1204:	7923      	ldrb	r3, [r4, #4]
   c1206:	b15d      	cbz	r5, c1220 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   c1208:	b1c3      	cbz	r3, c123c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   c120a:	2000      	movs	r0, #0
}
   c120c:	b00f      	add	sp, #60	; 0x3c
   c120e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   c1212:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   c1216:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   c121a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   c121e:	e7f1      	b.n	c1204 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   c1220:	2b00      	cmp	r3, #0
   c1222:	d135      	bne.n	c1290 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   c1224:	68a3      	ldr	r3, [r4, #8]
   c1226:	4543      	cmp	r3, r8
   c1228:	d108      	bne.n	c123c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   c122a:	f88d 9020 	strb.w	r9, [sp, #32]
   c122e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c1232:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c1236:	89a3      	ldrh	r3, [r4, #12]
   c1238:	429a      	cmp	r2, r3
   c123a:	d0e6      	beq.n	c120a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   c123c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c123e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   c1240:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c1244:	980a      	ldr	r0, [sp, #40]	; 0x28
   c1246:	ab04      	add	r3, sp, #16
   c1248:	f10d 020f 	add.w	r2, sp, #15
   c124c:	f7ff ffa2 	bl	c1194 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   c1250:	7921      	ldrb	r1, [r4, #4]
   c1252:	b985      	cbnz	r5, c1276 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   c1254:	b989      	cbnz	r1, c127a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c1256:	68a3      	ldr	r3, [r4, #8]
   c1258:	4543      	cmp	r3, r8
   c125a:	d30e      	bcc.n	c127a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   c125c:	f88d 9020 	strb.w	r9, [sp, #32]
   c1260:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c1264:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c1268:	89a3      	ldrh	r3, [r4, #12]
   c126a:	429a      	cmp	r2, r3
   c126c:	d105      	bne.n	c127a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   c126e:	9b04      	ldr	r3, [sp, #16]
   c1270:	4543      	cmp	r3, r8
   c1272:	d102      	bne.n	c127a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c1274:	e7c9      	b.n	c120a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   c1276:	2900      	cmp	r1, #0
   c1278:	d1f9      	bne.n	c126e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   c127a:	2300      	movs	r3, #0
   c127c:	9301      	str	r3, [sp, #4]
   c127e:	7b63      	ldrb	r3, [r4, #13]
   c1280:	9300      	str	r3, [sp, #0]
   c1282:	f89d 200f 	ldrb.w	r2, [sp, #15]
   c1286:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   c1288:	7830      	ldrb	r0, [r6, #0]
   c128a:	f7fc fc0f 	bl	bdaac <hal_spi_set_settings>
   c128e:	e7bc      	b.n	c120a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   c1290:	e9cd 5500 	strd	r5, r5, [sp]
   c1294:	462b      	mov	r3, r5
   c1296:	462a      	mov	r2, r5
   c1298:	2101      	movs	r1, #1
   c129a:	e7f5      	b.n	c1288 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000c129c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   c129c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c12a0:	b088      	sub	sp, #32
    unsigned clock = 0;
   c12a2:	2300      	movs	r3, #0
{
   c12a4:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   c12a6:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   c12a8:	9302      	str	r3, [sp, #8]
{
   c12aa:	460e      	mov	r6, r1
   c12ac:	4617      	mov	r7, r2
    if (!lock())
   c12ae:	f7ff ff35 	bl	c111c <_ZN8SPIClass4lockEv.isra.0>
   c12b2:	4605      	mov	r5, r0
   c12b4:	bb00      	cbnz	r0, c12f8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   c12b6:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   c12ba:	4601      	mov	r1, r0
   c12bc:	2214      	movs	r2, #20
   c12be:	a803      	add	r0, sp, #12
   c12c0:	f002 fede 	bl	c4080 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c12c4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c12c6:	462a      	mov	r2, r5
   c12c8:	a903      	add	r1, sp, #12
   c12ca:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   c12cc:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   c12d0:	f7fc fbcc 	bl	bda6c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c12d4:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   c12d6:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c12da:	ab02      	add	r3, sp, #8
   c12dc:	f10d 0207 	add.w	r2, sp, #7
   c12e0:	fb07 f106 	mul.w	r1, r7, r6
   c12e4:	f7ff ff56 	bl	c1194 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   c12e8:	7820      	ldrb	r0, [r4, #0]
   c12ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
   c12ee:	f7fc fb9d 	bl	bda2c <hal_spi_set_clock_divider>
        unlock();
   c12f2:	7820      	ldrb	r0, [r4, #0]
   c12f4:	f7ff ff0f 	bl	c1116 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   c12f8:	9802      	ldr	r0, [sp, #8]
   c12fa:	b008      	add	sp, #32
   c12fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c1300 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   c1300:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   c1302:	7800      	ldrb	r0, [r0, #0]
   c1304:	f7fc fb9a 	bl	bda3c <hal_spi_transfer>
}
   c1308:	b2c0      	uxtb	r0, r0
   c130a:	bd08      	pop	{r3, pc}

000c130c <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   c130c:	b530      	push	{r4, r5, lr}
   c130e:	b087      	sub	sp, #28
   c1310:	4604      	mov	r4, r0
   c1312:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   c1314:	9500      	str	r5, [sp, #0]
   c1316:	7800      	ldrb	r0, [r0, #0]
   c1318:	f7fc fbb0 	bl	bda7c <hal_spi_transfer_dma>
    if (user_callback == NULL)
   c131c:	b93d      	cbnz	r5, c132e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   c131e:	7820      	ldrb	r0, [r4, #0]
   c1320:	a902      	add	r1, sp, #8
   c1322:	f7fc fbbb 	bl	bda9c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   c1326:	f89d 3014 	ldrb.w	r3, [sp, #20]
   c132a:	07db      	lsls	r3, r3, #31
   c132c:	d4f7      	bmi.n	c131e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   c132e:	b007      	add	sp, #28
   c1330:	bd30      	pop	{r4, r5, pc}

000c1332 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   c1332:	b510      	push	{r4, lr}
   c1334:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c1336:	f7fc fa91 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   c133a:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   c133c:	6823      	ldr	r3, [r4, #0]
   c133e:	4620      	mov	r0, r4
   c1340:	695b      	ldr	r3, [r3, #20]
   c1342:	4798      	blx	r3
    if (c >= 0) return c;
   c1344:	2800      	cmp	r0, #0
   c1346:	da08      	bge.n	c135a <_ZN6Stream9timedReadEv+0x28>
   c1348:	f7fc fa88 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   c134c:	68e3      	ldr	r3, [r4, #12]
   c134e:	1ac0      	subs	r0, r0, r3
   c1350:	68a3      	ldr	r3, [r4, #8]
   c1352:	4298      	cmp	r0, r3
   c1354:	d3f2      	bcc.n	c133c <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   c1356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   c135a:	bd10      	pop	{r4, pc}

000c135c <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   c135c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1360:	4607      	mov	r7, r0
   c1362:	4688      	mov	r8, r1
   c1364:	4616      	mov	r6, r2
  if (length < 1) return 0;
   c1366:	461d      	mov	r5, r3
   c1368:	b173      	cbz	r3, c1388 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   c136a:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   c136c:	4638      	mov	r0, r7
   c136e:	f7ff ffe0 	bl	c1332 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   c1372:	1e03      	subs	r3, r0, #0
   c1374:	db05      	blt.n	c1382 <_ZN6Stream14readBytesUntilEcPcj+0x26>
   c1376:	4543      	cmp	r3, r8
   c1378:	d003      	beq.n	c1382 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   c137a:	5533      	strb	r3, [r6, r4]
    index++;
   c137c:	3401      	adds	r4, #1
  while (index < length) {
   c137e:	42a5      	cmp	r5, r4
   c1380:	d1f4      	bne.n	c136c <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   c1382:	4620      	mov	r0, r4
   c1384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   c1388:	461c      	mov	r4, r3
   c138a:	e7fa      	b.n	c1382 <_ZN6Stream14readBytesUntilEcPcj+0x26>

000c138c <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   c138c:	b570      	push	{r4, r5, r6, lr}
   c138e:	460d      	mov	r5, r1
  String ret;
   c1390:	4909      	ldr	r1, [pc, #36]	; (c13b8 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   c1392:	4604      	mov	r4, r0
   c1394:	4616      	mov	r6, r2
  String ret;
   c1396:	f000 f85c 	bl	c1452 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   c139a:	4628      	mov	r0, r5
   c139c:	f7ff ffc9 	bl	c1332 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   c13a0:	2800      	cmp	r0, #0
   c13a2:	db06      	blt.n	c13b2 <_ZN6Stream15readStringUntilEc+0x26>
   c13a4:	4286      	cmp	r6, r0
   c13a6:	d004      	beq.n	c13b2 <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   c13a8:	b2c1      	uxtb	r1, r0
   c13aa:	4620      	mov	r0, r4
   c13ac:	f000 f8d0 	bl	c1550 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   c13b0:	e7f3      	b.n	c139a <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   c13b2:	4620      	mov	r0, r4
   c13b4:	bd70      	pop	{r4, r5, r6, pc}
   c13b6:	bf00      	nop
   c13b8:	000c79f3 	.word	0x000c79f3

000c13bc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   c13bc:	b510      	push	{r4, lr}
   c13be:	4604      	mov	r4, r0
{
	free(buffer);
   c13c0:	6800      	ldr	r0, [r0, #0]
   c13c2:	f7fc fd29 	bl	bde18 <free>
}
   c13c6:	4620      	mov	r0, r4
   c13c8:	bd10      	pop	{r4, pc}

000c13ca <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   c13ca:	b510      	push	{r4, lr}
   c13cc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   c13ce:	6800      	ldr	r0, [r0, #0]
   c13d0:	b108      	cbz	r0, c13d6 <_ZN6String10invalidateEv+0xc>
   c13d2:	f7fc fd21 	bl	bde18 <free>
	buffer = NULL;
   c13d6:	2300      	movs	r3, #0
	capacity = len = 0;
   c13d8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   c13dc:	6023      	str	r3, [r4, #0]
}
   c13de:	bd10      	pop	{r4, pc}

000c13e0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   c13e0:	b538      	push	{r3, r4, r5, lr}
   c13e2:	4604      	mov	r4, r0
   c13e4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c13e6:	6800      	ldr	r0, [r0, #0]
   c13e8:	3101      	adds	r1, #1
   c13ea:	f7fc fd1d 	bl	bde28 <realloc>
	if (newbuffer) {
   c13ee:	b110      	cbz	r0, c13f6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   c13f0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   c13f4:	2001      	movs	r0, #1
	}
	return 0;
}
   c13f6:	bd38      	pop	{r3, r4, r5, pc}

000c13f8 <_ZN6String7reserveEj>:
{
   c13f8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   c13fa:	6803      	ldr	r3, [r0, #0]
{
   c13fc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   c13fe:	b123      	cbz	r3, c140a <_ZN6String7reserveEj+0x12>
   c1400:	6843      	ldr	r3, [r0, #4]
   c1402:	428b      	cmp	r3, r1
   c1404:	d301      	bcc.n	c140a <_ZN6String7reserveEj+0x12>
   c1406:	2001      	movs	r0, #1
}
   c1408:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   c140a:	4620      	mov	r0, r4
   c140c:	f7ff ffe8 	bl	c13e0 <_ZN6String12changeBufferEj>
   c1410:	2800      	cmp	r0, #0
   c1412:	d0f9      	beq.n	c1408 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   c1414:	68a3      	ldr	r3, [r4, #8]
   c1416:	2b00      	cmp	r3, #0
   c1418:	d1f5      	bne.n	c1406 <_ZN6String7reserveEj+0xe>
   c141a:	6822      	ldr	r2, [r4, #0]
   c141c:	7013      	strb	r3, [r2, #0]
   c141e:	e7f2      	b.n	c1406 <_ZN6String7reserveEj+0xe>

000c1420 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   c1420:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c1422:	460d      	mov	r5, r1
	if (!reserve(length)) {
   c1424:	4611      	mov	r1, r2
   c1426:	9201      	str	r2, [sp, #4]
{
   c1428:	4604      	mov	r4, r0
	if (!reserve(length)) {
   c142a:	f7ff ffe5 	bl	c13f8 <_ZN6String7reserveEj>
   c142e:	9a01      	ldr	r2, [sp, #4]
   c1430:	b928      	cbnz	r0, c143e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   c1432:	4620      	mov	r0, r4
   c1434:	f7ff ffc9 	bl	c13ca <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   c1438:	4620      	mov	r0, r4
   c143a:	b003      	add	sp, #12
   c143c:	bd30      	pop	{r4, r5, pc}
	len = length;
   c143e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   c1440:	4629      	mov	r1, r5
   c1442:	6820      	ldr	r0, [r4, #0]
   c1444:	f002 fdf4 	bl	c4030 <memcpy>
	buffer[len] = 0;
   c1448:	6822      	ldr	r2, [r4, #0]
   c144a:	68a3      	ldr	r3, [r4, #8]
   c144c:	2100      	movs	r1, #0
   c144e:	54d1      	strb	r1, [r2, r3]
	return *this;
   c1450:	e7f2      	b.n	c1438 <_ZN6String4copyEPKcj+0x18>

000c1452 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   c1452:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   c1454:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   c1456:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   c145a:	4604      	mov	r4, r0
	len = 0;
   c145c:	6083      	str	r3, [r0, #8]
	flags = 0;
   c145e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   c1460:	b141      	cbz	r1, c1474 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   c1462:	4608      	mov	r0, r1
   c1464:	9101      	str	r1, [sp, #4]
   c1466:	f002 fe96 	bl	c4196 <strlen>
   c146a:	9901      	ldr	r1, [sp, #4]
   c146c:	4602      	mov	r2, r0
   c146e:	4620      	mov	r0, r4
   c1470:	f7ff ffd6 	bl	c1420 <_ZN6String4copyEPKcj>
}
   c1474:	4620      	mov	r0, r4
   c1476:	b002      	add	sp, #8
   c1478:	bd10      	pop	{r4, pc}

000c147a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   c147a:	b538      	push	{r3, r4, r5, lr}
   c147c:	4605      	mov	r5, r0
	if (buffer) {
   c147e:	6800      	ldr	r0, [r0, #0]
{
   c1480:	460c      	mov	r4, r1
	if (buffer) {
   c1482:	b168      	cbz	r0, c14a0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   c1484:	686a      	ldr	r2, [r5, #4]
   c1486:	688b      	ldr	r3, [r1, #8]
   c1488:	429a      	cmp	r2, r3
   c148a:	d307      	bcc.n	c149c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   c148c:	6809      	ldr	r1, [r1, #0]
   c148e:	f002 fe5d 	bl	c414c <strcpy>
			len = rhs.len;
   c1492:	68a3      	ldr	r3, [r4, #8]
   c1494:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   c1496:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   c1498:	60a3      	str	r3, [r4, #8]
}
   c149a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   c149c:	f7fc fcbc 	bl	bde18 <free>
	buffer = rhs.buffer;
   c14a0:	6823      	ldr	r3, [r4, #0]
   c14a2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   c14a4:	6863      	ldr	r3, [r4, #4]
   c14a6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   c14a8:	68a3      	ldr	r3, [r4, #8]
   c14aa:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   c14ac:	2300      	movs	r3, #0
	rhs.capacity = 0;
   c14ae:	e9c4 3300 	strd	r3, r3, [r4]
   c14b2:	e7f1      	b.n	c1498 <_ZN6String4moveERS_+0x1e>

000c14b4 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   c14b4:	b510      	push	{r4, lr}
	buffer = NULL;
   c14b6:	2300      	movs	r3, #0
	capacity = 0;
   c14b8:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   c14bc:	4604      	mov	r4, r0
	len = 0;
   c14be:	6083      	str	r3, [r0, #8]
	flags = 0;
   c14c0:	7303      	strb	r3, [r0, #12]
	move(rval);
   c14c2:	f7ff ffda 	bl	c147a <_ZN6String4moveERS_>
}
   c14c6:	4620      	mov	r0, r4
   c14c8:	bd10      	pop	{r4, pc}

000c14ca <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   c14ca:	4288      	cmp	r0, r1
{
   c14cc:	b510      	push	{r4, lr}
   c14ce:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   c14d0:	d005      	beq.n	c14de <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   c14d2:	680b      	ldr	r3, [r1, #0]
   c14d4:	b12b      	cbz	r3, c14e2 <_ZN6StringaSERKS_+0x18>
   c14d6:	688a      	ldr	r2, [r1, #8]
   c14d8:	4619      	mov	r1, r3
   c14da:	f7ff ffa1 	bl	c1420 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c14de:	4620      	mov	r0, r4
   c14e0:	bd10      	pop	{r4, pc}
	else invalidate();
   c14e2:	f7ff ff72 	bl	c13ca <_ZN6String10invalidateEv>
   c14e6:	e7fa      	b.n	c14de <_ZN6StringaSERKS_+0x14>

000c14e8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   c14e8:	b510      	push	{r4, lr}
	buffer = NULL;
   c14ea:	2300      	movs	r3, #0
String::String(const String &value)
   c14ec:	4604      	mov	r4, r0
	capacity = 0;
   c14ee:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   c14f2:	6083      	str	r3, [r0, #8]
	flags = 0;
   c14f4:	7303      	strb	r3, [r0, #12]
	*this = value;
   c14f6:	f7ff ffe8 	bl	c14ca <_ZN6StringaSERKS_>
}
   c14fa:	4620      	mov	r0, r4
   c14fc:	bd10      	pop	{r4, pc}

000c14fe <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   c14fe:	b513      	push	{r0, r1, r4, lr}
   c1500:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   c1502:	b159      	cbz	r1, c151c <_ZN6StringaSEPKc+0x1e>
   c1504:	4608      	mov	r0, r1
   c1506:	9101      	str	r1, [sp, #4]
   c1508:	f002 fe45 	bl	c4196 <strlen>
   c150c:	9901      	ldr	r1, [sp, #4]
   c150e:	4602      	mov	r2, r0
   c1510:	4620      	mov	r0, r4
   c1512:	f7ff ff85 	bl	c1420 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c1516:	4620      	mov	r0, r4
   c1518:	b002      	add	sp, #8
   c151a:	bd10      	pop	{r4, pc}
	else invalidate();
   c151c:	f7ff ff55 	bl	c13ca <_ZN6String10invalidateEv>
   c1520:	e7f9      	b.n	c1516 <_ZN6StringaSEPKc+0x18>

000c1522 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   c1522:	b570      	push	{r4, r5, r6, lr}
   c1524:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   c1526:	460e      	mov	r6, r1
   c1528:	b909      	cbnz	r1, c152e <_ZN6String6concatEPKcj+0xc>
   c152a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   c152c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   c152e:	b16a      	cbz	r2, c154c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   c1530:	6884      	ldr	r4, [r0, #8]
   c1532:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   c1534:	4621      	mov	r1, r4
   c1536:	f7ff ff5f 	bl	c13f8 <_ZN6String7reserveEj>
   c153a:	2800      	cmp	r0, #0
   c153c:	d0f5      	beq.n	c152a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   c153e:	6828      	ldr	r0, [r5, #0]
   c1540:	68ab      	ldr	r3, [r5, #8]
   c1542:	4631      	mov	r1, r6
   c1544:	4418      	add	r0, r3
   c1546:	f002 fe01 	bl	c414c <strcpy>
	len = newlen;
   c154a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   c154c:	2001      	movs	r0, #1
   c154e:	e7ed      	b.n	c152c <_ZN6String6concatEPKcj+0xa>

000c1550 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   c1550:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   c1552:	2300      	movs	r3, #0
	buf[0] = c;
   c1554:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   c1558:	2201      	movs	r2, #1
   c155a:	a901      	add	r1, sp, #4
	buf[1] = 0;
   c155c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   c1560:	f7ff ffdf 	bl	c1522 <_ZN6String6concatEPKcj>
}
   c1564:	b003      	add	sp, #12
   c1566:	f85d fb04 	ldr.w	pc, [sp], #4

000c156a <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   c156a:	6883      	ldr	r3, [r0, #8]
   c156c:	428b      	cmp	r3, r1
   c156e:	d903      	bls.n	c1578 <_ZNK6StringixEj+0xe>
   c1570:	6800      	ldr	r0, [r0, #0]
   c1572:	b110      	cbz	r0, c157a <_ZNK6StringixEj+0x10>
	return buffer[index];
   c1574:	5c40      	ldrb	r0, [r0, r1]
   c1576:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   c1578:	2000      	movs	r0, #0
}
   c157a:	4770      	bx	lr

000c157c <_ZNK6String6charAtEj>:
	return operator[](loc);
   c157c:	f7ff bff5 	b.w	c156a <_ZNK6StringixEj>

000c1580 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c1580:	4b05      	ldr	r3, [pc, #20]	; (c1598 <_GLOBAL__sub_I_System+0x18>)
   c1582:	2202      	movs	r2, #2
   c1584:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c1586:	4b05      	ldr	r3, [pc, #20]	; (c159c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c1588:	4a05      	ldr	r2, [pc, #20]	; (c15a0 <_GLOBAL__sub_I_System+0x20>)
   c158a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c158c:	2000      	movs	r0, #0
   c158e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c1592:	f7fc bb65 	b.w	bdc60 <set_system_mode>
   c1596:	bf00      	nop
   c1598:	2003e6c0 	.word	0x2003e6c0
   c159c:	2003e6b4 	.word	0x2003e6b4
   c15a0:	ffff0000 	.word	0xffff0000

000c15a4 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c15a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c15a8:	4a15      	ldr	r2, [pc, #84]	; (c1600 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c15aa:	f8df 8060 	ldr.w	r8, [pc, #96]	; c160c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c15ae:	e9d2 6300 	ldrd	r6, r3, [r2]
   c15b2:	1980      	adds	r0, r0, r6
   c15b4:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c15b8:	4b12      	ldr	r3, [pc, #72]	; (c1604 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c15ba:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c15be:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c15c2:	1986      	adds	r6, r0, r6
   c15c4:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c15c8:	42bb      	cmp	r3, r7
   c15ca:	bf08      	it	eq
   c15cc:	42b2      	cmpeq	r2, r6
{
   c15ce:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c15d0:	d013      	beq.n	c15fa <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c15d2:	a903      	add	r1, sp, #12
   c15d4:	4668      	mov	r0, sp
   c15d6:	e9cd 6700 	strd	r6, r7, [sp]
   c15da:	f7fc fc75 	bl	bdec8 <localtime_r>
	calendar_time.tm_year += 1900;
   c15de:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c15e0:	4d09      	ldr	r5, [pc, #36]	; (c1608 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c15e2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c15e6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c15e8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c15ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c15ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c15ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c15f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c15f2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c15f6:	6823      	ldr	r3, [r4, #0]
   c15f8:	602b      	str	r3, [r5, #0]
    }
}
   c15fa:	b00c      	add	sp, #48	; 0x30
   c15fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1600:	2003e6f8 	.word	0x2003e6f8
   c1604:	2003e6f0 	.word	0x2003e6f0
   c1608:	2003e6c8 	.word	0x2003e6c8
   c160c:	2003e700 	.word	0x2003e700

000c1610 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   c1610:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1612:	2000      	movs	r0, #0
   c1614:	f7fc fb88 	bl	bdd28 <spark_sync_time_pending>
   c1618:	b128      	cbz	r0, c1626 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c161a:	f7fc fb6d 	bl	bdcf8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c161e:	f080 0001 	eor.w	r0, r0, #1
   c1622:	b2c0      	uxtb	r0, r0
    }
   c1624:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1626:	2001      	movs	r0, #1
   c1628:	e7fc      	b.n	c1624 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c162c <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c162c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c162e:	f7ff ffb9 	bl	c15a4 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c1632:	4b02      	ldr	r3, [pc, #8]	; (c163c <_ZN9TimeClass5monthEx+0x10>)
   c1634:	6918      	ldr	r0, [r3, #16]
}
   c1636:	3001      	adds	r0, #1
   c1638:	bd08      	pop	{r3, pc}
   c163a:	bf00      	nop
   c163c:	2003e6c8 	.word	0x2003e6c8

000c1640 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c1640:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c1642:	2000      	movs	r0, #0
   c1644:	f7fc f912 	bl	bd86c <hal_rtc_time_is_valid>
    if (rtcstate)
   c1648:	4604      	mov	r4, r0
   c164a:	b9a0      	cbnz	r0, c1676 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c164c:	f7fc fb00 	bl	bdc50 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c1650:	2801      	cmp	r0, #1
   c1652:	d110      	bne.n	c1676 <_ZN9TimeClass7isValidEv+0x36>
   c1654:	4620      	mov	r0, r4
   c1656:	f7fc fb23 	bl	bdca0 <system_thread_get_state>
   c165a:	b960      	cbnz	r0, c1676 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c165c:	f7ff ffd8 	bl	c1610 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c1660:	b910      	cbnz	r0, c1668 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c1662:	f7fc fb41 	bl	bdce8 <spark_process>
        while (_while() && !_condition()) {
   c1666:	e7f9      	b.n	c165c <_ZN9TimeClass7isValidEv+0x1c>
   c1668:	f7ff ffd2 	bl	c1610 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c166c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c1670:	2000      	movs	r0, #0
   c1672:	f7fc b8fb 	b.w	bd86c <hal_rtc_time_is_valid>
}
   c1676:	4620      	mov	r0, r4
   c1678:	bd10      	pop	{r4, pc}

000c167a <_ZN9TimeClass3nowEv>:
{
   c167a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c167c:	f7ff ffe0 	bl	c1640 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c1680:	2210      	movs	r2, #16
   c1682:	2100      	movs	r1, #0
   c1684:	4668      	mov	r0, sp
   c1686:	f002 fcfb 	bl	c4080 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c168a:	2100      	movs	r1, #0
   c168c:	4668      	mov	r0, sp
   c168e:	f7fc f8f5 	bl	bd87c <hal_rtc_get_time>
}
   c1692:	9800      	ldr	r0, [sp, #0]
   c1694:	b005      	add	sp, #20
   c1696:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c169c <_ZN9TimeClass4hourEv>:
{
   c169c:	b508      	push	{r3, lr}
	return hour(now());
   c169e:	f7ff ffec 	bl	c167a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c16a2:	17c1      	asrs	r1, r0, #31
   c16a4:	f7ff ff7e 	bl	c15a4 <_ZL22Refresh_UnixTime_Cachex>
}
   c16a8:	4b01      	ldr	r3, [pc, #4]	; (c16b0 <_ZN9TimeClass4hourEv+0x14>)
   c16aa:	6898      	ldr	r0, [r3, #8]
   c16ac:	bd08      	pop	{r3, pc}
   c16ae:	bf00      	nop
   c16b0:	2003e6c8 	.word	0x2003e6c8

000c16b4 <_ZN9TimeClass6minuteEv>:
{
   c16b4:	b508      	push	{r3, lr}
	return minute(now());
   c16b6:	f7ff ffe0 	bl	c167a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c16ba:	17c1      	asrs	r1, r0, #31
   c16bc:	f7ff ff72 	bl	c15a4 <_ZL22Refresh_UnixTime_Cachex>
}
   c16c0:	4b01      	ldr	r3, [pc, #4]	; (c16c8 <_ZN9TimeClass6minuteEv+0x14>)
   c16c2:	6858      	ldr	r0, [r3, #4]
   c16c4:	bd08      	pop	{r3, pc}
   c16c6:	bf00      	nop
   c16c8:	2003e6c8 	.word	0x2003e6c8

000c16cc <_ZN9TimeClass6secondEv>:
{
   c16cc:	b508      	push	{r3, lr}
	return second(now());
   c16ce:	f7ff ffd4 	bl	c167a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c16d2:	17c1      	asrs	r1, r0, #31
   c16d4:	f7ff ff66 	bl	c15a4 <_ZL22Refresh_UnixTime_Cachex>
}
   c16d8:	4b01      	ldr	r3, [pc, #4]	; (c16e0 <_ZN9TimeClass6secondEv+0x14>)
   c16da:	6818      	ldr	r0, [r3, #0]
   c16dc:	bd08      	pop	{r3, pc}
   c16de:	bf00      	nop
   c16e0:	2003e6c8 	.word	0x2003e6c8

000c16e4 <_ZN9TimeClass3dayEv>:
{
   c16e4:	b508      	push	{r3, lr}
	return day(now());
   c16e6:	f7ff ffc8 	bl	c167a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c16ea:	17c1      	asrs	r1, r0, #31
   c16ec:	f7ff ff5a 	bl	c15a4 <_ZL22Refresh_UnixTime_Cachex>
}
   c16f0:	4b01      	ldr	r3, [pc, #4]	; (c16f8 <_ZN9TimeClass3dayEv+0x14>)
   c16f2:	68d8      	ldr	r0, [r3, #12]
   c16f4:	bd08      	pop	{r3, pc}
   c16f6:	bf00      	nop
   c16f8:	2003e6c8 	.word	0x2003e6c8

000c16fc <_ZN9TimeClass5monthEv>:
{
   c16fc:	b508      	push	{r3, lr}
	return month(now());
   c16fe:	f7ff ffbc 	bl	c167a <_ZN9TimeClass3nowEv>
}
   c1702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c1706:	17c1      	asrs	r1, r0, #31
   c1708:	f7ff bf90 	b.w	c162c <_ZN9TimeClass5monthEx>

000c170c <_ZN9TimeClass4yearEv>:
{
   c170c:	b508      	push	{r3, lr}
	return year(now());
   c170e:	f7ff ffb4 	bl	c167a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1712:	17c1      	asrs	r1, r0, #31
   c1714:	f7ff ff46 	bl	c15a4 <_ZL22Refresh_UnixTime_Cachex>
}
   c1718:	4b01      	ldr	r3, [pc, #4]	; (c1720 <_ZN9TimeClass4yearEv+0x14>)
   c171a:	6958      	ldr	r0, [r3, #20]
   c171c:	bd08      	pop	{r3, pc}
   c171e:	bf00      	nop
   c1720:	2003e6c8 	.word	0x2003e6c8

000c1724 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c1724:	4b02      	ldr	r3, [pc, #8]	; (c1730 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c1726:	681a      	ldr	r2, [r3, #0]
   c1728:	4b02      	ldr	r3, [pc, #8]	; (c1734 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c172a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c172c:	4770      	bx	lr
   c172e:	bf00      	nop
   c1730:	2003db78 	.word	0x2003db78
   c1734:	2003e6c4 	.word	0x2003e6c4

000c1738 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c1738:	4770      	bx	lr

000c173a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c173a:	7441      	strb	r1, [r0, #17]
}
   c173c:	4770      	bx	lr

000c173e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c173e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c1740:	7c00      	ldrb	r0, [r0, #16]
   c1742:	f7fc fa03 	bl	bdb4c <hal_usart_available_data_for_write>
}
   c1746:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c174a:	bd08      	pop	{r3, pc}

000c174c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c174c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c174e:	7c00      	ldrb	r0, [r0, #16]
   c1750:	f7fc f9d4 	bl	bdafc <hal_usart_available>
}
   c1754:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1758:	bd08      	pop	{r3, pc}

000c175a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c175a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c175c:	7c00      	ldrb	r0, [r0, #16]
   c175e:	f7fc f9dd 	bl	bdb1c <hal_usart_peek>
}
   c1762:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1766:	bd08      	pop	{r3, pc}

000c1768 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c1768:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c176a:	7c00      	ldrb	r0, [r0, #16]
   c176c:	f7fc f9ce 	bl	bdb0c <hal_usart_read>
}
   c1770:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1774:	bd08      	pop	{r3, pc}

000c1776 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c1776:	7c00      	ldrb	r0, [r0, #16]
   c1778:	f7fc b9d8 	b.w	bdb2c <hal_usart_flush>

000c177c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c177c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c177e:	7c45      	ldrb	r5, [r0, #17]
{
   c1780:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1782:	b12d      	cbz	r5, c1790 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c1784:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c1786:	b003      	add	sp, #12
   c1788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c178c:	f7fc b9ae 	b.w	bdaec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1790:	7c00      	ldrb	r0, [r0, #16]
   c1792:	9101      	str	r1, [sp, #4]
   c1794:	f7fc f9da 	bl	bdb4c <hal_usart_available_data_for_write>
   c1798:	2800      	cmp	r0, #0
   c179a:	9901      	ldr	r1, [sp, #4]
   c179c:	dcf2      	bgt.n	c1784 <_ZN11USARTSerial5writeEh+0x8>
}
   c179e:	4628      	mov	r0, r5
   c17a0:	b003      	add	sp, #12
   c17a2:	bd30      	pop	{r4, r5, pc}

000c17a4 <_ZN11USARTSerialD0Ev>:
   c17a4:	b510      	push	{r4, lr}
   c17a6:	2114      	movs	r1, #20
   c17a8:	4604      	mov	r4, r0
   c17aa:	f7f2 fc7a 	bl	b40a2 <_ZdlPvj>
   c17ae:	4620      	mov	r0, r4
   c17b0:	bd10      	pop	{r4, pc}
	...

000c17b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c17b4:	b510      	push	{r4, lr}
   c17b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c17ba:	4604      	mov	r4, r0
   c17bc:	4608      	mov	r0, r1
   c17be:	4611      	mov	r1, r2
   c17c0:	2200      	movs	r2, #0
   c17c2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c17c6:	4b04      	ldr	r3, [pc, #16]	; (c17d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c17c8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c17ca:	2301      	movs	r3, #1
  _serial = serial;
   c17cc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c17ce:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c17d0:	f7fc f9cc 	bl	bdb6c <hal_usart_init_ex>
}
   c17d4:	4620      	mov	r0, r4
   c17d6:	bd10      	pop	{r4, pc}
   c17d8:	000c7ae8 	.word	0x000c7ae8

000c17dc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c17dc:	7c00      	ldrb	r0, [r0, #16]
   c17de:	2300      	movs	r3, #0
   c17e0:	f7fc b9bc 	b.w	bdb5c <hal_usart_begin_config>

000c17e4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c17e4:	2200      	movs	r2, #0
   c17e6:	f7ff bff9 	b.w	c17dc <_ZN11USARTSerial5beginEmm>

000c17ea <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c17ea:	7c00      	ldrb	r0, [r0, #16]
   c17ec:	f7fc b976 	b.w	bdadc <hal_usart_end>

000c17f0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c17f0:	7441      	strb	r1, [r0, #17]
}
   c17f2:	4770      	bx	lr

000c17f4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c17f4:	4770      	bx	lr

000c17f6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c17f6:	4770      	bx	lr

000c17f8 <_ZN9USBSerial4readEv>:
{
   c17f8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c17fa:	2100      	movs	r1, #0
   c17fc:	7c00      	ldrb	r0, [r0, #16]
   c17fe:	f7fc f9e5 	bl	bdbcc <HAL_USB_USART_Receive_Data>
}
   c1802:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1806:	bd08      	pop	{r3, pc}

000c1808 <_ZN9USBSerial4peekEv>:
{
   c1808:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c180a:	2101      	movs	r1, #1
   c180c:	7c00      	ldrb	r0, [r0, #16]
   c180e:	f7fc f9dd 	bl	bdbcc <HAL_USB_USART_Receive_Data>
}
   c1812:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1816:	bd08      	pop	{r3, pc}

000c1818 <_ZN9USBSerial17availableForWriteEv>:
{
   c1818:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c181a:	7c00      	ldrb	r0, [r0, #16]
   c181c:	f7fc f9ce 	bl	bdbbc <HAL_USB_USART_Available_Data_For_Write>
}
   c1820:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1824:	bd08      	pop	{r3, pc}

000c1826 <_ZN9USBSerial9availableEv>:
{
   c1826:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c1828:	7c00      	ldrb	r0, [r0, #16]
   c182a:	f7fc f9bf 	bl	bdbac <HAL_USB_USART_Available_Data>
}
   c182e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1832:	bd08      	pop	{r3, pc}

000c1834 <_ZN9USBSerial5writeEh>:
{
   c1834:	b513      	push	{r0, r1, r4, lr}
   c1836:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1838:	7c00      	ldrb	r0, [r0, #16]
{
   c183a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c183c:	f7fc f9be 	bl	bdbbc <HAL_USB_USART_Available_Data_For_Write>
   c1840:	2800      	cmp	r0, #0
   c1842:	9901      	ldr	r1, [sp, #4]
   c1844:	dc01      	bgt.n	c184a <_ZN9USBSerial5writeEh+0x16>
   c1846:	7c60      	ldrb	r0, [r4, #17]
   c1848:	b120      	cbz	r0, c1854 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c184a:	7c20      	ldrb	r0, [r4, #16]
   c184c:	f7fc f9c6 	bl	bdbdc <HAL_USB_USART_Send_Data>
   c1850:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c1854:	b002      	add	sp, #8
   c1856:	bd10      	pop	{r4, pc}

000c1858 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c1858:	7c00      	ldrb	r0, [r0, #16]
   c185a:	f7fc b9c7 	b.w	bdbec <HAL_USB_USART_Flush_Data>

000c185e <_ZN9USBSerialD0Ev>:
   c185e:	b510      	push	{r4, lr}
   c1860:	2114      	movs	r1, #20
   c1862:	4604      	mov	r4, r0
   c1864:	f7f2 fc1d 	bl	b40a2 <_ZdlPvj>
   c1868:	4620      	mov	r0, r4
   c186a:	bd10      	pop	{r4, pc}

000c186c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c186c:	b510      	push	{r4, lr}
   c186e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1872:	4604      	mov	r4, r0
   c1874:	4608      	mov	r0, r1
   c1876:	2100      	movs	r1, #0
   c1878:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c187c:	4b04      	ldr	r3, [pc, #16]	; (c1890 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c187e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1880:	2301      	movs	r3, #1
  _serial = serial;
   c1882:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c1884:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c1886:	4611      	mov	r1, r2
   c1888:	f7fc f978 	bl	bdb7c <HAL_USB_USART_Init>
}
   c188c:	4620      	mov	r0, r4
   c188e:	bd10      	pop	{r4, pc}
   c1890:	000c7b18 	.word	0x000c7b18

000c1894 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c1894:	7c00      	ldrb	r0, [r0, #16]
   c1896:	2200      	movs	r2, #0
   c1898:	f7fc b978 	b.w	bdb8c <HAL_USB_USART_Begin>

000c189c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c189c:	7c00      	ldrb	r0, [r0, #16]
   c189e:	f7fc b97d 	b.w	bdb9c <HAL_USB_USART_End>

000c18a2 <_Z19acquireSerialBufferv>:
{
   c18a2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c18a4:	2214      	movs	r2, #20
{
   c18a6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c18a8:	2100      	movs	r1, #0
   c18aa:	f002 fbe9 	bl	c4080 <memset>
}
   c18ae:	4620      	mov	r0, r4
   c18b0:	bd10      	pop	{r4, pc}
	...

000c18b4 <_Z16_fetch_usbserialv>:
{
   c18b4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c18b6:	4c0f      	ldr	r4, [pc, #60]	; (c18f4 <_Z16_fetch_usbserialv+0x40>)
{
   c18b8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c18ba:	a803      	add	r0, sp, #12
   c18bc:	f7ff fff1 	bl	c18a2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c18c0:	7821      	ldrb	r1, [r4, #0]
   c18c2:	f3bf 8f5b 	dmb	ish
   c18c6:	f011 0101 	ands.w	r1, r1, #1
   c18ca:	d10f      	bne.n	c18ec <_Z16_fetch_usbserialv+0x38>
   c18cc:	4620      	mov	r0, r4
   c18ce:	9101      	str	r1, [sp, #4]
   c18d0:	f7f2 fbf6 	bl	b40c0 <__cxa_guard_acquire>
   c18d4:	9901      	ldr	r1, [sp, #4]
   c18d6:	b148      	cbz	r0, c18ec <_Z16_fetch_usbserialv+0x38>
   c18d8:	aa03      	add	r2, sp, #12
   c18da:	4807      	ldr	r0, [pc, #28]	; (c18f8 <_Z16_fetch_usbserialv+0x44>)
   c18dc:	f7ff ffc6 	bl	c186c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c18e0:	4620      	mov	r0, r4
   c18e2:	f7f2 fbf2 	bl	b40ca <__cxa_guard_release>
   c18e6:	4805      	ldr	r0, [pc, #20]	; (c18fc <_Z16_fetch_usbserialv+0x48>)
   c18e8:	f002 fb7c 	bl	c3fe4 <atexit>
	return _usbserial;
}
   c18ec:	4802      	ldr	r0, [pc, #8]	; (c18f8 <_Z16_fetch_usbserialv+0x44>)
   c18ee:	b008      	add	sp, #32
   c18f0:	bd10      	pop	{r4, pc}
   c18f2:	bf00      	nop
   c18f4:	2003e708 	.word	0x2003e708
   c18f8:	2003e70c 	.word	0x2003e70c
   c18fc:	000c17f5 	.word	0x000c17f5

000c1900 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c1900:	4b01      	ldr	r3, [pc, #4]	; (c1908 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c1902:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c1904:	4770      	bx	lr
   c1906:	bf00      	nop
   c1908:	2003db80 	.word	0x2003db80

000c190c <serialEventRun>:
{
   c190c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c190e:	4b0b      	ldr	r3, [pc, #44]	; (c193c <serialEventRun+0x30>)
   c1910:	b143      	cbz	r3, c1924 <serialEventRun+0x18>
   c1912:	f7ff ffcf 	bl	c18b4 <_Z16_fetch_usbserialv>
   c1916:	6803      	ldr	r3, [r0, #0]
   c1918:	691b      	ldr	r3, [r3, #16]
   c191a:	4798      	blx	r3
   c191c:	2800      	cmp	r0, #0
   c191e:	dd01      	ble.n	c1924 <serialEventRun+0x18>
        serialEvent();
   c1920:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c1924:	4b06      	ldr	r3, [pc, #24]	; (c1940 <serialEventRun+0x34>)
   c1926:	b143      	cbz	r3, c193a <serialEventRun+0x2e>
   c1928:	f000 f95c 	bl	c1be4 <_Z22__fetch_global_Serial1v>
   c192c:	6803      	ldr	r3, [r0, #0]
   c192e:	691b      	ldr	r3, [r3, #16]
   c1930:	4798      	blx	r3
   c1932:	2800      	cmp	r0, #0
   c1934:	dd01      	ble.n	c193a <serialEventRun+0x2e>
        serialEvent1();
   c1936:	f3af 8000 	nop.w
}
   c193a:	bd08      	pop	{r3, pc}
	...

000c1944 <_post_loop>:
{
   c1944:	b508      	push	{r3, lr}
	serialEventRun();
   c1946:	f7ff ffe1 	bl	c190c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c194a:	f7fb ff87 	bl	bd85c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c194e:	4b01      	ldr	r3, [pc, #4]	; (c1954 <_post_loop+0x10>)
   c1950:	6018      	str	r0, [r3, #0]
}
   c1952:	bd08      	pop	{r3, pc}
   c1954:	2003e728 	.word	0x2003e728

000c1958 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1958:	4805      	ldr	r0, [pc, #20]	; (c1970 <_Z33system_initialize_user_backup_ramv+0x18>)
   c195a:	4a06      	ldr	r2, [pc, #24]	; (c1974 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c195c:	4906      	ldr	r1, [pc, #24]	; (c1978 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c195e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1960:	1a12      	subs	r2, r2, r0
   c1962:	f002 fb65 	bl	c4030 <memcpy>
    __backup_sram_signature = signature;
   c1966:	4b05      	ldr	r3, [pc, #20]	; (c197c <_Z33system_initialize_user_backup_ramv+0x24>)
   c1968:	4a05      	ldr	r2, [pc, #20]	; (c1980 <_Z33system_initialize_user_backup_ramv+0x28>)
   c196a:	601a      	str	r2, [r3, #0]
}
   c196c:	bd08      	pop	{r3, pc}
   c196e:	bf00      	nop
   c1970:	2003f400 	.word	0x2003f400
   c1974:	2003f404 	.word	0x2003f404
   c1978:	000c84a4 	.word	0x000c84a4
   c197c:	2003f400 	.word	0x2003f400
   c1980:	9a271c1e 	.word	0x9a271c1e

000c1984 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c1984:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c1986:	2300      	movs	r3, #0
   c1988:	9300      	str	r3, [sp, #0]
   c198a:	461a      	mov	r2, r3
   c198c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c1990:	f7fc f9a0 	bl	bdcd4 <system_ctrl_set_result>
}
   c1994:	b003      	add	sp, #12
   c1996:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c199c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c199c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c199e:	8843      	ldrh	r3, [r0, #2]
   c19a0:	2b0a      	cmp	r3, #10
   c19a2:	d008      	beq.n	c19b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c19a4:	2b50      	cmp	r3, #80	; 0x50
   c19a6:	d10b      	bne.n	c19c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c19a8:	4b09      	ldr	r3, [pc, #36]	; (c19d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c19aa:	681b      	ldr	r3, [r3, #0]
   c19ac:	b14b      	cbz	r3, c19c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c19ae:	b003      	add	sp, #12
   c19b0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c19b4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c19b6:	f7ff ffe5 	bl	c1984 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c19ba:	b003      	add	sp, #12
   c19bc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c19c0:	2300      	movs	r3, #0
   c19c2:	9300      	str	r3, [sp, #0]
   c19c4:	461a      	mov	r2, r3
   c19c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c19ca:	f7fc f983 	bl	bdcd4 <system_ctrl_set_result>
}
   c19ce:	e7f4      	b.n	c19ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c19d0:	2003e724 	.word	0x2003e724

000c19d4 <module_user_init_hook>:
{
   c19d4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c19d6:	4812      	ldr	r0, [pc, #72]	; (c1a20 <module_user_init_hook+0x4c>)
   c19d8:	2100      	movs	r1, #0
   c19da:	f7fc fa6d 	bl	bdeb8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c19de:	4b11      	ldr	r3, [pc, #68]	; (c1a24 <module_user_init_hook+0x50>)
   c19e0:	681a      	ldr	r2, [r3, #0]
   c19e2:	4b11      	ldr	r3, [pc, #68]	; (c1a28 <module_user_init_hook+0x54>)
   c19e4:	429a      	cmp	r2, r3
   c19e6:	4b11      	ldr	r3, [pc, #68]	; (c1a2c <module_user_init_hook+0x58>)
   c19e8:	bf0c      	ite	eq
   c19ea:	2201      	moveq	r2, #1
   c19ec:	2200      	movne	r2, #0
   c19ee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c19f0:	d001      	beq.n	c19f6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c19f2:	f7ff ffb1 	bl	c1958 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c19f6:	f7fb ff19 	bl	bd82c <HAL_RNG_GetRandomNumber>
   c19fa:	4604      	mov	r4, r0
    srand(seed);
   c19fc:	f002 fb48 	bl	c4090 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c1a00:	4b0b      	ldr	r3, [pc, #44]	; (c1a30 <module_user_init_hook+0x5c>)
   c1a02:	b113      	cbz	r3, c1a0a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c1a04:	4620      	mov	r0, r4
   c1a06:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c1a0a:	2100      	movs	r1, #0
   c1a0c:	4808      	ldr	r0, [pc, #32]	; (c1a30 <module_user_init_hook+0x5c>)
   c1a0e:	f7fc f993 	bl	bdd38 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c1a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c1a16:	4807      	ldr	r0, [pc, #28]	; (c1a34 <module_user_init_hook+0x60>)
   c1a18:	2100      	movs	r1, #0
   c1a1a:	f7fc b951 	b.w	bdcc0 <system_ctrl_set_app_request_handler>
   c1a1e:	bf00      	nop
   c1a20:	000c1901 	.word	0x000c1901
   c1a24:	2003f400 	.word	0x2003f400
   c1a28:	9a271c1e 	.word	0x9a271c1e
   c1a2c:	2003e720 	.word	0x2003e720
   c1a30:	00000000 	.word	0x00000000
   c1a34:	000c199d 	.word	0x000c199d

000c1a38 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c1a38:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c1a3a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c1a3c:	d902      	bls.n	c1a44 <pinAvailable+0xc>
    return false;
   c1a3e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c1a40:	b002      	add	sp, #8
   c1a42:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c1a44:	f1a0 030b 	sub.w	r3, r0, #11
   c1a48:	2b02      	cmp	r3, #2
   c1a4a:	d81a      	bhi.n	c1a82 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c1a4c:	4c17      	ldr	r4, [pc, #92]	; (c1aac <pinAvailable+0x74>)
   c1a4e:	7821      	ldrb	r1, [r4, #0]
   c1a50:	f3bf 8f5b 	dmb	ish
   c1a54:	f011 0101 	ands.w	r1, r1, #1
   c1a58:	d10b      	bne.n	c1a72 <pinAvailable+0x3a>
   c1a5a:	4620      	mov	r0, r4
   c1a5c:	9101      	str	r1, [sp, #4]
   c1a5e:	f7f2 fb2f 	bl	b40c0 <__cxa_guard_acquire>
   c1a62:	9901      	ldr	r1, [sp, #4]
   c1a64:	b128      	cbz	r0, c1a72 <pinAvailable+0x3a>
   c1a66:	4812      	ldr	r0, [pc, #72]	; (c1ab0 <pinAvailable+0x78>)
   c1a68:	f7ff fb5b 	bl	c1122 <_ZN8SPIClassC1E19hal_spi_interface_t>
   c1a6c:	4620      	mov	r0, r4
   c1a6e:	f7f2 fb2c 	bl	b40ca <__cxa_guard_release>
   c1a72:	4b0f      	ldr	r3, [pc, #60]	; (c1ab0 <pinAvailable+0x78>)
   c1a74:	7818      	ldrb	r0, [r3, #0]
   c1a76:	f7fb fff1 	bl	bda5c <hal_spi_is_enabled>
   c1a7a:	2800      	cmp	r0, #0
   c1a7c:	d1df      	bne.n	c1a3e <pinAvailable+0x6>
  return true; // 'pin' is available
   c1a7e:	2001      	movs	r0, #1
   c1a80:	e7de      	b.n	c1a40 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c1a82:	2801      	cmp	r0, #1
   c1a84:	d809      	bhi.n	c1a9a <pinAvailable+0x62>
   c1a86:	f000 f86d 	bl	c1b64 <_Z19__fetch_global_Wirev>
   c1a8a:	2100      	movs	r1, #0
   c1a8c:	7c00      	ldrb	r0, [r0, #16]
   c1a8e:	f7fb ff7d 	bl	bd98c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c1a92:	f080 0001 	eor.w	r0, r0, #1
   c1a96:	b2c0      	uxtb	r0, r0
   c1a98:	e7d2      	b.n	c1a40 <pinAvailable+0x8>
   c1a9a:	3809      	subs	r0, #9
   c1a9c:	2801      	cmp	r0, #1
   c1a9e:	d8ee      	bhi.n	c1a7e <pinAvailable+0x46>
   c1aa0:	f000 f8a0 	bl	c1be4 <_Z22__fetch_global_Serial1v>
   c1aa4:	7c00      	ldrb	r0, [r0, #16]
   c1aa6:	f7fc f849 	bl	bdb3c <hal_usart_is_enabled>
   c1aaa:	e7f2      	b.n	c1a92 <pinAvailable+0x5a>
   c1aac:	2003dd58 	.word	0x2003dd58
   c1ab0:	2003dd5c 	.word	0x2003dd5c

000c1ab4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1ab4:	2825      	cmp	r0, #37	; 0x25
{
   c1ab6:	b538      	push	{r3, r4, r5, lr}
   c1ab8:	4604      	mov	r4, r0
   c1aba:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1abc:	d80a      	bhi.n	c1ad4 <pinMode+0x20>
   c1abe:	29ff      	cmp	r1, #255	; 0xff
   c1ac0:	d008      	beq.n	c1ad4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c1ac2:	f7ff ffb9 	bl	c1a38 <pinAvailable>
   c1ac6:	b128      	cbz	r0, c1ad4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c1ac8:	4629      	mov	r1, r5
   c1aca:	4620      	mov	r0, r4
}
   c1acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c1ad0:	f7fb bee4 	b.w	bd89c <HAL_Pin_Mode>
}
   c1ad4:	bd38      	pop	{r3, r4, r5, pc}

000c1ad6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c1ad6:	b538      	push	{r3, r4, r5, lr}
   c1ad8:	4604      	mov	r4, r0
   c1ada:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c1adc:	f7fb fee6 	bl	bd8ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c1ae0:	28ff      	cmp	r0, #255	; 0xff
   c1ae2:	d010      	beq.n	c1b06 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c1ae4:	2806      	cmp	r0, #6
   c1ae6:	d804      	bhi.n	c1af2 <digitalWrite+0x1c>
   c1ae8:	234d      	movs	r3, #77	; 0x4d
   c1aea:	fa23 f000 	lsr.w	r0, r3, r0
   c1aee:	07c3      	lsls	r3, r0, #31
   c1af0:	d409      	bmi.n	c1b06 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c1af2:	4620      	mov	r0, r4
   c1af4:	f7ff ffa0 	bl	c1a38 <pinAvailable>
   c1af8:	b128      	cbz	r0, c1b06 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c1afa:	4629      	mov	r1, r5
   c1afc:	4620      	mov	r0, r4
}
   c1afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c1b02:	f7fb bedb 	b.w	bd8bc <HAL_GPIO_Write>
}
   c1b06:	bd38      	pop	{r3, r4, r5, pc}

000c1b08 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c1b08:	280d      	cmp	r0, #13
{
   c1b0a:	b510      	push	{r4, lr}
   c1b0c:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c1b0e:	bf9c      	itt	ls
   c1b10:	340e      	addls	r4, #14
   c1b12:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c1b14:	4620      	mov	r0, r4
   c1b16:	f7ff ff8f 	bl	c1a38 <pinAvailable>
   c1b1a:	b150      	cbz	r0, c1b32 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c1b1c:	2103      	movs	r1, #3
   c1b1e:	4620      	mov	r0, r4
   c1b20:	f7fb feb4 	bl	bd88c <HAL_Validate_Pin_Function>
   c1b24:	2803      	cmp	r0, #3
   c1b26:	d104      	bne.n	c1b32 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c1b28:	4620      	mov	r0, r4
}
   c1b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c1b2e:	f7fb bedd 	b.w	bd8ec <hal_adc_read>
}
   c1b32:	2000      	movs	r0, #0
   c1b34:	bd10      	pop	{r4, pc}

000c1b36 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1b36:	4770      	bx	lr

000c1b38 <_Z17acquireWireBufferv>:
{
   c1b38:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c1b3a:	2520      	movs	r5, #32
   c1b3c:	2314      	movs	r3, #20
{
   c1b3e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c1b40:	6003      	str	r3, [r0, #0]
   c1b42:	6085      	str	r5, [r0, #8]
   c1b44:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1b46:	4906      	ldr	r1, [pc, #24]	; (c1b60 <_Z17acquireWireBufferv+0x28>)
   c1b48:	4628      	mov	r0, r5
   c1b4a:	f000 f871 	bl	c1c30 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1b4e:	4904      	ldr	r1, [pc, #16]	; (c1b60 <_Z17acquireWireBufferv+0x28>)
	};
   c1b50:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1b52:	4628      	mov	r0, r5
   c1b54:	f000 f86c 	bl	c1c30 <_ZnajRKSt9nothrow_t>
	};
   c1b58:	60e0      	str	r0, [r4, #12]
}
   c1b5a:	4620      	mov	r0, r4
   c1b5c:	bd38      	pop	{r3, r4, r5, pc}
   c1b5e:	bf00      	nop
   c1b60:	000c7b40 	.word	0x000c7b40

000c1b64 <_Z19__fetch_global_Wirev>:
{
   c1b64:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1b66:	4d0e      	ldr	r5, [pc, #56]	; (c1ba0 <_Z19__fetch_global_Wirev+0x3c>)
   c1b68:	7829      	ldrb	r1, [r5, #0]
   c1b6a:	f3bf 8f5b 	dmb	ish
   c1b6e:	f011 0401 	ands.w	r4, r1, #1
{
   c1b72:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1b74:	d111      	bne.n	c1b9a <_Z19__fetch_global_Wirev+0x36>
   c1b76:	4628      	mov	r0, r5
   c1b78:	f7f2 faa2 	bl	b40c0 <__cxa_guard_acquire>
   c1b7c:	b168      	cbz	r0, c1b9a <_Z19__fetch_global_Wirev+0x36>
   c1b7e:	a801      	add	r0, sp, #4
   c1b80:	f7ff ffda 	bl	c1b38 <_Z17acquireWireBufferv>
   c1b84:	aa01      	add	r2, sp, #4
   c1b86:	4621      	mov	r1, r4
   c1b88:	4806      	ldr	r0, [pc, #24]	; (c1ba4 <_Z19__fetch_global_Wirev+0x40>)
   c1b8a:	f7fd fec5 	bl	bf918 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c1b8e:	4628      	mov	r0, r5
   c1b90:	f7f2 fa9b 	bl	b40ca <__cxa_guard_release>
   c1b94:	4804      	ldr	r0, [pc, #16]	; (c1ba8 <_Z19__fetch_global_Wirev+0x44>)
   c1b96:	f002 fa25 	bl	c3fe4 <atexit>
	return wire;
}
   c1b9a:	4802      	ldr	r0, [pc, #8]	; (c1ba4 <_Z19__fetch_global_Wirev+0x40>)
   c1b9c:	b007      	add	sp, #28
   c1b9e:	bd30      	pop	{r4, r5, pc}
   c1ba0:	2003e72c 	.word	0x2003e72c
   c1ba4:	2003e730 	.word	0x2003e730
   c1ba8:	000c1b37 	.word	0x000c1b37

000c1bac <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1bac:	4770      	bx	lr
	...

000c1bb0 <_Z20acquireSerial1Bufferv>:
{
   c1bb0:	b538      	push	{r3, r4, r5, lr}
   c1bb2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c1bb4:	2514      	movs	r5, #20
   c1bb6:	462a      	mov	r2, r5
   c1bb8:	2100      	movs	r1, #0
   c1bba:	f002 fa61 	bl	c4080 <memset>
   c1bbe:	8025      	strh	r5, [r4, #0]
   c1bc0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1bc2:	4907      	ldr	r1, [pc, #28]	; (c1be0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c1bc4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1bc6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c1bc8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1bca:	f000 f831 	bl	c1c30 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1bce:	4904      	ldr	r1, [pc, #16]	; (c1be0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c1bd0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1bd2:	4628      	mov	r0, r5
   c1bd4:	f000 f82c 	bl	c1c30 <_ZnajRKSt9nothrow_t>
    };
   c1bd8:	60e0      	str	r0, [r4, #12]
}
   c1bda:	4620      	mov	r0, r4
   c1bdc:	bd38      	pop	{r3, r4, r5, pc}
   c1bde:	bf00      	nop
   c1be0:	000c7b40 	.word	0x000c7b40

000c1be4 <_Z22__fetch_global_Serial1v>:
{
   c1be4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1be6:	4d0e      	ldr	r5, [pc, #56]	; (c1c20 <_Z22__fetch_global_Serial1v+0x3c>)
   c1be8:	7829      	ldrb	r1, [r5, #0]
   c1bea:	f3bf 8f5b 	dmb	ish
   c1bee:	f011 0401 	ands.w	r4, r1, #1
{
   c1bf2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1bf4:	d111      	bne.n	c1c1a <_Z22__fetch_global_Serial1v+0x36>
   c1bf6:	4628      	mov	r0, r5
   c1bf8:	f7f2 fa62 	bl	b40c0 <__cxa_guard_acquire>
   c1bfc:	b168      	cbz	r0, c1c1a <_Z22__fetch_global_Serial1v+0x36>
   c1bfe:	a801      	add	r0, sp, #4
   c1c00:	f7ff ffd6 	bl	c1bb0 <_Z20acquireSerial1Bufferv>
   c1c04:	aa01      	add	r2, sp, #4
   c1c06:	4621      	mov	r1, r4
   c1c08:	4806      	ldr	r0, [pc, #24]	; (c1c24 <_Z22__fetch_global_Serial1v+0x40>)
   c1c0a:	f7ff fdd3 	bl	c17b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c1c0e:	4628      	mov	r0, r5
   c1c10:	f7f2 fa5b 	bl	b40ca <__cxa_guard_release>
   c1c14:	4804      	ldr	r0, [pc, #16]	; (c1c28 <_Z22__fetch_global_Serial1v+0x44>)
   c1c16:	f002 f9e5 	bl	c3fe4 <atexit>
    return serial1;
}
   c1c1a:	4802      	ldr	r0, [pc, #8]	; (c1c24 <_Z22__fetch_global_Serial1v+0x40>)
   c1c1c:	b007      	add	sp, #28
   c1c1e:	bd30      	pop	{r4, r5, pc}
   c1c20:	2003e744 	.word	0x2003e744
   c1c24:	2003e748 	.word	0x2003e748
   c1c28:	000c1bad 	.word	0x000c1bad

000c1c2c <_ZnwjRKSt9nothrow_t>:
   c1c2c:	f7f2 ba33 	b.w	b4096 <_Znwj>

000c1c30 <_ZnajRKSt9nothrow_t>:
   c1c30:	f7f2 ba33 	b.w	b409a <_Znaj>

000c1c34 <_ZSt25__throw_bad_function_callv>:
   c1c34:	b508      	push	{r3, lr}
   c1c36:	f7fc f91f 	bl	bde78 <abort>
	...

000c1c3c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c1c3c:	4901      	ldr	r1, [pc, #4]	; (c1c44 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c1c3e:	f000 b8f9 	b.w	c1e34 <_ZNKSt9type_infoeqERKS_>
   c1c42:	bf00      	nop
   c1c44:	000c7b5c 	.word	0x000c7b5c

000c1c48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c1c48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c1c4a:	2400      	movs	r4, #0
   c1c4c:	2310      	movs	r3, #16
   c1c4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c1c52:	6803      	ldr	r3, [r0, #0]
   c1c54:	4615      	mov	r5, r2
   c1c56:	699e      	ldr	r6, [r3, #24]
   c1c58:	6812      	ldr	r2, [r2, #0]
   c1c5a:	466b      	mov	r3, sp
   c1c5c:	e9cd 4400 	strd	r4, r4, [sp]
   c1c60:	47b0      	blx	r6
   c1c62:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c1c66:	f003 0306 	and.w	r3, r3, #6
   c1c6a:	2b06      	cmp	r3, #6
   c1c6c:	bf03      	ittte	eq
   c1c6e:	9b00      	ldreq	r3, [sp, #0]
   c1c70:	602b      	streq	r3, [r5, #0]
   c1c72:	2001      	moveq	r0, #1
   c1c74:	4620      	movne	r0, r4
   c1c76:	b004      	add	sp, #16
   c1c78:	bd70      	pop	{r4, r5, r6, pc}

000c1c7a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c1c7a:	9800      	ldr	r0, [sp, #0]
   c1c7c:	4290      	cmp	r0, r2
   c1c7e:	bf14      	ite	ne
   c1c80:	2001      	movne	r0, #1
   c1c82:	2006      	moveq	r0, #6
   c1c84:	4770      	bx	lr
	...

000c1c88 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c1c88:	b510      	push	{r4, lr}
   c1c8a:	4b03      	ldr	r3, [pc, #12]	; (c1c98 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c1c8c:	6003      	str	r3, [r0, #0]
   c1c8e:	4604      	mov	r4, r0
   c1c90:	f000 f8cd 	bl	c1e2e <_ZNSt9type_infoD1Ev>
   c1c94:	4620      	mov	r0, r4
   c1c96:	bd10      	pop	{r4, pc}
   c1c98:	000c7b9c 	.word	0x000c7b9c

000c1c9c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c1c9c:	b510      	push	{r4, lr}
   c1c9e:	4604      	mov	r4, r0
   c1ca0:	f7ff fff2 	bl	c1c88 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c1ca4:	4620      	mov	r0, r4
   c1ca6:	2108      	movs	r1, #8
   c1ca8:	f7f2 f9fb 	bl	b40a2 <_ZdlPvj>
   c1cac:	4620      	mov	r0, r4
   c1cae:	bd10      	pop	{r4, pc}

000c1cb0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c1cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1cb4:	461f      	mov	r7, r3
   c1cb6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c1cba:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c1cbe:	4598      	cmp	r8, r3
   c1cc0:	4606      	mov	r6, r0
   c1cc2:	4615      	mov	r5, r2
   c1cc4:	d107      	bne.n	c1cd6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c1cc6:	9907      	ldr	r1, [sp, #28]
   c1cc8:	f000 f8b4 	bl	c1e34 <_ZNKSt9type_infoeqERKS_>
   c1ccc:	b118      	cbz	r0, c1cd6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c1cce:	7165      	strb	r5, [r4, #5]
   c1cd0:	2000      	movs	r0, #0
   c1cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1cd6:	4639      	mov	r1, r7
   c1cd8:	4630      	mov	r0, r6
   c1cda:	f000 f8ab 	bl	c1e34 <_ZNKSt9type_infoeqERKS_>
   c1cde:	2800      	cmp	r0, #0
   c1ce0:	d0f6      	beq.n	c1cd0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c1ce2:	2301      	movs	r3, #1
   c1ce4:	f8c4 8000 	str.w	r8, [r4]
   c1ce8:	7125      	strb	r5, [r4, #4]
   c1cea:	71a3      	strb	r3, [r4, #6]
   c1cec:	e7f0      	b.n	c1cd0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c1cee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c1cee:	b538      	push	{r3, r4, r5, lr}
   c1cf0:	4615      	mov	r5, r2
   c1cf2:	461c      	mov	r4, r3
   c1cf4:	f000 f89e 	bl	c1e34 <_ZNKSt9type_infoeqERKS_>
   c1cf8:	b120      	cbz	r0, c1d04 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c1cfa:	2308      	movs	r3, #8
   c1cfc:	60e3      	str	r3, [r4, #12]
   c1cfe:	2306      	movs	r3, #6
   c1d00:	6025      	str	r5, [r4, #0]
   c1d02:	7123      	strb	r3, [r4, #4]
   c1d04:	bd38      	pop	{r3, r4, r5, pc}

000c1d06 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c1d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c1d08:	4605      	mov	r5, r0
   c1d0a:	460c      	mov	r4, r1
   c1d0c:	9201      	str	r2, [sp, #4]
   c1d0e:	461e      	mov	r6, r3
   c1d10:	f000 f890 	bl	c1e34 <_ZNKSt9type_infoeqERKS_>
   c1d14:	b950      	cbnz	r0, c1d2c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c1d16:	2e03      	cmp	r6, #3
   c1d18:	d808      	bhi.n	c1d2c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c1d1a:	6823      	ldr	r3, [r4, #0]
   c1d1c:	9a01      	ldr	r2, [sp, #4]
   c1d1e:	695b      	ldr	r3, [r3, #20]
   c1d20:	4629      	mov	r1, r5
   c1d22:	4620      	mov	r0, r4
   c1d24:	b002      	add	sp, #8
   c1d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c1d2a:	4718      	bx	r3
   c1d2c:	b002      	add	sp, #8
   c1d2e:	bd70      	pop	{r4, r5, r6, pc}

000c1d30 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c1d30:	b510      	push	{r4, lr}
   c1d32:	4b03      	ldr	r3, [pc, #12]	; (c1d40 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c1d34:	6003      	str	r3, [r0, #0]
   c1d36:	4604      	mov	r4, r0
   c1d38:	f7ff ffa6 	bl	c1c88 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c1d3c:	4620      	mov	r0, r4
   c1d3e:	bd10      	pop	{r4, pc}
   c1d40:	000c7bfc 	.word	0x000c7bfc

000c1d44 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c1d44:	b510      	push	{r4, lr}
   c1d46:	4604      	mov	r4, r0
   c1d48:	f7ff fff2 	bl	c1d30 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c1d4c:	4620      	mov	r0, r4
   c1d4e:	210c      	movs	r1, #12
   c1d50:	f7f2 f9a7 	bl	b40a2 <_ZdlPvj>
   c1d54:	4620      	mov	r0, r4
   c1d56:	bd10      	pop	{r4, pc}

000c1d58 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c1d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c1d5a:	9f08      	ldr	r7, [sp, #32]
   c1d5c:	4297      	cmp	r7, r2
   c1d5e:	4605      	mov	r5, r0
   c1d60:	460e      	mov	r6, r1
   c1d62:	4614      	mov	r4, r2
   c1d64:	d00a      	beq.n	c1d7c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c1d66:	68a8      	ldr	r0, [r5, #8]
   c1d68:	6802      	ldr	r2, [r0, #0]
   c1d6a:	9708      	str	r7, [sp, #32]
   c1d6c:	6a15      	ldr	r5, [r2, #32]
   c1d6e:	4631      	mov	r1, r6
   c1d70:	4622      	mov	r2, r4
   c1d72:	46ac      	mov	ip, r5
   c1d74:	b003      	add	sp, #12
   c1d76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c1d7a:	4760      	bx	ip
   c1d7c:	4619      	mov	r1, r3
   c1d7e:	9301      	str	r3, [sp, #4]
   c1d80:	f000 f858 	bl	c1e34 <_ZNKSt9type_infoeqERKS_>
   c1d84:	9b01      	ldr	r3, [sp, #4]
   c1d86:	2800      	cmp	r0, #0
   c1d88:	d0ed      	beq.n	c1d66 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c1d8a:	2006      	movs	r0, #6
   c1d8c:	b003      	add	sp, #12
   c1d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c1d90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c1d90:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c1d94:	460d      	mov	r5, r1
   c1d96:	4619      	mov	r1, r3
   c1d98:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c1d9c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c1da0:	4681      	mov	r9, r0
   c1da2:	4617      	mov	r7, r2
   c1da4:	4698      	mov	r8, r3
   c1da6:	f000 f845 	bl	c1e34 <_ZNKSt9type_infoeqERKS_>
   c1daa:	b190      	cbz	r0, c1dd2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c1dac:	2d00      	cmp	r5, #0
   c1dae:	6034      	str	r4, [r6, #0]
   c1db0:	7137      	strb	r7, [r6, #4]
   c1db2:	db09      	blt.n	c1dc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c1db4:	1961      	adds	r1, r4, r5
   c1db6:	458a      	cmp	sl, r1
   c1db8:	bf0c      	ite	eq
   c1dba:	2106      	moveq	r1, #6
   c1dbc:	2101      	movne	r1, #1
   c1dbe:	71b1      	strb	r1, [r6, #6]
   c1dc0:	2000      	movs	r0, #0
   c1dc2:	b001      	add	sp, #4
   c1dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1dc8:	3502      	adds	r5, #2
   c1dca:	d1f9      	bne.n	c1dc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c1dcc:	2301      	movs	r3, #1
   c1dce:	71b3      	strb	r3, [r6, #6]
   c1dd0:	e7f6      	b.n	c1dc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c1dd2:	4554      	cmp	r4, sl
   c1dd4:	d106      	bne.n	c1de4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c1dd6:	4659      	mov	r1, fp
   c1dd8:	4648      	mov	r0, r9
   c1dda:	f000 f82b 	bl	c1e34 <_ZNKSt9type_infoeqERKS_>
   c1dde:	b108      	cbz	r0, c1de4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c1de0:	7177      	strb	r7, [r6, #5]
   c1de2:	e7ed      	b.n	c1dc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c1de4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c1de8:	6803      	ldr	r3, [r0, #0]
   c1dea:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c1dee:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c1df2:	69dc      	ldr	r4, [r3, #28]
   c1df4:	463a      	mov	r2, r7
   c1df6:	4643      	mov	r3, r8
   c1df8:	4629      	mov	r1, r5
   c1dfa:	46a4      	mov	ip, r4
   c1dfc:	b001      	add	sp, #4
   c1dfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c1e02:	4760      	bx	ip

000c1e04 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c1e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1e08:	4607      	mov	r7, r0
   c1e0a:	460c      	mov	r4, r1
   c1e0c:	4615      	mov	r5, r2
   c1e0e:	461e      	mov	r6, r3
   c1e10:	f7ff ff6d 	bl	c1cee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c1e14:	b948      	cbnz	r0, c1e2a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c1e16:	68b8      	ldr	r0, [r7, #8]
   c1e18:	6803      	ldr	r3, [r0, #0]
   c1e1a:	699f      	ldr	r7, [r3, #24]
   c1e1c:	462a      	mov	r2, r5
   c1e1e:	4633      	mov	r3, r6
   c1e20:	4621      	mov	r1, r4
   c1e22:	46bc      	mov	ip, r7
   c1e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c1e28:	4760      	bx	ip
   c1e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c1e2e <_ZNSt9type_infoD1Ev>:
   c1e2e:	4770      	bx	lr

000c1e30 <_ZNKSt9type_info14__is_pointer_pEv>:
   c1e30:	2000      	movs	r0, #0
   c1e32:	4770      	bx	lr

000c1e34 <_ZNKSt9type_infoeqERKS_>:
   c1e34:	4281      	cmp	r1, r0
   c1e36:	b508      	push	{r3, lr}
   c1e38:	d00e      	beq.n	c1e58 <_ZNKSt9type_infoeqERKS_+0x24>
   c1e3a:	6840      	ldr	r0, [r0, #4]
   c1e3c:	7803      	ldrb	r3, [r0, #0]
   c1e3e:	2b2a      	cmp	r3, #42	; 0x2a
   c1e40:	d00c      	beq.n	c1e5c <_ZNKSt9type_infoeqERKS_+0x28>
   c1e42:	6849      	ldr	r1, [r1, #4]
   c1e44:	780b      	ldrb	r3, [r1, #0]
   c1e46:	2b2a      	cmp	r3, #42	; 0x2a
   c1e48:	bf08      	it	eq
   c1e4a:	3101      	addeq	r1, #1
   c1e4c:	f002 f974 	bl	c4138 <strcmp>
   c1e50:	fab0 f080 	clz	r0, r0
   c1e54:	0940      	lsrs	r0, r0, #5
   c1e56:	bd08      	pop	{r3, pc}
   c1e58:	2001      	movs	r0, #1
   c1e5a:	e7fc      	b.n	c1e56 <_ZNKSt9type_infoeqERKS_+0x22>
   c1e5c:	2000      	movs	r0, #0
   c1e5e:	e7fa      	b.n	c1e56 <_ZNKSt9type_infoeqERKS_+0x22>

000c1e60 <cosf>:
   c1e60:	ee10 3a10 	vmov	r3, s0
   c1e64:	4a18      	ldr	r2, [pc, #96]	; (c1ec8 <cosf+0x68>)
   c1e66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c1e6a:	4293      	cmp	r3, r2
   c1e6c:	dd1b      	ble.n	c1ea6 <cosf+0x46>
   c1e6e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c1e72:	db02      	blt.n	c1e7a <cosf+0x1a>
   c1e74:	ee30 0a40 	vsub.f32	s0, s0, s0
   c1e78:	4770      	bx	lr
   c1e7a:	b500      	push	{lr}
   c1e7c:	b083      	sub	sp, #12
   c1e7e:	4668      	mov	r0, sp
   c1e80:	f000 fb10 	bl	c24a4 <__ieee754_rem_pio2f>
   c1e84:	f000 0003 	and.w	r0, r0, #3
   c1e88:	2801      	cmp	r0, #1
   c1e8a:	eddd 0a01 	vldr	s1, [sp, #4]
   c1e8e:	ed9d 0a00 	vldr	s0, [sp]
   c1e92:	d00c      	beq.n	c1eae <cosf+0x4e>
   c1e94:	2802      	cmp	r0, #2
   c1e96:	d012      	beq.n	c1ebe <cosf+0x5e>
   c1e98:	b170      	cbz	r0, c1eb8 <cosf+0x58>
   c1e9a:	2001      	movs	r0, #1
   c1e9c:	f000 fff4 	bl	c2e88 <__kernel_sinf>
   c1ea0:	b003      	add	sp, #12
   c1ea2:	f85d fb04 	ldr.w	pc, [sp], #4
   c1ea6:	eddf 0a09 	vldr	s1, [pc, #36]	; c1ecc <cosf+0x6c>
   c1eaa:	f000 bc31 	b.w	c2710 <__kernel_cosf>
   c1eae:	f000 ffeb 	bl	c2e88 <__kernel_sinf>
   c1eb2:	eeb1 0a40 	vneg.f32	s0, s0
   c1eb6:	e7f3      	b.n	c1ea0 <cosf+0x40>
   c1eb8:	f000 fc2a 	bl	c2710 <__kernel_cosf>
   c1ebc:	e7f0      	b.n	c1ea0 <cosf+0x40>
   c1ebe:	f000 fc27 	bl	c2710 <__kernel_cosf>
   c1ec2:	eeb1 0a40 	vneg.f32	s0, s0
   c1ec6:	e7eb      	b.n	c1ea0 <cosf+0x40>
   c1ec8:	3f490fd8 	.word	0x3f490fd8
   c1ecc:	00000000 	.word	0x00000000

000c1ed0 <sinf>:
   c1ed0:	ee10 3a10 	vmov	r3, s0
   c1ed4:	4a19      	ldr	r2, [pc, #100]	; (c1f3c <sinf+0x6c>)
   c1ed6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c1eda:	4293      	cmp	r3, r2
   c1edc:	dd1c      	ble.n	c1f18 <sinf+0x48>
   c1ede:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c1ee2:	db02      	blt.n	c1eea <sinf+0x1a>
   c1ee4:	ee30 0a40 	vsub.f32	s0, s0, s0
   c1ee8:	4770      	bx	lr
   c1eea:	b500      	push	{lr}
   c1eec:	b083      	sub	sp, #12
   c1eee:	4668      	mov	r0, sp
   c1ef0:	f000 fad8 	bl	c24a4 <__ieee754_rem_pio2f>
   c1ef4:	f000 0003 	and.w	r0, r0, #3
   c1ef8:	2801      	cmp	r0, #1
   c1efa:	eddd 0a01 	vldr	s1, [sp, #4]
   c1efe:	ed9d 0a00 	vldr	s0, [sp]
   c1f02:	d00e      	beq.n	c1f22 <sinf+0x52>
   c1f04:	2802      	cmp	r0, #2
   c1f06:	d013      	beq.n	c1f30 <sinf+0x60>
   c1f08:	b170      	cbz	r0, c1f28 <sinf+0x58>
   c1f0a:	f000 fc01 	bl	c2710 <__kernel_cosf>
   c1f0e:	eeb1 0a40 	vneg.f32	s0, s0
   c1f12:	b003      	add	sp, #12
   c1f14:	f85d fb04 	ldr.w	pc, [sp], #4
   c1f18:	eddf 0a09 	vldr	s1, [pc, #36]	; c1f40 <sinf+0x70>
   c1f1c:	2000      	movs	r0, #0
   c1f1e:	f000 bfb3 	b.w	c2e88 <__kernel_sinf>
   c1f22:	f000 fbf5 	bl	c2710 <__kernel_cosf>
   c1f26:	e7f4      	b.n	c1f12 <sinf+0x42>
   c1f28:	2001      	movs	r0, #1
   c1f2a:	f000 ffad 	bl	c2e88 <__kernel_sinf>
   c1f2e:	e7f0      	b.n	c1f12 <sinf+0x42>
   c1f30:	2001      	movs	r0, #1
   c1f32:	f000 ffa9 	bl	c2e88 <__kernel_sinf>
   c1f36:	eeb1 0a40 	vneg.f32	s0, s0
   c1f3a:	e7ea      	b.n	c1f12 <sinf+0x42>
   c1f3c:	3f490fd8 	.word	0x3f490fd8
   c1f40:	00000000 	.word	0x00000000

000c1f44 <atan2>:
   c1f44:	f000 b864 	b.w	c2010 <__ieee754_atan2>

000c1f48 <sqrt>:
   c1f48:	b538      	push	{r3, r4, r5, lr}
   c1f4a:	ed2d 8b02 	vpush	{d8}
   c1f4e:	ec55 4b10 	vmov	r4, r5, d0
   c1f52:	f000 f933 	bl	c21bc <__ieee754_sqrt>
   c1f56:	4b18      	ldr	r3, [pc, #96]	; (c1fb8 <sqrt+0x70>)
   c1f58:	eeb0 8a40 	vmov.f32	s16, s0
   c1f5c:	eef0 8a60 	vmov.f32	s17, s1
   c1f60:	f993 3000 	ldrsb.w	r3, [r3]
   c1f64:	3301      	adds	r3, #1
   c1f66:	d00d      	beq.n	c1f84 <sqrt+0x3c>
   c1f68:	4622      	mov	r2, r4
   c1f6a:	462b      	mov	r3, r5
   c1f6c:	4620      	mov	r0, r4
   c1f6e:	4629      	mov	r1, r5
   c1f70:	f001 ff6c 	bl	c3e4c <__aeabi_dcmpun>
   c1f74:	b930      	cbnz	r0, c1f84 <sqrt+0x3c>
   c1f76:	2200      	movs	r2, #0
   c1f78:	2300      	movs	r3, #0
   c1f7a:	4620      	mov	r0, r4
   c1f7c:	4629      	mov	r1, r5
   c1f7e:	f001 ff3d 	bl	c3dfc <__aeabi_dcmplt>
   c1f82:	b930      	cbnz	r0, c1f92 <sqrt+0x4a>
   c1f84:	eeb0 0a48 	vmov.f32	s0, s16
   c1f88:	eef0 0a68 	vmov.f32	s1, s17
   c1f8c:	ecbd 8b02 	vpop	{d8}
   c1f90:	bd38      	pop	{r3, r4, r5, pc}
   c1f92:	f7fb ff81 	bl	bde98 <__errno>
   c1f96:	2200      	movs	r2, #0
   c1f98:	2300      	movs	r3, #0
   c1f9a:	2121      	movs	r1, #33	; 0x21
   c1f9c:	6001      	str	r1, [r0, #0]
   c1f9e:	4610      	mov	r0, r2
   c1fa0:	4619      	mov	r1, r3
   c1fa2:	f001 fde3 	bl	c3b6c <__aeabi_ddiv>
   c1fa6:	ec41 0b18 	vmov	d8, r0, r1
   c1faa:	eeb0 0a48 	vmov.f32	s0, s16
   c1fae:	eef0 0a68 	vmov.f32	s1, s17
   c1fb2:	ecbd 8b02 	vpop	{d8}
   c1fb6:	bd38      	pop	{r3, r4, r5, pc}
   c1fb8:	2003db7c 	.word	0x2003db7c

000c1fbc <atan2f>:
   c1fbc:	f000 b9ca 	b.w	c2354 <__ieee754_atan2f>

000c1fc0 <sqrtf>:
   c1fc0:	b508      	push	{r3, lr}
   c1fc2:	ed2d 8b02 	vpush	{d8}
   c1fc6:	eeb0 8a40 	vmov.f32	s16, s0
   c1fca:	f000 fb9d 	bl	c2708 <__ieee754_sqrtf>
   c1fce:	4b0e      	ldr	r3, [pc, #56]	; (c2008 <sqrtf+0x48>)
   c1fd0:	f993 3000 	ldrsb.w	r3, [r3]
   c1fd4:	3301      	adds	r3, #1
   c1fd6:	d00b      	beq.n	c1ff0 <sqrtf+0x30>
   c1fd8:	eeb4 8a48 	vcmp.f32	s16, s16
   c1fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1fe0:	d606      	bvs.n	c1ff0 <sqrtf+0x30>
   c1fe2:	eddf 8a0a 	vldr	s17, [pc, #40]	; c200c <sqrtf+0x4c>
   c1fe6:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c1fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1fee:	d402      	bmi.n	c1ff6 <sqrtf+0x36>
   c1ff0:	ecbd 8b02 	vpop	{d8}
   c1ff4:	bd08      	pop	{r3, pc}
   c1ff6:	f7fb ff4f 	bl	bde98 <__errno>
   c1ffa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c1ffe:	ecbd 8b02 	vpop	{d8}
   c2002:	2321      	movs	r3, #33	; 0x21
   c2004:	6003      	str	r3, [r0, #0]
   c2006:	bd08      	pop	{r3, pc}
   c2008:	2003db7c 	.word	0x2003db7c
   c200c:	00000000 	.word	0x00000000

000c2010 <__ieee754_atan2>:
   c2010:	ec51 0b11 	vmov	r0, r1, d1
   c2014:	4243      	negs	r3, r0
   c2016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c201a:	4303      	orrs	r3, r0
   c201c:	4e64      	ldr	r6, [pc, #400]	; (c21b0 <__ieee754_atan2+0x1a0>)
   c201e:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
   c2022:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
   c2026:	42b3      	cmp	r3, r6
   c2028:	ec55 4b10 	vmov	r4, r5, d0
   c202c:	d83e      	bhi.n	c20ac <__ieee754_atan2+0x9c>
   c202e:	4263      	negs	r3, r4
   c2030:	4323      	orrs	r3, r4
   c2032:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   c2036:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   c203a:	42b3      	cmp	r3, r6
   c203c:	46a9      	mov	r9, r5
   c203e:	d835      	bhi.n	c20ac <__ieee754_atan2+0x9c>
   c2040:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   c2044:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c2048:	4303      	orrs	r3, r0
   c204a:	d03e      	beq.n	c20ca <__ieee754_atan2+0xba>
   c204c:	178f      	asrs	r7, r1, #30
   c204e:	f007 0702 	and.w	r7, r7, #2
   c2052:	ea5a 0304 	orrs.w	r3, sl, r4
   c2056:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
   c205a:	d02f      	beq.n	c20bc <__ieee754_atan2+0xac>
   c205c:	ea5e 0300 	orrs.w	r3, lr, r0
   c2060:	d037      	beq.n	c20d2 <__ieee754_atan2+0xc2>
   c2062:	45b6      	cmp	lr, r6
   c2064:	d044      	beq.n	c20f0 <__ieee754_atan2+0xe0>
   c2066:	45b2      	cmp	sl, r6
   c2068:	d033      	beq.n	c20d2 <__ieee754_atan2+0xc2>
   c206a:	ebaa 0e0e 	sub.w	lr, sl, lr
   c206e:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
   c2072:	ea4f 532e 	mov.w	r3, lr, asr #20
   c2076:	da38      	bge.n	c20ea <__ieee754_atan2+0xda>
   c2078:	2900      	cmp	r1, #0
   c207a:	da45      	bge.n	c2108 <__ieee754_atan2+0xf8>
   c207c:	333c      	adds	r3, #60	; 0x3c
   c207e:	da43      	bge.n	c2108 <__ieee754_atan2+0xf8>
   c2080:	ed9f 0b3d 	vldr	d0, [pc, #244]	; c2178 <__ieee754_atan2+0x168>
   c2084:	2f01      	cmp	r7, #1
   c2086:	d05d      	beq.n	c2144 <__ieee754_atan2+0x134>
   c2088:	2f02      	cmp	r7, #2
   c208a:	d04a      	beq.n	c2122 <__ieee754_atan2+0x112>
   c208c:	b1a7      	cbz	r7, c20b8 <__ieee754_atan2+0xa8>
   c208e:	ec51 0b10 	vmov	r0, r1, d0
   c2092:	a33b      	add	r3, pc, #236	; (adr r3, c2180 <__ieee754_atan2+0x170>)
   c2094:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2098:	f001 fa86 	bl	c35a8 <__aeabi_dsub>
   c209c:	a33a      	add	r3, pc, #232	; (adr r3, c2188 <__ieee754_atan2+0x178>)
   c209e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c20a2:	f001 fa81 	bl	c35a8 <__aeabi_dsub>
   c20a6:	ec41 0b10 	vmov	d0, r0, r1
   c20aa:	e005      	b.n	c20b8 <__ieee754_atan2+0xa8>
   c20ac:	4622      	mov	r2, r4
   c20ae:	462b      	mov	r3, r5
   c20b0:	f001 fa7c 	bl	c35ac <__adddf3>
   c20b4:	ec41 0b10 	vmov	d0, r0, r1
   c20b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c20bc:	2f02      	cmp	r7, #2
   c20be:	d00e      	beq.n	c20de <__ieee754_atan2+0xce>
   c20c0:	2f03      	cmp	r7, #3
   c20c2:	d1f9      	bne.n	c20b8 <__ieee754_atan2+0xa8>
   c20c4:	ed9f 0b32 	vldr	d0, [pc, #200]	; c2190 <__ieee754_atan2+0x180>
   c20c8:	e7f6      	b.n	c20b8 <__ieee754_atan2+0xa8>
   c20ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c20ce:	f000 bf23 	b.w	c2f18 <atan>
   c20d2:	f1b9 0f00 	cmp.w	r9, #0
   c20d6:	db05      	blt.n	c20e4 <__ieee754_atan2+0xd4>
   c20d8:	ed9f 0b2f 	vldr	d0, [pc, #188]	; c2198 <__ieee754_atan2+0x188>
   c20dc:	e7ec      	b.n	c20b8 <__ieee754_atan2+0xa8>
   c20de:	ed9f 0b2a 	vldr	d0, [pc, #168]	; c2188 <__ieee754_atan2+0x178>
   c20e2:	e7e9      	b.n	c20b8 <__ieee754_atan2+0xa8>
   c20e4:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c21a0 <__ieee754_atan2+0x190>
   c20e8:	e7e6      	b.n	c20b8 <__ieee754_atan2+0xa8>
   c20ea:	ed9f 0b2b 	vldr	d0, [pc, #172]	; c2198 <__ieee754_atan2+0x188>
   c20ee:	e7c9      	b.n	c2084 <__ieee754_atan2+0x74>
   c20f0:	45f2      	cmp	sl, lr
   c20f2:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   c20f6:	d02e      	beq.n	c2156 <__ieee754_atan2+0x146>
   c20f8:	2f02      	cmp	r7, #2
   c20fa:	d834      	bhi.n	c2166 <__ieee754_atan2+0x156>
   c20fc:	4b2d      	ldr	r3, [pc, #180]	; (c21b4 <__ieee754_atan2+0x1a4>)
   c20fe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c2102:	ed97 0b00 	vldr	d0, [r7]
   c2106:	e7d7      	b.n	c20b8 <__ieee754_atan2+0xa8>
   c2108:	4602      	mov	r2, r0
   c210a:	460b      	mov	r3, r1
   c210c:	4620      	mov	r0, r4
   c210e:	4629      	mov	r1, r5
   c2110:	f001 fd2c 	bl	c3b6c <__aeabi_ddiv>
   c2114:	ec41 0b10 	vmov	d0, r0, r1
   c2118:	f001 f89e 	bl	c3258 <fabs>
   c211c:	f000 fefc 	bl	c2f18 <atan>
   c2120:	e7b0      	b.n	c2084 <__ieee754_atan2+0x74>
   c2122:	a317      	add	r3, pc, #92	; (adr r3, c2180 <__ieee754_atan2+0x170>)
   c2124:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2128:	ec51 0b10 	vmov	r0, r1, d0
   c212c:	f001 fa3c 	bl	c35a8 <__aeabi_dsub>
   c2130:	4602      	mov	r2, r0
   c2132:	460b      	mov	r3, r1
   c2134:	a114      	add	r1, pc, #80	; (adr r1, c2188 <__ieee754_atan2+0x178>)
   c2136:	e9d1 0100 	ldrd	r0, r1, [r1]
   c213a:	f001 fa35 	bl	c35a8 <__aeabi_dsub>
   c213e:	ec41 0b10 	vmov	d0, r0, r1
   c2142:	e7b9      	b.n	c20b8 <__ieee754_atan2+0xa8>
   c2144:	ee10 1a90 	vmov	r1, s1
   c2148:	ec53 2b10 	vmov	r2, r3, d0
   c214c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2150:	ec43 2b10 	vmov	d0, r2, r3
   c2154:	e7b0      	b.n	c20b8 <__ieee754_atan2+0xa8>
   c2156:	2f02      	cmp	r7, #2
   c2158:	d808      	bhi.n	c216c <__ieee754_atan2+0x15c>
   c215a:	4b17      	ldr	r3, [pc, #92]	; (c21b8 <__ieee754_atan2+0x1a8>)
   c215c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c2160:	ed97 0b00 	vldr	d0, [r7]
   c2164:	e7a8      	b.n	c20b8 <__ieee754_atan2+0xa8>
   c2166:	ed9f 0b04 	vldr	d0, [pc, #16]	; c2178 <__ieee754_atan2+0x168>
   c216a:	e7a5      	b.n	c20b8 <__ieee754_atan2+0xa8>
   c216c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; c21a8 <__ieee754_atan2+0x198>
   c2170:	e7a2      	b.n	c20b8 <__ieee754_atan2+0xa8>
   c2172:	bf00      	nop
   c2174:	f3af 8000 	nop.w
	...
   c2180:	33145c07 	.word	0x33145c07
   c2184:	3ca1a626 	.word	0x3ca1a626
   c2188:	54442d18 	.word	0x54442d18
   c218c:	400921fb 	.word	0x400921fb
   c2190:	54442d18 	.word	0x54442d18
   c2194:	c00921fb 	.word	0xc00921fb
   c2198:	54442d18 	.word	0x54442d18
   c219c:	3ff921fb 	.word	0x3ff921fb
   c21a0:	54442d18 	.word	0x54442d18
   c21a4:	bff921fb 	.word	0xbff921fb
   c21a8:	54442d18 	.word	0x54442d18
   c21ac:	3fe921fb 	.word	0x3fe921fb
   c21b0:	7ff00000 	.word	0x7ff00000
   c21b4:	000c7c50 	.word	0x000c7c50
   c21b8:	000c7c38 	.word	0x000c7c38

000c21bc <__ieee754_sqrt>:
   c21bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c21c0:	4a63      	ldr	r2, [pc, #396]	; (c2350 <__ieee754_sqrt+0x194>)
   c21c2:	ec55 4b10 	vmov	r4, r5, d0
   c21c6:	43aa      	bics	r2, r5
   c21c8:	f000 809f 	beq.w	c230a <__ieee754_sqrt+0x14e>
   c21cc:	2d00      	cmp	r5, #0
   c21ce:	ee10 ca10 	vmov	ip, s0
   c21d2:	462b      	mov	r3, r5
   c21d4:	dd54      	ble.n	c2280 <__ieee754_sqrt+0xc4>
   c21d6:	1529      	asrs	r1, r5, #20
   c21d8:	d063      	beq.n	c22a2 <__ieee754_sqrt+0xe6>
   c21da:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c21de:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c21e2:	07c9      	lsls	r1, r1, #31
   c21e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c21e8:	d404      	bmi.n	c21f4 <__ieee754_sqrt+0x38>
   c21ea:	005b      	lsls	r3, r3, #1
   c21ec:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c21f0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c21f4:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c21f8:	2600      	movs	r6, #0
   c21fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c21fe:	107f      	asrs	r7, r7, #1
   c2200:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2204:	f04f 0e16 	mov.w	lr, #22
   c2208:	4634      	mov	r4, r6
   c220a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c220e:	18a1      	adds	r1, r4, r2
   c2210:	4299      	cmp	r1, r3
   c2212:	dc02      	bgt.n	c221a <__ieee754_sqrt+0x5e>
   c2214:	1a5b      	subs	r3, r3, r1
   c2216:	188c      	adds	r4, r1, r2
   c2218:	4416      	add	r6, r2
   c221a:	005b      	lsls	r3, r3, #1
   c221c:	f1be 0e01 	subs.w	lr, lr, #1
   c2220:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c2224:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c2228:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c222c:	d1ef      	bne.n	c220e <__ieee754_sqrt+0x52>
   c222e:	4675      	mov	r5, lr
   c2230:	2020      	movs	r0, #32
   c2232:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c2236:	e00a      	b.n	c224e <__ieee754_sqrt+0x92>
   c2238:	d044      	beq.n	c22c4 <__ieee754_sqrt+0x108>
   c223a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c223e:	3801      	subs	r0, #1
   c2240:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c2244:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2248:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c224c:	d043      	beq.n	c22d6 <__ieee754_sqrt+0x11a>
   c224e:	42a3      	cmp	r3, r4
   c2250:	eb02 010e 	add.w	r1, r2, lr
   c2254:	ddf0      	ble.n	c2238 <__ieee754_sqrt+0x7c>
   c2256:	2900      	cmp	r1, #0
   c2258:	eb01 0e02 	add.w	lr, r1, r2
   c225c:	db0a      	blt.n	c2274 <__ieee754_sqrt+0xb8>
   c225e:	46a0      	mov	r8, r4
   c2260:	1b1b      	subs	r3, r3, r4
   c2262:	4561      	cmp	r1, ip
   c2264:	bf88      	it	hi
   c2266:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   c226a:	ebac 0c01 	sub.w	ip, ip, r1
   c226e:	4415      	add	r5, r2
   c2270:	4644      	mov	r4, r8
   c2272:	e7e2      	b.n	c223a <__ieee754_sqrt+0x7e>
   c2274:	f1be 0f00 	cmp.w	lr, #0
   c2278:	dbf1      	blt.n	c225e <__ieee754_sqrt+0xa2>
   c227a:	f104 0801 	add.w	r8, r4, #1
   c227e:	e7ef      	b.n	c2260 <__ieee754_sqrt+0xa4>
   c2280:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c2284:	4322      	orrs	r2, r4
   c2286:	d038      	beq.n	c22fa <__ieee754_sqrt+0x13e>
   c2288:	2d00      	cmp	r5, #0
   c228a:	d14e      	bne.n	c232a <__ieee754_sqrt+0x16e>
   c228c:	4629      	mov	r1, r5
   c228e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c2292:	3915      	subs	r1, #21
   c2294:	4613      	mov	r3, r2
   c2296:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c229a:	2a00      	cmp	r2, #0
   c229c:	d0f7      	beq.n	c228e <__ieee754_sqrt+0xd2>
   c229e:	02d6      	lsls	r6, r2, #11
   c22a0:	d450      	bmi.n	c2344 <__ieee754_sqrt+0x188>
   c22a2:	2000      	movs	r0, #0
   c22a4:	005b      	lsls	r3, r3, #1
   c22a6:	02dd      	lsls	r5, r3, #11
   c22a8:	4604      	mov	r4, r0
   c22aa:	f100 0001 	add.w	r0, r0, #1
   c22ae:	d5f9      	bpl.n	c22a4 <__ieee754_sqrt+0xe8>
   c22b0:	461a      	mov	r2, r3
   c22b2:	4663      	mov	r3, ip
   c22b4:	fa0c fc00 	lsl.w	ip, ip, r0
   c22b8:	f1c0 0020 	rsb	r0, r0, #32
   c22bc:	40c3      	lsrs	r3, r0
   c22be:	1b09      	subs	r1, r1, r4
   c22c0:	4313      	orrs	r3, r2
   c22c2:	e78a      	b.n	c21da <__ieee754_sqrt+0x1e>
   c22c4:	4561      	cmp	r1, ip
   c22c6:	d8b8      	bhi.n	c223a <__ieee754_sqrt+0x7e>
   c22c8:	2900      	cmp	r1, #0
   c22ca:	eb01 0e02 	add.w	lr, r1, r2
   c22ce:	dbd1      	blt.n	c2274 <__ieee754_sqrt+0xb8>
   c22d0:	4698      	mov	r8, r3
   c22d2:	2300      	movs	r3, #0
   c22d4:	e7c9      	b.n	c226a <__ieee754_sqrt+0xae>
   c22d6:	ea53 030c 	orrs.w	r3, r3, ip
   c22da:	d110      	bne.n	c22fe <__ieee754_sqrt+0x142>
   c22dc:	0868      	lsrs	r0, r5, #1
   c22de:	1071      	asrs	r1, r6, #1
   c22e0:	07f3      	lsls	r3, r6, #31
   c22e2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c22e6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c22ea:	bf48      	it	mi
   c22ec:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c22f0:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c22f4:	4602      	mov	r2, r0
   c22f6:	ec43 2b10 	vmov	d0, r2, r3
   c22fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c22fe:	1c6a      	adds	r2, r5, #1
   c2300:	bf16      	itet	ne
   c2302:	1c68      	addne	r0, r5, #1
   c2304:	3601      	addeq	r6, #1
   c2306:	0840      	lsrne	r0, r0, #1
   c2308:	e7e9      	b.n	c22de <__ieee754_sqrt+0x122>
   c230a:	ee10 2a10 	vmov	r2, s0
   c230e:	ee10 0a10 	vmov	r0, s0
   c2312:	462b      	mov	r3, r5
   c2314:	4629      	mov	r1, r5
   c2316:	f001 faff 	bl	c3918 <__aeabi_dmul>
   c231a:	4622      	mov	r2, r4
   c231c:	462b      	mov	r3, r5
   c231e:	f001 f945 	bl	c35ac <__adddf3>
   c2322:	ec41 0b10 	vmov	d0, r0, r1
   c2326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c232a:	ee10 2a10 	vmov	r2, s0
   c232e:	4620      	mov	r0, r4
   c2330:	4629      	mov	r1, r5
   c2332:	f001 f939 	bl	c35a8 <__aeabi_dsub>
   c2336:	4602      	mov	r2, r0
   c2338:	460b      	mov	r3, r1
   c233a:	f001 fc17 	bl	c3b6c <__aeabi_ddiv>
   c233e:	ec41 0b10 	vmov	d0, r0, r1
   c2342:	e7da      	b.n	c22fa <__ieee754_sqrt+0x13e>
   c2344:	4663      	mov	r3, ip
   c2346:	2020      	movs	r0, #32
   c2348:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   c234c:	e7b6      	b.n	c22bc <__ieee754_sqrt+0x100>
   c234e:	bf00      	nop
   c2350:	7ff00000 	.word	0x7ff00000

000c2354 <__ieee754_atan2f>:
   c2354:	b510      	push	{r4, lr}
   c2356:	b082      	sub	sp, #8
   c2358:	edcd 0a01 	vstr	s1, [sp, #4]
   c235c:	9b01      	ldr	r3, [sp, #4]
   c235e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   c2362:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c2366:	eef0 7a40 	vmov.f32	s15, s0
   c236a:	dc30      	bgt.n	c23ce <__ieee754_atan2f+0x7a>
   c236c:	ee10 0a10 	vmov	r0, s0
   c2370:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   c2374:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2378:	dc29      	bgt.n	c23ce <__ieee754_atan2f+0x7a>
   c237a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   c237e:	d042      	beq.n	c2406 <__ieee754_atan2f+0xb2>
   c2380:	179c      	asrs	r4, r3, #30
   c2382:	f004 0402 	and.w	r4, r4, #2
   c2386:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   c238a:	b331      	cbz	r1, c23da <__ieee754_atan2f+0x86>
   c238c:	b37a      	cbz	r2, c23ee <__ieee754_atan2f+0x9a>
   c238e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c2392:	d040      	beq.n	c2416 <__ieee754_atan2f+0xc2>
   c2394:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2398:	d029      	beq.n	c23ee <__ieee754_atan2f+0x9a>
   c239a:	1a8a      	subs	r2, r1, r2
   c239c:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   c23a0:	ea4f 51e2 	mov.w	r1, r2, asr #23
   c23a4:	da34      	bge.n	c2410 <__ieee754_atan2f+0xbc>
   c23a6:	2b00      	cmp	r3, #0
   c23a8:	da42      	bge.n	c2430 <__ieee754_atan2f+0xdc>
   c23aa:	313c      	adds	r1, #60	; 0x3c
   c23ac:	da40      	bge.n	c2430 <__ieee754_atan2f+0xdc>
   c23ae:	ed9f 0a34 	vldr	s0, [pc, #208]	; c2480 <__ieee754_atan2f+0x12c>
   c23b2:	2c01      	cmp	r4, #1
   c23b4:	d04e      	beq.n	c2454 <__ieee754_atan2f+0x100>
   c23b6:	2c02      	cmp	r4, #2
   c23b8:	d043      	beq.n	c2442 <__ieee754_atan2f+0xee>
   c23ba:	b164      	cbz	r4, c23d6 <__ieee754_atan2f+0x82>
   c23bc:	ed9f 7a31 	vldr	s14, [pc, #196]	; c2484 <__ieee754_atan2f+0x130>
   c23c0:	eddf 7a31 	vldr	s15, [pc, #196]	; c2488 <__ieee754_atan2f+0x134>
   c23c4:	ee30 0a07 	vadd.f32	s0, s0, s14
   c23c8:	ee30 0a67 	vsub.f32	s0, s0, s15
   c23cc:	e003      	b.n	c23d6 <__ieee754_atan2f+0x82>
   c23ce:	ed9d 7a01 	vldr	s14, [sp, #4]
   c23d2:	ee37 0a27 	vadd.f32	s0, s14, s15
   c23d6:	b002      	add	sp, #8
   c23d8:	bd10      	pop	{r4, pc}
   c23da:	2c02      	cmp	r4, #2
   c23dc:	d010      	beq.n	c2400 <__ieee754_atan2f+0xac>
   c23de:	ed9f 0a2b 	vldr	s0, [pc, #172]	; c248c <__ieee754_atan2f+0x138>
   c23e2:	2c03      	cmp	r4, #3
   c23e4:	bf18      	it	ne
   c23e6:	eeb0 0a67 	vmovne.f32	s0, s15
   c23ea:	b002      	add	sp, #8
   c23ec:	bd10      	pop	{r4, pc}
   c23ee:	ed9f 0a28 	vldr	s0, [pc, #160]	; c2490 <__ieee754_atan2f+0x13c>
   c23f2:	eddf 7a28 	vldr	s15, [pc, #160]	; c2494 <__ieee754_atan2f+0x140>
   c23f6:	2800      	cmp	r0, #0
   c23f8:	bfb8      	it	lt
   c23fa:	eeb0 0a67 	vmovlt.f32	s0, s15
   c23fe:	e7ea      	b.n	c23d6 <__ieee754_atan2f+0x82>
   c2400:	ed9f 0a21 	vldr	s0, [pc, #132]	; c2488 <__ieee754_atan2f+0x134>
   c2404:	e7e7      	b.n	c23d6 <__ieee754_atan2f+0x82>
   c2406:	b002      	add	sp, #8
   c2408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c240c:	f000 bf2e 	b.w	c326c <atanf>
   c2410:	ed9f 0a1f 	vldr	s0, [pc, #124]	; c2490 <__ieee754_atan2f+0x13c>
   c2414:	e7cd      	b.n	c23b2 <__ieee754_atan2f+0x5e>
   c2416:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c241a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   c241e:	d020      	beq.n	c2462 <__ieee754_atan2f+0x10e>
   c2420:	2c02      	cmp	r4, #2
   c2422:	d826      	bhi.n	c2472 <__ieee754_atan2f+0x11e>
   c2424:	4b1c      	ldr	r3, [pc, #112]	; (c2498 <__ieee754_atan2f+0x144>)
   c2426:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c242a:	ed94 0a00 	vldr	s0, [r4]
   c242e:	e7d2      	b.n	c23d6 <__ieee754_atan2f+0x82>
   c2430:	ed9d 7a01 	vldr	s14, [sp, #4]
   c2434:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c2438:	f000 fff2 	bl	c3420 <fabsf>
   c243c:	f000 ff16 	bl	c326c <atanf>
   c2440:	e7b7      	b.n	c23b2 <__ieee754_atan2f+0x5e>
   c2442:	ed9f 7a10 	vldr	s14, [pc, #64]	; c2484 <__ieee754_atan2f+0x130>
   c2446:	eddf 7a10 	vldr	s15, [pc, #64]	; c2488 <__ieee754_atan2f+0x134>
   c244a:	ee30 0a07 	vadd.f32	s0, s0, s14
   c244e:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c2452:	e7c0      	b.n	c23d6 <__ieee754_atan2f+0x82>
   c2454:	ee10 3a10 	vmov	r3, s0
   c2458:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c245c:	ee00 3a10 	vmov	s0, r3
   c2460:	e7b9      	b.n	c23d6 <__ieee754_atan2f+0x82>
   c2462:	2c02      	cmp	r4, #2
   c2464:	d808      	bhi.n	c2478 <__ieee754_atan2f+0x124>
   c2466:	4b0d      	ldr	r3, [pc, #52]	; (c249c <__ieee754_atan2f+0x148>)
   c2468:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c246c:	ed94 0a00 	vldr	s0, [r4]
   c2470:	e7b1      	b.n	c23d6 <__ieee754_atan2f+0x82>
   c2472:	ed9f 0a03 	vldr	s0, [pc, #12]	; c2480 <__ieee754_atan2f+0x12c>
   c2476:	e7ae      	b.n	c23d6 <__ieee754_atan2f+0x82>
   c2478:	ed9f 0a09 	vldr	s0, [pc, #36]	; c24a0 <__ieee754_atan2f+0x14c>
   c247c:	e7ab      	b.n	c23d6 <__ieee754_atan2f+0x82>
   c247e:	bf00      	nop
   c2480:	00000000 	.word	0x00000000
   c2484:	33bbbd2e 	.word	0x33bbbd2e
   c2488:	40490fdb 	.word	0x40490fdb
   c248c:	c0490fdb 	.word	0xc0490fdb
   c2490:	3fc90fdb 	.word	0x3fc90fdb
   c2494:	bfc90fdb 	.word	0xbfc90fdb
   c2498:	000c7c74 	.word	0x000c7c74
   c249c:	000c7c68 	.word	0x000c7c68
   c24a0:	3f490fdb 	.word	0x3f490fdb

000c24a4 <__ieee754_rem_pio2f>:
   c24a4:	b570      	push	{r4, r5, r6, lr}
   c24a6:	ee10 3a10 	vmov	r3, s0
   c24aa:	4a89      	ldr	r2, [pc, #548]	; (c26d0 <__ieee754_rem_pio2f+0x22c>)
   c24ac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   c24b0:	4294      	cmp	r4, r2
   c24b2:	b086      	sub	sp, #24
   c24b4:	4605      	mov	r5, r0
   c24b6:	dd70      	ble.n	c259a <__ieee754_rem_pio2f+0xf6>
   c24b8:	4a86      	ldr	r2, [pc, #536]	; (c26d4 <__ieee754_rem_pio2f+0x230>)
   c24ba:	4294      	cmp	r4, r2
   c24bc:	ee10 6a10 	vmov	r6, s0
   c24c0:	dc22      	bgt.n	c2508 <__ieee754_rem_pio2f+0x64>
   c24c2:	2b00      	cmp	r3, #0
   c24c4:	eddf 7a84 	vldr	s15, [pc, #528]	; c26d8 <__ieee754_rem_pio2f+0x234>
   c24c8:	4a84      	ldr	r2, [pc, #528]	; (c26dc <__ieee754_rem_pio2f+0x238>)
   c24ca:	f024 040f 	bic.w	r4, r4, #15
   c24ce:	eeb0 7a40 	vmov.f32	s14, s0
   c24d2:	f340 80e4 	ble.w	c269e <__ieee754_rem_pio2f+0x1fa>
   c24d6:	4294      	cmp	r4, r2
   c24d8:	ee70 7a67 	vsub.f32	s15, s0, s15
   c24dc:	bf09      	itett	eq
   c24de:	eddf 6a80 	vldreq	s13, [pc, #512]	; c26e0 <__ieee754_rem_pio2f+0x23c>
   c24e2:	ed9f 7a80 	vldrne	s14, [pc, #512]	; c26e4 <__ieee754_rem_pio2f+0x240>
   c24e6:	ed9f 7a80 	vldreq	s14, [pc, #512]	; c26e8 <__ieee754_rem_pio2f+0x244>
   c24ea:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   c24ee:	2001      	movs	r0, #1
   c24f0:	ee77 6ac7 	vsub.f32	s13, s15, s14
   c24f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c24f8:	edc5 6a00 	vstr	s13, [r5]
   c24fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2500:	edc5 7a01 	vstr	s15, [r5, #4]
   c2504:	b006      	add	sp, #24
   c2506:	bd70      	pop	{r4, r5, r6, pc}
   c2508:	4a78      	ldr	r2, [pc, #480]	; (c26ec <__ieee754_rem_pio2f+0x248>)
   c250a:	4294      	cmp	r4, r2
   c250c:	dd54      	ble.n	c25b8 <__ieee754_rem_pio2f+0x114>
   c250e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c2512:	da49      	bge.n	c25a8 <__ieee754_rem_pio2f+0x104>
   c2514:	15e2      	asrs	r2, r4, #23
   c2516:	3a86      	subs	r2, #134	; 0x86
   c2518:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   c251c:	ee07 3a90 	vmov	s15, r3
   c2520:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c2524:	eddf 6a72 	vldr	s13, [pc, #456]	; c26f0 <__ieee754_rem_pio2f+0x24c>
   c2528:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c252c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2530:	ed8d 7a03 	vstr	s14, [sp, #12]
   c2534:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2538:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c253c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2540:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2544:	ed8d 7a04 	vstr	s14, [sp, #16]
   c2548:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c254c:	eef5 7a40 	vcmp.f32	s15, #0.0
   c2550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2554:	edcd 7a05 	vstr	s15, [sp, #20]
   c2558:	f040 8090 	bne.w	c267c <__ieee754_rem_pio2f+0x1d8>
   c255c:	eeb5 7a40 	vcmp.f32	s14, #0.0
   c2560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2564:	bf14      	ite	ne
   c2566:	2302      	movne	r3, #2
   c2568:	2301      	moveq	r3, #1
   c256a:	4962      	ldr	r1, [pc, #392]	; (c26f4 <__ieee754_rem_pio2f+0x250>)
   c256c:	9101      	str	r1, [sp, #4]
   c256e:	2102      	movs	r1, #2
   c2570:	9100      	str	r1, [sp, #0]
   c2572:	a803      	add	r0, sp, #12
   c2574:	4629      	mov	r1, r5
   c2576:	f000 f94d 	bl	c2814 <__kernel_rem_pio2f>
   c257a:	2e00      	cmp	r6, #0
   c257c:	dac2      	bge.n	c2504 <__ieee754_rem_pio2f+0x60>
   c257e:	ed95 7a00 	vldr	s14, [r5]
   c2582:	edd5 7a01 	vldr	s15, [r5, #4]
   c2586:	eeb1 7a47 	vneg.f32	s14, s14
   c258a:	eef1 7a67 	vneg.f32	s15, s15
   c258e:	ed85 7a00 	vstr	s14, [r5]
   c2592:	edc5 7a01 	vstr	s15, [r5, #4]
   c2596:	4240      	negs	r0, r0
   c2598:	e7b4      	b.n	c2504 <__ieee754_rem_pio2f+0x60>
   c259a:	2200      	movs	r2, #0
   c259c:	ed85 0a00 	vstr	s0, [r5]
   c25a0:	6042      	str	r2, [r0, #4]
   c25a2:	2000      	movs	r0, #0
   c25a4:	b006      	add	sp, #24
   c25a6:	bd70      	pop	{r4, r5, r6, pc}
   c25a8:	ee70 7a40 	vsub.f32	s15, s0, s0
   c25ac:	2000      	movs	r0, #0
   c25ae:	edc5 7a01 	vstr	s15, [r5, #4]
   c25b2:	edc5 7a00 	vstr	s15, [r5]
   c25b6:	e7a5      	b.n	c2504 <__ieee754_rem_pio2f+0x60>
   c25b8:	f000 ff32 	bl	c3420 <fabsf>
   c25bc:	ed9f 7a4e 	vldr	s14, [pc, #312]	; c26f8 <__ieee754_rem_pio2f+0x254>
   c25c0:	ed9f 6a45 	vldr	s12, [pc, #276]	; c26d8 <__ieee754_rem_pio2f+0x234>
   c25c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c25c8:	eee0 7a07 	vfma.f32	s15, s0, s14
   c25cc:	ed9f 7a45 	vldr	s14, [pc, #276]	; c26e4 <__ieee754_rem_pio2f+0x240>
   c25d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c25d4:	ee17 0a90 	vmov	r0, s15
   c25d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   c25dc:	281f      	cmp	r0, #31
   c25de:	eea6 0ac6 	vfms.f32	s0, s13, s12
   c25e2:	ee66 7a87 	vmul.f32	s15, s13, s14
   c25e6:	eeb1 6a66 	vneg.f32	s12, s13
   c25ea:	dc1e      	bgt.n	c262a <__ieee754_rem_pio2f+0x186>
   c25ec:	4a43      	ldr	r2, [pc, #268]	; (c26fc <__ieee754_rem_pio2f+0x258>)
   c25ee:	1e41      	subs	r1, r0, #1
   c25f0:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   c25f4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c25f8:	4293      	cmp	r3, r2
   c25fa:	d016      	beq.n	c262a <__ieee754_rem_pio2f+0x186>
   c25fc:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2600:	ed85 7a00 	vstr	s14, [r5]
   c2604:	ee30 0a47 	vsub.f32	s0, s0, s14
   c2608:	2e00      	cmp	r6, #0
   c260a:	ee30 0a67 	vsub.f32	s0, s0, s15
   c260e:	ed85 0a01 	vstr	s0, [r5, #4]
   c2612:	f6bf af77 	bge.w	c2504 <__ieee754_rem_pio2f+0x60>
   c2616:	eeb1 7a47 	vneg.f32	s14, s14
   c261a:	eeb1 0a40 	vneg.f32	s0, s0
   c261e:	ed85 7a00 	vstr	s14, [r5]
   c2622:	ed85 0a01 	vstr	s0, [r5, #4]
   c2626:	4240      	negs	r0, r0
   c2628:	e76c      	b.n	c2504 <__ieee754_rem_pio2f+0x60>
   c262a:	ee30 7a67 	vsub.f32	s14, s0, s15
   c262e:	15e2      	asrs	r2, r4, #23
   c2630:	ee17 3a10 	vmov	r3, s14
   c2634:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2638:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   c263c:	2c08      	cmp	r4, #8
   c263e:	dddf      	ble.n	c2600 <__ieee754_rem_pio2f+0x15c>
   c2640:	eddf 7a27 	vldr	s15, [pc, #156]	; c26e0 <__ieee754_rem_pio2f+0x23c>
   c2644:	ed9f 7a28 	vldr	s14, [pc, #160]	; c26e8 <__ieee754_rem_pio2f+0x244>
   c2648:	eef0 5a40 	vmov.f32	s11, s0
   c264c:	eee6 5a27 	vfma.f32	s11, s12, s15
   c2650:	ee30 0a65 	vsub.f32	s0, s0, s11
   c2654:	eea6 0a27 	vfma.f32	s0, s12, s15
   c2658:	eef0 7a40 	vmov.f32	s15, s0
   c265c:	eed6 7a87 	vfnms.f32	s15, s13, s14
   c2660:	ee35 7ae7 	vsub.f32	s14, s11, s15
   c2664:	ee17 3a10 	vmov	r3, s14
   c2668:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c266c:	1ad2      	subs	r2, r2, r3
   c266e:	2a19      	cmp	r2, #25
   c2670:	dc06      	bgt.n	c2680 <__ieee754_rem_pio2f+0x1dc>
   c2672:	eeb0 0a65 	vmov.f32	s0, s11
   c2676:	ed85 7a00 	vstr	s14, [r5]
   c267a:	e7c3      	b.n	c2604 <__ieee754_rem_pio2f+0x160>
   c267c:	2303      	movs	r3, #3
   c267e:	e774      	b.n	c256a <__ieee754_rem_pio2f+0xc6>
   c2680:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c2700 <__ieee754_rem_pio2f+0x25c>
   c2684:	ed9f 5a1f 	vldr	s10, [pc, #124]	; c2704 <__ieee754_rem_pio2f+0x260>
   c2688:	eeb0 0a65 	vmov.f32	s0, s11
   c268c:	eea6 0a07 	vfma.f32	s0, s12, s14
   c2690:	ee75 7ac0 	vsub.f32	s15, s11, s0
   c2694:	eee6 7a07 	vfma.f32	s15, s12, s14
   c2698:	eed6 7a85 	vfnms.f32	s15, s13, s10
   c269c:	e7ae      	b.n	c25fc <__ieee754_rem_pio2f+0x158>
   c269e:	4294      	cmp	r4, r2
   c26a0:	ee70 7a27 	vadd.f32	s15, s0, s15
   c26a4:	bf09      	itett	eq
   c26a6:	eddf 6a0e 	vldreq	s13, [pc, #56]	; c26e0 <__ieee754_rem_pio2f+0x23c>
   c26aa:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; c26e4 <__ieee754_rem_pio2f+0x240>
   c26ae:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; c26e8 <__ieee754_rem_pio2f+0x244>
   c26b2:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   c26b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c26ba:	ee77 6a87 	vadd.f32	s13, s15, s14
   c26be:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c26c2:	edc5 6a00 	vstr	s13, [r5]
   c26c6:	ee77 7a87 	vadd.f32	s15, s15, s14
   c26ca:	edc5 7a01 	vstr	s15, [r5, #4]
   c26ce:	e719      	b.n	c2504 <__ieee754_rem_pio2f+0x60>
   c26d0:	3f490fd8 	.word	0x3f490fd8
   c26d4:	4016cbe3 	.word	0x4016cbe3
   c26d8:	3fc90f80 	.word	0x3fc90f80
   c26dc:	3fc90fd0 	.word	0x3fc90fd0
   c26e0:	37354400 	.word	0x37354400
   c26e4:	37354443 	.word	0x37354443
   c26e8:	2e85a308 	.word	0x2e85a308
   c26ec:	43490f80 	.word	0x43490f80
   c26f0:	43800000 	.word	0x43800000
   c26f4:	000c7d00 	.word	0x000c7d00
   c26f8:	3f22f984 	.word	0x3f22f984
   c26fc:	000c7c80 	.word	0x000c7c80
   c2700:	2e85a300 	.word	0x2e85a300
   c2704:	248d3132 	.word	0x248d3132

000c2708 <__ieee754_sqrtf>:
   c2708:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c270c:	4770      	bx	lr
   c270e:	bf00      	nop

000c2710 <__kernel_cosf>:
   c2710:	ee10 3a10 	vmov	r3, s0
   c2714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2718:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c271c:	da2c      	bge.n	c2778 <__kernel_cosf+0x68>
   c271e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c2722:	ee17 3a90 	vmov	r3, s15
   c2726:	2b00      	cmp	r3, #0
   c2728:	d060      	beq.n	c27ec <__kernel_cosf+0xdc>
   c272a:	ee20 7a00 	vmul.f32	s14, s0, s0
   c272e:	eddf 7a31 	vldr	s15, [pc, #196]	; c27f4 <__kernel_cosf+0xe4>
   c2732:	ed9f 5a31 	vldr	s10, [pc, #196]	; c27f8 <__kernel_cosf+0xe8>
   c2736:	eddf 5a31 	vldr	s11, [pc, #196]	; c27fc <__kernel_cosf+0xec>
   c273a:	ed9f 6a31 	vldr	s12, [pc, #196]	; c2800 <__kernel_cosf+0xf0>
   c273e:	eddf 6a31 	vldr	s13, [pc, #196]	; c2804 <__kernel_cosf+0xf4>
   c2742:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2746:	eddf 7a30 	vldr	s15, [pc, #192]	; c2808 <__kernel_cosf+0xf8>
   c274a:	eee7 5a05 	vfma.f32	s11, s14, s10
   c274e:	eea7 6a25 	vfma.f32	s12, s14, s11
   c2752:	eee7 7a06 	vfma.f32	s15, s14, s12
   c2756:	eee7 6a27 	vfma.f32	s13, s14, s15
   c275a:	ee67 6a26 	vmul.f32	s13, s14, s13
   c275e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2762:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2766:	eee7 0a26 	vfma.f32	s1, s14, s13
   c276a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c276e:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c2772:	ee30 0a60 	vsub.f32	s0, s0, s1
   c2776:	4770      	bx	lr
   c2778:	ee20 7a00 	vmul.f32	s14, s0, s0
   c277c:	eddf 7a1d 	vldr	s15, [pc, #116]	; c27f4 <__kernel_cosf+0xe4>
   c2780:	ed9f 5a1d 	vldr	s10, [pc, #116]	; c27f8 <__kernel_cosf+0xe8>
   c2784:	eddf 5a1d 	vldr	s11, [pc, #116]	; c27fc <__kernel_cosf+0xec>
   c2788:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c2800 <__kernel_cosf+0xf0>
   c278c:	eddf 6a1d 	vldr	s13, [pc, #116]	; c2804 <__kernel_cosf+0xf4>
   c2790:	4a1e      	ldr	r2, [pc, #120]	; (c280c <__kernel_cosf+0xfc>)
   c2792:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2796:	4293      	cmp	r3, r2
   c2798:	eddf 7a1b 	vldr	s15, [pc, #108]	; c2808 <__kernel_cosf+0xf8>
   c279c:	eee5 5a07 	vfma.f32	s11, s10, s14
   c27a0:	eea5 6a87 	vfma.f32	s12, s11, s14
   c27a4:	eee6 7a07 	vfma.f32	s15, s12, s14
   c27a8:	eee7 6a87 	vfma.f32	s13, s15, s14
   c27ac:	ee66 6a87 	vmul.f32	s13, s13, s14
   c27b0:	ddd5      	ble.n	c275e <__kernel_cosf+0x4e>
   c27b2:	4a17      	ldr	r2, [pc, #92]	; (c2810 <__kernel_cosf+0x100>)
   c27b4:	4293      	cmp	r3, r2
   c27b6:	dc14      	bgt.n	c27e2 <__kernel_cosf+0xd2>
   c27b8:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   c27bc:	ee07 3a90 	vmov	s15, r3
   c27c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   c27c4:	ee36 6a67 	vsub.f32	s12, s12, s15
   c27c8:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c27cc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   c27d0:	eed7 7a25 	vfnms.f32	s15, s14, s11
   c27d4:	eee7 0a26 	vfma.f32	s1, s14, s13
   c27d8:	ee77 0ae0 	vsub.f32	s1, s15, s1
   c27dc:	ee36 0a60 	vsub.f32	s0, s12, s1
   c27e0:	4770      	bx	lr
   c27e2:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   c27e6:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   c27ea:	e7ed      	b.n	c27c8 <__kernel_cosf+0xb8>
   c27ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c27f0:	4770      	bx	lr
   c27f2:	bf00      	nop
   c27f4:	ad47d74e 	.word	0xad47d74e
   c27f8:	310f74f6 	.word	0x310f74f6
   c27fc:	b493f27c 	.word	0xb493f27c
   c2800:	37d00d01 	.word	0x37d00d01
   c2804:	3d2aaaab 	.word	0x3d2aaaab
   c2808:	bab60b61 	.word	0xbab60b61
   c280c:	3e999999 	.word	0x3e999999
   c2810:	3f480000 	.word	0x3f480000

000c2814 <__kernel_rem_pio2f>:
   c2814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2818:	ed2d 8b04 	vpush	{d8-d9}
   c281c:	b0db      	sub	sp, #364	; 0x16c
   c281e:	461c      	mov	r4, r3
   c2820:	9303      	str	r3, [sp, #12]
   c2822:	9106      	str	r1, [sp, #24]
   c2824:	4ba3      	ldr	r3, [pc, #652]	; (c2ab4 <__kernel_rem_pio2f+0x2a0>)
   c2826:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2828:	9208      	str	r2, [sp, #32]
   c282a:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   c282e:	1d11      	adds	r1, r2, #4
   c2830:	4682      	mov	sl, r0
   c2832:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   c2836:	f2c0 82a2 	blt.w	c2d7e <__kernel_rem_pio2f+0x56a>
   c283a:	1ed3      	subs	r3, r2, #3
   c283c:	bf44      	itt	mi
   c283e:	4613      	movmi	r3, r2
   c2840:	3304      	addmi	r3, #4
   c2842:	10db      	asrs	r3, r3, #3
   c2844:	9302      	str	r3, [sp, #8]
   c2846:	3301      	adds	r3, #1
   c2848:	00db      	lsls	r3, r3, #3
   c284a:	9307      	str	r3, [sp, #28]
   c284c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   c2850:	1a9b      	subs	r3, r3, r2
   c2852:	9305      	str	r3, [sp, #20]
   c2854:	9b02      	ldr	r3, [sp, #8]
   c2856:	eb15 0108 	adds.w	r1, r5, r8
   c285a:	eba3 0308 	sub.w	r3, r3, r8
   c285e:	d416      	bmi.n	c288e <__kernel_rem_pio2f+0x7a>
   c2860:	3101      	adds	r1, #1
   c2862:	ed9f 7a95 	vldr	s14, [pc, #596]	; c2ab8 <__kernel_rem_pio2f+0x2a4>
   c2866:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   c2868:	4419      	add	r1, r3
   c286a:	aa1e      	add	r2, sp, #120	; 0x78
   c286c:	2b00      	cmp	r3, #0
   c286e:	bfa4      	itt	ge
   c2870:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   c2874:	ee07 4a90 	vmovge	s15, r4
   c2878:	f103 0301 	add.w	r3, r3, #1
   c287c:	bfac      	ite	ge
   c287e:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   c2882:	eef0 7a47 	vmovlt.f32	s15, s14
   c2886:	428b      	cmp	r3, r1
   c2888:	ece2 7a01 	vstmia	r2!, {s15}
   c288c:	d1ee      	bne.n	c286c <__kernel_rem_pio2f+0x58>
   c288e:	2d00      	cmp	r5, #0
   c2890:	f2c0 82e5 	blt.w	c2e5e <__kernel_rem_pio2f+0x64a>
   c2894:	9b03      	ldr	r3, [sp, #12]
   c2896:	a91e      	add	r1, sp, #120	; 0x78
   c2898:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   c289c:	ae46      	add	r6, sp, #280	; 0x118
   c289e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c28a2:	4640      	mov	r0, r8
   c28a4:	18ef      	adds	r7, r5, r3
   c28a6:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   c28aa:	f1b8 0f00 	cmp.w	r8, #0
   c28ae:	eddf 7a82 	vldr	s15, [pc, #520]	; c2ab8 <__kernel_rem_pio2f+0x2a4>
   c28b2:	db09      	blt.n	c28c8 <__kernel_rem_pio2f+0xb4>
   c28b4:	4622      	mov	r2, r4
   c28b6:	4653      	mov	r3, sl
   c28b8:	ecf3 6a01 	vldmia	r3!, {s13}
   c28bc:	ed32 7a01 	vldmdb	r2!, {s14}
   c28c0:	428b      	cmp	r3, r1
   c28c2:	eee6 7a87 	vfma.f32	s15, s13, s14
   c28c6:	d1f7      	bne.n	c28b8 <__kernel_rem_pio2f+0xa4>
   c28c8:	3001      	adds	r0, #1
   c28ca:	42b8      	cmp	r0, r7
   c28cc:	ece6 7a01 	vstmia	r6!, {s15}
   c28d0:	f104 0404 	add.w	r4, r4, #4
   c28d4:	d1e9      	bne.n	c28aa <__kernel_rem_pio2f+0x96>
   c28d6:	ab09      	add	r3, sp, #36	; 0x24
   c28d8:	af0a      	add	r7, sp, #40	; 0x28
   c28da:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   c28de:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   c28e2:	3b08      	subs	r3, #8
   c28e4:	ed9f 9a76 	vldr	s18, [pc, #472]	; c2ac0 <__kernel_rem_pio2f+0x2ac>
   c28e8:	eddf 8a74 	vldr	s17, [pc, #464]	; c2abc <__kernel_rem_pio2f+0x2a8>
   c28ec:	9805      	ldr	r0, [sp, #20]
   c28ee:	9304      	str	r3, [sp, #16]
   c28f0:	eb0a 040c 	add.w	r4, sl, ip
   c28f4:	ae46      	add	r6, sp, #280	; 0x118
   c28f6:	9500      	str	r5, [sp, #0]
   c28f8:	ab5a      	add	r3, sp, #360	; 0x168
   c28fa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   c28fe:	2d00      	cmp	r5, #0
   c2900:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   c2904:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   c2908:	dd16      	ble.n	c2938 <__kernel_rem_pio2f+0x124>
   c290a:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   c290e:	463a      	mov	r2, r7
   c2910:	ee60 7a09 	vmul.f32	s15, s0, s18
   c2914:	eeb0 7a40 	vmov.f32	s14, s0
   c2918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c291c:	ed73 6a01 	vldmdb	r3!, {s13}
   c2920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2924:	42b3      	cmp	r3, r6
   c2926:	eea7 7ae8 	vfms.f32	s14, s15, s17
   c292a:	ee37 0aa6 	vadd.f32	s0, s15, s13
   c292e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   c2932:	eca2 7a01 	vstmia	r2!, {s14}
   c2936:	d1eb      	bne.n	c2910 <__kernel_rem_pio2f+0xfc>
   c2938:	9001      	str	r0, [sp, #4]
   c293a:	f000 fdbf 	bl	c34bc <scalbnf>
   c293e:	eeb0 8a40 	vmov.f32	s16, s0
   c2942:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   c2946:	ee28 0a00 	vmul.f32	s0, s16, s0
   c294a:	f000 fd71 	bl	c3430 <floorf>
   c294e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   c2952:	eea0 8a67 	vfms.f32	s16, s0, s15
   c2956:	9801      	ldr	r0, [sp, #4]
   c2958:	2800      	cmp	r0, #0
   c295a:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   c295e:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   c2962:	ee38 8a67 	vsub.f32	s16, s16, s15
   c2966:	dd79      	ble.n	c2a5c <__kernel_rem_pio2f+0x248>
   c2968:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
   c296c:	f1c0 0308 	rsb	r3, r0, #8
   c2970:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   c2974:	fa41 fc03 	asr.w	ip, r1, r3
   c2978:	fa0c f303 	lsl.w	r3, ip, r3
   c297c:	1acb      	subs	r3, r1, r3
   c297e:	f1c0 0207 	rsb	r2, r0, #7
   c2982:	ee19 1a90 	vmov	r1, s19
   c2986:	fa43 f202 	asr.w	r2, r3, r2
   c298a:	4461      	add	r1, ip
   c298c:	2a00      	cmp	r2, #0
   c298e:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   c2992:	ee09 1a90 	vmov	s19, r1
   c2996:	dc69      	bgt.n	c2a6c <__kernel_rem_pio2f+0x258>
   c2998:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c299c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c29a0:	f040 80c1 	bne.w	c2b26 <__kernel_rem_pio2f+0x312>
   c29a4:	9b00      	ldr	r3, [sp, #0]
   c29a6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   c29aa:	455b      	cmp	r3, fp
   c29ac:	dc10      	bgt.n	c29d0 <__kernel_rem_pio2f+0x1bc>
   c29ae:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   c29b2:	3b01      	subs	r3, #1
   c29b4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c29b8:	2100      	movs	r1, #0
   c29ba:	4694      	mov	ip, r2
   c29bc:	f853 2904 	ldr.w	r2, [r3], #-4
   c29c0:	454b      	cmp	r3, r9
   c29c2:	ea41 0102 	orr.w	r1, r1, r2
   c29c6:	d1f9      	bne.n	c29bc <__kernel_rem_pio2f+0x1a8>
   c29c8:	4662      	mov	r2, ip
   c29ca:	2900      	cmp	r1, #0
   c29cc:	f040 80f3 	bne.w	c2bb6 <__kernel_rem_pio2f+0x3a2>
   c29d0:	9b00      	ldr	r3, [sp, #0]
   c29d2:	3b01      	subs	r3, #1
   c29d4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   c29d8:	2b00      	cmp	r3, #0
   c29da:	f040 80e8 	bne.w	c2bae <__kernel_rem_pio2f+0x39a>
   c29de:	9b04      	ldr	r3, [sp, #16]
   c29e0:	f04f 0c01 	mov.w	ip, #1
   c29e4:	f853 2904 	ldr.w	r2, [r3], #-4
   c29e8:	f10c 0c01 	add.w	ip, ip, #1
   c29ec:	2a00      	cmp	r2, #0
   c29ee:	d0f9      	beq.n	c29e4 <__kernel_rem_pio2f+0x1d0>
   c29f0:	1c6b      	adds	r3, r5, #1
   c29f2:	44ac      	add	ip, r5
   c29f4:	469e      	mov	lr, r3
   c29f6:	9a03      	ldr	r2, [sp, #12]
   c29f8:	1951      	adds	r1, r2, r5
   c29fa:	9a02      	ldr	r2, [sp, #8]
   c29fc:	eb02 0b03 	add.w	fp, r2, r3
   c2a00:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2a04:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   c2a06:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c2a0a:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   c2a0e:	ab1e      	add	r3, sp, #120	; 0x78
   c2a10:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   c2a14:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   c2a18:	eddb 7a01 	vldr	s15, [fp, #4]
   c2a1c:	ed9f 7a26 	vldr	s14, [pc, #152]	; c2ab8 <__kernel_rem_pio2f+0x2a4>
   c2a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2a24:	f1b8 0f00 	cmp.w	r8, #0
   c2a28:	f10b 0b04 	add.w	fp, fp, #4
   c2a2c:	edc1 7a00 	vstr	s15, [r1]
   c2a30:	460a      	mov	r2, r1
   c2a32:	f101 0104 	add.w	r1, r1, #4
   c2a36:	db09      	blt.n	c2a4c <__kernel_rem_pio2f+0x238>
   c2a38:	4653      	mov	r3, sl
   c2a3a:	e001      	b.n	c2a40 <__kernel_rem_pio2f+0x22c>
   c2a3c:	ed72 7a01 	vldmdb	r2!, {s15}
   c2a40:	ecf3 6a01 	vldmia	r3!, {s13}
   c2a44:	42a3      	cmp	r3, r4
   c2a46:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c2a4a:	d1f7      	bne.n	c2a3c <__kernel_rem_pio2f+0x228>
   c2a4c:	f10e 0e01 	add.w	lr, lr, #1
   c2a50:	45e6      	cmp	lr, ip
   c2a52:	eca5 7a01 	vstmia	r5!, {s14}
   c2a56:	dddf      	ble.n	c2a18 <__kernel_rem_pio2f+0x204>
   c2a58:	4665      	mov	r5, ip
   c2a5a:	e74d      	b.n	c28f8 <__kernel_rem_pio2f+0xe4>
   c2a5c:	f040 809d 	bne.w	c2b9a <__kernel_rem_pio2f+0x386>
   c2a60:	1e6b      	subs	r3, r5, #1
   c2a62:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   c2a66:	1212      	asrs	r2, r2, #8
   c2a68:	2a00      	cmp	r2, #0
   c2a6a:	dd95      	ble.n	c2998 <__kernel_rem_pio2f+0x184>
   c2a6c:	ee19 3a90 	vmov	r3, s19
   c2a70:	2d00      	cmp	r5, #0
   c2a72:	f103 0301 	add.w	r3, r3, #1
   c2a76:	ee09 3a90 	vmov	s19, r3
   c2a7a:	f340 8196 	ble.w	c2daa <__kernel_rem_pio2f+0x596>
   c2a7e:	6839      	ldr	r1, [r7, #0]
   c2a80:	2900      	cmp	r1, #0
   c2a82:	f040 8080 	bne.w	c2b86 <__kernel_rem_pio2f+0x372>
   c2a86:	2d01      	cmp	r5, #1
   c2a88:	d026      	beq.n	c2ad8 <__kernel_rem_pio2f+0x2c4>
   c2a8a:	463b      	mov	r3, r7
   c2a8c:	f04f 0c01 	mov.w	ip, #1
   c2a90:	f853 1f04 	ldr.w	r1, [r3, #4]!
   c2a94:	2900      	cmp	r1, #0
   c2a96:	d07a      	beq.n	c2b8e <__kernel_rem_pio2f+0x37a>
   c2a98:	f10c 0301 	add.w	r3, ip, #1
   c2a9c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   c2aa0:	429d      	cmp	r5, r3
   c2aa2:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   c2aa6:	dd16      	ble.n	c2ad6 <__kernel_rem_pio2f+0x2c2>
   c2aa8:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   c2aac:	44bb      	add	fp, r7
   c2aae:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2ab2:	e00a      	b.n	c2aca <__kernel_rem_pio2f+0x2b6>
   c2ab4:	000c8044 	.word	0x000c8044
   c2ab8:	00000000 	.word	0x00000000
   c2abc:	43800000 	.word	0x43800000
   c2ac0:	3b800000 	.word	0x3b800000
   c2ac4:	3fc90000 	.word	0x3fc90000
   c2ac8:	6819      	ldr	r1, [r3, #0]
   c2aca:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   c2ace:	f843 1b04 	str.w	r1, [r3], #4
   c2ad2:	455b      	cmp	r3, fp
   c2ad4:	d1f8      	bne.n	c2ac8 <__kernel_rem_pio2f+0x2b4>
   c2ad6:	2101      	movs	r1, #1
   c2ad8:	2800      	cmp	r0, #0
   c2ada:	dd0c      	ble.n	c2af6 <__kernel_rem_pio2f+0x2e2>
   c2adc:	2801      	cmp	r0, #1
   c2ade:	f000 8145 	beq.w	c2d6c <__kernel_rem_pio2f+0x558>
   c2ae2:	2802      	cmp	r0, #2
   c2ae4:	d107      	bne.n	c2af6 <__kernel_rem_pio2f+0x2e2>
   c2ae6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c2aea:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c2aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   c2af2:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c2af6:	2a02      	cmp	r2, #2
   c2af8:	f47f af4e 	bne.w	c2998 <__kernel_rem_pio2f+0x184>
   c2afc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2b00:	ee30 8a48 	vsub.f32	s16, s0, s16
   c2b04:	2900      	cmp	r1, #0
   c2b06:	f43f af47 	beq.w	c2998 <__kernel_rem_pio2f+0x184>
   c2b0a:	9209      	str	r2, [sp, #36]	; 0x24
   c2b0c:	9001      	str	r0, [sp, #4]
   c2b0e:	f000 fcd5 	bl	c34bc <scalbnf>
   c2b12:	ee38 8a40 	vsub.f32	s16, s16, s0
   c2b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c2b18:	9801      	ldr	r0, [sp, #4]
   c2b1a:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c2b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2b22:	f43f af3f 	beq.w	c29a4 <__kernel_rem_pio2f+0x190>
   c2b26:	9202      	str	r2, [sp, #8]
   c2b28:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   c2b2c:	eeb0 0a48 	vmov.f32	s0, s16
   c2b30:	1a98      	subs	r0, r3, r2
   c2b32:	9501      	str	r5, [sp, #4]
   c2b34:	9d00      	ldr	r5, [sp, #0]
   c2b36:	f000 fcc1 	bl	c34bc <scalbnf>
   c2b3a:	ed1f 7a20 	vldr	s14, [pc, #-128]	; c2abc <__kernel_rem_pio2f+0x2a8>
   c2b3e:	eeb4 0ac7 	vcmpe.f32	s0, s14
   c2b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2b46:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   c2b4a:	f2c0 8156 	blt.w	c2dfa <__kernel_rem_pio2f+0x5e6>
   c2b4e:	ed5f 7a24 	vldr	s15, [pc, #-144]	; c2ac0 <__kernel_rem_pio2f+0x2ac>
   c2b52:	9905      	ldr	r1, [sp, #20]
   c2b54:	ee60 7a27 	vmul.f32	s15, s0, s15
   c2b58:	3108      	adds	r1, #8
   c2b5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2b5e:	9105      	str	r1, [sp, #20]
   c2b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2b64:	f103 0b01 	add.w	fp, r3, #1
   c2b68:	eea7 0ac7 	vfms.f32	s0, s15, s14
   c2b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2b70:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c2b74:	ee10 1a10 	vmov	r1, s0
   c2b78:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c2b7c:	ee17 3a90 	vmov	r3, s15
   c2b80:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   c2b84:	e02e      	b.n	c2be4 <__kernel_rem_pio2f+0x3d0>
   c2b86:	2301      	movs	r3, #1
   c2b88:	f04f 0c00 	mov.w	ip, #0
   c2b8c:	e786      	b.n	c2a9c <__kernel_rem_pio2f+0x288>
   c2b8e:	f10c 0c01 	add.w	ip, ip, #1
   c2b92:	45ac      	cmp	ip, r5
   c2b94:	f47f af7c 	bne.w	c2a90 <__kernel_rem_pio2f+0x27c>
   c2b98:	e79e      	b.n	c2ad8 <__kernel_rem_pio2f+0x2c4>
   c2b9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2b9e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c2ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2ba6:	f280 80ef 	bge.w	c2d88 <__kernel_rem_pio2f+0x574>
   c2baa:	2200      	movs	r2, #0
   c2bac:	e6f4      	b.n	c2998 <__kernel_rem_pio2f+0x184>
   c2bae:	1c6b      	adds	r3, r5, #1
   c2bb0:	469e      	mov	lr, r3
   c2bb2:	469c      	mov	ip, r3
   c2bb4:	e71f      	b.n	c29f6 <__kernel_rem_pio2f+0x1e2>
   c2bb6:	9905      	ldr	r1, [sp, #20]
   c2bb8:	f1a1 0008 	sub.w	r0, r1, #8
   c2bbc:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   c2bc0:	9005      	str	r0, [sp, #20]
   c2bc2:	462b      	mov	r3, r5
   c2bc4:	9d00      	ldr	r5, [sp, #0]
   c2bc6:	b969      	cbnz	r1, c2be4 <__kernel_rem_pio2f+0x3d0>
   c2bc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c2bcc:	3b02      	subs	r3, #2
   c2bce:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2bd2:	4601      	mov	r1, r0
   c2bd4:	f853 0904 	ldr.w	r0, [r3], #-4
   c2bd8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c2bdc:	3908      	subs	r1, #8
   c2bde:	2800      	cmp	r0, #0
   c2be0:	d0f8      	beq.n	c2bd4 <__kernel_rem_pio2f+0x3c0>
   c2be2:	9105      	str	r1, [sp, #20]
   c2be4:	9805      	ldr	r0, [sp, #20]
   c2be6:	9200      	str	r2, [sp, #0]
   c2be8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2bec:	f000 fc66 	bl	c34bc <scalbnf>
   c2bf0:	f1bb 0f00 	cmp.w	fp, #0
   c2bf4:	9a00      	ldr	r2, [sp, #0]
   c2bf6:	f2c0 8125 	blt.w	c2e44 <__kernel_rem_pio2f+0x630>
   c2bfa:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   c2bfe:	ab46      	add	r3, sp, #280	; 0x118
   c2c00:	eb03 060e 	add.w	r6, r3, lr
   c2c04:	f10e 0c04 	add.w	ip, lr, #4
   c2c08:	ed1f 7a53 	vldr	s14, [pc, #-332]	; c2ac0 <__kernel_rem_pio2f+0x2ac>
   c2c0c:	eb07 030c 	add.w	r3, r7, ip
   c2c10:	1d31      	adds	r1, r6, #4
   c2c12:	ed73 7a01 	vldmdb	r3!, {s15}
   c2c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2c1a:	42bb      	cmp	r3, r7
   c2c1c:	ee67 7a80 	vmul.f32	s15, s15, s0
   c2c20:	ee20 0a07 	vmul.f32	s0, s0, s14
   c2c24:	ed61 7a01 	vstmdb	r1!, {s15}
   c2c28:	d1f3      	bne.n	c2c12 <__kernel_rem_pio2f+0x3fe>
   c2c2a:	2d00      	cmp	r5, #0
   c2c2c:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; c2ac4 <__kernel_rem_pio2f+0x2b0>
   c2c30:	f04f 0400 	mov.w	r4, #0
   c2c34:	db20      	blt.n	c2c78 <__kernel_rem_pio2f+0x464>
   c2c36:	4892      	ldr	r0, [pc, #584]	; (c2e80 <__kernel_rem_pio2f+0x66c>)
   c2c38:	eddf 7a92 	vldr	s15, [pc, #584]	; c2e84 <__kernel_rem_pio2f+0x670>
   c2c3c:	eeb0 7a46 	vmov.f32	s14, s12
   c2c40:	4631      	mov	r1, r6
   c2c42:	2300      	movs	r3, #0
   c2c44:	e003      	b.n	c2c4e <__kernel_rem_pio2f+0x43a>
   c2c46:	429c      	cmp	r4, r3
   c2c48:	db08      	blt.n	c2c5c <__kernel_rem_pio2f+0x448>
   c2c4a:	ecb0 7a01 	vldmia	r0!, {s14}
   c2c4e:	ecf1 6a01 	vldmia	r1!, {s13}
   c2c52:	3301      	adds	r3, #1
   c2c54:	429d      	cmp	r5, r3
   c2c56:	eee6 7a87 	vfma.f32	s15, s13, s14
   c2c5a:	daf4      	bge.n	c2c46 <__kernel_rem_pio2f+0x432>
   c2c5c:	ab5a      	add	r3, sp, #360	; 0x168
   c2c5e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   c2c62:	45a3      	cmp	fp, r4
   c2c64:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   c2c68:	f1a6 0604 	sub.w	r6, r6, #4
   c2c6c:	f104 0301 	add.w	r3, r4, #1
   c2c70:	d005      	beq.n	c2c7e <__kernel_rem_pio2f+0x46a>
   c2c72:	2d00      	cmp	r5, #0
   c2c74:	461c      	mov	r4, r3
   c2c76:	dade      	bge.n	c2c36 <__kernel_rem_pio2f+0x422>
   c2c78:	eddf 7a82 	vldr	s15, [pc, #520]	; c2e84 <__kernel_rem_pio2f+0x670>
   c2c7c:	e7ee      	b.n	c2c5c <__kernel_rem_pio2f+0x448>
   c2c7e:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2c80:	2902      	cmp	r1, #2
   c2c82:	dc1c      	bgt.n	c2cbe <__kernel_rem_pio2f+0x4aa>
   c2c84:	2900      	cmp	r1, #0
   c2c86:	f300 8092 	bgt.w	c2dae <__kernel_rem_pio2f+0x59a>
   c2c8a:	d10f      	bne.n	c2cac <__kernel_rem_pio2f+0x498>
   c2c8c:	ab32      	add	r3, sp, #200	; 0xc8
   c2c8e:	eddf 7a7d 	vldr	s15, [pc, #500]	; c2e84 <__kernel_rem_pio2f+0x670>
   c2c92:	449c      	add	ip, r3
   c2c94:	ed3c 7a01 	vldmdb	ip!, {s14}
   c2c98:	4563      	cmp	r3, ip
   c2c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2c9e:	d1f9      	bne.n	c2c94 <__kernel_rem_pio2f+0x480>
   c2ca0:	b10a      	cbz	r2, c2ca6 <__kernel_rem_pio2f+0x492>
   c2ca2:	eef1 7a67 	vneg.f32	s15, s15
   c2ca6:	9b06      	ldr	r3, [sp, #24]
   c2ca8:	edc3 7a00 	vstr	s15, [r3]
   c2cac:	ee19 3a90 	vmov	r3, s19
   c2cb0:	f003 0007 	and.w	r0, r3, #7
   c2cb4:	b05b      	add	sp, #364	; 0x16c
   c2cb6:	ecbd 8b04 	vpop	{d8-d9}
   c2cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2cbe:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c2cc0:	2b03      	cmp	r3, #3
   c2cc2:	d1f3      	bne.n	c2cac <__kernel_rem_pio2f+0x498>
   c2cc4:	f1bb 0f00 	cmp.w	fp, #0
   c2cc8:	f000 80d1 	beq.w	c2e6e <__kernel_rem_pio2f+0x65a>
   c2ccc:	ab5a      	add	r3, sp, #360	; 0x168
   c2cce:	4473      	add	r3, lr
   c2cd0:	a932      	add	r1, sp, #200	; 0xc8
   c2cd2:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   c2cd6:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   c2cda:	ed73 7a01 	vldmdb	r3!, {s15}
   c2cde:	eef0 6a47 	vmov.f32	s13, s14
   c2ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
   c2ce6:	4299      	cmp	r1, r3
   c2ce8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2cec:	ed83 7a00 	vstr	s14, [r3]
   c2cf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c2cf4:	edc3 7a01 	vstr	s15, [r3, #4]
   c2cf8:	d1ef      	bne.n	c2cda <__kernel_rem_pio2f+0x4c6>
   c2cfa:	f1bb 0f01 	cmp.w	fp, #1
   c2cfe:	f340 80b6 	ble.w	c2e6e <__kernel_rem_pio2f+0x65a>
   c2d02:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2d06:	ab5a      	add	r3, sp, #360	; 0x168
   c2d08:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c2d0c:	449e      	add	lr, r3
   c2d0e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   c2d12:	f10b 0304 	add.w	r3, fp, #4
   c2d16:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   c2d1a:	440b      	add	r3, r1
   c2d1c:	a833      	add	r0, sp, #204	; 0xcc
   c2d1e:	ed73 7a01 	vldmdb	r3!, {s15}
   c2d22:	eef0 6a47 	vmov.f32	s13, s14
   c2d26:	ee37 7a27 	vadd.f32	s14, s14, s15
   c2d2a:	4298      	cmp	r0, r3
   c2d2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2d30:	ed83 7a00 	vstr	s14, [r3]
   c2d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c2d38:	edc3 7a01 	vstr	s15, [r3, #4]
   c2d3c:	d1ef      	bne.n	c2d1e <__kernel_rem_pio2f+0x50a>
   c2d3e:	f10b 0b08 	add.w	fp, fp, #8
   c2d42:	eddf 7a50 	vldr	s15, [pc, #320]	; c2e84 <__kernel_rem_pio2f+0x670>
   c2d46:	eb01 030b 	add.w	r3, r1, fp
   c2d4a:	3108      	adds	r1, #8
   c2d4c:	ed33 7a01 	vldmdb	r3!, {s14}
   c2d50:	4299      	cmp	r1, r3
   c2d52:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2d56:	d1f9      	bne.n	c2d4c <__kernel_rem_pio2f+0x538>
   c2d58:	2a00      	cmp	r2, #0
   c2d5a:	d156      	bne.n	c2e0a <__kernel_rem_pio2f+0x5f6>
   c2d5c:	9906      	ldr	r1, [sp, #24]
   c2d5e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   c2d60:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   c2d62:	600a      	str	r2, [r1, #0]
   c2d64:	604b      	str	r3, [r1, #4]
   c2d66:	edc1 7a02 	vstr	s15, [r1, #8]
   c2d6a:	e79f      	b.n	c2cac <__kernel_rem_pio2f+0x498>
   c2d6c:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c2d70:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c2d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   c2d78:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c2d7c:	e6bb      	b.n	c2af6 <__kernel_rem_pio2f+0x2e2>
   c2d7e:	2308      	movs	r3, #8
   c2d80:	9307      	str	r3, [sp, #28]
   c2d82:	2300      	movs	r3, #0
   c2d84:	9302      	str	r3, [sp, #8]
   c2d86:	e561      	b.n	c284c <__kernel_rem_pio2f+0x38>
   c2d88:	ee19 3a90 	vmov	r3, s19
   c2d8c:	2d00      	cmp	r5, #0
   c2d8e:	f103 0301 	add.w	r3, r3, #1
   c2d92:	ee09 3a90 	vmov	s19, r3
   c2d96:	bfc8      	it	gt
   c2d98:	2202      	movgt	r2, #2
   c2d9a:	f73f ae70 	bgt.w	c2a7e <__kernel_rem_pio2f+0x26a>
   c2d9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c2da2:	ee37 8ac8 	vsub.f32	s16, s15, s16
   c2da6:	2202      	movs	r2, #2
   c2da8:	e5f6      	b.n	c2998 <__kernel_rem_pio2f+0x184>
   c2daa:	2100      	movs	r1, #0
   c2dac:	e694      	b.n	c2ad8 <__kernel_rem_pio2f+0x2c4>
   c2dae:	a932      	add	r1, sp, #200	; 0xc8
   c2db0:	eddf 7a34 	vldr	s15, [pc, #208]	; c2e84 <__kernel_rem_pio2f+0x670>
   c2db4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c2db8:	ed33 7a01 	vldmdb	r3!, {s14}
   c2dbc:	4299      	cmp	r1, r3
   c2dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2dc2:	d1f9      	bne.n	c2db8 <__kernel_rem_pio2f+0x5a4>
   c2dc4:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   c2dc8:	bb8a      	cbnz	r2, c2e2e <__kernel_rem_pio2f+0x61a>
   c2dca:	9b06      	ldr	r3, [sp, #24]
   c2dcc:	f1bb 0f00 	cmp.w	fp, #0
   c2dd0:	edc3 7a00 	vstr	s15, [r3]
   c2dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
   c2dd8:	dd0b      	ble.n	c2df2 <__kernel_rem_pio2f+0x5de>
   c2dda:	a933      	add	r1, sp, #204	; 0xcc
   c2ddc:	2301      	movs	r3, #1
   c2dde:	ecb1 7a01 	vldmia	r1!, {s14}
   c2de2:	3301      	adds	r3, #1
   c2de4:	459b      	cmp	fp, r3
   c2de6:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2dea:	daf8      	bge.n	c2dde <__kernel_rem_pio2f+0x5ca>
   c2dec:	b10a      	cbz	r2, c2df2 <__kernel_rem_pio2f+0x5de>
   c2dee:	eef1 7a67 	vneg.f32	s15, s15
   c2df2:	9b06      	ldr	r3, [sp, #24]
   c2df4:	edc3 7a01 	vstr	s15, [r3, #4]
   c2df8:	e758      	b.n	c2cac <__kernel_rem_pio2f+0x498>
   c2dfa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c2dfe:	469b      	mov	fp, r3
   c2e00:	ee10 1a10 	vmov	r1, s0
   c2e04:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c2e08:	e6ec      	b.n	c2be4 <__kernel_rem_pio2f+0x3d0>
   c2e0a:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   c2e0e:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   c2e12:	9b06      	ldr	r3, [sp, #24]
   c2e14:	eef1 6a66 	vneg.f32	s13, s13
   c2e18:	eeb1 7a47 	vneg.f32	s14, s14
   c2e1c:	eef1 7a67 	vneg.f32	s15, s15
   c2e20:	edc3 6a00 	vstr	s13, [r3]
   c2e24:	ed83 7a01 	vstr	s14, [r3, #4]
   c2e28:	edc3 7a02 	vstr	s15, [r3, #8]
   c2e2c:	e73e      	b.n	c2cac <__kernel_rem_pio2f+0x498>
   c2e2e:	9b06      	ldr	r3, [sp, #24]
   c2e30:	eef1 6a67 	vneg.f32	s13, s15
   c2e34:	f1bb 0f00 	cmp.w	fp, #0
   c2e38:	ee77 7a67 	vsub.f32	s15, s14, s15
   c2e3c:	edc3 6a00 	vstr	s13, [r3]
   c2e40:	dccb      	bgt.n	c2dda <__kernel_rem_pio2f+0x5c6>
   c2e42:	e7d4      	b.n	c2dee <__kernel_rem_pio2f+0x5da>
   c2e44:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c2e46:	2b02      	cmp	r3, #2
   c2e48:	dc0d      	bgt.n	c2e66 <__kernel_rem_pio2f+0x652>
   c2e4a:	2b00      	cmp	r3, #0
   c2e4c:	dc14      	bgt.n	c2e78 <__kernel_rem_pio2f+0x664>
   c2e4e:	f47f af2d 	bne.w	c2cac <__kernel_rem_pio2f+0x498>
   c2e52:	eddf 7a0c 	vldr	s15, [pc, #48]	; c2e84 <__kernel_rem_pio2f+0x670>
   c2e56:	2a00      	cmp	r2, #0
   c2e58:	f43f af25 	beq.w	c2ca6 <__kernel_rem_pio2f+0x492>
   c2e5c:	e721      	b.n	c2ca2 <__kernel_rem_pio2f+0x48e>
   c2e5e:	9b03      	ldr	r3, [sp, #12]
   c2e60:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c2e64:	e537      	b.n	c28d6 <__kernel_rem_pio2f+0xc2>
   c2e66:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c2e68:	2b03      	cmp	r3, #3
   c2e6a:	f47f af1f 	bne.w	c2cac <__kernel_rem_pio2f+0x498>
   c2e6e:	eddf 7a05 	vldr	s15, [pc, #20]	; c2e84 <__kernel_rem_pio2f+0x670>
   c2e72:	2a00      	cmp	r2, #0
   c2e74:	d1c9      	bne.n	c2e0a <__kernel_rem_pio2f+0x5f6>
   c2e76:	e771      	b.n	c2d5c <__kernel_rem_pio2f+0x548>
   c2e78:	eddf 7a02 	vldr	s15, [pc, #8]	; c2e84 <__kernel_rem_pio2f+0x670>
   c2e7c:	e7a2      	b.n	c2dc4 <__kernel_rem_pio2f+0x5b0>
   c2e7e:	bf00      	nop
   c2e80:	000c801c 	.word	0x000c801c
   c2e84:	00000000 	.word	0x00000000

000c2e88 <__kernel_sinf>:
   c2e88:	ee10 3a10 	vmov	r3, s0
   c2e8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2e90:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c2e94:	da04      	bge.n	c2ea0 <__kernel_sinf+0x18>
   c2e96:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c2e9a:	ee17 3a90 	vmov	r3, s15
   c2e9e:	b35b      	cbz	r3, c2ef8 <__kernel_sinf+0x70>
   c2ea0:	ee60 7a00 	vmul.f32	s15, s0, s0
   c2ea4:	ed9f 7a15 	vldr	s14, [pc, #84]	; c2efc <__kernel_sinf+0x74>
   c2ea8:	eddf 5a15 	vldr	s11, [pc, #84]	; c2f00 <__kernel_sinf+0x78>
   c2eac:	ed9f 6a15 	vldr	s12, [pc, #84]	; c2f04 <__kernel_sinf+0x7c>
   c2eb0:	eddf 6a15 	vldr	s13, [pc, #84]	; c2f08 <__kernel_sinf+0x80>
   c2eb4:	eee7 5a87 	vfma.f32	s11, s15, s14
   c2eb8:	ed9f 7a14 	vldr	s14, [pc, #80]	; c2f0c <__kernel_sinf+0x84>
   c2ebc:	eea5 6aa7 	vfma.f32	s12, s11, s15
   c2ec0:	ee20 5a27 	vmul.f32	s10, s0, s15
   c2ec4:	eee6 6a27 	vfma.f32	s13, s12, s15
   c2ec8:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c2ecc:	b930      	cbnz	r0, c2edc <__kernel_sinf+0x54>
   c2ece:	eddf 6a10 	vldr	s13, [pc, #64]	; c2f10 <__kernel_sinf+0x88>
   c2ed2:	eee7 6a87 	vfma.f32	s13, s15, s14
   c2ed6:	eea6 0a85 	vfma.f32	s0, s13, s10
   c2eda:	4770      	bx	lr
   c2edc:	ee27 7a45 	vnmul.f32	s14, s14, s10
   c2ee0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   c2ee4:	eea0 7aa6 	vfma.f32	s14, s1, s13
   c2ee8:	eddf 6a0a 	vldr	s13, [pc, #40]	; c2f14 <__kernel_sinf+0x8c>
   c2eec:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c2ef0:	eee5 0a26 	vfma.f32	s1, s10, s13
   c2ef4:	ee30 0a60 	vsub.f32	s0, s0, s1
   c2ef8:	4770      	bx	lr
   c2efa:	bf00      	nop
   c2efc:	2f2ec9d3 	.word	0x2f2ec9d3
   c2f00:	b2d72f34 	.word	0xb2d72f34
   c2f04:	3638ef1b 	.word	0x3638ef1b
   c2f08:	b9500d01 	.word	0xb9500d01
   c2f0c:	3c088889 	.word	0x3c088889
   c2f10:	be2aaaab 	.word	0xbe2aaaab
   c2f14:	3e2aaaab 	.word	0x3e2aaaab

000c2f18 <atan>:
   c2f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2f1c:	ec55 4b10 	vmov	r4, r5, d0
   c2f20:	4bc3      	ldr	r3, [pc, #780]	; (c3230 <atan+0x318>)
   c2f22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   c2f26:	429e      	cmp	r6, r3
   c2f28:	46aa      	mov	sl, r5
   c2f2a:	dd17      	ble.n	c2f5c <atan+0x44>
   c2f2c:	4bc1      	ldr	r3, [pc, #772]	; (c3234 <atan+0x31c>)
   c2f2e:	429e      	cmp	r6, r3
   c2f30:	dc0a      	bgt.n	c2f48 <atan+0x30>
   c2f32:	d007      	beq.n	c2f44 <atan+0x2c>
   c2f34:	f1ba 0f00 	cmp.w	sl, #0
   c2f38:	f340 80cb 	ble.w	c30d2 <atan+0x1ba>
   c2f3c:	ed9f 0ba0 	vldr	d0, [pc, #640]	; c31c0 <atan+0x2a8>
   c2f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2f44:	2c00      	cmp	r4, #0
   c2f46:	d0f5      	beq.n	c2f34 <atan+0x1c>
   c2f48:	4622      	mov	r2, r4
   c2f4a:	462b      	mov	r3, r5
   c2f4c:	4620      	mov	r0, r4
   c2f4e:	4629      	mov	r1, r5
   c2f50:	f000 fb2c 	bl	c35ac <__adddf3>
   c2f54:	ec41 0b10 	vmov	d0, r0, r1
   c2f58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2f5c:	4bb6      	ldr	r3, [pc, #728]	; (c3238 <atan+0x320>)
   c2f5e:	429e      	cmp	r6, r3
   c2f60:	f300 80bb 	bgt.w	c30da <atan+0x1c2>
   c2f64:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   c2f68:	429e      	cmp	r6, r3
   c2f6a:	f340 80a0 	ble.w	c30ae <atan+0x196>
   c2f6e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   c2f72:	4622      	mov	r2, r4
   c2f74:	462b      	mov	r3, r5
   c2f76:	4620      	mov	r0, r4
   c2f78:	4629      	mov	r1, r5
   c2f7a:	f000 fccd 	bl	c3918 <__aeabi_dmul>
   c2f7e:	4602      	mov	r2, r0
   c2f80:	460b      	mov	r3, r1
   c2f82:	4680      	mov	r8, r0
   c2f84:	4689      	mov	r9, r1
   c2f86:	f000 fcc7 	bl	c3918 <__aeabi_dmul>
   c2f8a:	a38f      	add	r3, pc, #572	; (adr r3, c31c8 <atan+0x2b0>)
   c2f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2f90:	4606      	mov	r6, r0
   c2f92:	460f      	mov	r7, r1
   c2f94:	f000 fcc0 	bl	c3918 <__aeabi_dmul>
   c2f98:	a38d      	add	r3, pc, #564	; (adr r3, c31d0 <atan+0x2b8>)
   c2f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2f9e:	f000 fb05 	bl	c35ac <__adddf3>
   c2fa2:	4632      	mov	r2, r6
   c2fa4:	463b      	mov	r3, r7
   c2fa6:	f000 fcb7 	bl	c3918 <__aeabi_dmul>
   c2faa:	a38b      	add	r3, pc, #556	; (adr r3, c31d8 <atan+0x2c0>)
   c2fac:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2fb0:	f000 fafc 	bl	c35ac <__adddf3>
   c2fb4:	4632      	mov	r2, r6
   c2fb6:	463b      	mov	r3, r7
   c2fb8:	f000 fcae 	bl	c3918 <__aeabi_dmul>
   c2fbc:	a388      	add	r3, pc, #544	; (adr r3, c31e0 <atan+0x2c8>)
   c2fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2fc2:	f000 faf3 	bl	c35ac <__adddf3>
   c2fc6:	4632      	mov	r2, r6
   c2fc8:	463b      	mov	r3, r7
   c2fca:	f000 fca5 	bl	c3918 <__aeabi_dmul>
   c2fce:	a386      	add	r3, pc, #536	; (adr r3, c31e8 <atan+0x2d0>)
   c2fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2fd4:	f000 faea 	bl	c35ac <__adddf3>
   c2fd8:	4632      	mov	r2, r6
   c2fda:	463b      	mov	r3, r7
   c2fdc:	f000 fc9c 	bl	c3918 <__aeabi_dmul>
   c2fe0:	a383      	add	r3, pc, #524	; (adr r3, c31f0 <atan+0x2d8>)
   c2fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2fe6:	f000 fae1 	bl	c35ac <__adddf3>
   c2fea:	4642      	mov	r2, r8
   c2fec:	464b      	mov	r3, r9
   c2fee:	f000 fc93 	bl	c3918 <__aeabi_dmul>
   c2ff2:	a381      	add	r3, pc, #516	; (adr r3, c31f8 <atan+0x2e0>)
   c2ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2ff8:	4680      	mov	r8, r0
   c2ffa:	4689      	mov	r9, r1
   c2ffc:	4630      	mov	r0, r6
   c2ffe:	4639      	mov	r1, r7
   c3000:	f000 fc8a 	bl	c3918 <__aeabi_dmul>
   c3004:	a37e      	add	r3, pc, #504	; (adr r3, c3200 <atan+0x2e8>)
   c3006:	e9d3 2300 	ldrd	r2, r3, [r3]
   c300a:	f000 facd 	bl	c35a8 <__aeabi_dsub>
   c300e:	4632      	mov	r2, r6
   c3010:	463b      	mov	r3, r7
   c3012:	f000 fc81 	bl	c3918 <__aeabi_dmul>
   c3016:	a37c      	add	r3, pc, #496	; (adr r3, c3208 <atan+0x2f0>)
   c3018:	e9d3 2300 	ldrd	r2, r3, [r3]
   c301c:	f000 fac4 	bl	c35a8 <__aeabi_dsub>
   c3020:	4632      	mov	r2, r6
   c3022:	463b      	mov	r3, r7
   c3024:	f000 fc78 	bl	c3918 <__aeabi_dmul>
   c3028:	a379      	add	r3, pc, #484	; (adr r3, c3210 <atan+0x2f8>)
   c302a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c302e:	f000 fabb 	bl	c35a8 <__aeabi_dsub>
   c3032:	4632      	mov	r2, r6
   c3034:	463b      	mov	r3, r7
   c3036:	f000 fc6f 	bl	c3918 <__aeabi_dmul>
   c303a:	a377      	add	r3, pc, #476	; (adr r3, c3218 <atan+0x300>)
   c303c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3040:	f000 fab2 	bl	c35a8 <__aeabi_dsub>
   c3044:	4632      	mov	r2, r6
   c3046:	463b      	mov	r3, r7
   c3048:	f000 fc66 	bl	c3918 <__aeabi_dmul>
   c304c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   c3050:	4602      	mov	r2, r0
   c3052:	460b      	mov	r3, r1
   c3054:	4640      	mov	r0, r8
   c3056:	4649      	mov	r1, r9
   c3058:	d062      	beq.n	c3120 <atan+0x208>
   c305a:	f000 faa7 	bl	c35ac <__adddf3>
   c305e:	4e77      	ldr	r6, [pc, #476]	; (c323c <atan+0x324>)
   c3060:	4622      	mov	r2, r4
   c3062:	462b      	mov	r3, r5
   c3064:	f000 fc58 	bl	c3918 <__aeabi_dmul>
   c3068:	4b75      	ldr	r3, [pc, #468]	; (c3240 <atan+0x328>)
   c306a:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   c306e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   c3072:	449b      	add	fp, r3
   c3074:	e9db 2300 	ldrd	r2, r3, [fp]
   c3078:	f000 fa96 	bl	c35a8 <__aeabi_dsub>
   c307c:	4622      	mov	r2, r4
   c307e:	462b      	mov	r3, r5
   c3080:	f000 fa92 	bl	c35a8 <__aeabi_dsub>
   c3084:	4602      	mov	r2, r0
   c3086:	460b      	mov	r3, r1
   c3088:	e9d6 0100 	ldrd	r0, r1, [r6]
   c308c:	f000 fa8c 	bl	c35a8 <__aeabi_dsub>
   c3090:	f1ba 0f00 	cmp.w	sl, #0
   c3094:	ec41 0b10 	vmov	d0, r0, r1
   c3098:	f6bf af5e 	bge.w	c2f58 <atan+0x40>
   c309c:	ee10 1a90 	vmov	r1, s1
   c30a0:	4602      	mov	r2, r0
   c30a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c30a6:	ec43 2b10 	vmov	d0, r2, r3
   c30aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c30ae:	a35c      	add	r3, pc, #368	; (adr r3, c3220 <atan+0x308>)
   c30b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c30b4:	ee10 0a10 	vmov	r0, s0
   c30b8:	4629      	mov	r1, r5
   c30ba:	f000 fa77 	bl	c35ac <__adddf3>
   c30be:	4b61      	ldr	r3, [pc, #388]	; (c3244 <atan+0x32c>)
   c30c0:	2200      	movs	r2, #0
   c30c2:	f000 feb9 	bl	c3e38 <__aeabi_dcmpgt>
   c30c6:	2800      	cmp	r0, #0
   c30c8:	f43f af51 	beq.w	c2f6e <atan+0x56>
   c30cc:	ec45 4b10 	vmov	d0, r4, r5
   c30d0:	e742      	b.n	c2f58 <atan+0x40>
   c30d2:	ed9f 0b55 	vldr	d0, [pc, #340]	; c3228 <atan+0x310>
   c30d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c30da:	f000 f8bd 	bl	c3258 <fabs>
   c30de:	4b5a      	ldr	r3, [pc, #360]	; (c3248 <atan+0x330>)
   c30e0:	429e      	cmp	r6, r3
   c30e2:	ec55 4b10 	vmov	r4, r5, d0
   c30e6:	dc2b      	bgt.n	c3140 <atan+0x228>
   c30e8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   c30ec:	429e      	cmp	r6, r3
   c30ee:	dc56      	bgt.n	c319e <atan+0x286>
   c30f0:	ee10 2a10 	vmov	r2, s0
   c30f4:	462b      	mov	r3, r5
   c30f6:	ee10 0a10 	vmov	r0, s0
   c30fa:	4629      	mov	r1, r5
   c30fc:	f000 fa56 	bl	c35ac <__adddf3>
   c3100:	4b50      	ldr	r3, [pc, #320]	; (c3244 <atan+0x32c>)
   c3102:	2200      	movs	r2, #0
   c3104:	f000 fa50 	bl	c35a8 <__aeabi_dsub>
   c3108:	4602      	mov	r2, r0
   c310a:	460b      	mov	r3, r1
   c310c:	4620      	mov	r0, r4
   c310e:	4629      	mov	r1, r5
   c3110:	4614      	mov	r4, r2
   c3112:	461d      	mov	r5, r3
   c3114:	f04f 0b00 	mov.w	fp, #0
   c3118:	2200      	movs	r2, #0
   c311a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c311e:	e027      	b.n	c3170 <atan+0x258>
   c3120:	f000 fa44 	bl	c35ac <__adddf3>
   c3124:	4622      	mov	r2, r4
   c3126:	462b      	mov	r3, r5
   c3128:	f000 fbf6 	bl	c3918 <__aeabi_dmul>
   c312c:	4602      	mov	r2, r0
   c312e:	460b      	mov	r3, r1
   c3130:	4620      	mov	r0, r4
   c3132:	4629      	mov	r1, r5
   c3134:	f000 fa38 	bl	c35a8 <__aeabi_dsub>
   c3138:	ec41 0b10 	vmov	d0, r0, r1
   c313c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3140:	4b42      	ldr	r3, [pc, #264]	; (c324c <atan+0x334>)
   c3142:	429e      	cmp	r6, r3
   c3144:	da1f      	bge.n	c3186 <atan+0x26e>
   c3146:	4b42      	ldr	r3, [pc, #264]	; (c3250 <atan+0x338>)
   c3148:	2200      	movs	r2, #0
   c314a:	4629      	mov	r1, r5
   c314c:	ee10 0a10 	vmov	r0, s0
   c3150:	f000 fa2a 	bl	c35a8 <__aeabi_dsub>
   c3154:	4602      	mov	r2, r0
   c3156:	460b      	mov	r3, r1
   c3158:	4620      	mov	r0, r4
   c315a:	4629      	mov	r1, r5
   c315c:	4614      	mov	r4, r2
   c315e:	461d      	mov	r5, r3
   c3160:	2200      	movs	r2, #0
   c3162:	4b3b      	ldr	r3, [pc, #236]	; (c3250 <atan+0x338>)
   c3164:	f04f 0b02 	mov.w	fp, #2
   c3168:	f000 fbd6 	bl	c3918 <__aeabi_dmul>
   c316c:	4b35      	ldr	r3, [pc, #212]	; (c3244 <atan+0x32c>)
   c316e:	2200      	movs	r2, #0
   c3170:	f000 fa1c 	bl	c35ac <__adddf3>
   c3174:	4602      	mov	r2, r0
   c3176:	460b      	mov	r3, r1
   c3178:	4620      	mov	r0, r4
   c317a:	4629      	mov	r1, r5
   c317c:	f000 fcf6 	bl	c3b6c <__aeabi_ddiv>
   c3180:	4604      	mov	r4, r0
   c3182:	460d      	mov	r5, r1
   c3184:	e6f5      	b.n	c2f72 <atan+0x5a>
   c3186:	462b      	mov	r3, r5
   c3188:	4932      	ldr	r1, [pc, #200]	; (c3254 <atan+0x33c>)
   c318a:	ee10 2a10 	vmov	r2, s0
   c318e:	2000      	movs	r0, #0
   c3190:	f000 fcec 	bl	c3b6c <__aeabi_ddiv>
   c3194:	f04f 0b03 	mov.w	fp, #3
   c3198:	4604      	mov	r4, r0
   c319a:	460d      	mov	r5, r1
   c319c:	e6e9      	b.n	c2f72 <atan+0x5a>
   c319e:	4b29      	ldr	r3, [pc, #164]	; (c3244 <atan+0x32c>)
   c31a0:	2200      	movs	r2, #0
   c31a2:	4629      	mov	r1, r5
   c31a4:	ee10 0a10 	vmov	r0, s0
   c31a8:	f000 f9fe 	bl	c35a8 <__aeabi_dsub>
   c31ac:	4602      	mov	r2, r0
   c31ae:	460b      	mov	r3, r1
   c31b0:	4620      	mov	r0, r4
   c31b2:	4629      	mov	r1, r5
   c31b4:	f04f 0b01 	mov.w	fp, #1
   c31b8:	4614      	mov	r4, r2
   c31ba:	461d      	mov	r5, r3
   c31bc:	e7d6      	b.n	c316c <atan+0x254>
   c31be:	bf00      	nop
   c31c0:	54442d18 	.word	0x54442d18
   c31c4:	3ff921fb 	.word	0x3ff921fb
   c31c8:	e322da11 	.word	0xe322da11
   c31cc:	3f90ad3a 	.word	0x3f90ad3a
   c31d0:	24760deb 	.word	0x24760deb
   c31d4:	3fa97b4b 	.word	0x3fa97b4b
   c31d8:	a0d03d51 	.word	0xa0d03d51
   c31dc:	3fb10d66 	.word	0x3fb10d66
   c31e0:	c54c206e 	.word	0xc54c206e
   c31e4:	3fb745cd 	.word	0x3fb745cd
   c31e8:	920083ff 	.word	0x920083ff
   c31ec:	3fc24924 	.word	0x3fc24924
   c31f0:	5555550d 	.word	0x5555550d
   c31f4:	3fd55555 	.word	0x3fd55555
   c31f8:	2c6a6c2f 	.word	0x2c6a6c2f
   c31fc:	bfa2b444 	.word	0xbfa2b444
   c3200:	52defd9a 	.word	0x52defd9a
   c3204:	3fadde2d 	.word	0x3fadde2d
   c3208:	af749a6d 	.word	0xaf749a6d
   c320c:	3fb3b0f2 	.word	0x3fb3b0f2
   c3210:	fe231671 	.word	0xfe231671
   c3214:	3fbc71c6 	.word	0x3fbc71c6
   c3218:	9998ebc4 	.word	0x9998ebc4
   c321c:	3fc99999 	.word	0x3fc99999
   c3220:	8800759c 	.word	0x8800759c
   c3224:	7e37e43c 	.word	0x7e37e43c
   c3228:	54442d18 	.word	0x54442d18
   c322c:	bff921fb 	.word	0xbff921fb
   c3230:	440fffff 	.word	0x440fffff
   c3234:	7ff00000 	.word	0x7ff00000
   c3238:	3fdbffff 	.word	0x3fdbffff
   c323c:	000c8050 	.word	0x000c8050
   c3240:	000c8070 	.word	0x000c8070
   c3244:	3ff00000 	.word	0x3ff00000
   c3248:	3ff2ffff 	.word	0x3ff2ffff
   c324c:	40038000 	.word	0x40038000
   c3250:	3ff80000 	.word	0x3ff80000
   c3254:	bff00000 	.word	0xbff00000

000c3258 <fabs>:
   c3258:	ec51 0b10 	vmov	r0, r1, d0
   c325c:	ee10 2a10 	vmov	r2, s0
   c3260:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c3264:	ec43 2b10 	vmov	d0, r2, r3
   c3268:	4770      	bx	lr
   c326a:	bf00      	nop

000c326c <atanf>:
   c326c:	b538      	push	{r3, r4, r5, lr}
   c326e:	ee10 5a10 	vmov	r5, s0
   c3272:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   c3276:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   c327a:	eef0 7a40 	vmov.f32	s15, s0
   c327e:	db0b      	blt.n	c3298 <atanf+0x2c>
   c3280:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c3284:	dc5b      	bgt.n	c333e <atanf+0xd2>
   c3286:	eddf 7a53 	vldr	s15, [pc, #332]	; c33d4 <atanf+0x168>
   c328a:	ed9f 0a53 	vldr	s0, [pc, #332]	; c33d8 <atanf+0x16c>
   c328e:	2d00      	cmp	r5, #0
   c3290:	bfc8      	it	gt
   c3292:	eeb0 0a67 	vmovgt.f32	s0, s15
   c3296:	bd38      	pop	{r3, r4, r5, pc}
   c3298:	4b50      	ldr	r3, [pc, #320]	; (c33dc <atanf+0x170>)
   c329a:	429c      	cmp	r4, r3
   c329c:	dc5e      	bgt.n	c335c <atanf+0xf0>
   c329e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   c32a2:	db4f      	blt.n	c3344 <atanf+0xd8>
   c32a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c32a8:	ee67 6aa7 	vmul.f32	s13, s15, s15
   c32ac:	eddf 4a4c 	vldr	s9, [pc, #304]	; c33e0 <atanf+0x174>
   c32b0:	eddf 5a4c 	vldr	s11, [pc, #304]	; c33e4 <atanf+0x178>
   c32b4:	ed9f 5a4c 	vldr	s10, [pc, #304]	; c33e8 <atanf+0x17c>
   c32b8:	ed9f 4a4c 	vldr	s8, [pc, #304]	; c33ec <atanf+0x180>
   c32bc:	ee26 7aa6 	vmul.f32	s14, s13, s13
   c32c0:	eeb0 6a66 	vmov.f32	s12, s13
   c32c4:	eee7 5a24 	vfma.f32	s11, s14, s9
   c32c8:	1c5a      	adds	r2, r3, #1
   c32ca:	eddf 4a49 	vldr	s9, [pc, #292]	; c33f0 <atanf+0x184>
   c32ce:	eddf 6a49 	vldr	s13, [pc, #292]	; c33f4 <atanf+0x188>
   c32d2:	eea5 5a87 	vfma.f32	s10, s11, s14
   c32d6:	eee7 6a24 	vfma.f32	s13, s14, s9
   c32da:	eddf 5a47 	vldr	s11, [pc, #284]	; c33f8 <atanf+0x18c>
   c32de:	eddf 4a47 	vldr	s9, [pc, #284]	; c33fc <atanf+0x190>
   c32e2:	eee6 5a87 	vfma.f32	s11, s13, s14
   c32e6:	eea5 4a07 	vfma.f32	s8, s10, s14
   c32ea:	ed9f 5a45 	vldr	s10, [pc, #276]	; c3400 <atanf+0x194>
   c32ee:	eddf 6a45 	vldr	s13, [pc, #276]	; c3404 <atanf+0x198>
   c32f2:	eea5 5a87 	vfma.f32	s10, s11, s14
   c32f6:	eee4 4a07 	vfma.f32	s9, s8, s14
   c32fa:	eddf 5a43 	vldr	s11, [pc, #268]	; c3408 <atanf+0x19c>
   c32fe:	eee4 6a87 	vfma.f32	s13, s9, s14
   c3302:	eee5 5a07 	vfma.f32	s11, s10, s14
   c3306:	ee66 6a86 	vmul.f32	s13, s13, s12
   c330a:	ee25 7a87 	vmul.f32	s14, s11, s14
   c330e:	d03a      	beq.n	c3386 <atanf+0x11a>
   c3310:	4a3e      	ldr	r2, [pc, #248]	; (c340c <atanf+0x1a0>)
   c3312:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   c3316:	ee76 6a87 	vadd.f32	s13, s13, s14
   c331a:	ed92 0a00 	vldr	s0, [r2]
   c331e:	4a3c      	ldr	r2, [pc, #240]	; (c3410 <atanf+0x1a4>)
   c3320:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   c3324:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c3328:	2d00      	cmp	r5, #0
   c332a:	ed93 7a00 	vldr	s14, [r3]
   c332e:	ee70 7a67 	vsub.f32	s15, s0, s15
   c3332:	ee37 0a67 	vsub.f32	s0, s14, s15
   c3336:	daae      	bge.n	c3296 <atanf+0x2a>
   c3338:	eeb1 0a40 	vneg.f32	s0, s0
   c333c:	bd38      	pop	{r3, r4, r5, pc}
   c333e:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3342:	bd38      	pop	{r3, r4, r5, pc}
   c3344:	ed9f 7a33 	vldr	s14, [pc, #204]	; c3414 <atanf+0x1a8>
   c3348:	ee30 7a07 	vadd.f32	s14, s0, s14
   c334c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   c3350:	eeb4 7ae6 	vcmpe.f32	s14, s13
   c3354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3358:	dda4      	ble.n	c32a4 <atanf+0x38>
   c335a:	bd38      	pop	{r3, r4, r5, pc}
   c335c:	f000 f860 	bl	c3420 <fabsf>
   c3360:	4b2d      	ldr	r3, [pc, #180]	; (c3418 <atanf+0x1ac>)
   c3362:	429c      	cmp	r4, r3
   c3364:	dc16      	bgt.n	c3394 <atanf+0x128>
   c3366:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   c336a:	429c      	cmp	r4, r3
   c336c:	dc27      	bgt.n	c33be <atanf+0x152>
   c336e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c3372:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c3376:	eea0 7a27 	vfma.f32	s14, s0, s15
   c337a:	2300      	movs	r3, #0
   c337c:	ee30 0a27 	vadd.f32	s0, s0, s15
   c3380:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c3384:	e790      	b.n	c32a8 <atanf+0x3c>
   c3386:	ee76 6a87 	vadd.f32	s13, s13, s14
   c338a:	eee6 7ae7 	vfms.f32	s15, s13, s15
   c338e:	eeb0 0a67 	vmov.f32	s0, s15
   c3392:	bd38      	pop	{r3, r4, r5, pc}
   c3394:	4b21      	ldr	r3, [pc, #132]	; (c341c <atanf+0x1b0>)
   c3396:	429c      	cmp	r4, r3
   c3398:	dc0b      	bgt.n	c33b2 <atanf+0x146>
   c339a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   c339e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c33a2:	eea0 7a27 	vfma.f32	s14, s0, s15
   c33a6:	2302      	movs	r3, #2
   c33a8:	ee30 0a67 	vsub.f32	s0, s0, s15
   c33ac:	eec0 7a07 	vdiv.f32	s15, s0, s14
   c33b0:	e77a      	b.n	c32a8 <atanf+0x3c>
   c33b2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c33b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c33ba:	2303      	movs	r3, #3
   c33bc:	e774      	b.n	c32a8 <atanf+0x3c>
   c33be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c33c2:	ee30 7a67 	vsub.f32	s14, s0, s15
   c33c6:	ee30 0a27 	vadd.f32	s0, s0, s15
   c33ca:	2301      	movs	r3, #1
   c33cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c33d0:	e76a      	b.n	c32a8 <atanf+0x3c>
   c33d2:	bf00      	nop
   c33d4:	3fc90fdb 	.word	0x3fc90fdb
   c33d8:	bfc90fdb 	.word	0xbfc90fdb
   c33dc:	3edfffff 	.word	0x3edfffff
   c33e0:	3c8569d7 	.word	0x3c8569d7
   c33e4:	3d4bda59 	.word	0x3d4bda59
   c33e8:	3d886b35 	.word	0x3d886b35
   c33ec:	3dba2e6e 	.word	0x3dba2e6e
   c33f0:	bd15a221 	.word	0xbd15a221
   c33f4:	bd6ef16b 	.word	0xbd6ef16b
   c33f8:	bd9d8795 	.word	0xbd9d8795
   c33fc:	3e124925 	.word	0x3e124925
   c3400:	bde38e38 	.word	0xbde38e38
   c3404:	3eaaaaab 	.word	0x3eaaaaab
   c3408:	be4ccccd 	.word	0xbe4ccccd
   c340c:	000c80a0 	.word	0x000c80a0
   c3410:	000c8090 	.word	0x000c8090
   c3414:	7149f2ca 	.word	0x7149f2ca
   c3418:	3f97ffff 	.word	0x3f97ffff
   c341c:	401bffff 	.word	0x401bffff

000c3420 <fabsf>:
   c3420:	ee10 3a10 	vmov	r3, s0
   c3424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c3428:	ee00 3a10 	vmov	s0, r3
   c342c:	4770      	bx	lr
   c342e:	bf00      	nop

000c3430 <floorf>:
   c3430:	ee10 2a10 	vmov	r2, s0
   c3434:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c3438:	3b7f      	subs	r3, #127	; 0x7f
   c343a:	2b16      	cmp	r3, #22
   c343c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c3440:	dc28      	bgt.n	c3494 <floorf+0x64>
   c3442:	2b00      	cmp	r3, #0
   c3444:	db18      	blt.n	c3478 <floorf+0x48>
   c3446:	491a      	ldr	r1, [pc, #104]	; (c34b0 <floorf+0x80>)
   c3448:	4119      	asrs	r1, r3
   c344a:	420a      	tst	r2, r1
   c344c:	d021      	beq.n	c3492 <floorf+0x62>
   c344e:	eddf 7a19 	vldr	s15, [pc, #100]	; c34b4 <floorf+0x84>
   c3452:	ee70 7a27 	vadd.f32	s15, s0, s15
   c3456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c345e:	dd18      	ble.n	c3492 <floorf+0x62>
   c3460:	2a00      	cmp	r2, #0
   c3462:	da04      	bge.n	c346e <floorf+0x3e>
   c3464:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c3468:	fa40 f303 	asr.w	r3, r0, r3
   c346c:	441a      	add	r2, r3
   c346e:	ea22 0301 	bic.w	r3, r2, r1
   c3472:	ee00 3a10 	vmov	s0, r3
   c3476:	4770      	bx	lr
   c3478:	eddf 7a0e 	vldr	s15, [pc, #56]	; c34b4 <floorf+0x84>
   c347c:	ee70 7a27 	vadd.f32	s15, s0, s15
   c3480:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c3484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3488:	dd03      	ble.n	c3492 <floorf+0x62>
   c348a:	2a00      	cmp	r2, #0
   c348c:	db08      	blt.n	c34a0 <floorf+0x70>
   c348e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c34b8 <floorf+0x88>
   c3492:	4770      	bx	lr
   c3494:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c3498:	d3fb      	bcc.n	c3492 <floorf+0x62>
   c349a:	ee30 0a00 	vadd.f32	s0, s0, s0
   c349e:	4770      	bx	lr
   c34a0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   c34a4:	2900      	cmp	r1, #0
   c34a6:	bf18      	it	ne
   c34a8:	eeb0 0a67 	vmovne.f32	s0, s15
   c34ac:	4770      	bx	lr
   c34ae:	bf00      	nop
   c34b0:	007fffff 	.word	0x007fffff
   c34b4:	7149f2ca 	.word	0x7149f2ca
   c34b8:	00000000 	.word	0x00000000

000c34bc <scalbnf>:
   c34bc:	b082      	sub	sp, #8
   c34be:	ed8d 0a01 	vstr	s0, [sp, #4]
   c34c2:	9b01      	ldr	r3, [sp, #4]
   c34c4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c34c8:	d02a      	beq.n	c3520 <scalbnf+0x64>
   c34ca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c34ce:	d223      	bcs.n	c3518 <scalbnf+0x5c>
   c34d0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   c34d4:	d128      	bne.n	c3528 <scalbnf+0x6c>
   c34d6:	ed9d 7a01 	vldr	s14, [sp, #4]
   c34da:	eddf 7a2a 	vldr	s15, [pc, #168]	; c3584 <scalbnf+0xc8>
   c34de:	4b2a      	ldr	r3, [pc, #168]	; (c3588 <scalbnf+0xcc>)
   c34e0:	ee67 7a27 	vmul.f32	s15, s14, s15
   c34e4:	4298      	cmp	r0, r3
   c34e6:	edcd 7a01 	vstr	s15, [sp, #4]
   c34ea:	db37      	blt.n	c355c <scalbnf+0xa0>
   c34ec:	9b01      	ldr	r3, [sp, #4]
   c34ee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c34f2:	3a19      	subs	r2, #25
   c34f4:	4402      	add	r2, r0
   c34f6:	2afe      	cmp	r2, #254	; 0xfe
   c34f8:	dd1a      	ble.n	c3530 <scalbnf+0x74>
   c34fa:	ed9f 0a24 	vldr	s0, [pc, #144]	; c358c <scalbnf+0xd0>
   c34fe:	ed9f 7a24 	vldr	s14, [pc, #144]	; c3590 <scalbnf+0xd4>
   c3502:	9b01      	ldr	r3, [sp, #4]
   c3504:	2b00      	cmp	r3, #0
   c3506:	eef0 7a40 	vmov.f32	s15, s0
   c350a:	bfb8      	it	lt
   c350c:	eeb0 0a47 	vmovlt.f32	s0, s14
   c3510:	ee20 0a27 	vmul.f32	s0, s0, s15
   c3514:	b002      	add	sp, #8
   c3516:	4770      	bx	lr
   c3518:	ee30 0a00 	vadd.f32	s0, s0, s0
   c351c:	b002      	add	sp, #8
   c351e:	4770      	bx	lr
   c3520:	ed9d 0a01 	vldr	s0, [sp, #4]
   c3524:	b002      	add	sp, #8
   c3526:	4770      	bx	lr
   c3528:	0dd2      	lsrs	r2, r2, #23
   c352a:	4402      	add	r2, r0
   c352c:	2afe      	cmp	r2, #254	; 0xfe
   c352e:	dce4      	bgt.n	c34fa <scalbnf+0x3e>
   c3530:	2a00      	cmp	r2, #0
   c3532:	dc0b      	bgt.n	c354c <scalbnf+0x90>
   c3534:	f112 0f16 	cmn.w	r2, #22
   c3538:	da17      	bge.n	c356a <scalbnf+0xae>
   c353a:	f24c 3350 	movw	r3, #50000	; 0xc350
   c353e:	4298      	cmp	r0, r3
   c3540:	dcdb      	bgt.n	c34fa <scalbnf+0x3e>
   c3542:	ed9f 0a14 	vldr	s0, [pc, #80]	; c3594 <scalbnf+0xd8>
   c3546:	ed9f 7a14 	vldr	s14, [pc, #80]	; c3598 <scalbnf+0xdc>
   c354a:	e7da      	b.n	c3502 <scalbnf+0x46>
   c354c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3550:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c3554:	ee00 3a10 	vmov	s0, r3
   c3558:	b002      	add	sp, #8
   c355a:	4770      	bx	lr
   c355c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; c3594 <scalbnf+0xd8>
   c3560:	eddd 7a01 	vldr	s15, [sp, #4]
   c3564:	ee27 0a80 	vmul.f32	s0, s15, s0
   c3568:	e7d8      	b.n	c351c <scalbnf+0x60>
   c356a:	3219      	adds	r2, #25
   c356c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3570:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c3574:	eddf 7a09 	vldr	s15, [pc, #36]	; c359c <scalbnf+0xe0>
   c3578:	ee07 3a10 	vmov	s14, r3
   c357c:	ee27 0a27 	vmul.f32	s0, s14, s15
   c3580:	e7cc      	b.n	c351c <scalbnf+0x60>
   c3582:	bf00      	nop
   c3584:	4c000000 	.word	0x4c000000
   c3588:	ffff3cb0 	.word	0xffff3cb0
   c358c:	7149f2ca 	.word	0x7149f2ca
   c3590:	f149f2ca 	.word	0xf149f2ca
   c3594:	0da24260 	.word	0x0da24260
   c3598:	8da24260 	.word	0x8da24260
   c359c:	33000000 	.word	0x33000000

000c35a0 <__aeabi_drsub>:
   c35a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c35a4:	e002      	b.n	c35ac <__adddf3>
   c35a6:	bf00      	nop

000c35a8 <__aeabi_dsub>:
   c35a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c35ac <__adddf3>:
   c35ac:	b530      	push	{r4, r5, lr}
   c35ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c35b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c35b6:	ea94 0f05 	teq	r4, r5
   c35ba:	bf08      	it	eq
   c35bc:	ea90 0f02 	teqeq	r0, r2
   c35c0:	bf1f      	itttt	ne
   c35c2:	ea54 0c00 	orrsne.w	ip, r4, r0
   c35c6:	ea55 0c02 	orrsne.w	ip, r5, r2
   c35ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c35ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c35d2:	f000 80e2 	beq.w	c379a <__adddf3+0x1ee>
   c35d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c35da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c35de:	bfb8      	it	lt
   c35e0:	426d      	neglt	r5, r5
   c35e2:	dd0c      	ble.n	c35fe <__adddf3+0x52>
   c35e4:	442c      	add	r4, r5
   c35e6:	ea80 0202 	eor.w	r2, r0, r2
   c35ea:	ea81 0303 	eor.w	r3, r1, r3
   c35ee:	ea82 0000 	eor.w	r0, r2, r0
   c35f2:	ea83 0101 	eor.w	r1, r3, r1
   c35f6:	ea80 0202 	eor.w	r2, r0, r2
   c35fa:	ea81 0303 	eor.w	r3, r1, r3
   c35fe:	2d36      	cmp	r5, #54	; 0x36
   c3600:	bf88      	it	hi
   c3602:	bd30      	pophi	{r4, r5, pc}
   c3604:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c3608:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c360c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c3610:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c3614:	d002      	beq.n	c361c <__adddf3+0x70>
   c3616:	4240      	negs	r0, r0
   c3618:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c361c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c3620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c3624:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c3628:	d002      	beq.n	c3630 <__adddf3+0x84>
   c362a:	4252      	negs	r2, r2
   c362c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c3630:	ea94 0f05 	teq	r4, r5
   c3634:	f000 80a7 	beq.w	c3786 <__adddf3+0x1da>
   c3638:	f1a4 0401 	sub.w	r4, r4, #1
   c363c:	f1d5 0e20 	rsbs	lr, r5, #32
   c3640:	db0d      	blt.n	c365e <__adddf3+0xb2>
   c3642:	fa02 fc0e 	lsl.w	ip, r2, lr
   c3646:	fa22 f205 	lsr.w	r2, r2, r5
   c364a:	1880      	adds	r0, r0, r2
   c364c:	f141 0100 	adc.w	r1, r1, #0
   c3650:	fa03 f20e 	lsl.w	r2, r3, lr
   c3654:	1880      	adds	r0, r0, r2
   c3656:	fa43 f305 	asr.w	r3, r3, r5
   c365a:	4159      	adcs	r1, r3
   c365c:	e00e      	b.n	c367c <__adddf3+0xd0>
   c365e:	f1a5 0520 	sub.w	r5, r5, #32
   c3662:	f10e 0e20 	add.w	lr, lr, #32
   c3666:	2a01      	cmp	r2, #1
   c3668:	fa03 fc0e 	lsl.w	ip, r3, lr
   c366c:	bf28      	it	cs
   c366e:	f04c 0c02 	orrcs.w	ip, ip, #2
   c3672:	fa43 f305 	asr.w	r3, r3, r5
   c3676:	18c0      	adds	r0, r0, r3
   c3678:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c367c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3680:	d507      	bpl.n	c3692 <__adddf3+0xe6>
   c3682:	f04f 0e00 	mov.w	lr, #0
   c3686:	f1dc 0c00 	rsbs	ip, ip, #0
   c368a:	eb7e 0000 	sbcs.w	r0, lr, r0
   c368e:	eb6e 0101 	sbc.w	r1, lr, r1
   c3692:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c3696:	d31b      	bcc.n	c36d0 <__adddf3+0x124>
   c3698:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c369c:	d30c      	bcc.n	c36b8 <__adddf3+0x10c>
   c369e:	0849      	lsrs	r1, r1, #1
   c36a0:	ea5f 0030 	movs.w	r0, r0, rrx
   c36a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c36a8:	f104 0401 	add.w	r4, r4, #1
   c36ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c36b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c36b4:	f080 809a 	bcs.w	c37ec <__adddf3+0x240>
   c36b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c36bc:	bf08      	it	eq
   c36be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c36c2:	f150 0000 	adcs.w	r0, r0, #0
   c36c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c36ca:	ea41 0105 	orr.w	r1, r1, r5
   c36ce:	bd30      	pop	{r4, r5, pc}
   c36d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c36d4:	4140      	adcs	r0, r0
   c36d6:	eb41 0101 	adc.w	r1, r1, r1
   c36da:	3c01      	subs	r4, #1
   c36dc:	bf28      	it	cs
   c36de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c36e2:	d2e9      	bcs.n	c36b8 <__adddf3+0x10c>
   c36e4:	f091 0f00 	teq	r1, #0
   c36e8:	bf04      	itt	eq
   c36ea:	4601      	moveq	r1, r0
   c36ec:	2000      	moveq	r0, #0
   c36ee:	fab1 f381 	clz	r3, r1
   c36f2:	bf08      	it	eq
   c36f4:	3320      	addeq	r3, #32
   c36f6:	f1a3 030b 	sub.w	r3, r3, #11
   c36fa:	f1b3 0220 	subs.w	r2, r3, #32
   c36fe:	da0c      	bge.n	c371a <__adddf3+0x16e>
   c3700:	320c      	adds	r2, #12
   c3702:	dd08      	ble.n	c3716 <__adddf3+0x16a>
   c3704:	f102 0c14 	add.w	ip, r2, #20
   c3708:	f1c2 020c 	rsb	r2, r2, #12
   c370c:	fa01 f00c 	lsl.w	r0, r1, ip
   c3710:	fa21 f102 	lsr.w	r1, r1, r2
   c3714:	e00c      	b.n	c3730 <__adddf3+0x184>
   c3716:	f102 0214 	add.w	r2, r2, #20
   c371a:	bfd8      	it	le
   c371c:	f1c2 0c20 	rsble	ip, r2, #32
   c3720:	fa01 f102 	lsl.w	r1, r1, r2
   c3724:	fa20 fc0c 	lsr.w	ip, r0, ip
   c3728:	bfdc      	itt	le
   c372a:	ea41 010c 	orrle.w	r1, r1, ip
   c372e:	4090      	lslle	r0, r2
   c3730:	1ae4      	subs	r4, r4, r3
   c3732:	bfa2      	ittt	ge
   c3734:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c3738:	4329      	orrge	r1, r5
   c373a:	bd30      	popge	{r4, r5, pc}
   c373c:	ea6f 0404 	mvn.w	r4, r4
   c3740:	3c1f      	subs	r4, #31
   c3742:	da1c      	bge.n	c377e <__adddf3+0x1d2>
   c3744:	340c      	adds	r4, #12
   c3746:	dc0e      	bgt.n	c3766 <__adddf3+0x1ba>
   c3748:	f104 0414 	add.w	r4, r4, #20
   c374c:	f1c4 0220 	rsb	r2, r4, #32
   c3750:	fa20 f004 	lsr.w	r0, r0, r4
   c3754:	fa01 f302 	lsl.w	r3, r1, r2
   c3758:	ea40 0003 	orr.w	r0, r0, r3
   c375c:	fa21 f304 	lsr.w	r3, r1, r4
   c3760:	ea45 0103 	orr.w	r1, r5, r3
   c3764:	bd30      	pop	{r4, r5, pc}
   c3766:	f1c4 040c 	rsb	r4, r4, #12
   c376a:	f1c4 0220 	rsb	r2, r4, #32
   c376e:	fa20 f002 	lsr.w	r0, r0, r2
   c3772:	fa01 f304 	lsl.w	r3, r1, r4
   c3776:	ea40 0003 	orr.w	r0, r0, r3
   c377a:	4629      	mov	r1, r5
   c377c:	bd30      	pop	{r4, r5, pc}
   c377e:	fa21 f004 	lsr.w	r0, r1, r4
   c3782:	4629      	mov	r1, r5
   c3784:	bd30      	pop	{r4, r5, pc}
   c3786:	f094 0f00 	teq	r4, #0
   c378a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c378e:	bf06      	itte	eq
   c3790:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c3794:	3401      	addeq	r4, #1
   c3796:	3d01      	subne	r5, #1
   c3798:	e74e      	b.n	c3638 <__adddf3+0x8c>
   c379a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c379e:	bf18      	it	ne
   c37a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c37a4:	d029      	beq.n	c37fa <__adddf3+0x24e>
   c37a6:	ea94 0f05 	teq	r4, r5
   c37aa:	bf08      	it	eq
   c37ac:	ea90 0f02 	teqeq	r0, r2
   c37b0:	d005      	beq.n	c37be <__adddf3+0x212>
   c37b2:	ea54 0c00 	orrs.w	ip, r4, r0
   c37b6:	bf04      	itt	eq
   c37b8:	4619      	moveq	r1, r3
   c37ba:	4610      	moveq	r0, r2
   c37bc:	bd30      	pop	{r4, r5, pc}
   c37be:	ea91 0f03 	teq	r1, r3
   c37c2:	bf1e      	ittt	ne
   c37c4:	2100      	movne	r1, #0
   c37c6:	2000      	movne	r0, #0
   c37c8:	bd30      	popne	{r4, r5, pc}
   c37ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c37ce:	d105      	bne.n	c37dc <__adddf3+0x230>
   c37d0:	0040      	lsls	r0, r0, #1
   c37d2:	4149      	adcs	r1, r1
   c37d4:	bf28      	it	cs
   c37d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c37da:	bd30      	pop	{r4, r5, pc}
   c37dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c37e0:	bf3c      	itt	cc
   c37e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c37e6:	bd30      	popcc	{r4, r5, pc}
   c37e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c37ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c37f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c37f4:	f04f 0000 	mov.w	r0, #0
   c37f8:	bd30      	pop	{r4, r5, pc}
   c37fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c37fe:	bf1a      	itte	ne
   c3800:	4619      	movne	r1, r3
   c3802:	4610      	movne	r0, r2
   c3804:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c3808:	bf1c      	itt	ne
   c380a:	460b      	movne	r3, r1
   c380c:	4602      	movne	r2, r0
   c380e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3812:	bf06      	itte	eq
   c3814:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c3818:	ea91 0f03 	teqeq	r1, r3
   c381c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c3820:	bd30      	pop	{r4, r5, pc}
   c3822:	bf00      	nop

000c3824 <__aeabi_ui2d>:
   c3824:	f090 0f00 	teq	r0, #0
   c3828:	bf04      	itt	eq
   c382a:	2100      	moveq	r1, #0
   c382c:	4770      	bxeq	lr
   c382e:	b530      	push	{r4, r5, lr}
   c3830:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3834:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3838:	f04f 0500 	mov.w	r5, #0
   c383c:	f04f 0100 	mov.w	r1, #0
   c3840:	e750      	b.n	c36e4 <__adddf3+0x138>
   c3842:	bf00      	nop

000c3844 <__aeabi_i2d>:
   c3844:	f090 0f00 	teq	r0, #0
   c3848:	bf04      	itt	eq
   c384a:	2100      	moveq	r1, #0
   c384c:	4770      	bxeq	lr
   c384e:	b530      	push	{r4, r5, lr}
   c3850:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3854:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3858:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c385c:	bf48      	it	mi
   c385e:	4240      	negmi	r0, r0
   c3860:	f04f 0100 	mov.w	r1, #0
   c3864:	e73e      	b.n	c36e4 <__adddf3+0x138>
   c3866:	bf00      	nop

000c3868 <__aeabi_f2d>:
   c3868:	0042      	lsls	r2, r0, #1
   c386a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c386e:	ea4f 0131 	mov.w	r1, r1, rrx
   c3872:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c3876:	bf1f      	itttt	ne
   c3878:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c387c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c3880:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c3884:	4770      	bxne	lr
   c3886:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c388a:	bf08      	it	eq
   c388c:	4770      	bxeq	lr
   c388e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c3892:	bf04      	itt	eq
   c3894:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c3898:	4770      	bxeq	lr
   c389a:	b530      	push	{r4, r5, lr}
   c389c:	f44f 7460 	mov.w	r4, #896	; 0x380
   c38a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c38a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c38a8:	e71c      	b.n	c36e4 <__adddf3+0x138>
   c38aa:	bf00      	nop

000c38ac <__aeabi_ul2d>:
   c38ac:	ea50 0201 	orrs.w	r2, r0, r1
   c38b0:	bf08      	it	eq
   c38b2:	4770      	bxeq	lr
   c38b4:	b530      	push	{r4, r5, lr}
   c38b6:	f04f 0500 	mov.w	r5, #0
   c38ba:	e00a      	b.n	c38d2 <__aeabi_l2d+0x16>

000c38bc <__aeabi_l2d>:
   c38bc:	ea50 0201 	orrs.w	r2, r0, r1
   c38c0:	bf08      	it	eq
   c38c2:	4770      	bxeq	lr
   c38c4:	b530      	push	{r4, r5, lr}
   c38c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c38ca:	d502      	bpl.n	c38d2 <__aeabi_l2d+0x16>
   c38cc:	4240      	negs	r0, r0
   c38ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c38d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c38d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c38da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c38de:	f43f aed8 	beq.w	c3692 <__adddf3+0xe6>
   c38e2:	f04f 0203 	mov.w	r2, #3
   c38e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c38ea:	bf18      	it	ne
   c38ec:	3203      	addne	r2, #3
   c38ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c38f2:	bf18      	it	ne
   c38f4:	3203      	addne	r2, #3
   c38f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c38fa:	f1c2 0320 	rsb	r3, r2, #32
   c38fe:	fa00 fc03 	lsl.w	ip, r0, r3
   c3902:	fa20 f002 	lsr.w	r0, r0, r2
   c3906:	fa01 fe03 	lsl.w	lr, r1, r3
   c390a:	ea40 000e 	orr.w	r0, r0, lr
   c390e:	fa21 f102 	lsr.w	r1, r1, r2
   c3912:	4414      	add	r4, r2
   c3914:	e6bd      	b.n	c3692 <__adddf3+0xe6>
   c3916:	bf00      	nop

000c3918 <__aeabi_dmul>:
   c3918:	b570      	push	{r4, r5, r6, lr}
   c391a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c391e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3922:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3926:	bf1d      	ittte	ne
   c3928:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c392c:	ea94 0f0c 	teqne	r4, ip
   c3930:	ea95 0f0c 	teqne	r5, ip
   c3934:	f000 f8de 	bleq	c3af4 <__aeabi_dmul+0x1dc>
   c3938:	442c      	add	r4, r5
   c393a:	ea81 0603 	eor.w	r6, r1, r3
   c393e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c3942:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c3946:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c394a:	bf18      	it	ne
   c394c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c3950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c3958:	d038      	beq.n	c39cc <__aeabi_dmul+0xb4>
   c395a:	fba0 ce02 	umull	ip, lr, r0, r2
   c395e:	f04f 0500 	mov.w	r5, #0
   c3962:	fbe1 e502 	umlal	lr, r5, r1, r2
   c3966:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c396a:	fbe0 e503 	umlal	lr, r5, r0, r3
   c396e:	f04f 0600 	mov.w	r6, #0
   c3972:	fbe1 5603 	umlal	r5, r6, r1, r3
   c3976:	f09c 0f00 	teq	ip, #0
   c397a:	bf18      	it	ne
   c397c:	f04e 0e01 	orrne.w	lr, lr, #1
   c3980:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c3984:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c3988:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c398c:	d204      	bcs.n	c3998 <__aeabi_dmul+0x80>
   c398e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c3992:	416d      	adcs	r5, r5
   c3994:	eb46 0606 	adc.w	r6, r6, r6
   c3998:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c399c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c39a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c39a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c39a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c39ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c39b0:	bf88      	it	hi
   c39b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c39b6:	d81e      	bhi.n	c39f6 <__aeabi_dmul+0xde>
   c39b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c39bc:	bf08      	it	eq
   c39be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c39c2:	f150 0000 	adcs.w	r0, r0, #0
   c39c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c39ca:	bd70      	pop	{r4, r5, r6, pc}
   c39cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c39d0:	ea46 0101 	orr.w	r1, r6, r1
   c39d4:	ea40 0002 	orr.w	r0, r0, r2
   c39d8:	ea81 0103 	eor.w	r1, r1, r3
   c39dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c39e0:	bfc2      	ittt	gt
   c39e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   c39e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c39ea:	bd70      	popgt	{r4, r5, r6, pc}
   c39ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c39f0:	f04f 0e00 	mov.w	lr, #0
   c39f4:	3c01      	subs	r4, #1
   c39f6:	f300 80ab 	bgt.w	c3b50 <__aeabi_dmul+0x238>
   c39fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c39fe:	bfde      	ittt	le
   c3a00:	2000      	movle	r0, #0
   c3a02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c3a06:	bd70      	pople	{r4, r5, r6, pc}
   c3a08:	f1c4 0400 	rsb	r4, r4, #0
   c3a0c:	3c20      	subs	r4, #32
   c3a0e:	da35      	bge.n	c3a7c <__aeabi_dmul+0x164>
   c3a10:	340c      	adds	r4, #12
   c3a12:	dc1b      	bgt.n	c3a4c <__aeabi_dmul+0x134>
   c3a14:	f104 0414 	add.w	r4, r4, #20
   c3a18:	f1c4 0520 	rsb	r5, r4, #32
   c3a1c:	fa00 f305 	lsl.w	r3, r0, r5
   c3a20:	fa20 f004 	lsr.w	r0, r0, r4
   c3a24:	fa01 f205 	lsl.w	r2, r1, r5
   c3a28:	ea40 0002 	orr.w	r0, r0, r2
   c3a2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c3a30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3a34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3a38:	fa21 f604 	lsr.w	r6, r1, r4
   c3a3c:	eb42 0106 	adc.w	r1, r2, r6
   c3a40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3a44:	bf08      	it	eq
   c3a46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3a4a:	bd70      	pop	{r4, r5, r6, pc}
   c3a4c:	f1c4 040c 	rsb	r4, r4, #12
   c3a50:	f1c4 0520 	rsb	r5, r4, #32
   c3a54:	fa00 f304 	lsl.w	r3, r0, r4
   c3a58:	fa20 f005 	lsr.w	r0, r0, r5
   c3a5c:	fa01 f204 	lsl.w	r2, r1, r4
   c3a60:	ea40 0002 	orr.w	r0, r0, r2
   c3a64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3a68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3a6c:	f141 0100 	adc.w	r1, r1, #0
   c3a70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3a74:	bf08      	it	eq
   c3a76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3a7a:	bd70      	pop	{r4, r5, r6, pc}
   c3a7c:	f1c4 0520 	rsb	r5, r4, #32
   c3a80:	fa00 f205 	lsl.w	r2, r0, r5
   c3a84:	ea4e 0e02 	orr.w	lr, lr, r2
   c3a88:	fa20 f304 	lsr.w	r3, r0, r4
   c3a8c:	fa01 f205 	lsl.w	r2, r1, r5
   c3a90:	ea43 0302 	orr.w	r3, r3, r2
   c3a94:	fa21 f004 	lsr.w	r0, r1, r4
   c3a98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3a9c:	fa21 f204 	lsr.w	r2, r1, r4
   c3aa0:	ea20 0002 	bic.w	r0, r0, r2
   c3aa4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c3aa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3aac:	bf08      	it	eq
   c3aae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3ab2:	bd70      	pop	{r4, r5, r6, pc}
   c3ab4:	f094 0f00 	teq	r4, #0
   c3ab8:	d10f      	bne.n	c3ada <__aeabi_dmul+0x1c2>
   c3aba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c3abe:	0040      	lsls	r0, r0, #1
   c3ac0:	eb41 0101 	adc.w	r1, r1, r1
   c3ac4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c3ac8:	bf08      	it	eq
   c3aca:	3c01      	subeq	r4, #1
   c3acc:	d0f7      	beq.n	c3abe <__aeabi_dmul+0x1a6>
   c3ace:	ea41 0106 	orr.w	r1, r1, r6
   c3ad2:	f095 0f00 	teq	r5, #0
   c3ad6:	bf18      	it	ne
   c3ad8:	4770      	bxne	lr
   c3ada:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c3ade:	0052      	lsls	r2, r2, #1
   c3ae0:	eb43 0303 	adc.w	r3, r3, r3
   c3ae4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c3ae8:	bf08      	it	eq
   c3aea:	3d01      	subeq	r5, #1
   c3aec:	d0f7      	beq.n	c3ade <__aeabi_dmul+0x1c6>
   c3aee:	ea43 0306 	orr.w	r3, r3, r6
   c3af2:	4770      	bx	lr
   c3af4:	ea94 0f0c 	teq	r4, ip
   c3af8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c3afc:	bf18      	it	ne
   c3afe:	ea95 0f0c 	teqne	r5, ip
   c3b02:	d00c      	beq.n	c3b1e <__aeabi_dmul+0x206>
   c3b04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3b08:	bf18      	it	ne
   c3b0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c3b0e:	d1d1      	bne.n	c3ab4 <__aeabi_dmul+0x19c>
   c3b10:	ea81 0103 	eor.w	r1, r1, r3
   c3b14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3b18:	f04f 0000 	mov.w	r0, #0
   c3b1c:	bd70      	pop	{r4, r5, r6, pc}
   c3b1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3b22:	bf06      	itte	eq
   c3b24:	4610      	moveq	r0, r2
   c3b26:	4619      	moveq	r1, r3
   c3b28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c3b2c:	d019      	beq.n	c3b62 <__aeabi_dmul+0x24a>
   c3b2e:	ea94 0f0c 	teq	r4, ip
   c3b32:	d102      	bne.n	c3b3a <__aeabi_dmul+0x222>
   c3b34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c3b38:	d113      	bne.n	c3b62 <__aeabi_dmul+0x24a>
   c3b3a:	ea95 0f0c 	teq	r5, ip
   c3b3e:	d105      	bne.n	c3b4c <__aeabi_dmul+0x234>
   c3b40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c3b44:	bf1c      	itt	ne
   c3b46:	4610      	movne	r0, r2
   c3b48:	4619      	movne	r1, r3
   c3b4a:	d10a      	bne.n	c3b62 <__aeabi_dmul+0x24a>
   c3b4c:	ea81 0103 	eor.w	r1, r1, r3
   c3b50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3b54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c3b58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c3b5c:	f04f 0000 	mov.w	r0, #0
   c3b60:	bd70      	pop	{r4, r5, r6, pc}
   c3b62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c3b66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c3b6a:	bd70      	pop	{r4, r5, r6, pc}

000c3b6c <__aeabi_ddiv>:
   c3b6c:	b570      	push	{r4, r5, r6, lr}
   c3b6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c3b72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3b76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3b7a:	bf1d      	ittte	ne
   c3b7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c3b80:	ea94 0f0c 	teqne	r4, ip
   c3b84:	ea95 0f0c 	teqne	r5, ip
   c3b88:	f000 f8a7 	bleq	c3cda <__aeabi_ddiv+0x16e>
   c3b8c:	eba4 0405 	sub.w	r4, r4, r5
   c3b90:	ea81 0e03 	eor.w	lr, r1, r3
   c3b94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c3b98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c3b9c:	f000 8088 	beq.w	c3cb0 <__aeabi_ddiv+0x144>
   c3ba0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c3ba4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c3ba8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c3bac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c3bb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c3bb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c3bb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c3bbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c3bc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c3bc4:	429d      	cmp	r5, r3
   c3bc6:	bf08      	it	eq
   c3bc8:	4296      	cmpeq	r6, r2
   c3bca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c3bce:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c3bd2:	d202      	bcs.n	c3bda <__aeabi_ddiv+0x6e>
   c3bd4:	085b      	lsrs	r3, r3, #1
   c3bd6:	ea4f 0232 	mov.w	r2, r2, rrx
   c3bda:	1ab6      	subs	r6, r6, r2
   c3bdc:	eb65 0503 	sbc.w	r5, r5, r3
   c3be0:	085b      	lsrs	r3, r3, #1
   c3be2:	ea4f 0232 	mov.w	r2, r2, rrx
   c3be6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c3bea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c3bee:	ebb6 0e02 	subs.w	lr, r6, r2
   c3bf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3bf6:	bf22      	ittt	cs
   c3bf8:	1ab6      	subcs	r6, r6, r2
   c3bfa:	4675      	movcs	r5, lr
   c3bfc:	ea40 000c 	orrcs.w	r0, r0, ip
   c3c00:	085b      	lsrs	r3, r3, #1
   c3c02:	ea4f 0232 	mov.w	r2, r2, rrx
   c3c06:	ebb6 0e02 	subs.w	lr, r6, r2
   c3c0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3c0e:	bf22      	ittt	cs
   c3c10:	1ab6      	subcs	r6, r6, r2
   c3c12:	4675      	movcs	r5, lr
   c3c14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c3c18:	085b      	lsrs	r3, r3, #1
   c3c1a:	ea4f 0232 	mov.w	r2, r2, rrx
   c3c1e:	ebb6 0e02 	subs.w	lr, r6, r2
   c3c22:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3c26:	bf22      	ittt	cs
   c3c28:	1ab6      	subcs	r6, r6, r2
   c3c2a:	4675      	movcs	r5, lr
   c3c2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c3c30:	085b      	lsrs	r3, r3, #1
   c3c32:	ea4f 0232 	mov.w	r2, r2, rrx
   c3c36:	ebb6 0e02 	subs.w	lr, r6, r2
   c3c3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3c3e:	bf22      	ittt	cs
   c3c40:	1ab6      	subcs	r6, r6, r2
   c3c42:	4675      	movcs	r5, lr
   c3c44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c3c48:	ea55 0e06 	orrs.w	lr, r5, r6
   c3c4c:	d018      	beq.n	c3c80 <__aeabi_ddiv+0x114>
   c3c4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c3c52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c3c56:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c3c5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c3c5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c3c62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c3c66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c3c6a:	d1c0      	bne.n	c3bee <__aeabi_ddiv+0x82>
   c3c6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c3c70:	d10b      	bne.n	c3c8a <__aeabi_ddiv+0x11e>
   c3c72:	ea41 0100 	orr.w	r1, r1, r0
   c3c76:	f04f 0000 	mov.w	r0, #0
   c3c7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c3c7e:	e7b6      	b.n	c3bee <__aeabi_ddiv+0x82>
   c3c80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c3c84:	bf04      	itt	eq
   c3c86:	4301      	orreq	r1, r0
   c3c88:	2000      	moveq	r0, #0
   c3c8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c3c8e:	bf88      	it	hi
   c3c90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c3c94:	f63f aeaf 	bhi.w	c39f6 <__aeabi_dmul+0xde>
   c3c98:	ebb5 0c03 	subs.w	ip, r5, r3
   c3c9c:	bf04      	itt	eq
   c3c9e:	ebb6 0c02 	subseq.w	ip, r6, r2
   c3ca2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c3ca6:	f150 0000 	adcs.w	r0, r0, #0
   c3caa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3cae:	bd70      	pop	{r4, r5, r6, pc}
   c3cb0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c3cb4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c3cb8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c3cbc:	bfc2      	ittt	gt
   c3cbe:	ebd4 050c 	rsbsgt	r5, r4, ip
   c3cc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c3cc6:	bd70      	popgt	{r4, r5, r6, pc}
   c3cc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3ccc:	f04f 0e00 	mov.w	lr, #0
   c3cd0:	3c01      	subs	r4, #1
   c3cd2:	e690      	b.n	c39f6 <__aeabi_dmul+0xde>
   c3cd4:	ea45 0e06 	orr.w	lr, r5, r6
   c3cd8:	e68d      	b.n	c39f6 <__aeabi_dmul+0xde>
   c3cda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c3cde:	ea94 0f0c 	teq	r4, ip
   c3ce2:	bf08      	it	eq
   c3ce4:	ea95 0f0c 	teqeq	r5, ip
   c3ce8:	f43f af3b 	beq.w	c3b62 <__aeabi_dmul+0x24a>
   c3cec:	ea94 0f0c 	teq	r4, ip
   c3cf0:	d10a      	bne.n	c3d08 <__aeabi_ddiv+0x19c>
   c3cf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3cf6:	f47f af34 	bne.w	c3b62 <__aeabi_dmul+0x24a>
   c3cfa:	ea95 0f0c 	teq	r5, ip
   c3cfe:	f47f af25 	bne.w	c3b4c <__aeabi_dmul+0x234>
   c3d02:	4610      	mov	r0, r2
   c3d04:	4619      	mov	r1, r3
   c3d06:	e72c      	b.n	c3b62 <__aeabi_dmul+0x24a>
   c3d08:	ea95 0f0c 	teq	r5, ip
   c3d0c:	d106      	bne.n	c3d1c <__aeabi_ddiv+0x1b0>
   c3d0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c3d12:	f43f aefd 	beq.w	c3b10 <__aeabi_dmul+0x1f8>
   c3d16:	4610      	mov	r0, r2
   c3d18:	4619      	mov	r1, r3
   c3d1a:	e722      	b.n	c3b62 <__aeabi_dmul+0x24a>
   c3d1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3d20:	bf18      	it	ne
   c3d22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c3d26:	f47f aec5 	bne.w	c3ab4 <__aeabi_dmul+0x19c>
   c3d2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c3d2e:	f47f af0d 	bne.w	c3b4c <__aeabi_dmul+0x234>
   c3d32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c3d36:	f47f aeeb 	bne.w	c3b10 <__aeabi_dmul+0x1f8>
   c3d3a:	e712      	b.n	c3b62 <__aeabi_dmul+0x24a>

000c3d3c <__gedf2>:
   c3d3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c3d40:	e006      	b.n	c3d50 <__cmpdf2+0x4>
   c3d42:	bf00      	nop

000c3d44 <__ledf2>:
   c3d44:	f04f 0c01 	mov.w	ip, #1
   c3d48:	e002      	b.n	c3d50 <__cmpdf2+0x4>
   c3d4a:	bf00      	nop

000c3d4c <__cmpdf2>:
   c3d4c:	f04f 0c01 	mov.w	ip, #1
   c3d50:	f84d cd04 	str.w	ip, [sp, #-4]!
   c3d54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c3d58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3d5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c3d60:	bf18      	it	ne
   c3d62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c3d66:	d01b      	beq.n	c3da0 <__cmpdf2+0x54>
   c3d68:	b001      	add	sp, #4
   c3d6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c3d6e:	bf0c      	ite	eq
   c3d70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c3d74:	ea91 0f03 	teqne	r1, r3
   c3d78:	bf02      	ittt	eq
   c3d7a:	ea90 0f02 	teqeq	r0, r2
   c3d7e:	2000      	moveq	r0, #0
   c3d80:	4770      	bxeq	lr
   c3d82:	f110 0f00 	cmn.w	r0, #0
   c3d86:	ea91 0f03 	teq	r1, r3
   c3d8a:	bf58      	it	pl
   c3d8c:	4299      	cmppl	r1, r3
   c3d8e:	bf08      	it	eq
   c3d90:	4290      	cmpeq	r0, r2
   c3d92:	bf2c      	ite	cs
   c3d94:	17d8      	asrcs	r0, r3, #31
   c3d96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c3d9a:	f040 0001 	orr.w	r0, r0, #1
   c3d9e:	4770      	bx	lr
   c3da0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c3da4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3da8:	d102      	bne.n	c3db0 <__cmpdf2+0x64>
   c3daa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c3dae:	d107      	bne.n	c3dc0 <__cmpdf2+0x74>
   c3db0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c3db4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3db8:	d1d6      	bne.n	c3d68 <__cmpdf2+0x1c>
   c3dba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c3dbe:	d0d3      	beq.n	c3d68 <__cmpdf2+0x1c>
   c3dc0:	f85d 0b04 	ldr.w	r0, [sp], #4
   c3dc4:	4770      	bx	lr
   c3dc6:	bf00      	nop

000c3dc8 <__aeabi_cdrcmple>:
   c3dc8:	4684      	mov	ip, r0
   c3dca:	4610      	mov	r0, r2
   c3dcc:	4662      	mov	r2, ip
   c3dce:	468c      	mov	ip, r1
   c3dd0:	4619      	mov	r1, r3
   c3dd2:	4663      	mov	r3, ip
   c3dd4:	e000      	b.n	c3dd8 <__aeabi_cdcmpeq>
   c3dd6:	bf00      	nop

000c3dd8 <__aeabi_cdcmpeq>:
   c3dd8:	b501      	push	{r0, lr}
   c3dda:	f7ff ffb7 	bl	c3d4c <__cmpdf2>
   c3dde:	2800      	cmp	r0, #0
   c3de0:	bf48      	it	mi
   c3de2:	f110 0f00 	cmnmi.w	r0, #0
   c3de6:	bd01      	pop	{r0, pc}

000c3de8 <__aeabi_dcmpeq>:
   c3de8:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3dec:	f7ff fff4 	bl	c3dd8 <__aeabi_cdcmpeq>
   c3df0:	bf0c      	ite	eq
   c3df2:	2001      	moveq	r0, #1
   c3df4:	2000      	movne	r0, #0
   c3df6:	f85d fb08 	ldr.w	pc, [sp], #8
   c3dfa:	bf00      	nop

000c3dfc <__aeabi_dcmplt>:
   c3dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3e00:	f7ff ffea 	bl	c3dd8 <__aeabi_cdcmpeq>
   c3e04:	bf34      	ite	cc
   c3e06:	2001      	movcc	r0, #1
   c3e08:	2000      	movcs	r0, #0
   c3e0a:	f85d fb08 	ldr.w	pc, [sp], #8
   c3e0e:	bf00      	nop

000c3e10 <__aeabi_dcmple>:
   c3e10:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3e14:	f7ff ffe0 	bl	c3dd8 <__aeabi_cdcmpeq>
   c3e18:	bf94      	ite	ls
   c3e1a:	2001      	movls	r0, #1
   c3e1c:	2000      	movhi	r0, #0
   c3e1e:	f85d fb08 	ldr.w	pc, [sp], #8
   c3e22:	bf00      	nop

000c3e24 <__aeabi_dcmpge>:
   c3e24:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3e28:	f7ff ffce 	bl	c3dc8 <__aeabi_cdrcmple>
   c3e2c:	bf94      	ite	ls
   c3e2e:	2001      	movls	r0, #1
   c3e30:	2000      	movhi	r0, #0
   c3e32:	f85d fb08 	ldr.w	pc, [sp], #8
   c3e36:	bf00      	nop

000c3e38 <__aeabi_dcmpgt>:
   c3e38:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3e3c:	f7ff ffc4 	bl	c3dc8 <__aeabi_cdrcmple>
   c3e40:	bf34      	ite	cc
   c3e42:	2001      	movcc	r0, #1
   c3e44:	2000      	movcs	r0, #0
   c3e46:	f85d fb08 	ldr.w	pc, [sp], #8
   c3e4a:	bf00      	nop

000c3e4c <__aeabi_dcmpun>:
   c3e4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c3e50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3e54:	d102      	bne.n	c3e5c <__aeabi_dcmpun+0x10>
   c3e56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c3e5a:	d10a      	bne.n	c3e72 <__aeabi_dcmpun+0x26>
   c3e5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c3e60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3e64:	d102      	bne.n	c3e6c <__aeabi_dcmpun+0x20>
   c3e66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c3e6a:	d102      	bne.n	c3e72 <__aeabi_dcmpun+0x26>
   c3e6c:	f04f 0000 	mov.w	r0, #0
   c3e70:	4770      	bx	lr
   c3e72:	f04f 0001 	mov.w	r0, #1
   c3e76:	4770      	bx	lr

000c3e78 <__aeabi_d2iz>:
   c3e78:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c3e7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c3e80:	d215      	bcs.n	c3eae <__aeabi_d2iz+0x36>
   c3e82:	d511      	bpl.n	c3ea8 <__aeabi_d2iz+0x30>
   c3e84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c3e88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c3e8c:	d912      	bls.n	c3eb4 <__aeabi_d2iz+0x3c>
   c3e8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c3e92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c3e96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c3e9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c3e9e:	fa23 f002 	lsr.w	r0, r3, r2
   c3ea2:	bf18      	it	ne
   c3ea4:	4240      	negne	r0, r0
   c3ea6:	4770      	bx	lr
   c3ea8:	f04f 0000 	mov.w	r0, #0
   c3eac:	4770      	bx	lr
   c3eae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c3eb2:	d105      	bne.n	c3ec0 <__aeabi_d2iz+0x48>
   c3eb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c3eb8:	bf08      	it	eq
   c3eba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c3ebe:	4770      	bx	lr
   c3ec0:	f04f 0000 	mov.w	r0, #0
   c3ec4:	4770      	bx	lr
   c3ec6:	bf00      	nop

000c3ec8 <__aeabi_d2uiz>:
   c3ec8:	004a      	lsls	r2, r1, #1
   c3eca:	d211      	bcs.n	c3ef0 <__aeabi_d2uiz+0x28>
   c3ecc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c3ed0:	d211      	bcs.n	c3ef6 <__aeabi_d2uiz+0x2e>
   c3ed2:	d50d      	bpl.n	c3ef0 <__aeabi_d2uiz+0x28>
   c3ed4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c3ed8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c3edc:	d40e      	bmi.n	c3efc <__aeabi_d2uiz+0x34>
   c3ede:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c3ee2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c3ee6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c3eea:	fa23 f002 	lsr.w	r0, r3, r2
   c3eee:	4770      	bx	lr
   c3ef0:	f04f 0000 	mov.w	r0, #0
   c3ef4:	4770      	bx	lr
   c3ef6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c3efa:	d102      	bne.n	c3f02 <__aeabi_d2uiz+0x3a>
   c3efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c3f00:	4770      	bx	lr
   c3f02:	f04f 0000 	mov.w	r0, #0
   c3f06:	4770      	bx	lr

000c3f08 <__aeabi_d2f>:
   c3f08:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c3f0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c3f10:	bf24      	itt	cs
   c3f12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c3f16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c3f1a:	d90d      	bls.n	c3f38 <__aeabi_d2f+0x30>
   c3f1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c3f20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c3f24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c3f28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c3f2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c3f30:	bf08      	it	eq
   c3f32:	f020 0001 	biceq.w	r0, r0, #1
   c3f36:	4770      	bx	lr
   c3f38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c3f3c:	d121      	bne.n	c3f82 <__aeabi_d2f+0x7a>
   c3f3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c3f42:	bfbc      	itt	lt
   c3f44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c3f48:	4770      	bxlt	lr
   c3f4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3f4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c3f52:	f1c2 0218 	rsb	r2, r2, #24
   c3f56:	f1c2 0c20 	rsb	ip, r2, #32
   c3f5a:	fa10 f30c 	lsls.w	r3, r0, ip
   c3f5e:	fa20 f002 	lsr.w	r0, r0, r2
   c3f62:	bf18      	it	ne
   c3f64:	f040 0001 	orrne.w	r0, r0, #1
   c3f68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c3f6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c3f70:	fa03 fc0c 	lsl.w	ip, r3, ip
   c3f74:	ea40 000c 	orr.w	r0, r0, ip
   c3f78:	fa23 f302 	lsr.w	r3, r3, r2
   c3f7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c3f80:	e7cc      	b.n	c3f1c <__aeabi_d2f+0x14>
   c3f82:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c3f86:	d107      	bne.n	c3f98 <__aeabi_d2f+0x90>
   c3f88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c3f8c:	bf1e      	ittt	ne
   c3f8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c3f92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c3f96:	4770      	bxne	lr
   c3f98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c3f9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c3fa0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c3fa4:	4770      	bx	lr
   c3fa6:	bf00      	nop

000c3fa8 <__aeabi_d2ulz>:
   c3fa8:	b5d0      	push	{r4, r6, r7, lr}
   c3faa:	4b0c      	ldr	r3, [pc, #48]	; (c3fdc <__aeabi_d2ulz+0x34>)
   c3fac:	2200      	movs	r2, #0
   c3fae:	4606      	mov	r6, r0
   c3fb0:	460f      	mov	r7, r1
   c3fb2:	f7ff fcb1 	bl	c3918 <__aeabi_dmul>
   c3fb6:	f7ff ff87 	bl	c3ec8 <__aeabi_d2uiz>
   c3fba:	4604      	mov	r4, r0
   c3fbc:	f7ff fc32 	bl	c3824 <__aeabi_ui2d>
   c3fc0:	4b07      	ldr	r3, [pc, #28]	; (c3fe0 <__aeabi_d2ulz+0x38>)
   c3fc2:	2200      	movs	r2, #0
   c3fc4:	f7ff fca8 	bl	c3918 <__aeabi_dmul>
   c3fc8:	4602      	mov	r2, r0
   c3fca:	460b      	mov	r3, r1
   c3fcc:	4630      	mov	r0, r6
   c3fce:	4639      	mov	r1, r7
   c3fd0:	f7ff faea 	bl	c35a8 <__aeabi_dsub>
   c3fd4:	f7ff ff78 	bl	c3ec8 <__aeabi_d2uiz>
   c3fd8:	4621      	mov	r1, r4
   c3fda:	bdd0      	pop	{r4, r6, r7, pc}
   c3fdc:	3df00000 	.word	0x3df00000
   c3fe0:	41f00000 	.word	0x41f00000

000c3fe4 <atexit>:
   c3fe4:	2300      	movs	r3, #0
   c3fe6:	4601      	mov	r1, r0
   c3fe8:	461a      	mov	r2, r3
   c3fea:	4618      	mov	r0, r3
   c3fec:	f001 b806 	b.w	c4ffc <__register_exitproc>

000c3ff0 <atof>:
   c3ff0:	2100      	movs	r1, #0
   c3ff2:	f000 bf6b 	b.w	c4ecc <strtod>

000c3ff6 <atoi>:
   c3ff6:	220a      	movs	r2, #10
   c3ff8:	2100      	movs	r1, #0
   c3ffa:	f000 bff5 	b.w	c4fe8 <strtol>
	...

000c4000 <isprint>:
   c4000:	4b02      	ldr	r3, [pc, #8]	; (c400c <isprint+0xc>)
   c4002:	4418      	add	r0, r3
   c4004:	7840      	ldrb	r0, [r0, #1]
   c4006:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c400a:	4770      	bx	lr
   c400c:	000c8180 	.word	0x000c8180

000c4010 <memcmp>:
   c4010:	b510      	push	{r4, lr}
   c4012:	3901      	subs	r1, #1
   c4014:	4402      	add	r2, r0
   c4016:	4290      	cmp	r0, r2
   c4018:	d101      	bne.n	c401e <memcmp+0xe>
   c401a:	2000      	movs	r0, #0
   c401c:	e005      	b.n	c402a <memcmp+0x1a>
   c401e:	7803      	ldrb	r3, [r0, #0]
   c4020:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c4024:	42a3      	cmp	r3, r4
   c4026:	d001      	beq.n	c402c <memcmp+0x1c>
   c4028:	1b18      	subs	r0, r3, r4
   c402a:	bd10      	pop	{r4, pc}
   c402c:	3001      	adds	r0, #1
   c402e:	e7f2      	b.n	c4016 <memcmp+0x6>

000c4030 <memcpy>:
   c4030:	440a      	add	r2, r1
   c4032:	4291      	cmp	r1, r2
   c4034:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c4038:	d100      	bne.n	c403c <memcpy+0xc>
   c403a:	4770      	bx	lr
   c403c:	b510      	push	{r4, lr}
   c403e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c4042:	f803 4f01 	strb.w	r4, [r3, #1]!
   c4046:	4291      	cmp	r1, r2
   c4048:	d1f9      	bne.n	c403e <memcpy+0xe>
   c404a:	bd10      	pop	{r4, pc}

000c404c <memmove>:
   c404c:	4288      	cmp	r0, r1
   c404e:	b510      	push	{r4, lr}
   c4050:	eb01 0402 	add.w	r4, r1, r2
   c4054:	d902      	bls.n	c405c <memmove+0x10>
   c4056:	4284      	cmp	r4, r0
   c4058:	4623      	mov	r3, r4
   c405a:	d807      	bhi.n	c406c <memmove+0x20>
   c405c:	1e43      	subs	r3, r0, #1
   c405e:	42a1      	cmp	r1, r4
   c4060:	d008      	beq.n	c4074 <memmove+0x28>
   c4062:	f811 2b01 	ldrb.w	r2, [r1], #1
   c4066:	f803 2f01 	strb.w	r2, [r3, #1]!
   c406a:	e7f8      	b.n	c405e <memmove+0x12>
   c406c:	4402      	add	r2, r0
   c406e:	4601      	mov	r1, r0
   c4070:	428a      	cmp	r2, r1
   c4072:	d100      	bne.n	c4076 <memmove+0x2a>
   c4074:	bd10      	pop	{r4, pc}
   c4076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c407a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c407e:	e7f7      	b.n	c4070 <memmove+0x24>

000c4080 <memset>:
   c4080:	4402      	add	r2, r0
   c4082:	4603      	mov	r3, r0
   c4084:	4293      	cmp	r3, r2
   c4086:	d100      	bne.n	c408a <memset+0xa>
   c4088:	4770      	bx	lr
   c408a:	f803 1b01 	strb.w	r1, [r3], #1
   c408e:	e7f9      	b.n	c4084 <memset+0x4>

000c4090 <srand>:
   c4090:	b538      	push	{r3, r4, r5, lr}
   c4092:	4b10      	ldr	r3, [pc, #64]	; (c40d4 <srand+0x44>)
   c4094:	681d      	ldr	r5, [r3, #0]
   c4096:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c4098:	4604      	mov	r4, r0
   c409a:	b9b3      	cbnz	r3, c40ca <srand+0x3a>
   c409c:	2018      	movs	r0, #24
   c409e:	f7f9 feb3 	bl	bde08 <malloc>
   c40a2:	4602      	mov	r2, r0
   c40a4:	63a8      	str	r0, [r5, #56]	; 0x38
   c40a6:	b920      	cbnz	r0, c40b2 <srand+0x22>
   c40a8:	4b0b      	ldr	r3, [pc, #44]	; (c40d8 <srand+0x48>)
   c40aa:	480c      	ldr	r0, [pc, #48]	; (c40dc <srand+0x4c>)
   c40ac:	2142      	movs	r1, #66	; 0x42
   c40ae:	f7f9 fefb 	bl	bdea8 <__assert_func>
   c40b2:	490b      	ldr	r1, [pc, #44]	; (c40e0 <srand+0x50>)
   c40b4:	4b0b      	ldr	r3, [pc, #44]	; (c40e4 <srand+0x54>)
   c40b6:	e9c0 1300 	strd	r1, r3, [r0]
   c40ba:	4b0b      	ldr	r3, [pc, #44]	; (c40e8 <srand+0x58>)
   c40bc:	6083      	str	r3, [r0, #8]
   c40be:	230b      	movs	r3, #11
   c40c0:	8183      	strh	r3, [r0, #12]
   c40c2:	2100      	movs	r1, #0
   c40c4:	2001      	movs	r0, #1
   c40c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c40ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c40cc:	2200      	movs	r2, #0
   c40ce:	611c      	str	r4, [r3, #16]
   c40d0:	615a      	str	r2, [r3, #20]
   c40d2:	bd38      	pop	{r3, r4, r5, pc}
   c40d4:	2003db80 	.word	0x2003db80
   c40d8:	000c80b0 	.word	0x000c80b0
   c40dc:	000c80c7 	.word	0x000c80c7
   c40e0:	abcd330e 	.word	0xabcd330e
   c40e4:	e66d1234 	.word	0xe66d1234
   c40e8:	0005deec 	.word	0x0005deec

000c40ec <strcat>:
   c40ec:	b510      	push	{r4, lr}
   c40ee:	4602      	mov	r2, r0
   c40f0:	7814      	ldrb	r4, [r2, #0]
   c40f2:	4613      	mov	r3, r2
   c40f4:	3201      	adds	r2, #1
   c40f6:	2c00      	cmp	r4, #0
   c40f8:	d1fa      	bne.n	c40f0 <strcat+0x4>
   c40fa:	3b01      	subs	r3, #1
   c40fc:	f811 2b01 	ldrb.w	r2, [r1], #1
   c4100:	f803 2f01 	strb.w	r2, [r3, #1]!
   c4104:	2a00      	cmp	r2, #0
   c4106:	d1f9      	bne.n	c40fc <strcat+0x10>
   c4108:	bd10      	pop	{r4, pc}

000c410a <strchr>:
   c410a:	b2c9      	uxtb	r1, r1
   c410c:	4603      	mov	r3, r0
   c410e:	f810 2b01 	ldrb.w	r2, [r0], #1
   c4112:	b11a      	cbz	r2, c411c <strchr+0x12>
   c4114:	428a      	cmp	r2, r1
   c4116:	d1f9      	bne.n	c410c <strchr+0x2>
   c4118:	4618      	mov	r0, r3
   c411a:	4770      	bx	lr
   c411c:	2900      	cmp	r1, #0
   c411e:	bf18      	it	ne
   c4120:	2300      	movne	r3, #0
   c4122:	e7f9      	b.n	c4118 <strchr+0xe>

000c4124 <strchrnul>:
   c4124:	b510      	push	{r4, lr}
   c4126:	4604      	mov	r4, r0
   c4128:	f7ff ffef 	bl	c410a <strchr>
   c412c:	b918      	cbnz	r0, c4136 <strchrnul+0x12>
   c412e:	4620      	mov	r0, r4
   c4130:	f000 f831 	bl	c4196 <strlen>
   c4134:	4420      	add	r0, r4
   c4136:	bd10      	pop	{r4, pc}

000c4138 <strcmp>:
   c4138:	f810 2b01 	ldrb.w	r2, [r0], #1
   c413c:	f811 3b01 	ldrb.w	r3, [r1], #1
   c4140:	2a01      	cmp	r2, #1
   c4142:	bf28      	it	cs
   c4144:	429a      	cmpcs	r2, r3
   c4146:	d0f7      	beq.n	c4138 <strcmp>
   c4148:	1ad0      	subs	r0, r2, r3
   c414a:	4770      	bx	lr

000c414c <strcpy>:
   c414c:	4603      	mov	r3, r0
   c414e:	f811 2b01 	ldrb.w	r2, [r1], #1
   c4152:	f803 2b01 	strb.w	r2, [r3], #1
   c4156:	2a00      	cmp	r2, #0
   c4158:	d1f9      	bne.n	c414e <strcpy+0x2>
   c415a:	4770      	bx	lr

000c415c <strdup>:
   c415c:	4b02      	ldr	r3, [pc, #8]	; (c4168 <strdup+0xc>)
   c415e:	4601      	mov	r1, r0
   c4160:	6818      	ldr	r0, [r3, #0]
   c4162:	f000 b803 	b.w	c416c <_strdup_r>
   c4166:	bf00      	nop
   c4168:	2003db80 	.word	0x2003db80

000c416c <_strdup_r>:
   c416c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c416e:	4604      	mov	r4, r0
   c4170:	4608      	mov	r0, r1
   c4172:	460d      	mov	r5, r1
   c4174:	f000 f80f 	bl	c4196 <strlen>
   c4178:	1c42      	adds	r2, r0, #1
   c417a:	4611      	mov	r1, r2
   c417c:	4620      	mov	r0, r4
   c417e:	9201      	str	r2, [sp, #4]
   c4180:	f7f9 fe82 	bl	bde88 <_malloc_r>
   c4184:	4604      	mov	r4, r0
   c4186:	b118      	cbz	r0, c4190 <_strdup_r+0x24>
   c4188:	9a01      	ldr	r2, [sp, #4]
   c418a:	4629      	mov	r1, r5
   c418c:	f7ff ff50 	bl	c4030 <memcpy>
   c4190:	4620      	mov	r0, r4
   c4192:	b003      	add	sp, #12
   c4194:	bd30      	pop	{r4, r5, pc}

000c4196 <strlen>:
   c4196:	4603      	mov	r3, r0
   c4198:	f813 2b01 	ldrb.w	r2, [r3], #1
   c419c:	2a00      	cmp	r2, #0
   c419e:	d1fb      	bne.n	c4198 <strlen+0x2>
   c41a0:	1a18      	subs	r0, r3, r0
   c41a2:	3801      	subs	r0, #1
   c41a4:	4770      	bx	lr
	...

000c41a8 <strlwr>:
   c41a8:	b510      	push	{r4, lr}
   c41aa:	4c07      	ldr	r4, [pc, #28]	; (c41c8 <strlwr+0x20>)
   c41ac:	1e42      	subs	r2, r0, #1
   c41ae:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c41b2:	b903      	cbnz	r3, c41b6 <strlwr+0xe>
   c41b4:	bd10      	pop	{r4, pc}
   c41b6:	5ce1      	ldrb	r1, [r4, r3]
   c41b8:	f001 0103 	and.w	r1, r1, #3
   c41bc:	2901      	cmp	r1, #1
   c41be:	bf08      	it	eq
   c41c0:	3320      	addeq	r3, #32
   c41c2:	7013      	strb	r3, [r2, #0]
   c41c4:	e7f3      	b.n	c41ae <strlwr+0x6>
   c41c6:	bf00      	nop
   c41c8:	000c8181 	.word	0x000c8181

000c41cc <strncmp>:
   c41cc:	b510      	push	{r4, lr}
   c41ce:	b17a      	cbz	r2, c41f0 <strncmp+0x24>
   c41d0:	4603      	mov	r3, r0
   c41d2:	3901      	subs	r1, #1
   c41d4:	1884      	adds	r4, r0, r2
   c41d6:	f813 0b01 	ldrb.w	r0, [r3], #1
   c41da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c41de:	4290      	cmp	r0, r2
   c41e0:	d101      	bne.n	c41e6 <strncmp+0x1a>
   c41e2:	42a3      	cmp	r3, r4
   c41e4:	d101      	bne.n	c41ea <strncmp+0x1e>
   c41e6:	1a80      	subs	r0, r0, r2
   c41e8:	bd10      	pop	{r4, pc}
   c41ea:	2800      	cmp	r0, #0
   c41ec:	d1f3      	bne.n	c41d6 <strncmp+0xa>
   c41ee:	e7fa      	b.n	c41e6 <strncmp+0x1a>
   c41f0:	4610      	mov	r0, r2
   c41f2:	e7f9      	b.n	c41e8 <strncmp+0x1c>

000c41f4 <strncpy>:
   c41f4:	b510      	push	{r4, lr}
   c41f6:	3901      	subs	r1, #1
   c41f8:	4603      	mov	r3, r0
   c41fa:	b132      	cbz	r2, c420a <strncpy+0x16>
   c41fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c4200:	f803 4b01 	strb.w	r4, [r3], #1
   c4204:	3a01      	subs	r2, #1
   c4206:	2c00      	cmp	r4, #0
   c4208:	d1f7      	bne.n	c41fa <strncpy+0x6>
   c420a:	441a      	add	r2, r3
   c420c:	2100      	movs	r1, #0
   c420e:	4293      	cmp	r3, r2
   c4210:	d100      	bne.n	c4214 <strncpy+0x20>
   c4212:	bd10      	pop	{r4, pc}
   c4214:	f803 1b01 	strb.w	r1, [r3], #1
   c4218:	e7f9      	b.n	c420e <strncpy+0x1a>

000c421a <strnlen>:
   c421a:	b510      	push	{r4, lr}
   c421c:	4602      	mov	r2, r0
   c421e:	4401      	add	r1, r0
   c4220:	428a      	cmp	r2, r1
   c4222:	4613      	mov	r3, r2
   c4224:	d003      	beq.n	c422e <strnlen+0x14>
   c4226:	781c      	ldrb	r4, [r3, #0]
   c4228:	3201      	adds	r2, #1
   c422a:	2c00      	cmp	r4, #0
   c422c:	d1f8      	bne.n	c4220 <strnlen+0x6>
   c422e:	1a18      	subs	r0, r3, r0
   c4230:	bd10      	pop	{r4, pc}

000c4232 <strrchr>:
   c4232:	b538      	push	{r3, r4, r5, lr}
   c4234:	4603      	mov	r3, r0
   c4236:	460c      	mov	r4, r1
   c4238:	b969      	cbnz	r1, c4256 <strrchr+0x24>
   c423a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c423e:	f7ff bf64 	b.w	c410a <strchr>
   c4242:	1c43      	adds	r3, r0, #1
   c4244:	4605      	mov	r5, r0
   c4246:	4621      	mov	r1, r4
   c4248:	4618      	mov	r0, r3
   c424a:	f7ff ff5e 	bl	c410a <strchr>
   c424e:	2800      	cmp	r0, #0
   c4250:	d1f7      	bne.n	c4242 <strrchr+0x10>
   c4252:	4628      	mov	r0, r5
   c4254:	bd38      	pop	{r3, r4, r5, pc}
   c4256:	2500      	movs	r5, #0
   c4258:	e7f5      	b.n	c4246 <strrchr+0x14>

000c425a <strstr>:
   c425a:	780a      	ldrb	r2, [r1, #0]
   c425c:	b570      	push	{r4, r5, r6, lr}
   c425e:	b96a      	cbnz	r2, c427c <strstr+0x22>
   c4260:	bd70      	pop	{r4, r5, r6, pc}
   c4262:	429a      	cmp	r2, r3
   c4264:	d109      	bne.n	c427a <strstr+0x20>
   c4266:	460c      	mov	r4, r1
   c4268:	4605      	mov	r5, r0
   c426a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c426e:	2b00      	cmp	r3, #0
   c4270:	d0f6      	beq.n	c4260 <strstr+0x6>
   c4272:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c4276:	429e      	cmp	r6, r3
   c4278:	d0f7      	beq.n	c426a <strstr+0x10>
   c427a:	3001      	adds	r0, #1
   c427c:	7803      	ldrb	r3, [r0, #0]
   c427e:	2b00      	cmp	r3, #0
   c4280:	d1ef      	bne.n	c4262 <strstr+0x8>
   c4282:	4618      	mov	r0, r3
   c4284:	e7ec      	b.n	c4260 <strstr+0x6>

000c4286 <sulp>:
   c4286:	b570      	push	{r4, r5, r6, lr}
   c4288:	4604      	mov	r4, r0
   c428a:	460d      	mov	r5, r1
   c428c:	ec45 4b10 	vmov	d0, r4, r5
   c4290:	4616      	mov	r6, r2
   c4292:	f001 fe0d 	bl	c5eb0 <__ulp>
   c4296:	ec51 0b10 	vmov	r0, r1, d0
   c429a:	b17e      	cbz	r6, c42bc <sulp+0x36>
   c429c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c42a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c42a4:	2b00      	cmp	r3, #0
   c42a6:	dd09      	ble.n	c42bc <sulp+0x36>
   c42a8:	051b      	lsls	r3, r3, #20
   c42aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c42ae:	2400      	movs	r4, #0
   c42b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c42b4:	4622      	mov	r2, r4
   c42b6:	462b      	mov	r3, r5
   c42b8:	f7ff fb2e 	bl	c3918 <__aeabi_dmul>
   c42bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000c42c0 <_strtod_l>:
   c42c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c42c4:	ed2d 8b02 	vpush	{d8}
   c42c8:	b09d      	sub	sp, #116	; 0x74
   c42ca:	461f      	mov	r7, r3
   c42cc:	2300      	movs	r3, #0
   c42ce:	9318      	str	r3, [sp, #96]	; 0x60
   c42d0:	4ba2      	ldr	r3, [pc, #648]	; (c455c <_strtod_l+0x29c>)
   c42d2:	9213      	str	r2, [sp, #76]	; 0x4c
   c42d4:	681b      	ldr	r3, [r3, #0]
   c42d6:	9305      	str	r3, [sp, #20]
   c42d8:	4604      	mov	r4, r0
   c42da:	4618      	mov	r0, r3
   c42dc:	4688      	mov	r8, r1
   c42de:	f7ff ff5a 	bl	c4196 <strlen>
   c42e2:	f04f 0a00 	mov.w	sl, #0
   c42e6:	4605      	mov	r5, r0
   c42e8:	f04f 0b00 	mov.w	fp, #0
   c42ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c42f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c42f2:	781a      	ldrb	r2, [r3, #0]
   c42f4:	2a2b      	cmp	r2, #43	; 0x2b
   c42f6:	d04e      	beq.n	c4396 <_strtod_l+0xd6>
   c42f8:	d83b      	bhi.n	c4372 <_strtod_l+0xb2>
   c42fa:	2a0d      	cmp	r2, #13
   c42fc:	d834      	bhi.n	c4368 <_strtod_l+0xa8>
   c42fe:	2a08      	cmp	r2, #8
   c4300:	d834      	bhi.n	c436c <_strtod_l+0xac>
   c4302:	2a00      	cmp	r2, #0
   c4304:	d03e      	beq.n	c4384 <_strtod_l+0xc4>
   c4306:	2300      	movs	r3, #0
   c4308:	930a      	str	r3, [sp, #40]	; 0x28
   c430a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c430c:	7833      	ldrb	r3, [r6, #0]
   c430e:	2b30      	cmp	r3, #48	; 0x30
   c4310:	f040 80b0 	bne.w	c4474 <_strtod_l+0x1b4>
   c4314:	7873      	ldrb	r3, [r6, #1]
   c4316:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c431a:	2b58      	cmp	r3, #88	; 0x58
   c431c:	d168      	bne.n	c43f0 <_strtod_l+0x130>
   c431e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c4320:	9301      	str	r3, [sp, #4]
   c4322:	ab18      	add	r3, sp, #96	; 0x60
   c4324:	9702      	str	r7, [sp, #8]
   c4326:	9300      	str	r3, [sp, #0]
   c4328:	4a8d      	ldr	r2, [pc, #564]	; (c4560 <_strtod_l+0x2a0>)
   c432a:	ab19      	add	r3, sp, #100	; 0x64
   c432c:	a917      	add	r1, sp, #92	; 0x5c
   c432e:	4620      	mov	r0, r4
   c4330:	f000 ff2e 	bl	c5190 <__gethex>
   c4334:	f010 0707 	ands.w	r7, r0, #7
   c4338:	4605      	mov	r5, r0
   c433a:	d005      	beq.n	c4348 <_strtod_l+0x88>
   c433c:	2f06      	cmp	r7, #6
   c433e:	d12c      	bne.n	c439a <_strtod_l+0xda>
   c4340:	3601      	adds	r6, #1
   c4342:	2300      	movs	r3, #0
   c4344:	9617      	str	r6, [sp, #92]	; 0x5c
   c4346:	930a      	str	r3, [sp, #40]	; 0x28
   c4348:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c434a:	2b00      	cmp	r3, #0
   c434c:	f040 8590 	bne.w	c4e70 <_strtod_l+0xbb0>
   c4350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c4352:	b1eb      	cbz	r3, c4390 <_strtod_l+0xd0>
   c4354:	4652      	mov	r2, sl
   c4356:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c435a:	ec43 2b10 	vmov	d0, r2, r3
   c435e:	b01d      	add	sp, #116	; 0x74
   c4360:	ecbd 8b02 	vpop	{d8}
   c4364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4368:	2a20      	cmp	r2, #32
   c436a:	d1cc      	bne.n	c4306 <_strtod_l+0x46>
   c436c:	3301      	adds	r3, #1
   c436e:	9317      	str	r3, [sp, #92]	; 0x5c
   c4370:	e7be      	b.n	c42f0 <_strtod_l+0x30>
   c4372:	2a2d      	cmp	r2, #45	; 0x2d
   c4374:	d1c7      	bne.n	c4306 <_strtod_l+0x46>
   c4376:	2201      	movs	r2, #1
   c4378:	920a      	str	r2, [sp, #40]	; 0x28
   c437a:	1c5a      	adds	r2, r3, #1
   c437c:	9217      	str	r2, [sp, #92]	; 0x5c
   c437e:	785b      	ldrb	r3, [r3, #1]
   c4380:	2b00      	cmp	r3, #0
   c4382:	d1c2      	bne.n	c430a <_strtod_l+0x4a>
   c4384:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c4386:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c438a:	2b00      	cmp	r3, #0
   c438c:	f040 856e 	bne.w	c4e6c <_strtod_l+0xbac>
   c4390:	4652      	mov	r2, sl
   c4392:	465b      	mov	r3, fp
   c4394:	e7e1      	b.n	c435a <_strtod_l+0x9a>
   c4396:	2200      	movs	r2, #0
   c4398:	e7ee      	b.n	c4378 <_strtod_l+0xb8>
   c439a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c439c:	b13a      	cbz	r2, c43ae <_strtod_l+0xee>
   c439e:	2135      	movs	r1, #53	; 0x35
   c43a0:	a81a      	add	r0, sp, #104	; 0x68
   c43a2:	f001 fe90 	bl	c60c6 <__copybits>
   c43a6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c43a8:	4620      	mov	r0, r4
   c43aa:	f001 fa4f 	bl	c584c <_Bfree>
   c43ae:	3f01      	subs	r7, #1
   c43b0:	2f04      	cmp	r7, #4
   c43b2:	d806      	bhi.n	c43c2 <_strtod_l+0x102>
   c43b4:	e8df f007 	tbb	[pc, r7]
   c43b8:	1714030a 	.word	0x1714030a
   c43bc:	0a          	.byte	0x0a
   c43bd:	00          	.byte	0x00
   c43be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c43c2:	0728      	lsls	r0, r5, #28
   c43c4:	d5c0      	bpl.n	c4348 <_strtod_l+0x88>
   c43c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c43ca:	e7bd      	b.n	c4348 <_strtod_l+0x88>
   c43cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c43d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c43d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c43d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c43da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c43de:	e7f0      	b.n	c43c2 <_strtod_l+0x102>
   c43e0:	f8df b180 	ldr.w	fp, [pc, #384]	; c4564 <_strtod_l+0x2a4>
   c43e4:	e7ed      	b.n	c43c2 <_strtod_l+0x102>
   c43e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c43ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c43ee:	e7e8      	b.n	c43c2 <_strtod_l+0x102>
   c43f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c43f2:	1c5a      	adds	r2, r3, #1
   c43f4:	9217      	str	r2, [sp, #92]	; 0x5c
   c43f6:	785b      	ldrb	r3, [r3, #1]
   c43f8:	2b30      	cmp	r3, #48	; 0x30
   c43fa:	d0f9      	beq.n	c43f0 <_strtod_l+0x130>
   c43fc:	2b00      	cmp	r3, #0
   c43fe:	d0a3      	beq.n	c4348 <_strtod_l+0x88>
   c4400:	2301      	movs	r3, #1
   c4402:	f04f 0900 	mov.w	r9, #0
   c4406:	9304      	str	r3, [sp, #16]
   c4408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c440a:	9308      	str	r3, [sp, #32]
   c440c:	f8cd 901c 	str.w	r9, [sp, #28]
   c4410:	464f      	mov	r7, r9
   c4412:	220a      	movs	r2, #10
   c4414:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c4416:	7806      	ldrb	r6, [r0, #0]
   c4418:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c441c:	b2d9      	uxtb	r1, r3
   c441e:	2909      	cmp	r1, #9
   c4420:	d92a      	bls.n	c4478 <_strtod_l+0x1b8>
   c4422:	9905      	ldr	r1, [sp, #20]
   c4424:	462a      	mov	r2, r5
   c4426:	f7ff fed1 	bl	c41cc <strncmp>
   c442a:	b398      	cbz	r0, c4494 <_strtod_l+0x1d4>
   c442c:	2000      	movs	r0, #0
   c442e:	4632      	mov	r2, r6
   c4430:	463d      	mov	r5, r7
   c4432:	9005      	str	r0, [sp, #20]
   c4434:	4603      	mov	r3, r0
   c4436:	2a65      	cmp	r2, #101	; 0x65
   c4438:	d001      	beq.n	c443e <_strtod_l+0x17e>
   c443a:	2a45      	cmp	r2, #69	; 0x45
   c443c:	d118      	bne.n	c4470 <_strtod_l+0x1b0>
   c443e:	b91d      	cbnz	r5, c4448 <_strtod_l+0x188>
   c4440:	9a04      	ldr	r2, [sp, #16]
   c4442:	4302      	orrs	r2, r0
   c4444:	d09e      	beq.n	c4384 <_strtod_l+0xc4>
   c4446:	2500      	movs	r5, #0
   c4448:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c444c:	f108 0201 	add.w	r2, r8, #1
   c4450:	9217      	str	r2, [sp, #92]	; 0x5c
   c4452:	f898 2001 	ldrb.w	r2, [r8, #1]
   c4456:	2a2b      	cmp	r2, #43	; 0x2b
   c4458:	d075      	beq.n	c4546 <_strtod_l+0x286>
   c445a:	2a2d      	cmp	r2, #45	; 0x2d
   c445c:	d07b      	beq.n	c4556 <_strtod_l+0x296>
   c445e:	f04f 0c00 	mov.w	ip, #0
   c4462:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c4466:	2909      	cmp	r1, #9
   c4468:	f240 8082 	bls.w	c4570 <_strtod_l+0x2b0>
   c446c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4470:	2600      	movs	r6, #0
   c4472:	e09d      	b.n	c45b0 <_strtod_l+0x2f0>
   c4474:	2300      	movs	r3, #0
   c4476:	e7c4      	b.n	c4402 <_strtod_l+0x142>
   c4478:	2f08      	cmp	r7, #8
   c447a:	bfd8      	it	le
   c447c:	9907      	ldrle	r1, [sp, #28]
   c447e:	f100 0001 	add.w	r0, r0, #1
   c4482:	bfda      	itte	le
   c4484:	fb02 3301 	mlale	r3, r2, r1, r3
   c4488:	9307      	strle	r3, [sp, #28]
   c448a:	fb02 3909 	mlagt	r9, r2, r9, r3
   c448e:	3701      	adds	r7, #1
   c4490:	9017      	str	r0, [sp, #92]	; 0x5c
   c4492:	e7bf      	b.n	c4414 <_strtod_l+0x154>
   c4494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4496:	195a      	adds	r2, r3, r5
   c4498:	9217      	str	r2, [sp, #92]	; 0x5c
   c449a:	5d5a      	ldrb	r2, [r3, r5]
   c449c:	2f00      	cmp	r7, #0
   c449e:	d037      	beq.n	c4510 <_strtod_l+0x250>
   c44a0:	9005      	str	r0, [sp, #20]
   c44a2:	463d      	mov	r5, r7
   c44a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c44a8:	2b09      	cmp	r3, #9
   c44aa:	d912      	bls.n	c44d2 <_strtod_l+0x212>
   c44ac:	2301      	movs	r3, #1
   c44ae:	e7c2      	b.n	c4436 <_strtod_l+0x176>
   c44b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c44b2:	1c5a      	adds	r2, r3, #1
   c44b4:	9217      	str	r2, [sp, #92]	; 0x5c
   c44b6:	785a      	ldrb	r2, [r3, #1]
   c44b8:	3001      	adds	r0, #1
   c44ba:	2a30      	cmp	r2, #48	; 0x30
   c44bc:	d0f8      	beq.n	c44b0 <_strtod_l+0x1f0>
   c44be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c44c2:	2b08      	cmp	r3, #8
   c44c4:	f200 84d9 	bhi.w	c4e7a <_strtod_l+0xbba>
   c44c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c44ca:	9005      	str	r0, [sp, #20]
   c44cc:	2000      	movs	r0, #0
   c44ce:	9308      	str	r3, [sp, #32]
   c44d0:	4605      	mov	r5, r0
   c44d2:	3a30      	subs	r2, #48	; 0x30
   c44d4:	f100 0301 	add.w	r3, r0, #1
   c44d8:	d014      	beq.n	c4504 <_strtod_l+0x244>
   c44da:	9905      	ldr	r1, [sp, #20]
   c44dc:	4419      	add	r1, r3
   c44de:	9105      	str	r1, [sp, #20]
   c44e0:	462b      	mov	r3, r5
   c44e2:	eb00 0e05 	add.w	lr, r0, r5
   c44e6:	210a      	movs	r1, #10
   c44e8:	4573      	cmp	r3, lr
   c44ea:	d113      	bne.n	c4514 <_strtod_l+0x254>
   c44ec:	182b      	adds	r3, r5, r0
   c44ee:	2b08      	cmp	r3, #8
   c44f0:	f105 0501 	add.w	r5, r5, #1
   c44f4:	4405      	add	r5, r0
   c44f6:	dc1c      	bgt.n	c4532 <_strtod_l+0x272>
   c44f8:	9907      	ldr	r1, [sp, #28]
   c44fa:	230a      	movs	r3, #10
   c44fc:	fb03 2301 	mla	r3, r3, r1, r2
   c4500:	9307      	str	r3, [sp, #28]
   c4502:	2300      	movs	r3, #0
   c4504:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4506:	1c51      	adds	r1, r2, #1
   c4508:	9117      	str	r1, [sp, #92]	; 0x5c
   c450a:	7852      	ldrb	r2, [r2, #1]
   c450c:	4618      	mov	r0, r3
   c450e:	e7c9      	b.n	c44a4 <_strtod_l+0x1e4>
   c4510:	4638      	mov	r0, r7
   c4512:	e7d2      	b.n	c44ba <_strtod_l+0x1fa>
   c4514:	2b08      	cmp	r3, #8
   c4516:	dc04      	bgt.n	c4522 <_strtod_l+0x262>
   c4518:	9e07      	ldr	r6, [sp, #28]
   c451a:	434e      	muls	r6, r1
   c451c:	9607      	str	r6, [sp, #28]
   c451e:	3301      	adds	r3, #1
   c4520:	e7e2      	b.n	c44e8 <_strtod_l+0x228>
   c4522:	f103 0c01 	add.w	ip, r3, #1
   c4526:	f1bc 0f10 	cmp.w	ip, #16
   c452a:	bfd8      	it	le
   c452c:	fb01 f909 	mulle.w	r9, r1, r9
   c4530:	e7f5      	b.n	c451e <_strtod_l+0x25e>
   c4532:	2d10      	cmp	r5, #16
   c4534:	bfdc      	itt	le
   c4536:	230a      	movle	r3, #10
   c4538:	fb03 2909 	mlale	r9, r3, r9, r2
   c453c:	e7e1      	b.n	c4502 <_strtod_l+0x242>
   c453e:	2300      	movs	r3, #0
   c4540:	9305      	str	r3, [sp, #20]
   c4542:	2301      	movs	r3, #1
   c4544:	e77c      	b.n	c4440 <_strtod_l+0x180>
   c4546:	f04f 0c00 	mov.w	ip, #0
   c454a:	f108 0202 	add.w	r2, r8, #2
   c454e:	9217      	str	r2, [sp, #92]	; 0x5c
   c4550:	f898 2002 	ldrb.w	r2, [r8, #2]
   c4554:	e785      	b.n	c4462 <_strtod_l+0x1a2>
   c4556:	f04f 0c01 	mov.w	ip, #1
   c455a:	e7f6      	b.n	c454a <_strtod_l+0x28a>
   c455c:	000c82f4 	.word	0x000c82f4
   c4560:	000c812c 	.word	0x000c812c
   c4564:	7ff00000 	.word	0x7ff00000
   c4568:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c456a:	1c51      	adds	r1, r2, #1
   c456c:	9117      	str	r1, [sp, #92]	; 0x5c
   c456e:	7852      	ldrb	r2, [r2, #1]
   c4570:	2a30      	cmp	r2, #48	; 0x30
   c4572:	d0f9      	beq.n	c4568 <_strtod_l+0x2a8>
   c4574:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c4578:	2908      	cmp	r1, #8
   c457a:	f63f af79 	bhi.w	c4470 <_strtod_l+0x1b0>
   c457e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c4582:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4584:	9206      	str	r2, [sp, #24]
   c4586:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4588:	1c51      	adds	r1, r2, #1
   c458a:	9117      	str	r1, [sp, #92]	; 0x5c
   c458c:	7852      	ldrb	r2, [r2, #1]
   c458e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c4592:	2e09      	cmp	r6, #9
   c4594:	d937      	bls.n	c4606 <_strtod_l+0x346>
   c4596:	9e06      	ldr	r6, [sp, #24]
   c4598:	1b89      	subs	r1, r1, r6
   c459a:	2908      	cmp	r1, #8
   c459c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c45a0:	dc02      	bgt.n	c45a8 <_strtod_l+0x2e8>
   c45a2:	4576      	cmp	r6, lr
   c45a4:	bfa8      	it	ge
   c45a6:	4676      	movge	r6, lr
   c45a8:	f1bc 0f00 	cmp.w	ip, #0
   c45ac:	d000      	beq.n	c45b0 <_strtod_l+0x2f0>
   c45ae:	4276      	negs	r6, r6
   c45b0:	2d00      	cmp	r5, #0
   c45b2:	d14d      	bne.n	c4650 <_strtod_l+0x390>
   c45b4:	9904      	ldr	r1, [sp, #16]
   c45b6:	4301      	orrs	r1, r0
   c45b8:	f47f aec6 	bne.w	c4348 <_strtod_l+0x88>
   c45bc:	2b00      	cmp	r3, #0
   c45be:	f47f aee1 	bne.w	c4384 <_strtod_l+0xc4>
   c45c2:	2a69      	cmp	r2, #105	; 0x69
   c45c4:	d027      	beq.n	c4616 <_strtod_l+0x356>
   c45c6:	dc24      	bgt.n	c4612 <_strtod_l+0x352>
   c45c8:	2a49      	cmp	r2, #73	; 0x49
   c45ca:	d024      	beq.n	c4616 <_strtod_l+0x356>
   c45cc:	2a4e      	cmp	r2, #78	; 0x4e
   c45ce:	f47f aed9 	bne.w	c4384 <_strtod_l+0xc4>
   c45d2:	499f      	ldr	r1, [pc, #636]	; (c4850 <_strtod_l+0x590>)
   c45d4:	a817      	add	r0, sp, #92	; 0x5c
   c45d6:	f001 f833 	bl	c5640 <__match>
   c45da:	2800      	cmp	r0, #0
   c45dc:	f43f aed2 	beq.w	c4384 <_strtod_l+0xc4>
   c45e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c45e2:	781b      	ldrb	r3, [r3, #0]
   c45e4:	2b28      	cmp	r3, #40	; 0x28
   c45e6:	d12d      	bne.n	c4644 <_strtod_l+0x384>
   c45e8:	499a      	ldr	r1, [pc, #616]	; (c4854 <_strtod_l+0x594>)
   c45ea:	aa1a      	add	r2, sp, #104	; 0x68
   c45ec:	a817      	add	r0, sp, #92	; 0x5c
   c45ee:	f001 f83b 	bl	c5668 <__hexnan>
   c45f2:	2805      	cmp	r0, #5
   c45f4:	d126      	bne.n	c4644 <_strtod_l+0x384>
   c45f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c45f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c45fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c4600:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c4604:	e6a0      	b.n	c4348 <_strtod_l+0x88>
   c4606:	210a      	movs	r1, #10
   c4608:	fb01 2e0e 	mla	lr, r1, lr, r2
   c460c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c4610:	e7b9      	b.n	c4586 <_strtod_l+0x2c6>
   c4612:	2a6e      	cmp	r2, #110	; 0x6e
   c4614:	e7db      	b.n	c45ce <_strtod_l+0x30e>
   c4616:	4990      	ldr	r1, [pc, #576]	; (c4858 <_strtod_l+0x598>)
   c4618:	a817      	add	r0, sp, #92	; 0x5c
   c461a:	f001 f811 	bl	c5640 <__match>
   c461e:	2800      	cmp	r0, #0
   c4620:	f43f aeb0 	beq.w	c4384 <_strtod_l+0xc4>
   c4624:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4626:	498d      	ldr	r1, [pc, #564]	; (c485c <_strtod_l+0x59c>)
   c4628:	3b01      	subs	r3, #1
   c462a:	a817      	add	r0, sp, #92	; 0x5c
   c462c:	9317      	str	r3, [sp, #92]	; 0x5c
   c462e:	f001 f807 	bl	c5640 <__match>
   c4632:	b910      	cbnz	r0, c463a <_strtod_l+0x37a>
   c4634:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4636:	3301      	adds	r3, #1
   c4638:	9317      	str	r3, [sp, #92]	; 0x5c
   c463a:	f8df b230 	ldr.w	fp, [pc, #560]	; c486c <_strtod_l+0x5ac>
   c463e:	f04f 0a00 	mov.w	sl, #0
   c4642:	e681      	b.n	c4348 <_strtod_l+0x88>
   c4644:	4886      	ldr	r0, [pc, #536]	; (c4860 <_strtod_l+0x5a0>)
   c4646:	f001 fd93 	bl	c6170 <nan>
   c464a:	ec5b ab10 	vmov	sl, fp, d0
   c464e:	e67b      	b.n	c4348 <_strtod_l+0x88>
   c4650:	9b05      	ldr	r3, [sp, #20]
   c4652:	9807      	ldr	r0, [sp, #28]
   c4654:	1af3      	subs	r3, r6, r3
   c4656:	2f00      	cmp	r7, #0
   c4658:	bf08      	it	eq
   c465a:	462f      	moveq	r7, r5
   c465c:	2d10      	cmp	r5, #16
   c465e:	9306      	str	r3, [sp, #24]
   c4660:	46a8      	mov	r8, r5
   c4662:	bfa8      	it	ge
   c4664:	f04f 0810 	movge.w	r8, #16
   c4668:	f7ff f8dc 	bl	c3824 <__aeabi_ui2d>
   c466c:	2d09      	cmp	r5, #9
   c466e:	4682      	mov	sl, r0
   c4670:	468b      	mov	fp, r1
   c4672:	dd13      	ble.n	c469c <_strtod_l+0x3dc>
   c4674:	4b7b      	ldr	r3, [pc, #492]	; (c4864 <_strtod_l+0x5a4>)
   c4676:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c467a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c467e:	f7ff f94b 	bl	c3918 <__aeabi_dmul>
   c4682:	4682      	mov	sl, r0
   c4684:	4648      	mov	r0, r9
   c4686:	468b      	mov	fp, r1
   c4688:	f7ff f8cc 	bl	c3824 <__aeabi_ui2d>
   c468c:	4602      	mov	r2, r0
   c468e:	460b      	mov	r3, r1
   c4690:	4650      	mov	r0, sl
   c4692:	4659      	mov	r1, fp
   c4694:	f7fe ff8a 	bl	c35ac <__adddf3>
   c4698:	4682      	mov	sl, r0
   c469a:	468b      	mov	fp, r1
   c469c:	2d0f      	cmp	r5, #15
   c469e:	dc38      	bgt.n	c4712 <_strtod_l+0x452>
   c46a0:	9b06      	ldr	r3, [sp, #24]
   c46a2:	2b00      	cmp	r3, #0
   c46a4:	f43f ae50 	beq.w	c4348 <_strtod_l+0x88>
   c46a8:	dd24      	ble.n	c46f4 <_strtod_l+0x434>
   c46aa:	2b16      	cmp	r3, #22
   c46ac:	dc0b      	bgt.n	c46c6 <_strtod_l+0x406>
   c46ae:	496d      	ldr	r1, [pc, #436]	; (c4864 <_strtod_l+0x5a4>)
   c46b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c46b4:	e9d1 0100 	ldrd	r0, r1, [r1]
   c46b8:	4652      	mov	r2, sl
   c46ba:	465b      	mov	r3, fp
   c46bc:	f7ff f92c 	bl	c3918 <__aeabi_dmul>
   c46c0:	4682      	mov	sl, r0
   c46c2:	468b      	mov	fp, r1
   c46c4:	e640      	b.n	c4348 <_strtod_l+0x88>
   c46c6:	9a06      	ldr	r2, [sp, #24]
   c46c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c46cc:	4293      	cmp	r3, r2
   c46ce:	db20      	blt.n	c4712 <_strtod_l+0x452>
   c46d0:	4c64      	ldr	r4, [pc, #400]	; (c4864 <_strtod_l+0x5a4>)
   c46d2:	f1c5 050f 	rsb	r5, r5, #15
   c46d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c46da:	4652      	mov	r2, sl
   c46dc:	465b      	mov	r3, fp
   c46de:	e9d1 0100 	ldrd	r0, r1, [r1]
   c46e2:	f7ff f919 	bl	c3918 <__aeabi_dmul>
   c46e6:	9b06      	ldr	r3, [sp, #24]
   c46e8:	1b5d      	subs	r5, r3, r5
   c46ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c46ee:	e9d4 2300 	ldrd	r2, r3, [r4]
   c46f2:	e7e3      	b.n	c46bc <_strtod_l+0x3fc>
   c46f4:	9b06      	ldr	r3, [sp, #24]
   c46f6:	3316      	adds	r3, #22
   c46f8:	db0b      	blt.n	c4712 <_strtod_l+0x452>
   c46fa:	9b05      	ldr	r3, [sp, #20]
   c46fc:	1b9e      	subs	r6, r3, r6
   c46fe:	4b59      	ldr	r3, [pc, #356]	; (c4864 <_strtod_l+0x5a4>)
   c4700:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c4704:	e9d6 2300 	ldrd	r2, r3, [r6]
   c4708:	4650      	mov	r0, sl
   c470a:	4659      	mov	r1, fp
   c470c:	f7ff fa2e 	bl	c3b6c <__aeabi_ddiv>
   c4710:	e7d6      	b.n	c46c0 <_strtod_l+0x400>
   c4712:	9b06      	ldr	r3, [sp, #24]
   c4714:	eba5 0808 	sub.w	r8, r5, r8
   c4718:	4498      	add	r8, r3
   c471a:	f1b8 0f00 	cmp.w	r8, #0
   c471e:	dd74      	ble.n	c480a <_strtod_l+0x54a>
   c4720:	f018 030f 	ands.w	r3, r8, #15
   c4724:	d00a      	beq.n	c473c <_strtod_l+0x47c>
   c4726:	494f      	ldr	r1, [pc, #316]	; (c4864 <_strtod_l+0x5a4>)
   c4728:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c472c:	4652      	mov	r2, sl
   c472e:	465b      	mov	r3, fp
   c4730:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4734:	f7ff f8f0 	bl	c3918 <__aeabi_dmul>
   c4738:	4682      	mov	sl, r0
   c473a:	468b      	mov	fp, r1
   c473c:	f038 080f 	bics.w	r8, r8, #15
   c4740:	d04f      	beq.n	c47e2 <_strtod_l+0x522>
   c4742:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c4746:	dd22      	ble.n	c478e <_strtod_l+0x4ce>
   c4748:	2500      	movs	r5, #0
   c474a:	462e      	mov	r6, r5
   c474c:	9507      	str	r5, [sp, #28]
   c474e:	9505      	str	r5, [sp, #20]
   c4750:	2322      	movs	r3, #34	; 0x22
   c4752:	f8df b118 	ldr.w	fp, [pc, #280]	; c486c <_strtod_l+0x5ac>
   c4756:	6023      	str	r3, [r4, #0]
   c4758:	f04f 0a00 	mov.w	sl, #0
   c475c:	9b07      	ldr	r3, [sp, #28]
   c475e:	2b00      	cmp	r3, #0
   c4760:	f43f adf2 	beq.w	c4348 <_strtod_l+0x88>
   c4764:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4766:	4620      	mov	r0, r4
   c4768:	f001 f870 	bl	c584c <_Bfree>
   c476c:	9905      	ldr	r1, [sp, #20]
   c476e:	4620      	mov	r0, r4
   c4770:	f001 f86c 	bl	c584c <_Bfree>
   c4774:	4631      	mov	r1, r6
   c4776:	4620      	mov	r0, r4
   c4778:	f001 f868 	bl	c584c <_Bfree>
   c477c:	9907      	ldr	r1, [sp, #28]
   c477e:	4620      	mov	r0, r4
   c4780:	f001 f864 	bl	c584c <_Bfree>
   c4784:	4629      	mov	r1, r5
   c4786:	4620      	mov	r0, r4
   c4788:	f001 f860 	bl	c584c <_Bfree>
   c478c:	e5dc      	b.n	c4348 <_strtod_l+0x88>
   c478e:	4b36      	ldr	r3, [pc, #216]	; (c4868 <_strtod_l+0x5a8>)
   c4790:	9304      	str	r3, [sp, #16]
   c4792:	2300      	movs	r3, #0
   c4794:	ea4f 1828 	mov.w	r8, r8, asr #4
   c4798:	4650      	mov	r0, sl
   c479a:	4659      	mov	r1, fp
   c479c:	4699      	mov	r9, r3
   c479e:	f1b8 0f01 	cmp.w	r8, #1
   c47a2:	dc21      	bgt.n	c47e8 <_strtod_l+0x528>
   c47a4:	b10b      	cbz	r3, c47aa <_strtod_l+0x4ea>
   c47a6:	4682      	mov	sl, r0
   c47a8:	468b      	mov	fp, r1
   c47aa:	4b2f      	ldr	r3, [pc, #188]	; (c4868 <_strtod_l+0x5a8>)
   c47ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c47b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c47b4:	4652      	mov	r2, sl
   c47b6:	465b      	mov	r3, fp
   c47b8:	e9d9 0100 	ldrd	r0, r1, [r9]
   c47bc:	f7ff f8ac 	bl	c3918 <__aeabi_dmul>
   c47c0:	4b2a      	ldr	r3, [pc, #168]	; (c486c <_strtod_l+0x5ac>)
   c47c2:	460a      	mov	r2, r1
   c47c4:	400b      	ands	r3, r1
   c47c6:	492a      	ldr	r1, [pc, #168]	; (c4870 <_strtod_l+0x5b0>)
   c47c8:	428b      	cmp	r3, r1
   c47ca:	4682      	mov	sl, r0
   c47cc:	d8bc      	bhi.n	c4748 <_strtod_l+0x488>
   c47ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c47d2:	428b      	cmp	r3, r1
   c47d4:	bf86      	itte	hi
   c47d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c4874 <_strtod_l+0x5b4>
   c47da:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c47de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c47e2:	2300      	movs	r3, #0
   c47e4:	9304      	str	r3, [sp, #16]
   c47e6:	e084      	b.n	c48f2 <_strtod_l+0x632>
   c47e8:	f018 0f01 	tst.w	r8, #1
   c47ec:	d005      	beq.n	c47fa <_strtod_l+0x53a>
   c47ee:	9b04      	ldr	r3, [sp, #16]
   c47f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c47f4:	f7ff f890 	bl	c3918 <__aeabi_dmul>
   c47f8:	2301      	movs	r3, #1
   c47fa:	9a04      	ldr	r2, [sp, #16]
   c47fc:	3208      	adds	r2, #8
   c47fe:	f109 0901 	add.w	r9, r9, #1
   c4802:	ea4f 0868 	mov.w	r8, r8, asr #1
   c4806:	9204      	str	r2, [sp, #16]
   c4808:	e7c9      	b.n	c479e <_strtod_l+0x4de>
   c480a:	d0ea      	beq.n	c47e2 <_strtod_l+0x522>
   c480c:	f1c8 0800 	rsb	r8, r8, #0
   c4810:	f018 020f 	ands.w	r2, r8, #15
   c4814:	d00a      	beq.n	c482c <_strtod_l+0x56c>
   c4816:	4b13      	ldr	r3, [pc, #76]	; (c4864 <_strtod_l+0x5a4>)
   c4818:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c481c:	4650      	mov	r0, sl
   c481e:	4659      	mov	r1, fp
   c4820:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4824:	f7ff f9a2 	bl	c3b6c <__aeabi_ddiv>
   c4828:	4682      	mov	sl, r0
   c482a:	468b      	mov	fp, r1
   c482c:	ea5f 1828 	movs.w	r8, r8, asr #4
   c4830:	d0d7      	beq.n	c47e2 <_strtod_l+0x522>
   c4832:	f1b8 0f1f 	cmp.w	r8, #31
   c4836:	dd1f      	ble.n	c4878 <_strtod_l+0x5b8>
   c4838:	2500      	movs	r5, #0
   c483a:	462e      	mov	r6, r5
   c483c:	9507      	str	r5, [sp, #28]
   c483e:	9505      	str	r5, [sp, #20]
   c4840:	2322      	movs	r3, #34	; 0x22
   c4842:	f04f 0a00 	mov.w	sl, #0
   c4846:	f04f 0b00 	mov.w	fp, #0
   c484a:	6023      	str	r3, [r4, #0]
   c484c:	e786      	b.n	c475c <_strtod_l+0x49c>
   c484e:	bf00      	nop
   c4850:	000c8129 	.word	0x000c8129
   c4854:	000c8140 	.word	0x000c8140
   c4858:	000c8120 	.word	0x000c8120
   c485c:	000c8123 	.word	0x000c8123
   c4860:	000c79f3 	.word	0x000c79f3
   c4864:	000c8388 	.word	0x000c8388
   c4868:	000c8360 	.word	0x000c8360
   c486c:	7ff00000 	.word	0x7ff00000
   c4870:	7ca00000 	.word	0x7ca00000
   c4874:	7fefffff 	.word	0x7fefffff
   c4878:	f018 0310 	ands.w	r3, r8, #16
   c487c:	bf18      	it	ne
   c487e:	236a      	movne	r3, #106	; 0x6a
   c4880:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c4c30 <_strtod_l+0x970>
   c4884:	9304      	str	r3, [sp, #16]
   c4886:	4650      	mov	r0, sl
   c4888:	4659      	mov	r1, fp
   c488a:	2300      	movs	r3, #0
   c488c:	f018 0f01 	tst.w	r8, #1
   c4890:	d004      	beq.n	c489c <_strtod_l+0x5dc>
   c4892:	e9d9 2300 	ldrd	r2, r3, [r9]
   c4896:	f7ff f83f 	bl	c3918 <__aeabi_dmul>
   c489a:	2301      	movs	r3, #1
   c489c:	ea5f 0868 	movs.w	r8, r8, asr #1
   c48a0:	f109 0908 	add.w	r9, r9, #8
   c48a4:	d1f2      	bne.n	c488c <_strtod_l+0x5cc>
   c48a6:	b10b      	cbz	r3, c48ac <_strtod_l+0x5ec>
   c48a8:	4682      	mov	sl, r0
   c48aa:	468b      	mov	fp, r1
   c48ac:	9b04      	ldr	r3, [sp, #16]
   c48ae:	b1c3      	cbz	r3, c48e2 <_strtod_l+0x622>
   c48b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c48b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c48b8:	2b00      	cmp	r3, #0
   c48ba:	4659      	mov	r1, fp
   c48bc:	dd11      	ble.n	c48e2 <_strtod_l+0x622>
   c48be:	2b1f      	cmp	r3, #31
   c48c0:	f340 8124 	ble.w	c4b0c <_strtod_l+0x84c>
   c48c4:	2b34      	cmp	r3, #52	; 0x34
   c48c6:	bfde      	ittt	le
   c48c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c48cc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c48d0:	fa03 f202 	lslle.w	r2, r3, r2
   c48d4:	f04f 0a00 	mov.w	sl, #0
   c48d8:	bfcc      	ite	gt
   c48da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c48de:	ea02 0b01 	andle.w	fp, r2, r1
   c48e2:	2200      	movs	r2, #0
   c48e4:	2300      	movs	r3, #0
   c48e6:	4650      	mov	r0, sl
   c48e8:	4659      	mov	r1, fp
   c48ea:	f7ff fa7d 	bl	c3de8 <__aeabi_dcmpeq>
   c48ee:	2800      	cmp	r0, #0
   c48f0:	d1a2      	bne.n	c4838 <_strtod_l+0x578>
   c48f2:	9b07      	ldr	r3, [sp, #28]
   c48f4:	9300      	str	r3, [sp, #0]
   c48f6:	9908      	ldr	r1, [sp, #32]
   c48f8:	462b      	mov	r3, r5
   c48fa:	463a      	mov	r2, r7
   c48fc:	4620      	mov	r0, r4
   c48fe:	f001 f80d 	bl	c591c <__s2b>
   c4902:	9007      	str	r0, [sp, #28]
   c4904:	2800      	cmp	r0, #0
   c4906:	f43f af1f 	beq.w	c4748 <_strtod_l+0x488>
   c490a:	9b05      	ldr	r3, [sp, #20]
   c490c:	1b9e      	subs	r6, r3, r6
   c490e:	9b06      	ldr	r3, [sp, #24]
   c4910:	2b00      	cmp	r3, #0
   c4912:	bfb4      	ite	lt
   c4914:	4633      	movlt	r3, r6
   c4916:	2300      	movge	r3, #0
   c4918:	930c      	str	r3, [sp, #48]	; 0x30
   c491a:	9b06      	ldr	r3, [sp, #24]
   c491c:	2500      	movs	r5, #0
   c491e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c4922:	9312      	str	r3, [sp, #72]	; 0x48
   c4924:	462e      	mov	r6, r5
   c4926:	9b07      	ldr	r3, [sp, #28]
   c4928:	4620      	mov	r0, r4
   c492a:	6859      	ldr	r1, [r3, #4]
   c492c:	f000 ff4e 	bl	c57cc <_Balloc>
   c4930:	9005      	str	r0, [sp, #20]
   c4932:	2800      	cmp	r0, #0
   c4934:	f43f af0c 	beq.w	c4750 <_strtod_l+0x490>
   c4938:	9b07      	ldr	r3, [sp, #28]
   c493a:	691a      	ldr	r2, [r3, #16]
   c493c:	3202      	adds	r2, #2
   c493e:	f103 010c 	add.w	r1, r3, #12
   c4942:	0092      	lsls	r2, r2, #2
   c4944:	300c      	adds	r0, #12
   c4946:	f7ff fb73 	bl	c4030 <memcpy>
   c494a:	ec4b ab10 	vmov	d0, sl, fp
   c494e:	aa1a      	add	r2, sp, #104	; 0x68
   c4950:	a919      	add	r1, sp, #100	; 0x64
   c4952:	4620      	mov	r0, r4
   c4954:	f001 fb28 	bl	c5fa8 <__d2b>
   c4958:	ec4b ab18 	vmov	d8, sl, fp
   c495c:	9018      	str	r0, [sp, #96]	; 0x60
   c495e:	2800      	cmp	r0, #0
   c4960:	f43f aef6 	beq.w	c4750 <_strtod_l+0x490>
   c4964:	2101      	movs	r1, #1
   c4966:	4620      	mov	r0, r4
   c4968:	f001 f872 	bl	c5a50 <__i2b>
   c496c:	4606      	mov	r6, r0
   c496e:	2800      	cmp	r0, #0
   c4970:	f43f aeee 	beq.w	c4750 <_strtod_l+0x490>
   c4974:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c4976:	9904      	ldr	r1, [sp, #16]
   c4978:	2b00      	cmp	r3, #0
   c497a:	bfab      	itete	ge
   c497c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c497e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c4980:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c4982:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c4986:	bfac      	ite	ge
   c4988:	eb03 0902 	addge.w	r9, r3, r2
   c498c:	1ad7      	sublt	r7, r2, r3
   c498e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c4990:	eba3 0801 	sub.w	r8, r3, r1
   c4994:	4490      	add	r8, r2
   c4996:	4ba1      	ldr	r3, [pc, #644]	; (c4c1c <_strtod_l+0x95c>)
   c4998:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c499c:	4598      	cmp	r8, r3
   c499e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c49a2:	f280 80c7 	bge.w	c4b34 <_strtod_l+0x874>
   c49a6:	eba3 0308 	sub.w	r3, r3, r8
   c49aa:	2b1f      	cmp	r3, #31
   c49ac:	eba2 0203 	sub.w	r2, r2, r3
   c49b0:	f04f 0101 	mov.w	r1, #1
   c49b4:	f300 80b1 	bgt.w	c4b1a <_strtod_l+0x85a>
   c49b8:	fa01 f303 	lsl.w	r3, r1, r3
   c49bc:	930d      	str	r3, [sp, #52]	; 0x34
   c49be:	2300      	movs	r3, #0
   c49c0:	9308      	str	r3, [sp, #32]
   c49c2:	eb09 0802 	add.w	r8, r9, r2
   c49c6:	9b04      	ldr	r3, [sp, #16]
   c49c8:	45c1      	cmp	r9, r8
   c49ca:	4417      	add	r7, r2
   c49cc:	441f      	add	r7, r3
   c49ce:	464b      	mov	r3, r9
   c49d0:	bfa8      	it	ge
   c49d2:	4643      	movge	r3, r8
   c49d4:	42bb      	cmp	r3, r7
   c49d6:	bfa8      	it	ge
   c49d8:	463b      	movge	r3, r7
   c49da:	2b00      	cmp	r3, #0
   c49dc:	bfc2      	ittt	gt
   c49de:	eba8 0803 	subgt.w	r8, r8, r3
   c49e2:	1aff      	subgt	r7, r7, r3
   c49e4:	eba9 0903 	subgt.w	r9, r9, r3
   c49e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c49ea:	2b00      	cmp	r3, #0
   c49ec:	dd17      	ble.n	c4a1e <_strtod_l+0x75e>
   c49ee:	4631      	mov	r1, r6
   c49f0:	461a      	mov	r2, r3
   c49f2:	4620      	mov	r0, r4
   c49f4:	f001 f8ec 	bl	c5bd0 <__pow5mult>
   c49f8:	4606      	mov	r6, r0
   c49fa:	2800      	cmp	r0, #0
   c49fc:	f43f aea8 	beq.w	c4750 <_strtod_l+0x490>
   c4a00:	4601      	mov	r1, r0
   c4a02:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c4a04:	4620      	mov	r0, r4
   c4a06:	f001 f839 	bl	c5a7c <__multiply>
   c4a0a:	900b      	str	r0, [sp, #44]	; 0x2c
   c4a0c:	2800      	cmp	r0, #0
   c4a0e:	f43f ae9f 	beq.w	c4750 <_strtod_l+0x490>
   c4a12:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4a14:	4620      	mov	r0, r4
   c4a16:	f000 ff19 	bl	c584c <_Bfree>
   c4a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4a1c:	9318      	str	r3, [sp, #96]	; 0x60
   c4a1e:	f1b8 0f00 	cmp.w	r8, #0
   c4a22:	f300 808c 	bgt.w	c4b3e <_strtod_l+0x87e>
   c4a26:	9b06      	ldr	r3, [sp, #24]
   c4a28:	2b00      	cmp	r3, #0
   c4a2a:	dd08      	ble.n	c4a3e <_strtod_l+0x77e>
   c4a2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c4a2e:	9905      	ldr	r1, [sp, #20]
   c4a30:	4620      	mov	r0, r4
   c4a32:	f001 f8cd 	bl	c5bd0 <__pow5mult>
   c4a36:	9005      	str	r0, [sp, #20]
   c4a38:	2800      	cmp	r0, #0
   c4a3a:	f43f ae89 	beq.w	c4750 <_strtod_l+0x490>
   c4a3e:	2f00      	cmp	r7, #0
   c4a40:	dd08      	ble.n	c4a54 <_strtod_l+0x794>
   c4a42:	9905      	ldr	r1, [sp, #20]
   c4a44:	463a      	mov	r2, r7
   c4a46:	4620      	mov	r0, r4
   c4a48:	f001 f91c 	bl	c5c84 <__lshift>
   c4a4c:	9005      	str	r0, [sp, #20]
   c4a4e:	2800      	cmp	r0, #0
   c4a50:	f43f ae7e 	beq.w	c4750 <_strtod_l+0x490>
   c4a54:	f1b9 0f00 	cmp.w	r9, #0
   c4a58:	dd08      	ble.n	c4a6c <_strtod_l+0x7ac>
   c4a5a:	4631      	mov	r1, r6
   c4a5c:	464a      	mov	r2, r9
   c4a5e:	4620      	mov	r0, r4
   c4a60:	f001 f910 	bl	c5c84 <__lshift>
   c4a64:	4606      	mov	r6, r0
   c4a66:	2800      	cmp	r0, #0
   c4a68:	f43f ae72 	beq.w	c4750 <_strtod_l+0x490>
   c4a6c:	9a05      	ldr	r2, [sp, #20]
   c4a6e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4a70:	4620      	mov	r0, r4
   c4a72:	f001 f993 	bl	c5d9c <__mdiff>
   c4a76:	4605      	mov	r5, r0
   c4a78:	2800      	cmp	r0, #0
   c4a7a:	f43f ae69 	beq.w	c4750 <_strtod_l+0x490>
   c4a7e:	68c3      	ldr	r3, [r0, #12]
   c4a80:	930b      	str	r3, [sp, #44]	; 0x2c
   c4a82:	2300      	movs	r3, #0
   c4a84:	60c3      	str	r3, [r0, #12]
   c4a86:	4631      	mov	r1, r6
   c4a88:	f001 f96c 	bl	c5d64 <__mcmp>
   c4a8c:	2800      	cmp	r0, #0
   c4a8e:	da60      	bge.n	c4b52 <_strtod_l+0x892>
   c4a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4a92:	ea53 030a 	orrs.w	r3, r3, sl
   c4a96:	f040 8082 	bne.w	c4b9e <_strtod_l+0x8de>
   c4a9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c4a9e:	2b00      	cmp	r3, #0
   c4aa0:	d17d      	bne.n	c4b9e <_strtod_l+0x8de>
   c4aa2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c4aa6:	0d1b      	lsrs	r3, r3, #20
   c4aa8:	051b      	lsls	r3, r3, #20
   c4aaa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c4aae:	d976      	bls.n	c4b9e <_strtod_l+0x8de>
   c4ab0:	696b      	ldr	r3, [r5, #20]
   c4ab2:	b913      	cbnz	r3, c4aba <_strtod_l+0x7fa>
   c4ab4:	692b      	ldr	r3, [r5, #16]
   c4ab6:	2b01      	cmp	r3, #1
   c4ab8:	dd71      	ble.n	c4b9e <_strtod_l+0x8de>
   c4aba:	4629      	mov	r1, r5
   c4abc:	2201      	movs	r2, #1
   c4abe:	4620      	mov	r0, r4
   c4ac0:	f001 f8e0 	bl	c5c84 <__lshift>
   c4ac4:	4631      	mov	r1, r6
   c4ac6:	4605      	mov	r5, r0
   c4ac8:	f001 f94c 	bl	c5d64 <__mcmp>
   c4acc:	2800      	cmp	r0, #0
   c4ace:	dd66      	ble.n	c4b9e <_strtod_l+0x8de>
   c4ad0:	9904      	ldr	r1, [sp, #16]
   c4ad2:	4a53      	ldr	r2, [pc, #332]	; (c4c20 <_strtod_l+0x960>)
   c4ad4:	465b      	mov	r3, fp
   c4ad6:	2900      	cmp	r1, #0
   c4ad8:	f000 8081 	beq.w	c4bde <_strtod_l+0x91e>
   c4adc:	ea02 010b 	and.w	r1, r2, fp
   c4ae0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c4ae4:	dc7b      	bgt.n	c4bde <_strtod_l+0x91e>
   c4ae6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c4aea:	f77f aea9 	ble.w	c4840 <_strtod_l+0x580>
   c4aee:	4b4d      	ldr	r3, [pc, #308]	; (c4c24 <_strtod_l+0x964>)
   c4af0:	4650      	mov	r0, sl
   c4af2:	4659      	mov	r1, fp
   c4af4:	2200      	movs	r2, #0
   c4af6:	f7fe ff0f 	bl	c3918 <__aeabi_dmul>
   c4afa:	460b      	mov	r3, r1
   c4afc:	4303      	orrs	r3, r0
   c4afe:	bf08      	it	eq
   c4b00:	2322      	moveq	r3, #34	; 0x22
   c4b02:	4682      	mov	sl, r0
   c4b04:	468b      	mov	fp, r1
   c4b06:	bf08      	it	eq
   c4b08:	6023      	streq	r3, [r4, #0]
   c4b0a:	e62b      	b.n	c4764 <_strtod_l+0x4a4>
   c4b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c4b10:	fa02 f303 	lsl.w	r3, r2, r3
   c4b14:	ea03 0a0a 	and.w	sl, r3, sl
   c4b18:	e6e3      	b.n	c48e2 <_strtod_l+0x622>
   c4b1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c4b1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c4b22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c4b26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c4b2a:	fa01 f308 	lsl.w	r3, r1, r8
   c4b2e:	9308      	str	r3, [sp, #32]
   c4b30:	910d      	str	r1, [sp, #52]	; 0x34
   c4b32:	e746      	b.n	c49c2 <_strtod_l+0x702>
   c4b34:	2300      	movs	r3, #0
   c4b36:	9308      	str	r3, [sp, #32]
   c4b38:	2301      	movs	r3, #1
   c4b3a:	930d      	str	r3, [sp, #52]	; 0x34
   c4b3c:	e741      	b.n	c49c2 <_strtod_l+0x702>
   c4b3e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4b40:	4642      	mov	r2, r8
   c4b42:	4620      	mov	r0, r4
   c4b44:	f001 f89e 	bl	c5c84 <__lshift>
   c4b48:	9018      	str	r0, [sp, #96]	; 0x60
   c4b4a:	2800      	cmp	r0, #0
   c4b4c:	f47f af6b 	bne.w	c4a26 <_strtod_l+0x766>
   c4b50:	e5fe      	b.n	c4750 <_strtod_l+0x490>
   c4b52:	465f      	mov	r7, fp
   c4b54:	d16e      	bne.n	c4c34 <_strtod_l+0x974>
   c4b56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c4b58:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c4b5c:	b342      	cbz	r2, c4bb0 <_strtod_l+0x8f0>
   c4b5e:	4a32      	ldr	r2, [pc, #200]	; (c4c28 <_strtod_l+0x968>)
   c4b60:	4293      	cmp	r3, r2
   c4b62:	d128      	bne.n	c4bb6 <_strtod_l+0x8f6>
   c4b64:	9b04      	ldr	r3, [sp, #16]
   c4b66:	4651      	mov	r1, sl
   c4b68:	b1eb      	cbz	r3, c4ba6 <_strtod_l+0x8e6>
   c4b6a:	4b2d      	ldr	r3, [pc, #180]	; (c4c20 <_strtod_l+0x960>)
   c4b6c:	403b      	ands	r3, r7
   c4b6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c4b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c4b76:	d819      	bhi.n	c4bac <_strtod_l+0x8ec>
   c4b78:	0d1b      	lsrs	r3, r3, #20
   c4b7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c4b7e:	fa02 f303 	lsl.w	r3, r2, r3
   c4b82:	4299      	cmp	r1, r3
   c4b84:	d117      	bne.n	c4bb6 <_strtod_l+0x8f6>
   c4b86:	4b29      	ldr	r3, [pc, #164]	; (c4c2c <_strtod_l+0x96c>)
   c4b88:	429f      	cmp	r7, r3
   c4b8a:	d102      	bne.n	c4b92 <_strtod_l+0x8d2>
   c4b8c:	3101      	adds	r1, #1
   c4b8e:	f43f addf 	beq.w	c4750 <_strtod_l+0x490>
   c4b92:	4b23      	ldr	r3, [pc, #140]	; (c4c20 <_strtod_l+0x960>)
   c4b94:	403b      	ands	r3, r7
   c4b96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c4b9a:	f04f 0a00 	mov.w	sl, #0
   c4b9e:	9b04      	ldr	r3, [sp, #16]
   c4ba0:	2b00      	cmp	r3, #0
   c4ba2:	d1a4      	bne.n	c4aee <_strtod_l+0x82e>
   c4ba4:	e5de      	b.n	c4764 <_strtod_l+0x4a4>
   c4ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c4baa:	e7ea      	b.n	c4b82 <_strtod_l+0x8c2>
   c4bac:	4613      	mov	r3, r2
   c4bae:	e7e8      	b.n	c4b82 <_strtod_l+0x8c2>
   c4bb0:	ea53 030a 	orrs.w	r3, r3, sl
   c4bb4:	d08c      	beq.n	c4ad0 <_strtod_l+0x810>
   c4bb6:	9b08      	ldr	r3, [sp, #32]
   c4bb8:	b1db      	cbz	r3, c4bf2 <_strtod_l+0x932>
   c4bba:	423b      	tst	r3, r7
   c4bbc:	d0ef      	beq.n	c4b9e <_strtod_l+0x8de>
   c4bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4bc0:	9a04      	ldr	r2, [sp, #16]
   c4bc2:	4650      	mov	r0, sl
   c4bc4:	4659      	mov	r1, fp
   c4bc6:	b1c3      	cbz	r3, c4bfa <_strtod_l+0x93a>
   c4bc8:	f7ff fb5d 	bl	c4286 <sulp>
   c4bcc:	4602      	mov	r2, r0
   c4bce:	460b      	mov	r3, r1
   c4bd0:	ec51 0b18 	vmov	r0, r1, d8
   c4bd4:	f7fe fcea 	bl	c35ac <__adddf3>
   c4bd8:	4682      	mov	sl, r0
   c4bda:	468b      	mov	fp, r1
   c4bdc:	e7df      	b.n	c4b9e <_strtod_l+0x8de>
   c4bde:	4013      	ands	r3, r2
   c4be0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c4be4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c4be8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c4bec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c4bf0:	e7d5      	b.n	c4b9e <_strtod_l+0x8de>
   c4bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c4bf4:	ea13 0f0a 	tst.w	r3, sl
   c4bf8:	e7e0      	b.n	c4bbc <_strtod_l+0x8fc>
   c4bfa:	f7ff fb44 	bl	c4286 <sulp>
   c4bfe:	4602      	mov	r2, r0
   c4c00:	460b      	mov	r3, r1
   c4c02:	ec51 0b18 	vmov	r0, r1, d8
   c4c06:	f7fe fccf 	bl	c35a8 <__aeabi_dsub>
   c4c0a:	2200      	movs	r2, #0
   c4c0c:	2300      	movs	r3, #0
   c4c0e:	4682      	mov	sl, r0
   c4c10:	468b      	mov	fp, r1
   c4c12:	f7ff f8e9 	bl	c3de8 <__aeabi_dcmpeq>
   c4c16:	2800      	cmp	r0, #0
   c4c18:	d0c1      	beq.n	c4b9e <_strtod_l+0x8de>
   c4c1a:	e611      	b.n	c4840 <_strtod_l+0x580>
   c4c1c:	fffffc02 	.word	0xfffffc02
   c4c20:	7ff00000 	.word	0x7ff00000
   c4c24:	39500000 	.word	0x39500000
   c4c28:	000fffff 	.word	0x000fffff
   c4c2c:	7fefffff 	.word	0x7fefffff
   c4c30:	000c8158 	.word	0x000c8158
   c4c34:	4631      	mov	r1, r6
   c4c36:	4628      	mov	r0, r5
   c4c38:	f001 fa12 	bl	c6060 <__ratio>
   c4c3c:	ec59 8b10 	vmov	r8, r9, d0
   c4c40:	ee10 0a10 	vmov	r0, s0
   c4c44:	2200      	movs	r2, #0
   c4c46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c4c4a:	4649      	mov	r1, r9
   c4c4c:	f7ff f8e0 	bl	c3e10 <__aeabi_dcmple>
   c4c50:	2800      	cmp	r0, #0
   c4c52:	d07a      	beq.n	c4d4a <_strtod_l+0xa8a>
   c4c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4c56:	2b00      	cmp	r3, #0
   c4c58:	d04a      	beq.n	c4cf0 <_strtod_l+0xa30>
   c4c5a:	4b95      	ldr	r3, [pc, #596]	; (c4eb0 <_strtod_l+0xbf0>)
   c4c5c:	2200      	movs	r2, #0
   c4c5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c4c62:	f8df 924c 	ldr.w	r9, [pc, #588]	; c4eb0 <_strtod_l+0xbf0>
   c4c66:	f04f 0800 	mov.w	r8, #0
   c4c6a:	4b92      	ldr	r3, [pc, #584]	; (c4eb4 <_strtod_l+0xbf4>)
   c4c6c:	403b      	ands	r3, r7
   c4c6e:	930d      	str	r3, [sp, #52]	; 0x34
   c4c70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c4c72:	4b91      	ldr	r3, [pc, #580]	; (c4eb8 <_strtod_l+0xbf8>)
   c4c74:	429a      	cmp	r2, r3
   c4c76:	f040 80b0 	bne.w	c4dda <_strtod_l+0xb1a>
   c4c7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4c7e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c4c82:	ec4b ab10 	vmov	d0, sl, fp
   c4c86:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c4c8a:	f001 f911 	bl	c5eb0 <__ulp>
   c4c8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4c92:	ec53 2b10 	vmov	r2, r3, d0
   c4c96:	f7fe fe3f 	bl	c3918 <__aeabi_dmul>
   c4c9a:	4652      	mov	r2, sl
   c4c9c:	465b      	mov	r3, fp
   c4c9e:	f7fe fc85 	bl	c35ac <__adddf3>
   c4ca2:	460b      	mov	r3, r1
   c4ca4:	4983      	ldr	r1, [pc, #524]	; (c4eb4 <_strtod_l+0xbf4>)
   c4ca6:	4a85      	ldr	r2, [pc, #532]	; (c4ebc <_strtod_l+0xbfc>)
   c4ca8:	4019      	ands	r1, r3
   c4caa:	4291      	cmp	r1, r2
   c4cac:	4682      	mov	sl, r0
   c4cae:	d960      	bls.n	c4d72 <_strtod_l+0xab2>
   c4cb0:	ee18 3a90 	vmov	r3, s17
   c4cb4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c4cb8:	4293      	cmp	r3, r2
   c4cba:	d104      	bne.n	c4cc6 <_strtod_l+0xa06>
   c4cbc:	ee18 3a10 	vmov	r3, s16
   c4cc0:	3301      	adds	r3, #1
   c4cc2:	f43f ad45 	beq.w	c4750 <_strtod_l+0x490>
   c4cc6:	f8df b200 	ldr.w	fp, [pc, #512]	; c4ec8 <_strtod_l+0xc08>
   c4cca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c4cce:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4cd0:	4620      	mov	r0, r4
   c4cd2:	f000 fdbb 	bl	c584c <_Bfree>
   c4cd6:	9905      	ldr	r1, [sp, #20]
   c4cd8:	4620      	mov	r0, r4
   c4cda:	f000 fdb7 	bl	c584c <_Bfree>
   c4cde:	4631      	mov	r1, r6
   c4ce0:	4620      	mov	r0, r4
   c4ce2:	f000 fdb3 	bl	c584c <_Bfree>
   c4ce6:	4629      	mov	r1, r5
   c4ce8:	4620      	mov	r0, r4
   c4cea:	f000 fdaf 	bl	c584c <_Bfree>
   c4cee:	e61a      	b.n	c4926 <_strtod_l+0x666>
   c4cf0:	f1ba 0f00 	cmp.w	sl, #0
   c4cf4:	d11b      	bne.n	c4d2e <_strtod_l+0xa6e>
   c4cf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c4cfa:	b9f3      	cbnz	r3, c4d3a <_strtod_l+0xa7a>
   c4cfc:	4b6c      	ldr	r3, [pc, #432]	; (c4eb0 <_strtod_l+0xbf0>)
   c4cfe:	2200      	movs	r2, #0
   c4d00:	4640      	mov	r0, r8
   c4d02:	4649      	mov	r1, r9
   c4d04:	f7ff f87a 	bl	c3dfc <__aeabi_dcmplt>
   c4d08:	b9d0      	cbnz	r0, c4d40 <_strtod_l+0xa80>
   c4d0a:	4640      	mov	r0, r8
   c4d0c:	4649      	mov	r1, r9
   c4d0e:	4b6c      	ldr	r3, [pc, #432]	; (c4ec0 <_strtod_l+0xc00>)
   c4d10:	2200      	movs	r2, #0
   c4d12:	f7fe fe01 	bl	c3918 <__aeabi_dmul>
   c4d16:	4680      	mov	r8, r0
   c4d18:	4689      	mov	r9, r1
   c4d1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c4d1e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c4d22:	9315      	str	r3, [sp, #84]	; 0x54
   c4d24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c4d28:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c4d2c:	e79d      	b.n	c4c6a <_strtod_l+0x9aa>
   c4d2e:	f1ba 0f01 	cmp.w	sl, #1
   c4d32:	d102      	bne.n	c4d3a <_strtod_l+0xa7a>
   c4d34:	2f00      	cmp	r7, #0
   c4d36:	f43f ad83 	beq.w	c4840 <_strtod_l+0x580>
   c4d3a:	4b62      	ldr	r3, [pc, #392]	; (c4ec4 <_strtod_l+0xc04>)
   c4d3c:	2200      	movs	r2, #0
   c4d3e:	e78e      	b.n	c4c5e <_strtod_l+0x99e>
   c4d40:	f8df 917c 	ldr.w	r9, [pc, #380]	; c4ec0 <_strtod_l+0xc00>
   c4d44:	f04f 0800 	mov.w	r8, #0
   c4d48:	e7e7      	b.n	c4d1a <_strtod_l+0xa5a>
   c4d4a:	4b5d      	ldr	r3, [pc, #372]	; (c4ec0 <_strtod_l+0xc00>)
   c4d4c:	4640      	mov	r0, r8
   c4d4e:	4649      	mov	r1, r9
   c4d50:	2200      	movs	r2, #0
   c4d52:	f7fe fde1 	bl	c3918 <__aeabi_dmul>
   c4d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4d58:	4680      	mov	r8, r0
   c4d5a:	4689      	mov	r9, r1
   c4d5c:	b933      	cbnz	r3, c4d6c <_strtod_l+0xaac>
   c4d5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c4d62:	900e      	str	r0, [sp, #56]	; 0x38
   c4d64:	930f      	str	r3, [sp, #60]	; 0x3c
   c4d66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c4d6a:	e7dd      	b.n	c4d28 <_strtod_l+0xa68>
   c4d6c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c4d70:	e7f9      	b.n	c4d66 <_strtod_l+0xaa6>
   c4d72:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c4d76:	9b04      	ldr	r3, [sp, #16]
   c4d78:	2b00      	cmp	r3, #0
   c4d7a:	d1a8      	bne.n	c4cce <_strtod_l+0xa0e>
   c4d7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c4d80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c4d82:	0d1b      	lsrs	r3, r3, #20
   c4d84:	051b      	lsls	r3, r3, #20
   c4d86:	429a      	cmp	r2, r3
   c4d88:	d1a1      	bne.n	c4cce <_strtod_l+0xa0e>
   c4d8a:	4640      	mov	r0, r8
   c4d8c:	4649      	mov	r1, r9
   c4d8e:	f001 fa05 	bl	c619c <__aeabi_d2lz>
   c4d92:	f7fe fd93 	bl	c38bc <__aeabi_l2d>
   c4d96:	4602      	mov	r2, r0
   c4d98:	460b      	mov	r3, r1
   c4d9a:	4640      	mov	r0, r8
   c4d9c:	4649      	mov	r1, r9
   c4d9e:	f7fe fc03 	bl	c35a8 <__aeabi_dsub>
   c4da2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c4da4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c4da8:	ea43 030a 	orr.w	r3, r3, sl
   c4dac:	4313      	orrs	r3, r2
   c4dae:	4680      	mov	r8, r0
   c4db0:	4689      	mov	r9, r1
   c4db2:	d055      	beq.n	c4e60 <_strtod_l+0xba0>
   c4db4:	a336      	add	r3, pc, #216	; (adr r3, c4e90 <_strtod_l+0xbd0>)
   c4db6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4dba:	f7ff f81f 	bl	c3dfc <__aeabi_dcmplt>
   c4dbe:	2800      	cmp	r0, #0
   c4dc0:	f47f acd0 	bne.w	c4764 <_strtod_l+0x4a4>
   c4dc4:	a334      	add	r3, pc, #208	; (adr r3, c4e98 <_strtod_l+0xbd8>)
   c4dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4dca:	4640      	mov	r0, r8
   c4dcc:	4649      	mov	r1, r9
   c4dce:	f7ff f833 	bl	c3e38 <__aeabi_dcmpgt>
   c4dd2:	2800      	cmp	r0, #0
   c4dd4:	f43f af7b 	beq.w	c4cce <_strtod_l+0xa0e>
   c4dd8:	e4c4      	b.n	c4764 <_strtod_l+0x4a4>
   c4dda:	9b04      	ldr	r3, [sp, #16]
   c4ddc:	b333      	cbz	r3, c4e2c <_strtod_l+0xb6c>
   c4dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c4de0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c4de4:	d822      	bhi.n	c4e2c <_strtod_l+0xb6c>
   c4de6:	a32e      	add	r3, pc, #184	; (adr r3, c4ea0 <_strtod_l+0xbe0>)
   c4de8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4dec:	4640      	mov	r0, r8
   c4dee:	4649      	mov	r1, r9
   c4df0:	f7ff f80e 	bl	c3e10 <__aeabi_dcmple>
   c4df4:	b1a0      	cbz	r0, c4e20 <_strtod_l+0xb60>
   c4df6:	4649      	mov	r1, r9
   c4df8:	4640      	mov	r0, r8
   c4dfa:	f7ff f865 	bl	c3ec8 <__aeabi_d2uiz>
   c4dfe:	2801      	cmp	r0, #1
   c4e00:	bf38      	it	cc
   c4e02:	2001      	movcc	r0, #1
   c4e04:	f7fe fd0e 	bl	c3824 <__aeabi_ui2d>
   c4e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4e0a:	4680      	mov	r8, r0
   c4e0c:	4689      	mov	r9, r1
   c4e0e:	bb23      	cbnz	r3, c4e5a <_strtod_l+0xb9a>
   c4e10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c4e14:	9010      	str	r0, [sp, #64]	; 0x40
   c4e16:	9311      	str	r3, [sp, #68]	; 0x44
   c4e18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c4e1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c4e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c4e22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c4e24:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c4e28:	1a9b      	subs	r3, r3, r2
   c4e2a:	9309      	str	r3, [sp, #36]	; 0x24
   c4e2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4e30:	eeb0 0a48 	vmov.f32	s0, s16
   c4e34:	eef0 0a68 	vmov.f32	s1, s17
   c4e38:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c4e3c:	f001 f838 	bl	c5eb0 <__ulp>
   c4e40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4e44:	ec53 2b10 	vmov	r2, r3, d0
   c4e48:	f7fe fd66 	bl	c3918 <__aeabi_dmul>
   c4e4c:	ec53 2b18 	vmov	r2, r3, d8
   c4e50:	f7fe fbac 	bl	c35ac <__adddf3>
   c4e54:	4682      	mov	sl, r0
   c4e56:	468b      	mov	fp, r1
   c4e58:	e78d      	b.n	c4d76 <_strtod_l+0xab6>
   c4e5a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c4e5e:	e7db      	b.n	c4e18 <_strtod_l+0xb58>
   c4e60:	a311      	add	r3, pc, #68	; (adr r3, c4ea8 <_strtod_l+0xbe8>)
   c4e62:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4e66:	f7fe ffc9 	bl	c3dfc <__aeabi_dcmplt>
   c4e6a:	e7b2      	b.n	c4dd2 <_strtod_l+0xb12>
   c4e6c:	2300      	movs	r3, #0
   c4e6e:	930a      	str	r3, [sp, #40]	; 0x28
   c4e70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c4e72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4e74:	6013      	str	r3, [r2, #0]
   c4e76:	f7ff ba6b 	b.w	c4350 <_strtod_l+0x90>
   c4e7a:	2a65      	cmp	r2, #101	; 0x65
   c4e7c:	f43f ab5f 	beq.w	c453e <_strtod_l+0x27e>
   c4e80:	2a45      	cmp	r2, #69	; 0x45
   c4e82:	f43f ab5c 	beq.w	c453e <_strtod_l+0x27e>
   c4e86:	2301      	movs	r3, #1
   c4e88:	f7ff bb94 	b.w	c45b4 <_strtod_l+0x2f4>
   c4e8c:	f3af 8000 	nop.w
   c4e90:	94a03595 	.word	0x94a03595
   c4e94:	3fdfffff 	.word	0x3fdfffff
   c4e98:	35afe535 	.word	0x35afe535
   c4e9c:	3fe00000 	.word	0x3fe00000
   c4ea0:	ffc00000 	.word	0xffc00000
   c4ea4:	41dfffff 	.word	0x41dfffff
   c4ea8:	94a03595 	.word	0x94a03595
   c4eac:	3fcfffff 	.word	0x3fcfffff
   c4eb0:	3ff00000 	.word	0x3ff00000
   c4eb4:	7ff00000 	.word	0x7ff00000
   c4eb8:	7fe00000 	.word	0x7fe00000
   c4ebc:	7c9fffff 	.word	0x7c9fffff
   c4ec0:	3fe00000 	.word	0x3fe00000
   c4ec4:	bff00000 	.word	0xbff00000
   c4ec8:	7fefffff 	.word	0x7fefffff

000c4ecc <strtod>:
   c4ecc:	460a      	mov	r2, r1
   c4ece:	4601      	mov	r1, r0
   c4ed0:	4802      	ldr	r0, [pc, #8]	; (c4edc <strtod+0x10>)
   c4ed2:	4b03      	ldr	r3, [pc, #12]	; (c4ee0 <strtod+0x14>)
   c4ed4:	6800      	ldr	r0, [r0, #0]
   c4ed6:	f7ff b9f3 	b.w	c42c0 <_strtod_l>
   c4eda:	bf00      	nop
   c4edc:	2003db80 	.word	0x2003db80
   c4ee0:	2003dbec 	.word	0x2003dbec

000c4ee4 <_strtol_l.constprop.0>:
   c4ee4:	2b01      	cmp	r3, #1
   c4ee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c4eea:	d001      	beq.n	c4ef0 <_strtol_l.constprop.0+0xc>
   c4eec:	2b24      	cmp	r3, #36	; 0x24
   c4eee:	d906      	bls.n	c4efe <_strtol_l.constprop.0+0x1a>
   c4ef0:	f7f8 ffd2 	bl	bde98 <__errno>
   c4ef4:	2316      	movs	r3, #22
   c4ef6:	6003      	str	r3, [r0, #0]
   c4ef8:	2000      	movs	r0, #0
   c4efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c4efe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c4fe4 <_strtol_l.constprop.0+0x100>
   c4f02:	460d      	mov	r5, r1
   c4f04:	462e      	mov	r6, r5
   c4f06:	f815 4b01 	ldrb.w	r4, [r5], #1
   c4f0a:	f814 700c 	ldrb.w	r7, [r4, ip]
   c4f0e:	f017 0708 	ands.w	r7, r7, #8
   c4f12:	d1f7      	bne.n	c4f04 <_strtol_l.constprop.0+0x20>
   c4f14:	2c2d      	cmp	r4, #45	; 0x2d
   c4f16:	d132      	bne.n	c4f7e <_strtol_l.constprop.0+0x9a>
   c4f18:	782c      	ldrb	r4, [r5, #0]
   c4f1a:	2701      	movs	r7, #1
   c4f1c:	1cb5      	adds	r5, r6, #2
   c4f1e:	2b00      	cmp	r3, #0
   c4f20:	d05b      	beq.n	c4fda <_strtol_l.constprop.0+0xf6>
   c4f22:	2b10      	cmp	r3, #16
   c4f24:	d109      	bne.n	c4f3a <_strtol_l.constprop.0+0x56>
   c4f26:	2c30      	cmp	r4, #48	; 0x30
   c4f28:	d107      	bne.n	c4f3a <_strtol_l.constprop.0+0x56>
   c4f2a:	782c      	ldrb	r4, [r5, #0]
   c4f2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c4f30:	2c58      	cmp	r4, #88	; 0x58
   c4f32:	d14d      	bne.n	c4fd0 <_strtol_l.constprop.0+0xec>
   c4f34:	786c      	ldrb	r4, [r5, #1]
   c4f36:	2310      	movs	r3, #16
   c4f38:	3502      	adds	r5, #2
   c4f3a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c4f3e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c4f42:	f04f 0c00 	mov.w	ip, #0
   c4f46:	fbb8 f9f3 	udiv	r9, r8, r3
   c4f4a:	4666      	mov	r6, ip
   c4f4c:	fb03 8a19 	mls	sl, r3, r9, r8
   c4f50:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c4f54:	f1be 0f09 	cmp.w	lr, #9
   c4f58:	d816      	bhi.n	c4f88 <_strtol_l.constprop.0+0xa4>
   c4f5a:	4674      	mov	r4, lr
   c4f5c:	42a3      	cmp	r3, r4
   c4f5e:	dd24      	ble.n	c4faa <_strtol_l.constprop.0+0xc6>
   c4f60:	f1bc 0f00 	cmp.w	ip, #0
   c4f64:	db1e      	blt.n	c4fa4 <_strtol_l.constprop.0+0xc0>
   c4f66:	45b1      	cmp	r9, r6
   c4f68:	d31c      	bcc.n	c4fa4 <_strtol_l.constprop.0+0xc0>
   c4f6a:	d101      	bne.n	c4f70 <_strtol_l.constprop.0+0x8c>
   c4f6c:	45a2      	cmp	sl, r4
   c4f6e:	db19      	blt.n	c4fa4 <_strtol_l.constprop.0+0xc0>
   c4f70:	fb06 4603 	mla	r6, r6, r3, r4
   c4f74:	f04f 0c01 	mov.w	ip, #1
   c4f78:	f815 4b01 	ldrb.w	r4, [r5], #1
   c4f7c:	e7e8      	b.n	c4f50 <_strtol_l.constprop.0+0x6c>
   c4f7e:	2c2b      	cmp	r4, #43	; 0x2b
   c4f80:	bf04      	itt	eq
   c4f82:	782c      	ldrbeq	r4, [r5, #0]
   c4f84:	1cb5      	addeq	r5, r6, #2
   c4f86:	e7ca      	b.n	c4f1e <_strtol_l.constprop.0+0x3a>
   c4f88:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c4f8c:	f1be 0f19 	cmp.w	lr, #25
   c4f90:	d801      	bhi.n	c4f96 <_strtol_l.constprop.0+0xb2>
   c4f92:	3c37      	subs	r4, #55	; 0x37
   c4f94:	e7e2      	b.n	c4f5c <_strtol_l.constprop.0+0x78>
   c4f96:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c4f9a:	f1be 0f19 	cmp.w	lr, #25
   c4f9e:	d804      	bhi.n	c4faa <_strtol_l.constprop.0+0xc6>
   c4fa0:	3c57      	subs	r4, #87	; 0x57
   c4fa2:	e7db      	b.n	c4f5c <_strtol_l.constprop.0+0x78>
   c4fa4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c4fa8:	e7e6      	b.n	c4f78 <_strtol_l.constprop.0+0x94>
   c4faa:	f1bc 0f00 	cmp.w	ip, #0
   c4fae:	da05      	bge.n	c4fbc <_strtol_l.constprop.0+0xd8>
   c4fb0:	2322      	movs	r3, #34	; 0x22
   c4fb2:	6003      	str	r3, [r0, #0]
   c4fb4:	4646      	mov	r6, r8
   c4fb6:	b942      	cbnz	r2, c4fca <_strtol_l.constprop.0+0xe6>
   c4fb8:	4630      	mov	r0, r6
   c4fba:	e79e      	b.n	c4efa <_strtol_l.constprop.0+0x16>
   c4fbc:	b107      	cbz	r7, c4fc0 <_strtol_l.constprop.0+0xdc>
   c4fbe:	4276      	negs	r6, r6
   c4fc0:	2a00      	cmp	r2, #0
   c4fc2:	d0f9      	beq.n	c4fb8 <_strtol_l.constprop.0+0xd4>
   c4fc4:	f1bc 0f00 	cmp.w	ip, #0
   c4fc8:	d000      	beq.n	c4fcc <_strtol_l.constprop.0+0xe8>
   c4fca:	1e69      	subs	r1, r5, #1
   c4fcc:	6011      	str	r1, [r2, #0]
   c4fce:	e7f3      	b.n	c4fb8 <_strtol_l.constprop.0+0xd4>
   c4fd0:	2430      	movs	r4, #48	; 0x30
   c4fd2:	2b00      	cmp	r3, #0
   c4fd4:	d1b1      	bne.n	c4f3a <_strtol_l.constprop.0+0x56>
   c4fd6:	2308      	movs	r3, #8
   c4fd8:	e7af      	b.n	c4f3a <_strtol_l.constprop.0+0x56>
   c4fda:	2c30      	cmp	r4, #48	; 0x30
   c4fdc:	d0a5      	beq.n	c4f2a <_strtol_l.constprop.0+0x46>
   c4fde:	230a      	movs	r3, #10
   c4fe0:	e7ab      	b.n	c4f3a <_strtol_l.constprop.0+0x56>
   c4fe2:	bf00      	nop
   c4fe4:	000c8181 	.word	0x000c8181

000c4fe8 <strtol>:
   c4fe8:	4613      	mov	r3, r2
   c4fea:	460a      	mov	r2, r1
   c4fec:	4601      	mov	r1, r0
   c4fee:	4802      	ldr	r0, [pc, #8]	; (c4ff8 <strtol+0x10>)
   c4ff0:	6800      	ldr	r0, [r0, #0]
   c4ff2:	f7ff bf77 	b.w	c4ee4 <_strtol_l.constprop.0>
   c4ff6:	bf00      	nop
   c4ff8:	2003db80 	.word	0x2003db80

000c4ffc <__register_exitproc>:
   c4ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5000:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c50bc <__register_exitproc+0xc0>
   c5004:	4606      	mov	r6, r0
   c5006:	f8d8 0000 	ldr.w	r0, [r8]
   c500a:	461f      	mov	r7, r3
   c500c:	460d      	mov	r5, r1
   c500e:	4691      	mov	r9, r2
   c5010:	f000 fbc6 	bl	c57a0 <__retarget_lock_acquire_recursive>
   c5014:	4b25      	ldr	r3, [pc, #148]	; (c50ac <__register_exitproc+0xb0>)
   c5016:	681c      	ldr	r4, [r3, #0]
   c5018:	b934      	cbnz	r4, c5028 <__register_exitproc+0x2c>
   c501a:	4c25      	ldr	r4, [pc, #148]	; (c50b0 <__register_exitproc+0xb4>)
   c501c:	601c      	str	r4, [r3, #0]
   c501e:	4b25      	ldr	r3, [pc, #148]	; (c50b4 <__register_exitproc+0xb8>)
   c5020:	b113      	cbz	r3, c5028 <__register_exitproc+0x2c>
   c5022:	681b      	ldr	r3, [r3, #0]
   c5024:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c5028:	6863      	ldr	r3, [r4, #4]
   c502a:	2b1f      	cmp	r3, #31
   c502c:	dd07      	ble.n	c503e <__register_exitproc+0x42>
   c502e:	f8d8 0000 	ldr.w	r0, [r8]
   c5032:	f000 fbb7 	bl	c57a4 <__retarget_lock_release_recursive>
   c5036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c503a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c503e:	b34e      	cbz	r6, c5094 <__register_exitproc+0x98>
   c5040:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c5044:	b988      	cbnz	r0, c506a <__register_exitproc+0x6e>
   c5046:	4b1c      	ldr	r3, [pc, #112]	; (c50b8 <__register_exitproc+0xbc>)
   c5048:	b923      	cbnz	r3, c5054 <__register_exitproc+0x58>
   c504a:	f8d8 0000 	ldr.w	r0, [r8]
   c504e:	f000 fba8 	bl	c57a2 <__retarget_lock_release>
   c5052:	e7f0      	b.n	c5036 <__register_exitproc+0x3a>
   c5054:	f44f 7084 	mov.w	r0, #264	; 0x108
   c5058:	f7f8 fed6 	bl	bde08 <malloc>
   c505c:	2800      	cmp	r0, #0
   c505e:	d0f4      	beq.n	c504a <__register_exitproc+0x4e>
   c5060:	2300      	movs	r3, #0
   c5062:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c5066:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c506a:	6863      	ldr	r3, [r4, #4]
   c506c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c5070:	2201      	movs	r2, #1
   c5072:	409a      	lsls	r2, r3
   c5074:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c5078:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c507c:	4313      	orrs	r3, r2
   c507e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c5082:	2e02      	cmp	r6, #2
   c5084:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c5088:	bf02      	ittt	eq
   c508a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c508e:	4313      	orreq	r3, r2
   c5090:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c5094:	6863      	ldr	r3, [r4, #4]
   c5096:	f8d8 0000 	ldr.w	r0, [r8]
   c509a:	1c5a      	adds	r2, r3, #1
   c509c:	3302      	adds	r3, #2
   c509e:	6062      	str	r2, [r4, #4]
   c50a0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c50a4:	f000 fb7e 	bl	c57a4 <__retarget_lock_release_recursive>
   c50a8:	2000      	movs	r0, #0
   c50aa:	e7c6      	b.n	c503a <__register_exitproc+0x3e>
   c50ac:	2003e7e8 	.word	0x2003e7e8
   c50b0:	2003e75c 	.word	0x2003e75c
   c50b4:	00000000 	.word	0x00000000
   c50b8:	000bde09 	.word	0x000bde09
   c50bc:	2003dbe4 	.word	0x2003dbe4

000c50c0 <rshift>:
   c50c0:	6903      	ldr	r3, [r0, #16]
   c50c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c50c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c50ca:	ea4f 1261 	mov.w	r2, r1, asr #5
   c50ce:	f100 0414 	add.w	r4, r0, #20
   c50d2:	dd45      	ble.n	c5160 <rshift+0xa0>
   c50d4:	f011 011f 	ands.w	r1, r1, #31
   c50d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c50dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c50e0:	d10c      	bne.n	c50fc <rshift+0x3c>
   c50e2:	f100 0710 	add.w	r7, r0, #16
   c50e6:	4629      	mov	r1, r5
   c50e8:	42b1      	cmp	r1, r6
   c50ea:	d334      	bcc.n	c5156 <rshift+0x96>
   c50ec:	1a9b      	subs	r3, r3, r2
   c50ee:	009b      	lsls	r3, r3, #2
   c50f0:	1eea      	subs	r2, r5, #3
   c50f2:	4296      	cmp	r6, r2
   c50f4:	bf38      	it	cc
   c50f6:	2300      	movcc	r3, #0
   c50f8:	4423      	add	r3, r4
   c50fa:	e015      	b.n	c5128 <rshift+0x68>
   c50fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c5100:	f1c1 0820 	rsb	r8, r1, #32
   c5104:	40cf      	lsrs	r7, r1
   c5106:	f105 0e04 	add.w	lr, r5, #4
   c510a:	46a1      	mov	r9, r4
   c510c:	4576      	cmp	r6, lr
   c510e:	46f4      	mov	ip, lr
   c5110:	d815      	bhi.n	c513e <rshift+0x7e>
   c5112:	1a9a      	subs	r2, r3, r2
   c5114:	0092      	lsls	r2, r2, #2
   c5116:	3a04      	subs	r2, #4
   c5118:	3501      	adds	r5, #1
   c511a:	42ae      	cmp	r6, r5
   c511c:	bf38      	it	cc
   c511e:	2200      	movcc	r2, #0
   c5120:	18a3      	adds	r3, r4, r2
   c5122:	50a7      	str	r7, [r4, r2]
   c5124:	b107      	cbz	r7, c5128 <rshift+0x68>
   c5126:	3304      	adds	r3, #4
   c5128:	1b1a      	subs	r2, r3, r4
   c512a:	42a3      	cmp	r3, r4
   c512c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c5130:	bf08      	it	eq
   c5132:	2300      	moveq	r3, #0
   c5134:	6102      	str	r2, [r0, #16]
   c5136:	bf08      	it	eq
   c5138:	6143      	streq	r3, [r0, #20]
   c513a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c513e:	f8dc c000 	ldr.w	ip, [ip]
   c5142:	fa0c fc08 	lsl.w	ip, ip, r8
   c5146:	ea4c 0707 	orr.w	r7, ip, r7
   c514a:	f849 7b04 	str.w	r7, [r9], #4
   c514e:	f85e 7b04 	ldr.w	r7, [lr], #4
   c5152:	40cf      	lsrs	r7, r1
   c5154:	e7da      	b.n	c510c <rshift+0x4c>
   c5156:	f851 cb04 	ldr.w	ip, [r1], #4
   c515a:	f847 cf04 	str.w	ip, [r7, #4]!
   c515e:	e7c3      	b.n	c50e8 <rshift+0x28>
   c5160:	4623      	mov	r3, r4
   c5162:	e7e1      	b.n	c5128 <rshift+0x68>

000c5164 <__hexdig_fun>:
   c5164:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c5168:	2b09      	cmp	r3, #9
   c516a:	d802      	bhi.n	c5172 <__hexdig_fun+0xe>
   c516c:	3820      	subs	r0, #32
   c516e:	b2c0      	uxtb	r0, r0
   c5170:	4770      	bx	lr
   c5172:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c5176:	2b05      	cmp	r3, #5
   c5178:	d801      	bhi.n	c517e <__hexdig_fun+0x1a>
   c517a:	3847      	subs	r0, #71	; 0x47
   c517c:	e7f7      	b.n	c516e <__hexdig_fun+0xa>
   c517e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c5182:	2b05      	cmp	r3, #5
   c5184:	d801      	bhi.n	c518a <__hexdig_fun+0x26>
   c5186:	3827      	subs	r0, #39	; 0x27
   c5188:	e7f1      	b.n	c516e <__hexdig_fun+0xa>
   c518a:	2000      	movs	r0, #0
   c518c:	4770      	bx	lr
	...

000c5190 <__gethex>:
   c5190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5194:	ed2d 8b02 	vpush	{d8}
   c5198:	b089      	sub	sp, #36	; 0x24
   c519a:	ee08 0a10 	vmov	s16, r0
   c519e:	9304      	str	r3, [sp, #16]
   c51a0:	4bb4      	ldr	r3, [pc, #720]	; (c5474 <__gethex+0x2e4>)
   c51a2:	681b      	ldr	r3, [r3, #0]
   c51a4:	9301      	str	r3, [sp, #4]
   c51a6:	4618      	mov	r0, r3
   c51a8:	468b      	mov	fp, r1
   c51aa:	4690      	mov	r8, r2
   c51ac:	f7fe fff3 	bl	c4196 <strlen>
   c51b0:	9b01      	ldr	r3, [sp, #4]
   c51b2:	f8db 2000 	ldr.w	r2, [fp]
   c51b6:	4403      	add	r3, r0
   c51b8:	4682      	mov	sl, r0
   c51ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c51be:	9305      	str	r3, [sp, #20]
   c51c0:	1c93      	adds	r3, r2, #2
   c51c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c51c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c51ca:	32fe      	adds	r2, #254	; 0xfe
   c51cc:	18d1      	adds	r1, r2, r3
   c51ce:	461f      	mov	r7, r3
   c51d0:	f813 0b01 	ldrb.w	r0, [r3], #1
   c51d4:	9100      	str	r1, [sp, #0]
   c51d6:	2830      	cmp	r0, #48	; 0x30
   c51d8:	d0f8      	beq.n	c51cc <__gethex+0x3c>
   c51da:	f7ff ffc3 	bl	c5164 <__hexdig_fun>
   c51de:	4604      	mov	r4, r0
   c51e0:	2800      	cmp	r0, #0
   c51e2:	d13a      	bne.n	c525a <__gethex+0xca>
   c51e4:	9901      	ldr	r1, [sp, #4]
   c51e6:	4652      	mov	r2, sl
   c51e8:	4638      	mov	r0, r7
   c51ea:	f7fe ffef 	bl	c41cc <strncmp>
   c51ee:	4605      	mov	r5, r0
   c51f0:	2800      	cmp	r0, #0
   c51f2:	d168      	bne.n	c52c6 <__gethex+0x136>
   c51f4:	f817 000a 	ldrb.w	r0, [r7, sl]
   c51f8:	eb07 060a 	add.w	r6, r7, sl
   c51fc:	f7ff ffb2 	bl	c5164 <__hexdig_fun>
   c5200:	2800      	cmp	r0, #0
   c5202:	d062      	beq.n	c52ca <__gethex+0x13a>
   c5204:	4633      	mov	r3, r6
   c5206:	7818      	ldrb	r0, [r3, #0]
   c5208:	2830      	cmp	r0, #48	; 0x30
   c520a:	461f      	mov	r7, r3
   c520c:	f103 0301 	add.w	r3, r3, #1
   c5210:	d0f9      	beq.n	c5206 <__gethex+0x76>
   c5212:	f7ff ffa7 	bl	c5164 <__hexdig_fun>
   c5216:	2301      	movs	r3, #1
   c5218:	fab0 f480 	clz	r4, r0
   c521c:	0964      	lsrs	r4, r4, #5
   c521e:	4635      	mov	r5, r6
   c5220:	9300      	str	r3, [sp, #0]
   c5222:	463a      	mov	r2, r7
   c5224:	4616      	mov	r6, r2
   c5226:	3201      	adds	r2, #1
   c5228:	7830      	ldrb	r0, [r6, #0]
   c522a:	f7ff ff9b 	bl	c5164 <__hexdig_fun>
   c522e:	2800      	cmp	r0, #0
   c5230:	d1f8      	bne.n	c5224 <__gethex+0x94>
   c5232:	9901      	ldr	r1, [sp, #4]
   c5234:	4652      	mov	r2, sl
   c5236:	4630      	mov	r0, r6
   c5238:	f7fe ffc8 	bl	c41cc <strncmp>
   c523c:	b980      	cbnz	r0, c5260 <__gethex+0xd0>
   c523e:	b94d      	cbnz	r5, c5254 <__gethex+0xc4>
   c5240:	eb06 050a 	add.w	r5, r6, sl
   c5244:	462a      	mov	r2, r5
   c5246:	4616      	mov	r6, r2
   c5248:	3201      	adds	r2, #1
   c524a:	7830      	ldrb	r0, [r6, #0]
   c524c:	f7ff ff8a 	bl	c5164 <__hexdig_fun>
   c5250:	2800      	cmp	r0, #0
   c5252:	d1f8      	bne.n	c5246 <__gethex+0xb6>
   c5254:	1bad      	subs	r5, r5, r6
   c5256:	00ad      	lsls	r5, r5, #2
   c5258:	e004      	b.n	c5264 <__gethex+0xd4>
   c525a:	2400      	movs	r4, #0
   c525c:	4625      	mov	r5, r4
   c525e:	e7e0      	b.n	c5222 <__gethex+0x92>
   c5260:	2d00      	cmp	r5, #0
   c5262:	d1f7      	bne.n	c5254 <__gethex+0xc4>
   c5264:	7833      	ldrb	r3, [r6, #0]
   c5266:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c526a:	2b50      	cmp	r3, #80	; 0x50
   c526c:	d13b      	bne.n	c52e6 <__gethex+0x156>
   c526e:	7873      	ldrb	r3, [r6, #1]
   c5270:	2b2b      	cmp	r3, #43	; 0x2b
   c5272:	d02c      	beq.n	c52ce <__gethex+0x13e>
   c5274:	2b2d      	cmp	r3, #45	; 0x2d
   c5276:	d02e      	beq.n	c52d6 <__gethex+0x146>
   c5278:	1c71      	adds	r1, r6, #1
   c527a:	f04f 0900 	mov.w	r9, #0
   c527e:	7808      	ldrb	r0, [r1, #0]
   c5280:	f7ff ff70 	bl	c5164 <__hexdig_fun>
   c5284:	1e43      	subs	r3, r0, #1
   c5286:	b2db      	uxtb	r3, r3
   c5288:	2b18      	cmp	r3, #24
   c528a:	d82c      	bhi.n	c52e6 <__gethex+0x156>
   c528c:	f1a0 0210 	sub.w	r2, r0, #16
   c5290:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c5294:	f7ff ff66 	bl	c5164 <__hexdig_fun>
   c5298:	1e43      	subs	r3, r0, #1
   c529a:	b2db      	uxtb	r3, r3
   c529c:	2b18      	cmp	r3, #24
   c529e:	d91d      	bls.n	c52dc <__gethex+0x14c>
   c52a0:	f1b9 0f00 	cmp.w	r9, #0
   c52a4:	d000      	beq.n	c52a8 <__gethex+0x118>
   c52a6:	4252      	negs	r2, r2
   c52a8:	4415      	add	r5, r2
   c52aa:	f8cb 1000 	str.w	r1, [fp]
   c52ae:	b1e4      	cbz	r4, c52ea <__gethex+0x15a>
   c52b0:	9b00      	ldr	r3, [sp, #0]
   c52b2:	2b00      	cmp	r3, #0
   c52b4:	bf14      	ite	ne
   c52b6:	2700      	movne	r7, #0
   c52b8:	2706      	moveq	r7, #6
   c52ba:	4638      	mov	r0, r7
   c52bc:	b009      	add	sp, #36	; 0x24
   c52be:	ecbd 8b02 	vpop	{d8}
   c52c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c52c6:	463e      	mov	r6, r7
   c52c8:	4625      	mov	r5, r4
   c52ca:	2401      	movs	r4, #1
   c52cc:	e7ca      	b.n	c5264 <__gethex+0xd4>
   c52ce:	f04f 0900 	mov.w	r9, #0
   c52d2:	1cb1      	adds	r1, r6, #2
   c52d4:	e7d3      	b.n	c527e <__gethex+0xee>
   c52d6:	f04f 0901 	mov.w	r9, #1
   c52da:	e7fa      	b.n	c52d2 <__gethex+0x142>
   c52dc:	230a      	movs	r3, #10
   c52de:	fb03 0202 	mla	r2, r3, r2, r0
   c52e2:	3a10      	subs	r2, #16
   c52e4:	e7d4      	b.n	c5290 <__gethex+0x100>
   c52e6:	4631      	mov	r1, r6
   c52e8:	e7df      	b.n	c52aa <__gethex+0x11a>
   c52ea:	1bf3      	subs	r3, r6, r7
   c52ec:	3b01      	subs	r3, #1
   c52ee:	4621      	mov	r1, r4
   c52f0:	2b07      	cmp	r3, #7
   c52f2:	dc0b      	bgt.n	c530c <__gethex+0x17c>
   c52f4:	ee18 0a10 	vmov	r0, s16
   c52f8:	f000 fa68 	bl	c57cc <_Balloc>
   c52fc:	4604      	mov	r4, r0
   c52fe:	b940      	cbnz	r0, c5312 <__gethex+0x182>
   c5300:	4b5d      	ldr	r3, [pc, #372]	; (c5478 <__gethex+0x2e8>)
   c5302:	4602      	mov	r2, r0
   c5304:	21de      	movs	r1, #222	; 0xde
   c5306:	485d      	ldr	r0, [pc, #372]	; (c547c <__gethex+0x2ec>)
   c5308:	f7f8 fdce 	bl	bdea8 <__assert_func>
   c530c:	3101      	adds	r1, #1
   c530e:	105b      	asrs	r3, r3, #1
   c5310:	e7ee      	b.n	c52f0 <__gethex+0x160>
   c5312:	f100 0914 	add.w	r9, r0, #20
   c5316:	f04f 0b00 	mov.w	fp, #0
   c531a:	f1ca 0301 	rsb	r3, sl, #1
   c531e:	f8cd 9008 	str.w	r9, [sp, #8]
   c5322:	f8cd b000 	str.w	fp, [sp]
   c5326:	9306      	str	r3, [sp, #24]
   c5328:	42b7      	cmp	r7, r6
   c532a:	d340      	bcc.n	c53ae <__gethex+0x21e>
   c532c:	9802      	ldr	r0, [sp, #8]
   c532e:	9b00      	ldr	r3, [sp, #0]
   c5330:	f840 3b04 	str.w	r3, [r0], #4
   c5334:	eba0 0009 	sub.w	r0, r0, r9
   c5338:	1080      	asrs	r0, r0, #2
   c533a:	0146      	lsls	r6, r0, #5
   c533c:	6120      	str	r0, [r4, #16]
   c533e:	4618      	mov	r0, r3
   c5340:	f000 fb36 	bl	c59b0 <__hi0bits>
   c5344:	1a30      	subs	r0, r6, r0
   c5346:	f8d8 6000 	ldr.w	r6, [r8]
   c534a:	42b0      	cmp	r0, r6
   c534c:	dd63      	ble.n	c5416 <__gethex+0x286>
   c534e:	1b87      	subs	r7, r0, r6
   c5350:	4639      	mov	r1, r7
   c5352:	4620      	mov	r0, r4
   c5354:	f000 feda 	bl	c610c <__any_on>
   c5358:	4682      	mov	sl, r0
   c535a:	b1a8      	cbz	r0, c5388 <__gethex+0x1f8>
   c535c:	1e7b      	subs	r3, r7, #1
   c535e:	1159      	asrs	r1, r3, #5
   c5360:	f003 021f 	and.w	r2, r3, #31
   c5364:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c5368:	f04f 0a01 	mov.w	sl, #1
   c536c:	fa0a f202 	lsl.w	r2, sl, r2
   c5370:	420a      	tst	r2, r1
   c5372:	d009      	beq.n	c5388 <__gethex+0x1f8>
   c5374:	4553      	cmp	r3, sl
   c5376:	dd05      	ble.n	c5384 <__gethex+0x1f4>
   c5378:	1eb9      	subs	r1, r7, #2
   c537a:	4620      	mov	r0, r4
   c537c:	f000 fec6 	bl	c610c <__any_on>
   c5380:	2800      	cmp	r0, #0
   c5382:	d145      	bne.n	c5410 <__gethex+0x280>
   c5384:	f04f 0a02 	mov.w	sl, #2
   c5388:	4639      	mov	r1, r7
   c538a:	4620      	mov	r0, r4
   c538c:	f7ff fe98 	bl	c50c0 <rshift>
   c5390:	443d      	add	r5, r7
   c5392:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c5396:	42ab      	cmp	r3, r5
   c5398:	da4c      	bge.n	c5434 <__gethex+0x2a4>
   c539a:	ee18 0a10 	vmov	r0, s16
   c539e:	4621      	mov	r1, r4
   c53a0:	f000 fa54 	bl	c584c <_Bfree>
   c53a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c53a6:	2300      	movs	r3, #0
   c53a8:	6013      	str	r3, [r2, #0]
   c53aa:	27a3      	movs	r7, #163	; 0xa3
   c53ac:	e785      	b.n	c52ba <__gethex+0x12a>
   c53ae:	1e73      	subs	r3, r6, #1
   c53b0:	9a05      	ldr	r2, [sp, #20]
   c53b2:	9303      	str	r3, [sp, #12]
   c53b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c53b8:	4293      	cmp	r3, r2
   c53ba:	d019      	beq.n	c53f0 <__gethex+0x260>
   c53bc:	f1bb 0f20 	cmp.w	fp, #32
   c53c0:	d107      	bne.n	c53d2 <__gethex+0x242>
   c53c2:	9b02      	ldr	r3, [sp, #8]
   c53c4:	9a00      	ldr	r2, [sp, #0]
   c53c6:	f843 2b04 	str.w	r2, [r3], #4
   c53ca:	9302      	str	r3, [sp, #8]
   c53cc:	2300      	movs	r3, #0
   c53ce:	9300      	str	r3, [sp, #0]
   c53d0:	469b      	mov	fp, r3
   c53d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c53d6:	f7ff fec5 	bl	c5164 <__hexdig_fun>
   c53da:	9b00      	ldr	r3, [sp, #0]
   c53dc:	f000 000f 	and.w	r0, r0, #15
   c53e0:	fa00 f00b 	lsl.w	r0, r0, fp
   c53e4:	4303      	orrs	r3, r0
   c53e6:	9300      	str	r3, [sp, #0]
   c53e8:	f10b 0b04 	add.w	fp, fp, #4
   c53ec:	9b03      	ldr	r3, [sp, #12]
   c53ee:	e00d      	b.n	c540c <__gethex+0x27c>
   c53f0:	9b03      	ldr	r3, [sp, #12]
   c53f2:	9a06      	ldr	r2, [sp, #24]
   c53f4:	4413      	add	r3, r2
   c53f6:	42bb      	cmp	r3, r7
   c53f8:	d3e0      	bcc.n	c53bc <__gethex+0x22c>
   c53fa:	4618      	mov	r0, r3
   c53fc:	9901      	ldr	r1, [sp, #4]
   c53fe:	9307      	str	r3, [sp, #28]
   c5400:	4652      	mov	r2, sl
   c5402:	f7fe fee3 	bl	c41cc <strncmp>
   c5406:	9b07      	ldr	r3, [sp, #28]
   c5408:	2800      	cmp	r0, #0
   c540a:	d1d7      	bne.n	c53bc <__gethex+0x22c>
   c540c:	461e      	mov	r6, r3
   c540e:	e78b      	b.n	c5328 <__gethex+0x198>
   c5410:	f04f 0a03 	mov.w	sl, #3
   c5414:	e7b8      	b.n	c5388 <__gethex+0x1f8>
   c5416:	da0a      	bge.n	c542e <__gethex+0x29e>
   c5418:	1a37      	subs	r7, r6, r0
   c541a:	4621      	mov	r1, r4
   c541c:	ee18 0a10 	vmov	r0, s16
   c5420:	463a      	mov	r2, r7
   c5422:	f000 fc2f 	bl	c5c84 <__lshift>
   c5426:	1bed      	subs	r5, r5, r7
   c5428:	4604      	mov	r4, r0
   c542a:	f100 0914 	add.w	r9, r0, #20
   c542e:	f04f 0a00 	mov.w	sl, #0
   c5432:	e7ae      	b.n	c5392 <__gethex+0x202>
   c5434:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c5438:	42a8      	cmp	r0, r5
   c543a:	dd72      	ble.n	c5522 <__gethex+0x392>
   c543c:	1b45      	subs	r5, r0, r5
   c543e:	42ae      	cmp	r6, r5
   c5440:	dc36      	bgt.n	c54b0 <__gethex+0x320>
   c5442:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c5446:	2b02      	cmp	r3, #2
   c5448:	d02a      	beq.n	c54a0 <__gethex+0x310>
   c544a:	2b03      	cmp	r3, #3
   c544c:	d02c      	beq.n	c54a8 <__gethex+0x318>
   c544e:	2b01      	cmp	r3, #1
   c5450:	d11c      	bne.n	c548c <__gethex+0x2fc>
   c5452:	42ae      	cmp	r6, r5
   c5454:	d11a      	bne.n	c548c <__gethex+0x2fc>
   c5456:	2e01      	cmp	r6, #1
   c5458:	d112      	bne.n	c5480 <__gethex+0x2f0>
   c545a:	9a04      	ldr	r2, [sp, #16]
   c545c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c5460:	6013      	str	r3, [r2, #0]
   c5462:	2301      	movs	r3, #1
   c5464:	6123      	str	r3, [r4, #16]
   c5466:	f8c9 3000 	str.w	r3, [r9]
   c546a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c546c:	2762      	movs	r7, #98	; 0x62
   c546e:	601c      	str	r4, [r3, #0]
   c5470:	e723      	b.n	c52ba <__gethex+0x12a>
   c5472:	bf00      	nop
   c5474:	000c82f4 	.word	0x000c82f4
   c5478:	000c8281 	.word	0x000c8281
   c547c:	000c8292 	.word	0x000c8292
   c5480:	1e71      	subs	r1, r6, #1
   c5482:	4620      	mov	r0, r4
   c5484:	f000 fe42 	bl	c610c <__any_on>
   c5488:	2800      	cmp	r0, #0
   c548a:	d1e6      	bne.n	c545a <__gethex+0x2ca>
   c548c:	ee18 0a10 	vmov	r0, s16
   c5490:	4621      	mov	r1, r4
   c5492:	f000 f9db 	bl	c584c <_Bfree>
   c5496:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c5498:	2300      	movs	r3, #0
   c549a:	6013      	str	r3, [r2, #0]
   c549c:	2750      	movs	r7, #80	; 0x50
   c549e:	e70c      	b.n	c52ba <__gethex+0x12a>
   c54a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c54a2:	2b00      	cmp	r3, #0
   c54a4:	d1f2      	bne.n	c548c <__gethex+0x2fc>
   c54a6:	e7d8      	b.n	c545a <__gethex+0x2ca>
   c54a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c54aa:	2b00      	cmp	r3, #0
   c54ac:	d1d5      	bne.n	c545a <__gethex+0x2ca>
   c54ae:	e7ed      	b.n	c548c <__gethex+0x2fc>
   c54b0:	1e6f      	subs	r7, r5, #1
   c54b2:	f1ba 0f00 	cmp.w	sl, #0
   c54b6:	d131      	bne.n	c551c <__gethex+0x38c>
   c54b8:	b127      	cbz	r7, c54c4 <__gethex+0x334>
   c54ba:	4639      	mov	r1, r7
   c54bc:	4620      	mov	r0, r4
   c54be:	f000 fe25 	bl	c610c <__any_on>
   c54c2:	4682      	mov	sl, r0
   c54c4:	117b      	asrs	r3, r7, #5
   c54c6:	2101      	movs	r1, #1
   c54c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c54cc:	f007 071f 	and.w	r7, r7, #31
   c54d0:	fa01 f707 	lsl.w	r7, r1, r7
   c54d4:	421f      	tst	r7, r3
   c54d6:	4629      	mov	r1, r5
   c54d8:	4620      	mov	r0, r4
   c54da:	bf18      	it	ne
   c54dc:	f04a 0a02 	orrne.w	sl, sl, #2
   c54e0:	1b76      	subs	r6, r6, r5
   c54e2:	f7ff fded 	bl	c50c0 <rshift>
   c54e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c54ea:	2702      	movs	r7, #2
   c54ec:	f1ba 0f00 	cmp.w	sl, #0
   c54f0:	d048      	beq.n	c5584 <__gethex+0x3f4>
   c54f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c54f6:	2b02      	cmp	r3, #2
   c54f8:	d015      	beq.n	c5526 <__gethex+0x396>
   c54fa:	2b03      	cmp	r3, #3
   c54fc:	d017      	beq.n	c552e <__gethex+0x39e>
   c54fe:	2b01      	cmp	r3, #1
   c5500:	d109      	bne.n	c5516 <__gethex+0x386>
   c5502:	f01a 0f02 	tst.w	sl, #2
   c5506:	d006      	beq.n	c5516 <__gethex+0x386>
   c5508:	f8d9 0000 	ldr.w	r0, [r9]
   c550c:	ea4a 0a00 	orr.w	sl, sl, r0
   c5510:	f01a 0f01 	tst.w	sl, #1
   c5514:	d10e      	bne.n	c5534 <__gethex+0x3a4>
   c5516:	f047 0710 	orr.w	r7, r7, #16
   c551a:	e033      	b.n	c5584 <__gethex+0x3f4>
   c551c:	f04f 0a01 	mov.w	sl, #1
   c5520:	e7d0      	b.n	c54c4 <__gethex+0x334>
   c5522:	2701      	movs	r7, #1
   c5524:	e7e2      	b.n	c54ec <__gethex+0x35c>
   c5526:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5528:	f1c3 0301 	rsb	r3, r3, #1
   c552c:	9315      	str	r3, [sp, #84]	; 0x54
   c552e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5530:	2b00      	cmp	r3, #0
   c5532:	d0f0      	beq.n	c5516 <__gethex+0x386>
   c5534:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c5538:	f104 0314 	add.w	r3, r4, #20
   c553c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c5540:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c5544:	f04f 0c00 	mov.w	ip, #0
   c5548:	4618      	mov	r0, r3
   c554a:	f853 2b04 	ldr.w	r2, [r3], #4
   c554e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c5552:	d01c      	beq.n	c558e <__gethex+0x3fe>
   c5554:	3201      	adds	r2, #1
   c5556:	6002      	str	r2, [r0, #0]
   c5558:	2f02      	cmp	r7, #2
   c555a:	f104 0314 	add.w	r3, r4, #20
   c555e:	d13f      	bne.n	c55e0 <__gethex+0x450>
   c5560:	f8d8 2000 	ldr.w	r2, [r8]
   c5564:	3a01      	subs	r2, #1
   c5566:	42b2      	cmp	r2, r6
   c5568:	d10a      	bne.n	c5580 <__gethex+0x3f0>
   c556a:	1171      	asrs	r1, r6, #5
   c556c:	2201      	movs	r2, #1
   c556e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c5572:	f006 061f 	and.w	r6, r6, #31
   c5576:	fa02 f606 	lsl.w	r6, r2, r6
   c557a:	421e      	tst	r6, r3
   c557c:	bf18      	it	ne
   c557e:	4617      	movne	r7, r2
   c5580:	f047 0720 	orr.w	r7, r7, #32
   c5584:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c5586:	601c      	str	r4, [r3, #0]
   c5588:	9b04      	ldr	r3, [sp, #16]
   c558a:	601d      	str	r5, [r3, #0]
   c558c:	e695      	b.n	c52ba <__gethex+0x12a>
   c558e:	4299      	cmp	r1, r3
   c5590:	f843 cc04 	str.w	ip, [r3, #-4]
   c5594:	d8d8      	bhi.n	c5548 <__gethex+0x3b8>
   c5596:	68a3      	ldr	r3, [r4, #8]
   c5598:	459b      	cmp	fp, r3
   c559a:	db19      	blt.n	c55d0 <__gethex+0x440>
   c559c:	6861      	ldr	r1, [r4, #4]
   c559e:	ee18 0a10 	vmov	r0, s16
   c55a2:	3101      	adds	r1, #1
   c55a4:	f000 f912 	bl	c57cc <_Balloc>
   c55a8:	4681      	mov	r9, r0
   c55aa:	b918      	cbnz	r0, c55b4 <__gethex+0x424>
   c55ac:	4b1a      	ldr	r3, [pc, #104]	; (c5618 <__gethex+0x488>)
   c55ae:	4602      	mov	r2, r0
   c55b0:	2184      	movs	r1, #132	; 0x84
   c55b2:	e6a8      	b.n	c5306 <__gethex+0x176>
   c55b4:	6922      	ldr	r2, [r4, #16]
   c55b6:	3202      	adds	r2, #2
   c55b8:	f104 010c 	add.w	r1, r4, #12
   c55bc:	0092      	lsls	r2, r2, #2
   c55be:	300c      	adds	r0, #12
   c55c0:	f7fe fd36 	bl	c4030 <memcpy>
   c55c4:	4621      	mov	r1, r4
   c55c6:	ee18 0a10 	vmov	r0, s16
   c55ca:	f000 f93f 	bl	c584c <_Bfree>
   c55ce:	464c      	mov	r4, r9
   c55d0:	6923      	ldr	r3, [r4, #16]
   c55d2:	1c5a      	adds	r2, r3, #1
   c55d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c55d8:	6122      	str	r2, [r4, #16]
   c55da:	2201      	movs	r2, #1
   c55dc:	615a      	str	r2, [r3, #20]
   c55de:	e7bb      	b.n	c5558 <__gethex+0x3c8>
   c55e0:	6922      	ldr	r2, [r4, #16]
   c55e2:	455a      	cmp	r2, fp
   c55e4:	dd0b      	ble.n	c55fe <__gethex+0x46e>
   c55e6:	2101      	movs	r1, #1
   c55e8:	4620      	mov	r0, r4
   c55ea:	f7ff fd69 	bl	c50c0 <rshift>
   c55ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c55f2:	3501      	adds	r5, #1
   c55f4:	42ab      	cmp	r3, r5
   c55f6:	f6ff aed0 	blt.w	c539a <__gethex+0x20a>
   c55fa:	2701      	movs	r7, #1
   c55fc:	e7c0      	b.n	c5580 <__gethex+0x3f0>
   c55fe:	f016 061f 	ands.w	r6, r6, #31
   c5602:	d0fa      	beq.n	c55fa <__gethex+0x46a>
   c5604:	4453      	add	r3, sl
   c5606:	f1c6 0620 	rsb	r6, r6, #32
   c560a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c560e:	f000 f9cf 	bl	c59b0 <__hi0bits>
   c5612:	42b0      	cmp	r0, r6
   c5614:	dbe7      	blt.n	c55e6 <__gethex+0x456>
   c5616:	e7f0      	b.n	c55fa <__gethex+0x46a>
   c5618:	000c8281 	.word	0x000c8281

000c561c <L_shift>:
   c561c:	f1c2 0208 	rsb	r2, r2, #8
   c5620:	0092      	lsls	r2, r2, #2
   c5622:	b570      	push	{r4, r5, r6, lr}
   c5624:	f1c2 0620 	rsb	r6, r2, #32
   c5628:	6843      	ldr	r3, [r0, #4]
   c562a:	6804      	ldr	r4, [r0, #0]
   c562c:	fa03 f506 	lsl.w	r5, r3, r6
   c5630:	432c      	orrs	r4, r5
   c5632:	40d3      	lsrs	r3, r2
   c5634:	6004      	str	r4, [r0, #0]
   c5636:	f840 3f04 	str.w	r3, [r0, #4]!
   c563a:	4288      	cmp	r0, r1
   c563c:	d3f4      	bcc.n	c5628 <L_shift+0xc>
   c563e:	bd70      	pop	{r4, r5, r6, pc}

000c5640 <__match>:
   c5640:	b530      	push	{r4, r5, lr}
   c5642:	6803      	ldr	r3, [r0, #0]
   c5644:	3301      	adds	r3, #1
   c5646:	f811 4b01 	ldrb.w	r4, [r1], #1
   c564a:	b914      	cbnz	r4, c5652 <__match+0x12>
   c564c:	6003      	str	r3, [r0, #0]
   c564e:	2001      	movs	r0, #1
   c5650:	bd30      	pop	{r4, r5, pc}
   c5652:	f813 2b01 	ldrb.w	r2, [r3], #1
   c5656:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c565a:	2d19      	cmp	r5, #25
   c565c:	bf98      	it	ls
   c565e:	3220      	addls	r2, #32
   c5660:	42a2      	cmp	r2, r4
   c5662:	d0f0      	beq.n	c5646 <__match+0x6>
   c5664:	2000      	movs	r0, #0
   c5666:	e7f3      	b.n	c5650 <__match+0x10>

000c5668 <__hexnan>:
   c5668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c566c:	680b      	ldr	r3, [r1, #0]
   c566e:	115e      	asrs	r6, r3, #5
   c5670:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c5674:	f013 031f 	ands.w	r3, r3, #31
   c5678:	b087      	sub	sp, #28
   c567a:	bf18      	it	ne
   c567c:	3604      	addne	r6, #4
   c567e:	2500      	movs	r5, #0
   c5680:	1f37      	subs	r7, r6, #4
   c5682:	4690      	mov	r8, r2
   c5684:	6802      	ldr	r2, [r0, #0]
   c5686:	9301      	str	r3, [sp, #4]
   c5688:	4682      	mov	sl, r0
   c568a:	f846 5c04 	str.w	r5, [r6, #-4]
   c568e:	46b9      	mov	r9, r7
   c5690:	463c      	mov	r4, r7
   c5692:	9502      	str	r5, [sp, #8]
   c5694:	46ab      	mov	fp, r5
   c5696:	7851      	ldrb	r1, [r2, #1]
   c5698:	1c53      	adds	r3, r2, #1
   c569a:	9303      	str	r3, [sp, #12]
   c569c:	b341      	cbz	r1, c56f0 <__hexnan+0x88>
   c569e:	4608      	mov	r0, r1
   c56a0:	9205      	str	r2, [sp, #20]
   c56a2:	9104      	str	r1, [sp, #16]
   c56a4:	f7ff fd5e 	bl	c5164 <__hexdig_fun>
   c56a8:	2800      	cmp	r0, #0
   c56aa:	d14f      	bne.n	c574c <__hexnan+0xe4>
   c56ac:	9904      	ldr	r1, [sp, #16]
   c56ae:	9a05      	ldr	r2, [sp, #20]
   c56b0:	2920      	cmp	r1, #32
   c56b2:	d818      	bhi.n	c56e6 <__hexnan+0x7e>
   c56b4:	9b02      	ldr	r3, [sp, #8]
   c56b6:	459b      	cmp	fp, r3
   c56b8:	dd13      	ble.n	c56e2 <__hexnan+0x7a>
   c56ba:	454c      	cmp	r4, r9
   c56bc:	d206      	bcs.n	c56cc <__hexnan+0x64>
   c56be:	2d07      	cmp	r5, #7
   c56c0:	dc04      	bgt.n	c56cc <__hexnan+0x64>
   c56c2:	462a      	mov	r2, r5
   c56c4:	4649      	mov	r1, r9
   c56c6:	4620      	mov	r0, r4
   c56c8:	f7ff ffa8 	bl	c561c <L_shift>
   c56cc:	4544      	cmp	r4, r8
   c56ce:	d950      	bls.n	c5772 <__hexnan+0x10a>
   c56d0:	2300      	movs	r3, #0
   c56d2:	f1a4 0904 	sub.w	r9, r4, #4
   c56d6:	f844 3c04 	str.w	r3, [r4, #-4]
   c56da:	f8cd b008 	str.w	fp, [sp, #8]
   c56de:	464c      	mov	r4, r9
   c56e0:	461d      	mov	r5, r3
   c56e2:	9a03      	ldr	r2, [sp, #12]
   c56e4:	e7d7      	b.n	c5696 <__hexnan+0x2e>
   c56e6:	2929      	cmp	r1, #41	; 0x29
   c56e8:	d156      	bne.n	c5798 <__hexnan+0x130>
   c56ea:	3202      	adds	r2, #2
   c56ec:	f8ca 2000 	str.w	r2, [sl]
   c56f0:	f1bb 0f00 	cmp.w	fp, #0
   c56f4:	d050      	beq.n	c5798 <__hexnan+0x130>
   c56f6:	454c      	cmp	r4, r9
   c56f8:	d206      	bcs.n	c5708 <__hexnan+0xa0>
   c56fa:	2d07      	cmp	r5, #7
   c56fc:	dc04      	bgt.n	c5708 <__hexnan+0xa0>
   c56fe:	462a      	mov	r2, r5
   c5700:	4649      	mov	r1, r9
   c5702:	4620      	mov	r0, r4
   c5704:	f7ff ff8a 	bl	c561c <L_shift>
   c5708:	4544      	cmp	r4, r8
   c570a:	d934      	bls.n	c5776 <__hexnan+0x10e>
   c570c:	f1a8 0204 	sub.w	r2, r8, #4
   c5710:	4623      	mov	r3, r4
   c5712:	f853 1b04 	ldr.w	r1, [r3], #4
   c5716:	f842 1f04 	str.w	r1, [r2, #4]!
   c571a:	429f      	cmp	r7, r3
   c571c:	d2f9      	bcs.n	c5712 <__hexnan+0xaa>
   c571e:	1b3b      	subs	r3, r7, r4
   c5720:	f023 0303 	bic.w	r3, r3, #3
   c5724:	3304      	adds	r3, #4
   c5726:	3401      	adds	r4, #1
   c5728:	3e03      	subs	r6, #3
   c572a:	42b4      	cmp	r4, r6
   c572c:	bf88      	it	hi
   c572e:	2304      	movhi	r3, #4
   c5730:	4443      	add	r3, r8
   c5732:	2200      	movs	r2, #0
   c5734:	f843 2b04 	str.w	r2, [r3], #4
   c5738:	429f      	cmp	r7, r3
   c573a:	d2fb      	bcs.n	c5734 <__hexnan+0xcc>
   c573c:	683b      	ldr	r3, [r7, #0]
   c573e:	b91b      	cbnz	r3, c5748 <__hexnan+0xe0>
   c5740:	4547      	cmp	r7, r8
   c5742:	d127      	bne.n	c5794 <__hexnan+0x12c>
   c5744:	2301      	movs	r3, #1
   c5746:	603b      	str	r3, [r7, #0]
   c5748:	2005      	movs	r0, #5
   c574a:	e026      	b.n	c579a <__hexnan+0x132>
   c574c:	3501      	adds	r5, #1
   c574e:	2d08      	cmp	r5, #8
   c5750:	f10b 0b01 	add.w	fp, fp, #1
   c5754:	dd06      	ble.n	c5764 <__hexnan+0xfc>
   c5756:	4544      	cmp	r4, r8
   c5758:	d9c3      	bls.n	c56e2 <__hexnan+0x7a>
   c575a:	2300      	movs	r3, #0
   c575c:	f844 3c04 	str.w	r3, [r4, #-4]
   c5760:	2501      	movs	r5, #1
   c5762:	3c04      	subs	r4, #4
   c5764:	6822      	ldr	r2, [r4, #0]
   c5766:	f000 000f 	and.w	r0, r0, #15
   c576a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c576e:	6022      	str	r2, [r4, #0]
   c5770:	e7b7      	b.n	c56e2 <__hexnan+0x7a>
   c5772:	2508      	movs	r5, #8
   c5774:	e7b5      	b.n	c56e2 <__hexnan+0x7a>
   c5776:	9b01      	ldr	r3, [sp, #4]
   c5778:	2b00      	cmp	r3, #0
   c577a:	d0df      	beq.n	c573c <__hexnan+0xd4>
   c577c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c5780:	f1c3 0320 	rsb	r3, r3, #32
   c5784:	fa22 f303 	lsr.w	r3, r2, r3
   c5788:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c578c:	401a      	ands	r2, r3
   c578e:	f846 2c04 	str.w	r2, [r6, #-4]
   c5792:	e7d3      	b.n	c573c <__hexnan+0xd4>
   c5794:	3f04      	subs	r7, #4
   c5796:	e7d1      	b.n	c573c <__hexnan+0xd4>
   c5798:	2004      	movs	r0, #4
   c579a:	b007      	add	sp, #28
   c579c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c57a0 <__retarget_lock_acquire_recursive>:
   c57a0:	4770      	bx	lr

000c57a2 <__retarget_lock_release>:
   c57a2:	4770      	bx	lr

000c57a4 <__retarget_lock_release_recursive>:
   c57a4:	4770      	bx	lr

000c57a6 <__ascii_mbtowc>:
   c57a6:	b082      	sub	sp, #8
   c57a8:	b901      	cbnz	r1, c57ac <__ascii_mbtowc+0x6>
   c57aa:	a901      	add	r1, sp, #4
   c57ac:	b142      	cbz	r2, c57c0 <__ascii_mbtowc+0x1a>
   c57ae:	b14b      	cbz	r3, c57c4 <__ascii_mbtowc+0x1e>
   c57b0:	7813      	ldrb	r3, [r2, #0]
   c57b2:	600b      	str	r3, [r1, #0]
   c57b4:	7812      	ldrb	r2, [r2, #0]
   c57b6:	1e10      	subs	r0, r2, #0
   c57b8:	bf18      	it	ne
   c57ba:	2001      	movne	r0, #1
   c57bc:	b002      	add	sp, #8
   c57be:	4770      	bx	lr
   c57c0:	4610      	mov	r0, r2
   c57c2:	e7fb      	b.n	c57bc <__ascii_mbtowc+0x16>
   c57c4:	f06f 0001 	mvn.w	r0, #1
   c57c8:	e7f8      	b.n	c57bc <__ascii_mbtowc+0x16>
	...

000c57cc <_Balloc>:
   c57cc:	b570      	push	{r4, r5, r6, lr}
   c57ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c57d0:	4604      	mov	r4, r0
   c57d2:	460d      	mov	r5, r1
   c57d4:	b976      	cbnz	r6, c57f4 <_Balloc+0x28>
   c57d6:	2010      	movs	r0, #16
   c57d8:	f7f8 fb16 	bl	bde08 <malloc>
   c57dc:	4602      	mov	r2, r0
   c57de:	6260      	str	r0, [r4, #36]	; 0x24
   c57e0:	b920      	cbnz	r0, c57ec <_Balloc+0x20>
   c57e2:	4b18      	ldr	r3, [pc, #96]	; (c5844 <_Balloc+0x78>)
   c57e4:	4818      	ldr	r0, [pc, #96]	; (c5848 <_Balloc+0x7c>)
   c57e6:	2166      	movs	r1, #102	; 0x66
   c57e8:	f7f8 fb5e 	bl	bdea8 <__assert_func>
   c57ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c57f0:	6006      	str	r6, [r0, #0]
   c57f2:	60c6      	str	r6, [r0, #12]
   c57f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c57f6:	68f3      	ldr	r3, [r6, #12]
   c57f8:	b183      	cbz	r3, c581c <_Balloc+0x50>
   c57fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c57fc:	68db      	ldr	r3, [r3, #12]
   c57fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c5802:	b9b8      	cbnz	r0, c5834 <_Balloc+0x68>
   c5804:	2101      	movs	r1, #1
   c5806:	fa01 f605 	lsl.w	r6, r1, r5
   c580a:	1d72      	adds	r2, r6, #5
   c580c:	0092      	lsls	r2, r2, #2
   c580e:	4620      	mov	r0, r4
   c5810:	f000 fc9d 	bl	c614e <_calloc_r>
   c5814:	b160      	cbz	r0, c5830 <_Balloc+0x64>
   c5816:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c581a:	e00e      	b.n	c583a <_Balloc+0x6e>
   c581c:	2221      	movs	r2, #33	; 0x21
   c581e:	2104      	movs	r1, #4
   c5820:	4620      	mov	r0, r4
   c5822:	f000 fc94 	bl	c614e <_calloc_r>
   c5826:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5828:	60f0      	str	r0, [r6, #12]
   c582a:	68db      	ldr	r3, [r3, #12]
   c582c:	2b00      	cmp	r3, #0
   c582e:	d1e4      	bne.n	c57fa <_Balloc+0x2e>
   c5830:	2000      	movs	r0, #0
   c5832:	bd70      	pop	{r4, r5, r6, pc}
   c5834:	6802      	ldr	r2, [r0, #0]
   c5836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c583a:	2300      	movs	r3, #0
   c583c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c5840:	e7f7      	b.n	c5832 <_Balloc+0x66>
   c5842:	bf00      	nop
   c5844:	000c80b0 	.word	0x000c80b0
   c5848:	000c8306 	.word	0x000c8306

000c584c <_Bfree>:
   c584c:	b570      	push	{r4, r5, r6, lr}
   c584e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5850:	4605      	mov	r5, r0
   c5852:	460c      	mov	r4, r1
   c5854:	b976      	cbnz	r6, c5874 <_Bfree+0x28>
   c5856:	2010      	movs	r0, #16
   c5858:	f7f8 fad6 	bl	bde08 <malloc>
   c585c:	4602      	mov	r2, r0
   c585e:	6268      	str	r0, [r5, #36]	; 0x24
   c5860:	b920      	cbnz	r0, c586c <_Bfree+0x20>
   c5862:	4b09      	ldr	r3, [pc, #36]	; (c5888 <_Bfree+0x3c>)
   c5864:	4809      	ldr	r0, [pc, #36]	; (c588c <_Bfree+0x40>)
   c5866:	218a      	movs	r1, #138	; 0x8a
   c5868:	f7f8 fb1e 	bl	bdea8 <__assert_func>
   c586c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5870:	6006      	str	r6, [r0, #0]
   c5872:	60c6      	str	r6, [r0, #12]
   c5874:	b13c      	cbz	r4, c5886 <_Bfree+0x3a>
   c5876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c5878:	6862      	ldr	r2, [r4, #4]
   c587a:	68db      	ldr	r3, [r3, #12]
   c587c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c5880:	6021      	str	r1, [r4, #0]
   c5882:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c5886:	bd70      	pop	{r4, r5, r6, pc}
   c5888:	000c80b0 	.word	0x000c80b0
   c588c:	000c8306 	.word	0x000c8306

000c5890 <__multadd>:
   c5890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c5894:	690d      	ldr	r5, [r1, #16]
   c5896:	4607      	mov	r7, r0
   c5898:	460c      	mov	r4, r1
   c589a:	461e      	mov	r6, r3
   c589c:	f101 0c14 	add.w	ip, r1, #20
   c58a0:	2000      	movs	r0, #0
   c58a2:	f8dc 3000 	ldr.w	r3, [ip]
   c58a6:	b299      	uxth	r1, r3
   c58a8:	fb02 6101 	mla	r1, r2, r1, r6
   c58ac:	0c1e      	lsrs	r6, r3, #16
   c58ae:	0c0b      	lsrs	r3, r1, #16
   c58b0:	fb02 3306 	mla	r3, r2, r6, r3
   c58b4:	b289      	uxth	r1, r1
   c58b6:	3001      	adds	r0, #1
   c58b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c58bc:	4285      	cmp	r5, r0
   c58be:	f84c 1b04 	str.w	r1, [ip], #4
   c58c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c58c6:	dcec      	bgt.n	c58a2 <__multadd+0x12>
   c58c8:	b30e      	cbz	r6, c590e <__multadd+0x7e>
   c58ca:	68a3      	ldr	r3, [r4, #8]
   c58cc:	42ab      	cmp	r3, r5
   c58ce:	dc19      	bgt.n	c5904 <__multadd+0x74>
   c58d0:	6861      	ldr	r1, [r4, #4]
   c58d2:	4638      	mov	r0, r7
   c58d4:	3101      	adds	r1, #1
   c58d6:	f7ff ff79 	bl	c57cc <_Balloc>
   c58da:	4680      	mov	r8, r0
   c58dc:	b928      	cbnz	r0, c58ea <__multadd+0x5a>
   c58de:	4602      	mov	r2, r0
   c58e0:	4b0c      	ldr	r3, [pc, #48]	; (c5914 <__multadd+0x84>)
   c58e2:	480d      	ldr	r0, [pc, #52]	; (c5918 <__multadd+0x88>)
   c58e4:	21b5      	movs	r1, #181	; 0xb5
   c58e6:	f7f8 fadf 	bl	bdea8 <__assert_func>
   c58ea:	6922      	ldr	r2, [r4, #16]
   c58ec:	3202      	adds	r2, #2
   c58ee:	f104 010c 	add.w	r1, r4, #12
   c58f2:	0092      	lsls	r2, r2, #2
   c58f4:	300c      	adds	r0, #12
   c58f6:	f7fe fb9b 	bl	c4030 <memcpy>
   c58fa:	4621      	mov	r1, r4
   c58fc:	4638      	mov	r0, r7
   c58fe:	f7ff ffa5 	bl	c584c <_Bfree>
   c5902:	4644      	mov	r4, r8
   c5904:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c5908:	3501      	adds	r5, #1
   c590a:	615e      	str	r6, [r3, #20]
   c590c:	6125      	str	r5, [r4, #16]
   c590e:	4620      	mov	r0, r4
   c5910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c5914:	000c8281 	.word	0x000c8281
   c5918:	000c8306 	.word	0x000c8306

000c591c <__s2b>:
   c591c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5920:	460c      	mov	r4, r1
   c5922:	4615      	mov	r5, r2
   c5924:	461f      	mov	r7, r3
   c5926:	2209      	movs	r2, #9
   c5928:	3308      	adds	r3, #8
   c592a:	4606      	mov	r6, r0
   c592c:	fb93 f3f2 	sdiv	r3, r3, r2
   c5930:	2100      	movs	r1, #0
   c5932:	2201      	movs	r2, #1
   c5934:	429a      	cmp	r2, r3
   c5936:	db09      	blt.n	c594c <__s2b+0x30>
   c5938:	4630      	mov	r0, r6
   c593a:	f7ff ff47 	bl	c57cc <_Balloc>
   c593e:	b940      	cbnz	r0, c5952 <__s2b+0x36>
   c5940:	4602      	mov	r2, r0
   c5942:	4b19      	ldr	r3, [pc, #100]	; (c59a8 <__s2b+0x8c>)
   c5944:	4819      	ldr	r0, [pc, #100]	; (c59ac <__s2b+0x90>)
   c5946:	21ce      	movs	r1, #206	; 0xce
   c5948:	f7f8 faae 	bl	bdea8 <__assert_func>
   c594c:	0052      	lsls	r2, r2, #1
   c594e:	3101      	adds	r1, #1
   c5950:	e7f0      	b.n	c5934 <__s2b+0x18>
   c5952:	9b08      	ldr	r3, [sp, #32]
   c5954:	6143      	str	r3, [r0, #20]
   c5956:	2d09      	cmp	r5, #9
   c5958:	f04f 0301 	mov.w	r3, #1
   c595c:	6103      	str	r3, [r0, #16]
   c595e:	dd16      	ble.n	c598e <__s2b+0x72>
   c5960:	f104 0909 	add.w	r9, r4, #9
   c5964:	46c8      	mov	r8, r9
   c5966:	442c      	add	r4, r5
   c5968:	f818 3b01 	ldrb.w	r3, [r8], #1
   c596c:	4601      	mov	r1, r0
   c596e:	3b30      	subs	r3, #48	; 0x30
   c5970:	220a      	movs	r2, #10
   c5972:	4630      	mov	r0, r6
   c5974:	f7ff ff8c 	bl	c5890 <__multadd>
   c5978:	45a0      	cmp	r8, r4
   c597a:	d1f5      	bne.n	c5968 <__s2b+0x4c>
   c597c:	f1a5 0408 	sub.w	r4, r5, #8
   c5980:	444c      	add	r4, r9
   c5982:	1b2d      	subs	r5, r5, r4
   c5984:	1963      	adds	r3, r4, r5
   c5986:	42bb      	cmp	r3, r7
   c5988:	db04      	blt.n	c5994 <__s2b+0x78>
   c598a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c598e:	340a      	adds	r4, #10
   c5990:	2509      	movs	r5, #9
   c5992:	e7f6      	b.n	c5982 <__s2b+0x66>
   c5994:	f814 3b01 	ldrb.w	r3, [r4], #1
   c5998:	4601      	mov	r1, r0
   c599a:	3b30      	subs	r3, #48	; 0x30
   c599c:	220a      	movs	r2, #10
   c599e:	4630      	mov	r0, r6
   c59a0:	f7ff ff76 	bl	c5890 <__multadd>
   c59a4:	e7ee      	b.n	c5984 <__s2b+0x68>
   c59a6:	bf00      	nop
   c59a8:	000c8281 	.word	0x000c8281
   c59ac:	000c8306 	.word	0x000c8306

000c59b0 <__hi0bits>:
   c59b0:	0c03      	lsrs	r3, r0, #16
   c59b2:	041b      	lsls	r3, r3, #16
   c59b4:	b9d3      	cbnz	r3, c59ec <__hi0bits+0x3c>
   c59b6:	0400      	lsls	r0, r0, #16
   c59b8:	2310      	movs	r3, #16
   c59ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c59be:	bf04      	itt	eq
   c59c0:	0200      	lsleq	r0, r0, #8
   c59c2:	3308      	addeq	r3, #8
   c59c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c59c8:	bf04      	itt	eq
   c59ca:	0100      	lsleq	r0, r0, #4
   c59cc:	3304      	addeq	r3, #4
   c59ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c59d2:	bf04      	itt	eq
   c59d4:	0080      	lsleq	r0, r0, #2
   c59d6:	3302      	addeq	r3, #2
   c59d8:	2800      	cmp	r0, #0
   c59da:	db05      	blt.n	c59e8 <__hi0bits+0x38>
   c59dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c59e0:	f103 0301 	add.w	r3, r3, #1
   c59e4:	bf08      	it	eq
   c59e6:	2320      	moveq	r3, #32
   c59e8:	4618      	mov	r0, r3
   c59ea:	4770      	bx	lr
   c59ec:	2300      	movs	r3, #0
   c59ee:	e7e4      	b.n	c59ba <__hi0bits+0xa>

000c59f0 <__lo0bits>:
   c59f0:	6803      	ldr	r3, [r0, #0]
   c59f2:	f013 0207 	ands.w	r2, r3, #7
   c59f6:	4601      	mov	r1, r0
   c59f8:	d00b      	beq.n	c5a12 <__lo0bits+0x22>
   c59fa:	07da      	lsls	r2, r3, #31
   c59fc:	d423      	bmi.n	c5a46 <__lo0bits+0x56>
   c59fe:	0798      	lsls	r0, r3, #30
   c5a00:	bf49      	itett	mi
   c5a02:	085b      	lsrmi	r3, r3, #1
   c5a04:	089b      	lsrpl	r3, r3, #2
   c5a06:	2001      	movmi	r0, #1
   c5a08:	600b      	strmi	r3, [r1, #0]
   c5a0a:	bf5c      	itt	pl
   c5a0c:	600b      	strpl	r3, [r1, #0]
   c5a0e:	2002      	movpl	r0, #2
   c5a10:	4770      	bx	lr
   c5a12:	b298      	uxth	r0, r3
   c5a14:	b9a8      	cbnz	r0, c5a42 <__lo0bits+0x52>
   c5a16:	0c1b      	lsrs	r3, r3, #16
   c5a18:	2010      	movs	r0, #16
   c5a1a:	b2da      	uxtb	r2, r3
   c5a1c:	b90a      	cbnz	r2, c5a22 <__lo0bits+0x32>
   c5a1e:	3008      	adds	r0, #8
   c5a20:	0a1b      	lsrs	r3, r3, #8
   c5a22:	071a      	lsls	r2, r3, #28
   c5a24:	bf04      	itt	eq
   c5a26:	091b      	lsreq	r3, r3, #4
   c5a28:	3004      	addeq	r0, #4
   c5a2a:	079a      	lsls	r2, r3, #30
   c5a2c:	bf04      	itt	eq
   c5a2e:	089b      	lsreq	r3, r3, #2
   c5a30:	3002      	addeq	r0, #2
   c5a32:	07da      	lsls	r2, r3, #31
   c5a34:	d403      	bmi.n	c5a3e <__lo0bits+0x4e>
   c5a36:	085b      	lsrs	r3, r3, #1
   c5a38:	f100 0001 	add.w	r0, r0, #1
   c5a3c:	d005      	beq.n	c5a4a <__lo0bits+0x5a>
   c5a3e:	600b      	str	r3, [r1, #0]
   c5a40:	4770      	bx	lr
   c5a42:	4610      	mov	r0, r2
   c5a44:	e7e9      	b.n	c5a1a <__lo0bits+0x2a>
   c5a46:	2000      	movs	r0, #0
   c5a48:	4770      	bx	lr
   c5a4a:	2020      	movs	r0, #32
   c5a4c:	4770      	bx	lr
	...

000c5a50 <__i2b>:
   c5a50:	b510      	push	{r4, lr}
   c5a52:	460c      	mov	r4, r1
   c5a54:	2101      	movs	r1, #1
   c5a56:	f7ff feb9 	bl	c57cc <_Balloc>
   c5a5a:	4602      	mov	r2, r0
   c5a5c:	b928      	cbnz	r0, c5a6a <__i2b+0x1a>
   c5a5e:	4b05      	ldr	r3, [pc, #20]	; (c5a74 <__i2b+0x24>)
   c5a60:	4805      	ldr	r0, [pc, #20]	; (c5a78 <__i2b+0x28>)
   c5a62:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c5a66:	f7f8 fa1f 	bl	bdea8 <__assert_func>
   c5a6a:	2301      	movs	r3, #1
   c5a6c:	6144      	str	r4, [r0, #20]
   c5a6e:	6103      	str	r3, [r0, #16]
   c5a70:	bd10      	pop	{r4, pc}
   c5a72:	bf00      	nop
   c5a74:	000c8281 	.word	0x000c8281
   c5a78:	000c8306 	.word	0x000c8306

000c5a7c <__multiply>:
   c5a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5a80:	4691      	mov	r9, r2
   c5a82:	690a      	ldr	r2, [r1, #16]
   c5a84:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c5a88:	429a      	cmp	r2, r3
   c5a8a:	bfb8      	it	lt
   c5a8c:	460b      	movlt	r3, r1
   c5a8e:	460c      	mov	r4, r1
   c5a90:	bfbc      	itt	lt
   c5a92:	464c      	movlt	r4, r9
   c5a94:	4699      	movlt	r9, r3
   c5a96:	6927      	ldr	r7, [r4, #16]
   c5a98:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c5a9c:	68a3      	ldr	r3, [r4, #8]
   c5a9e:	6861      	ldr	r1, [r4, #4]
   c5aa0:	eb07 060a 	add.w	r6, r7, sl
   c5aa4:	42b3      	cmp	r3, r6
   c5aa6:	b085      	sub	sp, #20
   c5aa8:	bfb8      	it	lt
   c5aaa:	3101      	addlt	r1, #1
   c5aac:	f7ff fe8e 	bl	c57cc <_Balloc>
   c5ab0:	b930      	cbnz	r0, c5ac0 <__multiply+0x44>
   c5ab2:	4602      	mov	r2, r0
   c5ab4:	4b44      	ldr	r3, [pc, #272]	; (c5bc8 <__multiply+0x14c>)
   c5ab6:	4845      	ldr	r0, [pc, #276]	; (c5bcc <__multiply+0x150>)
   c5ab8:	f240 115d 	movw	r1, #349	; 0x15d
   c5abc:	f7f8 f9f4 	bl	bdea8 <__assert_func>
   c5ac0:	f100 0514 	add.w	r5, r0, #20
   c5ac4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c5ac8:	462b      	mov	r3, r5
   c5aca:	2200      	movs	r2, #0
   c5acc:	4543      	cmp	r3, r8
   c5ace:	d321      	bcc.n	c5b14 <__multiply+0x98>
   c5ad0:	f104 0314 	add.w	r3, r4, #20
   c5ad4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c5ad8:	f109 0314 	add.w	r3, r9, #20
   c5adc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c5ae0:	9202      	str	r2, [sp, #8]
   c5ae2:	1b3a      	subs	r2, r7, r4
   c5ae4:	3a15      	subs	r2, #21
   c5ae6:	f022 0203 	bic.w	r2, r2, #3
   c5aea:	3204      	adds	r2, #4
   c5aec:	f104 0115 	add.w	r1, r4, #21
   c5af0:	428f      	cmp	r7, r1
   c5af2:	bf38      	it	cc
   c5af4:	2204      	movcc	r2, #4
   c5af6:	9201      	str	r2, [sp, #4]
   c5af8:	9a02      	ldr	r2, [sp, #8]
   c5afa:	9303      	str	r3, [sp, #12]
   c5afc:	429a      	cmp	r2, r3
   c5afe:	d80c      	bhi.n	c5b1a <__multiply+0x9e>
   c5b00:	2e00      	cmp	r6, #0
   c5b02:	dd03      	ble.n	c5b0c <__multiply+0x90>
   c5b04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c5b08:	2b00      	cmp	r3, #0
   c5b0a:	d05a      	beq.n	c5bc2 <__multiply+0x146>
   c5b0c:	6106      	str	r6, [r0, #16]
   c5b0e:	b005      	add	sp, #20
   c5b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5b14:	f843 2b04 	str.w	r2, [r3], #4
   c5b18:	e7d8      	b.n	c5acc <__multiply+0x50>
   c5b1a:	f8b3 a000 	ldrh.w	sl, [r3]
   c5b1e:	f1ba 0f00 	cmp.w	sl, #0
   c5b22:	d024      	beq.n	c5b6e <__multiply+0xf2>
   c5b24:	f104 0e14 	add.w	lr, r4, #20
   c5b28:	46a9      	mov	r9, r5
   c5b2a:	f04f 0c00 	mov.w	ip, #0
   c5b2e:	f85e 2b04 	ldr.w	r2, [lr], #4
   c5b32:	f8d9 1000 	ldr.w	r1, [r9]
   c5b36:	fa1f fb82 	uxth.w	fp, r2
   c5b3a:	b289      	uxth	r1, r1
   c5b3c:	fb0a 110b 	mla	r1, sl, fp, r1
   c5b40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c5b44:	f8d9 2000 	ldr.w	r2, [r9]
   c5b48:	4461      	add	r1, ip
   c5b4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c5b4e:	fb0a c20b 	mla	r2, sl, fp, ip
   c5b52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c5b56:	b289      	uxth	r1, r1
   c5b58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c5b5c:	4577      	cmp	r7, lr
   c5b5e:	f849 1b04 	str.w	r1, [r9], #4
   c5b62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c5b66:	d8e2      	bhi.n	c5b2e <__multiply+0xb2>
   c5b68:	9a01      	ldr	r2, [sp, #4]
   c5b6a:	f845 c002 	str.w	ip, [r5, r2]
   c5b6e:	9a03      	ldr	r2, [sp, #12]
   c5b70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c5b74:	3304      	adds	r3, #4
   c5b76:	f1b9 0f00 	cmp.w	r9, #0
   c5b7a:	d020      	beq.n	c5bbe <__multiply+0x142>
   c5b7c:	6829      	ldr	r1, [r5, #0]
   c5b7e:	f104 0c14 	add.w	ip, r4, #20
   c5b82:	46ae      	mov	lr, r5
   c5b84:	f04f 0a00 	mov.w	sl, #0
   c5b88:	f8bc b000 	ldrh.w	fp, [ip]
   c5b8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c5b90:	fb09 220b 	mla	r2, r9, fp, r2
   c5b94:	4492      	add	sl, r2
   c5b96:	b289      	uxth	r1, r1
   c5b98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c5b9c:	f84e 1b04 	str.w	r1, [lr], #4
   c5ba0:	f85c 2b04 	ldr.w	r2, [ip], #4
   c5ba4:	f8be 1000 	ldrh.w	r1, [lr]
   c5ba8:	0c12      	lsrs	r2, r2, #16
   c5baa:	fb09 1102 	mla	r1, r9, r2, r1
   c5bae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c5bb2:	4567      	cmp	r7, ip
   c5bb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c5bb8:	d8e6      	bhi.n	c5b88 <__multiply+0x10c>
   c5bba:	9a01      	ldr	r2, [sp, #4]
   c5bbc:	50a9      	str	r1, [r5, r2]
   c5bbe:	3504      	adds	r5, #4
   c5bc0:	e79a      	b.n	c5af8 <__multiply+0x7c>
   c5bc2:	3e01      	subs	r6, #1
   c5bc4:	e79c      	b.n	c5b00 <__multiply+0x84>
   c5bc6:	bf00      	nop
   c5bc8:	000c8281 	.word	0x000c8281
   c5bcc:	000c8306 	.word	0x000c8306

000c5bd0 <__pow5mult>:
   c5bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5bd4:	4615      	mov	r5, r2
   c5bd6:	f012 0203 	ands.w	r2, r2, #3
   c5bda:	4606      	mov	r6, r0
   c5bdc:	460f      	mov	r7, r1
   c5bde:	d007      	beq.n	c5bf0 <__pow5mult+0x20>
   c5be0:	4c25      	ldr	r4, [pc, #148]	; (c5c78 <__pow5mult+0xa8>)
   c5be2:	3a01      	subs	r2, #1
   c5be4:	2300      	movs	r3, #0
   c5be6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c5bea:	f7ff fe51 	bl	c5890 <__multadd>
   c5bee:	4607      	mov	r7, r0
   c5bf0:	10ad      	asrs	r5, r5, #2
   c5bf2:	d03d      	beq.n	c5c70 <__pow5mult+0xa0>
   c5bf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c5bf6:	b97c      	cbnz	r4, c5c18 <__pow5mult+0x48>
   c5bf8:	2010      	movs	r0, #16
   c5bfa:	f7f8 f905 	bl	bde08 <malloc>
   c5bfe:	4602      	mov	r2, r0
   c5c00:	6270      	str	r0, [r6, #36]	; 0x24
   c5c02:	b928      	cbnz	r0, c5c10 <__pow5mult+0x40>
   c5c04:	4b1d      	ldr	r3, [pc, #116]	; (c5c7c <__pow5mult+0xac>)
   c5c06:	481e      	ldr	r0, [pc, #120]	; (c5c80 <__pow5mult+0xb0>)
   c5c08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c5c0c:	f7f8 f94c 	bl	bdea8 <__assert_func>
   c5c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c5c14:	6004      	str	r4, [r0, #0]
   c5c16:	60c4      	str	r4, [r0, #12]
   c5c18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c5c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c5c20:	b94c      	cbnz	r4, c5c36 <__pow5mult+0x66>
   c5c22:	f240 2171 	movw	r1, #625	; 0x271
   c5c26:	4630      	mov	r0, r6
   c5c28:	f7ff ff12 	bl	c5a50 <__i2b>
   c5c2c:	2300      	movs	r3, #0
   c5c2e:	f8c8 0008 	str.w	r0, [r8, #8]
   c5c32:	4604      	mov	r4, r0
   c5c34:	6003      	str	r3, [r0, #0]
   c5c36:	f04f 0900 	mov.w	r9, #0
   c5c3a:	07eb      	lsls	r3, r5, #31
   c5c3c:	d50a      	bpl.n	c5c54 <__pow5mult+0x84>
   c5c3e:	4639      	mov	r1, r7
   c5c40:	4622      	mov	r2, r4
   c5c42:	4630      	mov	r0, r6
   c5c44:	f7ff ff1a 	bl	c5a7c <__multiply>
   c5c48:	4639      	mov	r1, r7
   c5c4a:	4680      	mov	r8, r0
   c5c4c:	4630      	mov	r0, r6
   c5c4e:	f7ff fdfd 	bl	c584c <_Bfree>
   c5c52:	4647      	mov	r7, r8
   c5c54:	106d      	asrs	r5, r5, #1
   c5c56:	d00b      	beq.n	c5c70 <__pow5mult+0xa0>
   c5c58:	6820      	ldr	r0, [r4, #0]
   c5c5a:	b938      	cbnz	r0, c5c6c <__pow5mult+0x9c>
   c5c5c:	4622      	mov	r2, r4
   c5c5e:	4621      	mov	r1, r4
   c5c60:	4630      	mov	r0, r6
   c5c62:	f7ff ff0b 	bl	c5a7c <__multiply>
   c5c66:	6020      	str	r0, [r4, #0]
   c5c68:	f8c0 9000 	str.w	r9, [r0]
   c5c6c:	4604      	mov	r4, r0
   c5c6e:	e7e4      	b.n	c5c3a <__pow5mult+0x6a>
   c5c70:	4638      	mov	r0, r7
   c5c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5c76:	bf00      	nop
   c5c78:	000c8450 	.word	0x000c8450
   c5c7c:	000c80b0 	.word	0x000c80b0
   c5c80:	000c8306 	.word	0x000c8306

000c5c84 <__lshift>:
   c5c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c5c88:	460c      	mov	r4, r1
   c5c8a:	6849      	ldr	r1, [r1, #4]
   c5c8c:	6923      	ldr	r3, [r4, #16]
   c5c8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c5c92:	68a3      	ldr	r3, [r4, #8]
   c5c94:	4607      	mov	r7, r0
   c5c96:	4691      	mov	r9, r2
   c5c98:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c5c9c:	f108 0601 	add.w	r6, r8, #1
   c5ca0:	42b3      	cmp	r3, r6
   c5ca2:	db0b      	blt.n	c5cbc <__lshift+0x38>
   c5ca4:	4638      	mov	r0, r7
   c5ca6:	f7ff fd91 	bl	c57cc <_Balloc>
   c5caa:	4605      	mov	r5, r0
   c5cac:	b948      	cbnz	r0, c5cc2 <__lshift+0x3e>
   c5cae:	4602      	mov	r2, r0
   c5cb0:	4b2a      	ldr	r3, [pc, #168]	; (c5d5c <__lshift+0xd8>)
   c5cb2:	482b      	ldr	r0, [pc, #172]	; (c5d60 <__lshift+0xdc>)
   c5cb4:	f240 11d9 	movw	r1, #473	; 0x1d9
   c5cb8:	f7f8 f8f6 	bl	bdea8 <__assert_func>
   c5cbc:	3101      	adds	r1, #1
   c5cbe:	005b      	lsls	r3, r3, #1
   c5cc0:	e7ee      	b.n	c5ca0 <__lshift+0x1c>
   c5cc2:	2300      	movs	r3, #0
   c5cc4:	f100 0114 	add.w	r1, r0, #20
   c5cc8:	f100 0210 	add.w	r2, r0, #16
   c5ccc:	4618      	mov	r0, r3
   c5cce:	4553      	cmp	r3, sl
   c5cd0:	db37      	blt.n	c5d42 <__lshift+0xbe>
   c5cd2:	6920      	ldr	r0, [r4, #16]
   c5cd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c5cd8:	f104 0314 	add.w	r3, r4, #20
   c5cdc:	f019 091f 	ands.w	r9, r9, #31
   c5ce0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c5ce4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c5ce8:	d02f      	beq.n	c5d4a <__lshift+0xc6>
   c5cea:	f1c9 0e20 	rsb	lr, r9, #32
   c5cee:	468a      	mov	sl, r1
   c5cf0:	f04f 0c00 	mov.w	ip, #0
   c5cf4:	681a      	ldr	r2, [r3, #0]
   c5cf6:	fa02 f209 	lsl.w	r2, r2, r9
   c5cfa:	ea42 020c 	orr.w	r2, r2, ip
   c5cfe:	f84a 2b04 	str.w	r2, [sl], #4
   c5d02:	f853 2b04 	ldr.w	r2, [r3], #4
   c5d06:	4298      	cmp	r0, r3
   c5d08:	fa22 fc0e 	lsr.w	ip, r2, lr
   c5d0c:	d8f2      	bhi.n	c5cf4 <__lshift+0x70>
   c5d0e:	1b03      	subs	r3, r0, r4
   c5d10:	3b15      	subs	r3, #21
   c5d12:	f023 0303 	bic.w	r3, r3, #3
   c5d16:	3304      	adds	r3, #4
   c5d18:	f104 0215 	add.w	r2, r4, #21
   c5d1c:	4290      	cmp	r0, r2
   c5d1e:	bf38      	it	cc
   c5d20:	2304      	movcc	r3, #4
   c5d22:	f841 c003 	str.w	ip, [r1, r3]
   c5d26:	f1bc 0f00 	cmp.w	ip, #0
   c5d2a:	d001      	beq.n	c5d30 <__lshift+0xac>
   c5d2c:	f108 0602 	add.w	r6, r8, #2
   c5d30:	3e01      	subs	r6, #1
   c5d32:	4638      	mov	r0, r7
   c5d34:	612e      	str	r6, [r5, #16]
   c5d36:	4621      	mov	r1, r4
   c5d38:	f7ff fd88 	bl	c584c <_Bfree>
   c5d3c:	4628      	mov	r0, r5
   c5d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c5d42:	f842 0f04 	str.w	r0, [r2, #4]!
   c5d46:	3301      	adds	r3, #1
   c5d48:	e7c1      	b.n	c5cce <__lshift+0x4a>
   c5d4a:	3904      	subs	r1, #4
   c5d4c:	f853 2b04 	ldr.w	r2, [r3], #4
   c5d50:	f841 2f04 	str.w	r2, [r1, #4]!
   c5d54:	4298      	cmp	r0, r3
   c5d56:	d8f9      	bhi.n	c5d4c <__lshift+0xc8>
   c5d58:	e7ea      	b.n	c5d30 <__lshift+0xac>
   c5d5a:	bf00      	nop
   c5d5c:	000c8281 	.word	0x000c8281
   c5d60:	000c8306 	.word	0x000c8306

000c5d64 <__mcmp>:
   c5d64:	b530      	push	{r4, r5, lr}
   c5d66:	6902      	ldr	r2, [r0, #16]
   c5d68:	690c      	ldr	r4, [r1, #16]
   c5d6a:	1b12      	subs	r2, r2, r4
   c5d6c:	d10e      	bne.n	c5d8c <__mcmp+0x28>
   c5d6e:	f100 0314 	add.w	r3, r0, #20
   c5d72:	3114      	adds	r1, #20
   c5d74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c5d78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c5d7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c5d80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c5d84:	42a5      	cmp	r5, r4
   c5d86:	d003      	beq.n	c5d90 <__mcmp+0x2c>
   c5d88:	d305      	bcc.n	c5d96 <__mcmp+0x32>
   c5d8a:	2201      	movs	r2, #1
   c5d8c:	4610      	mov	r0, r2
   c5d8e:	bd30      	pop	{r4, r5, pc}
   c5d90:	4283      	cmp	r3, r0
   c5d92:	d3f3      	bcc.n	c5d7c <__mcmp+0x18>
   c5d94:	e7fa      	b.n	c5d8c <__mcmp+0x28>
   c5d96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c5d9a:	e7f7      	b.n	c5d8c <__mcmp+0x28>

000c5d9c <__mdiff>:
   c5d9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5da0:	460c      	mov	r4, r1
   c5da2:	4606      	mov	r6, r0
   c5da4:	4611      	mov	r1, r2
   c5da6:	4620      	mov	r0, r4
   c5da8:	4690      	mov	r8, r2
   c5daa:	f7ff ffdb 	bl	c5d64 <__mcmp>
   c5dae:	1e05      	subs	r5, r0, #0
   c5db0:	d110      	bne.n	c5dd4 <__mdiff+0x38>
   c5db2:	4629      	mov	r1, r5
   c5db4:	4630      	mov	r0, r6
   c5db6:	f7ff fd09 	bl	c57cc <_Balloc>
   c5dba:	b930      	cbnz	r0, c5dca <__mdiff+0x2e>
   c5dbc:	4b3a      	ldr	r3, [pc, #232]	; (c5ea8 <__mdiff+0x10c>)
   c5dbe:	4602      	mov	r2, r0
   c5dc0:	f240 2132 	movw	r1, #562	; 0x232
   c5dc4:	4839      	ldr	r0, [pc, #228]	; (c5eac <__mdiff+0x110>)
   c5dc6:	f7f8 f86f 	bl	bdea8 <__assert_func>
   c5dca:	2301      	movs	r3, #1
   c5dcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c5dd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5dd4:	bfa4      	itt	ge
   c5dd6:	4643      	movge	r3, r8
   c5dd8:	46a0      	movge	r8, r4
   c5dda:	4630      	mov	r0, r6
   c5ddc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c5de0:	bfa6      	itte	ge
   c5de2:	461c      	movge	r4, r3
   c5de4:	2500      	movge	r5, #0
   c5de6:	2501      	movlt	r5, #1
   c5de8:	f7ff fcf0 	bl	c57cc <_Balloc>
   c5dec:	b920      	cbnz	r0, c5df8 <__mdiff+0x5c>
   c5dee:	4b2e      	ldr	r3, [pc, #184]	; (c5ea8 <__mdiff+0x10c>)
   c5df0:	4602      	mov	r2, r0
   c5df2:	f44f 7110 	mov.w	r1, #576	; 0x240
   c5df6:	e7e5      	b.n	c5dc4 <__mdiff+0x28>
   c5df8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c5dfc:	6926      	ldr	r6, [r4, #16]
   c5dfe:	60c5      	str	r5, [r0, #12]
   c5e00:	f104 0914 	add.w	r9, r4, #20
   c5e04:	f108 0514 	add.w	r5, r8, #20
   c5e08:	f100 0e14 	add.w	lr, r0, #20
   c5e0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c5e10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c5e14:	f108 0210 	add.w	r2, r8, #16
   c5e18:	46f2      	mov	sl, lr
   c5e1a:	2100      	movs	r1, #0
   c5e1c:	f859 3b04 	ldr.w	r3, [r9], #4
   c5e20:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c5e24:	fa1f f883 	uxth.w	r8, r3
   c5e28:	fa11 f18b 	uxtah	r1, r1, fp
   c5e2c:	0c1b      	lsrs	r3, r3, #16
   c5e2e:	eba1 0808 	sub.w	r8, r1, r8
   c5e32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c5e36:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c5e3a:	fa1f f888 	uxth.w	r8, r8
   c5e3e:	1419      	asrs	r1, r3, #16
   c5e40:	454e      	cmp	r6, r9
   c5e42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c5e46:	f84a 3b04 	str.w	r3, [sl], #4
   c5e4a:	d8e7      	bhi.n	c5e1c <__mdiff+0x80>
   c5e4c:	1b33      	subs	r3, r6, r4
   c5e4e:	3b15      	subs	r3, #21
   c5e50:	f023 0303 	bic.w	r3, r3, #3
   c5e54:	3304      	adds	r3, #4
   c5e56:	3415      	adds	r4, #21
   c5e58:	42a6      	cmp	r6, r4
   c5e5a:	bf38      	it	cc
   c5e5c:	2304      	movcc	r3, #4
   c5e5e:	441d      	add	r5, r3
   c5e60:	4473      	add	r3, lr
   c5e62:	469e      	mov	lr, r3
   c5e64:	462e      	mov	r6, r5
   c5e66:	4566      	cmp	r6, ip
   c5e68:	d30e      	bcc.n	c5e88 <__mdiff+0xec>
   c5e6a:	f10c 0203 	add.w	r2, ip, #3
   c5e6e:	1b52      	subs	r2, r2, r5
   c5e70:	f022 0203 	bic.w	r2, r2, #3
   c5e74:	3d03      	subs	r5, #3
   c5e76:	45ac      	cmp	ip, r5
   c5e78:	bf38      	it	cc
   c5e7a:	2200      	movcc	r2, #0
   c5e7c:	441a      	add	r2, r3
   c5e7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c5e82:	b17b      	cbz	r3, c5ea4 <__mdiff+0x108>
   c5e84:	6107      	str	r7, [r0, #16]
   c5e86:	e7a3      	b.n	c5dd0 <__mdiff+0x34>
   c5e88:	f856 8b04 	ldr.w	r8, [r6], #4
   c5e8c:	fa11 f288 	uxtah	r2, r1, r8
   c5e90:	1414      	asrs	r4, r2, #16
   c5e92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c5e96:	b292      	uxth	r2, r2
   c5e98:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c5e9c:	f84e 2b04 	str.w	r2, [lr], #4
   c5ea0:	1421      	asrs	r1, r4, #16
   c5ea2:	e7e0      	b.n	c5e66 <__mdiff+0xca>
   c5ea4:	3f01      	subs	r7, #1
   c5ea6:	e7ea      	b.n	c5e7e <__mdiff+0xe2>
   c5ea8:	000c8281 	.word	0x000c8281
   c5eac:	000c8306 	.word	0x000c8306

000c5eb0 <__ulp>:
   c5eb0:	b082      	sub	sp, #8
   c5eb2:	ed8d 0b00 	vstr	d0, [sp]
   c5eb6:	9b01      	ldr	r3, [sp, #4]
   c5eb8:	4912      	ldr	r1, [pc, #72]	; (c5f04 <__ulp+0x54>)
   c5eba:	4019      	ands	r1, r3
   c5ebc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c5ec0:	2900      	cmp	r1, #0
   c5ec2:	dd05      	ble.n	c5ed0 <__ulp+0x20>
   c5ec4:	2200      	movs	r2, #0
   c5ec6:	460b      	mov	r3, r1
   c5ec8:	ec43 2b10 	vmov	d0, r2, r3
   c5ecc:	b002      	add	sp, #8
   c5ece:	4770      	bx	lr
   c5ed0:	4249      	negs	r1, r1
   c5ed2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c5ed6:	ea4f 5021 	mov.w	r0, r1, asr #20
   c5eda:	f04f 0200 	mov.w	r2, #0
   c5ede:	f04f 0300 	mov.w	r3, #0
   c5ee2:	da04      	bge.n	c5eee <__ulp+0x3e>
   c5ee4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c5ee8:	fa41 f300 	asr.w	r3, r1, r0
   c5eec:	e7ec      	b.n	c5ec8 <__ulp+0x18>
   c5eee:	f1a0 0114 	sub.w	r1, r0, #20
   c5ef2:	291e      	cmp	r1, #30
   c5ef4:	bfda      	itte	le
   c5ef6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c5efa:	fa20 f101 	lsrle.w	r1, r0, r1
   c5efe:	2101      	movgt	r1, #1
   c5f00:	460a      	mov	r2, r1
   c5f02:	e7e1      	b.n	c5ec8 <__ulp+0x18>
   c5f04:	7ff00000 	.word	0x7ff00000

000c5f08 <__b2d>:
   c5f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c5f0a:	6905      	ldr	r5, [r0, #16]
   c5f0c:	f100 0714 	add.w	r7, r0, #20
   c5f10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c5f14:	1f2e      	subs	r6, r5, #4
   c5f16:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c5f1a:	4620      	mov	r0, r4
   c5f1c:	f7ff fd48 	bl	c59b0 <__hi0bits>
   c5f20:	f1c0 0320 	rsb	r3, r0, #32
   c5f24:	280a      	cmp	r0, #10
   c5f26:	f8df c07c 	ldr.w	ip, [pc, #124]	; c5fa4 <__b2d+0x9c>
   c5f2a:	600b      	str	r3, [r1, #0]
   c5f2c:	dc14      	bgt.n	c5f58 <__b2d+0x50>
   c5f2e:	f1c0 0e0b 	rsb	lr, r0, #11
   c5f32:	fa24 f10e 	lsr.w	r1, r4, lr
   c5f36:	42b7      	cmp	r7, r6
   c5f38:	ea41 030c 	orr.w	r3, r1, ip
   c5f3c:	bf34      	ite	cc
   c5f3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c5f42:	2100      	movcs	r1, #0
   c5f44:	3015      	adds	r0, #21
   c5f46:	fa04 f000 	lsl.w	r0, r4, r0
   c5f4a:	fa21 f10e 	lsr.w	r1, r1, lr
   c5f4e:	ea40 0201 	orr.w	r2, r0, r1
   c5f52:	ec43 2b10 	vmov	d0, r2, r3
   c5f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c5f58:	42b7      	cmp	r7, r6
   c5f5a:	bf3a      	itte	cc
   c5f5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c5f60:	f1a5 0608 	subcc.w	r6, r5, #8
   c5f64:	2100      	movcs	r1, #0
   c5f66:	380b      	subs	r0, #11
   c5f68:	d017      	beq.n	c5f9a <__b2d+0x92>
   c5f6a:	f1c0 0c20 	rsb	ip, r0, #32
   c5f6e:	fa04 f500 	lsl.w	r5, r4, r0
   c5f72:	42be      	cmp	r6, r7
   c5f74:	fa21 f40c 	lsr.w	r4, r1, ip
   c5f78:	ea45 0504 	orr.w	r5, r5, r4
   c5f7c:	bf8c      	ite	hi
   c5f7e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c5f82:	2400      	movls	r4, #0
   c5f84:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c5f88:	fa01 f000 	lsl.w	r0, r1, r0
   c5f8c:	fa24 f40c 	lsr.w	r4, r4, ip
   c5f90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c5f94:	ea40 0204 	orr.w	r2, r0, r4
   c5f98:	e7db      	b.n	c5f52 <__b2d+0x4a>
   c5f9a:	ea44 030c 	orr.w	r3, r4, ip
   c5f9e:	460a      	mov	r2, r1
   c5fa0:	e7d7      	b.n	c5f52 <__b2d+0x4a>
   c5fa2:	bf00      	nop
   c5fa4:	3ff00000 	.word	0x3ff00000

000c5fa8 <__d2b>:
   c5fa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c5fac:	4689      	mov	r9, r1
   c5fae:	2101      	movs	r1, #1
   c5fb0:	ec57 6b10 	vmov	r6, r7, d0
   c5fb4:	4690      	mov	r8, r2
   c5fb6:	f7ff fc09 	bl	c57cc <_Balloc>
   c5fba:	4604      	mov	r4, r0
   c5fbc:	b930      	cbnz	r0, c5fcc <__d2b+0x24>
   c5fbe:	4602      	mov	r2, r0
   c5fc0:	4b25      	ldr	r3, [pc, #148]	; (c6058 <__d2b+0xb0>)
   c5fc2:	4826      	ldr	r0, [pc, #152]	; (c605c <__d2b+0xb4>)
   c5fc4:	f240 310a 	movw	r1, #778	; 0x30a
   c5fc8:	f7f7 ff6e 	bl	bdea8 <__assert_func>
   c5fcc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c5fd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c5fd4:	bb35      	cbnz	r5, c6024 <__d2b+0x7c>
   c5fd6:	2e00      	cmp	r6, #0
   c5fd8:	9301      	str	r3, [sp, #4]
   c5fda:	d028      	beq.n	c602e <__d2b+0x86>
   c5fdc:	4668      	mov	r0, sp
   c5fde:	9600      	str	r6, [sp, #0]
   c5fe0:	f7ff fd06 	bl	c59f0 <__lo0bits>
   c5fe4:	9900      	ldr	r1, [sp, #0]
   c5fe6:	b300      	cbz	r0, c602a <__d2b+0x82>
   c5fe8:	9a01      	ldr	r2, [sp, #4]
   c5fea:	f1c0 0320 	rsb	r3, r0, #32
   c5fee:	fa02 f303 	lsl.w	r3, r2, r3
   c5ff2:	430b      	orrs	r3, r1
   c5ff4:	40c2      	lsrs	r2, r0
   c5ff6:	6163      	str	r3, [r4, #20]
   c5ff8:	9201      	str	r2, [sp, #4]
   c5ffa:	9b01      	ldr	r3, [sp, #4]
   c5ffc:	61a3      	str	r3, [r4, #24]
   c5ffe:	2b00      	cmp	r3, #0
   c6000:	bf14      	ite	ne
   c6002:	2202      	movne	r2, #2
   c6004:	2201      	moveq	r2, #1
   c6006:	6122      	str	r2, [r4, #16]
   c6008:	b1d5      	cbz	r5, c6040 <__d2b+0x98>
   c600a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c600e:	4405      	add	r5, r0
   c6010:	f8c9 5000 	str.w	r5, [r9]
   c6014:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c6018:	f8c8 0000 	str.w	r0, [r8]
   c601c:	4620      	mov	r0, r4
   c601e:	b003      	add	sp, #12
   c6020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c6024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c6028:	e7d5      	b.n	c5fd6 <__d2b+0x2e>
   c602a:	6161      	str	r1, [r4, #20]
   c602c:	e7e5      	b.n	c5ffa <__d2b+0x52>
   c602e:	a801      	add	r0, sp, #4
   c6030:	f7ff fcde 	bl	c59f0 <__lo0bits>
   c6034:	9b01      	ldr	r3, [sp, #4]
   c6036:	6163      	str	r3, [r4, #20]
   c6038:	2201      	movs	r2, #1
   c603a:	6122      	str	r2, [r4, #16]
   c603c:	3020      	adds	r0, #32
   c603e:	e7e3      	b.n	c6008 <__d2b+0x60>
   c6040:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c6044:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c6048:	f8c9 0000 	str.w	r0, [r9]
   c604c:	6918      	ldr	r0, [r3, #16]
   c604e:	f7ff fcaf 	bl	c59b0 <__hi0bits>
   c6052:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c6056:	e7df      	b.n	c6018 <__d2b+0x70>
   c6058:	000c8281 	.word	0x000c8281
   c605c:	000c8306 	.word	0x000c8306

000c6060 <__ratio>:
   c6060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c6064:	4688      	mov	r8, r1
   c6066:	4669      	mov	r1, sp
   c6068:	4681      	mov	r9, r0
   c606a:	f7ff ff4d 	bl	c5f08 <__b2d>
   c606e:	a901      	add	r1, sp, #4
   c6070:	4640      	mov	r0, r8
   c6072:	ec55 4b10 	vmov	r4, r5, d0
   c6076:	f7ff ff47 	bl	c5f08 <__b2d>
   c607a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c607e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c6082:	eba3 0c02 	sub.w	ip, r3, r2
   c6086:	e9dd 3200 	ldrd	r3, r2, [sp]
   c608a:	1a9b      	subs	r3, r3, r2
   c608c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c6090:	ec51 0b10 	vmov	r0, r1, d0
   c6094:	2b00      	cmp	r3, #0
   c6096:	bfd6      	itet	le
   c6098:	460a      	movle	r2, r1
   c609a:	462a      	movgt	r2, r5
   c609c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c60a0:	468b      	mov	fp, r1
   c60a2:	462f      	mov	r7, r5
   c60a4:	bfd4      	ite	le
   c60a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c60aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c60ae:	4620      	mov	r0, r4
   c60b0:	ee10 2a10 	vmov	r2, s0
   c60b4:	465b      	mov	r3, fp
   c60b6:	4639      	mov	r1, r7
   c60b8:	f7fd fd58 	bl	c3b6c <__aeabi_ddiv>
   c60bc:	ec41 0b10 	vmov	d0, r0, r1
   c60c0:	b003      	add	sp, #12
   c60c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c60c6 <__copybits>:
   c60c6:	3901      	subs	r1, #1
   c60c8:	b570      	push	{r4, r5, r6, lr}
   c60ca:	1149      	asrs	r1, r1, #5
   c60cc:	6914      	ldr	r4, [r2, #16]
   c60ce:	3101      	adds	r1, #1
   c60d0:	f102 0314 	add.w	r3, r2, #20
   c60d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c60d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c60dc:	1f05      	subs	r5, r0, #4
   c60de:	42a3      	cmp	r3, r4
   c60e0:	d30c      	bcc.n	c60fc <__copybits+0x36>
   c60e2:	1aa3      	subs	r3, r4, r2
   c60e4:	3b11      	subs	r3, #17
   c60e6:	f023 0303 	bic.w	r3, r3, #3
   c60ea:	3211      	adds	r2, #17
   c60ec:	42a2      	cmp	r2, r4
   c60ee:	bf88      	it	hi
   c60f0:	2300      	movhi	r3, #0
   c60f2:	4418      	add	r0, r3
   c60f4:	2300      	movs	r3, #0
   c60f6:	4288      	cmp	r0, r1
   c60f8:	d305      	bcc.n	c6106 <__copybits+0x40>
   c60fa:	bd70      	pop	{r4, r5, r6, pc}
   c60fc:	f853 6b04 	ldr.w	r6, [r3], #4
   c6100:	f845 6f04 	str.w	r6, [r5, #4]!
   c6104:	e7eb      	b.n	c60de <__copybits+0x18>
   c6106:	f840 3b04 	str.w	r3, [r0], #4
   c610a:	e7f4      	b.n	c60f6 <__copybits+0x30>

000c610c <__any_on>:
   c610c:	f100 0214 	add.w	r2, r0, #20
   c6110:	6900      	ldr	r0, [r0, #16]
   c6112:	114b      	asrs	r3, r1, #5
   c6114:	4298      	cmp	r0, r3
   c6116:	b510      	push	{r4, lr}
   c6118:	db11      	blt.n	c613e <__any_on+0x32>
   c611a:	dd0a      	ble.n	c6132 <__any_on+0x26>
   c611c:	f011 011f 	ands.w	r1, r1, #31
   c6120:	d007      	beq.n	c6132 <__any_on+0x26>
   c6122:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c6126:	fa24 f001 	lsr.w	r0, r4, r1
   c612a:	fa00 f101 	lsl.w	r1, r0, r1
   c612e:	428c      	cmp	r4, r1
   c6130:	d10b      	bne.n	c614a <__any_on+0x3e>
   c6132:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c6136:	4293      	cmp	r3, r2
   c6138:	d803      	bhi.n	c6142 <__any_on+0x36>
   c613a:	2000      	movs	r0, #0
   c613c:	bd10      	pop	{r4, pc}
   c613e:	4603      	mov	r3, r0
   c6140:	e7f7      	b.n	c6132 <__any_on+0x26>
   c6142:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c6146:	2900      	cmp	r1, #0
   c6148:	d0f5      	beq.n	c6136 <__any_on+0x2a>
   c614a:	2001      	movs	r0, #1
   c614c:	e7f6      	b.n	c613c <__any_on+0x30>

000c614e <_calloc_r>:
   c614e:	b513      	push	{r0, r1, r4, lr}
   c6150:	434a      	muls	r2, r1
   c6152:	4611      	mov	r1, r2
   c6154:	9201      	str	r2, [sp, #4]
   c6156:	f7f7 fe97 	bl	bde88 <_malloc_r>
   c615a:	4604      	mov	r4, r0
   c615c:	b118      	cbz	r0, c6166 <_calloc_r+0x18>
   c615e:	9a01      	ldr	r2, [sp, #4]
   c6160:	2100      	movs	r1, #0
   c6162:	f7fd ff8d 	bl	c4080 <memset>
   c6166:	4620      	mov	r0, r4
   c6168:	b002      	add	sp, #8
   c616a:	bd10      	pop	{r4, pc}
   c616c:	0000      	movs	r0, r0
	...

000c6170 <nan>:
   c6170:	ed9f 0b01 	vldr	d0, [pc, #4]	; c6178 <nan+0x8>
   c6174:	4770      	bx	lr
   c6176:	bf00      	nop
   c6178:	00000000 	.word	0x00000000
   c617c:	7ff80000 	.word	0x7ff80000

000c6180 <__ascii_wctomb>:
   c6180:	b149      	cbz	r1, c6196 <__ascii_wctomb+0x16>
   c6182:	2aff      	cmp	r2, #255	; 0xff
   c6184:	bf85      	ittet	hi
   c6186:	238a      	movhi	r3, #138	; 0x8a
   c6188:	6003      	strhi	r3, [r0, #0]
   c618a:	700a      	strbls	r2, [r1, #0]
   c618c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c6190:	bf98      	it	ls
   c6192:	2001      	movls	r0, #1
   c6194:	4770      	bx	lr
   c6196:	4608      	mov	r0, r1
   c6198:	4770      	bx	lr
	...

000c619c <__aeabi_d2lz>:
   c619c:	b538      	push	{r3, r4, r5, lr}
   c619e:	2200      	movs	r2, #0
   c61a0:	2300      	movs	r3, #0
   c61a2:	4604      	mov	r4, r0
   c61a4:	460d      	mov	r5, r1
   c61a6:	f7fd fe29 	bl	c3dfc <__aeabi_dcmplt>
   c61aa:	b928      	cbnz	r0, c61b8 <__aeabi_d2lz+0x1c>
   c61ac:	4620      	mov	r0, r4
   c61ae:	4629      	mov	r1, r5
   c61b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c61b4:	f7fd bef8 	b.w	c3fa8 <__aeabi_d2ulz>
   c61b8:	4620      	mov	r0, r4
   c61ba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c61be:	f7fd fef3 	bl	c3fa8 <__aeabi_d2ulz>
   c61c2:	4240      	negs	r0, r0
   c61c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c61c8:	bd38      	pop	{r3, r4, r5, pc}
   c61ca:	bf00      	nop

000c61cc <dynalib_user>:
   c61cc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c61dc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c61ec:	7620 7269 7574 6c61 5300 6e65 6964 676e      virtual.Sending
   c61fc:	6120 7320 6174 7574 2073 7075 6164 6574      a status update
   c620c:	0021 6564 6166 6c75 2074 4d00 4253 4c00     !.default .MSB.L
   c621c:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
   c622c:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
   c623c:	6974 676e 2073 7325 7525 2520 2073 4f4d     tings %s%u %s MO
   c624c:	4544 7525 003e 6157 6e72 6e69 2c67 6d20     DE%u>.Warning, m
   c625c:	746f 726f 6320 6d6f 616d 646e 6820 7361     otor command has
   c626c:	6e20 746f 6220 6565 206e 6572 6563 7669      not been receiv
   c627c:	6465 6920 206e 766f 7265 2520 6d64 2c73     ed in over %dms,
   c628c:	6320 7475 6974 676e 6d20 746f 726f 0073      cutting motors.
   c629c:	6157 6e72 6e69 2c67 4720 5350 6f20 2072     Warning, GPS or 
   c62ac:	6f43 706d 7361 2073 6164 6174 6e20 746f     Compass data not
   c62bc:	6120 6176 6c69 6261 656c 6620 726f 6720      available for g
   c62cc:	6572 7461 7265 7420 6168 206e 6425 736d     reater than %dms
   c62dc:	202c 7865 7469 6e69 2067 7561 6f74 6f6e     , exiting autono
   c62ec:	6f6d 7375 6d20 646f 0065 575b 5241 5d4e     mous mode.[WARN]
   c62fc:	5820 6542 2065 654d 7373 6761 7365 6820      XBee Messages h
   c630c:	7661 2065 6f6e 2074 6562 6e65 7220 6365     ave not been rec
   c631c:	6965 6576 2064 6e69 2520 7364 202c 7361     eived in %ds, as
   c632c:	7573 696d 676e 5820 6542 2065 7369 7520     suming XBee is u
   c633c:	616e 6176 6c69 6261 656c 5b00 4157 4e52     navailable.[WARN
   c634c:	205d 4c42 2045 654d 7373 6761 7365 6820     ] BLE Messages h
   c635c:	7661 2065 6f6e 2074 6562 6e65 7220 6365     ave not been rec
   c636c:	6965 6576 2064 6e69 2520 7364 202c 7361     eived in %ds, as
   c637c:	7573 696d 676e 4220 454c 6920 2073 6e75     suming BLE is un
   c638c:	7661 6961 616c 6c62 0065 6843 6365 736b     available.Checks
   c639c:	6d75 203a 3025 7832 202c 3025 6433 5300     um: %02x, %03d.S
   c63ac:	7274 6e69 2067 654c 3a6e 2520 2c64 4320     tring Len: %d, C
   c63bc:	6568 6b63 7573 3a6d 2520 0064 575b 5241     hecksum: %d.[WAR
   c63cc:	5d4e 4d20 7365 6173 6567 4320 6568 6b63     N] Message Check
   c63dc:	7573 206d 6f44 7365 4e20 746f 4d20 7461     sum Does Not Mat
   c63ec:	6863 3a21 2520 0073 6157 6e72 6e69 2c67     ch!: %s.Warning,
   c63fc:	6320 6568 6b63 7573 206d 6f64 7365 6e20      checksum does n
   c640c:	746f 6d20 7461 6863 6100 6b63 6300 6c74     ot match.ack.ctl
   c641c:	2500 2073 7325 2520 2064 6425 2520 0064     .%s %s %d %d %d.
   c642c:	746d 0072 6552 6563 7669 6465 4d20 746f     mtr.Received Mot
   c643c:	726f 4320 6d6f 616d 646e 203a 534c 6570     or Command: LSpe
   c644c:	6465 253d 2c64 5352 6570 6465 253d 0064     ed=%d,RSpeed=%d.
   c645c:	6572 0071 7470 0073 505b 5455 5d53 5220     req.pts.[PUTS] R
   c646c:	6365 6965 6576 2064 7453 6972 676e 4320     eceived String C
   c647c:	6d6f 616d 646e 203a 7325 7300 6370 6800     ommand: %s.spc.h
   c648c:	6177 6100 7475 6400 706d 5b00 4e49 4f46     wa.aut.dmp.[INFO
   c649c:	205d 6552 6563 7669 6465 4c20 4554 4d20     ] Received LTE M
   c64ac:	7365 6173 6567 203a 7325 4e00 7765 4220     essage: %s.New B
   c64bc:	2054 6f43 6d6d 6e61 3a64 5b00 4e49 4f46     T Command:.[INFO
   c64cc:	205d 6552 6563 7669 6465 4220 454c 4d20     ] Received BLE M
   c64dc:	7365 6173 6567 203a 7325 4300 4843 6275     essage: %s.CCHub
   c64ec:	4500 7272 726f 202c 6f43 6c75 2064 6f6e     .Error, Could no
   c64fc:	2074 6e69 7469 6169 696c 657a 4720 5350     t initialize GPS
   c650c:	4c00 7073 3a64 2520 2064 7352 6470 203a     .Lspd: %d Rspd: 
   c651c:	6425 4820 6544 746c 203a 6425 4820 6964     %d HDelt: %d Hdi
   c652c:	7473 203a 3025 322e 2066 524d 203a 3025     st: %0.2f MR: %0
   c653c:	322e 0066 6152 2077 203a 6625 202c 6f43     .2f.Raw : %f, Co
   c654c:	706d 7361 2073 203a 6625 202c 7254 7661     mpass : %f, Trav
   c655c:	6c65 6820 3a64 2520 2c66 5420 4420 6c65     el hd: %f, T Del
   c656c:	6174 203a 6625 2500 3230 2564 3230 2564     ta: %f.%02d%02d%
   c657c:	3430 2564 3230 2564 3230 2564 3230 0064     04d%02d%02d%02d.
   c658c:	7325 252c 2c66 6625 252c 2c66 6625 252c     %s,%f,%f,%f,%f,%
   c659c:	2c66 6625 252c 0066 654e 2077 4258 6565     f,%f,%f.New XBee
   c65ac:	4320 6d6f 616d 646e 003a 495b 464e 5d4f      Command:.[INFO]
   c65bc:	5220 6365 6965 6576 2064 4258 6565 4d20      Received XBee M
   c65cc:	7365 6173 6567 203a 7325 4500 746e 7265     essage: %s.Enter
   c65dc:	6e69 2067 6144 6174 4f20 6666 6f6c 6461     ing Data Offload
   c65ec:	7265 4d20 646f 0065 002f 7245 6f72 2c72     er Mode./.Error,
   c65fc:	6320 756f 646c 6e20 746f 6f20 6570 206e      could not open 
   c660c:	6f72 746f 5320 2044 6163 6472 6420 7269     root SD card dir
   c661c:	6365 6f74 7972 5700 6961 6974 676e 6620     ectory.Waiting f
   c662c:	726f 4320 4843 6275 6320 6e6f 656e 7463     or CCHub connect
   c663c:	6f69 2e6e 2e2e 5300 6174 7472 6e69 2067     ion....Starting 
   c664c:	7274 6e61 6673 7265 2e2e 002e 6843 6365     transfer....Chec
   c665c:	696b 676e 6920 2066 6966 656c 2520 2073     king if file %s 
   c666c:	7369 6120 2e20 7363 2076 726f 2e20 7874     is a .csv or .tx
   c667c:	2e74 2e2e 2e00 7363 0076 6966 656c 6f64     t.....csv.filedo
   c668c:	656e 6600 6c69 6e65 6d61 0065 6553 646e     ne.filename.Send
   c669c:	6e69 2067 6f63 6d6d 6e61 2064 7325 4600     ing command %s.F
   c66ac:	6c69 2065 7325 6920 2073 2061 632e 7673     ile %s is a .csv
   c66bc:	6f20 2072 742e 7478 7020 6972 746e 6e69      or .txt printin
   c66cc:	2067 6164 6174 6600 6c69 6365 6d6f 0070     g data.filecomp.
   c66dc:	7325 3025 7832 4200 746f 6431 7461 4200     %s%02x.Bot1dat.B
   c66ec:	6425 4343 6e73 2573 2e30 6636 2520 2e30     %dCCsns%0.6f %0.
   c66fc:	6636 2520 2064 6425 2520 2064 6425 2520     6f %d %d %d %d %
   c670c:	2064 4200 6425 4241 7573 2570 2064 6425     d .B%dABsup%d %d
   c671c:	2520 362e 2066 2e25 6636 0020 3142 4343      %.6f %.6f .B1CC
   c672c:	7470 6273 6769 6f62 0074 6146 6c69 6465     ptsbigbot.Failed
   c673c:	7420 206f 6966 646e 4c20 5349 4d33 4c44      to find LIS3MDL
   c674c:	6320 6968 0070 494c 3353 444d 204c 6f46      chip.LIS3MDL Fo
   c675c:	6e75 2164 5700 7461 7265 6f42 0074 4c5f     und!.WaterBot._L
   c676c:	474f 742e 7478 4500 7272 726f 203a 6f63     OG.txt.Error: co
   c677c:	6c75 2064 6f6e 2074 6f63 6e6e 6365 2074     uld not connect 
   c678c:	6f74 5320 2044 6163 6472 0021 6954 656d     to SD card!.Time
   c679c:	4c2c 7461 7469 6475 2c65 6f4c 676e 7469     ,Latitude,Longit
   c67ac:	6475 2c65 6554 706d 7265 7461 7275 2c65     ude,Temperature,
   c67bc:	4870 442c 7369 6f73 766c 6465 4f20 2c32     pH,Dissolved O2,
   c67cc:	6f43 646e 6375 6974 6976 7974 3020 312e     Conductivity 0.1
   c67dc:	2c4b 6f43 646e 6375 6974 6976 7974 3120     K,Conductivity 1
   c67ec:	004b 495b 464e 5d4f 5720 7461 7265 6f42     K.[INFO] WaterBo
   c67fc:	2074 6425 203a 7453 7261 6574 2064 6f4c     t %d: Started Lo
   c680c:	6767 6e69 2167 7400 0078 7872 6f00 6666     gging!.tx.rx.off
   c681c:	6400 6762 0000 0000                         .dbg....

000c6824 <_ZTVN8particle11SPISettingsE>:
	...
   c682c:	4305 000b 40d1 000b 4175 000b               .C...@..uA..

000c6838 <_ZTV5Timer>:
	...
   c6840:	4471 000b 44c5 000b 41db 000b               qD...D...A..

000c684c <_ZTVN5spark10LogHandlerE>:
	...
   c685c:	40a9 000b 40d3 000b                         .@...@..

000c6864 <_ZTVN8particle9LEDStatusE>:
	...
   c686c:	4241 000b 425d 000b 40dd 000b               AB..]B...@..

000c6878 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c6880:	4271 000b 42a5 000b 0a8d 000c 40d5 000b     qB...B.......@..

000c6890 <_ZTV4File>:
	...
   c6898:	40f9 000b 4183 000b 4197 000b 4191 000b     .@...A...A...A..
   c68a8:	40df 000b 41bb 000b 41b5 000b 41af 000b     .@...A...A...A..
   c68b8:	3462 3032 3936 3531 642d 3463 2d62 3735     b4206915-dc4b-57
   c68c8:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c68d8:	3238 3062 6200 3234 3630 3139 2d34 6364     82b0.b4206914-dc
   c68e8:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c68f8:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c6908:	3331 642d 3463 2d62 3735 3334 632d 6238     13-dc4b-5743-c8b
   c6918:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c6928:	3234 3630 3139 2d32 6364 6234 352d 3437     4206912-dc4b-574
   c6938:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c6948:	6232 0030 3462 3032 3936 3031 642d 3463     2b0.b4206910-dc4
   c6958:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   c6968:	3765 3135 3238 3062 0000 0000               e75182b0....

000c6974 <CSWTCH.363>:
   c6974:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c6984:	ffff 00ff ff00 00ff ffff 0000 494c 3353     ............LIS3
   c6994:	444d 004c                                   MDL.

000c6998 <CSWTCH.26>:
   c6998:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c69a8 <_ZTV16Adafruit_LIS3MDL>:
	...
   c69b0:	7f4f 000b 7f99 000b 7f4d 000b 8049 000b     O.......M...I...
   c69c0:	7f51 000b 6573 5074 6361 656b 4374 6766     Q...setPacketCfg
   c69d0:	6150 6c79 616f 5364 7a69 3a65 5a20 7265     PayloadSize: Zer
   c69e0:	206f 6170 6c79 616f 5364 7a69 2165 7300     o payloadSize!.s
   c69f0:	7465 6150 6b63 7465 6643 5067 7961 6f6c     etPacketCfgPaylo
   c6a00:	6461 6953 657a 203a 4152 204d 6c61 6f6c     adSize: RAM allo
   c6a10:	2063 6166 6c69 6465 0021 6573 5074 6361     c failed!.setPac
   c6a20:	656b 4374 6766 6150 6c79 616f 5364 7a69     ketCfgPayloadSiz
   c6a30:	3a65 5220 4d41 7220 7365 7a69 2065 6166     e: RAM resize fa
   c6a40:	6c69 6465 0021 4e47 4747 0041 5047 5456     iled!.GNGGA.GPVT
   c6a50:	0047 4e47 5456 0047 5047 4d52 0043 4e47     G.GNVTG.GPRMC.GN
   c6a60:	4d52 0043 5047 445a 0041 4e47 445a 0041     RMC.GPZDA.GNZDA.
   c6a70:	5047 4747 0041 6573 646e 7053 4369 6d6f     GPGGA.sendSpiCom
   c6a80:	616d 646e 203a 6f6e 6d20 6d65 726f 2079     mand: no memory 
   c6a90:	6c61 6f6c 6163 6974 6e6f 6620 726f 5320     allocation for S
   c6aa0:	4950 4220 6675 6566 2172 7300 6e65 5364     PI Buffer!.sendS
   c6ab0:	6970 6f43 6d6d 6e61 3a64 0020 4c43 3a53     piCommand: .CLS:
   c6ac0:	4e00 5641 4100 4b43 4300 4746 4d00 4e4f     .NAV.ACK.CFG.MON
   c6ad0:	2000 4449 003a 5650 0054 4152 4554 5300     . ID:.PVT.RATE.S
   c6ae0:	5641 0045 4c20 6e65 203a 7830 2000 6150     AVE. Len: 0x. Pa
   c6af0:	6c79 616f 3a64 2000 6150 6c79 616f 3a64     yload:. Payload:
   c6b00:	4920 4e47 524f 4445 6300 6572 7461 4665      IGNORED.createF
   c6b10:	6c69 4265 6675 6566 3a72 5720 7261 696e     ileBuffer: Warni
   c6b20:	676e 202e 6966 656c 7542 6666 7265 6953     ng. fileBufferSi
   c6b30:	657a 6920 2073 657a 6f72 202e 6144 6174     ze is zero. Data
   c6b40:	6c20 676f 6967 676e 6920 2073 6f6e 2074      logging is not 
   c6b50:	6f70 7373 6269 656c 002e 7263 6165 6574     possible..create
   c6b60:	6946 656c 7542 6666 7265 203a 6157 6e72     FileBuffer: Warn
   c6b70:	6e69 2e67 4620 6c69 2065 7562 6666 7265     ing. File buffer
   c6b80:	6120 726c 6165 7964 6520 6978 7473 2e73      already exists.
   c6b90:	5320 696b 7070 6e69 2e67 2e2e 6300 6572      Skipping....cre
   c6ba0:	7461 4665 6c69 4265 6675 6566 3a72 5220     ateFileBuffer: R
   c6bb0:	4d41 6120 6c6c 636f 6620 6961 656c 2164     AM alloc failed!
   c6bc0:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c6bd0:	3a72 6620 6c69 4265 6675 6566 5372 7a69     r: fileBufferSiz
   c6be0:	2065 7369 203a 7300 6f74 6572 6150 6b63     e is: .storePack
   c6bf0:	7465 203a 6966 656c 6220 6675 6566 2072     et: file buffer 
   c6c00:	6f6e 2074 7661 6961 616c 6c62 2165 7300     not available!.s
   c6c10:	6f74 6572 6150 6b63 7465 203a 6e69 7573     torePacket: insu
   c6c20:	6666 6369 6569 746e 7320 6170 6563 6120     fficient space a
   c6c30:	6176 6c69 6261 656c 2021 6144 6174 7720     vailable! Data w
   c6c40:	6c69 206c 6562 6c20 736f 2174 7000 6f72     ill be lost!.pro
   c6c50:	6563 7373 4255 7058 6361 656b 3a74 7020     cessUBXpacket: p
   c6c60:	6361 656b 5574 5842 474d 4141 4b43 6920     acketUBXMGAACK i
   c6c70:	2073 7566 6c6c 202e 4341 204b 6977 6c6c     s full. ACK will
   c6c80:	6220 2065 6f6c 7473 0021 7270 636f 7365      be lost!.proces
   c6c90:	5573 5842 6170 6b63 7465 203a 6170 6b63     sUBXpacket: pack
   c6ca0:	7465 4255 4d58 4147 4244 2044 7369 6620     etUBXMGADBD is f
   c6cb0:	6c75 2e6c 4420 4442 6420 7461 2061 6977     ull. DBD data wi
   c6cc0:	6c6c 6220 2065 6f6c 7473 0021 7270 636f     ll be lost!.proc
   c6cd0:	7365 5573 5842 203a 6567 4d74 7861 6150     essUBX: getMaxPa
   c6ce0:	6c79 616f 5364 7a69 2065 6572 7574 6e72     yloadSize return
   c6cf0:	6465 5a20 5245 214f 2021 6c43 7361 3a73     ed ZERO!! Class:
   c6d00:	3020 0078 7270 636f 7365 5573 5842 203a      0x.processUBX: 
   c6d10:	414e 4b43 7220 6365 6965 6576 3a64 5220     NACK received: R
   c6d20:	7165 6575 7473 6465 4320 616c 7373 203a     equested Class: 
   c6d30:	7830 2000 6552 7571 7365 6574 2064 4449     0x. Requested ID
   c6d40:	203a 7830 7000 6f72 6563 7373 4255 3a58     : 0x.processUBX:
   c6d50:	6920 636e 6d6f 6e69 2067 6122 7475 6d6f      incoming "autom
   c6d60:	7461 6369 2022 656d 7373 6761 3a65 4320     atic" message: C
   c6d70:	616c 7373 203a 7830 4900 636e 6d6f 6e69     lass: 0x.Incomin
   c6d80:	3a67 5320 7a69 3a65 0020 5220 6365 6965     g: Size: . Recei
   c6d90:	6576 3a64 0020 6170 6b63 7465 6643 2067     ved: .packetCfg 
   c6da0:	6f6e 2077 6176 696c 0064 6170 6b63 7465     now valid.packet
   c6db0:	6341 206b 6f6e 2077 6176 696c 0064 6170     Ack now valid.pa
   c6dc0:	6b63 7465 6643 2067 6c63 7361 4173 646e     cketCfg classAnd
   c6dd0:	4449 616d 6374 0068 6170 6b63 7465 6341     IDmatch.packetAc
   c6de0:	206b 6c63 7361 4173 646e 4449 616d 6374     k classAndIDmatc
   c6df0:	0068 6843 6365 736b 6d75 6620 6961 656c     h.Checksum faile
   c6e00:	3a64 2000 6863 6365 736b 6d75 3a41 0020     d:. checksumA: .
   c6e10:	6320 6568 6b63 7573 426d 203a 2000 6f72      checksumB: . ro
   c6e20:	6c6c 6e69 4367 6568 6b63 7573 416d 203a     llingChecksumA: 
   c6e30:	2000 6f72 6c6c 6e69 4367 6568 6b63 7573     . rollingChecksu
   c6e40:	426d 203a 7000 6f72 6563 7373 4255 3a58     mB: .processUBX:
   c6e50:	6220 6675 6566 2072 766f 7265 7572 206e      buffer overrun 
   c6e60:	6564 6574 7463 6465 0021 7270 636f 7365     detected!.proces
   c6e70:	5573 5842 203a 6f63 6e75 6574 2072 6968     sUBX: counter hi
   c6e80:	2074 616d 6978 756d 5f6d 6170 6c79 616f     t maximum_payloa
   c6e90:	5f64 6973 657a 2b20 3620 0021 6120 7463     d_size + 6!. act
   c6ea0:	7669 5065 6361 656b 4274 6675 6566 3a72     ivePacketBuffer:
   c6eb0:	0020 6d20 7861 6d69 6d75 705f 7961 6f6c      . maximum_paylo
   c6ec0:	6461 735f 7a69 3a65 0020 7473 726f 4665     ad_size: .storeF
   c6ed0:	6c69 4265 7479 7365 203a 6966 656c 6220     ileBytes: file b
   c6ee0:	6675 6566 2072 6f6e 2074 7661 6961 616c     uffer not availa
   c6ef0:	6c62 2165 7300 6f74 6572 6946 656c 7942     ble!.storeFileBy
   c6f00:	6574 3a73 6920 736e 6675 6966 6963 6e65     tes: insufficien
   c6f10:	2074 7073 6361 2065 7661 6961 616c 6c62     t space availabl
   c6f20:	2165 4420 7461 2061 6977 6c6c 6220 2065     e! Data will be 
   c6f30:	6f6c 7473 0021 7270 636f 7365 3a73 6720     lost!.process: g
   c6f40:	7465 614d 5078 7961 6f6c 6461 6953 657a     etMaxPayloadSize
   c6f50:	7220 7465 7275 656e 2064 455a 4f52 2121      returned ZERO!!
   c6f60:	4320 616c 7373 203a 7830 7000 6f72 6563      Class: 0x.proce
   c6f70:	7373 203a 656d 6f6d 7972 6920 2073 6c61     ss: memory is al
   c6f80:	6572 6461 2079 6c61 6f6c 6163 6574 2064     ready allocated 
   c6f90:	6f66 2072 6170 6c79 616f 4164 7475 216f     for payloadAuto!
   c6fa0:	4420 6c65 7465 6e69 2e67 2e2e 7000 6f72      Deleting....pro
   c6fb0:	6563 7373 203a 656d 6f6d 7972 6120 6c6c     cess: memory all
   c6fc0:	636f 7461 6f69 206e 6166 6c69 6465 6620     ocation failed f
   c6fd0:	726f 2220 7561 6f74 616d 6974 2263 6d20     or "automatic" m
   c6fe0:	7365 6173 6567 203a 6c43 7361 3a73 3020     essage: Class: 0
   c6ff0:	0078 7270 636f 7365 3a73 2220 7561 6f74     x.process: "auto
   c7000:	616d 6974 2263 6d20 7365 6173 6567 6320     matic" message c
   c7010:	756f 646c 6f20 6576 7772 6972 6574 6420     ould overwrite d
   c7020:	7461 0061 7270 636f 7365 3a73 6920 636e     ata.process: inc
   c7030:	6d6f 6e69 2067 6122 7475 6d6f 7461 6369     oming "automatic
   c7040:	2022 656d 7373 6761 3a65 4320 616c 7373     " message: Class
   c7050:	203a 7830 7000 6f72 6563 7373 203a 455a     : 0x.process: ZE
   c7060:	4f52 4c20 4e45 5447 2048 6170 6b63 7465     RO LENGTH packet
   c7070:	7220 6365 6965 6576 3a64 4320 616c 7373      received: Class
   c7080:	203a 7830 7000 6f72 6563 7373 203a 4341     : 0x.process: AC
   c7090:	204b 6572 6563 7669 6465 7720 7469 2068     K received with 
   c70a0:	6c2e 6e65 2120 203d 3a32 4320 616c 7373     .len != 2: Class
   c70b0:	203a 7830 2000 656c 3a6e 0020 7270 636f     : 0x. len: .proc
   c70c0:	7365 3a73 4e20 454d 2041 7562 6666 7265     ess: NMEA buffer
   c70d0:	6920 2073 7566 6c6c 0021 7270 636f 7365      is full!.proces
   c70e0:	3a73 4e20 454d 2041 6863 6365 736b 6d75     s: NMEA checksum
   c70f0:	6620 6961 206c 3228 2129 4520 7078 6365      fail (2)! Expec
   c7100:	6574 2064 2000 6f47 2074 7000 6f72 6563     ted . Got .proce
   c7110:	7373 203a 4d4e 4145 6320 6568 6b63 7573     ss: NMEA checksu
   c7120:	206d 6166 6c69 2820 2931 0021 6863 6365     m fail (1)!.chec
   c7130:	556b 6c62 786f 3249 3a43 4920 4332 6520     kUbloxI2C: I2C e
   c7140:	7272 726f 203a 6e65 5464 6172 736e 696d     rror: endTransmi
   c7150:	7373 6f69 206e 6572 7574 6e72 6465 0020     ssion returned .
   c7160:	6863 6365 556b 6c62 786f 3249 3a43 4920     checkUbloxI2C: I
   c7170:	4332 6520 7272 726f 203a 6572 7571 7365     2C error: reques
   c7180:	4674 6f72 206d 7830 4446 7220 7465 7275     tFrom 0xFD retur
   c7190:	656e 2064 6300 6568 6b63 6255 6f6c 4978     ned .checkUbloxI
   c71a0:	4332 203a 4b4f 202c 657a 6f72 6220 7479     2C: OK, zero byt
   c71b0:	7365 6120 6176 6c69 6261 656c 6300 6568     es available.che
   c71c0:	6b63 6255 6f6c 4978 4332 203a 614c 6772     ckUbloxI2C: Larg
   c71d0:	2065 6170 6b63 7465 6f20 2066 2000 7962     e packet of . by
   c71e0:	6574 2073 6572 6563 7669 6465 6300 6568     tes received.che
   c71f0:	6b63 6255 6f6c 4978 4332 203a 6552 6461     ckUbloxI2C: Read
   c7200:	6e69 2067 2000 7962 6574 0073 6177 7469     ing . bytes.wait
   c7210:	6f46 4172 4b43 6552 7073 6e6f 6573 203a     ForACKResponse: 
   c7220:	6176 696c 2064 6164 6174 6120 646e 7620     valid data and v
   c7230:	6c61 6469 4120 4b43 7220 6365 6965 6576     alid ACK receive
   c7240:	2064 6661 6574 2072 2000 736d 6365 7700     d after . msec.w
   c7250:	6961 4674 726f 4341 524b 7365 6f70 736e     aitForACKRespons
   c7260:	3a65 6e20 206f 6164 6174 6120 646e 7620     e: no data and v
   c7270:	6c61 6469 4120 4b43 6120 7466 7265 0020     alid ACK after .
   c7280:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c7290:	6573 203a 6164 6174 6220 6965 676e 4f20     se: data being O
   c72a0:	4556 5752 4952 5454 4e45 6120 7466 7265     VERWRITTEN after
   c72b0:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c72c0:	6e6f 6573 203a 5243 2043 6166 6c69 6465     onse: CRC failed
   c72d0:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c72e0:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c72f0:	7720 7361 4e20 544f 4341 4e4b 574f 454c      was NOTACKNOWLE
   c7300:	4744 4445 2820 414e 4b43 2029 6661 6574     DGED (NACK) afte
   c7310:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c7320:	6f70 736e 3a65 5620 4c41 4449 6420 7461     ponse: VALID dat
   c7330:	2061 6e61 2064 4e49 4156 494c 2044 4341     a and INVALID AC
   c7340:	204b 6572 6563 7669 6465 6120 7466 7265     K received after
   c7350:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c7360:	6e6f 6573 203a 4e49 4156 494c 2044 6164     onse: INVALID da
   c7370:	6174 6120 646e 4920 564e 4c41 4449 4120     ta and INVALID A
   c7380:	4b43 7220 6365 6965 6576 2064 6661 6574     CK received afte
   c7390:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c73a0:	6f70 736e 3a65 5420 4d49 4f45 5455 7720     ponse: TIMEOUT w
   c73b0:	7469 2068 6176 696c 2064 6164 6174 6120     ith valid data a
   c73c0:	7466 7265 0020 6d20 6573 2e63 0020 6177     fter . msec. .wa
   c73d0:	7469 6f46 4172 4b43 6552 7073 6e6f 6573     itForACKResponse
   c73e0:	203a 4954 454d 554f 2054 6661 6574 2072     : TIMEOUT after 
   c73f0:	2000 736d 6365 002e 6177 7469 6f46 4e72     . msec..waitForN
   c7400:	416f 4b43 6552 7073 6e6f 6573 203a 6176     oACKResponse: va
   c7410:	696c 2064 6164 6174 7720 7469 2068 4c43     lid data with CL
   c7420:	2f53 4449 6d20 7461 6863 6120 7466 7265     S/ID match after
   c7430:	0020 6177 7469 6f46 4e72 416f 4b43 6552      .waitForNoACKRe
   c7440:	7073 6e6f 6573 203a 6164 6174 6220 6965     sponse: data bei
   c7450:	676e 4f20 4556 5752 4952 5454 4e45 6120     ng OVERWRITTEN a
   c7460:	7466 7265 0020 6177 7469 6f46 4e72 416f     fter .waitForNoA
   c7470:	4b43 6552 7073 6e6f 6573 203a 4c43 2f53     CKResponse: CLS/
   c7480:	4449 6d20 7461 6863 6220 7475 6620 6961     ID match but fai
   c7490:	656c 2064 5243 2043 6661 6574 2072 7700     led CRC after .w
   c74a0:	6961 4674 726f 6f4e 4341 524b 7365 6f70     aitForNoACKRespo
   c74b0:	736e 3a65 5420 4d49 4f45 5455 6120 7466     nse: TIMEOUT aft
   c74c0:	7265 0020 6d20 6573 2e63 4e20 206f 6170     er . msec. No pa
   c74d0:	6b63 7465 7220 6365 6965 6576 2e64 0a00     cket received...
   c74e0:	6553 646e 6e69 3a67 0020 6553 646e 4920     Sending: .Send I
   c74f0:	4332 4320 6d6f 616d 646e 6620 6961 656c     2C Command faile
   c7500:	0064 6573 646e 6f43 6d6d 6e61 3a64 5720     d.sendCommand: W
   c7510:	6961 6974 676e 6620 726f 4120 4b43 7220     aiting for ACK r
   c7520:	7365 6f70 736e 0065 6573 646e 6f43 6d6d     esponse.sendComm
   c7530:	6e61 3a64 5720 6961 6974 676e 6620 726f     and: Waiting for
   c7540:	4e20 206f 4341 204b 6572 7073 6e6f 6573      No ACK response
   c7550:	6900 696e 5074 6361 656b 5574 5842 4643     .initPacketUBXCF
   c7560:	5047 5452 203a 4152 204d 6c61 6f6c 2063     GPRT: RAM alloc 
   c7570:	6166 6c69 6465 0021 6562 6967 3a6e 6920     failed!.begin: i
   c7580:	4373 6e6f 656e 7463 6465 2d20 7320 6365     sConnected - sec
   c7590:	6e6f 2064 7461 6574 706d 0074 6562 6967     ond attempt.begi
   c75a0:	3a6e 6920 4373 6e6f 656e 7463 6465 2d20     n: isConnected -
   c75b0:	7420 6968 6472 6120 7474 6d65 7470 6200      third attempt.b
   c75c0:	6765 6e69 203a 6874 7269 2064 7461 6574     egin: third atte
   c75d0:	706d 2074 6166 6c69 6465 202e 7341 7573     mpt failed. Assu
   c75e0:	696d 676e 7320 6375 6563 7373 2e2e 002e     ming success....

000c75f0 <CSWTCH.334>:
   c75f0:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c7600:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c7610:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c7630:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c7658:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c76ac:	0000 0010 0004                              ......

000c76b2 <CSWTCH.335>:
   c76b2:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c76ce:	002c 0000 0000 0000 0010 0024               ,.........$.

000c76da <CSWTCH.336>:
   c76da:	2048 4124 7373 7265 6974 6e6f 6146 6c69     H $AssertionFail
   c76ea:	7275 2065 6166 736c 0065 6977 6972 676e     ure false.wiring
   c76fa:	622e 656c 5300 6174 7472 6420 7369 6f63     .ble.Start disco
   c770a:	6576 6972 676e 7320 7265 6976 6563 2e73     vering services.
   c771a:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   c772a:	2065 6168 5f6c 6c62 5f65 7473 6361 5f6b     e hal_ble_stack_
   c773a:	6e69 7469 6e28 6c75 706c 7274 2029 3d3d     init(nullptr) ==
   c774a:	5320 5359 4554 5f4d 5245 4f52 5f52 4f4e      SYSTEM_ERROR_NO
   c775a:	454e 5000 6565 2072 6564 6976 6563 6920     NE.Peer device i
   c776a:	2073 696d 7373 6e69 2167 4600 6961 656c     s missing!.Faile
   c777a:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   c778a:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   c779a:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   c77aa:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   c77ba:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   c77ca:	6f6d 6574 6420 7665 6369 2e65 4400 7075     mote device..Dup
   c77da:	696c 6163 6574 2064 6863 7261 6361 6574     licated characte
   c77ea:	6972 7473 6369 6320 6e61 6f6e 2074 6562     ristic cannot be
   c77fa:	6120 6464 6465 002e 6146 6c69 6465 7420      added..Failed t
   c780a:	206f 7061 6570 646e 6c20 636f 6c61 6320     o append local c
   c781a:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...
	...

000c782c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7834:	df25 000b df89 000b e05d 000b dfb3 000b     %.......].......
   c7844:	df29 000b                                   )...

000c7848 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7850:	df21 000b df97 000b df23 000b dfb9 000b     !.......#.......
   c7860:	df49 000b                                   I...

000c7864 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c786c:	df1f 000b dfa5 000b e819 000b dfbf 000b     ................
   c787c:	df69 000b                                   i...

000c7880 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c788c:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c789e <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c789e:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c78ae <_ZN8particle7BleUuid9BASE_UUIDE>:
   c78ae:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000c78c0 <_ZTVN5spark13CellularClassE>:
	...
   c78c8:	f2db 000b f2d1 000b f2c7 000b f27d 000b     ............}...
   c78d8:	f2bb 000b f2af 000b 0de5 000c 0ded 000c     ................
   c78e8:	f2a3 000b f29b 000b f291 000b f287 000b     ................
   c78f8:	0e1d 000c                                   ....

000c78fc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7904:	f315 000b f31b 000b f359 000b f329 000b     ........Y...)...
   c7914:	f317 000b                                   ....

000c7918 <_ZTVN5spark13EthernetClassE>:
	...
   c7920:	f8a3 000b f899 000b f88f 000b f885 000b     ................
   c7930:	f879 000b f86d 000b 0de5 000c 0ded 000c     y...m...........
   c7940:	f861 000b f859 000b f84f 000b f845 000b     a...Y...O...E...
   c7950:	0e1d 000c                                   ....

000c7954 <_ZTV7TwoWire>:
	...
   c795c:	f8c1 000b f90b 000b f8e3 000b f8c3 000b     ................
   c796c:	f8eb 000b f8f3 000b f8fb 000b f903 000b     ................

000c797c <_ZTV9IPAddress>:
	...
   c7984:	f9dd 000b f9cd 000b f9cf 000b 7525 7500     ............%u.u
   c7994:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   c79a4:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   c79b4:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   c79c4:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   c79d4:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   c79e4:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   c79f4:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
   c7a04:	6961 006c                                   ail.

000c7a08 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c7a10:	fed9 000b feff 000b febd 000b faeb 000b     ................

000c7a20 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c7a28:	0335 000c 034d 000c 0a8d 000c 40d5 000b     5...M........@..

000c7a38 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c7a40:	0361 000c 0375 000c 0c31 000c fec5 000b     a...u...1.......

000c7a50 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c7a58:	fed7 000b ff0d 000b 09f1 000c fec7 000b     ................

000c7a68 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c7a70:	fed5 000b ff1b 000b 029d 000c ff3d 000b     ............=...

000c7a80 <_ZTVN5spark12NetworkClassE>:
	...
   c7a88:	0da5 000c 0daf 000c 0db9 000c 0dc3 000c     ................
   c7a98:	0dcd 000c 0dd9 000c 0de5 000c 0ded 000c     ................
   c7aa8:	0df5 000c 0e01 000c 0e09 000c 0e13 000c     ................
   c7ab8:	0e1d 000c                                   ....

000c7abc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c7abc:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c7acc:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c7adc:	6d69 0065                                   ime.

000c7ae0 <_ZTV11USARTSerial>:
	...
   c7ae8:	1739 000c 17a5 000c 177d 000c 0f09 000c     9.......}.......
   c7af8:	174d 000c 1769 000c 175b 000c 1777 000c     M...i...[...w...
   c7b08:	173b 000c 173f 000c                         ;...?...

000c7b10 <_ZTV9USBSerial>:
	...
   c7b18:	17f7 000c 185f 000c 1835 000c 0f09 000c     ...._...5.......
   c7b28:	1827 000c 17f9 000c 1809 000c 1859 000c     '...........Y...
   c7b38:	1819 000c 17f1 000c                         ........

000c7b40 <_ZSt7nothrow>:
	...

000c7b41 <_ZTSSt19_Sp_make_shared_tag>:
   c7b41:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c7b51:	6572 5f64 6174 0067 0000                     red_tag....

000c7b5c <_ZTISt19_Sp_make_shared_tag>:
   c7b5c:	7b9c 000c 7b41 000c                         .{..A{..

000c7b64 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c7b64:	7bfc 000c 7b70 000c 7c20 000c               .{..p{.. |..

000c7b70 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c7b70:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c7b80:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c7b90:	0045 0000                                   E...

000c7b94 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c7b94:	0000 0000 7b64 000c 1c89 000c 1c9d 000c     ....d{..........
   c7ba4:	1e31 000c 1e31 000c 1d07 000c 1c49 000c     1...1.......I...
   c7bb4:	1cef 000c 1cb1 000c 1c7b 000c               ........{...

000c7bc0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c7bc0:	7bfc 000c 7bcc 000c 7b64 000c               .{...{..d{..

000c7bcc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c7bcc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c7bdc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c7bec:	666e 456f 0000 0000                         nfoE....

000c7bf4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c7bf4:	0000 0000 7bc0 000c 1d31 000c 1d45 000c     .....{..1...E...
   c7c04:	1e31 000c 1e31 000c 1d07 000c 1c49 000c     1...1.......I...
   c7c14:	1e05 000c 1d91 000c 1d59 000c               ........Y...

000c7c20 <_ZTISt9type_info>:
   c7c20:	7b9c 000c 7c28 000c                         .{..(|..

000c7c28 <_ZTSSt9type_info>:
   c7c28:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

000c7c38 <CSWTCH.8>:
   c7c38:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   c7c48:	21d2 7f33 d97c c002                         .!3.|...

000c7c50 <CSWTCH.9>:
   c7c50:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   c7c60:	2d18 5444 21fb c009                         .-DT.!..

000c7c68 <CSWTCH.8>:
   c7c68:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000c7c74 <CSWTCH.9>:
   c7c74:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000c7c80 <npio2_hw>:
   c7c80:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   c7c90:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   c7ca0:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   c7cb0:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   c7cc0:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   c7cd0:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   c7ce0:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   c7cf0:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000c7d00 <two_over_pi>:
   c7d00:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   c7d10:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   c7d20:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   c7d30:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   c7d40:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   c7d50:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   c7d60:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   c7d70:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   c7d80:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   c7d90:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   c7da0:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   c7db0:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   c7dc0:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   c7dd0:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   c7de0:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   c7df0:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   c7e00:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   c7e10:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   c7e20:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   c7e30:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   c7e40:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   c7e50:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   c7e60:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   c7e70:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   c7e80:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   c7e90:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   c7ea0:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   c7eb0:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   c7ec0:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   c7ed0:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   c7ee0:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   c7ef0:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   c7f00:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   c7f10:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   c7f20:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   c7f30:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   c7f40:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   c7f50:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   c7f60:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   c7f70:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   c7f80:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   c7f90:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   c7fa0:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   c7fb0:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   c7fc0:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   c7fd0:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   c7fe0:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   c7ff0:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   c8000:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   c8010:	008c 0000 006b 0000                         ....k...

000c8018 <PIo2>:
   c8018:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   c8028:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   c8038:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000c8044 <init_jk>:
   c8044:	0004 0000 0007 0000 0009 0000               ............

000c8050 <atanhi>:
   c8050:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   c8060:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000c8070 <atanlo>:
   c8070:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   c8080:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000c8090 <atanhi>:
   c8090:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000c80a0 <atanlo>:
   c80a0:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
   c80b0:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   c80c0:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   c80d0:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   c80e0:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   c80f0:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   c8100:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   c8110:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.
   c8120:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000c812c <fpi.1>:
   c812c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c813c:	0000 0000                                   ....

000c8140 <fpinan.0>:
   c8140:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c8158 <tinytens>:
   c8158:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c8168:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c8178:	6f43 64ac 0628 1168                         Co.d(.h.

000c8180 <_ctype_>:
   c8180:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c8190:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c81a0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c81b0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c81c0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c81d0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c81e0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c81f0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c8200:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c8280:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c8290:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c82a0:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c82b0:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c82c0:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c82d0:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c82e0:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c82f0:	632e 0000                                   .c..

000c82f4 <_C_numeric_locale>:
   c82f4:	6b9b 000c 79f3 000c dbe8 2003 4f50 4953     .k...y..... POSI
   c8304:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   c8314:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c8324:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c8334:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c8344:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c8354:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000c8360 <__mprec_bigtens>:
   c8360:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c8370:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c8380:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c8388 <__mprec_tens>:
   c8388:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c8398:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c83a8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c83b8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c83c8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c83d8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c83e8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c83f8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c8408:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c8418:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c8428:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c8438:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c8448:	9db4 79d9 7843 44ea                         ...yCx.D

000c8450 <p05.0>:
   c8450:	0005 0000 0019 0000 007d 0000               ........}...

000c845c <link_const_variable_data_end>:
   c845c:	000b64bd 	.word	0x000b64bd
   c8460:	000bf26d 	.word	0x000bf26d
   c8464:	000bf2e5 	.word	0x000bf2e5
   c8468:	000bf8ad 	.word	0x000bf8ad
   c846c:	000c0a7d 	.word	0x000c0a7d
   c8470:	000c0ef5 	.word	0x000c0ef5
   c8474:	000c1019 	.word	0x000c1019
   c8478:	000c1581 	.word	0x000c1581
   c847c:	000c1725 	.word	0x000c1725
